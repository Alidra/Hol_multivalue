Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_type_abbrevs.
Require Import hol_terms.
Definition term6 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) (x2 : nat) (x3 : nat) := (fun y0 : nat => ((@HAS_SIZE a0 x0 x2) /\ (@HAS_SIZE a1 x1 y0)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y1 : prod a0 a1 => exists y2 : a0, exists y3 : a1, @SETSPEC (prod a0 a1) y1 ((@IN a0 y2 x0) /\ (@IN a1 y3 x1)) (@pair a0 a1 y2 y3))) (Nat.mul x2 y0)) x3.
Definition term23 (a0 : Type') (x0 : Prop) := forall y0 : a0, x0.
Definition term14 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) := @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x1)) (@pair a0 a1 y1 y2))).
Definition term33 (a0 : Type') (a1 : Type') := forall y0 : a0 -> Prop, forall y1 : a1 -> Prop, forall y2 : nat, forall y3 : nat, ((@HAS_SIZE a0 y0 y2) /\ (@HAS_SIZE a1 y1 y3)) -> @HAS_SIZE (prod a0 a1) (@CROSS a1 a0 y0 y1) (Nat.mul y2 y3).
Definition term29 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) := forall y0 : a1 -> Prop, forall y1 : nat, forall y2 : nat, ((@HAS_SIZE a0 x0 y1) /\ (@HAS_SIZE a1 y0 y2)) -> @HAS_SIZE (prod a0 a1) (@CROSS a1 a0 x0 y0) (Nat.mul y1 y2).
Definition term0 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) := (fun y0 : a0 -> Prop => forall y1 : nat, forall y2 : a1 -> Prop, forall y3 : nat, ((@HAS_SIZE a0 y0 y1) /\ (@HAS_SIZE a1 y2 y3)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y4 : prod a0 a1 => exists y5 : a0, exists y6 : a1, @SETSPEC (prod a0 a1) y4 ((@IN a0 y5 y0) /\ (@IN a1 y6 y2)) (@pair a0 a1 y5 y6))) (Nat.mul y1 y3)) x0.
Definition term31 (a0 : Type') (x0 : Prop) := forall y0 : a0 -> Prop, x0.
Definition term17 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : nat) (x2 : a1 -> Prop) (x3 : nat) := imp ((@HAS_SIZE a0 x0 x1) /\ (@HAS_SIZE a1 x2 x3)).
Definition term13 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) := @HAS_SIZE (prod a0 a1) (@CROSS a1 a0 x0 x1).
Definition term27 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) := fun y0 : a1 -> Prop => forall y1 : nat, forall y2 : nat, ((@HAS_SIZE a0 x0 y1) /\ (@HAS_SIZE a1 y0 y2)) -> @HAS_SIZE (prod a0 a1) (@CROSS a1 a0 x0 y0) (Nat.mul y1 y2).
Definition term18 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) (x2 : nat) (x3 : nat) := ((@HAS_SIZE a0 x0 x2) /\ (@HAS_SIZE a1 x1 x3)) -> @HAS_SIZE (prod a0 a1) (@CROSS a1 a0 x0 x1) (Nat.mul x2 x3).
Definition term4 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : nat) (x2 : a1 -> Prop) := (fun y0 : a1 -> Prop => forall y1 : nat, ((@HAS_SIZE a0 x0 x1) /\ (@HAS_SIZE a1 y0 y1)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y2 : prod a0 a1 => exists y3 : a0, exists y4 : a1, @SETSPEC (prod a0 a1) y2 ((@IN a0 y3 x0) /\ (@IN a1 y4 y0)) (@pair a0 a1 y3 y4))) (Nat.mul x1 y1)) x2.
Definition term10 (a0 : Type') (a1 : Type') (x0 : a1 -> Prop) (x1 : a0 -> Prop) := (fun y0 : a0 -> Prop => (@CROSS a0 a1 x0 y0) = (@GSPEC (prod a1 a0) (fun y1 : prod a1 a0 => exists y2 : a1, exists y3 : a0, @SETSPEC (prod a1 a0) y1 ((@IN a1 y2 x0) /\ (@IN a0 y3 y0)) (@pair a1 a0 y2 y3)))) x1.
Definition term7 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) (x2 : nat) (x3 : nat) := ((@HAS_SIZE a0 x0 x2) /\ (@HAS_SIZE a1 x1 x3)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x1)) (@pair a0 a1 y1 y2))) (Nat.mul x2 x3).
Definition term19 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) (x2 : nat) := fun y0 : nat => ((@HAS_SIZE a0 x0 x2) /\ (@HAS_SIZE a1 x1 y0)) -> @HAS_SIZE (prod a0 a1) (@CROSS a1 a0 x0 x1) (Nat.mul x2 y0).
Definition term26 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) := forall y0 : nat, forall y1 : nat, ((@HAS_SIZE a0 x0 y0) /\ (@HAS_SIZE a1 x1 y1)) -> @HAS_SIZE (prod a0 a1) (@CROSS a1 a0 x0 x1) (Nat.mul y0 y1).
Definition term1 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) := forall y0 : nat, forall y1 : a1 -> Prop, forall y2 : nat, ((@HAS_SIZE a0 x0 y0) /\ (@HAS_SIZE a1 y1 y2)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y3 : prod a0 a1 => exists y4 : a0, exists y5 : a1, @SETSPEC (prod a0 a1) y3 ((@IN a0 y4 x0) /\ (@IN a1 y5 y1)) (@pair a0 a1 y4 y5))) (Nat.mul y0 y2).
Definition term22 := forall y0 : nat, True.
Definition term20 := fun y0 : nat => True.
Definition term28 (a0 : Type') := fun y0 : a0 -> Prop => True.
Definition term16 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) (x2 : nat) (x3 : nat) := @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x1)) (@pair a0 a1 y1 y2))) (Nat.mul x2 x3).
Definition term3 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : nat) := forall y0 : a1 -> Prop, forall y1 : nat, ((@HAS_SIZE a0 x0 x1) /\ (@HAS_SIZE a1 y0 y1)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y2 : prod a0 a1 => exists y3 : a0, exists y4 : a1, @SETSPEC (prod a0 a1) y2 ((@IN a0 y3 x0) /\ (@IN a1 y4 y0)) (@pair a0 a1 y3 y4))) (Nat.mul x1 y1).
Definition term9 (a0 : Type') (a1 : Type') (x0 : a1 -> Prop) := forall y0 : a0 -> Prop, (@CROSS a0 a1 x0 y0) = (@GSPEC (prod a1 a0) (fun y1 : prod a1 a0 => exists y2 : a1, exists y3 : a0, @SETSPEC (prod a1 a0) y1 ((@IN a1 y2 x0) /\ (@IN a0 y3 y0)) (@pair a1 a0 y2 y3))).
Definition term21 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) (x2 : nat) := forall y0 : nat, ((@HAS_SIZE a0 x0 x2) /\ (@HAS_SIZE a1 x1 y0)) -> @HAS_SIZE (prod a0 a1) (@CROSS a1 a0 x0 x1) (Nat.mul x2 y0).
Definition term5 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) (x2 : nat) := forall y0 : nat, ((@HAS_SIZE a0 x0 x2) /\ (@HAS_SIZE a1 x1 y0)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y1 : prod a0 a1 => exists y2 : a0, exists y3 : a1, @SETSPEC (prod a0 a1) y1 ((@IN a0 y2 x0) /\ (@IN a1 y3 x1)) (@pair a0 a1 y2 y3))) (Nat.mul x2 y0).
Definition term12 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) := @GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x1)) (@pair a0 a1 y1 y2)).
Definition term11 (a0 : Type') (a1 : Type') (x0 : a1 -> Prop) (x1 : a0 -> Prop) := @GSPEC (prod a1 a0) (fun y0 : prod a1 a0 => exists y1 : a1, exists y2 : a0, @SETSPEC (prod a1 a0) y0 ((@IN a1 y1 x0) /\ (@IN a0 y2 x1)) (@pair a1 a0 y1 y2)).
Definition term2 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : nat) := (fun y0 : nat => forall y1 : a1 -> Prop, forall y2 : nat, ((@HAS_SIZE a0 x0 y0) /\ (@HAS_SIZE a1 y1 y2)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y3 : prod a0 a1 => exists y4 : a0, exists y5 : a1, @SETSPEC (prod a0 a1) y3 ((@IN a0 y4 x0) /\ (@IN a1 y5 y1)) (@pair a0 a1 y4 y5))) (Nat.mul y0 y2)) x1.
Definition term24 (x0 : Prop) := forall y0 : nat, x0.
Definition term8 (a0 : Type') (a1 : Type') (x0 : a1 -> Prop) := (fun y0 : a1 -> Prop => forall y1 : a0 -> Prop, (@CROSS a0 a1 y0 y1) = (@GSPEC (prod a1 a0) (fun y2 : prod a1 a0 => exists y3 : a1, exists y4 : a0, @SETSPEC (prod a1 a0) y2 ((@IN a1 y3 y0) /\ (@IN a0 y4 y1)) (@pair a1 a0 y3 y4)))) x0.
Definition term32 (a0 : Type') (a1 : Type') := fun y0 : a0 -> Prop => forall y1 : a1 -> Prop, forall y2 : nat, forall y3 : nat, ((@HAS_SIZE a0 y0 y2) /\ (@HAS_SIZE a1 y1 y3)) -> @HAS_SIZE (prod a0 a1) (@CROSS a1 a0 y0 y1) (Nat.mul y2 y3).
Definition term15 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) (x2 : nat) (x3 : nat) := @HAS_SIZE (prod a0 a1) (@CROSS a1 a0 x0 x1) (Nat.mul x2 x3).
Definition term25 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) := fun y0 : nat => forall y1 : nat, ((@HAS_SIZE a0 x0 y0) /\ (@HAS_SIZE a1 x1 y1)) -> @HAS_SIZE (prod a0 a1) (@CROSS a1 a0 x0 x1) (Nat.mul y0 y1).
Definition term30 (a0 : Type') := forall y0 : a0 -> Prop, True.
