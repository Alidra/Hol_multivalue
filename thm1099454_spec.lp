require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_terms;
symbol lem1099454 [_25272] : Prf (= (@REPLICATE _25272) ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))) (fun num (fun _25272 (list _25272))))) (λ REPLICATE' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))) (fun num (fun _25272 (list _25272)))), (∀ (λ _17962 : El (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))), (∧ (∀ (λ x : El _25272, (= (REPLICATE' _17962 (NUMERAL _0) x) (@NIL _25272)))) (∀ (λ n : El num, (∀ (λ x : El _25272, (= (REPLICATE' _17962 (SUC n) x) ((@CONS _25272) x (REPLICATE' _17962 n x))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0))))))))))))))))));
