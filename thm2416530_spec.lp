require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_terms;
symbol lem2416530 (ly : El int) (rx : El int) (lx : El int) (ry : El int) (b : El int) (a : El int) (c : El int) (d : El int) (p : El num) (y : El int) (z : El int) (x : El int) (q : El num) : Prf (∧ (= (int_mul a (int_of_num (NUMERAL _0))) (int_of_num (NUMERAL _0))) (∧ (= (int_mul (int_of_num (NUMERAL (BIT1 _0))) a) a) (∧ (= (int_mul a (int_of_num (NUMERAL (BIT1 _0)))) a) (∧ (= (int_mul (int_mul lx ly) (int_mul rx ry)) (int_mul (int_mul lx rx) (int_mul ly ry))) (∧ (= (int_mul (int_mul lx ly) (int_mul rx ry)) (int_mul lx (int_mul ly (int_mul rx ry)))) (∧ (= (int_mul (int_mul lx ly) (int_mul rx ry)) (int_mul rx (int_mul (int_mul lx ly) ry))) (∧ (= (int_mul (int_mul lx ly) rx) (int_mul (int_mul lx rx) ly)) (∧ (= (int_mul (int_mul lx ly) rx) (int_mul lx (int_mul ly rx))) (∧ (= (int_mul lx rx) (int_mul rx lx)) (∧ (= (int_mul lx (int_mul rx ry)) (int_mul (int_mul lx rx) ry)) (∧ (= (int_mul lx (int_mul rx ry)) (int_mul rx (int_mul lx ry))) (∧ (= (int_add (int_add a b) (int_add c d)) (int_add (int_add a c) (int_add b d))) (∧ (= (int_add (int_add a b) c) (int_add a (int_add b c))) (∧ (= (int_add a (int_add c d)) (int_add c (int_add a d))) (∧ (= (int_add (int_add a b) c) (int_add (int_add a c) b)) (∧ (= (int_add a c) (int_add c a)) (∧ (= (int_add a (int_add c d)) (int_add (int_add a c) d)) (∧ (= (int_mul (int_pow x p) (int_pow x q)) (int_pow x (+ p q))) (∧ (= (int_mul x (int_pow x q)) (int_pow x (SUC q))) (∧ (= (int_mul (int_pow x q) x) (int_pow x (SUC q))) (∧ (= (int_mul x x) (int_pow x (NUMERAL (BIT0 (BIT1 _0))))) (∧ (= (int_pow (int_mul x y) q) (int_mul (int_pow x q) (int_pow y q))) (∧ (= (int_pow (int_pow x p) q) (int_pow x (* p q))) (∧ (= (int_pow x (NUMERAL _0)) (int_of_num (NUMERAL (BIT1 _0)))) (∧ (= (int_pow x (NUMERAL (BIT1 _0))) x) (∧ (= (int_mul x (int_add y z)) (int_add (int_mul x y) (int_mul x z))) (= (int_pow x (SUC q)) (int_mul x (int_pow x q)))))))))))))))))))))))))))));
