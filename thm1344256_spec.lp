require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_terms;
symbol lem1344256 : Prf (= real_pow ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun real (fun num real)))) (λ real_pow' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun real (fun num real))), (∀ (λ _23958 : El (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))), (∧ (∀ (λ x : El real, (= (real_pow' _23958 x (NUMERAL _0)) (real_of_num (NUMERAL (BIT1 _0)))))) (∀ (λ x : El real, (∀ (λ n : El num, (= (real_pow' _23958 x (SUC n)) (real_mul x (real_pow' _23958 x n))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))))))))))));
