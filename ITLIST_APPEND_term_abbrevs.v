Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_type_abbrevs.
Require Import hol_terms.
Definition term66 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) := forall y0 : a0, forall y1 : list a1, forall y2 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y1 y2) y0) = (@ITLIST a0 a1 x0 y1 (@ITLIST a0 a1 x0 y2 y0)).
Definition term43 (a0 : Type') := forall y0 : a0, forall y1 : list a0, forall y2 : list a0, (@List.app a0 (@cons a0 y0 y1) y2) = (@cons a0 y0 (@List.app a0 y1 y2)).
Definition term54 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a1) (x2 : list a1) (x3 : list a1) := @ITLIST a0 a1 x0 (@List.app a1 (@cons a1 x1 x2) x3).
Definition term15 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) (x2 : a1) := fun y0 : list a1 => ((fun y1 : list a1 => forall y2 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y1 y2) x1) = (@ITLIST a0 a1 x0 y1 (@ITLIST a0 a1 x0 y2 x1))) y0) -> (fun y1 : list a1 => forall y2 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y1 y2) x1) = (@ITLIST a0 a1 x0 y1 (@ITLIST a0 a1 x0 y2 x1))) (@cons a1 x2 y0).
Definition term49 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : list a0) := @List.app a0 (@cons a0 x0 x1) x2.
Definition term64 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : list a1) (x2 : type1467 a0 a1) (x3 : list a1) (x4 : a0) := @ITLIST a0 a1 x2 (@cons a1 x0 x1) (@ITLIST a0 a1 x2 x3 x4).
Definition term24 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) := (forall y0 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 (@nil a1) y0) x1) = (@ITLIST a0 a1 x0 (@nil a1) (@ITLIST a0 a1 x0 y0 x1))) /\ (forall y0 : a1, forall y1 : list a1, (forall y2 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y1 y2) x1) = (@ITLIST a0 a1 x0 y1 (@ITLIST a0 a1 x0 y2 x1))) -> forall y2 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 (@cons a1 y0 y1) y2) x1) = (@ITLIST a0 a1 x0 (@cons a1 y0 y1) (@ITLIST a0 a1 x0 y2 x1))).
Definition term47 (a0 : Type') (x0 : a0) (x1 : list a0) := forall y0 : list a0, (@List.app a0 (@cons a0 x0 x1) y0) = (@cons a0 x0 (@List.app a0 x1 y0)).
Definition term25 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) := imp (((fun y0 : list a1 => forall y1 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y0 y1) x1) = (@ITLIST a0 a1 x0 y0 (@ITLIST a0 a1 x0 y1 x1))) (@nil a1)) /\ (forall y0 : a1, forall y1 : list a1, ((fun y2 : list a1 => forall y3 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y2 y3) x1) = (@ITLIST a0 a1 x0 y2 (@ITLIST a0 a1 x0 y3 x1))) y1) -> (fun y2 : list a1 => forall y3 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y2 y3) x1) = (@ITLIST a0 a1 x0 y2 (@ITLIST a0 a1 x0 y3 x1))) (@cons a1 y0 y1))).
Definition term41 (a0 : Type') (x0 : Prop) := forall y0 : a0, x0.
Definition term57 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a1) (x2 : list a1) (x3 : list a1) (x4 : a0) := @ITLIST a0 a1 x0 (@cons a1 x1 (@List.app a1 x2 x3)) x4.
Definition term55 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a1) (x2 : list a1) (x3 : list a1) := @ITLIST a0 a1 x0 (@cons a1 x1 (@List.app a1 x2 x3)).
Definition term5 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) := and ((fun y0 : list a1 => forall y1 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y0 y1) x1) = (@ITLIST a0 a1 x0 y0 (@ITLIST a0 a1 x0 y1 x1))) (@nil a1)).
Definition term1 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) := (((fun y0 : list a1 => forall y1 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y0 y1) x1) = (@ITLIST a0 a1 x0 y0 (@ITLIST a0 a1 x0 y1 x1))) (@nil a1)) /\ (forall y0 : a1, forall y1 : list a1, ((fun y2 : list a1 => forall y3 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y2 y3) x1) = (@ITLIST a0 a1 x0 y2 (@ITLIST a0 a1 x0 y3 x1))) y1) -> (fun y2 : list a1 => forall y3 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y2 y3) x1) = (@ITLIST a0 a1 x0 y2 (@ITLIST a0 a1 x0 y3 x1))) (@cons a1 y0 y1))) -> forall y0 : list a1, (fun y1 : list a1 => forall y2 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y1 y2) x1) = (@ITLIST a0 a1 x0 y1 (@ITLIST a0 a1 x0 y2 x1))) y0.
Definition term18 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : type1467 a0 a1) (x2 : a0) := forall y0 : list a1, (forall y1 : list a1, (@ITLIST a0 a1 x1 (@List.app a1 y0 y1) x2) = (@ITLIST a0 a1 x1 y0 (@ITLIST a0 a1 x1 y1 x2))) -> forall y1 : list a1, (@ITLIST a0 a1 x1 (@List.app a1 (@cons a1 x0 y0) y1) x2) = (@ITLIST a0 a1 x1 (@cons a1 x0 y0) (@ITLIST a0 a1 x1 y1 x2)).
Definition term0 (a0 : Type') (x0 : type1143 a0) := ((x0 (@nil a0)) /\ (forall y0 : a0, forall y1 : list a0, (x0 y1) -> x0 (@cons a0 y0 y1))) -> forall y0 : list a0, x0 y0.
Definition term45 (a0 : Type') (x0 : a0) := forall y0 : list a0, forall y1 : list a0, (@List.app a0 (@cons a0 x0 y0) y1) = (@cons a0 x0 (@List.app a0 y0 y1)).
Definition term29 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) := forall y0 : list a1, forall y1 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y0 y1) x1) = (@ITLIST a0 a1 x0 y0 (@ITLIST a0 a1 x0 y1 x1)).
Definition term60 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : type1467 a0 a1) (x2 : list a1) (x3 : list a1) (x4 : a0) := x1 x0 (@ITLIST a0 a1 x1 (@List.app a1 x2 x3) x4).
Definition term11 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) (x2 : a1) (x3 : list a1) := (fun y0 : list a1 => forall y1 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y0 y1) x1) = (@ITLIST a0 a1 x0 y0 (@ITLIST a0 a1 x0 y1 x1))) (@cons a1 x2 x3).
Definition term44 (a0 : Type') (x0 : a0) := (fun y0 : a0 => forall y1 : list a0, forall y2 : list a0, (@List.app a0 (@cons a0 y0 y1) y2) = (@cons a0 y0 (@List.app a0 y1 y2))) x0.
Definition term40 (a0 : Type') := forall y0 : list a0, True.
Definition term53 (a0 : Type') (a1 : Type') (x0 : list a1) (x1 : type1467 a0 a1) (x2 : list a1) (x3 : a0) := @ITLIST a0 a1 x1 x0 (@ITLIST a0 a1 x1 x2 x3).
Definition term28 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) := forall y0 : list a1, (fun y1 : list a1 => forall y2 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y1 y2) x1) = (@ITLIST a0 a1 x0 y1 (@ITLIST a0 a1 x0 y2 x1))) y0.
Definition term38 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) := fun y0 : list a1 => (@ITLIST a0 a1 x0 (@List.app a1 (@nil a1) y0) x1) = (@ITLIST a0 a1 x0 (@nil a1) (@ITLIST a0 a1 x0 y0 x1)).
Definition term32 (a0 : Type') (x0 : list a0) := (fun y0 : list a0 => (@List.app a0 (@nil a0) y0) = y0) x0.
Definition term30 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) := ((forall y0 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 (@nil a1) y0) x1) = (@ITLIST a0 a1 x0 (@nil a1) (@ITLIST a0 a1 x0 y0 x1))) /\ (forall y0 : a1, forall y1 : list a1, (forall y2 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y1 y2) x1) = (@ITLIST a0 a1 x0 y1 (@ITLIST a0 a1 x0 y2 x1))) -> forall y2 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 (@cons a1 y0 y1) y2) x1) = (@ITLIST a0 a1 x0 (@cons a1 y0 y1) (@ITLIST a0 a1 x0 y2 x1)))) -> forall y0 : list a1, forall y1 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y0 y1) x1) = (@ITLIST a0 a1 x0 y0 (@ITLIST a0 a1 x0 y1 x1)).
Definition term26 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) := imp ((forall y0 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 (@nil a1) y0) x1) = (@ITLIST a0 a1 x0 (@nil a1) (@ITLIST a0 a1 x0 y0 x1))) /\ (forall y0 : a1, forall y1 : list a1, (forall y2 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y1 y2) x1) = (@ITLIST a0 a1 x0 y1 (@ITLIST a0 a1 x0 y2 x1))) -> forall y2 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 (@cons a1 y0 y1) y2) x1) = (@ITLIST a0 a1 x0 (@cons a1 y0 y1) (@ITLIST a0 a1 x0 y2 x1)))).
Definition term59 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : type1467 a0 a1) (x2 : list a1) (x3 : a0) := x1 x0 (@ITLIST a0 a1 x1 x2 x3).
Definition term17 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) (x2 : a1) := forall y0 : list a1, ((fun y1 : list a1 => forall y2 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y1 y2) x1) = (@ITLIST a0 a1 x0 y1 (@ITLIST a0 a1 x0 y2 x1))) y0) -> (fun y1 : list a1 => forall y2 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y1 y2) x1) = (@ITLIST a0 a1 x0 y1 (@ITLIST a0 a1 x0 y2 x1))) (@cons a1 x2 y0).
Definition term22 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) := forall y0 : a1, forall y1 : list a1, (forall y2 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y1 y2) x1) = (@ITLIST a0 a1 x0 y1 (@ITLIST a0 a1 x0 y2 x1))) -> forall y2 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 (@cons a1 y0 y1) y2) x1) = (@ITLIST a0 a1 x0 (@cons a1 y0 y1) (@ITLIST a0 a1 x0 y2 x1)).
Definition term21 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) := forall y0 : a1, forall y1 : list a1, ((fun y2 : list a1 => forall y3 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y2 y3) x1) = (@ITLIST a0 a1 x0 y2 (@ITLIST a0 a1 x0 y3 x1))) y1) -> (fun y2 : list a1 => forall y3 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y2 y3) x1) = (@ITLIST a0 a1 x0 y2 (@ITLIST a0 a1 x0 y3 x1))) (@cons a1 y0 y1).
Definition term31 (a0 : Type') := forall y0 : list a0, (@List.app a0 (@nil a0) y0) = y0.
Definition term10 (a0 : Type') (a1 : Type') (x0 : list a1) (x1 : type1467 a0 a1) (x2 : a0) := imp (forall y0 : list a1, (@ITLIST a0 a1 x1 (@List.app a1 x0 y0) x2) = (@ITLIST a0 a1 x1 x0 (@ITLIST a0 a1 x1 y0 x2))).
Definition term50 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : list a0) := @cons a0 x0 (@List.app a0 x1 x2).
Definition term33 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : list a1) := @ITLIST a0 a1 x0 (@List.app a1 (@nil a1) x1).
Definition term46 (a0 : Type') (x0 : a0) (x1 : list a0) := (fun y0 : list a0 => forall y1 : list a0, (@List.app a0 (@cons a0 x0 y0) y1) = (@cons a0 x0 (@List.app a0 y0 y1))) x1.
Definition term9 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) (x2 : list a1) := imp ((fun y0 : list a1 => forall y1 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y0 y1) x1) = (@ITLIST a0 a1 x0 y0 (@ITLIST a0 a1 x0 y1 x1))) x2).
Definition term8 (a0 : Type') (a1 : Type') (x0 : list a1) (x1 : type1467 a0 a1) (x2 : a0) := forall y0 : list a1, (@ITLIST a0 a1 x1 (@List.app a1 x0 y0) x2) = (@ITLIST a0 a1 x1 x0 (@ITLIST a0 a1 x1 y0 x2)).
Definition term37 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : list a1) (x2 : a0) := @ITLIST a0 a1 x0 (@nil a1) (@ITLIST a0 a1 x0 x1 x2).
Definition term12 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : list a1) (x2 : type1467 a0 a1) (x3 : a0) := forall y0 : list a1, (@ITLIST a0 a1 x2 (@List.app a1 (@cons a1 x0 x1) y0) x3) = (@ITLIST a0 a1 x2 (@cons a1 x0 x1) (@ITLIST a0 a1 x2 y0 x3)).
Definition term23 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) := ((fun y0 : list a1 => forall y1 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y0 y1) x1) = (@ITLIST a0 a1 x0 y0 (@ITLIST a0 a1 x0 y1 x1))) (@nil a1)) /\ (forall y0 : a1, forall y1 : list a1, ((fun y2 : list a1 => forall y3 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y2 y3) x1) = (@ITLIST a0 a1 x0 y2 (@ITLIST a0 a1 x0 y3 x1))) y1) -> (fun y2 : list a1 => forall y3 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y2 y3) x1) = (@ITLIST a0 a1 x0 y2 (@ITLIST a0 a1 x0 y3 x1))) (@cons a1 y0 y1)).
Definition term35 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : list a1) (x2 : a0) := @eq a0 (@ITLIST a0 a1 x0 (@List.app a1 (@nil a1) x1) x2).
Definition term16 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : type1467 a0 a1) (x2 : a0) := fun y0 : list a1 => (forall y1 : list a1, (@ITLIST a0 a1 x1 (@List.app a1 y0 y1) x2) = (@ITLIST a0 a1 x1 y0 (@ITLIST a0 a1 x1 y1 x2))) -> forall y1 : list a1, (@ITLIST a0 a1 x1 (@List.app a1 (@cons a1 x0 y0) y1) x2) = (@ITLIST a0 a1 x1 (@cons a1 x0 y0) (@ITLIST a0 a1 x1 y1 x2)).
Definition term61 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : list a1) (x2 : type1467 a0 a1) (x3 : list a1) (x4 : a0) := x2 x0 (@ITLIST a0 a1 x2 x1 (@ITLIST a0 a1 x2 x3 x4)).
Definition term67 (a0 : Type') (a1 : Type') := forall y0 : type1467 a0 a1, forall y1 : a0, forall y2 : list a1, forall y3 : list a1, (@ITLIST a0 a1 y0 (@List.app a1 y2 y3) y1) = (@ITLIST a0 a1 y0 y2 (@ITLIST a0 a1 y0 y3 y1)).
Definition term20 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) := fun y0 : a1 => forall y1 : list a1, (forall y2 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y1 y2) x1) = (@ITLIST a0 a1 x0 y1 (@ITLIST a0 a1 x0 y2 x1))) -> forall y2 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 (@cons a1 y0 y1) y2) x1) = (@ITLIST a0 a1 x0 (@cons a1 y0 y1) (@ITLIST a0 a1 x0 y2 x1)).
Definition term39 (a0 : Type') := fun y0 : list a0 => True.
Definition term62 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a1) (x2 : list a1) (x3 : list a1) (x4 : a0) := @eq a0 (@ITLIST a0 a1 x0 (@List.app a1 (@cons a1 x1 x2) x3) x4).
Definition term56 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a1) (x2 : list a1) (x3 : list a1) (x4 : a0) := @ITLIST a0 a1 x0 (@List.app a1 (@cons a1 x1 x2) x3) x4.
Definition term19 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) := fun y0 : a1 => forall y1 : list a1, ((fun y2 : list a1 => forall y3 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y2 y3) x1) = (@ITLIST a0 a1 x0 y2 (@ITLIST a0 a1 x0 y3 x1))) y1) -> (fun y2 : list a1 => forall y3 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y2 y3) x1) = (@ITLIST a0 a1 x0 y2 (@ITLIST a0 a1 x0 y3 x1))) (@cons a1 y0 y1).
Definition term58 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a1) (x2 : list a1) (x3 : a0) := @ITLIST a0 a1 x0 (@cons a1 x1 x2) x3.
Definition term51 (a0 : Type') (a1 : Type') (x0 : list a1) (x1 : type1467 a0 a1) (x2 : a0) (x3 : list a1) := (fun y0 : list a1 => (@ITLIST a0 a1 x1 (@List.app a1 x0 y0) x2) = (@ITLIST a0 a1 x1 x0 (@ITLIST a0 a1 x1 y0 x2))) x3.
Definition term63 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : list a1) (x2 : type1467 a0 a1) (x3 : list a1) (x4 : a0) := @eq a0 (x2 x0 (@ITLIST a0 a1 x2 x1 (@ITLIST a0 a1 x2 x3 x4))).
Definition term42 (a0 : Type') (x0 : Prop) := forall y0 : list a0, x0.
Definition term52 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : list a1) (x2 : list a1) (x3 : a0) := @ITLIST a0 a1 x0 (@List.app a1 x1 x2) x3.
Definition term48 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : list a0) := (fun y0 : list a0 => (@List.app a0 (@cons a0 x0 x1) y0) = (@cons a0 x0 (@List.app a0 x1 y0))) x2.
Definition term7 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) (x2 : list a1) := (fun y0 : list a1 => forall y1 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y0 y1) x1) = (@ITLIST a0 a1 x0 y0 (@ITLIST a0 a1 x0 y1 x1))) x2.
Definition term27 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) := fun y0 : list a1 => (fun y1 : list a1 => forall y2 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y1 y2) x1) = (@ITLIST a0 a1 x0 y1 (@ITLIST a0 a1 x0 y2 x1))) y0.
Definition term2 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) := fun y0 : list a1 => forall y1 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y0 y1) x1) = (@ITLIST a0 a1 x0 y0 (@ITLIST a0 a1 x0 y1 x1)).
Definition term6 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) := and (forall y0 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 (@nil a1) y0) x1) = (@ITLIST a0 a1 x0 (@nil a1) (@ITLIST a0 a1 x0 y0 x1))).
Definition term4 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) := forall y0 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 (@nil a1) y0) x1) = (@ITLIST a0 a1 x0 (@nil a1) (@ITLIST a0 a1 x0 y0 x1)).
Definition term36 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : list a1) (x2 : a0) := @eq a0 (@ITLIST a0 a1 x0 x1 x2).
Definition term65 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : list a1) (x2 : type1467 a0 a1) (x3 : a0) := fun y0 : list a1 => (@ITLIST a0 a1 x2 (@List.app a1 (@cons a1 x0 x1) y0) x3) = (@ITLIST a0 a1 x2 (@cons a1 x0 x1) (@ITLIST a0 a1 x2 y0 x3)).
Definition term14 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : list a1) (x2 : type1467 a0 a1) (x3 : a0) := (forall y0 : list a1, (@ITLIST a0 a1 x2 (@List.app a1 x1 y0) x3) = (@ITLIST a0 a1 x2 x1 (@ITLIST a0 a1 x2 y0 x3))) -> forall y0 : list a1, (@ITLIST a0 a1 x2 (@List.app a1 (@cons a1 x0 x1) y0) x3) = (@ITLIST a0 a1 x2 (@cons a1 x0 x1) (@ITLIST a0 a1 x2 y0 x3)).
Definition term3 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) := (fun y0 : list a1 => forall y1 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y0 y1) x1) = (@ITLIST a0 a1 x0 y0 (@ITLIST a0 a1 x0 y1 x1))) (@nil a1).
Definition term34 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : list a1) (x2 : a0) := @ITLIST a0 a1 x0 (@List.app a1 (@nil a1) x1) x2.
Definition term13 (a0 : Type') (a1 : Type') (x0 : type1467 a0 a1) (x1 : a0) (x2 : a1) (x3 : list a1) := ((fun y0 : list a1 => forall y1 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y0 y1) x1) = (@ITLIST a0 a1 x0 y0 (@ITLIST a0 a1 x0 y1 x1))) x3) -> (fun y0 : list a1 => forall y1 : list a1, (@ITLIST a0 a1 x0 (@List.app a1 y0 y1) x1) = (@ITLIST a0 a1 x0 y0 (@ITLIST a0 a1 x0 y1 x1))) (@cons a1 x2 x3).
