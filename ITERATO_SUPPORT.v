Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_terms.
Require Import hol_axioms.
Require Import hol_type_abbrevs.
Require Import ITERATO_SUPPORT_term_abbrevs.
Require Import CONJ_ASSOC_spec.
Require Import thm0_spec.
Require Import thm10578_spec.
Require Import thm10597_spec.
Require Import thm12653_spec.
Require Import thm13473_spec.
Require Import thm16474_spec.
Require Import thm16506_spec.
Require Import thm16507_spec.
Require Import thm16933_spec.
Require Import thm17045_spec.
Require Import thm17265_spec.
Require Import thm17362_spec.
Require Import thm17646_spec.
Require Import thm17784_spec.
Require Import thm1834_spec.
Require Import thm18392_spec.
Require Import thm18394_spec.
Require Import thm1845_spec.
Require Import thm1857_spec.
Require Import thm1862_spec.
Require Import thm1863_spec.
Require Import thm18898_spec.
Require Import thm18899_spec.
Require Import thm18904_spec.
Require Import thm18905_spec.
Require Import thm18910_spec.
Require Import thm18911_spec.
Require Import thm18928_spec.
Require Import thm18929_spec.
Require Import thm18946_spec.
Require Import thm18947_spec.
Require Import thm18952_spec.
Require Import thm18953_spec.
Require Import thm19732_spec.
Require Import thm19792_spec.
Require Import thm20230_spec.
Require Import thm20661_spec.
Require Import thm20662_spec.
Require Import thm21021_spec.
Require Import thm21114_spec.
Require Import thm21182_spec.
Require Import thm21386_spec.
Require Import thm3184736_spec.
Require Import thm3184739_spec.
Require Import thm3211609_spec.
Require Import thm3211610_spec.
Require Import thm3211640_spec.
Require Import thm3211641_spec.
Require Import thm3211683_spec.
Require Import thm3211684_spec.
Require Import thm3211692_spec.
Require Import thm3211693_spec.
Require Import thm3211701_spec.
Require Import thm3211702_spec.
Require Import thm3211729_spec.
Require Import thm3211730_spec.
Require Import thm3211756_spec.
Require Import thm3211757_spec.
Require Import thm51_spec.
Require Import thm57691_spec.
Require Import thm57692_spec.
Require Import thm57694_spec.
Require Import thm57695_spec.
Require Import thm6401305_spec.
Require Import thm68127_spec.
Require Import thm7_spec.
Require Import thm82_spec.
Lemma lem6401309 (t1 : Prop) (t2 : Prop) (t3 : Prop) (h1 : (term0 t1 t2 t3) = (term1 t1 t2 t3)) : (term0 t1 t2 t3) = (term1 t1 t2 t3).
Proof. exact (h1). Qed.
Lemma lem6401310 (t1 : Prop) (t2 : Prop) (t3 : Prop) (h1 : (term0 t1 t2 t3) = (term1 t1 t2 t3)) : (term1 t1 t2 t3) = (term0 t1 t2 t3).
Proof. exact (SYM (@lem6401309 t1 t2 t3 h1)). Qed.
Lemma lem6401311 (t1 : Prop) (t2 : Prop) (t3 : Prop) (h1 : (term1 t1 t2 t3) = (term0 t1 t2 t3)) : (term1 t1 t2 t3) = (term0 t1 t2 t3).
Proof. exact (h1). Qed.
Lemma lem6401312 (t1 : Prop) (t2 : Prop) (t3 : Prop) (h1 : (term1 t1 t2 t3) = (term0 t1 t2 t3)) : (term0 t1 t2 t3) = (term1 t1 t2 t3).
Proof. exact (SYM (@lem6401311 t1 t2 t3 h1)). Qed.
Lemma lem6401313 (t1 : Prop) (t2 : Prop) (t3 : Prop) : ((term0 t1 t2 t3) = (term1 t1 t2 t3)) = ((term1 t1 t2 t3) = (term0 t1 t2 t3)).
Proof. exact (prop_ext (fun h1 : (term0 t1 t2 t3) = (term1 t1 t2 t3) => @lem6401310 t1 t2 t3 h1) (fun h1 : (term1 t1 t2 t3) = (term0 t1 t2 t3) => @lem6401312 t1 t2 t3 h1)). Qed.
Lemma lem6401314 (t1 : Prop) (t2 : Prop) : (term2 t1 t2) = (term3 t1 t2).
Proof. exact (fun_ext (fun t3 : Prop => @lem6401313 t1 t2 t3)). Qed.
Lemma lem6401315 : (@all Prop) = (@all Prop).
Proof. exact (eq_refl (@all Prop)). Qed.
Lemma lem6401316 (t1 : Prop) (t2 : Prop) : (term4 t1 t2) = (term5 t1 t2).
Proof. exact (MK_COMB (@lem6401315) (@lem6401314 t1 t2)). Qed.
Lemma lem6401317 (t1 : Prop) : (term6 t1) = (term7 t1).
Proof. exact (fun_ext (fun t2 : Prop => @lem6401316 t1 t2)). Qed.
Lemma lem6401318 : (@all Prop) = (@all Prop).
Proof. exact (eq_refl (@all Prop)). Qed.
Lemma lem6401319 (t1 : Prop) : (term8 t1) = (term9 t1).
Proof. exact (MK_COMB (@lem6401318) (@lem6401317 t1)). Qed.
Lemma lem6401320 : term10 = term11.
Proof. exact (fun_ext (fun t1 : Prop => @lem6401319 t1)). Qed.
Lemma lem6401321 : (@all Prop) = (@all Prop).
Proof. exact (eq_refl (@all Prop)). Qed.
Lemma lem6401322 : term12 = term13.
Proof. exact (MK_COMB (@lem6401321) (@lem6401320)). Qed.
Lemma lem6401323 : term13.
Proof. exact (EQ_MP (@lem6401322) (@lem512)). Qed.
Lemma lem6401324 (t1 : Prop) : term14 t1.
Proof. exact (@lem6401323 t1). Qed.
Lemma lem6401325 (t1 : Prop) : (term14 t1) = (term9 t1).
Proof. exact (eq_refl (term14 t1)). Qed.
Lemma lem6401326 (t1 : Prop) : term9 t1.
Proof. exact (EQ_MP (@lem6401325 t1) (@lem6401324 t1)). Qed.
Lemma lem6401327 (t1 : Prop) (t2 : Prop) : term15 t1 t2.
Proof. exact (@lem6401326 t1 t2). Qed.
Lemma lem6401328 (t1 : Prop) (t2 : Prop) : (term15 t1 t2) = (term5 t1 t2).
Proof. exact (eq_refl (term15 t1 t2)). Qed.
Lemma lem6401329 (t1 : Prop) (t2 : Prop) : term5 t1 t2.
Proof. exact (EQ_MP (@lem6401328 t1 t2) (@lem6401327 t1 t2)). Qed.
Lemma lem6401330 (t1 : Prop) (t2 : Prop) (t3 : Prop) : term16 t1 t2 t3.
Proof. exact (@lem6401329 t1 t2 t3). Qed.
Lemma lem6401331 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term16 t1 t2 t3) = ((term1 t1 t2 t3) = (term0 t1 t2 t3)).
Proof. exact (eq_refl (term16 t1 t2 t3)). Qed.
Lemma lem6401357 {_83095 : Type'} : term17 _83095.
Proof. exact (EQ_MP (@lem3184739 _83095) (@lem3184736 _83095)). Qed.
Lemma lem6401358 {_83095 : Type'} (p : _83095 -> Prop) : term18 _83095 p.
Proof. exact (@lem6401357 _83095 p). Qed.
Lemma lem6401359 {_83095 : Type'} (p : _83095 -> Prop) : (term18 _83095 p) = (term19 _83095 p).
Proof. exact (eq_refl (term18 _83095 p)). Qed.
Lemma lem6401360 {_83095 : Type'} (p : _83095 -> Prop) : term19 _83095 p.
Proof. exact (EQ_MP (@lem6401359 _83095 p) (@lem6401358 _83095 p)). Qed.
Lemma lem6401361 {_83095 : Type'} (p : _83095 -> Prop) (x : _83095) : term20 _83095 p x.
Proof. exact (@lem6401360 _83095 p x). Qed.
Lemma lem6401362 {_83095 : Type'} (p : _83095 -> Prop) (x : _83095) : (term20 _83095 p x) = ((term21 _83095 x p) = (p x)).
Proof. exact (eq_refl (term20 _83095 p x)). Qed.
Lemma lem6401406 {_83095 : Type'} (p : _83095 -> Prop) (x : _83095) : (term21 _83095 x p) = (p x).
Proof. exact (EQ_MP (@lem3211641 _83095 p x) (@lem3211640 _83095 p x)). Qed.
Lemma lem6401407 {_124325 : Type'} (p : _124325 -> Prop) (x : _124325) : (term21 _124325 x p) = (p x).
Proof. exact (@lem6401406 _124325 p x). Qed.
Lemma lem6401408 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term22 _124325 y s P) = (term23 _124325 s P y).
Proof. exact (@lem6401407 _124325 (term24 _124325 s P) y). Qed.
Lemma lem6401409 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (x : _124325) : (term23 _124325 s P x) = (term25 _124325 s P x).
Proof. exact (eq_refl (term23 _124325 s P x)). Qed.
Lemma lem6401410 {_124325 : Type'} (GEN_PVAR_266 : _124325) : (@SETSPEC _124325 GEN_PVAR_266) = (@SETSPEC _124325 GEN_PVAR_266).
Proof. exact (eq_refl (@SETSPEC _124325 GEN_PVAR_266)). Qed.
Lemma lem6401411 {_124325 : Type'} (GEN_PVAR_266 : _124325) (s : _124325 -> Prop) (P : _124325 -> Prop) (x : _124325) : (term26 _124325 GEN_PVAR_266 s P x) = (term27 _124325 GEN_PVAR_266 s P x).
Proof. exact (MK_COMB (@lem6401410 _124325 GEN_PVAR_266) (@lem6401409 _124325 s P x)). Qed.
Lemma lem6401412 {_124325 : Type'} (x : _124325) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem6401413 {_124325 : Type'} (GEN_PVAR_266 : _124325) (s : _124325 -> Prop) (P : _124325 -> Prop) (x : _124325) : (term28 _124325 GEN_PVAR_266 s P x) = (term29 _124325 GEN_PVAR_266 s P x).
Proof. exact (MK_COMB (@lem6401411 _124325 GEN_PVAR_266 s P x) (@lem6401412 _124325 x)). Qed.
Lemma lem6401414 {_124325 : Type'} (GEN_PVAR_266 : _124325) (s : _124325 -> Prop) (P : _124325 -> Prop) : (term30 _124325 GEN_PVAR_266 s P) = (term31 _124325 GEN_PVAR_266 s P).
Proof. exact (fun_ext (fun x : _124325 => @lem6401413 _124325 GEN_PVAR_266 s P x)). Qed.
Lemma lem6401415 {_124325 : Type'} : (@ex _124325) = (@ex _124325).
Proof. exact (eq_refl (@ex _124325)). Qed.
Lemma lem6401416 {_124325 : Type'} (GEN_PVAR_266 : _124325) (s : _124325 -> Prop) (P : _124325 -> Prop) : (term32 _124325 GEN_PVAR_266 s P) = (term33 _124325 GEN_PVAR_266 s P).
Proof. exact (MK_COMB (@lem6401415 _124325) (@lem6401414 _124325 GEN_PVAR_266 s P)). Qed.
Lemma lem6401417 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) : (term34 _124325 s P) = (term35 _124325 s P).
Proof. exact (fun_ext (fun GEN_PVAR_266 : _124325 => @lem6401416 _124325 GEN_PVAR_266 s P)). Qed.
Lemma lem6401418 {_124325 : Type'} : (@GSPEC _124325) = (@GSPEC _124325).
Proof. exact (eq_refl (@GSPEC _124325)). Qed.
Lemma lem6401419 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) : (term36 _124325 s P) = (term37 _124325 s P).
Proof. exact (MK_COMB (@lem6401418 _124325) (@lem6401417 _124325 s P)). Qed.
Lemma lem6401420 {_124325 : Type'} (y : _124325) : (@IN _124325 y) = (@IN _124325 y).
Proof. exact (eq_refl (@IN _124325 y)). Qed.
Lemma lem6401421 {_124325 : Type'} (y : _124325) (s : _124325 -> Prop) (P : _124325 -> Prop) : (term22 _124325 y s P) = (term38 _124325 y s P).
Proof. exact (MK_COMB (@lem6401420 _124325 y) (@lem6401419 _124325 s P)). Qed.
Lemma lem6401422 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6401423 {_124325 : Type'} (y : _124325) (s : _124325 -> Prop) (P : _124325 -> Prop) : (term39 _124325 y s P) = (term40 _124325 y s P).
Proof. exact (MK_COMB (@lem6401422) (@lem6401421 _124325 y s P)). Qed.
Lemma lem6401424 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term23 _124325 s P y) = (term25 _124325 s P y).
Proof. exact (eq_refl (term23 _124325 s P y)). Qed.
Lemma lem6401425 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : ((term22 _124325 y s P) = (term23 _124325 s P y)) = ((term38 _124325 y s P) = (term25 _124325 s P y)).
Proof. exact (MK_COMB (@lem6401423 _124325 y s P) (@lem6401424 _124325 s P y)). Qed.
Lemma lem6401426 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term38 _124325 y s P) = (term25 _124325 s P y).
Proof. exact (EQ_MP (@lem6401425 _124325 s P y) (@lem6401408 _124325 s P y)). Qed.
Lemma lem6401430 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6401431 {_124325 : Type'} (P : _124325 -> Prop) (x : _124325) : (@IN _124325 x P) = (P x).
Proof. exact (@lem6401430 _124325 P x). Qed.
Lemma lem6401432 {_124325 : Type'} (s : _124325 -> Prop) (y : _124325) : (@IN _124325 y s) = (s y).
Proof. exact (@lem6401431 _124325 s y). Qed.
Lemma lem6401433 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6401434 {_124325 : Type'} (s : _124325 -> Prop) (y : _124325) : (term41 _124325 y s) = (term42 _124325 s y).
Proof. exact (MK_COMB (@lem6401433) (@lem6401432 _124325 s y)). Qed.
Lemma lem6401435 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) : (P y) = (P y).
Proof. exact (eq_refl (P y)). Qed.
Lemma lem6401436 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term25 _124325 s P y) = (term43 _124325 s P y).
Proof. exact (MK_COMB (@lem6401434 _124325 s y) (@lem6401435 _124325 P y)). Qed.
Lemma lem6401439 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term38 _124325 y s P) = (term43 _124325 s P y).
Proof. exact (TRANS (@lem6401426 _124325 s P y) (@lem6401436 _124325 s P y)). Qed.
Lemma lem6401440 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6401441 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term44 _124325 y s P) = (term45 _124325 s P y).
Proof. exact (MK_COMB (@lem6401440) (@lem6401439 _124325 s P y)). Qed.
Lemma lem6401442 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) : (P y) = (P y).
Proof. exact (eq_refl (P y)). Qed.
Lemma lem6401443 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term46 _124325 s P y) = (term47 _124325 s P y).
Proof. exact (MK_COMB (@lem6401441 _124325 s P y) (@lem6401442 _124325 P y)). Qed.
Lemma lem6401446 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6401447 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term48 _124325 s P y) = (term49 _124325 s P y).
Proof. exact (MK_COMB (@lem6401446) (@lem6401443 _124325 s P y)). Qed.
Lemma lem6401449 {_83095 : Type'} (p : _83095 -> Prop) (x : _83095) : (term21 _83095 x p) = (p x).
Proof. exact (EQ_MP (@lem3211641 _83095 p x) (@lem3211640 _83095 p x)). Qed.
Lemma lem6401450 {_124325 : Type'} (p : _124325 -> Prop) (x : _124325) : (term21 _124325 x p) = (p x).
Proof. exact (@lem6401449 _124325 p x). Qed.
Lemma lem6401451 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term22 _124325 y s P) = (term23 _124325 s P y).
Proof. exact (@lem6401450 _124325 (term24 _124325 s P) y). Qed.
Lemma lem6401452 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (x : _124325) : (term23 _124325 s P x) = (term25 _124325 s P x).
Proof. exact (eq_refl (term23 _124325 s P x)). Qed.
Lemma lem6401453 {_124325 : Type'} (GEN_PVAR_267 : _124325) : (@SETSPEC _124325 GEN_PVAR_267) = (@SETSPEC _124325 GEN_PVAR_267).
Proof. exact (eq_refl (@SETSPEC _124325 GEN_PVAR_267)). Qed.
Lemma lem6401454 {_124325 : Type'} (GEN_PVAR_267 : _124325) (s : _124325 -> Prop) (P : _124325 -> Prop) (x : _124325) : (term26 _124325 GEN_PVAR_267 s P x) = (term27 _124325 GEN_PVAR_267 s P x).
Proof. exact (MK_COMB (@lem6401453 _124325 GEN_PVAR_267) (@lem6401452 _124325 s P x)). Qed.
Lemma lem6401455 {_124325 : Type'} (x : _124325) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem6401456 {_124325 : Type'} (GEN_PVAR_267 : _124325) (s : _124325 -> Prop) (P : _124325 -> Prop) (x : _124325) : (term28 _124325 GEN_PVAR_267 s P x) = (term29 _124325 GEN_PVAR_267 s P x).
Proof. exact (MK_COMB (@lem6401454 _124325 GEN_PVAR_267 s P x) (@lem6401455 _124325 x)). Qed.
Lemma lem6401457 {_124325 : Type'} (GEN_PVAR_267 : _124325) (s : _124325 -> Prop) (P : _124325 -> Prop) : (term30 _124325 GEN_PVAR_267 s P) = (term31 _124325 GEN_PVAR_267 s P).
Proof. exact (fun_ext (fun x : _124325 => @lem6401456 _124325 GEN_PVAR_267 s P x)). Qed.
Lemma lem6401458 {_124325 : Type'} : (@ex _124325) = (@ex _124325).
Proof. exact (eq_refl (@ex _124325)). Qed.
Lemma lem6401459 {_124325 : Type'} (GEN_PVAR_267 : _124325) (s : _124325 -> Prop) (P : _124325 -> Prop) : (term32 _124325 GEN_PVAR_267 s P) = (term33 _124325 GEN_PVAR_267 s P).
Proof. exact (MK_COMB (@lem6401458 _124325) (@lem6401457 _124325 GEN_PVAR_267 s P)). Qed.
Lemma lem6401460 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) : (term34 _124325 s P) = (term35 _124325 s P).
Proof. exact (fun_ext (fun GEN_PVAR_267 : _124325 => @lem6401459 _124325 GEN_PVAR_267 s P)). Qed.
Lemma lem6401461 {_124325 : Type'} : (@GSPEC _124325) = (@GSPEC _124325).
Proof. exact (eq_refl (@GSPEC _124325)). Qed.
Lemma lem6401462 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) : (term36 _124325 s P) = (term37 _124325 s P).
Proof. exact (MK_COMB (@lem6401461 _124325) (@lem6401460 _124325 s P)). Qed.
Lemma lem6401463 {_124325 : Type'} (y : _124325) : (@IN _124325 y) = (@IN _124325 y).
Proof. exact (eq_refl (@IN _124325 y)). Qed.
Lemma lem6401464 {_124325 : Type'} (y : _124325) (s : _124325 -> Prop) (P : _124325 -> Prop) : (term22 _124325 y s P) = (term38 _124325 y s P).
Proof. exact (MK_COMB (@lem6401463 _124325 y) (@lem6401462 _124325 s P)). Qed.
Lemma lem6401465 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6401466 {_124325 : Type'} (y : _124325) (s : _124325 -> Prop) (P : _124325 -> Prop) : (term39 _124325 y s P) = (term40 _124325 y s P).
Proof. exact (MK_COMB (@lem6401465) (@lem6401464 _124325 y s P)). Qed.
Lemma lem6401467 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term23 _124325 s P y) = (term25 _124325 s P y).
Proof. exact (eq_refl (term23 _124325 s P y)). Qed.
Lemma lem6401468 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : ((term22 _124325 y s P) = (term23 _124325 s P y)) = ((term38 _124325 y s P) = (term25 _124325 s P y)).
Proof. exact (MK_COMB (@lem6401466 _124325 y s P) (@lem6401467 _124325 s P y)). Qed.
Lemma lem6401469 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term38 _124325 y s P) = (term25 _124325 s P y).
Proof. exact (EQ_MP (@lem6401468 _124325 s P y) (@lem6401451 _124325 s P y)). Qed.
Lemma lem6401473 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6401474 {_124325 : Type'} (P : _124325 -> Prop) (x : _124325) : (@IN _124325 x P) = (P x).
Proof. exact (@lem6401473 _124325 P x). Qed.
Lemma lem6401475 {_124325 : Type'} (s : _124325 -> Prop) (y : _124325) : (@IN _124325 y s) = (s y).
Proof. exact (@lem6401474 _124325 s y). Qed.
Lemma lem6401476 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6401477 {_124325 : Type'} (s : _124325 -> Prop) (y : _124325) : (term41 _124325 y s) = (term42 _124325 s y).
Proof. exact (MK_COMB (@lem6401476) (@lem6401475 _124325 s y)). Qed.
Lemma lem6401478 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) : (P y) = (P y).
Proof. exact (eq_refl (P y)). Qed.
Lemma lem6401479 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term25 _124325 s P y) = (term43 _124325 s P y).
Proof. exact (MK_COMB (@lem6401477 _124325 s y) (@lem6401478 _124325 P y)). Qed.
Lemma lem6401482 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term38 _124325 y s P) = (term43 _124325 s P y).
Proof. exact (TRANS (@lem6401469 _124325 s P y) (@lem6401479 _124325 s P y)). Qed.
Lemma lem6401483 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : ((term46 _124325 s P y) = (term38 _124325 y s P)) = ((term47 _124325 s P y) = (term43 _124325 s P y)).
Proof. exact (MK_COMB (@lem6401447 _124325 s P y) (@lem6401482 _124325 s P y)). Qed.
Lemma lem6401486 {_124325 : Type'} (y : _124325) (s : _124325 -> Prop) (P : _124325 -> Prop) : ((term47 _124325 s P y) = (term43 _124325 s P y)) = ((term46 _124325 s P y) = (term38 _124325 y s P)).
Proof. exact (SYM (@lem6401483 _124325 s P y)). Qed.
Lemma lem6401488 (p : Prop) : p = (term50 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem6401489 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : ((term47 _124325 s P y) = (term43 _124325 s P y)) = (term51 _124325 s P y).
Proof. exact (@lem6401488 ((term47 _124325 s P y) = (term43 _124325 s P y))). Qed.
Lemma lem6401490 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term51 _124325 s P y) = ((term47 _124325 s P y) = (term43 _124325 s P y)).
Proof. exact (SYM (@lem6401489 _124325 s P y)). Qed.
Lemma lem6401491 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term52 _124325 s P y) : term52 _124325 s P y.
Proof. exact (h1). Qed.
Lemma lem6401494 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term51 _124325 s P y) : term51 _124325 s P y.
Proof. exact (h1). Qed.
Lemma lem6401495 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : term53 _124325 s P y.
Proof. exact (fun h0 : term51 _124325 s P y => @lem6401494 _124325 s P y h0). Qed.
Lemma lem6401496 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term53 _124325 s P y) : term53 _124325 s P y.
Proof. exact (h1). Qed.
Lemma lem6401497 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term51 _124325 s P y) : term51 _124325 s P y.
Proof. exact (h1). Qed.
Lemma lem6401498 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term51 _124325 s P y) (h2 : term53 _124325 s P y) : term51 _124325 s P y.
Proof. exact (@lem6401496 _124325 s P y h2 (@lem6401497 _124325 s P y h1)). Qed.
Lemma lem6401499 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term51 _124325 s P y) : term54 _124325 s P y.
Proof. exact (fun h0 : term53 _124325 s P y => @lem6401498 _124325 s P y h1 h0). Qed.
Lemma lem6401500 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term53 _124325 s P y) : term53 _124325 s P y.
Proof. exact (h1). Qed.
Lemma lem6401501 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term51 _124325 s P y) (h2 : term53 _124325 s P y) : term51 _124325 s P y.
Proof. exact (@lem6401499 _124325 s P y h1 (@lem6401500 _124325 s P y h2)). Qed.
Lemma lem6401502 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term53 _124325 s P y) : term53 _124325 s P y.
Proof. exact (fun h0 : term51 _124325 s P y => @lem6401501 _124325 s P y h0 h1). Qed.
Lemma lem6401503 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : term55 _124325 s P y.
Proof. exact (fun h0 : term53 _124325 s P y => @lem6401502 _124325 s P y h0). Qed.
Lemma lem6401506 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : term53 _124325 s P y.
Proof. exact (@lem6401503 _124325 s P y (@lem6401495 _124325 s P y)). Qed.
Lemma lem6401507 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : term53 _124325 s P y.
Proof. exact (@lem6401506 _124325 s P y). Qed.
Lemma lem6401521 (t : Prop) : (t -> False) = (~ t).
Proof. exact (proj2 (@lem16474 t)). Qed.
Lemma lem6401522 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term51 _124325 s P y) = (term56 _124325 s P y).
Proof. exact (@lem6401521 (term52 _124325 s P y)). Qed.
Lemma lem6401524 (t : Prop) : (term57 t) = t.
Proof. exact (EQ_MP (@lem16507 t) (@lem16506 t)). Qed.
Lemma lem6401525 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term56 _124325 s P y) = ((term47 _124325 s P y) = (term43 _124325 s P y)).
Proof. exact (@lem6401524 ((term47 _124325 s P y) = (term43 _124325 s P y))). Qed.
Lemma lem6401526 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term51 _124325 s P y) = ((term47 _124325 s P y) = (term43 _124325 s P y)).
Proof. exact (TRANS (@lem6401522 _124325 s P y) (@lem6401525 _124325 s P y)). Qed.
Lemma lem6401533 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) : (term58 _124325 P y) = (term59 _124325 P y).
Proof. exact (fun_ext (fun s : _124325 -> Prop => @lem6401526 _124325 s P y)). Qed.
Lemma lem6401534 {_124325 : Type'} : (@all (_124325 -> Prop)) = (@all (_124325 -> Prop)).
Proof. exact (eq_refl (@all (_124325 -> Prop))). Qed.
Lemma lem6401535 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) : (term60 _124325 P y) = (term61 _124325 P y).
Proof. exact (MK_COMB (@lem6401534 _124325) (@lem6401533 _124325 P y)). Qed.
Lemma lem6401540 {_124325 : Type'} (y : _124325) : (term62 _124325 y) = (term63 _124325 y).
Proof. exact (fun_ext (fun P : _124325 -> Prop => @lem6401535 _124325 P y)). Qed.
Lemma lem6401541 {_124325 : Type'} : (@all (_124325 -> Prop)) = (@all (_124325 -> Prop)).
Proof. exact (eq_refl (@all (_124325 -> Prop))). Qed.
Lemma lem6401542 {_124325 : Type'} (y : _124325) : (term64 _124325 y) = (term65 _124325 y).
Proof. exact (MK_COMB (@lem6401541 _124325) (@lem6401540 _124325 y)). Qed.
Lemma lem6401547 {_124325 : Type'} : (term66 _124325) = (term67 _124325).
Proof. exact (fun_ext (fun y : _124325 => @lem6401542 _124325 y)). Qed.
Lemma lem6401548 {_124325 : Type'} : (@all _124325) = (@all _124325).
Proof. exact (eq_refl (@all _124325)). Qed.
Lemma lem6401557 {_124325 : Type'} : (term68 _124325) = (term69 _124325).
Proof. exact (MK_COMB (@lem6401548 _124325) (@lem6401547 _124325)). Qed.
Lemma lem6401574 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : ((term47 _124325 s P y) = (term43 _124325 s P y)) = ((term47 _124325 s P y) = (term43 _124325 s P y)).
Proof. exact (eq_refl ((term47 _124325 s P y) = (term43 _124325 s P y))). Qed.
Lemma lem6401575 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) : (term59 _124325 P y) = (term59 _124325 P y).
Proof. exact (fun_ext (fun s : _124325 -> Prop => @lem6401574 _124325 s P y)). Qed.
Lemma lem6401576 {_124325 : Type'} : (@all (_124325 -> Prop)) = (@all (_124325 -> Prop)).
Proof. exact (eq_refl (@all (_124325 -> Prop))). Qed.
Lemma lem6401577 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) : (term61 _124325 P y) = (term61 _124325 P y).
Proof. exact (MK_COMB (@lem6401576 _124325) (@lem6401575 _124325 P y)). Qed.
Lemma lem6401578 {_124325 : Type'} (y : _124325) : (term63 _124325 y) = (term63 _124325 y).
Proof. exact (fun_ext (fun P : _124325 -> Prop => @lem6401577 _124325 P y)). Qed.
Lemma lem6401579 {_124325 : Type'} : (@all (_124325 -> Prop)) = (@all (_124325 -> Prop)).
Proof. exact (eq_refl (@all (_124325 -> Prop))). Qed.
Lemma lem6401580 {_124325 : Type'} (y : _124325) : (term65 _124325 y) = (term65 _124325 y).
Proof. exact (MK_COMB (@lem6401579 _124325) (@lem6401578 _124325 y)). Qed.
Lemma lem6401581 {_124325 : Type'} : (term67 _124325) = (term67 _124325).
Proof. exact (fun_ext (fun y : _124325 => @lem6401580 _124325 y)). Qed.
Lemma lem6401582 {_124325 : Type'} : (@all _124325) = (@all _124325).
Proof. exact (eq_refl (@all _124325)). Qed.
Lemma lem6401583 {_124325 : Type'} : (term69 _124325) = (term69 _124325).
Proof. exact (MK_COMB (@lem6401582 _124325) (@lem6401581 _124325)). Qed.
Lemma lem6401610 {_124325 : Type'} : (term68 _124325) = (term69 _124325).
Proof. exact (TRANS (@lem6401557 _124325) (@lem6401583 _124325)). Qed.
Lemma lem6401611 {_124325 : Type'} : (term69 _124325) = (term68 _124325).
Proof. exact (SYM (@lem6401610 _124325)). Qed.
Lemma lem6401613 (p : Prop) : p = (term50 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem6401614 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : ((term47 _124325 s P y) = (term43 _124325 s P y)) = (term51 _124325 s P y).
Proof. exact (@lem6401613 ((term47 _124325 s P y) = (term43 _124325 s P y))). Qed.
Lemma lem6401615 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term51 _124325 s P y) = ((term47 _124325 s P y) = (term43 _124325 s P y)).
Proof. exact (SYM (@lem6401614 _124325 s P y)). Qed.
Lemma lem6401616 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term52 _124325 s P y) : term52 _124325 s P y.
Proof. exact (h1). Qed.
Lemma lem6401625 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term70 _124325 s P y) = (term71 _124325 s P y).
Proof. exact (@lem17045 (s y) (P y)). Qed.
Lemma lem6401629 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) : (term72 _124325 P y) = (term72 _124325 P y).
Proof. exact (eq_refl (term72 _124325 P y)). Qed.
Lemma lem6401631 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6401632 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term73 _124325 s P y) = (term74 _124325 s P y).
Proof. exact (MK_COMB (@lem6401631) (@lem6401625 _124325 s P y)). Qed.
Lemma lem6401633 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term75 _124325 s P y) = (term76 _124325 s P y).
Proof. exact (MK_COMB (@lem6401632 _124325 s P y) (@lem6401629 _124325 P y)). Qed.
Lemma lem6401634 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term77 _124325 s P y) = (term75 _124325 s P y).
Proof. exact (@lem17045 (term43 _124325 s P y) (P y)). Qed.
Lemma lem6401635 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term77 _124325 s P y) = (term76 _124325 s P y).
Proof. exact (TRANS (@lem6401634 _124325 s P y) (@lem6401633 _124325 s P y)). Qed.
Lemma lem6401647 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term70 _124325 s P y) = (term71 _124325 s P y).
Proof. exact (@lem17045 (s y) (P y)). Qed.
Lemma lem6401650 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term43 _124325 s P y) = (term43 _124325 s P y).
Proof. exact (eq_refl (term43 _124325 s P y)). Qed.
Lemma lem6401651 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6401652 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term78 _124325 s P y) = (term79 _124325 s P y).
Proof. exact (MK_COMB (@lem6401651) (@lem6401635 _124325 s P y)). Qed.
Lemma lem6401653 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term80 _124325 s P y) = (term81 _124325 s P y).
Proof. exact (MK_COMB (@lem6401652 _124325 s P y) (@lem6401650 _124325 s P y)). Qed.
Lemma lem6401655 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term82 _124325 s P y) = (term82 _124325 s P y).
Proof. exact (eq_refl (term82 _124325 s P y)). Qed.
Lemma lem6401656 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term83 _124325 s P y) = (term84 _124325 s P y).
Proof. exact (MK_COMB (@lem6401655 _124325 s P y) (@lem6401647 _124325 s P y)). Qed.
Lemma lem6401657 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6401658 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term85 _124325 s P y) = (term86 _124325 s P y).
Proof. exact (MK_COMB (@lem6401657) (@lem6401656 _124325 s P y)). Qed.
Lemma lem6401659 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term87 _124325 s P y) = (term88 _124325 s P y).
Proof. exact (MK_COMB (@lem6401658 _124325 s P y) (@lem6401653 _124325 s P y)). Qed.
Lemma lem6401660 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term52 _124325 s P y) = (term87 _124325 s P y).
Proof. exact (@lem17646 (term47 _124325 s P y) (term43 _124325 s P y)). Qed.
Lemma lem6401665 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term52 _124325 s P y) = (term88 _124325 s P y).
Proof. exact (TRANS (@lem6401660 _124325 s P y) (@lem6401659 _124325 s P y)). Qed.
Lemma lem6401734 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term52 _124325 s P y) : term88 _124325 s P y.
Proof. exact (EQ_MP (@lem6401665 _124325 s P y) (@lem6401616 _124325 s P y h1)). Qed.
Lemma lem6401735 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term84 _124325 s P y) : term84 _124325 s P y.
Proof. exact (h1). Qed.
Lemma lem6401736 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term81 _124325 s P y) : term81 _124325 s P y.
Proof. exact (h1). Qed.
Lemma lem6401737 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term84 _124325 s P y) : term71 _124325 s P y.
Proof. exact (proj2 (@lem6401735 _124325 s P y h1)). Qed.
Lemma lem6401738 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term84 _124325 s P y) : term47 _124325 s P y.
Proof. exact (proj1 (@lem6401735 _124325 s P y h1)). Qed.
Lemma lem6401740 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term84 _124325 s P y) : term43 _124325 s P y.
Proof. exact (proj1 (@lem6401738 _124325 s P y h1)). Qed.
Lemma lem6401745 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term81 _124325 s P y) : term43 _124325 s P y.
Proof. exact (proj2 (@lem6401736 _124325 s P y h1)). Qed.
Lemma lem6401746 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term81 _124325 s P y) : term76 _124325 s P y.
Proof. exact (proj1 (@lem6401736 _124325 s P y h1)). Qed.
Lemma lem6401749 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term71 _124325 s P y) : term71 _124325 s P y.
Proof. exact (h1). Qed.
Lemma lem6401768 {_124325 : Type'} (s : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) : term72 _124325 s y.
Proof. exact (h1). Qed.
Lemma lem6401784 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) : term72 _124325 P y.
Proof. exact (h1). Qed.
Lemma lem6401796 {_124325 : Type'} (s : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) : term72 _124325 s y.
Proof. exact (h1). Qed.
Lemma lem6401808 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) : term72 _124325 P y.
Proof. exact (h1). Qed.
Lemma lem6401820 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) : term72 _124325 P y.
Proof. exact (h1). Qed.
Lemma lem6401828 {_124325 : Type'} (s : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) : term72 _124325 s y.
Proof. exact (h1). Qed.
Lemma lem6401836 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) : term72 _124325 P y.
Proof. exact (h1). Qed.
Lemma lem6401842 {_124325 : Type'} (s : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) : term72 _124325 s y.
Proof. exact (h1). Qed.
Lemma lem6401848 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) : term72 _124325 P y.
Proof. exact (h1). Qed.
Lemma lem6401854 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) : term72 _124325 P y.
Proof. exact (h1). Qed.
Lemma lem6401856 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term84 _124325 s P y) : s y.
Proof. exact (proj1 (@lem6401740 _124325 s P y h1)). Qed.
Lemma lem6401857 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term84 _124325 s P y) : term89 _124325 s y.
Proof. exact (fun h0 : term72 _124325 s y => @lem6401856 _124325 s P y h1). Qed.
Lemma lem6401859 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6401860 {_124325 : Type'} (s : _124325 -> Prop) (y : _124325) : (term89 _124325 s y) = (s y).
Proof. exact (@lem6401859 (s y)). Qed.
Lemma lem6401861 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term84 _124325 s P y) : s y.
Proof. exact (EQ_MP (@lem6401860 _124325 s y) (@lem6401857 _124325 s P y h1)). Qed.
Lemma lem6401864 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6401866 {_124325 : Type'} (s : _124325 -> Prop) (y : _124325) : (term72 _124325 s y) = (term91 _124325 s y).
Proof. exact (@lem6401864 (s y)). Qed.
Lemma lem6401869 {_124325 : Type'} (s : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) : term91 _124325 s y.
Proof. exact (EQ_MP (@lem6401866 _124325 s y) (@lem6401828 _124325 s y h1)). Qed.
Lemma lem6401872 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) (h2 : term84 _124325 s P y) : False.
Proof. exact (@lem6401869 _124325 s y h1 (@lem6401861 _124325 s P y h2)). Qed.
Lemma lem6401873 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) (h2 : term84 _124325 s P y) : term92.
Proof. exact (fun h0 : ~ False => @lem6401872 _124325 s P y h1 h2). Qed.
Lemma lem6401875 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6401876 : term92 = False.
Proof. exact (@lem6401875 False). Qed.
Lemma lem6401877 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) (h2 : term84 _124325 s P y) : False.
Proof. exact (EQ_MP (@lem6401876) (@lem6401873 _124325 s P y h1 h2)). Qed.
Lemma lem6401879 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term84 _124325 s P y) : P y.
Proof. exact (proj2 (@lem6401738 _124325 s P y h1)). Qed.
Lemma lem6401880 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term84 _124325 s P y) : term89 _124325 P y.
Proof. exact (fun h0 : term72 _124325 P y => @lem6401879 _124325 s P y h1). Qed.
Lemma lem6401882 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6401883 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) : (term89 _124325 P y) = (P y).
Proof. exact (@lem6401882 (P y)). Qed.
Lemma lem6401884 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term84 _124325 s P y) : P y.
Proof. exact (EQ_MP (@lem6401883 _124325 P y) (@lem6401880 _124325 s P y h1)). Qed.
Lemma lem6401887 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6401889 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) : (term72 _124325 P y) = (term91 _124325 P y).
Proof. exact (@lem6401887 (P y)). Qed.
Lemma lem6401892 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) : term91 _124325 P y.
Proof. exact (EQ_MP (@lem6401889 _124325 P y) (@lem6401836 _124325 P y h1)). Qed.
Lemma lem6401895 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term84 _124325 s P y) : False.
Proof. exact (@lem6401892 _124325 P y h1 (@lem6401884 _124325 s P y h2)). Qed.
Lemma lem6401896 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term84 _124325 s P y) : term92.
Proof. exact (fun h0 : ~ False => @lem6401895 _124325 s P y h1 h2). Qed.
Lemma lem6401898 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6401899 : term92 = False.
Proof. exact (@lem6401898 False). Qed.
Lemma lem6401900 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term84 _124325 s P y) : False.
Proof. exact (EQ_MP (@lem6401899) (@lem6401896 _124325 s P y h1 h2)). Qed.
Lemma lem6401902 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term81 _124325 s P y) : s y.
Proof. exact (proj1 (@lem6401745 _124325 s P y h1)). Qed.
Lemma lem6401903 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term81 _124325 s P y) : term89 _124325 s y.
Proof. exact (fun h0 : term72 _124325 s y => @lem6401902 _124325 s P y h1). Qed.
Lemma lem6401905 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6401906 {_124325 : Type'} (s : _124325 -> Prop) (y : _124325) : (term89 _124325 s y) = (s y).
Proof. exact (@lem6401905 (s y)). Qed.
Lemma lem6401907 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term81 _124325 s P y) : s y.
Proof. exact (EQ_MP (@lem6401906 _124325 s y) (@lem6401903 _124325 s P y h1)). Qed.
Lemma lem6401910 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6401912 {_124325 : Type'} (s : _124325 -> Prop) (y : _124325) : (term72 _124325 s y) = (term91 _124325 s y).
Proof. exact (@lem6401910 (s y)). Qed.
Lemma lem6401915 {_124325 : Type'} (s : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) : term91 _124325 s y.
Proof. exact (EQ_MP (@lem6401912 _124325 s y) (@lem6401842 _124325 s y h1)). Qed.
Lemma lem6401918 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) (h2 : term81 _124325 s P y) : False.
Proof. exact (@lem6401915 _124325 s y h1 (@lem6401907 _124325 s P y h2)). Qed.
Lemma lem6401919 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) (h2 : term81 _124325 s P y) : term92.
Proof. exact (fun h0 : ~ False => @lem6401918 _124325 s P y h1 h2). Qed.
Lemma lem6401921 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6401922 : term92 = False.
Proof. exact (@lem6401921 False). Qed.
Lemma lem6401923 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) (h2 : term81 _124325 s P y) : False.
Proof. exact (EQ_MP (@lem6401922) (@lem6401919 _124325 s P y h1 h2)). Qed.
Lemma lem6401925 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term81 _124325 s P y) : P y.
Proof. exact (proj2 (@lem6401745 _124325 s P y h1)). Qed.
Lemma lem6401926 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term81 _124325 s P y) : term89 _124325 P y.
Proof. exact (fun h0 : term72 _124325 P y => @lem6401925 _124325 s P y h1). Qed.
Lemma lem6401928 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6401929 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) : (term89 _124325 P y) = (P y).
Proof. exact (@lem6401928 (P y)). Qed.
Lemma lem6401930 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term81 _124325 s P y) : P y.
Proof. exact (EQ_MP (@lem6401929 _124325 P y) (@lem6401926 _124325 s P y h1)). Qed.
Lemma lem6401933 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6401935 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) : (term72 _124325 P y) = (term91 _124325 P y).
Proof. exact (@lem6401933 (P y)). Qed.
Lemma lem6401938 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) : term91 _124325 P y.
Proof. exact (EQ_MP (@lem6401935 _124325 P y) (@lem6401848 _124325 P y h1)). Qed.
Lemma lem6401941 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term81 _124325 s P y) : False.
Proof. exact (@lem6401938 _124325 P y h1 (@lem6401930 _124325 s P y h2)). Qed.
Lemma lem6401942 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term81 _124325 s P y) : term92.
Proof. exact (fun h0 : ~ False => @lem6401941 _124325 s P y h1 h2). Qed.
Lemma lem6401944 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6401945 : term92 = False.
Proof. exact (@lem6401944 False). Qed.
Lemma lem6401946 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term81 _124325 s P y) : False.
Proof. exact (EQ_MP (@lem6401945) (@lem6401942 _124325 s P y h1 h2)). Qed.
Lemma lem6401948 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term81 _124325 s P y) : P y.
Proof. exact (proj2 (@lem6401745 _124325 s P y h1)). Qed.
Lemma lem6401949 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term81 _124325 s P y) : term89 _124325 P y.
Proof. exact (fun h0 : term72 _124325 P y => @lem6401948 _124325 s P y h1). Qed.
Lemma lem6401951 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6401952 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) : (term89 _124325 P y) = (P y).
Proof. exact (@lem6401951 (P y)). Qed.
Lemma lem6401953 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term81 _124325 s P y) : P y.
Proof. exact (EQ_MP (@lem6401952 _124325 P y) (@lem6401949 _124325 s P y h1)). Qed.
Lemma lem6401956 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6401958 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) : (term72 _124325 P y) = (term91 _124325 P y).
Proof. exact (@lem6401956 (P y)). Qed.
Lemma lem6401961 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) : term91 _124325 P y.
Proof. exact (EQ_MP (@lem6401958 _124325 P y) (@lem6401854 _124325 P y h1)). Qed.
Lemma lem6401964 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term81 _124325 s P y) : False.
Proof. exact (@lem6401961 _124325 P y h1 (@lem6401953 _124325 s P y h2)). Qed.
Lemma lem6401965 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term81 _124325 s P y) : term92.
Proof. exact (fun h0 : ~ False => @lem6401964 _124325 s P y h1 h2). Qed.
Lemma lem6401967 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6401968 : term92 = False.
Proof. exact (@lem6401967 False). Qed.
Lemma lem6401969 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term81 _124325 s P y) : False.
Proof. exact (EQ_MP (@lem6401968) (@lem6401965 _124325 s P y h1 h2)). Qed.
Lemma lem6401970 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term81 _124325 s P y) : (term72 _124325 P y) = False.
Proof. exact (prop_ext (fun h3 : term72 _124325 P y => @lem6401969 _124325 s P y h1 h2) (fun h3 : False => @lem6401854 _124325 P y h1)). Qed.
Lemma lem6401971 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term81 _124325 s P y) : False.
Proof. exact (EQ_MP (@lem6401970 _124325 s P y h1 h2) (@lem6401854 _124325 P y h1)). Qed.
Lemma lem6401972 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term81 _124325 s P y) : (term72 _124325 P y) = False.
Proof. exact (prop_ext (fun h3 : term72 _124325 P y => @lem6401946 _124325 s P y h1 h2) (fun h3 : False => @lem6401848 _124325 P y h1)). Qed.
Lemma lem6401973 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term81 _124325 s P y) : False.
Proof. exact (EQ_MP (@lem6401972 _124325 s P y h1 h2) (@lem6401848 _124325 P y h1)). Qed.
Lemma lem6401974 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) (h2 : term81 _124325 s P y) : (term72 _124325 s y) = False.
Proof. exact (prop_ext (fun h3 : term72 _124325 s y => @lem6401923 _124325 s P y h1 h2) (fun h3 : False => @lem6401842 _124325 s y h1)). Qed.
Lemma lem6401975 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) (h2 : term81 _124325 s P y) : False.
Proof. exact (EQ_MP (@lem6401974 _124325 s P y h1 h2) (@lem6401842 _124325 s y h1)). Qed.
Lemma lem6401976 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term84 _124325 s P y) : (term72 _124325 P y) = False.
Proof. exact (prop_ext (fun h3 : term72 _124325 P y => @lem6401900 _124325 s P y h1 h2) (fun h3 : False => @lem6401836 _124325 P y h1)). Qed.
Lemma lem6401977 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term84 _124325 s P y) : False.
Proof. exact (EQ_MP (@lem6401976 _124325 s P y h1 h2) (@lem6401836 _124325 P y h1)). Qed.
Lemma lem6401978 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) (h2 : term84 _124325 s P y) : (term72 _124325 s y) = False.
Proof. exact (prop_ext (fun h3 : term72 _124325 s y => @lem6401877 _124325 s P y h1 h2) (fun h3 : False => @lem6401828 _124325 s y h1)). Qed.
Lemma lem6401979 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) (h2 : term84 _124325 s P y) : False.
Proof. exact (EQ_MP (@lem6401978 _124325 s P y h1 h2) (@lem6401828 _124325 s y h1)). Qed.
Lemma lem6401980 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term81 _124325 s P y) : (term72 _124325 P y) = False.
Proof. exact (prop_ext (fun h3 : term72 _124325 P y => @lem6401971 _124325 s P y h1 h2) (fun h3 : False => @lem6401820 _124325 P y h1)). Qed.
Lemma lem6401981 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term81 _124325 s P y) : False.
Proof. exact (EQ_MP (@lem6401980 _124325 s P y h1 h2) (@lem6401820 _124325 P y h1)). Qed.
Lemma lem6401982 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term81 _124325 s P y) : (term72 _124325 P y) = False.
Proof. exact (prop_ext (fun h3 : term72 _124325 P y => @lem6401973 _124325 s P y h1 h2) (fun h3 : False => @lem6401808 _124325 P y h1)). Qed.
Lemma lem6401983 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term81 _124325 s P y) : False.
Proof. exact (EQ_MP (@lem6401982 _124325 s P y h1 h2) (@lem6401808 _124325 P y h1)). Qed.
Lemma lem6401984 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) (h2 : term81 _124325 s P y) : (term72 _124325 s y) = False.
Proof. exact (prop_ext (fun h3 : term72 _124325 s y => @lem6401975 _124325 s P y h1 h2) (fun h3 : False => @lem6401796 _124325 s y h1)). Qed.
Lemma lem6401985 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) (h2 : term81 _124325 s P y) : False.
Proof. exact (EQ_MP (@lem6401984 _124325 s P y h1 h2) (@lem6401796 _124325 s y h1)). Qed.
Lemma lem6401986 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term84 _124325 s P y) : (term72 _124325 P y) = False.
Proof. exact (prop_ext (fun h3 : term72 _124325 P y => @lem6401977 _124325 s P y h1 h2) (fun h3 : False => @lem6401784 _124325 P y h1)). Qed.
Lemma lem6401987 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term84 _124325 s P y) : False.
Proof. exact (EQ_MP (@lem6401986 _124325 s P y h1 h2) (@lem6401784 _124325 P y h1)). Qed.
Lemma lem6401988 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) (h2 : term84 _124325 s P y) : (term72 _124325 s y) = False.
Proof. exact (prop_ext (fun h3 : term72 _124325 s y => @lem6401979 _124325 s P y h1 h2) (fun h3 : False => @lem6401768 _124325 s y h1)). Qed.
Lemma lem6401989 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) (h2 : term84 _124325 s P y) : False.
Proof. exact (EQ_MP (@lem6401988 _124325 s P y h1 h2) (@lem6401768 _124325 s y h1)). Qed.
Lemma lem6401990 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term81 _124325 s P y) : (term72 _124325 P y) = False.
Proof. exact (prop_ext (fun h3 : term72 _124325 P y => @lem6401981 _124325 s P y h1 h2) (fun h3 : False => @lem6401820 _124325 P y h1)). Qed.
Lemma lem6401991 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term81 _124325 s P y) : False.
Proof. exact (EQ_MP (@lem6401990 _124325 s P y h1 h2) (@lem6401820 _124325 P y h1)). Qed.
Lemma lem6401992 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term81 _124325 s P y) : (term72 _124325 P y) = False.
Proof. exact (prop_ext (fun h3 : term72 _124325 P y => @lem6401983 _124325 s P y h1 h2) (fun h3 : False => @lem6401808 _124325 P y h1)). Qed.
Lemma lem6401993 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term81 _124325 s P y) : False.
Proof. exact (EQ_MP (@lem6401992 _124325 s P y h1 h2) (@lem6401808 _124325 P y h1)). Qed.
Lemma lem6401994 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) (h2 : term81 _124325 s P y) : (term72 _124325 s y) = False.
Proof. exact (prop_ext (fun h3 : term72 _124325 s y => @lem6401985 _124325 s P y h1 h2) (fun h3 : False => @lem6401796 _124325 s y h1)). Qed.
Lemma lem6401995 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) (h2 : term81 _124325 s P y) : False.
Proof. exact (EQ_MP (@lem6401994 _124325 s P y h1 h2) (@lem6401796 _124325 s y h1)). Qed.
Lemma lem6401996 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term84 _124325 s P y) : (term72 _124325 P y) = False.
Proof. exact (prop_ext (fun h3 : term72 _124325 P y => @lem6401987 _124325 s P y h1 h2) (fun h3 : False => @lem6401784 _124325 P y h1)). Qed.
Lemma lem6401997 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 P y) (h2 : term84 _124325 s P y) : False.
Proof. exact (EQ_MP (@lem6401996 _124325 s P y h1 h2) (@lem6401784 _124325 P y h1)). Qed.
Lemma lem6401998 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) (h2 : term84 _124325 s P y) : (term72 _124325 s y) = False.
Proof. exact (prop_ext (fun h3 : term72 _124325 s y => @lem6401989 _124325 s P y h1 h2) (fun h3 : False => @lem6401768 _124325 s y h1)). Qed.
Lemma lem6401999 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term72 _124325 s y) (h2 : term84 _124325 s P y) : False.
Proof. exact (EQ_MP (@lem6401998 _124325 s P y h1 h2) (@lem6401768 _124325 s y h1)). Qed.
Lemma lem6402000 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term81 _124325 s P y) (h2 : term71 _124325 s P y) : False.
Proof. exact (or_elim (@lem6401749 _124325 s P y h2) (fun h0 : term72 _124325 s y => @lem6401995 _124325 s P y h0 h1) (fun h0 : term72 _124325 P y => @lem6401993 _124325 s P y h0 h1)). Qed.
Lemma lem6402001 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term81 _124325 s P y) : False.
Proof. exact (or_elim (@lem6401746 _124325 s P y h1) (fun h0 : term71 _124325 s P y => @lem6402000 _124325 s P y h1 h0) (fun h0 : term72 _124325 P y => @lem6401991 _124325 s P y h0 h1)). Qed.
Lemma lem6402002 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term84 _124325 s P y) : False.
Proof. exact (or_elim (@lem6401737 _124325 s P y h1) (fun h0 : term72 _124325 s y => @lem6401999 _124325 s P y h0 h1) (fun h0 : term72 _124325 P y => @lem6401997 _124325 s P y h0 h1)). Qed.
Lemma lem6402003 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term52 _124325 s P y) : False.
Proof. exact (or_elim (@lem6401734 _124325 s P y h1) (fun h0 : term84 _124325 s P y => @lem6402002 _124325 s P y h0) (fun h0 : term81 _124325 s P y => @lem6402001 _124325 s P y h0)). Qed.
Lemma lem6402004 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term52 _124325 s P y) : (term52 _124325 s P y) = False.
Proof. exact (prop_ext (fun h2 : term52 _124325 s P y => @lem6402003 _124325 s P y h1) (fun h2 : False => @lem6401616 _124325 s P y h1)). Qed.
Lemma lem6402005 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term52 _124325 s P y) : False.
Proof. exact (EQ_MP (@lem6402004 _124325 s P y h1) (@lem6401616 _124325 s P y h1)). Qed.
Lemma lem6402006 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : term51 _124325 s P y.
Proof. exact (fun h0 : term52 _124325 s P y => @lem6402005 _124325 s P y h0). Qed.
Lemma lem6402007 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term47 _124325 s P y) = (term43 _124325 s P y).
Proof. exact (EQ_MP (@lem6401615 _124325 s P y) (@lem6402006 _124325 s P y)). Qed.
Lemma lem6402012 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) : term61 _124325 P y.
Proof. exact (fun s : _124325 -> Prop => @lem6402007 _124325 s P y). Qed.
Lemma lem6402017 {_124325 : Type'} (y : _124325) : term65 _124325 y.
Proof. exact (fun P : _124325 -> Prop => @lem6402012 _124325 P y). Qed.
Lemma lem6402022 {_124325 : Type'} : term69 _124325.
Proof. exact (fun y : _124325 => @lem6402017 _124325 y). Qed.
Lemma lem6402023 {_124325 : Type'} : term68 _124325.
Proof. exact (EQ_MP (@lem6401611 _124325) (@lem6402022 _124325)). Qed.
Lemma lem6402024 {_124325 : Type'} (y : _124325) : term93 _124325 y.
Proof. exact (@lem6402023 _124325 y). Qed.
Lemma lem6402025 {_124325 : Type'} (y : _124325) : (term93 _124325 y) = (term64 _124325 y).
Proof. exact (eq_refl (term93 _124325 y)). Qed.
Lemma lem6402026 {_124325 : Type'} (y : _124325) : term64 _124325 y.
Proof. exact (EQ_MP (@lem6402025 _124325 y) (@lem6402024 _124325 y)). Qed.
Lemma lem6402027 {_124325 : Type'} (y : _124325) (P : _124325 -> Prop) : term94 _124325 y P.
Proof. exact (@lem6402026 _124325 y P). Qed.
Lemma lem6402028 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) : (term94 _124325 y P) = (term60 _124325 P y).
Proof. exact (eq_refl (term94 _124325 y P)). Qed.
Lemma lem6402029 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) : term60 _124325 P y.
Proof. exact (EQ_MP (@lem6402028 _124325 P y) (@lem6402027 _124325 y P)). Qed.
Lemma lem6402030 {_124325 : Type'} (P : _124325 -> Prop) (y : _124325) (s : _124325 -> Prop) : term95 _124325 P y s.
Proof. exact (@lem6402029 _124325 P y s). Qed.
Lemma lem6402031 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term95 _124325 P y s) = (term51 _124325 s P y).
Proof. exact (eq_refl (term95 _124325 P y s)). Qed.
Lemma lem6402032 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : term51 _124325 s P y.
Proof. exact (EQ_MP (@lem6402031 _124325 s P y) (@lem6402030 _124325 P y s)). Qed.
Lemma lem6402034 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : term51 _124325 s P y.
Proof. exact (@lem6401507 _124325 s P y (@lem6402032 _124325 s P y)). Qed.
Lemma lem6402035 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term52 _124325 s P y) : False.
Proof. exact (@lem6402034 _124325 s P y (@lem6401491 _124325 s P y h1)). Qed.
Lemma lem6402036 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term52 _124325 s P y) : (term52 _124325 s P y) = False.
Proof. exact (prop_ext (fun h2 : term52 _124325 s P y => @lem6402035 _124325 s P y h1) (fun h2 : False => @lem6401491 _124325 s P y h1)). Qed.
Lemma lem6402037 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) (h1 : term52 _124325 s P y) : False.
Proof. exact (EQ_MP (@lem6402036 _124325 s P y h1) (@lem6401491 _124325 s P y h1)). Qed.
Lemma lem6402038 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : term51 _124325 s P y.
Proof. exact (fun h0 : term52 _124325 s P y => @lem6402037 _124325 s P y h0). Qed.
Lemma lem6402039 {_124325 : Type'} (s : _124325 -> Prop) (P : _124325 -> Prop) (y : _124325) : (term47 _124325 s P y) = (term43 _124325 s P y).
Proof. exact (EQ_MP (@lem6401490 _124325 s P y) (@lem6402038 _124325 s P y)). Qed.
Lemma lem6402042 (t1 : Prop) : term96 t1.
Proof. exact (@lem512 t1). Qed.
Lemma lem6402043 (t1 : Prop) : (term96 t1) = (term8 t1).
Proof. exact (eq_refl (term96 t1)). Qed.
Lemma lem6402044 (t1 : Prop) : term8 t1.
Proof. exact (EQ_MP (@lem6402043 t1) (@lem6402042 t1)). Qed.
Lemma lem6402045 (t1 : Prop) (t2 : Prop) : term97 t1 t2.
Proof. exact (@lem6402044 t1 t2). Qed.
Lemma lem6402046 (t1 : Prop) (t2 : Prop) : (term97 t1 t2) = (term4 t1 t2).
Proof. exact (eq_refl (term97 t1 t2)). Qed.
Lemma lem6402047 (t1 : Prop) (t2 : Prop) : term4 t1 t2.
Proof. exact (EQ_MP (@lem6402046 t1 t2) (@lem6402045 t1 t2)). Qed.
Lemma lem6402048 (t1 : Prop) (t2 : Prop) (t3 : Prop) : term98 t1 t2 t3.
Proof. exact (@lem6402047 t1 t2 t3). Qed.
Lemma lem6402049 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term98 t1 t2 t3) = ((term0 t1 t2 t3) = (term1 t1 t2 t3)).
Proof. exact (eq_refl (term98 t1 t2 t3)). Qed.
Lemma lem6402051 {A K : Type'} (dom : A -> Prop) : term99 A K dom.
Proof. exact (@lem6401305 A K dom). Qed.
Lemma lem6402052 {A K : Type'} (dom : A -> Prop) : (term99 A K dom) = (term100 A K dom).
Proof. exact (eq_refl (term99 A K dom)). Qed.
Lemma lem6402053 {A K : Type'} (dom : A -> Prop) : term100 A K dom.
Proof. exact (EQ_MP (@lem6402052 A K dom) (@lem6402051 A K dom)). Qed.
Lemma lem6402054 {A K : Type'} (dom : A -> Prop) (neut : A) : term101 A K dom neut.
Proof. exact (@lem6402053 A K dom neut). Qed.
Lemma lem6402055 {A K : Type'} (dom : A -> Prop) (neut : A) : (term101 A K dom neut) = (term102 A K dom neut).
Proof. exact (eq_refl (term101 A K dom neut)). Qed.
Lemma lem6402056 {A K : Type'} (dom : A -> Prop) (neut : A) : term102 A K dom neut.
Proof. exact (EQ_MP (@lem6402055 A K dom neut) (@lem6402054 A K dom neut)). Qed.
Lemma lem6402057 {A K : Type'} (dom : A -> Prop) (neut : A) (op : type1400 A) : term103 A K dom neut op.
Proof. exact (@lem6402056 A K dom neut op). Qed.
Lemma lem6402058 {A K : Type'} (op : type1400 A) (dom : A -> Prop) (neut : A) : (term103 A K dom neut op) = (term104 A K op dom neut).
Proof. exact (eq_refl (term103 A K dom neut op)). Qed.
Lemma lem6402059 {A K : Type'} (op : type1400 A) (dom : A -> Prop) (neut : A) : term104 A K op dom neut.
Proof. exact (EQ_MP (@lem6402058 A K op dom neut) (@lem6402057 A K dom neut op)). Qed.
Lemma lem6402060 {A K : Type'} (op : type1400 A) (dom : A -> Prop) (neut : A) (ltle : type1402 K) : term105 A K op dom neut ltle.
Proof. exact (@lem6402059 A K op dom neut ltle). Qed.
Lemma lem6402061 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (dom : A -> Prop) (neut : A) : (term105 A K op dom neut ltle) = (term106 A K op ltle dom neut).
Proof. exact (eq_refl (term105 A K op dom neut ltle)). Qed.
Lemma lem6402062 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (dom : A -> Prop) (neut : A) : term106 A K op ltle dom neut.
Proof. exact (EQ_MP (@lem6402061 A K op ltle dom neut) (@lem6402060 A K op dom neut ltle)). Qed.
Lemma lem6402063 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (dom : A -> Prop) (neut : A) (k : K -> Prop) : term107 A K op ltle dom neut k.
Proof. exact (@lem6402062 A K op ltle dom neut k). Qed.
Lemma lem6402064 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (neut : A) : (term107 A K op ltle dom neut k) = (term108 A K op ltle k dom neut).
Proof. exact (eq_refl (term107 A K op ltle dom neut k)). Qed.
Lemma lem6402065 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (neut : A) : term108 A K op ltle k dom neut.
Proof. exact (EQ_MP (@lem6402064 A K op ltle k dom neut) (@lem6402063 A K op ltle dom neut k)). Qed.
Lemma lem6402066 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (neut : A) (f : K -> A) : term109 A K op ltle k dom neut f.
Proof. exact (@lem6402065 A K op ltle k dom neut f). Qed.
Lemma lem6402067 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term109 A K op ltle k dom neut f) = ((@iterato A K dom neut op ltle k f) = (term110 A K op ltle k f dom neut)).
Proof. exact (eq_refl (term109 A K op ltle k dom neut f)). Qed.
Lemma lem6402072 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (@iterato A K dom neut op ltle k f) = (term110 A K op ltle k f dom neut).
Proof. exact (EQ_MP (@lem6402067 A K op ltle k f dom neut) (@lem6402066 A K op ltle k dom neut f)). Qed.
Lemma lem6402073 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (@iterato A K dom neut op ltle k f) = (term110 A K op ltle k f dom neut).
Proof. exact (@lem6402072 A K op ltle k f dom neut). Qed.
Lemma lem6402074 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term111 A K op ltle k dom neut f) = (term112 A K op ltle k f dom neut).
Proof. exact (@lem6402073 A K op ltle (term113 A K k f dom neut) f dom neut). Qed.
Lemma lem6402075 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem6402076 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term114 A K op ltle k dom neut f) = (term115 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6402075 A) (@lem6402074 A K op ltle k f dom neut)). Qed.
Lemma lem6402078 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (@iterato A K dom neut op ltle k f) = (term110 A K op ltle k f dom neut).
Proof. exact (EQ_MP (@lem6402067 A K op ltle k f dom neut) (@lem6402066 A K op ltle k dom neut f)). Qed.
Lemma lem6402079 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (@iterato A K dom neut op ltle k f) = (term110 A K op ltle k f dom neut).
Proof. exact (@lem6402078 A K op ltle k f dom neut). Qed.
Lemma lem6402080 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term111 A K op ltle k dom neut f) = (@iterato A K dom neut op ltle k f)) = ((term112 A K op ltle k f dom neut) = (term110 A K op ltle k f dom neut)).
Proof. exact (MK_COMB (@lem6402076 A K op ltle k f dom neut) (@lem6402079 A K op ltle k f dom neut)). Qed.
Lemma lem6402081 {A K : Type'} (dom : A -> Prop) (neut : A) (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) : ((term112 A K op ltle k f dom neut) = (term110 A K op ltle k f dom neut)) = ((term111 A K op ltle k dom neut f) = (@iterato A K dom neut op ltle k f)).
Proof. exact (SYM (@lem6402080 A K op ltle k f dom neut)). Qed.
Lemma lem6402091 {_124325 : Type'} (y : _124325) (s : _124325 -> Prop) (P : _124325 -> Prop) : (term46 _124325 s P y) = (term38 _124325 y s P).
Proof. exact (EQ_MP (@lem6401486 _124325 y s P) (@lem6402039 _124325 s P y)). Qed.
Lemma lem6402092 {K : Type'} (y : K) (s : K -> Prop) (P : K -> Prop) : (term46 K s P y) = (term38 K y s P).
Proof. exact (@lem6402091 K y s P). Qed.
Lemma lem6402093 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term116 A K k f dom neut i) = (term117 A K i k f dom neut).
Proof. exact (@lem6402092 K i k (term118 A K f dom neut)). Qed.
Lemma lem6402094 {A K : Type'} (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term119 A K f dom neut i) = (term120 A K f i dom neut).
Proof. exact (eq_refl (term119 A K f dom neut i)). Qed.
Lemma lem6402095 {K : Type'} (i : K) (k : K -> Prop) : (term41 K i k) = (term41 K i k).
Proof. exact (eq_refl (term41 K i k)). Qed.
Lemma lem6402096 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term121 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (MK_COMB (@lem6402095 K i k) (@lem6402094 A K f i dom neut)). Qed.
Lemma lem6402097 {K : Type'} (GEN_PVAR_268 : K) : (@SETSPEC K GEN_PVAR_268) = (@SETSPEC K GEN_PVAR_268).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_268)). Qed.
Lemma lem6402098 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term123 A K GEN_PVAR_268 k f dom neut i) = (term124 A K GEN_PVAR_268 k f i dom neut).
Proof. exact (MK_COMB (@lem6402097 K GEN_PVAR_268) (@lem6402096 A K k f i dom neut)). Qed.
Lemma lem6402099 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6402100 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term125 A K GEN_PVAR_268 k f dom neut i) = (term126 A K GEN_PVAR_268 k f dom neut i).
Proof. exact (MK_COMB (@lem6402098 A K GEN_PVAR_268 k f i dom neut) (@lem6402099 K i)). Qed.
Lemma lem6402101 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term127 A K GEN_PVAR_268 k f dom neut) = (term128 A K GEN_PVAR_268 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402100 A K GEN_PVAR_268 k f dom neut i)). Qed.
Lemma lem6402102 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6402103 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term129 A K GEN_PVAR_268 k f dom neut) = (term130 A K GEN_PVAR_268 k f dom neut).
Proof. exact (MK_COMB (@lem6402102 K) (@lem6402101 A K GEN_PVAR_268 k f dom neut)). Qed.
Lemma lem6402104 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term131 A K k f dom neut) = (term132 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_268 : K => @lem6402103 A K GEN_PVAR_268 k f dom neut)). Qed.
Lemma lem6402105 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6402106 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term133 A K k f dom neut) = (term113 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402105 K) (@lem6402104 A K k f dom neut)). Qed.
Lemma lem6402107 {K : Type'} (i : K) : (@IN K i) = (@IN K i).
Proof. exact (eq_refl (@IN K i)). Qed.
Lemma lem6402108 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term117 A K i k f dom neut) = (term134 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402107 K i) (@lem6402106 A K k f dom neut)). Qed.
Lemma lem6402109 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6402110 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term135 A K i k f dom neut) = (term136 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402109) (@lem6402108 A K i k f dom neut)). Qed.
Lemma lem6402111 {A K : Type'} (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term119 A K f dom neut i) = (term120 A K f i dom neut).
Proof. exact (eq_refl (term119 A K f dom neut i)). Qed.
Lemma lem6402112 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term116 A K k f dom neut i) = (term137 A K k f i dom neut).
Proof. exact (MK_COMB (@lem6402110 A K i k f dom neut) (@lem6402111 A K f i dom neut)). Qed.
Lemma lem6402113 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6402114 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term138 A K k f dom neut i) = (term139 A K k f i dom neut).
Proof. exact (MK_COMB (@lem6402113) (@lem6402112 A K k f i dom neut)). Qed.
Lemma lem6402115 {A K : Type'} (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term119 A K f dom neut i) = (term120 A K f i dom neut).
Proof. exact (eq_refl (term119 A K f dom neut i)). Qed.
Lemma lem6402116 {K : Type'} (i : K) (k : K -> Prop) : (term41 K i k) = (term41 K i k).
Proof. exact (eq_refl (term41 K i k)). Qed.
Lemma lem6402117 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term121 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (MK_COMB (@lem6402116 K i k) (@lem6402115 A K f i dom neut)). Qed.
Lemma lem6402118 {K : Type'} (GEN_PVAR_267 : K) : (@SETSPEC K GEN_PVAR_267) = (@SETSPEC K GEN_PVAR_267).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_267)). Qed.
Lemma lem6402119 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term123 A K GEN_PVAR_267 k f dom neut i) = (term124 A K GEN_PVAR_267 k f i dom neut).
Proof. exact (MK_COMB (@lem6402118 K GEN_PVAR_267) (@lem6402117 A K k f i dom neut)). Qed.
Lemma lem6402120 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6402121 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term125 A K GEN_PVAR_267 k f dom neut i) = (term126 A K GEN_PVAR_267 k f dom neut i).
Proof. exact (MK_COMB (@lem6402119 A K GEN_PVAR_267 k f i dom neut) (@lem6402120 K i)). Qed.
Lemma lem6402122 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term127 A K GEN_PVAR_267 k f dom neut) = (term128 A K GEN_PVAR_267 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402121 A K GEN_PVAR_267 k f dom neut i)). Qed.
Lemma lem6402123 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6402124 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term129 A K GEN_PVAR_267 k f dom neut) = (term130 A K GEN_PVAR_267 k f dom neut).
Proof. exact (MK_COMB (@lem6402123 K) (@lem6402122 A K GEN_PVAR_267 k f dom neut)). Qed.
Lemma lem6402125 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term131 A K k f dom neut) = (term132 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_267 : K => @lem6402124 A K GEN_PVAR_267 k f dom neut)). Qed.
Lemma lem6402126 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6402127 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term133 A K k f dom neut) = (term113 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402126 K) (@lem6402125 A K k f dom neut)). Qed.
Lemma lem6402128 {K : Type'} (i : K) : (@IN K i) = (@IN K i).
Proof. exact (eq_refl (@IN K i)). Qed.
Lemma lem6402129 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term117 A K i k f dom neut) = (term134 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402128 K i) (@lem6402127 A K k f dom neut)). Qed.
Lemma lem6402130 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term116 A K k f dom neut i) = (term117 A K i k f dom neut)) = ((term137 A K k f i dom neut) = (term134 A K i k f dom neut)).
Proof. exact (MK_COMB (@lem6402114 A K k f i dom neut) (@lem6402129 A K i k f dom neut)). Qed.
Lemma lem6402131 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term137 A K k f i dom neut) = (term134 A K i k f dom neut).
Proof. exact (EQ_MP (@lem6402130 A K i k f dom neut) (@lem6402093 A K i k f dom neut)). Qed.
Lemma lem6402138 {K : Type'} (GEN_PVAR_263 : K) : (@SETSPEC K GEN_PVAR_263) = (@SETSPEC K GEN_PVAR_263).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_263)). Qed.
Lemma lem6402139 {A K : Type'} (GEN_PVAR_263 : K) (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term140 A K GEN_PVAR_263 k f i dom neut) = (term141 A K GEN_PVAR_263 i k f dom neut).
Proof. exact (MK_COMB (@lem6402138 K GEN_PVAR_263) (@lem6402131 A K i k f dom neut)). Qed.
Lemma lem6402140 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6402141 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term142 A K GEN_PVAR_263 k f dom neut i) = (term143 A K GEN_PVAR_263 k f dom neut i).
Proof. exact (MK_COMB (@lem6402139 A K GEN_PVAR_263 i k f dom neut) (@lem6402140 K i)). Qed.
Lemma lem6402142 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term144 A K GEN_PVAR_263 k f dom neut) = (term145 A K GEN_PVAR_263 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402141 A K GEN_PVAR_263 k f dom neut i)). Qed.
Lemma lem6402143 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6402144 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term146 A K GEN_PVAR_263 k f dom neut) = (term147 A K GEN_PVAR_263 k f dom neut).
Proof. exact (MK_COMB (@lem6402143 K) (@lem6402142 A K GEN_PVAR_263 k f dom neut)). Qed.
Lemma lem6402149 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term148 A K k f dom neut) = (term149 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6402144 A K GEN_PVAR_263 k f dom neut)). Qed.
Lemma lem6402150 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6402151 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term150 A K k f dom neut) = (term151 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402150 K) (@lem6402149 A K k f dom neut)). Qed.
Lemma lem6402152 {K : Type'} : (@FINITE K) = (@FINITE K).
Proof. exact (eq_refl (@FINITE K)). Qed.
Lemma lem6402153 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term152 A K k f dom neut) = (term153 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402152 K) (@lem6402151 A K k f dom neut)). Qed.
Lemma lem6402154 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6402155 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term154 A K k f dom neut) = (term155 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402154) (@lem6402153 A K k f dom neut)). Qed.
Lemma lem6402163 {_124325 : Type'} (y : _124325) (s : _124325 -> Prop) (P : _124325 -> Prop) : (term46 _124325 s P y) = (term38 _124325 y s P).
Proof. exact (EQ_MP (@lem6401486 _124325 y s P) (@lem6402039 _124325 s P y)). Qed.
Lemma lem6402164 {K : Type'} (y : K) (s : K -> Prop) (P : K -> Prop) : (term46 K s P y) = (term38 K y s P).
Proof. exact (@lem6402163 K y s P). Qed.
Lemma lem6402165 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term116 A K k f dom neut i) = (term117 A K i k f dom neut).
Proof. exact (@lem6402164 K i k (term118 A K f dom neut)). Qed.
Lemma lem6402166 {A K : Type'} (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term119 A K f dom neut i) = (term120 A K f i dom neut).
Proof. exact (eq_refl (term119 A K f dom neut i)). Qed.
Lemma lem6402167 {K : Type'} (i : K) (k : K -> Prop) : (term41 K i k) = (term41 K i k).
Proof. exact (eq_refl (term41 K i k)). Qed.
Lemma lem6402168 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term121 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (MK_COMB (@lem6402167 K i k) (@lem6402166 A K f i dom neut)). Qed.
Lemma lem6402169 {K : Type'} (GEN_PVAR_268 : K) : (@SETSPEC K GEN_PVAR_268) = (@SETSPEC K GEN_PVAR_268).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_268)). Qed.
Lemma lem6402170 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term123 A K GEN_PVAR_268 k f dom neut i) = (term124 A K GEN_PVAR_268 k f i dom neut).
Proof. exact (MK_COMB (@lem6402169 K GEN_PVAR_268) (@lem6402168 A K k f i dom neut)). Qed.
Lemma lem6402171 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6402172 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term125 A K GEN_PVAR_268 k f dom neut i) = (term126 A K GEN_PVAR_268 k f dom neut i).
Proof. exact (MK_COMB (@lem6402170 A K GEN_PVAR_268 k f i dom neut) (@lem6402171 K i)). Qed.
Lemma lem6402173 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term127 A K GEN_PVAR_268 k f dom neut) = (term128 A K GEN_PVAR_268 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402172 A K GEN_PVAR_268 k f dom neut i)). Qed.
Lemma lem6402174 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6402175 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term129 A K GEN_PVAR_268 k f dom neut) = (term130 A K GEN_PVAR_268 k f dom neut).
Proof. exact (MK_COMB (@lem6402174 K) (@lem6402173 A K GEN_PVAR_268 k f dom neut)). Qed.
Lemma lem6402176 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term131 A K k f dom neut) = (term132 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_268 : K => @lem6402175 A K GEN_PVAR_268 k f dom neut)). Qed.
Lemma lem6402177 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6402178 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term133 A K k f dom neut) = (term113 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402177 K) (@lem6402176 A K k f dom neut)). Qed.
Lemma lem6402179 {K : Type'} (i : K) : (@IN K i) = (@IN K i).
Proof. exact (eq_refl (@IN K i)). Qed.
Lemma lem6402180 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term117 A K i k f dom neut) = (term134 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402179 K i) (@lem6402178 A K k f dom neut)). Qed.
Lemma lem6402181 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6402182 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term135 A K i k f dom neut) = (term136 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402181) (@lem6402180 A K i k f dom neut)). Qed.
Lemma lem6402183 {A K : Type'} (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term119 A K f dom neut i) = (term120 A K f i dom neut).
Proof. exact (eq_refl (term119 A K f dom neut i)). Qed.
Lemma lem6402184 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term116 A K k f dom neut i) = (term137 A K k f i dom neut).
Proof. exact (MK_COMB (@lem6402182 A K i k f dom neut) (@lem6402183 A K f i dom neut)). Qed.
Lemma lem6402185 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6402186 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term138 A K k f dom neut i) = (term139 A K k f i dom neut).
Proof. exact (MK_COMB (@lem6402185) (@lem6402184 A K k f i dom neut)). Qed.
Lemma lem6402187 {A K : Type'} (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term119 A K f dom neut i) = (term120 A K f i dom neut).
Proof. exact (eq_refl (term119 A K f dom neut i)). Qed.
Lemma lem6402188 {K : Type'} (i : K) (k : K -> Prop) : (term41 K i k) = (term41 K i k).
Proof. exact (eq_refl (term41 K i k)). Qed.
Lemma lem6402189 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term121 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (MK_COMB (@lem6402188 K i k) (@lem6402187 A K f i dom neut)). Qed.
Lemma lem6402190 {K : Type'} (GEN_PVAR_267 : K) : (@SETSPEC K GEN_PVAR_267) = (@SETSPEC K GEN_PVAR_267).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_267)). Qed.
Lemma lem6402191 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term123 A K GEN_PVAR_267 k f dom neut i) = (term124 A K GEN_PVAR_267 k f i dom neut).
Proof. exact (MK_COMB (@lem6402190 K GEN_PVAR_267) (@lem6402189 A K k f i dom neut)). Qed.
Lemma lem6402192 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6402193 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term125 A K GEN_PVAR_267 k f dom neut i) = (term126 A K GEN_PVAR_267 k f dom neut i).
Proof. exact (MK_COMB (@lem6402191 A K GEN_PVAR_267 k f i dom neut) (@lem6402192 K i)). Qed.
Lemma lem6402194 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term127 A K GEN_PVAR_267 k f dom neut) = (term128 A K GEN_PVAR_267 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402193 A K GEN_PVAR_267 k f dom neut i)). Qed.
Lemma lem6402195 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6402196 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term129 A K GEN_PVAR_267 k f dom neut) = (term130 A K GEN_PVAR_267 k f dom neut).
Proof. exact (MK_COMB (@lem6402195 K) (@lem6402194 A K GEN_PVAR_267 k f dom neut)). Qed.
Lemma lem6402197 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term131 A K k f dom neut) = (term132 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_267 : K => @lem6402196 A K GEN_PVAR_267 k f dom neut)). Qed.
Lemma lem6402198 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6402199 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term133 A K k f dom neut) = (term113 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402198 K) (@lem6402197 A K k f dom neut)). Qed.
Lemma lem6402200 {K : Type'} (i : K) : (@IN K i) = (@IN K i).
Proof. exact (eq_refl (@IN K i)). Qed.
Lemma lem6402201 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term117 A K i k f dom neut) = (term134 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402200 K i) (@lem6402199 A K k f dom neut)). Qed.
Lemma lem6402202 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term116 A K k f dom neut i) = (term117 A K i k f dom neut)) = ((term137 A K k f i dom neut) = (term134 A K i k f dom neut)).
Proof. exact (MK_COMB (@lem6402186 A K k f i dom neut) (@lem6402201 A K i k f dom neut)). Qed.
Lemma lem6402203 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term137 A K k f i dom neut) = (term134 A K i k f dom neut).
Proof. exact (EQ_MP (@lem6402202 A K i k f dom neut) (@lem6402165 A K i k f dom neut)). Qed.
Lemma lem6402210 {K : Type'} (GEN_PVAR_264 : K) : (@SETSPEC K GEN_PVAR_264) = (@SETSPEC K GEN_PVAR_264).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_264)). Qed.
Lemma lem6402211 {A K : Type'} (GEN_PVAR_264 : K) (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term140 A K GEN_PVAR_264 k f i dom neut) = (term141 A K GEN_PVAR_264 i k f dom neut).
Proof. exact (MK_COMB (@lem6402210 K GEN_PVAR_264) (@lem6402203 A K i k f dom neut)). Qed.
Lemma lem6402212 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6402213 {A K : Type'} (GEN_PVAR_264 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term142 A K GEN_PVAR_264 k f dom neut i) = (term143 A K GEN_PVAR_264 k f dom neut i).
Proof. exact (MK_COMB (@lem6402211 A K GEN_PVAR_264 i k f dom neut) (@lem6402212 K i)). Qed.
Lemma lem6402214 {A K : Type'} (GEN_PVAR_264 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term144 A K GEN_PVAR_264 k f dom neut) = (term145 A K GEN_PVAR_264 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402213 A K GEN_PVAR_264 k f dom neut i)). Qed.
Lemma lem6402215 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6402216 {A K : Type'} (GEN_PVAR_264 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term146 A K GEN_PVAR_264 k f dom neut) = (term147 A K GEN_PVAR_264 k f dom neut).
Proof. exact (MK_COMB (@lem6402215 K) (@lem6402214 A K GEN_PVAR_264 k f dom neut)). Qed.
Lemma lem6402221 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term148 A K k f dom neut) = (term149 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_264 : K => @lem6402216 A K GEN_PVAR_264 k f dom neut)). Qed.
Lemma lem6402222 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6402223 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term150 A K k f dom neut) = (term151 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402222 K) (@lem6402221 A K k f dom neut)). Qed.
Lemma lem6402224 {K : Type'} : (@eq (K -> Prop)) = (@eq (K -> Prop)).
Proof. exact (eq_refl (@eq (K -> Prop))). Qed.
Lemma lem6402225 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term156 A K k f dom neut) = (term157 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402224 K) (@lem6402223 A K k f dom neut)). Qed.
Lemma lem6402226 {K : Type'} : (@EMPTY K) = (@EMPTY K).
Proof. exact (eq_refl (@EMPTY K)). Qed.
Lemma lem6402227 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term150 A K k f dom neut) = (@EMPTY K)) = ((term151 A K k f dom neut) = (@EMPTY K)).
Proof. exact (MK_COMB (@lem6402225 A K k f dom neut) (@lem6402226 K)). Qed.
Lemma lem6402230 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6402231 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term158 A K k f dom neut) = (term159 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402230) (@lem6402227 A K k f dom neut)). Qed.
Lemma lem6402232 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term160 A K k f dom neut) = (term161 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402155 A K k f dom neut) (@lem6402231 A K k f dom neut)). Qed.
Lemma lem6402235 {A : Type'} : (@COND A) = (@COND A).
Proof. exact (eq_refl (@COND A)). Qed.
Lemma lem6402236 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term162 A K k f dom neut) = (term163 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402235 A) (@lem6402232 A K k f dom neut)). Qed.
Lemma lem6402256 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term0 t1 t2 t3) = (term1 t1 t2 t3).
Proof. exact (EQ_MP (@lem6402049 t1 t2 t3) (@lem6402048 t1 t2 t3)). Qed.
Lemma lem6402257 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term164 A K ltle k f dom neut i) = (term165 A K ltle k f dom neut i).
Proof. exact (@lem6402256 (term134 A K i k f dom neut) (term120 A K f i dom neut) (term166 A K ltle k f dom neut i)). Qed.
Lemma lem6402261 {_124325 : Type'} (y : _124325) (s : _124325 -> Prop) (P : _124325 -> Prop) : (term46 _124325 s P y) = (term38 _124325 y s P).
Proof. exact (EQ_MP (@lem6401486 _124325 y s P) (@lem6402039 _124325 s P y)). Qed.
Lemma lem6402262 {K : Type'} (y : K) (s : K -> Prop) (P : K -> Prop) : (term46 K s P y) = (term38 K y s P).
Proof. exact (@lem6402261 K y s P). Qed.
Lemma lem6402263 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term116 A K k f dom neut i) = (term117 A K i k f dom neut).
Proof. exact (@lem6402262 K i k (term118 A K f dom neut)). Qed.
Lemma lem6402264 {A K : Type'} (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term119 A K f dom neut i) = (term120 A K f i dom neut).
Proof. exact (eq_refl (term119 A K f dom neut i)). Qed.
Lemma lem6402265 {K : Type'} (i : K) (k : K -> Prop) : (term41 K i k) = (term41 K i k).
Proof. exact (eq_refl (term41 K i k)). Qed.
Lemma lem6402266 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term121 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (MK_COMB (@lem6402265 K i k) (@lem6402264 A K f i dom neut)). Qed.
Lemma lem6402267 {K : Type'} (GEN_PVAR_268 : K) : (@SETSPEC K GEN_PVAR_268) = (@SETSPEC K GEN_PVAR_268).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_268)). Qed.
Lemma lem6402268 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term123 A K GEN_PVAR_268 k f dom neut i) = (term124 A K GEN_PVAR_268 k f i dom neut).
Proof. exact (MK_COMB (@lem6402267 K GEN_PVAR_268) (@lem6402266 A K k f i dom neut)). Qed.
Lemma lem6402269 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6402270 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term125 A K GEN_PVAR_268 k f dom neut i) = (term126 A K GEN_PVAR_268 k f dom neut i).
Proof. exact (MK_COMB (@lem6402268 A K GEN_PVAR_268 k f i dom neut) (@lem6402269 K i)). Qed.
Lemma lem6402271 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term127 A K GEN_PVAR_268 k f dom neut) = (term128 A K GEN_PVAR_268 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402270 A K GEN_PVAR_268 k f dom neut i)). Qed.
Lemma lem6402272 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6402273 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term129 A K GEN_PVAR_268 k f dom neut) = (term130 A K GEN_PVAR_268 k f dom neut).
Proof. exact (MK_COMB (@lem6402272 K) (@lem6402271 A K GEN_PVAR_268 k f dom neut)). Qed.
Lemma lem6402274 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term131 A K k f dom neut) = (term132 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_268 : K => @lem6402273 A K GEN_PVAR_268 k f dom neut)). Qed.
Lemma lem6402275 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6402276 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term133 A K k f dom neut) = (term113 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402275 K) (@lem6402274 A K k f dom neut)). Qed.
Lemma lem6402277 {K : Type'} (i : K) : (@IN K i) = (@IN K i).
Proof. exact (eq_refl (@IN K i)). Qed.
Lemma lem6402278 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term117 A K i k f dom neut) = (term134 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402277 K i) (@lem6402276 A K k f dom neut)). Qed.
Lemma lem6402279 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6402280 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term135 A K i k f dom neut) = (term136 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402279) (@lem6402278 A K i k f dom neut)). Qed.
Lemma lem6402281 {A K : Type'} (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term119 A K f dom neut i) = (term120 A K f i dom neut).
Proof. exact (eq_refl (term119 A K f dom neut i)). Qed.
Lemma lem6402282 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term116 A K k f dom neut i) = (term137 A K k f i dom neut).
Proof. exact (MK_COMB (@lem6402280 A K i k f dom neut) (@lem6402281 A K f i dom neut)). Qed.
Lemma lem6402283 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6402284 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term138 A K k f dom neut i) = (term139 A K k f i dom neut).
Proof. exact (MK_COMB (@lem6402283) (@lem6402282 A K k f i dom neut)). Qed.
Lemma lem6402285 {A K : Type'} (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term119 A K f dom neut i) = (term120 A K f i dom neut).
Proof. exact (eq_refl (term119 A K f dom neut i)). Qed.
Lemma lem6402286 {K : Type'} (i : K) (k : K -> Prop) : (term41 K i k) = (term41 K i k).
Proof. exact (eq_refl (term41 K i k)). Qed.
Lemma lem6402287 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term121 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (MK_COMB (@lem6402286 K i k) (@lem6402285 A K f i dom neut)). Qed.
Lemma lem6402288 {K : Type'} (GEN_PVAR_267 : K) : (@SETSPEC K GEN_PVAR_267) = (@SETSPEC K GEN_PVAR_267).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_267)). Qed.
Lemma lem6402289 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term123 A K GEN_PVAR_267 k f dom neut i) = (term124 A K GEN_PVAR_267 k f i dom neut).
Proof. exact (MK_COMB (@lem6402288 K GEN_PVAR_267) (@lem6402287 A K k f i dom neut)). Qed.
Lemma lem6402290 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6402291 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term125 A K GEN_PVAR_267 k f dom neut i) = (term126 A K GEN_PVAR_267 k f dom neut i).
Proof. exact (MK_COMB (@lem6402289 A K GEN_PVAR_267 k f i dom neut) (@lem6402290 K i)). Qed.
Lemma lem6402292 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term127 A K GEN_PVAR_267 k f dom neut) = (term128 A K GEN_PVAR_267 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402291 A K GEN_PVAR_267 k f dom neut i)). Qed.
Lemma lem6402293 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6402294 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term129 A K GEN_PVAR_267 k f dom neut) = (term130 A K GEN_PVAR_267 k f dom neut).
Proof. exact (MK_COMB (@lem6402293 K) (@lem6402292 A K GEN_PVAR_267 k f dom neut)). Qed.
Lemma lem6402295 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term131 A K k f dom neut) = (term132 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_267 : K => @lem6402294 A K GEN_PVAR_267 k f dom neut)). Qed.
Lemma lem6402296 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6402297 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term133 A K k f dom neut) = (term113 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402296 K) (@lem6402295 A K k f dom neut)). Qed.
Lemma lem6402298 {K : Type'} (i : K) : (@IN K i) = (@IN K i).
Proof. exact (eq_refl (@IN K i)). Qed.
Lemma lem6402299 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term117 A K i k f dom neut) = (term134 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402298 K i) (@lem6402297 A K k f dom neut)). Qed.
Lemma lem6402300 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term116 A K k f dom neut i) = (term117 A K i k f dom neut)) = ((term137 A K k f i dom neut) = (term134 A K i k f dom neut)).
Proof. exact (MK_COMB (@lem6402284 A K k f i dom neut) (@lem6402299 A K i k f dom neut)). Qed.
Lemma lem6402301 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term137 A K k f i dom neut) = (term134 A K i k f dom neut).
Proof. exact (EQ_MP (@lem6402300 A K i k f dom neut) (@lem6402263 A K i k f dom neut)). Qed.
Lemma lem6402308 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6402309 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term167 A K k f i dom neut) = (term136 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402308) (@lem6402301 A K i k f dom neut)). Qed.
Lemma lem6402317 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term0 t1 t2 t3) = (term1 t1 t2 t3).
Proof. exact (EQ_MP (@lem6402049 t1 t2 t3) (@lem6402048 t1 t2 t3)). Qed.
Lemma lem6402318 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term168 A K ltle i k f j dom neut) = (term169 A K ltle i k f j dom neut).
Proof. exact (@lem6402317 (ltle j i) (term134 A K j k f dom neut) (term120 A K f j dom neut)). Qed.
Lemma lem6402329 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6402330 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term170 A K ltle i k f j dom neut) = (term171 A K ltle i k f j dom neut).
Proof. exact (MK_COMB (@lem6402329) (@lem6402318 A K ltle i k f j dom neut)). Qed.
Lemma lem6402333 {K : Type'} (j : K) (i : K) : (j = i) = (j = i).
Proof. exact (eq_refl (j = i)). Qed.
Lemma lem6402334 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (j : K) (i : K) : (term172 A K ltle k f dom neut j i) = (term173 A K ltle k f dom neut j i).
Proof. exact (MK_COMB (@lem6402330 A K ltle i k f j dom neut) (@lem6402333 K j i)). Qed.
Lemma lem6402337 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term174 A K ltle k f dom neut i) = (term175 A K ltle k f dom neut i).
Proof. exact (fun_ext (fun j : K => @lem6402334 A K ltle k f dom neut j i)). Qed.
Lemma lem6402338 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6402339 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term166 A K ltle k f dom neut i) = (term176 A K ltle k f dom neut i).
Proof. exact (MK_COMB (@lem6402338 K) (@lem6402337 A K ltle k f dom neut i)). Qed.
Lemma lem6402344 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term165 A K ltle k f dom neut i) = (term177 A K ltle k f dom neut i).
Proof. exact (MK_COMB (@lem6402309 A K i k f dom neut) (@lem6402339 A K ltle k f dom neut i)). Qed.
Lemma lem6402349 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term164 A K ltle k f dom neut i) = (term177 A K ltle k f dom neut i).
Proof. exact (TRANS (@lem6402257 A K ltle k f dom neut i) (@lem6402344 A K ltle k f dom neut i)). Qed.
Lemma lem6402350 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term178 A K ltle k f dom neut) = (term179 A K ltle k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402349 A K ltle k f dom neut i)). Qed.
Lemma lem6402351 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6402352 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term180 A K ltle k f dom neut) = (term181 A K ltle k f dom neut).
Proof. exact (MK_COMB (@lem6402351 K) (@lem6402350 A K ltle k f dom neut)). Qed.
Lemma lem6402357 {K : Type'} : (@COND K) = (@COND K).
Proof. exact (eq_refl (@COND K)). Qed.
Lemma lem6402358 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term182 A K ltle k f dom neut) = (term183 A K ltle k f dom neut).
Proof. exact (MK_COMB (@lem6402357 K) (@lem6402352 A K ltle k f dom neut)). Qed.
Lemma lem6402362 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term0 t1 t2 t3) = (term1 t1 t2 t3).
Proof. exact (EQ_MP (@lem6402049 t1 t2 t3) (@lem6402048 t1 t2 t3)). Qed.
Lemma lem6402363 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term164 A K ltle k f dom neut i) = (term165 A K ltle k f dom neut i).
Proof. exact (@lem6402362 (term134 A K i k f dom neut) (term120 A K f i dom neut) (term166 A K ltle k f dom neut i)). Qed.
Lemma lem6402367 {_124325 : Type'} (y : _124325) (s : _124325 -> Prop) (P : _124325 -> Prop) : (term46 _124325 s P y) = (term38 _124325 y s P).
Proof. exact (EQ_MP (@lem6401486 _124325 y s P) (@lem6402039 _124325 s P y)). Qed.
Lemma lem6402368 {K : Type'} (y : K) (s : K -> Prop) (P : K -> Prop) : (term46 K s P y) = (term38 K y s P).
Proof. exact (@lem6402367 K y s P). Qed.
Lemma lem6402369 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term116 A K k f dom neut i) = (term117 A K i k f dom neut).
Proof. exact (@lem6402368 K i k (term118 A K f dom neut)). Qed.
Lemma lem6402370 {A K : Type'} (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term119 A K f dom neut i) = (term120 A K f i dom neut).
Proof. exact (eq_refl (term119 A K f dom neut i)). Qed.
Lemma lem6402371 {K : Type'} (i : K) (k : K -> Prop) : (term41 K i k) = (term41 K i k).
Proof. exact (eq_refl (term41 K i k)). Qed.
Lemma lem6402372 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term121 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (MK_COMB (@lem6402371 K i k) (@lem6402370 A K f i dom neut)). Qed.
Lemma lem6402373 {K : Type'} (GEN_PVAR_268 : K) : (@SETSPEC K GEN_PVAR_268) = (@SETSPEC K GEN_PVAR_268).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_268)). Qed.
Lemma lem6402374 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term123 A K GEN_PVAR_268 k f dom neut i) = (term124 A K GEN_PVAR_268 k f i dom neut).
Proof. exact (MK_COMB (@lem6402373 K GEN_PVAR_268) (@lem6402372 A K k f i dom neut)). Qed.
Lemma lem6402375 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6402376 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term125 A K GEN_PVAR_268 k f dom neut i) = (term126 A K GEN_PVAR_268 k f dom neut i).
Proof. exact (MK_COMB (@lem6402374 A K GEN_PVAR_268 k f i dom neut) (@lem6402375 K i)). Qed.
Lemma lem6402377 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term127 A K GEN_PVAR_268 k f dom neut) = (term128 A K GEN_PVAR_268 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402376 A K GEN_PVAR_268 k f dom neut i)). Qed.
Lemma lem6402378 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6402379 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term129 A K GEN_PVAR_268 k f dom neut) = (term130 A K GEN_PVAR_268 k f dom neut).
Proof. exact (MK_COMB (@lem6402378 K) (@lem6402377 A K GEN_PVAR_268 k f dom neut)). Qed.
Lemma lem6402380 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term131 A K k f dom neut) = (term132 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_268 : K => @lem6402379 A K GEN_PVAR_268 k f dom neut)). Qed.
Lemma lem6402381 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6402382 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term133 A K k f dom neut) = (term113 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402381 K) (@lem6402380 A K k f dom neut)). Qed.
Lemma lem6402383 {K : Type'} (i : K) : (@IN K i) = (@IN K i).
Proof. exact (eq_refl (@IN K i)). Qed.
Lemma lem6402384 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term117 A K i k f dom neut) = (term134 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402383 K i) (@lem6402382 A K k f dom neut)). Qed.
Lemma lem6402385 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6402386 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term135 A K i k f dom neut) = (term136 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402385) (@lem6402384 A K i k f dom neut)). Qed.
Lemma lem6402387 {A K : Type'} (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term119 A K f dom neut i) = (term120 A K f i dom neut).
Proof. exact (eq_refl (term119 A K f dom neut i)). Qed.
Lemma lem6402388 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term116 A K k f dom neut i) = (term137 A K k f i dom neut).
Proof. exact (MK_COMB (@lem6402386 A K i k f dom neut) (@lem6402387 A K f i dom neut)). Qed.
Lemma lem6402389 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6402390 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term138 A K k f dom neut i) = (term139 A K k f i dom neut).
Proof. exact (MK_COMB (@lem6402389) (@lem6402388 A K k f i dom neut)). Qed.
Lemma lem6402391 {A K : Type'} (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term119 A K f dom neut i) = (term120 A K f i dom neut).
Proof. exact (eq_refl (term119 A K f dom neut i)). Qed.
Lemma lem6402392 {K : Type'} (i : K) (k : K -> Prop) : (term41 K i k) = (term41 K i k).
Proof. exact (eq_refl (term41 K i k)). Qed.
Lemma lem6402393 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term121 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (MK_COMB (@lem6402392 K i k) (@lem6402391 A K f i dom neut)). Qed.
Lemma lem6402394 {K : Type'} (GEN_PVAR_267 : K) : (@SETSPEC K GEN_PVAR_267) = (@SETSPEC K GEN_PVAR_267).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_267)). Qed.
Lemma lem6402395 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term123 A K GEN_PVAR_267 k f dom neut i) = (term124 A K GEN_PVAR_267 k f i dom neut).
Proof. exact (MK_COMB (@lem6402394 K GEN_PVAR_267) (@lem6402393 A K k f i dom neut)). Qed.
Lemma lem6402396 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6402397 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term125 A K GEN_PVAR_267 k f dom neut i) = (term126 A K GEN_PVAR_267 k f dom neut i).
Proof. exact (MK_COMB (@lem6402395 A K GEN_PVAR_267 k f i dom neut) (@lem6402396 K i)). Qed.
Lemma lem6402398 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term127 A K GEN_PVAR_267 k f dom neut) = (term128 A K GEN_PVAR_267 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402397 A K GEN_PVAR_267 k f dom neut i)). Qed.
Lemma lem6402399 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6402400 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term129 A K GEN_PVAR_267 k f dom neut) = (term130 A K GEN_PVAR_267 k f dom neut).
Proof. exact (MK_COMB (@lem6402399 K) (@lem6402398 A K GEN_PVAR_267 k f dom neut)). Qed.
Lemma lem6402401 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term131 A K k f dom neut) = (term132 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_267 : K => @lem6402400 A K GEN_PVAR_267 k f dom neut)). Qed.
Lemma lem6402402 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6402403 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term133 A K k f dom neut) = (term113 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402402 K) (@lem6402401 A K k f dom neut)). Qed.
Lemma lem6402404 {K : Type'} (i : K) : (@IN K i) = (@IN K i).
Proof. exact (eq_refl (@IN K i)). Qed.
Lemma lem6402405 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term117 A K i k f dom neut) = (term134 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402404 K i) (@lem6402403 A K k f dom neut)). Qed.
Lemma lem6402406 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term116 A K k f dom neut i) = (term117 A K i k f dom neut)) = ((term137 A K k f i dom neut) = (term134 A K i k f dom neut)).
Proof. exact (MK_COMB (@lem6402390 A K k f i dom neut) (@lem6402405 A K i k f dom neut)). Qed.
Lemma lem6402407 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term137 A K k f i dom neut) = (term134 A K i k f dom neut).
Proof. exact (EQ_MP (@lem6402406 A K i k f dom neut) (@lem6402369 A K i k f dom neut)). Qed.
Lemma lem6402414 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6402415 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term167 A K k f i dom neut) = (term136 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402414) (@lem6402407 A K i k f dom neut)). Qed.
Lemma lem6402423 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term0 t1 t2 t3) = (term1 t1 t2 t3).
Proof. exact (EQ_MP (@lem6402049 t1 t2 t3) (@lem6402048 t1 t2 t3)). Qed.
Lemma lem6402424 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term168 A K ltle i k f j dom neut) = (term169 A K ltle i k f j dom neut).
Proof. exact (@lem6402423 (ltle j i) (term134 A K j k f dom neut) (term120 A K f j dom neut)). Qed.
Lemma lem6402435 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6402436 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term170 A K ltle i k f j dom neut) = (term171 A K ltle i k f j dom neut).
Proof. exact (MK_COMB (@lem6402435) (@lem6402424 A K ltle i k f j dom neut)). Qed.
Lemma lem6402439 {K : Type'} (j : K) (i : K) : (j = i) = (j = i).
Proof. exact (eq_refl (j = i)). Qed.
Lemma lem6402440 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (j : K) (i : K) : (term172 A K ltle k f dom neut j i) = (term173 A K ltle k f dom neut j i).
Proof. exact (MK_COMB (@lem6402436 A K ltle i k f j dom neut) (@lem6402439 K j i)). Qed.
Lemma lem6402443 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term174 A K ltle k f dom neut i) = (term175 A K ltle k f dom neut i).
Proof. exact (fun_ext (fun j : K => @lem6402440 A K ltle k f dom neut j i)). Qed.
Lemma lem6402444 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6402445 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term166 A K ltle k f dom neut i) = (term176 A K ltle k f dom neut i).
Proof. exact (MK_COMB (@lem6402444 K) (@lem6402443 A K ltle k f dom neut i)). Qed.
Lemma lem6402450 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term165 A K ltle k f dom neut i) = (term177 A K ltle k f dom neut i).
Proof. exact (MK_COMB (@lem6402415 A K i k f dom neut) (@lem6402445 A K ltle k f dom neut i)). Qed.
Lemma lem6402455 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term164 A K ltle k f dom neut i) = (term177 A K ltle k f dom neut i).
Proof. exact (TRANS (@lem6402363 A K ltle k f dom neut i) (@lem6402450 A K ltle k f dom neut i)). Qed.
Lemma lem6402456 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term178 A K ltle k f dom neut) = (term179 A K ltle k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402455 A K ltle k f dom neut i)). Qed.
Lemma lem6402457 {K : Type'} : (@ε K) = (@ε K).
Proof. exact (eq_refl (@ε K)). Qed.
Lemma lem6402458 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term184 A K ltle k f dom neut) = (term185 A K ltle k f dom neut).
Proof. exact (MK_COMB (@lem6402457 K) (@lem6402456 A K ltle k f dom neut)). Qed.
Lemma lem6402459 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term186 A K ltle k f dom neut) = (term187 A K ltle k f dom neut).
Proof. exact (MK_COMB (@lem6402358 A K ltle k f dom neut) (@lem6402458 A K ltle k f dom neut)). Qed.
Lemma lem6402461 {_124325 : Type'} (y : _124325) (s : _124325 -> Prop) (P : _124325 -> Prop) : (term46 _124325 s P y) = (term38 _124325 y s P).
Proof. exact (EQ_MP (@lem6401486 _124325 y s P) (@lem6402039 _124325 s P y)). Qed.
Lemma lem6402462 {K : Type'} (y : K) (s : K -> Prop) (P : K -> Prop) : (term46 K s P y) = (term38 K y s P).
Proof. exact (@lem6402461 K y s P). Qed.
Lemma lem6402463 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term116 A K k f dom neut i) = (term117 A K i k f dom neut).
Proof. exact (@lem6402462 K i k (term118 A K f dom neut)). Qed.
Lemma lem6402464 {A K : Type'} (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term119 A K f dom neut i) = (term120 A K f i dom neut).
Proof. exact (eq_refl (term119 A K f dom neut i)). Qed.
Lemma lem6402465 {K : Type'} (i : K) (k : K -> Prop) : (term41 K i k) = (term41 K i k).
Proof. exact (eq_refl (term41 K i k)). Qed.
Lemma lem6402466 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term121 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (MK_COMB (@lem6402465 K i k) (@lem6402464 A K f i dom neut)). Qed.
Lemma lem6402467 {K : Type'} (GEN_PVAR_268 : K) : (@SETSPEC K GEN_PVAR_268) = (@SETSPEC K GEN_PVAR_268).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_268)). Qed.
Lemma lem6402468 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term123 A K GEN_PVAR_268 k f dom neut i) = (term124 A K GEN_PVAR_268 k f i dom neut).
Proof. exact (MK_COMB (@lem6402467 K GEN_PVAR_268) (@lem6402466 A K k f i dom neut)). Qed.
Lemma lem6402469 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6402470 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term125 A K GEN_PVAR_268 k f dom neut i) = (term126 A K GEN_PVAR_268 k f dom neut i).
Proof. exact (MK_COMB (@lem6402468 A K GEN_PVAR_268 k f i dom neut) (@lem6402469 K i)). Qed.
Lemma lem6402471 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term127 A K GEN_PVAR_268 k f dom neut) = (term128 A K GEN_PVAR_268 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402470 A K GEN_PVAR_268 k f dom neut i)). Qed.
Lemma lem6402472 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6402473 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term129 A K GEN_PVAR_268 k f dom neut) = (term130 A K GEN_PVAR_268 k f dom neut).
Proof. exact (MK_COMB (@lem6402472 K) (@lem6402471 A K GEN_PVAR_268 k f dom neut)). Qed.
Lemma lem6402474 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term131 A K k f dom neut) = (term132 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_268 : K => @lem6402473 A K GEN_PVAR_268 k f dom neut)). Qed.
Lemma lem6402475 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6402476 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term133 A K k f dom neut) = (term113 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402475 K) (@lem6402474 A K k f dom neut)). Qed.
Lemma lem6402477 {K : Type'} (i : K) : (@IN K i) = (@IN K i).
Proof. exact (eq_refl (@IN K i)). Qed.
Lemma lem6402478 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term117 A K i k f dom neut) = (term134 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402477 K i) (@lem6402476 A K k f dom neut)). Qed.
Lemma lem6402479 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6402480 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term135 A K i k f dom neut) = (term136 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402479) (@lem6402478 A K i k f dom neut)). Qed.
Lemma lem6402481 {A K : Type'} (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term119 A K f dom neut i) = (term120 A K f i dom neut).
Proof. exact (eq_refl (term119 A K f dom neut i)). Qed.
Lemma lem6402482 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term116 A K k f dom neut i) = (term137 A K k f i dom neut).
Proof. exact (MK_COMB (@lem6402480 A K i k f dom neut) (@lem6402481 A K f i dom neut)). Qed.
Lemma lem6402483 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6402484 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term138 A K k f dom neut i) = (term139 A K k f i dom neut).
Proof. exact (MK_COMB (@lem6402483) (@lem6402482 A K k f i dom neut)). Qed.
Lemma lem6402485 {A K : Type'} (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term119 A K f dom neut i) = (term120 A K f i dom neut).
Proof. exact (eq_refl (term119 A K f dom neut i)). Qed.
Lemma lem6402486 {K : Type'} (i : K) (k : K -> Prop) : (term41 K i k) = (term41 K i k).
Proof. exact (eq_refl (term41 K i k)). Qed.
Lemma lem6402487 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term121 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (MK_COMB (@lem6402486 K i k) (@lem6402485 A K f i dom neut)). Qed.
Lemma lem6402488 {K : Type'} (GEN_PVAR_267 : K) : (@SETSPEC K GEN_PVAR_267) = (@SETSPEC K GEN_PVAR_267).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_267)). Qed.
Lemma lem6402489 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term123 A K GEN_PVAR_267 k f dom neut i) = (term124 A K GEN_PVAR_267 k f i dom neut).
Proof. exact (MK_COMB (@lem6402488 K GEN_PVAR_267) (@lem6402487 A K k f i dom neut)). Qed.
Lemma lem6402490 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6402491 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term125 A K GEN_PVAR_267 k f dom neut i) = (term126 A K GEN_PVAR_267 k f dom neut i).
Proof. exact (MK_COMB (@lem6402489 A K GEN_PVAR_267 k f i dom neut) (@lem6402490 K i)). Qed.
Lemma lem6402492 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term127 A K GEN_PVAR_267 k f dom neut) = (term128 A K GEN_PVAR_267 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402491 A K GEN_PVAR_267 k f dom neut i)). Qed.
Lemma lem6402493 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6402494 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term129 A K GEN_PVAR_267 k f dom neut) = (term130 A K GEN_PVAR_267 k f dom neut).
Proof. exact (MK_COMB (@lem6402493 K) (@lem6402492 A K GEN_PVAR_267 k f dom neut)). Qed.
Lemma lem6402495 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term131 A K k f dom neut) = (term132 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_267 : K => @lem6402494 A K GEN_PVAR_267 k f dom neut)). Qed.
Lemma lem6402496 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6402497 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term133 A K k f dom neut) = (term113 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402496 K) (@lem6402495 A K k f dom neut)). Qed.
Lemma lem6402498 {K : Type'} (i : K) : (@IN K i) = (@IN K i).
Proof. exact (eq_refl (@IN K i)). Qed.
Lemma lem6402499 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term117 A K i k f dom neut) = (term134 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402498 K i) (@lem6402497 A K k f dom neut)). Qed.
Lemma lem6402500 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term116 A K k f dom neut i) = (term117 A K i k f dom neut)) = ((term137 A K k f i dom neut) = (term134 A K i k f dom neut)).
Proof. exact (MK_COMB (@lem6402484 A K k f i dom neut) (@lem6402499 A K i k f dom neut)). Qed.
Lemma lem6402501 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term137 A K k f i dom neut) = (term134 A K i k f dom neut).
Proof. exact (EQ_MP (@lem6402500 A K i k f dom neut) (@lem6402463 A K i k f dom neut)). Qed.
Lemma lem6402508 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term188 A K k f dom neut) = (term189 A K k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402501 A K i k f dom neut)). Qed.
Lemma lem6402509 {K : Type'} : (@ε K) = (@ε K).
Proof. exact (eq_refl (@ε K)). Qed.
Lemma lem6402510 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term190 A K k f dom neut) = (term191 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402509 K) (@lem6402508 A K k f dom neut)). Qed.
Lemma lem6402511 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term192 A K ltle k f dom neut) = (term193 A K ltle k f dom neut).
Proof. exact (MK_COMB (@lem6402459 A K ltle k f dom neut) (@lem6402510 A K k f dom neut)). Qed.
Lemma lem6402512 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (neut : A) (f : K -> A) : (term194 A K op ltle k dom neut f) = (term194 A K op ltle k dom neut f).
Proof. exact (eq_refl (term194 A K op ltle k dom neut f)). Qed.
Lemma lem6402513 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term195 A K op ltle k f dom neut) = (term196 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6402512 A K op ltle k dom neut f) (@lem6402511 A K ltle k f dom neut)). Qed.
Lemma lem6402514 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term197 A K op ltle k f dom neut) = (term198 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6402236 A K k f dom neut) (@lem6402513 A K op ltle k f dom neut)). Qed.
Lemma lem6402515 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6402516 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term112 A K op ltle k f dom neut) = (term199 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6402514 A K op ltle k f dom neut) (@lem6402515 A neut)). Qed.
Lemma lem6402517 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem6402518 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term115 A K op ltle k f dom neut) = (term200 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6402517 A) (@lem6402516 A K op ltle k f dom neut)). Qed.
Lemma lem6402546 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term0 t1 t2 t3) = (term1 t1 t2 t3).
Proof. exact (EQ_MP (@lem6402049 t1 t2 t3) (@lem6402048 t1 t2 t3)). Qed.
Lemma lem6402547 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term201 A K ltle k f dom neut i) = (term202 A K ltle k f dom neut i).
Proof. exact (@lem6402546 (@IN K i k) (term120 A K f i dom neut) (term203 A K ltle k f dom neut i)). Qed.
Lemma lem6402559 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term0 t1 t2 t3) = (term1 t1 t2 t3).
Proof. exact (EQ_MP (@lem6402049 t1 t2 t3) (@lem6402048 t1 t2 t3)). Qed.
Lemma lem6402560 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term204 A K ltle i k f j dom neut) = (term205 A K ltle i k f j dom neut).
Proof. exact (@lem6402559 (ltle j i) (@IN K j k) (term120 A K f j dom neut)). Qed.
Lemma lem6402565 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6402566 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term206 A K ltle i k f j dom neut) = (term207 A K ltle i k f j dom neut).
Proof. exact (MK_COMB (@lem6402565) (@lem6402560 A K ltle i k f j dom neut)). Qed.
Lemma lem6402569 {K : Type'} (j : K) (i : K) : (j = i) = (j = i).
Proof. exact (eq_refl (j = i)). Qed.
Lemma lem6402570 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (j : K) (i : K) : (term208 A K ltle k f dom neut j i) = (term209 A K ltle k f dom neut j i).
Proof. exact (MK_COMB (@lem6402566 A K ltle i k f j dom neut) (@lem6402569 K j i)). Qed.
Lemma lem6402573 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term210 A K ltle k f dom neut i) = (term211 A K ltle k f dom neut i).
Proof. exact (fun_ext (fun j : K => @lem6402570 A K ltle k f dom neut j i)). Qed.
Lemma lem6402574 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6402575 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term203 A K ltle k f dom neut i) = (term212 A K ltle k f dom neut i).
Proof. exact (MK_COMB (@lem6402574 K) (@lem6402573 A K ltle k f dom neut i)). Qed.
Lemma lem6402580 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term213 A K k f i dom neut) = (term213 A K k f i dom neut).
Proof. exact (eq_refl (term213 A K k f i dom neut)). Qed.
Lemma lem6402581 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term202 A K ltle k f dom neut i) = (term214 A K ltle k f dom neut i).
Proof. exact (MK_COMB (@lem6402580 A K k f i dom neut) (@lem6402575 A K ltle k f dom neut i)). Qed.
Lemma lem6402584 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term201 A K ltle k f dom neut i) = (term214 A K ltle k f dom neut i).
Proof. exact (TRANS (@lem6402547 A K ltle k f dom neut i) (@lem6402581 A K ltle k f dom neut i)). Qed.
Lemma lem6402585 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term215 A K ltle k f dom neut) = (term216 A K ltle k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402584 A K ltle k f dom neut i)). Qed.
Lemma lem6402586 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6402587 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term217 A K ltle k f dom neut) = (term218 A K ltle k f dom neut).
Proof. exact (MK_COMB (@lem6402586 K) (@lem6402585 A K ltle k f dom neut)). Qed.
Lemma lem6402592 {K : Type'} : (@COND K) = (@COND K).
Proof. exact (eq_refl (@COND K)). Qed.
Lemma lem6402593 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term219 A K ltle k f dom neut) = (term220 A K ltle k f dom neut).
Proof. exact (MK_COMB (@lem6402592 K) (@lem6402587 A K ltle k f dom neut)). Qed.
Lemma lem6402595 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term0 t1 t2 t3) = (term1 t1 t2 t3).
Proof. exact (EQ_MP (@lem6402049 t1 t2 t3) (@lem6402048 t1 t2 t3)). Qed.
Lemma lem6402596 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term201 A K ltle k f dom neut i) = (term202 A K ltle k f dom neut i).
Proof. exact (@lem6402595 (@IN K i k) (term120 A K f i dom neut) (term203 A K ltle k f dom neut i)). Qed.
Lemma lem6402608 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term0 t1 t2 t3) = (term1 t1 t2 t3).
Proof. exact (EQ_MP (@lem6402049 t1 t2 t3) (@lem6402048 t1 t2 t3)). Qed.
Lemma lem6402609 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term204 A K ltle i k f j dom neut) = (term205 A K ltle i k f j dom neut).
Proof. exact (@lem6402608 (ltle j i) (@IN K j k) (term120 A K f j dom neut)). Qed.
Lemma lem6402614 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6402615 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term206 A K ltle i k f j dom neut) = (term207 A K ltle i k f j dom neut).
Proof. exact (MK_COMB (@lem6402614) (@lem6402609 A K ltle i k f j dom neut)). Qed.
Lemma lem6402618 {K : Type'} (j : K) (i : K) : (j = i) = (j = i).
Proof. exact (eq_refl (j = i)). Qed.
Lemma lem6402619 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (j : K) (i : K) : (term208 A K ltle k f dom neut j i) = (term209 A K ltle k f dom neut j i).
Proof. exact (MK_COMB (@lem6402615 A K ltle i k f j dom neut) (@lem6402618 K j i)). Qed.
Lemma lem6402622 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term210 A K ltle k f dom neut i) = (term211 A K ltle k f dom neut i).
Proof. exact (fun_ext (fun j : K => @lem6402619 A K ltle k f dom neut j i)). Qed.
Lemma lem6402623 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6402624 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term203 A K ltle k f dom neut i) = (term212 A K ltle k f dom neut i).
Proof. exact (MK_COMB (@lem6402623 K) (@lem6402622 A K ltle k f dom neut i)). Qed.
Lemma lem6402629 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term213 A K k f i dom neut) = (term213 A K k f i dom neut).
Proof. exact (eq_refl (term213 A K k f i dom neut)). Qed.
Lemma lem6402630 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term202 A K ltle k f dom neut i) = (term214 A K ltle k f dom neut i).
Proof. exact (MK_COMB (@lem6402629 A K k f i dom neut) (@lem6402624 A K ltle k f dom neut i)). Qed.
Lemma lem6402633 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term201 A K ltle k f dom neut i) = (term214 A K ltle k f dom neut i).
Proof. exact (TRANS (@lem6402596 A K ltle k f dom neut i) (@lem6402630 A K ltle k f dom neut i)). Qed.
Lemma lem6402634 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term215 A K ltle k f dom neut) = (term216 A K ltle k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402633 A K ltle k f dom neut i)). Qed.
Lemma lem6402635 {K : Type'} : (@ε K) = (@ε K).
Proof. exact (eq_refl (@ε K)). Qed.
Lemma lem6402636 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term221 A K ltle k f dom neut) = (term222 A K ltle k f dom neut).
Proof. exact (MK_COMB (@lem6402635 K) (@lem6402634 A K ltle k f dom neut)). Qed.
Lemma lem6402637 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term223 A K ltle k f dom neut) = (term224 A K ltle k f dom neut).
Proof. exact (MK_COMB (@lem6402593 A K ltle k f dom neut) (@lem6402636 A K ltle k f dom neut)). Qed.
Lemma lem6402640 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term225 A K k f dom neut) = (term225 A K k f dom neut).
Proof. exact (eq_refl (term225 A K k f dom neut)). Qed.
Lemma lem6402641 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term226 A K ltle k f dom neut) = (term227 A K ltle k f dom neut).
Proof. exact (MK_COMB (@lem6402637 A K ltle k f dom neut) (@lem6402640 A K k f dom neut)). Qed.
Lemma lem6402642 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (neut : A) (f : K -> A) : (term228 A K op ltle k dom neut f) = (term228 A K op ltle k dom neut f).
Proof. exact (eq_refl (term228 A K op ltle k dom neut f)). Qed.
Lemma lem6402643 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term229 A K op ltle k f dom neut) = (term230 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6402642 A K op ltle k dom neut f) (@lem6402641 A K ltle k f dom neut)). Qed.
Lemma lem6402644 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term231 A K k f dom neut) = (term231 A K k f dom neut).
Proof. exact (eq_refl (term231 A K k f dom neut)). Qed.
Lemma lem6402645 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term232 A K op ltle k f dom neut) = (term233 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6402644 A K k f dom neut) (@lem6402643 A K op ltle k f dom neut)). Qed.
Lemma lem6402646 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6402647 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term110 A K op ltle k f dom neut) = (term234 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6402645 A K op ltle k f dom neut) (@lem6402646 A neut)). Qed.
Lemma lem6402648 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term112 A K op ltle k f dom neut) = (term110 A K op ltle k f dom neut)) = ((term199 A K op ltle k f dom neut) = (term234 A K op ltle k f dom neut)).
Proof. exact (MK_COMB (@lem6402518 A K op ltle k f dom neut) (@lem6402647 A K op ltle k f dom neut)). Qed.
Lemma lem6402651 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term199 A K op ltle k f dom neut) = (term234 A K op ltle k f dom neut)) = ((term112 A K op ltle k f dom neut) = (term110 A K op ltle k f dom neut)).
Proof. exact (SYM (@lem6402648 A K op ltle k f dom neut)). Qed.
Lemma lem6402661 {_83095 : Type'} (p : _83095 -> Prop) (x : _83095) : (term21 _83095 x p) = (p x).
Proof. exact (EQ_MP (@lem6401362 _83095 p x) (@lem6401361 _83095 p x)). Qed.
Lemma lem6402662 {K : Type'} (p : K -> Prop) (x : K) : (term21 K x p) = (p x).
Proof. exact (@lem6402661 K p x). Qed.
Lemma lem6402663 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term235 A K i k f dom neut) = (term236 A K k f dom neut i).
Proof. exact (@lem6402662 K (term237 A K k f dom neut) i). Qed.
Lemma lem6402664 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term236 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (eq_refl (term236 A K k f dom neut i)). Qed.
Lemma lem6402665 {K : Type'} (GEN_PVAR_267 : K) : (@SETSPEC K GEN_PVAR_267) = (@SETSPEC K GEN_PVAR_267).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_267)). Qed.
Lemma lem6402666 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term238 A K GEN_PVAR_267 k f dom neut i) = (term124 A K GEN_PVAR_267 k f i dom neut).
Proof. exact (MK_COMB (@lem6402665 K GEN_PVAR_267) (@lem6402664 A K k f i dom neut)). Qed.
Lemma lem6402667 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6402668 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term239 A K GEN_PVAR_267 k f dom neut i) = (term126 A K GEN_PVAR_267 k f dom neut i).
Proof. exact (MK_COMB (@lem6402666 A K GEN_PVAR_267 k f i dom neut) (@lem6402667 K i)). Qed.
Lemma lem6402669 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term240 A K GEN_PVAR_267 k f dom neut) = (term128 A K GEN_PVAR_267 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402668 A K GEN_PVAR_267 k f dom neut i)). Qed.
Lemma lem6402670 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6402671 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term241 A K GEN_PVAR_267 k f dom neut) = (term130 A K GEN_PVAR_267 k f dom neut).
Proof. exact (MK_COMB (@lem6402670 K) (@lem6402669 A K GEN_PVAR_267 k f dom neut)). Qed.
Lemma lem6402672 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term242 A K k f dom neut) = (term132 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_267 : K => @lem6402671 A K GEN_PVAR_267 k f dom neut)). Qed.
Lemma lem6402673 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6402674 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term243 A K k f dom neut) = (term113 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402673 K) (@lem6402672 A K k f dom neut)). Qed.
Lemma lem6402675 {K : Type'} (i : K) : (@IN K i) = (@IN K i).
Proof. exact (eq_refl (@IN K i)). Qed.
Lemma lem6402676 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term235 A K i k f dom neut) = (term134 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402675 K i) (@lem6402674 A K k f dom neut)). Qed.
Lemma lem6402677 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6402678 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term244 A K i k f dom neut) = (term245 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402677) (@lem6402676 A K i k f dom neut)). Qed.
Lemma lem6402679 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term236 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (eq_refl (term236 A K k f dom neut i)). Qed.
Lemma lem6402680 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : ((term235 A K i k f dom neut) = (term236 A K k f dom neut i)) = ((term134 A K i k f dom neut) = (term122 A K k f i dom neut)).
Proof. exact (MK_COMB (@lem6402678 A K i k f dom neut) (@lem6402679 A K k f i dom neut)). Qed.
Lemma lem6402681 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term134 A K i k f dom neut) = (term122 A K k f i dom neut).
Proof. exact (EQ_MP (@lem6402680 A K k f i dom neut) (@lem6402663 A K k f dom neut i)). Qed.
Lemma lem6402684 {K : Type'} (GEN_PVAR_263 : K) : (@SETSPEC K GEN_PVAR_263) = (@SETSPEC K GEN_PVAR_263).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_263)). Qed.
Lemma lem6402685 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term141 A K GEN_PVAR_263 i k f dom neut) = (term124 A K GEN_PVAR_263 k f i dom neut).
Proof. exact (MK_COMB (@lem6402684 K GEN_PVAR_263) (@lem6402681 A K k f i dom neut)). Qed.
Lemma lem6402686 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6402687 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term143 A K GEN_PVAR_263 k f dom neut i) = (term126 A K GEN_PVAR_263 k f dom neut i).
Proof. exact (MK_COMB (@lem6402685 A K GEN_PVAR_263 k f i dom neut) (@lem6402686 K i)). Qed.
Lemma lem6402688 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term145 A K GEN_PVAR_263 k f dom neut) = (term128 A K GEN_PVAR_263 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402687 A K GEN_PVAR_263 k f dom neut i)). Qed.
Lemma lem6402689 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6402690 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term147 A K GEN_PVAR_263 k f dom neut) = (term130 A K GEN_PVAR_263 k f dom neut).
Proof. exact (MK_COMB (@lem6402689 K) (@lem6402688 A K GEN_PVAR_263 k f dom neut)). Qed.
Lemma lem6402695 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term149 A K k f dom neut) = (term132 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6402690 A K GEN_PVAR_263 k f dom neut)). Qed.
Lemma lem6402696 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6402697 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term151 A K k f dom neut) = (term113 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402696 K) (@lem6402695 A K k f dom neut)). Qed.
Lemma lem6402698 {K : Type'} : (@FINITE K) = (@FINITE K).
Proof. exact (eq_refl (@FINITE K)). Qed.
Lemma lem6402699 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term153 A K k f dom neut) = (term246 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402698 K) (@lem6402697 A K k f dom neut)). Qed.
Lemma lem6402700 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6402701 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term155 A K k f dom neut) = (term247 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402700) (@lem6402699 A K k f dom neut)). Qed.
Lemma lem6402709 {_83095 : Type'} (p : _83095 -> Prop) (x : _83095) : (term21 _83095 x p) = (p x).
Proof. exact (EQ_MP (@lem6401362 _83095 p x) (@lem6401361 _83095 p x)). Qed.
Lemma lem6402710 {K : Type'} (p : K -> Prop) (x : K) : (term21 K x p) = (p x).
Proof. exact (@lem6402709 K p x). Qed.
Lemma lem6402711 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term235 A K i k f dom neut) = (term236 A K k f dom neut i).
Proof. exact (@lem6402710 K (term237 A K k f dom neut) i). Qed.
Lemma lem6402712 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term236 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (eq_refl (term236 A K k f dom neut i)). Qed.
Lemma lem6402713 {K : Type'} (GEN_PVAR_267 : K) : (@SETSPEC K GEN_PVAR_267) = (@SETSPEC K GEN_PVAR_267).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_267)). Qed.
Lemma lem6402714 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term238 A K GEN_PVAR_267 k f dom neut i) = (term124 A K GEN_PVAR_267 k f i dom neut).
Proof. exact (MK_COMB (@lem6402713 K GEN_PVAR_267) (@lem6402712 A K k f i dom neut)). Qed.
Lemma lem6402715 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6402716 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term239 A K GEN_PVAR_267 k f dom neut i) = (term126 A K GEN_PVAR_267 k f dom neut i).
Proof. exact (MK_COMB (@lem6402714 A K GEN_PVAR_267 k f i dom neut) (@lem6402715 K i)). Qed.
Lemma lem6402717 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term240 A K GEN_PVAR_267 k f dom neut) = (term128 A K GEN_PVAR_267 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402716 A K GEN_PVAR_267 k f dom neut i)). Qed.
Lemma lem6402718 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6402719 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term241 A K GEN_PVAR_267 k f dom neut) = (term130 A K GEN_PVAR_267 k f dom neut).
Proof. exact (MK_COMB (@lem6402718 K) (@lem6402717 A K GEN_PVAR_267 k f dom neut)). Qed.
Lemma lem6402720 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term242 A K k f dom neut) = (term132 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_267 : K => @lem6402719 A K GEN_PVAR_267 k f dom neut)). Qed.
Lemma lem6402721 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6402722 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term243 A K k f dom neut) = (term113 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402721 K) (@lem6402720 A K k f dom neut)). Qed.
Lemma lem6402723 {K : Type'} (i : K) : (@IN K i) = (@IN K i).
Proof. exact (eq_refl (@IN K i)). Qed.
Lemma lem6402724 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term235 A K i k f dom neut) = (term134 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402723 K i) (@lem6402722 A K k f dom neut)). Qed.
Lemma lem6402725 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6402726 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term244 A K i k f dom neut) = (term245 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402725) (@lem6402724 A K i k f dom neut)). Qed.
Lemma lem6402727 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term236 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (eq_refl (term236 A K k f dom neut i)). Qed.
Lemma lem6402728 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : ((term235 A K i k f dom neut) = (term236 A K k f dom neut i)) = ((term134 A K i k f dom neut) = (term122 A K k f i dom neut)).
Proof. exact (MK_COMB (@lem6402726 A K i k f dom neut) (@lem6402727 A K k f i dom neut)). Qed.
Lemma lem6402729 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term134 A K i k f dom neut) = (term122 A K k f i dom neut).
Proof. exact (EQ_MP (@lem6402728 A K k f i dom neut) (@lem6402711 A K k f dom neut i)). Qed.
Lemma lem6402732 {K : Type'} (GEN_PVAR_264 : K) : (@SETSPEC K GEN_PVAR_264) = (@SETSPEC K GEN_PVAR_264).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_264)). Qed.
Lemma lem6402733 {A K : Type'} (GEN_PVAR_264 : K) (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term141 A K GEN_PVAR_264 i k f dom neut) = (term124 A K GEN_PVAR_264 k f i dom neut).
Proof. exact (MK_COMB (@lem6402732 K GEN_PVAR_264) (@lem6402729 A K k f i dom neut)). Qed.
Lemma lem6402734 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6402735 {A K : Type'} (GEN_PVAR_264 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term143 A K GEN_PVAR_264 k f dom neut i) = (term126 A K GEN_PVAR_264 k f dom neut i).
Proof. exact (MK_COMB (@lem6402733 A K GEN_PVAR_264 k f i dom neut) (@lem6402734 K i)). Qed.
Lemma lem6402736 {A K : Type'} (GEN_PVAR_264 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term145 A K GEN_PVAR_264 k f dom neut) = (term128 A K GEN_PVAR_264 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402735 A K GEN_PVAR_264 k f dom neut i)). Qed.
Lemma lem6402737 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6402738 {A K : Type'} (GEN_PVAR_264 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term147 A K GEN_PVAR_264 k f dom neut) = (term130 A K GEN_PVAR_264 k f dom neut).
Proof. exact (MK_COMB (@lem6402737 K) (@lem6402736 A K GEN_PVAR_264 k f dom neut)). Qed.
Lemma lem6402743 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term149 A K k f dom neut) = (term132 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_264 : K => @lem6402738 A K GEN_PVAR_264 k f dom neut)). Qed.
Lemma lem6402744 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6402745 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term151 A K k f dom neut) = (term113 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402744 K) (@lem6402743 A K k f dom neut)). Qed.
Lemma lem6402746 {K : Type'} : (@eq (K -> Prop)) = (@eq (K -> Prop)).
Proof. exact (eq_refl (@eq (K -> Prop))). Qed.
Lemma lem6402747 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term157 A K k f dom neut) = (term248 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402746 K) (@lem6402745 A K k f dom neut)). Qed.
Lemma lem6402748 {K : Type'} : (@EMPTY K) = (@EMPTY K).
Proof. exact (eq_refl (@EMPTY K)). Qed.
Lemma lem6402749 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term151 A K k f dom neut) = (@EMPTY K)) = ((term113 A K k f dom neut) = (@EMPTY K)).
Proof. exact (MK_COMB (@lem6402747 A K k f dom neut) (@lem6402748 K)). Qed.
Lemma lem6402752 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6402753 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term159 A K k f dom neut) = (term249 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402752) (@lem6402749 A K k f dom neut)). Qed.
Lemma lem6402754 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term161 A K k f dom neut) = (term250 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402701 A K k f dom neut) (@lem6402753 A K k f dom neut)). Qed.
Lemma lem6402757 {A : Type'} : (@COND A) = (@COND A).
Proof. exact (eq_refl (@COND A)). Qed.
Lemma lem6402758 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term163 A K k f dom neut) = (term231 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402757 A) (@lem6402754 A K k f dom neut)). Qed.
Lemma lem6402778 {_83095 : Type'} (p : _83095 -> Prop) (x : _83095) : (term21 _83095 x p) = (p x).
Proof. exact (EQ_MP (@lem6401362 _83095 p x) (@lem6401361 _83095 p x)). Qed.
Lemma lem6402779 {K : Type'} (p : K -> Prop) (x : K) : (term21 K x p) = (p x).
Proof. exact (@lem6402778 K p x). Qed.
Lemma lem6402780 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term235 A K i k f dom neut) = (term236 A K k f dom neut i).
Proof. exact (@lem6402779 K (term237 A K k f dom neut) i). Qed.
Lemma lem6402781 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term236 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (eq_refl (term236 A K k f dom neut i)). Qed.
Lemma lem6402782 {K : Type'} (GEN_PVAR_267 : K) : (@SETSPEC K GEN_PVAR_267) = (@SETSPEC K GEN_PVAR_267).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_267)). Qed.
Lemma lem6402783 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term238 A K GEN_PVAR_267 k f dom neut i) = (term124 A K GEN_PVAR_267 k f i dom neut).
Proof. exact (MK_COMB (@lem6402782 K GEN_PVAR_267) (@lem6402781 A K k f i dom neut)). Qed.
Lemma lem6402784 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6402785 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term239 A K GEN_PVAR_267 k f dom neut i) = (term126 A K GEN_PVAR_267 k f dom neut i).
Proof. exact (MK_COMB (@lem6402783 A K GEN_PVAR_267 k f i dom neut) (@lem6402784 K i)). Qed.
Lemma lem6402786 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term240 A K GEN_PVAR_267 k f dom neut) = (term128 A K GEN_PVAR_267 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402785 A K GEN_PVAR_267 k f dom neut i)). Qed.
Lemma lem6402787 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6402788 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term241 A K GEN_PVAR_267 k f dom neut) = (term130 A K GEN_PVAR_267 k f dom neut).
Proof. exact (MK_COMB (@lem6402787 K) (@lem6402786 A K GEN_PVAR_267 k f dom neut)). Qed.
Lemma lem6402789 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term242 A K k f dom neut) = (term132 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_267 : K => @lem6402788 A K GEN_PVAR_267 k f dom neut)). Qed.
Lemma lem6402790 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6402791 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term243 A K k f dom neut) = (term113 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402790 K) (@lem6402789 A K k f dom neut)). Qed.
Lemma lem6402792 {K : Type'} (i : K) : (@IN K i) = (@IN K i).
Proof. exact (eq_refl (@IN K i)). Qed.
Lemma lem6402793 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term235 A K i k f dom neut) = (term134 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402792 K i) (@lem6402791 A K k f dom neut)). Qed.
Lemma lem6402794 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6402795 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term244 A K i k f dom neut) = (term245 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402794) (@lem6402793 A K i k f dom neut)). Qed.
Lemma lem6402796 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term236 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (eq_refl (term236 A K k f dom neut i)). Qed.
Lemma lem6402797 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : ((term235 A K i k f dom neut) = (term236 A K k f dom neut i)) = ((term134 A K i k f dom neut) = (term122 A K k f i dom neut)).
Proof. exact (MK_COMB (@lem6402795 A K i k f dom neut) (@lem6402796 A K k f i dom neut)). Qed.
Lemma lem6402798 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term134 A K i k f dom neut) = (term122 A K k f i dom neut).
Proof. exact (EQ_MP (@lem6402797 A K k f i dom neut) (@lem6402780 A K k f dom neut i)). Qed.
Lemma lem6402801 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6402802 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term136 A K i k f dom neut) = (term213 A K k f i dom neut).
Proof. exact (MK_COMB (@lem6402801) (@lem6402798 A K k f i dom neut)). Qed.
Lemma lem6402810 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term1 t1 t2 t3) = (term0 t1 t2 t3).
Proof. exact (EQ_MP (@lem6401331 t1 t2 t3) (@lem6401330 t1 t2 t3)). Qed.
Lemma lem6402811 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term169 A K ltle i k f j dom neut) = (term168 A K ltle i k f j dom neut).
Proof. exact (@lem6402810 (ltle j i) (term134 A K j k f dom neut) (term120 A K f j dom neut)). Qed.
Lemma lem6402817 {_83095 : Type'} (p : _83095 -> Prop) (x : _83095) : (term21 _83095 x p) = (p x).
Proof. exact (EQ_MP (@lem6401362 _83095 p x) (@lem6401361 _83095 p x)). Qed.
Lemma lem6402818 {K : Type'} (p : K -> Prop) (x : K) : (term21 K x p) = (p x).
Proof. exact (@lem6402817 K p x). Qed.
Lemma lem6402819 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (j : K) : (term235 A K j k f dom neut) = (term236 A K k f dom neut j).
Proof. exact (@lem6402818 K (term237 A K k f dom neut) j). Qed.
Lemma lem6402820 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term236 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (eq_refl (term236 A K k f dom neut i)). Qed.
Lemma lem6402821 {K : Type'} (GEN_PVAR_268 : K) : (@SETSPEC K GEN_PVAR_268) = (@SETSPEC K GEN_PVAR_268).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_268)). Qed.
Lemma lem6402822 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term238 A K GEN_PVAR_268 k f dom neut i) = (term124 A K GEN_PVAR_268 k f i dom neut).
Proof. exact (MK_COMB (@lem6402821 K GEN_PVAR_268) (@lem6402820 A K k f i dom neut)). Qed.
Lemma lem6402823 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6402824 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term239 A K GEN_PVAR_268 k f dom neut i) = (term126 A K GEN_PVAR_268 k f dom neut i).
Proof. exact (MK_COMB (@lem6402822 A K GEN_PVAR_268 k f i dom neut) (@lem6402823 K i)). Qed.
Lemma lem6402825 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term240 A K GEN_PVAR_268 k f dom neut) = (term128 A K GEN_PVAR_268 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402824 A K GEN_PVAR_268 k f dom neut i)). Qed.
Lemma lem6402826 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6402827 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term241 A K GEN_PVAR_268 k f dom neut) = (term130 A K GEN_PVAR_268 k f dom neut).
Proof. exact (MK_COMB (@lem6402826 K) (@lem6402825 A K GEN_PVAR_268 k f dom neut)). Qed.
Lemma lem6402828 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term242 A K k f dom neut) = (term132 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_268 : K => @lem6402827 A K GEN_PVAR_268 k f dom neut)). Qed.
Lemma lem6402829 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6402830 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term243 A K k f dom neut) = (term113 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402829 K) (@lem6402828 A K k f dom neut)). Qed.
Lemma lem6402831 {K : Type'} (j : K) : (@IN K j) = (@IN K j).
Proof. exact (eq_refl (@IN K j)). Qed.
Lemma lem6402832 {A K : Type'} (j : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term235 A K j k f dom neut) = (term134 A K j k f dom neut).
Proof. exact (MK_COMB (@lem6402831 K j) (@lem6402830 A K k f dom neut)). Qed.
Lemma lem6402833 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6402834 {A K : Type'} (j : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term244 A K j k f dom neut) = (term245 A K j k f dom neut).
Proof. exact (MK_COMB (@lem6402833) (@lem6402832 A K j k f dom neut)). Qed.
Lemma lem6402835 {A K : Type'} (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term236 A K k f dom neut j) = (term122 A K k f j dom neut).
Proof. exact (eq_refl (term236 A K k f dom neut j)). Qed.
Lemma lem6402836 {A K : Type'} (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : ((term235 A K j k f dom neut) = (term236 A K k f dom neut j)) = ((term134 A K j k f dom neut) = (term122 A K k f j dom neut)).
Proof. exact (MK_COMB (@lem6402834 A K j k f dom neut) (@lem6402835 A K k f j dom neut)). Qed.
Lemma lem6402837 {A K : Type'} (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term134 A K j k f dom neut) = (term122 A K k f j dom neut).
Proof. exact (EQ_MP (@lem6402836 A K k f j dom neut) (@lem6402819 A K k f dom neut j)). Qed.
Lemma lem6402840 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6402841 {A K : Type'} (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term136 A K j k f dom neut) = (term213 A K k f j dom neut).
Proof. exact (MK_COMB (@lem6402840) (@lem6402837 A K k f j dom neut)). Qed.
Lemma lem6402842 {A K : Type'} (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term120 A K f j dom neut) = (term120 A K f j dom neut).
Proof. exact (eq_refl (term120 A K f j dom neut)). Qed.
Lemma lem6402843 {A K : Type'} (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term137 A K k f j dom neut) = (term251 A K k f j dom neut).
Proof. exact (MK_COMB (@lem6402841 A K k f j dom neut) (@lem6402842 A K f j dom neut)). Qed.
Lemma lem6402845 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term1 t1 t2 t3) = (term0 t1 t2 t3).
Proof. exact (EQ_MP (@lem6401331 t1 t2 t3) (@lem6401330 t1 t2 t3)). Qed.
Lemma lem6402846 {A K : Type'} (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term251 A K k f j dom neut) = (term252 A K k f j dom neut).
Proof. exact (@lem6402845 (@IN K j k) (term120 A K f j dom neut) (term120 A K f j dom neut)). Qed.
Lemma lem6402850 (t : Prop) : (t /\ t) = t.
Proof. exact (proj2 (@lem1845 t)). Qed.
Lemma lem6402851 {A K : Type'} (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term253 A K f j dom neut) = (term120 A K f j dom neut).
Proof. exact (@lem6402850 (term120 A K f j dom neut)). Qed.
Lemma lem6402852 {K : Type'} (j : K) (k : K -> Prop) : (term41 K j k) = (term41 K j k).
Proof. exact (eq_refl (term41 K j k)). Qed.
Lemma lem6402853 {A K : Type'} (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term252 A K k f j dom neut) = (term122 A K k f j dom neut).
Proof. exact (MK_COMB (@lem6402852 K j k) (@lem6402851 A K f j dom neut)). Qed.
Lemma lem6402856 {A K : Type'} (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term251 A K k f j dom neut) = (term122 A K k f j dom neut).
Proof. exact (TRANS (@lem6402846 A K k f j dom neut) (@lem6402853 A K k f j dom neut)). Qed.
Lemma lem6402857 {A K : Type'} (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term137 A K k f j dom neut) = (term122 A K k f j dom neut).
Proof. exact (TRANS (@lem6402843 A K k f j dom neut) (@lem6402856 A K k f j dom neut)). Qed.
Lemma lem6402858 {K : Type'} (ltle : type1402 K) (j : K) (i : K) : (term254 K ltle j i) = (term254 K ltle j i).
Proof. exact (eq_refl (term254 K ltle j i)). Qed.
Lemma lem6402859 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term168 A K ltle i k f j dom neut) = (term204 A K ltle i k f j dom neut).
Proof. exact (MK_COMB (@lem6402858 K ltle j i) (@lem6402857 A K k f j dom neut)). Qed.
Lemma lem6402862 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term169 A K ltle i k f j dom neut) = (term204 A K ltle i k f j dom neut).
Proof. exact (TRANS (@lem6402811 A K ltle i k f j dom neut) (@lem6402859 A K ltle i k f j dom neut)). Qed.
Lemma lem6402863 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6402864 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term171 A K ltle i k f j dom neut) = (term206 A K ltle i k f j dom neut).
Proof. exact (MK_COMB (@lem6402863) (@lem6402862 A K ltle i k f j dom neut)). Qed.
Lemma lem6402867 {K : Type'} (j : K) (i : K) : (j = i) = (j = i).
Proof. exact (eq_refl (j = i)). Qed.
Lemma lem6402868 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (j : K) (i : K) : (term173 A K ltle k f dom neut j i) = (term208 A K ltle k f dom neut j i).
Proof. exact (MK_COMB (@lem6402864 A K ltle i k f j dom neut) (@lem6402867 K j i)). Qed.
Lemma lem6402871 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term175 A K ltle k f dom neut i) = (term210 A K ltle k f dom neut i).
Proof. exact (fun_ext (fun j : K => @lem6402868 A K ltle k f dom neut j i)). Qed.
Lemma lem6402872 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6402873 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term176 A K ltle k f dom neut i) = (term203 A K ltle k f dom neut i).
Proof. exact (MK_COMB (@lem6402872 K) (@lem6402871 A K ltle k f dom neut i)). Qed.
Lemma lem6402878 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term177 A K ltle k f dom neut i) = (term202 A K ltle k f dom neut i).
Proof. exact (MK_COMB (@lem6402802 A K k f i dom neut) (@lem6402873 A K ltle k f dom neut i)). Qed.
Lemma lem6402880 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term1 t1 t2 t3) = (term0 t1 t2 t3).
Proof. exact (EQ_MP (@lem6401331 t1 t2 t3) (@lem6401330 t1 t2 t3)). Qed.
Lemma lem6402881 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term202 A K ltle k f dom neut i) = (term201 A K ltle k f dom neut i).
Proof. exact (@lem6402880 (@IN K i k) (term120 A K f i dom neut) (term203 A K ltle k f dom neut i)). Qed.
Lemma lem6402898 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term177 A K ltle k f dom neut i) = (term201 A K ltle k f dom neut i).
Proof. exact (TRANS (@lem6402878 A K ltle k f dom neut i) (@lem6402881 A K ltle k f dom neut i)). Qed.
Lemma lem6402899 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term179 A K ltle k f dom neut) = (term215 A K ltle k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402898 A K ltle k f dom neut i)). Qed.
Lemma lem6402900 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6402901 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term181 A K ltle k f dom neut) = (term217 A K ltle k f dom neut).
Proof. exact (MK_COMB (@lem6402900 K) (@lem6402899 A K ltle k f dom neut)). Qed.
Lemma lem6402906 {K : Type'} : (@COND K) = (@COND K).
Proof. exact (eq_refl (@COND K)). Qed.
Lemma lem6402907 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term183 A K ltle k f dom neut) = (term219 A K ltle k f dom neut).
Proof. exact (MK_COMB (@lem6402906 K) (@lem6402901 A K ltle k f dom neut)). Qed.
Lemma lem6402911 {_83095 : Type'} (p : _83095 -> Prop) (x : _83095) : (term21 _83095 x p) = (p x).
Proof. exact (EQ_MP (@lem6401362 _83095 p x) (@lem6401361 _83095 p x)). Qed.
Lemma lem6402912 {K : Type'} (p : K -> Prop) (x : K) : (term21 K x p) = (p x).
Proof. exact (@lem6402911 K p x). Qed.
Lemma lem6402913 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term235 A K i k f dom neut) = (term236 A K k f dom neut i).
Proof. exact (@lem6402912 K (term237 A K k f dom neut) i). Qed.
Lemma lem6402914 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term236 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (eq_refl (term236 A K k f dom neut i)). Qed.
Lemma lem6402915 {K : Type'} (GEN_PVAR_267 : K) : (@SETSPEC K GEN_PVAR_267) = (@SETSPEC K GEN_PVAR_267).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_267)). Qed.
Lemma lem6402916 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term238 A K GEN_PVAR_267 k f dom neut i) = (term124 A K GEN_PVAR_267 k f i dom neut).
Proof. exact (MK_COMB (@lem6402915 K GEN_PVAR_267) (@lem6402914 A K k f i dom neut)). Qed.
Lemma lem6402917 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6402918 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term239 A K GEN_PVAR_267 k f dom neut i) = (term126 A K GEN_PVAR_267 k f dom neut i).
Proof. exact (MK_COMB (@lem6402916 A K GEN_PVAR_267 k f i dom neut) (@lem6402917 K i)). Qed.
Lemma lem6402919 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term240 A K GEN_PVAR_267 k f dom neut) = (term128 A K GEN_PVAR_267 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402918 A K GEN_PVAR_267 k f dom neut i)). Qed.
Lemma lem6402920 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6402921 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term241 A K GEN_PVAR_267 k f dom neut) = (term130 A K GEN_PVAR_267 k f dom neut).
Proof. exact (MK_COMB (@lem6402920 K) (@lem6402919 A K GEN_PVAR_267 k f dom neut)). Qed.
Lemma lem6402922 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term242 A K k f dom neut) = (term132 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_267 : K => @lem6402921 A K GEN_PVAR_267 k f dom neut)). Qed.
Lemma lem6402923 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6402924 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term243 A K k f dom neut) = (term113 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402923 K) (@lem6402922 A K k f dom neut)). Qed.
Lemma lem6402925 {K : Type'} (i : K) : (@IN K i) = (@IN K i).
Proof. exact (eq_refl (@IN K i)). Qed.
Lemma lem6402926 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term235 A K i k f dom neut) = (term134 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402925 K i) (@lem6402924 A K k f dom neut)). Qed.
Lemma lem6402927 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6402928 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term244 A K i k f dom neut) = (term245 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6402927) (@lem6402926 A K i k f dom neut)). Qed.
Lemma lem6402929 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term236 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (eq_refl (term236 A K k f dom neut i)). Qed.
Lemma lem6402930 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : ((term235 A K i k f dom neut) = (term236 A K k f dom neut i)) = ((term134 A K i k f dom neut) = (term122 A K k f i dom neut)).
Proof. exact (MK_COMB (@lem6402928 A K i k f dom neut) (@lem6402929 A K k f i dom neut)). Qed.
Lemma lem6402931 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term134 A K i k f dom neut) = (term122 A K k f i dom neut).
Proof. exact (EQ_MP (@lem6402930 A K k f i dom neut) (@lem6402913 A K k f dom neut i)). Qed.
Lemma lem6402934 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6402935 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term136 A K i k f dom neut) = (term213 A K k f i dom neut).
Proof. exact (MK_COMB (@lem6402934) (@lem6402931 A K k f i dom neut)). Qed.
Lemma lem6402943 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term1 t1 t2 t3) = (term0 t1 t2 t3).
Proof. exact (EQ_MP (@lem6401331 t1 t2 t3) (@lem6401330 t1 t2 t3)). Qed.
Lemma lem6402944 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term169 A K ltle i k f j dom neut) = (term168 A K ltle i k f j dom neut).
Proof. exact (@lem6402943 (ltle j i) (term134 A K j k f dom neut) (term120 A K f j dom neut)). Qed.
Lemma lem6402950 {_83095 : Type'} (p : _83095 -> Prop) (x : _83095) : (term21 _83095 x p) = (p x).
Proof. exact (EQ_MP (@lem6401362 _83095 p x) (@lem6401361 _83095 p x)). Qed.
Lemma lem6402951 {K : Type'} (p : K -> Prop) (x : K) : (term21 K x p) = (p x).
Proof. exact (@lem6402950 K p x). Qed.
Lemma lem6402952 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (j : K) : (term235 A K j k f dom neut) = (term236 A K k f dom neut j).
Proof. exact (@lem6402951 K (term237 A K k f dom neut) j). Qed.
Lemma lem6402953 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term236 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (eq_refl (term236 A K k f dom neut i)). Qed.
Lemma lem6402954 {K : Type'} (GEN_PVAR_268 : K) : (@SETSPEC K GEN_PVAR_268) = (@SETSPEC K GEN_PVAR_268).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_268)). Qed.
Lemma lem6402955 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term238 A K GEN_PVAR_268 k f dom neut i) = (term124 A K GEN_PVAR_268 k f i dom neut).
Proof. exact (MK_COMB (@lem6402954 K GEN_PVAR_268) (@lem6402953 A K k f i dom neut)). Qed.
Lemma lem6402956 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6402957 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term239 A K GEN_PVAR_268 k f dom neut i) = (term126 A K GEN_PVAR_268 k f dom neut i).
Proof. exact (MK_COMB (@lem6402955 A K GEN_PVAR_268 k f i dom neut) (@lem6402956 K i)). Qed.
Lemma lem6402958 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term240 A K GEN_PVAR_268 k f dom neut) = (term128 A K GEN_PVAR_268 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6402957 A K GEN_PVAR_268 k f dom neut i)). Qed.
Lemma lem6402959 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6402960 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term241 A K GEN_PVAR_268 k f dom neut) = (term130 A K GEN_PVAR_268 k f dom neut).
Proof. exact (MK_COMB (@lem6402959 K) (@lem6402958 A K GEN_PVAR_268 k f dom neut)). Qed.
Lemma lem6402961 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term242 A K k f dom neut) = (term132 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_268 : K => @lem6402960 A K GEN_PVAR_268 k f dom neut)). Qed.
Lemma lem6402962 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6402963 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term243 A K k f dom neut) = (term113 A K k f dom neut).
Proof. exact (MK_COMB (@lem6402962 K) (@lem6402961 A K k f dom neut)). Qed.
Lemma lem6402964 {K : Type'} (j : K) : (@IN K j) = (@IN K j).
Proof. exact (eq_refl (@IN K j)). Qed.
Lemma lem6402965 {A K : Type'} (j : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term235 A K j k f dom neut) = (term134 A K j k f dom neut).
Proof. exact (MK_COMB (@lem6402964 K j) (@lem6402963 A K k f dom neut)). Qed.
Lemma lem6402966 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6402967 {A K : Type'} (j : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term244 A K j k f dom neut) = (term245 A K j k f dom neut).
Proof. exact (MK_COMB (@lem6402966) (@lem6402965 A K j k f dom neut)). Qed.
Lemma lem6402968 {A K : Type'} (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term236 A K k f dom neut j) = (term122 A K k f j dom neut).
Proof. exact (eq_refl (term236 A K k f dom neut j)). Qed.
Lemma lem6402969 {A K : Type'} (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : ((term235 A K j k f dom neut) = (term236 A K k f dom neut j)) = ((term134 A K j k f dom neut) = (term122 A K k f j dom neut)).
Proof. exact (MK_COMB (@lem6402967 A K j k f dom neut) (@lem6402968 A K k f j dom neut)). Qed.
Lemma lem6402970 {A K : Type'} (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term134 A K j k f dom neut) = (term122 A K k f j dom neut).
Proof. exact (EQ_MP (@lem6402969 A K k f j dom neut) (@lem6402952 A K k f dom neut j)). Qed.
Lemma lem6402973 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6402974 {A K : Type'} (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term136 A K j k f dom neut) = (term213 A K k f j dom neut).
Proof. exact (MK_COMB (@lem6402973) (@lem6402970 A K k f j dom neut)). Qed.
Lemma lem6402975 {A K : Type'} (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term120 A K f j dom neut) = (term120 A K f j dom neut).
Proof. exact (eq_refl (term120 A K f j dom neut)). Qed.
Lemma lem6402976 {A K : Type'} (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term137 A K k f j dom neut) = (term251 A K k f j dom neut).
Proof. exact (MK_COMB (@lem6402974 A K k f j dom neut) (@lem6402975 A K f j dom neut)). Qed.
Lemma lem6402978 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term1 t1 t2 t3) = (term0 t1 t2 t3).
Proof. exact (EQ_MP (@lem6401331 t1 t2 t3) (@lem6401330 t1 t2 t3)). Qed.
Lemma lem6402979 {A K : Type'} (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term251 A K k f j dom neut) = (term252 A K k f j dom neut).
Proof. exact (@lem6402978 (@IN K j k) (term120 A K f j dom neut) (term120 A K f j dom neut)). Qed.
Lemma lem6402983 (t : Prop) : (t /\ t) = t.
Proof. exact (proj2 (@lem1845 t)). Qed.
Lemma lem6402984 {A K : Type'} (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term253 A K f j dom neut) = (term120 A K f j dom neut).
Proof. exact (@lem6402983 (term120 A K f j dom neut)). Qed.
Lemma lem6402985 {K : Type'} (j : K) (k : K -> Prop) : (term41 K j k) = (term41 K j k).
Proof. exact (eq_refl (term41 K j k)). Qed.
Lemma lem6402986 {A K : Type'} (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term252 A K k f j dom neut) = (term122 A K k f j dom neut).
Proof. exact (MK_COMB (@lem6402985 K j k) (@lem6402984 A K f j dom neut)). Qed.
Lemma lem6402989 {A K : Type'} (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term251 A K k f j dom neut) = (term122 A K k f j dom neut).
Proof. exact (TRANS (@lem6402979 A K k f j dom neut) (@lem6402986 A K k f j dom neut)). Qed.
Lemma lem6402990 {A K : Type'} (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term137 A K k f j dom neut) = (term122 A K k f j dom neut).
Proof. exact (TRANS (@lem6402976 A K k f j dom neut) (@lem6402989 A K k f j dom neut)). Qed.
Lemma lem6402991 {K : Type'} (ltle : type1402 K) (j : K) (i : K) : (term254 K ltle j i) = (term254 K ltle j i).
Proof. exact (eq_refl (term254 K ltle j i)). Qed.
Lemma lem6402992 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term168 A K ltle i k f j dom neut) = (term204 A K ltle i k f j dom neut).
Proof. exact (MK_COMB (@lem6402991 K ltle j i) (@lem6402990 A K k f j dom neut)). Qed.
Lemma lem6402995 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term169 A K ltle i k f j dom neut) = (term204 A K ltle i k f j dom neut).
Proof. exact (TRANS (@lem6402944 A K ltle i k f j dom neut) (@lem6402992 A K ltle i k f j dom neut)). Qed.
Lemma lem6402996 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6402997 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term171 A K ltle i k f j dom neut) = (term206 A K ltle i k f j dom neut).
Proof. exact (MK_COMB (@lem6402996) (@lem6402995 A K ltle i k f j dom neut)). Qed.
Lemma lem6403000 {K : Type'} (j : K) (i : K) : (j = i) = (j = i).
Proof. exact (eq_refl (j = i)). Qed.
Lemma lem6403001 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (j : K) (i : K) : (term173 A K ltle k f dom neut j i) = (term208 A K ltle k f dom neut j i).
Proof. exact (MK_COMB (@lem6402997 A K ltle i k f j dom neut) (@lem6403000 K j i)). Qed.
Lemma lem6403004 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term175 A K ltle k f dom neut i) = (term210 A K ltle k f dom neut i).
Proof. exact (fun_ext (fun j : K => @lem6403001 A K ltle k f dom neut j i)). Qed.
Lemma lem6403005 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6403006 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term176 A K ltle k f dom neut i) = (term203 A K ltle k f dom neut i).
Proof. exact (MK_COMB (@lem6403005 K) (@lem6403004 A K ltle k f dom neut i)). Qed.
Lemma lem6403011 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term177 A K ltle k f dom neut i) = (term202 A K ltle k f dom neut i).
Proof. exact (MK_COMB (@lem6402935 A K k f i dom neut) (@lem6403006 A K ltle k f dom neut i)). Qed.
Lemma lem6403013 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term1 t1 t2 t3) = (term0 t1 t2 t3).
Proof. exact (EQ_MP (@lem6401331 t1 t2 t3) (@lem6401330 t1 t2 t3)). Qed.
Lemma lem6403014 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term202 A K ltle k f dom neut i) = (term201 A K ltle k f dom neut i).
Proof. exact (@lem6403013 (@IN K i k) (term120 A K f i dom neut) (term203 A K ltle k f dom neut i)). Qed.
Lemma lem6403031 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term177 A K ltle k f dom neut i) = (term201 A K ltle k f dom neut i).
Proof. exact (TRANS (@lem6403011 A K ltle k f dom neut i) (@lem6403014 A K ltle k f dom neut i)). Qed.
Lemma lem6403032 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term179 A K ltle k f dom neut) = (term215 A K ltle k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6403031 A K ltle k f dom neut i)). Qed.
Lemma lem6403033 {K : Type'} : (@ε K) = (@ε K).
Proof. exact (eq_refl (@ε K)). Qed.
Lemma lem6403034 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term185 A K ltle k f dom neut) = (term221 A K ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403033 K) (@lem6403032 A K ltle k f dom neut)). Qed.
Lemma lem6403035 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term187 A K ltle k f dom neut) = (term223 A K ltle k f dom neut).
Proof. exact (MK_COMB (@lem6402907 A K ltle k f dom neut) (@lem6403034 A K ltle k f dom neut)). Qed.
Lemma lem6403037 {_83095 : Type'} (p : _83095 -> Prop) (x : _83095) : (term21 _83095 x p) = (p x).
Proof. exact (EQ_MP (@lem6401362 _83095 p x) (@lem6401361 _83095 p x)). Qed.
Lemma lem6403038 {K : Type'} (p : K -> Prop) (x : K) : (term21 K x p) = (p x).
Proof. exact (@lem6403037 K p x). Qed.
Lemma lem6403039 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term235 A K i k f dom neut) = (term236 A K k f dom neut i).
Proof. exact (@lem6403038 K (term237 A K k f dom neut) i). Qed.
Lemma lem6403040 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term236 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (eq_refl (term236 A K k f dom neut i)). Qed.
Lemma lem6403041 {K : Type'} (GEN_PVAR_267 : K) : (@SETSPEC K GEN_PVAR_267) = (@SETSPEC K GEN_PVAR_267).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_267)). Qed.
Lemma lem6403042 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term238 A K GEN_PVAR_267 k f dom neut i) = (term124 A K GEN_PVAR_267 k f i dom neut).
Proof. exact (MK_COMB (@lem6403041 K GEN_PVAR_267) (@lem6403040 A K k f i dom neut)). Qed.
Lemma lem6403043 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6403044 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term239 A K GEN_PVAR_267 k f dom neut i) = (term126 A K GEN_PVAR_267 k f dom neut i).
Proof. exact (MK_COMB (@lem6403042 A K GEN_PVAR_267 k f i dom neut) (@lem6403043 K i)). Qed.
Lemma lem6403045 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term240 A K GEN_PVAR_267 k f dom neut) = (term128 A K GEN_PVAR_267 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6403044 A K GEN_PVAR_267 k f dom neut i)). Qed.
Lemma lem6403046 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6403047 {A K : Type'} (GEN_PVAR_267 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term241 A K GEN_PVAR_267 k f dom neut) = (term130 A K GEN_PVAR_267 k f dom neut).
Proof. exact (MK_COMB (@lem6403046 K) (@lem6403045 A K GEN_PVAR_267 k f dom neut)). Qed.
Lemma lem6403048 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term242 A K k f dom neut) = (term132 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_267 : K => @lem6403047 A K GEN_PVAR_267 k f dom neut)). Qed.
Lemma lem6403049 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6403050 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term243 A K k f dom neut) = (term113 A K k f dom neut).
Proof. exact (MK_COMB (@lem6403049 K) (@lem6403048 A K k f dom neut)). Qed.
Lemma lem6403051 {K : Type'} (i : K) : (@IN K i) = (@IN K i).
Proof. exact (eq_refl (@IN K i)). Qed.
Lemma lem6403052 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term235 A K i k f dom neut) = (term134 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6403051 K i) (@lem6403050 A K k f dom neut)). Qed.
Lemma lem6403053 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6403054 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term244 A K i k f dom neut) = (term245 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6403053) (@lem6403052 A K i k f dom neut)). Qed.
Lemma lem6403055 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term236 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (eq_refl (term236 A K k f dom neut i)). Qed.
Lemma lem6403056 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : ((term235 A K i k f dom neut) = (term236 A K k f dom neut i)) = ((term134 A K i k f dom neut) = (term122 A K k f i dom neut)).
Proof. exact (MK_COMB (@lem6403054 A K i k f dom neut) (@lem6403055 A K k f i dom neut)). Qed.
Lemma lem6403057 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term134 A K i k f dom neut) = (term122 A K k f i dom neut).
Proof. exact (EQ_MP (@lem6403056 A K k f i dom neut) (@lem6403039 A K k f dom neut i)). Qed.
Lemma lem6403060 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term189 A K k f dom neut) = (term237 A K k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6403057 A K k f i dom neut)). Qed.
Lemma lem6403061 {K : Type'} : (@ε K) = (@ε K).
Proof. exact (eq_refl (@ε K)). Qed.
Lemma lem6403062 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term191 A K k f dom neut) = (term225 A K k f dom neut).
Proof. exact (MK_COMB (@lem6403061 K) (@lem6403060 A K k f dom neut)). Qed.
Lemma lem6403063 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term193 A K ltle k f dom neut) = (term226 A K ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403035 A K ltle k f dom neut) (@lem6403062 A K k f dom neut)). Qed.
Lemma lem6403064 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (neut : A) (f : K -> A) : (term194 A K op ltle k dom neut f) = (term194 A K op ltle k dom neut f).
Proof. exact (eq_refl (term194 A K op ltle k dom neut f)). Qed.
Lemma lem6403065 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term196 A K op ltle k f dom neut) = (term255 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403064 A K op ltle k dom neut f) (@lem6403063 A K ltle k f dom neut)). Qed.
Lemma lem6403066 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term198 A K op ltle k f dom neut) = (term256 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6402758 A K k f dom neut) (@lem6403065 A K op ltle k f dom neut)). Qed.
Lemma lem6403067 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6403068 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term199 A K op ltle k f dom neut) = (term257 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403066 A K op ltle k f dom neut) (@lem6403067 A neut)). Qed.
Lemma lem6403069 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem6403070 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term200 A K op ltle k f dom neut) = (term258 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403069 A) (@lem6403068 A K op ltle k f dom neut)). Qed.
Lemma lem6403098 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term1 t1 t2 t3) = (term0 t1 t2 t3).
Proof. exact (EQ_MP (@lem6401331 t1 t2 t3) (@lem6401330 t1 t2 t3)). Qed.
Lemma lem6403099 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term214 A K ltle k f dom neut i) = (term259 A K ltle k f dom neut i).
Proof. exact (@lem6403098 (@IN K i k) (term120 A K f i dom neut) (term212 A K ltle k f dom neut i)). Qed.
Lemma lem6403111 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term1 t1 t2 t3) = (term0 t1 t2 t3).
Proof. exact (EQ_MP (@lem6401331 t1 t2 t3) (@lem6401330 t1 t2 t3)). Qed.
Lemma lem6403112 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term205 A K ltle i k f j dom neut) = (term204 A K ltle i k f j dom neut).
Proof. exact (@lem6403111 (ltle j i) (@IN K j k) (term120 A K f j dom neut)). Qed.
Lemma lem6403117 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6403118 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term207 A K ltle i k f j dom neut) = (term206 A K ltle i k f j dom neut).
Proof. exact (MK_COMB (@lem6403117) (@lem6403112 A K ltle i k f j dom neut)). Qed.
Lemma lem6403121 {K : Type'} (j : K) (i : K) : (j = i) = (j = i).
Proof. exact (eq_refl (j = i)). Qed.
Lemma lem6403122 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (j : K) (i : K) : (term209 A K ltle k f dom neut j i) = (term208 A K ltle k f dom neut j i).
Proof. exact (MK_COMB (@lem6403118 A K ltle i k f j dom neut) (@lem6403121 K j i)). Qed.
Lemma lem6403125 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term211 A K ltle k f dom neut i) = (term210 A K ltle k f dom neut i).
Proof. exact (fun_ext (fun j : K => @lem6403122 A K ltle k f dom neut j i)). Qed.
Lemma lem6403126 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6403127 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term212 A K ltle k f dom neut i) = (term203 A K ltle k f dom neut i).
Proof. exact (MK_COMB (@lem6403126 K) (@lem6403125 A K ltle k f dom neut i)). Qed.
Lemma lem6403132 {A K : Type'} (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term260 A K f i dom neut) = (term260 A K f i dom neut).
Proof. exact (eq_refl (term260 A K f i dom neut)). Qed.
Lemma lem6403133 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term261 A K ltle k f dom neut i) = (term262 A K ltle k f dom neut i).
Proof. exact (MK_COMB (@lem6403132 A K f i dom neut) (@lem6403127 A K ltle k f dom neut i)). Qed.
Lemma lem6403136 {K : Type'} (i : K) (k : K -> Prop) : (term41 K i k) = (term41 K i k).
Proof. exact (eq_refl (term41 K i k)). Qed.
Lemma lem6403137 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term259 A K ltle k f dom neut i) = (term201 A K ltle k f dom neut i).
Proof. exact (MK_COMB (@lem6403136 K i k) (@lem6403133 A K ltle k f dom neut i)). Qed.
Lemma lem6403140 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term214 A K ltle k f dom neut i) = (term201 A K ltle k f dom neut i).
Proof. exact (TRANS (@lem6403099 A K ltle k f dom neut i) (@lem6403137 A K ltle k f dom neut i)). Qed.
Lemma lem6403141 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term216 A K ltle k f dom neut) = (term215 A K ltle k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6403140 A K ltle k f dom neut i)). Qed.
Lemma lem6403142 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6403143 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term218 A K ltle k f dom neut) = (term217 A K ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403142 K) (@lem6403141 A K ltle k f dom neut)). Qed.
Lemma lem6403148 {K : Type'} : (@COND K) = (@COND K).
Proof. exact (eq_refl (@COND K)). Qed.
Lemma lem6403149 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term220 A K ltle k f dom neut) = (term219 A K ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403148 K) (@lem6403143 A K ltle k f dom neut)). Qed.
Lemma lem6403151 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term1 t1 t2 t3) = (term0 t1 t2 t3).
Proof. exact (EQ_MP (@lem6401331 t1 t2 t3) (@lem6401330 t1 t2 t3)). Qed.
Lemma lem6403152 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term214 A K ltle k f dom neut i) = (term259 A K ltle k f dom neut i).
Proof. exact (@lem6403151 (@IN K i k) (term120 A K f i dom neut) (term212 A K ltle k f dom neut i)). Qed.
Lemma lem6403164 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term1 t1 t2 t3) = (term0 t1 t2 t3).
Proof. exact (EQ_MP (@lem6401331 t1 t2 t3) (@lem6401330 t1 t2 t3)). Qed.
Lemma lem6403165 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term205 A K ltle i k f j dom neut) = (term204 A K ltle i k f j dom neut).
Proof. exact (@lem6403164 (ltle j i) (@IN K j k) (term120 A K f j dom neut)). Qed.
Lemma lem6403170 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6403171 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term207 A K ltle i k f j dom neut) = (term206 A K ltle i k f j dom neut).
Proof. exact (MK_COMB (@lem6403170) (@lem6403165 A K ltle i k f j dom neut)). Qed.
Lemma lem6403174 {K : Type'} (j : K) (i : K) : (j = i) = (j = i).
Proof. exact (eq_refl (j = i)). Qed.
Lemma lem6403175 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (j : K) (i : K) : (term209 A K ltle k f dom neut j i) = (term208 A K ltle k f dom neut j i).
Proof. exact (MK_COMB (@lem6403171 A K ltle i k f j dom neut) (@lem6403174 K j i)). Qed.
Lemma lem6403178 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term211 A K ltle k f dom neut i) = (term210 A K ltle k f dom neut i).
Proof. exact (fun_ext (fun j : K => @lem6403175 A K ltle k f dom neut j i)). Qed.
Lemma lem6403179 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6403180 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term212 A K ltle k f dom neut i) = (term203 A K ltle k f dom neut i).
Proof. exact (MK_COMB (@lem6403179 K) (@lem6403178 A K ltle k f dom neut i)). Qed.
Lemma lem6403185 {A K : Type'} (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term260 A K f i dom neut) = (term260 A K f i dom neut).
Proof. exact (eq_refl (term260 A K f i dom neut)). Qed.
Lemma lem6403186 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term261 A K ltle k f dom neut i) = (term262 A K ltle k f dom neut i).
Proof. exact (MK_COMB (@lem6403185 A K f i dom neut) (@lem6403180 A K ltle k f dom neut i)). Qed.
Lemma lem6403189 {K : Type'} (i : K) (k : K -> Prop) : (term41 K i k) = (term41 K i k).
Proof. exact (eq_refl (term41 K i k)). Qed.
Lemma lem6403190 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term259 A K ltle k f dom neut i) = (term201 A K ltle k f dom neut i).
Proof. exact (MK_COMB (@lem6403189 K i k) (@lem6403186 A K ltle k f dom neut i)). Qed.
Lemma lem6403193 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term214 A K ltle k f dom neut i) = (term201 A K ltle k f dom neut i).
Proof. exact (TRANS (@lem6403152 A K ltle k f dom neut i) (@lem6403190 A K ltle k f dom neut i)). Qed.
Lemma lem6403194 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term216 A K ltle k f dom neut) = (term215 A K ltle k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6403193 A K ltle k f dom neut i)). Qed.
Lemma lem6403195 {K : Type'} : (@ε K) = (@ε K).
Proof. exact (eq_refl (@ε K)). Qed.
Lemma lem6403196 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term222 A K ltle k f dom neut) = (term221 A K ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403195 K) (@lem6403194 A K ltle k f dom neut)). Qed.
Lemma lem6403197 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term224 A K ltle k f dom neut) = (term223 A K ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403149 A K ltle k f dom neut) (@lem6403196 A K ltle k f dom neut)). Qed.
Lemma lem6403200 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term225 A K k f dom neut) = (term225 A K k f dom neut).
Proof. exact (eq_refl (term225 A K k f dom neut)). Qed.
Lemma lem6403201 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term227 A K ltle k f dom neut) = (term226 A K ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403197 A K ltle k f dom neut) (@lem6403200 A K k f dom neut)). Qed.
Lemma lem6403202 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (neut : A) (f : K -> A) : (term228 A K op ltle k dom neut f) = (term228 A K op ltle k dom neut f).
Proof. exact (eq_refl (term228 A K op ltle k dom neut f)). Qed.
Lemma lem6403203 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term230 A K op ltle k f dom neut) = (term229 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403202 A K op ltle k dom neut f) (@lem6403201 A K ltle k f dom neut)). Qed.
Lemma lem6403204 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term231 A K k f dom neut) = (term231 A K k f dom neut).
Proof. exact (eq_refl (term231 A K k f dom neut)). Qed.
Lemma lem6403205 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term233 A K op ltle k f dom neut) = (term232 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403204 A K k f dom neut) (@lem6403203 A K op ltle k f dom neut)). Qed.
Lemma lem6403206 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6403207 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term234 A K op ltle k f dom neut) = (term110 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403205 A K op ltle k f dom neut) (@lem6403206 A neut)). Qed.
Lemma lem6403208 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term199 A K op ltle k f dom neut) = (term234 A K op ltle k f dom neut)) = ((term257 A K op ltle k f dom neut) = (term110 A K op ltle k f dom neut)).
Proof. exact (MK_COMB (@lem6403070 A K op ltle k f dom neut) (@lem6403207 A K op ltle k f dom neut)). Qed.
Lemma lem6403211 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term257 A K op ltle k f dom neut) = (term110 A K op ltle k f dom neut)) = ((term199 A K op ltle k f dom neut) = (term234 A K op ltle k f dom neut)).
Proof. exact (SYM (@lem6403208 A K op ltle k f dom neut)). Qed.
Lemma lem6403212 {A : Type'} (_474 : A) (_475 : Prop) (_476 : A -> Prop) (_477 : A) : (term263 A _476 _475 _474 _477) = (term264 A _474 _475 _476 _477).
Proof. exact (@lem13473 A _474 _475 _476 _477). Qed.
Lemma lem6403213 {A K : Type'} (_474 : A) (_475 : Prop) (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (_477 : A) : (term265 A K op ltle k f dom neut _475 _474 _477) = (term266 A K _474 _475 op ltle k f dom neut _477).
Proof. exact (@lem6403212 A _474 _475 (term267 A K op ltle k f dom neut) _477). Qed.
Lemma lem6403214 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term268 A K op ltle k f dom neut) = (term269 A K op ltle k f dom neut).
Proof. exact (@lem6403213 A K (term255 A K op ltle k f dom neut) (term250 A K k f dom neut) op ltle k f dom neut neut). Qed.
Lemma lem6403215 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term270 A K op ltle k f dom neut) = (neut = (term110 A K op ltle k f dom neut)).
Proof. exact (eq_refl (term270 A K op ltle k f dom neut)). Qed.
Lemma lem6403216 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term271 A K k f dom neut) = (term271 A K k f dom neut).
Proof. exact (eq_refl (term271 A K k f dom neut)). Qed.
Lemma lem6403217 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term272 A K op ltle k f dom neut) = (term273 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403216 A K k f dom neut) (@lem6403215 A K op ltle k f dom neut)). Qed.
Lemma lem6403218 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term274 A K op ltle k f dom neut) = ((term255 A K op ltle k f dom neut) = (term110 A K op ltle k f dom neut)).
Proof. exact (eq_refl (term274 A K op ltle k f dom neut)). Qed.
Lemma lem6403219 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term275 A K k f dom neut) = (term275 A K k f dom neut).
Proof. exact (eq_refl (term275 A K k f dom neut)). Qed.
Lemma lem6403220 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term276 A K op ltle k f dom neut) = (term277 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403219 A K k f dom neut) (@lem6403218 A K op ltle k f dom neut)). Qed.
Lemma lem6403221 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6403222 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term278 A K op ltle k f dom neut) = (term279 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403221) (@lem6403220 A K op ltle k f dom neut)). Qed.
Lemma lem6403223 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term269 A K op ltle k f dom neut) = (term280 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403222 A K op ltle k f dom neut) (@lem6403217 A K op ltle k f dom neut)). Qed.
Lemma lem6403224 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term268 A K op ltle k f dom neut) = ((term257 A K op ltle k f dom neut) = (term110 A K op ltle k f dom neut)).
Proof. exact (eq_refl (term268 A K op ltle k f dom neut)). Qed.
Lemma lem6403225 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6403226 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term281 A K op ltle k f dom neut) = (term282 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403225) (@lem6403224 A K op ltle k f dom neut)). Qed.
Lemma lem6403227 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term268 A K op ltle k f dom neut) = (term269 A K op ltle k f dom neut)) = (((term257 A K op ltle k f dom neut) = (term110 A K op ltle k f dom neut)) = (term280 A K op ltle k f dom neut)).
Proof. exact (MK_COMB (@lem6403226 A K op ltle k f dom neut) (@lem6403223 A K op ltle k f dom neut)). Qed.
Lemma lem6403228 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term257 A K op ltle k f dom neut) = (term110 A K op ltle k f dom neut)) = (term280 A K op ltle k f dom neut).
Proof. exact (EQ_MP (@lem6403227 A K op ltle k f dom neut) (@lem6403214 A K op ltle k f dom neut)). Qed.
Lemma lem6403229 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term280 A K op ltle k f dom neut) = ((term257 A K op ltle k f dom neut) = (term110 A K op ltle k f dom neut)).
Proof. exact (SYM (@lem6403228 A K op ltle k f dom neut)). Qed.
Lemma lem6403230 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term250 A K k f dom neut) : term250 A K k f dom neut.
Proof. exact (h1). Qed.
Lemma lem6403231 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term250 A K k f dom neut) = ((term250 A K k f dom neut) = True).
Proof. exact (@lem7 (term250 A K k f dom neut)). Qed.
Lemma lem6403232 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term250 A K k f dom neut) : (term250 A K k f dom neut) = True.
Proof. exact (EQ_MP (@lem6403231 A K k f dom neut) (@lem6403230 A K k f dom neut h1)). Qed.
Lemma lem6403233 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term283 A K op ltle k f dom neut) = (term283 A K op ltle k f dom neut).
Proof. exact (eq_refl (term283 A K op ltle k f dom neut)). Qed.
Lemma lem6403234 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term250 A K k f dom neut) : (term284 A K op ltle k f dom neut) = (term285 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403233 A K op ltle k f dom neut) (@lem6403232 A K k f dom neut h1)). Qed.
Lemma lem6403235 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term285 A K op ltle k f dom neut) = ((term255 A K op ltle k f dom neut) = (term286 A K op ltle k f dom neut)).
Proof. exact (eq_refl (term285 A K op ltle k f dom neut)). Qed.
Lemma lem6403236 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term287 A K op ltle k f dom neut) = (term287 A K op ltle k f dom neut).
Proof. exact (eq_refl (term287 A K op ltle k f dom neut)). Qed.
Lemma lem6403237 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term284 A K op ltle k f dom neut) = (term285 A K op ltle k f dom neut)) = ((term284 A K op ltle k f dom neut) = ((term255 A K op ltle k f dom neut) = (term286 A K op ltle k f dom neut))).
Proof. exact (MK_COMB (@lem6403236 A K op ltle k f dom neut) (@lem6403235 A K op ltle k f dom neut)). Qed.
Lemma lem6403238 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term284 A K op ltle k f dom neut) = ((term255 A K op ltle k f dom neut) = (term110 A K op ltle k f dom neut)).
Proof. exact (eq_refl (term284 A K op ltle k f dom neut)). Qed.
Lemma lem6403239 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6403240 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term287 A K op ltle k f dom neut) = (term288 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403239) (@lem6403238 A K op ltle k f dom neut)). Qed.
Lemma lem6403241 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term255 A K op ltle k f dom neut) = (term286 A K op ltle k f dom neut)) = ((term255 A K op ltle k f dom neut) = (term286 A K op ltle k f dom neut)).
Proof. exact (eq_refl ((term255 A K op ltle k f dom neut) = (term286 A K op ltle k f dom neut))). Qed.
Lemma lem6403242 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term284 A K op ltle k f dom neut) = ((term255 A K op ltle k f dom neut) = (term286 A K op ltle k f dom neut))) = (((term255 A K op ltle k f dom neut) = (term110 A K op ltle k f dom neut)) = ((term255 A K op ltle k f dom neut) = (term286 A K op ltle k f dom neut))).
Proof. exact (MK_COMB (@lem6403240 A K op ltle k f dom neut) (@lem6403241 A K op ltle k f dom neut)). Qed.
Lemma lem6403243 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term284 A K op ltle k f dom neut) = (term285 A K op ltle k f dom neut)) = (((term255 A K op ltle k f dom neut) = (term110 A K op ltle k f dom neut)) = ((term255 A K op ltle k f dom neut) = (term286 A K op ltle k f dom neut))).
Proof. exact (TRANS (@lem6403237 A K op ltle k f dom neut) (@lem6403242 A K op ltle k f dom neut)). Qed.
Lemma lem6403244 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term250 A K k f dom neut) : ((term255 A K op ltle k f dom neut) = (term110 A K op ltle k f dom neut)) = ((term255 A K op ltle k f dom neut) = (term286 A K op ltle k f dom neut)).
Proof. exact (EQ_MP (@lem6403243 A K op ltle k f dom neut) (@lem6403234 A K op ltle k f dom neut h1)). Qed.
Lemma lem6403245 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term250 A K k f dom neut) : ((term255 A K op ltle k f dom neut) = (term286 A K op ltle k f dom neut)) = ((term255 A K op ltle k f dom neut) = (term110 A K op ltle k f dom neut)).
Proof. exact (SYM (@lem6403244 A K op ltle k f dom neut h1)). Qed.
Lemma lem6403246 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term289 A K k f dom neut) : term289 A K k f dom neut.
Proof. exact (h1). Qed.
Lemma lem6403247 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : term290 A K k f dom neut.
Proof. exact (@lem82 (term250 A K k f dom neut)). Qed.
Lemma lem6403248 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term289 A K k f dom neut) : (term250 A K k f dom neut) = False.
Proof. exact (@lem6403247 A K k f dom neut (@lem6403246 A K k f dom neut h1)). Qed.
Lemma lem6403249 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term291 A K op ltle k f dom neut) = (term291 A K op ltle k f dom neut).
Proof. exact (eq_refl (term291 A K op ltle k f dom neut)). Qed.
Lemma lem6403250 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term289 A K k f dom neut) : (term292 A K op ltle k f dom neut) = (term293 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403249 A K op ltle k f dom neut) (@lem6403248 A K k f dom neut h1)). Qed.
Lemma lem6403251 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term293 A K op ltle k f dom neut) = (neut = (term294 A K op ltle k f dom neut)).
Proof. exact (eq_refl (term293 A K op ltle k f dom neut)). Qed.
Lemma lem6403252 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term295 A K op ltle k f dom neut) = (term295 A K op ltle k f dom neut).
Proof. exact (eq_refl (term295 A K op ltle k f dom neut)). Qed.
Lemma lem6403253 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term292 A K op ltle k f dom neut) = (term293 A K op ltle k f dom neut)) = ((term292 A K op ltle k f dom neut) = (neut = (term294 A K op ltle k f dom neut))).
Proof. exact (MK_COMB (@lem6403252 A K op ltle k f dom neut) (@lem6403251 A K op ltle k f dom neut)). Qed.
Lemma lem6403254 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term292 A K op ltle k f dom neut) = (neut = (term110 A K op ltle k f dom neut)).
Proof. exact (eq_refl (term292 A K op ltle k f dom neut)). Qed.
Lemma lem6403255 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6403256 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term295 A K op ltle k f dom neut) = (term296 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403255) (@lem6403254 A K op ltle k f dom neut)). Qed.
Lemma lem6403257 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (neut = (term294 A K op ltle k f dom neut)) = (neut = (term294 A K op ltle k f dom neut)).
Proof. exact (eq_refl (neut = (term294 A K op ltle k f dom neut))). Qed.
Lemma lem6403258 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term292 A K op ltle k f dom neut) = (neut = (term294 A K op ltle k f dom neut))) = ((neut = (term110 A K op ltle k f dom neut)) = (neut = (term294 A K op ltle k f dom neut))).
Proof. exact (MK_COMB (@lem6403256 A K op ltle k f dom neut) (@lem6403257 A K op ltle k f dom neut)). Qed.
Lemma lem6403259 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term292 A K op ltle k f dom neut) = (term293 A K op ltle k f dom neut)) = ((neut = (term110 A K op ltle k f dom neut)) = (neut = (term294 A K op ltle k f dom neut))).
Proof. exact (TRANS (@lem6403253 A K op ltle k f dom neut) (@lem6403258 A K op ltle k f dom neut)). Qed.
Lemma lem6403260 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term289 A K k f dom neut) : (neut = (term110 A K op ltle k f dom neut)) = (neut = (term294 A K op ltle k f dom neut)).
Proof. exact (EQ_MP (@lem6403259 A K op ltle k f dom neut) (@lem6403250 A K op ltle k f dom neut h1)). Qed.
Lemma lem6403261 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term289 A K k f dom neut) : (neut = (term294 A K op ltle k f dom neut)) = (neut = (term110 A K op ltle k f dom neut)).
Proof. exact (SYM (@lem6403260 A K op ltle k f dom neut h1)). Qed.
Lemma lem6403332 {A : Type'} (t2 : A) (t1 : A) : (@COND A True t1 t2) = t1.
Proof. exact (proj1 (@lem12653 A t1 t2)). Qed.
Lemma lem6403333 {A : Type'} (t2 : A) (t1 : A) : (@COND A True t1 t2) = t1.
Proof. exact (@lem6403332 A t2 t1). Qed.
Lemma lem6403334 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term286 A K op ltle k f dom neut) = (term229 A K op ltle k f dom neut).
Proof. exact (@lem6403333 A neut (term229 A K op ltle k f dom neut)). Qed.
Lemma lem6403379 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term297 A K op ltle k f dom neut) = (term297 A K op ltle k f dom neut).
Proof. exact (eq_refl (term297 A K op ltle k f dom neut)). Qed.
Lemma lem6403380 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term255 A K op ltle k f dom neut) = (term286 A K op ltle k f dom neut)) = ((term255 A K op ltle k f dom neut) = (term229 A K op ltle k f dom neut)).
Proof. exact (MK_COMB (@lem6403379 A K op ltle k f dom neut) (@lem6403334 A K op ltle k f dom neut)). Qed.
Lemma lem6403383 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term255 A K op ltle k f dom neut) = (term229 A K op ltle k f dom neut)) = ((term255 A K op ltle k f dom neut) = (term286 A K op ltle k f dom neut)).
Proof. exact (SYM (@lem6403380 A K op ltle k f dom neut)). Qed.
Lemma lem6403389 {A : Type'} (t1 : A) (t2 : A) : (@COND A False t1 t2) = t2.
Proof. exact (proj2 (@lem12653 A t1 t2)). Qed.
Lemma lem6403390 {A : Type'} (t1 : A) (t2 : A) : (@COND A False t1 t2) = t2.
Proof. exact (@lem6403389 A t1 t2). Qed.
Lemma lem6403391 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term294 A K op ltle k f dom neut) = neut.
Proof. exact (@lem6403390 A (term229 A K op ltle k f dom neut) neut). Qed.
Lemma lem6403392 {A : Type'} (neut : A) : (@eq A neut) = (@eq A neut).
Proof. exact (eq_refl (@eq A neut)). Qed.
Lemma lem6403393 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (neut = (term294 A K op ltle k f dom neut)) = (neut = neut).
Proof. exact (MK_COMB (@lem6403392 A neut) (@lem6403391 A K op ltle k f dom neut)). Qed.
Lemma lem6403395 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem1863 A x) (@lem1862 A x)). Qed.
Lemma lem6403396 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (@lem6403395 A x). Qed.
Lemma lem6403397 {A : Type'} (neut : A) : (neut = neut) = True.
Proof. exact (@lem6403396 A neut). Qed.
Lemma lem6403398 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (neut = (term294 A K op ltle k f dom neut)) = True.
Proof. exact (TRANS (@lem6403393 A K op ltle k f dom neut) (@lem6403397 A neut)). Qed.
Lemma lem6403399 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : True = (neut = (term294 A K op ltle k f dom neut)).
Proof. exact (SYM (@lem6403398 A K op ltle k f dom neut)). Qed.
Lemma lem6403400 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : neut = (term294 A K op ltle k f dom neut).
Proof. exact (EQ_MP (@lem6403399 A K op ltle k f dom neut) (@lem0)). Qed.
Lemma lem6403404 {A K : Type'} (i : K) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : i = (term226 A K ltle k f dom neut)) : i = (term226 A K ltle k f dom neut).
Proof. exact (h1). Qed.
Lemma lem6403405 {A K : Type'} (i : K) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : i = (term226 A K ltle k f dom neut)) : term298 A K ltle k f dom neut.
Proof. exact (ex_intro (term299 A K ltle k f dom neut) i (@lem6403404 A K i ltle k f dom neut h1)). Qed.
Lemma lem6403406 {A K : Type'} (i : K) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : term300 A K i ltle k f dom neut.
Proof. exact (fun h0 : i = (term226 A K ltle k f dom neut) => @lem6403405 A K i ltle k f dom neut h0). Qed.
Lemma lem6403407 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : term301 A K ltle k f dom neut.
Proof. exact (@lem6403406 A K (term226 A K ltle k f dom neut) ltle k f dom neut). Qed.
Lemma lem6403417 {_5989 : Type'} (x : _5989) : (x = x) = True.
Proof. exact (EQ_MP (@lem68127 _5989 x) (@lem0)). Qed.
Lemma lem6403418 {K : Type'} (x : K) : (x = x) = True.
Proof. exact (@lem6403417 K x). Qed.
Lemma lem6403419 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term226 A K ltle k f dom neut) = (term226 A K ltle k f dom neut)) = True.
Proof. exact (@lem6403418 K (term226 A K ltle k f dom neut)). Qed.
Lemma lem6403420 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6403421 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term302 A K ltle k f dom neut) = (imp True).
Proof. exact (MK_COMB (@lem6403420) (@lem6403419 A K ltle k f dom neut)). Qed.
Lemma lem6403422 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term298 A K ltle k f dom neut) = (term298 A K ltle k f dom neut).
Proof. exact (eq_refl (term298 A K ltle k f dom neut)). Qed.
Lemma lem6403423 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term301 A K ltle k f dom neut) = (term303 A K ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403421 A K ltle k f dom neut) (@lem6403422 A K ltle k f dom neut)). Qed.
Lemma lem6403424 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : term303 A K ltle k f dom neut.
Proof. exact (EQ_MP (@lem6403423 A K ltle k f dom neut) (@lem6403407 A K ltle k f dom neut)). Qed.
Lemma lem6403425 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : term298 A K ltle k f dom neut.
Proof. exact (@lem6403424 A K ltle k f dom neut (@lem0)). Qed.
Lemma lem6403426 {A K : Type'} (i : K) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : i = (term226 A K ltle k f dom neut)) : i = (term226 A K ltle k f dom neut).
Proof. exact (h1). Qed.
Lemma lem6403427 {A K : Type'} (i : K) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : i = (term226 A K ltle k f dom neut)) : (term226 A K ltle k f dom neut) = i.
Proof. exact (SYM (@lem6403426 A K i ltle k f dom neut h1)). Qed.
Lemma lem6403428 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (neut : A) (f : K -> A) : (term304 A K op ltle k dom neut f) = (term304 A K op ltle k dom neut f).
Proof. exact (eq_refl (term304 A K op ltle k dom neut f)). Qed.
Lemma lem6403429 {A K : Type'} (op : type1400 A) (i : K) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : i = (term226 A K ltle k f dom neut)) : (term305 A K op ltle k f dom neut) = (term306 A K op ltle k dom neut f i).
Proof. exact (MK_COMB (@lem6403428 A K op ltle k dom neut f) (@lem6403427 A K i ltle k f dom neut h1)). Qed.
Lemma lem6403430 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (neut : A) (f : K -> A) (i : K) : (term306 A K op ltle k dom neut f i) = ((term307 A K op ltle k dom neut f i) = (term308 A K op ltle k dom neut f i)).
Proof. exact (eq_refl (term306 A K op ltle k dom neut f i)). Qed.
Lemma lem6403431 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term309 A K op ltle k f dom neut) = (term309 A K op ltle k f dom neut).
Proof. exact (eq_refl (term309 A K op ltle k f dom neut)). Qed.
Lemma lem6403432 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (neut : A) (f : K -> A) (i : K) : ((term305 A K op ltle k f dom neut) = (term306 A K op ltle k dom neut f i)) = ((term305 A K op ltle k f dom neut) = ((term307 A K op ltle k dom neut f i) = (term308 A K op ltle k dom neut f i))).
Proof. exact (MK_COMB (@lem6403431 A K op ltle k f dom neut) (@lem6403430 A K op ltle k dom neut f i)). Qed.
Lemma lem6403433 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term305 A K op ltle k f dom neut) = ((term255 A K op ltle k f dom neut) = (term229 A K op ltle k f dom neut)).
Proof. exact (eq_refl (term305 A K op ltle k f dom neut)). Qed.
Lemma lem6403434 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6403435 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term309 A K op ltle k f dom neut) = (term310 A K op ltle k f dom neut).
Proof. exact (MK_COMB (@lem6403434) (@lem6403433 A K op ltle k f dom neut)). Qed.
Lemma lem6403436 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (neut : A) (f : K -> A) (i : K) : ((term307 A K op ltle k dom neut f i) = (term308 A K op ltle k dom neut f i)) = ((term307 A K op ltle k dom neut f i) = (term308 A K op ltle k dom neut f i)).
Proof. exact (eq_refl ((term307 A K op ltle k dom neut f i) = (term308 A K op ltle k dom neut f i))). Qed.
Lemma lem6403437 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (neut : A) (f : K -> A) (i : K) : ((term305 A K op ltle k f dom neut) = ((term307 A K op ltle k dom neut f i) = (term308 A K op ltle k dom neut f i))) = (((term255 A K op ltle k f dom neut) = (term229 A K op ltle k f dom neut)) = ((term307 A K op ltle k dom neut f i) = (term308 A K op ltle k dom neut f i))).
Proof. exact (MK_COMB (@lem6403435 A K op ltle k f dom neut) (@lem6403436 A K op ltle k dom neut f i)). Qed.
Lemma lem6403438 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (neut : A) (f : K -> A) (i : K) : ((term305 A K op ltle k f dom neut) = (term306 A K op ltle k dom neut f i)) = (((term255 A K op ltle k f dom neut) = (term229 A K op ltle k f dom neut)) = ((term307 A K op ltle k dom neut f i) = (term308 A K op ltle k dom neut f i))).
Proof. exact (TRANS (@lem6403432 A K op ltle k dom neut f i) (@lem6403437 A K op ltle k dom neut f i)). Qed.
Lemma lem6403439 {A K : Type'} (op : type1400 A) (i : K) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : i = (term226 A K ltle k f dom neut)) : ((term255 A K op ltle k f dom neut) = (term229 A K op ltle k f dom neut)) = ((term307 A K op ltle k dom neut f i) = (term308 A K op ltle k dom neut f i)).
Proof. exact (EQ_MP (@lem6403438 A K op ltle k dom neut f i) (@lem6403429 A K op i ltle k f dom neut h1)). Qed.
Lemma lem6403440 {A K : Type'} (op : type1400 A) (i : K) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : i = (term226 A K ltle k f dom neut)) : ((term307 A K op ltle k dom neut f i) = (term308 A K op ltle k dom neut f i)) = ((term255 A K op ltle k f dom neut) = (term229 A K op ltle k f dom neut)).
Proof. exact (SYM (@lem6403439 A K op i ltle k f dom neut h1)). Qed.
Lemma lem6403454 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term250 A K k f dom neut) : term250 A K k f dom neut.
Proof. exact (h1). Qed.
Lemma lem6403456 {A B : Type'} (f : A -> B) (x : A) : (@LET A B f x) = (f x).
Proof. exact (EQ_MP (@lem57692 A B f x) (@lem57691 A B f x)). Qed.
Lemma lem6403457 {A K : Type'} (f : K -> A) (x : K) : (@LET K A f x) = (f x).
Proof. exact (@lem6403456 K A f x). Qed.
Lemma lem6403458 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (neut : A) (f : K -> A) (i : K) : (term308 A K op ltle k dom neut f i) = (term311 A K op ltle k dom neut f i).
Proof. exact (@lem6403457 A K (term312 A K op ltle k dom neut f) i). Qed.
Lemma lem6403459 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (neut : A) (f : K -> A) : (term311 A K op ltle k dom neut f i) = (term313 A K op ltle k i dom neut f).
Proof. exact (eq_refl (term311 A K op ltle k dom neut f i)). Qed.
Lemma lem6403460 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (neut : A) (f : K -> A) : (term308 A K op ltle k dom neut f i) = (term313 A K op ltle k i dom neut f).
Proof. exact (TRANS (@lem6403458 A K op ltle k dom neut f i) (@lem6403459 A K op ltle k i dom neut f)). Qed.
Lemma lem6403462 {A : Type'} (t : A) : (@LET_END A t) = t.
Proof. exact (EQ_MP (@lem57695 A t) (@lem57694 A t)). Qed.
Lemma lem6403463 {A : Type'} (t : A) : (@LET_END A t) = t.
Proof. exact (@lem6403462 A t). Qed.
Lemma lem6403464 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (neut : A) (f : K -> A) : (term313 A K op ltle k i dom neut f) = (term314 A K op ltle k i dom neut f).
Proof. exact (@lem6403463 A (term314 A K op ltle k i dom neut f)). Qed.
Lemma lem6403465 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (neut : A) (f : K -> A) : (term308 A K op ltle k dom neut f i) = (term314 A K op ltle k i dom neut f).
Proof. exact (TRANS (@lem6403460 A K op ltle k i dom neut f) (@lem6403464 A K op ltle k i dom neut f)). Qed.
Lemma lem6403466 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (neut : A) (f : K -> A) (i : K) : (term315 A K op ltle k dom neut f i) = (term315 A K op ltle k dom neut f i).
Proof. exact (eq_refl (term315 A K op ltle k dom neut f i)). Qed.
Lemma lem6403467 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (neut : A) (f : K -> A) : ((term307 A K op ltle k dom neut f i) = (term308 A K op ltle k dom neut f i)) = ((term307 A K op ltle k dom neut f i) = (term314 A K op ltle k i dom neut f)).
Proof. exact (MK_COMB (@lem6403466 A K op ltle k dom neut f i) (@lem6403465 A K op ltle k i dom neut f)). Qed.
Lemma lem6403468 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (neut : A) (f : K -> A) (i : K) : ((term307 A K op ltle k dom neut f i) = (term314 A K op ltle k i dom neut f)) = ((term307 A K op ltle k dom neut f i) = (term308 A K op ltle k dom neut f i)).
Proof. exact (SYM (@lem6403467 A K op ltle k i dom neut f)). Qed.
Lemma lem6403470 {A B : Type'} (f : A -> B) (x : A) : (@LET A B f x) = (f x).
Proof. exact (EQ_MP (@lem57692 A B f x) (@lem57691 A B f x)). Qed.
Lemma lem6403471 {A K : Type'} (f : K -> A) (x : K) : (@LET K A f x) = (f x).
Proof. exact (@lem6403470 K A f x). Qed.
Lemma lem6403472 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (neut : A) (f : K -> A) (i : K) : (term307 A K op ltle k dom neut f i) = (term316 A K op ltle k dom neut f i).
Proof. exact (@lem6403471 A K (term317 A K op ltle k dom neut f) i). Qed.
Lemma lem6403473 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (neut : A) (f : K -> A) : (term316 A K op ltle k dom neut f i) = (term318 A K op ltle k i dom neut f).
Proof. exact (eq_refl (term316 A K op ltle k dom neut f i)). Qed.
Lemma lem6403474 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (neut : A) (f : K -> A) : (term307 A K op ltle k dom neut f i) = (term318 A K op ltle k i dom neut f).
Proof. exact (TRANS (@lem6403472 A K op ltle k dom neut f i) (@lem6403473 A K op ltle k i dom neut f)). Qed.
Lemma lem6403476 {A : Type'} (t : A) : (@LET_END A t) = t.
Proof. exact (EQ_MP (@lem57695 A t) (@lem57694 A t)). Qed.
Lemma lem6403477 {A : Type'} (t : A) : (@LET_END A t) = t.
Proof. exact (@lem6403476 A t). Qed.
Lemma lem6403478 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (neut : A) (f : K -> A) : (term318 A K op ltle k i dom neut f) = (term319 A K op ltle k i dom neut f).
Proof. exact (@lem6403477 A (term319 A K op ltle k i dom neut f)). Qed.
Lemma lem6403479 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (neut : A) (f : K -> A) : (term307 A K op ltle k dom neut f i) = (term319 A K op ltle k i dom neut f).
Proof. exact (TRANS (@lem6403474 A K op ltle k i dom neut f) (@lem6403478 A K op ltle k i dom neut f)). Qed.
Lemma lem6403480 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem6403481 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (neut : A) (f : K -> A) : (term315 A K op ltle k dom neut f i) = (term320 A K op ltle k i dom neut f).
Proof. exact (MK_COMB (@lem6403480 A) (@lem6403479 A K op ltle k i dom neut f)). Qed.
Lemma lem6403482 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (neut : A) (f : K -> A) : (term314 A K op ltle k i dom neut f) = (term314 A K op ltle k i dom neut f).
Proof. exact (eq_refl (term314 A K op ltle k i dom neut f)). Qed.
Lemma lem6403483 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (neut : A) (f : K -> A) : ((term307 A K op ltle k dom neut f i) = (term314 A K op ltle k i dom neut f)) = ((term319 A K op ltle k i dom neut f) = (term314 A K op ltle k i dom neut f)).
Proof. exact (MK_COMB (@lem6403481 A K op ltle k i dom neut f) (@lem6403482 A K op ltle k i dom neut f)). Qed.
Lemma lem6403484 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (neut : A) (f : K -> A) : ((term319 A K op ltle k i dom neut f) = (term314 A K op ltle k i dom neut f)) = ((term307 A K op ltle k dom neut f i) = (term314 A K op ltle k i dom neut f)).
Proof. exact (SYM (@lem6403483 A K op ltle k i dom neut f)). Qed.
Lemma lem6403485 {A K : Type'} (op : type1400 A) (f : K -> A) (i : K) : (term321 A K op f i) = (term321 A K op f i).
Proof. exact (eq_refl (term321 A K op f i)). Qed.
Lemma lem6403486 {A K : Type'} (f : K -> A) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem6403487 {A K : Type'} (dom : A -> Prop) (neut : A) (op : type1400 A) (ltle : type1402 K) : (@iterato A K dom neut op ltle) = (@iterato A K dom neut op ltle).
Proof. exact (eq_refl (@iterato A K dom neut op ltle)). Qed.
Lemma lem6403498 {A K : Type'} (i : K) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term250 A K k f dom neut) (h2 : i = (term226 A K ltle k f dom neut)) : term322 A K ltle i k f dom neut.
Proof. exact (conj (@lem6403427 A K i ltle k f dom neut h2) (@lem6403454 A K k f dom neut h1)). Qed.
Lemma lem6403499 {K : Type'} (_474 : K) (_475 : Prop) (_476 : K -> Prop) (_477 : K) : (term263 K _476 _475 _474 _477) = (term264 K _474 _475 _476 _477).
Proof. exact (@lem13473 K _474 _475 _476 _477). Qed.
Lemma lem6403500 {A K : Type'} (_474 : K) (_475 : Prop) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) (_477 : K) : (term323 A K k i f dom neut _475 _474 _477) = (term324 A K _474 _475 k i f dom neut _477).
Proof. exact (@lem6403499 K _474 _475 (term325 A K k i f dom neut) _477). Qed.
Lemma lem6403501 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term326 A K i ltle k f dom neut) = (term327 A K ltle i k f dom neut).
Proof. exact (@lem6403500 A K (term221 A K ltle k f dom neut) (term217 A K ltle k f dom neut) k i f dom neut (term225 A K k f dom neut)). Qed.
Lemma lem6403502 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term328 A K i k f dom neut) = (term329 A K k i f dom neut).
Proof. exact (eq_refl (term328 A K i k f dom neut)). Qed.
Lemma lem6403503 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term330 A K ltle k f dom neut) = (term330 A K ltle k f dom neut).
Proof. exact (eq_refl (term330 A K ltle k f dom neut)). Qed.
Lemma lem6403504 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term331 A K ltle i k f dom neut) = (term332 A K ltle k i f dom neut).
Proof. exact (MK_COMB (@lem6403503 A K ltle k f dom neut) (@lem6403502 A K k i f dom neut)). Qed.
Lemma lem6403505 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term333 A K i ltle k f dom neut) = (term334 A K ltle k i f dom neut).
Proof. exact (eq_refl (term333 A K i ltle k f dom neut)). Qed.
Lemma lem6403506 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term335 A K ltle k f dom neut) = (term335 A K ltle k f dom neut).
Proof. exact (eq_refl (term335 A K ltle k f dom neut)). Qed.
Lemma lem6403507 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term336 A K i ltle k f dom neut) = (term337 A K ltle k i f dom neut).
Proof. exact (MK_COMB (@lem6403506 A K ltle k f dom neut) (@lem6403505 A K ltle k i f dom neut)). Qed.
Lemma lem6403508 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6403509 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term338 A K i ltle k f dom neut) = (term339 A K ltle k i f dom neut).
Proof. exact (MK_COMB (@lem6403508) (@lem6403507 A K ltle k i f dom neut)). Qed.
Lemma lem6403510 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term327 A K ltle i k f dom neut) = (term340 A K ltle k i f dom neut).
Proof. exact (MK_COMB (@lem6403509 A K ltle k i f dom neut) (@lem6403504 A K ltle k i f dom neut)). Qed.
Lemma lem6403511 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term326 A K i ltle k f dom neut) = (term341 A K ltle k i f dom neut).
Proof. exact (eq_refl (term326 A K i ltle k f dom neut)). Qed.
Lemma lem6403512 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6403513 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term342 A K i ltle k f dom neut) = (term343 A K ltle k i f dom neut).
Proof. exact (MK_COMB (@lem6403512) (@lem6403511 A K ltle k i f dom neut)). Qed.
Lemma lem6403514 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term326 A K i ltle k f dom neut) = (term327 A K ltle i k f dom neut)) = ((term341 A K ltle k i f dom neut) = (term340 A K ltle k i f dom neut)).
Proof. exact (MK_COMB (@lem6403513 A K ltle k i f dom neut) (@lem6403510 A K ltle k i f dom neut)). Qed.
Lemma lem6403515 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term341 A K ltle k i f dom neut) = (term340 A K ltle k i f dom neut).
Proof. exact (EQ_MP (@lem6403514 A K ltle k i f dom neut) (@lem6403501 A K ltle i k f dom neut)). Qed.
Lemma lem6403516 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term340 A K ltle k i f dom neut) = (term341 A K ltle k i f dom neut).
Proof. exact (SYM (@lem6403515 A K ltle k i f dom neut)). Qed.
Lemma lem6403588 {A : Type'} (s : A -> Prop) (t : A -> Prop) : (s = t) = (term344 A s t).
Proof. exact (EQ_MP (@lem3211757 A s t) (@lem3211756 A s t)). Qed.
Lemma lem6403589 {K : Type'} (s : K -> Prop) (t : K -> Prop) : (s = t) = (term344 K s t).
Proof. exact (@lem6403588 K s t). Qed.
Lemma lem6403590 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term113 A K k f dom neut) = (@EMPTY K)) = (term345 A K k f dom neut).
Proof. exact (@lem6403589 K (term113 A K k f dom neut) (@EMPTY K)). Qed.
Lemma lem6403605 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6403606 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term249 A K k f dom neut) = (term346 A K k f dom neut).
Proof. exact (MK_COMB (@lem6403605) (@lem6403590 A K k f dom neut)). Qed.
Lemma lem6403607 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term247 A K k f dom neut) = (term247 A K k f dom neut).
Proof. exact (eq_refl (term247 A K k f dom neut)). Qed.
Lemma lem6403608 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term250 A K k f dom neut) = (term347 A K k f dom neut).
Proof. exact (MK_COMB (@lem6403607 A K k f dom neut) (@lem6403606 A K k f dom neut)). Qed.
Lemma lem6403611 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term348 A K ltle k f dom neut i) = (term348 A K ltle k f dom neut i).
Proof. exact (eq_refl (term348 A K ltle k f dom neut i)). Qed.
Lemma lem6403612 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term349 A K ltle i k f dom neut) = (term350 A K ltle i k f dom neut).
Proof. exact (MK_COMB (@lem6403611 A K ltle k f dom neut i) (@lem6403608 A K k f dom neut)). Qed.
Lemma lem6403615 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6403616 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term351 A K ltle i k f dom neut) = (term352 A K ltle i k f dom neut).
Proof. exact (MK_COMB (@lem6403615) (@lem6403612 A K ltle i k f dom neut)). Qed.
Lemma lem6403620 {A : Type'} (s : A -> Prop) (t : A -> Prop) : (s = t) = (term344 A s t).
Proof. exact (EQ_MP (@lem3211757 A s t) (@lem3211756 A s t)). Qed.
Lemma lem6403621 {K : Type'} (s : K -> Prop) (t : K -> Prop) : (s = t) = (term344 K s t).
Proof. exact (@lem6403620 K s t). Qed.
Lemma lem6403622 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term353 A K k i f dom neut) = (term354 A K k i f dom neut)) = (term355 A K k i f dom neut).
Proof. exact (@lem6403621 K (term353 A K k i f dom neut) (term354 A K k i f dom neut)). Qed.
Lemma lem6403649 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term334 A K ltle k i f dom neut) = (term356 A K ltle k i f dom neut).
Proof. exact (MK_COMB (@lem6403616 A K ltle i k f dom neut) (@lem6403622 A K k i f dom neut)). Qed.
Lemma lem6403652 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term356 A K ltle k i f dom neut) = (term334 A K ltle k i f dom neut).
Proof. exact (SYM (@lem6403649 A K ltle k i f dom neut)). Qed.
Lemma lem6403674 {A : Type'} (s : A -> Prop) (t : A -> Prop) : (s = t) = (term344 A s t).
Proof. exact (EQ_MP (@lem3211757 A s t) (@lem3211756 A s t)). Qed.
Lemma lem6403675 {K : Type'} (s : K -> Prop) (t : K -> Prop) : (s = t) = (term344 K s t).
Proof. exact (@lem6403674 K s t). Qed.
Lemma lem6403676 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term113 A K k f dom neut) = (@EMPTY K)) = (term345 A K k f dom neut).
Proof. exact (@lem6403675 K (term113 A K k f dom neut) (@EMPTY K)). Qed.
Lemma lem6403691 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6403692 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term249 A K k f dom neut) = (term346 A K k f dom neut).
Proof. exact (MK_COMB (@lem6403691) (@lem6403676 A K k f dom neut)). Qed.
Lemma lem6403693 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term247 A K k f dom neut) = (term247 A K k f dom neut).
Proof. exact (eq_refl (term247 A K k f dom neut)). Qed.
Lemma lem6403694 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term250 A K k f dom neut) = (term347 A K k f dom neut).
Proof. exact (MK_COMB (@lem6403693 A K k f dom neut) (@lem6403692 A K k f dom neut)). Qed.
Lemma lem6403697 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term357 A K k f dom neut i) = (term357 A K k f dom neut i).
Proof. exact (eq_refl (term357 A K k f dom neut i)). Qed.
Lemma lem6403698 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term358 A K i k f dom neut) = (term359 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6403697 A K k f dom neut i) (@lem6403694 A K k f dom neut)). Qed.
Lemma lem6403701 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6403702 {A K : Type'} (i : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term360 A K i k f dom neut) = (term361 A K i k f dom neut).
Proof. exact (MK_COMB (@lem6403701) (@lem6403698 A K i k f dom neut)). Qed.
Lemma lem6403706 {A : Type'} (s : A -> Prop) (t : A -> Prop) : (s = t) = (term344 A s t).
Proof. exact (EQ_MP (@lem3211757 A s t) (@lem3211756 A s t)). Qed.
Lemma lem6403707 {K : Type'} (s : K -> Prop) (t : K -> Prop) : (s = t) = (term344 K s t).
Proof. exact (@lem6403706 K s t). Qed.
Lemma lem6403708 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : ((term353 A K k i f dom neut) = (term354 A K k i f dom neut)) = (term355 A K k i f dom neut).
Proof. exact (@lem6403707 K (term353 A K k i f dom neut) (term354 A K k i f dom neut)). Qed.
Lemma lem6403735 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term329 A K k i f dom neut) = (term362 A K k i f dom neut).
Proof. exact (MK_COMB (@lem6403702 A K i k f dom neut) (@lem6403708 A K k i f dom neut)). Qed.
Lemma lem6403738 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term362 A K k i f dom neut) = (term329 A K k i f dom neut).
Proof. exact (SYM (@lem6403735 A K k i f dom neut)). Qed.
Lemma lem6403748 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6403749 {K : Type'} (P : K -> Prop) (x : K) : (@IN K x P) = (P x).
Proof. exact (@lem6403748 K P x). Qed.
Lemma lem6403750 {K : Type'} (k : K -> Prop) (i : K) : (@IN K i k) = (k i).
Proof. exact (@lem6403749 K k i). Qed.
Lemma lem6403751 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6403752 {K : Type'} (k : K -> Prop) (i : K) : (term41 K i k) = (term42 K k i).
Proof. exact (MK_COMB (@lem6403751) (@lem6403750 K k i)). Qed.
Lemma lem6403756 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (EQ_MP (@lem3211702 A s x t) (@lem3211701 A s t x)). Qed.
Lemma lem6403757 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (@lem6403756 A s x t). Qed.
Lemma lem6403758 {A K : Type'} (dom : A -> Prop) (f : K -> A) (i : K) (neut : A) : (term120 A K f i dom neut) = (term365 A K dom f i neut).
Proof. exact (@lem6403757 A dom (f i) (@INSERT A neut (@EMPTY A))). Qed.
Lemma lem6403762 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6403763 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (@lem6403762 A P x). Qed.
Lemma lem6403764 {A K : Type'} (dom : A -> Prop) (f : K -> A) (i : K) : (term366 A K f i dom) = (term367 A K dom f i).
Proof. exact (@lem6403763 A dom (f i)). Qed.
Lemma lem6403765 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6403766 {A K : Type'} (dom : A -> Prop) (f : K -> A) (i : K) : (term368 A K f i dom) = (term369 A K dom f i).
Proof. exact (MK_COMB (@lem6403765) (@lem6403764 A K dom f i)). Qed.
Lemma lem6403768 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (EQ_MP (@lem3211693 A y x s) (@lem3211692 A y x s)). Qed.
Lemma lem6403769 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (@lem6403768 A y x s). Qed.
Lemma lem6403770 {A K : Type'} (neut : A) (f : K -> A) (i : K) : (term372 A K f i neut) = (term373 A K neut f i).
Proof. exact (@lem6403769 A neut (f i) (@EMPTY A)). Qed.
Lemma lem6403776 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem3211730 A x (@lem3211729 A x)). Qed.
Lemma lem6403777 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem6403776 A x). Qed.
Lemma lem6403778 {A K : Type'} (f : K -> A) (i : K) : (term374 A K f i) = False.
Proof. exact (@lem6403777 A (f i)). Qed.
Lemma lem6403779 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term375 A K f i neut) = (term375 A K f i neut).
Proof. exact (eq_refl (term375 A K f i neut)). Qed.
Lemma lem6403780 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term373 A K neut f i) = (term376 A K f i neut).
Proof. exact (MK_COMB (@lem6403779 A K f i neut) (@lem6403778 A K f i)). Qed.
Lemma lem6403782 (t : Prop) : (t \/ False) = t.
Proof. exact (proj1 (@lem1834 t)). Qed.
Lemma lem6403783 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term376 A K f i neut) = ((f i) = neut).
Proof. exact (@lem6403782 ((f i) = neut)). Qed.
Lemma lem6403786 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term373 A K neut f i) = ((f i) = neut).
Proof. exact (TRANS (@lem6403780 A K f i neut) (@lem6403783 A K f i neut)). Qed.
Lemma lem6403787 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term372 A K f i neut) = ((f i) = neut).
Proof. exact (TRANS (@lem6403770 A K neut f i) (@lem6403786 A K f i neut)). Qed.
Lemma lem6403788 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6403789 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term377 A K f i neut) = (term378 A K f i neut).
Proof. exact (MK_COMB (@lem6403788) (@lem6403787 A K f i neut)). Qed.
Lemma lem6403790 {A K : Type'} (dom : A -> Prop) (f : K -> A) (i : K) (neut : A) : (term365 A K dom f i neut) = (term379 A K dom f i neut).
Proof. exact (MK_COMB (@lem6403766 A K dom f i) (@lem6403789 A K f i neut)). Qed.
Lemma lem6403793 {A K : Type'} (dom : A -> Prop) (f : K -> A) (i : K) (neut : A) : (term120 A K f i dom neut) = (term379 A K dom f i neut).
Proof. exact (TRANS (@lem6403758 A K dom f i neut) (@lem6403790 A K dom f i neut)). Qed.
Lemma lem6403794 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6403795 {A K : Type'} (dom : A -> Prop) (f : K -> A) (i : K) (neut : A) : (term260 A K f i dom neut) = (term380 A K dom f i neut).
Proof. exact (MK_COMB (@lem6403794) (@lem6403793 A K dom f i neut)). Qed.
Lemma lem6403807 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6403808 {K : Type'} (P : K -> Prop) (x : K) : (@IN K x P) = (P x).
Proof. exact (@lem6403807 K P x). Qed.
Lemma lem6403809 {K : Type'} (k : K -> Prop) (j : K) : (@IN K j k) = (k j).
Proof. exact (@lem6403808 K k j). Qed.
Lemma lem6403810 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6403811 {K : Type'} (k : K -> Prop) (j : K) : (term41 K j k) = (term42 K k j).
Proof. exact (MK_COMB (@lem6403810) (@lem6403809 K k j)). Qed.
Lemma lem6403813 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (EQ_MP (@lem3211702 A s x t) (@lem3211701 A s t x)). Qed.
Lemma lem6403814 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (@lem6403813 A s x t). Qed.
Lemma lem6403815 {A K : Type'} (dom : A -> Prop) (f : K -> A) (j : K) (neut : A) : (term120 A K f j dom neut) = (term365 A K dom f j neut).
Proof. exact (@lem6403814 A dom (f j) (@INSERT A neut (@EMPTY A))). Qed.
Lemma lem6403819 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6403820 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (@lem6403819 A P x). Qed.
Lemma lem6403821 {A K : Type'} (dom : A -> Prop) (f : K -> A) (j : K) : (term366 A K f j dom) = (term367 A K dom f j).
Proof. exact (@lem6403820 A dom (f j)). Qed.
Lemma lem6403822 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6403823 {A K : Type'} (dom : A -> Prop) (f : K -> A) (j : K) : (term368 A K f j dom) = (term369 A K dom f j).
Proof. exact (MK_COMB (@lem6403822) (@lem6403821 A K dom f j)). Qed.
Lemma lem6403825 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (EQ_MP (@lem3211693 A y x s) (@lem3211692 A y x s)). Qed.
Lemma lem6403826 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (@lem6403825 A y x s). Qed.
Lemma lem6403827 {A K : Type'} (neut : A) (f : K -> A) (j : K) : (term372 A K f j neut) = (term373 A K neut f j).
Proof. exact (@lem6403826 A neut (f j) (@EMPTY A)). Qed.
Lemma lem6403833 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem3211730 A x (@lem3211729 A x)). Qed.
Lemma lem6403834 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem6403833 A x). Qed.
Lemma lem6403835 {A K : Type'} (f : K -> A) (j : K) : (term374 A K f j) = False.
Proof. exact (@lem6403834 A (f j)). Qed.
Lemma lem6403836 {A K : Type'} (f : K -> A) (j : K) (neut : A) : (term375 A K f j neut) = (term375 A K f j neut).
Proof. exact (eq_refl (term375 A K f j neut)). Qed.
Lemma lem6403837 {A K : Type'} (f : K -> A) (j : K) (neut : A) : (term373 A K neut f j) = (term376 A K f j neut).
Proof. exact (MK_COMB (@lem6403836 A K f j neut) (@lem6403835 A K f j)). Qed.
Lemma lem6403839 (t : Prop) : (t \/ False) = t.
Proof. exact (proj1 (@lem1834 t)). Qed.
Lemma lem6403840 {A K : Type'} (f : K -> A) (j : K) (neut : A) : (term376 A K f j neut) = ((f j) = neut).
Proof. exact (@lem6403839 ((f j) = neut)). Qed.
Lemma lem6403843 {A K : Type'} (f : K -> A) (j : K) (neut : A) : (term373 A K neut f j) = ((f j) = neut).
Proof. exact (TRANS (@lem6403837 A K f j neut) (@lem6403840 A K f j neut)). Qed.
Lemma lem6403844 {A K : Type'} (f : K -> A) (j : K) (neut : A) : (term372 A K f j neut) = ((f j) = neut).
Proof. exact (TRANS (@lem6403827 A K neut f j) (@lem6403843 A K f j neut)). Qed.
Lemma lem6403845 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6403846 {A K : Type'} (f : K -> A) (j : K) (neut : A) : (term377 A K f j neut) = (term378 A K f j neut).
Proof. exact (MK_COMB (@lem6403845) (@lem6403844 A K f j neut)). Qed.
Lemma lem6403847 {A K : Type'} (dom : A -> Prop) (f : K -> A) (j : K) (neut : A) : (term365 A K dom f j neut) = (term379 A K dom f j neut).
Proof. exact (MK_COMB (@lem6403823 A K dom f j) (@lem6403846 A K f j neut)). Qed.
Lemma lem6403850 {A K : Type'} (dom : A -> Prop) (f : K -> A) (j : K) (neut : A) : (term120 A K f j dom neut) = (term379 A K dom f j neut).
Proof. exact (TRANS (@lem6403815 A K dom f j neut) (@lem6403847 A K dom f j neut)). Qed.
Lemma lem6403851 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (j : K) (neut : A) : (term122 A K k f j dom neut) = (term381 A K k dom f j neut).
Proof. exact (MK_COMB (@lem6403811 K k j) (@lem6403850 A K dom f j neut)). Qed.
Lemma lem6403854 {K : Type'} (ltle : type1402 K) (j : K) (i : K) : (term254 K ltle j i) = (term254 K ltle j i).
Proof. exact (eq_refl (term254 K ltle j i)). Qed.
Lemma lem6403855 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (j : K) (neut : A) : (term204 A K ltle i k f j dom neut) = (term382 A K ltle i k dom f j neut).
Proof. exact (MK_COMB (@lem6403854 K ltle j i) (@lem6403851 A K k dom f j neut)). Qed.
Lemma lem6403858 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6403859 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (j : K) (neut : A) : (term206 A K ltle i k f j dom neut) = (term383 A K ltle i k dom f j neut).
Proof. exact (MK_COMB (@lem6403858) (@lem6403855 A K ltle i k dom f j neut)). Qed.
Lemma lem6403862 {K : Type'} (j : K) (i : K) : (j = i) = (j = i).
Proof. exact (eq_refl (j = i)). Qed.
Lemma lem6403863 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K) (i : K) : (term208 A K ltle k f dom neut j i) = (term384 A K ltle k dom f neut j i).
Proof. exact (MK_COMB (@lem6403859 A K ltle i k dom f j neut) (@lem6403862 K j i)). Qed.
Lemma lem6403866 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term210 A K ltle k f dom neut i) = (term385 A K ltle k dom f neut i).
Proof. exact (fun_ext (fun j : K => @lem6403863 A K ltle k dom f neut j i)). Qed.
Lemma lem6403867 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6403868 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term203 A K ltle k f dom neut i) = (term386 A K ltle k dom f neut i).
Proof. exact (MK_COMB (@lem6403867 K) (@lem6403866 A K ltle k dom f neut i)). Qed.
Lemma lem6403873 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term262 A K ltle k f dom neut i) = (term387 A K ltle k dom f neut i).
Proof. exact (MK_COMB (@lem6403795 A K dom f i neut) (@lem6403868 A K ltle k dom f neut i)). Qed.
Lemma lem6403876 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term201 A K ltle k f dom neut i) = (term388 A K ltle k dom f neut i).
Proof. exact (MK_COMB (@lem6403752 K k i) (@lem6403873 A K ltle k dom f neut i)). Qed.
Lemma lem6403879 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term215 A K ltle k f dom neut) = (term389 A K ltle k dom f neut).
Proof. exact (fun_ext (fun i : K => @lem6403876 A K ltle k dom f neut i)). Qed.
Lemma lem6403880 {K : Type'} : (@ε K) = (@ε K).
Proof. exact (eq_refl (@ε K)). Qed.
Lemma lem6403881 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term221 A K ltle k f dom neut) = (term390 A K ltle k dom f neut).
Proof. exact (MK_COMB (@lem6403880 K) (@lem6403879 A K ltle k dom f neut)). Qed.
Lemma lem6403882 {K : Type'} : (@eq K) = (@eq K).
Proof. exact (eq_refl (@eq K)). Qed.
Lemma lem6403883 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term391 A K ltle k f dom neut) = (term392 A K ltle k dom f neut).
Proof. exact (MK_COMB (@lem6403882 K) (@lem6403881 A K ltle k dom f neut)). Qed.
Lemma lem6403884 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6403885 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : ((term221 A K ltle k f dom neut) = i) = ((term390 A K ltle k dom f neut) = i).
Proof. exact (MK_COMB (@lem6403883 A K ltle k dom f neut) (@lem6403884 K i)). Qed.
Lemma lem6403888 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6403889 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term348 A K ltle k f dom neut i) = (term393 A K ltle k dom f neut i).
Proof. exact (MK_COMB (@lem6403888) (@lem6403885 A K ltle k dom f neut i)). Qed.
Lemma lem6403899 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6403900 {K : Type'} (P : K -> Prop) (x : K) : (@IN K x P) = (P x).
Proof. exact (@lem6403899 K P x). Qed.
Lemma lem6403901 {K : Type'} (k : K -> Prop) (i : K) : (@IN K i k) = (k i).
Proof. exact (@lem6403900 K k i). Qed.
Lemma lem6403902 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6403903 {K : Type'} (k : K -> Prop) (i : K) : (term41 K i k) = (term42 K k i).
Proof. exact (MK_COMB (@lem6403902) (@lem6403901 K k i)). Qed.
Lemma lem6403905 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (EQ_MP (@lem3211702 A s x t) (@lem3211701 A s t x)). Qed.
Lemma lem6403906 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (@lem6403905 A s x t). Qed.
Lemma lem6403907 {A K : Type'} (dom : A -> Prop) (f : K -> A) (i : K) (neut : A) : (term120 A K f i dom neut) = (term365 A K dom f i neut).
Proof. exact (@lem6403906 A dom (f i) (@INSERT A neut (@EMPTY A))). Qed.
Lemma lem6403911 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6403912 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (@lem6403911 A P x). Qed.
Lemma lem6403913 {A K : Type'} (dom : A -> Prop) (f : K -> A) (i : K) : (term366 A K f i dom) = (term367 A K dom f i).
Proof. exact (@lem6403912 A dom (f i)). Qed.
Lemma lem6403914 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6403915 {A K : Type'} (dom : A -> Prop) (f : K -> A) (i : K) : (term368 A K f i dom) = (term369 A K dom f i).
Proof. exact (MK_COMB (@lem6403914) (@lem6403913 A K dom f i)). Qed.
Lemma lem6403917 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (EQ_MP (@lem3211693 A y x s) (@lem3211692 A y x s)). Qed.
Lemma lem6403918 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (@lem6403917 A y x s). Qed.
Lemma lem6403919 {A K : Type'} (neut : A) (f : K -> A) (i : K) : (term372 A K f i neut) = (term373 A K neut f i).
Proof. exact (@lem6403918 A neut (f i) (@EMPTY A)). Qed.
Lemma lem6403925 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem3211730 A x (@lem3211729 A x)). Qed.
Lemma lem6403926 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem6403925 A x). Qed.
Lemma lem6403927 {A K : Type'} (f : K -> A) (i : K) : (term374 A K f i) = False.
Proof. exact (@lem6403926 A (f i)). Qed.
Lemma lem6403928 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term375 A K f i neut) = (term375 A K f i neut).
Proof. exact (eq_refl (term375 A K f i neut)). Qed.
Lemma lem6403929 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term373 A K neut f i) = (term376 A K f i neut).
Proof. exact (MK_COMB (@lem6403928 A K f i neut) (@lem6403927 A K f i)). Qed.
Lemma lem6403931 (t : Prop) : (t \/ False) = t.
Proof. exact (proj1 (@lem1834 t)). Qed.
Lemma lem6403932 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term376 A K f i neut) = ((f i) = neut).
Proof. exact (@lem6403931 ((f i) = neut)). Qed.
Lemma lem6403935 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term373 A K neut f i) = ((f i) = neut).
Proof. exact (TRANS (@lem6403929 A K f i neut) (@lem6403932 A K f i neut)). Qed.
Lemma lem6403936 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term372 A K f i neut) = ((f i) = neut).
Proof. exact (TRANS (@lem6403919 A K neut f i) (@lem6403935 A K f i neut)). Qed.
Lemma lem6403937 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6403938 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term377 A K f i neut) = (term378 A K f i neut).
Proof. exact (MK_COMB (@lem6403937) (@lem6403936 A K f i neut)). Qed.
Lemma lem6403939 {A K : Type'} (dom : A -> Prop) (f : K -> A) (i : K) (neut : A) : (term365 A K dom f i neut) = (term379 A K dom f i neut).
Proof. exact (MK_COMB (@lem6403915 A K dom f i) (@lem6403938 A K f i neut)). Qed.
Lemma lem6403942 {A K : Type'} (dom : A -> Prop) (f : K -> A) (i : K) (neut : A) : (term120 A K f i dom neut) = (term379 A K dom f i neut).
Proof. exact (TRANS (@lem6403907 A K dom f i neut) (@lem6403939 A K dom f i neut)). Qed.
Lemma lem6403943 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (i : K) (neut : A) : (term122 A K k f i dom neut) = (term381 A K k dom f i neut).
Proof. exact (MK_COMB (@lem6403903 K k i) (@lem6403942 A K dom f i neut)). Qed.
Lemma lem6403946 {K : Type'} (GEN_PVAR_263 : K) : (@SETSPEC K GEN_PVAR_263) = (@SETSPEC K GEN_PVAR_263).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_263)). Qed.
Lemma lem6403947 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (i : K) (neut : A) : (term124 A K GEN_PVAR_263 k f i dom neut) = (term394 A K GEN_PVAR_263 k dom f i neut).
Proof. exact (MK_COMB (@lem6403946 K GEN_PVAR_263) (@lem6403943 A K k dom f i neut)). Qed.
Lemma lem6403948 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6403949 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term126 A K GEN_PVAR_263 k f dom neut i) = (term395 A K GEN_PVAR_263 k dom f neut i).
Proof. exact (MK_COMB (@lem6403947 A K GEN_PVAR_263 k dom f i neut) (@lem6403948 K i)). Qed.
Lemma lem6403950 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term128 A K GEN_PVAR_263 k f dom neut) = (term396 A K GEN_PVAR_263 k dom f neut).
Proof. exact (fun_ext (fun i : K => @lem6403949 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6403951 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6403952 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term130 A K GEN_PVAR_263 k f dom neut) = (term397 A K GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6403951 K) (@lem6403950 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6403957 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term132 A K k f dom neut) = (term398 A K k dom f neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6403952 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6403958 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6403959 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term113 A K k f dom neut) = (term399 A K k dom f neut).
Proof. exact (MK_COMB (@lem6403958 K) (@lem6403957 A K k dom f neut)). Qed.
Lemma lem6403960 {K : Type'} : (@FINITE K) = (@FINITE K).
Proof. exact (eq_refl (@FINITE K)). Qed.
Lemma lem6403961 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term246 A K k f dom neut) = (term400 A K k dom f neut).
Proof. exact (MK_COMB (@lem6403960 K) (@lem6403959 A K k dom f neut)). Qed.
Lemma lem6403962 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6403963 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term247 A K k f dom neut) = (term401 A K k dom f neut).
Proof. exact (MK_COMB (@lem6403962) (@lem6403961 A K k dom f neut)). Qed.
Lemma lem6403971 {_83095 : Type'} (p : _83095 -> Prop) (x : _83095) : (term21 _83095 x p) = (p x).
Proof. exact (EQ_MP (@lem3211641 _83095 p x) (@lem3211640 _83095 p x)). Qed.
Lemma lem6403972 {K : Type'} (p : K -> Prop) (x : K) : (term21 K x p) = (p x).
Proof. exact (@lem6403971 K p x). Qed.
Lemma lem6403973 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (x : K) : (term235 A K x k f dom neut) = (term236 A K k f dom neut x).
Proof. exact (@lem6403972 K (term237 A K k f dom neut) x). Qed.
Lemma lem6403974 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term236 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (eq_refl (term236 A K k f dom neut i)). Qed.
Lemma lem6403975 {K : Type'} (GEN_PVAR_264 : K) : (@SETSPEC K GEN_PVAR_264) = (@SETSPEC K GEN_PVAR_264).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_264)). Qed.
Lemma lem6403976 {A K : Type'} (GEN_PVAR_264 : K) (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term238 A K GEN_PVAR_264 k f dom neut i) = (term124 A K GEN_PVAR_264 k f i dom neut).
Proof. exact (MK_COMB (@lem6403975 K GEN_PVAR_264) (@lem6403974 A K k f i dom neut)). Qed.
Lemma lem6403977 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6403978 {A K : Type'} (GEN_PVAR_264 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term239 A K GEN_PVAR_264 k f dom neut i) = (term126 A K GEN_PVAR_264 k f dom neut i).
Proof. exact (MK_COMB (@lem6403976 A K GEN_PVAR_264 k f i dom neut) (@lem6403977 K i)). Qed.
Lemma lem6403979 {A K : Type'} (GEN_PVAR_264 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term240 A K GEN_PVAR_264 k f dom neut) = (term128 A K GEN_PVAR_264 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6403978 A K GEN_PVAR_264 k f dom neut i)). Qed.
Lemma lem6403980 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6403981 {A K : Type'} (GEN_PVAR_264 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term241 A K GEN_PVAR_264 k f dom neut) = (term130 A K GEN_PVAR_264 k f dom neut).
Proof. exact (MK_COMB (@lem6403980 K) (@lem6403979 A K GEN_PVAR_264 k f dom neut)). Qed.
Lemma lem6403982 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term242 A K k f dom neut) = (term132 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_264 : K => @lem6403981 A K GEN_PVAR_264 k f dom neut)). Qed.
Lemma lem6403983 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6403984 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term243 A K k f dom neut) = (term113 A K k f dom neut).
Proof. exact (MK_COMB (@lem6403983 K) (@lem6403982 A K k f dom neut)). Qed.
Lemma lem6403985 {K : Type'} (x : K) : (@IN K x) = (@IN K x).
Proof. exact (eq_refl (@IN K x)). Qed.
Lemma lem6403986 {A K : Type'} (x : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term235 A K x k f dom neut) = (term134 A K x k f dom neut).
Proof. exact (MK_COMB (@lem6403985 K x) (@lem6403984 A K k f dom neut)). Qed.
Lemma lem6403987 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6403988 {A K : Type'} (x : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term244 A K x k f dom neut) = (term245 A K x k f dom neut).
Proof. exact (MK_COMB (@lem6403987) (@lem6403986 A K x k f dom neut)). Qed.
Lemma lem6403989 {A K : Type'} (k : K -> Prop) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : (term236 A K k f dom neut x) = (term122 A K k f x dom neut).
Proof. exact (eq_refl (term236 A K k f dom neut x)). Qed.
Lemma lem6403990 {A K : Type'} (k : K -> Prop) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : ((term235 A K x k f dom neut) = (term236 A K k f dom neut x)) = ((term134 A K x k f dom neut) = (term122 A K k f x dom neut)).
Proof. exact (MK_COMB (@lem6403988 A K x k f dom neut) (@lem6403989 A K k f x dom neut)). Qed.
Lemma lem6403991 {A K : Type'} (k : K -> Prop) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : (term134 A K x k f dom neut) = (term122 A K k f x dom neut).
Proof. exact (EQ_MP (@lem6403990 A K k f x dom neut) (@lem6403973 A K k f dom neut x)). Qed.
Lemma lem6403995 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6403996 {K : Type'} (P : K -> Prop) (x : K) : (@IN K x P) = (P x).
Proof. exact (@lem6403995 K P x). Qed.
Lemma lem6403997 {K : Type'} (k : K -> Prop) (x : K) : (@IN K x k) = (k x).
Proof. exact (@lem6403996 K k x). Qed.
Lemma lem6403998 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6403999 {K : Type'} (k : K -> Prop) (x : K) : (term41 K x k) = (term42 K k x).
Proof. exact (MK_COMB (@lem6403998) (@lem6403997 K k x)). Qed.
Lemma lem6404001 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (EQ_MP (@lem3211702 A s x t) (@lem3211701 A s t x)). Qed.
Lemma lem6404002 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (@lem6404001 A s x t). Qed.
Lemma lem6404003 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term120 A K f x dom neut) = (term365 A K dom f x neut).
Proof. exact (@lem6404002 A dom (f x) (@INSERT A neut (@EMPTY A))). Qed.
Lemma lem6404007 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6404008 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (@lem6404007 A P x). Qed.
Lemma lem6404009 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term366 A K f x dom) = (term367 A K dom f x).
Proof. exact (@lem6404008 A dom (f x)). Qed.
Lemma lem6404010 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404011 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term368 A K f x dom) = (term369 A K dom f x).
Proof. exact (MK_COMB (@lem6404010) (@lem6404009 A K dom f x)). Qed.
Lemma lem6404013 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (EQ_MP (@lem3211693 A y x s) (@lem3211692 A y x s)). Qed.
Lemma lem6404014 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (@lem6404013 A y x s). Qed.
Lemma lem6404015 {A K : Type'} (neut : A) (f : K -> A) (x : K) : (term372 A K f x neut) = (term373 A K neut f x).
Proof. exact (@lem6404014 A neut (f x) (@EMPTY A)). Qed.
Lemma lem6404021 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem3211730 A x (@lem3211729 A x)). Qed.
Lemma lem6404022 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem6404021 A x). Qed.
Lemma lem6404023 {A K : Type'} (f : K -> A) (x : K) : (term374 A K f x) = False.
Proof. exact (@lem6404022 A (f x)). Qed.
Lemma lem6404024 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term375 A K f x neut) = (term375 A K f x neut).
Proof. exact (eq_refl (term375 A K f x neut)). Qed.
Lemma lem6404025 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term373 A K neut f x) = (term376 A K f x neut).
Proof. exact (MK_COMB (@lem6404024 A K f x neut) (@lem6404023 A K f x)). Qed.
Lemma lem6404027 (t : Prop) : (t \/ False) = t.
Proof. exact (proj1 (@lem1834 t)). Qed.
Lemma lem6404028 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term376 A K f x neut) = ((f x) = neut).
Proof. exact (@lem6404027 ((f x) = neut)). Qed.
Lemma lem6404031 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term373 A K neut f x) = ((f x) = neut).
Proof. exact (TRANS (@lem6404025 A K f x neut) (@lem6404028 A K f x neut)). Qed.
Lemma lem6404032 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term372 A K f x neut) = ((f x) = neut).
Proof. exact (TRANS (@lem6404015 A K neut f x) (@lem6404031 A K f x neut)). Qed.
Lemma lem6404033 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6404034 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term377 A K f x neut) = (term378 A K f x neut).
Proof. exact (MK_COMB (@lem6404033) (@lem6404032 A K f x neut)). Qed.
Lemma lem6404035 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term365 A K dom f x neut) = (term379 A K dom f x neut).
Proof. exact (MK_COMB (@lem6404011 A K dom f x) (@lem6404034 A K f x neut)). Qed.
Lemma lem6404038 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term120 A K f x dom neut) = (term379 A K dom f x neut).
Proof. exact (TRANS (@lem6404003 A K dom f x neut) (@lem6404035 A K dom f x neut)). Qed.
Lemma lem6404039 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term122 A K k f x dom neut) = (term381 A K k dom f x neut).
Proof. exact (MK_COMB (@lem6403999 K k x) (@lem6404038 A K dom f x neut)). Qed.
Lemma lem6404042 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term134 A K x k f dom neut) = (term381 A K k dom f x neut).
Proof. exact (TRANS (@lem6403991 A K k f x dom neut) (@lem6404039 A K k dom f x neut)). Qed.
Lemma lem6404043 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6404044 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term245 A K x k f dom neut) = (term402 A K k dom f x neut).
Proof. exact (MK_COMB (@lem6404043) (@lem6404042 A K k dom f x neut)). Qed.
Lemma lem6404046 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem3211730 A x (@lem3211729 A x)). Qed.
Lemma lem6404047 {K : Type'} (x : K) : (@IN K x (@EMPTY K)) = False.
Proof. exact (@lem6404046 K x). Qed.
Lemma lem6404048 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : ((term134 A K x k f dom neut) = (@IN K x (@EMPTY K))) = ((term381 A K k dom f x neut) = False).
Proof. exact (MK_COMB (@lem6404044 A K k dom f x neut) (@lem6404047 K x)). Qed.
Lemma lem6404050 (t : Prop) : (t = False) = (~ t).
Proof. exact (proj2 (@lem1857 t)). Qed.
Lemma lem6404051 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : ((term381 A K k dom f x neut) = False) = (term403 A K k dom f x neut).
Proof. exact (@lem6404050 (term381 A K k dom f x neut)). Qed.
Lemma lem6404058 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : ((term134 A K x k f dom neut) = (@IN K x (@EMPTY K))) = (term403 A K k dom f x neut).
Proof. exact (TRANS (@lem6404048 A K k dom f x neut) (@lem6404051 A K k dom f x neut)). Qed.
Lemma lem6404059 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term404 A K k f dom neut) = (term405 A K k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6404058 A K k dom f x neut)). Qed.
Lemma lem6404060 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6404061 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term345 A K k f dom neut) = (term406 A K k dom f neut).
Proof. exact (MK_COMB (@lem6404060 K) (@lem6404059 A K k dom f neut)). Qed.
Lemma lem6404066 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6404067 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term346 A K k f dom neut) = (term407 A K k dom f neut).
Proof. exact (MK_COMB (@lem6404066) (@lem6404061 A K k dom f neut)). Qed.
Lemma lem6404068 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term347 A K k f dom neut) = (term408 A K k dom f neut).
Proof. exact (MK_COMB (@lem6403963 A K k dom f neut) (@lem6404067 A K k dom f neut)). Qed.
Lemma lem6404071 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term350 A K ltle i k f dom neut) = (term409 A K ltle i k dom f neut).
Proof. exact (MK_COMB (@lem6403889 A K ltle k dom f neut i) (@lem6404068 A K k dom f neut)). Qed.
Lemma lem6404074 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6404075 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term352 A K ltle i k f dom neut) = (term410 A K ltle i k dom f neut).
Proof. exact (MK_COMB (@lem6404074) (@lem6404071 A K ltle i k dom f neut)). Qed.
Lemma lem6404083 {_83095 : Type'} (p : _83095 -> Prop) (x : _83095) : (term21 _83095 x p) = (p x).
Proof. exact (EQ_MP (@lem3211641 _83095 p x) (@lem3211640 _83095 p x)). Qed.
Lemma lem6404084 {K : Type'} (p : K -> Prop) (x : K) : (term21 K x p) = (p x).
Proof. exact (@lem6404083 K p x). Qed.
Lemma lem6404085 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) (x : K) : (term411 A K x k i f dom neut) = (term412 A K k i f dom neut x).
Proof. exact (@lem6404084 K (term413 A K k i f dom neut) x). Qed.
Lemma lem6404086 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term412 A K k i f dom neut j) = (term414 A K k i f j dom neut).
Proof. exact (eq_refl (term412 A K k i f dom neut j)). Qed.
Lemma lem6404087 {K : Type'} (GEN_PVAR_265 : K) : (@SETSPEC K GEN_PVAR_265) = (@SETSPEC K GEN_PVAR_265).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_265)). Qed.
Lemma lem6404088 {A K : Type'} (GEN_PVAR_265 : K) (k : K -> Prop) (i : K) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term415 A K GEN_PVAR_265 k i f dom neut j) = (term416 A K GEN_PVAR_265 k i f j dom neut).
Proof. exact (MK_COMB (@lem6404087 K GEN_PVAR_265) (@lem6404086 A K k i f j dom neut)). Qed.
Lemma lem6404089 {K : Type'} (j : K) : j = j.
Proof. exact (eq_refl j). Qed.
Lemma lem6404090 {A K : Type'} (GEN_PVAR_265 : K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) (j : K) : (term417 A K GEN_PVAR_265 k i f dom neut j) = (term418 A K GEN_PVAR_265 k i f dom neut j).
Proof. exact (MK_COMB (@lem6404088 A K GEN_PVAR_265 k i f j dom neut) (@lem6404089 K j)). Qed.
Lemma lem6404091 {A K : Type'} (GEN_PVAR_265 : K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term419 A K GEN_PVAR_265 k i f dom neut) = (term420 A K GEN_PVAR_265 k i f dom neut).
Proof. exact (fun_ext (fun j : K => @lem6404090 A K GEN_PVAR_265 k i f dom neut j)). Qed.
Lemma lem6404092 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6404093 {A K : Type'} (GEN_PVAR_265 : K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term421 A K GEN_PVAR_265 k i f dom neut) = (term422 A K GEN_PVAR_265 k i f dom neut).
Proof. exact (MK_COMB (@lem6404092 K) (@lem6404091 A K GEN_PVAR_265 k i f dom neut)). Qed.
Lemma lem6404094 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term423 A K k i f dom neut) = (term424 A K k i f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_265 : K => @lem6404093 A K GEN_PVAR_265 k i f dom neut)). Qed.
Lemma lem6404095 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6404096 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term425 A K k i f dom neut) = (term353 A K k i f dom neut).
Proof. exact (MK_COMB (@lem6404095 K) (@lem6404094 A K k i f dom neut)). Qed.
Lemma lem6404097 {K : Type'} (x : K) : (@IN K x) = (@IN K x).
Proof. exact (eq_refl (@IN K x)). Qed.
Lemma lem6404098 {A K : Type'} (x : K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term411 A K x k i f dom neut) = (term426 A K x k i f dom neut).
Proof. exact (MK_COMB (@lem6404097 K x) (@lem6404096 A K k i f dom neut)). Qed.
Lemma lem6404099 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6404100 {A K : Type'} (x : K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term427 A K x k i f dom neut) = (term428 A K x k i f dom neut).
Proof. exact (MK_COMB (@lem6404099) (@lem6404098 A K x k i f dom neut)). Qed.
Lemma lem6404101 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : (term412 A K k i f dom neut x) = (term414 A K k i f x dom neut).
Proof. exact (eq_refl (term412 A K k i f dom neut x)). Qed.
Lemma lem6404102 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : ((term411 A K x k i f dom neut) = (term412 A K k i f dom neut x)) = ((term426 A K x k i f dom neut) = (term414 A K k i f x dom neut)).
Proof. exact (MK_COMB (@lem6404100 A K x k i f dom neut) (@lem6404101 A K k i f x dom neut)). Qed.
Lemma lem6404103 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : (term426 A K x k i f dom neut) = (term414 A K k i f x dom neut).
Proof. exact (EQ_MP (@lem6404102 A K k i f x dom neut) (@lem6404085 A K k i f dom neut x)). Qed.
Lemma lem6404107 {A : Type'} (s : A -> Prop) (x : A) (y : A) : (term429 A x s y) = (term430 A s x y).
Proof. exact (EQ_MP (@lem3211684 A s x y) (@lem3211683 A s x y)). Qed.
Lemma lem6404108 {K : Type'} (s : K -> Prop) (x : K) (y : K) : (term429 K x s y) = (term430 K s x y).
Proof. exact (@lem6404107 K s x y). Qed.
Lemma lem6404109 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (x : K) (i : K) : (term431 A K x k f dom neut i) = (term432 A K k f dom neut x i).
Proof. exact (@lem6404108 K (term113 A K k f dom neut) x i). Qed.
Lemma lem6404113 {_83095 : Type'} (p : _83095 -> Prop) (x : _83095) : (term21 _83095 x p) = (p x).
Proof. exact (EQ_MP (@lem3211641 _83095 p x) (@lem3211640 _83095 p x)). Qed.
Lemma lem6404114 {K : Type'} (p : K -> Prop) (x : K) : (term21 K x p) = (p x).
Proof. exact (@lem6404113 K p x). Qed.
Lemma lem6404115 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (x : K) : (term235 A K x k f dom neut) = (term236 A K k f dom neut x).
Proof. exact (@lem6404114 K (term237 A K k f dom neut) x). Qed.
Lemma lem6404116 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term236 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (eq_refl (term236 A K k f dom neut i)). Qed.
Lemma lem6404117 {K : Type'} (GEN_PVAR_268 : K) : (@SETSPEC K GEN_PVAR_268) = (@SETSPEC K GEN_PVAR_268).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_268)). Qed.
Lemma lem6404118 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term238 A K GEN_PVAR_268 k f dom neut i) = (term124 A K GEN_PVAR_268 k f i dom neut).
Proof. exact (MK_COMB (@lem6404117 K GEN_PVAR_268) (@lem6404116 A K k f i dom neut)). Qed.
Lemma lem6404119 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6404120 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term239 A K GEN_PVAR_268 k f dom neut i) = (term126 A K GEN_PVAR_268 k f dom neut i).
Proof. exact (MK_COMB (@lem6404118 A K GEN_PVAR_268 k f i dom neut) (@lem6404119 K i)). Qed.
Lemma lem6404121 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term240 A K GEN_PVAR_268 k f dom neut) = (term128 A K GEN_PVAR_268 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6404120 A K GEN_PVAR_268 k f dom neut i)). Qed.
Lemma lem6404122 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6404123 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term241 A K GEN_PVAR_268 k f dom neut) = (term130 A K GEN_PVAR_268 k f dom neut).
Proof. exact (MK_COMB (@lem6404122 K) (@lem6404121 A K GEN_PVAR_268 k f dom neut)). Qed.
Lemma lem6404124 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term242 A K k f dom neut) = (term132 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_268 : K => @lem6404123 A K GEN_PVAR_268 k f dom neut)). Qed.
Lemma lem6404125 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6404126 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term243 A K k f dom neut) = (term113 A K k f dom neut).
Proof. exact (MK_COMB (@lem6404125 K) (@lem6404124 A K k f dom neut)). Qed.
Lemma lem6404127 {K : Type'} (x : K) : (@IN K x) = (@IN K x).
Proof. exact (eq_refl (@IN K x)). Qed.
Lemma lem6404128 {A K : Type'} (x : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term235 A K x k f dom neut) = (term134 A K x k f dom neut).
Proof. exact (MK_COMB (@lem6404127 K x) (@lem6404126 A K k f dom neut)). Qed.
Lemma lem6404129 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6404130 {A K : Type'} (x : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term244 A K x k f dom neut) = (term245 A K x k f dom neut).
Proof. exact (MK_COMB (@lem6404129) (@lem6404128 A K x k f dom neut)). Qed.
Lemma lem6404131 {A K : Type'} (k : K -> Prop) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : (term236 A K k f dom neut x) = (term122 A K k f x dom neut).
Proof. exact (eq_refl (term236 A K k f dom neut x)). Qed.
Lemma lem6404132 {A K : Type'} (k : K -> Prop) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : ((term235 A K x k f dom neut) = (term236 A K k f dom neut x)) = ((term134 A K x k f dom neut) = (term122 A K k f x dom neut)).
Proof. exact (MK_COMB (@lem6404130 A K x k f dom neut) (@lem6404131 A K k f x dom neut)). Qed.
Lemma lem6404133 {A K : Type'} (k : K -> Prop) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : (term134 A K x k f dom neut) = (term122 A K k f x dom neut).
Proof. exact (EQ_MP (@lem6404132 A K k f x dom neut) (@lem6404115 A K k f dom neut x)). Qed.
Lemma lem6404137 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6404138 {K : Type'} (P : K -> Prop) (x : K) : (@IN K x P) = (P x).
Proof. exact (@lem6404137 K P x). Qed.
Lemma lem6404139 {K : Type'} (k : K -> Prop) (x : K) : (@IN K x k) = (k x).
Proof. exact (@lem6404138 K k x). Qed.
Lemma lem6404140 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404141 {K : Type'} (k : K -> Prop) (x : K) : (term41 K x k) = (term42 K k x).
Proof. exact (MK_COMB (@lem6404140) (@lem6404139 K k x)). Qed.
Lemma lem6404143 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (EQ_MP (@lem3211702 A s x t) (@lem3211701 A s t x)). Qed.
Lemma lem6404144 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (@lem6404143 A s x t). Qed.
Lemma lem6404145 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term120 A K f x dom neut) = (term365 A K dom f x neut).
Proof. exact (@lem6404144 A dom (f x) (@INSERT A neut (@EMPTY A))). Qed.
Lemma lem6404149 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6404150 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (@lem6404149 A P x). Qed.
Lemma lem6404151 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term366 A K f x dom) = (term367 A K dom f x).
Proof. exact (@lem6404150 A dom (f x)). Qed.
Lemma lem6404152 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404153 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term368 A K f x dom) = (term369 A K dom f x).
Proof. exact (MK_COMB (@lem6404152) (@lem6404151 A K dom f x)). Qed.
Lemma lem6404155 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (EQ_MP (@lem3211693 A y x s) (@lem3211692 A y x s)). Qed.
Lemma lem6404156 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (@lem6404155 A y x s). Qed.
Lemma lem6404157 {A K : Type'} (neut : A) (f : K -> A) (x : K) : (term372 A K f x neut) = (term373 A K neut f x).
Proof. exact (@lem6404156 A neut (f x) (@EMPTY A)). Qed.
Lemma lem6404163 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem3211730 A x (@lem3211729 A x)). Qed.
Lemma lem6404164 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem6404163 A x). Qed.
Lemma lem6404165 {A K : Type'} (f : K -> A) (x : K) : (term374 A K f x) = False.
Proof. exact (@lem6404164 A (f x)). Qed.
Lemma lem6404166 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term375 A K f x neut) = (term375 A K f x neut).
Proof. exact (eq_refl (term375 A K f x neut)). Qed.
Lemma lem6404167 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term373 A K neut f x) = (term376 A K f x neut).
Proof. exact (MK_COMB (@lem6404166 A K f x neut) (@lem6404165 A K f x)). Qed.
Lemma lem6404169 (t : Prop) : (t \/ False) = t.
Proof. exact (proj1 (@lem1834 t)). Qed.
Lemma lem6404170 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term376 A K f x neut) = ((f x) = neut).
Proof. exact (@lem6404169 ((f x) = neut)). Qed.
Lemma lem6404173 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term373 A K neut f x) = ((f x) = neut).
Proof. exact (TRANS (@lem6404167 A K f x neut) (@lem6404170 A K f x neut)). Qed.
Lemma lem6404174 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term372 A K f x neut) = ((f x) = neut).
Proof. exact (TRANS (@lem6404157 A K neut f x) (@lem6404173 A K f x neut)). Qed.
Lemma lem6404175 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6404176 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term377 A K f x neut) = (term378 A K f x neut).
Proof. exact (MK_COMB (@lem6404175) (@lem6404174 A K f x neut)). Qed.
Lemma lem6404177 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term365 A K dom f x neut) = (term379 A K dom f x neut).
Proof. exact (MK_COMB (@lem6404153 A K dom f x) (@lem6404176 A K f x neut)). Qed.
Lemma lem6404180 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term120 A K f x dom neut) = (term379 A K dom f x neut).
Proof. exact (TRANS (@lem6404145 A K dom f x neut) (@lem6404177 A K dom f x neut)). Qed.
Lemma lem6404181 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term122 A K k f x dom neut) = (term381 A K k dom f x neut).
Proof. exact (MK_COMB (@lem6404141 K k x) (@lem6404180 A K dom f x neut)). Qed.
Lemma lem6404184 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term134 A K x k f dom neut) = (term381 A K k dom f x neut).
Proof. exact (TRANS (@lem6404133 A K k f x dom neut) (@lem6404181 A K k dom f x neut)). Qed.
Lemma lem6404185 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404186 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term136 A K x k f dom neut) = (term433 A K k dom f x neut).
Proof. exact (MK_COMB (@lem6404185) (@lem6404184 A K k dom f x neut)). Qed.
Lemma lem6404189 {K : Type'} (x : K) (i : K) : (term434 K x i) = (term434 K x i).
Proof. exact (eq_refl (term434 K x i)). Qed.
Lemma lem6404190 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) : (term432 A K k f dom neut x i) = (term435 A K k dom f neut x i).
Proof. exact (MK_COMB (@lem6404186 A K k dom f x neut) (@lem6404189 K x i)). Qed.
Lemma lem6404193 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) : (term431 A K x k f dom neut i) = (term435 A K k dom f neut x i).
Proof. exact (TRANS (@lem6404109 A K k f dom neut x i) (@lem6404190 A K k dom f neut x i)). Qed.
Lemma lem6404194 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404195 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) : (term436 A K x k f dom neut i) = (term437 A K k dom f neut x i).
Proof. exact (MK_COMB (@lem6404194) (@lem6404193 A K k dom f neut x i)). Qed.
Lemma lem6404197 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (EQ_MP (@lem3211702 A s x t) (@lem3211701 A s t x)). Qed.
Lemma lem6404198 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (@lem6404197 A s x t). Qed.
Lemma lem6404199 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term120 A K f x dom neut) = (term365 A K dom f x neut).
Proof. exact (@lem6404198 A dom (f x) (@INSERT A neut (@EMPTY A))). Qed.
Lemma lem6404203 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6404204 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (@lem6404203 A P x). Qed.
Lemma lem6404205 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term366 A K f x dom) = (term367 A K dom f x).
Proof. exact (@lem6404204 A dom (f x)). Qed.
Lemma lem6404206 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404207 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term368 A K f x dom) = (term369 A K dom f x).
Proof. exact (MK_COMB (@lem6404206) (@lem6404205 A K dom f x)). Qed.
Lemma lem6404209 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (EQ_MP (@lem3211693 A y x s) (@lem3211692 A y x s)). Qed.
Lemma lem6404210 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (@lem6404209 A y x s). Qed.
Lemma lem6404211 {A K : Type'} (neut : A) (f : K -> A) (x : K) : (term372 A K f x neut) = (term373 A K neut f x).
Proof. exact (@lem6404210 A neut (f x) (@EMPTY A)). Qed.
Lemma lem6404217 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem3211730 A x (@lem3211729 A x)). Qed.
Lemma lem6404218 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem6404217 A x). Qed.
Lemma lem6404219 {A K : Type'} (f : K -> A) (x : K) : (term374 A K f x) = False.
Proof. exact (@lem6404218 A (f x)). Qed.
Lemma lem6404220 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term375 A K f x neut) = (term375 A K f x neut).
Proof. exact (eq_refl (term375 A K f x neut)). Qed.
Lemma lem6404221 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term373 A K neut f x) = (term376 A K f x neut).
Proof. exact (MK_COMB (@lem6404220 A K f x neut) (@lem6404219 A K f x)). Qed.
Lemma lem6404223 (t : Prop) : (t \/ False) = t.
Proof. exact (proj1 (@lem1834 t)). Qed.
Lemma lem6404224 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term376 A K f x neut) = ((f x) = neut).
Proof. exact (@lem6404223 ((f x) = neut)). Qed.
Lemma lem6404227 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term373 A K neut f x) = ((f x) = neut).
Proof. exact (TRANS (@lem6404221 A K f x neut) (@lem6404224 A K f x neut)). Qed.
Lemma lem6404228 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term372 A K f x neut) = ((f x) = neut).
Proof. exact (TRANS (@lem6404211 A K neut f x) (@lem6404227 A K f x neut)). Qed.
Lemma lem6404229 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6404230 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term377 A K f x neut) = (term378 A K f x neut).
Proof. exact (MK_COMB (@lem6404229) (@lem6404228 A K f x neut)). Qed.
Lemma lem6404231 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term365 A K dom f x neut) = (term379 A K dom f x neut).
Proof. exact (MK_COMB (@lem6404207 A K dom f x) (@lem6404230 A K f x neut)). Qed.
Lemma lem6404234 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term120 A K f x dom neut) = (term379 A K dom f x neut).
Proof. exact (TRANS (@lem6404199 A K dom f x neut) (@lem6404231 A K dom f x neut)). Qed.
Lemma lem6404235 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term414 A K k i f x dom neut) = (term438 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6404195 A K k dom f neut x i) (@lem6404234 A K dom f x neut)). Qed.
Lemma lem6404238 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term426 A K x k i f dom neut) = (term438 A K k i dom f x neut).
Proof. exact (TRANS (@lem6404103 A K k i f x dom neut) (@lem6404235 A K k i dom f x neut)). Qed.
Lemma lem6404239 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6404240 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term428 A K x k i f dom neut) = (term439 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6404239) (@lem6404238 A K k i dom f x neut)). Qed.
Lemma lem6404242 {_83095 : Type'} (p : _83095 -> Prop) (x : _83095) : (term21 _83095 x p) = (p x).
Proof. exact (EQ_MP (@lem3211641 _83095 p x) (@lem3211640 _83095 p x)). Qed.
Lemma lem6404243 {K : Type'} (p : K -> Prop) (x : K) : (term21 K x p) = (p x).
Proof. exact (@lem6404242 K p x). Qed.
Lemma lem6404244 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) (x : K) : (term440 A K x k i f dom neut) = (term441 A K k i f dom neut x).
Proof. exact (@lem6404243 K (term442 A K k i f dom neut) x). Qed.
Lemma lem6404245 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term441 A K k i f dom neut j) = (term443 A K k i f j dom neut).
Proof. exact (eq_refl (term441 A K k i f dom neut j)). Qed.
Lemma lem6404246 {K : Type'} (GEN_PVAR_265 : K) : (@SETSPEC K GEN_PVAR_265) = (@SETSPEC K GEN_PVAR_265).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_265)). Qed.
Lemma lem6404247 {A K : Type'} (GEN_PVAR_265 : K) (k : K -> Prop) (i : K) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term444 A K GEN_PVAR_265 k i f dom neut j) = (term445 A K GEN_PVAR_265 k i f j dom neut).
Proof. exact (MK_COMB (@lem6404246 K GEN_PVAR_265) (@lem6404245 A K k i f j dom neut)). Qed.
Lemma lem6404248 {K : Type'} (j : K) : j = j.
Proof. exact (eq_refl j). Qed.
Lemma lem6404249 {A K : Type'} (GEN_PVAR_265 : K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) (j : K) : (term446 A K GEN_PVAR_265 k i f dom neut j) = (term447 A K GEN_PVAR_265 k i f dom neut j).
Proof. exact (MK_COMB (@lem6404247 A K GEN_PVAR_265 k i f j dom neut) (@lem6404248 K j)). Qed.
Lemma lem6404250 {A K : Type'} (GEN_PVAR_265 : K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term448 A K GEN_PVAR_265 k i f dom neut) = (term449 A K GEN_PVAR_265 k i f dom neut).
Proof. exact (fun_ext (fun j : K => @lem6404249 A K GEN_PVAR_265 k i f dom neut j)). Qed.
Lemma lem6404251 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6404252 {A K : Type'} (GEN_PVAR_265 : K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term450 A K GEN_PVAR_265 k i f dom neut) = (term451 A K GEN_PVAR_265 k i f dom neut).
Proof. exact (MK_COMB (@lem6404251 K) (@lem6404250 A K GEN_PVAR_265 k i f dom neut)). Qed.
Lemma lem6404253 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term452 A K k i f dom neut) = (term453 A K k i f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_265 : K => @lem6404252 A K GEN_PVAR_265 k i f dom neut)). Qed.
Lemma lem6404254 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6404255 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term454 A K k i f dom neut) = (term354 A K k i f dom neut).
Proof. exact (MK_COMB (@lem6404254 K) (@lem6404253 A K k i f dom neut)). Qed.
Lemma lem6404256 {K : Type'} (x : K) : (@IN K x) = (@IN K x).
Proof. exact (eq_refl (@IN K x)). Qed.
Lemma lem6404257 {A K : Type'} (x : K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term440 A K x k i f dom neut) = (term455 A K x k i f dom neut).
Proof. exact (MK_COMB (@lem6404256 K x) (@lem6404255 A K k i f dom neut)). Qed.
Lemma lem6404258 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6404259 {A K : Type'} (x : K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term456 A K x k i f dom neut) = (term457 A K x k i f dom neut).
Proof. exact (MK_COMB (@lem6404258) (@lem6404257 A K x k i f dom neut)). Qed.
Lemma lem6404260 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : (term441 A K k i f dom neut x) = (term443 A K k i f x dom neut).
Proof. exact (eq_refl (term441 A K k i f dom neut x)). Qed.
Lemma lem6404261 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : ((term440 A K x k i f dom neut) = (term441 A K k i f dom neut x)) = ((term455 A K x k i f dom neut) = (term443 A K k i f x dom neut)).
Proof. exact (MK_COMB (@lem6404259 A K x k i f dom neut) (@lem6404260 A K k i f x dom neut)). Qed.
Lemma lem6404262 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : (term455 A K x k i f dom neut) = (term443 A K k i f x dom neut).
Proof. exact (EQ_MP (@lem6404261 A K k i f x dom neut) (@lem6404244 A K k i f dom neut x)). Qed.
Lemma lem6404266 {A : Type'} (s : A -> Prop) (x : A) (y : A) : (term429 A x s y) = (term430 A s x y).
Proof. exact (EQ_MP (@lem3211684 A s x y) (@lem3211683 A s x y)). Qed.
Lemma lem6404267 {K : Type'} (s : K -> Prop) (x : K) (y : K) : (term429 K x s y) = (term430 K s x y).
Proof. exact (@lem6404266 K s x y). Qed.
Lemma lem6404268 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term429 K x k i) = (term430 K k x i).
Proof. exact (@lem6404267 K k x i). Qed.
Lemma lem6404272 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6404273 {K : Type'} (P : K -> Prop) (x : K) : (@IN K x P) = (P x).
Proof. exact (@lem6404272 K P x). Qed.
Lemma lem6404274 {K : Type'} (k : K -> Prop) (x : K) : (@IN K x k) = (k x).
Proof. exact (@lem6404273 K k x). Qed.
Lemma lem6404275 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404276 {K : Type'} (k : K -> Prop) (x : K) : (term41 K x k) = (term42 K k x).
Proof. exact (MK_COMB (@lem6404275) (@lem6404274 K k x)). Qed.
Lemma lem6404279 {K : Type'} (x : K) (i : K) : (term434 K x i) = (term434 K x i).
Proof. exact (eq_refl (term434 K x i)). Qed.
Lemma lem6404280 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term430 K k x i) = (term458 K k x i).
Proof. exact (MK_COMB (@lem6404276 K k x) (@lem6404279 K x i)). Qed.
Lemma lem6404283 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term429 K x k i) = (term458 K k x i).
Proof. exact (TRANS (@lem6404268 K k x i) (@lem6404280 K k x i)). Qed.
Lemma lem6404284 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404285 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term459 K x k i) = (term460 K k x i).
Proof. exact (MK_COMB (@lem6404284) (@lem6404283 K k x i)). Qed.
Lemma lem6404287 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (EQ_MP (@lem3211702 A s x t) (@lem3211701 A s t x)). Qed.
Lemma lem6404288 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (@lem6404287 A s x t). Qed.
Lemma lem6404289 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term120 A K f x dom neut) = (term365 A K dom f x neut).
Proof. exact (@lem6404288 A dom (f x) (@INSERT A neut (@EMPTY A))). Qed.
Lemma lem6404293 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6404294 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (@lem6404293 A P x). Qed.
Lemma lem6404295 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term366 A K f x dom) = (term367 A K dom f x).
Proof. exact (@lem6404294 A dom (f x)). Qed.
Lemma lem6404296 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404297 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term368 A K f x dom) = (term369 A K dom f x).
Proof. exact (MK_COMB (@lem6404296) (@lem6404295 A K dom f x)). Qed.
Lemma lem6404299 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (EQ_MP (@lem3211693 A y x s) (@lem3211692 A y x s)). Qed.
Lemma lem6404300 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (@lem6404299 A y x s). Qed.
Lemma lem6404301 {A K : Type'} (neut : A) (f : K -> A) (x : K) : (term372 A K f x neut) = (term373 A K neut f x).
Proof. exact (@lem6404300 A neut (f x) (@EMPTY A)). Qed.
Lemma lem6404307 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem3211730 A x (@lem3211729 A x)). Qed.
Lemma lem6404308 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem6404307 A x). Qed.
Lemma lem6404309 {A K : Type'} (f : K -> A) (x : K) : (term374 A K f x) = False.
Proof. exact (@lem6404308 A (f x)). Qed.
Lemma lem6404310 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term375 A K f x neut) = (term375 A K f x neut).
Proof. exact (eq_refl (term375 A K f x neut)). Qed.
Lemma lem6404311 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term373 A K neut f x) = (term376 A K f x neut).
Proof. exact (MK_COMB (@lem6404310 A K f x neut) (@lem6404309 A K f x)). Qed.
Lemma lem6404313 (t : Prop) : (t \/ False) = t.
Proof. exact (proj1 (@lem1834 t)). Qed.
Lemma lem6404314 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term376 A K f x neut) = ((f x) = neut).
Proof. exact (@lem6404313 ((f x) = neut)). Qed.
Lemma lem6404317 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term373 A K neut f x) = ((f x) = neut).
Proof. exact (TRANS (@lem6404311 A K f x neut) (@lem6404314 A K f x neut)). Qed.
Lemma lem6404318 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term372 A K f x neut) = ((f x) = neut).
Proof. exact (TRANS (@lem6404301 A K neut f x) (@lem6404317 A K f x neut)). Qed.
Lemma lem6404319 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6404320 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term377 A K f x neut) = (term378 A K f x neut).
Proof. exact (MK_COMB (@lem6404319) (@lem6404318 A K f x neut)). Qed.
Lemma lem6404321 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term365 A K dom f x neut) = (term379 A K dom f x neut).
Proof. exact (MK_COMB (@lem6404297 A K dom f x) (@lem6404320 A K f x neut)). Qed.
Lemma lem6404324 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term120 A K f x dom neut) = (term379 A K dom f x neut).
Proof. exact (TRANS (@lem6404289 A K dom f x neut) (@lem6404321 A K dom f x neut)). Qed.
Lemma lem6404325 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term443 A K k i f x dom neut) = (term461 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6404285 K k x i) (@lem6404324 A K dom f x neut)). Qed.
Lemma lem6404328 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term455 A K x k i f dom neut) = (term461 A K k i dom f x neut).
Proof. exact (TRANS (@lem6404262 A K k i f x dom neut) (@lem6404325 A K k i dom f x neut)). Qed.
Lemma lem6404329 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : ((term426 A K x k i f dom neut) = (term455 A K x k i f dom neut)) = ((term438 A K k i dom f x neut) = (term461 A K k i dom f x neut)).
Proof. exact (MK_COMB (@lem6404240 A K k i dom f x neut) (@lem6404328 A K k i dom f x neut)). Qed.
Lemma lem6404332 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term462 A K k i f dom neut) = (term463 A K k i dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6404329 A K k i dom f x neut)). Qed.
Lemma lem6404333 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6404334 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term355 A K k i f dom neut) = (term464 A K k i dom f neut).
Proof. exact (MK_COMB (@lem6404333 K) (@lem6404332 A K k i dom f neut)). Qed.
Lemma lem6404339 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term356 A K ltle k i f dom neut) = (term465 A K ltle k i dom f neut).
Proof. exact (MK_COMB (@lem6404075 A K ltle i k dom f neut) (@lem6404334 A K k i dom f neut)). Qed.
Lemma lem6404342 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term465 A K ltle k i dom f neut) = (term356 A K ltle k i f dom neut).
Proof. exact (SYM (@lem6404339 A K ltle k i dom f neut)). Qed.
Lemma lem6404352 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6404353 {K : Type'} (P : K -> Prop) (x : K) : (@IN K x P) = (P x).
Proof. exact (@lem6404352 K P x). Qed.
Lemma lem6404354 {K : Type'} (k : K -> Prop) (i : K) : (@IN K i k) = (k i).
Proof. exact (@lem6404353 K k i). Qed.
Lemma lem6404355 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404356 {K : Type'} (k : K -> Prop) (i : K) : (term41 K i k) = (term42 K k i).
Proof. exact (MK_COMB (@lem6404355) (@lem6404354 K k i)). Qed.
Lemma lem6404358 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (EQ_MP (@lem3211702 A s x t) (@lem3211701 A s t x)). Qed.
Lemma lem6404359 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (@lem6404358 A s x t). Qed.
Lemma lem6404360 {A K : Type'} (dom : A -> Prop) (f : K -> A) (i : K) (neut : A) : (term120 A K f i dom neut) = (term365 A K dom f i neut).
Proof. exact (@lem6404359 A dom (f i) (@INSERT A neut (@EMPTY A))). Qed.
Lemma lem6404364 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6404365 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (@lem6404364 A P x). Qed.
Lemma lem6404366 {A K : Type'} (dom : A -> Prop) (f : K -> A) (i : K) : (term366 A K f i dom) = (term367 A K dom f i).
Proof. exact (@lem6404365 A dom (f i)). Qed.
Lemma lem6404367 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404368 {A K : Type'} (dom : A -> Prop) (f : K -> A) (i : K) : (term368 A K f i dom) = (term369 A K dom f i).
Proof. exact (MK_COMB (@lem6404367) (@lem6404366 A K dom f i)). Qed.
Lemma lem6404370 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (EQ_MP (@lem3211693 A y x s) (@lem3211692 A y x s)). Qed.
Lemma lem6404371 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (@lem6404370 A y x s). Qed.
Lemma lem6404372 {A K : Type'} (neut : A) (f : K -> A) (i : K) : (term372 A K f i neut) = (term373 A K neut f i).
Proof. exact (@lem6404371 A neut (f i) (@EMPTY A)). Qed.
Lemma lem6404378 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem3211730 A x (@lem3211729 A x)). Qed.
Lemma lem6404379 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem6404378 A x). Qed.
Lemma lem6404380 {A K : Type'} (f : K -> A) (i : K) : (term374 A K f i) = False.
Proof. exact (@lem6404379 A (f i)). Qed.
Lemma lem6404381 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term375 A K f i neut) = (term375 A K f i neut).
Proof. exact (eq_refl (term375 A K f i neut)). Qed.
Lemma lem6404382 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term373 A K neut f i) = (term376 A K f i neut).
Proof. exact (MK_COMB (@lem6404381 A K f i neut) (@lem6404380 A K f i)). Qed.
Lemma lem6404384 (t : Prop) : (t \/ False) = t.
Proof. exact (proj1 (@lem1834 t)). Qed.
Lemma lem6404385 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term376 A K f i neut) = ((f i) = neut).
Proof. exact (@lem6404384 ((f i) = neut)). Qed.
Lemma lem6404388 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term373 A K neut f i) = ((f i) = neut).
Proof. exact (TRANS (@lem6404382 A K f i neut) (@lem6404385 A K f i neut)). Qed.
Lemma lem6404389 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term372 A K f i neut) = ((f i) = neut).
Proof. exact (TRANS (@lem6404372 A K neut f i) (@lem6404388 A K f i neut)). Qed.
Lemma lem6404390 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6404391 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term377 A K f i neut) = (term378 A K f i neut).
Proof. exact (MK_COMB (@lem6404390) (@lem6404389 A K f i neut)). Qed.
Lemma lem6404392 {A K : Type'} (dom : A -> Prop) (f : K -> A) (i : K) (neut : A) : (term365 A K dom f i neut) = (term379 A K dom f i neut).
Proof. exact (MK_COMB (@lem6404368 A K dom f i) (@lem6404391 A K f i neut)). Qed.
Lemma lem6404395 {A K : Type'} (dom : A -> Prop) (f : K -> A) (i : K) (neut : A) : (term120 A K f i dom neut) = (term379 A K dom f i neut).
Proof. exact (TRANS (@lem6404360 A K dom f i neut) (@lem6404392 A K dom f i neut)). Qed.
Lemma lem6404396 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (i : K) (neut : A) : (term122 A K k f i dom neut) = (term381 A K k dom f i neut).
Proof. exact (MK_COMB (@lem6404356 K k i) (@lem6404395 A K dom f i neut)). Qed.
Lemma lem6404399 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term237 A K k f dom neut) = (term466 A K k dom f neut).
Proof. exact (fun_ext (fun i : K => @lem6404396 A K k dom f i neut)). Qed.
Lemma lem6404400 {K : Type'} : (@ε K) = (@ε K).
Proof. exact (eq_refl (@ε K)). Qed.
Lemma lem6404401 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term225 A K k f dom neut) = (term467 A K k dom f neut).
Proof. exact (MK_COMB (@lem6404400 K) (@lem6404399 A K k dom f neut)). Qed.
Lemma lem6404402 {K : Type'} : (@eq K) = (@eq K).
Proof. exact (eq_refl (@eq K)). Qed.
Lemma lem6404403 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term468 A K k f dom neut) = (term469 A K k dom f neut).
Proof. exact (MK_COMB (@lem6404402 K) (@lem6404401 A K k dom f neut)). Qed.
Lemma lem6404404 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6404405 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : ((term225 A K k f dom neut) = i) = ((term467 A K k dom f neut) = i).
Proof. exact (MK_COMB (@lem6404403 A K k dom f neut) (@lem6404404 K i)). Qed.
Lemma lem6404408 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404409 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term357 A K k f dom neut i) = (term470 A K k dom f neut i).
Proof. exact (MK_COMB (@lem6404408) (@lem6404405 A K k dom f neut i)). Qed.
Lemma lem6404419 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6404420 {K : Type'} (P : K -> Prop) (x : K) : (@IN K x P) = (P x).
Proof. exact (@lem6404419 K P x). Qed.
Lemma lem6404421 {K : Type'} (k : K -> Prop) (i : K) : (@IN K i k) = (k i).
Proof. exact (@lem6404420 K k i). Qed.
Lemma lem6404422 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404423 {K : Type'} (k : K -> Prop) (i : K) : (term41 K i k) = (term42 K k i).
Proof. exact (MK_COMB (@lem6404422) (@lem6404421 K k i)). Qed.
Lemma lem6404425 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (EQ_MP (@lem3211702 A s x t) (@lem3211701 A s t x)). Qed.
Lemma lem6404426 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (@lem6404425 A s x t). Qed.
Lemma lem6404427 {A K : Type'} (dom : A -> Prop) (f : K -> A) (i : K) (neut : A) : (term120 A K f i dom neut) = (term365 A K dom f i neut).
Proof. exact (@lem6404426 A dom (f i) (@INSERT A neut (@EMPTY A))). Qed.
Lemma lem6404431 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6404432 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (@lem6404431 A P x). Qed.
Lemma lem6404433 {A K : Type'} (dom : A -> Prop) (f : K -> A) (i : K) : (term366 A K f i dom) = (term367 A K dom f i).
Proof. exact (@lem6404432 A dom (f i)). Qed.
Lemma lem6404434 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404435 {A K : Type'} (dom : A -> Prop) (f : K -> A) (i : K) : (term368 A K f i dom) = (term369 A K dom f i).
Proof. exact (MK_COMB (@lem6404434) (@lem6404433 A K dom f i)). Qed.
Lemma lem6404437 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (EQ_MP (@lem3211693 A y x s) (@lem3211692 A y x s)). Qed.
Lemma lem6404438 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (@lem6404437 A y x s). Qed.
Lemma lem6404439 {A K : Type'} (neut : A) (f : K -> A) (i : K) : (term372 A K f i neut) = (term373 A K neut f i).
Proof. exact (@lem6404438 A neut (f i) (@EMPTY A)). Qed.
Lemma lem6404445 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem3211730 A x (@lem3211729 A x)). Qed.
Lemma lem6404446 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem6404445 A x). Qed.
Lemma lem6404447 {A K : Type'} (f : K -> A) (i : K) : (term374 A K f i) = False.
Proof. exact (@lem6404446 A (f i)). Qed.
Lemma lem6404448 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term375 A K f i neut) = (term375 A K f i neut).
Proof. exact (eq_refl (term375 A K f i neut)). Qed.
Lemma lem6404449 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term373 A K neut f i) = (term376 A K f i neut).
Proof. exact (MK_COMB (@lem6404448 A K f i neut) (@lem6404447 A K f i)). Qed.
Lemma lem6404451 (t : Prop) : (t \/ False) = t.
Proof. exact (proj1 (@lem1834 t)). Qed.
Lemma lem6404452 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term376 A K f i neut) = ((f i) = neut).
Proof. exact (@lem6404451 ((f i) = neut)). Qed.
Lemma lem6404455 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term373 A K neut f i) = ((f i) = neut).
Proof. exact (TRANS (@lem6404449 A K f i neut) (@lem6404452 A K f i neut)). Qed.
Lemma lem6404456 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term372 A K f i neut) = ((f i) = neut).
Proof. exact (TRANS (@lem6404439 A K neut f i) (@lem6404455 A K f i neut)). Qed.
Lemma lem6404457 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6404458 {A K : Type'} (f : K -> A) (i : K) (neut : A) : (term377 A K f i neut) = (term378 A K f i neut).
Proof. exact (MK_COMB (@lem6404457) (@lem6404456 A K f i neut)). Qed.
Lemma lem6404459 {A K : Type'} (dom : A -> Prop) (f : K -> A) (i : K) (neut : A) : (term365 A K dom f i neut) = (term379 A K dom f i neut).
Proof. exact (MK_COMB (@lem6404435 A K dom f i) (@lem6404458 A K f i neut)). Qed.
Lemma lem6404462 {A K : Type'} (dom : A -> Prop) (f : K -> A) (i : K) (neut : A) : (term120 A K f i dom neut) = (term379 A K dom f i neut).
Proof. exact (TRANS (@lem6404427 A K dom f i neut) (@lem6404459 A K dom f i neut)). Qed.
Lemma lem6404463 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (i : K) (neut : A) : (term122 A K k f i dom neut) = (term381 A K k dom f i neut).
Proof. exact (MK_COMB (@lem6404423 K k i) (@lem6404462 A K dom f i neut)). Qed.
Lemma lem6404466 {K : Type'} (GEN_PVAR_263 : K) : (@SETSPEC K GEN_PVAR_263) = (@SETSPEC K GEN_PVAR_263).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_263)). Qed.
Lemma lem6404467 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (i : K) (neut : A) : (term124 A K GEN_PVAR_263 k f i dom neut) = (term394 A K GEN_PVAR_263 k dom f i neut).
Proof. exact (MK_COMB (@lem6404466 K GEN_PVAR_263) (@lem6404463 A K k dom f i neut)). Qed.
Lemma lem6404468 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6404469 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term126 A K GEN_PVAR_263 k f dom neut i) = (term395 A K GEN_PVAR_263 k dom f neut i).
Proof. exact (MK_COMB (@lem6404467 A K GEN_PVAR_263 k dom f i neut) (@lem6404468 K i)). Qed.
Lemma lem6404470 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term128 A K GEN_PVAR_263 k f dom neut) = (term396 A K GEN_PVAR_263 k dom f neut).
Proof. exact (fun_ext (fun i : K => @lem6404469 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6404471 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6404472 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term130 A K GEN_PVAR_263 k f dom neut) = (term397 A K GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6404471 K) (@lem6404470 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6404477 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term132 A K k f dom neut) = (term398 A K k dom f neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6404472 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6404478 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6404479 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term113 A K k f dom neut) = (term399 A K k dom f neut).
Proof. exact (MK_COMB (@lem6404478 K) (@lem6404477 A K k dom f neut)). Qed.
Lemma lem6404480 {K : Type'} : (@FINITE K) = (@FINITE K).
Proof. exact (eq_refl (@FINITE K)). Qed.
Lemma lem6404481 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term246 A K k f dom neut) = (term400 A K k dom f neut).
Proof. exact (MK_COMB (@lem6404480 K) (@lem6404479 A K k dom f neut)). Qed.
Lemma lem6404482 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404483 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term247 A K k f dom neut) = (term401 A K k dom f neut).
Proof. exact (MK_COMB (@lem6404482) (@lem6404481 A K k dom f neut)). Qed.
Lemma lem6404491 {_83095 : Type'} (p : _83095 -> Prop) (x : _83095) : (term21 _83095 x p) = (p x).
Proof. exact (EQ_MP (@lem3211641 _83095 p x) (@lem3211640 _83095 p x)). Qed.
Lemma lem6404492 {K : Type'} (p : K -> Prop) (x : K) : (term21 K x p) = (p x).
Proof. exact (@lem6404491 K p x). Qed.
Lemma lem6404493 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (x : K) : (term235 A K x k f dom neut) = (term236 A K k f dom neut x).
Proof. exact (@lem6404492 K (term237 A K k f dom neut) x). Qed.
Lemma lem6404494 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term236 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (eq_refl (term236 A K k f dom neut i)). Qed.
Lemma lem6404495 {K : Type'} (GEN_PVAR_264 : K) : (@SETSPEC K GEN_PVAR_264) = (@SETSPEC K GEN_PVAR_264).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_264)). Qed.
Lemma lem6404496 {A K : Type'} (GEN_PVAR_264 : K) (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term238 A K GEN_PVAR_264 k f dom neut i) = (term124 A K GEN_PVAR_264 k f i dom neut).
Proof. exact (MK_COMB (@lem6404495 K GEN_PVAR_264) (@lem6404494 A K k f i dom neut)). Qed.
Lemma lem6404497 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6404498 {A K : Type'} (GEN_PVAR_264 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term239 A K GEN_PVAR_264 k f dom neut i) = (term126 A K GEN_PVAR_264 k f dom neut i).
Proof. exact (MK_COMB (@lem6404496 A K GEN_PVAR_264 k f i dom neut) (@lem6404497 K i)). Qed.
Lemma lem6404499 {A K : Type'} (GEN_PVAR_264 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term240 A K GEN_PVAR_264 k f dom neut) = (term128 A K GEN_PVAR_264 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6404498 A K GEN_PVAR_264 k f dom neut i)). Qed.
Lemma lem6404500 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6404501 {A K : Type'} (GEN_PVAR_264 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term241 A K GEN_PVAR_264 k f dom neut) = (term130 A K GEN_PVAR_264 k f dom neut).
Proof. exact (MK_COMB (@lem6404500 K) (@lem6404499 A K GEN_PVAR_264 k f dom neut)). Qed.
Lemma lem6404502 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term242 A K k f dom neut) = (term132 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_264 : K => @lem6404501 A K GEN_PVAR_264 k f dom neut)). Qed.
Lemma lem6404503 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6404504 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term243 A K k f dom neut) = (term113 A K k f dom neut).
Proof. exact (MK_COMB (@lem6404503 K) (@lem6404502 A K k f dom neut)). Qed.
Lemma lem6404505 {K : Type'} (x : K) : (@IN K x) = (@IN K x).
Proof. exact (eq_refl (@IN K x)). Qed.
Lemma lem6404506 {A K : Type'} (x : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term235 A K x k f dom neut) = (term134 A K x k f dom neut).
Proof. exact (MK_COMB (@lem6404505 K x) (@lem6404504 A K k f dom neut)). Qed.
Lemma lem6404507 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6404508 {A K : Type'} (x : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term244 A K x k f dom neut) = (term245 A K x k f dom neut).
Proof. exact (MK_COMB (@lem6404507) (@lem6404506 A K x k f dom neut)). Qed.
Lemma lem6404509 {A K : Type'} (k : K -> Prop) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : (term236 A K k f dom neut x) = (term122 A K k f x dom neut).
Proof. exact (eq_refl (term236 A K k f dom neut x)). Qed.
Lemma lem6404510 {A K : Type'} (k : K -> Prop) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : ((term235 A K x k f dom neut) = (term236 A K k f dom neut x)) = ((term134 A K x k f dom neut) = (term122 A K k f x dom neut)).
Proof. exact (MK_COMB (@lem6404508 A K x k f dom neut) (@lem6404509 A K k f x dom neut)). Qed.
Lemma lem6404511 {A K : Type'} (k : K -> Prop) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : (term134 A K x k f dom neut) = (term122 A K k f x dom neut).
Proof. exact (EQ_MP (@lem6404510 A K k f x dom neut) (@lem6404493 A K k f dom neut x)). Qed.
Lemma lem6404515 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6404516 {K : Type'} (P : K -> Prop) (x : K) : (@IN K x P) = (P x).
Proof. exact (@lem6404515 K P x). Qed.
Lemma lem6404517 {K : Type'} (k : K -> Prop) (x : K) : (@IN K x k) = (k x).
Proof. exact (@lem6404516 K k x). Qed.
Lemma lem6404518 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404519 {K : Type'} (k : K -> Prop) (x : K) : (term41 K x k) = (term42 K k x).
Proof. exact (MK_COMB (@lem6404518) (@lem6404517 K k x)). Qed.
Lemma lem6404521 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (EQ_MP (@lem3211702 A s x t) (@lem3211701 A s t x)). Qed.
Lemma lem6404522 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (@lem6404521 A s x t). Qed.
Lemma lem6404523 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term120 A K f x dom neut) = (term365 A K dom f x neut).
Proof. exact (@lem6404522 A dom (f x) (@INSERT A neut (@EMPTY A))). Qed.
Lemma lem6404527 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6404528 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (@lem6404527 A P x). Qed.
Lemma lem6404529 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term366 A K f x dom) = (term367 A K dom f x).
Proof. exact (@lem6404528 A dom (f x)). Qed.
Lemma lem6404530 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404531 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term368 A K f x dom) = (term369 A K dom f x).
Proof. exact (MK_COMB (@lem6404530) (@lem6404529 A K dom f x)). Qed.
Lemma lem6404533 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (EQ_MP (@lem3211693 A y x s) (@lem3211692 A y x s)). Qed.
Lemma lem6404534 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (@lem6404533 A y x s). Qed.
Lemma lem6404535 {A K : Type'} (neut : A) (f : K -> A) (x : K) : (term372 A K f x neut) = (term373 A K neut f x).
Proof. exact (@lem6404534 A neut (f x) (@EMPTY A)). Qed.
Lemma lem6404541 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem3211730 A x (@lem3211729 A x)). Qed.
Lemma lem6404542 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem6404541 A x). Qed.
Lemma lem6404543 {A K : Type'} (f : K -> A) (x : K) : (term374 A K f x) = False.
Proof. exact (@lem6404542 A (f x)). Qed.
Lemma lem6404544 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term375 A K f x neut) = (term375 A K f x neut).
Proof. exact (eq_refl (term375 A K f x neut)). Qed.
Lemma lem6404545 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term373 A K neut f x) = (term376 A K f x neut).
Proof. exact (MK_COMB (@lem6404544 A K f x neut) (@lem6404543 A K f x)). Qed.
Lemma lem6404547 (t : Prop) : (t \/ False) = t.
Proof. exact (proj1 (@lem1834 t)). Qed.
Lemma lem6404548 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term376 A K f x neut) = ((f x) = neut).
Proof. exact (@lem6404547 ((f x) = neut)). Qed.
Lemma lem6404551 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term373 A K neut f x) = ((f x) = neut).
Proof. exact (TRANS (@lem6404545 A K f x neut) (@lem6404548 A K f x neut)). Qed.
Lemma lem6404552 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term372 A K f x neut) = ((f x) = neut).
Proof. exact (TRANS (@lem6404535 A K neut f x) (@lem6404551 A K f x neut)). Qed.
Lemma lem6404553 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6404554 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term377 A K f x neut) = (term378 A K f x neut).
Proof. exact (MK_COMB (@lem6404553) (@lem6404552 A K f x neut)). Qed.
Lemma lem6404555 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term365 A K dom f x neut) = (term379 A K dom f x neut).
Proof. exact (MK_COMB (@lem6404531 A K dom f x) (@lem6404554 A K f x neut)). Qed.
Lemma lem6404558 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term120 A K f x dom neut) = (term379 A K dom f x neut).
Proof. exact (TRANS (@lem6404523 A K dom f x neut) (@lem6404555 A K dom f x neut)). Qed.
Lemma lem6404559 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term122 A K k f x dom neut) = (term381 A K k dom f x neut).
Proof. exact (MK_COMB (@lem6404519 K k x) (@lem6404558 A K dom f x neut)). Qed.
Lemma lem6404562 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term134 A K x k f dom neut) = (term381 A K k dom f x neut).
Proof. exact (TRANS (@lem6404511 A K k f x dom neut) (@lem6404559 A K k dom f x neut)). Qed.
Lemma lem6404563 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6404564 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term245 A K x k f dom neut) = (term402 A K k dom f x neut).
Proof. exact (MK_COMB (@lem6404563) (@lem6404562 A K k dom f x neut)). Qed.
Lemma lem6404566 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem3211730 A x (@lem3211729 A x)). Qed.
Lemma lem6404567 {K : Type'} (x : K) : (@IN K x (@EMPTY K)) = False.
Proof. exact (@lem6404566 K x). Qed.
Lemma lem6404568 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : ((term134 A K x k f dom neut) = (@IN K x (@EMPTY K))) = ((term381 A K k dom f x neut) = False).
Proof. exact (MK_COMB (@lem6404564 A K k dom f x neut) (@lem6404567 K x)). Qed.
Lemma lem6404570 (t : Prop) : (t = False) = (~ t).
Proof. exact (proj2 (@lem1857 t)). Qed.
Lemma lem6404571 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : ((term381 A K k dom f x neut) = False) = (term403 A K k dom f x neut).
Proof. exact (@lem6404570 (term381 A K k dom f x neut)). Qed.
Lemma lem6404578 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : ((term134 A K x k f dom neut) = (@IN K x (@EMPTY K))) = (term403 A K k dom f x neut).
Proof. exact (TRANS (@lem6404568 A K k dom f x neut) (@lem6404571 A K k dom f x neut)). Qed.
Lemma lem6404579 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term404 A K k f dom neut) = (term405 A K k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6404578 A K k dom f x neut)). Qed.
Lemma lem6404580 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6404581 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term345 A K k f dom neut) = (term406 A K k dom f neut).
Proof. exact (MK_COMB (@lem6404580 K) (@lem6404579 A K k dom f neut)). Qed.
Lemma lem6404586 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6404587 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term346 A K k f dom neut) = (term407 A K k dom f neut).
Proof. exact (MK_COMB (@lem6404586) (@lem6404581 A K k dom f neut)). Qed.
Lemma lem6404588 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term347 A K k f dom neut) = (term408 A K k dom f neut).
Proof. exact (MK_COMB (@lem6404483 A K k dom f neut) (@lem6404587 A K k dom f neut)). Qed.
Lemma lem6404591 {A K : Type'} (i : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term359 A K i k f dom neut) = (term471 A K i k dom f neut).
Proof. exact (MK_COMB (@lem6404409 A K k dom f neut i) (@lem6404588 A K k dom f neut)). Qed.
Lemma lem6404594 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6404595 {A K : Type'} (i : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term361 A K i k f dom neut) = (term472 A K i k dom f neut).
Proof. exact (MK_COMB (@lem6404594) (@lem6404591 A K i k dom f neut)). Qed.
Lemma lem6404603 {_83095 : Type'} (p : _83095 -> Prop) (x : _83095) : (term21 _83095 x p) = (p x).
Proof. exact (EQ_MP (@lem3211641 _83095 p x) (@lem3211640 _83095 p x)). Qed.
Lemma lem6404604 {K : Type'} (p : K -> Prop) (x : K) : (term21 K x p) = (p x).
Proof. exact (@lem6404603 K p x). Qed.
Lemma lem6404605 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) (x : K) : (term411 A K x k i f dom neut) = (term412 A K k i f dom neut x).
Proof. exact (@lem6404604 K (term413 A K k i f dom neut) x). Qed.
Lemma lem6404606 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term412 A K k i f dom neut j) = (term414 A K k i f j dom neut).
Proof. exact (eq_refl (term412 A K k i f dom neut j)). Qed.
Lemma lem6404607 {K : Type'} (GEN_PVAR_265 : K) : (@SETSPEC K GEN_PVAR_265) = (@SETSPEC K GEN_PVAR_265).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_265)). Qed.
Lemma lem6404608 {A K : Type'} (GEN_PVAR_265 : K) (k : K -> Prop) (i : K) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term415 A K GEN_PVAR_265 k i f dom neut j) = (term416 A K GEN_PVAR_265 k i f j dom neut).
Proof. exact (MK_COMB (@lem6404607 K GEN_PVAR_265) (@lem6404606 A K k i f j dom neut)). Qed.
Lemma lem6404609 {K : Type'} (j : K) : j = j.
Proof. exact (eq_refl j). Qed.
Lemma lem6404610 {A K : Type'} (GEN_PVAR_265 : K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) (j : K) : (term417 A K GEN_PVAR_265 k i f dom neut j) = (term418 A K GEN_PVAR_265 k i f dom neut j).
Proof. exact (MK_COMB (@lem6404608 A K GEN_PVAR_265 k i f j dom neut) (@lem6404609 K j)). Qed.
Lemma lem6404611 {A K : Type'} (GEN_PVAR_265 : K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term419 A K GEN_PVAR_265 k i f dom neut) = (term420 A K GEN_PVAR_265 k i f dom neut).
Proof. exact (fun_ext (fun j : K => @lem6404610 A K GEN_PVAR_265 k i f dom neut j)). Qed.
Lemma lem6404612 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6404613 {A K : Type'} (GEN_PVAR_265 : K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term421 A K GEN_PVAR_265 k i f dom neut) = (term422 A K GEN_PVAR_265 k i f dom neut).
Proof. exact (MK_COMB (@lem6404612 K) (@lem6404611 A K GEN_PVAR_265 k i f dom neut)). Qed.
Lemma lem6404614 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term423 A K k i f dom neut) = (term424 A K k i f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_265 : K => @lem6404613 A K GEN_PVAR_265 k i f dom neut)). Qed.
Lemma lem6404615 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6404616 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term425 A K k i f dom neut) = (term353 A K k i f dom neut).
Proof. exact (MK_COMB (@lem6404615 K) (@lem6404614 A K k i f dom neut)). Qed.
Lemma lem6404617 {K : Type'} (x : K) : (@IN K x) = (@IN K x).
Proof. exact (eq_refl (@IN K x)). Qed.
Lemma lem6404618 {A K : Type'} (x : K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term411 A K x k i f dom neut) = (term426 A K x k i f dom neut).
Proof. exact (MK_COMB (@lem6404617 K x) (@lem6404616 A K k i f dom neut)). Qed.
Lemma lem6404619 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6404620 {A K : Type'} (x : K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term427 A K x k i f dom neut) = (term428 A K x k i f dom neut).
Proof. exact (MK_COMB (@lem6404619) (@lem6404618 A K x k i f dom neut)). Qed.
Lemma lem6404621 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : (term412 A K k i f dom neut x) = (term414 A K k i f x dom neut).
Proof. exact (eq_refl (term412 A K k i f dom neut x)). Qed.
Lemma lem6404622 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : ((term411 A K x k i f dom neut) = (term412 A K k i f dom neut x)) = ((term426 A K x k i f dom neut) = (term414 A K k i f x dom neut)).
Proof. exact (MK_COMB (@lem6404620 A K x k i f dom neut) (@lem6404621 A K k i f x dom neut)). Qed.
Lemma lem6404623 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : (term426 A K x k i f dom neut) = (term414 A K k i f x dom neut).
Proof. exact (EQ_MP (@lem6404622 A K k i f x dom neut) (@lem6404605 A K k i f dom neut x)). Qed.
Lemma lem6404627 {A : Type'} (s : A -> Prop) (x : A) (y : A) : (term429 A x s y) = (term430 A s x y).
Proof. exact (EQ_MP (@lem3211684 A s x y) (@lem3211683 A s x y)). Qed.
Lemma lem6404628 {K : Type'} (s : K -> Prop) (x : K) (y : K) : (term429 K x s y) = (term430 K s x y).
Proof. exact (@lem6404627 K s x y). Qed.
Lemma lem6404629 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (x : K) (i : K) : (term431 A K x k f dom neut i) = (term432 A K k f dom neut x i).
Proof. exact (@lem6404628 K (term113 A K k f dom neut) x i). Qed.
Lemma lem6404633 {_83095 : Type'} (p : _83095 -> Prop) (x : _83095) : (term21 _83095 x p) = (p x).
Proof. exact (EQ_MP (@lem3211641 _83095 p x) (@lem3211640 _83095 p x)). Qed.
Lemma lem6404634 {K : Type'} (p : K -> Prop) (x : K) : (term21 K x p) = (p x).
Proof. exact (@lem6404633 K p x). Qed.
Lemma lem6404635 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (x : K) : (term235 A K x k f dom neut) = (term236 A K k f dom neut x).
Proof. exact (@lem6404634 K (term237 A K k f dom neut) x). Qed.
Lemma lem6404636 {A K : Type'} (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term236 A K k f dom neut i) = (term122 A K k f i dom neut).
Proof. exact (eq_refl (term236 A K k f dom neut i)). Qed.
Lemma lem6404637 {K : Type'} (GEN_PVAR_268 : K) : (@SETSPEC K GEN_PVAR_268) = (@SETSPEC K GEN_PVAR_268).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_268)). Qed.
Lemma lem6404638 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (i : K) (dom : A -> Prop) (neut : A) : (term238 A K GEN_PVAR_268 k f dom neut i) = (term124 A K GEN_PVAR_268 k f i dom neut).
Proof. exact (MK_COMB (@lem6404637 K GEN_PVAR_268) (@lem6404636 A K k f i dom neut)). Qed.
Lemma lem6404639 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6404640 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (i : K) : (term239 A K GEN_PVAR_268 k f dom neut i) = (term126 A K GEN_PVAR_268 k f dom neut i).
Proof. exact (MK_COMB (@lem6404638 A K GEN_PVAR_268 k f i dom neut) (@lem6404639 K i)). Qed.
Lemma lem6404641 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term240 A K GEN_PVAR_268 k f dom neut) = (term128 A K GEN_PVAR_268 k f dom neut).
Proof. exact (fun_ext (fun i : K => @lem6404640 A K GEN_PVAR_268 k f dom neut i)). Qed.
Lemma lem6404642 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6404643 {A K : Type'} (GEN_PVAR_268 : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term241 A K GEN_PVAR_268 k f dom neut) = (term130 A K GEN_PVAR_268 k f dom neut).
Proof. exact (MK_COMB (@lem6404642 K) (@lem6404641 A K GEN_PVAR_268 k f dom neut)). Qed.
Lemma lem6404644 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term242 A K k f dom neut) = (term132 A K k f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_268 : K => @lem6404643 A K GEN_PVAR_268 k f dom neut)). Qed.
Lemma lem6404645 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6404646 {A K : Type'} (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term243 A K k f dom neut) = (term113 A K k f dom neut).
Proof. exact (MK_COMB (@lem6404645 K) (@lem6404644 A K k f dom neut)). Qed.
Lemma lem6404647 {K : Type'} (x : K) : (@IN K x) = (@IN K x).
Proof. exact (eq_refl (@IN K x)). Qed.
Lemma lem6404648 {A K : Type'} (x : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term235 A K x k f dom neut) = (term134 A K x k f dom neut).
Proof. exact (MK_COMB (@lem6404647 K x) (@lem6404646 A K k f dom neut)). Qed.
Lemma lem6404649 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6404650 {A K : Type'} (x : K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term244 A K x k f dom neut) = (term245 A K x k f dom neut).
Proof. exact (MK_COMB (@lem6404649) (@lem6404648 A K x k f dom neut)). Qed.
Lemma lem6404651 {A K : Type'} (k : K -> Prop) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : (term236 A K k f dom neut x) = (term122 A K k f x dom neut).
Proof. exact (eq_refl (term236 A K k f dom neut x)). Qed.
Lemma lem6404652 {A K : Type'} (k : K -> Prop) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : ((term235 A K x k f dom neut) = (term236 A K k f dom neut x)) = ((term134 A K x k f dom neut) = (term122 A K k f x dom neut)).
Proof. exact (MK_COMB (@lem6404650 A K x k f dom neut) (@lem6404651 A K k f x dom neut)). Qed.
Lemma lem6404653 {A K : Type'} (k : K -> Prop) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : (term134 A K x k f dom neut) = (term122 A K k f x dom neut).
Proof. exact (EQ_MP (@lem6404652 A K k f x dom neut) (@lem6404635 A K k f dom neut x)). Qed.
Lemma lem6404657 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6404658 {K : Type'} (P : K -> Prop) (x : K) : (@IN K x P) = (P x).
Proof. exact (@lem6404657 K P x). Qed.
Lemma lem6404659 {K : Type'} (k : K -> Prop) (x : K) : (@IN K x k) = (k x).
Proof. exact (@lem6404658 K k x). Qed.
Lemma lem6404660 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404661 {K : Type'} (k : K -> Prop) (x : K) : (term41 K x k) = (term42 K k x).
Proof. exact (MK_COMB (@lem6404660) (@lem6404659 K k x)). Qed.
Lemma lem6404663 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (EQ_MP (@lem3211702 A s x t) (@lem3211701 A s t x)). Qed.
Lemma lem6404664 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (@lem6404663 A s x t). Qed.
Lemma lem6404665 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term120 A K f x dom neut) = (term365 A K dom f x neut).
Proof. exact (@lem6404664 A dom (f x) (@INSERT A neut (@EMPTY A))). Qed.
Lemma lem6404669 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6404670 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (@lem6404669 A P x). Qed.
Lemma lem6404671 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term366 A K f x dom) = (term367 A K dom f x).
Proof. exact (@lem6404670 A dom (f x)). Qed.
Lemma lem6404672 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404673 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term368 A K f x dom) = (term369 A K dom f x).
Proof. exact (MK_COMB (@lem6404672) (@lem6404671 A K dom f x)). Qed.
Lemma lem6404675 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (EQ_MP (@lem3211693 A y x s) (@lem3211692 A y x s)). Qed.
Lemma lem6404676 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (@lem6404675 A y x s). Qed.
Lemma lem6404677 {A K : Type'} (neut : A) (f : K -> A) (x : K) : (term372 A K f x neut) = (term373 A K neut f x).
Proof. exact (@lem6404676 A neut (f x) (@EMPTY A)). Qed.
Lemma lem6404683 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem3211730 A x (@lem3211729 A x)). Qed.
Lemma lem6404684 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem6404683 A x). Qed.
Lemma lem6404685 {A K : Type'} (f : K -> A) (x : K) : (term374 A K f x) = False.
Proof. exact (@lem6404684 A (f x)). Qed.
Lemma lem6404686 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term375 A K f x neut) = (term375 A K f x neut).
Proof. exact (eq_refl (term375 A K f x neut)). Qed.
Lemma lem6404687 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term373 A K neut f x) = (term376 A K f x neut).
Proof. exact (MK_COMB (@lem6404686 A K f x neut) (@lem6404685 A K f x)). Qed.
Lemma lem6404689 (t : Prop) : (t \/ False) = t.
Proof. exact (proj1 (@lem1834 t)). Qed.
Lemma lem6404690 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term376 A K f x neut) = ((f x) = neut).
Proof. exact (@lem6404689 ((f x) = neut)). Qed.
Lemma lem6404693 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term373 A K neut f x) = ((f x) = neut).
Proof. exact (TRANS (@lem6404687 A K f x neut) (@lem6404690 A K f x neut)). Qed.
Lemma lem6404694 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term372 A K f x neut) = ((f x) = neut).
Proof. exact (TRANS (@lem6404677 A K neut f x) (@lem6404693 A K f x neut)). Qed.
Lemma lem6404695 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6404696 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term377 A K f x neut) = (term378 A K f x neut).
Proof. exact (MK_COMB (@lem6404695) (@lem6404694 A K f x neut)). Qed.
Lemma lem6404697 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term365 A K dom f x neut) = (term379 A K dom f x neut).
Proof. exact (MK_COMB (@lem6404673 A K dom f x) (@lem6404696 A K f x neut)). Qed.
Lemma lem6404700 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term120 A K f x dom neut) = (term379 A K dom f x neut).
Proof. exact (TRANS (@lem6404665 A K dom f x neut) (@lem6404697 A K dom f x neut)). Qed.
Lemma lem6404701 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term122 A K k f x dom neut) = (term381 A K k dom f x neut).
Proof. exact (MK_COMB (@lem6404661 K k x) (@lem6404700 A K dom f x neut)). Qed.
Lemma lem6404704 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term134 A K x k f dom neut) = (term381 A K k dom f x neut).
Proof. exact (TRANS (@lem6404653 A K k f x dom neut) (@lem6404701 A K k dom f x neut)). Qed.
Lemma lem6404705 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404706 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term136 A K x k f dom neut) = (term433 A K k dom f x neut).
Proof. exact (MK_COMB (@lem6404705) (@lem6404704 A K k dom f x neut)). Qed.
Lemma lem6404709 {K : Type'} (x : K) (i : K) : (term434 K x i) = (term434 K x i).
Proof. exact (eq_refl (term434 K x i)). Qed.
Lemma lem6404710 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) : (term432 A K k f dom neut x i) = (term435 A K k dom f neut x i).
Proof. exact (MK_COMB (@lem6404706 A K k dom f x neut) (@lem6404709 K x i)). Qed.
Lemma lem6404713 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) : (term431 A K x k f dom neut i) = (term435 A K k dom f neut x i).
Proof. exact (TRANS (@lem6404629 A K k f dom neut x i) (@lem6404710 A K k dom f neut x i)). Qed.
Lemma lem6404714 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404715 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) : (term436 A K x k f dom neut i) = (term437 A K k dom f neut x i).
Proof. exact (MK_COMB (@lem6404714) (@lem6404713 A K k dom f neut x i)). Qed.
Lemma lem6404717 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (EQ_MP (@lem3211702 A s x t) (@lem3211701 A s t x)). Qed.
Lemma lem6404718 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (@lem6404717 A s x t). Qed.
Lemma lem6404719 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term120 A K f x dom neut) = (term365 A K dom f x neut).
Proof. exact (@lem6404718 A dom (f x) (@INSERT A neut (@EMPTY A))). Qed.
Lemma lem6404723 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6404724 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (@lem6404723 A P x). Qed.
Lemma lem6404725 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term366 A K f x dom) = (term367 A K dom f x).
Proof. exact (@lem6404724 A dom (f x)). Qed.
Lemma lem6404726 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404727 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term368 A K f x dom) = (term369 A K dom f x).
Proof. exact (MK_COMB (@lem6404726) (@lem6404725 A K dom f x)). Qed.
Lemma lem6404729 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (EQ_MP (@lem3211693 A y x s) (@lem3211692 A y x s)). Qed.
Lemma lem6404730 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (@lem6404729 A y x s). Qed.
Lemma lem6404731 {A K : Type'} (neut : A) (f : K -> A) (x : K) : (term372 A K f x neut) = (term373 A K neut f x).
Proof. exact (@lem6404730 A neut (f x) (@EMPTY A)). Qed.
Lemma lem6404737 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem3211730 A x (@lem3211729 A x)). Qed.
Lemma lem6404738 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem6404737 A x). Qed.
Lemma lem6404739 {A K : Type'} (f : K -> A) (x : K) : (term374 A K f x) = False.
Proof. exact (@lem6404738 A (f x)). Qed.
Lemma lem6404740 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term375 A K f x neut) = (term375 A K f x neut).
Proof. exact (eq_refl (term375 A K f x neut)). Qed.
Lemma lem6404741 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term373 A K neut f x) = (term376 A K f x neut).
Proof. exact (MK_COMB (@lem6404740 A K f x neut) (@lem6404739 A K f x)). Qed.
Lemma lem6404743 (t : Prop) : (t \/ False) = t.
Proof. exact (proj1 (@lem1834 t)). Qed.
Lemma lem6404744 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term376 A K f x neut) = ((f x) = neut).
Proof. exact (@lem6404743 ((f x) = neut)). Qed.
Lemma lem6404747 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term373 A K neut f x) = ((f x) = neut).
Proof. exact (TRANS (@lem6404741 A K f x neut) (@lem6404744 A K f x neut)). Qed.
Lemma lem6404748 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term372 A K f x neut) = ((f x) = neut).
Proof. exact (TRANS (@lem6404731 A K neut f x) (@lem6404747 A K f x neut)). Qed.
Lemma lem6404749 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6404750 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term377 A K f x neut) = (term378 A K f x neut).
Proof. exact (MK_COMB (@lem6404749) (@lem6404748 A K f x neut)). Qed.
Lemma lem6404751 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term365 A K dom f x neut) = (term379 A K dom f x neut).
Proof. exact (MK_COMB (@lem6404727 A K dom f x) (@lem6404750 A K f x neut)). Qed.
Lemma lem6404754 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term120 A K f x dom neut) = (term379 A K dom f x neut).
Proof. exact (TRANS (@lem6404719 A K dom f x neut) (@lem6404751 A K dom f x neut)). Qed.
Lemma lem6404755 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term414 A K k i f x dom neut) = (term438 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6404715 A K k dom f neut x i) (@lem6404754 A K dom f x neut)). Qed.
Lemma lem6404758 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term426 A K x k i f dom neut) = (term438 A K k i dom f x neut).
Proof. exact (TRANS (@lem6404623 A K k i f x dom neut) (@lem6404755 A K k i dom f x neut)). Qed.
Lemma lem6404759 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6404760 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term428 A K x k i f dom neut) = (term439 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6404759) (@lem6404758 A K k i dom f x neut)). Qed.
Lemma lem6404762 {_83095 : Type'} (p : _83095 -> Prop) (x : _83095) : (term21 _83095 x p) = (p x).
Proof. exact (EQ_MP (@lem3211641 _83095 p x) (@lem3211640 _83095 p x)). Qed.
Lemma lem6404763 {K : Type'} (p : K -> Prop) (x : K) : (term21 K x p) = (p x).
Proof. exact (@lem6404762 K p x). Qed.
Lemma lem6404764 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) (x : K) : (term440 A K x k i f dom neut) = (term441 A K k i f dom neut x).
Proof. exact (@lem6404763 K (term442 A K k i f dom neut) x). Qed.
Lemma lem6404765 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term441 A K k i f dom neut j) = (term443 A K k i f j dom neut).
Proof. exact (eq_refl (term441 A K k i f dom neut j)). Qed.
Lemma lem6404766 {K : Type'} (GEN_PVAR_265 : K) : (@SETSPEC K GEN_PVAR_265) = (@SETSPEC K GEN_PVAR_265).
Proof. exact (eq_refl (@SETSPEC K GEN_PVAR_265)). Qed.
Lemma lem6404767 {A K : Type'} (GEN_PVAR_265 : K) (k : K -> Prop) (i : K) (f : K -> A) (j : K) (dom : A -> Prop) (neut : A) : (term444 A K GEN_PVAR_265 k i f dom neut j) = (term445 A K GEN_PVAR_265 k i f j dom neut).
Proof. exact (MK_COMB (@lem6404766 K GEN_PVAR_265) (@lem6404765 A K k i f j dom neut)). Qed.
Lemma lem6404768 {K : Type'} (j : K) : j = j.
Proof. exact (eq_refl j). Qed.
Lemma lem6404769 {A K : Type'} (GEN_PVAR_265 : K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) (j : K) : (term446 A K GEN_PVAR_265 k i f dom neut j) = (term447 A K GEN_PVAR_265 k i f dom neut j).
Proof. exact (MK_COMB (@lem6404767 A K GEN_PVAR_265 k i f j dom neut) (@lem6404768 K j)). Qed.
Lemma lem6404770 {A K : Type'} (GEN_PVAR_265 : K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term448 A K GEN_PVAR_265 k i f dom neut) = (term449 A K GEN_PVAR_265 k i f dom neut).
Proof. exact (fun_ext (fun j : K => @lem6404769 A K GEN_PVAR_265 k i f dom neut j)). Qed.
Lemma lem6404771 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6404772 {A K : Type'} (GEN_PVAR_265 : K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term450 A K GEN_PVAR_265 k i f dom neut) = (term451 A K GEN_PVAR_265 k i f dom neut).
Proof. exact (MK_COMB (@lem6404771 K) (@lem6404770 A K GEN_PVAR_265 k i f dom neut)). Qed.
Lemma lem6404773 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term452 A K k i f dom neut) = (term453 A K k i f dom neut).
Proof. exact (fun_ext (fun GEN_PVAR_265 : K => @lem6404772 A K GEN_PVAR_265 k i f dom neut)). Qed.
Lemma lem6404774 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6404775 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term454 A K k i f dom neut) = (term354 A K k i f dom neut).
Proof. exact (MK_COMB (@lem6404774 K) (@lem6404773 A K k i f dom neut)). Qed.
Lemma lem6404776 {K : Type'} (x : K) : (@IN K x) = (@IN K x).
Proof. exact (eq_refl (@IN K x)). Qed.
Lemma lem6404777 {A K : Type'} (x : K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term440 A K x k i f dom neut) = (term455 A K x k i f dom neut).
Proof. exact (MK_COMB (@lem6404776 K x) (@lem6404775 A K k i f dom neut)). Qed.
Lemma lem6404778 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6404779 {A K : Type'} (x : K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term456 A K x k i f dom neut) = (term457 A K x k i f dom neut).
Proof. exact (MK_COMB (@lem6404778) (@lem6404777 A K x k i f dom neut)). Qed.
Lemma lem6404780 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : (term441 A K k i f dom neut x) = (term443 A K k i f x dom neut).
Proof. exact (eq_refl (term441 A K k i f dom neut x)). Qed.
Lemma lem6404781 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : ((term440 A K x k i f dom neut) = (term441 A K k i f dom neut x)) = ((term455 A K x k i f dom neut) = (term443 A K k i f x dom neut)).
Proof. exact (MK_COMB (@lem6404779 A K x k i f dom neut) (@lem6404780 A K k i f x dom neut)). Qed.
Lemma lem6404782 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (x : K) (dom : A -> Prop) (neut : A) : (term455 A K x k i f dom neut) = (term443 A K k i f x dom neut).
Proof. exact (EQ_MP (@lem6404781 A K k i f x dom neut) (@lem6404764 A K k i f dom neut x)). Qed.
Lemma lem6404786 {A : Type'} (s : A -> Prop) (x : A) (y : A) : (term429 A x s y) = (term430 A s x y).
Proof. exact (EQ_MP (@lem3211684 A s x y) (@lem3211683 A s x y)). Qed.
Lemma lem6404787 {K : Type'} (s : K -> Prop) (x : K) (y : K) : (term429 K x s y) = (term430 K s x y).
Proof. exact (@lem6404786 K s x y). Qed.
Lemma lem6404788 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term429 K x k i) = (term430 K k x i).
Proof. exact (@lem6404787 K k x i). Qed.
Lemma lem6404792 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6404793 {K : Type'} (P : K -> Prop) (x : K) : (@IN K x P) = (P x).
Proof. exact (@lem6404792 K P x). Qed.
Lemma lem6404794 {K : Type'} (k : K -> Prop) (x : K) : (@IN K x k) = (k x).
Proof. exact (@lem6404793 K k x). Qed.
Lemma lem6404795 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404796 {K : Type'} (k : K -> Prop) (x : K) : (term41 K x k) = (term42 K k x).
Proof. exact (MK_COMB (@lem6404795) (@lem6404794 K k x)). Qed.
Lemma lem6404799 {K : Type'} (x : K) (i : K) : (term434 K x i) = (term434 K x i).
Proof. exact (eq_refl (term434 K x i)). Qed.
Lemma lem6404800 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term430 K k x i) = (term458 K k x i).
Proof. exact (MK_COMB (@lem6404796 K k x) (@lem6404799 K x i)). Qed.
Lemma lem6404803 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term429 K x k i) = (term458 K k x i).
Proof. exact (TRANS (@lem6404788 K k x i) (@lem6404800 K k x i)). Qed.
Lemma lem6404804 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404805 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term459 K x k i) = (term460 K k x i).
Proof. exact (MK_COMB (@lem6404804) (@lem6404803 K k x i)). Qed.
Lemma lem6404807 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (EQ_MP (@lem3211702 A s x t) (@lem3211701 A s t x)). Qed.
Lemma lem6404808 {A : Type'} (s : A -> Prop) (x : A) (t : A -> Prop) : (term363 A x s t) = (term364 A s x t).
Proof. exact (@lem6404807 A s x t). Qed.
Lemma lem6404809 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term120 A K f x dom neut) = (term365 A K dom f x neut).
Proof. exact (@lem6404808 A dom (f x) (@INSERT A neut (@EMPTY A))). Qed.
Lemma lem6404813 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (EQ_MP (@lem3211610 A P x) (@lem3211609 A P x)). Qed.
Lemma lem6404814 {A : Type'} (P : A -> Prop) (x : A) : (@IN A x P) = (P x).
Proof. exact (@lem6404813 A P x). Qed.
Lemma lem6404815 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term366 A K f x dom) = (term367 A K dom f x).
Proof. exact (@lem6404814 A dom (f x)). Qed.
Lemma lem6404816 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404817 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term368 A K f x dom) = (term369 A K dom f x).
Proof. exact (MK_COMB (@lem6404816) (@lem6404815 A K dom f x)). Qed.
Lemma lem6404819 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (EQ_MP (@lem3211693 A y x s) (@lem3211692 A y x s)). Qed.
Lemma lem6404820 {A : Type'} (y : A) (x : A) (s : A -> Prop) : (term370 A x y s) = (term371 A y x s).
Proof. exact (@lem6404819 A y x s). Qed.
Lemma lem6404821 {A K : Type'} (neut : A) (f : K -> A) (x : K) : (term372 A K f x neut) = (term373 A K neut f x).
Proof. exact (@lem6404820 A neut (f x) (@EMPTY A)). Qed.
Lemma lem6404827 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem3211730 A x (@lem3211729 A x)). Qed.
Lemma lem6404828 {A : Type'} (x : A) : (@IN A x (@EMPTY A)) = False.
Proof. exact (@lem6404827 A x). Qed.
Lemma lem6404829 {A K : Type'} (f : K -> A) (x : K) : (term374 A K f x) = False.
Proof. exact (@lem6404828 A (f x)). Qed.
Lemma lem6404830 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term375 A K f x neut) = (term375 A K f x neut).
Proof. exact (eq_refl (term375 A K f x neut)). Qed.
Lemma lem6404831 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term373 A K neut f x) = (term376 A K f x neut).
Proof. exact (MK_COMB (@lem6404830 A K f x neut) (@lem6404829 A K f x)). Qed.
Lemma lem6404833 (t : Prop) : (t \/ False) = t.
Proof. exact (proj1 (@lem1834 t)). Qed.
Lemma lem6404834 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term376 A K f x neut) = ((f x) = neut).
Proof. exact (@lem6404833 ((f x) = neut)). Qed.
Lemma lem6404837 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term373 A K neut f x) = ((f x) = neut).
Proof. exact (TRANS (@lem6404831 A K f x neut) (@lem6404834 A K f x neut)). Qed.
Lemma lem6404838 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term372 A K f x neut) = ((f x) = neut).
Proof. exact (TRANS (@lem6404821 A K neut f x) (@lem6404837 A K f x neut)). Qed.
Lemma lem6404839 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6404840 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term377 A K f x neut) = (term378 A K f x neut).
Proof. exact (MK_COMB (@lem6404839) (@lem6404838 A K f x neut)). Qed.
Lemma lem6404841 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term365 A K dom f x neut) = (term379 A K dom f x neut).
Proof. exact (MK_COMB (@lem6404817 A K dom f x) (@lem6404840 A K f x neut)). Qed.
Lemma lem6404844 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term120 A K f x dom neut) = (term379 A K dom f x neut).
Proof. exact (TRANS (@lem6404809 A K dom f x neut) (@lem6404841 A K dom f x neut)). Qed.
Lemma lem6404845 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term443 A K k i f x dom neut) = (term461 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6404805 K k x i) (@lem6404844 A K dom f x neut)). Qed.
Lemma lem6404848 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term455 A K x k i f dom neut) = (term461 A K k i dom f x neut).
Proof. exact (TRANS (@lem6404782 A K k i f x dom neut) (@lem6404845 A K k i dom f x neut)). Qed.
Lemma lem6404849 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : ((term426 A K x k i f dom neut) = (term455 A K x k i f dom neut)) = ((term438 A K k i dom f x neut) = (term461 A K k i dom f x neut)).
Proof. exact (MK_COMB (@lem6404760 A K k i dom f x neut) (@lem6404848 A K k i dom f x neut)). Qed.
Lemma lem6404852 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term462 A K k i f dom neut) = (term463 A K k i dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6404849 A K k i dom f x neut)). Qed.
Lemma lem6404853 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6404854 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term355 A K k i f dom neut) = (term464 A K k i dom f neut).
Proof. exact (MK_COMB (@lem6404853 K) (@lem6404852 A K k i dom f neut)). Qed.
Lemma lem6404859 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term362 A K k i f dom neut) = (term473 A K k i dom f neut).
Proof. exact (MK_COMB (@lem6404595 A K i k dom f neut) (@lem6404854 A K k i dom f neut)). Qed.
Lemma lem6404862 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : (term473 A K k i dom f neut) = (term362 A K k i f dom neut).
Proof. exact (SYM (@lem6404859 A K k i dom f neut)). Qed.
Lemma lem6404864 (p : Prop) : p = (term50 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem6404865 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term465 A K ltle k i dom f neut) = (term474 A K ltle k i dom f neut).
Proof. exact (@lem6404864 (term465 A K ltle k i dom f neut)). Qed.
Lemma lem6404866 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term474 A K ltle k i dom f neut) = (term465 A K ltle k i dom f neut).
Proof. exact (SYM (@lem6404865 A K ltle k i dom f neut)). Qed.
Lemma lem6404867 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term475 A K ltle k i dom f neut) : term475 A K ltle k i dom f neut.
Proof. exact (h1). Qed.
Lemma lem6404878 {K : Type'} (P : K -> Prop) : term476 K P.
Proof. exact (@lem19732 K P). Qed.
Lemma lem6404879 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : term477 A K ltle k dom f neut.
Proof. exact (@lem6404878 K (term389 A K ltle k dom f neut)). Qed.
Lemma lem6404880 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term478 A K ltle k dom f neut) = (term479 A K ltle k dom f neut).
Proof. exact (eq_refl (term478 A K ltle k dom f neut)). Qed.
Lemma lem6404881 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term480 A K ltle k dom f neut x) = (term388 A K ltle k dom f neut x).
Proof. exact (eq_refl (term480 A K ltle k dom f neut x)). Qed.
Lemma lem6404882 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6404883 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term481 A K ltle k dom f neut x) = (term482 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6404882) (@lem6404881 A K ltle k dom f neut x)). Qed.
Lemma lem6404884 {A K : Type'} (x : K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term483 A K x ltle k dom f neut) = (term484 A K x ltle k dom f neut).
Proof. exact (MK_COMB (@lem6404883 A K ltle k dom f neut x) (@lem6404880 A K ltle k dom f neut)). Qed.
Lemma lem6404885 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term485 A K ltle k dom f neut) = (term486 A K ltle k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6404884 A K x ltle k dom f neut)). Qed.
Lemma lem6404886 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6404887 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term477 A K ltle k dom f neut) = (term487 A K ltle k dom f neut).
Proof. exact (MK_COMB (@lem6404886 K) (@lem6404885 A K ltle k dom f neut)). Qed.
Lemma lem6404888 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : term487 A K ltle k dom f neut.
Proof. exact (EQ_MP (@lem6404887 A K ltle k dom f neut) (@lem6404879 A K ltle k dom f neut)). Qed.
Lemma lem6404889 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : term488 A K ltle k dom f.
Proof. exact (fun neut : A => @lem6404888 A K ltle k dom f neut). Qed.
Lemma lem6404890 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : term489 A K ltle k dom.
Proof. exact (fun f : K -> A => @lem6404889 A K ltle k dom f). Qed.
Lemma lem6404891 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) : term490 A K ltle k.
Proof. exact (fun dom : A -> Prop => @lem6404890 A K ltle k dom). Qed.
Lemma lem6404892 {A K : Type'} (ltle : type1402 K) : term491 A K ltle.
Proof. exact (fun k : K -> Prop => @lem6404891 A K ltle k). Qed.
Lemma lem6404893 {A K : Type'} : term492 A K.
Proof. exact (fun ltle : type1402 K => @lem6404892 A K ltle). Qed.
Lemma lem6404894 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term493 A K ltle k i dom f neut) : term493 A K ltle k i dom f neut.
Proof. exact (h1). Qed.
Lemma lem6404895 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term493 A K ltle k i dom f neut) : term474 A K ltle k i dom f neut.
Proof. exact (@lem6404894 A K ltle k i dom f neut h1 (@lem6404893 A K)). Qed.
Lemma lem6404896 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term494 A K ltle k i dom f neut.
Proof. exact (fun h0 : term493 A K ltle k i dom f neut => @lem6404895 A K ltle k i dom f neut h0). Qed.
Lemma lem6404897 {A K : Type'} (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : _80095 = (term495 A K).
Proof. exact (h1). Qed.
Lemma lem6404898 {K : Type'} (ltle : type1402 K) : ltle = ltle.
Proof. exact (eq_refl ltle). Qed.
Lemma lem6404899 {A K : Type'} (ltle : type1402 K) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (_80095 ltle) = (term496 A K ltle).
Proof. exact (MK_COMB (@lem6404897 A K _80095 h1) (@lem6404898 K ltle)). Qed.
Lemma lem6404900 {A K : Type'} (ltle : type1402 K) : (term496 A K ltle) = (term497 A K ltle).
Proof. exact (eq_refl (term496 A K ltle)). Qed.
Lemma lem6404901 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term498 A K _80095 ltle) = (term498 A K _80095 ltle).
Proof. exact (eq_refl (term498 A K _80095 ltle)). Qed.
Lemma lem6404902 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : ((_80095 ltle) = (term496 A K ltle)) = ((_80095 ltle) = (term497 A K ltle)).
Proof. exact (MK_COMB (@lem6404901 A K _80095 ltle) (@lem6404900 A K ltle)). Qed.
Lemma lem6404903 {A K : Type'} (ltle : type1402 K) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (_80095 ltle) = (term497 A K ltle).
Proof. exact (EQ_MP (@lem6404902 A K _80095 ltle) (@lem6404899 A K ltle _80095 h1)). Qed.
Lemma lem6404904 {K : Type'} (k : K -> Prop) : k = k.
Proof. exact (eq_refl k). Qed.
Lemma lem6404905 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (_80095 ltle k) = (term499 A K ltle k).
Proof. exact (MK_COMB (@lem6404903 A K ltle _80095 h1) (@lem6404904 K k)). Qed.
Lemma lem6404906 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) : (term499 A K ltle k) = (term500 A K ltle k).
Proof. exact (eq_refl (term499 A K ltle k)). Qed.
Lemma lem6404907 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term501 A K _80095 ltle k) = (term501 A K _80095 ltle k).
Proof. exact (eq_refl (term501 A K _80095 ltle k)). Qed.
Lemma lem6404908 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : ((_80095 ltle k) = (term499 A K ltle k)) = ((_80095 ltle k) = (term500 A K ltle k)).
Proof. exact (MK_COMB (@lem6404907 A K _80095 ltle k) (@lem6404906 A K ltle k)). Qed.
Lemma lem6404909 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (_80095 ltle k) = (term500 A K ltle k).
Proof. exact (EQ_MP (@lem6404908 A K _80095 ltle k) (@lem6404905 A K ltle k _80095 h1)). Qed.
Lemma lem6404910 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6404911 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (_80095 ltle k dom) = (term502 A K ltle k dom).
Proof. exact (MK_COMB (@lem6404909 A K ltle k _80095 h1) (@lem6404910 A dom)). Qed.
Lemma lem6404912 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term502 A K ltle k dom) = (term503 A K ltle k dom).
Proof. exact (eq_refl (term502 A K ltle k dom)). Qed.
Lemma lem6404913 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term504 A K _80095 ltle k dom) = (term504 A K _80095 ltle k dom).
Proof. exact (eq_refl (term504 A K _80095 ltle k dom)). Qed.
Lemma lem6404914 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : ((_80095 ltle k dom) = (term502 A K ltle k dom)) = ((_80095 ltle k dom) = (term503 A K ltle k dom)).
Proof. exact (MK_COMB (@lem6404913 A K _80095 ltle k dom) (@lem6404912 A K ltle k dom)). Qed.
Lemma lem6404915 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (_80095 ltle k dom) = (term503 A K ltle k dom).
Proof. exact (EQ_MP (@lem6404914 A K _80095 ltle k dom) (@lem6404911 A K ltle k dom _80095 h1)). Qed.
Lemma lem6404916 {A K : Type'} (f : K -> A) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem6404917 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (_80095 ltle k dom f) = (term505 A K ltle k dom f).
Proof. exact (MK_COMB (@lem6404915 A K ltle k dom _80095 h1) (@lem6404916 A K f)). Qed.
Lemma lem6404918 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term505 A K ltle k dom f) = (term506 A K ltle k dom f).
Proof. exact (eq_refl (term505 A K ltle k dom f)). Qed.
Lemma lem6404919 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term507 A K _80095 ltle k dom f) = (term507 A K _80095 ltle k dom f).
Proof. exact (eq_refl (term507 A K _80095 ltle k dom f)). Qed.
Lemma lem6404920 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : ((_80095 ltle k dom f) = (term505 A K ltle k dom f)) = ((_80095 ltle k dom f) = (term506 A K ltle k dom f)).
Proof. exact (MK_COMB (@lem6404919 A K _80095 ltle k dom f) (@lem6404918 A K ltle k dom f)). Qed.
Lemma lem6404921 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (_80095 ltle k dom f) = (term506 A K ltle k dom f).
Proof. exact (EQ_MP (@lem6404920 A K _80095 ltle k dom f) (@lem6404917 A K ltle k dom f _80095 h1)). Qed.
Lemma lem6404922 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6404923 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (_80095 ltle k dom f neut) = (term508 A K ltle k dom f neut).
Proof. exact (MK_COMB (@lem6404921 A K ltle k dom f _80095 h1) (@lem6404922 A neut)). Qed.
Lemma lem6404924 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term508 A K ltle k dom f neut) = (term390 A K ltle k dom f neut).
Proof. exact (eq_refl (term508 A K ltle k dom f neut)). Qed.
Lemma lem6404925 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term509 A K _80095 ltle k dom f neut) = (term509 A K _80095 ltle k dom f neut).
Proof. exact (eq_refl (term509 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6404926 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_80095 ltle k dom f neut) = (term508 A K ltle k dom f neut)) = ((_80095 ltle k dom f neut) = (term390 A K ltle k dom f neut)).
Proof. exact (MK_COMB (@lem6404925 A K _80095 ltle k dom f neut) (@lem6404924 A K ltle k dom f neut)). Qed.
Lemma lem6404927 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (_80095 ltle k dom f neut) = (term390 A K ltle k dom f neut).
Proof. exact (EQ_MP (@lem6404926 A K _80095 ltle k dom f neut) (@lem6404923 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6404928 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term390 A K ltle k dom f neut) = (_80095 ltle k dom f neut).
Proof. exact (SYM (@lem6404927 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6404929 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : term510 A K _80095 ltle k dom f.
Proof. exact (fun neut : A => @lem6404928 A K ltle k dom f neut _80095 h1). Qed.
Lemma lem6404930 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : term511 A K _80095 ltle k dom.
Proof. exact (fun f : K -> A => @lem6404929 A K ltle k dom f _80095 h1). Qed.
Lemma lem6404931 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : term512 A K _80095 ltle k.
Proof. exact (fun dom : A -> Prop => @lem6404930 A K ltle k dom _80095 h1). Qed.
Lemma lem6404932 {A K : Type'} (ltle : type1402 K) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : term513 A K _80095 ltle.
Proof. exact (fun k : K -> Prop => @lem6404931 A K ltle k _80095 h1). Qed.
Lemma lem6404933 {A K : Type'} (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : term514 A K _80095.
Proof. exact (fun ltle : type1402 K => @lem6404932 A K ltle _80095 h1). Qed.
Lemma lem6404934 {A K : Type'} (ltle : type1402 K) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : term515 A K _80095 ltle.
Proof. exact (@lem6404933 A K _80095 h1 ltle). Qed.
Lemma lem6404935 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term515 A K _80095 ltle) = (term513 A K _80095 ltle).
Proof. exact (eq_refl (term515 A K _80095 ltle)). Qed.
Lemma lem6404936 {A K : Type'} (ltle : type1402 K) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : term513 A K _80095 ltle.
Proof. exact (EQ_MP (@lem6404935 A K _80095 ltle) (@lem6404934 A K ltle _80095 h1)). Qed.
Lemma lem6404937 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : term516 A K _80095 ltle k.
Proof. exact (@lem6404936 A K ltle _80095 h1 k). Qed.
Lemma lem6404938 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term516 A K _80095 ltle k) = (term512 A K _80095 ltle k).
Proof. exact (eq_refl (term516 A K _80095 ltle k)). Qed.
Lemma lem6404939 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : term512 A K _80095 ltle k.
Proof. exact (EQ_MP (@lem6404938 A K _80095 ltle k) (@lem6404937 A K ltle k _80095 h1)). Qed.
Lemma lem6404940 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : term517 A K _80095 ltle k dom.
Proof. exact (@lem6404939 A K ltle k _80095 h1 dom). Qed.
Lemma lem6404941 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term517 A K _80095 ltle k dom) = (term511 A K _80095 ltle k dom).
Proof. exact (eq_refl (term517 A K _80095 ltle k dom)). Qed.
Lemma lem6404942 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : term511 A K _80095 ltle k dom.
Proof. exact (EQ_MP (@lem6404941 A K _80095 ltle k dom) (@lem6404940 A K ltle k dom _80095 h1)). Qed.
Lemma lem6404943 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : term518 A K _80095 ltle k dom f.
Proof. exact (@lem6404942 A K ltle k dom _80095 h1 f). Qed.
Lemma lem6404944 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term518 A K _80095 ltle k dom f) = (term510 A K _80095 ltle k dom f).
Proof. exact (eq_refl (term518 A K _80095 ltle k dom f)). Qed.
Lemma lem6404945 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : term510 A K _80095 ltle k dom f.
Proof. exact (EQ_MP (@lem6404944 A K _80095 ltle k dom f) (@lem6404943 A K ltle k dom f _80095 h1)). Qed.
Lemma lem6404946 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : term519 A K _80095 ltle k dom f neut.
Proof. exact (@lem6404945 A K ltle k dom f _80095 h1 neut). Qed.
Lemma lem6404947 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term519 A K _80095 ltle k dom f neut) = ((term390 A K ltle k dom f neut) = (_80095 ltle k dom f neut)).
Proof. exact (eq_refl (term519 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6404950 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term390 A K ltle k dom f neut) = (_80095 ltle k dom f neut).
Proof. exact (EQ_MP (@lem6404947 A K _80095 ltle k dom f neut) (@lem6404946 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6404951 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term390 A K ltle k dom f neut) = (_80095 ltle k dom f neut).
Proof. exact (@lem6404950 A K ltle k dom f neut _80095 h1). Qed.
Lemma lem6404952 {K : Type'} (k : K -> Prop) : k = k.
Proof. exact (eq_refl k). Qed.
Lemma lem6404953 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term520 A K ltle k dom f neut) = (term521 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6404952 K k) (@lem6404951 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6404954 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404955 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term522 A K ltle k dom f neut) = (term523 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6404954) (@lem6404953 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6404957 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term390 A K ltle k dom f neut) = (_80095 ltle k dom f neut).
Proof. exact (EQ_MP (@lem6404947 A K _80095 ltle k dom f neut) (@lem6404946 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6404958 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term390 A K ltle k dom f neut) = (_80095 ltle k dom f neut).
Proof. exact (@lem6404957 A K ltle k dom f neut _80095 h1). Qed.
Lemma lem6404959 {A K : Type'} (f : K -> A) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem6404960 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term524 A K ltle k dom f neut) = (term525 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6404959 A K f) (@lem6404958 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6404961 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6404962 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term526 A K ltle k dom f neut) = (term527 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6404961 A dom) (@lem6404960 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6404963 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404964 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term528 A K ltle k dom f neut) = (term529 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6404963) (@lem6404962 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6404966 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term390 A K ltle k dom f neut) = (_80095 ltle k dom f neut).
Proof. exact (EQ_MP (@lem6404947 A K _80095 ltle k dom f neut) (@lem6404946 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6404967 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term390 A K ltle k dom f neut) = (_80095 ltle k dom f neut).
Proof. exact (@lem6404966 A K ltle k dom f neut _80095 h1). Qed.
Lemma lem6404968 {A K : Type'} (f : K -> A) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem6404969 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term524 A K ltle k dom f neut) = (term525 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6404968 A K f) (@lem6404967 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6404970 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem6404971 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term530 A K ltle k dom f neut) = (term531 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6404970 A) (@lem6404969 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6404972 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6404973 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : ((term524 A K ltle k dom f neut) = neut) = ((term525 A K _80095 ltle k dom f neut) = neut).
Proof. exact (MK_COMB (@lem6404971 A K ltle k dom f neut _80095 h1) (@lem6404972 A neut)). Qed.
Lemma lem6404974 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6404975 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term532 A K ltle k dom f neut) = (term533 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6404974) (@lem6404973 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6404976 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term534 A K ltle k dom f neut) = (term535 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6404964 A K ltle k dom f neut _80095 h1) (@lem6404975 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6404977 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404978 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term536 A K ltle k dom f neut) = (term537 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6404977) (@lem6404976 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6404980 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term390 A K ltle k dom f neut) = (_80095 ltle k dom f neut).
Proof. exact (EQ_MP (@lem6404947 A K _80095 ltle k dom f neut) (@lem6404946 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6404981 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term390 A K ltle k dom f neut) = (_80095 ltle k dom f neut).
Proof. exact (@lem6404980 A K ltle k dom f neut _80095 h1). Qed.
Lemma lem6404982 {K : Type'} (ltle : type1402 K) (j : K) : (ltle j) = (ltle j).
Proof. exact (eq_refl (ltle j)). Qed.
Lemma lem6404983 {A K : Type'} (j : K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term538 A K j ltle k dom f neut) = (term539 A K j _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6404982 K ltle j) (@lem6404981 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6404984 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6404985 {A K : Type'} (j : K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term540 A K j ltle k dom f neut) = (term541 A K j _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6404984) (@lem6404983 A K j ltle k dom f neut _80095 h1)). Qed.
Lemma lem6404986 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (j : K) (neut : A) : (term381 A K k dom f j neut) = (term381 A K k dom f j neut).
Proof. exact (eq_refl (term381 A K k dom f j neut)). Qed.
Lemma lem6404987 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (j : K) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term542 A K ltle k dom f j neut) = (term543 A K _80095 ltle k dom f j neut).
Proof. exact (MK_COMB (@lem6404985 A K j ltle k dom f neut _80095 h1) (@lem6404986 A K k dom f j neut)). Qed.
Lemma lem6404988 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6404989 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (j : K) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term544 A K ltle k dom f j neut) = (term545 A K _80095 ltle k dom f j neut).
Proof. exact (MK_COMB (@lem6404988) (@lem6404987 A K ltle k dom f j neut _80095 h1)). Qed.
Lemma lem6404991 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term390 A K ltle k dom f neut) = (_80095 ltle k dom f neut).
Proof. exact (EQ_MP (@lem6404947 A K _80095 ltle k dom f neut) (@lem6404946 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6404992 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term390 A K ltle k dom f neut) = (_80095 ltle k dom f neut).
Proof. exact (@lem6404991 A K ltle k dom f neut _80095 h1). Qed.
Lemma lem6404993 {K : Type'} (j : K) : (@eq K j) = (@eq K j).
Proof. exact (eq_refl (@eq K j)). Qed.
Lemma lem6404994 {A K : Type'} (j : K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (j = (term390 A K ltle k dom f neut)) = (j = (_80095 ltle k dom f neut)).
Proof. exact (MK_COMB (@lem6404993 K j) (@lem6404992 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6404995 {A K : Type'} (j : K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term546 A K j ltle k dom f neut) = (term547 A K j _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6404989 A K ltle k dom f j neut _80095 h1) (@lem6404994 A K j ltle k dom f neut _80095 h1)). Qed.
Lemma lem6404996 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term548 A K ltle k dom f neut) = (term549 A K _80095 ltle k dom f neut).
Proof. exact (fun_ext (fun j : K => @lem6404995 A K j ltle k dom f neut _80095 h1)). Qed.
Lemma lem6404997 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6404998 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term550 A K ltle k dom f neut) = (term551 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6404997 K) (@lem6404996 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6404999 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term552 A K ltle k dom f neut) = (term553 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6404978 A K ltle k dom f neut _80095 h1) (@lem6404998 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6405000 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term479 A K ltle k dom f neut) = (term554 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6404955 A K ltle k dom f neut _80095 h1) (@lem6404999 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6405001 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term482 A K ltle k dom f neut x) = (term482 A K ltle k dom f neut x).
Proof. exact (eq_refl (term482 A K ltle k dom f neut x)). Qed.
Lemma lem6405002 {A K : Type'} (x : K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term484 A K x ltle k dom f neut) = (term555 A K x _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6405001 A K ltle k dom f neut x) (@lem6405000 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6405003 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term486 A K ltle k dom f neut) = (term556 A K _80095 ltle k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6405002 A K x ltle k dom f neut _80095 h1)). Qed.
Lemma lem6405004 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6405005 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term487 A K ltle k dom f neut) = (term557 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6405004 K) (@lem6405003 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6405006 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term558 A K ltle k dom f) = (term559 A K _80095 ltle k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6405005 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6405007 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6405008 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term488 A K ltle k dom f) = (term560 A K _80095 ltle k dom f).
Proof. exact (MK_COMB (@lem6405007 A) (@lem6405006 A K ltle k dom f _80095 h1)). Qed.
Lemma lem6405009 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term561 A K ltle k dom) = (term562 A K _80095 ltle k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6405008 A K ltle k dom f _80095 h1)). Qed.
Lemma lem6405010 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6405011 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term489 A K ltle k dom) = (term563 A K _80095 ltle k dom).
Proof. exact (MK_COMB (@lem6405010 A K) (@lem6405009 A K ltle k dom _80095 h1)). Qed.
Lemma lem6405012 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term564 A K ltle k) = (term565 A K _80095 ltle k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6405011 A K ltle k dom _80095 h1)). Qed.
Lemma lem6405013 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6405014 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term490 A K ltle k) = (term566 A K _80095 ltle k).
Proof. exact (MK_COMB (@lem6405013 A) (@lem6405012 A K ltle k _80095 h1)). Qed.
Lemma lem6405015 {A K : Type'} (ltle : type1402 K) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term567 A K ltle) = (term568 A K _80095 ltle).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6405014 A K ltle k _80095 h1)). Qed.
Lemma lem6405016 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6405017 {A K : Type'} (ltle : type1402 K) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term491 A K ltle) = (term569 A K _80095 ltle).
Proof. exact (MK_COMB (@lem6405016 K) (@lem6405015 A K ltle _80095 h1)). Qed.
Lemma lem6405018 {A K : Type'} (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term570 A K) = (term571 A K _80095).
Proof. exact (fun_ext (fun ltle : type1402 K => @lem6405017 A K ltle _80095 h1)). Qed.
Lemma lem6405019 {K : Type'} : (@all (K -> K -> Prop)) = (@all (K -> K -> Prop)).
Proof. exact (eq_refl (@all (K -> K -> Prop))). Qed.
Lemma lem6405020 {A K : Type'} (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term492 A K) = (term572 A K _80095).
Proof. exact (MK_COMB (@lem6405019 K) (@lem6405018 A K _80095 h1)). Qed.
Lemma lem6405021 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6405022 {A K : Type'} (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term573 A K) = (term574 A K _80095).
Proof. exact (MK_COMB (@lem6405021) (@lem6405020 A K _80095 h1)). Qed.
Lemma lem6405024 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term390 A K ltle k dom f neut) = (_80095 ltle k dom f neut).
Proof. exact (EQ_MP (@lem6404947 A K _80095 ltle k dom f neut) (@lem6404946 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6405025 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term390 A K ltle k dom f neut) = (_80095 ltle k dom f neut).
Proof. exact (@lem6405024 A K ltle k dom f neut _80095 h1). Qed.
Lemma lem6405026 {K : Type'} : (@eq K) = (@eq K).
Proof. exact (eq_refl (@eq K)). Qed.
Lemma lem6405027 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term392 A K ltle k dom f neut) = (term509 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6405026 K) (@lem6405025 A K ltle k dom f neut _80095 h1)). Qed.
Lemma lem6405028 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6405029 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : ((term390 A K ltle k dom f neut) = i) = ((_80095 ltle k dom f neut) = i).
Proof. exact (MK_COMB (@lem6405027 A K ltle k dom f neut _80095 h1) (@lem6405028 K i)). Qed.
Lemma lem6405030 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6405031 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term393 A K ltle k dom f neut i) = (term575 A K _80095 ltle k dom f neut i).
Proof. exact (MK_COMB (@lem6405030) (@lem6405029 A K ltle k dom f neut i _80095 h1)). Qed.
Lemma lem6405032 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term408 A K k dom f neut) = (term408 A K k dom f neut).
Proof. exact (eq_refl (term408 A K k dom f neut)). Qed.
Lemma lem6405033 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term409 A K ltle i k dom f neut) = (term576 A K _80095 ltle i k dom f neut).
Proof. exact (MK_COMB (@lem6405031 A K ltle k dom f neut i _80095 h1) (@lem6405032 A K k dom f neut)). Qed.
Lemma lem6405034 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6405035 {A K : Type'} (ltle : type1402 K) (i : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term410 A K ltle i k dom f neut) = (term577 A K _80095 ltle i k dom f neut).
Proof. exact (MK_COMB (@lem6405034) (@lem6405033 A K ltle i k dom f neut _80095 h1)). Qed.
Lemma lem6405036 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term464 A K k i dom f neut) = (term464 A K k i dom f neut).
Proof. exact (eq_refl (term464 A K k i dom f neut)). Qed.
Lemma lem6405037 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term465 A K ltle k i dom f neut) = (term578 A K _80095 ltle k i dom f neut).
Proof. exact (MK_COMB (@lem6405035 A K ltle i k dom f neut _80095 h1) (@lem6405036 A K k i dom f neut)). Qed.
Lemma lem6405038 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6405039 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term475 A K ltle k i dom f neut) = (term579 A K _80095 ltle k i dom f neut).
Proof. exact (MK_COMB (@lem6405038) (@lem6405037 A K ltle k i dom f neut _80095 h1)). Qed.
Lemma lem6405040 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6405041 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term580 A K ltle k i dom f neut) = (term581 A K _80095 ltle k i dom f neut).
Proof. exact (MK_COMB (@lem6405040) (@lem6405039 A K ltle k i dom f neut _80095 h1)). Qed.
Lemma lem6405042 : False = False.
Proof. exact (eq_refl False). Qed.
Lemma lem6405043 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term474 A K ltle k i dom f neut) = (term582 A K _80095 ltle k i dom f neut).
Proof. exact (MK_COMB (@lem6405041 A K ltle k i dom f neut _80095 h1) (@lem6405042)). Qed.
Lemma lem6405044 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term493 A K ltle k i dom f neut) = (term583 A K _80095 ltle k i dom f neut).
Proof. exact (MK_COMB (@lem6405022 A K _80095 h1) (@lem6405043 A K ltle k i dom f neut _80095 h1)). Qed.
Lemma lem6405045 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term584 A K ltle k i dom f neut) : term584 A K ltle k i dom f neut.
Proof. exact (h1). Qed.
Lemma lem6405046 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term584 A K ltle k i dom f neut) : term585 A K ltle k i dom f neut _80095.
Proof. exact (@lem6405045 A K ltle k i dom f neut h1 _80095). Qed.
Lemma lem6405047 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term585 A K ltle k i dom f neut _80095) = (term583 A K _80095 ltle k i dom f neut).
Proof. exact (eq_refl (term585 A K ltle k i dom f neut _80095)). Qed.
Lemma lem6405048 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term584 A K ltle k i dom f neut) : term583 A K _80095 ltle k i dom f neut.
Proof. exact (EQ_MP (@lem6405047 A K _80095 ltle k i dom f neut) (@lem6405046 A K _80095 ltle k i dom f neut h1)). Qed.
Lemma lem6405049 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : (term583 A K _80095 ltle k i dom f neut) = (term493 A K ltle k i dom f neut).
Proof. exact (SYM (@lem6405044 A K ltle k i dom f neut _80095 h1)). Qed.
Lemma lem6405050 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : term584 A K ltle k i dom f neut) (h2 : _80095 = (term495 A K)) : term493 A K ltle k i dom f neut.
Proof. exact (EQ_MP (@lem6405049 A K ltle k i dom f neut _80095 h2) (@lem6405048 A K _80095 ltle k i dom f neut h1)). Qed.
Lemma lem6405051 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : term586 A K ltle k i dom f neut.
Proof. exact (fun h0 : term584 A K ltle k i dom f neut => @lem6405050 A K ltle k i dom f neut _80095 h0 h1). Qed.
Lemma lem6405052 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term587 A K ltle k i dom f neut.
Proof. exact (@lem51 (term493 A K ltle k i dom f neut) (term584 A K ltle k i dom f neut) (term474 A K ltle k i dom f neut)). Qed.
Lemma lem6405053 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : term588 A K ltle k i dom f neut.
Proof. exact (@lem6405052 A K ltle k i dom f neut (@lem6405051 A K ltle k i dom f neut _80095 h1)). Qed.
Lemma lem6405054 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_80095 : type756 A K) (h1 : _80095 = (term495 A K)) : term589 A K ltle k i dom f neut.
Proof. exact (@lem6405053 A K ltle k i dom f neut _80095 h1 (@lem6404896 A K ltle k i dom f neut)). Qed.
Lemma lem6405055 {A K : Type'} : (term495 A K) = (term495 A K).
Proof. exact (eq_refl (term495 A K)). Qed.
Lemma lem6405056 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term590 A K _80095 ltle k i dom f neut.
Proof. exact (fun h0 : _80095 = (term495 A K) => @lem6405054 A K ltle k i dom f neut _80095 h0). Qed.
Lemma lem6405057 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term591 A K ltle k i dom f neut.
Proof. exact (@lem6405056 A K (term495 A K) ltle k i dom f neut). Qed.
Lemma lem6405058 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term589 A K ltle k i dom f neut.
Proof. exact (@lem6405057 A K ltle k i dom f neut (@lem6405055 A K)). Qed.
Lemma lem6405059 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term584 A K ltle k i dom f neut) : term584 A K ltle k i dom f neut.
Proof. exact (h1). Qed.
Lemma lem6405060 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term592 A K ltle k i dom f neut.
Proof. exact (fun h0 : term584 A K ltle k i dom f neut => @lem6405059 A K ltle k i dom f neut h0). Qed.
Lemma lem6405061 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term593 A K ltle k i dom f neut.
Proof. exact (@lem51 (term584 A K ltle k i dom f neut) (term584 A K ltle k i dom f neut) (term474 A K ltle k i dom f neut)). Qed.
Lemma lem6405062 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term594 A K ltle k i dom f neut.
Proof. exact (@lem6405061 A K ltle k i dom f neut (@lem6405060 A K ltle k i dom f neut)). Qed.
Lemma lem6405063 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term589 A K ltle k i dom f neut.
Proof. exact (@lem6405062 A K ltle k i dom f neut (@lem6405058 A K ltle k i dom f neut)). Qed.
Lemma lem6405064 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term589 A K ltle k i dom f neut) : term589 A K ltle k i dom f neut.
Proof. exact (h1). Qed.
Lemma lem6405065 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term584 A K ltle k i dom f neut) : term584 A K ltle k i dom f neut.
Proof. exact (h1). Qed.
Lemma lem6405066 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term584 A K ltle k i dom f neut) (h2 : term589 A K ltle k i dom f neut) : term474 A K ltle k i dom f neut.
Proof. exact (@lem6405064 A K ltle k i dom f neut h2 (@lem6405065 A K ltle k i dom f neut h1)). Qed.
Lemma lem6405067 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term584 A K ltle k i dom f neut) : term595 A K ltle k i dom f neut.
Proof. exact (fun h0 : term589 A K ltle k i dom f neut => @lem6405066 A K ltle k i dom f neut h1 h0). Qed.
Lemma lem6405068 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term589 A K ltle k i dom f neut) : term589 A K ltle k i dom f neut.
Proof. exact (h1). Qed.
Lemma lem6405069 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term584 A K ltle k i dom f neut) (h2 : term589 A K ltle k i dom f neut) : term474 A K ltle k i dom f neut.
Proof. exact (@lem6405067 A K ltle k i dom f neut h1 (@lem6405068 A K ltle k i dom f neut h2)). Qed.
Lemma lem6405070 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term589 A K ltle k i dom f neut) : term589 A K ltle k i dom f neut.
Proof. exact (fun h0 : term584 A K ltle k i dom f neut => @lem6405069 A K ltle k i dom f neut h0 h1). Qed.
Lemma lem6405071 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term594 A K ltle k i dom f neut.
Proof. exact (fun h0 : term589 A K ltle k i dom f neut => @lem6405070 A K ltle k i dom f neut h0). Qed.
Lemma lem6405074 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term589 A K ltle k i dom f neut.
Proof. exact (@lem6405071 A K ltle k i dom f neut (@lem6405063 A K ltle k i dom f neut)). Qed.
Lemma lem6405075 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term589 A K ltle k i dom f neut.
Proof. exact (@lem6405074 A K ltle k i dom f neut). Qed.
Lemma lem6405169 (t : Prop) : (t -> False) = (~ t).
Proof. exact (proj2 (@lem16474 t)). Qed.
Lemma lem6405170 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term582 A K _80095 ltle k i dom f neut) = (term596 A K _80095 ltle k i dom f neut).
Proof. exact (@lem6405169 (term579 A K _80095 ltle k i dom f neut)). Qed.
Lemma lem6405172 (t : Prop) : (term57 t) = t.
Proof. exact (EQ_MP (@lem16507 t) (@lem16506 t)). Qed.
Lemma lem6405173 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term596 A K _80095 ltle k i dom f neut) = (term578 A K _80095 ltle k i dom f neut).
Proof. exact (@lem6405172 (term578 A K _80095 ltle k i dom f neut)). Qed.
Lemma lem6405176 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term582 A K _80095 ltle k i dom f neut) = (term578 A K _80095 ltle k i dom f neut).
Proof. exact (TRANS (@lem6405170 A K _80095 ltle k i dom f neut) (@lem6405173 A K _80095 ltle k i dom f neut)). Qed.
Lemma lem6405217 {A K : Type'} (_80095 : type756 A K) : (term574 A K _80095) = (term574 A K _80095).
Proof. exact (eq_refl (term574 A K _80095)). Qed.
Lemma lem6405218 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term583 A K _80095 ltle k i dom f neut) = (term597 A K _80095 ltle k i dom f neut).
Proof. exact (MK_COMB (@lem6405217 A K _80095) (@lem6405176 A K _80095 ltle k i dom f neut)). Qed.
Lemma lem6405221 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term598 A K ltle k i dom f neut) = (term599 A K ltle k i dom f neut).
Proof. exact (fun_ext (fun _80095 : type756 A K => @lem6405218 A K _80095 ltle k i dom f neut)). Qed.
Lemma lem6405222 {A K : Type'} : (@all ((K -> K -> Prop) -> (K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K)) = (@all ((K -> K -> Prop) -> (K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K)).
Proof. exact (eq_refl (@all ((K -> K -> Prop) -> (K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K))). Qed.
Lemma lem6405223 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term584 A K ltle k i dom f neut) = (term600 A K ltle k i dom f neut).
Proof. exact (MK_COMB (@lem6405222 A K) (@lem6405221 A K ltle k i dom f neut)). Qed.
Lemma lem6405228 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term601 A K k i dom f neut) = (term602 A K k i dom f neut).
Proof. exact (fun_ext (fun ltle : type1402 K => @lem6405223 A K ltle k i dom f neut)). Qed.
Lemma lem6405229 {K : Type'} : (@all (K -> K -> Prop)) = (@all (K -> K -> Prop)).
Proof. exact (eq_refl (@all (K -> K -> Prop))). Qed.
Lemma lem6405230 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term603 A K k i dom f neut) = (term604 A K k i dom f neut).
Proof. exact (MK_COMB (@lem6405229 K) (@lem6405228 A K k i dom f neut)). Qed.
Lemma lem6405235 {A K : Type'} (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term605 A K i dom f neut) = (term606 A K i dom f neut).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6405230 A K k i dom f neut)). Qed.
Lemma lem6405236 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6405237 {A K : Type'} (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term607 A K i dom f neut) = (term608 A K i dom f neut).
Proof. exact (MK_COMB (@lem6405236 K) (@lem6405235 A K i dom f neut)). Qed.
Lemma lem6405242 {A K : Type'} (dom : A -> Prop) (f : K -> A) (neut : A) : (term609 A K dom f neut) = (term610 A K dom f neut).
Proof. exact (fun_ext (fun i : K => @lem6405237 A K i dom f neut)). Qed.
Lemma lem6405243 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6405244 {A K : Type'} (dom : A -> Prop) (f : K -> A) (neut : A) : (term611 A K dom f neut) = (term612 A K dom f neut).
Proof. exact (MK_COMB (@lem6405243 K) (@lem6405242 A K dom f neut)). Qed.
Lemma lem6405249 {A K : Type'} (f : K -> A) (neut : A) : (term613 A K f neut) = (term614 A K f neut).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6405244 A K dom f neut)). Qed.
Lemma lem6405250 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6405251 {A K : Type'} (f : K -> A) (neut : A) : (term615 A K f neut) = (term616 A K f neut).
Proof. exact (MK_COMB (@lem6405250 A) (@lem6405249 A K f neut)). Qed.
Lemma lem6405256 {A K : Type'} (neut : A) : (term617 A K neut) = (term618 A K neut).
Proof. exact (fun_ext (fun f : K -> A => @lem6405251 A K f neut)). Qed.
Lemma lem6405257 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6405258 {A K : Type'} (neut : A) : (term619 A K neut) = (term620 A K neut).
Proof. exact (MK_COMB (@lem6405257 A K) (@lem6405256 A K neut)). Qed.
Lemma lem6405263 {A K : Type'} : (term621 A K) = (term622 A K).
Proof. exact (fun_ext (fun neut : A => @lem6405258 A K neut)). Qed.
Lemma lem6405264 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6405271 {A K : Type'} : (term623 A K) = (term624 A K).
Proof. exact (MK_COMB (@lem6405264 A) (@lem6405263 A K)). Qed.
Lemma lem6405272 {A K : Type'} (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : _80096 = (term625 A K).
Proof. exact (h1). Qed.
Lemma lem6405273 {K : Type'} (k : K -> Prop) : k = k.
Proof. exact (eq_refl k). Qed.
Lemma lem6405274 {A K : Type'} (k : K -> Prop) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (_80096 k) = (term626 A K k).
Proof. exact (MK_COMB (@lem6405272 A K _80096 h1) (@lem6405273 K k)). Qed.
Lemma lem6405275 {A K : Type'} (k : K -> Prop) : (term626 A K k) = (term627 A K k).
Proof. exact (eq_refl (term626 A K k)). Qed.
Lemma lem6405276 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term628 A K _80096 k) = (term628 A K _80096 k).
Proof. exact (eq_refl (term628 A K _80096 k)). Qed.
Lemma lem6405277 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : ((_80096 k) = (term626 A K k)) = ((_80096 k) = (term627 A K k)).
Proof. exact (MK_COMB (@lem6405276 A K _80096 k) (@lem6405275 A K k)). Qed.
Lemma lem6405278 {A K : Type'} (k : K -> Prop) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (_80096 k) = (term627 A K k).
Proof. exact (EQ_MP (@lem6405277 A K _80096 k) (@lem6405274 A K k _80096 h1)). Qed.
Lemma lem6405279 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6405280 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (_80096 k dom) = (term629 A K k dom).
Proof. exact (MK_COMB (@lem6405278 A K k _80096 h1) (@lem6405279 A dom)). Qed.
Lemma lem6405281 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) : (term629 A K k dom) = (term630 A K k dom).
Proof. exact (eq_refl (term629 A K k dom)). Qed.
Lemma lem6405282 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term631 A K _80096 k dom) = (term631 A K _80096 k dom).
Proof. exact (eq_refl (term631 A K _80096 k dom)). Qed.
Lemma lem6405283 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : ((_80096 k dom) = (term629 A K k dom)) = ((_80096 k dom) = (term630 A K k dom)).
Proof. exact (MK_COMB (@lem6405282 A K _80096 k dom) (@lem6405281 A K k dom)). Qed.
Lemma lem6405284 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (_80096 k dom) = (term630 A K k dom).
Proof. exact (EQ_MP (@lem6405283 A K _80096 k dom) (@lem6405280 A K k dom _80096 h1)). Qed.
Lemma lem6405285 {A K : Type'} (f : K -> A) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem6405286 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (_80096 k dom f) = (term632 A K k dom f).
Proof. exact (MK_COMB (@lem6405284 A K k dom _80096 h1) (@lem6405285 A K f)). Qed.
Lemma lem6405287 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term632 A K k dom f) = (term633 A K k dom f).
Proof. exact (eq_refl (term632 A K k dom f)). Qed.
Lemma lem6405288 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term634 A K _80096 k dom f) = (term634 A K _80096 k dom f).
Proof. exact (eq_refl (term634 A K _80096 k dom f)). Qed.
Lemma lem6405289 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : ((_80096 k dom f) = (term632 A K k dom f)) = ((_80096 k dom f) = (term633 A K k dom f)).
Proof. exact (MK_COMB (@lem6405288 A K _80096 k dom f) (@lem6405287 A K k dom f)). Qed.
Lemma lem6405290 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (_80096 k dom f) = (term633 A K k dom f).
Proof. exact (EQ_MP (@lem6405289 A K _80096 k dom f) (@lem6405286 A K k dom f _80096 h1)). Qed.
Lemma lem6405291 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6405292 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (_80096 k dom f neut) = (term635 A K k dom f neut).
Proof. exact (MK_COMB (@lem6405290 A K k dom f _80096 h1) (@lem6405291 A neut)). Qed.
Lemma lem6405293 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term635 A K k dom f neut) = (term398 A K k dom f neut).
Proof. exact (eq_refl (term635 A K k dom f neut)). Qed.
Lemma lem6405294 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term636 A K _80096 k dom f neut) = (term636 A K _80096 k dom f neut).
Proof. exact (eq_refl (term636 A K _80096 k dom f neut)). Qed.
Lemma lem6405295 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_80096 k dom f neut) = (term635 A K k dom f neut)) = ((_80096 k dom f neut) = (term398 A K k dom f neut)).
Proof. exact (MK_COMB (@lem6405294 A K _80096 k dom f neut) (@lem6405293 A K k dom f neut)). Qed.
Lemma lem6405296 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (_80096 k dom f neut) = (term398 A K k dom f neut).
Proof. exact (EQ_MP (@lem6405295 A K _80096 k dom f neut) (@lem6405292 A K k dom f neut _80096 h1)). Qed.
Lemma lem6405386 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : ((term438 A K k i dom f x neut) = (term461 A K k i dom f x neut)) = ((term438 A K k i dom f x neut) = (term461 A K k i dom f x neut)).
Proof. exact (eq_refl ((term438 A K k i dom f x neut) = (term461 A K k i dom f x neut))). Qed.
Lemma lem6405387 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term463 A K k i dom f neut) = (term463 A K k i dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6405386 A K k i dom f x neut)). Qed.
Lemma lem6405388 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6405389 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term464 A K k i dom f neut) = (term464 A K k i dom f neut).
Proof. exact (MK_COMB (@lem6405388 K) (@lem6405387 A K k i dom f neut)). Qed.
Lemma lem6405414 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term403 A K k dom f x neut) = (term403 A K k dom f x neut).
Proof. exact (eq_refl (term403 A K k dom f x neut)). Qed.
Lemma lem6405415 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term405 A K k dom f neut) = (term405 A K k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6405414 A K k dom f x neut)). Qed.
Lemma lem6405416 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6405417 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term406 A K k dom f neut) = (term406 A K k dom f neut).
Proof. exact (MK_COMB (@lem6405416 K) (@lem6405415 A K k dom f neut)). Qed.
Lemma lem6405418 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6405419 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term407 A K k dom f neut) = (term407 A K k dom f neut).
Proof. exact (MK_COMB (@lem6405418) (@lem6405417 A K k dom f neut)). Qed.
Lemma lem6405421 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term398 A K k dom f neut) = (_80096 k dom f neut).
Proof. exact (SYM (@lem6405296 A K k dom f neut _80096 h1)). Qed.
Lemma lem6405422 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term398 A K k dom f neut) = (_80096 k dom f neut).
Proof. exact (@lem6405421 A K k dom f neut _80096 h1). Qed.
Lemma lem6405423 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6405424 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term399 A K k dom f neut) = (term637 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6405423 K) (@lem6405422 A K k dom f neut _80096 h1)). Qed.
Lemma lem6405425 {K : Type'} : (@FINITE K) = (@FINITE K).
Proof. exact (eq_refl (@FINITE K)). Qed.
Lemma lem6405426 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term400 A K k dom f neut) = (term638 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6405425 K) (@lem6405424 A K k dom f neut _80096 h1)). Qed.
Lemma lem6405427 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6405428 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term401 A K k dom f neut) = (term639 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6405427) (@lem6405426 A K k dom f neut _80096 h1)). Qed.
Lemma lem6405429 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term408 A K k dom f neut) = (term640 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6405428 A K k dom f neut _80096 h1) (@lem6405419 A K k dom f neut)). Qed.
Lemma lem6405446 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term575 A K _80095 ltle k dom f neut i) = (term575 A K _80095 ltle k dom f neut i).
Proof. exact (eq_refl (term575 A K _80095 ltle k dom f neut i)). Qed.
Lemma lem6405447 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term576 A K _80095 ltle i k dom f neut) = (term641 A K _80095 ltle i _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6405446 A K _80095 ltle k dom f neut i) (@lem6405429 A K k dom f neut _80096 h1)). Qed.
Lemma lem6405448 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6405449 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term577 A K _80095 ltle i k dom f neut) = (term642 A K _80095 ltle i _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6405448) (@lem6405447 A K _80095 ltle i k dom f neut _80096 h1)). Qed.
Lemma lem6405450 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term578 A K _80095 ltle k i dom f neut) = (term643 A K _80095 ltle _80096 k i dom f neut).
Proof. exact (MK_COMB (@lem6405449 A K _80095 ltle i k dom f neut _80096 h1) (@lem6405389 A K k i dom f neut)). Qed.
Lemma lem6405509 {A K : Type'} (j : K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term547 A K j _80095 ltle k dom f neut) = (term547 A K j _80095 ltle k dom f neut).
Proof. exact (eq_refl (term547 A K j _80095 ltle k dom f neut)). Qed.
Lemma lem6405510 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term549 A K _80095 ltle k dom f neut) = (term549 A K _80095 ltle k dom f neut).
Proof. exact (fun_ext (fun j : K => @lem6405509 A K j _80095 ltle k dom f neut)). Qed.
Lemma lem6405511 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6405512 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term551 A K _80095 ltle k dom f neut) = (term551 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6405511 K) (@lem6405510 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6405551 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term537 A K _80095 ltle k dom f neut) = (term537 A K _80095 ltle k dom f neut).
Proof. exact (eq_refl (term537 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6405552 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term553 A K _80095 ltle k dom f neut) = (term553 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6405551 A K _80095 ltle k dom f neut) (@lem6405512 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6405567 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term523 A K _80095 ltle k dom f neut) = (term523 A K _80095 ltle k dom f neut).
Proof. exact (eq_refl (term523 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6405568 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term554 A K _80095 ltle k dom f neut) = (term554 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6405567 A K _80095 ltle k dom f neut) (@lem6405552 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6405607 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K) (x : K) : (term384 A K ltle k dom f neut j x) = (term384 A K ltle k dom f neut j x).
Proof. exact (eq_refl (term384 A K ltle k dom f neut j x)). Qed.
Lemma lem6405608 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term385 A K ltle k dom f neut x) = (term385 A K ltle k dom f neut x).
Proof. exact (fun_ext (fun j : K => @lem6405607 A K ltle k dom f neut j x)). Qed.
Lemma lem6405609 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6405610 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term386 A K ltle k dom f neut x) = (term386 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6405609 K) (@lem6405608 A K ltle k dom f neut x)). Qed.
Lemma lem6405629 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term380 A K dom f x neut) = (term380 A K dom f x neut).
Proof. exact (eq_refl (term380 A K dom f x neut)). Qed.
Lemma lem6405630 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term387 A K ltle k dom f neut x) = (term387 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6405629 A K dom f x neut) (@lem6405610 A K ltle k dom f neut x)). Qed.
Lemma lem6405635 {K : Type'} (k : K -> Prop) (x : K) : (term42 K k x) = (term42 K k x).
Proof. exact (eq_refl (term42 K k x)). Qed.
Lemma lem6405636 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term388 A K ltle k dom f neut x) = (term388 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6405635 K k x) (@lem6405630 A K ltle k dom f neut x)). Qed.
Lemma lem6405637 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6405638 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term482 A K ltle k dom f neut x) = (term482 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6405637) (@lem6405636 A K ltle k dom f neut x)). Qed.
Lemma lem6405639 {A K : Type'} (x : K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term555 A K x _80095 ltle k dom f neut) = (term555 A K x _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6405638 A K ltle k dom f neut x) (@lem6405568 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6405640 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term556 A K _80095 ltle k dom f neut) = (term556 A K _80095 ltle k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6405639 A K x _80095 ltle k dom f neut)). Qed.
Lemma lem6405641 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6405642 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term557 A K _80095 ltle k dom f neut) = (term557 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6405641 K) (@lem6405640 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6405643 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term559 A K _80095 ltle k dom f) = (term559 A K _80095 ltle k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6405642 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6405644 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6405645 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term560 A K _80095 ltle k dom f) = (term560 A K _80095 ltle k dom f).
Proof. exact (MK_COMB (@lem6405644 A) (@lem6405643 A K _80095 ltle k dom f)). Qed.
Lemma lem6405646 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term562 A K _80095 ltle k dom) = (term562 A K _80095 ltle k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6405645 A K _80095 ltle k dom f)). Qed.
Lemma lem6405647 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6405648 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term563 A K _80095 ltle k dom) = (term563 A K _80095 ltle k dom).
Proof. exact (MK_COMB (@lem6405647 A K) (@lem6405646 A K _80095 ltle k dom)). Qed.
Lemma lem6405649 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term565 A K _80095 ltle k) = (term565 A K _80095 ltle k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6405648 A K _80095 ltle k dom)). Qed.
Lemma lem6405650 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6405651 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term566 A K _80095 ltle k) = (term566 A K _80095 ltle k).
Proof. exact (MK_COMB (@lem6405650 A) (@lem6405649 A K _80095 ltle k)). Qed.
Lemma lem6405652 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term568 A K _80095 ltle) = (term568 A K _80095 ltle).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6405651 A K _80095 ltle k)). Qed.
Lemma lem6405653 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6405654 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term569 A K _80095 ltle) = (term569 A K _80095 ltle).
Proof. exact (MK_COMB (@lem6405653 K) (@lem6405652 A K _80095 ltle)). Qed.
Lemma lem6405655 {A K : Type'} (_80095 : type756 A K) : (term571 A K _80095) = (term571 A K _80095).
Proof. exact (fun_ext (fun ltle : type1402 K => @lem6405654 A K _80095 ltle)). Qed.
Lemma lem6405656 {K : Type'} : (@all (K -> K -> Prop)) = (@all (K -> K -> Prop)).
Proof. exact (eq_refl (@all (K -> K -> Prop))). Qed.
Lemma lem6405657 {A K : Type'} (_80095 : type756 A K) : (term572 A K _80095) = (term572 A K _80095).
Proof. exact (MK_COMB (@lem6405656 K) (@lem6405655 A K _80095)). Qed.
Lemma lem6405658 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6405659 {A K : Type'} (_80095 : type756 A K) : (term574 A K _80095) = (term574 A K _80095).
Proof. exact (MK_COMB (@lem6405658) (@lem6405657 A K _80095)). Qed.
Lemma lem6405660 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term597 A K _80095 ltle k i dom f neut) = (term644 A K _80095 ltle _80096 k i dom f neut).
Proof. exact (MK_COMB (@lem6405659 A K _80095) (@lem6405450 A K _80095 ltle k i dom f neut _80096 h1)). Qed.
Lemma lem6405661 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term599 A K ltle k i dom f neut) = (term645 A K ltle _80096 k i dom f neut).
Proof. exact (fun_ext (fun _80095 : type756 A K => @lem6405660 A K _80095 ltle k i dom f neut _80096 h1)). Qed.
Lemma lem6405662 {A K : Type'} : (@all ((K -> K -> Prop) -> (K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K)) = (@all ((K -> K -> Prop) -> (K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K)).
Proof. exact (eq_refl (@all ((K -> K -> Prop) -> (K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K))). Qed.
Lemma lem6405663 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term600 A K ltle k i dom f neut) = (term646 A K ltle _80096 k i dom f neut).
Proof. exact (MK_COMB (@lem6405662 A K) (@lem6405661 A K ltle k i dom f neut _80096 h1)). Qed.
Lemma lem6405664 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term602 A K k i dom f neut) = (term647 A K _80096 k i dom f neut).
Proof. exact (fun_ext (fun ltle : type1402 K => @lem6405663 A K ltle k i dom f neut _80096 h1)). Qed.
Lemma lem6405665 {K : Type'} : (@all (K -> K -> Prop)) = (@all (K -> K -> Prop)).
Proof. exact (eq_refl (@all (K -> K -> Prop))). Qed.
Lemma lem6405666 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term604 A K k i dom f neut) = (term648 A K _80096 k i dom f neut).
Proof. exact (MK_COMB (@lem6405665 K) (@lem6405664 A K k i dom f neut _80096 h1)). Qed.
Lemma lem6405667 {A K : Type'} (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term606 A K i dom f neut) = (term649 A K _80096 i dom f neut).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6405666 A K k i dom f neut _80096 h1)). Qed.
Lemma lem6405668 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6405669 {A K : Type'} (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term608 A K i dom f neut) = (term650 A K _80096 i dom f neut).
Proof. exact (MK_COMB (@lem6405668 K) (@lem6405667 A K i dom f neut _80096 h1)). Qed.
Lemma lem6405670 {A K : Type'} (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term610 A K dom f neut) = (term651 A K _80096 dom f neut).
Proof. exact (fun_ext (fun i : K => @lem6405669 A K i dom f neut _80096 h1)). Qed.
Lemma lem6405671 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6405672 {A K : Type'} (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term612 A K dom f neut) = (term652 A K _80096 dom f neut).
Proof. exact (MK_COMB (@lem6405671 K) (@lem6405670 A K dom f neut _80096 h1)). Qed.
Lemma lem6405673 {A K : Type'} (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term614 A K f neut) = (term653 A K _80096 f neut).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6405672 A K dom f neut _80096 h1)). Qed.
Lemma lem6405674 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6405675 {A K : Type'} (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term616 A K f neut) = (term654 A K _80096 f neut).
Proof. exact (MK_COMB (@lem6405674 A) (@lem6405673 A K f neut _80096 h1)). Qed.
Lemma lem6405676 {A K : Type'} (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term618 A K neut) = (term655 A K _80096 neut).
Proof. exact (fun_ext (fun f : K -> A => @lem6405675 A K f neut _80096 h1)). Qed.
Lemma lem6405677 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6405678 {A K : Type'} (neut : A) (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term620 A K neut) = (term656 A K _80096 neut).
Proof. exact (MK_COMB (@lem6405677 A K) (@lem6405676 A K neut _80096 h1)). Qed.
Lemma lem6405679 {A K : Type'} (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term622 A K) = (term657 A K _80096).
Proof. exact (fun_ext (fun neut : A => @lem6405678 A K neut _80096 h1)). Qed.
Lemma lem6405680 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6405681 {A K : Type'} (_80096 : type835 A K) (h1 : _80096 = (term625 A K)) : (term624 A K) = (term658 A K _80096).
Proof. exact (MK_COMB (@lem6405680 A) (@lem6405679 A K _80096 h1)). Qed.
Lemma lem6405682 {A K : Type'} (_80096 : type835 A K) : term659 A K _80096.
Proof. exact (fun h0 : _80096 = (term625 A K) => @lem6405681 A K _80096 h0). Qed.
Lemma lem6405683 {A K : Type'} : term660 A K.
Proof. exact (fun _80096 : type835 A K => @lem6405682 A K _80096). Qed.
Lemma lem6405685 {_3603 : Type'} (P : Prop) (c : _3603) (Q : _3603 -> Prop) : term661 _3603 P c Q.
Proof. exact (EQ_MP (@lem20230 _3603 P c Q) (@lem0)). Qed.
Lemma lem6405686 {A K : Type'} (P : Prop) (c : type835 A K) (Q : type212 A K) : term662 A K P c Q.
Proof. exact (@lem6405685 (type835 A K) P c Q). Qed.
Lemma lem6405687 {A K : Type'} : term663 A K.
Proof. exact (@lem6405686 A K (term624 A K) (term625 A K) (term664 A K)). Qed.
Lemma lem6405688 {A K : Type'} (_80096 : type835 A K) : (term665 A K _80096) = (term658 A K _80096).
Proof. exact (eq_refl (term665 A K _80096)). Qed.
Lemma lem6405689 {A K : Type'} : (term666 A K) = (term666 A K).
Proof. exact (eq_refl (term666 A K)). Qed.
Lemma lem6405690 {A K : Type'} (_80096 : type835 A K) : ((term624 A K) = (term665 A K _80096)) = ((term624 A K) = (term658 A K _80096)).
Proof. exact (MK_COMB (@lem6405689 A K) (@lem6405688 A K _80096)). Qed.
Lemma lem6405691 {A K : Type'} (_80096 : type835 A K) : (term667 A K _80096) = (term667 A K _80096).
Proof. exact (eq_refl (term667 A K _80096)). Qed.
Lemma lem6405692 {A K : Type'} (_80096 : type835 A K) : (term668 A K _80096) = (term659 A K _80096).
Proof. exact (MK_COMB (@lem6405691 A K _80096) (@lem6405690 A K _80096)). Qed.
Lemma lem6405693 {A K : Type'} : (term669 A K) = (term670 A K).
Proof. exact (fun_ext (fun _80096 : type835 A K => @lem6405692 A K _80096)). Qed.
Lemma lem6405694 {A K : Type'} : (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop)) = (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop)).
Proof. exact (eq_refl (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop))). Qed.
Lemma lem6405695 {A K : Type'} : (term671 A K) = (term660 A K).
Proof. exact (MK_COMB (@lem6405694 A K) (@lem6405693 A K)). Qed.
Lemma lem6405696 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6405697 {A K : Type'} : (term672 A K) = (term673 A K).
Proof. exact (MK_COMB (@lem6405696) (@lem6405695 A K)). Qed.
Lemma lem6405698 {A K : Type'} (_80096 : type835 A K) : (term665 A K _80096) = (term658 A K _80096).
Proof. exact (eq_refl (term665 A K _80096)). Qed.
Lemma lem6405699 {A K : Type'} (_80096 : type835 A K) : (term667 A K _80096) = (term667 A K _80096).
Proof. exact (eq_refl (term667 A K _80096)). Qed.
Lemma lem6405700 {A K : Type'} (_80096 : type835 A K) : (term674 A K _80096) = (term675 A K _80096).
Proof. exact (MK_COMB (@lem6405699 A K _80096) (@lem6405698 A K _80096)). Qed.
Lemma lem6405701 {A K : Type'} : (term676 A K) = (term677 A K).
Proof. exact (fun_ext (fun _80096 : type835 A K => @lem6405700 A K _80096)). Qed.
Lemma lem6405702 {A K : Type'} : (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop)) = (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop)).
Proof. exact (eq_refl (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop))). Qed.
Lemma lem6405703 {A K : Type'} : (term678 A K) = (term679 A K).
Proof. exact (MK_COMB (@lem6405702 A K) (@lem6405701 A K)). Qed.
Lemma lem6405704 {A K : Type'} : (term666 A K) = (term666 A K).
Proof. exact (eq_refl (term666 A K)). Qed.
Lemma lem6405705 {A K : Type'} : ((term624 A K) = (term678 A K)) = ((term624 A K) = (term679 A K)).
Proof. exact (MK_COMB (@lem6405704 A K) (@lem6405703 A K)). Qed.
Lemma lem6405706 {A K : Type'} : (term663 A K) = (term680 A K).
Proof. exact (MK_COMB (@lem6405697 A K) (@lem6405705 A K)). Qed.
Lemma lem6405707 {A K : Type'} : term680 A K.
Proof. exact (EQ_MP (@lem6405706 A K) (@lem6405687 A K)). Qed.
Lemma lem6405708 {A K : Type'} : (term624 A K) = (term679 A K).
Proof. exact (@lem6405707 A K (@lem6405683 A K)). Qed.
Lemma lem6405710 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term681 _3571 _3575 t)) = (term682 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem6405711 {A K : Type'} (s : type835 A K) (t : type835 A K) : (s = (term683 A K t)) = (term684 A K s t).
Proof. exact (@lem6405710 (type650 A K) (K -> Prop) s t). Qed.
Lemma lem6405712 {A K : Type'} (_80096 : type835 A K) : (_80096 = (term685 A K)) = (term686 A K _80096).
Proof. exact (@lem6405711 A K _80096 (term625 A K)). Qed.
Lemma lem6405713 {A K : Type'} (k : K -> Prop) : (term626 A K k) = (term627 A K k).
Proof. exact (eq_refl (term626 A K k)). Qed.
Lemma lem6405714 {A K : Type'} : (term685 A K) = (term625 A K).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6405713 A K k)). Qed.
Lemma lem6405715 {A K : Type'} (_80096 : type835 A K) : (@eq ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop) _80096) = (@eq ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop) _80096).
Proof. exact (eq_refl (@eq ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop) _80096)). Qed.
Lemma lem6405716 {A K : Type'} (_80096 : type835 A K) : (_80096 = (term685 A K)) = (_80096 = (term625 A K)).
Proof. exact (MK_COMB (@lem6405715 A K _80096) (@lem6405714 A K)). Qed.
Lemma lem6405717 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6405718 {A K : Type'} (_80096 : type835 A K) : (term687 A K _80096) = (term688 A K _80096).
Proof. exact (MK_COMB (@lem6405717) (@lem6405716 A K _80096)). Qed.
Lemma lem6405719 {A K : Type'} (k : K -> Prop) : (term626 A K k) = (term627 A K k).
Proof. exact (eq_refl (term626 A K k)). Qed.
Lemma lem6405720 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term628 A K _80096 k) = (term628 A K _80096 k).
Proof. exact (eq_refl (term628 A K _80096 k)). Qed.
Lemma lem6405721 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : ((_80096 k) = (term626 A K k)) = ((_80096 k) = (term627 A K k)).
Proof. exact (MK_COMB (@lem6405720 A K _80096 k) (@lem6405719 A K k)). Qed.
Lemma lem6405722 {A K : Type'} (_80096 : type835 A K) : (term689 A K _80096) = (term690 A K _80096).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6405721 A K _80096 k)). Qed.
Lemma lem6405723 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6405724 {A K : Type'} (_80096 : type835 A K) : (term686 A K _80096) = (term691 A K _80096).
Proof. exact (MK_COMB (@lem6405723 K) (@lem6405722 A K _80096)). Qed.
Lemma lem6405725 {A K : Type'} (_80096 : type835 A K) : ((_80096 = (term685 A K)) = (term686 A K _80096)) = ((_80096 = (term625 A K)) = (term691 A K _80096)).
Proof. exact (MK_COMB (@lem6405718 A K _80096) (@lem6405724 A K _80096)). Qed.
Lemma lem6405726 {A K : Type'} (_80096 : type835 A K) : (_80096 = (term625 A K)) = (term691 A K _80096).
Proof. exact (EQ_MP (@lem6405725 A K _80096) (@lem6405712 A K _80096)). Qed.
Lemma lem6405728 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term681 _3571 _3575 t)) = (term682 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem6405729 {A K : Type'} (s : type650 A K) (t : type650 A K) : (s = (term692 A K t)) = (term693 A K s t).
Proof. exact (@lem6405728 (type793 A K) (A -> Prop) s t). Qed.
Lemma lem6405730 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : ((_80096 k) = (term694 A K k)) = (term695 A K _80096 k).
Proof. exact (@lem6405729 A K (_80096 k) (term627 A K k)). Qed.
Lemma lem6405731 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) : (term629 A K k dom) = (term630 A K k dom).
Proof. exact (eq_refl (term629 A K k dom)). Qed.
Lemma lem6405732 {A K : Type'} (k : K -> Prop) : (term694 A K k) = (term627 A K k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6405731 A K k dom)). Qed.
Lemma lem6405733 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term628 A K _80096 k) = (term628 A K _80096 k).
Proof. exact (eq_refl (term628 A K _80096 k)). Qed.
Lemma lem6405734 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : ((_80096 k) = (term694 A K k)) = ((_80096 k) = (term627 A K k)).
Proof. exact (MK_COMB (@lem6405733 A K _80096 k) (@lem6405732 A K k)). Qed.
Lemma lem6405735 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6405736 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term696 A K _80096 k) = (term697 A K _80096 k).
Proof. exact (MK_COMB (@lem6405735) (@lem6405734 A K _80096 k)). Qed.
Lemma lem6405737 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) : (term629 A K k dom) = (term630 A K k dom).
Proof. exact (eq_refl (term629 A K k dom)). Qed.
Lemma lem6405738 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term631 A K _80096 k dom) = (term631 A K _80096 k dom).
Proof. exact (eq_refl (term631 A K _80096 k dom)). Qed.
Lemma lem6405739 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : ((_80096 k dom) = (term629 A K k dom)) = ((_80096 k dom) = (term630 A K k dom)).
Proof. exact (MK_COMB (@lem6405738 A K _80096 k dom) (@lem6405737 A K k dom)). Qed.
Lemma lem6405740 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term698 A K _80096 k) = (term699 A K _80096 k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6405739 A K _80096 k dom)). Qed.
Lemma lem6405741 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6405742 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term695 A K _80096 k) = (term700 A K _80096 k).
Proof. exact (MK_COMB (@lem6405741 A) (@lem6405740 A K _80096 k)). Qed.
Lemma lem6405743 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (((_80096 k) = (term694 A K k)) = (term695 A K _80096 k)) = (((_80096 k) = (term627 A K k)) = (term700 A K _80096 k)).
Proof. exact (MK_COMB (@lem6405736 A K _80096 k) (@lem6405742 A K _80096 k)). Qed.
Lemma lem6405744 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : ((_80096 k) = (term627 A K k)) = (term700 A K _80096 k).
Proof. exact (EQ_MP (@lem6405743 A K _80096 k) (@lem6405730 A K _80096 k)). Qed.
Lemma lem6405746 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term681 _3571 _3575 t)) = (term682 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem6405747 {A K : Type'} (s : type793 A K) (t : type793 A K) : (s = (term701 A K t)) = (term702 A K s t).
Proof. exact (@lem6405746 (type1413 A K) (K -> A) s t). Qed.
Lemma lem6405748 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : ((_80096 k dom) = (term703 A K k dom)) = (term704 A K _80096 k dom).
Proof. exact (@lem6405747 A K (_80096 k dom) (term630 A K k dom)). Qed.
Lemma lem6405749 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term632 A K k dom f) = (term633 A K k dom f).
Proof. exact (eq_refl (term632 A K k dom f)). Qed.
Lemma lem6405750 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) : (term703 A K k dom) = (term630 A K k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6405749 A K k dom f)). Qed.
Lemma lem6405751 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term631 A K _80096 k dom) = (term631 A K _80096 k dom).
Proof. exact (eq_refl (term631 A K _80096 k dom)). Qed.
Lemma lem6405752 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : ((_80096 k dom) = (term703 A K k dom)) = ((_80096 k dom) = (term630 A K k dom)).
Proof. exact (MK_COMB (@lem6405751 A K _80096 k dom) (@lem6405750 A K k dom)). Qed.
Lemma lem6405753 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6405754 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term705 A K _80096 k dom) = (term706 A K _80096 k dom).
Proof. exact (MK_COMB (@lem6405753) (@lem6405752 A K _80096 k dom)). Qed.
Lemma lem6405755 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term632 A K k dom f) = (term633 A K k dom f).
Proof. exact (eq_refl (term632 A K k dom f)). Qed.
Lemma lem6405756 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term634 A K _80096 k dom f) = (term634 A K _80096 k dom f).
Proof. exact (eq_refl (term634 A K _80096 k dom f)). Qed.
Lemma lem6405757 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : ((_80096 k dom f) = (term632 A K k dom f)) = ((_80096 k dom f) = (term633 A K k dom f)).
Proof. exact (MK_COMB (@lem6405756 A K _80096 k dom f) (@lem6405755 A K k dom f)). Qed.
Lemma lem6405758 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term707 A K _80096 k dom) = (term708 A K _80096 k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6405757 A K _80096 k dom f)). Qed.
Lemma lem6405759 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6405760 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term704 A K _80096 k dom) = (term709 A K _80096 k dom).
Proof. exact (MK_COMB (@lem6405759 A K) (@lem6405758 A K _80096 k dom)). Qed.
Lemma lem6405761 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (((_80096 k dom) = (term703 A K k dom)) = (term704 A K _80096 k dom)) = (((_80096 k dom) = (term630 A K k dom)) = (term709 A K _80096 k dom)).
Proof. exact (MK_COMB (@lem6405754 A K _80096 k dom) (@lem6405760 A K _80096 k dom)). Qed.
Lemma lem6405762 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : ((_80096 k dom) = (term630 A K k dom)) = (term709 A K _80096 k dom).
Proof. exact (EQ_MP (@lem6405761 A K _80096 k dom) (@lem6405748 A K _80096 k dom)). Qed.
Lemma lem6405764 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term681 _3571 _3575 t)) = (term682 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem6405765 {A K : Type'} (s : type1413 A K) (t : type1413 A K) : (s = (term710 A K t)) = (term711 A K s t).
Proof. exact (@lem6405764 (K -> Prop) A s t). Qed.
Lemma lem6405766 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : ((_80096 k dom f) = (term712 A K k dom f)) = (term713 A K _80096 k dom f).
Proof. exact (@lem6405765 A K (_80096 k dom f) (term633 A K k dom f)). Qed.
Lemma lem6405767 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term635 A K k dom f neut) = (term398 A K k dom f neut).
Proof. exact (eq_refl (term635 A K k dom f neut)). Qed.
Lemma lem6405768 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term712 A K k dom f) = (term633 A K k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6405767 A K k dom f neut)). Qed.
Lemma lem6405769 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term634 A K _80096 k dom f) = (term634 A K _80096 k dom f).
Proof. exact (eq_refl (term634 A K _80096 k dom f)). Qed.
Lemma lem6405770 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : ((_80096 k dom f) = (term712 A K k dom f)) = ((_80096 k dom f) = (term633 A K k dom f)).
Proof. exact (MK_COMB (@lem6405769 A K _80096 k dom f) (@lem6405768 A K k dom f)). Qed.
Lemma lem6405771 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6405772 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term714 A K _80096 k dom f) = (term715 A K _80096 k dom f).
Proof. exact (MK_COMB (@lem6405771) (@lem6405770 A K _80096 k dom f)). Qed.
Lemma lem6405773 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term635 A K k dom f neut) = (term398 A K k dom f neut).
Proof. exact (eq_refl (term635 A K k dom f neut)). Qed.
Lemma lem6405774 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term636 A K _80096 k dom f neut) = (term636 A K _80096 k dom f neut).
Proof. exact (eq_refl (term636 A K _80096 k dom f neut)). Qed.
Lemma lem6405775 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_80096 k dom f neut) = (term635 A K k dom f neut)) = ((_80096 k dom f neut) = (term398 A K k dom f neut)).
Proof. exact (MK_COMB (@lem6405774 A K _80096 k dom f neut) (@lem6405773 A K k dom f neut)). Qed.
Lemma lem6405776 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term716 A K _80096 k dom f) = (term717 A K _80096 k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6405775 A K _80096 k dom f neut)). Qed.
Lemma lem6405777 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6405778 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term713 A K _80096 k dom f) = (term718 A K _80096 k dom f).
Proof. exact (MK_COMB (@lem6405777 A) (@lem6405776 A K _80096 k dom f)). Qed.
Lemma lem6405779 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (((_80096 k dom f) = (term712 A K k dom f)) = (term713 A K _80096 k dom f)) = (((_80096 k dom f) = (term633 A K k dom f)) = (term718 A K _80096 k dom f)).
Proof. exact (MK_COMB (@lem6405772 A K _80096 k dom f) (@lem6405778 A K _80096 k dom f)). Qed.
Lemma lem6405780 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : ((_80096 k dom f) = (term633 A K k dom f)) = (term718 A K _80096 k dom f).
Proof. exact (EQ_MP (@lem6405779 A K _80096 k dom f) (@lem6405766 A K _80096 k dom f)). Qed.
Lemma lem6405782 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term681 _3571 _3575 t)) = (term682 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem6405783 {K : Type'} (s : K -> Prop) (t : K -> Prop) : (s = (term719 K t)) = (term720 K s t).
Proof. exact (@lem6405782 Prop K s t). Qed.
Lemma lem6405784 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_80096 k dom f neut) = (term721 A K k dom f neut)) = (term722 A K _80096 k dom f neut).
Proof. exact (@lem6405783 K (_80096 k dom f neut) (term398 A K k dom f neut)). Qed.
Lemma lem6405785 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term723 A K k dom f neut GEN_PVAR_263) = (term397 A K GEN_PVAR_263 k dom f neut).
Proof. exact (eq_refl (term723 A K k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6405786 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term721 A K k dom f neut) = (term398 A K k dom f neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6405785 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6405787 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term636 A K _80096 k dom f neut) = (term636 A K _80096 k dom f neut).
Proof. exact (eq_refl (term636 A K _80096 k dom f neut)). Qed.
Lemma lem6405788 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_80096 k dom f neut) = (term721 A K k dom f neut)) = ((_80096 k dom f neut) = (term398 A K k dom f neut)).
Proof. exact (MK_COMB (@lem6405787 A K _80096 k dom f neut) (@lem6405786 A K k dom f neut)). Qed.
Lemma lem6405789 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6405790 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term724 A K _80096 k dom f neut) = (term725 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6405789) (@lem6405788 A K _80096 k dom f neut)). Qed.
Lemma lem6405791 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term723 A K k dom f neut GEN_PVAR_263) = (term397 A K GEN_PVAR_263 k dom f neut).
Proof. exact (eq_refl (term723 A K k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6405792 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (GEN_PVAR_263 : K) : (term726 A K _80096 k dom f neut GEN_PVAR_263) = (term726 A K _80096 k dom f neut GEN_PVAR_263).
Proof. exact (eq_refl (term726 A K _80096 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6405793 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_80096 k dom f neut GEN_PVAR_263) = (term723 A K k dom f neut GEN_PVAR_263)) = ((_80096 k dom f neut GEN_PVAR_263) = (term397 A K GEN_PVAR_263 k dom f neut)).
Proof. exact (MK_COMB (@lem6405792 A K _80096 k dom f neut GEN_PVAR_263) (@lem6405791 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6405794 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term727 A K _80096 k dom f neut) = (term728 A K _80096 k dom f neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6405793 A K _80096 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6405795 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6405796 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term722 A K _80096 k dom f neut) = (term729 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6405795 K) (@lem6405794 A K _80096 k dom f neut)). Qed.
Lemma lem6405797 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (((_80096 k dom f neut) = (term721 A K k dom f neut)) = (term722 A K _80096 k dom f neut)) = (((_80096 k dom f neut) = (term398 A K k dom f neut)) = (term729 A K _80096 k dom f neut)).
Proof. exact (MK_COMB (@lem6405790 A K _80096 k dom f neut) (@lem6405796 A K _80096 k dom f neut)). Qed.
Lemma lem6405798 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_80096 k dom f neut) = (term398 A K k dom f neut)) = (term729 A K _80096 k dom f neut).
Proof. exact (EQ_MP (@lem6405797 A K _80096 k dom f neut) (@lem6405784 A K _80096 k dom f neut)). Qed.
Lemma lem6405799 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_80096 k dom f neut GEN_PVAR_263) = (term397 A K GEN_PVAR_263 k dom f neut)) = ((_80096 k dom f neut GEN_PVAR_263) = (term397 A K GEN_PVAR_263 k dom f neut)).
Proof. exact (eq_refl ((_80096 k dom f neut GEN_PVAR_263) = (term397 A K GEN_PVAR_263 k dom f neut))). Qed.
Lemma lem6405800 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term728 A K _80096 k dom f neut) = (term728 A K _80096 k dom f neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6405799 A K _80096 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6405801 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6405802 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term729 A K _80096 k dom f neut) = (term729 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6405801 K) (@lem6405800 A K _80096 k dom f neut)). Qed.
Lemma lem6405803 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_80096 k dom f neut) = (term398 A K k dom f neut)) = (term729 A K _80096 k dom f neut).
Proof. exact (TRANS (@lem6405798 A K _80096 k dom f neut) (@lem6405802 A K _80096 k dom f neut)). Qed.
Lemma lem6405804 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term717 A K _80096 k dom f) = (term730 A K _80096 k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6405803 A K _80096 k dom f neut)). Qed.
Lemma lem6405805 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6405806 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term718 A K _80096 k dom f) = (term731 A K _80096 k dom f).
Proof. exact (MK_COMB (@lem6405805 A) (@lem6405804 A K _80096 k dom f)). Qed.
Lemma lem6405807 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : ((_80096 k dom f) = (term633 A K k dom f)) = (term731 A K _80096 k dom f).
Proof. exact (TRANS (@lem6405780 A K _80096 k dom f) (@lem6405806 A K _80096 k dom f)). Qed.
Lemma lem6405808 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term708 A K _80096 k dom) = (term732 A K _80096 k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6405807 A K _80096 k dom f)). Qed.
Lemma lem6405809 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6405810 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term709 A K _80096 k dom) = (term733 A K _80096 k dom).
Proof. exact (MK_COMB (@lem6405809 A K) (@lem6405808 A K _80096 k dom)). Qed.
Lemma lem6405811 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : ((_80096 k dom) = (term630 A K k dom)) = (term733 A K _80096 k dom).
Proof. exact (TRANS (@lem6405762 A K _80096 k dom) (@lem6405810 A K _80096 k dom)). Qed.
Lemma lem6405812 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term699 A K _80096 k) = (term734 A K _80096 k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6405811 A K _80096 k dom)). Qed.
Lemma lem6405813 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6405814 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term700 A K _80096 k) = (term735 A K _80096 k).
Proof. exact (MK_COMB (@lem6405813 A) (@lem6405812 A K _80096 k)). Qed.
Lemma lem6405815 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : ((_80096 k) = (term627 A K k)) = (term735 A K _80096 k).
Proof. exact (TRANS (@lem6405744 A K _80096 k) (@lem6405814 A K _80096 k)). Qed.
Lemma lem6405816 {A K : Type'} (_80096 : type835 A K) : (term690 A K _80096) = (term736 A K _80096).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6405815 A K _80096 k)). Qed.
Lemma lem6405817 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6405818 {A K : Type'} (_80096 : type835 A K) : (term691 A K _80096) = (term737 A K _80096).
Proof. exact (MK_COMB (@lem6405817 K) (@lem6405816 A K _80096)). Qed.
Lemma lem6405819 {A K : Type'} (_80096 : type835 A K) : (_80096 = (term625 A K)) = (term737 A K _80096).
Proof. exact (TRANS (@lem6405726 A K _80096) (@lem6405818 A K _80096)). Qed.
Lemma lem6405820 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6405821 {A K : Type'} (_80096 : type835 A K) : (term667 A K _80096) = (term738 A K _80096).
Proof. exact (MK_COMB (@lem6405820) (@lem6405819 A K _80096)). Qed.
Lemma lem6405822 {A K : Type'} (_80096 : type835 A K) : (term658 A K _80096) = (term658 A K _80096).
Proof. exact (eq_refl (term658 A K _80096)). Qed.
Lemma lem6405823 {A K : Type'} (_80096 : type835 A K) : (term675 A K _80096) = (term739 A K _80096).
Proof. exact (MK_COMB (@lem6405821 A K _80096) (@lem6405822 A K _80096)). Qed.
Lemma lem6405824 {A K : Type'} : (term677 A K) = (term740 A K).
Proof. exact (fun_ext (fun _80096 : type835 A K => @lem6405823 A K _80096)). Qed.
Lemma lem6405825 {A K : Type'} : (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop)) = (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop)).
Proof. exact (eq_refl (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop))). Qed.
Lemma lem6405826 {A K : Type'} : (term679 A K) = (term741 A K).
Proof. exact (MK_COMB (@lem6405825 A K) (@lem6405824 A K)). Qed.
Lemma lem6405827 {A K : Type'} : (term666 A K) = (term666 A K).
Proof. exact (eq_refl (term666 A K)). Qed.
Lemma lem6405828 {A K : Type'} : ((term624 A K) = (term679 A K)) = ((term624 A K) = (term741 A K)).
Proof. exact (MK_COMB (@lem6405827 A K) (@lem6405826 A K)). Qed.
Lemma lem6405831 {A K : Type'} : (term624 A K) = (term741 A K).
Proof. exact (EQ_MP (@lem6405828 A K) (@lem6405708 A K)). Qed.
Lemma lem6405832 {A K : Type'} : (term623 A K) = (term741 A K).
Proof. exact (TRANS (@lem6405271 A K) (@lem6405831 A K)). Qed.
Lemma lem6405879 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : ((term438 A K k i dom f x neut) = (term461 A K k i dom f x neut)) = ((term438 A K k i dom f x neut) = (term461 A K k i dom f x neut)).
Proof. exact (eq_refl ((term438 A K k i dom f x neut) = (term461 A K k i dom f x neut))). Qed.
Lemma lem6405880 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term463 A K k i dom f neut) = (term463 A K k i dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6405879 A K k i dom f x neut)). Qed.
Lemma lem6405881 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6405882 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term464 A K k i dom f neut) = (term464 A K k i dom f neut).
Proof. exact (MK_COMB (@lem6405881 K) (@lem6405880 A K k i dom f neut)). Qed.
Lemma lem6405895 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term403 A K k dom f x neut) = (term403 A K k dom f x neut).
Proof. exact (eq_refl (term403 A K k dom f x neut)). Qed.
Lemma lem6405896 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term405 A K k dom f neut) = (term405 A K k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6405895 A K k dom f x neut)). Qed.
Lemma lem6405897 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6405898 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term406 A K k dom f neut) = (term406 A K k dom f neut).
Proof. exact (MK_COMB (@lem6405897 K) (@lem6405896 A K k dom f neut)). Qed.
Lemma lem6405899 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6405900 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term407 A K k dom f neut) = (term407 A K k dom f neut).
Proof. exact (MK_COMB (@lem6405899) (@lem6405898 A K k dom f neut)). Qed.
Lemma lem6405903 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term639 A K _80096 k dom f neut) = (term639 A K _80096 k dom f neut).
Proof. exact (eq_refl (term639 A K _80096 k dom f neut)). Qed.
Lemma lem6405904 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term640 A K _80096 k dom f neut) = (term640 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6405903 A K _80096 k dom f neut) (@lem6405900 A K k dom f neut)). Qed.
Lemma lem6405907 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term575 A K _80095 ltle k dom f neut i) = (term575 A K _80095 ltle k dom f neut i).
Proof. exact (eq_refl (term575 A K _80095 ltle k dom f neut i)). Qed.
Lemma lem6405908 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term641 A K _80095 ltle i _80096 k dom f neut) = (term641 A K _80095 ltle i _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6405907 A K _80095 ltle k dom f neut i) (@lem6405904 A K _80096 k dom f neut)). Qed.
Lemma lem6405909 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6405910 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term642 A K _80095 ltle i _80096 k dom f neut) = (term642 A K _80095 ltle i _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6405909) (@lem6405908 A K _80095 ltle i _80096 k dom f neut)). Qed.
Lemma lem6405911 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term643 A K _80095 ltle _80096 k i dom f neut) = (term643 A K _80095 ltle _80096 k i dom f neut).
Proof. exact (MK_COMB (@lem6405910 A K _80095 ltle i _80096 k dom f neut) (@lem6405882 A K k i dom f neut)). Qed.
Lemma lem6405930 {A K : Type'} (j : K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term547 A K j _80095 ltle k dom f neut) = (term547 A K j _80095 ltle k dom f neut).
Proof. exact (eq_refl (term547 A K j _80095 ltle k dom f neut)). Qed.
Lemma lem6405931 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term549 A K _80095 ltle k dom f neut) = (term549 A K _80095 ltle k dom f neut).
Proof. exact (fun_ext (fun j : K => @lem6405930 A K j _80095 ltle k dom f neut)). Qed.
Lemma lem6405932 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6405933 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term551 A K _80095 ltle k dom f neut) = (term551 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6405932 K) (@lem6405931 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6405942 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term537 A K _80095 ltle k dom f neut) = (term537 A K _80095 ltle k dom f neut).
Proof. exact (eq_refl (term537 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6405943 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term553 A K _80095 ltle k dom f neut) = (term553 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6405942 A K _80095 ltle k dom f neut) (@lem6405933 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6405946 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term523 A K _80095 ltle k dom f neut) = (term523 A K _80095 ltle k dom f neut).
Proof. exact (eq_refl (term523 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6405947 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term554 A K _80095 ltle k dom f neut) = (term554 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6405946 A K _80095 ltle k dom f neut) (@lem6405943 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6405966 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K) (x : K) : (term384 A K ltle k dom f neut j x) = (term384 A K ltle k dom f neut j x).
Proof. exact (eq_refl (term384 A K ltle k dom f neut j x)). Qed.
Lemma lem6405967 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term385 A K ltle k dom f neut x) = (term385 A K ltle k dom f neut x).
Proof. exact (fun_ext (fun j : K => @lem6405966 A K ltle k dom f neut j x)). Qed.
Lemma lem6405968 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6405969 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term386 A K ltle k dom f neut x) = (term386 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6405968 K) (@lem6405967 A K ltle k dom f neut x)). Qed.
Lemma lem6405978 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term380 A K dom f x neut) = (term380 A K dom f x neut).
Proof. exact (eq_refl (term380 A K dom f x neut)). Qed.
Lemma lem6405979 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term387 A K ltle k dom f neut x) = (term387 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6405978 A K dom f x neut) (@lem6405969 A K ltle k dom f neut x)). Qed.
Lemma lem6405982 {K : Type'} (k : K -> Prop) (x : K) : (term42 K k x) = (term42 K k x).
Proof. exact (eq_refl (term42 K k x)). Qed.
Lemma lem6405983 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term388 A K ltle k dom f neut x) = (term388 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6405982 K k x) (@lem6405979 A K ltle k dom f neut x)). Qed.
Lemma lem6405984 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6405985 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term482 A K ltle k dom f neut x) = (term482 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6405984) (@lem6405983 A K ltle k dom f neut x)). Qed.
Lemma lem6405986 {A K : Type'} (x : K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term555 A K x _80095 ltle k dom f neut) = (term555 A K x _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6405985 A K ltle k dom f neut x) (@lem6405947 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6405987 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term556 A K _80095 ltle k dom f neut) = (term556 A K _80095 ltle k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6405986 A K x _80095 ltle k dom f neut)). Qed.
Lemma lem6405988 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6405989 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term557 A K _80095 ltle k dom f neut) = (term557 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6405988 K) (@lem6405987 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6405990 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term559 A K _80095 ltle k dom f) = (term559 A K _80095 ltle k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6405989 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6405991 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6405992 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term560 A K _80095 ltle k dom f) = (term560 A K _80095 ltle k dom f).
Proof. exact (MK_COMB (@lem6405991 A) (@lem6405990 A K _80095 ltle k dom f)). Qed.
Lemma lem6405993 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term562 A K _80095 ltle k dom) = (term562 A K _80095 ltle k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6405992 A K _80095 ltle k dom f)). Qed.
Lemma lem6405994 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6405995 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term563 A K _80095 ltle k dom) = (term563 A K _80095 ltle k dom).
Proof. exact (MK_COMB (@lem6405994 A K) (@lem6405993 A K _80095 ltle k dom)). Qed.
Lemma lem6405996 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term565 A K _80095 ltle k) = (term565 A K _80095 ltle k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6405995 A K _80095 ltle k dom)). Qed.
Lemma lem6405997 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6405998 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term566 A K _80095 ltle k) = (term566 A K _80095 ltle k).
Proof. exact (MK_COMB (@lem6405997 A) (@lem6405996 A K _80095 ltle k)). Qed.
Lemma lem6405999 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term568 A K _80095 ltle) = (term568 A K _80095 ltle).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6405998 A K _80095 ltle k)). Qed.
Lemma lem6406000 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6406001 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term569 A K _80095 ltle) = (term569 A K _80095 ltle).
Proof. exact (MK_COMB (@lem6406000 K) (@lem6405999 A K _80095 ltle)). Qed.
Lemma lem6406002 {A K : Type'} (_80095 : type756 A K) : (term571 A K _80095) = (term571 A K _80095).
Proof. exact (fun_ext (fun ltle : type1402 K => @lem6406001 A K _80095 ltle)). Qed.
Lemma lem6406003 {K : Type'} : (@all (K -> K -> Prop)) = (@all (K -> K -> Prop)).
Proof. exact (eq_refl (@all (K -> K -> Prop))). Qed.
Lemma lem6406004 {A K : Type'} (_80095 : type756 A K) : (term572 A K _80095) = (term572 A K _80095).
Proof. exact (MK_COMB (@lem6406003 K) (@lem6406002 A K _80095)). Qed.
Lemma lem6406005 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6406006 {A K : Type'} (_80095 : type756 A K) : (term574 A K _80095) = (term574 A K _80095).
Proof. exact (MK_COMB (@lem6406005) (@lem6406004 A K _80095)). Qed.
Lemma lem6406007 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term644 A K _80095 ltle _80096 k i dom f neut) = (term644 A K _80095 ltle _80096 k i dom f neut).
Proof. exact (MK_COMB (@lem6406006 A K _80095) (@lem6405911 A K _80095 ltle _80096 k i dom f neut)). Qed.
Lemma lem6406008 {A K : Type'} (ltle : type1402 K) (_80096 : type835 A K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term645 A K ltle _80096 k i dom f neut) = (term645 A K ltle _80096 k i dom f neut).
Proof. exact (fun_ext (fun _80095 : type756 A K => @lem6406007 A K _80095 ltle _80096 k i dom f neut)). Qed.
Lemma lem6406009 {A K : Type'} : (@all ((K -> K -> Prop) -> (K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K)) = (@all ((K -> K -> Prop) -> (K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K)).
Proof. exact (eq_refl (@all ((K -> K -> Prop) -> (K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K))). Qed.
Lemma lem6406010 {A K : Type'} (ltle : type1402 K) (_80096 : type835 A K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term646 A K ltle _80096 k i dom f neut) = (term646 A K ltle _80096 k i dom f neut).
Proof. exact (MK_COMB (@lem6406009 A K) (@lem6406008 A K ltle _80096 k i dom f neut)). Qed.
Lemma lem6406011 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term647 A K _80096 k i dom f neut) = (term647 A K _80096 k i dom f neut).
Proof. exact (fun_ext (fun ltle : type1402 K => @lem6406010 A K ltle _80096 k i dom f neut)). Qed.
Lemma lem6406012 {K : Type'} : (@all (K -> K -> Prop)) = (@all (K -> K -> Prop)).
Proof. exact (eq_refl (@all (K -> K -> Prop))). Qed.
Lemma lem6406013 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term648 A K _80096 k i dom f neut) = (term648 A K _80096 k i dom f neut).
Proof. exact (MK_COMB (@lem6406012 K) (@lem6406011 A K _80096 k i dom f neut)). Qed.
Lemma lem6406014 {A K : Type'} (_80096 : type835 A K) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term649 A K _80096 i dom f neut) = (term649 A K _80096 i dom f neut).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6406013 A K _80096 k i dom f neut)). Qed.
Lemma lem6406015 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6406016 {A K : Type'} (_80096 : type835 A K) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term650 A K _80096 i dom f neut) = (term650 A K _80096 i dom f neut).
Proof. exact (MK_COMB (@lem6406015 K) (@lem6406014 A K _80096 i dom f neut)). Qed.
Lemma lem6406017 {A K : Type'} (_80096 : type835 A K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term651 A K _80096 dom f neut) = (term651 A K _80096 dom f neut).
Proof. exact (fun_ext (fun i : K => @lem6406016 A K _80096 i dom f neut)). Qed.
Lemma lem6406018 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6406019 {A K : Type'} (_80096 : type835 A K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term652 A K _80096 dom f neut) = (term652 A K _80096 dom f neut).
Proof. exact (MK_COMB (@lem6406018 K) (@lem6406017 A K _80096 dom f neut)). Qed.
Lemma lem6406020 {A K : Type'} (_80096 : type835 A K) (f : K -> A) (neut : A) : (term653 A K _80096 f neut) = (term653 A K _80096 f neut).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6406019 A K _80096 dom f neut)). Qed.
Lemma lem6406021 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6406022 {A K : Type'} (_80096 : type835 A K) (f : K -> A) (neut : A) : (term654 A K _80096 f neut) = (term654 A K _80096 f neut).
Proof. exact (MK_COMB (@lem6406021 A) (@lem6406020 A K _80096 f neut)). Qed.
Lemma lem6406023 {A K : Type'} (_80096 : type835 A K) (neut : A) : (term655 A K _80096 neut) = (term655 A K _80096 neut).
Proof. exact (fun_ext (fun f : K -> A => @lem6406022 A K _80096 f neut)). Qed.
Lemma lem6406024 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6406025 {A K : Type'} (_80096 : type835 A K) (neut : A) : (term656 A K _80096 neut) = (term656 A K _80096 neut).
Proof. exact (MK_COMB (@lem6406024 A K) (@lem6406023 A K _80096 neut)). Qed.
Lemma lem6406026 {A K : Type'} (_80096 : type835 A K) : (term657 A K _80096) = (term657 A K _80096).
Proof. exact (fun_ext (fun neut : A => @lem6406025 A K _80096 neut)). Qed.
Lemma lem6406027 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6406028 {A K : Type'} (_80096 : type835 A K) : (term658 A K _80096) = (term658 A K _80096).
Proof. exact (MK_COMB (@lem6406027 A) (@lem6406026 A K _80096)). Qed.
Lemma lem6406029 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term395 A K GEN_PVAR_263 k dom f neut i) = (term395 A K GEN_PVAR_263 k dom f neut i).
Proof. exact (eq_refl (term395 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6406030 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term396 A K GEN_PVAR_263 k dom f neut) = (term396 A K GEN_PVAR_263 k dom f neut).
Proof. exact (fun_ext (fun i : K => @lem6406029 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6406031 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6406032 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term397 A K GEN_PVAR_263 k dom f neut) = (term397 A K GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6406031 K) (@lem6406030 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6406035 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (GEN_PVAR_263 : K) : (term726 A K _80096 k dom f neut GEN_PVAR_263) = (term726 A K _80096 k dom f neut GEN_PVAR_263).
Proof. exact (eq_refl (term726 A K _80096 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6406036 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_80096 k dom f neut GEN_PVAR_263) = (term397 A K GEN_PVAR_263 k dom f neut)) = ((_80096 k dom f neut GEN_PVAR_263) = (term397 A K GEN_PVAR_263 k dom f neut)).
Proof. exact (MK_COMB (@lem6406035 A K _80096 k dom f neut GEN_PVAR_263) (@lem6406032 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6406037 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term728 A K _80096 k dom f neut) = (term728 A K _80096 k dom f neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6406036 A K _80096 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6406038 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6406039 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term729 A K _80096 k dom f neut) = (term729 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6406038 K) (@lem6406037 A K _80096 k dom f neut)). Qed.
Lemma lem6406040 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term730 A K _80096 k dom f) = (term730 A K _80096 k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6406039 A K _80096 k dom f neut)). Qed.
Lemma lem6406041 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6406042 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term731 A K _80096 k dom f) = (term731 A K _80096 k dom f).
Proof. exact (MK_COMB (@lem6406041 A) (@lem6406040 A K _80096 k dom f)). Qed.
Lemma lem6406043 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term732 A K _80096 k dom) = (term732 A K _80096 k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6406042 A K _80096 k dom f)). Qed.
Lemma lem6406044 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6406045 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term733 A K _80096 k dom) = (term733 A K _80096 k dom).
Proof. exact (MK_COMB (@lem6406044 A K) (@lem6406043 A K _80096 k dom)). Qed.
Lemma lem6406046 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term734 A K _80096 k) = (term734 A K _80096 k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6406045 A K _80096 k dom)). Qed.
Lemma lem6406047 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6406048 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term735 A K _80096 k) = (term735 A K _80096 k).
Proof. exact (MK_COMB (@lem6406047 A) (@lem6406046 A K _80096 k)). Qed.
Lemma lem6406049 {A K : Type'} (_80096 : type835 A K) : (term736 A K _80096) = (term736 A K _80096).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6406048 A K _80096 k)). Qed.
Lemma lem6406050 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6406051 {A K : Type'} (_80096 : type835 A K) : (term737 A K _80096) = (term737 A K _80096).
Proof. exact (MK_COMB (@lem6406050 K) (@lem6406049 A K _80096)). Qed.
Lemma lem6406052 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6406053 {A K : Type'} (_80096 : type835 A K) : (term738 A K _80096) = (term738 A K _80096).
Proof. exact (MK_COMB (@lem6406052) (@lem6406051 A K _80096)). Qed.
Lemma lem6406054 {A K : Type'} (_80096 : type835 A K) : (term739 A K _80096) = (term739 A K _80096).
Proof. exact (MK_COMB (@lem6406053 A K _80096) (@lem6406028 A K _80096)). Qed.
Lemma lem6406055 {A K : Type'} : (term740 A K) = (term740 A K).
Proof. exact (fun_ext (fun _80096 : type835 A K => @lem6406054 A K _80096)). Qed.
Lemma lem6406056 {A K : Type'} : (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop)) = (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop)).
Proof. exact (eq_refl (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop))). Qed.
Lemma lem6406057 {A K : Type'} : (term741 A K) = (term741 A K).
Proof. exact (MK_COMB (@lem6406056 A K) (@lem6406055 A K)). Qed.
Lemma lem6406268 {A K : Type'} : (term623 A K) = (term741 A K).
Proof. exact (TRANS (@lem6405832 A K) (@lem6406057 A K)). Qed.
Lemma lem6406269 {A K : Type'} : (term741 A K) = (term623 A K).
Proof. exact (SYM (@lem6406268 A K)). Qed.
Lemma lem6406270 {A K : Type'} (_80096 : type835 A K) (h1 : term737 A K _80096) : term737 A K _80096.
Proof. exact (h1). Qed.
Lemma lem6406271 {A K : Type'} (_80095 : type756 A K) (h1 : term572 A K _80095) : term572 A K _80095.
Proof. exact (h1). Qed.
Lemma lem6406272 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term641 A K _80095 ltle i _80096 k dom f neut) : term641 A K _80095 ltle i _80096 k dom f neut.
Proof. exact (h1). Qed.
Lemma lem6406274 (p : Prop) : p = (term50 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem6406275 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : ((term438 A K k i dom f x neut) = (term461 A K k i dom f x neut)) = (term742 A K k i dom f x neut).
Proof. exact (@lem6406274 ((term438 A K k i dom f x neut) = (term461 A K k i dom f x neut))). Qed.
Lemma lem6406276 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term742 A K k i dom f x neut) = ((term438 A K k i dom f x neut) = (term461 A K k i dom f x neut)).
Proof. exact (SYM (@lem6406275 A K k i dom f x neut)). Qed.
Lemma lem6406277 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term743 A K k i dom f x neut) : term743 A K k i dom f x neut.
Proof. exact (h1). Qed.
Lemma lem6406281 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term395 A K GEN_PVAR_263 k dom f neut i) = (term395 A K GEN_PVAR_263 k dom f neut i).
Proof. exact (eq_refl (term395 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6406282 {K : Type'} (P : K -> Prop) : (term744 K P) = (term745 K P).
Proof. exact (@lem18394 K P). Qed.
Lemma lem6406283 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term746 A K GEN_PVAR_263 k dom f neut) = (term747 A K GEN_PVAR_263 k dom f neut).
Proof. exact (@lem6406282 K (term396 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6406284 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term748 A K GEN_PVAR_263 k dom f neut i) = (term395 A K GEN_PVAR_263 k dom f neut i).
Proof. exact (eq_refl (term748 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6406285 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6406287 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term749 A K GEN_PVAR_263 k dom f neut i) = (term750 A K GEN_PVAR_263 k dom f neut i).
Proof. exact (MK_COMB (@lem6406285) (@lem6406284 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6406288 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term751 A K GEN_PVAR_263 k dom f neut) = (term752 A K GEN_PVAR_263 k dom f neut).
Proof. exact (fun_ext (fun i : K => @lem6406287 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6406289 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6406290 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term747 A K GEN_PVAR_263 k dom f neut) = (term753 A K GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6406289 K) (@lem6406288 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6406291 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term746 A K GEN_PVAR_263 k dom f neut) = (term753 A K GEN_PVAR_263 k dom f neut).
Proof. exact (TRANS (@lem6406283 A K GEN_PVAR_263 k dom f neut) (@lem6406290 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6406292 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term396 A K GEN_PVAR_263 k dom f neut) = (term396 A K GEN_PVAR_263 k dom f neut).
Proof. exact (fun_ext (fun i : K => @lem6406281 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6406293 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6406294 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term397 A K GEN_PVAR_263 k dom f neut) = (term397 A K GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6406293 K) (@lem6406292 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6406296 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (GEN_PVAR_263 : K) : (term754 A K _80096 k dom f neut GEN_PVAR_263) = (term754 A K _80096 k dom f neut GEN_PVAR_263).
Proof. exact (eq_refl (term754 A K _80096 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6406297 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term755 A K _80096 GEN_PVAR_263 k dom f neut) = (term755 A K _80096 GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6406296 A K _80096 k dom f neut GEN_PVAR_263) (@lem6406294 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6406299 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (GEN_PVAR_263 : K) : (term756 A K _80096 k dom f neut GEN_PVAR_263) = (term756 A K _80096 k dom f neut GEN_PVAR_263).
Proof. exact (eq_refl (term756 A K _80096 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6406300 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term757 A K _80096 GEN_PVAR_263 k dom f neut) = (term758 A K _80096 GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6406299 A K _80096 k dom f neut GEN_PVAR_263) (@lem6406291 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6406301 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6406302 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term759 A K _80096 GEN_PVAR_263 k dom f neut) = (term760 A K _80096 GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6406301) (@lem6406300 A K _80096 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6406303 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term761 A K _80096 GEN_PVAR_263 k dom f neut) = (term762 A K _80096 GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6406302 A K _80096 GEN_PVAR_263 k dom f neut) (@lem6406297 A K _80096 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6406304 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_80096 k dom f neut GEN_PVAR_263) = (term397 A K GEN_PVAR_263 k dom f neut)) = (term761 A K _80096 GEN_PVAR_263 k dom f neut).
Proof. exact (@lem17784 (_80096 k dom f neut GEN_PVAR_263) (term397 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6406305 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_80096 k dom f neut GEN_PVAR_263) = (term397 A K GEN_PVAR_263 k dom f neut)) = (term762 A K _80096 GEN_PVAR_263 k dom f neut).
Proof. exact (TRANS (@lem6406304 A K _80096 GEN_PVAR_263 k dom f neut) (@lem6406303 A K _80096 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6406306 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term728 A K _80096 k dom f neut) = (term763 A K _80096 k dom f neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6406305 A K _80096 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6406307 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6406308 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term729 A K _80096 k dom f neut) = (term764 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6406307 K) (@lem6406306 A K _80096 k dom f neut)). Qed.
Lemma lem6406309 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term730 A K _80096 k dom f) = (term765 A K _80096 k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6406308 A K _80096 k dom f neut)). Qed.
Lemma lem6406310 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6406311 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term731 A K _80096 k dom f) = (term766 A K _80096 k dom f).
Proof. exact (MK_COMB (@lem6406310 A) (@lem6406309 A K _80096 k dom f)). Qed.
Lemma lem6406312 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term732 A K _80096 k dom) = (term767 A K _80096 k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6406311 A K _80096 k dom f)). Qed.
Lemma lem6406313 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6406314 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term733 A K _80096 k dom) = (term768 A K _80096 k dom).
Proof. exact (MK_COMB (@lem6406313 A K) (@lem6406312 A K _80096 k dom)). Qed.
Lemma lem6406315 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term734 A K _80096 k) = (term769 A K _80096 k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6406314 A K _80096 k dom)). Qed.
Lemma lem6406316 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6406317 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term735 A K _80096 k) = (term770 A K _80096 k).
Proof. exact (MK_COMB (@lem6406316 A) (@lem6406315 A K _80096 k)). Qed.
Lemma lem6406318 {A K : Type'} (_80096 : type835 A K) : (term736 A K _80096) = (term771 A K _80096).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6406317 A K _80096 k)). Qed.
Lemma lem6406319 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6406320 {A K : Type'} (_80096 : type835 A K) : (term737 A K _80096) = (term772 A K _80096).
Proof. exact (MK_COMB (@lem6406319 K) (@lem6406318 A K _80096)). Qed.
Lemma lem6406338 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term773 A P Q) = (term774 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem6406339 {K : Type'} (P : K -> Prop) (Q : K -> Prop) : (term773 K P Q) = (term774 K P Q).
Proof. exact (@lem6406338 K P Q). Qed.
Lemma lem6406340 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term775 A K _80096 k dom f neut) = (term776 A K _80096 k dom f neut).
Proof. exact (@lem6406339 K (term777 A K _80096 k dom f neut) (term778 A K _80096 k dom f neut)). Qed.
Lemma lem6406341 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term779 A K _80096 k dom f neut GEN_PVAR_263) = (term758 A K _80096 GEN_PVAR_263 k dom f neut).
Proof. exact (eq_refl (term779 A K _80096 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6406342 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6406343 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term780 A K _80096 k dom f neut GEN_PVAR_263) = (term760 A K _80096 GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6406342) (@lem6406341 A K _80096 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6406344 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term781 A K _80096 k dom f neut GEN_PVAR_263) = (term755 A K _80096 GEN_PVAR_263 k dom f neut).
Proof. exact (eq_refl (term781 A K _80096 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6406345 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term782 A K _80096 k dom f neut GEN_PVAR_263) = (term762 A K _80096 GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6406343 A K _80096 GEN_PVAR_263 k dom f neut) (@lem6406344 A K _80096 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6406346 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term783 A K _80096 k dom f neut) = (term763 A K _80096 k dom f neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6406345 A K _80096 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6406347 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6406348 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term775 A K _80096 k dom f neut) = (term764 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6406347 K) (@lem6406346 A K _80096 k dom f neut)). Qed.
Lemma lem6406349 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6406350 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term784 A K _80096 k dom f neut) = (term785 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6406349) (@lem6406348 A K _80096 k dom f neut)). Qed.
Lemma lem6406351 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term779 A K _80096 k dom f neut GEN_PVAR_263) = (term758 A K _80096 GEN_PVAR_263 k dom f neut).
Proof. exact (eq_refl (term779 A K _80096 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6406352 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term786 A K _80096 k dom f neut) = (term777 A K _80096 k dom f neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6406351 A K _80096 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6406353 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6406354 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term787 A K _80096 k dom f neut) = (term788 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6406353 K) (@lem6406352 A K _80096 k dom f neut)). Qed.
Lemma lem6406355 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6406356 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term789 A K _80096 k dom f neut) = (term790 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6406355) (@lem6406354 A K _80096 k dom f neut)). Qed.
Lemma lem6406357 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term781 A K _80096 k dom f neut GEN_PVAR_263) = (term755 A K _80096 GEN_PVAR_263 k dom f neut).
Proof. exact (eq_refl (term781 A K _80096 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6406358 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term791 A K _80096 k dom f neut) = (term778 A K _80096 k dom f neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6406357 A K _80096 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6406359 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6406360 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term792 A K _80096 k dom f neut) = (term793 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6406359 K) (@lem6406358 A K _80096 k dom f neut)). Qed.
Lemma lem6406361 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term776 A K _80096 k dom f neut) = (term794 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6406356 A K _80096 k dom f neut) (@lem6406360 A K _80096 k dom f neut)). Qed.
Lemma lem6406362 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term775 A K _80096 k dom f neut) = (term776 A K _80096 k dom f neut)) = ((term764 A K _80096 k dom f neut) = (term794 A K _80096 k dom f neut)).
Proof. exact (MK_COMB (@lem6406350 A K _80096 k dom f neut) (@lem6406361 A K _80096 k dom f neut)). Qed.
Lemma lem6406363 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term764 A K _80096 k dom f neut) = (term794 A K _80096 k dom f neut).
Proof. exact (EQ_MP (@lem6406362 A K _80096 k dom f neut) (@lem6406340 A K _80096 k dom f neut)). Qed.
Lemma lem6406468 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term765 A K _80096 k dom f) = (term795 A K _80096 k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6406363 A K _80096 k dom f neut)). Qed.
Lemma lem6406469 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6406470 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term766 A K _80096 k dom f) = (term796 A K _80096 k dom f).
Proof. exact (MK_COMB (@lem6406469 A) (@lem6406468 A K _80096 k dom f)). Qed.
Lemma lem6406472 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term773 A P Q) = (term774 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem6406473 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term773 A P Q) = (term774 A P Q).
Proof. exact (@lem6406472 A P Q). Qed.
Lemma lem6406474 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term797 A K _80096 k dom f) = (term798 A K _80096 k dom f).
Proof. exact (@lem6406473 A (term799 A K _80096 k dom f) (term800 A K _80096 k dom f)). Qed.
Lemma lem6406475 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term801 A K _80096 k dom f neut) = (term788 A K _80096 k dom f neut).
Proof. exact (eq_refl (term801 A K _80096 k dom f neut)). Qed.
Lemma lem6406476 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6406477 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term802 A K _80096 k dom f neut) = (term790 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6406476) (@lem6406475 A K _80096 k dom f neut)). Qed.
Lemma lem6406478 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term803 A K _80096 k dom f neut) = (term793 A K _80096 k dom f neut).
Proof. exact (eq_refl (term803 A K _80096 k dom f neut)). Qed.
Lemma lem6406479 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term804 A K _80096 k dom f neut) = (term794 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6406477 A K _80096 k dom f neut) (@lem6406478 A K _80096 k dom f neut)). Qed.
Lemma lem6406480 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term805 A K _80096 k dom f) = (term795 A K _80096 k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6406479 A K _80096 k dom f neut)). Qed.
Lemma lem6406481 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6406482 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term797 A K _80096 k dom f) = (term796 A K _80096 k dom f).
Proof. exact (MK_COMB (@lem6406481 A) (@lem6406480 A K _80096 k dom f)). Qed.
Lemma lem6406483 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6406484 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term806 A K _80096 k dom f) = (term807 A K _80096 k dom f).
Proof. exact (MK_COMB (@lem6406483) (@lem6406482 A K _80096 k dom f)). Qed.
Lemma lem6406485 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term801 A K _80096 k dom f neut) = (term788 A K _80096 k dom f neut).
Proof. exact (eq_refl (term801 A K _80096 k dom f neut)). Qed.
Lemma lem6406486 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term808 A K _80096 k dom f) = (term799 A K _80096 k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6406485 A K _80096 k dom f neut)). Qed.
Lemma lem6406487 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6406488 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term809 A K _80096 k dom f) = (term810 A K _80096 k dom f).
Proof. exact (MK_COMB (@lem6406487 A) (@lem6406486 A K _80096 k dom f)). Qed.
Lemma lem6406489 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6406490 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term811 A K _80096 k dom f) = (term812 A K _80096 k dom f).
Proof. exact (MK_COMB (@lem6406489) (@lem6406488 A K _80096 k dom f)). Qed.
Lemma lem6406491 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term803 A K _80096 k dom f neut) = (term793 A K _80096 k dom f neut).
Proof. exact (eq_refl (term803 A K _80096 k dom f neut)). Qed.
Lemma lem6406492 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term813 A K _80096 k dom f) = (term800 A K _80096 k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6406491 A K _80096 k dom f neut)). Qed.
Lemma lem6406493 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6406494 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term814 A K _80096 k dom f) = (term815 A K _80096 k dom f).
Proof. exact (MK_COMB (@lem6406493 A) (@lem6406492 A K _80096 k dom f)). Qed.
Lemma lem6406495 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term798 A K _80096 k dom f) = (term816 A K _80096 k dom f).
Proof. exact (MK_COMB (@lem6406490 A K _80096 k dom f) (@lem6406494 A K _80096 k dom f)). Qed.
Lemma lem6406496 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : ((term797 A K _80096 k dom f) = (term798 A K _80096 k dom f)) = ((term796 A K _80096 k dom f) = (term816 A K _80096 k dom f)).
Proof. exact (MK_COMB (@lem6406484 A K _80096 k dom f) (@lem6406495 A K _80096 k dom f)). Qed.
Lemma lem6406497 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term796 A K _80096 k dom f) = (term816 A K _80096 k dom f).
Proof. exact (EQ_MP (@lem6406496 A K _80096 k dom f) (@lem6406474 A K _80096 k dom f)). Qed.
Lemma lem6406610 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term766 A K _80096 k dom f) = (term816 A K _80096 k dom f).
Proof. exact (TRANS (@lem6406470 A K _80096 k dom f) (@lem6406497 A K _80096 k dom f)). Qed.
Lemma lem6406611 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term767 A K _80096 k dom) = (term817 A K _80096 k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6406610 A K _80096 k dom f)). Qed.
Lemma lem6406612 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6406613 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term768 A K _80096 k dom) = (term818 A K _80096 k dom).
Proof. exact (MK_COMB (@lem6406612 A K) (@lem6406611 A K _80096 k dom)). Qed.
Lemma lem6406615 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term773 A P Q) = (term774 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem6406616 {A K : Type'} (P : type805 A K) (Q : type805 A K) : (term819 A K P Q) = (term820 A K P Q).
Proof. exact (@lem6406615 (K -> A) P Q). Qed.
Lemma lem6406617 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term821 A K _80096 k dom) = (term822 A K _80096 k dom).
Proof. exact (@lem6406616 A K (term823 A K _80096 k dom) (term824 A K _80096 k dom)). Qed.
Lemma lem6406618 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term825 A K _80096 k dom f) = (term810 A K _80096 k dom f).
Proof. exact (eq_refl (term825 A K _80096 k dom f)). Qed.
Lemma lem6406619 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6406620 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term826 A K _80096 k dom f) = (term812 A K _80096 k dom f).
Proof. exact (MK_COMB (@lem6406619) (@lem6406618 A K _80096 k dom f)). Qed.
Lemma lem6406621 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term827 A K _80096 k dom f) = (term815 A K _80096 k dom f).
Proof. exact (eq_refl (term827 A K _80096 k dom f)). Qed.
Lemma lem6406622 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term828 A K _80096 k dom f) = (term816 A K _80096 k dom f).
Proof. exact (MK_COMB (@lem6406620 A K _80096 k dom f) (@lem6406621 A K _80096 k dom f)). Qed.
Lemma lem6406623 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term829 A K _80096 k dom) = (term817 A K _80096 k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6406622 A K _80096 k dom f)). Qed.
Lemma lem6406624 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6406625 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term821 A K _80096 k dom) = (term818 A K _80096 k dom).
Proof. exact (MK_COMB (@lem6406624 A K) (@lem6406623 A K _80096 k dom)). Qed.
Lemma lem6406626 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6406627 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term830 A K _80096 k dom) = (term831 A K _80096 k dom).
Proof. exact (MK_COMB (@lem6406626) (@lem6406625 A K _80096 k dom)). Qed.
Lemma lem6406628 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term825 A K _80096 k dom f) = (term810 A K _80096 k dom f).
Proof. exact (eq_refl (term825 A K _80096 k dom f)). Qed.
Lemma lem6406629 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term832 A K _80096 k dom) = (term823 A K _80096 k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6406628 A K _80096 k dom f)). Qed.
Lemma lem6406630 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6406631 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term833 A K _80096 k dom) = (term834 A K _80096 k dom).
Proof. exact (MK_COMB (@lem6406630 A K) (@lem6406629 A K _80096 k dom)). Qed.
Lemma lem6406632 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6406633 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term835 A K _80096 k dom) = (term836 A K _80096 k dom).
Proof. exact (MK_COMB (@lem6406632) (@lem6406631 A K _80096 k dom)). Qed.
Lemma lem6406634 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term827 A K _80096 k dom f) = (term815 A K _80096 k dom f).
Proof. exact (eq_refl (term827 A K _80096 k dom f)). Qed.
Lemma lem6406635 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term837 A K _80096 k dom) = (term824 A K _80096 k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6406634 A K _80096 k dom f)). Qed.
Lemma lem6406636 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6406637 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term838 A K _80096 k dom) = (term839 A K _80096 k dom).
Proof. exact (MK_COMB (@lem6406636 A K) (@lem6406635 A K _80096 k dom)). Qed.
Lemma lem6406638 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term822 A K _80096 k dom) = (term840 A K _80096 k dom).
Proof. exact (MK_COMB (@lem6406633 A K _80096 k dom) (@lem6406637 A K _80096 k dom)). Qed.
Lemma lem6406639 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : ((term821 A K _80096 k dom) = (term822 A K _80096 k dom)) = ((term818 A K _80096 k dom) = (term840 A K _80096 k dom)).
Proof. exact (MK_COMB (@lem6406627 A K _80096 k dom) (@lem6406638 A K _80096 k dom)). Qed.
Lemma lem6406640 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term818 A K _80096 k dom) = (term840 A K _80096 k dom).
Proof. exact (EQ_MP (@lem6406639 A K _80096 k dom) (@lem6406617 A K _80096 k dom)). Qed.
Lemma lem6406761 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term768 A K _80096 k dom) = (term840 A K _80096 k dom).
Proof. exact (TRANS (@lem6406613 A K _80096 k dom) (@lem6406640 A K _80096 k dom)). Qed.
Lemma lem6406762 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term769 A K _80096 k) = (term841 A K _80096 k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6406761 A K _80096 k dom)). Qed.
Lemma lem6406763 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6406764 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term770 A K _80096 k) = (term842 A K _80096 k).
Proof. exact (MK_COMB (@lem6406763 A) (@lem6406762 A K _80096 k)). Qed.
Lemma lem6406766 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term773 A P Q) = (term774 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem6406767 {A : Type'} (P : type686 A) (Q : type686 A) : (term843 A P Q) = (term844 A P Q).
Proof. exact (@lem6406766 (A -> Prop) P Q). Qed.
Lemma lem6406768 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term845 A K _80096 k) = (term846 A K _80096 k).
Proof. exact (@lem6406767 A (term847 A K _80096 k) (term848 A K _80096 k)). Qed.
Lemma lem6406769 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term849 A K _80096 k dom) = (term834 A K _80096 k dom).
Proof. exact (eq_refl (term849 A K _80096 k dom)). Qed.
Lemma lem6406770 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6406771 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term850 A K _80096 k dom) = (term836 A K _80096 k dom).
Proof. exact (MK_COMB (@lem6406770) (@lem6406769 A K _80096 k dom)). Qed.
Lemma lem6406772 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term851 A K _80096 k dom) = (term839 A K _80096 k dom).
Proof. exact (eq_refl (term851 A K _80096 k dom)). Qed.
Lemma lem6406773 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term852 A K _80096 k dom) = (term840 A K _80096 k dom).
Proof. exact (MK_COMB (@lem6406771 A K _80096 k dom) (@lem6406772 A K _80096 k dom)). Qed.
Lemma lem6406774 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term853 A K _80096 k) = (term841 A K _80096 k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6406773 A K _80096 k dom)). Qed.
Lemma lem6406775 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6406776 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term845 A K _80096 k) = (term842 A K _80096 k).
Proof. exact (MK_COMB (@lem6406775 A) (@lem6406774 A K _80096 k)). Qed.
Lemma lem6406777 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6406778 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term854 A K _80096 k) = (term855 A K _80096 k).
Proof. exact (MK_COMB (@lem6406777) (@lem6406776 A K _80096 k)). Qed.
Lemma lem6406779 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term849 A K _80096 k dom) = (term834 A K _80096 k dom).
Proof. exact (eq_refl (term849 A K _80096 k dom)). Qed.
Lemma lem6406780 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term856 A K _80096 k) = (term847 A K _80096 k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6406779 A K _80096 k dom)). Qed.
Lemma lem6406781 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6406782 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term857 A K _80096 k) = (term858 A K _80096 k).
Proof. exact (MK_COMB (@lem6406781 A) (@lem6406780 A K _80096 k)). Qed.
Lemma lem6406783 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6406784 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term859 A K _80096 k) = (term860 A K _80096 k).
Proof. exact (MK_COMB (@lem6406783) (@lem6406782 A K _80096 k)). Qed.
Lemma lem6406785 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term851 A K _80096 k dom) = (term839 A K _80096 k dom).
Proof. exact (eq_refl (term851 A K _80096 k dom)). Qed.
Lemma lem6406786 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term861 A K _80096 k) = (term848 A K _80096 k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6406785 A K _80096 k dom)). Qed.
Lemma lem6406787 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6406788 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term862 A K _80096 k) = (term863 A K _80096 k).
Proof. exact (MK_COMB (@lem6406787 A) (@lem6406786 A K _80096 k)). Qed.
Lemma lem6406789 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term846 A K _80096 k) = (term864 A K _80096 k).
Proof. exact (MK_COMB (@lem6406784 A K _80096 k) (@lem6406788 A K _80096 k)). Qed.
Lemma lem6406790 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : ((term845 A K _80096 k) = (term846 A K _80096 k)) = ((term842 A K _80096 k) = (term864 A K _80096 k)).
Proof. exact (MK_COMB (@lem6406778 A K _80096 k) (@lem6406789 A K _80096 k)). Qed.
Lemma lem6406791 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term842 A K _80096 k) = (term864 A K _80096 k).
Proof. exact (EQ_MP (@lem6406790 A K _80096 k) (@lem6406768 A K _80096 k)). Qed.
Lemma lem6406920 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term770 A K _80096 k) = (term864 A K _80096 k).
Proof. exact (TRANS (@lem6406764 A K _80096 k) (@lem6406791 A K _80096 k)). Qed.
Lemma lem6406921 {A K : Type'} (_80096 : type835 A K) : (term771 A K _80096) = (term865 A K _80096).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6406920 A K _80096 k)). Qed.
Lemma lem6406922 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6406923 {A K : Type'} (_80096 : type835 A K) : (term772 A K _80096) = (term866 A K _80096).
Proof. exact (MK_COMB (@lem6406922 K) (@lem6406921 A K _80096)). Qed.
Lemma lem6406925 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term773 A P Q) = (term774 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem6406926 {K : Type'} (P : type686 K) (Q : type686 K) : (term843 K P Q) = (term844 K P Q).
Proof. exact (@lem6406925 (K -> Prop) P Q). Qed.
Lemma lem6406927 {A K : Type'} (_80096 : type835 A K) : (term867 A K _80096) = (term868 A K _80096).
Proof. exact (@lem6406926 K (term869 A K _80096) (term870 A K _80096)). Qed.
Lemma lem6406928 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term871 A K _80096 k) = (term858 A K _80096 k).
Proof. exact (eq_refl (term871 A K _80096 k)). Qed.
Lemma lem6406929 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6406930 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term872 A K _80096 k) = (term860 A K _80096 k).
Proof. exact (MK_COMB (@lem6406929) (@lem6406928 A K _80096 k)). Qed.
Lemma lem6406931 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term873 A K _80096 k) = (term863 A K _80096 k).
Proof. exact (eq_refl (term873 A K _80096 k)). Qed.
Lemma lem6406932 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term874 A K _80096 k) = (term864 A K _80096 k).
Proof. exact (MK_COMB (@lem6406930 A K _80096 k) (@lem6406931 A K _80096 k)). Qed.
Lemma lem6406933 {A K : Type'} (_80096 : type835 A K) : (term875 A K _80096) = (term865 A K _80096).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6406932 A K _80096 k)). Qed.
Lemma lem6406934 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6406935 {A K : Type'} (_80096 : type835 A K) : (term867 A K _80096) = (term866 A K _80096).
Proof. exact (MK_COMB (@lem6406934 K) (@lem6406933 A K _80096)). Qed.
Lemma lem6406936 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6406937 {A K : Type'} (_80096 : type835 A K) : (term876 A K _80096) = (term877 A K _80096).
Proof. exact (MK_COMB (@lem6406936) (@lem6406935 A K _80096)). Qed.
Lemma lem6406938 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term871 A K _80096 k) = (term858 A K _80096 k).
Proof. exact (eq_refl (term871 A K _80096 k)). Qed.
Lemma lem6406939 {A K : Type'} (_80096 : type835 A K) : (term878 A K _80096) = (term869 A K _80096).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6406938 A K _80096 k)). Qed.
Lemma lem6406940 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6406941 {A K : Type'} (_80096 : type835 A K) : (term879 A K _80096) = (term880 A K _80096).
Proof. exact (MK_COMB (@lem6406940 K) (@lem6406939 A K _80096)). Qed.
Lemma lem6406942 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6406943 {A K : Type'} (_80096 : type835 A K) : (term881 A K _80096) = (term882 A K _80096).
Proof. exact (MK_COMB (@lem6406942) (@lem6406941 A K _80096)). Qed.
Lemma lem6406944 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term873 A K _80096 k) = (term863 A K _80096 k).
Proof. exact (eq_refl (term873 A K _80096 k)). Qed.
Lemma lem6406945 {A K : Type'} (_80096 : type835 A K) : (term883 A K _80096) = (term870 A K _80096).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6406944 A K _80096 k)). Qed.
Lemma lem6406946 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6406947 {A K : Type'} (_80096 : type835 A K) : (term884 A K _80096) = (term885 A K _80096).
Proof. exact (MK_COMB (@lem6406946 K) (@lem6406945 A K _80096)). Qed.
Lemma lem6406948 {A K : Type'} (_80096 : type835 A K) : (term868 A K _80096) = (term886 A K _80096).
Proof. exact (MK_COMB (@lem6406943 A K _80096) (@lem6406947 A K _80096)). Qed.
Lemma lem6406949 {A K : Type'} (_80096 : type835 A K) : ((term867 A K _80096) = (term868 A K _80096)) = ((term866 A K _80096) = (term886 A K _80096)).
Proof. exact (MK_COMB (@lem6406937 A K _80096) (@lem6406948 A K _80096)). Qed.
Lemma lem6406950 {A K : Type'} (_80096 : type835 A K) : (term866 A K _80096) = (term886 A K _80096).
Proof. exact (EQ_MP (@lem6406949 A K _80096) (@lem6406927 A K _80096)). Qed.
Lemma lem6407087 {A K : Type'} (_80096 : type835 A K) : (term772 A K _80096) = (term886 A K _80096).
Proof. exact (TRANS (@lem6406923 A K _80096) (@lem6406950 A K _80096)). Qed.
Lemma lem6407089 {A : Type'} (P : Prop) (Q : A -> Prop) : (term887 A P Q) = (term888 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem6407090 {K : Type'} (P : Prop) (Q : K -> Prop) : (term887 K P Q) = (term888 K P Q).
Proof. exact (@lem6407089 K P Q). Qed.
Lemma lem6407091 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term889 A K _80096 GEN_PVAR_263 k dom f neut) = (term890 A K _80096 GEN_PVAR_263 k dom f neut).
Proof. exact (@lem6407090 K (term891 A K _80096 k dom f neut GEN_PVAR_263) (term396 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6407092 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term748 A K GEN_PVAR_263 k dom f neut i) = (term395 A K GEN_PVAR_263 k dom f neut i).
Proof. exact (eq_refl (term748 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6407093 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term892 A K GEN_PVAR_263 k dom f neut) = (term396 A K GEN_PVAR_263 k dom f neut).
Proof. exact (fun_ext (fun i : K => @lem6407092 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6407094 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6407095 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term893 A K GEN_PVAR_263 k dom f neut) = (term397 A K GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6407094 K) (@lem6407093 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6407096 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (GEN_PVAR_263 : K) : (term754 A K _80096 k dom f neut GEN_PVAR_263) = (term754 A K _80096 k dom f neut GEN_PVAR_263).
Proof. exact (eq_refl (term754 A K _80096 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6407097 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term889 A K _80096 GEN_PVAR_263 k dom f neut) = (term755 A K _80096 GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6407096 A K _80096 k dom f neut GEN_PVAR_263) (@lem6407095 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6407098 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6407099 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term894 A K _80096 GEN_PVAR_263 k dom f neut) = (term895 A K _80096 GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6407098) (@lem6407097 A K _80096 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6407100 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term748 A K GEN_PVAR_263 k dom f neut i) = (term395 A K GEN_PVAR_263 k dom f neut i).
Proof. exact (eq_refl (term748 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6407101 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (GEN_PVAR_263 : K) : (term754 A K _80096 k dom f neut GEN_PVAR_263) = (term754 A K _80096 k dom f neut GEN_PVAR_263).
Proof. exact (eq_refl (term754 A K _80096 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6407102 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term896 A K _80096 GEN_PVAR_263 k dom f neut i) = (term897 A K _80096 GEN_PVAR_263 k dom f neut i).
Proof. exact (MK_COMB (@lem6407101 A K _80096 k dom f neut GEN_PVAR_263) (@lem6407100 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6407103 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term898 A K _80096 GEN_PVAR_263 k dom f neut) = (term899 A K _80096 GEN_PVAR_263 k dom f neut).
Proof. exact (fun_ext (fun i : K => @lem6407102 A K _80096 GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6407104 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6407105 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term890 A K _80096 GEN_PVAR_263 k dom f neut) = (term900 A K _80096 GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6407104 K) (@lem6407103 A K _80096 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6407106 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term889 A K _80096 GEN_PVAR_263 k dom f neut) = (term890 A K _80096 GEN_PVAR_263 k dom f neut)) = ((term755 A K _80096 GEN_PVAR_263 k dom f neut) = (term900 A K _80096 GEN_PVAR_263 k dom f neut)).
Proof. exact (MK_COMB (@lem6407099 A K _80096 GEN_PVAR_263 k dom f neut) (@lem6407105 A K _80096 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6407107 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term755 A K _80096 GEN_PVAR_263 k dom f neut) = (term900 A K _80096 GEN_PVAR_263 k dom f neut).
Proof. exact (EQ_MP (@lem6407106 A K _80096 GEN_PVAR_263 k dom f neut) (@lem6407091 A K _80096 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6407108 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term778 A K _80096 k dom f neut) = (term901 A K _80096 k dom f neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6407107 A K _80096 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6407109 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6407110 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term793 A K _80096 k dom f neut) = (term902 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6407109 K) (@lem6407108 A K _80096 k dom f neut)). Qed.
Lemma lem6407112 {A B : Type'} (P : type1413 A B) : (term903 A B P) = (term904 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem6407113 {K : Type'} (P : type1402 K) : (term905 K P) = (term906 K P).
Proof. exact (@lem6407112 K K P). Qed.
Lemma lem6407114 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term907 A K _80096 k dom f neut) = (term908 A K _80096 k dom f neut).
Proof. exact (@lem6407113 K (term909 A K _80096 k dom f neut)). Qed.
Lemma lem6407115 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term910 A K _80096 k dom f neut GEN_PVAR_263) = (term899 A K _80096 GEN_PVAR_263 k dom f neut).
Proof. exact (eq_refl (term910 A K _80096 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6407116 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6407117 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term911 A K _80096 k dom f neut GEN_PVAR_263 i) = (term912 A K _80096 GEN_PVAR_263 k dom f neut i).
Proof. exact (MK_COMB (@lem6407115 A K _80096 GEN_PVAR_263 k dom f neut) (@lem6407116 K i)). Qed.
Lemma lem6407118 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term912 A K _80096 GEN_PVAR_263 k dom f neut i) = (term897 A K _80096 GEN_PVAR_263 k dom f neut i).
Proof. exact (eq_refl (term912 A K _80096 GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6407119 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term911 A K _80096 k dom f neut GEN_PVAR_263 i) = (term897 A K _80096 GEN_PVAR_263 k dom f neut i).
Proof. exact (TRANS (@lem6407117 A K _80096 GEN_PVAR_263 k dom f neut i) (@lem6407118 A K _80096 GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6407120 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term913 A K _80096 k dom f neut GEN_PVAR_263) = (term899 A K _80096 GEN_PVAR_263 k dom f neut).
Proof. exact (fun_ext (fun i : K => @lem6407119 A K _80096 GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6407121 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6407122 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term914 A K _80096 k dom f neut GEN_PVAR_263) = (term900 A K _80096 GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6407121 K) (@lem6407120 A K _80096 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6407123 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term915 A K _80096 k dom f neut) = (term901 A K _80096 k dom f neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6407122 A K _80096 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6407124 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6407125 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term907 A K _80096 k dom f neut) = (term902 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6407124 K) (@lem6407123 A K _80096 k dom f neut)). Qed.
Lemma lem6407126 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6407127 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term916 A K _80096 k dom f neut) = (term917 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6407126) (@lem6407125 A K _80096 k dom f neut)). Qed.
Lemma lem6407128 {A K : Type'} (_80096 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term910 A K _80096 k dom f neut GEN_PVAR_263) = (term899 A K _80096 GEN_PVAR_263 k dom f neut).
Proof. exact (eq_refl (term910 A K _80096 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6407129 {K : Type'} (i : K -> K) (GEN_PVAR_263 : K) : (i GEN_PVAR_263) = (i GEN_PVAR_263).
Proof. exact (eq_refl (i GEN_PVAR_263)). Qed.
Lemma lem6407130 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K -> K) (GEN_PVAR_263 : K) : (term918 A K _80096 k dom f neut i GEN_PVAR_263) = (term919 A K _80096 k dom f neut i GEN_PVAR_263).
Proof. exact (MK_COMB (@lem6407128 A K _80096 GEN_PVAR_263 k dom f neut) (@lem6407129 K i GEN_PVAR_263)). Qed.
Lemma lem6407131 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K -> K) (GEN_PVAR_263 : K) : (term919 A K _80096 k dom f neut i GEN_PVAR_263) = (term920 A K _80096 k dom f neut i GEN_PVAR_263).
Proof. exact (eq_refl (term919 A K _80096 k dom f neut i GEN_PVAR_263)). Qed.
Lemma lem6407132 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K -> K) (GEN_PVAR_263 : K) : (term918 A K _80096 k dom f neut i GEN_PVAR_263) = (term920 A K _80096 k dom f neut i GEN_PVAR_263).
Proof. exact (TRANS (@lem6407130 A K _80096 k dom f neut i GEN_PVAR_263) (@lem6407131 A K _80096 k dom f neut i GEN_PVAR_263)). Qed.
Lemma lem6407133 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K -> K) : (term921 A K _80096 k dom f neut i) = (term922 A K _80096 k dom f neut i).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6407132 A K _80096 k dom f neut i GEN_PVAR_263)). Qed.
Lemma lem6407134 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6407135 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K -> K) : (term923 A K _80096 k dom f neut i) = (term924 A K _80096 k dom f neut i).
Proof. exact (MK_COMB (@lem6407134 K) (@lem6407133 A K _80096 k dom f neut i)). Qed.
Lemma lem6407136 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term925 A K _80096 k dom f neut) = (term926 A K _80096 k dom f neut).
Proof. exact (fun_ext (fun i : K -> K => @lem6407135 A K _80096 k dom f neut i)). Qed.
Lemma lem6407137 {K : Type'} : (@ex (K -> K)) = (@ex (K -> K)).
Proof. exact (eq_refl (@ex (K -> K))). Qed.
Lemma lem6407138 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term908 A K _80096 k dom f neut) = (term927 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6407137 K) (@lem6407136 A K _80096 k dom f neut)). Qed.
Lemma lem6407139 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term907 A K _80096 k dom f neut) = (term908 A K _80096 k dom f neut)) = ((term902 A K _80096 k dom f neut) = (term927 A K _80096 k dom f neut)).
Proof. exact (MK_COMB (@lem6407127 A K _80096 k dom f neut) (@lem6407138 A K _80096 k dom f neut)). Qed.
Lemma lem6407140 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term902 A K _80096 k dom f neut) = (term927 A K _80096 k dom f neut).
Proof. exact (EQ_MP (@lem6407139 A K _80096 k dom f neut) (@lem6407114 A K _80096 k dom f neut)). Qed.
Lemma lem6407141 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term793 A K _80096 k dom f neut) = (term927 A K _80096 k dom f neut).
Proof. exact (TRANS (@lem6407110 A K _80096 k dom f neut) (@lem6407140 A K _80096 k dom f neut)). Qed.
Lemma lem6407142 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term800 A K _80096 k dom f) = (term928 A K _80096 k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6407141 A K _80096 k dom f neut)). Qed.
Lemma lem6407143 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6407144 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term815 A K _80096 k dom f) = (term929 A K _80096 k dom f).
Proof. exact (MK_COMB (@lem6407143 A) (@lem6407142 A K _80096 k dom f)). Qed.
Lemma lem6407146 {A B : Type'} (P : type1413 A B) : (term903 A B P) = (term904 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem6407147 {A K : Type'} (P : type1373 A K) : (term930 A K P) = (term931 A K P).
Proof. exact (@lem6407146 A (K -> K) P). Qed.
Lemma lem6407148 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term932 A K _80096 k dom f) = (term933 A K _80096 k dom f).
Proof. exact (@lem6407147 A K (term934 A K _80096 k dom f)). Qed.
Lemma lem6407149 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term935 A K _80096 k dom f neut) = (term926 A K _80096 k dom f neut).
Proof. exact (eq_refl (term935 A K _80096 k dom f neut)). Qed.
Lemma lem6407150 {K : Type'} (i : K -> K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6407151 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K -> K) : (term936 A K _80096 k dom f neut i) = (term937 A K _80096 k dom f neut i).
Proof. exact (MK_COMB (@lem6407149 A K _80096 k dom f neut) (@lem6407150 K i)). Qed.
Lemma lem6407152 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K -> K) : (term937 A K _80096 k dom f neut i) = (term924 A K _80096 k dom f neut i).
Proof. exact (eq_refl (term937 A K _80096 k dom f neut i)). Qed.
Lemma lem6407153 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K -> K) : (term936 A K _80096 k dom f neut i) = (term924 A K _80096 k dom f neut i).
Proof. exact (TRANS (@lem6407151 A K _80096 k dom f neut i) (@lem6407152 A K _80096 k dom f neut i)). Qed.
Lemma lem6407154 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term938 A K _80096 k dom f neut) = (term926 A K _80096 k dom f neut).
Proof. exact (fun_ext (fun i : K -> K => @lem6407153 A K _80096 k dom f neut i)). Qed.
Lemma lem6407155 {K : Type'} : (@ex (K -> K)) = (@ex (K -> K)).
Proof. exact (eq_refl (@ex (K -> K))). Qed.
Lemma lem6407156 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term939 A K _80096 k dom f neut) = (term927 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6407155 K) (@lem6407154 A K _80096 k dom f neut)). Qed.
Lemma lem6407157 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term940 A K _80096 k dom f) = (term928 A K _80096 k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6407156 A K _80096 k dom f neut)). Qed.
Lemma lem6407158 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6407159 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term932 A K _80096 k dom f) = (term929 A K _80096 k dom f).
Proof. exact (MK_COMB (@lem6407158 A) (@lem6407157 A K _80096 k dom f)). Qed.
Lemma lem6407160 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6407161 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term941 A K _80096 k dom f) = (term942 A K _80096 k dom f).
Proof. exact (MK_COMB (@lem6407160) (@lem6407159 A K _80096 k dom f)). Qed.
Lemma lem6407162 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term935 A K _80096 k dom f neut) = (term926 A K _80096 k dom f neut).
Proof. exact (eq_refl (term935 A K _80096 k dom f neut)). Qed.
Lemma lem6407163 {A K : Type'} (i : type1411 A K) (neut : A) : (i neut) = (i neut).
Proof. exact (eq_refl (i neut)). Qed.
Lemma lem6407164 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (i : type1411 A K) (neut : A) : (term943 A K _80096 k dom f i neut) = (term944 A K _80096 k dom f i neut).
Proof. exact (MK_COMB (@lem6407162 A K _80096 k dom f neut) (@lem6407163 A K i neut)). Qed.
Lemma lem6407165 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (i : type1411 A K) (neut : A) : (term944 A K _80096 k dom f i neut) = (term945 A K _80096 k dom f i neut).
Proof. exact (eq_refl (term944 A K _80096 k dom f i neut)). Qed.
Lemma lem6407166 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (i : type1411 A K) (neut : A) : (term943 A K _80096 k dom f i neut) = (term945 A K _80096 k dom f i neut).
Proof. exact (TRANS (@lem6407164 A K _80096 k dom f i neut) (@lem6407165 A K _80096 k dom f i neut)). Qed.
Lemma lem6407167 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (i : type1411 A K) : (term946 A K _80096 k dom f i) = (term947 A K _80096 k dom f i).
Proof. exact (fun_ext (fun neut : A => @lem6407166 A K _80096 k dom f i neut)). Qed.
Lemma lem6407168 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6407169 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (i : type1411 A K) : (term948 A K _80096 k dom f i) = (term949 A K _80096 k dom f i).
Proof. exact (MK_COMB (@lem6407168 A) (@lem6407167 A K _80096 k dom f i)). Qed.
Lemma lem6407170 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term950 A K _80096 k dom f) = (term951 A K _80096 k dom f).
Proof. exact (fun_ext (fun i : type1411 A K => @lem6407169 A K _80096 k dom f i)). Qed.
Lemma lem6407171 {A K : Type'} : (@ex (A -> K -> K)) = (@ex (A -> K -> K)).
Proof. exact (eq_refl (@ex (A -> K -> K))). Qed.
Lemma lem6407172 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term933 A K _80096 k dom f) = (term952 A K _80096 k dom f).
Proof. exact (MK_COMB (@lem6407171 A K) (@lem6407170 A K _80096 k dom f)). Qed.
Lemma lem6407173 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : ((term932 A K _80096 k dom f) = (term933 A K _80096 k dom f)) = ((term929 A K _80096 k dom f) = (term952 A K _80096 k dom f)).
Proof. exact (MK_COMB (@lem6407161 A K _80096 k dom f) (@lem6407172 A K _80096 k dom f)). Qed.
Lemma lem6407174 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term929 A K _80096 k dom f) = (term952 A K _80096 k dom f).
Proof. exact (EQ_MP (@lem6407173 A K _80096 k dom f) (@lem6407148 A K _80096 k dom f)). Qed.
Lemma lem6407175 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term815 A K _80096 k dom f) = (term952 A K _80096 k dom f).
Proof. exact (TRANS (@lem6407144 A K _80096 k dom f) (@lem6407174 A K _80096 k dom f)). Qed.
Lemma lem6407176 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term824 A K _80096 k dom) = (term953 A K _80096 k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6407175 A K _80096 k dom f)). Qed.
Lemma lem6407177 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6407178 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term839 A K _80096 k dom) = (term954 A K _80096 k dom).
Proof. exact (MK_COMB (@lem6407177 A K) (@lem6407176 A K _80096 k dom)). Qed.
Lemma lem6407180 {A B : Type'} (P : type1413 A B) : (term903 A B P) = (term904 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem6407181 {A K : Type'} (P : type778 A K) : (term955 A K P) = (term956 A K P).
Proof. exact (@lem6407180 (K -> A) (type1411 A K) P). Qed.
Lemma lem6407182 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term957 A K _80096 k dom) = (term958 A K _80096 k dom).
Proof. exact (@lem6407181 A K (term959 A K _80096 k dom)). Qed.
Lemma lem6407183 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term960 A K _80096 k dom f) = (term951 A K _80096 k dom f).
Proof. exact (eq_refl (term960 A K _80096 k dom f)). Qed.
Lemma lem6407184 {A K : Type'} (i : type1411 A K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6407185 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (i : type1411 A K) : (term961 A K _80096 k dom f i) = (term962 A K _80096 k dom f i).
Proof. exact (MK_COMB (@lem6407183 A K _80096 k dom f) (@lem6407184 A K i)). Qed.
Lemma lem6407186 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (i : type1411 A K) : (term962 A K _80096 k dom f i) = (term949 A K _80096 k dom f i).
Proof. exact (eq_refl (term962 A K _80096 k dom f i)). Qed.
Lemma lem6407187 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (i : type1411 A K) : (term961 A K _80096 k dom f i) = (term949 A K _80096 k dom f i).
Proof. exact (TRANS (@lem6407185 A K _80096 k dom f i) (@lem6407186 A K _80096 k dom f i)). Qed.
Lemma lem6407188 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term963 A K _80096 k dom f) = (term951 A K _80096 k dom f).
Proof. exact (fun_ext (fun i : type1411 A K => @lem6407187 A K _80096 k dom f i)). Qed.
Lemma lem6407189 {A K : Type'} : (@ex (A -> K -> K)) = (@ex (A -> K -> K)).
Proof. exact (eq_refl (@ex (A -> K -> K))). Qed.
Lemma lem6407190 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term964 A K _80096 k dom f) = (term952 A K _80096 k dom f).
Proof. exact (MK_COMB (@lem6407189 A K) (@lem6407188 A K _80096 k dom f)). Qed.
Lemma lem6407191 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term965 A K _80096 k dom) = (term953 A K _80096 k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6407190 A K _80096 k dom f)). Qed.
Lemma lem6407192 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6407193 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term957 A K _80096 k dom) = (term954 A K _80096 k dom).
Proof. exact (MK_COMB (@lem6407192 A K) (@lem6407191 A K _80096 k dom)). Qed.
Lemma lem6407194 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6407195 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term966 A K _80096 k dom) = (term967 A K _80096 k dom).
Proof. exact (MK_COMB (@lem6407194) (@lem6407193 A K _80096 k dom)). Qed.
Lemma lem6407196 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term960 A K _80096 k dom f) = (term951 A K _80096 k dom f).
Proof. exact (eq_refl (term960 A K _80096 k dom f)). Qed.
Lemma lem6407197 {A K : Type'} (i : type792 A K) (f : K -> A) : (i f) = (i f).
Proof. exact (eq_refl (i f)). Qed.
Lemma lem6407198 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (i : type792 A K) (f : K -> A) : (term968 A K _80096 k dom i f) = (term969 A K _80096 k dom i f).
Proof. exact (MK_COMB (@lem6407196 A K _80096 k dom f) (@lem6407197 A K i f)). Qed.
Lemma lem6407199 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (i : type792 A K) (f : K -> A) : (term969 A K _80096 k dom i f) = (term970 A K _80096 k dom i f).
Proof. exact (eq_refl (term969 A K _80096 k dom i f)). Qed.
Lemma lem6407200 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (i : type792 A K) (f : K -> A) : (term968 A K _80096 k dom i f) = (term970 A K _80096 k dom i f).
Proof. exact (TRANS (@lem6407198 A K _80096 k dom i f) (@lem6407199 A K _80096 k dom i f)). Qed.
Lemma lem6407201 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (i : type792 A K) : (term971 A K _80096 k dom i) = (term972 A K _80096 k dom i).
Proof. exact (fun_ext (fun f : K -> A => @lem6407200 A K _80096 k dom i f)). Qed.
Lemma lem6407202 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6407203 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (i : type792 A K) : (term973 A K _80096 k dom i) = (term974 A K _80096 k dom i).
Proof. exact (MK_COMB (@lem6407202 A K) (@lem6407201 A K _80096 k dom i)). Qed.
Lemma lem6407204 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term975 A K _80096 k dom) = (term976 A K _80096 k dom).
Proof. exact (fun_ext (fun i : type792 A K => @lem6407203 A K _80096 k dom i)). Qed.
Lemma lem6407205 {A K : Type'} : (@ex ((K -> A) -> A -> K -> K)) = (@ex ((K -> A) -> A -> K -> K)).
Proof. exact (eq_refl (@ex ((K -> A) -> A -> K -> K))). Qed.
Lemma lem6407206 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term958 A K _80096 k dom) = (term977 A K _80096 k dom).
Proof. exact (MK_COMB (@lem6407205 A K) (@lem6407204 A K _80096 k dom)). Qed.
Lemma lem6407207 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : ((term957 A K _80096 k dom) = (term958 A K _80096 k dom)) = ((term954 A K _80096 k dom) = (term977 A K _80096 k dom)).
Proof. exact (MK_COMB (@lem6407195 A K _80096 k dom) (@lem6407206 A K _80096 k dom)). Qed.
Lemma lem6407208 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term954 A K _80096 k dom) = (term977 A K _80096 k dom).
Proof. exact (EQ_MP (@lem6407207 A K _80096 k dom) (@lem6407182 A K _80096 k dom)). Qed.
Lemma lem6407209 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term839 A K _80096 k dom) = (term977 A K _80096 k dom).
Proof. exact (TRANS (@lem6407178 A K _80096 k dom) (@lem6407208 A K _80096 k dom)). Qed.
Lemma lem6407210 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term848 A K _80096 k) = (term978 A K _80096 k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6407209 A K _80096 k dom)). Qed.
Lemma lem6407211 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6407212 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term863 A K _80096 k) = (term979 A K _80096 k).
Proof. exact (MK_COMB (@lem6407211 A) (@lem6407210 A K _80096 k)). Qed.
Lemma lem6407214 {A B : Type'} (P : type1413 A B) : (term903 A B P) = (term904 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem6407215 {A K : Type'} (P : type604 A K) : (term980 A K P) = (term981 A K P).
Proof. exact (@lem6407214 (A -> Prop) (type792 A K) P). Qed.
Lemma lem6407216 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term982 A K _80096 k) = (term983 A K _80096 k).
Proof. exact (@lem6407215 A K (term984 A K _80096 k)). Qed.
Lemma lem6407217 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term985 A K _80096 k dom) = (term976 A K _80096 k dom).
Proof. exact (eq_refl (term985 A K _80096 k dom)). Qed.
Lemma lem6407218 {A K : Type'} (i : type792 A K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6407219 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (i : type792 A K) : (term986 A K _80096 k dom i) = (term987 A K _80096 k dom i).
Proof. exact (MK_COMB (@lem6407217 A K _80096 k dom) (@lem6407218 A K i)). Qed.
Lemma lem6407220 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (i : type792 A K) : (term987 A K _80096 k dom i) = (term974 A K _80096 k dom i).
Proof. exact (eq_refl (term987 A K _80096 k dom i)). Qed.
Lemma lem6407221 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (i : type792 A K) : (term986 A K _80096 k dom i) = (term974 A K _80096 k dom i).
Proof. exact (TRANS (@lem6407219 A K _80096 k dom i) (@lem6407220 A K _80096 k dom i)). Qed.
Lemma lem6407222 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term988 A K _80096 k dom) = (term976 A K _80096 k dom).
Proof. exact (fun_ext (fun i : type792 A K => @lem6407221 A K _80096 k dom i)). Qed.
Lemma lem6407223 {A K : Type'} : (@ex ((K -> A) -> A -> K -> K)) = (@ex ((K -> A) -> A -> K -> K)).
Proof. exact (eq_refl (@ex ((K -> A) -> A -> K -> K))). Qed.
Lemma lem6407224 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term989 A K _80096 k dom) = (term977 A K _80096 k dom).
Proof. exact (MK_COMB (@lem6407223 A K) (@lem6407222 A K _80096 k dom)). Qed.
Lemma lem6407225 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term990 A K _80096 k) = (term978 A K _80096 k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6407224 A K _80096 k dom)). Qed.
Lemma lem6407226 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6407227 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term982 A K _80096 k) = (term979 A K _80096 k).
Proof. exact (MK_COMB (@lem6407226 A) (@lem6407225 A K _80096 k)). Qed.
Lemma lem6407228 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6407229 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term991 A K _80096 k) = (term992 A K _80096 k).
Proof. exact (MK_COMB (@lem6407228) (@lem6407227 A K _80096 k)). Qed.
Lemma lem6407230 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term985 A K _80096 k dom) = (term976 A K _80096 k dom).
Proof. exact (eq_refl (term985 A K _80096 k dom)). Qed.
Lemma lem6407231 {A K : Type'} (i : type649 A K) (dom : A -> Prop) : (i dom) = (i dom).
Proof. exact (eq_refl (i dom)). Qed.
Lemma lem6407232 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (i : type649 A K) (dom : A -> Prop) : (term993 A K _80096 k i dom) = (term994 A K _80096 k i dom).
Proof. exact (MK_COMB (@lem6407230 A K _80096 k dom) (@lem6407231 A K i dom)). Qed.
Lemma lem6407233 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (i : type649 A K) (dom : A -> Prop) : (term994 A K _80096 k i dom) = (term995 A K _80096 k i dom).
Proof. exact (eq_refl (term994 A K _80096 k i dom)). Qed.
Lemma lem6407234 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (i : type649 A K) (dom : A -> Prop) : (term993 A K _80096 k i dom) = (term995 A K _80096 k i dom).
Proof. exact (TRANS (@lem6407232 A K _80096 k i dom) (@lem6407233 A K _80096 k i dom)). Qed.
Lemma lem6407235 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (i : type649 A K) : (term996 A K _80096 k i) = (term997 A K _80096 k i).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6407234 A K _80096 k i dom)). Qed.
Lemma lem6407236 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6407237 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (i : type649 A K) : (term998 A K _80096 k i) = (term999 A K _80096 k i).
Proof. exact (MK_COMB (@lem6407236 A) (@lem6407235 A K _80096 k i)). Qed.
Lemma lem6407238 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term1000 A K _80096 k) = (term1001 A K _80096 k).
Proof. exact (fun_ext (fun i : type649 A K => @lem6407237 A K _80096 k i)). Qed.
Lemma lem6407239 {A K : Type'} : (@ex ((A -> Prop) -> (K -> A) -> A -> K -> K)) = (@ex ((A -> Prop) -> (K -> A) -> A -> K -> K)).
Proof. exact (eq_refl (@ex ((A -> Prop) -> (K -> A) -> A -> K -> K))). Qed.
Lemma lem6407240 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term983 A K _80096 k) = (term1002 A K _80096 k).
Proof. exact (MK_COMB (@lem6407239 A K) (@lem6407238 A K _80096 k)). Qed.
Lemma lem6407241 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : ((term982 A K _80096 k) = (term983 A K _80096 k)) = ((term979 A K _80096 k) = (term1002 A K _80096 k)).
Proof. exact (MK_COMB (@lem6407229 A K _80096 k) (@lem6407240 A K _80096 k)). Qed.
Lemma lem6407242 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term979 A K _80096 k) = (term1002 A K _80096 k).
Proof. exact (EQ_MP (@lem6407241 A K _80096 k) (@lem6407216 A K _80096 k)). Qed.
Lemma lem6407243 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term863 A K _80096 k) = (term1002 A K _80096 k).
Proof. exact (TRANS (@lem6407212 A K _80096 k) (@lem6407242 A K _80096 k)). Qed.
Lemma lem6407244 {A K : Type'} (_80096 : type835 A K) : (term870 A K _80096) = (term1003 A K _80096).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6407243 A K _80096 k)). Qed.
Lemma lem6407245 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6407246 {A K : Type'} (_80096 : type835 A K) : (term885 A K _80096) = (term1004 A K _80096).
Proof. exact (MK_COMB (@lem6407245 K) (@lem6407244 A K _80096)). Qed.
Lemma lem6407248 {A B : Type'} (P : type1413 A B) : (term903 A B P) = (term904 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem6407249 {A K : Type'} (P : type819 A K) : (term1005 A K P) = (term1006 A K P).
Proof. exact (@lem6407248 (K -> Prop) (type649 A K) P). Qed.
Lemma lem6407250 {A K : Type'} (_80096 : type835 A K) : (term1007 A K _80096) = (term1008 A K _80096).
Proof. exact (@lem6407249 A K (term1009 A K _80096)). Qed.
Lemma lem6407251 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term1010 A K _80096 k) = (term1001 A K _80096 k).
Proof. exact (eq_refl (term1010 A K _80096 k)). Qed.
Lemma lem6407252 {A K : Type'} (i : type649 A K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6407253 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (i : type649 A K) : (term1011 A K _80096 k i) = (term1012 A K _80096 k i).
Proof. exact (MK_COMB (@lem6407251 A K _80096 k) (@lem6407252 A K i)). Qed.
Lemma lem6407254 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (i : type649 A K) : (term1012 A K _80096 k i) = (term999 A K _80096 k i).
Proof. exact (eq_refl (term1012 A K _80096 k i)). Qed.
Lemma lem6407255 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (i : type649 A K) : (term1011 A K _80096 k i) = (term999 A K _80096 k i).
Proof. exact (TRANS (@lem6407253 A K _80096 k i) (@lem6407254 A K _80096 k i)). Qed.
Lemma lem6407256 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term1013 A K _80096 k) = (term1001 A K _80096 k).
Proof. exact (fun_ext (fun i : type649 A K => @lem6407255 A K _80096 k i)). Qed.
Lemma lem6407257 {A K : Type'} : (@ex ((A -> Prop) -> (K -> A) -> A -> K -> K)) = (@ex ((A -> Prop) -> (K -> A) -> A -> K -> K)).
Proof. exact (eq_refl (@ex ((A -> Prop) -> (K -> A) -> A -> K -> K))). Qed.
Lemma lem6407258 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term1014 A K _80096 k) = (term1002 A K _80096 k).
Proof. exact (MK_COMB (@lem6407257 A K) (@lem6407256 A K _80096 k)). Qed.
Lemma lem6407259 {A K : Type'} (_80096 : type835 A K) : (term1015 A K _80096) = (term1003 A K _80096).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6407258 A K _80096 k)). Qed.
Lemma lem6407260 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6407261 {A K : Type'} (_80096 : type835 A K) : (term1007 A K _80096) = (term1004 A K _80096).
Proof. exact (MK_COMB (@lem6407260 K) (@lem6407259 A K _80096)). Qed.
Lemma lem6407262 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6407263 {A K : Type'} (_80096 : type835 A K) : (term1016 A K _80096) = (term1017 A K _80096).
Proof. exact (MK_COMB (@lem6407262) (@lem6407261 A K _80096)). Qed.
Lemma lem6407264 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (term1010 A K _80096 k) = (term1001 A K _80096 k).
Proof. exact (eq_refl (term1010 A K _80096 k)). Qed.
Lemma lem6407265 {A K : Type'} (i : type834 A K) (k : K -> Prop) : (i k) = (i k).
Proof. exact (eq_refl (i k)). Qed.
Lemma lem6407266 {A K : Type'} (_80096 : type835 A K) (i : type834 A K) (k : K -> Prop) : (term1018 A K _80096 i k) = (term1019 A K _80096 i k).
Proof. exact (MK_COMB (@lem6407264 A K _80096 k) (@lem6407265 A K i k)). Qed.
Lemma lem6407267 {A K : Type'} (_80096 : type835 A K) (i : type834 A K) (k : K -> Prop) : (term1019 A K _80096 i k) = (term1020 A K _80096 i k).
Proof. exact (eq_refl (term1019 A K _80096 i k)). Qed.
Lemma lem6407268 {A K : Type'} (_80096 : type835 A K) (i : type834 A K) (k : K -> Prop) : (term1018 A K _80096 i k) = (term1020 A K _80096 i k).
Proof. exact (TRANS (@lem6407266 A K _80096 i k) (@lem6407267 A K _80096 i k)). Qed.
Lemma lem6407269 {A K : Type'} (_80096 : type835 A K) (i : type834 A K) : (term1021 A K _80096 i) = (term1022 A K _80096 i).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6407268 A K _80096 i k)). Qed.
Lemma lem6407270 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6407271 {A K : Type'} (_80096 : type835 A K) (i : type834 A K) : (term1023 A K _80096 i) = (term1024 A K _80096 i).
Proof. exact (MK_COMB (@lem6407270 K) (@lem6407269 A K _80096 i)). Qed.
Lemma lem6407272 {A K : Type'} (_80096 : type835 A K) : (term1025 A K _80096) = (term1026 A K _80096).
Proof. exact (fun_ext (fun i : type834 A K => @lem6407271 A K _80096 i)). Qed.
Lemma lem6407273 {A K : Type'} : (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K)) = (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K)).
Proof. exact (eq_refl (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K))). Qed.
Lemma lem6407274 {A K : Type'} (_80096 : type835 A K) : (term1008 A K _80096) = (term1027 A K _80096).
Proof. exact (MK_COMB (@lem6407273 A K) (@lem6407272 A K _80096)). Qed.
Lemma lem6407275 {A K : Type'} (_80096 : type835 A K) : ((term1007 A K _80096) = (term1008 A K _80096)) = ((term1004 A K _80096) = (term1027 A K _80096)).
Proof. exact (MK_COMB (@lem6407263 A K _80096) (@lem6407274 A K _80096)). Qed.
Lemma lem6407276 {A K : Type'} (_80096 : type835 A K) : (term1004 A K _80096) = (term1027 A K _80096).
Proof. exact (EQ_MP (@lem6407275 A K _80096) (@lem6407250 A K _80096)). Qed.
Lemma lem6407277 {A K : Type'} (_80096 : type835 A K) : (term885 A K _80096) = (term1027 A K _80096).
Proof. exact (TRANS (@lem6407246 A K _80096) (@lem6407276 A K _80096)). Qed.
Lemma lem6407278 {A K : Type'} (_80096 : type835 A K) : (term882 A K _80096) = (term882 A K _80096).
Proof. exact (eq_refl (term882 A K _80096)). Qed.
Lemma lem6407279 {A K : Type'} (_80096 : type835 A K) : (term886 A K _80096) = (term1028 A K _80096).
Proof. exact (MK_COMB (@lem6407278 A K _80096) (@lem6407277 A K _80096)). Qed.
Lemma lem6407281 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1029 A P Q) = (term1030 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem6407282 {A K : Type'} (P : Prop) (Q : type210 A K) : (term1031 A K P Q) = (term1032 A K P Q).
Proof. exact (@lem6407281 (type834 A K) P Q). Qed.
Lemma lem6407283 {A K : Type'} (_80096 : type835 A K) : (term1033 A K _80096) = (term1034 A K _80096).
Proof. exact (@lem6407282 A K (term880 A K _80096) (term1026 A K _80096)). Qed.
Lemma lem6407284 {A K : Type'} (_80096 : type835 A K) (i : type834 A K) : (term1035 A K _80096 i) = (term1024 A K _80096 i).
Proof. exact (eq_refl (term1035 A K _80096 i)). Qed.
Lemma lem6407285 {A K : Type'} (_80096 : type835 A K) : (term1036 A K _80096) = (term1026 A K _80096).
Proof. exact (fun_ext (fun i : type834 A K => @lem6407284 A K _80096 i)). Qed.
Lemma lem6407286 {A K : Type'} : (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K)) = (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K)).
Proof. exact (eq_refl (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K))). Qed.
Lemma lem6407287 {A K : Type'} (_80096 : type835 A K) : (term1037 A K _80096) = (term1027 A K _80096).
Proof. exact (MK_COMB (@lem6407286 A K) (@lem6407285 A K _80096)). Qed.
Lemma lem6407288 {A K : Type'} (_80096 : type835 A K) : (term882 A K _80096) = (term882 A K _80096).
Proof. exact (eq_refl (term882 A K _80096)). Qed.
Lemma lem6407289 {A K : Type'} (_80096 : type835 A K) : (term1033 A K _80096) = (term1028 A K _80096).
Proof. exact (MK_COMB (@lem6407288 A K _80096) (@lem6407287 A K _80096)). Qed.
Lemma lem6407290 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6407291 {A K : Type'} (_80096 : type835 A K) : (term1038 A K _80096) = (term1039 A K _80096).
Proof. exact (MK_COMB (@lem6407290) (@lem6407289 A K _80096)). Qed.
Lemma lem6407292 {A K : Type'} (_80096 : type835 A K) (i : type834 A K) : (term1035 A K _80096 i) = (term1024 A K _80096 i).
Proof. exact (eq_refl (term1035 A K _80096 i)). Qed.
Lemma lem6407293 {A K : Type'} (_80096 : type835 A K) : (term882 A K _80096) = (term882 A K _80096).
Proof. exact (eq_refl (term882 A K _80096)). Qed.
Lemma lem6407294 {A K : Type'} (_80096 : type835 A K) (i : type834 A K) : (term1040 A K _80096 i) = (term1041 A K _80096 i).
Proof. exact (MK_COMB (@lem6407293 A K _80096) (@lem6407292 A K _80096 i)). Qed.
Lemma lem6407295 {A K : Type'} (_80096 : type835 A K) : (term1042 A K _80096) = (term1043 A K _80096).
Proof. exact (fun_ext (fun i : type834 A K => @lem6407294 A K _80096 i)). Qed.
Lemma lem6407296 {A K : Type'} : (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K)) = (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K)).
Proof. exact (eq_refl (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K))). Qed.
Lemma lem6407297 {A K : Type'} (_80096 : type835 A K) : (term1034 A K _80096) = (term1044 A K _80096).
Proof. exact (MK_COMB (@lem6407296 A K) (@lem6407295 A K _80096)). Qed.
Lemma lem6407298 {A K : Type'} (_80096 : type835 A K) : ((term1033 A K _80096) = (term1034 A K _80096)) = ((term1028 A K _80096) = (term1044 A K _80096)).
Proof. exact (MK_COMB (@lem6407291 A K _80096) (@lem6407297 A K _80096)). Qed.
Lemma lem6407299 {A K : Type'} (_80096 : type835 A K) : (term1028 A K _80096) = (term1044 A K _80096).
Proof. exact (EQ_MP (@lem6407298 A K _80096) (@lem6407283 A K _80096)). Qed.
Lemma lem6407300 {A K : Type'} (_80096 : type835 A K) : (term886 A K _80096) = (term1044 A K _80096).
Proof. exact (TRANS (@lem6407279 A K _80096) (@lem6407299 A K _80096)). Qed.
Lemma lem6407301 {A K : Type'} (_80096 : type835 A K) : (term772 A K _80096) = (term1044 A K _80096).
Proof. exact (TRANS (@lem6407087 A K _80096) (@lem6407300 A K _80096)). Qed.
Lemma lem6407302 {A K : Type'} (_80096 : type835 A K) : (term737 A K _80096) = (term1044 A K _80096).
Proof. exact (TRANS (@lem6406320 A K _80096) (@lem6407301 A K _80096)). Qed.
Lemma lem6407303 {A K : Type'} (_80096 : type835 A K) (h1 : term737 A K _80096) : term1044 A K _80096.
Proof. exact (EQ_MP (@lem6407302 A K _80096) (@lem6406270 A K _80096 h1)). Qed.
Lemma lem6407308 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1045 A K f x neut) = ((f x) = neut).
Proof. exact (@lem16933 ((f x) = neut)). Qed.
Lemma lem6407310 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1046 A K dom f x) = (term1046 A K dom f x).
Proof. exact (eq_refl (term1046 A K dom f x)). Qed.
Lemma lem6407311 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1047 A K dom f x neut) = (term1048 A K dom f x neut).
Proof. exact (MK_COMB (@lem6407310 A K dom f x) (@lem6407308 A K f x neut)). Qed.
Lemma lem6407312 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1049 A K dom f x neut) = (term1047 A K dom f x neut).
Proof. exact (@lem17045 (term367 A K dom f x) (term378 A K f x neut)). Qed.
Lemma lem6407313 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1049 A K dom f x neut) = (term1048 A K dom f x neut).
Proof. exact (TRANS (@lem6407312 A K dom f x neut) (@lem6407311 A K dom f x neut)). Qed.
Lemma lem6407332 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K) (x : K) : (term1050 A K ltle k dom f neut j x) = (term1051 A K ltle k dom f neut j x).
Proof. exact (@lem17362 (term382 A K ltle x k dom f j neut) (j = x)). Qed.
Lemma lem6407333 {K : Type'} (P : K -> Prop) : (term1052 K P) = (term1053 K P).
Proof. exact (@lem18392 K P). Qed.
Lemma lem6407334 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1054 A K ltle k dom f neut x) = (term1055 A K ltle k dom f neut x).
Proof. exact (@lem6407333 K (term385 A K ltle k dom f neut x)). Qed.
Lemma lem6407335 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K) (x : K) : (term1056 A K ltle k dom f neut x j) = (term384 A K ltle k dom f neut j x).
Proof. exact (eq_refl (term1056 A K ltle k dom f neut x j)). Qed.
Lemma lem6407336 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6407337 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K) (x : K) : (term1057 A K ltle k dom f neut x j) = (term1050 A K ltle k dom f neut j x).
Proof. exact (MK_COMB (@lem6407336) (@lem6407335 A K ltle k dom f neut j x)). Qed.
Lemma lem6407338 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K) (x : K) : (term1057 A K ltle k dom f neut x j) = (term1051 A K ltle k dom f neut j x).
Proof. exact (TRANS (@lem6407337 A K ltle k dom f neut j x) (@lem6407332 A K ltle k dom f neut j x)). Qed.
Lemma lem6407339 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1058 A K ltle k dom f neut x) = (term1059 A K ltle k dom f neut x).
Proof. exact (fun_ext (fun j : K => @lem6407338 A K ltle k dom f neut j x)). Qed.
Lemma lem6407340 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6407341 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1055 A K ltle k dom f neut x) = (term1060 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6407340 K) (@lem6407339 A K ltle k dom f neut x)). Qed.
Lemma lem6407342 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1054 A K ltle k dom f neut x) = (term1060 A K ltle k dom f neut x).
Proof. exact (TRANS (@lem6407334 A K ltle k dom f neut x) (@lem6407341 A K ltle k dom f neut x)). Qed.
Lemma lem6407343 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6407344 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1061 A K dom f x neut) = (term1062 A K dom f x neut).
Proof. exact (MK_COMB (@lem6407343) (@lem6407313 A K dom f x neut)). Qed.
Lemma lem6407345 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1063 A K ltle k dom f neut x) = (term1064 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6407344 A K dom f x neut) (@lem6407342 A K ltle k dom f neut x)). Qed.
Lemma lem6407346 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1065 A K ltle k dom f neut x) = (term1063 A K ltle k dom f neut x).
Proof. exact (@lem17045 (term379 A K dom f x neut) (term386 A K ltle k dom f neut x)). Qed.
Lemma lem6407347 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1065 A K ltle k dom f neut x) = (term1064 A K ltle k dom f neut x).
Proof. exact (TRANS (@lem6407346 A K ltle k dom f neut x) (@lem6407345 A K ltle k dom f neut x)). Qed.
Lemma lem6407349 {K : Type'} (k : K -> Prop) (x : K) : (term1066 K k x) = (term1066 K k x).
Proof. exact (eq_refl (term1066 K k x)). Qed.
Lemma lem6407350 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1067 A K ltle k dom f neut x) = (term1068 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6407349 K k x) (@lem6407347 A K ltle k dom f neut x)). Qed.
Lemma lem6407351 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1069 A K ltle k dom f neut x) = (term1067 A K ltle k dom f neut x).
Proof. exact (@lem17045 (k x) (term387 A K ltle k dom f neut x)). Qed.
Lemma lem6407352 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1069 A K ltle k dom f neut x) = (term1068 A K ltle k dom f neut x).
Proof. exact (TRANS (@lem6407351 A K ltle k dom f neut x) (@lem6407350 A K ltle k dom f neut x)). Qed.
Lemma lem6407364 {A K : Type'} (f : K -> A) (j : K) (neut : A) : (term1045 A K f j neut) = ((f j) = neut).
Proof. exact (@lem16933 ((f j) = neut)). Qed.
Lemma lem6407366 {A K : Type'} (dom : A -> Prop) (f : K -> A) (j : K) : (term1046 A K dom f j) = (term1046 A K dom f j).
Proof. exact (eq_refl (term1046 A K dom f j)). Qed.
Lemma lem6407367 {A K : Type'} (dom : A -> Prop) (f : K -> A) (j : K) (neut : A) : (term1047 A K dom f j neut) = (term1048 A K dom f j neut).
Proof. exact (MK_COMB (@lem6407366 A K dom f j) (@lem6407364 A K f j neut)). Qed.
Lemma lem6407368 {A K : Type'} (dom : A -> Prop) (f : K -> A) (j : K) (neut : A) : (term1049 A K dom f j neut) = (term1047 A K dom f j neut).
Proof. exact (@lem17045 (term367 A K dom f j) (term378 A K f j neut)). Qed.
Lemma lem6407369 {A K : Type'} (dom : A -> Prop) (f : K -> A) (j : K) (neut : A) : (term1049 A K dom f j neut) = (term1048 A K dom f j neut).
Proof. exact (TRANS (@lem6407368 A K dom f j neut) (@lem6407367 A K dom f j neut)). Qed.
Lemma lem6407371 {K : Type'} (k : K -> Prop) (j : K) : (term1066 K k j) = (term1066 K k j).
Proof. exact (eq_refl (term1066 K k j)). Qed.
Lemma lem6407372 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (j : K) (neut : A) : (term1070 A K k dom f j neut) = (term1071 A K k dom f j neut).
Proof. exact (MK_COMB (@lem6407371 K k j) (@lem6407369 A K dom f j neut)). Qed.
Lemma lem6407373 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (j : K) (neut : A) : (term403 A K k dom f j neut) = (term1070 A K k dom f j neut).
Proof. exact (@lem17045 (k j) (term379 A K dom f j neut)). Qed.
Lemma lem6407374 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (j : K) (neut : A) : (term403 A K k dom f j neut) = (term1071 A K k dom f j neut).
Proof. exact (TRANS (@lem6407373 A K k dom f j neut) (@lem6407372 A K k dom f j neut)). Qed.
Lemma lem6407376 {A K : Type'} (j : K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1072 A K j _80095 ltle k dom f neut) = (term1072 A K j _80095 ltle k dom f neut).
Proof. exact (eq_refl (term1072 A K j _80095 ltle k dom f neut)). Qed.
Lemma lem6407377 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (j : K) (neut : A) : (term1073 A K _80095 ltle k dom f j neut) = (term1074 A K _80095 ltle k dom f j neut).
Proof. exact (MK_COMB (@lem6407376 A K j _80095 ltle k dom f neut) (@lem6407374 A K k dom f j neut)). Qed.
Lemma lem6407378 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (j : K) (neut : A) : (term1075 A K _80095 ltle k dom f j neut) = (term1073 A K _80095 ltle k dom f j neut).
Proof. exact (@lem17045 (term539 A K j _80095 ltle k dom f neut) (term381 A K k dom f j neut)). Qed.
Lemma lem6407379 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (j : K) (neut : A) : (term1075 A K _80095 ltle k dom f j neut) = (term1074 A K _80095 ltle k dom f j neut).
Proof. exact (TRANS (@lem6407378 A K _80095 ltle k dom f j neut) (@lem6407377 A K _80095 ltle k dom f j neut)). Qed.
Lemma lem6407380 {A K : Type'} (j : K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (j = (_80095 ltle k dom f neut)) = (j = (_80095 ltle k dom f neut)).
Proof. exact (eq_refl (j = (_80095 ltle k dom f neut))). Qed.
Lemma lem6407381 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6407382 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (j : K) (neut : A) : (term1076 A K _80095 ltle k dom f j neut) = (term1077 A K _80095 ltle k dom f j neut).
Proof. exact (MK_COMB (@lem6407381) (@lem6407379 A K _80095 ltle k dom f j neut)). Qed.
Lemma lem6407383 {A K : Type'} (j : K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1078 A K j _80095 ltle k dom f neut) = (term1079 A K j _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407382 A K _80095 ltle k dom f j neut) (@lem6407380 A K j _80095 ltle k dom f neut)). Qed.
Lemma lem6407384 {A K : Type'} (j : K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term547 A K j _80095 ltle k dom f neut) = (term1078 A K j _80095 ltle k dom f neut).
Proof. exact (@lem17265 (term543 A K _80095 ltle k dom f j neut) (j = (_80095 ltle k dom f neut))). Qed.
Lemma lem6407385 {A K : Type'} (j : K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term547 A K j _80095 ltle k dom f neut) = (term1079 A K j _80095 ltle k dom f neut).
Proof. exact (TRANS (@lem6407384 A K j _80095 ltle k dom f neut) (@lem6407383 A K j _80095 ltle k dom f neut)). Qed.
Lemma lem6407386 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term549 A K _80095 ltle k dom f neut) = (term1080 A K _80095 ltle k dom f neut).
Proof. exact (fun_ext (fun j : K => @lem6407385 A K j _80095 ltle k dom f neut)). Qed.
Lemma lem6407387 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6407388 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term551 A K _80095 ltle k dom f neut) = (term1081 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407387 K) (@lem6407386 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407390 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term537 A K _80095 ltle k dom f neut) = (term537 A K _80095 ltle k dom f neut).
Proof. exact (eq_refl (term537 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407391 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term553 A K _80095 ltle k dom f neut) = (term1082 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407390 A K _80095 ltle k dom f neut) (@lem6407388 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407393 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term523 A K _80095 ltle k dom f neut) = (term523 A K _80095 ltle k dom f neut).
Proof. exact (eq_refl (term523 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407394 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term554 A K _80095 ltle k dom f neut) = (term1083 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407393 A K _80095 ltle k dom f neut) (@lem6407391 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407395 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6407396 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1084 A K ltle k dom f neut x) = (term1085 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6407395) (@lem6407352 A K ltle k dom f neut x)). Qed.
Lemma lem6407397 {A K : Type'} (x : K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1086 A K x _80095 ltle k dom f neut) = (term1087 A K x _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407396 A K ltle k dom f neut x) (@lem6407394 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407398 {A K : Type'} (x : K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term555 A K x _80095 ltle k dom f neut) = (term1086 A K x _80095 ltle k dom f neut).
Proof. exact (@lem17265 (term388 A K ltle k dom f neut x) (term554 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407399 {A K : Type'} (x : K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term555 A K x _80095 ltle k dom f neut) = (term1087 A K x _80095 ltle k dom f neut).
Proof. exact (TRANS (@lem6407398 A K x _80095 ltle k dom f neut) (@lem6407397 A K x _80095 ltle k dom f neut)). Qed.
Lemma lem6407400 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term556 A K _80095 ltle k dom f neut) = (term1088 A K _80095 ltle k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6407399 A K x _80095 ltle k dom f neut)). Qed.
Lemma lem6407401 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6407402 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term557 A K _80095 ltle k dom f neut) = (term1089 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407401 K) (@lem6407400 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407403 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term559 A K _80095 ltle k dom f) = (term1090 A K _80095 ltle k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6407402 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407404 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6407405 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term560 A K _80095 ltle k dom f) = (term1091 A K _80095 ltle k dom f).
Proof. exact (MK_COMB (@lem6407404 A) (@lem6407403 A K _80095 ltle k dom f)). Qed.
Lemma lem6407406 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term562 A K _80095 ltle k dom) = (term1092 A K _80095 ltle k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6407405 A K _80095 ltle k dom f)). Qed.
Lemma lem6407407 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6407408 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term563 A K _80095 ltle k dom) = (term1093 A K _80095 ltle k dom).
Proof. exact (MK_COMB (@lem6407407 A K) (@lem6407406 A K _80095 ltle k dom)). Qed.
Lemma lem6407409 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term565 A K _80095 ltle k) = (term1094 A K _80095 ltle k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6407408 A K _80095 ltle k dom)). Qed.
Lemma lem6407410 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6407411 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term566 A K _80095 ltle k) = (term1095 A K _80095 ltle k).
Proof. exact (MK_COMB (@lem6407410 A) (@lem6407409 A K _80095 ltle k)). Qed.
Lemma lem6407412 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term568 A K _80095 ltle) = (term1096 A K _80095 ltle).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6407411 A K _80095 ltle k)). Qed.
Lemma lem6407413 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6407414 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term569 A K _80095 ltle) = (term1097 A K _80095 ltle).
Proof. exact (MK_COMB (@lem6407413 K) (@lem6407412 A K _80095 ltle)). Qed.
Lemma lem6407415 {A K : Type'} (_80095 : type756 A K) : (term571 A K _80095) = (term1098 A K _80095).
Proof. exact (fun_ext (fun ltle : type1402 K => @lem6407414 A K _80095 ltle)). Qed.
Lemma lem6407416 {K : Type'} : (@all (K -> K -> Prop)) = (@all (K -> K -> Prop)).
Proof. exact (eq_refl (@all (K -> K -> Prop))). Qed.
Lemma lem6407417 {A K : Type'} (_80095 : type756 A K) : (term572 A K _80095) = (term1099 A K _80095).
Proof. exact (MK_COMB (@lem6407416 K) (@lem6407415 A K _80095)). Qed.
Lemma lem6407459 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1100 A P Q) = (term1101 A P Q).
Proof. exact (EQ_MP (@lem18947 A P Q) (@lem18946 A P Q)). Qed.
Lemma lem6407460 {K : Type'} (P : K -> Prop) (Q : Prop) : (term1100 K P Q) = (term1101 K P Q).
Proof. exact (@lem6407459 K P Q). Qed.
Lemma lem6407461 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1102 A K _80095 ltle k dom f neut) = (term1103 A K _80095 ltle k dom f neut).
Proof. exact (@lem6407460 K (term1104 A K ltle k dom f neut) (term1083 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407462 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1105 A K ltle k dom f neut x) = (term1068 A K ltle k dom f neut x).
Proof. exact (eq_refl (term1105 A K ltle k dom f neut x)). Qed.
Lemma lem6407463 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6407464 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1106 A K ltle k dom f neut x) = (term1085 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6407463) (@lem6407462 A K ltle k dom f neut x)). Qed.
Lemma lem6407465 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1083 A K _80095 ltle k dom f neut) = (term1083 A K _80095 ltle k dom f neut).
Proof. exact (eq_refl (term1083 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407466 {A K : Type'} (x : K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1107 A K x _80095 ltle k dom f neut) = (term1087 A K x _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407464 A K ltle k dom f neut x) (@lem6407465 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407467 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1108 A K _80095 ltle k dom f neut) = (term1088 A K _80095 ltle k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6407466 A K x _80095 ltle k dom f neut)). Qed.
Lemma lem6407468 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6407469 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1102 A K _80095 ltle k dom f neut) = (term1089 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407468 K) (@lem6407467 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407470 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6407471 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1109 A K _80095 ltle k dom f neut) = (term1110 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407470) (@lem6407469 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407472 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1105 A K ltle k dom f neut x) = (term1068 A K ltle k dom f neut x).
Proof. exact (eq_refl (term1105 A K ltle k dom f neut x)). Qed.
Lemma lem6407473 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1111 A K ltle k dom f neut) = (term1104 A K ltle k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6407472 A K ltle k dom f neut x)). Qed.
Lemma lem6407474 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6407475 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1112 A K ltle k dom f neut) = (term1113 A K ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407474 K) (@lem6407473 A K ltle k dom f neut)). Qed.
Lemma lem6407476 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6407477 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1114 A K ltle k dom f neut) = (term1115 A K ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407476) (@lem6407475 A K ltle k dom f neut)). Qed.
Lemma lem6407478 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1083 A K _80095 ltle k dom f neut) = (term1083 A K _80095 ltle k dom f neut).
Proof. exact (eq_refl (term1083 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407479 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1103 A K _80095 ltle k dom f neut) = (term1116 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407477 A K ltle k dom f neut) (@lem6407478 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407480 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term1102 A K _80095 ltle k dom f neut) = (term1103 A K _80095 ltle k dom f neut)) = ((term1089 A K _80095 ltle k dom f neut) = (term1116 A K _80095 ltle k dom f neut)).
Proof. exact (MK_COMB (@lem6407471 A K _80095 ltle k dom f neut) (@lem6407479 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407481 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1089 A K _80095 ltle k dom f neut) = (term1116 A K _80095 ltle k dom f neut).
Proof. exact (EQ_MP (@lem6407480 A K _80095 ltle k dom f neut) (@lem6407461 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407626 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1090 A K _80095 ltle k dom f) = (term1117 A K _80095 ltle k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6407481 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407627 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6407628 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1091 A K _80095 ltle k dom f) = (term1118 A K _80095 ltle k dom f).
Proof. exact (MK_COMB (@lem6407627 A) (@lem6407626 A K _80095 ltle k dom f)). Qed.
Lemma lem6407677 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term1092 A K _80095 ltle k dom) = (term1119 A K _80095 ltle k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6407628 A K _80095 ltle k dom f)). Qed.
Lemma lem6407678 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6407679 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term1093 A K _80095 ltle k dom) = (term1120 A K _80095 ltle k dom).
Proof. exact (MK_COMB (@lem6407678 A K) (@lem6407677 A K _80095 ltle k dom)). Qed.
Lemma lem6407684 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term1094 A K _80095 ltle k) = (term1121 A K _80095 ltle k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6407679 A K _80095 ltle k dom)). Qed.
Lemma lem6407685 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6407686 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term1095 A K _80095 ltle k) = (term1122 A K _80095 ltle k).
Proof. exact (MK_COMB (@lem6407685 A) (@lem6407684 A K _80095 ltle k)). Qed.
Lemma lem6407691 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term1096 A K _80095 ltle) = (term1123 A K _80095 ltle).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6407686 A K _80095 ltle k)). Qed.
Lemma lem6407692 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6407693 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term1097 A K _80095 ltle) = (term1124 A K _80095 ltle).
Proof. exact (MK_COMB (@lem6407692 K) (@lem6407691 A K _80095 ltle)). Qed.
Lemma lem6407698 {A K : Type'} (_80095 : type756 A K) : (term1098 A K _80095) = (term1125 A K _80095).
Proof. exact (fun_ext (fun ltle : type1402 K => @lem6407693 A K _80095 ltle)). Qed.
Lemma lem6407699 {K : Type'} : (@all (K -> K -> Prop)) = (@all (K -> K -> Prop)).
Proof. exact (eq_refl (@all (K -> K -> Prop))). Qed.
Lemma lem6407700 {A K : Type'} (_80095 : type756 A K) : (term1099 A K _80095) = (term1126 A K _80095).
Proof. exact (MK_COMB (@lem6407699 K) (@lem6407698 A K _80095)). Qed.
Lemma lem6407706 {A : Type'} (P : Prop) (Q : A -> Prop) : (term887 A P Q) = (term888 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem6407707 {K : Type'} (P : Prop) (Q : K -> Prop) : (term887 K P Q) = (term888 K P Q).
Proof. exact (@lem6407706 K P Q). Qed.
Lemma lem6407708 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1127 A K ltle k dom f neut x) = (term1128 A K ltle k dom f neut x).
Proof. exact (@lem6407707 K (term1048 A K dom f x neut) (term1059 A K ltle k dom f neut x)). Qed.
Lemma lem6407709 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K) (x : K) : (term1129 A K ltle k dom f neut x j) = (term1051 A K ltle k dom f neut j x).
Proof. exact (eq_refl (term1129 A K ltle k dom f neut x j)). Qed.
Lemma lem6407710 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1130 A K ltle k dom f neut x) = (term1059 A K ltle k dom f neut x).
Proof. exact (fun_ext (fun j : K => @lem6407709 A K ltle k dom f neut j x)). Qed.
Lemma lem6407711 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6407712 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1131 A K ltle k dom f neut x) = (term1060 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6407711 K) (@lem6407710 A K ltle k dom f neut x)). Qed.
Lemma lem6407713 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1062 A K dom f x neut) = (term1062 A K dom f x neut).
Proof. exact (eq_refl (term1062 A K dom f x neut)). Qed.
Lemma lem6407714 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1127 A K ltle k dom f neut x) = (term1064 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6407713 A K dom f x neut) (@lem6407712 A K ltle k dom f neut x)). Qed.
Lemma lem6407715 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6407716 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1132 A K ltle k dom f neut x) = (term1133 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6407715) (@lem6407714 A K ltle k dom f neut x)). Qed.
Lemma lem6407717 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K) (x : K) : (term1129 A K ltle k dom f neut x j) = (term1051 A K ltle k dom f neut j x).
Proof. exact (eq_refl (term1129 A K ltle k dom f neut x j)). Qed.
Lemma lem6407718 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1062 A K dom f x neut) = (term1062 A K dom f x neut).
Proof. exact (eq_refl (term1062 A K dom f x neut)). Qed.
Lemma lem6407719 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K) (x : K) : (term1134 A K ltle k dom f neut x j) = (term1135 A K ltle k dom f neut j x).
Proof. exact (MK_COMB (@lem6407718 A K dom f x neut) (@lem6407717 A K ltle k dom f neut j x)). Qed.
Lemma lem6407720 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1136 A K ltle k dom f neut x) = (term1137 A K ltle k dom f neut x).
Proof. exact (fun_ext (fun j : K => @lem6407719 A K ltle k dom f neut j x)). Qed.
Lemma lem6407721 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6407722 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1128 A K ltle k dom f neut x) = (term1138 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6407721 K) (@lem6407720 A K ltle k dom f neut x)). Qed.
Lemma lem6407723 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : ((term1127 A K ltle k dom f neut x) = (term1128 A K ltle k dom f neut x)) = ((term1064 A K ltle k dom f neut x) = (term1138 A K ltle k dom f neut x)).
Proof. exact (MK_COMB (@lem6407716 A K ltle k dom f neut x) (@lem6407722 A K ltle k dom f neut x)). Qed.
Lemma lem6407724 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1064 A K ltle k dom f neut x) = (term1138 A K ltle k dom f neut x).
Proof. exact (EQ_MP (@lem6407723 A K ltle k dom f neut x) (@lem6407708 A K ltle k dom f neut x)). Qed.
Lemma lem6407725 {K : Type'} (k : K -> Prop) (x : K) : (term1066 K k x) = (term1066 K k x).
Proof. exact (eq_refl (term1066 K k x)). Qed.
Lemma lem6407726 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1068 A K ltle k dom f neut x) = (term1139 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6407725 K k x) (@lem6407724 A K ltle k dom f neut x)). Qed.
Lemma lem6407728 {A : Type'} (P : Prop) (Q : A -> Prop) : (term887 A P Q) = (term888 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem6407729 {K : Type'} (P : Prop) (Q : K -> Prop) : (term887 K P Q) = (term888 K P Q).
Proof. exact (@lem6407728 K P Q). Qed.
Lemma lem6407730 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1140 A K ltle k dom f neut x) = (term1141 A K ltle k dom f neut x).
Proof. exact (@lem6407729 K (term72 K k x) (term1137 A K ltle k dom f neut x)). Qed.
Lemma lem6407731 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K) (x : K) : (term1142 A K ltle k dom f neut x j) = (term1135 A K ltle k dom f neut j x).
Proof. exact (eq_refl (term1142 A K ltle k dom f neut x j)). Qed.
Lemma lem6407732 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1143 A K ltle k dom f neut x) = (term1137 A K ltle k dom f neut x).
Proof. exact (fun_ext (fun j : K => @lem6407731 A K ltle k dom f neut j x)). Qed.
Lemma lem6407733 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6407734 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1144 A K ltle k dom f neut x) = (term1138 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6407733 K) (@lem6407732 A K ltle k dom f neut x)). Qed.
Lemma lem6407735 {K : Type'} (k : K -> Prop) (x : K) : (term1066 K k x) = (term1066 K k x).
Proof. exact (eq_refl (term1066 K k x)). Qed.
Lemma lem6407736 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1140 A K ltle k dom f neut x) = (term1139 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6407735 K k x) (@lem6407734 A K ltle k dom f neut x)). Qed.
Lemma lem6407737 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6407738 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1145 A K ltle k dom f neut x) = (term1146 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6407737) (@lem6407736 A K ltle k dom f neut x)). Qed.
Lemma lem6407739 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K) (x : K) : (term1142 A K ltle k dom f neut x j) = (term1135 A K ltle k dom f neut j x).
Proof. exact (eq_refl (term1142 A K ltle k dom f neut x j)). Qed.
Lemma lem6407740 {K : Type'} (k : K -> Prop) (x : K) : (term1066 K k x) = (term1066 K k x).
Proof. exact (eq_refl (term1066 K k x)). Qed.
Lemma lem6407741 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K) (x : K) : (term1147 A K ltle k dom f neut x j) = (term1148 A K ltle k dom f neut j x).
Proof. exact (MK_COMB (@lem6407740 K k x) (@lem6407739 A K ltle k dom f neut j x)). Qed.
Lemma lem6407742 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1149 A K ltle k dom f neut x) = (term1150 A K ltle k dom f neut x).
Proof. exact (fun_ext (fun j : K => @lem6407741 A K ltle k dom f neut j x)). Qed.
Lemma lem6407743 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6407744 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1141 A K ltle k dom f neut x) = (term1151 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6407743 K) (@lem6407742 A K ltle k dom f neut x)). Qed.
Lemma lem6407745 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : ((term1140 A K ltle k dom f neut x) = (term1141 A K ltle k dom f neut x)) = ((term1139 A K ltle k dom f neut x) = (term1151 A K ltle k dom f neut x)).
Proof. exact (MK_COMB (@lem6407738 A K ltle k dom f neut x) (@lem6407744 A K ltle k dom f neut x)). Qed.
Lemma lem6407746 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1139 A K ltle k dom f neut x) = (term1151 A K ltle k dom f neut x).
Proof. exact (EQ_MP (@lem6407745 A K ltle k dom f neut x) (@lem6407730 A K ltle k dom f neut x)). Qed.
Lemma lem6407747 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1068 A K ltle k dom f neut x) = (term1151 A K ltle k dom f neut x).
Proof. exact (TRANS (@lem6407726 A K ltle k dom f neut x) (@lem6407746 A K ltle k dom f neut x)). Qed.
Lemma lem6407748 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1104 A K ltle k dom f neut) = (term1152 A K ltle k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6407747 A K ltle k dom f neut x)). Qed.
Lemma lem6407749 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6407750 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1113 A K ltle k dom f neut) = (term1153 A K ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407749 K) (@lem6407748 A K ltle k dom f neut)). Qed.
Lemma lem6407752 {A B : Type'} (P : type1413 A B) : (term903 A B P) = (term904 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem6407753 {K : Type'} (P : type1402 K) : (term905 K P) = (term906 K P).
Proof. exact (@lem6407752 K K P). Qed.
Lemma lem6407754 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1154 A K ltle k dom f neut) = (term1155 A K ltle k dom f neut).
Proof. exact (@lem6407753 K (term1156 A K ltle k dom f neut)). Qed.
Lemma lem6407755 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1157 A K ltle k dom f neut x) = (term1150 A K ltle k dom f neut x).
Proof. exact (eq_refl (term1157 A K ltle k dom f neut x)). Qed.
Lemma lem6407756 {K : Type'} (j : K) : j = j.
Proof. exact (eq_refl j). Qed.
Lemma lem6407757 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (j : K) : (term1158 A K ltle k dom f neut x j) = (term1159 A K ltle k dom f neut x j).
Proof. exact (MK_COMB (@lem6407755 A K ltle k dom f neut x) (@lem6407756 K j)). Qed.
Lemma lem6407758 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K) (x : K) : (term1159 A K ltle k dom f neut x j) = (term1148 A K ltle k dom f neut j x).
Proof. exact (eq_refl (term1159 A K ltle k dom f neut x j)). Qed.
Lemma lem6407759 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K) (x : K) : (term1158 A K ltle k dom f neut x j) = (term1148 A K ltle k dom f neut j x).
Proof. exact (TRANS (@lem6407757 A K ltle k dom f neut x j) (@lem6407758 A K ltle k dom f neut j x)). Qed.
Lemma lem6407760 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1160 A K ltle k dom f neut x) = (term1150 A K ltle k dom f neut x).
Proof. exact (fun_ext (fun j : K => @lem6407759 A K ltle k dom f neut j x)). Qed.
Lemma lem6407761 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6407762 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1161 A K ltle k dom f neut x) = (term1151 A K ltle k dom f neut x).
Proof. exact (MK_COMB (@lem6407761 K) (@lem6407760 A K ltle k dom f neut x)). Qed.
Lemma lem6407763 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1162 A K ltle k dom f neut) = (term1152 A K ltle k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6407762 A K ltle k dom f neut x)). Qed.
Lemma lem6407764 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6407765 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1154 A K ltle k dom f neut) = (term1153 A K ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407764 K) (@lem6407763 A K ltle k dom f neut)). Qed.
Lemma lem6407766 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6407767 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1163 A K ltle k dom f neut) = (term1164 A K ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407766) (@lem6407765 A K ltle k dom f neut)). Qed.
Lemma lem6407768 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) : (term1157 A K ltle k dom f neut x) = (term1150 A K ltle k dom f neut x).
Proof. exact (eq_refl (term1157 A K ltle k dom f neut x)). Qed.
Lemma lem6407769 {K : Type'} (j : K -> K) (x : K) : (j x) = (j x).
Proof. exact (eq_refl (j x)). Qed.
Lemma lem6407770 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K -> K) (x : K) : (term1165 A K ltle k dom f neut j x) = (term1166 A K ltle k dom f neut j x).
Proof. exact (MK_COMB (@lem6407768 A K ltle k dom f neut x) (@lem6407769 K j x)). Qed.
Lemma lem6407771 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K -> K) (x : K) : (term1166 A K ltle k dom f neut j x) = (term1167 A K ltle k dom f neut j x).
Proof. exact (eq_refl (term1166 A K ltle k dom f neut j x)). Qed.
Lemma lem6407772 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K -> K) (x : K) : (term1165 A K ltle k dom f neut j x) = (term1167 A K ltle k dom f neut j x).
Proof. exact (TRANS (@lem6407770 A K ltle k dom f neut j x) (@lem6407771 A K ltle k dom f neut j x)). Qed.
Lemma lem6407773 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K -> K) : (term1168 A K ltle k dom f neut j) = (term1169 A K ltle k dom f neut j).
Proof. exact (fun_ext (fun x : K => @lem6407772 A K ltle k dom f neut j x)). Qed.
Lemma lem6407774 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6407775 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K -> K) : (term1170 A K ltle k dom f neut j) = (term1171 A K ltle k dom f neut j).
Proof. exact (MK_COMB (@lem6407774 K) (@lem6407773 A K ltle k dom f neut j)). Qed.
Lemma lem6407776 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1172 A K ltle k dom f neut) = (term1173 A K ltle k dom f neut).
Proof. exact (fun_ext (fun j : K -> K => @lem6407775 A K ltle k dom f neut j)). Qed.
Lemma lem6407777 {K : Type'} : (@ex (K -> K)) = (@ex (K -> K)).
Proof. exact (eq_refl (@ex (K -> K))). Qed.
Lemma lem6407778 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1155 A K ltle k dom f neut) = (term1174 A K ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407777 K) (@lem6407776 A K ltle k dom f neut)). Qed.
Lemma lem6407779 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term1154 A K ltle k dom f neut) = (term1155 A K ltle k dom f neut)) = ((term1153 A K ltle k dom f neut) = (term1174 A K ltle k dom f neut)).
Proof. exact (MK_COMB (@lem6407767 A K ltle k dom f neut) (@lem6407778 A K ltle k dom f neut)). Qed.
Lemma lem6407780 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1153 A K ltle k dom f neut) = (term1174 A K ltle k dom f neut).
Proof. exact (EQ_MP (@lem6407779 A K ltle k dom f neut) (@lem6407754 A K ltle k dom f neut)). Qed.
Lemma lem6407781 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1113 A K ltle k dom f neut) = (term1174 A K ltle k dom f neut).
Proof. exact (TRANS (@lem6407750 A K ltle k dom f neut) (@lem6407780 A K ltle k dom f neut)). Qed.
Lemma lem6407782 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6407783 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1115 A K ltle k dom f neut) = (term1175 A K ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407782) (@lem6407781 A K ltle k dom f neut)). Qed.
Lemma lem6407784 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1083 A K _80095 ltle k dom f neut) = (term1083 A K _80095 ltle k dom f neut).
Proof. exact (eq_refl (term1083 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407785 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1116 A K _80095 ltle k dom f neut) = (term1176 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407783 A K ltle k dom f neut) (@lem6407784 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407787 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1177 A P Q) = (term1178 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem6407788 {K : Type'} (P : type488 K) (Q : Prop) : (term1179 K P Q) = (term1180 K P Q).
Proof. exact (@lem6407787 (K -> K) P Q). Qed.
Lemma lem6407789 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1181 A K _80095 ltle k dom f neut) = (term1182 A K _80095 ltle k dom f neut).
Proof. exact (@lem6407788 K (term1173 A K ltle k dom f neut) (term1083 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407790 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K -> K) : (term1183 A K ltle k dom f neut j) = (term1171 A K ltle k dom f neut j).
Proof. exact (eq_refl (term1183 A K ltle k dom f neut j)). Qed.
Lemma lem6407791 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1184 A K ltle k dom f neut) = (term1173 A K ltle k dom f neut).
Proof. exact (fun_ext (fun j : K -> K => @lem6407790 A K ltle k dom f neut j)). Qed.
Lemma lem6407792 {K : Type'} : (@ex (K -> K)) = (@ex (K -> K)).
Proof. exact (eq_refl (@ex (K -> K))). Qed.
Lemma lem6407793 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1185 A K ltle k dom f neut) = (term1174 A K ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407792 K) (@lem6407791 A K ltle k dom f neut)). Qed.
Lemma lem6407794 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6407795 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1186 A K ltle k dom f neut) = (term1175 A K ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407794) (@lem6407793 A K ltle k dom f neut)). Qed.
Lemma lem6407796 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1083 A K _80095 ltle k dom f neut) = (term1083 A K _80095 ltle k dom f neut).
Proof. exact (eq_refl (term1083 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407797 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1181 A K _80095 ltle k dom f neut) = (term1176 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407795 A K ltle k dom f neut) (@lem6407796 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407798 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6407799 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1187 A K _80095 ltle k dom f neut) = (term1188 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407798) (@lem6407797 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407800 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K -> K) : (term1183 A K ltle k dom f neut j) = (term1171 A K ltle k dom f neut j).
Proof. exact (eq_refl (term1183 A K ltle k dom f neut j)). Qed.
Lemma lem6407801 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6407802 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K -> K) : (term1189 A K ltle k dom f neut j) = (term1190 A K ltle k dom f neut j).
Proof. exact (MK_COMB (@lem6407801) (@lem6407800 A K ltle k dom f neut j)). Qed.
Lemma lem6407803 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1083 A K _80095 ltle k dom f neut) = (term1083 A K _80095 ltle k dom f neut).
Proof. exact (eq_refl (term1083 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407804 {A K : Type'} (j : K -> K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1191 A K j _80095 ltle k dom f neut) = (term1192 A K j _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407802 A K ltle k dom f neut j) (@lem6407803 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407805 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1193 A K _80095 ltle k dom f neut) = (term1194 A K _80095 ltle k dom f neut).
Proof. exact (fun_ext (fun j : K -> K => @lem6407804 A K j _80095 ltle k dom f neut)). Qed.
Lemma lem6407806 {K : Type'} : (@ex (K -> K)) = (@ex (K -> K)).
Proof. exact (eq_refl (@ex (K -> K))). Qed.
Lemma lem6407807 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1182 A K _80095 ltle k dom f neut) = (term1195 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407806 K) (@lem6407805 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407808 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term1181 A K _80095 ltle k dom f neut) = (term1182 A K _80095 ltle k dom f neut)) = ((term1176 A K _80095 ltle k dom f neut) = (term1195 A K _80095 ltle k dom f neut)).
Proof. exact (MK_COMB (@lem6407799 A K _80095 ltle k dom f neut) (@lem6407807 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407809 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1176 A K _80095 ltle k dom f neut) = (term1195 A K _80095 ltle k dom f neut).
Proof. exact (EQ_MP (@lem6407808 A K _80095 ltle k dom f neut) (@lem6407789 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407810 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1116 A K _80095 ltle k dom f neut) = (term1195 A K _80095 ltle k dom f neut).
Proof. exact (TRANS (@lem6407785 A K _80095 ltle k dom f neut) (@lem6407809 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407811 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1117 A K _80095 ltle k dom f) = (term1196 A K _80095 ltle k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6407810 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407812 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6407813 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1118 A K _80095 ltle k dom f) = (term1197 A K _80095 ltle k dom f).
Proof. exact (MK_COMB (@lem6407812 A) (@lem6407811 A K _80095 ltle k dom f)). Qed.
Lemma lem6407815 {A B : Type'} (P : type1413 A B) : (term903 A B P) = (term904 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem6407816 {A K : Type'} (P : type1373 A K) : (term930 A K P) = (term931 A K P).
Proof. exact (@lem6407815 A (K -> K) P). Qed.
Lemma lem6407817 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1198 A K _80095 ltle k dom f) = (term1199 A K _80095 ltle k dom f).
Proof. exact (@lem6407816 A K (term1200 A K _80095 ltle k dom f)). Qed.
Lemma lem6407818 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1201 A K _80095 ltle k dom f neut) = (term1194 A K _80095 ltle k dom f neut).
Proof. exact (eq_refl (term1201 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407819 {K : Type'} (j : K -> K) : j = j.
Proof. exact (eq_refl j). Qed.
Lemma lem6407820 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (j : K -> K) : (term1202 A K _80095 ltle k dom f neut j) = (term1203 A K _80095 ltle k dom f neut j).
Proof. exact (MK_COMB (@lem6407818 A K _80095 ltle k dom f neut) (@lem6407819 K j)). Qed.
Lemma lem6407821 {A K : Type'} (j : K -> K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1203 A K _80095 ltle k dom f neut j) = (term1192 A K j _80095 ltle k dom f neut).
Proof. exact (eq_refl (term1203 A K _80095 ltle k dom f neut j)). Qed.
Lemma lem6407822 {A K : Type'} (j : K -> K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1202 A K _80095 ltle k dom f neut j) = (term1192 A K j _80095 ltle k dom f neut).
Proof. exact (TRANS (@lem6407820 A K _80095 ltle k dom f neut j) (@lem6407821 A K j _80095 ltle k dom f neut)). Qed.
Lemma lem6407823 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1204 A K _80095 ltle k dom f neut) = (term1194 A K _80095 ltle k dom f neut).
Proof. exact (fun_ext (fun j : K -> K => @lem6407822 A K j _80095 ltle k dom f neut)). Qed.
Lemma lem6407824 {K : Type'} : (@ex (K -> K)) = (@ex (K -> K)).
Proof. exact (eq_refl (@ex (K -> K))). Qed.
Lemma lem6407825 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1205 A K _80095 ltle k dom f neut) = (term1195 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6407824 K) (@lem6407823 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407826 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1206 A K _80095 ltle k dom f) = (term1196 A K _80095 ltle k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6407825 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407827 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6407828 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1198 A K _80095 ltle k dom f) = (term1197 A K _80095 ltle k dom f).
Proof. exact (MK_COMB (@lem6407827 A) (@lem6407826 A K _80095 ltle k dom f)). Qed.
Lemma lem6407829 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6407830 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1207 A K _80095 ltle k dom f) = (term1208 A K _80095 ltle k dom f).
Proof. exact (MK_COMB (@lem6407829) (@lem6407828 A K _80095 ltle k dom f)). Qed.
Lemma lem6407831 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1201 A K _80095 ltle k dom f neut) = (term1194 A K _80095 ltle k dom f neut).
Proof. exact (eq_refl (term1201 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6407832 {A K : Type'} (j : type1411 A K) (neut : A) : (j neut) = (j neut).
Proof. exact (eq_refl (j neut)). Qed.
Lemma lem6407833 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (j : type1411 A K) (neut : A) : (term1209 A K _80095 ltle k dom f j neut) = (term1210 A K _80095 ltle k dom f j neut).
Proof. exact (MK_COMB (@lem6407831 A K _80095 ltle k dom f neut) (@lem6407832 A K j neut)). Qed.
Lemma lem6407834 {A K : Type'} (j : type1411 A K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1210 A K _80095 ltle k dom f j neut) = (term1211 A K j _80095 ltle k dom f neut).
Proof. exact (eq_refl (term1210 A K _80095 ltle k dom f j neut)). Qed.
Lemma lem6407835 {A K : Type'} (j : type1411 A K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1209 A K _80095 ltle k dom f j neut) = (term1211 A K j _80095 ltle k dom f neut).
Proof. exact (TRANS (@lem6407833 A K _80095 ltle k dom f j neut) (@lem6407834 A K j _80095 ltle k dom f neut)). Qed.
Lemma lem6407836 {A K : Type'} (j : type1411 A K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1212 A K _80095 ltle k dom f j) = (term1213 A K j _80095 ltle k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6407835 A K j _80095 ltle k dom f neut)). Qed.
Lemma lem6407837 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6407838 {A K : Type'} (j : type1411 A K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1214 A K _80095 ltle k dom f j) = (term1215 A K j _80095 ltle k dom f).
Proof. exact (MK_COMB (@lem6407837 A) (@lem6407836 A K j _80095 ltle k dom f)). Qed.
Lemma lem6407839 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1216 A K _80095 ltle k dom f) = (term1217 A K _80095 ltle k dom f).
Proof. exact (fun_ext (fun j : type1411 A K => @lem6407838 A K j _80095 ltle k dom f)). Qed.
Lemma lem6407840 {A K : Type'} : (@ex (A -> K -> K)) = (@ex (A -> K -> K)).
Proof. exact (eq_refl (@ex (A -> K -> K))). Qed.
Lemma lem6407841 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1199 A K _80095 ltle k dom f) = (term1218 A K _80095 ltle k dom f).
Proof. exact (MK_COMB (@lem6407840 A K) (@lem6407839 A K _80095 ltle k dom f)). Qed.
Lemma lem6407842 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : ((term1198 A K _80095 ltle k dom f) = (term1199 A K _80095 ltle k dom f)) = ((term1197 A K _80095 ltle k dom f) = (term1218 A K _80095 ltle k dom f)).
Proof. exact (MK_COMB (@lem6407830 A K _80095 ltle k dom f) (@lem6407841 A K _80095 ltle k dom f)). Qed.
Lemma lem6407843 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1197 A K _80095 ltle k dom f) = (term1218 A K _80095 ltle k dom f).
Proof. exact (EQ_MP (@lem6407842 A K _80095 ltle k dom f) (@lem6407817 A K _80095 ltle k dom f)). Qed.
Lemma lem6407844 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1118 A K _80095 ltle k dom f) = (term1218 A K _80095 ltle k dom f).
Proof. exact (TRANS (@lem6407813 A K _80095 ltle k dom f) (@lem6407843 A K _80095 ltle k dom f)). Qed.
Lemma lem6407845 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term1119 A K _80095 ltle k dom) = (term1219 A K _80095 ltle k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6407844 A K _80095 ltle k dom f)). Qed.
Lemma lem6407846 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6407847 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term1120 A K _80095 ltle k dom) = (term1220 A K _80095 ltle k dom).
Proof. exact (MK_COMB (@lem6407846 A K) (@lem6407845 A K _80095 ltle k dom)). Qed.
Lemma lem6407849 {A B : Type'} (P : type1413 A B) : (term903 A B P) = (term904 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem6407850 {A K : Type'} (P : type778 A K) : (term955 A K P) = (term956 A K P).
Proof. exact (@lem6407849 (K -> A) (type1411 A K) P). Qed.
Lemma lem6407851 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term1221 A K _80095 ltle k dom) = (term1222 A K _80095 ltle k dom).
Proof. exact (@lem6407850 A K (term1223 A K _80095 ltle k dom)). Qed.
Lemma lem6407852 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1224 A K _80095 ltle k dom f) = (term1217 A K _80095 ltle k dom f).
Proof. exact (eq_refl (term1224 A K _80095 ltle k dom f)). Qed.
Lemma lem6407853 {A K : Type'} (j : type1411 A K) : j = j.
Proof. exact (eq_refl j). Qed.
Lemma lem6407854 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (j : type1411 A K) : (term1225 A K _80095 ltle k dom f j) = (term1226 A K _80095 ltle k dom f j).
Proof. exact (MK_COMB (@lem6407852 A K _80095 ltle k dom f) (@lem6407853 A K j)). Qed.
Lemma lem6407855 {A K : Type'} (j : type1411 A K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1226 A K _80095 ltle k dom f j) = (term1215 A K j _80095 ltle k dom f).
Proof. exact (eq_refl (term1226 A K _80095 ltle k dom f j)). Qed.
Lemma lem6407856 {A K : Type'} (j : type1411 A K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1225 A K _80095 ltle k dom f j) = (term1215 A K j _80095 ltle k dom f).
Proof. exact (TRANS (@lem6407854 A K _80095 ltle k dom f j) (@lem6407855 A K j _80095 ltle k dom f)). Qed.
Lemma lem6407857 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1227 A K _80095 ltle k dom f) = (term1217 A K _80095 ltle k dom f).
Proof. exact (fun_ext (fun j : type1411 A K => @lem6407856 A K j _80095 ltle k dom f)). Qed.
Lemma lem6407858 {A K : Type'} : (@ex (A -> K -> K)) = (@ex (A -> K -> K)).
Proof. exact (eq_refl (@ex (A -> K -> K))). Qed.
Lemma lem6407859 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1228 A K _80095 ltle k dom f) = (term1218 A K _80095 ltle k dom f).
Proof. exact (MK_COMB (@lem6407858 A K) (@lem6407857 A K _80095 ltle k dom f)). Qed.
Lemma lem6407860 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term1229 A K _80095 ltle k dom) = (term1219 A K _80095 ltle k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6407859 A K _80095 ltle k dom f)). Qed.
Lemma lem6407861 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6407862 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term1221 A K _80095 ltle k dom) = (term1220 A K _80095 ltle k dom).
Proof. exact (MK_COMB (@lem6407861 A K) (@lem6407860 A K _80095 ltle k dom)). Qed.
Lemma lem6407863 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6407864 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term1230 A K _80095 ltle k dom) = (term1231 A K _80095 ltle k dom).
Proof. exact (MK_COMB (@lem6407863) (@lem6407862 A K _80095 ltle k dom)). Qed.
Lemma lem6407865 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1224 A K _80095 ltle k dom f) = (term1217 A K _80095 ltle k dom f).
Proof. exact (eq_refl (term1224 A K _80095 ltle k dom f)). Qed.
Lemma lem6407866 {A K : Type'} (j : type792 A K) (f : K -> A) : (j f) = (j f).
Proof. exact (eq_refl (j f)). Qed.
Lemma lem6407867 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (j : type792 A K) (f : K -> A) : (term1232 A K _80095 ltle k dom j f) = (term1233 A K _80095 ltle k dom j f).
Proof. exact (MK_COMB (@lem6407865 A K _80095 ltle k dom f) (@lem6407866 A K j f)). Qed.
Lemma lem6407868 {A K : Type'} (j : type792 A K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1233 A K _80095 ltle k dom j f) = (term1234 A K j _80095 ltle k dom f).
Proof. exact (eq_refl (term1233 A K _80095 ltle k dom j f)). Qed.
Lemma lem6407869 {A K : Type'} (j : type792 A K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1232 A K _80095 ltle k dom j f) = (term1234 A K j _80095 ltle k dom f).
Proof. exact (TRANS (@lem6407867 A K _80095 ltle k dom j f) (@lem6407868 A K j _80095 ltle k dom f)). Qed.
Lemma lem6407870 {A K : Type'} (j : type792 A K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term1235 A K _80095 ltle k dom j) = (term1236 A K j _80095 ltle k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6407869 A K j _80095 ltle k dom f)). Qed.
Lemma lem6407871 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6407872 {A K : Type'} (j : type792 A K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term1237 A K _80095 ltle k dom j) = (term1238 A K j _80095 ltle k dom).
Proof. exact (MK_COMB (@lem6407871 A K) (@lem6407870 A K j _80095 ltle k dom)). Qed.
Lemma lem6407873 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term1239 A K _80095 ltle k dom) = (term1240 A K _80095 ltle k dom).
Proof. exact (fun_ext (fun j : type792 A K => @lem6407872 A K j _80095 ltle k dom)). Qed.
Lemma lem6407874 {A K : Type'} : (@ex ((K -> A) -> A -> K -> K)) = (@ex ((K -> A) -> A -> K -> K)).
Proof. exact (eq_refl (@ex ((K -> A) -> A -> K -> K))). Qed.
Lemma lem6407875 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term1222 A K _80095 ltle k dom) = (term1241 A K _80095 ltle k dom).
Proof. exact (MK_COMB (@lem6407874 A K) (@lem6407873 A K _80095 ltle k dom)). Qed.
Lemma lem6407876 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : ((term1221 A K _80095 ltle k dom) = (term1222 A K _80095 ltle k dom)) = ((term1220 A K _80095 ltle k dom) = (term1241 A K _80095 ltle k dom)).
Proof. exact (MK_COMB (@lem6407864 A K _80095 ltle k dom) (@lem6407875 A K _80095 ltle k dom)). Qed.
Lemma lem6407877 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term1220 A K _80095 ltle k dom) = (term1241 A K _80095 ltle k dom).
Proof. exact (EQ_MP (@lem6407876 A K _80095 ltle k dom) (@lem6407851 A K _80095 ltle k dom)). Qed.
Lemma lem6407878 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term1120 A K _80095 ltle k dom) = (term1241 A K _80095 ltle k dom).
Proof. exact (TRANS (@lem6407847 A K _80095 ltle k dom) (@lem6407877 A K _80095 ltle k dom)). Qed.
Lemma lem6407879 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term1121 A K _80095 ltle k) = (term1242 A K _80095 ltle k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6407878 A K _80095 ltle k dom)). Qed.
Lemma lem6407880 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6407881 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term1122 A K _80095 ltle k) = (term1243 A K _80095 ltle k).
Proof. exact (MK_COMB (@lem6407880 A) (@lem6407879 A K _80095 ltle k)). Qed.
Lemma lem6407883 {A B : Type'} (P : type1413 A B) : (term903 A B P) = (term904 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem6407884 {A K : Type'} (P : type604 A K) : (term980 A K P) = (term981 A K P).
Proof. exact (@lem6407883 (A -> Prop) (type792 A K) P). Qed.
Lemma lem6407885 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term1244 A K _80095 ltle k) = (term1245 A K _80095 ltle k).
Proof. exact (@lem6407884 A K (term1246 A K _80095 ltle k)). Qed.
Lemma lem6407886 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term1247 A K _80095 ltle k dom) = (term1240 A K _80095 ltle k dom).
Proof. exact (eq_refl (term1247 A K _80095 ltle k dom)). Qed.
Lemma lem6407887 {A K : Type'} (j : type792 A K) : j = j.
Proof. exact (eq_refl j). Qed.
Lemma lem6407888 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (j : type792 A K) : (term1248 A K _80095 ltle k dom j) = (term1249 A K _80095 ltle k dom j).
Proof. exact (MK_COMB (@lem6407886 A K _80095 ltle k dom) (@lem6407887 A K j)). Qed.
Lemma lem6407889 {A K : Type'} (j : type792 A K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term1249 A K _80095 ltle k dom j) = (term1238 A K j _80095 ltle k dom).
Proof. exact (eq_refl (term1249 A K _80095 ltle k dom j)). Qed.
Lemma lem6407890 {A K : Type'} (j : type792 A K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term1248 A K _80095 ltle k dom j) = (term1238 A K j _80095 ltle k dom).
Proof. exact (TRANS (@lem6407888 A K _80095 ltle k dom j) (@lem6407889 A K j _80095 ltle k dom)). Qed.
Lemma lem6407891 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term1250 A K _80095 ltle k dom) = (term1240 A K _80095 ltle k dom).
Proof. exact (fun_ext (fun j : type792 A K => @lem6407890 A K j _80095 ltle k dom)). Qed.
Lemma lem6407892 {A K : Type'} : (@ex ((K -> A) -> A -> K -> K)) = (@ex ((K -> A) -> A -> K -> K)).
Proof. exact (eq_refl (@ex ((K -> A) -> A -> K -> K))). Qed.
Lemma lem6407893 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term1251 A K _80095 ltle k dom) = (term1241 A K _80095 ltle k dom).
Proof. exact (MK_COMB (@lem6407892 A K) (@lem6407891 A K _80095 ltle k dom)). Qed.
Lemma lem6407894 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term1252 A K _80095 ltle k) = (term1242 A K _80095 ltle k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6407893 A K _80095 ltle k dom)). Qed.
Lemma lem6407895 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6407896 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term1244 A K _80095 ltle k) = (term1243 A K _80095 ltle k).
Proof. exact (MK_COMB (@lem6407895 A) (@lem6407894 A K _80095 ltle k)). Qed.
Lemma lem6407897 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6407898 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term1253 A K _80095 ltle k) = (term1254 A K _80095 ltle k).
Proof. exact (MK_COMB (@lem6407897) (@lem6407896 A K _80095 ltle k)). Qed.
Lemma lem6407899 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term1247 A K _80095 ltle k dom) = (term1240 A K _80095 ltle k dom).
Proof. exact (eq_refl (term1247 A K _80095 ltle k dom)). Qed.
Lemma lem6407900 {A K : Type'} (j : type649 A K) (dom : A -> Prop) : (j dom) = (j dom).
Proof. exact (eq_refl (j dom)). Qed.
Lemma lem6407901 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (j : type649 A K) (dom : A -> Prop) : (term1255 A K _80095 ltle k j dom) = (term1256 A K _80095 ltle k j dom).
Proof. exact (MK_COMB (@lem6407899 A K _80095 ltle k dom) (@lem6407900 A K j dom)). Qed.
Lemma lem6407902 {A K : Type'} (j : type649 A K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term1256 A K _80095 ltle k j dom) = (term1257 A K j _80095 ltle k dom).
Proof. exact (eq_refl (term1256 A K _80095 ltle k j dom)). Qed.
Lemma lem6407903 {A K : Type'} (j : type649 A K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term1255 A K _80095 ltle k j dom) = (term1257 A K j _80095 ltle k dom).
Proof. exact (TRANS (@lem6407901 A K _80095 ltle k j dom) (@lem6407902 A K j _80095 ltle k dom)). Qed.
Lemma lem6407904 {A K : Type'} (j : type649 A K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term1258 A K _80095 ltle k j) = (term1259 A K j _80095 ltle k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6407903 A K j _80095 ltle k dom)). Qed.
Lemma lem6407905 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6407906 {A K : Type'} (j : type649 A K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term1260 A K _80095 ltle k j) = (term1261 A K j _80095 ltle k).
Proof. exact (MK_COMB (@lem6407905 A) (@lem6407904 A K j _80095 ltle k)). Qed.
Lemma lem6407907 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term1262 A K _80095 ltle k) = (term1263 A K _80095 ltle k).
Proof. exact (fun_ext (fun j : type649 A K => @lem6407906 A K j _80095 ltle k)). Qed.
Lemma lem6407908 {A K : Type'} : (@ex ((A -> Prop) -> (K -> A) -> A -> K -> K)) = (@ex ((A -> Prop) -> (K -> A) -> A -> K -> K)).
Proof. exact (eq_refl (@ex ((A -> Prop) -> (K -> A) -> A -> K -> K))). Qed.
Lemma lem6407909 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term1245 A K _80095 ltle k) = (term1264 A K _80095 ltle k).
Proof. exact (MK_COMB (@lem6407908 A K) (@lem6407907 A K _80095 ltle k)). Qed.
Lemma lem6407910 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : ((term1244 A K _80095 ltle k) = (term1245 A K _80095 ltle k)) = ((term1243 A K _80095 ltle k) = (term1264 A K _80095 ltle k)).
Proof. exact (MK_COMB (@lem6407898 A K _80095 ltle k) (@lem6407909 A K _80095 ltle k)). Qed.
Lemma lem6407911 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term1243 A K _80095 ltle k) = (term1264 A K _80095 ltle k).
Proof. exact (EQ_MP (@lem6407910 A K _80095 ltle k) (@lem6407885 A K _80095 ltle k)). Qed.
Lemma lem6407912 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term1122 A K _80095 ltle k) = (term1264 A K _80095 ltle k).
Proof. exact (TRANS (@lem6407881 A K _80095 ltle k) (@lem6407911 A K _80095 ltle k)). Qed.
Lemma lem6407913 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term1123 A K _80095 ltle) = (term1265 A K _80095 ltle).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6407912 A K _80095 ltle k)). Qed.
Lemma lem6407914 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6407915 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term1124 A K _80095 ltle) = (term1266 A K _80095 ltle).
Proof. exact (MK_COMB (@lem6407914 K) (@lem6407913 A K _80095 ltle)). Qed.
Lemma lem6407917 {A B : Type'} (P : type1413 A B) : (term903 A B P) = (term904 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem6407918 {A K : Type'} (P : type819 A K) : (term1005 A K P) = (term1006 A K P).
Proof. exact (@lem6407917 (K -> Prop) (type649 A K) P). Qed.
Lemma lem6407919 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term1267 A K _80095 ltle) = (term1268 A K _80095 ltle).
Proof. exact (@lem6407918 A K (term1269 A K _80095 ltle)). Qed.
Lemma lem6407920 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term1270 A K _80095 ltle k) = (term1263 A K _80095 ltle k).
Proof. exact (eq_refl (term1270 A K _80095 ltle k)). Qed.
Lemma lem6407921 {A K : Type'} (j : type649 A K) : j = j.
Proof. exact (eq_refl j). Qed.
Lemma lem6407922 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (j : type649 A K) : (term1271 A K _80095 ltle k j) = (term1272 A K _80095 ltle k j).
Proof. exact (MK_COMB (@lem6407920 A K _80095 ltle k) (@lem6407921 A K j)). Qed.
Lemma lem6407923 {A K : Type'} (j : type649 A K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term1272 A K _80095 ltle k j) = (term1261 A K j _80095 ltle k).
Proof. exact (eq_refl (term1272 A K _80095 ltle k j)). Qed.
Lemma lem6407924 {A K : Type'} (j : type649 A K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term1271 A K _80095 ltle k j) = (term1261 A K j _80095 ltle k).
Proof. exact (TRANS (@lem6407922 A K _80095 ltle k j) (@lem6407923 A K j _80095 ltle k)). Qed.
Lemma lem6407925 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term1273 A K _80095 ltle k) = (term1263 A K _80095 ltle k).
Proof. exact (fun_ext (fun j : type649 A K => @lem6407924 A K j _80095 ltle k)). Qed.
Lemma lem6407926 {A K : Type'} : (@ex ((A -> Prop) -> (K -> A) -> A -> K -> K)) = (@ex ((A -> Prop) -> (K -> A) -> A -> K -> K)).
Proof. exact (eq_refl (@ex ((A -> Prop) -> (K -> A) -> A -> K -> K))). Qed.
Lemma lem6407927 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term1274 A K _80095 ltle k) = (term1264 A K _80095 ltle k).
Proof. exact (MK_COMB (@lem6407926 A K) (@lem6407925 A K _80095 ltle k)). Qed.
Lemma lem6407928 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term1275 A K _80095 ltle) = (term1265 A K _80095 ltle).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6407927 A K _80095 ltle k)). Qed.
Lemma lem6407929 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6407930 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term1267 A K _80095 ltle) = (term1266 A K _80095 ltle).
Proof. exact (MK_COMB (@lem6407929 K) (@lem6407928 A K _80095 ltle)). Qed.
Lemma lem6407931 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6407932 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term1276 A K _80095 ltle) = (term1277 A K _80095 ltle).
Proof. exact (MK_COMB (@lem6407931) (@lem6407930 A K _80095 ltle)). Qed.
Lemma lem6407933 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term1270 A K _80095 ltle k) = (term1263 A K _80095 ltle k).
Proof. exact (eq_refl (term1270 A K _80095 ltle k)). Qed.
Lemma lem6407934 {A K : Type'} (j : type834 A K) (k : K -> Prop) : (j k) = (j k).
Proof. exact (eq_refl (j k)). Qed.
Lemma lem6407935 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (j : type834 A K) (k : K -> Prop) : (term1278 A K _80095 ltle j k) = (term1279 A K _80095 ltle j k).
Proof. exact (MK_COMB (@lem6407933 A K _80095 ltle k) (@lem6407934 A K j k)). Qed.
Lemma lem6407936 {A K : Type'} (j : type834 A K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term1279 A K _80095 ltle j k) = (term1280 A K j _80095 ltle k).
Proof. exact (eq_refl (term1279 A K _80095 ltle j k)). Qed.
Lemma lem6407937 {A K : Type'} (j : type834 A K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (term1278 A K _80095 ltle j k) = (term1280 A K j _80095 ltle k).
Proof. exact (TRANS (@lem6407935 A K _80095 ltle j k) (@lem6407936 A K j _80095 ltle k)). Qed.
Lemma lem6407938 {A K : Type'} (j : type834 A K) (_80095 : type756 A K) (ltle : type1402 K) : (term1281 A K _80095 ltle j) = (term1282 A K j _80095 ltle).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6407937 A K j _80095 ltle k)). Qed.
Lemma lem6407939 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6407940 {A K : Type'} (j : type834 A K) (_80095 : type756 A K) (ltle : type1402 K) : (term1283 A K _80095 ltle j) = (term1284 A K j _80095 ltle).
Proof. exact (MK_COMB (@lem6407939 K) (@lem6407938 A K j _80095 ltle)). Qed.
Lemma lem6407941 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term1285 A K _80095 ltle) = (term1286 A K _80095 ltle).
Proof. exact (fun_ext (fun j : type834 A K => @lem6407940 A K j _80095 ltle)). Qed.
Lemma lem6407942 {A K : Type'} : (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K)) = (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K)).
Proof. exact (eq_refl (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K))). Qed.
Lemma lem6407943 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term1268 A K _80095 ltle) = (term1287 A K _80095 ltle).
Proof. exact (MK_COMB (@lem6407942 A K) (@lem6407941 A K _80095 ltle)). Qed.
Lemma lem6407944 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : ((term1267 A K _80095 ltle) = (term1268 A K _80095 ltle)) = ((term1266 A K _80095 ltle) = (term1287 A K _80095 ltle)).
Proof. exact (MK_COMB (@lem6407932 A K _80095 ltle) (@lem6407943 A K _80095 ltle)). Qed.
Lemma lem6407945 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term1266 A K _80095 ltle) = (term1287 A K _80095 ltle).
Proof. exact (EQ_MP (@lem6407944 A K _80095 ltle) (@lem6407919 A K _80095 ltle)). Qed.
Lemma lem6407946 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term1124 A K _80095 ltle) = (term1287 A K _80095 ltle).
Proof. exact (TRANS (@lem6407915 A K _80095 ltle) (@lem6407945 A K _80095 ltle)). Qed.
Lemma lem6407947 {A K : Type'} (_80095 : type756 A K) : (term1125 A K _80095) = (term1288 A K _80095).
Proof. exact (fun_ext (fun ltle : type1402 K => @lem6407946 A K _80095 ltle)). Qed.
Lemma lem6407948 {K : Type'} : (@all (K -> K -> Prop)) = (@all (K -> K -> Prop)).
Proof. exact (eq_refl (@all (K -> K -> Prop))). Qed.
Lemma lem6407949 {A K : Type'} (_80095 : type756 A K) : (term1126 A K _80095) = (term1289 A K _80095).
Proof. exact (MK_COMB (@lem6407948 K) (@lem6407947 A K _80095)). Qed.
Lemma lem6407951 {A B : Type'} (P : type1413 A B) : (term903 A B P) = (term904 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem6407952 {A K : Type'} (P : type751 A K) : (term1290 A K P) = (term1291 A K P).
Proof. exact (@lem6407951 (type1402 K) (type834 A K) P). Qed.
Lemma lem6407953 {A K : Type'} (_80095 : type756 A K) : (term1292 A K _80095) = (term1293 A K _80095).
Proof. exact (@lem6407952 A K (term1294 A K _80095)). Qed.
Lemma lem6407954 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term1295 A K _80095 ltle) = (term1286 A K _80095 ltle).
Proof. exact (eq_refl (term1295 A K _80095 ltle)). Qed.
Lemma lem6407955 {A K : Type'} (j : type834 A K) : j = j.
Proof. exact (eq_refl j). Qed.
Lemma lem6407956 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (j : type834 A K) : (term1296 A K _80095 ltle j) = (term1297 A K _80095 ltle j).
Proof. exact (MK_COMB (@lem6407954 A K _80095 ltle) (@lem6407955 A K j)). Qed.
Lemma lem6407957 {A K : Type'} (j : type834 A K) (_80095 : type756 A K) (ltle : type1402 K) : (term1297 A K _80095 ltle j) = (term1284 A K j _80095 ltle).
Proof. exact (eq_refl (term1297 A K _80095 ltle j)). Qed.
Lemma lem6407958 {A K : Type'} (j : type834 A K) (_80095 : type756 A K) (ltle : type1402 K) : (term1296 A K _80095 ltle j) = (term1284 A K j _80095 ltle).
Proof. exact (TRANS (@lem6407956 A K _80095 ltle j) (@lem6407957 A K j _80095 ltle)). Qed.
Lemma lem6407959 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term1298 A K _80095 ltle) = (term1286 A K _80095 ltle).
Proof. exact (fun_ext (fun j : type834 A K => @lem6407958 A K j _80095 ltle)). Qed.
Lemma lem6407960 {A K : Type'} : (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K)) = (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K)).
Proof. exact (eq_refl (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K))). Qed.
Lemma lem6407961 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term1299 A K _80095 ltle) = (term1287 A K _80095 ltle).
Proof. exact (MK_COMB (@lem6407960 A K) (@lem6407959 A K _80095 ltle)). Qed.
Lemma lem6407962 {A K : Type'} (_80095 : type756 A K) : (term1300 A K _80095) = (term1288 A K _80095).
Proof. exact (fun_ext (fun ltle : type1402 K => @lem6407961 A K _80095 ltle)). Qed.
Lemma lem6407963 {K : Type'} : (@all (K -> K -> Prop)) = (@all (K -> K -> Prop)).
Proof. exact (eq_refl (@all (K -> K -> Prop))). Qed.
Lemma lem6407964 {A K : Type'} (_80095 : type756 A K) : (term1292 A K _80095) = (term1289 A K _80095).
Proof. exact (MK_COMB (@lem6407963 K) (@lem6407962 A K _80095)). Qed.
Lemma lem6407965 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6407966 {A K : Type'} (_80095 : type756 A K) : (term1301 A K _80095) = (term1302 A K _80095).
Proof. exact (MK_COMB (@lem6407965) (@lem6407964 A K _80095)). Qed.
Lemma lem6407967 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (term1295 A K _80095 ltle) = (term1286 A K _80095 ltle).
Proof. exact (eq_refl (term1295 A K _80095 ltle)). Qed.
Lemma lem6407968 {A K : Type'} (j : type755 A K) (ltle : type1402 K) : (j ltle) = (j ltle).
Proof. exact (eq_refl (j ltle)). Qed.
Lemma lem6407969 {A K : Type'} (_80095 : type756 A K) (j : type755 A K) (ltle : type1402 K) : (term1303 A K _80095 j ltle) = (term1304 A K _80095 j ltle).
Proof. exact (MK_COMB (@lem6407967 A K _80095 ltle) (@lem6407968 A K j ltle)). Qed.
Lemma lem6407970 {A K : Type'} (j : type755 A K) (_80095 : type756 A K) (ltle : type1402 K) : (term1304 A K _80095 j ltle) = (term1305 A K j _80095 ltle).
Proof. exact (eq_refl (term1304 A K _80095 j ltle)). Qed.
Lemma lem6407971 {A K : Type'} (j : type755 A K) (_80095 : type756 A K) (ltle : type1402 K) : (term1303 A K _80095 j ltle) = (term1305 A K j _80095 ltle).
Proof. exact (TRANS (@lem6407969 A K _80095 j ltle) (@lem6407970 A K j _80095 ltle)). Qed.
Lemma lem6407972 {A K : Type'} (j : type755 A K) (_80095 : type756 A K) : (term1306 A K _80095 j) = (term1307 A K j _80095).
Proof. exact (fun_ext (fun ltle : type1402 K => @lem6407971 A K j _80095 ltle)). Qed.
Lemma lem6407973 {K : Type'} : (@all (K -> K -> Prop)) = (@all (K -> K -> Prop)).
Proof. exact (eq_refl (@all (K -> K -> Prop))). Qed.
Lemma lem6407974 {A K : Type'} (j : type755 A K) (_80095 : type756 A K) : (term1308 A K _80095 j) = (term1309 A K j _80095).
Proof. exact (MK_COMB (@lem6407973 K) (@lem6407972 A K j _80095)). Qed.
Lemma lem6407975 {A K : Type'} (_80095 : type756 A K) : (term1310 A K _80095) = (term1311 A K _80095).
Proof. exact (fun_ext (fun j : type755 A K => @lem6407974 A K j _80095)). Qed.
Lemma lem6407976 {A K : Type'} : (@ex ((K -> K -> Prop) -> (K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K)) = (@ex ((K -> K -> Prop) -> (K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K)).
Proof. exact (eq_refl (@ex ((K -> K -> Prop) -> (K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K))). Qed.
Lemma lem6407977 {A K : Type'} (_80095 : type756 A K) : (term1293 A K _80095) = (term1312 A K _80095).
Proof. exact (MK_COMB (@lem6407976 A K) (@lem6407975 A K _80095)). Qed.
Lemma lem6407978 {A K : Type'} (_80095 : type756 A K) : ((term1292 A K _80095) = (term1293 A K _80095)) = ((term1289 A K _80095) = (term1312 A K _80095)).
Proof. exact (MK_COMB (@lem6407966 A K _80095) (@lem6407977 A K _80095)). Qed.
Lemma lem6407979 {A K : Type'} (_80095 : type756 A K) : (term1289 A K _80095) = (term1312 A K _80095).
Proof. exact (EQ_MP (@lem6407978 A K _80095) (@lem6407953 A K _80095)). Qed.
Lemma lem6407980 {A K : Type'} (_80095 : type756 A K) : (term1126 A K _80095) = (term1312 A K _80095).
Proof. exact (TRANS (@lem6407949 A K _80095) (@lem6407979 A K _80095)). Qed.
Lemma lem6407981 {A K : Type'} (_80095 : type756 A K) : (term1099 A K _80095) = (term1312 A K _80095).
Proof. exact (TRANS (@lem6407700 A K _80095) (@lem6407980 A K _80095)). Qed.
Lemma lem6407982 {A K : Type'} (_80095 : type756 A K) : (term572 A K _80095) = (term1312 A K _80095).
Proof. exact (TRANS (@lem6407417 A K _80095) (@lem6407981 A K _80095)). Qed.
Lemma lem6407983 {A K : Type'} (_80095 : type756 A K) (h1 : term572 A K _80095) : term1312 A K _80095.
Proof. exact (EQ_MP (@lem6407982 A K _80095) (@lem6406271 A K _80095 h1)). Qed.
Lemma lem6407996 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1313 A K k dom f x neut) = (term381 A K k dom f x neut).
Proof. exact (@lem16933 (term381 A K k dom f x neut)). Qed.
Lemma lem6407997 {K : Type'} (P : K -> Prop) : (term1052 K P) = (term1053 K P).
Proof. exact (@lem18392 K P). Qed.
Lemma lem6407998 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term407 A K k dom f neut) = (term1314 A K k dom f neut).
Proof. exact (@lem6407997 K (term405 A K k dom f neut)). Qed.
Lemma lem6407999 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1315 A K k dom f neut x) = (term403 A K k dom f x neut).
Proof. exact (eq_refl (term1315 A K k dom f neut x)). Qed.
Lemma lem6408000 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6408001 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1316 A K k dom f neut x) = (term1313 A K k dom f x neut).
Proof. exact (MK_COMB (@lem6408000) (@lem6407999 A K k dom f x neut)). Qed.
Lemma lem6408002 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1316 A K k dom f neut x) = (term381 A K k dom f x neut).
Proof. exact (TRANS (@lem6408001 A K k dom f x neut) (@lem6407996 A K k dom f x neut)). Qed.
Lemma lem6408003 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1317 A K k dom f neut) = (term466 A K k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6408002 A K k dom f x neut)). Qed.
Lemma lem6408004 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6408005 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1314 A K k dom f neut) = (term1318 A K k dom f neut).
Proof. exact (MK_COMB (@lem6408004 K) (@lem6408003 A K k dom f neut)). Qed.
Lemma lem6408006 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term407 A K k dom f neut) = (term1318 A K k dom f neut).
Proof. exact (TRANS (@lem6407998 A K k dom f neut) (@lem6408005 A K k dom f neut)). Qed.
Lemma lem6408008 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term639 A K _80096 k dom f neut) = (term639 A K _80096 k dom f neut).
Proof. exact (eq_refl (term639 A K _80096 k dom f neut)). Qed.
Lemma lem6408009 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term640 A K _80096 k dom f neut) = (term1319 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6408008 A K _80096 k dom f neut) (@lem6408006 A K k dom f neut)). Qed.
Lemma lem6408011 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term575 A K _80095 ltle k dom f neut i) = (term575 A K _80095 ltle k dom f neut i).
Proof. exact (eq_refl (term575 A K _80095 ltle k dom f neut i)). Qed.
Lemma lem6408012 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term641 A K _80095 ltle i _80096 k dom f neut) = (term1320 A K _80095 ltle i _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6408011 A K _80095 ltle k dom f neut i) (@lem6408009 A K _80096 k dom f neut)). Qed.
Lemma lem6408043 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1029 A P Q) = (term1030 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem6408044 {K : Type'} (P : Prop) (Q : K -> Prop) : (term1029 K P Q) = (term1030 K P Q).
Proof. exact (@lem6408043 K P Q). Qed.
Lemma lem6408045 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1321 A K _80096 k dom f neut) = (term1322 A K _80096 k dom f neut).
Proof. exact (@lem6408044 K (term638 A K _80096 k dom f neut) (term466 A K k dom f neut)). Qed.
Lemma lem6408046 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1323 A K k dom f neut x) = (term381 A K k dom f x neut).
Proof. exact (eq_refl (term1323 A K k dom f neut x)). Qed.
Lemma lem6408047 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1324 A K k dom f neut) = (term466 A K k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6408046 A K k dom f x neut)). Qed.
Lemma lem6408048 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6408049 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1325 A K k dom f neut) = (term1318 A K k dom f neut).
Proof. exact (MK_COMB (@lem6408048 K) (@lem6408047 A K k dom f neut)). Qed.
Lemma lem6408050 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term639 A K _80096 k dom f neut) = (term639 A K _80096 k dom f neut).
Proof. exact (eq_refl (term639 A K _80096 k dom f neut)). Qed.
Lemma lem6408051 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1321 A K _80096 k dom f neut) = (term1319 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6408050 A K _80096 k dom f neut) (@lem6408049 A K k dom f neut)). Qed.
Lemma lem6408052 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6408053 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1326 A K _80096 k dom f neut) = (term1327 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6408052) (@lem6408051 A K _80096 k dom f neut)). Qed.
Lemma lem6408054 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1323 A K k dom f neut x) = (term381 A K k dom f x neut).
Proof. exact (eq_refl (term1323 A K k dom f neut x)). Qed.
Lemma lem6408055 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term639 A K _80096 k dom f neut) = (term639 A K _80096 k dom f neut).
Proof. exact (eq_refl (term639 A K _80096 k dom f neut)). Qed.
Lemma lem6408056 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1328 A K _80096 k dom f neut x) = (term1329 A K _80096 k dom f x neut).
Proof. exact (MK_COMB (@lem6408055 A K _80096 k dom f neut) (@lem6408054 A K k dom f x neut)). Qed.
Lemma lem6408057 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1330 A K _80096 k dom f neut) = (term1331 A K _80096 k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6408056 A K _80096 k dom f x neut)). Qed.
Lemma lem6408058 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6408059 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1322 A K _80096 k dom f neut) = (term1332 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6408058 K) (@lem6408057 A K _80096 k dom f neut)). Qed.
Lemma lem6408060 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term1321 A K _80096 k dom f neut) = (term1322 A K _80096 k dom f neut)) = ((term1319 A K _80096 k dom f neut) = (term1332 A K _80096 k dom f neut)).
Proof. exact (MK_COMB (@lem6408053 A K _80096 k dom f neut) (@lem6408059 A K _80096 k dom f neut)). Qed.
Lemma lem6408061 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1319 A K _80096 k dom f neut) = (term1332 A K _80096 k dom f neut).
Proof. exact (EQ_MP (@lem6408060 A K _80096 k dom f neut) (@lem6408045 A K _80096 k dom f neut)). Qed.
Lemma lem6408062 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term575 A K _80095 ltle k dom f neut i) = (term575 A K _80095 ltle k dom f neut i).
Proof. exact (eq_refl (term575 A K _80095 ltle k dom f neut i)). Qed.
Lemma lem6408063 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1320 A K _80095 ltle i _80096 k dom f neut) = (term1333 A K _80095 ltle i _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6408062 A K _80095 ltle k dom f neut i) (@lem6408061 A K _80096 k dom f neut)). Qed.
Lemma lem6408065 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1029 A P Q) = (term1030 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem6408066 {K : Type'} (P : Prop) (Q : K -> Prop) : (term1029 K P Q) = (term1030 K P Q).
Proof. exact (@lem6408065 K P Q). Qed.
Lemma lem6408067 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1334 A K _80095 ltle i _80096 k dom f neut) = (term1335 A K _80095 ltle i _80096 k dom f neut).
Proof. exact (@lem6408066 K ((_80095 ltle k dom f neut) = i) (term1331 A K _80096 k dom f neut)). Qed.
Lemma lem6408068 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1336 A K _80096 k dom f neut x) = (term1329 A K _80096 k dom f x neut).
Proof. exact (eq_refl (term1336 A K _80096 k dom f neut x)). Qed.
Lemma lem6408069 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1337 A K _80096 k dom f neut) = (term1331 A K _80096 k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6408068 A K _80096 k dom f x neut)). Qed.
Lemma lem6408070 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6408071 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1338 A K _80096 k dom f neut) = (term1332 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6408070 K) (@lem6408069 A K _80096 k dom f neut)). Qed.
Lemma lem6408072 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term575 A K _80095 ltle k dom f neut i) = (term575 A K _80095 ltle k dom f neut i).
Proof. exact (eq_refl (term575 A K _80095 ltle k dom f neut i)). Qed.
Lemma lem6408073 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1334 A K _80095 ltle i _80096 k dom f neut) = (term1333 A K _80095 ltle i _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6408072 A K _80095 ltle k dom f neut i) (@lem6408071 A K _80096 k dom f neut)). Qed.
Lemma lem6408074 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6408075 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1339 A K _80095 ltle i _80096 k dom f neut) = (term1340 A K _80095 ltle i _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6408074) (@lem6408073 A K _80095 ltle i _80096 k dom f neut)). Qed.
Lemma lem6408076 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1336 A K _80096 k dom f neut x) = (term1329 A K _80096 k dom f x neut).
Proof. exact (eq_refl (term1336 A K _80096 k dom f neut x)). Qed.
Lemma lem6408077 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term575 A K _80095 ltle k dom f neut i) = (term575 A K _80095 ltle k dom f neut i).
Proof. exact (eq_refl (term575 A K _80095 ltle k dom f neut i)). Qed.
Lemma lem6408078 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1341 A K _80095 ltle i _80096 k dom f neut x) = (term1342 A K _80095 ltle i _80096 k dom f x neut).
Proof. exact (MK_COMB (@lem6408077 A K _80095 ltle k dom f neut i) (@lem6408076 A K _80096 k dom f x neut)). Qed.
Lemma lem6408079 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1343 A K _80095 ltle i _80096 k dom f neut) = (term1344 A K _80095 ltle i _80096 k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6408078 A K _80095 ltle i _80096 k dom f x neut)). Qed.
Lemma lem6408080 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6408081 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1335 A K _80095 ltle i _80096 k dom f neut) = (term1345 A K _80095 ltle i _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6408080 K) (@lem6408079 A K _80095 ltle i _80096 k dom f neut)). Qed.
Lemma lem6408082 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term1334 A K _80095 ltle i _80096 k dom f neut) = (term1335 A K _80095 ltle i _80096 k dom f neut)) = ((term1333 A K _80095 ltle i _80096 k dom f neut) = (term1345 A K _80095 ltle i _80096 k dom f neut)).
Proof. exact (MK_COMB (@lem6408075 A K _80095 ltle i _80096 k dom f neut) (@lem6408081 A K _80095 ltle i _80096 k dom f neut)). Qed.
Lemma lem6408083 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1333 A K _80095 ltle i _80096 k dom f neut) = (term1345 A K _80095 ltle i _80096 k dom f neut).
Proof. exact (EQ_MP (@lem6408082 A K _80095 ltle i _80096 k dom f neut) (@lem6408067 A K _80095 ltle i _80096 k dom f neut)). Qed.
Lemma lem6408085 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1320 A K _80095 ltle i _80096 k dom f neut) = (term1345 A K _80095 ltle i _80096 k dom f neut).
Proof. exact (TRANS (@lem6408063 A K _80095 ltle i _80096 k dom f neut) (@lem6408083 A K _80095 ltle i _80096 k dom f neut)). Qed.
Lemma lem6408086 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term641 A K _80095 ltle i _80096 k dom f neut) = (term1345 A K _80095 ltle i _80096 k dom f neut).
Proof. exact (TRANS (@lem6408012 A K _80095 ltle i _80096 k dom f neut) (@lem6408085 A K _80095 ltle i _80096 k dom f neut)). Qed.
Lemma lem6408087 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term641 A K _80095 ltle i _80096 k dom f neut) : term1345 A K _80095 ltle i _80096 k dom f neut.
Proof. exact (EQ_MP (@lem6408086 A K _80095 ltle i _80096 k dom f neut) (@lem6406272 A K _80095 ltle i _80096 k dom f neut h1)). Qed.
Lemma lem6408095 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1045 A K f x neut) = ((f x) = neut).
Proof. exact (@lem16933 ((f x) = neut)). Qed.
Lemma lem6408097 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1046 A K dom f x) = (term1046 A K dom f x).
Proof. exact (eq_refl (term1046 A K dom f x)). Qed.
Lemma lem6408098 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1047 A K dom f x neut) = (term1048 A K dom f x neut).
Proof. exact (MK_COMB (@lem6408097 A K dom f x) (@lem6408095 A K f x neut)). Qed.
Lemma lem6408099 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1049 A K dom f x neut) = (term1047 A K dom f x neut).
Proof. exact (@lem17045 (term367 A K dom f x) (term378 A K f x neut)). Qed.
Lemma lem6408100 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1049 A K dom f x neut) = (term1048 A K dom f x neut).
Proof. exact (TRANS (@lem6408099 A K dom f x neut) (@lem6408098 A K dom f x neut)). Qed.
Lemma lem6408105 {K : Type'} (k : K -> Prop) (x : K) : (term1066 K k x) = (term1066 K k x).
Proof. exact (eq_refl (term1066 K k x)). Qed.
Lemma lem6408106 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1070 A K k dom f x neut) = (term1071 A K k dom f x neut).
Proof. exact (MK_COMB (@lem6408105 K k x) (@lem6408100 A K dom f x neut)). Qed.
Lemma lem6408107 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term403 A K k dom f x neut) = (term1070 A K k dom f x neut).
Proof. exact (@lem17045 (k x) (term379 A K dom f x neut)). Qed.
Lemma lem6408108 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term403 A K k dom f x neut) = (term1071 A K k dom f x neut).
Proof. exact (TRANS (@lem6408107 A K k dom f x neut) (@lem6408106 A K k dom f x neut)). Qed.
Lemma lem6408115 {K : Type'} (x : K) (i : K) : (term1346 K x i) = (x = i).
Proof. exact (@lem16933 (x = i)). Qed.
Lemma lem6408116 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6408117 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1347 A K k dom f x neut) = (term1348 A K k dom f x neut).
Proof. exact (MK_COMB (@lem6408116) (@lem6408108 A K k dom f x neut)). Qed.
Lemma lem6408118 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) : (term1349 A K k dom f neut x i) = (term1350 A K k dom f neut x i).
Proof. exact (MK_COMB (@lem6408117 A K k dom f x neut) (@lem6408115 K x i)). Qed.
Lemma lem6408119 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) : (term1351 A K k dom f neut x i) = (term1349 A K k dom f neut x i).
Proof. exact (@lem17045 (term381 A K k dom f x neut) (term434 K x i)). Qed.
Lemma lem6408120 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) : (term1351 A K k dom f neut x i) = (term1350 A K k dom f neut x i).
Proof. exact (TRANS (@lem6408119 A K k dom f neut x i) (@lem6408118 A K k dom f neut x i)). Qed.
Lemma lem6408129 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1045 A K f x neut) = ((f x) = neut).
Proof. exact (@lem16933 ((f x) = neut)). Qed.
Lemma lem6408131 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1046 A K dom f x) = (term1046 A K dom f x).
Proof. exact (eq_refl (term1046 A K dom f x)). Qed.
Lemma lem6408132 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1047 A K dom f x neut) = (term1048 A K dom f x neut).
Proof. exact (MK_COMB (@lem6408131 A K dom f x) (@lem6408129 A K f x neut)). Qed.
Lemma lem6408133 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1049 A K dom f x neut) = (term1047 A K dom f x neut).
Proof. exact (@lem17045 (term367 A K dom f x) (term378 A K f x neut)). Qed.
Lemma lem6408134 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1049 A K dom f x neut) = (term1048 A K dom f x neut).
Proof. exact (TRANS (@lem6408133 A K dom f x neut) (@lem6408132 A K dom f x neut)). Qed.
Lemma lem6408138 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6408139 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) : (term1352 A K k dom f neut x i) = (term1353 A K k dom f neut x i).
Proof. exact (MK_COMB (@lem6408138) (@lem6408120 A K k dom f neut x i)). Qed.
Lemma lem6408140 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1354 A K k i dom f x neut) = (term1355 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6408139 A K k dom f neut x i) (@lem6408134 A K dom f x neut)). Qed.
Lemma lem6408141 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1356 A K k i dom f x neut) = (term1354 A K k i dom f x neut).
Proof. exact (@lem17045 (term435 A K k dom f neut x i) (term379 A K dom f x neut)). Qed.
Lemma lem6408142 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1356 A K k i dom f x neut) = (term1355 A K k i dom f x neut).
Proof. exact (TRANS (@lem6408141 A K k i dom f x neut) (@lem6408140 A K k i dom f x neut)). Qed.
Lemma lem6408151 {K : Type'} (x : K) (i : K) : (term1346 K x i) = (x = i).
Proof. exact (@lem16933 (x = i)). Qed.
Lemma lem6408153 {K : Type'} (k : K -> Prop) (x : K) : (term1066 K k x) = (term1066 K k x).
Proof. exact (eq_refl (term1066 K k x)). Qed.
Lemma lem6408154 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term1357 K k x i) = (term1358 K k x i).
Proof. exact (MK_COMB (@lem6408153 K k x) (@lem6408151 K x i)). Qed.
Lemma lem6408155 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term1359 K k x i) = (term1357 K k x i).
Proof. exact (@lem17045 (k x) (term434 K x i)). Qed.
Lemma lem6408156 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term1359 K k x i) = (term1358 K k x i).
Proof. exact (TRANS (@lem6408155 K k x i) (@lem6408154 K k x i)). Qed.
Lemma lem6408165 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1045 A K f x neut) = ((f x) = neut).
Proof. exact (@lem16933 ((f x) = neut)). Qed.
Lemma lem6408167 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1046 A K dom f x) = (term1046 A K dom f x).
Proof. exact (eq_refl (term1046 A K dom f x)). Qed.
Lemma lem6408168 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1047 A K dom f x neut) = (term1048 A K dom f x neut).
Proof. exact (MK_COMB (@lem6408167 A K dom f x) (@lem6408165 A K f x neut)). Qed.
Lemma lem6408169 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1049 A K dom f x neut) = (term1047 A K dom f x neut).
Proof. exact (@lem17045 (term367 A K dom f x) (term378 A K f x neut)). Qed.
Lemma lem6408170 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1049 A K dom f x neut) = (term1048 A K dom f x neut).
Proof. exact (TRANS (@lem6408169 A K dom f x neut) (@lem6408168 A K dom f x neut)). Qed.
Lemma lem6408174 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6408175 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term1360 K k x i) = (term1361 K k x i).
Proof. exact (MK_COMB (@lem6408174) (@lem6408156 K k x i)). Qed.
Lemma lem6408176 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1362 A K k i dom f x neut) = (term1363 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6408175 K k x i) (@lem6408170 A K dom f x neut)). Qed.
Lemma lem6408177 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1364 A K k i dom f x neut) = (term1362 A K k i dom f x neut).
Proof. exact (@lem17045 (term458 K k x i) (term379 A K dom f x neut)). Qed.
Lemma lem6408178 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1364 A K k i dom f x neut) = (term1363 A K k i dom f x neut).
Proof. exact (TRANS (@lem6408177 A K k i dom f x neut) (@lem6408176 A K k i dom f x neut)). Qed.
Lemma lem6408181 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term461 A K k i dom f x neut) = (term461 A K k i dom f x neut).
Proof. exact (eq_refl (term461 A K k i dom f x neut)). Qed.
Lemma lem6408182 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6408183 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1365 A K k i dom f x neut) = (term1366 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6408182) (@lem6408142 A K k i dom f x neut)). Qed.
Lemma lem6408184 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1367 A K k i dom f x neut) = (term1368 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6408183 A K k i dom f x neut) (@lem6408181 A K k i dom f x neut)). Qed.
Lemma lem6408186 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1369 A K k i dom f x neut) = (term1369 A K k i dom f x neut).
Proof. exact (eq_refl (term1369 A K k i dom f x neut)). Qed.
Lemma lem6408187 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1370 A K k i dom f x neut) = (term1371 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6408186 A K k i dom f x neut) (@lem6408178 A K k i dom f x neut)). Qed.
Lemma lem6408188 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6408189 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1372 A K k i dom f x neut) = (term1373 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6408188) (@lem6408187 A K k i dom f x neut)). Qed.
Lemma lem6408190 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1374 A K k i dom f x neut) = (term1375 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6408189 A K k i dom f x neut) (@lem6408184 A K k i dom f x neut)). Qed.
Lemma lem6408191 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term743 A K k i dom f x neut) = (term1374 A K k i dom f x neut).
Proof. exact (@lem17646 (term438 A K k i dom f x neut) (term461 A K k i dom f x neut)). Qed.
Lemma lem6408196 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term743 A K k i dom f x neut) = (term1375 A K k i dom f x neut).
Proof. exact (TRANS (@lem6408191 A K k i dom f x neut) (@lem6408190 A K k i dom f x neut)). Qed.
Lemma lem6408197 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term743 A K k i dom f x neut) : term1375 A K k i dom f x neut.
Proof. exact (EQ_MP (@lem6408196 A K k i dom f x neut) (@lem6406277 A K k i dom f x neut h1)). Qed.
Lemma lem6408198 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term1342 A K _80095 ltle i _80096 k dom f x' neut) : term1342 A K _80095 ltle i _80096 k dom f x' neut.
Proof. exact (h1). Qed.
Lemma lem6408201 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6408202 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem6408207 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408209 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6408207 K A f x). Qed.
Lemma lem6408210 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6408211 {A K : Type'} (f : K -> A) (x : K) : (term1376 A K f x) = (term1377 A K f x).
Proof. exact (MK_COMB (@lem6408202 A) (@lem6408209 A K f x)). Qed.
Lemma lem6408212 {A K : Type'} (f : K -> A) (x : K) (neut : A) : ((f x) = neut) = ((@I (K -> A) f x) = neut).
Proof. exact (MK_COMB (@lem6408211 A K f x) (@lem6408210 A neut)). Qed.
Lemma lem6408213 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term378 A K f x neut) = (term1378 A K f x neut).
Proof. exact (MK_COMB (@lem6408201) (@lem6408212 A K f x neut)). Qed.
Lemma lem6408214 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6408219 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408221 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6408219 K A f x). Qed.
Lemma lem6408222 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1379 A K dom f x).
Proof. exact (MK_COMB (@lem6408214 A dom) (@lem6408221 A K f x)). Qed.
Lemma lem6408224 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408225 {A : Type'} (f : A -> Prop) (x : A) : (f x) = (@I (A -> Prop) f x).
Proof. exact (@lem6408224 A Prop f x). Qed.
Lemma lem6408226 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1379 A K dom f x) = (term1380 A K dom f x).
Proof. exact (@lem6408225 A dom (@I (K -> A) f x)). Qed.
Lemma lem6408227 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1380 A K dom f x).
Proof. exact (TRANS (@lem6408222 A K dom f x) (@lem6408226 A K dom f x)). Qed.
Lemma lem6408228 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6408229 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term369 A K dom f x) = (term1381 A K dom f x).
Proof. exact (MK_COMB (@lem6408228) (@lem6408227 A K dom f x)). Qed.
Lemma lem6408230 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term379 A K dom f x neut) = (term1382 A K dom f x neut).
Proof. exact (MK_COMB (@lem6408229 A K dom f x) (@lem6408213 A K f x neut)). Qed.
Lemma lem6408237 {K : Type'} (x : K) (i : K) : (term434 K x i) = (term434 K x i).
Proof. exact (eq_refl (term434 K x i)). Qed.
Lemma lem6408242 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408243 {K : Type'} (f : K -> Prop) (x : K) : (f x) = (@I (K -> Prop) f x).
Proof. exact (@lem6408242 K Prop f x). Qed.
Lemma lem6408245 {K : Type'} (k : K -> Prop) (x : K) : (k x) = (@I (K -> Prop) k x).
Proof. exact (@lem6408243 K k x). Qed.
Lemma lem6408246 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6408247 {K : Type'} (k : K -> Prop) (x : K) : (term42 K k x) = (term1383 K k x).
Proof. exact (MK_COMB (@lem6408246) (@lem6408245 K k x)). Qed.
Lemma lem6408248 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term458 K k x i) = (term1384 K k x i).
Proof. exact (MK_COMB (@lem6408247 K k x) (@lem6408237 K x i)). Qed.
Lemma lem6408249 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6408250 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term460 K k x i) = (term1385 K k x i).
Proof. exact (MK_COMB (@lem6408249) (@lem6408248 K k x i)). Qed.
Lemma lem6408251 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term461 A K k i dom f x neut) = (term1386 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6408250 K k x i) (@lem6408230 A K dom f x neut)). Qed.
Lemma lem6408252 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem6408257 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408259 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6408257 K A f x). Qed.
Lemma lem6408260 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6408261 {A K : Type'} (f : K -> A) (x : K) : (term1376 A K f x) = (term1377 A K f x).
Proof. exact (MK_COMB (@lem6408252 A) (@lem6408259 A K f x)). Qed.
Lemma lem6408262 {A K : Type'} (f : K -> A) (x : K) (neut : A) : ((f x) = neut) = ((@I (K -> A) f x) = neut).
Proof. exact (MK_COMB (@lem6408261 A K f x) (@lem6408260 A neut)). Qed.
Lemma lem6408263 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6408264 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6408269 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408271 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6408269 K A f x). Qed.
Lemma lem6408272 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1379 A K dom f x).
Proof. exact (MK_COMB (@lem6408264 A dom) (@lem6408271 A K f x)). Qed.
Lemma lem6408274 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408275 {A : Type'} (f : A -> Prop) (x : A) : (f x) = (@I (A -> Prop) f x).
Proof. exact (@lem6408274 A Prop f x). Qed.
Lemma lem6408276 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1379 A K dom f x) = (term1380 A K dom f x).
Proof. exact (@lem6408275 A dom (@I (K -> A) f x)). Qed.
Lemma lem6408277 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1380 A K dom f x).
Proof. exact (TRANS (@lem6408272 A K dom f x) (@lem6408276 A K dom f x)). Qed.
Lemma lem6408278 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1387 A K dom f x) = (term1388 A K dom f x).
Proof. exact (MK_COMB (@lem6408263) (@lem6408277 A K dom f x)). Qed.
Lemma lem6408279 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6408280 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1046 A K dom f x) = (term1389 A K dom f x).
Proof. exact (MK_COMB (@lem6408279) (@lem6408278 A K dom f x)). Qed.
Lemma lem6408281 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1048 A K dom f x neut) = (term1390 A K dom f x neut).
Proof. exact (MK_COMB (@lem6408280 A K dom f x) (@lem6408262 A K f x neut)). Qed.
Lemma lem6408286 {K : Type'} (x : K) (i : K) : (x = i) = (x = i).
Proof. exact (eq_refl (x = i)). Qed.
Lemma lem6408287 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem6408292 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408294 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6408292 K A f x). Qed.
Lemma lem6408295 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6408296 {A K : Type'} (f : K -> A) (x : K) : (term1376 A K f x) = (term1377 A K f x).
Proof. exact (MK_COMB (@lem6408287 A) (@lem6408294 A K f x)). Qed.
Lemma lem6408297 {A K : Type'} (f : K -> A) (x : K) (neut : A) : ((f x) = neut) = ((@I (K -> A) f x) = neut).
Proof. exact (MK_COMB (@lem6408296 A K f x) (@lem6408295 A neut)). Qed.
Lemma lem6408298 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6408299 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6408304 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408306 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6408304 K A f x). Qed.
Lemma lem6408307 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1379 A K dom f x).
Proof. exact (MK_COMB (@lem6408299 A dom) (@lem6408306 A K f x)). Qed.
Lemma lem6408309 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408310 {A : Type'} (f : A -> Prop) (x : A) : (f x) = (@I (A -> Prop) f x).
Proof. exact (@lem6408309 A Prop f x). Qed.
Lemma lem6408311 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1379 A K dom f x) = (term1380 A K dom f x).
Proof. exact (@lem6408310 A dom (@I (K -> A) f x)). Qed.
Lemma lem6408312 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1380 A K dom f x).
Proof. exact (TRANS (@lem6408307 A K dom f x) (@lem6408311 A K dom f x)). Qed.
Lemma lem6408313 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1387 A K dom f x) = (term1388 A K dom f x).
Proof. exact (MK_COMB (@lem6408298) (@lem6408312 A K dom f x)). Qed.
Lemma lem6408314 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6408315 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1046 A K dom f x) = (term1389 A K dom f x).
Proof. exact (MK_COMB (@lem6408314) (@lem6408313 A K dom f x)). Qed.
Lemma lem6408316 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1048 A K dom f x neut) = (term1390 A K dom f x neut).
Proof. exact (MK_COMB (@lem6408315 A K dom f x) (@lem6408297 A K f x neut)). Qed.
Lemma lem6408317 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6408322 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408323 {K : Type'} (f : K -> Prop) (x : K) : (f x) = (@I (K -> Prop) f x).
Proof. exact (@lem6408322 K Prop f x). Qed.
Lemma lem6408325 {K : Type'} (k : K -> Prop) (x : K) : (k x) = (@I (K -> Prop) k x).
Proof. exact (@lem6408323 K k x). Qed.
Lemma lem6408326 {K : Type'} (k : K -> Prop) (x : K) : (term72 K k x) = (term1391 K k x).
Proof. exact (MK_COMB (@lem6408317) (@lem6408325 K k x)). Qed.
Lemma lem6408327 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6408328 {K : Type'} (k : K -> Prop) (x : K) : (term1066 K k x) = (term1392 K k x).
Proof. exact (MK_COMB (@lem6408327) (@lem6408326 K k x)). Qed.
Lemma lem6408329 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1071 A K k dom f x neut) = (term1393 A K k dom f x neut).
Proof. exact (MK_COMB (@lem6408328 K k x) (@lem6408316 A K dom f x neut)). Qed.
Lemma lem6408330 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6408331 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1348 A K k dom f x neut) = (term1394 A K k dom f x neut).
Proof. exact (MK_COMB (@lem6408330) (@lem6408329 A K k dom f x neut)). Qed.
Lemma lem6408332 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) : (term1350 A K k dom f neut x i) = (term1395 A K k dom f neut x i).
Proof. exact (MK_COMB (@lem6408331 A K k dom f x neut) (@lem6408286 K x i)). Qed.
Lemma lem6408333 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6408334 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) : (term1353 A K k dom f neut x i) = (term1396 A K k dom f neut x i).
Proof. exact (MK_COMB (@lem6408333) (@lem6408332 A K k dom f neut x i)). Qed.
Lemma lem6408335 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1355 A K k i dom f x neut) = (term1397 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6408334 A K k dom f neut x i) (@lem6408281 A K dom f x neut)). Qed.
Lemma lem6408336 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6408337 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1366 A K k i dom f x neut) = (term1398 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6408336) (@lem6408335 A K k i dom f x neut)). Qed.
Lemma lem6408338 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1368 A K k i dom f x neut) = (term1399 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6408337 A K k i dom f x neut) (@lem6408251 A K k i dom f x neut)). Qed.
Lemma lem6408339 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem6408344 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408346 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6408344 K A f x). Qed.
Lemma lem6408347 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6408348 {A K : Type'} (f : K -> A) (x : K) : (term1376 A K f x) = (term1377 A K f x).
Proof. exact (MK_COMB (@lem6408339 A) (@lem6408346 A K f x)). Qed.
Lemma lem6408349 {A K : Type'} (f : K -> A) (x : K) (neut : A) : ((f x) = neut) = ((@I (K -> A) f x) = neut).
Proof. exact (MK_COMB (@lem6408348 A K f x) (@lem6408347 A neut)). Qed.
Lemma lem6408350 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6408351 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6408356 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408358 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6408356 K A f x). Qed.
Lemma lem6408359 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1379 A K dom f x).
Proof. exact (MK_COMB (@lem6408351 A dom) (@lem6408358 A K f x)). Qed.
Lemma lem6408361 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408362 {A : Type'} (f : A -> Prop) (x : A) : (f x) = (@I (A -> Prop) f x).
Proof. exact (@lem6408361 A Prop f x). Qed.
Lemma lem6408363 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1379 A K dom f x) = (term1380 A K dom f x).
Proof. exact (@lem6408362 A dom (@I (K -> A) f x)). Qed.
Lemma lem6408364 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1380 A K dom f x).
Proof. exact (TRANS (@lem6408359 A K dom f x) (@lem6408363 A K dom f x)). Qed.
Lemma lem6408365 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1387 A K dom f x) = (term1388 A K dom f x).
Proof. exact (MK_COMB (@lem6408350) (@lem6408364 A K dom f x)). Qed.
Lemma lem6408366 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6408367 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1046 A K dom f x) = (term1389 A K dom f x).
Proof. exact (MK_COMB (@lem6408366) (@lem6408365 A K dom f x)). Qed.
Lemma lem6408368 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1048 A K dom f x neut) = (term1390 A K dom f x neut).
Proof. exact (MK_COMB (@lem6408367 A K dom f x) (@lem6408349 A K f x neut)). Qed.
Lemma lem6408373 {K : Type'} (x : K) (i : K) : (x = i) = (x = i).
Proof. exact (eq_refl (x = i)). Qed.
Lemma lem6408374 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6408379 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408380 {K : Type'} (f : K -> Prop) (x : K) : (f x) = (@I (K -> Prop) f x).
Proof. exact (@lem6408379 K Prop f x). Qed.
Lemma lem6408382 {K : Type'} (k : K -> Prop) (x : K) : (k x) = (@I (K -> Prop) k x).
Proof. exact (@lem6408380 K k x). Qed.
Lemma lem6408383 {K : Type'} (k : K -> Prop) (x : K) : (term72 K k x) = (term1391 K k x).
Proof. exact (MK_COMB (@lem6408374) (@lem6408382 K k x)). Qed.
Lemma lem6408384 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6408385 {K : Type'} (k : K -> Prop) (x : K) : (term1066 K k x) = (term1392 K k x).
Proof. exact (MK_COMB (@lem6408384) (@lem6408383 K k x)). Qed.
Lemma lem6408386 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term1358 K k x i) = (term1400 K k x i).
Proof. exact (MK_COMB (@lem6408385 K k x) (@lem6408373 K x i)). Qed.
Lemma lem6408387 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6408388 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term1361 K k x i) = (term1401 K k x i).
Proof. exact (MK_COMB (@lem6408387) (@lem6408386 K k x i)). Qed.
Lemma lem6408389 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1363 A K k i dom f x neut) = (term1402 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6408388 K k x i) (@lem6408368 A K dom f x neut)). Qed.
Lemma lem6408390 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6408391 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem6408396 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408398 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6408396 K A f x). Qed.
Lemma lem6408399 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6408400 {A K : Type'} (f : K -> A) (x : K) : (term1376 A K f x) = (term1377 A K f x).
Proof. exact (MK_COMB (@lem6408391 A) (@lem6408398 A K f x)). Qed.
Lemma lem6408401 {A K : Type'} (f : K -> A) (x : K) (neut : A) : ((f x) = neut) = ((@I (K -> A) f x) = neut).
Proof. exact (MK_COMB (@lem6408400 A K f x) (@lem6408399 A neut)). Qed.
Lemma lem6408402 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term378 A K f x neut) = (term1378 A K f x neut).
Proof. exact (MK_COMB (@lem6408390) (@lem6408401 A K f x neut)). Qed.
Lemma lem6408403 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6408408 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408410 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6408408 K A f x). Qed.
Lemma lem6408411 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1379 A K dom f x).
Proof. exact (MK_COMB (@lem6408403 A dom) (@lem6408410 A K f x)). Qed.
Lemma lem6408413 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408414 {A : Type'} (f : A -> Prop) (x : A) : (f x) = (@I (A -> Prop) f x).
Proof. exact (@lem6408413 A Prop f x). Qed.
Lemma lem6408415 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1379 A K dom f x) = (term1380 A K dom f x).
Proof. exact (@lem6408414 A dom (@I (K -> A) f x)). Qed.
Lemma lem6408416 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1380 A K dom f x).
Proof. exact (TRANS (@lem6408411 A K dom f x) (@lem6408415 A K dom f x)). Qed.
Lemma lem6408417 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6408418 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term369 A K dom f x) = (term1381 A K dom f x).
Proof. exact (MK_COMB (@lem6408417) (@lem6408416 A K dom f x)). Qed.
Lemma lem6408419 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term379 A K dom f x neut) = (term1382 A K dom f x neut).
Proof. exact (MK_COMB (@lem6408418 A K dom f x) (@lem6408402 A K f x neut)). Qed.
Lemma lem6408426 {K : Type'} (x : K) (i : K) : (term434 K x i) = (term434 K x i).
Proof. exact (eq_refl (term434 K x i)). Qed.
Lemma lem6408427 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6408428 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem6408433 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408435 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6408433 K A f x). Qed.
Lemma lem6408436 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6408437 {A K : Type'} (f : K -> A) (x : K) : (term1376 A K f x) = (term1377 A K f x).
Proof. exact (MK_COMB (@lem6408428 A) (@lem6408435 A K f x)). Qed.
Lemma lem6408438 {A K : Type'} (f : K -> A) (x : K) (neut : A) : ((f x) = neut) = ((@I (K -> A) f x) = neut).
Proof. exact (MK_COMB (@lem6408437 A K f x) (@lem6408436 A neut)). Qed.
Lemma lem6408439 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term378 A K f x neut) = (term1378 A K f x neut).
Proof. exact (MK_COMB (@lem6408427) (@lem6408438 A K f x neut)). Qed.
Lemma lem6408440 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6408445 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408447 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6408445 K A f x). Qed.
Lemma lem6408448 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1379 A K dom f x).
Proof. exact (MK_COMB (@lem6408440 A dom) (@lem6408447 A K f x)). Qed.
Lemma lem6408450 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408451 {A : Type'} (f : A -> Prop) (x : A) : (f x) = (@I (A -> Prop) f x).
Proof. exact (@lem6408450 A Prop f x). Qed.
Lemma lem6408452 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1379 A K dom f x) = (term1380 A K dom f x).
Proof. exact (@lem6408451 A dom (@I (K -> A) f x)). Qed.
Lemma lem6408453 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1380 A K dom f x).
Proof. exact (TRANS (@lem6408448 A K dom f x) (@lem6408452 A K dom f x)). Qed.
Lemma lem6408454 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6408455 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term369 A K dom f x) = (term1381 A K dom f x).
Proof. exact (MK_COMB (@lem6408454) (@lem6408453 A K dom f x)). Qed.
Lemma lem6408456 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term379 A K dom f x neut) = (term1382 A K dom f x neut).
Proof. exact (MK_COMB (@lem6408455 A K dom f x) (@lem6408439 A K f x neut)). Qed.
Lemma lem6408461 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408462 {K : Type'} (f : K -> Prop) (x : K) : (f x) = (@I (K -> Prop) f x).
Proof. exact (@lem6408461 K Prop f x). Qed.
Lemma lem6408464 {K : Type'} (k : K -> Prop) (x : K) : (k x) = (@I (K -> Prop) k x).
Proof. exact (@lem6408462 K k x). Qed.
Lemma lem6408465 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6408466 {K : Type'} (k : K -> Prop) (x : K) : (term42 K k x) = (term1383 K k x).
Proof. exact (MK_COMB (@lem6408465) (@lem6408464 K k x)). Qed.
Lemma lem6408467 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term381 A K k dom f x neut) = (term1403 A K k dom f x neut).
Proof. exact (MK_COMB (@lem6408466 K k x) (@lem6408456 A K dom f x neut)). Qed.
Lemma lem6408468 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6408469 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term433 A K k dom f x neut) = (term1404 A K k dom f x neut).
Proof. exact (MK_COMB (@lem6408468) (@lem6408467 A K k dom f x neut)). Qed.
Lemma lem6408470 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) : (term435 A K k dom f neut x i) = (term1405 A K k dom f neut x i).
Proof. exact (MK_COMB (@lem6408469 A K k dom f x neut) (@lem6408426 K x i)). Qed.
Lemma lem6408471 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6408472 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) : (term437 A K k dom f neut x i) = (term1406 A K k dom f neut x i).
Proof. exact (MK_COMB (@lem6408471) (@lem6408470 A K k dom f neut x i)). Qed.
Lemma lem6408473 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term438 A K k i dom f x neut) = (term1407 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6408472 A K k dom f neut x i) (@lem6408419 A K dom f x neut)). Qed.
Lemma lem6408474 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6408475 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1369 A K k i dom f x neut) = (term1408 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6408474) (@lem6408473 A K k i dom f x neut)). Qed.
Lemma lem6408476 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1371 A K k i dom f x neut) = (term1409 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6408475 A K k i dom f x neut) (@lem6408389 A K k i dom f x neut)). Qed.
Lemma lem6408477 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6408478 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1373 A K k i dom f x neut) = (term1410 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6408477) (@lem6408476 A K k i dom f x neut)). Qed.
Lemma lem6408479 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1375 A K k i dom f x neut) = (term1411 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6408478 A K k i dom f x neut) (@lem6408338 A K k i dom f x neut)). Qed.
Lemma lem6408480 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term743 A K k i dom f x neut) : term1411 A K k i dom f x neut.
Proof. exact (EQ_MP (@lem6408479 A K k i dom f x neut) (@lem6408197 A K k i dom f x neut h1)). Qed.
Lemma lem6408481 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6408482 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem6408487 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408488 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6408487 K A f x). Qed.
Lemma lem6408490 {A K : Type'} (f : K -> A) (x' : K) : (f x') = (@I (K -> A) f x').
Proof. exact (@lem6408488 A K f x'). Qed.
Lemma lem6408491 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6408492 {A K : Type'} (f : K -> A) (x' : K) : (term1376 A K f x') = (term1377 A K f x').
Proof. exact (MK_COMB (@lem6408482 A) (@lem6408490 A K f x')). Qed.
Lemma lem6408493 {A K : Type'} (f : K -> A) (x' : K) (neut : A) : ((f x') = neut) = ((@I (K -> A) f x') = neut).
Proof. exact (MK_COMB (@lem6408492 A K f x') (@lem6408491 A neut)). Qed.
Lemma lem6408494 {A K : Type'} (f : K -> A) (x' : K) (neut : A) : (term378 A K f x' neut) = (term1378 A K f x' neut).
Proof. exact (MK_COMB (@lem6408481) (@lem6408493 A K f x' neut)). Qed.
Lemma lem6408495 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6408500 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408501 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6408500 K A f x). Qed.
Lemma lem6408503 {A K : Type'} (f : K -> A) (x' : K) : (f x') = (@I (K -> A) f x').
Proof. exact (@lem6408501 A K f x'). Qed.
Lemma lem6408504 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x' : K) : (term367 A K dom f x') = (term1379 A K dom f x').
Proof. exact (MK_COMB (@lem6408495 A dom) (@lem6408503 A K f x')). Qed.
Lemma lem6408506 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408507 {A : Type'} (f : A -> Prop) (x : A) : (f x) = (@I (A -> Prop) f x).
Proof. exact (@lem6408506 A Prop f x). Qed.
Lemma lem6408508 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x' : K) : (term1379 A K dom f x') = (term1380 A K dom f x').
Proof. exact (@lem6408507 A dom (@I (K -> A) f x')). Qed.
Lemma lem6408509 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x' : K) : (term367 A K dom f x') = (term1380 A K dom f x').
Proof. exact (TRANS (@lem6408504 A K dom f x') (@lem6408508 A K dom f x')). Qed.
Lemma lem6408510 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6408511 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x' : K) : (term369 A K dom f x') = (term1381 A K dom f x').
Proof. exact (MK_COMB (@lem6408510) (@lem6408509 A K dom f x')). Qed.
Lemma lem6408512 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) : (term379 A K dom f x' neut) = (term1382 A K dom f x' neut).
Proof. exact (MK_COMB (@lem6408511 A K dom f x') (@lem6408494 A K f x' neut)). Qed.
Lemma lem6408517 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408518 {K : Type'} (f : K -> Prop) (x : K) : (f x) = (@I (K -> Prop) f x).
Proof. exact (@lem6408517 K Prop f x). Qed.
Lemma lem6408520 {K : Type'} (k : K -> Prop) (x' : K) : (k x') = (@I (K -> Prop) k x').
Proof. exact (@lem6408518 K k x'). Qed.
Lemma lem6408521 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6408522 {K : Type'} (k : K -> Prop) (x' : K) : (term42 K k x') = (term1383 K k x').
Proof. exact (MK_COMB (@lem6408521) (@lem6408520 K k x')). Qed.
Lemma lem6408523 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) : (term381 A K k dom f x' neut) = (term1403 A K k dom f x' neut).
Proof. exact (MK_COMB (@lem6408522 K k x') (@lem6408512 A K dom f x' neut)). Qed.
Lemma lem6408524 {K : Type'} : (@FINITE K) = (@FINITE K).
Proof. exact (eq_refl (@FINITE K)). Qed.
Lemma lem6408525 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6408536 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408537 {A K : Type'} (f : type835 A K) (x : K -> Prop) : (f x) = (@I ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop) f x).
Proof. exact (@lem6408536 (K -> Prop) (type650 A K) f x). Qed.
Lemma lem6408538 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) : (_80096 k) = (@I ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop) _80096 k).
Proof. exact (@lem6408537 A K _80096 k). Qed.
Lemma lem6408539 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6408540 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (_80096 k dom) = (@I ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop) _80096 k dom).
Proof. exact (MK_COMB (@lem6408538 A K _80096 k) (@lem6408539 A dom)). Qed.
Lemma lem6408542 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408543 {A K : Type'} (f : type650 A K) (x : A -> Prop) : (f x) = (@I ((A -> Prop) -> (K -> A) -> A -> K -> Prop) f x).
Proof. exact (@lem6408542 (A -> Prop) (type793 A K) f x). Qed.
Lemma lem6408544 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (@I ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop) _80096 k dom) = (term1412 A K _80096 k dom).
Proof. exact (@lem6408543 A K (@I ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop) _80096 k) dom). Qed.
Lemma lem6408545 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (_80096 k dom) = (term1412 A K _80096 k dom).
Proof. exact (TRANS (@lem6408540 A K _80096 k dom) (@lem6408544 A K _80096 k dom)). Qed.
Lemma lem6408546 {A K : Type'} (f : K -> A) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem6408547 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (_80096 k dom f) = (term1413 A K _80096 k dom f).
Proof. exact (MK_COMB (@lem6408545 A K _80096 k dom) (@lem6408546 A K f)). Qed.
Lemma lem6408549 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408550 {A K : Type'} (f : type793 A K) (x : K -> A) : (f x) = (@I ((K -> A) -> A -> K -> Prop) f x).
Proof. exact (@lem6408549 (K -> A) (type1413 A K) f x). Qed.
Lemma lem6408551 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1413 A K _80096 k dom f) = (term1414 A K _80096 k dom f).
Proof. exact (@lem6408550 A K (term1412 A K _80096 k dom) f). Qed.
Lemma lem6408552 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (_80096 k dom f) = (term1414 A K _80096 k dom f).
Proof. exact (TRANS (@lem6408547 A K _80096 k dom f) (@lem6408551 A K _80096 k dom f)). Qed.
Lemma lem6408553 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6408554 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (_80096 k dom f neut) = (term1415 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6408552 A K _80096 k dom f) (@lem6408553 A neut)). Qed.
Lemma lem6408556 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408557 {A K : Type'} (f : type1413 A K) (x : A) : (f x) = (@I (A -> K -> Prop) f x).
Proof. exact (@lem6408556 A (K -> Prop) f x). Qed.
Lemma lem6408558 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1415 A K _80096 k dom f neut) = (term1416 A K _80096 k dom f neut).
Proof. exact (@lem6408557 A K (term1414 A K _80096 k dom f) neut). Qed.
Lemma lem6408560 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (_80096 k dom f neut) = (term1416 A K _80096 k dom f neut).
Proof. exact (TRANS (@lem6408554 A K _80096 k dom f neut) (@lem6408558 A K _80096 k dom f neut)). Qed.
Lemma lem6408561 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term637 A K _80096 k dom f neut) = (term1417 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6408525 K) (@lem6408560 A K _80096 k dom f neut)). Qed.
Lemma lem6408563 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408564 {K : Type'} (f : type672 K) (x : K -> Prop) : (f x) = (@I ((K -> Prop) -> K -> Prop) f x).
Proof. exact (@lem6408563 (K -> Prop) (K -> Prop) f x). Qed.
Lemma lem6408565 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1417 A K _80096 k dom f neut) = (term1418 A K _80096 k dom f neut).
Proof. exact (@lem6408564 K (@GSPEC K) (term1416 A K _80096 k dom f neut)). Qed.
Lemma lem6408566 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term637 A K _80096 k dom f neut) = (term1418 A K _80096 k dom f neut).
Proof. exact (TRANS (@lem6408561 A K _80096 k dom f neut) (@lem6408565 A K _80096 k dom f neut)). Qed.
Lemma lem6408567 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term638 A K _80096 k dom f neut) = (term1419 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6408524 K) (@lem6408566 A K _80096 k dom f neut)). Qed.
Lemma lem6408569 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408570 {K : Type'} (f : type686 K) (x : K -> Prop) : (f x) = (@I ((K -> Prop) -> Prop) f x).
Proof. exact (@lem6408569 (K -> Prop) Prop f x). Qed.
Lemma lem6408571 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1419 A K _80096 k dom f neut) = (term1420 A K _80096 k dom f neut).
Proof. exact (@lem6408570 K (@FINITE K) (term1418 A K _80096 k dom f neut)). Qed.
Lemma lem6408572 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term638 A K _80096 k dom f neut) = (term1420 A K _80096 k dom f neut).
Proof. exact (TRANS (@lem6408567 A K _80096 k dom f neut) (@lem6408571 A K _80096 k dom f neut)). Qed.
Lemma lem6408573 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6408574 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term639 A K _80096 k dom f neut) = (term1421 A K _80096 k dom f neut).
Proof. exact (MK_COMB (@lem6408573) (@lem6408572 A K _80096 k dom f neut)). Qed.
Lemma lem6408575 {A K : Type'} (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) : (term1329 A K _80096 k dom f x' neut) = (term1422 A K _80096 k dom f x' neut).
Proof. exact (MK_COMB (@lem6408574 A K _80096 k dom f neut) (@lem6408523 A K k dom f x' neut)). Qed.
Lemma lem6408576 {K : Type'} : (@eq K) = (@eq K).
Proof. exact (eq_refl (@eq K)). Qed.
Lemma lem6408589 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408590 {A K : Type'} (f : type756 A K) (x : type1402 K) : (f x) = (@I ((K -> K -> Prop) -> (K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K) f x).
Proof. exact (@lem6408589 (type1402 K) (type836 A K) f x). Qed.
Lemma lem6408591 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) : (_80095 ltle) = (@I ((K -> K -> Prop) -> (K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K) _80095 ltle).
Proof. exact (@lem6408590 A K _80095 ltle). Qed.
Lemma lem6408592 {K : Type'} (k : K -> Prop) : k = k.
Proof. exact (eq_refl k). Qed.
Lemma lem6408593 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (_80095 ltle k) = (@I ((K -> K -> Prop) -> (K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K) _80095 ltle k).
Proof. exact (MK_COMB (@lem6408591 A K _80095 ltle) (@lem6408592 K k)). Qed.
Lemma lem6408595 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408596 {A K : Type'} (f : type836 A K) (x : K -> Prop) : (f x) = (@I ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K) f x).
Proof. exact (@lem6408595 (K -> Prop) (type651 A K) f x). Qed.
Lemma lem6408597 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (@I ((K -> K -> Prop) -> (K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K) _80095 ltle k) = (term1423 A K _80095 ltle k).
Proof. exact (@lem6408596 A K (@I ((K -> K -> Prop) -> (K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K) _80095 ltle) k). Qed.
Lemma lem6408598 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) : (_80095 ltle k) = (term1423 A K _80095 ltle k).
Proof. exact (TRANS (@lem6408593 A K _80095 ltle k) (@lem6408597 A K _80095 ltle k)). Qed.
Lemma lem6408599 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6408600 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (_80095 ltle k dom) = (term1424 A K _80095 ltle k dom).
Proof. exact (MK_COMB (@lem6408598 A K _80095 ltle k) (@lem6408599 A dom)). Qed.
Lemma lem6408602 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408603 {A K : Type'} (f : type651 A K) (x : A -> Prop) : (f x) = (@I ((A -> Prop) -> (K -> A) -> A -> K) f x).
Proof. exact (@lem6408602 (A -> Prop) (type794 A K) f x). Qed.
Lemma lem6408604 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (term1424 A K _80095 ltle k dom) = (term1425 A K _80095 ltle k dom).
Proof. exact (@lem6408603 A K (term1423 A K _80095 ltle k) dom). Qed.
Lemma lem6408605 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) : (_80095 ltle k dom) = (term1425 A K _80095 ltle k dom).
Proof. exact (TRANS (@lem6408600 A K _80095 ltle k dom) (@lem6408604 A K _80095 ltle k dom)). Qed.
Lemma lem6408606 {A K : Type'} (f : K -> A) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem6408607 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (_80095 ltle k dom f) = (term1426 A K _80095 ltle k dom f).
Proof. exact (MK_COMB (@lem6408605 A K _80095 ltle k dom) (@lem6408606 A K f)). Qed.
Lemma lem6408609 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408610 {A K : Type'} (f : type794 A K) (x : K -> A) : (f x) = (@I ((K -> A) -> A -> K) f x).
Proof. exact (@lem6408609 (K -> A) (A -> K) f x). Qed.
Lemma lem6408611 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1426 A K _80095 ltle k dom f) = (term1427 A K _80095 ltle k dom f).
Proof. exact (@lem6408610 A K (term1425 A K _80095 ltle k dom) f). Qed.
Lemma lem6408612 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (_80095 ltle k dom f) = (term1427 A K _80095 ltle k dom f).
Proof. exact (TRANS (@lem6408607 A K _80095 ltle k dom f) (@lem6408611 A K _80095 ltle k dom f)). Qed.
Lemma lem6408613 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6408614 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (_80095 ltle k dom f neut) = (term1428 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6408612 A K _80095 ltle k dom f) (@lem6408613 A neut)). Qed.
Lemma lem6408616 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6408617 {A K : Type'} (f : A -> K) (x : A) : (f x) = (@I (A -> K) f x).
Proof. exact (@lem6408616 A K f x). Qed.
Lemma lem6408618 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1428 A K _80095 ltle k dom f neut) = (term1429 A K _80095 ltle k dom f neut).
Proof. exact (@lem6408617 A K (term1427 A K _80095 ltle k dom f) neut). Qed.
Lemma lem6408620 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (_80095 ltle k dom f neut) = (term1429 A K _80095 ltle k dom f neut).
Proof. exact (TRANS (@lem6408614 A K _80095 ltle k dom f neut) (@lem6408618 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6408621 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6408622 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term509 A K _80095 ltle k dom f neut) = (term1430 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6408576 K) (@lem6408620 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6408623 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : ((_80095 ltle k dom f neut) = i) = ((term1429 A K _80095 ltle k dom f neut) = i).
Proof. exact (MK_COMB (@lem6408622 A K _80095 ltle k dom f neut) (@lem6408621 K i)). Qed.
Lemma lem6408624 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6408625 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term575 A K _80095 ltle k dom f neut i) = (term1431 A K _80095 ltle k dom f neut i).
Proof. exact (MK_COMB (@lem6408624) (@lem6408623 A K _80095 ltle k dom f neut i)). Qed.
Lemma lem6408626 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) : (term1342 A K _80095 ltle i _80096 k dom f x' neut) = (term1432 A K _80095 ltle i _80096 k dom f x' neut).
Proof. exact (MK_COMB (@lem6408625 A K _80095 ltle k dom f neut i) (@lem6408575 A K _80096 k dom f x' neut)). Qed.
Lemma lem6408627 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term1342 A K _80095 ltle i _80096 k dom f x' neut) : term1432 A K _80095 ltle i _80096 k dom f x' neut.
Proof. exact (EQ_MP (@lem6408626 A K _80095 ltle i _80096 k dom f x' neut) (@lem6408198 A K _80095 ltle i _80096 k dom f x' neut h1)). Qed.
Lemma lem6409821 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term1409 A K k i dom f x neut.
Proof. exact (h1). Qed.
Lemma lem6409822 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1399 A K k i dom f x neut.
Proof. exact (h1). Qed.
Lemma lem6409823 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term1402 A K k i dom f x neut.
Proof. exact (proj2 (@lem6409821 A K k i dom f x neut h1)). Qed.
Lemma lem6409824 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term1407 A K k i dom f x neut.
Proof. exact (proj1 (@lem6409821 A K k i dom f x neut h1)). Qed.
Lemma lem6409825 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term1382 A K dom f x neut.
Proof. exact (proj2 (@lem6409824 A K k i dom f x neut h1)). Qed.
Lemma lem6409826 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term1405 A K k dom f neut x i.
Proof. exact (proj1 (@lem6409824 A K k i dom f x neut h1)). Qed.
Lemma lem6409830 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term1403 A K k dom f x neut.
Proof. exact (proj1 (@lem6409826 A K k i dom f x neut h1)). Qed.
Lemma lem6409835 {K : Type'} (k : K -> Prop) (x : K) (i : K) (h1 : term1400 K k x i) : term1400 K k x i.
Proof. exact (h1). Qed.
Lemma lem6409836 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1390 A K dom f x neut) : term1390 A K dom f x neut.
Proof. exact (h1). Qed.
Lemma lem6409841 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1386 A K k i dom f x neut.
Proof. exact (proj2 (@lem6409822 A K k i dom f x neut h1)). Qed.
Lemma lem6409842 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1397 A K k i dom f x neut.
Proof. exact (proj1 (@lem6409822 A K k i dom f x neut h1)). Qed.
Lemma lem6409843 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1382 A K dom f x neut.
Proof. exact (proj2 (@lem6409841 A K k i dom f x neut h1)). Qed.
Lemma lem6409844 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1384 K k x i.
Proof. exact (proj1 (@lem6409841 A K k i dom f x neut h1)). Qed.
Lemma lem6409849 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1395 A K k dom f neut x i) : term1395 A K k dom f neut x i.
Proof. exact (h1). Qed.
Lemma lem6409850 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1390 A K dom f x neut) : term1390 A K dom f x neut.
Proof. exact (h1). Qed.
Lemma lem6409851 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1393 A K k dom f x neut) : term1393 A K k dom f x neut.
Proof. exact (h1). Qed.
Lemma lem6409854 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1390 A K dom f x neut) : term1390 A K dom f x neut.
Proof. exact (h1). Qed.
Lemma lem6410364 {K : Type'} (k : K -> Prop) (x : K) (h1 : term1391 K k x) : term1391 K k x.
Proof. exact (h1). Qed.
Lemma lem6410870 {K : Type'} (x : K) (i : K) (h1 : x = i) : x = i.
Proof. exact (h1). Qed.
Lemma lem6411376 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1388 A K dom f x.
Proof. exact (h1). Qed.
Lemma lem6411882 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (@I (K -> A) f x) = neut.
Proof. exact (h1). Qed.
Lemma lem6412380 {K : Type'} (k : K -> Prop) (x : K) (h1 : term1391 K k x) : term1391 K k x.
Proof. exact (h1). Qed.
Lemma lem6412878 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1388 A K dom f x.
Proof. exact (h1). Qed.
Lemma lem6413376 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (@I (K -> A) f x) = neut.
Proof. exact (h1). Qed.
Lemma lem6413874 {K : Type'} (x : K) (i : K) (h1 : x = i) : x = i.
Proof. exact (h1). Qed.
Lemma lem6414372 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1388 A K dom f x.
Proof. exact (h1). Qed.
Lemma lem6414870 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (@I (K -> A) f x) = neut.
Proof. exact (h1). Qed.
Lemma lem6415826 {K : Type'} (k : K -> Prop) (x : K) (h1 : term1391 K k x) : term1391 K k x.
Proof. exact (h1). Qed.
Lemma lem6416444 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term434 K x i.
Proof. exact (proj2 (@lem6409826 A K k i dom f x neut h1)). Qed.
Lemma lem6416452 {K : Type'} (x : K) (i : K) (h1 : x = i) : x = i.
Proof. exact (h1). Qed.
Lemma lem6417078 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1388 A K dom f x.
Proof. exact (h1). Qed.
Lemma lem6417694 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term1378 A K f x neut.
Proof. exact (proj2 (@lem6409825 A K k i dom f x neut h1)). Qed.
Lemma lem6417704 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (@I (K -> A) f x) = neut.
Proof. exact (h1). Qed.
Lemma lem6418326 {K : Type'} (k : K -> Prop) (x : K) (h1 : term1391 K k x) : term1391 K k x.
Proof. exact (h1). Qed.
Lemma lem6418948 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1388 A K dom f x.
Proof. exact (h1). Qed.
Lemma lem6419564 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1378 A K f x neut.
Proof. exact (proj2 (@lem6409843 A K k i dom f x neut h1)). Qed.
Lemma lem6419570 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (@I (K -> A) f x) = neut.
Proof. exact (h1). Qed.
Lemma lem6420190 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term434 K x i.
Proof. exact (proj2 (@lem6409844 A K k i dom f x neut h1)). Qed.
Lemma lem6420192 {K : Type'} (x : K) (i : K) (h1 : x = i) : x = i.
Proof. exact (h1). Qed.
Lemma lem6420814 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1388 A K dom f x.
Proof. exact (h1). Qed.
Lemma lem6421430 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1378 A K f x neut.
Proof. exact (proj2 (@lem6409843 A K k i dom f x neut h1)). Qed.
Lemma lem6421436 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (@I (K -> A) f x) = neut.
Proof. exact (h1). Qed.
Lemma lem6422222 {K : Type'} (k : K -> Prop) (x : K) (h1 : term1391 K k x) : term1391 K k x.
Proof. exact (h1). Qed.
Lemma lem6422558 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term1342 A K _80095 ltle i _80096 k dom f x' neut) : (term1429 A K _80095 ltle k dom f neut) = i.
Proof. exact (proj1 (@lem6408627 A K _80095 ltle i _80096 k dom f x' neut h1)). Qed.
Lemma lem6422641 {K : Type'} (i : K) : (term1433 K i) = (term1433 K i).
Proof. exact (eq_refl (term1433 K i)). Qed.
Lemma lem6422642 {K : Type'} (x : K) (i : K) (h1 : x = i) : (term1434 K i x) = (term1435 K i).
Proof. exact (MK_COMB (@lem6422641 K i) (@lem6416452 K x i h1)). Qed.
Lemma lem6422643 {K : Type'} (i : K) : (term1435 K i) = (term1436 K i).
Proof. exact (eq_refl (term1435 K i)). Qed.
Lemma lem6422644 {K : Type'} (i : K) (x : K) : (term1437 K i x) = (term1437 K i x).
Proof. exact (eq_refl (term1437 K i x)). Qed.
Lemma lem6422645 {K : Type'} (x : K) (i : K) : ((term1434 K i x) = (term1435 K i)) = ((term1434 K i x) = (term1436 K i)).
Proof. exact (MK_COMB (@lem6422644 K i x) (@lem6422643 K i)). Qed.
Lemma lem6422646 {K : Type'} (x : K) (i : K) : (term1434 K i x) = (term434 K x i).
Proof. exact (eq_refl (term1434 K i x)). Qed.
Lemma lem6422647 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6422648 {K : Type'} (x : K) (i : K) : (term1437 K i x) = (term1438 K x i).
Proof. exact (MK_COMB (@lem6422647) (@lem6422646 K x i)). Qed.
Lemma lem6422649 {K : Type'} (i : K) : (term1436 K i) = (term1436 K i).
Proof. exact (eq_refl (term1436 K i)). Qed.
Lemma lem6422650 {K : Type'} (x : K) (i : K) : ((term1434 K i x) = (term1436 K i)) = ((term434 K x i) = (term1436 K i)).
Proof. exact (MK_COMB (@lem6422648 K x i) (@lem6422649 K i)). Qed.
Lemma lem6422651 {K : Type'} (x : K) (i : K) : ((term1434 K i x) = (term1435 K i)) = ((term434 K x i) = (term1436 K i)).
Proof. exact (TRANS (@lem6422645 K x i) (@lem6422650 K x i)). Qed.
Lemma lem6422652 {K : Type'} (x : K) (i : K) (h1 : x = i) : (term434 K x i) = (term1436 K i).
Proof. exact (EQ_MP (@lem6422651 K x i) (@lem6422642 K x i h1)). Qed.
Lemma lem6422653 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : x = i) : term1436 K i.
Proof. exact (EQ_MP (@lem6422652 K x i h2) (@lem6416444 A K k i dom f x neut h1)). Qed.
Lemma lem6422973 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term1342 A K _80095 ltle i _80096 k dom f x' neut) : i = (term1429 A K _80095 ltle k dom f neut).
Proof. exact (SYM (@lem6422558 A K _80095 ltle i _80096 k dom f x' neut h1)). Qed.
Lemma lem6423098 {K : Type'} : (term1439 K) = (term1439 K).
Proof. exact (eq_refl (term1439 K)). Qed.
Lemma lem6423099 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term1342 A K _80095 ltle i _80096 k dom f x' neut) : (term1440 K i) = (term1441 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6423098 K) (@lem6422973 A K _80095 ltle i _80096 k dom f x' neut h1)). Qed.
Lemma lem6423100 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1441 A K _80095 ltle k dom f neut) = (term1442 A K _80095 ltle k dom f neut).
Proof. exact (eq_refl (term1441 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6423101 {K : Type'} (i : K) : (term1443 K i) = (term1443 K i).
Proof. exact (eq_refl (term1443 K i)). Qed.
Lemma lem6423102 {A K : Type'} (i : K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term1440 K i) = (term1441 A K _80095 ltle k dom f neut)) = ((term1440 K i) = (term1442 A K _80095 ltle k dom f neut)).
Proof. exact (MK_COMB (@lem6423101 K i) (@lem6423100 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6423103 {K : Type'} (i : K) : (term1440 K i) = (term1436 K i).
Proof. exact (eq_refl (term1440 K i)). Qed.
Lemma lem6423104 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6423105 {K : Type'} (i : K) : (term1443 K i) = (term1444 K i).
Proof. exact (MK_COMB (@lem6423104) (@lem6423103 K i)). Qed.
Lemma lem6423106 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1442 A K _80095 ltle k dom f neut) = (term1442 A K _80095 ltle k dom f neut).
Proof. exact (eq_refl (term1442 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6423107 {A K : Type'} (i : K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term1440 K i) = (term1442 A K _80095 ltle k dom f neut)) = ((term1436 K i) = (term1442 A K _80095 ltle k dom f neut)).
Proof. exact (MK_COMB (@lem6423105 K i) (@lem6423106 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6423108 {A K : Type'} (i : K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term1440 K i) = (term1441 A K _80095 ltle k dom f neut)) = ((term1436 K i) = (term1442 A K _80095 ltle k dom f neut)).
Proof. exact (TRANS (@lem6423102 A K i _80095 ltle k dom f neut) (@lem6423107 A K i _80095 ltle k dom f neut)). Qed.
Lemma lem6423109 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term1342 A K _80095 ltle i _80096 k dom f x' neut) : (term1436 K i) = (term1442 A K _80095 ltle k dom f neut).
Proof. exact (EQ_MP (@lem6423108 A K i _80095 ltle k dom f neut) (@lem6423099 A K _80095 ltle i _80096 k dom f x' neut h1)). Qed.
Lemma lem6423110 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h3 : x = i) : term1442 A K _80095 ltle k dom f neut.
Proof. exact (EQ_MP (@lem6423109 A K _80095 ltle i _80096 k dom f x' neut h2) (@lem6422653 A K k dom f neut x i h1 h3)). Qed.
Lemma lem6423625 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1388 A K dom f x.
Proof. exact (h1). Qed.
Lemma lem6423906 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : neut = (@I (K -> A) f x).
Proof. exact (SYM (@lem6417704 A K f x neut h1)). Qed.
Lemma lem6424030 {A K : Type'} (f : K -> A) (x : K) : (term1445 A K f x) = (term1445 A K f x).
Proof. exact (eq_refl (term1445 A K f x)). Qed.
Lemma lem6424031 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (term1446 A K f x neut) = (term1447 A K f x).
Proof. exact (MK_COMB (@lem6424030 A K f x) (@lem6423906 A K f x neut h1)). Qed.
Lemma lem6424032 {A K : Type'} (f : K -> A) (x : K) : (term1447 A K f x) = (term1448 A K f x).
Proof. exact (eq_refl (term1447 A K f x)). Qed.
Lemma lem6424033 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1449 A K f x neut) = (term1449 A K f x neut).
Proof. exact (eq_refl (term1449 A K f x neut)). Qed.
Lemma lem6424034 {A K : Type'} (neut : A) (f : K -> A) (x : K) : ((term1446 A K f x neut) = (term1447 A K f x)) = ((term1446 A K f x neut) = (term1448 A K f x)).
Proof. exact (MK_COMB (@lem6424033 A K f x neut) (@lem6424032 A K f x)). Qed.
Lemma lem6424035 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1446 A K f x neut) = (term1378 A K f x neut).
Proof. exact (eq_refl (term1446 A K f x neut)). Qed.
Lemma lem6424036 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6424037 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1449 A K f x neut) = (term1450 A K f x neut).
Proof. exact (MK_COMB (@lem6424036) (@lem6424035 A K f x neut)). Qed.
Lemma lem6424038 {A K : Type'} (f : K -> A) (x : K) : (term1448 A K f x) = (term1448 A K f x).
Proof. exact (eq_refl (term1448 A K f x)). Qed.
Lemma lem6424039 {A K : Type'} (neut : A) (f : K -> A) (x : K) : ((term1446 A K f x neut) = (term1448 A K f x)) = ((term1378 A K f x neut) = (term1448 A K f x)).
Proof. exact (MK_COMB (@lem6424037 A K f x neut) (@lem6424038 A K f x)). Qed.
Lemma lem6424040 {A K : Type'} (neut : A) (f : K -> A) (x : K) : ((term1446 A K f x neut) = (term1447 A K f x)) = ((term1378 A K f x neut) = (term1448 A K f x)).
Proof. exact (TRANS (@lem6424034 A K neut f x) (@lem6424039 A K neut f x)). Qed.
Lemma lem6424041 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (term1378 A K f x neut) = (term1448 A K f x).
Proof. exact (EQ_MP (@lem6424040 A K neut f x) (@lem6424031 A K f x neut h1)). Qed.
Lemma lem6424504 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : term1448 A K f x.
Proof. exact (EQ_MP (@lem6424041 A K f x neut h2) (@lem6417694 A K k i dom f x neut h1)). Qed.
Lemma lem6425007 {K : Type'} (k : K -> Prop) (x : K) (h1 : term1391 K k x) : term1391 K k x.
Proof. exact (h1). Qed.
Lemma lem6425455 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1388 A K dom f x.
Proof. exact (h1). Qed.
Lemma lem6425736 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : neut = (@I (K -> A) f x).
Proof. exact (SYM (@lem6419570 A K f x neut h1)). Qed.
Lemma lem6425860 {A K : Type'} (f : K -> A) (x : K) : (term1445 A K f x) = (term1445 A K f x).
Proof. exact (eq_refl (term1445 A K f x)). Qed.
Lemma lem6425861 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (term1446 A K f x neut) = (term1447 A K f x).
Proof. exact (MK_COMB (@lem6425860 A K f x) (@lem6425736 A K f x neut h1)). Qed.
Lemma lem6425862 {A K : Type'} (f : K -> A) (x : K) : (term1447 A K f x) = (term1448 A K f x).
Proof. exact (eq_refl (term1447 A K f x)). Qed.
Lemma lem6425863 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1449 A K f x neut) = (term1449 A K f x neut).
Proof. exact (eq_refl (term1449 A K f x neut)). Qed.
Lemma lem6425864 {A K : Type'} (neut : A) (f : K -> A) (x : K) : ((term1446 A K f x neut) = (term1447 A K f x)) = ((term1446 A K f x neut) = (term1448 A K f x)).
Proof. exact (MK_COMB (@lem6425863 A K f x neut) (@lem6425862 A K f x)). Qed.
Lemma lem6425865 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1446 A K f x neut) = (term1378 A K f x neut).
Proof. exact (eq_refl (term1446 A K f x neut)). Qed.
Lemma lem6425866 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6425867 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1449 A K f x neut) = (term1450 A K f x neut).
Proof. exact (MK_COMB (@lem6425866) (@lem6425865 A K f x neut)). Qed.
Lemma lem6425868 {A K : Type'} (f : K -> A) (x : K) : (term1448 A K f x) = (term1448 A K f x).
Proof. exact (eq_refl (term1448 A K f x)). Qed.
Lemma lem6425869 {A K : Type'} (neut : A) (f : K -> A) (x : K) : ((term1446 A K f x neut) = (term1448 A K f x)) = ((term1378 A K f x neut) = (term1448 A K f x)).
Proof. exact (MK_COMB (@lem6425867 A K f x neut) (@lem6425868 A K f x)). Qed.
Lemma lem6425870 {A K : Type'} (neut : A) (f : K -> A) (x : K) : ((term1446 A K f x neut) = (term1447 A K f x)) = ((term1378 A K f x neut) = (term1448 A K f x)).
Proof. exact (TRANS (@lem6425864 A K neut f x) (@lem6425869 A K neut f x)). Qed.
Lemma lem6425871 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (term1378 A K f x neut) = (term1448 A K f x).
Proof. exact (EQ_MP (@lem6425870 A K neut f x) (@lem6425861 A K f x neut h1)). Qed.
Lemma lem6426307 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : term1448 A K f x.
Proof. exact (EQ_MP (@lem6425871 A K f x neut h2) (@lem6419564 A K k i dom f x neut h1)). Qed.
Lemma lem6426670 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term1342 A K _80095 ltle i _80096 k dom f x' neut) : (term1429 A K _80095 ltle k dom f neut) = i.
Proof. exact (proj1 (@lem6408627 A K _80095 ltle i _80096 k dom f x' neut h1)). Qed.
Lemma lem6426766 {K : Type'} (i : K) : (term1433 K i) = (term1433 K i).
Proof. exact (eq_refl (term1433 K i)). Qed.
Lemma lem6426767 {K : Type'} (x : K) (i : K) (h1 : x = i) : (term1434 K i x) = (term1435 K i).
Proof. exact (MK_COMB (@lem6426766 K i) (@lem6420192 K x i h1)). Qed.
Lemma lem6426768 {K : Type'} (i : K) : (term1435 K i) = (term1436 K i).
Proof. exact (eq_refl (term1435 K i)). Qed.
Lemma lem6426769 {K : Type'} (i : K) (x : K) : (term1437 K i x) = (term1437 K i x).
Proof. exact (eq_refl (term1437 K i x)). Qed.
Lemma lem6426770 {K : Type'} (x : K) (i : K) : ((term1434 K i x) = (term1435 K i)) = ((term1434 K i x) = (term1436 K i)).
Proof. exact (MK_COMB (@lem6426769 K i x) (@lem6426768 K i)). Qed.
Lemma lem6426771 {K : Type'} (x : K) (i : K) : (term1434 K i x) = (term434 K x i).
Proof. exact (eq_refl (term1434 K i x)). Qed.
Lemma lem6426772 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6426773 {K : Type'} (x : K) (i : K) : (term1437 K i x) = (term1438 K x i).
Proof. exact (MK_COMB (@lem6426772) (@lem6426771 K x i)). Qed.
Lemma lem6426774 {K : Type'} (i : K) : (term1436 K i) = (term1436 K i).
Proof. exact (eq_refl (term1436 K i)). Qed.
Lemma lem6426775 {K : Type'} (x : K) (i : K) : ((term1434 K i x) = (term1436 K i)) = ((term434 K x i) = (term1436 K i)).
Proof. exact (MK_COMB (@lem6426773 K x i) (@lem6426774 K i)). Qed.
Lemma lem6426776 {K : Type'} (x : K) (i : K) : ((term1434 K i x) = (term1435 K i)) = ((term434 K x i) = (term1436 K i)).
Proof. exact (TRANS (@lem6426770 K x i) (@lem6426775 K x i)). Qed.
Lemma lem6426777 {K : Type'} (x : K) (i : K) (h1 : x = i) : (term434 K x i) = (term1436 K i).
Proof. exact (EQ_MP (@lem6426776 K x i) (@lem6426767 K x i h1)). Qed.
Lemma lem6426778 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1399 A K k i dom f x neut) (h2 : x = i) : term1436 K i.
Proof. exact (EQ_MP (@lem6426777 K x i h2) (@lem6420190 A K k i dom f x neut h1)). Qed.
Lemma lem6427059 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term1342 A K _80095 ltle i _80096 k dom f x' neut) : i = (term1429 A K _80095 ltle k dom f neut).
Proof. exact (SYM (@lem6426670 A K _80095 ltle i _80096 k dom f x' neut h1)). Qed.
Lemma lem6427197 {K : Type'} : (term1439 K) = (term1439 K).
Proof. exact (eq_refl (term1439 K)). Qed.
Lemma lem6427198 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term1342 A K _80095 ltle i _80096 k dom f x' neut) : (term1440 K i) = (term1441 A K _80095 ltle k dom f neut).
Proof. exact (MK_COMB (@lem6427197 K) (@lem6427059 A K _80095 ltle i _80096 k dom f x' neut h1)). Qed.
Lemma lem6427199 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1441 A K _80095 ltle k dom f neut) = (term1442 A K _80095 ltle k dom f neut).
Proof. exact (eq_refl (term1441 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6427200 {K : Type'} (i : K) : (term1443 K i) = (term1443 K i).
Proof. exact (eq_refl (term1443 K i)). Qed.
Lemma lem6427201 {A K : Type'} (i : K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term1440 K i) = (term1441 A K _80095 ltle k dom f neut)) = ((term1440 K i) = (term1442 A K _80095 ltle k dom f neut)).
Proof. exact (MK_COMB (@lem6427200 K i) (@lem6427199 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6427202 {K : Type'} (i : K) : (term1440 K i) = (term1436 K i).
Proof. exact (eq_refl (term1440 K i)). Qed.
Lemma lem6427203 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6427204 {K : Type'} (i : K) : (term1443 K i) = (term1444 K i).
Proof. exact (MK_COMB (@lem6427203) (@lem6427202 K i)). Qed.
Lemma lem6427205 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1442 A K _80095 ltle k dom f neut) = (term1442 A K _80095 ltle k dom f neut).
Proof. exact (eq_refl (term1442 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6427206 {A K : Type'} (i : K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term1440 K i) = (term1442 A K _80095 ltle k dom f neut)) = ((term1436 K i) = (term1442 A K _80095 ltle k dom f neut)).
Proof. exact (MK_COMB (@lem6427204 K i) (@lem6427205 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6427207 {A K : Type'} (i : K) (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term1440 K i) = (term1441 A K _80095 ltle k dom f neut)) = ((term1436 K i) = (term1442 A K _80095 ltle k dom f neut)).
Proof. exact (TRANS (@lem6427201 A K i _80095 ltle k dom f neut) (@lem6427206 A K i _80095 ltle k dom f neut)). Qed.
Lemma lem6427208 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term1342 A K _80095 ltle i _80096 k dom f x' neut) : (term1436 K i) = (term1442 A K _80095 ltle k dom f neut).
Proof. exact (EQ_MP (@lem6427207 A K i _80095 ltle k dom f neut) (@lem6427198 A K _80095 ltle i _80096 k dom f x' neut h1)). Qed.
Lemma lem6427209 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : x = i) : term1442 A K _80095 ltle k dom f neut.
Proof. exact (EQ_MP (@lem6427208 A K _80095 ltle i _80096 k dom f x' neut h1) (@lem6426778 A K k dom f neut x i h2 h3)). Qed.
Lemma lem6427657 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1388 A K dom f x.
Proof. exact (h1). Qed.
Lemma lem6427938 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : neut = (@I (K -> A) f x).
Proof. exact (SYM (@lem6421436 A K f x neut h1)). Qed.
Lemma lem6428062 {A K : Type'} (f : K -> A) (x : K) : (term1445 A K f x) = (term1445 A K f x).
Proof. exact (eq_refl (term1445 A K f x)). Qed.
Lemma lem6428063 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (term1446 A K f x neut) = (term1447 A K f x).
Proof. exact (MK_COMB (@lem6428062 A K f x) (@lem6427938 A K f x neut h1)). Qed.
Lemma lem6428064 {A K : Type'} (f : K -> A) (x : K) : (term1447 A K f x) = (term1448 A K f x).
Proof. exact (eq_refl (term1447 A K f x)). Qed.
Lemma lem6428065 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1449 A K f x neut) = (term1449 A K f x neut).
Proof. exact (eq_refl (term1449 A K f x neut)). Qed.
Lemma lem6428066 {A K : Type'} (neut : A) (f : K -> A) (x : K) : ((term1446 A K f x neut) = (term1447 A K f x)) = ((term1446 A K f x neut) = (term1448 A K f x)).
Proof. exact (MK_COMB (@lem6428065 A K f x neut) (@lem6428064 A K f x)). Qed.
Lemma lem6428067 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1446 A K f x neut) = (term1378 A K f x neut).
Proof. exact (eq_refl (term1446 A K f x neut)). Qed.
Lemma lem6428068 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6428069 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1449 A K f x neut) = (term1450 A K f x neut).
Proof. exact (MK_COMB (@lem6428068) (@lem6428067 A K f x neut)). Qed.
Lemma lem6428070 {A K : Type'} (f : K -> A) (x : K) : (term1448 A K f x) = (term1448 A K f x).
Proof. exact (eq_refl (term1448 A K f x)). Qed.
Lemma lem6428071 {A K : Type'} (neut : A) (f : K -> A) (x : K) : ((term1446 A K f x neut) = (term1448 A K f x)) = ((term1378 A K f x neut) = (term1448 A K f x)).
Proof. exact (MK_COMB (@lem6428069 A K f x neut) (@lem6428070 A K f x)). Qed.
Lemma lem6428072 {A K : Type'} (neut : A) (f : K -> A) (x : K) : ((term1446 A K f x neut) = (term1447 A K f x)) = ((term1378 A K f x neut) = (term1448 A K f x)).
Proof. exact (TRANS (@lem6428066 A K neut f x) (@lem6428071 A K neut f x)). Qed.
Lemma lem6428073 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (term1378 A K f x neut) = (term1448 A K f x).
Proof. exact (EQ_MP (@lem6428072 A K neut f x) (@lem6428063 A K f x neut h1)). Qed.
Lemma lem6428509 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : term1448 A K f x.
Proof. exact (EQ_MP (@lem6428073 A K f x neut h2) (@lem6421430 A K k i dom f x neut h1)). Qed.
Lemma lem6429293 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : @I (K -> Prop) k x.
Proof. exact (proj1 (@lem6409830 A K k i dom f x neut h1)). Qed.
Lemma lem6429294 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term1451 K k x.
Proof. exact (fun h0 : term1391 K k x => @lem6429293 A K k i dom f x neut h1). Qed.
Lemma lem6429296 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6429297 {K : Type'} (k : K -> Prop) (x : K) : (term1451 K k x) = (@I (K -> Prop) k x).
Proof. exact (@lem6429296 (@I (K -> Prop) k x)). Qed.
Lemma lem6429298 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : @I (K -> Prop) k x.
Proof. exact (EQ_MP (@lem6429297 K k x) (@lem6429294 A K k i dom f x neut h1)). Qed.
Lemma lem6429301 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6429303 {K : Type'} (k : K -> Prop) (x : K) : (term1391 K k x) = (term1452 K k x).
Proof. exact (@lem6429301 (@I (K -> Prop) k x)). Qed.
Lemma lem6429306 {K : Type'} (k : K -> Prop) (x : K) (h1 : term1391 K k x) : term1452 K k x.
Proof. exact (EQ_MP (@lem6429303 K k x) (@lem6422222 K k x h1)). Qed.
Lemma lem6429309 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (@lem6429306 K k x h1 (@lem6429298 A K k i dom f x neut h2)). Qed.
Lemma lem6429310 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1409 A K k i dom f x neut) : term92.
Proof. exact (fun h0 : ~ False => @lem6429309 A K k i dom f x neut h1 h2). Qed.
Lemma lem6429312 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6429313 : term92 = False.
Proof. exact (@lem6429312 False). Qed.
Lemma lem6429314 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6429313) (@lem6429310 A K k i dom f x neut h1 h2)). Qed.
Lemma lem6429791 {K : Type'} (x : K) : x = x.
Proof. exact (@lem21386 K x). Qed.
Lemma lem6429792 {K : Type'} (x : K) : x = x.
Proof. exact (@lem6429791 K x). Qed.
Lemma lem6429793 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1429 A K _80095 ltle k dom f neut) = (term1429 A K _80095 ltle k dom f neut).
Proof. exact (@lem6429792 K (term1429 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6429794 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : term1453 A K _80095 ltle k dom f neut.
Proof. exact (fun h0 : term1442 A K _80095 ltle k dom f neut => @lem6429793 A K _80095 ltle k dom f neut). Qed.
Lemma lem6429796 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6429797 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1453 A K _80095 ltle k dom f neut) = ((term1429 A K _80095 ltle k dom f neut) = (term1429 A K _80095 ltle k dom f neut)).
Proof. exact (@lem6429796 ((term1429 A K _80095 ltle k dom f neut) = (term1429 A K _80095 ltle k dom f neut))). Qed.
Lemma lem6429798 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1429 A K _80095 ltle k dom f neut) = (term1429 A K _80095 ltle k dom f neut).
Proof. exact (EQ_MP (@lem6429797 A K _80095 ltle k dom f neut) (@lem6429794 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6429801 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6429803 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1442 A K _80095 ltle k dom f neut) = (term1454 A K _80095 ltle k dom f neut).
Proof. exact (@lem6429801 ((term1429 A K _80095 ltle k dom f neut) = (term1429 A K _80095 ltle k dom f neut))). Qed.
Lemma lem6429806 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h3 : x = i) : term1454 A K _80095 ltle k dom f neut.
Proof. exact (EQ_MP (@lem6429803 A K _80095 ltle k dom f neut) (@lem6423110 A K _80095 ltle _80096 k dom f x' neut x i h1 h2 h3)). Qed.
Lemma lem6429809 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h3 : x = i) : False.
Proof. exact (@lem6429806 A K _80095 ltle _80096 k dom f x' neut x i h1 h2 h3 (@lem6429798 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6429810 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h3 : x = i) : term92.
Proof. exact (fun h0 : ~ False => @lem6429809 A K _80095 ltle _80096 k dom f x' neut x i h1 h2 h3). Qed.
Lemma lem6429812 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6429813 : term92 = False.
Proof. exact (@lem6429812 False). Qed.
Lemma lem6430291 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term1380 A K dom f x.
Proof. exact (proj1 (@lem6409825 A K k i dom f x neut h1)). Qed.
Lemma lem6430292 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term1455 A K dom f x.
Proof. exact (fun h0 : term1388 A K dom f x => @lem6430291 A K k i dom f x neut h1). Qed.
Lemma lem6430294 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6430295 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1455 A K dom f x) = (term1380 A K dom f x).
Proof. exact (@lem6430294 (term1380 A K dom f x)). Qed.
Lemma lem6430296 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term1380 A K dom f x.
Proof. exact (EQ_MP (@lem6430295 A K dom f x) (@lem6430292 A K k i dom f x neut h1)). Qed.
Lemma lem6430299 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6430301 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1388 A K dom f x) = (term1456 A K dom f x).
Proof. exact (@lem6430299 (term1380 A K dom f x)). Qed.
Lemma lem6430304 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1456 A K dom f x.
Proof. exact (EQ_MP (@lem6430301 A K dom f x) (@lem6423625 A K dom f x h1)). Qed.
Lemma lem6430307 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (@lem6430304 A K dom f x h1 (@lem6430296 A K k i dom f x neut h2)). Qed.
Lemma lem6430308 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1409 A K k i dom f x neut) : term92.
Proof. exact (fun h0 : ~ False => @lem6430307 A K k i dom f x neut h1 h2). Qed.
Lemma lem6430310 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6430311 : term92 = False.
Proof. exact (@lem6430310 False). Qed.
Lemma lem6430312 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6430311) (@lem6430308 A K k i dom f x neut h1 h2)). Qed.
Lemma lem6430789 {A : Type'} (x : A) : x = x.
Proof. exact (@lem21386 A x). Qed.
Lemma lem6430790 {A : Type'} (x : A) : x = x.
Proof. exact (@lem6430789 A x). Qed.
Lemma lem6430791 {A K : Type'} (f : K -> A) (x : K) : (@I (K -> A) f x) = (@I (K -> A) f x).
Proof. exact (@lem6430790 A (@I (K -> A) f x)). Qed.
Lemma lem6430792 {A K : Type'} (f : K -> A) (x : K) : term1457 A K f x.
Proof. exact (fun h0 : term1448 A K f x => @lem6430791 A K f x). Qed.
Lemma lem6430794 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6430795 {A K : Type'} (f : K -> A) (x : K) : (term1457 A K f x) = ((@I (K -> A) f x) = (@I (K -> A) f x)).
Proof. exact (@lem6430794 ((@I (K -> A) f x) = (@I (K -> A) f x))). Qed.
Lemma lem6430796 {A K : Type'} (f : K -> A) (x : K) : (@I (K -> A) f x) = (@I (K -> A) f x).
Proof. exact (EQ_MP (@lem6430795 A K f x) (@lem6430792 A K f x)). Qed.
Lemma lem6430799 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6430801 {A K : Type'} (f : K -> A) (x : K) : (term1448 A K f x) = (term1458 A K f x).
Proof. exact (@lem6430799 ((@I (K -> A) f x) = (@I (K -> A) f x))). Qed.
Lemma lem6430804 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : term1458 A K f x.
Proof. exact (EQ_MP (@lem6430801 A K f x) (@lem6424504 A K k i dom f x neut h1 h2)). Qed.
Lemma lem6430807 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (@lem6430804 A K k i dom f x neut h1 h2 (@lem6430796 A K f x)). Qed.
Lemma lem6430808 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : term92.
Proof. exact (fun h0 : ~ False => @lem6430807 A K k i dom f x neut h1 h2). Qed.
Lemma lem6430810 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6430811 : term92 = False.
Proof. exact (@lem6430810 False). Qed.
Lemma lem6431289 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : @I (K -> Prop) k x.
Proof. exact (proj1 (@lem6409844 A K k i dom f x neut h1)). Qed.
Lemma lem6431290 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1451 K k x.
Proof. exact (fun h0 : term1391 K k x => @lem6431289 A K k i dom f x neut h1). Qed.
Lemma lem6431292 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6431293 {K : Type'} (k : K -> Prop) (x : K) : (term1451 K k x) = (@I (K -> Prop) k x).
Proof. exact (@lem6431292 (@I (K -> Prop) k x)). Qed.
Lemma lem6431294 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : @I (K -> Prop) k x.
Proof. exact (EQ_MP (@lem6431293 K k x) (@lem6431290 A K k i dom f x neut h1)). Qed.
Lemma lem6431297 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6431299 {K : Type'} (k : K -> Prop) (x : K) : (term1391 K k x) = (term1452 K k x).
Proof. exact (@lem6431297 (@I (K -> Prop) k x)). Qed.
Lemma lem6431302 {K : Type'} (k : K -> Prop) (x : K) (h1 : term1391 K k x) : term1452 K k x.
Proof. exact (EQ_MP (@lem6431299 K k x) (@lem6425007 K k x h1)). Qed.
Lemma lem6431305 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (@lem6431302 K k x h1 (@lem6431294 A K k i dom f x neut h2)). Qed.
Lemma lem6431306 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1399 A K k i dom f x neut) : term92.
Proof. exact (fun h0 : ~ False => @lem6431305 A K k i dom f x neut h1 h2). Qed.
Lemma lem6431308 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6431309 : term92 = False.
Proof. exact (@lem6431308 False). Qed.
Lemma lem6431310 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6431309) (@lem6431306 A K k i dom f x neut h1 h2)). Qed.
Lemma lem6431787 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1380 A K dom f x.
Proof. exact (proj1 (@lem6409843 A K k i dom f x neut h1)). Qed.
Lemma lem6431788 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1455 A K dom f x.
Proof. exact (fun h0 : term1388 A K dom f x => @lem6431787 A K k i dom f x neut h1). Qed.
Lemma lem6431790 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6431791 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1455 A K dom f x) = (term1380 A K dom f x).
Proof. exact (@lem6431790 (term1380 A K dom f x)). Qed.
Lemma lem6431792 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1380 A K dom f x.
Proof. exact (EQ_MP (@lem6431791 A K dom f x) (@lem6431788 A K k i dom f x neut h1)). Qed.
Lemma lem6431795 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6431797 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1388 A K dom f x) = (term1456 A K dom f x).
Proof. exact (@lem6431795 (term1380 A K dom f x)). Qed.
Lemma lem6431800 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1456 A K dom f x.
Proof. exact (EQ_MP (@lem6431797 A K dom f x) (@lem6425455 A K dom f x h1)). Qed.
Lemma lem6431803 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (@lem6431800 A K dom f x h1 (@lem6431792 A K k i dom f x neut h2)). Qed.
Lemma lem6431804 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : term92.
Proof. exact (fun h0 : ~ False => @lem6431803 A K k i dom f x neut h1 h2). Qed.
Lemma lem6431806 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6431807 : term92 = False.
Proof. exact (@lem6431806 False). Qed.
Lemma lem6431808 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6431807) (@lem6431804 A K k i dom f x neut h1 h2)). Qed.
Lemma lem6432285 {A : Type'} (x : A) : x = x.
Proof. exact (@lem21386 A x). Qed.
Lemma lem6432286 {A : Type'} (x : A) : x = x.
Proof. exact (@lem6432285 A x). Qed.
Lemma lem6432287 {A K : Type'} (f : K -> A) (x : K) : (@I (K -> A) f x) = (@I (K -> A) f x).
Proof. exact (@lem6432286 A (@I (K -> A) f x)). Qed.
Lemma lem6432288 {A K : Type'} (f : K -> A) (x : K) : term1457 A K f x.
Proof. exact (fun h0 : term1448 A K f x => @lem6432287 A K f x). Qed.
Lemma lem6432290 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6432291 {A K : Type'} (f : K -> A) (x : K) : (term1457 A K f x) = ((@I (K -> A) f x) = (@I (K -> A) f x)).
Proof. exact (@lem6432290 ((@I (K -> A) f x) = (@I (K -> A) f x))). Qed.
Lemma lem6432292 {A K : Type'} (f : K -> A) (x : K) : (@I (K -> A) f x) = (@I (K -> A) f x).
Proof. exact (EQ_MP (@lem6432291 A K f x) (@lem6432288 A K f x)). Qed.
Lemma lem6432295 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6432297 {A K : Type'} (f : K -> A) (x : K) : (term1448 A K f x) = (term1458 A K f x).
Proof. exact (@lem6432295 ((@I (K -> A) f x) = (@I (K -> A) f x))). Qed.
Lemma lem6432300 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : term1458 A K f x.
Proof. exact (EQ_MP (@lem6432297 A K f x) (@lem6426307 A K k i dom f x neut h1 h2)). Qed.
Lemma lem6432303 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (@lem6432300 A K k i dom f x neut h1 h2 (@lem6432292 A K f x)). Qed.
Lemma lem6432304 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : term92.
Proof. exact (fun h0 : ~ False => @lem6432303 A K k i dom f x neut h1 h2). Qed.
Lemma lem6432306 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6432307 : term92 = False.
Proof. exact (@lem6432306 False). Qed.
Lemma lem6432785 {K : Type'} (x : K) : x = x.
Proof. exact (@lem21386 K x). Qed.
Lemma lem6432786 {K : Type'} (x : K) : x = x.
Proof. exact (@lem6432785 K x). Qed.
Lemma lem6432787 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1429 A K _80095 ltle k dom f neut) = (term1429 A K _80095 ltle k dom f neut).
Proof. exact (@lem6432786 K (term1429 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6432788 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : term1453 A K _80095 ltle k dom f neut.
Proof. exact (fun h0 : term1442 A K _80095 ltle k dom f neut => @lem6432787 A K _80095 ltle k dom f neut). Qed.
Lemma lem6432790 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6432791 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1453 A K _80095 ltle k dom f neut) = ((term1429 A K _80095 ltle k dom f neut) = (term1429 A K _80095 ltle k dom f neut)).
Proof. exact (@lem6432790 ((term1429 A K _80095 ltle k dom f neut) = (term1429 A K _80095 ltle k dom f neut))). Qed.
Lemma lem6432792 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1429 A K _80095 ltle k dom f neut) = (term1429 A K _80095 ltle k dom f neut).
Proof. exact (EQ_MP (@lem6432791 A K _80095 ltle k dom f neut) (@lem6432788 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6432795 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6432797 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1442 A K _80095 ltle k dom f neut) = (term1454 A K _80095 ltle k dom f neut).
Proof. exact (@lem6432795 ((term1429 A K _80095 ltle k dom f neut) = (term1429 A K _80095 ltle k dom f neut))). Qed.
Lemma lem6432800 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : x = i) : term1454 A K _80095 ltle k dom f neut.
Proof. exact (EQ_MP (@lem6432797 A K _80095 ltle k dom f neut) (@lem6427209 A K _80095 ltle _80096 x' k dom f neut x i h1 h2 h3)). Qed.
Lemma lem6432803 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : x = i) : False.
Proof. exact (@lem6432800 A K _80095 ltle _80096 x' k dom f neut x i h1 h2 h3 (@lem6432792 A K _80095 ltle k dom f neut)). Qed.
Lemma lem6432804 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : x = i) : term92.
Proof. exact (fun h0 : ~ False => @lem6432803 A K _80095 ltle _80096 x' k dom f neut x i h1 h2 h3). Qed.
Lemma lem6432806 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6432807 : term92 = False.
Proof. exact (@lem6432806 False). Qed.
Lemma lem6433285 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1380 A K dom f x.
Proof. exact (proj1 (@lem6409843 A K k i dom f x neut h1)). Qed.
Lemma lem6433286 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1455 A K dom f x.
Proof. exact (fun h0 : term1388 A K dom f x => @lem6433285 A K k i dom f x neut h1). Qed.
Lemma lem6433288 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6433289 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1455 A K dom f x) = (term1380 A K dom f x).
Proof. exact (@lem6433288 (term1380 A K dom f x)). Qed.
Lemma lem6433290 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1380 A K dom f x.
Proof. exact (EQ_MP (@lem6433289 A K dom f x) (@lem6433286 A K k i dom f x neut h1)). Qed.
Lemma lem6433293 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6433295 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1388 A K dom f x) = (term1456 A K dom f x).
Proof. exact (@lem6433293 (term1380 A K dom f x)). Qed.
Lemma lem6433298 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1456 A K dom f x.
Proof. exact (EQ_MP (@lem6433295 A K dom f x) (@lem6427657 A K dom f x h1)). Qed.
Lemma lem6433301 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (@lem6433298 A K dom f x h1 (@lem6433290 A K k i dom f x neut h2)). Qed.
Lemma lem6433302 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : term92.
Proof. exact (fun h0 : ~ False => @lem6433301 A K k i dom f x neut h1 h2). Qed.
Lemma lem6433304 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6433305 : term92 = False.
Proof. exact (@lem6433304 False). Qed.
Lemma lem6433306 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6433305) (@lem6433302 A K k i dom f x neut h1 h2)). Qed.
Lemma lem6433783 {A : Type'} (x : A) : x = x.
Proof. exact (@lem21386 A x). Qed.
Lemma lem6433784 {A : Type'} (x : A) : x = x.
Proof. exact (@lem6433783 A x). Qed.
Lemma lem6433785 {A K : Type'} (f : K -> A) (x : K) : (@I (K -> A) f x) = (@I (K -> A) f x).
Proof. exact (@lem6433784 A (@I (K -> A) f x)). Qed.
Lemma lem6433786 {A K : Type'} (f : K -> A) (x : K) : term1457 A K f x.
Proof. exact (fun h0 : term1448 A K f x => @lem6433785 A K f x). Qed.
Lemma lem6433788 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6433789 {A K : Type'} (f : K -> A) (x : K) : (term1457 A K f x) = ((@I (K -> A) f x) = (@I (K -> A) f x)).
Proof. exact (@lem6433788 ((@I (K -> A) f x) = (@I (K -> A) f x))). Qed.
Lemma lem6433790 {A K : Type'} (f : K -> A) (x : K) : (@I (K -> A) f x) = (@I (K -> A) f x).
Proof. exact (EQ_MP (@lem6433789 A K f x) (@lem6433786 A K f x)). Qed.
Lemma lem6433793 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6433795 {A K : Type'} (f : K -> A) (x : K) : (term1448 A K f x) = (term1458 A K f x).
Proof. exact (@lem6433793 ((@I (K -> A) f x) = (@I (K -> A) f x))). Qed.
Lemma lem6433798 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : term1458 A K f x.
Proof. exact (EQ_MP (@lem6433795 A K f x) (@lem6428509 A K k i dom f x neut h1 h2)). Qed.
Lemma lem6433801 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (@lem6433798 A K k i dom f x neut h1 h2 (@lem6433790 A K f x)). Qed.
Lemma lem6433802 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : term92.
Proof. exact (fun h0 : ~ False => @lem6433801 A K k i dom f x neut h1 h2). Qed.
Lemma lem6433804 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6433805 : term92 = False.
Proof. exact (@lem6433804 False). Qed.
Lemma lem6433808 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6433805) (@lem6433802 A K k i dom f x neut h1 h2)). Qed.
Lemma lem6433809 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6433306 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6427657 A K dom f x h1)). Qed.
Lemma lem6433811 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6433809 A K k i dom f x neut h1 h2) (@lem6427657 A K dom f x h1)). Qed.
Lemma lem6433813 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : x = i) : False.
Proof. exact (EQ_MP (@lem6432807) (@lem6432804 A K _80095 ltle _80096 x' k dom f neut x i h1 h2 h3)). Qed.
Lemma lem6433815 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6432307) (@lem6432304 A K k i dom f x neut h1 h2)). Qed.
Lemma lem6433816 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6431808 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6425455 A K dom f x h1)). Qed.
Lemma lem6433818 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6433816 A K k i dom f x neut h1 h2) (@lem6425455 A K dom f x h1)). Qed.
Lemma lem6433819 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1399 A K k i dom f x neut) : (term1391 K k x) = False.
Proof. exact (prop_ext (fun h3 : term1391 K k x => @lem6431310 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6425007 K k x h1)). Qed.
Lemma lem6433821 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6433819 A K k i dom f x neut h1 h2) (@lem6425007 K k x h1)). Qed.
Lemma lem6433823 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6430811) (@lem6430808 A K k i dom f x neut h1 h2)). Qed.
Lemma lem6433824 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1409 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6430312 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6423625 A K dom f x h1)). Qed.
Lemma lem6433826 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6433824 A K k i dom f x neut h1 h2) (@lem6423625 A K dom f x h1)). Qed.
Lemma lem6433828 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h3 : x = i) : False.
Proof. exact (EQ_MP (@lem6429813) (@lem6429810 A K _80095 ltle _80096 k dom f x' neut x i h1 h2 h3)). Qed.
Lemma lem6433829 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1409 A K k i dom f x neut) : (term1391 K k x) = False.
Proof. exact (prop_ext (fun h3 : term1391 K k x => @lem6429314 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6422222 K k x h1)). Qed.
Lemma lem6433831 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6433829 A K k i dom f x neut h1 h2) (@lem6422222 K k x h1)). Qed.
Lemma lem6433832 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : ((@I (K -> A) f x) = neut) = False.
Proof. exact (prop_ext (fun h3 : (@I (K -> A) f x) = neut => @lem6433808 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6421436 A K f x neut h2)). Qed.
Lemma lem6433833 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6433832 A K k i dom f x neut h1 h2) (@lem6421436 A K f x neut h2)). Qed.
Lemma lem6433834 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6433811 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6420814 A K dom f x h1)). Qed.
Lemma lem6433835 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6433834 A K k i dom f x neut h1 h2) (@lem6420814 A K dom f x h1)). Qed.
Lemma lem6433836 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : x = i) : (x = i) = False.
Proof. exact (prop_ext (fun h4 : x = i => @lem6433813 A K _80095 ltle _80096 x' k dom f neut x i h1 h2 h3) (fun h4 : False => @lem6420192 K x i h3)). Qed.
Lemma lem6433837 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : x = i) : False.
Proof. exact (EQ_MP (@lem6433836 A K _80095 ltle _80096 x' k dom f neut x i h1 h2 h3) (@lem6420192 K x i h3)). Qed.
Lemma lem6433838 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : ((@I (K -> A) f x) = neut) = False.
Proof. exact (prop_ext (fun h3 : (@I (K -> A) f x) = neut => @lem6433815 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6419570 A K f x neut h2)). Qed.
Lemma lem6433839 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6433838 A K k i dom f x neut h1 h2) (@lem6419570 A K f x neut h2)). Qed.
Lemma lem6433840 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6433818 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6418948 A K dom f x h1)). Qed.
Lemma lem6433841 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6433840 A K k i dom f x neut h1 h2) (@lem6418948 A K dom f x h1)). Qed.
Lemma lem6433842 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1399 A K k i dom f x neut) : (term1391 K k x) = False.
Proof. exact (prop_ext (fun h3 : term1391 K k x => @lem6433821 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6418326 K k x h1)). Qed.
Lemma lem6433843 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6433842 A K k i dom f x neut h1 h2) (@lem6418326 K k x h1)). Qed.
Lemma lem6433844 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : ((@I (K -> A) f x) = neut) = False.
Proof. exact (prop_ext (fun h3 : (@I (K -> A) f x) = neut => @lem6433823 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6417704 A K f x neut h2)). Qed.
Lemma lem6433845 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6433844 A K k i dom f x neut h1 h2) (@lem6417704 A K f x neut h2)). Qed.
Lemma lem6433846 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1409 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6433826 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6417078 A K dom f x h1)). Qed.
Lemma lem6433847 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6433846 A K k i dom f x neut h1 h2) (@lem6417078 A K dom f x h1)). Qed.
Lemma lem6433848 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h3 : x = i) : (x = i) = False.
Proof. exact (prop_ext (fun h4 : x = i => @lem6433828 A K _80095 ltle _80096 k dom f x' neut x i h1 h2 h3) (fun h4 : False => @lem6416452 K x i h3)). Qed.
Lemma lem6433849 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h3 : x = i) : False.
Proof. exact (EQ_MP (@lem6433848 A K _80095 ltle _80096 k dom f x' neut x i h1 h2 h3) (@lem6416452 K x i h3)). Qed.
Lemma lem6433850 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1409 A K k i dom f x neut) : (term1391 K k x) = False.
Proof. exact (prop_ext (fun h3 : term1391 K k x => @lem6433831 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6415826 K k x h1)). Qed.
Lemma lem6433851 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6433850 A K k i dom f x neut h1 h2) (@lem6415826 K k x h1)). Qed.
Lemma lem6433852 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : ((@I (K -> A) f x) = neut) = False.
Proof. exact (prop_ext (fun h3 : (@I (K -> A) f x) = neut => @lem6433833 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6414870 A K f x neut h2)). Qed.
Lemma lem6433853 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6433852 A K k i dom f x neut h1 h2) (@lem6414870 A K f x neut h2)). Qed.
Lemma lem6433854 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6433835 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6414372 A K dom f x h1)). Qed.
Lemma lem6433855 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6433854 A K k i dom f x neut h1 h2) (@lem6414372 A K dom f x h1)). Qed.
Lemma lem6433856 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : x = i) : (x = i) = False.
Proof. exact (prop_ext (fun h4 : x = i => @lem6433837 A K _80095 ltle _80096 x' k dom f neut x i h1 h2 h3) (fun h4 : False => @lem6413874 K x i h3)). Qed.
Lemma lem6433857 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : x = i) : False.
Proof. exact (EQ_MP (@lem6433856 A K _80095 ltle _80096 x' k dom f neut x i h1 h2 h3) (@lem6413874 K x i h3)). Qed.
Lemma lem6433858 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : ((@I (K -> A) f x) = neut) = False.
Proof. exact (prop_ext (fun h3 : (@I (K -> A) f x) = neut => @lem6433839 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6413376 A K f x neut h2)). Qed.
Lemma lem6433859 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6433858 A K k i dom f x neut h1 h2) (@lem6413376 A K f x neut h2)). Qed.
Lemma lem6433860 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6433841 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6412878 A K dom f x h1)). Qed.
Lemma lem6433861 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6433860 A K k i dom f x neut h1 h2) (@lem6412878 A K dom f x h1)). Qed.
Lemma lem6433862 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1399 A K k i dom f x neut) : (term1391 K k x) = False.
Proof. exact (prop_ext (fun h3 : term1391 K k x => @lem6433843 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6412380 K k x h1)). Qed.
Lemma lem6433863 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6433862 A K k i dom f x neut h1 h2) (@lem6412380 K k x h1)). Qed.
Lemma lem6433864 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : ((@I (K -> A) f x) = neut) = False.
Proof. exact (prop_ext (fun h3 : (@I (K -> A) f x) = neut => @lem6433845 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6411882 A K f x neut h2)). Qed.
Lemma lem6433865 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6433864 A K k i dom f x neut h1 h2) (@lem6411882 A K f x neut h2)). Qed.
Lemma lem6433866 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1409 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6433847 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6411376 A K dom f x h1)). Qed.
Lemma lem6433867 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6433866 A K k i dom f x neut h1 h2) (@lem6411376 A K dom f x h1)). Qed.
Lemma lem6433868 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h3 : x = i) : (x = i) = False.
Proof. exact (prop_ext (fun h4 : x = i => @lem6433849 A K _80095 ltle _80096 k dom f x' neut x i h1 h2 h3) (fun h4 : False => @lem6410870 K x i h3)). Qed.
Lemma lem6433869 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h3 : x = i) : False.
Proof. exact (EQ_MP (@lem6433868 A K _80095 ltle _80096 k dom f x' neut x i h1 h2 h3) (@lem6410870 K x i h3)). Qed.
Lemma lem6433870 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1409 A K k i dom f x neut) : (term1391 K k x) = False.
Proof. exact (prop_ext (fun h3 : term1391 K k x => @lem6433851 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6410364 K k x h1)). Qed.
Lemma lem6433871 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6433870 A K k i dom f x neut h1 h2) (@lem6410364 K k x h1)). Qed.
Lemma lem6433872 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : ((@I (K -> A) f x) = neut) = False.
Proof. exact (prop_ext (fun h3 : (@I (K -> A) f x) = neut => @lem6433853 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6414870 A K f x neut h2)). Qed.
Lemma lem6433873 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6433872 A K k i dom f x neut h1 h2) (@lem6414870 A K f x neut h2)). Qed.
Lemma lem6433874 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6433855 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6414372 A K dom f x h1)). Qed.
Lemma lem6433875 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6433874 A K k i dom f x neut h1 h2) (@lem6414372 A K dom f x h1)). Qed.
Lemma lem6433876 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : x = i) : (x = i) = False.
Proof. exact (prop_ext (fun h4 : x = i => @lem6433857 A K _80095 ltle _80096 x' k dom f neut x i h1 h2 h3) (fun h4 : False => @lem6413874 K x i h3)). Qed.
Lemma lem6433877 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : x = i) : False.
Proof. exact (EQ_MP (@lem6433876 A K _80095 ltle _80096 x' k dom f neut x i h1 h2 h3) (@lem6413874 K x i h3)). Qed.
Lemma lem6433878 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : ((@I (K -> A) f x) = neut) = False.
Proof. exact (prop_ext (fun h3 : (@I (K -> A) f x) = neut => @lem6433859 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6413376 A K f x neut h2)). Qed.
Lemma lem6433879 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6433878 A K k i dom f x neut h1 h2) (@lem6413376 A K f x neut h2)). Qed.
Lemma lem6433880 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6433861 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6412878 A K dom f x h1)). Qed.
Lemma lem6433881 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6433880 A K k i dom f x neut h1 h2) (@lem6412878 A K dom f x h1)). Qed.
Lemma lem6433882 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1399 A K k i dom f x neut) : (term1391 K k x) = False.
Proof. exact (prop_ext (fun h3 : term1391 K k x => @lem6433863 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6412380 K k x h1)). Qed.
Lemma lem6433883 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6433882 A K k i dom f x neut h1 h2) (@lem6412380 K k x h1)). Qed.
Lemma lem6433884 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : ((@I (K -> A) f x) = neut) = False.
Proof. exact (prop_ext (fun h3 : (@I (K -> A) f x) = neut => @lem6433865 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6411882 A K f x neut h2)). Qed.
Lemma lem6433885 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6433884 A K k i dom f x neut h1 h2) (@lem6411882 A K f x neut h2)). Qed.
Lemma lem6433886 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1409 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6433867 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6411376 A K dom f x h1)). Qed.
Lemma lem6433887 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6433886 A K k i dom f x neut h1 h2) (@lem6411376 A K dom f x h1)). Qed.
Lemma lem6433888 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h3 : x = i) : (x = i) = False.
Proof. exact (prop_ext (fun h4 : x = i => @lem6433869 A K _80095 ltle _80096 k dom f x' neut x i h1 h2 h3) (fun h4 : False => @lem6410870 K x i h3)). Qed.
Lemma lem6433889 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h3 : x = i) : False.
Proof. exact (EQ_MP (@lem6433888 A K _80095 ltle _80096 k dom f x' neut x i h1 h2 h3) (@lem6410870 K x i h3)). Qed.
Lemma lem6433890 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1409 A K k i dom f x neut) : (term1391 K k x) = False.
Proof. exact (prop_ext (fun h3 : term1391 K k x => @lem6433871 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6410364 K k x h1)). Qed.
Lemma lem6433891 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6433890 A K k i dom f x neut h1 h2) (@lem6410364 K k x h1)). Qed.
Lemma lem6433892 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : term1390 A K dom f x neut) : False.
Proof. exact (or_elim (@lem6409850 A K dom f x neut h2) (fun h0 : term1388 A K dom f x => @lem6433875 A K k i dom f x neut h0 h1) (fun h0 : (@I (K -> A) f x) = neut => @lem6433873 A K k i dom f x neut h1 h0)). Qed.
Lemma lem6433893 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : term1390 A K dom f x neut) : False.
Proof. exact (or_elim (@lem6409854 A K dom f x neut h2) (fun h0 : term1388 A K dom f x => @lem6433881 A K k i dom f x neut h0 h1) (fun h0 : (@I (K -> A) f x) = neut => @lem6433879 A K k i dom f x neut h1 h0)). Qed.
Lemma lem6433894 {A K : Type'} (i : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : term1393 A K k dom f x neut) : False.
Proof. exact (or_elim (@lem6409851 A K k dom f x neut h2) (fun h0 : term1391 K k x => @lem6433883 A K k i dom f x neut h0 h1) (fun h0 : term1390 A K dom f x neut => @lem6433893 A K k i dom f x neut h1 h0)). Qed.
Lemma lem6433895 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : term1395 A K k dom f neut x i) : False.
Proof. exact (or_elim (@lem6409849 A K k dom f neut x i h3) (fun h0 : term1393 A K k dom f x neut => @lem6433894 A K i k dom f x neut h2 h0) (fun h0 : x = i => @lem6433877 A K _80095 ltle _80096 x' k dom f neut x i h1 h2 h0)). Qed.
Lemma lem6433896 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (x' : K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (or_elim (@lem6409842 A K k i dom f x neut h2) (fun h0 : term1395 A K k dom f neut x i => @lem6433895 A K _80095 ltle _80096 x' k dom f neut x i h1 h2 h0) (fun h0 : term1390 A K dom f x neut => @lem6433892 A K k i dom f x neut h2 h0)). Qed.
Lemma lem6433897 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : term1390 A K dom f x neut) : False.
Proof. exact (or_elim (@lem6409836 A K dom f x neut h2) (fun h0 : term1388 A K dom f x => @lem6433887 A K k i dom f x neut h0 h1) (fun h0 : (@I (K -> A) f x) = neut => @lem6433885 A K k i dom f x neut h1 h0)). Qed.
Lemma lem6433898 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (_80096 : type835 A K) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (k : K -> Prop) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1342 A K _80095 ltle i _80096 k dom f x' neut) (h3 : term1400 K k x i) : False.
Proof. exact (or_elim (@lem6409835 K k x i h3) (fun h0 : term1391 K k x => @lem6433891 A K k i dom f x neut h0 h1) (fun h0 : x = i => @lem6433889 A K _80095 ltle _80096 k dom f x' neut x i h1 h2 h0)). Qed.
Lemma lem6433899 {A K : Type'} (x : K) (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : term1342 A K _80095 ltle i _80096 k dom f x' neut) : False.
Proof. exact (or_elim (@lem6409823 A K k i dom f x neut h1) (fun h0 : term1400 K k x i => @lem6433898 A K _80095 ltle _80096 dom f x' neut k x i h1 h2 h0) (fun h0 : term1390 A K dom f x neut => @lem6433897 A K k i dom f x neut h1 h0)). Qed.
Lemma lem6433900 {A K : Type'} (x : K) (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term743 A K k i dom f x neut) (h2 : term1342 A K _80095 ltle i _80096 k dom f x' neut) : False.
Proof. exact (or_elim (@lem6408480 A K k i dom f x neut h1) (fun h0 : term1409 A K k i dom f x neut => @lem6433899 A K x _80095 ltle i _80096 k dom f x' neut h0 h2) (fun h0 : term1399 A K k i dom f x neut => @lem6433896 A K _80095 ltle _80096 x' k i dom f x neut h2 h0)). Qed.
Lemma lem6433901 {A K : Type'} (x : K) (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term737 A K _80096) (h2 : term743 A K k i dom f x neut) (h3 : term1342 A K _80095 ltle i _80096 k dom f x' neut) : False.
Proof. exact (ex_elim (@lem6407303 A K _80096 h1) (fun i' : type834 A K => fun h0 : term1043 A K _80096 i' => @lem6433900 A K x _80095 ltle i _80096 k dom f x' neut h2 h3)). Qed.
Lemma lem6433902 {A K : Type'} (x : K) (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term737 A K _80096) (h2 : term572 A K _80095) (h3 : term743 A K k i dom f x neut) (h4 : term1342 A K _80095 ltle i _80096 k dom f x' neut) : False.
Proof. exact (ex_elim (@lem6407983 A K _80095 h2) (fun j : type755 A K => fun h0 : term1311 A K _80095 j => @lem6433901 A K x _80095 ltle i _80096 k dom f x' neut h1 h3 h4)). Qed.
Lemma lem6433903 {A K : Type'} (x : K) (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term737 A K _80096) (h2 : term572 A K _80095) (h3 : term743 A K k i dom f x neut) (h4 : term641 A K _80095 ltle i _80096 k dom f neut) : False.
Proof. exact (ex_elim (@lem6408087 A K _80095 ltle i _80096 k dom f neut h4) (fun x' : K => fun h0 : term1344 A K _80095 ltle i _80096 k dom f neut x' => @lem6433902 A K x _80095 ltle i _80096 k dom f x' neut h1 h2 h3 h0)). Qed.
Lemma lem6433904 {A K : Type'} (x : K) (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term737 A K _80096) (h2 : term572 A K _80095) (h3 : term743 A K k i dom f x neut) (h4 : term641 A K _80095 ltle i _80096 k dom f neut) : (term743 A K k i dom f x neut) = False.
Proof. exact (prop_ext (fun h5 : term743 A K k i dom f x neut => @lem6433903 A K x _80095 ltle i _80096 k dom f neut h1 h2 h3 h4) (fun h5 : False => @lem6406277 A K k i dom f x neut h3)). Qed.
Lemma lem6433905 {A K : Type'} (x : K) (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term737 A K _80096) (h2 : term572 A K _80095) (h3 : term743 A K k i dom f x neut) (h4 : term641 A K _80095 ltle i _80096 k dom f neut) : False.
Proof. exact (EQ_MP (@lem6433904 A K x _80095 ltle i _80096 k dom f neut h1 h2 h3 h4) (@lem6406277 A K k i dom f x neut h3)). Qed.
Lemma lem6433906 {A K : Type'} (x : K) (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term737 A K _80096) (h2 : term572 A K _80095) (h3 : term641 A K _80095 ltle i _80096 k dom f neut) : term742 A K k i dom f x neut.
Proof. exact (fun h0 : term743 A K k i dom f x neut => @lem6433905 A K x _80095 ltle i _80096 k dom f neut h1 h2 h0 h3). Qed.
Lemma lem6433907 {A K : Type'} (x : K) (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term737 A K _80096) (h2 : term572 A K _80095) (h3 : term641 A K _80095 ltle i _80096 k dom f neut) : (term438 A K k i dom f x neut) = (term461 A K k i dom f x neut).
Proof. exact (EQ_MP (@lem6406276 A K k i dom f x neut) (@lem6433906 A K x _80095 ltle i _80096 k dom f neut h1 h2 h3)). Qed.
Lemma lem6433912 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (i : K) (_80096 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term737 A K _80096) (h2 : term572 A K _80095) (h3 : term641 A K _80095 ltle i _80096 k dom f neut) : term464 A K k i dom f neut.
Proof. exact (fun x : K => @lem6433907 A K x _80095 ltle i _80096 k dom f neut h1 h2 h3). Qed.
Lemma lem6433913 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (_80095 : type756 A K) (h1 : term737 A K _80096) (h2 : term572 A K _80095) : term643 A K _80095 ltle _80096 k i dom f neut.
Proof. exact (fun h0 : term641 A K _80095 ltle i _80096 k dom f neut => @lem6433912 A K _80095 ltle i _80096 k dom f neut h1 h2 h0). Qed.
Lemma lem6433914 {A K : Type'} (_80095 : type756 A K) (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : term737 A K _80096) : term644 A K _80095 ltle _80096 k i dom f neut.
Proof. exact (fun h0 : term572 A K _80095 => @lem6433913 A K ltle k i dom f neut _80096 _80095 h1 h0). Qed.
Lemma lem6433919 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : term737 A K _80096) : term646 A K ltle _80096 k i dom f neut.
Proof. exact (fun _80095 : type756 A K => @lem6433914 A K _80095 ltle k i dom f neut _80096 h1). Qed.
Lemma lem6433924 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : term737 A K _80096) : term648 A K _80096 k i dom f neut.
Proof. exact (fun ltle : type1402 K => @lem6433919 A K ltle k i dom f neut _80096 h1). Qed.
Lemma lem6433929 {A K : Type'} (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : term737 A K _80096) : term650 A K _80096 i dom f neut.
Proof. exact (fun k : K -> Prop => @lem6433924 A K k i dom f neut _80096 h1). Qed.
Lemma lem6433934 {A K : Type'} (dom : A -> Prop) (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : term737 A K _80096) : term652 A K _80096 dom f neut.
Proof. exact (fun i : K => @lem6433929 A K i dom f neut _80096 h1). Qed.
Lemma lem6433939 {A K : Type'} (f : K -> A) (neut : A) (_80096 : type835 A K) (h1 : term737 A K _80096) : term654 A K _80096 f neut.
Proof. exact (fun dom : A -> Prop => @lem6433934 A K dom f neut _80096 h1). Qed.
Lemma lem6433944 {A K : Type'} (neut : A) (_80096 : type835 A K) (h1 : term737 A K _80096) : term656 A K _80096 neut.
Proof. exact (fun f : K -> A => @lem6433939 A K f neut _80096 h1). Qed.
Lemma lem6433949 {A K : Type'} (_80096 : type835 A K) (h1 : term737 A K _80096) : term658 A K _80096.
Proof. exact (fun neut : A => @lem6433944 A K neut _80096 h1). Qed.
Lemma lem6433950 {A K : Type'} (_80096 : type835 A K) : term739 A K _80096.
Proof. exact (fun h0 : term737 A K _80096 => @lem6433949 A K _80096 h0). Qed.
Lemma lem6433955 {A K : Type'} : term741 A K.
Proof. exact (fun _80096 : type835 A K => @lem6433950 A K _80096). Qed.
Lemma lem6433956 {A K : Type'} : term623 A K.
Proof. exact (EQ_MP (@lem6406269 A K) (@lem6433955 A K)). Qed.
Lemma lem6433957 {A K : Type'} (neut : A) : term1459 A K neut.
Proof. exact (@lem6433956 A K neut). Qed.
Lemma lem6433958 {A K : Type'} (neut : A) : (term1459 A K neut) = (term619 A K neut).
Proof. exact (eq_refl (term1459 A K neut)). Qed.
Lemma lem6433959 {A K : Type'} (neut : A) : term619 A K neut.
Proof. exact (EQ_MP (@lem6433958 A K neut) (@lem6433957 A K neut)). Qed.
Lemma lem6433960 {A K : Type'} (neut : A) (f : K -> A) : term1460 A K neut f.
Proof. exact (@lem6433959 A K neut f). Qed.
Lemma lem6433961 {A K : Type'} (f : K -> A) (neut : A) : (term1460 A K neut f) = (term615 A K f neut).
Proof. exact (eq_refl (term1460 A K neut f)). Qed.
Lemma lem6433962 {A K : Type'} (f : K -> A) (neut : A) : term615 A K f neut.
Proof. exact (EQ_MP (@lem6433961 A K f neut) (@lem6433960 A K neut f)). Qed.
Lemma lem6433963 {A K : Type'} (f : K -> A) (neut : A) (dom : A -> Prop) : term1461 A K f neut dom.
Proof. exact (@lem6433962 A K f neut dom). Qed.
Lemma lem6433964 {A K : Type'} (dom : A -> Prop) (f : K -> A) (neut : A) : (term1461 A K f neut dom) = (term611 A K dom f neut).
Proof. exact (eq_refl (term1461 A K f neut dom)). Qed.
Lemma lem6433965 {A K : Type'} (dom : A -> Prop) (f : K -> A) (neut : A) : term611 A K dom f neut.
Proof. exact (EQ_MP (@lem6433964 A K dom f neut) (@lem6433963 A K f neut dom)). Qed.
Lemma lem6433966 {A K : Type'} (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : term1462 A K dom f neut i.
Proof. exact (@lem6433965 A K dom f neut i). Qed.
Lemma lem6433967 {A K : Type'} (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1462 A K dom f neut i) = (term607 A K i dom f neut).
Proof. exact (eq_refl (term1462 A K dom f neut i)). Qed.
Lemma lem6433968 {A K : Type'} (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term607 A K i dom f neut.
Proof. exact (EQ_MP (@lem6433967 A K i dom f neut) (@lem6433966 A K dom f neut i)). Qed.
Lemma lem6433969 {A K : Type'} (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (k : K -> Prop) : term1463 A K i dom f neut k.
Proof. exact (@lem6433968 A K i dom f neut k). Qed.
Lemma lem6433970 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1463 A K i dom f neut k) = (term603 A K k i dom f neut).
Proof. exact (eq_refl (term1463 A K i dom f neut k)). Qed.
Lemma lem6433971 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term603 A K k i dom f neut.
Proof. exact (EQ_MP (@lem6433970 A K k i dom f neut) (@lem6433969 A K i dom f neut k)). Qed.
Lemma lem6433972 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (ltle : type1402 K) : term1464 A K k i dom f neut ltle.
Proof. exact (@lem6433971 A K k i dom f neut ltle). Qed.
Lemma lem6433973 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1464 A K k i dom f neut ltle) = (term584 A K ltle k i dom f neut).
Proof. exact (eq_refl (term1464 A K k i dom f neut ltle)). Qed.
Lemma lem6433974 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term584 A K ltle k i dom f neut.
Proof. exact (EQ_MP (@lem6433973 A K ltle k i dom f neut) (@lem6433972 A K k i dom f neut ltle)). Qed.
Lemma lem6433976 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term474 A K ltle k i dom f neut.
Proof. exact (@lem6405075 A K ltle k i dom f neut (@lem6433974 A K ltle k i dom f neut)). Qed.
Lemma lem6433977 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term475 A K ltle k i dom f neut) : False.
Proof. exact (@lem6433976 A K ltle k i dom f neut (@lem6404867 A K ltle k i dom f neut h1)). Qed.
Lemma lem6433978 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term475 A K ltle k i dom f neut) : (term475 A K ltle k i dom f neut) = False.
Proof. exact (prop_ext (fun h2 : term475 A K ltle k i dom f neut => @lem6433977 A K ltle k i dom f neut h1) (fun h2 : False => @lem6404867 A K ltle k i dom f neut h1)). Qed.
Lemma lem6433979 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term475 A K ltle k i dom f neut) : False.
Proof. exact (EQ_MP (@lem6433978 A K ltle k i dom f neut h1) (@lem6404867 A K ltle k i dom f neut h1)). Qed.
Lemma lem6433980 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term474 A K ltle k i dom f neut.
Proof. exact (fun h0 : term475 A K ltle k i dom f neut => @lem6433979 A K ltle k i dom f neut h0). Qed.
Lemma lem6433981 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term465 A K ltle k i dom f neut.
Proof. exact (EQ_MP (@lem6404866 A K ltle k i dom f neut) (@lem6433980 A K ltle k i dom f neut)). Qed.
Lemma lem6433983 (p : Prop) : p = (term50 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem6433984 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term473 A K k i dom f neut) = (term1465 A K k i dom f neut).
Proof. exact (@lem6433983 (term473 A K k i dom f neut)). Qed.
Lemma lem6433985 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1465 A K k i dom f neut) = (term473 A K k i dom f neut).
Proof. exact (SYM (@lem6433984 A K k i dom f neut)). Qed.
Lemma lem6433986 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term1466 A K k i dom f neut) : term1466 A K k i dom f neut.
Proof. exact (h1). Qed.
Lemma lem6434009 {K : Type'} (P : K -> Prop) : term476 K P.
Proof. exact (@lem19732 K P). Qed.
Lemma lem6434010 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : term1467 A K k dom f neut.
Proof. exact (@lem6434009 K (term466 A K k dom f neut)). Qed.
Lemma lem6434011 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1468 A K k dom f neut) = (term1469 A K k dom f neut).
Proof. exact (eq_refl (term1468 A K k dom f neut)). Qed.
Lemma lem6434012 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1323 A K k dom f neut x) = (term381 A K k dom f x neut).
Proof. exact (eq_refl (term1323 A K k dom f neut x)). Qed.
Lemma lem6434013 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6434014 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1470 A K k dom f neut x) = (term1471 A K k dom f x neut).
Proof. exact (MK_COMB (@lem6434013) (@lem6434012 A K k dom f x neut)). Qed.
Lemma lem6434015 {A K : Type'} (x : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1472 A K x k dom f neut) = (term1473 A K x k dom f neut).
Proof. exact (MK_COMB (@lem6434014 A K k dom f x neut) (@lem6434011 A K k dom f neut)). Qed.
Lemma lem6434016 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1474 A K k dom f neut) = (term1475 A K k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6434015 A K x k dom f neut)). Qed.
Lemma lem6434017 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6434018 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1467 A K k dom f neut) = (term1476 A K k dom f neut).
Proof. exact (MK_COMB (@lem6434017 K) (@lem6434016 A K k dom f neut)). Qed.
Lemma lem6434019 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : term1476 A K k dom f neut.
Proof. exact (EQ_MP (@lem6434018 A K k dom f neut) (@lem6434010 A K k dom f neut)). Qed.
Lemma lem6434020 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : term1477 A K k dom f.
Proof. exact (fun neut : A => @lem6434019 A K k dom f neut). Qed.
Lemma lem6434021 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) : term1478 A K k dom.
Proof. exact (fun f : K -> A => @lem6434020 A K k dom f). Qed.
Lemma lem6434022 {A K : Type'} (k : K -> Prop) : term1479 A K k.
Proof. exact (fun dom : A -> Prop => @lem6434021 A K k dom). Qed.
Lemma lem6434023 {A K : Type'} : term1480 A K.
Proof. exact (fun k : K -> Prop => @lem6434022 A K k). Qed.
Lemma lem6434024 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term1481 A K k i dom f neut) : term1481 A K k i dom f neut.
Proof. exact (h1). Qed.
Lemma lem6434025 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term1481 A K k i dom f neut) : term1465 A K k i dom f neut.
Proof. exact (@lem6434024 A K k i dom f neut h1 (@lem6434023 A K)). Qed.
Lemma lem6434026 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term1482 A K k i dom f neut.
Proof. exact (fun h0 : term1481 A K k i dom f neut => @lem6434025 A K k i dom f neut h0). Qed.
Lemma lem6434027 {A K : Type'} (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : _82351 = (term1483 A K).
Proof. exact (h1). Qed.
Lemma lem6434028 {K : Type'} (k : K -> Prop) : k = k.
Proof. exact (eq_refl k). Qed.
Lemma lem6434029 {A K : Type'} (k : K -> Prop) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (_82351 k) = (term1484 A K k).
Proof. exact (MK_COMB (@lem6434027 A K _82351 h1) (@lem6434028 K k)). Qed.
Lemma lem6434030 {A K : Type'} (k : K -> Prop) : (term1484 A K k) = (term1485 A K k).
Proof. exact (eq_refl (term1484 A K k)). Qed.
Lemma lem6434031 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) : (term1486 A K _82351 k) = (term1486 A K _82351 k).
Proof. exact (eq_refl (term1486 A K _82351 k)). Qed.
Lemma lem6434032 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) : ((_82351 k) = (term1484 A K k)) = ((_82351 k) = (term1485 A K k)).
Proof. exact (MK_COMB (@lem6434031 A K _82351 k) (@lem6434030 A K k)). Qed.
Lemma lem6434033 {A K : Type'} (k : K -> Prop) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (_82351 k) = (term1485 A K k).
Proof. exact (EQ_MP (@lem6434032 A K _82351 k) (@lem6434029 A K k _82351 h1)). Qed.
Lemma lem6434034 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6434035 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (_82351 k dom) = (term1487 A K k dom).
Proof. exact (MK_COMB (@lem6434033 A K k _82351 h1) (@lem6434034 A dom)). Qed.
Lemma lem6434036 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) : (term1487 A K k dom) = (term1488 A K k dom).
Proof. exact (eq_refl (term1487 A K k dom)). Qed.
Lemma lem6434037 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) : (term1489 A K _82351 k dom) = (term1489 A K _82351 k dom).
Proof. exact (eq_refl (term1489 A K _82351 k dom)). Qed.
Lemma lem6434038 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) : ((_82351 k dom) = (term1487 A K k dom)) = ((_82351 k dom) = (term1488 A K k dom)).
Proof. exact (MK_COMB (@lem6434037 A K _82351 k dom) (@lem6434036 A K k dom)). Qed.
Lemma lem6434039 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (_82351 k dom) = (term1488 A K k dom).
Proof. exact (EQ_MP (@lem6434038 A K _82351 k dom) (@lem6434035 A K k dom _82351 h1)). Qed.
Lemma lem6434040 {A K : Type'} (f : K -> A) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem6434041 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (_82351 k dom f) = (term1490 A K k dom f).
Proof. exact (MK_COMB (@lem6434039 A K k dom _82351 h1) (@lem6434040 A K f)). Qed.
Lemma lem6434042 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1490 A K k dom f) = (term1491 A K k dom f).
Proof. exact (eq_refl (term1490 A K k dom f)). Qed.
Lemma lem6434043 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1492 A K _82351 k dom f) = (term1492 A K _82351 k dom f).
Proof. exact (eq_refl (term1492 A K _82351 k dom f)). Qed.
Lemma lem6434044 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : ((_82351 k dom f) = (term1490 A K k dom f)) = ((_82351 k dom f) = (term1491 A K k dom f)).
Proof. exact (MK_COMB (@lem6434043 A K _82351 k dom f) (@lem6434042 A K k dom f)). Qed.
Lemma lem6434045 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (_82351 k dom f) = (term1491 A K k dom f).
Proof. exact (EQ_MP (@lem6434044 A K _82351 k dom f) (@lem6434041 A K k dom f _82351 h1)). Qed.
Lemma lem6434046 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6434047 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (_82351 k dom f neut) = (term1493 A K k dom f neut).
Proof. exact (MK_COMB (@lem6434045 A K k dom f _82351 h1) (@lem6434046 A neut)). Qed.
Lemma lem6434048 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1493 A K k dom f neut) = (term467 A K k dom f neut).
Proof. exact (eq_refl (term1493 A K k dom f neut)). Qed.
Lemma lem6434049 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1494 A K _82351 k dom f neut) = (term1494 A K _82351 k dom f neut).
Proof. exact (eq_refl (term1494 A K _82351 k dom f neut)). Qed.
Lemma lem6434050 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_82351 k dom f neut) = (term1493 A K k dom f neut)) = ((_82351 k dom f neut) = (term467 A K k dom f neut)).
Proof. exact (MK_COMB (@lem6434049 A K _82351 k dom f neut) (@lem6434048 A K k dom f neut)). Qed.
Lemma lem6434051 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (_82351 k dom f neut) = (term467 A K k dom f neut).
Proof. exact (EQ_MP (@lem6434050 A K _82351 k dom f neut) (@lem6434047 A K k dom f neut _82351 h1)). Qed.
Lemma lem6434052 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term467 A K k dom f neut) = (_82351 k dom f neut).
Proof. exact (SYM (@lem6434051 A K k dom f neut _82351 h1)). Qed.
Lemma lem6434053 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : term1495 A K _82351 k dom f.
Proof. exact (fun neut : A => @lem6434052 A K k dom f neut _82351 h1). Qed.
Lemma lem6434054 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : term1496 A K _82351 k dom.
Proof. exact (fun f : K -> A => @lem6434053 A K k dom f _82351 h1). Qed.
Lemma lem6434055 {A K : Type'} (k : K -> Prop) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : term1497 A K _82351 k.
Proof. exact (fun dom : A -> Prop => @lem6434054 A K k dom _82351 h1). Qed.
Lemma lem6434056 {A K : Type'} (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : term1498 A K _82351.
Proof. exact (fun k : K -> Prop => @lem6434055 A K k _82351 h1). Qed.
Lemma lem6434057 {A K : Type'} (k : K -> Prop) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : term1499 A K _82351 k.
Proof. exact (@lem6434056 A K _82351 h1 k). Qed.
Lemma lem6434058 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) : (term1499 A K _82351 k) = (term1497 A K _82351 k).
Proof. exact (eq_refl (term1499 A K _82351 k)). Qed.
Lemma lem6434059 {A K : Type'} (k : K -> Prop) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : term1497 A K _82351 k.
Proof. exact (EQ_MP (@lem6434058 A K _82351 k) (@lem6434057 A K k _82351 h1)). Qed.
Lemma lem6434060 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : term1500 A K _82351 k dom.
Proof. exact (@lem6434059 A K k _82351 h1 dom). Qed.
Lemma lem6434061 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) : (term1500 A K _82351 k dom) = (term1496 A K _82351 k dom).
Proof. exact (eq_refl (term1500 A K _82351 k dom)). Qed.
Lemma lem6434062 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : term1496 A K _82351 k dom.
Proof. exact (EQ_MP (@lem6434061 A K _82351 k dom) (@lem6434060 A K k dom _82351 h1)). Qed.
Lemma lem6434063 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : term1501 A K _82351 k dom f.
Proof. exact (@lem6434062 A K k dom _82351 h1 f). Qed.
Lemma lem6434064 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1501 A K _82351 k dom f) = (term1495 A K _82351 k dom f).
Proof. exact (eq_refl (term1501 A K _82351 k dom f)). Qed.
Lemma lem6434065 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : term1495 A K _82351 k dom f.
Proof. exact (EQ_MP (@lem6434064 A K _82351 k dom f) (@lem6434063 A K k dom f _82351 h1)). Qed.
Lemma lem6434066 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : term1502 A K _82351 k dom f neut.
Proof. exact (@lem6434065 A K k dom f _82351 h1 neut). Qed.
Lemma lem6434067 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1502 A K _82351 k dom f neut) = ((term467 A K k dom f neut) = (_82351 k dom f neut)).
Proof. exact (eq_refl (term1502 A K _82351 k dom f neut)). Qed.
Lemma lem6434070 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term467 A K k dom f neut) = (_82351 k dom f neut).
Proof. exact (EQ_MP (@lem6434067 A K _82351 k dom f neut) (@lem6434066 A K k dom f neut _82351 h1)). Qed.
Lemma lem6434071 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term467 A K k dom f neut) = (_82351 k dom f neut).
Proof. exact (@lem6434070 A K k dom f neut _82351 h1). Qed.
Lemma lem6434072 {K : Type'} (k : K -> Prop) : k = k.
Proof. exact (eq_refl k). Qed.
Lemma lem6434073 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1503 A K k dom f neut) = (term1504 A K _82351 k dom f neut).
Proof. exact (MK_COMB (@lem6434072 K k) (@lem6434071 A K k dom f neut _82351 h1)). Qed.
Lemma lem6434074 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6434075 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1505 A K k dom f neut) = (term1506 A K _82351 k dom f neut).
Proof. exact (MK_COMB (@lem6434074) (@lem6434073 A K k dom f neut _82351 h1)). Qed.
Lemma lem6434077 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term467 A K k dom f neut) = (_82351 k dom f neut).
Proof. exact (EQ_MP (@lem6434067 A K _82351 k dom f neut) (@lem6434066 A K k dom f neut _82351 h1)). Qed.
Lemma lem6434078 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term467 A K k dom f neut) = (_82351 k dom f neut).
Proof. exact (@lem6434077 A K k dom f neut _82351 h1). Qed.
Lemma lem6434079 {A K : Type'} (f : K -> A) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem6434080 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1507 A K k dom f neut) = (term1508 A K _82351 k dom f neut).
Proof. exact (MK_COMB (@lem6434079 A K f) (@lem6434078 A K k dom f neut _82351 h1)). Qed.
Lemma lem6434081 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6434082 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1509 A K k dom f neut) = (term1510 A K _82351 k dom f neut).
Proof. exact (MK_COMB (@lem6434081 A dom) (@lem6434080 A K k dom f neut _82351 h1)). Qed.
Lemma lem6434083 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6434084 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1511 A K k dom f neut) = (term1512 A K _82351 k dom f neut).
Proof. exact (MK_COMB (@lem6434083) (@lem6434082 A K k dom f neut _82351 h1)). Qed.
Lemma lem6434086 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term467 A K k dom f neut) = (_82351 k dom f neut).
Proof. exact (EQ_MP (@lem6434067 A K _82351 k dom f neut) (@lem6434066 A K k dom f neut _82351 h1)). Qed.
Lemma lem6434087 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term467 A K k dom f neut) = (_82351 k dom f neut).
Proof. exact (@lem6434086 A K k dom f neut _82351 h1). Qed.
Lemma lem6434088 {A K : Type'} (f : K -> A) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem6434089 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1507 A K k dom f neut) = (term1508 A K _82351 k dom f neut).
Proof. exact (MK_COMB (@lem6434088 A K f) (@lem6434087 A K k dom f neut _82351 h1)). Qed.
Lemma lem6434090 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem6434091 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1513 A K k dom f neut) = (term1514 A K _82351 k dom f neut).
Proof. exact (MK_COMB (@lem6434090 A) (@lem6434089 A K k dom f neut _82351 h1)). Qed.
Lemma lem6434092 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6434093 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : ((term1507 A K k dom f neut) = neut) = ((term1508 A K _82351 k dom f neut) = neut).
Proof. exact (MK_COMB (@lem6434091 A K k dom f neut _82351 h1) (@lem6434092 A neut)). Qed.
Lemma lem6434094 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6434095 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1515 A K k dom f neut) = (term1516 A K _82351 k dom f neut).
Proof. exact (MK_COMB (@lem6434094) (@lem6434093 A K k dom f neut _82351 h1)). Qed.
Lemma lem6434096 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1517 A K k dom f neut) = (term1518 A K _82351 k dom f neut).
Proof. exact (MK_COMB (@lem6434084 A K k dom f neut _82351 h1) (@lem6434095 A K k dom f neut _82351 h1)). Qed.
Lemma lem6434097 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1469 A K k dom f neut) = (term1519 A K _82351 k dom f neut).
Proof. exact (MK_COMB (@lem6434075 A K k dom f neut _82351 h1) (@lem6434096 A K k dom f neut _82351 h1)). Qed.
Lemma lem6434098 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1471 A K k dom f x neut) = (term1471 A K k dom f x neut).
Proof. exact (eq_refl (term1471 A K k dom f x neut)). Qed.
Lemma lem6434099 {A K : Type'} (x : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1473 A K x k dom f neut) = (term1520 A K x _82351 k dom f neut).
Proof. exact (MK_COMB (@lem6434098 A K k dom f x neut) (@lem6434097 A K k dom f neut _82351 h1)). Qed.
Lemma lem6434100 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1475 A K k dom f neut) = (term1521 A K _82351 k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6434099 A K x k dom f neut _82351 h1)). Qed.
Lemma lem6434101 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6434102 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1476 A K k dom f neut) = (term1522 A K _82351 k dom f neut).
Proof. exact (MK_COMB (@lem6434101 K) (@lem6434100 A K k dom f neut _82351 h1)). Qed.
Lemma lem6434103 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1523 A K k dom f) = (term1524 A K _82351 k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6434102 A K k dom f neut _82351 h1)). Qed.
Lemma lem6434104 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6434105 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1477 A K k dom f) = (term1525 A K _82351 k dom f).
Proof. exact (MK_COMB (@lem6434104 A) (@lem6434103 A K k dom f _82351 h1)). Qed.
Lemma lem6434106 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1526 A K k dom) = (term1527 A K _82351 k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6434105 A K k dom f _82351 h1)). Qed.
Lemma lem6434107 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6434108 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1478 A K k dom) = (term1528 A K _82351 k dom).
Proof. exact (MK_COMB (@lem6434107 A K) (@lem6434106 A K k dom _82351 h1)). Qed.
Lemma lem6434109 {A K : Type'} (k : K -> Prop) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1529 A K k) = (term1530 A K _82351 k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6434108 A K k dom _82351 h1)). Qed.
Lemma lem6434110 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6434111 {A K : Type'} (k : K -> Prop) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1479 A K k) = (term1531 A K _82351 k).
Proof. exact (MK_COMB (@lem6434110 A) (@lem6434109 A K k _82351 h1)). Qed.
Lemma lem6434112 {A K : Type'} (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1532 A K) = (term1533 A K _82351).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6434111 A K k _82351 h1)). Qed.
Lemma lem6434113 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6434114 {A K : Type'} (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1480 A K) = (term1534 A K _82351).
Proof. exact (MK_COMB (@lem6434113 K) (@lem6434112 A K _82351 h1)). Qed.
Lemma lem6434115 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6434116 {A K : Type'} (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1535 A K) = (term1536 A K _82351).
Proof. exact (MK_COMB (@lem6434115) (@lem6434114 A K _82351 h1)). Qed.
Lemma lem6434118 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term467 A K k dom f neut) = (_82351 k dom f neut).
Proof. exact (EQ_MP (@lem6434067 A K _82351 k dom f neut) (@lem6434066 A K k dom f neut _82351 h1)). Qed.
Lemma lem6434119 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term467 A K k dom f neut) = (_82351 k dom f neut).
Proof. exact (@lem6434118 A K k dom f neut _82351 h1). Qed.
Lemma lem6434120 {K : Type'} : (@eq K) = (@eq K).
Proof. exact (eq_refl (@eq K)). Qed.
Lemma lem6434121 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term469 A K k dom f neut) = (term1494 A K _82351 k dom f neut).
Proof. exact (MK_COMB (@lem6434120 K) (@lem6434119 A K k dom f neut _82351 h1)). Qed.
Lemma lem6434122 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6434123 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : ((term467 A K k dom f neut) = i) = ((_82351 k dom f neut) = i).
Proof. exact (MK_COMB (@lem6434121 A K k dom f neut _82351 h1) (@lem6434122 K i)). Qed.
Lemma lem6434124 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6434125 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term470 A K k dom f neut i) = (term1537 A K _82351 k dom f neut i).
Proof. exact (MK_COMB (@lem6434124) (@lem6434123 A K k dom f neut i _82351 h1)). Qed.
Lemma lem6434126 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term408 A K k dom f neut) = (term408 A K k dom f neut).
Proof. exact (eq_refl (term408 A K k dom f neut)). Qed.
Lemma lem6434127 {A K : Type'} (i : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term471 A K i k dom f neut) = (term1538 A K _82351 i k dom f neut).
Proof. exact (MK_COMB (@lem6434125 A K k dom f neut i _82351 h1) (@lem6434126 A K k dom f neut)). Qed.
Lemma lem6434128 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6434129 {A K : Type'} (i : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term472 A K i k dom f neut) = (term1539 A K _82351 i k dom f neut).
Proof. exact (MK_COMB (@lem6434128) (@lem6434127 A K i k dom f neut _82351 h1)). Qed.
Lemma lem6434130 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term464 A K k i dom f neut) = (term464 A K k i dom f neut).
Proof. exact (eq_refl (term464 A K k i dom f neut)). Qed.
Lemma lem6434131 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term473 A K k i dom f neut) = (term1540 A K _82351 k i dom f neut).
Proof. exact (MK_COMB (@lem6434129 A K i k dom f neut _82351 h1) (@lem6434130 A K k i dom f neut)). Qed.
Lemma lem6434132 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6434133 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1466 A K k i dom f neut) = (term1541 A K _82351 k i dom f neut).
Proof. exact (MK_COMB (@lem6434132) (@lem6434131 A K k i dom f neut _82351 h1)). Qed.
Lemma lem6434134 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6434135 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1542 A K k i dom f neut) = (term1543 A K _82351 k i dom f neut).
Proof. exact (MK_COMB (@lem6434134) (@lem6434133 A K k i dom f neut _82351 h1)). Qed.
Lemma lem6434136 : False = False.
Proof. exact (eq_refl False). Qed.
Lemma lem6434137 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1465 A K k i dom f neut) = (term1544 A K _82351 k i dom f neut).
Proof. exact (MK_COMB (@lem6434135 A K k i dom f neut _82351 h1) (@lem6434136)). Qed.
Lemma lem6434138 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1481 A K k i dom f neut) = (term1545 A K _82351 k i dom f neut).
Proof. exact (MK_COMB (@lem6434116 A K _82351 h1) (@lem6434137 A K k i dom f neut _82351 h1)). Qed.
Lemma lem6434139 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term1546 A K k i dom f neut) : term1546 A K k i dom f neut.
Proof. exact (h1). Qed.
Lemma lem6434140 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term1546 A K k i dom f neut) : term1547 A K k i dom f neut _82351.
Proof. exact (@lem6434139 A K k i dom f neut h1 _82351). Qed.
Lemma lem6434141 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1547 A K k i dom f neut _82351) = (term1545 A K _82351 k i dom f neut).
Proof. exact (eq_refl (term1547 A K k i dom f neut _82351)). Qed.
Lemma lem6434142 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term1546 A K k i dom f neut) : term1545 A K _82351 k i dom f neut.
Proof. exact (EQ_MP (@lem6434141 A K _82351 k i dom f neut) (@lem6434140 A K _82351 k i dom f neut h1)). Qed.
Lemma lem6434143 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : (term1545 A K _82351 k i dom f neut) = (term1481 A K k i dom f neut).
Proof. exact (SYM (@lem6434138 A K k i dom f neut _82351 h1)). Qed.
Lemma lem6434144 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : term1546 A K k i dom f neut) (h2 : _82351 = (term1483 A K)) : term1481 A K k i dom f neut.
Proof. exact (EQ_MP (@lem6434143 A K k i dom f neut _82351 h2) (@lem6434142 A K _82351 k i dom f neut h1)). Qed.
Lemma lem6434145 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : term1548 A K k i dom f neut.
Proof. exact (fun h0 : term1546 A K k i dom f neut => @lem6434144 A K k i dom f neut _82351 h0 h1). Qed.
Lemma lem6434146 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term1549 A K k i dom f neut.
Proof. exact (@lem51 (term1481 A K k i dom f neut) (term1546 A K k i dom f neut) (term1465 A K k i dom f neut)). Qed.
Lemma lem6434147 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : term1550 A K k i dom f neut.
Proof. exact (@lem6434146 A K k i dom f neut (@lem6434145 A K k i dom f neut _82351 h1)). Qed.
Lemma lem6434148 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_82351 : type836 A K) (h1 : _82351 = (term1483 A K)) : term1551 A K k i dom f neut.
Proof. exact (@lem6434147 A K k i dom f neut _82351 h1 (@lem6434026 A K k i dom f neut)). Qed.
Lemma lem6434149 {A K : Type'} : (term1483 A K) = (term1483 A K).
Proof. exact (eq_refl (term1483 A K)). Qed.
Lemma lem6434150 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term1552 A K _82351 k i dom f neut.
Proof. exact (fun h0 : _82351 = (term1483 A K) => @lem6434148 A K k i dom f neut _82351 h0). Qed.
Lemma lem6434151 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term1553 A K k i dom f neut.
Proof. exact (@lem6434150 A K (term1483 A K) k i dom f neut). Qed.
Lemma lem6434152 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term1551 A K k i dom f neut.
Proof. exact (@lem6434151 A K k i dom f neut (@lem6434149 A K)). Qed.
Lemma lem6434153 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term1546 A K k i dom f neut) : term1546 A K k i dom f neut.
Proof. exact (h1). Qed.
Lemma lem6434154 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term1554 A K k i dom f neut.
Proof. exact (fun h0 : term1546 A K k i dom f neut => @lem6434153 A K k i dom f neut h0). Qed.
Lemma lem6434155 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term1555 A K k i dom f neut.
Proof. exact (@lem51 (term1546 A K k i dom f neut) (term1546 A K k i dom f neut) (term1465 A K k i dom f neut)). Qed.
Lemma lem6434156 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term1556 A K k i dom f neut.
Proof. exact (@lem6434155 A K k i dom f neut (@lem6434154 A K k i dom f neut)). Qed.
Lemma lem6434157 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term1551 A K k i dom f neut.
Proof. exact (@lem6434156 A K k i dom f neut (@lem6434152 A K k i dom f neut)). Qed.
Lemma lem6434158 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term1551 A K k i dom f neut) : term1551 A K k i dom f neut.
Proof. exact (h1). Qed.
Lemma lem6434159 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term1546 A K k i dom f neut) : term1546 A K k i dom f neut.
Proof. exact (h1). Qed.
Lemma lem6434160 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term1546 A K k i dom f neut) (h2 : term1551 A K k i dom f neut) : term1465 A K k i dom f neut.
Proof. exact (@lem6434158 A K k i dom f neut h2 (@lem6434159 A K k i dom f neut h1)). Qed.
Lemma lem6434161 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term1546 A K k i dom f neut) : term1557 A K k i dom f neut.
Proof. exact (fun h0 : term1551 A K k i dom f neut => @lem6434160 A K k i dom f neut h1 h0). Qed.
Lemma lem6434162 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term1551 A K k i dom f neut) : term1551 A K k i dom f neut.
Proof. exact (h1). Qed.
Lemma lem6434163 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term1546 A K k i dom f neut) (h2 : term1551 A K k i dom f neut) : term1465 A K k i dom f neut.
Proof. exact (@lem6434161 A K k i dom f neut h1 (@lem6434162 A K k i dom f neut h2)). Qed.
Lemma lem6434164 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term1551 A K k i dom f neut) : term1551 A K k i dom f neut.
Proof. exact (fun h0 : term1546 A K k i dom f neut => @lem6434163 A K k i dom f neut h0 h1). Qed.
Lemma lem6434165 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term1556 A K k i dom f neut.
Proof. exact (fun h0 : term1551 A K k i dom f neut => @lem6434164 A K k i dom f neut h0). Qed.
Lemma lem6434168 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term1551 A K k i dom f neut.
Proof. exact (@lem6434165 A K k i dom f neut (@lem6434157 A K k i dom f neut)). Qed.
Lemma lem6434169 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term1551 A K k i dom f neut.
Proof. exact (@lem6434168 A K k i dom f neut). Qed.
Lemma lem6434227 (t : Prop) : (t -> False) = (~ t).
Proof. exact (proj2 (@lem16474 t)). Qed.
Lemma lem6434228 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1544 A K _82351 k i dom f neut) = (term1558 A K _82351 k i dom f neut).
Proof. exact (@lem6434227 (term1541 A K _82351 k i dom f neut)). Qed.
Lemma lem6434230 (t : Prop) : (term57 t) = t.
Proof. exact (EQ_MP (@lem16507 t) (@lem16506 t)). Qed.
Lemma lem6434231 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1558 A K _82351 k i dom f neut) = (term1540 A K _82351 k i dom f neut).
Proof. exact (@lem6434230 (term1540 A K _82351 k i dom f neut)). Qed.
Lemma lem6434234 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1544 A K _82351 k i dom f neut) = (term1540 A K _82351 k i dom f neut).
Proof. exact (TRANS (@lem6434228 A K _82351 k i dom f neut) (@lem6434231 A K _82351 k i dom f neut)). Qed.
Lemma lem6434275 {A K : Type'} (_82351 : type836 A K) : (term1536 A K _82351) = (term1536 A K _82351).
Proof. exact (eq_refl (term1536 A K _82351)). Qed.
Lemma lem6434276 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1545 A K _82351 k i dom f neut) = (term1559 A K _82351 k i dom f neut).
Proof. exact (MK_COMB (@lem6434275 A K _82351) (@lem6434234 A K _82351 k i dom f neut)). Qed.
Lemma lem6434279 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1560 A K k i dom f neut) = (term1561 A K k i dom f neut).
Proof. exact (fun_ext (fun _82351 : type836 A K => @lem6434276 A K _82351 k i dom f neut)). Qed.
Lemma lem6434280 {A K : Type'} : (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K)) = (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K)).
Proof. exact (eq_refl (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K))). Qed.
Lemma lem6434281 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1546 A K k i dom f neut) = (term1562 A K k i dom f neut).
Proof. exact (MK_COMB (@lem6434280 A K) (@lem6434279 A K k i dom f neut)). Qed.
Lemma lem6434286 {A K : Type'} (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1563 A K i dom f neut) = (term1564 A K i dom f neut).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6434281 A K k i dom f neut)). Qed.
Lemma lem6434287 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6434288 {A K : Type'} (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1565 A K i dom f neut) = (term1566 A K i dom f neut).
Proof. exact (MK_COMB (@lem6434287 K) (@lem6434286 A K i dom f neut)). Qed.
Lemma lem6434293 {A K : Type'} (dom : A -> Prop) (f : K -> A) (neut : A) : (term1567 A K dom f neut) = (term1568 A K dom f neut).
Proof. exact (fun_ext (fun i : K => @lem6434288 A K i dom f neut)). Qed.
Lemma lem6434294 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6434295 {A K : Type'} (dom : A -> Prop) (f : K -> A) (neut : A) : (term1569 A K dom f neut) = (term1570 A K dom f neut).
Proof. exact (MK_COMB (@lem6434294 K) (@lem6434293 A K dom f neut)). Qed.
Lemma lem6434300 {A K : Type'} (f : K -> A) (neut : A) : (term1571 A K f neut) = (term1572 A K f neut).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6434295 A K dom f neut)). Qed.
Lemma lem6434301 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6434302 {A K : Type'} (f : K -> A) (neut : A) : (term1573 A K f neut) = (term1574 A K f neut).
Proof. exact (MK_COMB (@lem6434301 A) (@lem6434300 A K f neut)). Qed.
Lemma lem6434307 {A K : Type'} (neut : A) : (term1575 A K neut) = (term1576 A K neut).
Proof. exact (fun_ext (fun f : K -> A => @lem6434302 A K f neut)). Qed.
Lemma lem6434308 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6434309 {A K : Type'} (neut : A) : (term1577 A K neut) = (term1578 A K neut).
Proof. exact (MK_COMB (@lem6434308 A K) (@lem6434307 A K neut)). Qed.
Lemma lem6434314 {A K : Type'} : (term1579 A K) = (term1580 A K).
Proof. exact (fun_ext (fun neut : A => @lem6434309 A K neut)). Qed.
Lemma lem6434315 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6434322 {A K : Type'} : (term1581 A K) = (term1582 A K).
Proof. exact (MK_COMB (@lem6434315 A) (@lem6434314 A K)). Qed.
Lemma lem6434323 {A K : Type'} (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : _82352 = (term625 A K).
Proof. exact (h1). Qed.
Lemma lem6434324 {K : Type'} (k : K -> Prop) : k = k.
Proof. exact (eq_refl k). Qed.
Lemma lem6434325 {A K : Type'} (k : K -> Prop) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (_82352 k) = (term626 A K k).
Proof. exact (MK_COMB (@lem6434323 A K _82352 h1) (@lem6434324 K k)). Qed.
Lemma lem6434326 {A K : Type'} (k : K -> Prop) : (term626 A K k) = (term627 A K k).
Proof. exact (eq_refl (term626 A K k)). Qed.
Lemma lem6434327 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term628 A K _82352 k) = (term628 A K _82352 k).
Proof. exact (eq_refl (term628 A K _82352 k)). Qed.
Lemma lem6434328 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : ((_82352 k) = (term626 A K k)) = ((_82352 k) = (term627 A K k)).
Proof. exact (MK_COMB (@lem6434327 A K _82352 k) (@lem6434326 A K k)). Qed.
Lemma lem6434329 {A K : Type'} (k : K -> Prop) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (_82352 k) = (term627 A K k).
Proof. exact (EQ_MP (@lem6434328 A K _82352 k) (@lem6434325 A K k _82352 h1)). Qed.
Lemma lem6434330 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6434331 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (_82352 k dom) = (term629 A K k dom).
Proof. exact (MK_COMB (@lem6434329 A K k _82352 h1) (@lem6434330 A dom)). Qed.
Lemma lem6434332 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) : (term629 A K k dom) = (term630 A K k dom).
Proof. exact (eq_refl (term629 A K k dom)). Qed.
Lemma lem6434333 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term631 A K _82352 k dom) = (term631 A K _82352 k dom).
Proof. exact (eq_refl (term631 A K _82352 k dom)). Qed.
Lemma lem6434334 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : ((_82352 k dom) = (term629 A K k dom)) = ((_82352 k dom) = (term630 A K k dom)).
Proof. exact (MK_COMB (@lem6434333 A K _82352 k dom) (@lem6434332 A K k dom)). Qed.
Lemma lem6434335 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (_82352 k dom) = (term630 A K k dom).
Proof. exact (EQ_MP (@lem6434334 A K _82352 k dom) (@lem6434331 A K k dom _82352 h1)). Qed.
Lemma lem6434336 {A K : Type'} (f : K -> A) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem6434337 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (_82352 k dom f) = (term632 A K k dom f).
Proof. exact (MK_COMB (@lem6434335 A K k dom _82352 h1) (@lem6434336 A K f)). Qed.
Lemma lem6434338 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term632 A K k dom f) = (term633 A K k dom f).
Proof. exact (eq_refl (term632 A K k dom f)). Qed.
Lemma lem6434339 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term634 A K _82352 k dom f) = (term634 A K _82352 k dom f).
Proof. exact (eq_refl (term634 A K _82352 k dom f)). Qed.
Lemma lem6434340 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : ((_82352 k dom f) = (term632 A K k dom f)) = ((_82352 k dom f) = (term633 A K k dom f)).
Proof. exact (MK_COMB (@lem6434339 A K _82352 k dom f) (@lem6434338 A K k dom f)). Qed.
Lemma lem6434341 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (_82352 k dom f) = (term633 A K k dom f).
Proof. exact (EQ_MP (@lem6434340 A K _82352 k dom f) (@lem6434337 A K k dom f _82352 h1)). Qed.
Lemma lem6434342 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6434343 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (_82352 k dom f neut) = (term635 A K k dom f neut).
Proof. exact (MK_COMB (@lem6434341 A K k dom f _82352 h1) (@lem6434342 A neut)). Qed.
Lemma lem6434344 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term635 A K k dom f neut) = (term398 A K k dom f neut).
Proof. exact (eq_refl (term635 A K k dom f neut)). Qed.
Lemma lem6434345 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term636 A K _82352 k dom f neut) = (term636 A K _82352 k dom f neut).
Proof. exact (eq_refl (term636 A K _82352 k dom f neut)). Qed.
Lemma lem6434346 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_82352 k dom f neut) = (term635 A K k dom f neut)) = ((_82352 k dom f neut) = (term398 A K k dom f neut)).
Proof. exact (MK_COMB (@lem6434345 A K _82352 k dom f neut) (@lem6434344 A K k dom f neut)). Qed.
Lemma lem6434347 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (_82352 k dom f neut) = (term398 A K k dom f neut).
Proof. exact (EQ_MP (@lem6434346 A K _82352 k dom f neut) (@lem6434343 A K k dom f neut _82352 h1)). Qed.
Lemma lem6434437 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : ((term438 A K k i dom f x neut) = (term461 A K k i dom f x neut)) = ((term438 A K k i dom f x neut) = (term461 A K k i dom f x neut)).
Proof. exact (eq_refl ((term438 A K k i dom f x neut) = (term461 A K k i dom f x neut))). Qed.
Lemma lem6434438 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term463 A K k i dom f neut) = (term463 A K k i dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6434437 A K k i dom f x neut)). Qed.
Lemma lem6434439 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6434440 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term464 A K k i dom f neut) = (term464 A K k i dom f neut).
Proof. exact (MK_COMB (@lem6434439 K) (@lem6434438 A K k i dom f neut)). Qed.
Lemma lem6434465 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term403 A K k dom f x neut) = (term403 A K k dom f x neut).
Proof. exact (eq_refl (term403 A K k dom f x neut)). Qed.
Lemma lem6434466 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term405 A K k dom f neut) = (term405 A K k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6434465 A K k dom f x neut)). Qed.
Lemma lem6434467 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6434468 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term406 A K k dom f neut) = (term406 A K k dom f neut).
Proof. exact (MK_COMB (@lem6434467 K) (@lem6434466 A K k dom f neut)). Qed.
Lemma lem6434469 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6434470 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term407 A K k dom f neut) = (term407 A K k dom f neut).
Proof. exact (MK_COMB (@lem6434469) (@lem6434468 A K k dom f neut)). Qed.
Lemma lem6434472 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (term398 A K k dom f neut) = (_82352 k dom f neut).
Proof. exact (SYM (@lem6434347 A K k dom f neut _82352 h1)). Qed.
Lemma lem6434473 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (term398 A K k dom f neut) = (_82352 k dom f neut).
Proof. exact (@lem6434472 A K k dom f neut _82352 h1). Qed.
Lemma lem6434474 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6434475 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (term399 A K k dom f neut) = (term637 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6434474 K) (@lem6434473 A K k dom f neut _82352 h1)). Qed.
Lemma lem6434476 {K : Type'} : (@FINITE K) = (@FINITE K).
Proof. exact (eq_refl (@FINITE K)). Qed.
Lemma lem6434477 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (term400 A K k dom f neut) = (term638 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6434476 K) (@lem6434475 A K k dom f neut _82352 h1)). Qed.
Lemma lem6434478 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6434479 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (term401 A K k dom f neut) = (term639 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6434478) (@lem6434477 A K k dom f neut _82352 h1)). Qed.
Lemma lem6434480 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (term408 A K k dom f neut) = (term640 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6434479 A K k dom f neut _82352 h1) (@lem6434470 A K k dom f neut)). Qed.
Lemma lem6434495 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term1537 A K _82351 k dom f neut i) = (term1537 A K _82351 k dom f neut i).
Proof. exact (eq_refl (term1537 A K _82351 k dom f neut i)). Qed.
Lemma lem6434496 {A K : Type'} (_82351 : type836 A K) (i : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (term1538 A K _82351 i k dom f neut) = (term1583 A K _82351 i _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6434495 A K _82351 k dom f neut i) (@lem6434480 A K k dom f neut _82352 h1)). Qed.
Lemma lem6434497 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6434498 {A K : Type'} (_82351 : type836 A K) (i : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (term1539 A K _82351 i k dom f neut) = (term1584 A K _82351 i _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6434497) (@lem6434496 A K _82351 i k dom f neut _82352 h1)). Qed.
Lemma lem6434499 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (term1540 A K _82351 k i dom f neut) = (term1585 A K _82351 _82352 k i dom f neut).
Proof. exact (MK_COMB (@lem6434498 A K _82351 i k dom f neut _82352 h1) (@lem6434440 A K k i dom f neut)). Qed.
Lemma lem6434572 {A K : Type'} (x : K) (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1520 A K x _82351 k dom f neut) = (term1520 A K x _82351 k dom f neut).
Proof. exact (eq_refl (term1520 A K x _82351 k dom f neut)). Qed.
Lemma lem6434573 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1521 A K _82351 k dom f neut) = (term1521 A K _82351 k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6434572 A K x _82351 k dom f neut)). Qed.
Lemma lem6434574 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6434575 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1522 A K _82351 k dom f neut) = (term1522 A K _82351 k dom f neut).
Proof. exact (MK_COMB (@lem6434574 K) (@lem6434573 A K _82351 k dom f neut)). Qed.
Lemma lem6434576 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1524 A K _82351 k dom f) = (term1524 A K _82351 k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6434575 A K _82351 k dom f neut)). Qed.
Lemma lem6434577 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6434578 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1525 A K _82351 k dom f) = (term1525 A K _82351 k dom f).
Proof. exact (MK_COMB (@lem6434577 A) (@lem6434576 A K _82351 k dom f)). Qed.
Lemma lem6434579 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) : (term1527 A K _82351 k dom) = (term1527 A K _82351 k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6434578 A K _82351 k dom f)). Qed.
Lemma lem6434580 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6434581 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) : (term1528 A K _82351 k dom) = (term1528 A K _82351 k dom).
Proof. exact (MK_COMB (@lem6434580 A K) (@lem6434579 A K _82351 k dom)). Qed.
Lemma lem6434582 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) : (term1530 A K _82351 k) = (term1530 A K _82351 k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6434581 A K _82351 k dom)). Qed.
Lemma lem6434583 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6434584 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) : (term1531 A K _82351 k) = (term1531 A K _82351 k).
Proof. exact (MK_COMB (@lem6434583 A) (@lem6434582 A K _82351 k)). Qed.
Lemma lem6434585 {A K : Type'} (_82351 : type836 A K) : (term1533 A K _82351) = (term1533 A K _82351).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6434584 A K _82351 k)). Qed.
Lemma lem6434586 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6434587 {A K : Type'} (_82351 : type836 A K) : (term1534 A K _82351) = (term1534 A K _82351).
Proof. exact (MK_COMB (@lem6434586 K) (@lem6434585 A K _82351)). Qed.
Lemma lem6434588 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6434589 {A K : Type'} (_82351 : type836 A K) : (term1536 A K _82351) = (term1536 A K _82351).
Proof. exact (MK_COMB (@lem6434588) (@lem6434587 A K _82351)). Qed.
Lemma lem6434590 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (term1559 A K _82351 k i dom f neut) = (term1586 A K _82351 _82352 k i dom f neut).
Proof. exact (MK_COMB (@lem6434589 A K _82351) (@lem6434499 A K _82351 k i dom f neut _82352 h1)). Qed.
Lemma lem6434591 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (term1561 A K k i dom f neut) = (term1587 A K _82352 k i dom f neut).
Proof. exact (fun_ext (fun _82351 : type836 A K => @lem6434590 A K _82351 k i dom f neut _82352 h1)). Qed.
Lemma lem6434592 {A K : Type'} : (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K)) = (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K)).
Proof. exact (eq_refl (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K))). Qed.
Lemma lem6434593 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (term1562 A K k i dom f neut) = (term1588 A K _82352 k i dom f neut).
Proof. exact (MK_COMB (@lem6434592 A K) (@lem6434591 A K k i dom f neut _82352 h1)). Qed.
Lemma lem6434594 {A K : Type'} (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (term1564 A K i dom f neut) = (term1589 A K _82352 i dom f neut).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6434593 A K k i dom f neut _82352 h1)). Qed.
Lemma lem6434595 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6434596 {A K : Type'} (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (term1566 A K i dom f neut) = (term1590 A K _82352 i dom f neut).
Proof. exact (MK_COMB (@lem6434595 K) (@lem6434594 A K i dom f neut _82352 h1)). Qed.
Lemma lem6434597 {A K : Type'} (dom : A -> Prop) (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (term1568 A K dom f neut) = (term1591 A K _82352 dom f neut).
Proof. exact (fun_ext (fun i : K => @lem6434596 A K i dom f neut _82352 h1)). Qed.
Lemma lem6434598 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6434599 {A K : Type'} (dom : A -> Prop) (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (term1570 A K dom f neut) = (term1592 A K _82352 dom f neut).
Proof. exact (MK_COMB (@lem6434598 K) (@lem6434597 A K dom f neut _82352 h1)). Qed.
Lemma lem6434600 {A K : Type'} (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (term1572 A K f neut) = (term1593 A K _82352 f neut).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6434599 A K dom f neut _82352 h1)). Qed.
Lemma lem6434601 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6434602 {A K : Type'} (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (term1574 A K f neut) = (term1594 A K _82352 f neut).
Proof. exact (MK_COMB (@lem6434601 A) (@lem6434600 A K f neut _82352 h1)). Qed.
Lemma lem6434603 {A K : Type'} (neut : A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (term1576 A K neut) = (term1595 A K _82352 neut).
Proof. exact (fun_ext (fun f : K -> A => @lem6434602 A K f neut _82352 h1)). Qed.
Lemma lem6434604 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6434605 {A K : Type'} (neut : A) (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (term1578 A K neut) = (term1596 A K _82352 neut).
Proof. exact (MK_COMB (@lem6434604 A K) (@lem6434603 A K neut _82352 h1)). Qed.
Lemma lem6434606 {A K : Type'} (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (term1580 A K) = (term1597 A K _82352).
Proof. exact (fun_ext (fun neut : A => @lem6434605 A K neut _82352 h1)). Qed.
Lemma lem6434607 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6434608 {A K : Type'} (_82352 : type835 A K) (h1 : _82352 = (term625 A K)) : (term1582 A K) = (term1598 A K _82352).
Proof. exact (MK_COMB (@lem6434607 A) (@lem6434606 A K _82352 h1)). Qed.
Lemma lem6434609 {A K : Type'} (_82352 : type835 A K) : term1599 A K _82352.
Proof. exact (fun h0 : _82352 = (term625 A K) => @lem6434608 A K _82352 h0). Qed.
Lemma lem6434610 {A K : Type'} : term1600 A K.
Proof. exact (fun _82352 : type835 A K => @lem6434609 A K _82352). Qed.
Lemma lem6434612 {_3603 : Type'} (P : Prop) (c : _3603) (Q : _3603 -> Prop) : term661 _3603 P c Q.
Proof. exact (EQ_MP (@lem20230 _3603 P c Q) (@lem0)). Qed.
Lemma lem6434613 {A K : Type'} (P : Prop) (c : type835 A K) (Q : type212 A K) : term662 A K P c Q.
Proof. exact (@lem6434612 (type835 A K) P c Q). Qed.
Lemma lem6434614 {A K : Type'} : term1601 A K.
Proof. exact (@lem6434613 A K (term1582 A K) (term625 A K) (term1602 A K)). Qed.
Lemma lem6434615 {A K : Type'} (_82352 : type835 A K) : (term1603 A K _82352) = (term1598 A K _82352).
Proof. exact (eq_refl (term1603 A K _82352)). Qed.
Lemma lem6434616 {A K : Type'} : (term1604 A K) = (term1604 A K).
Proof. exact (eq_refl (term1604 A K)). Qed.
Lemma lem6434617 {A K : Type'} (_82352 : type835 A K) : ((term1582 A K) = (term1603 A K _82352)) = ((term1582 A K) = (term1598 A K _82352)).
Proof. exact (MK_COMB (@lem6434616 A K) (@lem6434615 A K _82352)). Qed.
Lemma lem6434618 {A K : Type'} (_82352 : type835 A K) : (term667 A K _82352) = (term667 A K _82352).
Proof. exact (eq_refl (term667 A K _82352)). Qed.
Lemma lem6434619 {A K : Type'} (_82352 : type835 A K) : (term1605 A K _82352) = (term1599 A K _82352).
Proof. exact (MK_COMB (@lem6434618 A K _82352) (@lem6434617 A K _82352)). Qed.
Lemma lem6434620 {A K : Type'} : (term1606 A K) = (term1607 A K).
Proof. exact (fun_ext (fun _82352 : type835 A K => @lem6434619 A K _82352)). Qed.
Lemma lem6434621 {A K : Type'} : (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop)) = (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop)).
Proof. exact (eq_refl (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop))). Qed.
Lemma lem6434622 {A K : Type'} : (term1608 A K) = (term1600 A K).
Proof. exact (MK_COMB (@lem6434621 A K) (@lem6434620 A K)). Qed.
Lemma lem6434623 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6434624 {A K : Type'} : (term1609 A K) = (term1610 A K).
Proof. exact (MK_COMB (@lem6434623) (@lem6434622 A K)). Qed.
Lemma lem6434625 {A K : Type'} (_82352 : type835 A K) : (term1603 A K _82352) = (term1598 A K _82352).
Proof. exact (eq_refl (term1603 A K _82352)). Qed.
Lemma lem6434626 {A K : Type'} (_82352 : type835 A K) : (term667 A K _82352) = (term667 A K _82352).
Proof. exact (eq_refl (term667 A K _82352)). Qed.
Lemma lem6434627 {A K : Type'} (_82352 : type835 A K) : (term1611 A K _82352) = (term1612 A K _82352).
Proof. exact (MK_COMB (@lem6434626 A K _82352) (@lem6434625 A K _82352)). Qed.
Lemma lem6434628 {A K : Type'} : (term1613 A K) = (term1614 A K).
Proof. exact (fun_ext (fun _82352 : type835 A K => @lem6434627 A K _82352)). Qed.
Lemma lem6434629 {A K : Type'} : (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop)) = (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop)).
Proof. exact (eq_refl (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop))). Qed.
Lemma lem6434630 {A K : Type'} : (term1615 A K) = (term1616 A K).
Proof. exact (MK_COMB (@lem6434629 A K) (@lem6434628 A K)). Qed.
Lemma lem6434631 {A K : Type'} : (term1604 A K) = (term1604 A K).
Proof. exact (eq_refl (term1604 A K)). Qed.
Lemma lem6434632 {A K : Type'} : ((term1582 A K) = (term1615 A K)) = ((term1582 A K) = (term1616 A K)).
Proof. exact (MK_COMB (@lem6434631 A K) (@lem6434630 A K)). Qed.
Lemma lem6434633 {A K : Type'} : (term1601 A K) = (term1617 A K).
Proof. exact (MK_COMB (@lem6434624 A K) (@lem6434632 A K)). Qed.
Lemma lem6434634 {A K : Type'} : term1617 A K.
Proof. exact (EQ_MP (@lem6434633 A K) (@lem6434614 A K)). Qed.
Lemma lem6434635 {A K : Type'} : (term1582 A K) = (term1616 A K).
Proof. exact (@lem6434634 A K (@lem6434610 A K)). Qed.
Lemma lem6434637 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term681 _3571 _3575 t)) = (term682 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem6434638 {A K : Type'} (s : type835 A K) (t : type835 A K) : (s = (term683 A K t)) = (term684 A K s t).
Proof. exact (@lem6434637 (type650 A K) (K -> Prop) s t). Qed.
Lemma lem6434639 {A K : Type'} (_82352 : type835 A K) : (_82352 = (term685 A K)) = (term686 A K _82352).
Proof. exact (@lem6434638 A K _82352 (term625 A K)). Qed.
Lemma lem6434640 {A K : Type'} (k : K -> Prop) : (term626 A K k) = (term627 A K k).
Proof. exact (eq_refl (term626 A K k)). Qed.
Lemma lem6434641 {A K : Type'} : (term685 A K) = (term625 A K).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6434640 A K k)). Qed.
Lemma lem6434642 {A K : Type'} (_82352 : type835 A K) : (@eq ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop) _82352) = (@eq ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop) _82352).
Proof. exact (eq_refl (@eq ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop) _82352)). Qed.
Lemma lem6434643 {A K : Type'} (_82352 : type835 A K) : (_82352 = (term685 A K)) = (_82352 = (term625 A K)).
Proof. exact (MK_COMB (@lem6434642 A K _82352) (@lem6434641 A K)). Qed.
Lemma lem6434644 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6434645 {A K : Type'} (_82352 : type835 A K) : (term687 A K _82352) = (term688 A K _82352).
Proof. exact (MK_COMB (@lem6434644) (@lem6434643 A K _82352)). Qed.
Lemma lem6434646 {A K : Type'} (k : K -> Prop) : (term626 A K k) = (term627 A K k).
Proof. exact (eq_refl (term626 A K k)). Qed.
Lemma lem6434647 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term628 A K _82352 k) = (term628 A K _82352 k).
Proof. exact (eq_refl (term628 A K _82352 k)). Qed.
Lemma lem6434648 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : ((_82352 k) = (term626 A K k)) = ((_82352 k) = (term627 A K k)).
Proof. exact (MK_COMB (@lem6434647 A K _82352 k) (@lem6434646 A K k)). Qed.
Lemma lem6434649 {A K : Type'} (_82352 : type835 A K) : (term689 A K _82352) = (term690 A K _82352).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6434648 A K _82352 k)). Qed.
Lemma lem6434650 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6434651 {A K : Type'} (_82352 : type835 A K) : (term686 A K _82352) = (term691 A K _82352).
Proof. exact (MK_COMB (@lem6434650 K) (@lem6434649 A K _82352)). Qed.
Lemma lem6434652 {A K : Type'} (_82352 : type835 A K) : ((_82352 = (term685 A K)) = (term686 A K _82352)) = ((_82352 = (term625 A K)) = (term691 A K _82352)).
Proof. exact (MK_COMB (@lem6434645 A K _82352) (@lem6434651 A K _82352)). Qed.
Lemma lem6434653 {A K : Type'} (_82352 : type835 A K) : (_82352 = (term625 A K)) = (term691 A K _82352).
Proof. exact (EQ_MP (@lem6434652 A K _82352) (@lem6434639 A K _82352)). Qed.
Lemma lem6434655 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term681 _3571 _3575 t)) = (term682 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem6434656 {A K : Type'} (s : type650 A K) (t : type650 A K) : (s = (term692 A K t)) = (term693 A K s t).
Proof. exact (@lem6434655 (type793 A K) (A -> Prop) s t). Qed.
Lemma lem6434657 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : ((_82352 k) = (term694 A K k)) = (term695 A K _82352 k).
Proof. exact (@lem6434656 A K (_82352 k) (term627 A K k)). Qed.
Lemma lem6434658 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) : (term629 A K k dom) = (term630 A K k dom).
Proof. exact (eq_refl (term629 A K k dom)). Qed.
Lemma lem6434659 {A K : Type'} (k : K -> Prop) : (term694 A K k) = (term627 A K k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6434658 A K k dom)). Qed.
Lemma lem6434660 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term628 A K _82352 k) = (term628 A K _82352 k).
Proof. exact (eq_refl (term628 A K _82352 k)). Qed.
Lemma lem6434661 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : ((_82352 k) = (term694 A K k)) = ((_82352 k) = (term627 A K k)).
Proof. exact (MK_COMB (@lem6434660 A K _82352 k) (@lem6434659 A K k)). Qed.
Lemma lem6434662 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6434663 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term696 A K _82352 k) = (term697 A K _82352 k).
Proof. exact (MK_COMB (@lem6434662) (@lem6434661 A K _82352 k)). Qed.
Lemma lem6434664 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) : (term629 A K k dom) = (term630 A K k dom).
Proof. exact (eq_refl (term629 A K k dom)). Qed.
Lemma lem6434665 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term631 A K _82352 k dom) = (term631 A K _82352 k dom).
Proof. exact (eq_refl (term631 A K _82352 k dom)). Qed.
Lemma lem6434666 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : ((_82352 k dom) = (term629 A K k dom)) = ((_82352 k dom) = (term630 A K k dom)).
Proof. exact (MK_COMB (@lem6434665 A K _82352 k dom) (@lem6434664 A K k dom)). Qed.
Lemma lem6434667 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term698 A K _82352 k) = (term699 A K _82352 k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6434666 A K _82352 k dom)). Qed.
Lemma lem6434668 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6434669 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term695 A K _82352 k) = (term700 A K _82352 k).
Proof. exact (MK_COMB (@lem6434668 A) (@lem6434667 A K _82352 k)). Qed.
Lemma lem6434670 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (((_82352 k) = (term694 A K k)) = (term695 A K _82352 k)) = (((_82352 k) = (term627 A K k)) = (term700 A K _82352 k)).
Proof. exact (MK_COMB (@lem6434663 A K _82352 k) (@lem6434669 A K _82352 k)). Qed.
Lemma lem6434671 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : ((_82352 k) = (term627 A K k)) = (term700 A K _82352 k).
Proof. exact (EQ_MP (@lem6434670 A K _82352 k) (@lem6434657 A K _82352 k)). Qed.
Lemma lem6434673 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term681 _3571 _3575 t)) = (term682 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem6434674 {A K : Type'} (s : type793 A K) (t : type793 A K) : (s = (term701 A K t)) = (term702 A K s t).
Proof. exact (@lem6434673 (type1413 A K) (K -> A) s t). Qed.
Lemma lem6434675 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : ((_82352 k dom) = (term703 A K k dom)) = (term704 A K _82352 k dom).
Proof. exact (@lem6434674 A K (_82352 k dom) (term630 A K k dom)). Qed.
Lemma lem6434676 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term632 A K k dom f) = (term633 A K k dom f).
Proof. exact (eq_refl (term632 A K k dom f)). Qed.
Lemma lem6434677 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) : (term703 A K k dom) = (term630 A K k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6434676 A K k dom f)). Qed.
Lemma lem6434678 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term631 A K _82352 k dom) = (term631 A K _82352 k dom).
Proof. exact (eq_refl (term631 A K _82352 k dom)). Qed.
Lemma lem6434679 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : ((_82352 k dom) = (term703 A K k dom)) = ((_82352 k dom) = (term630 A K k dom)).
Proof. exact (MK_COMB (@lem6434678 A K _82352 k dom) (@lem6434677 A K k dom)). Qed.
Lemma lem6434680 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6434681 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term705 A K _82352 k dom) = (term706 A K _82352 k dom).
Proof. exact (MK_COMB (@lem6434680) (@lem6434679 A K _82352 k dom)). Qed.
Lemma lem6434682 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term632 A K k dom f) = (term633 A K k dom f).
Proof. exact (eq_refl (term632 A K k dom f)). Qed.
Lemma lem6434683 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term634 A K _82352 k dom f) = (term634 A K _82352 k dom f).
Proof. exact (eq_refl (term634 A K _82352 k dom f)). Qed.
Lemma lem6434684 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : ((_82352 k dom f) = (term632 A K k dom f)) = ((_82352 k dom f) = (term633 A K k dom f)).
Proof. exact (MK_COMB (@lem6434683 A K _82352 k dom f) (@lem6434682 A K k dom f)). Qed.
Lemma lem6434685 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term707 A K _82352 k dom) = (term708 A K _82352 k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6434684 A K _82352 k dom f)). Qed.
Lemma lem6434686 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6434687 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term704 A K _82352 k dom) = (term709 A K _82352 k dom).
Proof. exact (MK_COMB (@lem6434686 A K) (@lem6434685 A K _82352 k dom)). Qed.
Lemma lem6434688 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (((_82352 k dom) = (term703 A K k dom)) = (term704 A K _82352 k dom)) = (((_82352 k dom) = (term630 A K k dom)) = (term709 A K _82352 k dom)).
Proof. exact (MK_COMB (@lem6434681 A K _82352 k dom) (@lem6434687 A K _82352 k dom)). Qed.
Lemma lem6434689 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : ((_82352 k dom) = (term630 A K k dom)) = (term709 A K _82352 k dom).
Proof. exact (EQ_MP (@lem6434688 A K _82352 k dom) (@lem6434675 A K _82352 k dom)). Qed.
Lemma lem6434691 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term681 _3571 _3575 t)) = (term682 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem6434692 {A K : Type'} (s : type1413 A K) (t : type1413 A K) : (s = (term710 A K t)) = (term711 A K s t).
Proof. exact (@lem6434691 (K -> Prop) A s t). Qed.
Lemma lem6434693 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : ((_82352 k dom f) = (term712 A K k dom f)) = (term713 A K _82352 k dom f).
Proof. exact (@lem6434692 A K (_82352 k dom f) (term633 A K k dom f)). Qed.
Lemma lem6434694 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term635 A K k dom f neut) = (term398 A K k dom f neut).
Proof. exact (eq_refl (term635 A K k dom f neut)). Qed.
Lemma lem6434695 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term712 A K k dom f) = (term633 A K k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6434694 A K k dom f neut)). Qed.
Lemma lem6434696 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term634 A K _82352 k dom f) = (term634 A K _82352 k dom f).
Proof. exact (eq_refl (term634 A K _82352 k dom f)). Qed.
Lemma lem6434697 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : ((_82352 k dom f) = (term712 A K k dom f)) = ((_82352 k dom f) = (term633 A K k dom f)).
Proof. exact (MK_COMB (@lem6434696 A K _82352 k dom f) (@lem6434695 A K k dom f)). Qed.
Lemma lem6434698 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6434699 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term714 A K _82352 k dom f) = (term715 A K _82352 k dom f).
Proof. exact (MK_COMB (@lem6434698) (@lem6434697 A K _82352 k dom f)). Qed.
Lemma lem6434700 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term635 A K k dom f neut) = (term398 A K k dom f neut).
Proof. exact (eq_refl (term635 A K k dom f neut)). Qed.
Lemma lem6434701 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term636 A K _82352 k dom f neut) = (term636 A K _82352 k dom f neut).
Proof. exact (eq_refl (term636 A K _82352 k dom f neut)). Qed.
Lemma lem6434702 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_82352 k dom f neut) = (term635 A K k dom f neut)) = ((_82352 k dom f neut) = (term398 A K k dom f neut)).
Proof. exact (MK_COMB (@lem6434701 A K _82352 k dom f neut) (@lem6434700 A K k dom f neut)). Qed.
Lemma lem6434703 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term716 A K _82352 k dom f) = (term717 A K _82352 k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6434702 A K _82352 k dom f neut)). Qed.
Lemma lem6434704 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6434705 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term713 A K _82352 k dom f) = (term718 A K _82352 k dom f).
Proof. exact (MK_COMB (@lem6434704 A) (@lem6434703 A K _82352 k dom f)). Qed.
Lemma lem6434706 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (((_82352 k dom f) = (term712 A K k dom f)) = (term713 A K _82352 k dom f)) = (((_82352 k dom f) = (term633 A K k dom f)) = (term718 A K _82352 k dom f)).
Proof. exact (MK_COMB (@lem6434699 A K _82352 k dom f) (@lem6434705 A K _82352 k dom f)). Qed.
Lemma lem6434707 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : ((_82352 k dom f) = (term633 A K k dom f)) = (term718 A K _82352 k dom f).
Proof. exact (EQ_MP (@lem6434706 A K _82352 k dom f) (@lem6434693 A K _82352 k dom f)). Qed.
Lemma lem6434709 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term681 _3571 _3575 t)) = (term682 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem6434710 {K : Type'} (s : K -> Prop) (t : K -> Prop) : (s = (term719 K t)) = (term720 K s t).
Proof. exact (@lem6434709 Prop K s t). Qed.
Lemma lem6434711 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_82352 k dom f neut) = (term721 A K k dom f neut)) = (term722 A K _82352 k dom f neut).
Proof. exact (@lem6434710 K (_82352 k dom f neut) (term398 A K k dom f neut)). Qed.
Lemma lem6434712 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term723 A K k dom f neut GEN_PVAR_263) = (term397 A K GEN_PVAR_263 k dom f neut).
Proof. exact (eq_refl (term723 A K k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6434713 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term721 A K k dom f neut) = (term398 A K k dom f neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6434712 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6434714 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term636 A K _82352 k dom f neut) = (term636 A K _82352 k dom f neut).
Proof. exact (eq_refl (term636 A K _82352 k dom f neut)). Qed.
Lemma lem6434715 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_82352 k dom f neut) = (term721 A K k dom f neut)) = ((_82352 k dom f neut) = (term398 A K k dom f neut)).
Proof. exact (MK_COMB (@lem6434714 A K _82352 k dom f neut) (@lem6434713 A K k dom f neut)). Qed.
Lemma lem6434716 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6434717 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term724 A K _82352 k dom f neut) = (term725 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6434716) (@lem6434715 A K _82352 k dom f neut)). Qed.
Lemma lem6434718 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term723 A K k dom f neut GEN_PVAR_263) = (term397 A K GEN_PVAR_263 k dom f neut).
Proof. exact (eq_refl (term723 A K k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6434719 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (GEN_PVAR_263 : K) : (term726 A K _82352 k dom f neut GEN_PVAR_263) = (term726 A K _82352 k dom f neut GEN_PVAR_263).
Proof. exact (eq_refl (term726 A K _82352 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6434720 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_82352 k dom f neut GEN_PVAR_263) = (term723 A K k dom f neut GEN_PVAR_263)) = ((_82352 k dom f neut GEN_PVAR_263) = (term397 A K GEN_PVAR_263 k dom f neut)).
Proof. exact (MK_COMB (@lem6434719 A K _82352 k dom f neut GEN_PVAR_263) (@lem6434718 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6434721 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term727 A K _82352 k dom f neut) = (term728 A K _82352 k dom f neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6434720 A K _82352 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6434722 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6434723 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term722 A K _82352 k dom f neut) = (term729 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6434722 K) (@lem6434721 A K _82352 k dom f neut)). Qed.
Lemma lem6434724 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (((_82352 k dom f neut) = (term721 A K k dom f neut)) = (term722 A K _82352 k dom f neut)) = (((_82352 k dom f neut) = (term398 A K k dom f neut)) = (term729 A K _82352 k dom f neut)).
Proof. exact (MK_COMB (@lem6434717 A K _82352 k dom f neut) (@lem6434723 A K _82352 k dom f neut)). Qed.
Lemma lem6434725 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_82352 k dom f neut) = (term398 A K k dom f neut)) = (term729 A K _82352 k dom f neut).
Proof. exact (EQ_MP (@lem6434724 A K _82352 k dom f neut) (@lem6434711 A K _82352 k dom f neut)). Qed.
Lemma lem6434726 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_82352 k dom f neut GEN_PVAR_263) = (term397 A K GEN_PVAR_263 k dom f neut)) = ((_82352 k dom f neut GEN_PVAR_263) = (term397 A K GEN_PVAR_263 k dom f neut)).
Proof. exact (eq_refl ((_82352 k dom f neut GEN_PVAR_263) = (term397 A K GEN_PVAR_263 k dom f neut))). Qed.
Lemma lem6434727 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term728 A K _82352 k dom f neut) = (term728 A K _82352 k dom f neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6434726 A K _82352 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6434728 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6434729 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term729 A K _82352 k dom f neut) = (term729 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6434728 K) (@lem6434727 A K _82352 k dom f neut)). Qed.
Lemma lem6434730 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_82352 k dom f neut) = (term398 A K k dom f neut)) = (term729 A K _82352 k dom f neut).
Proof. exact (TRANS (@lem6434725 A K _82352 k dom f neut) (@lem6434729 A K _82352 k dom f neut)). Qed.
Lemma lem6434731 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term717 A K _82352 k dom f) = (term730 A K _82352 k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6434730 A K _82352 k dom f neut)). Qed.
Lemma lem6434732 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6434733 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term718 A K _82352 k dom f) = (term731 A K _82352 k dom f).
Proof. exact (MK_COMB (@lem6434732 A) (@lem6434731 A K _82352 k dom f)). Qed.
Lemma lem6434734 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : ((_82352 k dom f) = (term633 A K k dom f)) = (term731 A K _82352 k dom f).
Proof. exact (TRANS (@lem6434707 A K _82352 k dom f) (@lem6434733 A K _82352 k dom f)). Qed.
Lemma lem6434735 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term708 A K _82352 k dom) = (term732 A K _82352 k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6434734 A K _82352 k dom f)). Qed.
Lemma lem6434736 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6434737 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term709 A K _82352 k dom) = (term733 A K _82352 k dom).
Proof. exact (MK_COMB (@lem6434736 A K) (@lem6434735 A K _82352 k dom)). Qed.
Lemma lem6434738 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : ((_82352 k dom) = (term630 A K k dom)) = (term733 A K _82352 k dom).
Proof. exact (TRANS (@lem6434689 A K _82352 k dom) (@lem6434737 A K _82352 k dom)). Qed.
Lemma lem6434739 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term699 A K _82352 k) = (term734 A K _82352 k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6434738 A K _82352 k dom)). Qed.
Lemma lem6434740 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6434741 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term700 A K _82352 k) = (term735 A K _82352 k).
Proof. exact (MK_COMB (@lem6434740 A) (@lem6434739 A K _82352 k)). Qed.
Lemma lem6434742 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : ((_82352 k) = (term627 A K k)) = (term735 A K _82352 k).
Proof. exact (TRANS (@lem6434671 A K _82352 k) (@lem6434741 A K _82352 k)). Qed.
Lemma lem6434743 {A K : Type'} (_82352 : type835 A K) : (term690 A K _82352) = (term736 A K _82352).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6434742 A K _82352 k)). Qed.
Lemma lem6434744 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6434745 {A K : Type'} (_82352 : type835 A K) : (term691 A K _82352) = (term737 A K _82352).
Proof. exact (MK_COMB (@lem6434744 K) (@lem6434743 A K _82352)). Qed.
Lemma lem6434746 {A K : Type'} (_82352 : type835 A K) : (_82352 = (term625 A K)) = (term737 A K _82352).
Proof. exact (TRANS (@lem6434653 A K _82352) (@lem6434745 A K _82352)). Qed.
Lemma lem6434747 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6434748 {A K : Type'} (_82352 : type835 A K) : (term667 A K _82352) = (term738 A K _82352).
Proof. exact (MK_COMB (@lem6434747) (@lem6434746 A K _82352)). Qed.
Lemma lem6434749 {A K : Type'} (_82352 : type835 A K) : (term1598 A K _82352) = (term1598 A K _82352).
Proof. exact (eq_refl (term1598 A K _82352)). Qed.
Lemma lem6434750 {A K : Type'} (_82352 : type835 A K) : (term1612 A K _82352) = (term1618 A K _82352).
Proof. exact (MK_COMB (@lem6434748 A K _82352) (@lem6434749 A K _82352)). Qed.
Lemma lem6434751 {A K : Type'} : (term1614 A K) = (term1619 A K).
Proof. exact (fun_ext (fun _82352 : type835 A K => @lem6434750 A K _82352)). Qed.
Lemma lem6434752 {A K : Type'} : (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop)) = (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop)).
Proof. exact (eq_refl (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop))). Qed.
Lemma lem6434753 {A K : Type'} : (term1616 A K) = (term1620 A K).
Proof. exact (MK_COMB (@lem6434752 A K) (@lem6434751 A K)). Qed.
Lemma lem6434754 {A K : Type'} : (term1604 A K) = (term1604 A K).
Proof. exact (eq_refl (term1604 A K)). Qed.
Lemma lem6434755 {A K : Type'} : ((term1582 A K) = (term1616 A K)) = ((term1582 A K) = (term1620 A K)).
Proof. exact (MK_COMB (@lem6434754 A K) (@lem6434753 A K)). Qed.
Lemma lem6434758 {A K : Type'} : (term1582 A K) = (term1620 A K).
Proof. exact (EQ_MP (@lem6434755 A K) (@lem6434635 A K)). Qed.
Lemma lem6434759 {A K : Type'} : (term1581 A K) = (term1620 A K).
Proof. exact (TRANS (@lem6434322 A K) (@lem6434758 A K)). Qed.
Lemma lem6434806 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : ((term438 A K k i dom f x neut) = (term461 A K k i dom f x neut)) = ((term438 A K k i dom f x neut) = (term461 A K k i dom f x neut)).
Proof. exact (eq_refl ((term438 A K k i dom f x neut) = (term461 A K k i dom f x neut))). Qed.
Lemma lem6434807 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term463 A K k i dom f neut) = (term463 A K k i dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6434806 A K k i dom f x neut)). Qed.
Lemma lem6434808 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6434809 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term464 A K k i dom f neut) = (term464 A K k i dom f neut).
Proof. exact (MK_COMB (@lem6434808 K) (@lem6434807 A K k i dom f neut)). Qed.
Lemma lem6434822 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term403 A K k dom f x neut) = (term403 A K k dom f x neut).
Proof. exact (eq_refl (term403 A K k dom f x neut)). Qed.
Lemma lem6434823 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term405 A K k dom f neut) = (term405 A K k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6434822 A K k dom f x neut)). Qed.
Lemma lem6434824 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6434825 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term406 A K k dom f neut) = (term406 A K k dom f neut).
Proof. exact (MK_COMB (@lem6434824 K) (@lem6434823 A K k dom f neut)). Qed.
Lemma lem6434826 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6434827 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term407 A K k dom f neut) = (term407 A K k dom f neut).
Proof. exact (MK_COMB (@lem6434826) (@lem6434825 A K k dom f neut)). Qed.
Lemma lem6434830 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term639 A K _82352 k dom f neut) = (term639 A K _82352 k dom f neut).
Proof. exact (eq_refl (term639 A K _82352 k dom f neut)). Qed.
Lemma lem6434831 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term640 A K _82352 k dom f neut) = (term640 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6434830 A K _82352 k dom f neut) (@lem6434827 A K k dom f neut)). Qed.
Lemma lem6434834 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term1537 A K _82351 k dom f neut i) = (term1537 A K _82351 k dom f neut i).
Proof. exact (eq_refl (term1537 A K _82351 k dom f neut i)). Qed.
Lemma lem6434835 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1583 A K _82351 i _82352 k dom f neut) = (term1583 A K _82351 i _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6434834 A K _82351 k dom f neut i) (@lem6434831 A K _82352 k dom f neut)). Qed.
Lemma lem6434836 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6434837 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1584 A K _82351 i _82352 k dom f neut) = (term1584 A K _82351 i _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6434836) (@lem6434835 A K _82351 i _82352 k dom f neut)). Qed.
Lemma lem6434838 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1585 A K _82351 _82352 k i dom f neut) = (term1585 A K _82351 _82352 k i dom f neut).
Proof. exact (MK_COMB (@lem6434837 A K _82351 i _82352 k dom f neut) (@lem6434809 A K k i dom f neut)). Qed.
Lemma lem6434863 {A K : Type'} (x : K) (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1520 A K x _82351 k dom f neut) = (term1520 A K x _82351 k dom f neut).
Proof. exact (eq_refl (term1520 A K x _82351 k dom f neut)). Qed.
Lemma lem6434864 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1521 A K _82351 k dom f neut) = (term1521 A K _82351 k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6434863 A K x _82351 k dom f neut)). Qed.
Lemma lem6434865 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6434866 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1522 A K _82351 k dom f neut) = (term1522 A K _82351 k dom f neut).
Proof. exact (MK_COMB (@lem6434865 K) (@lem6434864 A K _82351 k dom f neut)). Qed.
Lemma lem6434867 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1524 A K _82351 k dom f) = (term1524 A K _82351 k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6434866 A K _82351 k dom f neut)). Qed.
Lemma lem6434868 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6434869 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1525 A K _82351 k dom f) = (term1525 A K _82351 k dom f).
Proof. exact (MK_COMB (@lem6434868 A) (@lem6434867 A K _82351 k dom f)). Qed.
Lemma lem6434870 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) : (term1527 A K _82351 k dom) = (term1527 A K _82351 k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6434869 A K _82351 k dom f)). Qed.
Lemma lem6434871 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6434872 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) : (term1528 A K _82351 k dom) = (term1528 A K _82351 k dom).
Proof. exact (MK_COMB (@lem6434871 A K) (@lem6434870 A K _82351 k dom)). Qed.
Lemma lem6434873 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) : (term1530 A K _82351 k) = (term1530 A K _82351 k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6434872 A K _82351 k dom)). Qed.
Lemma lem6434874 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6434875 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) : (term1531 A K _82351 k) = (term1531 A K _82351 k).
Proof. exact (MK_COMB (@lem6434874 A) (@lem6434873 A K _82351 k)). Qed.
Lemma lem6434876 {A K : Type'} (_82351 : type836 A K) : (term1533 A K _82351) = (term1533 A K _82351).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6434875 A K _82351 k)). Qed.
Lemma lem6434877 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6434878 {A K : Type'} (_82351 : type836 A K) : (term1534 A K _82351) = (term1534 A K _82351).
Proof. exact (MK_COMB (@lem6434877 K) (@lem6434876 A K _82351)). Qed.
Lemma lem6434879 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6434880 {A K : Type'} (_82351 : type836 A K) : (term1536 A K _82351) = (term1536 A K _82351).
Proof. exact (MK_COMB (@lem6434879) (@lem6434878 A K _82351)). Qed.
Lemma lem6434881 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1586 A K _82351 _82352 k i dom f neut) = (term1586 A K _82351 _82352 k i dom f neut).
Proof. exact (MK_COMB (@lem6434880 A K _82351) (@lem6434838 A K _82351 _82352 k i dom f neut)). Qed.
Lemma lem6434882 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1587 A K _82352 k i dom f neut) = (term1587 A K _82352 k i dom f neut).
Proof. exact (fun_ext (fun _82351 : type836 A K => @lem6434881 A K _82351 _82352 k i dom f neut)). Qed.
Lemma lem6434883 {A K : Type'} : (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K)) = (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K)).
Proof. exact (eq_refl (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K))). Qed.
Lemma lem6434884 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1588 A K _82352 k i dom f neut) = (term1588 A K _82352 k i dom f neut).
Proof. exact (MK_COMB (@lem6434883 A K) (@lem6434882 A K _82352 k i dom f neut)). Qed.
Lemma lem6434885 {A K : Type'} (_82352 : type835 A K) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1589 A K _82352 i dom f neut) = (term1589 A K _82352 i dom f neut).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6434884 A K _82352 k i dom f neut)). Qed.
Lemma lem6434886 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6434887 {A K : Type'} (_82352 : type835 A K) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1590 A K _82352 i dom f neut) = (term1590 A K _82352 i dom f neut).
Proof. exact (MK_COMB (@lem6434886 K) (@lem6434885 A K _82352 i dom f neut)). Qed.
Lemma lem6434888 {A K : Type'} (_82352 : type835 A K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1591 A K _82352 dom f neut) = (term1591 A K _82352 dom f neut).
Proof. exact (fun_ext (fun i : K => @lem6434887 A K _82352 i dom f neut)). Qed.
Lemma lem6434889 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6434890 {A K : Type'} (_82352 : type835 A K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1592 A K _82352 dom f neut) = (term1592 A K _82352 dom f neut).
Proof. exact (MK_COMB (@lem6434889 K) (@lem6434888 A K _82352 dom f neut)). Qed.
Lemma lem6434891 {A K : Type'} (_82352 : type835 A K) (f : K -> A) (neut : A) : (term1593 A K _82352 f neut) = (term1593 A K _82352 f neut).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6434890 A K _82352 dom f neut)). Qed.
Lemma lem6434892 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6434893 {A K : Type'} (_82352 : type835 A K) (f : K -> A) (neut : A) : (term1594 A K _82352 f neut) = (term1594 A K _82352 f neut).
Proof. exact (MK_COMB (@lem6434892 A) (@lem6434891 A K _82352 f neut)). Qed.
Lemma lem6434894 {A K : Type'} (_82352 : type835 A K) (neut : A) : (term1595 A K _82352 neut) = (term1595 A K _82352 neut).
Proof. exact (fun_ext (fun f : K -> A => @lem6434893 A K _82352 f neut)). Qed.
Lemma lem6434895 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6434896 {A K : Type'} (_82352 : type835 A K) (neut : A) : (term1596 A K _82352 neut) = (term1596 A K _82352 neut).
Proof. exact (MK_COMB (@lem6434895 A K) (@lem6434894 A K _82352 neut)). Qed.
Lemma lem6434897 {A K : Type'} (_82352 : type835 A K) : (term1597 A K _82352) = (term1597 A K _82352).
Proof. exact (fun_ext (fun neut : A => @lem6434896 A K _82352 neut)). Qed.
Lemma lem6434898 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6434899 {A K : Type'} (_82352 : type835 A K) : (term1598 A K _82352) = (term1598 A K _82352).
Proof. exact (MK_COMB (@lem6434898 A) (@lem6434897 A K _82352)). Qed.
Lemma lem6434900 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term395 A K GEN_PVAR_263 k dom f neut i) = (term395 A K GEN_PVAR_263 k dom f neut i).
Proof. exact (eq_refl (term395 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6434901 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term396 A K GEN_PVAR_263 k dom f neut) = (term396 A K GEN_PVAR_263 k dom f neut).
Proof. exact (fun_ext (fun i : K => @lem6434900 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6434902 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6434903 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term397 A K GEN_PVAR_263 k dom f neut) = (term397 A K GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6434902 K) (@lem6434901 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6434906 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (GEN_PVAR_263 : K) : (term726 A K _82352 k dom f neut GEN_PVAR_263) = (term726 A K _82352 k dom f neut GEN_PVAR_263).
Proof. exact (eq_refl (term726 A K _82352 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6434907 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_82352 k dom f neut GEN_PVAR_263) = (term397 A K GEN_PVAR_263 k dom f neut)) = ((_82352 k dom f neut GEN_PVAR_263) = (term397 A K GEN_PVAR_263 k dom f neut)).
Proof. exact (MK_COMB (@lem6434906 A K _82352 k dom f neut GEN_PVAR_263) (@lem6434903 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6434908 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term728 A K _82352 k dom f neut) = (term728 A K _82352 k dom f neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6434907 A K _82352 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6434909 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6434910 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term729 A K _82352 k dom f neut) = (term729 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6434909 K) (@lem6434908 A K _82352 k dom f neut)). Qed.
Lemma lem6434911 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term730 A K _82352 k dom f) = (term730 A K _82352 k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6434910 A K _82352 k dom f neut)). Qed.
Lemma lem6434912 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6434913 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term731 A K _82352 k dom f) = (term731 A K _82352 k dom f).
Proof. exact (MK_COMB (@lem6434912 A) (@lem6434911 A K _82352 k dom f)). Qed.
Lemma lem6434914 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term732 A K _82352 k dom) = (term732 A K _82352 k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6434913 A K _82352 k dom f)). Qed.
Lemma lem6434915 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6434916 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term733 A K _82352 k dom) = (term733 A K _82352 k dom).
Proof. exact (MK_COMB (@lem6434915 A K) (@lem6434914 A K _82352 k dom)). Qed.
Lemma lem6434917 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term734 A K _82352 k) = (term734 A K _82352 k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6434916 A K _82352 k dom)). Qed.
Lemma lem6434918 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6434919 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term735 A K _82352 k) = (term735 A K _82352 k).
Proof. exact (MK_COMB (@lem6434918 A) (@lem6434917 A K _82352 k)). Qed.
Lemma lem6434920 {A K : Type'} (_82352 : type835 A K) : (term736 A K _82352) = (term736 A K _82352).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6434919 A K _82352 k)). Qed.
Lemma lem6434921 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6434922 {A K : Type'} (_82352 : type835 A K) : (term737 A K _82352) = (term737 A K _82352).
Proof. exact (MK_COMB (@lem6434921 K) (@lem6434920 A K _82352)). Qed.
Lemma lem6434923 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem6434924 {A K : Type'} (_82352 : type835 A K) : (term738 A K _82352) = (term738 A K _82352).
Proof. exact (MK_COMB (@lem6434923) (@lem6434922 A K _82352)). Qed.
Lemma lem6434925 {A K : Type'} (_82352 : type835 A K) : (term1618 A K _82352) = (term1618 A K _82352).
Proof. exact (MK_COMB (@lem6434924 A K _82352) (@lem6434899 A K _82352)). Qed.
Lemma lem6434926 {A K : Type'} : (term1619 A K) = (term1619 A K).
Proof. exact (fun_ext (fun _82352 : type835 A K => @lem6434925 A K _82352)). Qed.
Lemma lem6434927 {A K : Type'} : (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop)) = (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop)).
Proof. exact (eq_refl (@all ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop))). Qed.
Lemma lem6434928 {A K : Type'} : (term1620 A K) = (term1620 A K).
Proof. exact (MK_COMB (@lem6434927 A K) (@lem6434926 A K)). Qed.
Lemma lem6435095 {A K : Type'} : (term1581 A K) = (term1620 A K).
Proof. exact (TRANS (@lem6434759 A K) (@lem6434928 A K)). Qed.
Lemma lem6435096 {A K : Type'} : (term1620 A K) = (term1581 A K).
Proof. exact (SYM (@lem6435095 A K)). Qed.
Lemma lem6435097 {A K : Type'} (_82352 : type835 A K) (h1 : term737 A K _82352) : term737 A K _82352.
Proof. exact (h1). Qed.
Lemma lem6435099 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term1583 A K _82351 i _82352 k dom f neut) : term1583 A K _82351 i _82352 k dom f neut.
Proof. exact (h1). Qed.
Lemma lem6435101 (p : Prop) : p = (term50 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem6435102 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : ((term438 A K k i dom f x neut) = (term461 A K k i dom f x neut)) = (term742 A K k i dom f x neut).
Proof. exact (@lem6435101 ((term438 A K k i dom f x neut) = (term461 A K k i dom f x neut))). Qed.
Lemma lem6435103 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term742 A K k i dom f x neut) = ((term438 A K k i dom f x neut) = (term461 A K k i dom f x neut)).
Proof. exact (SYM (@lem6435102 A K k i dom f x neut)). Qed.
Lemma lem6435104 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term743 A K k i dom f x neut) : term743 A K k i dom f x neut.
Proof. exact (h1). Qed.
Lemma lem6435108 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term395 A K GEN_PVAR_263 k dom f neut i) = (term395 A K GEN_PVAR_263 k dom f neut i).
Proof. exact (eq_refl (term395 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6435109 {K : Type'} (P : K -> Prop) : (term744 K P) = (term745 K P).
Proof. exact (@lem18394 K P). Qed.
Lemma lem6435110 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term746 A K GEN_PVAR_263 k dom f neut) = (term747 A K GEN_PVAR_263 k dom f neut).
Proof. exact (@lem6435109 K (term396 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435111 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term748 A K GEN_PVAR_263 k dom f neut i) = (term395 A K GEN_PVAR_263 k dom f neut i).
Proof. exact (eq_refl (term748 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6435112 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6435114 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term749 A K GEN_PVAR_263 k dom f neut i) = (term750 A K GEN_PVAR_263 k dom f neut i).
Proof. exact (MK_COMB (@lem6435112) (@lem6435111 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6435115 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term751 A K GEN_PVAR_263 k dom f neut) = (term752 A K GEN_PVAR_263 k dom f neut).
Proof. exact (fun_ext (fun i : K => @lem6435114 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6435116 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6435117 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term747 A K GEN_PVAR_263 k dom f neut) = (term753 A K GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6435116 K) (@lem6435115 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435118 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term746 A K GEN_PVAR_263 k dom f neut) = (term753 A K GEN_PVAR_263 k dom f neut).
Proof. exact (TRANS (@lem6435110 A K GEN_PVAR_263 k dom f neut) (@lem6435117 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435119 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term396 A K GEN_PVAR_263 k dom f neut) = (term396 A K GEN_PVAR_263 k dom f neut).
Proof. exact (fun_ext (fun i : K => @lem6435108 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6435120 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6435121 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term397 A K GEN_PVAR_263 k dom f neut) = (term397 A K GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6435120 K) (@lem6435119 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435123 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (GEN_PVAR_263 : K) : (term754 A K _82352 k dom f neut GEN_PVAR_263) = (term754 A K _82352 k dom f neut GEN_PVAR_263).
Proof. exact (eq_refl (term754 A K _82352 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6435124 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term755 A K _82352 GEN_PVAR_263 k dom f neut) = (term755 A K _82352 GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6435123 A K _82352 k dom f neut GEN_PVAR_263) (@lem6435121 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435126 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (GEN_PVAR_263 : K) : (term756 A K _82352 k dom f neut GEN_PVAR_263) = (term756 A K _82352 k dom f neut GEN_PVAR_263).
Proof. exact (eq_refl (term756 A K _82352 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6435127 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term757 A K _82352 GEN_PVAR_263 k dom f neut) = (term758 A K _82352 GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6435126 A K _82352 k dom f neut GEN_PVAR_263) (@lem6435118 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435128 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6435129 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term759 A K _82352 GEN_PVAR_263 k dom f neut) = (term760 A K _82352 GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6435128) (@lem6435127 A K _82352 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435130 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term761 A K _82352 GEN_PVAR_263 k dom f neut) = (term762 A K _82352 GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6435129 A K _82352 GEN_PVAR_263 k dom f neut) (@lem6435124 A K _82352 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435131 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_82352 k dom f neut GEN_PVAR_263) = (term397 A K GEN_PVAR_263 k dom f neut)) = (term761 A K _82352 GEN_PVAR_263 k dom f neut).
Proof. exact (@lem17784 (_82352 k dom f neut GEN_PVAR_263) (term397 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435132 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((_82352 k dom f neut GEN_PVAR_263) = (term397 A K GEN_PVAR_263 k dom f neut)) = (term762 A K _82352 GEN_PVAR_263 k dom f neut).
Proof. exact (TRANS (@lem6435131 A K _82352 GEN_PVAR_263 k dom f neut) (@lem6435130 A K _82352 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435133 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term728 A K _82352 k dom f neut) = (term763 A K _82352 k dom f neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6435132 A K _82352 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435134 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6435135 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term729 A K _82352 k dom f neut) = (term764 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6435134 K) (@lem6435133 A K _82352 k dom f neut)). Qed.
Lemma lem6435136 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term730 A K _82352 k dom f) = (term765 A K _82352 k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6435135 A K _82352 k dom f neut)). Qed.
Lemma lem6435137 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6435138 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term731 A K _82352 k dom f) = (term766 A K _82352 k dom f).
Proof. exact (MK_COMB (@lem6435137 A) (@lem6435136 A K _82352 k dom f)). Qed.
Lemma lem6435139 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term732 A K _82352 k dom) = (term767 A K _82352 k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6435138 A K _82352 k dom f)). Qed.
Lemma lem6435140 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6435141 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term733 A K _82352 k dom) = (term768 A K _82352 k dom).
Proof. exact (MK_COMB (@lem6435140 A K) (@lem6435139 A K _82352 k dom)). Qed.
Lemma lem6435142 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term734 A K _82352 k) = (term769 A K _82352 k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6435141 A K _82352 k dom)). Qed.
Lemma lem6435143 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6435144 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term735 A K _82352 k) = (term770 A K _82352 k).
Proof. exact (MK_COMB (@lem6435143 A) (@lem6435142 A K _82352 k)). Qed.
Lemma lem6435145 {A K : Type'} (_82352 : type835 A K) : (term736 A K _82352) = (term771 A K _82352).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6435144 A K _82352 k)). Qed.
Lemma lem6435146 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6435147 {A K : Type'} (_82352 : type835 A K) : (term737 A K _82352) = (term772 A K _82352).
Proof. exact (MK_COMB (@lem6435146 K) (@lem6435145 A K _82352)). Qed.
Lemma lem6435165 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term773 A P Q) = (term774 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem6435166 {K : Type'} (P : K -> Prop) (Q : K -> Prop) : (term773 K P Q) = (term774 K P Q).
Proof. exact (@lem6435165 K P Q). Qed.
Lemma lem6435167 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term775 A K _82352 k dom f neut) = (term776 A K _82352 k dom f neut).
Proof. exact (@lem6435166 K (term777 A K _82352 k dom f neut) (term778 A K _82352 k dom f neut)). Qed.
Lemma lem6435168 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term779 A K _82352 k dom f neut GEN_PVAR_263) = (term758 A K _82352 GEN_PVAR_263 k dom f neut).
Proof. exact (eq_refl (term779 A K _82352 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6435169 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6435170 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term780 A K _82352 k dom f neut GEN_PVAR_263) = (term760 A K _82352 GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6435169) (@lem6435168 A K _82352 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435171 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term781 A K _82352 k dom f neut GEN_PVAR_263) = (term755 A K _82352 GEN_PVAR_263 k dom f neut).
Proof. exact (eq_refl (term781 A K _82352 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6435172 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term782 A K _82352 k dom f neut GEN_PVAR_263) = (term762 A K _82352 GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6435170 A K _82352 GEN_PVAR_263 k dom f neut) (@lem6435171 A K _82352 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435173 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term783 A K _82352 k dom f neut) = (term763 A K _82352 k dom f neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6435172 A K _82352 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435174 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6435175 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term775 A K _82352 k dom f neut) = (term764 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6435174 K) (@lem6435173 A K _82352 k dom f neut)). Qed.
Lemma lem6435176 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6435177 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term784 A K _82352 k dom f neut) = (term785 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6435176) (@lem6435175 A K _82352 k dom f neut)). Qed.
Lemma lem6435178 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term779 A K _82352 k dom f neut GEN_PVAR_263) = (term758 A K _82352 GEN_PVAR_263 k dom f neut).
Proof. exact (eq_refl (term779 A K _82352 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6435179 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term786 A K _82352 k dom f neut) = (term777 A K _82352 k dom f neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6435178 A K _82352 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435180 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6435181 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term787 A K _82352 k dom f neut) = (term788 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6435180 K) (@lem6435179 A K _82352 k dom f neut)). Qed.
Lemma lem6435182 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6435183 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term789 A K _82352 k dom f neut) = (term790 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6435182) (@lem6435181 A K _82352 k dom f neut)). Qed.
Lemma lem6435184 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term781 A K _82352 k dom f neut GEN_PVAR_263) = (term755 A K _82352 GEN_PVAR_263 k dom f neut).
Proof. exact (eq_refl (term781 A K _82352 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6435185 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term791 A K _82352 k dom f neut) = (term778 A K _82352 k dom f neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6435184 A K _82352 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435186 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6435187 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term792 A K _82352 k dom f neut) = (term793 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6435186 K) (@lem6435185 A K _82352 k dom f neut)). Qed.
Lemma lem6435188 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term776 A K _82352 k dom f neut) = (term794 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6435183 A K _82352 k dom f neut) (@lem6435187 A K _82352 k dom f neut)). Qed.
Lemma lem6435189 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term775 A K _82352 k dom f neut) = (term776 A K _82352 k dom f neut)) = ((term764 A K _82352 k dom f neut) = (term794 A K _82352 k dom f neut)).
Proof. exact (MK_COMB (@lem6435177 A K _82352 k dom f neut) (@lem6435188 A K _82352 k dom f neut)). Qed.
Lemma lem6435190 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term764 A K _82352 k dom f neut) = (term794 A K _82352 k dom f neut).
Proof. exact (EQ_MP (@lem6435189 A K _82352 k dom f neut) (@lem6435167 A K _82352 k dom f neut)). Qed.
Lemma lem6435295 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term765 A K _82352 k dom f) = (term795 A K _82352 k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6435190 A K _82352 k dom f neut)). Qed.
Lemma lem6435296 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6435297 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term766 A K _82352 k dom f) = (term796 A K _82352 k dom f).
Proof. exact (MK_COMB (@lem6435296 A) (@lem6435295 A K _82352 k dom f)). Qed.
Lemma lem6435299 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term773 A P Q) = (term774 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem6435300 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term773 A P Q) = (term774 A P Q).
Proof. exact (@lem6435299 A P Q). Qed.
Lemma lem6435301 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term797 A K _82352 k dom f) = (term798 A K _82352 k dom f).
Proof. exact (@lem6435300 A (term799 A K _82352 k dom f) (term800 A K _82352 k dom f)). Qed.
Lemma lem6435302 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term801 A K _82352 k dom f neut) = (term788 A K _82352 k dom f neut).
Proof. exact (eq_refl (term801 A K _82352 k dom f neut)). Qed.
Lemma lem6435303 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6435304 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term802 A K _82352 k dom f neut) = (term790 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6435303) (@lem6435302 A K _82352 k dom f neut)). Qed.
Lemma lem6435305 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term803 A K _82352 k dom f neut) = (term793 A K _82352 k dom f neut).
Proof. exact (eq_refl (term803 A K _82352 k dom f neut)). Qed.
Lemma lem6435306 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term804 A K _82352 k dom f neut) = (term794 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6435304 A K _82352 k dom f neut) (@lem6435305 A K _82352 k dom f neut)). Qed.
Lemma lem6435307 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term805 A K _82352 k dom f) = (term795 A K _82352 k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6435306 A K _82352 k dom f neut)). Qed.
Lemma lem6435308 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6435309 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term797 A K _82352 k dom f) = (term796 A K _82352 k dom f).
Proof. exact (MK_COMB (@lem6435308 A) (@lem6435307 A K _82352 k dom f)). Qed.
Lemma lem6435310 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6435311 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term806 A K _82352 k dom f) = (term807 A K _82352 k dom f).
Proof. exact (MK_COMB (@lem6435310) (@lem6435309 A K _82352 k dom f)). Qed.
Lemma lem6435312 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term801 A K _82352 k dom f neut) = (term788 A K _82352 k dom f neut).
Proof. exact (eq_refl (term801 A K _82352 k dom f neut)). Qed.
Lemma lem6435313 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term808 A K _82352 k dom f) = (term799 A K _82352 k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6435312 A K _82352 k dom f neut)). Qed.
Lemma lem6435314 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6435315 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term809 A K _82352 k dom f) = (term810 A K _82352 k dom f).
Proof. exact (MK_COMB (@lem6435314 A) (@lem6435313 A K _82352 k dom f)). Qed.
Lemma lem6435316 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6435317 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term811 A K _82352 k dom f) = (term812 A K _82352 k dom f).
Proof. exact (MK_COMB (@lem6435316) (@lem6435315 A K _82352 k dom f)). Qed.
Lemma lem6435318 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term803 A K _82352 k dom f neut) = (term793 A K _82352 k dom f neut).
Proof. exact (eq_refl (term803 A K _82352 k dom f neut)). Qed.
Lemma lem6435319 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term813 A K _82352 k dom f) = (term800 A K _82352 k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6435318 A K _82352 k dom f neut)). Qed.
Lemma lem6435320 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6435321 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term814 A K _82352 k dom f) = (term815 A K _82352 k dom f).
Proof. exact (MK_COMB (@lem6435320 A) (@lem6435319 A K _82352 k dom f)). Qed.
Lemma lem6435322 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term798 A K _82352 k dom f) = (term816 A K _82352 k dom f).
Proof. exact (MK_COMB (@lem6435317 A K _82352 k dom f) (@lem6435321 A K _82352 k dom f)). Qed.
Lemma lem6435323 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : ((term797 A K _82352 k dom f) = (term798 A K _82352 k dom f)) = ((term796 A K _82352 k dom f) = (term816 A K _82352 k dom f)).
Proof. exact (MK_COMB (@lem6435311 A K _82352 k dom f) (@lem6435322 A K _82352 k dom f)). Qed.
Lemma lem6435324 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term796 A K _82352 k dom f) = (term816 A K _82352 k dom f).
Proof. exact (EQ_MP (@lem6435323 A K _82352 k dom f) (@lem6435301 A K _82352 k dom f)). Qed.
Lemma lem6435437 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term766 A K _82352 k dom f) = (term816 A K _82352 k dom f).
Proof. exact (TRANS (@lem6435297 A K _82352 k dom f) (@lem6435324 A K _82352 k dom f)). Qed.
Lemma lem6435438 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term767 A K _82352 k dom) = (term817 A K _82352 k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6435437 A K _82352 k dom f)). Qed.
Lemma lem6435439 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6435440 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term768 A K _82352 k dom) = (term818 A K _82352 k dom).
Proof. exact (MK_COMB (@lem6435439 A K) (@lem6435438 A K _82352 k dom)). Qed.
Lemma lem6435442 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term773 A P Q) = (term774 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem6435443 {A K : Type'} (P : type805 A K) (Q : type805 A K) : (term819 A K P Q) = (term820 A K P Q).
Proof. exact (@lem6435442 (K -> A) P Q). Qed.
Lemma lem6435444 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term821 A K _82352 k dom) = (term822 A K _82352 k dom).
Proof. exact (@lem6435443 A K (term823 A K _82352 k dom) (term824 A K _82352 k dom)). Qed.
Lemma lem6435445 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term825 A K _82352 k dom f) = (term810 A K _82352 k dom f).
Proof. exact (eq_refl (term825 A K _82352 k dom f)). Qed.
Lemma lem6435446 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6435447 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term826 A K _82352 k dom f) = (term812 A K _82352 k dom f).
Proof. exact (MK_COMB (@lem6435446) (@lem6435445 A K _82352 k dom f)). Qed.
Lemma lem6435448 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term827 A K _82352 k dom f) = (term815 A K _82352 k dom f).
Proof. exact (eq_refl (term827 A K _82352 k dom f)). Qed.
Lemma lem6435449 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term828 A K _82352 k dom f) = (term816 A K _82352 k dom f).
Proof. exact (MK_COMB (@lem6435447 A K _82352 k dom f) (@lem6435448 A K _82352 k dom f)). Qed.
Lemma lem6435450 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term829 A K _82352 k dom) = (term817 A K _82352 k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6435449 A K _82352 k dom f)). Qed.
Lemma lem6435451 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6435452 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term821 A K _82352 k dom) = (term818 A K _82352 k dom).
Proof. exact (MK_COMB (@lem6435451 A K) (@lem6435450 A K _82352 k dom)). Qed.
Lemma lem6435453 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6435454 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term830 A K _82352 k dom) = (term831 A K _82352 k dom).
Proof. exact (MK_COMB (@lem6435453) (@lem6435452 A K _82352 k dom)). Qed.
Lemma lem6435455 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term825 A K _82352 k dom f) = (term810 A K _82352 k dom f).
Proof. exact (eq_refl (term825 A K _82352 k dom f)). Qed.
Lemma lem6435456 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term832 A K _82352 k dom) = (term823 A K _82352 k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6435455 A K _82352 k dom f)). Qed.
Lemma lem6435457 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6435458 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term833 A K _82352 k dom) = (term834 A K _82352 k dom).
Proof. exact (MK_COMB (@lem6435457 A K) (@lem6435456 A K _82352 k dom)). Qed.
Lemma lem6435459 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6435460 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term835 A K _82352 k dom) = (term836 A K _82352 k dom).
Proof. exact (MK_COMB (@lem6435459) (@lem6435458 A K _82352 k dom)). Qed.
Lemma lem6435461 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term827 A K _82352 k dom f) = (term815 A K _82352 k dom f).
Proof. exact (eq_refl (term827 A K _82352 k dom f)). Qed.
Lemma lem6435462 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term837 A K _82352 k dom) = (term824 A K _82352 k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6435461 A K _82352 k dom f)). Qed.
Lemma lem6435463 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6435464 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term838 A K _82352 k dom) = (term839 A K _82352 k dom).
Proof. exact (MK_COMB (@lem6435463 A K) (@lem6435462 A K _82352 k dom)). Qed.
Lemma lem6435465 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term822 A K _82352 k dom) = (term840 A K _82352 k dom).
Proof. exact (MK_COMB (@lem6435460 A K _82352 k dom) (@lem6435464 A K _82352 k dom)). Qed.
Lemma lem6435466 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : ((term821 A K _82352 k dom) = (term822 A K _82352 k dom)) = ((term818 A K _82352 k dom) = (term840 A K _82352 k dom)).
Proof. exact (MK_COMB (@lem6435454 A K _82352 k dom) (@lem6435465 A K _82352 k dom)). Qed.
Lemma lem6435467 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term818 A K _82352 k dom) = (term840 A K _82352 k dom).
Proof. exact (EQ_MP (@lem6435466 A K _82352 k dom) (@lem6435444 A K _82352 k dom)). Qed.
Lemma lem6435588 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term768 A K _82352 k dom) = (term840 A K _82352 k dom).
Proof. exact (TRANS (@lem6435440 A K _82352 k dom) (@lem6435467 A K _82352 k dom)). Qed.
Lemma lem6435589 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term769 A K _82352 k) = (term841 A K _82352 k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6435588 A K _82352 k dom)). Qed.
Lemma lem6435590 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6435591 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term770 A K _82352 k) = (term842 A K _82352 k).
Proof. exact (MK_COMB (@lem6435590 A) (@lem6435589 A K _82352 k)). Qed.
Lemma lem6435593 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term773 A P Q) = (term774 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem6435594 {A : Type'} (P : type686 A) (Q : type686 A) : (term843 A P Q) = (term844 A P Q).
Proof. exact (@lem6435593 (A -> Prop) P Q). Qed.
Lemma lem6435595 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term845 A K _82352 k) = (term846 A K _82352 k).
Proof. exact (@lem6435594 A (term847 A K _82352 k) (term848 A K _82352 k)). Qed.
Lemma lem6435596 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term849 A K _82352 k dom) = (term834 A K _82352 k dom).
Proof. exact (eq_refl (term849 A K _82352 k dom)). Qed.
Lemma lem6435597 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6435598 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term850 A K _82352 k dom) = (term836 A K _82352 k dom).
Proof. exact (MK_COMB (@lem6435597) (@lem6435596 A K _82352 k dom)). Qed.
Lemma lem6435599 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term851 A K _82352 k dom) = (term839 A K _82352 k dom).
Proof. exact (eq_refl (term851 A K _82352 k dom)). Qed.
Lemma lem6435600 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term852 A K _82352 k dom) = (term840 A K _82352 k dom).
Proof. exact (MK_COMB (@lem6435598 A K _82352 k dom) (@lem6435599 A K _82352 k dom)). Qed.
Lemma lem6435601 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term853 A K _82352 k) = (term841 A K _82352 k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6435600 A K _82352 k dom)). Qed.
Lemma lem6435602 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6435603 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term845 A K _82352 k) = (term842 A K _82352 k).
Proof. exact (MK_COMB (@lem6435602 A) (@lem6435601 A K _82352 k)). Qed.
Lemma lem6435604 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6435605 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term854 A K _82352 k) = (term855 A K _82352 k).
Proof. exact (MK_COMB (@lem6435604) (@lem6435603 A K _82352 k)). Qed.
Lemma lem6435606 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term849 A K _82352 k dom) = (term834 A K _82352 k dom).
Proof. exact (eq_refl (term849 A K _82352 k dom)). Qed.
Lemma lem6435607 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term856 A K _82352 k) = (term847 A K _82352 k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6435606 A K _82352 k dom)). Qed.
Lemma lem6435608 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6435609 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term857 A K _82352 k) = (term858 A K _82352 k).
Proof. exact (MK_COMB (@lem6435608 A) (@lem6435607 A K _82352 k)). Qed.
Lemma lem6435610 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6435611 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term859 A K _82352 k) = (term860 A K _82352 k).
Proof. exact (MK_COMB (@lem6435610) (@lem6435609 A K _82352 k)). Qed.
Lemma lem6435612 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term851 A K _82352 k dom) = (term839 A K _82352 k dom).
Proof. exact (eq_refl (term851 A K _82352 k dom)). Qed.
Lemma lem6435613 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term861 A K _82352 k) = (term848 A K _82352 k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6435612 A K _82352 k dom)). Qed.
Lemma lem6435614 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6435615 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term862 A K _82352 k) = (term863 A K _82352 k).
Proof. exact (MK_COMB (@lem6435614 A) (@lem6435613 A K _82352 k)). Qed.
Lemma lem6435616 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term846 A K _82352 k) = (term864 A K _82352 k).
Proof. exact (MK_COMB (@lem6435611 A K _82352 k) (@lem6435615 A K _82352 k)). Qed.
Lemma lem6435617 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : ((term845 A K _82352 k) = (term846 A K _82352 k)) = ((term842 A K _82352 k) = (term864 A K _82352 k)).
Proof. exact (MK_COMB (@lem6435605 A K _82352 k) (@lem6435616 A K _82352 k)). Qed.
Lemma lem6435618 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term842 A K _82352 k) = (term864 A K _82352 k).
Proof. exact (EQ_MP (@lem6435617 A K _82352 k) (@lem6435595 A K _82352 k)). Qed.
Lemma lem6435747 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term770 A K _82352 k) = (term864 A K _82352 k).
Proof. exact (TRANS (@lem6435591 A K _82352 k) (@lem6435618 A K _82352 k)). Qed.
Lemma lem6435748 {A K : Type'} (_82352 : type835 A K) : (term771 A K _82352) = (term865 A K _82352).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6435747 A K _82352 k)). Qed.
Lemma lem6435749 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6435750 {A K : Type'} (_82352 : type835 A K) : (term772 A K _82352) = (term866 A K _82352).
Proof. exact (MK_COMB (@lem6435749 K) (@lem6435748 A K _82352)). Qed.
Lemma lem6435752 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term773 A P Q) = (term774 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem6435753 {K : Type'} (P : type686 K) (Q : type686 K) : (term843 K P Q) = (term844 K P Q).
Proof. exact (@lem6435752 (K -> Prop) P Q). Qed.
Lemma lem6435754 {A K : Type'} (_82352 : type835 A K) : (term867 A K _82352) = (term868 A K _82352).
Proof. exact (@lem6435753 K (term869 A K _82352) (term870 A K _82352)). Qed.
Lemma lem6435755 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term871 A K _82352 k) = (term858 A K _82352 k).
Proof. exact (eq_refl (term871 A K _82352 k)). Qed.
Lemma lem6435756 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6435757 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term872 A K _82352 k) = (term860 A K _82352 k).
Proof. exact (MK_COMB (@lem6435756) (@lem6435755 A K _82352 k)). Qed.
Lemma lem6435758 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term873 A K _82352 k) = (term863 A K _82352 k).
Proof. exact (eq_refl (term873 A K _82352 k)). Qed.
Lemma lem6435759 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term874 A K _82352 k) = (term864 A K _82352 k).
Proof. exact (MK_COMB (@lem6435757 A K _82352 k) (@lem6435758 A K _82352 k)). Qed.
Lemma lem6435760 {A K : Type'} (_82352 : type835 A K) : (term875 A K _82352) = (term865 A K _82352).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6435759 A K _82352 k)). Qed.
Lemma lem6435761 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6435762 {A K : Type'} (_82352 : type835 A K) : (term867 A K _82352) = (term866 A K _82352).
Proof. exact (MK_COMB (@lem6435761 K) (@lem6435760 A K _82352)). Qed.
Lemma lem6435763 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6435764 {A K : Type'} (_82352 : type835 A K) : (term876 A K _82352) = (term877 A K _82352).
Proof. exact (MK_COMB (@lem6435763) (@lem6435762 A K _82352)). Qed.
Lemma lem6435765 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term871 A K _82352 k) = (term858 A K _82352 k).
Proof. exact (eq_refl (term871 A K _82352 k)). Qed.
Lemma lem6435766 {A K : Type'} (_82352 : type835 A K) : (term878 A K _82352) = (term869 A K _82352).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6435765 A K _82352 k)). Qed.
Lemma lem6435767 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6435768 {A K : Type'} (_82352 : type835 A K) : (term879 A K _82352) = (term880 A K _82352).
Proof. exact (MK_COMB (@lem6435767 K) (@lem6435766 A K _82352)). Qed.
Lemma lem6435769 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6435770 {A K : Type'} (_82352 : type835 A K) : (term881 A K _82352) = (term882 A K _82352).
Proof. exact (MK_COMB (@lem6435769) (@lem6435768 A K _82352)). Qed.
Lemma lem6435771 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term873 A K _82352 k) = (term863 A K _82352 k).
Proof. exact (eq_refl (term873 A K _82352 k)). Qed.
Lemma lem6435772 {A K : Type'} (_82352 : type835 A K) : (term883 A K _82352) = (term870 A K _82352).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6435771 A K _82352 k)). Qed.
Lemma lem6435773 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6435774 {A K : Type'} (_82352 : type835 A K) : (term884 A K _82352) = (term885 A K _82352).
Proof. exact (MK_COMB (@lem6435773 K) (@lem6435772 A K _82352)). Qed.
Lemma lem6435775 {A K : Type'} (_82352 : type835 A K) : (term868 A K _82352) = (term886 A K _82352).
Proof. exact (MK_COMB (@lem6435770 A K _82352) (@lem6435774 A K _82352)). Qed.
Lemma lem6435776 {A K : Type'} (_82352 : type835 A K) : ((term867 A K _82352) = (term868 A K _82352)) = ((term866 A K _82352) = (term886 A K _82352)).
Proof. exact (MK_COMB (@lem6435764 A K _82352) (@lem6435775 A K _82352)). Qed.
Lemma lem6435777 {A K : Type'} (_82352 : type835 A K) : (term866 A K _82352) = (term886 A K _82352).
Proof. exact (EQ_MP (@lem6435776 A K _82352) (@lem6435754 A K _82352)). Qed.
Lemma lem6435914 {A K : Type'} (_82352 : type835 A K) : (term772 A K _82352) = (term886 A K _82352).
Proof. exact (TRANS (@lem6435750 A K _82352) (@lem6435777 A K _82352)). Qed.
Lemma lem6435916 {A : Type'} (P : Prop) (Q : A -> Prop) : (term887 A P Q) = (term888 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem6435917 {K : Type'} (P : Prop) (Q : K -> Prop) : (term887 K P Q) = (term888 K P Q).
Proof. exact (@lem6435916 K P Q). Qed.
Lemma lem6435918 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term889 A K _82352 GEN_PVAR_263 k dom f neut) = (term890 A K _82352 GEN_PVAR_263 k dom f neut).
Proof. exact (@lem6435917 K (term891 A K _82352 k dom f neut GEN_PVAR_263) (term396 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435919 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term748 A K GEN_PVAR_263 k dom f neut i) = (term395 A K GEN_PVAR_263 k dom f neut i).
Proof. exact (eq_refl (term748 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6435920 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term892 A K GEN_PVAR_263 k dom f neut) = (term396 A K GEN_PVAR_263 k dom f neut).
Proof. exact (fun_ext (fun i : K => @lem6435919 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6435921 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6435922 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term893 A K GEN_PVAR_263 k dom f neut) = (term397 A K GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6435921 K) (@lem6435920 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435923 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (GEN_PVAR_263 : K) : (term754 A K _82352 k dom f neut GEN_PVAR_263) = (term754 A K _82352 k dom f neut GEN_PVAR_263).
Proof. exact (eq_refl (term754 A K _82352 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6435924 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term889 A K _82352 GEN_PVAR_263 k dom f neut) = (term755 A K _82352 GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6435923 A K _82352 k dom f neut GEN_PVAR_263) (@lem6435922 A K GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435925 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6435926 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term894 A K _82352 GEN_PVAR_263 k dom f neut) = (term895 A K _82352 GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6435925) (@lem6435924 A K _82352 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435927 {A K : Type'} (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term748 A K GEN_PVAR_263 k dom f neut i) = (term395 A K GEN_PVAR_263 k dom f neut i).
Proof. exact (eq_refl (term748 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6435928 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (GEN_PVAR_263 : K) : (term754 A K _82352 k dom f neut GEN_PVAR_263) = (term754 A K _82352 k dom f neut GEN_PVAR_263).
Proof. exact (eq_refl (term754 A K _82352 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6435929 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term896 A K _82352 GEN_PVAR_263 k dom f neut i) = (term897 A K _82352 GEN_PVAR_263 k dom f neut i).
Proof. exact (MK_COMB (@lem6435928 A K _82352 k dom f neut GEN_PVAR_263) (@lem6435927 A K GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6435930 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term898 A K _82352 GEN_PVAR_263 k dom f neut) = (term899 A K _82352 GEN_PVAR_263 k dom f neut).
Proof. exact (fun_ext (fun i : K => @lem6435929 A K _82352 GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6435931 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6435932 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term890 A K _82352 GEN_PVAR_263 k dom f neut) = (term900 A K _82352 GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6435931 K) (@lem6435930 A K _82352 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435933 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term889 A K _82352 GEN_PVAR_263 k dom f neut) = (term890 A K _82352 GEN_PVAR_263 k dom f neut)) = ((term755 A K _82352 GEN_PVAR_263 k dom f neut) = (term900 A K _82352 GEN_PVAR_263 k dom f neut)).
Proof. exact (MK_COMB (@lem6435926 A K _82352 GEN_PVAR_263 k dom f neut) (@lem6435932 A K _82352 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435934 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term755 A K _82352 GEN_PVAR_263 k dom f neut) = (term900 A K _82352 GEN_PVAR_263 k dom f neut).
Proof. exact (EQ_MP (@lem6435933 A K _82352 GEN_PVAR_263 k dom f neut) (@lem6435918 A K _82352 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435935 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term778 A K _82352 k dom f neut) = (term901 A K _82352 k dom f neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6435934 A K _82352 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435936 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6435937 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term793 A K _82352 k dom f neut) = (term902 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6435936 K) (@lem6435935 A K _82352 k dom f neut)). Qed.
Lemma lem6435939 {A B : Type'} (P : type1413 A B) : (term903 A B P) = (term904 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem6435940 {K : Type'} (P : type1402 K) : (term905 K P) = (term906 K P).
Proof. exact (@lem6435939 K K P). Qed.
Lemma lem6435941 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term907 A K _82352 k dom f neut) = (term908 A K _82352 k dom f neut).
Proof. exact (@lem6435940 K (term909 A K _82352 k dom f neut)). Qed.
Lemma lem6435942 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term910 A K _82352 k dom f neut GEN_PVAR_263) = (term899 A K _82352 GEN_PVAR_263 k dom f neut).
Proof. exact (eq_refl (term910 A K _82352 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6435943 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6435944 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term911 A K _82352 k dom f neut GEN_PVAR_263 i) = (term912 A K _82352 GEN_PVAR_263 k dom f neut i).
Proof. exact (MK_COMB (@lem6435942 A K _82352 GEN_PVAR_263 k dom f neut) (@lem6435943 K i)). Qed.
Lemma lem6435945 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term912 A K _82352 GEN_PVAR_263 k dom f neut i) = (term897 A K _82352 GEN_PVAR_263 k dom f neut i).
Proof. exact (eq_refl (term912 A K _82352 GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6435946 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term911 A K _82352 k dom f neut GEN_PVAR_263 i) = (term897 A K _82352 GEN_PVAR_263 k dom f neut i).
Proof. exact (TRANS (@lem6435944 A K _82352 GEN_PVAR_263 k dom f neut i) (@lem6435945 A K _82352 GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6435947 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term913 A K _82352 k dom f neut GEN_PVAR_263) = (term899 A K _82352 GEN_PVAR_263 k dom f neut).
Proof. exact (fun_ext (fun i : K => @lem6435946 A K _82352 GEN_PVAR_263 k dom f neut i)). Qed.
Lemma lem6435948 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6435949 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term914 A K _82352 k dom f neut GEN_PVAR_263) = (term900 A K _82352 GEN_PVAR_263 k dom f neut).
Proof. exact (MK_COMB (@lem6435948 K) (@lem6435947 A K _82352 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435950 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term915 A K _82352 k dom f neut) = (term901 A K _82352 k dom f neut).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6435949 A K _82352 GEN_PVAR_263 k dom f neut)). Qed.
Lemma lem6435951 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6435952 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term907 A K _82352 k dom f neut) = (term902 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6435951 K) (@lem6435950 A K _82352 k dom f neut)). Qed.
Lemma lem6435953 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6435954 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term916 A K _82352 k dom f neut) = (term917 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6435953) (@lem6435952 A K _82352 k dom f neut)). Qed.
Lemma lem6435955 {A K : Type'} (_82352 : type835 A K) (GEN_PVAR_263 : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term910 A K _82352 k dom f neut GEN_PVAR_263) = (term899 A K _82352 GEN_PVAR_263 k dom f neut).
Proof. exact (eq_refl (term910 A K _82352 k dom f neut GEN_PVAR_263)). Qed.
Lemma lem6435956 {K : Type'} (i : K -> K) (GEN_PVAR_263 : K) : (i GEN_PVAR_263) = (i GEN_PVAR_263).
Proof. exact (eq_refl (i GEN_PVAR_263)). Qed.
Lemma lem6435957 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K -> K) (GEN_PVAR_263 : K) : (term918 A K _82352 k dom f neut i GEN_PVAR_263) = (term919 A K _82352 k dom f neut i GEN_PVAR_263).
Proof. exact (MK_COMB (@lem6435955 A K _82352 GEN_PVAR_263 k dom f neut) (@lem6435956 K i GEN_PVAR_263)). Qed.
Lemma lem6435958 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K -> K) (GEN_PVAR_263 : K) : (term919 A K _82352 k dom f neut i GEN_PVAR_263) = (term920 A K _82352 k dom f neut i GEN_PVAR_263).
Proof. exact (eq_refl (term919 A K _82352 k dom f neut i GEN_PVAR_263)). Qed.
Lemma lem6435959 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K -> K) (GEN_PVAR_263 : K) : (term918 A K _82352 k dom f neut i GEN_PVAR_263) = (term920 A K _82352 k dom f neut i GEN_PVAR_263).
Proof. exact (TRANS (@lem6435957 A K _82352 k dom f neut i GEN_PVAR_263) (@lem6435958 A K _82352 k dom f neut i GEN_PVAR_263)). Qed.
Lemma lem6435960 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K -> K) : (term921 A K _82352 k dom f neut i) = (term922 A K _82352 k dom f neut i).
Proof. exact (fun_ext (fun GEN_PVAR_263 : K => @lem6435959 A K _82352 k dom f neut i GEN_PVAR_263)). Qed.
Lemma lem6435961 {K : Type'} : (@all K) = (@all K).
Proof. exact (eq_refl (@all K)). Qed.
Lemma lem6435962 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K -> K) : (term923 A K _82352 k dom f neut i) = (term924 A K _82352 k dom f neut i).
Proof. exact (MK_COMB (@lem6435961 K) (@lem6435960 A K _82352 k dom f neut i)). Qed.
Lemma lem6435963 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term925 A K _82352 k dom f neut) = (term926 A K _82352 k dom f neut).
Proof. exact (fun_ext (fun i : K -> K => @lem6435962 A K _82352 k dom f neut i)). Qed.
Lemma lem6435964 {K : Type'} : (@ex (K -> K)) = (@ex (K -> K)).
Proof. exact (eq_refl (@ex (K -> K))). Qed.
Lemma lem6435965 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term908 A K _82352 k dom f neut) = (term927 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6435964 K) (@lem6435963 A K _82352 k dom f neut)). Qed.
Lemma lem6435966 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term907 A K _82352 k dom f neut) = (term908 A K _82352 k dom f neut)) = ((term902 A K _82352 k dom f neut) = (term927 A K _82352 k dom f neut)).
Proof. exact (MK_COMB (@lem6435954 A K _82352 k dom f neut) (@lem6435965 A K _82352 k dom f neut)). Qed.
Lemma lem6435967 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term902 A K _82352 k dom f neut) = (term927 A K _82352 k dom f neut).
Proof. exact (EQ_MP (@lem6435966 A K _82352 k dom f neut) (@lem6435941 A K _82352 k dom f neut)). Qed.
Lemma lem6435968 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term793 A K _82352 k dom f neut) = (term927 A K _82352 k dom f neut).
Proof. exact (TRANS (@lem6435937 A K _82352 k dom f neut) (@lem6435967 A K _82352 k dom f neut)). Qed.
Lemma lem6435969 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term800 A K _82352 k dom f) = (term928 A K _82352 k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6435968 A K _82352 k dom f neut)). Qed.
Lemma lem6435970 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6435971 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term815 A K _82352 k dom f) = (term929 A K _82352 k dom f).
Proof. exact (MK_COMB (@lem6435970 A) (@lem6435969 A K _82352 k dom f)). Qed.
Lemma lem6435973 {A B : Type'} (P : type1413 A B) : (term903 A B P) = (term904 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem6435974 {A K : Type'} (P : type1373 A K) : (term930 A K P) = (term931 A K P).
Proof. exact (@lem6435973 A (K -> K) P). Qed.
Lemma lem6435975 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term932 A K _82352 k dom f) = (term933 A K _82352 k dom f).
Proof. exact (@lem6435974 A K (term934 A K _82352 k dom f)). Qed.
Lemma lem6435976 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term935 A K _82352 k dom f neut) = (term926 A K _82352 k dom f neut).
Proof. exact (eq_refl (term935 A K _82352 k dom f neut)). Qed.
Lemma lem6435977 {K : Type'} (i : K -> K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6435978 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K -> K) : (term936 A K _82352 k dom f neut i) = (term937 A K _82352 k dom f neut i).
Proof. exact (MK_COMB (@lem6435976 A K _82352 k dom f neut) (@lem6435977 K i)). Qed.
Lemma lem6435979 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K -> K) : (term937 A K _82352 k dom f neut i) = (term924 A K _82352 k dom f neut i).
Proof. exact (eq_refl (term937 A K _82352 k dom f neut i)). Qed.
Lemma lem6435980 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K -> K) : (term936 A K _82352 k dom f neut i) = (term924 A K _82352 k dom f neut i).
Proof. exact (TRANS (@lem6435978 A K _82352 k dom f neut i) (@lem6435979 A K _82352 k dom f neut i)). Qed.
Lemma lem6435981 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term938 A K _82352 k dom f neut) = (term926 A K _82352 k dom f neut).
Proof. exact (fun_ext (fun i : K -> K => @lem6435980 A K _82352 k dom f neut i)). Qed.
Lemma lem6435982 {K : Type'} : (@ex (K -> K)) = (@ex (K -> K)).
Proof. exact (eq_refl (@ex (K -> K))). Qed.
Lemma lem6435983 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term939 A K _82352 k dom f neut) = (term927 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6435982 K) (@lem6435981 A K _82352 k dom f neut)). Qed.
Lemma lem6435984 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term940 A K _82352 k dom f) = (term928 A K _82352 k dom f).
Proof. exact (fun_ext (fun neut : A => @lem6435983 A K _82352 k dom f neut)). Qed.
Lemma lem6435985 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6435986 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term932 A K _82352 k dom f) = (term929 A K _82352 k dom f).
Proof. exact (MK_COMB (@lem6435985 A) (@lem6435984 A K _82352 k dom f)). Qed.
Lemma lem6435987 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6435988 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term941 A K _82352 k dom f) = (term942 A K _82352 k dom f).
Proof. exact (MK_COMB (@lem6435987) (@lem6435986 A K _82352 k dom f)). Qed.
Lemma lem6435989 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term935 A K _82352 k dom f neut) = (term926 A K _82352 k dom f neut).
Proof. exact (eq_refl (term935 A K _82352 k dom f neut)). Qed.
Lemma lem6435990 {A K : Type'} (i : type1411 A K) (neut : A) : (i neut) = (i neut).
Proof. exact (eq_refl (i neut)). Qed.
Lemma lem6435991 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (i : type1411 A K) (neut : A) : (term943 A K _82352 k dom f i neut) = (term944 A K _82352 k dom f i neut).
Proof. exact (MK_COMB (@lem6435989 A K _82352 k dom f neut) (@lem6435990 A K i neut)). Qed.
Lemma lem6435992 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (i : type1411 A K) (neut : A) : (term944 A K _82352 k dom f i neut) = (term945 A K _82352 k dom f i neut).
Proof. exact (eq_refl (term944 A K _82352 k dom f i neut)). Qed.
Lemma lem6435993 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (i : type1411 A K) (neut : A) : (term943 A K _82352 k dom f i neut) = (term945 A K _82352 k dom f i neut).
Proof. exact (TRANS (@lem6435991 A K _82352 k dom f i neut) (@lem6435992 A K _82352 k dom f i neut)). Qed.
Lemma lem6435994 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (i : type1411 A K) : (term946 A K _82352 k dom f i) = (term947 A K _82352 k dom f i).
Proof. exact (fun_ext (fun neut : A => @lem6435993 A K _82352 k dom f i neut)). Qed.
Lemma lem6435995 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem6435996 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (i : type1411 A K) : (term948 A K _82352 k dom f i) = (term949 A K _82352 k dom f i).
Proof. exact (MK_COMB (@lem6435995 A) (@lem6435994 A K _82352 k dom f i)). Qed.
Lemma lem6435997 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term950 A K _82352 k dom f) = (term951 A K _82352 k dom f).
Proof. exact (fun_ext (fun i : type1411 A K => @lem6435996 A K _82352 k dom f i)). Qed.
Lemma lem6435998 {A K : Type'} : (@ex (A -> K -> K)) = (@ex (A -> K -> K)).
Proof. exact (eq_refl (@ex (A -> K -> K))). Qed.
Lemma lem6435999 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term933 A K _82352 k dom f) = (term952 A K _82352 k dom f).
Proof. exact (MK_COMB (@lem6435998 A K) (@lem6435997 A K _82352 k dom f)). Qed.
Lemma lem6436000 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : ((term932 A K _82352 k dom f) = (term933 A K _82352 k dom f)) = ((term929 A K _82352 k dom f) = (term952 A K _82352 k dom f)).
Proof. exact (MK_COMB (@lem6435988 A K _82352 k dom f) (@lem6435999 A K _82352 k dom f)). Qed.
Lemma lem6436001 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term929 A K _82352 k dom f) = (term952 A K _82352 k dom f).
Proof. exact (EQ_MP (@lem6436000 A K _82352 k dom f) (@lem6435975 A K _82352 k dom f)). Qed.
Lemma lem6436002 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term815 A K _82352 k dom f) = (term952 A K _82352 k dom f).
Proof. exact (TRANS (@lem6435971 A K _82352 k dom f) (@lem6436001 A K _82352 k dom f)). Qed.
Lemma lem6436003 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term824 A K _82352 k dom) = (term953 A K _82352 k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6436002 A K _82352 k dom f)). Qed.
Lemma lem6436004 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6436005 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term839 A K _82352 k dom) = (term954 A K _82352 k dom).
Proof. exact (MK_COMB (@lem6436004 A K) (@lem6436003 A K _82352 k dom)). Qed.
Lemma lem6436007 {A B : Type'} (P : type1413 A B) : (term903 A B P) = (term904 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem6436008 {A K : Type'} (P : type778 A K) : (term955 A K P) = (term956 A K P).
Proof. exact (@lem6436007 (K -> A) (type1411 A K) P). Qed.
Lemma lem6436009 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term957 A K _82352 k dom) = (term958 A K _82352 k dom).
Proof. exact (@lem6436008 A K (term959 A K _82352 k dom)). Qed.
Lemma lem6436010 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term960 A K _82352 k dom f) = (term951 A K _82352 k dom f).
Proof. exact (eq_refl (term960 A K _82352 k dom f)). Qed.
Lemma lem6436011 {A K : Type'} (i : type1411 A K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6436012 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (i : type1411 A K) : (term961 A K _82352 k dom f i) = (term962 A K _82352 k dom f i).
Proof. exact (MK_COMB (@lem6436010 A K _82352 k dom f) (@lem6436011 A K i)). Qed.
Lemma lem6436013 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (i : type1411 A K) : (term962 A K _82352 k dom f i) = (term949 A K _82352 k dom f i).
Proof. exact (eq_refl (term962 A K _82352 k dom f i)). Qed.
Lemma lem6436014 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (i : type1411 A K) : (term961 A K _82352 k dom f i) = (term949 A K _82352 k dom f i).
Proof. exact (TRANS (@lem6436012 A K _82352 k dom f i) (@lem6436013 A K _82352 k dom f i)). Qed.
Lemma lem6436015 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term963 A K _82352 k dom f) = (term951 A K _82352 k dom f).
Proof. exact (fun_ext (fun i : type1411 A K => @lem6436014 A K _82352 k dom f i)). Qed.
Lemma lem6436016 {A K : Type'} : (@ex (A -> K -> K)) = (@ex (A -> K -> K)).
Proof. exact (eq_refl (@ex (A -> K -> K))). Qed.
Lemma lem6436017 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term964 A K _82352 k dom f) = (term952 A K _82352 k dom f).
Proof. exact (MK_COMB (@lem6436016 A K) (@lem6436015 A K _82352 k dom f)). Qed.
Lemma lem6436018 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term965 A K _82352 k dom) = (term953 A K _82352 k dom).
Proof. exact (fun_ext (fun f : K -> A => @lem6436017 A K _82352 k dom f)). Qed.
Lemma lem6436019 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6436020 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term957 A K _82352 k dom) = (term954 A K _82352 k dom).
Proof. exact (MK_COMB (@lem6436019 A K) (@lem6436018 A K _82352 k dom)). Qed.
Lemma lem6436021 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6436022 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term966 A K _82352 k dom) = (term967 A K _82352 k dom).
Proof. exact (MK_COMB (@lem6436021) (@lem6436020 A K _82352 k dom)). Qed.
Lemma lem6436023 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term960 A K _82352 k dom f) = (term951 A K _82352 k dom f).
Proof. exact (eq_refl (term960 A K _82352 k dom f)). Qed.
Lemma lem6436024 {A K : Type'} (i : type792 A K) (f : K -> A) : (i f) = (i f).
Proof. exact (eq_refl (i f)). Qed.
Lemma lem6436025 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (i : type792 A K) (f : K -> A) : (term968 A K _82352 k dom i f) = (term969 A K _82352 k dom i f).
Proof. exact (MK_COMB (@lem6436023 A K _82352 k dom f) (@lem6436024 A K i f)). Qed.
Lemma lem6436026 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (i : type792 A K) (f : K -> A) : (term969 A K _82352 k dom i f) = (term970 A K _82352 k dom i f).
Proof. exact (eq_refl (term969 A K _82352 k dom i f)). Qed.
Lemma lem6436027 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (i : type792 A K) (f : K -> A) : (term968 A K _82352 k dom i f) = (term970 A K _82352 k dom i f).
Proof. exact (TRANS (@lem6436025 A K _82352 k dom i f) (@lem6436026 A K _82352 k dom i f)). Qed.
Lemma lem6436028 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (i : type792 A K) : (term971 A K _82352 k dom i) = (term972 A K _82352 k dom i).
Proof. exact (fun_ext (fun f : K -> A => @lem6436027 A K _82352 k dom i f)). Qed.
Lemma lem6436029 {A K : Type'} : (@all (K -> A)) = (@all (K -> A)).
Proof. exact (eq_refl (@all (K -> A))). Qed.
Lemma lem6436030 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (i : type792 A K) : (term973 A K _82352 k dom i) = (term974 A K _82352 k dom i).
Proof. exact (MK_COMB (@lem6436029 A K) (@lem6436028 A K _82352 k dom i)). Qed.
Lemma lem6436031 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term975 A K _82352 k dom) = (term976 A K _82352 k dom).
Proof. exact (fun_ext (fun i : type792 A K => @lem6436030 A K _82352 k dom i)). Qed.
Lemma lem6436032 {A K : Type'} : (@ex ((K -> A) -> A -> K -> K)) = (@ex ((K -> A) -> A -> K -> K)).
Proof. exact (eq_refl (@ex ((K -> A) -> A -> K -> K))). Qed.
Lemma lem6436033 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term958 A K _82352 k dom) = (term977 A K _82352 k dom).
Proof. exact (MK_COMB (@lem6436032 A K) (@lem6436031 A K _82352 k dom)). Qed.
Lemma lem6436034 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : ((term957 A K _82352 k dom) = (term958 A K _82352 k dom)) = ((term954 A K _82352 k dom) = (term977 A K _82352 k dom)).
Proof. exact (MK_COMB (@lem6436022 A K _82352 k dom) (@lem6436033 A K _82352 k dom)). Qed.
Lemma lem6436035 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term954 A K _82352 k dom) = (term977 A K _82352 k dom).
Proof. exact (EQ_MP (@lem6436034 A K _82352 k dom) (@lem6436009 A K _82352 k dom)). Qed.
Lemma lem6436036 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term839 A K _82352 k dom) = (term977 A K _82352 k dom).
Proof. exact (TRANS (@lem6436005 A K _82352 k dom) (@lem6436035 A K _82352 k dom)). Qed.
Lemma lem6436037 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term848 A K _82352 k) = (term978 A K _82352 k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6436036 A K _82352 k dom)). Qed.
Lemma lem6436038 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6436039 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term863 A K _82352 k) = (term979 A K _82352 k).
Proof. exact (MK_COMB (@lem6436038 A) (@lem6436037 A K _82352 k)). Qed.
Lemma lem6436041 {A B : Type'} (P : type1413 A B) : (term903 A B P) = (term904 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem6436042 {A K : Type'} (P : type604 A K) : (term980 A K P) = (term981 A K P).
Proof. exact (@lem6436041 (A -> Prop) (type792 A K) P). Qed.
Lemma lem6436043 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term982 A K _82352 k) = (term983 A K _82352 k).
Proof. exact (@lem6436042 A K (term984 A K _82352 k)). Qed.
Lemma lem6436044 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term985 A K _82352 k dom) = (term976 A K _82352 k dom).
Proof. exact (eq_refl (term985 A K _82352 k dom)). Qed.
Lemma lem6436045 {A K : Type'} (i : type792 A K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6436046 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (i : type792 A K) : (term986 A K _82352 k dom i) = (term987 A K _82352 k dom i).
Proof. exact (MK_COMB (@lem6436044 A K _82352 k dom) (@lem6436045 A K i)). Qed.
Lemma lem6436047 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (i : type792 A K) : (term987 A K _82352 k dom i) = (term974 A K _82352 k dom i).
Proof. exact (eq_refl (term987 A K _82352 k dom i)). Qed.
Lemma lem6436048 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (i : type792 A K) : (term986 A K _82352 k dom i) = (term974 A K _82352 k dom i).
Proof. exact (TRANS (@lem6436046 A K _82352 k dom i) (@lem6436047 A K _82352 k dom i)). Qed.
Lemma lem6436049 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term988 A K _82352 k dom) = (term976 A K _82352 k dom).
Proof. exact (fun_ext (fun i : type792 A K => @lem6436048 A K _82352 k dom i)). Qed.
Lemma lem6436050 {A K : Type'} : (@ex ((K -> A) -> A -> K -> K)) = (@ex ((K -> A) -> A -> K -> K)).
Proof. exact (eq_refl (@ex ((K -> A) -> A -> K -> K))). Qed.
Lemma lem6436051 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term989 A K _82352 k dom) = (term977 A K _82352 k dom).
Proof. exact (MK_COMB (@lem6436050 A K) (@lem6436049 A K _82352 k dom)). Qed.
Lemma lem6436052 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term990 A K _82352 k) = (term978 A K _82352 k).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6436051 A K _82352 k dom)). Qed.
Lemma lem6436053 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6436054 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term982 A K _82352 k) = (term979 A K _82352 k).
Proof. exact (MK_COMB (@lem6436053 A) (@lem6436052 A K _82352 k)). Qed.
Lemma lem6436055 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6436056 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term991 A K _82352 k) = (term992 A K _82352 k).
Proof. exact (MK_COMB (@lem6436055) (@lem6436054 A K _82352 k)). Qed.
Lemma lem6436057 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (term985 A K _82352 k dom) = (term976 A K _82352 k dom).
Proof. exact (eq_refl (term985 A K _82352 k dom)). Qed.
Lemma lem6436058 {A K : Type'} (i : type649 A K) (dom : A -> Prop) : (i dom) = (i dom).
Proof. exact (eq_refl (i dom)). Qed.
Lemma lem6436059 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (i : type649 A K) (dom : A -> Prop) : (term993 A K _82352 k i dom) = (term994 A K _82352 k i dom).
Proof. exact (MK_COMB (@lem6436057 A K _82352 k dom) (@lem6436058 A K i dom)). Qed.
Lemma lem6436060 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (i : type649 A K) (dom : A -> Prop) : (term994 A K _82352 k i dom) = (term995 A K _82352 k i dom).
Proof. exact (eq_refl (term994 A K _82352 k i dom)). Qed.
Lemma lem6436061 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (i : type649 A K) (dom : A -> Prop) : (term993 A K _82352 k i dom) = (term995 A K _82352 k i dom).
Proof. exact (TRANS (@lem6436059 A K _82352 k i dom) (@lem6436060 A K _82352 k i dom)). Qed.
Lemma lem6436062 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (i : type649 A K) : (term996 A K _82352 k i) = (term997 A K _82352 k i).
Proof. exact (fun_ext (fun dom : A -> Prop => @lem6436061 A K _82352 k i dom)). Qed.
Lemma lem6436063 {A : Type'} : (@all (A -> Prop)) = (@all (A -> Prop)).
Proof. exact (eq_refl (@all (A -> Prop))). Qed.
Lemma lem6436064 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (i : type649 A K) : (term998 A K _82352 k i) = (term999 A K _82352 k i).
Proof. exact (MK_COMB (@lem6436063 A) (@lem6436062 A K _82352 k i)). Qed.
Lemma lem6436065 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term1000 A K _82352 k) = (term1001 A K _82352 k).
Proof. exact (fun_ext (fun i : type649 A K => @lem6436064 A K _82352 k i)). Qed.
Lemma lem6436066 {A K : Type'} : (@ex ((A -> Prop) -> (K -> A) -> A -> K -> K)) = (@ex ((A -> Prop) -> (K -> A) -> A -> K -> K)).
Proof. exact (eq_refl (@ex ((A -> Prop) -> (K -> A) -> A -> K -> K))). Qed.
Lemma lem6436067 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term983 A K _82352 k) = (term1002 A K _82352 k).
Proof. exact (MK_COMB (@lem6436066 A K) (@lem6436065 A K _82352 k)). Qed.
Lemma lem6436068 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : ((term982 A K _82352 k) = (term983 A K _82352 k)) = ((term979 A K _82352 k) = (term1002 A K _82352 k)).
Proof. exact (MK_COMB (@lem6436056 A K _82352 k) (@lem6436067 A K _82352 k)). Qed.
Lemma lem6436069 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term979 A K _82352 k) = (term1002 A K _82352 k).
Proof. exact (EQ_MP (@lem6436068 A K _82352 k) (@lem6436043 A K _82352 k)). Qed.
Lemma lem6436070 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term863 A K _82352 k) = (term1002 A K _82352 k).
Proof. exact (TRANS (@lem6436039 A K _82352 k) (@lem6436069 A K _82352 k)). Qed.
Lemma lem6436071 {A K : Type'} (_82352 : type835 A K) : (term870 A K _82352) = (term1003 A K _82352).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6436070 A K _82352 k)). Qed.
Lemma lem6436072 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6436073 {A K : Type'} (_82352 : type835 A K) : (term885 A K _82352) = (term1004 A K _82352).
Proof. exact (MK_COMB (@lem6436072 K) (@lem6436071 A K _82352)). Qed.
Lemma lem6436075 {A B : Type'} (P : type1413 A B) : (term903 A B P) = (term904 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem6436076 {A K : Type'} (P : type819 A K) : (term1005 A K P) = (term1006 A K P).
Proof. exact (@lem6436075 (K -> Prop) (type649 A K) P). Qed.
Lemma lem6436077 {A K : Type'} (_82352 : type835 A K) : (term1007 A K _82352) = (term1008 A K _82352).
Proof. exact (@lem6436076 A K (term1009 A K _82352)). Qed.
Lemma lem6436078 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term1010 A K _82352 k) = (term1001 A K _82352 k).
Proof. exact (eq_refl (term1010 A K _82352 k)). Qed.
Lemma lem6436079 {A K : Type'} (i : type649 A K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6436080 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (i : type649 A K) : (term1011 A K _82352 k i) = (term1012 A K _82352 k i).
Proof. exact (MK_COMB (@lem6436078 A K _82352 k) (@lem6436079 A K i)). Qed.
Lemma lem6436081 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (i : type649 A K) : (term1012 A K _82352 k i) = (term999 A K _82352 k i).
Proof. exact (eq_refl (term1012 A K _82352 k i)). Qed.
Lemma lem6436082 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (i : type649 A K) : (term1011 A K _82352 k i) = (term999 A K _82352 k i).
Proof. exact (TRANS (@lem6436080 A K _82352 k i) (@lem6436081 A K _82352 k i)). Qed.
Lemma lem6436083 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term1013 A K _82352 k) = (term1001 A K _82352 k).
Proof. exact (fun_ext (fun i : type649 A K => @lem6436082 A K _82352 k i)). Qed.
Lemma lem6436084 {A K : Type'} : (@ex ((A -> Prop) -> (K -> A) -> A -> K -> K)) = (@ex ((A -> Prop) -> (K -> A) -> A -> K -> K)).
Proof. exact (eq_refl (@ex ((A -> Prop) -> (K -> A) -> A -> K -> K))). Qed.
Lemma lem6436085 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term1014 A K _82352 k) = (term1002 A K _82352 k).
Proof. exact (MK_COMB (@lem6436084 A K) (@lem6436083 A K _82352 k)). Qed.
Lemma lem6436086 {A K : Type'} (_82352 : type835 A K) : (term1015 A K _82352) = (term1003 A K _82352).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6436085 A K _82352 k)). Qed.
Lemma lem6436087 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6436088 {A K : Type'} (_82352 : type835 A K) : (term1007 A K _82352) = (term1004 A K _82352).
Proof. exact (MK_COMB (@lem6436087 K) (@lem6436086 A K _82352)). Qed.
Lemma lem6436089 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6436090 {A K : Type'} (_82352 : type835 A K) : (term1016 A K _82352) = (term1017 A K _82352).
Proof. exact (MK_COMB (@lem6436089) (@lem6436088 A K _82352)). Qed.
Lemma lem6436091 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (term1010 A K _82352 k) = (term1001 A K _82352 k).
Proof. exact (eq_refl (term1010 A K _82352 k)). Qed.
Lemma lem6436092 {A K : Type'} (i : type834 A K) (k : K -> Prop) : (i k) = (i k).
Proof. exact (eq_refl (i k)). Qed.
Lemma lem6436093 {A K : Type'} (_82352 : type835 A K) (i : type834 A K) (k : K -> Prop) : (term1018 A K _82352 i k) = (term1019 A K _82352 i k).
Proof. exact (MK_COMB (@lem6436091 A K _82352 k) (@lem6436092 A K i k)). Qed.
Lemma lem6436094 {A K : Type'} (_82352 : type835 A K) (i : type834 A K) (k : K -> Prop) : (term1019 A K _82352 i k) = (term1020 A K _82352 i k).
Proof. exact (eq_refl (term1019 A K _82352 i k)). Qed.
Lemma lem6436095 {A K : Type'} (_82352 : type835 A K) (i : type834 A K) (k : K -> Prop) : (term1018 A K _82352 i k) = (term1020 A K _82352 i k).
Proof. exact (TRANS (@lem6436093 A K _82352 i k) (@lem6436094 A K _82352 i k)). Qed.
Lemma lem6436096 {A K : Type'} (_82352 : type835 A K) (i : type834 A K) : (term1021 A K _82352 i) = (term1022 A K _82352 i).
Proof. exact (fun_ext (fun k : K -> Prop => @lem6436095 A K _82352 i k)). Qed.
Lemma lem6436097 {K : Type'} : (@all (K -> Prop)) = (@all (K -> Prop)).
Proof. exact (eq_refl (@all (K -> Prop))). Qed.
Lemma lem6436098 {A K : Type'} (_82352 : type835 A K) (i : type834 A K) : (term1023 A K _82352 i) = (term1024 A K _82352 i).
Proof. exact (MK_COMB (@lem6436097 K) (@lem6436096 A K _82352 i)). Qed.
Lemma lem6436099 {A K : Type'} (_82352 : type835 A K) : (term1025 A K _82352) = (term1026 A K _82352).
Proof. exact (fun_ext (fun i : type834 A K => @lem6436098 A K _82352 i)). Qed.
Lemma lem6436100 {A K : Type'} : (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K)) = (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K)).
Proof. exact (eq_refl (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K))). Qed.
Lemma lem6436101 {A K : Type'} (_82352 : type835 A K) : (term1008 A K _82352) = (term1027 A K _82352).
Proof. exact (MK_COMB (@lem6436100 A K) (@lem6436099 A K _82352)). Qed.
Lemma lem6436102 {A K : Type'} (_82352 : type835 A K) : ((term1007 A K _82352) = (term1008 A K _82352)) = ((term1004 A K _82352) = (term1027 A K _82352)).
Proof. exact (MK_COMB (@lem6436090 A K _82352) (@lem6436101 A K _82352)). Qed.
Lemma lem6436103 {A K : Type'} (_82352 : type835 A K) : (term1004 A K _82352) = (term1027 A K _82352).
Proof. exact (EQ_MP (@lem6436102 A K _82352) (@lem6436077 A K _82352)). Qed.
Lemma lem6436104 {A K : Type'} (_82352 : type835 A K) : (term885 A K _82352) = (term1027 A K _82352).
Proof. exact (TRANS (@lem6436073 A K _82352) (@lem6436103 A K _82352)). Qed.
Lemma lem6436105 {A K : Type'} (_82352 : type835 A K) : (term882 A K _82352) = (term882 A K _82352).
Proof. exact (eq_refl (term882 A K _82352)). Qed.
Lemma lem6436106 {A K : Type'} (_82352 : type835 A K) : (term886 A K _82352) = (term1028 A K _82352).
Proof. exact (MK_COMB (@lem6436105 A K _82352) (@lem6436104 A K _82352)). Qed.
Lemma lem6436108 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1029 A P Q) = (term1030 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem6436109 {A K : Type'} (P : Prop) (Q : type210 A K) : (term1031 A K P Q) = (term1032 A K P Q).
Proof. exact (@lem6436108 (type834 A K) P Q). Qed.
Lemma lem6436110 {A K : Type'} (_82352 : type835 A K) : (term1033 A K _82352) = (term1034 A K _82352).
Proof. exact (@lem6436109 A K (term880 A K _82352) (term1026 A K _82352)). Qed.
Lemma lem6436111 {A K : Type'} (_82352 : type835 A K) (i : type834 A K) : (term1035 A K _82352 i) = (term1024 A K _82352 i).
Proof. exact (eq_refl (term1035 A K _82352 i)). Qed.
Lemma lem6436112 {A K : Type'} (_82352 : type835 A K) : (term1036 A K _82352) = (term1026 A K _82352).
Proof. exact (fun_ext (fun i : type834 A K => @lem6436111 A K _82352 i)). Qed.
Lemma lem6436113 {A K : Type'} : (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K)) = (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K)).
Proof. exact (eq_refl (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K))). Qed.
Lemma lem6436114 {A K : Type'} (_82352 : type835 A K) : (term1037 A K _82352) = (term1027 A K _82352).
Proof. exact (MK_COMB (@lem6436113 A K) (@lem6436112 A K _82352)). Qed.
Lemma lem6436115 {A K : Type'} (_82352 : type835 A K) : (term882 A K _82352) = (term882 A K _82352).
Proof. exact (eq_refl (term882 A K _82352)). Qed.
Lemma lem6436116 {A K : Type'} (_82352 : type835 A K) : (term1033 A K _82352) = (term1028 A K _82352).
Proof. exact (MK_COMB (@lem6436115 A K _82352) (@lem6436114 A K _82352)). Qed.
Lemma lem6436117 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6436118 {A K : Type'} (_82352 : type835 A K) : (term1038 A K _82352) = (term1039 A K _82352).
Proof. exact (MK_COMB (@lem6436117) (@lem6436116 A K _82352)). Qed.
Lemma lem6436119 {A K : Type'} (_82352 : type835 A K) (i : type834 A K) : (term1035 A K _82352 i) = (term1024 A K _82352 i).
Proof. exact (eq_refl (term1035 A K _82352 i)). Qed.
Lemma lem6436120 {A K : Type'} (_82352 : type835 A K) : (term882 A K _82352) = (term882 A K _82352).
Proof. exact (eq_refl (term882 A K _82352)). Qed.
Lemma lem6436121 {A K : Type'} (_82352 : type835 A K) (i : type834 A K) : (term1040 A K _82352 i) = (term1041 A K _82352 i).
Proof. exact (MK_COMB (@lem6436120 A K _82352) (@lem6436119 A K _82352 i)). Qed.
Lemma lem6436122 {A K : Type'} (_82352 : type835 A K) : (term1042 A K _82352) = (term1043 A K _82352).
Proof. exact (fun_ext (fun i : type834 A K => @lem6436121 A K _82352 i)). Qed.
Lemma lem6436123 {A K : Type'} : (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K)) = (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K)).
Proof. exact (eq_refl (@ex ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> K))). Qed.
Lemma lem6436124 {A K : Type'} (_82352 : type835 A K) : (term1034 A K _82352) = (term1044 A K _82352).
Proof. exact (MK_COMB (@lem6436123 A K) (@lem6436122 A K _82352)). Qed.
Lemma lem6436125 {A K : Type'} (_82352 : type835 A K) : ((term1033 A K _82352) = (term1034 A K _82352)) = ((term1028 A K _82352) = (term1044 A K _82352)).
Proof. exact (MK_COMB (@lem6436118 A K _82352) (@lem6436124 A K _82352)). Qed.
Lemma lem6436126 {A K : Type'} (_82352 : type835 A K) : (term1028 A K _82352) = (term1044 A K _82352).
Proof. exact (EQ_MP (@lem6436125 A K _82352) (@lem6436110 A K _82352)). Qed.
Lemma lem6436127 {A K : Type'} (_82352 : type835 A K) : (term886 A K _82352) = (term1044 A K _82352).
Proof. exact (TRANS (@lem6436106 A K _82352) (@lem6436126 A K _82352)). Qed.
Lemma lem6436128 {A K : Type'} (_82352 : type835 A K) : (term772 A K _82352) = (term1044 A K _82352).
Proof. exact (TRANS (@lem6435914 A K _82352) (@lem6436127 A K _82352)). Qed.
Lemma lem6436129 {A K : Type'} (_82352 : type835 A K) : (term737 A K _82352) = (term1044 A K _82352).
Proof. exact (TRANS (@lem6435147 A K _82352) (@lem6436128 A K _82352)). Qed.
Lemma lem6436130 {A K : Type'} (_82352 : type835 A K) (h1 : term737 A K _82352) : term1044 A K _82352.
Proof. exact (EQ_MP (@lem6436129 A K _82352) (@lem6435097 A K _82352 h1)). Qed.
Lemma lem6436371 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1313 A K k dom f x neut) = (term381 A K k dom f x neut).
Proof. exact (@lem16933 (term381 A K k dom f x neut)). Qed.
Lemma lem6436372 {K : Type'} (P : K -> Prop) : (term1052 K P) = (term1053 K P).
Proof. exact (@lem18392 K P). Qed.
Lemma lem6436373 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term407 A K k dom f neut) = (term1314 A K k dom f neut).
Proof. exact (@lem6436372 K (term405 A K k dom f neut)). Qed.
Lemma lem6436374 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1315 A K k dom f neut x) = (term403 A K k dom f x neut).
Proof. exact (eq_refl (term1315 A K k dom f neut x)). Qed.
Lemma lem6436375 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6436376 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1316 A K k dom f neut x) = (term1313 A K k dom f x neut).
Proof. exact (MK_COMB (@lem6436375) (@lem6436374 A K k dom f x neut)). Qed.
Lemma lem6436377 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1316 A K k dom f neut x) = (term381 A K k dom f x neut).
Proof. exact (TRANS (@lem6436376 A K k dom f x neut) (@lem6436371 A K k dom f x neut)). Qed.
Lemma lem6436378 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1317 A K k dom f neut) = (term466 A K k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6436377 A K k dom f x neut)). Qed.
Lemma lem6436379 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6436380 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1314 A K k dom f neut) = (term1318 A K k dom f neut).
Proof. exact (MK_COMB (@lem6436379 K) (@lem6436378 A K k dom f neut)). Qed.
Lemma lem6436381 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term407 A K k dom f neut) = (term1318 A K k dom f neut).
Proof. exact (TRANS (@lem6436373 A K k dom f neut) (@lem6436380 A K k dom f neut)). Qed.
Lemma lem6436383 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term639 A K _82352 k dom f neut) = (term639 A K _82352 k dom f neut).
Proof. exact (eq_refl (term639 A K _82352 k dom f neut)). Qed.
Lemma lem6436384 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term640 A K _82352 k dom f neut) = (term1319 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6436383 A K _82352 k dom f neut) (@lem6436381 A K k dom f neut)). Qed.
Lemma lem6436386 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term1537 A K _82351 k dom f neut i) = (term1537 A K _82351 k dom f neut i).
Proof. exact (eq_refl (term1537 A K _82351 k dom f neut i)). Qed.
Lemma lem6436387 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1583 A K _82351 i _82352 k dom f neut) = (term1621 A K _82351 i _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6436386 A K _82351 k dom f neut i) (@lem6436384 A K _82352 k dom f neut)). Qed.
Lemma lem6436418 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1029 A P Q) = (term1030 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem6436419 {K : Type'} (P : Prop) (Q : K -> Prop) : (term1029 K P Q) = (term1030 K P Q).
Proof. exact (@lem6436418 K P Q). Qed.
Lemma lem6436420 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1321 A K _82352 k dom f neut) = (term1322 A K _82352 k dom f neut).
Proof. exact (@lem6436419 K (term638 A K _82352 k dom f neut) (term466 A K k dom f neut)). Qed.
Lemma lem6436421 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1323 A K k dom f neut x) = (term381 A K k dom f x neut).
Proof. exact (eq_refl (term1323 A K k dom f neut x)). Qed.
Lemma lem6436422 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1324 A K k dom f neut) = (term466 A K k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6436421 A K k dom f x neut)). Qed.
Lemma lem6436423 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6436424 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1325 A K k dom f neut) = (term1318 A K k dom f neut).
Proof. exact (MK_COMB (@lem6436423 K) (@lem6436422 A K k dom f neut)). Qed.
Lemma lem6436425 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term639 A K _82352 k dom f neut) = (term639 A K _82352 k dom f neut).
Proof. exact (eq_refl (term639 A K _82352 k dom f neut)). Qed.
Lemma lem6436426 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1321 A K _82352 k dom f neut) = (term1319 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6436425 A K _82352 k dom f neut) (@lem6436424 A K k dom f neut)). Qed.
Lemma lem6436427 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6436428 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1326 A K _82352 k dom f neut) = (term1327 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6436427) (@lem6436426 A K _82352 k dom f neut)). Qed.
Lemma lem6436429 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1323 A K k dom f neut x) = (term381 A K k dom f x neut).
Proof. exact (eq_refl (term1323 A K k dom f neut x)). Qed.
Lemma lem6436430 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term639 A K _82352 k dom f neut) = (term639 A K _82352 k dom f neut).
Proof. exact (eq_refl (term639 A K _82352 k dom f neut)). Qed.
Lemma lem6436431 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1328 A K _82352 k dom f neut x) = (term1329 A K _82352 k dom f x neut).
Proof. exact (MK_COMB (@lem6436430 A K _82352 k dom f neut) (@lem6436429 A K k dom f x neut)). Qed.
Lemma lem6436432 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1330 A K _82352 k dom f neut) = (term1331 A K _82352 k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6436431 A K _82352 k dom f x neut)). Qed.
Lemma lem6436433 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6436434 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1322 A K _82352 k dom f neut) = (term1332 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6436433 K) (@lem6436432 A K _82352 k dom f neut)). Qed.
Lemma lem6436435 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term1321 A K _82352 k dom f neut) = (term1322 A K _82352 k dom f neut)) = ((term1319 A K _82352 k dom f neut) = (term1332 A K _82352 k dom f neut)).
Proof. exact (MK_COMB (@lem6436428 A K _82352 k dom f neut) (@lem6436434 A K _82352 k dom f neut)). Qed.
Lemma lem6436436 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1319 A K _82352 k dom f neut) = (term1332 A K _82352 k dom f neut).
Proof. exact (EQ_MP (@lem6436435 A K _82352 k dom f neut) (@lem6436420 A K _82352 k dom f neut)). Qed.
Lemma lem6436437 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term1537 A K _82351 k dom f neut i) = (term1537 A K _82351 k dom f neut i).
Proof. exact (eq_refl (term1537 A K _82351 k dom f neut i)). Qed.
Lemma lem6436438 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1621 A K _82351 i _82352 k dom f neut) = (term1622 A K _82351 i _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6436437 A K _82351 k dom f neut i) (@lem6436436 A K _82352 k dom f neut)). Qed.
Lemma lem6436440 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1029 A P Q) = (term1030 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem6436441 {K : Type'} (P : Prop) (Q : K -> Prop) : (term1029 K P Q) = (term1030 K P Q).
Proof. exact (@lem6436440 K P Q). Qed.
Lemma lem6436442 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1623 A K _82351 i _82352 k dom f neut) = (term1624 A K _82351 i _82352 k dom f neut).
Proof. exact (@lem6436441 K ((_82351 k dom f neut) = i) (term1331 A K _82352 k dom f neut)). Qed.
Lemma lem6436443 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1336 A K _82352 k dom f neut x) = (term1329 A K _82352 k dom f x neut).
Proof. exact (eq_refl (term1336 A K _82352 k dom f neut x)). Qed.
Lemma lem6436444 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1337 A K _82352 k dom f neut) = (term1331 A K _82352 k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6436443 A K _82352 k dom f x neut)). Qed.
Lemma lem6436445 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6436446 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1338 A K _82352 k dom f neut) = (term1332 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6436445 K) (@lem6436444 A K _82352 k dom f neut)). Qed.
Lemma lem6436447 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term1537 A K _82351 k dom f neut i) = (term1537 A K _82351 k dom f neut i).
Proof. exact (eq_refl (term1537 A K _82351 k dom f neut i)). Qed.
Lemma lem6436448 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1623 A K _82351 i _82352 k dom f neut) = (term1622 A K _82351 i _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6436447 A K _82351 k dom f neut i) (@lem6436446 A K _82352 k dom f neut)). Qed.
Lemma lem6436449 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6436450 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1625 A K _82351 i _82352 k dom f neut) = (term1626 A K _82351 i _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6436449) (@lem6436448 A K _82351 i _82352 k dom f neut)). Qed.
Lemma lem6436451 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1336 A K _82352 k dom f neut x) = (term1329 A K _82352 k dom f x neut).
Proof. exact (eq_refl (term1336 A K _82352 k dom f neut x)). Qed.
Lemma lem6436452 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term1537 A K _82351 k dom f neut i) = (term1537 A K _82351 k dom f neut i).
Proof. exact (eq_refl (term1537 A K _82351 k dom f neut i)). Qed.
Lemma lem6436453 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1627 A K _82351 i _82352 k dom f neut x) = (term1628 A K _82351 i _82352 k dom f x neut).
Proof. exact (MK_COMB (@lem6436452 A K _82351 k dom f neut i) (@lem6436451 A K _82352 k dom f x neut)). Qed.
Lemma lem6436454 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1629 A K _82351 i _82352 k dom f neut) = (term1630 A K _82351 i _82352 k dom f neut).
Proof. exact (fun_ext (fun x : K => @lem6436453 A K _82351 i _82352 k dom f x neut)). Qed.
Lemma lem6436455 {K : Type'} : (@ex K) = (@ex K).
Proof. exact (eq_refl (@ex K)). Qed.
Lemma lem6436456 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1624 A K _82351 i _82352 k dom f neut) = (term1631 A K _82351 i _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6436455 K) (@lem6436454 A K _82351 i _82352 k dom f neut)). Qed.
Lemma lem6436457 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term1623 A K _82351 i _82352 k dom f neut) = (term1624 A K _82351 i _82352 k dom f neut)) = ((term1622 A K _82351 i _82352 k dom f neut) = (term1631 A K _82351 i _82352 k dom f neut)).
Proof. exact (MK_COMB (@lem6436450 A K _82351 i _82352 k dom f neut) (@lem6436456 A K _82351 i _82352 k dom f neut)). Qed.
Lemma lem6436458 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1622 A K _82351 i _82352 k dom f neut) = (term1631 A K _82351 i _82352 k dom f neut).
Proof. exact (EQ_MP (@lem6436457 A K _82351 i _82352 k dom f neut) (@lem6436442 A K _82351 i _82352 k dom f neut)). Qed.
Lemma lem6436460 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1621 A K _82351 i _82352 k dom f neut) = (term1631 A K _82351 i _82352 k dom f neut).
Proof. exact (TRANS (@lem6436438 A K _82351 i _82352 k dom f neut) (@lem6436458 A K _82351 i _82352 k dom f neut)). Qed.
Lemma lem6436461 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1583 A K _82351 i _82352 k dom f neut) = (term1631 A K _82351 i _82352 k dom f neut).
Proof. exact (TRANS (@lem6436387 A K _82351 i _82352 k dom f neut) (@lem6436460 A K _82351 i _82352 k dom f neut)). Qed.
Lemma lem6436462 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term1583 A K _82351 i _82352 k dom f neut) : term1631 A K _82351 i _82352 k dom f neut.
Proof. exact (EQ_MP (@lem6436461 A K _82351 i _82352 k dom f neut) (@lem6435099 A K _82351 i _82352 k dom f neut h1)). Qed.
Lemma lem6436470 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1045 A K f x neut) = ((f x) = neut).
Proof. exact (@lem16933 ((f x) = neut)). Qed.
Lemma lem6436472 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1046 A K dom f x) = (term1046 A K dom f x).
Proof. exact (eq_refl (term1046 A K dom f x)). Qed.
Lemma lem6436473 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1047 A K dom f x neut) = (term1048 A K dom f x neut).
Proof. exact (MK_COMB (@lem6436472 A K dom f x) (@lem6436470 A K f x neut)). Qed.
Lemma lem6436474 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1049 A K dom f x neut) = (term1047 A K dom f x neut).
Proof. exact (@lem17045 (term367 A K dom f x) (term378 A K f x neut)). Qed.
Lemma lem6436475 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1049 A K dom f x neut) = (term1048 A K dom f x neut).
Proof. exact (TRANS (@lem6436474 A K dom f x neut) (@lem6436473 A K dom f x neut)). Qed.
Lemma lem6436480 {K : Type'} (k : K -> Prop) (x : K) : (term1066 K k x) = (term1066 K k x).
Proof. exact (eq_refl (term1066 K k x)). Qed.
Lemma lem6436481 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1070 A K k dom f x neut) = (term1071 A K k dom f x neut).
Proof. exact (MK_COMB (@lem6436480 K k x) (@lem6436475 A K dom f x neut)). Qed.
Lemma lem6436482 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term403 A K k dom f x neut) = (term1070 A K k dom f x neut).
Proof. exact (@lem17045 (k x) (term379 A K dom f x neut)). Qed.
Lemma lem6436483 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term403 A K k dom f x neut) = (term1071 A K k dom f x neut).
Proof. exact (TRANS (@lem6436482 A K k dom f x neut) (@lem6436481 A K k dom f x neut)). Qed.
Lemma lem6436490 {K : Type'} (x : K) (i : K) : (term1346 K x i) = (x = i).
Proof. exact (@lem16933 (x = i)). Qed.
Lemma lem6436491 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6436492 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1347 A K k dom f x neut) = (term1348 A K k dom f x neut).
Proof. exact (MK_COMB (@lem6436491) (@lem6436483 A K k dom f x neut)). Qed.
Lemma lem6436493 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) : (term1349 A K k dom f neut x i) = (term1350 A K k dom f neut x i).
Proof. exact (MK_COMB (@lem6436492 A K k dom f x neut) (@lem6436490 K x i)). Qed.
Lemma lem6436494 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) : (term1351 A K k dom f neut x i) = (term1349 A K k dom f neut x i).
Proof. exact (@lem17045 (term381 A K k dom f x neut) (term434 K x i)). Qed.
Lemma lem6436495 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) : (term1351 A K k dom f neut x i) = (term1350 A K k dom f neut x i).
Proof. exact (TRANS (@lem6436494 A K k dom f neut x i) (@lem6436493 A K k dom f neut x i)). Qed.
Lemma lem6436504 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1045 A K f x neut) = ((f x) = neut).
Proof. exact (@lem16933 ((f x) = neut)). Qed.
Lemma lem6436506 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1046 A K dom f x) = (term1046 A K dom f x).
Proof. exact (eq_refl (term1046 A K dom f x)). Qed.
Lemma lem6436507 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1047 A K dom f x neut) = (term1048 A K dom f x neut).
Proof. exact (MK_COMB (@lem6436506 A K dom f x) (@lem6436504 A K f x neut)). Qed.
Lemma lem6436508 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1049 A K dom f x neut) = (term1047 A K dom f x neut).
Proof. exact (@lem17045 (term367 A K dom f x) (term378 A K f x neut)). Qed.
Lemma lem6436509 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1049 A K dom f x neut) = (term1048 A K dom f x neut).
Proof. exact (TRANS (@lem6436508 A K dom f x neut) (@lem6436507 A K dom f x neut)). Qed.
Lemma lem6436513 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6436514 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) : (term1352 A K k dom f neut x i) = (term1353 A K k dom f neut x i).
Proof. exact (MK_COMB (@lem6436513) (@lem6436495 A K k dom f neut x i)). Qed.
Lemma lem6436515 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1354 A K k i dom f x neut) = (term1355 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6436514 A K k dom f neut x i) (@lem6436509 A K dom f x neut)). Qed.
Lemma lem6436516 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1356 A K k i dom f x neut) = (term1354 A K k i dom f x neut).
Proof. exact (@lem17045 (term435 A K k dom f neut x i) (term379 A K dom f x neut)). Qed.
Lemma lem6436517 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1356 A K k i dom f x neut) = (term1355 A K k i dom f x neut).
Proof. exact (TRANS (@lem6436516 A K k i dom f x neut) (@lem6436515 A K k i dom f x neut)). Qed.
Lemma lem6436526 {K : Type'} (x : K) (i : K) : (term1346 K x i) = (x = i).
Proof. exact (@lem16933 (x = i)). Qed.
Lemma lem6436528 {K : Type'} (k : K -> Prop) (x : K) : (term1066 K k x) = (term1066 K k x).
Proof. exact (eq_refl (term1066 K k x)). Qed.
Lemma lem6436529 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term1357 K k x i) = (term1358 K k x i).
Proof. exact (MK_COMB (@lem6436528 K k x) (@lem6436526 K x i)). Qed.
Lemma lem6436530 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term1359 K k x i) = (term1357 K k x i).
Proof. exact (@lem17045 (k x) (term434 K x i)). Qed.
Lemma lem6436531 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term1359 K k x i) = (term1358 K k x i).
Proof. exact (TRANS (@lem6436530 K k x i) (@lem6436529 K k x i)). Qed.
Lemma lem6436540 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1045 A K f x neut) = ((f x) = neut).
Proof. exact (@lem16933 ((f x) = neut)). Qed.
Lemma lem6436542 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1046 A K dom f x) = (term1046 A K dom f x).
Proof. exact (eq_refl (term1046 A K dom f x)). Qed.
Lemma lem6436543 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1047 A K dom f x neut) = (term1048 A K dom f x neut).
Proof. exact (MK_COMB (@lem6436542 A K dom f x) (@lem6436540 A K f x neut)). Qed.
Lemma lem6436544 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1049 A K dom f x neut) = (term1047 A K dom f x neut).
Proof. exact (@lem17045 (term367 A K dom f x) (term378 A K f x neut)). Qed.
Lemma lem6436545 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1049 A K dom f x neut) = (term1048 A K dom f x neut).
Proof. exact (TRANS (@lem6436544 A K dom f x neut) (@lem6436543 A K dom f x neut)). Qed.
Lemma lem6436549 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6436550 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term1360 K k x i) = (term1361 K k x i).
Proof. exact (MK_COMB (@lem6436549) (@lem6436531 K k x i)). Qed.
Lemma lem6436551 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1362 A K k i dom f x neut) = (term1363 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6436550 K k x i) (@lem6436545 A K dom f x neut)). Qed.
Lemma lem6436552 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1364 A K k i dom f x neut) = (term1362 A K k i dom f x neut).
Proof. exact (@lem17045 (term458 K k x i) (term379 A K dom f x neut)). Qed.
Lemma lem6436553 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1364 A K k i dom f x neut) = (term1363 A K k i dom f x neut).
Proof. exact (TRANS (@lem6436552 A K k i dom f x neut) (@lem6436551 A K k i dom f x neut)). Qed.
Lemma lem6436556 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term461 A K k i dom f x neut) = (term461 A K k i dom f x neut).
Proof. exact (eq_refl (term461 A K k i dom f x neut)). Qed.
Lemma lem6436557 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6436558 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1365 A K k i dom f x neut) = (term1366 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6436557) (@lem6436517 A K k i dom f x neut)). Qed.
Lemma lem6436559 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1367 A K k i dom f x neut) = (term1368 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6436558 A K k i dom f x neut) (@lem6436556 A K k i dom f x neut)). Qed.
Lemma lem6436561 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1369 A K k i dom f x neut) = (term1369 A K k i dom f x neut).
Proof. exact (eq_refl (term1369 A K k i dom f x neut)). Qed.
Lemma lem6436562 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1370 A K k i dom f x neut) = (term1371 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6436561 A K k i dom f x neut) (@lem6436553 A K k i dom f x neut)). Qed.
Lemma lem6436563 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6436564 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1372 A K k i dom f x neut) = (term1373 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6436563) (@lem6436562 A K k i dom f x neut)). Qed.
Lemma lem6436565 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1374 A K k i dom f x neut) = (term1375 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6436564 A K k i dom f x neut) (@lem6436559 A K k i dom f x neut)). Qed.
Lemma lem6436566 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term743 A K k i dom f x neut) = (term1374 A K k i dom f x neut).
Proof. exact (@lem17646 (term438 A K k i dom f x neut) (term461 A K k i dom f x neut)). Qed.
Lemma lem6436571 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term743 A K k i dom f x neut) = (term1375 A K k i dom f x neut).
Proof. exact (TRANS (@lem6436566 A K k i dom f x neut) (@lem6436565 A K k i dom f x neut)). Qed.
Lemma lem6436572 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term743 A K k i dom f x neut) : term1375 A K k i dom f x neut.
Proof. exact (EQ_MP (@lem6436571 A K k i dom f x neut) (@lem6435104 A K k i dom f x neut h1)). Qed.
Lemma lem6436573 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term1628 A K _82351 i _82352 k dom f x' neut) : term1628 A K _82351 i _82352 k dom f x' neut.
Proof. exact (h1). Qed.
Lemma lem6436782 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6436783 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem6436788 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6436790 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6436788 K A f x). Qed.
Lemma lem6436791 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6436792 {A K : Type'} (f : K -> A) (x : K) : (term1376 A K f x) = (term1377 A K f x).
Proof. exact (MK_COMB (@lem6436783 A) (@lem6436790 A K f x)). Qed.
Lemma lem6436793 {A K : Type'} (f : K -> A) (x : K) (neut : A) : ((f x) = neut) = ((@I (K -> A) f x) = neut).
Proof. exact (MK_COMB (@lem6436792 A K f x) (@lem6436791 A neut)). Qed.
Lemma lem6436794 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term378 A K f x neut) = (term1378 A K f x neut).
Proof. exact (MK_COMB (@lem6436782) (@lem6436793 A K f x neut)). Qed.
Lemma lem6436795 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6436800 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6436802 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6436800 K A f x). Qed.
Lemma lem6436803 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1379 A K dom f x).
Proof. exact (MK_COMB (@lem6436795 A dom) (@lem6436802 A K f x)). Qed.
Lemma lem6436805 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6436806 {A : Type'} (f : A -> Prop) (x : A) : (f x) = (@I (A -> Prop) f x).
Proof. exact (@lem6436805 A Prop f x). Qed.
Lemma lem6436807 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1379 A K dom f x) = (term1380 A K dom f x).
Proof. exact (@lem6436806 A dom (@I (K -> A) f x)). Qed.
Lemma lem6436808 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1380 A K dom f x).
Proof. exact (TRANS (@lem6436803 A K dom f x) (@lem6436807 A K dom f x)). Qed.
Lemma lem6436809 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6436810 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term369 A K dom f x) = (term1381 A K dom f x).
Proof. exact (MK_COMB (@lem6436809) (@lem6436808 A K dom f x)). Qed.
Lemma lem6436811 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term379 A K dom f x neut) = (term1382 A K dom f x neut).
Proof. exact (MK_COMB (@lem6436810 A K dom f x) (@lem6436794 A K f x neut)). Qed.
Lemma lem6436818 {K : Type'} (x : K) (i : K) : (term434 K x i) = (term434 K x i).
Proof. exact (eq_refl (term434 K x i)). Qed.
Lemma lem6436823 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6436824 {K : Type'} (f : K -> Prop) (x : K) : (f x) = (@I (K -> Prop) f x).
Proof. exact (@lem6436823 K Prop f x). Qed.
Lemma lem6436826 {K : Type'} (k : K -> Prop) (x : K) : (k x) = (@I (K -> Prop) k x).
Proof. exact (@lem6436824 K k x). Qed.
Lemma lem6436827 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6436828 {K : Type'} (k : K -> Prop) (x : K) : (term42 K k x) = (term1383 K k x).
Proof. exact (MK_COMB (@lem6436827) (@lem6436826 K k x)). Qed.
Lemma lem6436829 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term458 K k x i) = (term1384 K k x i).
Proof. exact (MK_COMB (@lem6436828 K k x) (@lem6436818 K x i)). Qed.
Lemma lem6436830 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6436831 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term460 K k x i) = (term1385 K k x i).
Proof. exact (MK_COMB (@lem6436830) (@lem6436829 K k x i)). Qed.
Lemma lem6436832 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term461 A K k i dom f x neut) = (term1386 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6436831 K k x i) (@lem6436811 A K dom f x neut)). Qed.
Lemma lem6436833 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem6436838 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6436840 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6436838 K A f x). Qed.
Lemma lem6436841 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6436842 {A K : Type'} (f : K -> A) (x : K) : (term1376 A K f x) = (term1377 A K f x).
Proof. exact (MK_COMB (@lem6436833 A) (@lem6436840 A K f x)). Qed.
Lemma lem6436843 {A K : Type'} (f : K -> A) (x : K) (neut : A) : ((f x) = neut) = ((@I (K -> A) f x) = neut).
Proof. exact (MK_COMB (@lem6436842 A K f x) (@lem6436841 A neut)). Qed.
Lemma lem6436844 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6436845 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6436850 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6436852 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6436850 K A f x). Qed.
Lemma lem6436853 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1379 A K dom f x).
Proof. exact (MK_COMB (@lem6436845 A dom) (@lem6436852 A K f x)). Qed.
Lemma lem6436855 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6436856 {A : Type'} (f : A -> Prop) (x : A) : (f x) = (@I (A -> Prop) f x).
Proof. exact (@lem6436855 A Prop f x). Qed.
Lemma lem6436857 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1379 A K dom f x) = (term1380 A K dom f x).
Proof. exact (@lem6436856 A dom (@I (K -> A) f x)). Qed.
Lemma lem6436858 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1380 A K dom f x).
Proof. exact (TRANS (@lem6436853 A K dom f x) (@lem6436857 A K dom f x)). Qed.
Lemma lem6436859 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1387 A K dom f x) = (term1388 A K dom f x).
Proof. exact (MK_COMB (@lem6436844) (@lem6436858 A K dom f x)). Qed.
Lemma lem6436860 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6436861 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1046 A K dom f x) = (term1389 A K dom f x).
Proof. exact (MK_COMB (@lem6436860) (@lem6436859 A K dom f x)). Qed.
Lemma lem6436862 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1048 A K dom f x neut) = (term1390 A K dom f x neut).
Proof. exact (MK_COMB (@lem6436861 A K dom f x) (@lem6436843 A K f x neut)). Qed.
Lemma lem6436867 {K : Type'} (x : K) (i : K) : (x = i) = (x = i).
Proof. exact (eq_refl (x = i)). Qed.
Lemma lem6436868 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem6436873 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6436875 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6436873 K A f x). Qed.
Lemma lem6436876 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6436877 {A K : Type'} (f : K -> A) (x : K) : (term1376 A K f x) = (term1377 A K f x).
Proof. exact (MK_COMB (@lem6436868 A) (@lem6436875 A K f x)). Qed.
Lemma lem6436878 {A K : Type'} (f : K -> A) (x : K) (neut : A) : ((f x) = neut) = ((@I (K -> A) f x) = neut).
Proof. exact (MK_COMB (@lem6436877 A K f x) (@lem6436876 A neut)). Qed.
Lemma lem6436879 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6436880 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6436885 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6436887 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6436885 K A f x). Qed.
Lemma lem6436888 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1379 A K dom f x).
Proof. exact (MK_COMB (@lem6436880 A dom) (@lem6436887 A K f x)). Qed.
Lemma lem6436890 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6436891 {A : Type'} (f : A -> Prop) (x : A) : (f x) = (@I (A -> Prop) f x).
Proof. exact (@lem6436890 A Prop f x). Qed.
Lemma lem6436892 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1379 A K dom f x) = (term1380 A K dom f x).
Proof. exact (@lem6436891 A dom (@I (K -> A) f x)). Qed.
Lemma lem6436893 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1380 A K dom f x).
Proof. exact (TRANS (@lem6436888 A K dom f x) (@lem6436892 A K dom f x)). Qed.
Lemma lem6436894 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1387 A K dom f x) = (term1388 A K dom f x).
Proof. exact (MK_COMB (@lem6436879) (@lem6436893 A K dom f x)). Qed.
Lemma lem6436895 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6436896 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1046 A K dom f x) = (term1389 A K dom f x).
Proof. exact (MK_COMB (@lem6436895) (@lem6436894 A K dom f x)). Qed.
Lemma lem6436897 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1048 A K dom f x neut) = (term1390 A K dom f x neut).
Proof. exact (MK_COMB (@lem6436896 A K dom f x) (@lem6436878 A K f x neut)). Qed.
Lemma lem6436898 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6436903 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6436904 {K : Type'} (f : K -> Prop) (x : K) : (f x) = (@I (K -> Prop) f x).
Proof. exact (@lem6436903 K Prop f x). Qed.
Lemma lem6436906 {K : Type'} (k : K -> Prop) (x : K) : (k x) = (@I (K -> Prop) k x).
Proof. exact (@lem6436904 K k x). Qed.
Lemma lem6436907 {K : Type'} (k : K -> Prop) (x : K) : (term72 K k x) = (term1391 K k x).
Proof. exact (MK_COMB (@lem6436898) (@lem6436906 K k x)). Qed.
Lemma lem6436908 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6436909 {K : Type'} (k : K -> Prop) (x : K) : (term1066 K k x) = (term1392 K k x).
Proof. exact (MK_COMB (@lem6436908) (@lem6436907 K k x)). Qed.
Lemma lem6436910 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1071 A K k dom f x neut) = (term1393 A K k dom f x neut).
Proof. exact (MK_COMB (@lem6436909 K k x) (@lem6436897 A K dom f x neut)). Qed.
Lemma lem6436911 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6436912 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1348 A K k dom f x neut) = (term1394 A K k dom f x neut).
Proof. exact (MK_COMB (@lem6436911) (@lem6436910 A K k dom f x neut)). Qed.
Lemma lem6436913 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) : (term1350 A K k dom f neut x i) = (term1395 A K k dom f neut x i).
Proof. exact (MK_COMB (@lem6436912 A K k dom f x neut) (@lem6436867 K x i)). Qed.
Lemma lem6436914 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6436915 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) : (term1353 A K k dom f neut x i) = (term1396 A K k dom f neut x i).
Proof. exact (MK_COMB (@lem6436914) (@lem6436913 A K k dom f neut x i)). Qed.
Lemma lem6436916 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1355 A K k i dom f x neut) = (term1397 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6436915 A K k dom f neut x i) (@lem6436862 A K dom f x neut)). Qed.
Lemma lem6436917 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6436918 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1366 A K k i dom f x neut) = (term1398 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6436917) (@lem6436916 A K k i dom f x neut)). Qed.
Lemma lem6436919 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1368 A K k i dom f x neut) = (term1399 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6436918 A K k i dom f x neut) (@lem6436832 A K k i dom f x neut)). Qed.
Lemma lem6436920 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem6436925 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6436927 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6436925 K A f x). Qed.
Lemma lem6436928 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6436929 {A K : Type'} (f : K -> A) (x : K) : (term1376 A K f x) = (term1377 A K f x).
Proof. exact (MK_COMB (@lem6436920 A) (@lem6436927 A K f x)). Qed.
Lemma lem6436930 {A K : Type'} (f : K -> A) (x : K) (neut : A) : ((f x) = neut) = ((@I (K -> A) f x) = neut).
Proof. exact (MK_COMB (@lem6436929 A K f x) (@lem6436928 A neut)). Qed.
Lemma lem6436931 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6436932 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6436937 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6436939 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6436937 K A f x). Qed.
Lemma lem6436940 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1379 A K dom f x).
Proof. exact (MK_COMB (@lem6436932 A dom) (@lem6436939 A K f x)). Qed.
Lemma lem6436942 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6436943 {A : Type'} (f : A -> Prop) (x : A) : (f x) = (@I (A -> Prop) f x).
Proof. exact (@lem6436942 A Prop f x). Qed.
Lemma lem6436944 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1379 A K dom f x) = (term1380 A K dom f x).
Proof. exact (@lem6436943 A dom (@I (K -> A) f x)). Qed.
Lemma lem6436945 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1380 A K dom f x).
Proof. exact (TRANS (@lem6436940 A K dom f x) (@lem6436944 A K dom f x)). Qed.
Lemma lem6436946 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1387 A K dom f x) = (term1388 A K dom f x).
Proof. exact (MK_COMB (@lem6436931) (@lem6436945 A K dom f x)). Qed.
Lemma lem6436947 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6436948 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1046 A K dom f x) = (term1389 A K dom f x).
Proof. exact (MK_COMB (@lem6436947) (@lem6436946 A K dom f x)). Qed.
Lemma lem6436949 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1048 A K dom f x neut) = (term1390 A K dom f x neut).
Proof. exact (MK_COMB (@lem6436948 A K dom f x) (@lem6436930 A K f x neut)). Qed.
Lemma lem6436954 {K : Type'} (x : K) (i : K) : (x = i) = (x = i).
Proof. exact (eq_refl (x = i)). Qed.
Lemma lem6436955 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6436960 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6436961 {K : Type'} (f : K -> Prop) (x : K) : (f x) = (@I (K -> Prop) f x).
Proof. exact (@lem6436960 K Prop f x). Qed.
Lemma lem6436963 {K : Type'} (k : K -> Prop) (x : K) : (k x) = (@I (K -> Prop) k x).
Proof. exact (@lem6436961 K k x). Qed.
Lemma lem6436964 {K : Type'} (k : K -> Prop) (x : K) : (term72 K k x) = (term1391 K k x).
Proof. exact (MK_COMB (@lem6436955) (@lem6436963 K k x)). Qed.
Lemma lem6436965 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6436966 {K : Type'} (k : K -> Prop) (x : K) : (term1066 K k x) = (term1392 K k x).
Proof. exact (MK_COMB (@lem6436965) (@lem6436964 K k x)). Qed.
Lemma lem6436967 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term1358 K k x i) = (term1400 K k x i).
Proof. exact (MK_COMB (@lem6436966 K k x) (@lem6436954 K x i)). Qed.
Lemma lem6436968 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6436969 {K : Type'} (k : K -> Prop) (x : K) (i : K) : (term1361 K k x i) = (term1401 K k x i).
Proof. exact (MK_COMB (@lem6436968) (@lem6436967 K k x i)). Qed.
Lemma lem6436970 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1363 A K k i dom f x neut) = (term1402 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6436969 K k x i) (@lem6436949 A K dom f x neut)). Qed.
Lemma lem6436971 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6436972 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem6436977 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6436979 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6436977 K A f x). Qed.
Lemma lem6436980 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6436981 {A K : Type'} (f : K -> A) (x : K) : (term1376 A K f x) = (term1377 A K f x).
Proof. exact (MK_COMB (@lem6436972 A) (@lem6436979 A K f x)). Qed.
Lemma lem6436982 {A K : Type'} (f : K -> A) (x : K) (neut : A) : ((f x) = neut) = ((@I (K -> A) f x) = neut).
Proof. exact (MK_COMB (@lem6436981 A K f x) (@lem6436980 A neut)). Qed.
Lemma lem6436983 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term378 A K f x neut) = (term1378 A K f x neut).
Proof. exact (MK_COMB (@lem6436971) (@lem6436982 A K f x neut)). Qed.
Lemma lem6436984 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6436989 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6436991 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6436989 K A f x). Qed.
Lemma lem6436992 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1379 A K dom f x).
Proof. exact (MK_COMB (@lem6436984 A dom) (@lem6436991 A K f x)). Qed.
Lemma lem6436994 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6436995 {A : Type'} (f : A -> Prop) (x : A) : (f x) = (@I (A -> Prop) f x).
Proof. exact (@lem6436994 A Prop f x). Qed.
Lemma lem6436996 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1379 A K dom f x) = (term1380 A K dom f x).
Proof. exact (@lem6436995 A dom (@I (K -> A) f x)). Qed.
Lemma lem6436997 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1380 A K dom f x).
Proof. exact (TRANS (@lem6436992 A K dom f x) (@lem6436996 A K dom f x)). Qed.
Lemma lem6436998 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6436999 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term369 A K dom f x) = (term1381 A K dom f x).
Proof. exact (MK_COMB (@lem6436998) (@lem6436997 A K dom f x)). Qed.
Lemma lem6437000 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term379 A K dom f x neut) = (term1382 A K dom f x neut).
Proof. exact (MK_COMB (@lem6436999 A K dom f x) (@lem6436983 A K f x neut)). Qed.
Lemma lem6437007 {K : Type'} (x : K) (i : K) : (term434 K x i) = (term434 K x i).
Proof. exact (eq_refl (term434 K x i)). Qed.
Lemma lem6437008 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6437009 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem6437014 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6437016 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6437014 K A f x). Qed.
Lemma lem6437017 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6437018 {A K : Type'} (f : K -> A) (x : K) : (term1376 A K f x) = (term1377 A K f x).
Proof. exact (MK_COMB (@lem6437009 A) (@lem6437016 A K f x)). Qed.
Lemma lem6437019 {A K : Type'} (f : K -> A) (x : K) (neut : A) : ((f x) = neut) = ((@I (K -> A) f x) = neut).
Proof. exact (MK_COMB (@lem6437018 A K f x) (@lem6437017 A neut)). Qed.
Lemma lem6437020 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term378 A K f x neut) = (term1378 A K f x neut).
Proof. exact (MK_COMB (@lem6437008) (@lem6437019 A K f x neut)). Qed.
Lemma lem6437021 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6437026 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6437028 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6437026 K A f x). Qed.
Lemma lem6437029 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1379 A K dom f x).
Proof. exact (MK_COMB (@lem6437021 A dom) (@lem6437028 A K f x)). Qed.
Lemma lem6437031 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6437032 {A : Type'} (f : A -> Prop) (x : A) : (f x) = (@I (A -> Prop) f x).
Proof. exact (@lem6437031 A Prop f x). Qed.
Lemma lem6437033 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1379 A K dom f x) = (term1380 A K dom f x).
Proof. exact (@lem6437032 A dom (@I (K -> A) f x)). Qed.
Lemma lem6437034 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term367 A K dom f x) = (term1380 A K dom f x).
Proof. exact (TRANS (@lem6437029 A K dom f x) (@lem6437033 A K dom f x)). Qed.
Lemma lem6437035 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6437036 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term369 A K dom f x) = (term1381 A K dom f x).
Proof. exact (MK_COMB (@lem6437035) (@lem6437034 A K dom f x)). Qed.
Lemma lem6437037 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term379 A K dom f x neut) = (term1382 A K dom f x neut).
Proof. exact (MK_COMB (@lem6437036 A K dom f x) (@lem6437020 A K f x neut)). Qed.
Lemma lem6437042 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6437043 {K : Type'} (f : K -> Prop) (x : K) : (f x) = (@I (K -> Prop) f x).
Proof. exact (@lem6437042 K Prop f x). Qed.
Lemma lem6437045 {K : Type'} (k : K -> Prop) (x : K) : (k x) = (@I (K -> Prop) k x).
Proof. exact (@lem6437043 K k x). Qed.
Lemma lem6437046 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6437047 {K : Type'} (k : K -> Prop) (x : K) : (term42 K k x) = (term1383 K k x).
Proof. exact (MK_COMB (@lem6437046) (@lem6437045 K k x)). Qed.
Lemma lem6437048 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term381 A K k dom f x neut) = (term1403 A K k dom f x neut).
Proof. exact (MK_COMB (@lem6437047 K k x) (@lem6437037 A K dom f x neut)). Qed.
Lemma lem6437049 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6437050 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term433 A K k dom f x neut) = (term1404 A K k dom f x neut).
Proof. exact (MK_COMB (@lem6437049) (@lem6437048 A K k dom f x neut)). Qed.
Lemma lem6437051 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) : (term435 A K k dom f neut x i) = (term1405 A K k dom f neut x i).
Proof. exact (MK_COMB (@lem6437050 A K k dom f x neut) (@lem6437007 K x i)). Qed.
Lemma lem6437052 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6437053 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) : (term437 A K k dom f neut x i) = (term1406 A K k dom f neut x i).
Proof. exact (MK_COMB (@lem6437052) (@lem6437051 A K k dom f neut x i)). Qed.
Lemma lem6437054 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term438 A K k i dom f x neut) = (term1407 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6437053 A K k dom f neut x i) (@lem6437000 A K dom f x neut)). Qed.
Lemma lem6437055 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6437056 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1369 A K k i dom f x neut) = (term1408 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6437055) (@lem6437054 A K k i dom f x neut)). Qed.
Lemma lem6437057 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1371 A K k i dom f x neut) = (term1409 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6437056 A K k i dom f x neut) (@lem6436970 A K k i dom f x neut)). Qed.
Lemma lem6437058 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem6437059 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1373 A K k i dom f x neut) = (term1410 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6437058) (@lem6437057 A K k i dom f x neut)). Qed.
Lemma lem6437060 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) : (term1375 A K k i dom f x neut) = (term1411 A K k i dom f x neut).
Proof. exact (MK_COMB (@lem6437059 A K k i dom f x neut) (@lem6436919 A K k i dom f x neut)). Qed.
Lemma lem6437061 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term743 A K k i dom f x neut) : term1411 A K k i dom f x neut.
Proof. exact (EQ_MP (@lem6437060 A K k i dom f x neut) (@lem6436572 A K k i dom f x neut h1)). Qed.
Lemma lem6437062 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem6437063 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem6437068 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6437069 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6437068 K A f x). Qed.
Lemma lem6437071 {A K : Type'} (f : K -> A) (x' : K) : (f x') = (@I (K -> A) f x').
Proof. exact (@lem6437069 A K f x'). Qed.
Lemma lem6437072 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6437073 {A K : Type'} (f : K -> A) (x' : K) : (term1376 A K f x') = (term1377 A K f x').
Proof. exact (MK_COMB (@lem6437063 A) (@lem6437071 A K f x')). Qed.
Lemma lem6437074 {A K : Type'} (f : K -> A) (x' : K) (neut : A) : ((f x') = neut) = ((@I (K -> A) f x') = neut).
Proof. exact (MK_COMB (@lem6437073 A K f x') (@lem6437072 A neut)). Qed.
Lemma lem6437075 {A K : Type'} (f : K -> A) (x' : K) (neut : A) : (term378 A K f x' neut) = (term1378 A K f x' neut).
Proof. exact (MK_COMB (@lem6437062) (@lem6437074 A K f x' neut)). Qed.
Lemma lem6437076 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6437081 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6437082 {A K : Type'} (f : K -> A) (x : K) : (f x) = (@I (K -> A) f x).
Proof. exact (@lem6437081 K A f x). Qed.
Lemma lem6437084 {A K : Type'} (f : K -> A) (x' : K) : (f x') = (@I (K -> A) f x').
Proof. exact (@lem6437082 A K f x'). Qed.
Lemma lem6437085 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x' : K) : (term367 A K dom f x') = (term1379 A K dom f x').
Proof. exact (MK_COMB (@lem6437076 A dom) (@lem6437084 A K f x')). Qed.
Lemma lem6437087 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6437088 {A : Type'} (f : A -> Prop) (x : A) : (f x) = (@I (A -> Prop) f x).
Proof. exact (@lem6437087 A Prop f x). Qed.
Lemma lem6437089 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x' : K) : (term1379 A K dom f x') = (term1380 A K dom f x').
Proof. exact (@lem6437088 A dom (@I (K -> A) f x')). Qed.
Lemma lem6437090 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x' : K) : (term367 A K dom f x') = (term1380 A K dom f x').
Proof. exact (TRANS (@lem6437085 A K dom f x') (@lem6437089 A K dom f x')). Qed.
Lemma lem6437091 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6437092 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x' : K) : (term369 A K dom f x') = (term1381 A K dom f x').
Proof. exact (MK_COMB (@lem6437091) (@lem6437090 A K dom f x')). Qed.
Lemma lem6437093 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) : (term379 A K dom f x' neut) = (term1382 A K dom f x' neut).
Proof. exact (MK_COMB (@lem6437092 A K dom f x') (@lem6437075 A K f x' neut)). Qed.
Lemma lem6437098 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6437099 {K : Type'} (f : K -> Prop) (x : K) : (f x) = (@I (K -> Prop) f x).
Proof. exact (@lem6437098 K Prop f x). Qed.
Lemma lem6437101 {K : Type'} (k : K -> Prop) (x' : K) : (k x') = (@I (K -> Prop) k x').
Proof. exact (@lem6437099 K k x'). Qed.
Lemma lem6437102 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6437103 {K : Type'} (k : K -> Prop) (x' : K) : (term42 K k x') = (term1383 K k x').
Proof. exact (MK_COMB (@lem6437102) (@lem6437101 K k x')). Qed.
Lemma lem6437104 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) : (term381 A K k dom f x' neut) = (term1403 A K k dom f x' neut).
Proof. exact (MK_COMB (@lem6437103 K k x') (@lem6437093 A K dom f x' neut)). Qed.
Lemma lem6437105 {K : Type'} : (@FINITE K) = (@FINITE K).
Proof. exact (eq_refl (@FINITE K)). Qed.
Lemma lem6437106 {K : Type'} : (@GSPEC K) = (@GSPEC K).
Proof. exact (eq_refl (@GSPEC K)). Qed.
Lemma lem6437117 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6437118 {A K : Type'} (f : type835 A K) (x : K -> Prop) : (f x) = (@I ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop) f x).
Proof. exact (@lem6437117 (K -> Prop) (type650 A K) f x). Qed.
Lemma lem6437119 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) : (_82352 k) = (@I ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop) _82352 k).
Proof. exact (@lem6437118 A K _82352 k). Qed.
Lemma lem6437120 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6437121 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (_82352 k dom) = (@I ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop) _82352 k dom).
Proof. exact (MK_COMB (@lem6437119 A K _82352 k) (@lem6437120 A dom)). Qed.
Lemma lem6437123 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6437124 {A K : Type'} (f : type650 A K) (x : A -> Prop) : (f x) = (@I ((A -> Prop) -> (K -> A) -> A -> K -> Prop) f x).
Proof. exact (@lem6437123 (A -> Prop) (type793 A K) f x). Qed.
Lemma lem6437125 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (@I ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop) _82352 k dom) = (term1412 A K _82352 k dom).
Proof. exact (@lem6437124 A K (@I ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K -> Prop) _82352 k) dom). Qed.
Lemma lem6437126 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) : (_82352 k dom) = (term1412 A K _82352 k dom).
Proof. exact (TRANS (@lem6437121 A K _82352 k dom) (@lem6437125 A K _82352 k dom)). Qed.
Lemma lem6437127 {A K : Type'} (f : K -> A) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem6437128 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (_82352 k dom f) = (term1413 A K _82352 k dom f).
Proof. exact (MK_COMB (@lem6437126 A K _82352 k dom) (@lem6437127 A K f)). Qed.
Lemma lem6437130 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6437131 {A K : Type'} (f : type793 A K) (x : K -> A) : (f x) = (@I ((K -> A) -> A -> K -> Prop) f x).
Proof. exact (@lem6437130 (K -> A) (type1413 A K) f x). Qed.
Lemma lem6437132 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1413 A K _82352 k dom f) = (term1414 A K _82352 k dom f).
Proof. exact (@lem6437131 A K (term1412 A K _82352 k dom) f). Qed.
Lemma lem6437133 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (_82352 k dom f) = (term1414 A K _82352 k dom f).
Proof. exact (TRANS (@lem6437128 A K _82352 k dom f) (@lem6437132 A K _82352 k dom f)). Qed.
Lemma lem6437134 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6437135 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (_82352 k dom f neut) = (term1415 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6437133 A K _82352 k dom f) (@lem6437134 A neut)). Qed.
Lemma lem6437137 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6437138 {A K : Type'} (f : type1413 A K) (x : A) : (f x) = (@I (A -> K -> Prop) f x).
Proof. exact (@lem6437137 A (K -> Prop) f x). Qed.
Lemma lem6437139 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1415 A K _82352 k dom f neut) = (term1416 A K _82352 k dom f neut).
Proof. exact (@lem6437138 A K (term1414 A K _82352 k dom f) neut). Qed.
Lemma lem6437141 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (_82352 k dom f neut) = (term1416 A K _82352 k dom f neut).
Proof. exact (TRANS (@lem6437135 A K _82352 k dom f neut) (@lem6437139 A K _82352 k dom f neut)). Qed.
Lemma lem6437142 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term637 A K _82352 k dom f neut) = (term1417 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6437106 K) (@lem6437141 A K _82352 k dom f neut)). Qed.
Lemma lem6437144 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6437145 {K : Type'} (f : type672 K) (x : K -> Prop) : (f x) = (@I ((K -> Prop) -> K -> Prop) f x).
Proof. exact (@lem6437144 (K -> Prop) (K -> Prop) f x). Qed.
Lemma lem6437146 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1417 A K _82352 k dom f neut) = (term1418 A K _82352 k dom f neut).
Proof. exact (@lem6437145 K (@GSPEC K) (term1416 A K _82352 k dom f neut)). Qed.
Lemma lem6437147 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term637 A K _82352 k dom f neut) = (term1418 A K _82352 k dom f neut).
Proof. exact (TRANS (@lem6437142 A K _82352 k dom f neut) (@lem6437146 A K _82352 k dom f neut)). Qed.
Lemma lem6437148 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term638 A K _82352 k dom f neut) = (term1419 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6437105 K) (@lem6437147 A K _82352 k dom f neut)). Qed.
Lemma lem6437150 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6437151 {K : Type'} (f : type686 K) (x : K -> Prop) : (f x) = (@I ((K -> Prop) -> Prop) f x).
Proof. exact (@lem6437150 (K -> Prop) Prop f x). Qed.
Lemma lem6437152 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1419 A K _82352 k dom f neut) = (term1420 A K _82352 k dom f neut).
Proof. exact (@lem6437151 K (@FINITE K) (term1418 A K _82352 k dom f neut)). Qed.
Lemma lem6437153 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term638 A K _82352 k dom f neut) = (term1420 A K _82352 k dom f neut).
Proof. exact (TRANS (@lem6437148 A K _82352 k dom f neut) (@lem6437152 A K _82352 k dom f neut)). Qed.
Lemma lem6437154 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6437155 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term639 A K _82352 k dom f neut) = (term1421 A K _82352 k dom f neut).
Proof. exact (MK_COMB (@lem6437154) (@lem6437153 A K _82352 k dom f neut)). Qed.
Lemma lem6437156 {A K : Type'} (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) : (term1329 A K _82352 k dom f x' neut) = (term1422 A K _82352 k dom f x' neut).
Proof. exact (MK_COMB (@lem6437155 A K _82352 k dom f neut) (@lem6437104 A K k dom f x' neut)). Qed.
Lemma lem6437157 {K : Type'} : (@eq K) = (@eq K).
Proof. exact (eq_refl (@eq K)). Qed.
Lemma lem6437168 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6437169 {A K : Type'} (f : type836 A K) (x : K -> Prop) : (f x) = (@I ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K) f x).
Proof. exact (@lem6437168 (K -> Prop) (type651 A K) f x). Qed.
Lemma lem6437170 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) : (_82351 k) = (@I ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K) _82351 k).
Proof. exact (@lem6437169 A K _82351 k). Qed.
Lemma lem6437171 {A : Type'} (dom : A -> Prop) : dom = dom.
Proof. exact (eq_refl dom). Qed.
Lemma lem6437172 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) : (_82351 k dom) = (@I ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K) _82351 k dom).
Proof. exact (MK_COMB (@lem6437170 A K _82351 k) (@lem6437171 A dom)). Qed.
Lemma lem6437174 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6437175 {A K : Type'} (f : type651 A K) (x : A -> Prop) : (f x) = (@I ((A -> Prop) -> (K -> A) -> A -> K) f x).
Proof. exact (@lem6437174 (A -> Prop) (type794 A K) f x). Qed.
Lemma lem6437176 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) : (@I ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K) _82351 k dom) = (term1632 A K _82351 k dom).
Proof. exact (@lem6437175 A K (@I ((K -> Prop) -> (A -> Prop) -> (K -> A) -> A -> K) _82351 k) dom). Qed.
Lemma lem6437177 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) : (_82351 k dom) = (term1632 A K _82351 k dom).
Proof. exact (TRANS (@lem6437172 A K _82351 k dom) (@lem6437176 A K _82351 k dom)). Qed.
Lemma lem6437178 {A K : Type'} (f : K -> A) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem6437179 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (_82351 k dom f) = (term1633 A K _82351 k dom f).
Proof. exact (MK_COMB (@lem6437177 A K _82351 k dom) (@lem6437178 A K f)). Qed.
Lemma lem6437181 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6437182 {A K : Type'} (f : type794 A K) (x : K -> A) : (f x) = (@I ((K -> A) -> A -> K) f x).
Proof. exact (@lem6437181 (K -> A) (A -> K) f x). Qed.
Lemma lem6437183 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (term1633 A K _82351 k dom f) = (term1634 A K _82351 k dom f).
Proof. exact (@lem6437182 A K (term1632 A K _82351 k dom) f). Qed.
Lemma lem6437184 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) : (_82351 k dom f) = (term1634 A K _82351 k dom f).
Proof. exact (TRANS (@lem6437179 A K _82351 k dom f) (@lem6437183 A K _82351 k dom f)). Qed.
Lemma lem6437185 {A : Type'} (neut : A) : neut = neut.
Proof. exact (eq_refl neut). Qed.
Lemma lem6437186 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (_82351 k dom f neut) = (term1635 A K _82351 k dom f neut).
Proof. exact (MK_COMB (@lem6437184 A K _82351 k dom f) (@lem6437185 A neut)). Qed.
Lemma lem6437188 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem6437189 {A K : Type'} (f : A -> K) (x : A) : (f x) = (@I (A -> K) f x).
Proof. exact (@lem6437188 A K f x). Qed.
Lemma lem6437190 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1635 A K _82351 k dom f neut) = (term1636 A K _82351 k dom f neut).
Proof. exact (@lem6437189 A K (term1634 A K _82351 k dom f) neut). Qed.
Lemma lem6437192 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (_82351 k dom f neut) = (term1636 A K _82351 k dom f neut).
Proof. exact (TRANS (@lem6437186 A K _82351 k dom f neut) (@lem6437190 A K _82351 k dom f neut)). Qed.
Lemma lem6437193 {K : Type'} (i : K) : i = i.
Proof. exact (eq_refl i). Qed.
Lemma lem6437194 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1494 A K _82351 k dom f neut) = (term1637 A K _82351 k dom f neut).
Proof. exact (MK_COMB (@lem6437157 K) (@lem6437192 A K _82351 k dom f neut)). Qed.
Lemma lem6437195 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : ((_82351 k dom f neut) = i) = ((term1636 A K _82351 k dom f neut) = i).
Proof. exact (MK_COMB (@lem6437194 A K _82351 k dom f neut) (@lem6437193 K i)). Qed.
Lemma lem6437196 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem6437197 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : (term1537 A K _82351 k dom f neut i) = (term1638 A K _82351 k dom f neut i).
Proof. exact (MK_COMB (@lem6437196) (@lem6437195 A K _82351 k dom f neut i)). Qed.
Lemma lem6437198 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) : (term1628 A K _82351 i _82352 k dom f x' neut) = (term1639 A K _82351 i _82352 k dom f x' neut).
Proof. exact (MK_COMB (@lem6437197 A K _82351 k dom f neut i) (@lem6437156 A K _82352 k dom f x' neut)). Qed.
Lemma lem6437199 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term1628 A K _82351 i _82352 k dom f x' neut) : term1639 A K _82351 i _82352 k dom f x' neut.
Proof. exact (EQ_MP (@lem6437198 A K _82351 i _82352 k dom f x' neut) (@lem6436573 A K _82351 i _82352 k dom f x' neut h1)). Qed.
Lemma lem6437653 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term1409 A K k i dom f x neut.
Proof. exact (h1). Qed.
Lemma lem6437654 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1399 A K k i dom f x neut.
Proof. exact (h1). Qed.
Lemma lem6437655 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term1402 A K k i dom f x neut.
Proof. exact (proj2 (@lem6437653 A K k i dom f x neut h1)). Qed.
Lemma lem6437656 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term1407 A K k i dom f x neut.
Proof. exact (proj1 (@lem6437653 A K k i dom f x neut h1)). Qed.
Lemma lem6437657 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term1382 A K dom f x neut.
Proof. exact (proj2 (@lem6437656 A K k i dom f x neut h1)). Qed.
Lemma lem6437658 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term1405 A K k dom f neut x i.
Proof. exact (proj1 (@lem6437656 A K k i dom f x neut h1)). Qed.
Lemma lem6437662 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term1403 A K k dom f x neut.
Proof. exact (proj1 (@lem6437658 A K k i dom f x neut h1)). Qed.
Lemma lem6437667 {K : Type'} (k : K -> Prop) (x : K) (i : K) (h1 : term1400 K k x i) : term1400 K k x i.
Proof. exact (h1). Qed.
Lemma lem6437668 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1390 A K dom f x neut) : term1390 A K dom f x neut.
Proof. exact (h1). Qed.
Lemma lem6437673 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1386 A K k i dom f x neut.
Proof. exact (proj2 (@lem6437654 A K k i dom f x neut h1)). Qed.
Lemma lem6437674 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1397 A K k i dom f x neut.
Proof. exact (proj1 (@lem6437654 A K k i dom f x neut h1)). Qed.
Lemma lem6437675 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1382 A K dom f x neut.
Proof. exact (proj2 (@lem6437673 A K k i dom f x neut h1)). Qed.
Lemma lem6437676 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1384 K k x i.
Proof. exact (proj1 (@lem6437673 A K k i dom f x neut h1)). Qed.
Lemma lem6437681 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1395 A K k dom f neut x i) : term1395 A K k dom f neut x i.
Proof. exact (h1). Qed.
Lemma lem6437682 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1390 A K dom f x neut) : term1390 A K dom f x neut.
Proof. exact (h1). Qed.
Lemma lem6437683 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1393 A K k dom f x neut) : term1393 A K k dom f x neut.
Proof. exact (h1). Qed.
Lemma lem6437686 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1390 A K dom f x neut) : term1390 A K dom f x neut.
Proof. exact (h1). Qed.
Lemma lem6437917 {K : Type'} (k : K -> Prop) (x : K) (h1 : term1391 K k x) : term1391 K k x.
Proof. exact (h1). Qed.
Lemma lem6438144 {K : Type'} (x : K) (i : K) (h1 : x = i) : x = i.
Proof. exact (h1). Qed.
Lemma lem6438371 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1388 A K dom f x.
Proof. exact (h1). Qed.
Lemma lem6438598 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (@I (K -> A) f x) = neut.
Proof. exact (h1). Qed.
Lemma lem6438817 {K : Type'} (k : K -> Prop) (x : K) (h1 : term1391 K k x) : term1391 K k x.
Proof. exact (h1). Qed.
Lemma lem6439036 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1388 A K dom f x.
Proof. exact (h1). Qed.
Lemma lem6439255 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (@I (K -> A) f x) = neut.
Proof. exact (h1). Qed.
Lemma lem6439474 {K : Type'} (x : K) (i : K) (h1 : x = i) : x = i.
Proof. exact (h1). Qed.
Lemma lem6439693 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1388 A K dom f x.
Proof. exact (h1). Qed.
Lemma lem6439912 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (@I (K -> A) f x) = neut.
Proof. exact (h1). Qed.
Lemma lem6440468 {K : Type'} (k : K -> Prop) (x : K) (h1 : term1391 K k x) : term1391 K k x.
Proof. exact (h1). Qed.
Lemma lem6440550 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term434 K x i.
Proof. exact (proj2 (@lem6437658 A K k i dom f x neut h1)). Qed.
Lemma lem6440558 {K : Type'} (x : K) (i : K) (h1 : x = i) : x = i.
Proof. exact (h1). Qed.
Lemma lem6440648 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1388 A K dom f x.
Proof. exact (h1). Qed.
Lemma lem6440728 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term1378 A K f x neut.
Proof. exact (proj2 (@lem6437657 A K k i dom f x neut h1)). Qed.
Lemma lem6440738 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (@I (K -> A) f x) = neut.
Proof. exact (h1). Qed.
Lemma lem6440824 {K : Type'} (k : K -> Prop) (x : K) (h1 : term1391 K k x) : term1391 K k x.
Proof. exact (h1). Qed.
Lemma lem6440910 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1388 A K dom f x.
Proof. exact (h1). Qed.
Lemma lem6440990 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1378 A K f x neut.
Proof. exact (proj2 (@lem6437675 A K k i dom f x neut h1)). Qed.
Lemma lem6440996 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (@I (K -> A) f x) = neut.
Proof. exact (h1). Qed.
Lemma lem6441080 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term434 K x i.
Proof. exact (proj2 (@lem6437676 A K k i dom f x neut h1)). Qed.
Lemma lem6441082 {K : Type'} (x : K) (i : K) (h1 : x = i) : x = i.
Proof. exact (h1). Qed.
Lemma lem6441168 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1388 A K dom f x.
Proof. exact (h1). Qed.
Lemma lem6441248 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1378 A K f x neut.
Proof. exact (proj2 (@lem6437675 A K k i dom f x neut h1)). Qed.
Lemma lem6441254 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (@I (K -> A) f x) = neut.
Proof. exact (h1). Qed.
Lemma lem6441504 {K : Type'} (k : K -> Prop) (x : K) (h1 : term1391 K k x) : term1391 K k x.
Proof. exact (h1). Qed.
Lemma lem6441602 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term1628 A K _82351 i _82352 k dom f x' neut) : (term1636 A K _82351 k dom f neut) = i.
Proof. exact (proj1 (@lem6437199 A K _82351 i _82352 k dom f x' neut h1)). Qed.
Lemma lem6441685 {K : Type'} (i : K) : (term1433 K i) = (term1433 K i).
Proof. exact (eq_refl (term1433 K i)). Qed.
Lemma lem6441686 {K : Type'} (x : K) (i : K) (h1 : x = i) : (term1434 K i x) = (term1435 K i).
Proof. exact (MK_COMB (@lem6441685 K i) (@lem6440558 K x i h1)). Qed.
Lemma lem6441687 {K : Type'} (i : K) : (term1435 K i) = (term1436 K i).
Proof. exact (eq_refl (term1435 K i)). Qed.
Lemma lem6441688 {K : Type'} (i : K) (x : K) : (term1437 K i x) = (term1437 K i x).
Proof. exact (eq_refl (term1437 K i x)). Qed.
Lemma lem6441689 {K : Type'} (x : K) (i : K) : ((term1434 K i x) = (term1435 K i)) = ((term1434 K i x) = (term1436 K i)).
Proof. exact (MK_COMB (@lem6441688 K i x) (@lem6441687 K i)). Qed.
Lemma lem6441690 {K : Type'} (x : K) (i : K) : (term1434 K i x) = (term434 K x i).
Proof. exact (eq_refl (term1434 K i x)). Qed.
Lemma lem6441691 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6441692 {K : Type'} (x : K) (i : K) : (term1437 K i x) = (term1438 K x i).
Proof. exact (MK_COMB (@lem6441691) (@lem6441690 K x i)). Qed.
Lemma lem6441693 {K : Type'} (i : K) : (term1436 K i) = (term1436 K i).
Proof. exact (eq_refl (term1436 K i)). Qed.
Lemma lem6441694 {K : Type'} (x : K) (i : K) : ((term1434 K i x) = (term1436 K i)) = ((term434 K x i) = (term1436 K i)).
Proof. exact (MK_COMB (@lem6441692 K x i) (@lem6441693 K i)). Qed.
Lemma lem6441695 {K : Type'} (x : K) (i : K) : ((term1434 K i x) = (term1435 K i)) = ((term434 K x i) = (term1436 K i)).
Proof. exact (TRANS (@lem6441689 K x i) (@lem6441694 K x i)). Qed.
Lemma lem6441696 {K : Type'} (x : K) (i : K) (h1 : x = i) : (term434 K x i) = (term1436 K i).
Proof. exact (EQ_MP (@lem6441695 K x i) (@lem6441686 K x i h1)). Qed.
Lemma lem6441697 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : x = i) : term1436 K i.
Proof. exact (EQ_MP (@lem6441696 K x i h2) (@lem6440550 A K k i dom f x neut h1)). Qed.
Lemma lem6441779 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term1628 A K _82351 i _82352 k dom f x' neut) : i = (term1636 A K _82351 k dom f neut).
Proof. exact (SYM (@lem6441602 A K _82351 i _82352 k dom f x' neut h1)). Qed.
Lemma lem6441904 {K : Type'} : (term1439 K) = (term1439 K).
Proof. exact (eq_refl (term1439 K)). Qed.
Lemma lem6441905 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term1628 A K _82351 i _82352 k dom f x' neut) : (term1440 K i) = (term1640 A K _82351 k dom f neut).
Proof. exact (MK_COMB (@lem6441904 K) (@lem6441779 A K _82351 i _82352 k dom f x' neut h1)). Qed.
Lemma lem6441906 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1640 A K _82351 k dom f neut) = (term1641 A K _82351 k dom f neut).
Proof. exact (eq_refl (term1640 A K _82351 k dom f neut)). Qed.
Lemma lem6441907 {K : Type'} (i : K) : (term1443 K i) = (term1443 K i).
Proof. exact (eq_refl (term1443 K i)). Qed.
Lemma lem6441908 {A K : Type'} (i : K) (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term1440 K i) = (term1640 A K _82351 k dom f neut)) = ((term1440 K i) = (term1641 A K _82351 k dom f neut)).
Proof. exact (MK_COMB (@lem6441907 K i) (@lem6441906 A K _82351 k dom f neut)). Qed.
Lemma lem6441909 {K : Type'} (i : K) : (term1440 K i) = (term1436 K i).
Proof. exact (eq_refl (term1440 K i)). Qed.
Lemma lem6441910 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6441911 {K : Type'} (i : K) : (term1443 K i) = (term1444 K i).
Proof. exact (MK_COMB (@lem6441910) (@lem6441909 K i)). Qed.
Lemma lem6441912 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1641 A K _82351 k dom f neut) = (term1641 A K _82351 k dom f neut).
Proof. exact (eq_refl (term1641 A K _82351 k dom f neut)). Qed.
Lemma lem6441913 {A K : Type'} (i : K) (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term1440 K i) = (term1641 A K _82351 k dom f neut)) = ((term1436 K i) = (term1641 A K _82351 k dom f neut)).
Proof. exact (MK_COMB (@lem6441911 K i) (@lem6441912 A K _82351 k dom f neut)). Qed.
Lemma lem6441914 {A K : Type'} (i : K) (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term1440 K i) = (term1640 A K _82351 k dom f neut)) = ((term1436 K i) = (term1641 A K _82351 k dom f neut)).
Proof. exact (TRANS (@lem6441908 A K i _82351 k dom f neut) (@lem6441913 A K i _82351 k dom f neut)). Qed.
Lemma lem6441915 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term1628 A K _82351 i _82352 k dom f x' neut) : (term1436 K i) = (term1641 A K _82351 k dom f neut).
Proof. exact (EQ_MP (@lem6441914 A K i _82351 k dom f neut) (@lem6441905 A K _82351 i _82352 k dom f x' neut h1)). Qed.
Lemma lem6441916 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1628 A K _82351 i _82352 k dom f x' neut) (h3 : x = i) : term1641 A K _82351 k dom f neut.
Proof. exact (EQ_MP (@lem6441915 A K _82351 i _82352 k dom f x' neut h2) (@lem6441697 A K k dom f neut x i h1 h3)). Qed.
Lemma lem6442193 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1388 A K dom f x.
Proof. exact (h1). Qed.
Lemma lem6442236 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : neut = (@I (K -> A) f x).
Proof. exact (SYM (@lem6440738 A K f x neut h1)). Qed.
Lemma lem6442360 {A K : Type'} (f : K -> A) (x : K) : (term1445 A K f x) = (term1445 A K f x).
Proof. exact (eq_refl (term1445 A K f x)). Qed.
Lemma lem6442361 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (term1446 A K f x neut) = (term1447 A K f x).
Proof. exact (MK_COMB (@lem6442360 A K f x) (@lem6442236 A K f x neut h1)). Qed.
Lemma lem6442362 {A K : Type'} (f : K -> A) (x : K) : (term1447 A K f x) = (term1448 A K f x).
Proof. exact (eq_refl (term1447 A K f x)). Qed.
Lemma lem6442363 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1449 A K f x neut) = (term1449 A K f x neut).
Proof. exact (eq_refl (term1449 A K f x neut)). Qed.
Lemma lem6442364 {A K : Type'} (neut : A) (f : K -> A) (x : K) : ((term1446 A K f x neut) = (term1447 A K f x)) = ((term1446 A K f x neut) = (term1448 A K f x)).
Proof. exact (MK_COMB (@lem6442363 A K f x neut) (@lem6442362 A K f x)). Qed.
Lemma lem6442365 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1446 A K f x neut) = (term1378 A K f x neut).
Proof. exact (eq_refl (term1446 A K f x neut)). Qed.
Lemma lem6442366 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6442367 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1449 A K f x neut) = (term1450 A K f x neut).
Proof. exact (MK_COMB (@lem6442366) (@lem6442365 A K f x neut)). Qed.
Lemma lem6442368 {A K : Type'} (f : K -> A) (x : K) : (term1448 A K f x) = (term1448 A K f x).
Proof. exact (eq_refl (term1448 A K f x)). Qed.
Lemma lem6442369 {A K : Type'} (neut : A) (f : K -> A) (x : K) : ((term1446 A K f x neut) = (term1448 A K f x)) = ((term1378 A K f x neut) = (term1448 A K f x)).
Proof. exact (MK_COMB (@lem6442367 A K f x neut) (@lem6442368 A K f x)). Qed.
Lemma lem6442370 {A K : Type'} (neut : A) (f : K -> A) (x : K) : ((term1446 A K f x neut) = (term1447 A K f x)) = ((term1378 A K f x neut) = (term1448 A K f x)).
Proof. exact (TRANS (@lem6442364 A K neut f x) (@lem6442369 A K neut f x)). Qed.
Lemma lem6442371 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (term1378 A K f x neut) = (term1448 A K f x).
Proof. exact (EQ_MP (@lem6442370 A K neut f x) (@lem6442361 A K f x neut h1)). Qed.
Lemma lem6442596 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : term1448 A K f x.
Proof. exact (EQ_MP (@lem6442371 A K f x neut h2) (@lem6440728 A K k i dom f x neut h1)). Qed.
Lemma lem6442861 {K : Type'} (k : K -> Prop) (x : K) (h1 : term1391 K k x) : term1391 K k x.
Proof. exact (h1). Qed.
Lemma lem6443071 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1388 A K dom f x.
Proof. exact (h1). Qed.
Lemma lem6443114 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : neut = (@I (K -> A) f x).
Proof. exact (SYM (@lem6440996 A K f x neut h1)). Qed.
Lemma lem6443238 {A K : Type'} (f : K -> A) (x : K) : (term1445 A K f x) = (term1445 A K f x).
Proof. exact (eq_refl (term1445 A K f x)). Qed.
Lemma lem6443239 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (term1446 A K f x neut) = (term1447 A K f x).
Proof. exact (MK_COMB (@lem6443238 A K f x) (@lem6443114 A K f x neut h1)). Qed.
Lemma lem6443240 {A K : Type'} (f : K -> A) (x : K) : (term1447 A K f x) = (term1448 A K f x).
Proof. exact (eq_refl (term1447 A K f x)). Qed.
Lemma lem6443241 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1449 A K f x neut) = (term1449 A K f x neut).
Proof. exact (eq_refl (term1449 A K f x neut)). Qed.
Lemma lem6443242 {A K : Type'} (neut : A) (f : K -> A) (x : K) : ((term1446 A K f x neut) = (term1447 A K f x)) = ((term1446 A K f x neut) = (term1448 A K f x)).
Proof. exact (MK_COMB (@lem6443241 A K f x neut) (@lem6443240 A K f x)). Qed.
Lemma lem6443243 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1446 A K f x neut) = (term1378 A K f x neut).
Proof. exact (eq_refl (term1446 A K f x neut)). Qed.
Lemma lem6443244 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6443245 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1449 A K f x neut) = (term1450 A K f x neut).
Proof. exact (MK_COMB (@lem6443244) (@lem6443243 A K f x neut)). Qed.
Lemma lem6443246 {A K : Type'} (f : K -> A) (x : K) : (term1448 A K f x) = (term1448 A K f x).
Proof. exact (eq_refl (term1448 A K f x)). Qed.
Lemma lem6443247 {A K : Type'} (neut : A) (f : K -> A) (x : K) : ((term1446 A K f x neut) = (term1448 A K f x)) = ((term1378 A K f x neut) = (term1448 A K f x)).
Proof. exact (MK_COMB (@lem6443245 A K f x neut) (@lem6443246 A K f x)). Qed.
Lemma lem6443248 {A K : Type'} (neut : A) (f : K -> A) (x : K) : ((term1446 A K f x neut) = (term1447 A K f x)) = ((term1378 A K f x neut) = (term1448 A K f x)).
Proof. exact (TRANS (@lem6443242 A K neut f x) (@lem6443247 A K neut f x)). Qed.
Lemma lem6443249 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (term1378 A K f x neut) = (term1448 A K f x).
Proof. exact (EQ_MP (@lem6443248 A K neut f x) (@lem6443239 A K f x neut h1)). Qed.
Lemma lem6443447 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : term1448 A K f x.
Proof. exact (EQ_MP (@lem6443249 A K f x neut h2) (@lem6440990 A K k i dom f x neut h1)). Qed.
Lemma lem6443572 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term1628 A K _82351 i _82352 k dom f x' neut) : (term1636 A K _82351 k dom f neut) = i.
Proof. exact (proj1 (@lem6437199 A K _82351 i _82352 k dom f x' neut h1)). Qed.
Lemma lem6443668 {K : Type'} (i : K) : (term1433 K i) = (term1433 K i).
Proof. exact (eq_refl (term1433 K i)). Qed.
Lemma lem6443669 {K : Type'} (x : K) (i : K) (h1 : x = i) : (term1434 K i x) = (term1435 K i).
Proof. exact (MK_COMB (@lem6443668 K i) (@lem6441082 K x i h1)). Qed.
Lemma lem6443670 {K : Type'} (i : K) : (term1435 K i) = (term1436 K i).
Proof. exact (eq_refl (term1435 K i)). Qed.
Lemma lem6443671 {K : Type'} (i : K) (x : K) : (term1437 K i x) = (term1437 K i x).
Proof. exact (eq_refl (term1437 K i x)). Qed.
Lemma lem6443672 {K : Type'} (x : K) (i : K) : ((term1434 K i x) = (term1435 K i)) = ((term1434 K i x) = (term1436 K i)).
Proof. exact (MK_COMB (@lem6443671 K i x) (@lem6443670 K i)). Qed.
Lemma lem6443673 {K : Type'} (x : K) (i : K) : (term1434 K i x) = (term434 K x i).
Proof. exact (eq_refl (term1434 K i x)). Qed.
Lemma lem6443674 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6443675 {K : Type'} (x : K) (i : K) : (term1437 K i x) = (term1438 K x i).
Proof. exact (MK_COMB (@lem6443674) (@lem6443673 K x i)). Qed.
Lemma lem6443676 {K : Type'} (i : K) : (term1436 K i) = (term1436 K i).
Proof. exact (eq_refl (term1436 K i)). Qed.
Lemma lem6443677 {K : Type'} (x : K) (i : K) : ((term1434 K i x) = (term1436 K i)) = ((term434 K x i) = (term1436 K i)).
Proof. exact (MK_COMB (@lem6443675 K x i) (@lem6443676 K i)). Qed.
Lemma lem6443678 {K : Type'} (x : K) (i : K) : ((term1434 K i x) = (term1435 K i)) = ((term434 K x i) = (term1436 K i)).
Proof. exact (TRANS (@lem6443672 K x i) (@lem6443677 K x i)). Qed.
Lemma lem6443679 {K : Type'} (x : K) (i : K) (h1 : x = i) : (term434 K x i) = (term1436 K i).
Proof. exact (EQ_MP (@lem6443678 K x i) (@lem6443669 K x i h1)). Qed.
Lemma lem6443680 {A K : Type'} (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1399 A K k i dom f x neut) (h2 : x = i) : term1436 K i.
Proof. exact (EQ_MP (@lem6443679 K x i h2) (@lem6441080 A K k i dom f x neut h1)). Qed.
Lemma lem6443723 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term1628 A K _82351 i _82352 k dom f x' neut) : i = (term1636 A K _82351 k dom f neut).
Proof. exact (SYM (@lem6443572 A K _82351 i _82352 k dom f x' neut h1)). Qed.
Lemma lem6443861 {K : Type'} : (term1439 K) = (term1439 K).
Proof. exact (eq_refl (term1439 K)). Qed.
Lemma lem6443862 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term1628 A K _82351 i _82352 k dom f x' neut) : (term1440 K i) = (term1640 A K _82351 k dom f neut).
Proof. exact (MK_COMB (@lem6443861 K) (@lem6443723 A K _82351 i _82352 k dom f x' neut h1)). Qed.
Lemma lem6443863 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1640 A K _82351 k dom f neut) = (term1641 A K _82351 k dom f neut).
Proof. exact (eq_refl (term1640 A K _82351 k dom f neut)). Qed.
Lemma lem6443864 {K : Type'} (i : K) : (term1443 K i) = (term1443 K i).
Proof. exact (eq_refl (term1443 K i)). Qed.
Lemma lem6443865 {A K : Type'} (i : K) (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term1440 K i) = (term1640 A K _82351 k dom f neut)) = ((term1440 K i) = (term1641 A K _82351 k dom f neut)).
Proof. exact (MK_COMB (@lem6443864 K i) (@lem6443863 A K _82351 k dom f neut)). Qed.
Lemma lem6443866 {K : Type'} (i : K) : (term1440 K i) = (term1436 K i).
Proof. exact (eq_refl (term1440 K i)). Qed.
Lemma lem6443867 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6443868 {K : Type'} (i : K) : (term1443 K i) = (term1444 K i).
Proof. exact (MK_COMB (@lem6443867) (@lem6443866 K i)). Qed.
Lemma lem6443869 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1641 A K _82351 k dom f neut) = (term1641 A K _82351 k dom f neut).
Proof. exact (eq_refl (term1641 A K _82351 k dom f neut)). Qed.
Lemma lem6443870 {A K : Type'} (i : K) (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term1440 K i) = (term1641 A K _82351 k dom f neut)) = ((term1436 K i) = (term1641 A K _82351 k dom f neut)).
Proof. exact (MK_COMB (@lem6443868 K i) (@lem6443869 A K _82351 k dom f neut)). Qed.
Lemma lem6443871 {A K : Type'} (i : K) (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : ((term1440 K i) = (term1640 A K _82351 k dom f neut)) = ((term1436 K i) = (term1641 A K _82351 k dom f neut)).
Proof. exact (TRANS (@lem6443865 A K i _82351 k dom f neut) (@lem6443870 A K i _82351 k dom f neut)). Qed.
Lemma lem6443872 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term1628 A K _82351 i _82352 k dom f x' neut) : (term1436 K i) = (term1641 A K _82351 k dom f neut).
Proof. exact (EQ_MP (@lem6443871 A K i _82351 k dom f neut) (@lem6443862 A K _82351 i _82352 k dom f x' neut h1)). Qed.
Lemma lem6443873 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1628 A K _82351 i _82352 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : x = i) : term1641 A K _82351 k dom f neut.
Proof. exact (EQ_MP (@lem6443872 A K _82351 i _82352 k dom f x' neut h1) (@lem6443680 A K k dom f neut x i h2 h3)). Qed.
Lemma lem6444083 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1388 A K dom f x.
Proof. exact (h1). Qed.
Lemma lem6444126 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : neut = (@I (K -> A) f x).
Proof. exact (SYM (@lem6441254 A K f x neut h1)). Qed.
Lemma lem6444250 {A K : Type'} (f : K -> A) (x : K) : (term1445 A K f x) = (term1445 A K f x).
Proof. exact (eq_refl (term1445 A K f x)). Qed.
Lemma lem6444251 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (term1446 A K f x neut) = (term1447 A K f x).
Proof. exact (MK_COMB (@lem6444250 A K f x) (@lem6444126 A K f x neut h1)). Qed.
Lemma lem6444252 {A K : Type'} (f : K -> A) (x : K) : (term1447 A K f x) = (term1448 A K f x).
Proof. exact (eq_refl (term1447 A K f x)). Qed.
Lemma lem6444253 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1449 A K f x neut) = (term1449 A K f x neut).
Proof. exact (eq_refl (term1449 A K f x neut)). Qed.
Lemma lem6444254 {A K : Type'} (neut : A) (f : K -> A) (x : K) : ((term1446 A K f x neut) = (term1447 A K f x)) = ((term1446 A K f x neut) = (term1448 A K f x)).
Proof. exact (MK_COMB (@lem6444253 A K f x neut) (@lem6444252 A K f x)). Qed.
Lemma lem6444255 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1446 A K f x neut) = (term1378 A K f x neut).
Proof. exact (eq_refl (term1446 A K f x neut)). Qed.
Lemma lem6444256 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem6444257 {A K : Type'} (f : K -> A) (x : K) (neut : A) : (term1449 A K f x neut) = (term1450 A K f x neut).
Proof. exact (MK_COMB (@lem6444256) (@lem6444255 A K f x neut)). Qed.
Lemma lem6444258 {A K : Type'} (f : K -> A) (x : K) : (term1448 A K f x) = (term1448 A K f x).
Proof. exact (eq_refl (term1448 A K f x)). Qed.
Lemma lem6444259 {A K : Type'} (neut : A) (f : K -> A) (x : K) : ((term1446 A K f x neut) = (term1448 A K f x)) = ((term1378 A K f x neut) = (term1448 A K f x)).
Proof. exact (MK_COMB (@lem6444257 A K f x neut) (@lem6444258 A K f x)). Qed.
Lemma lem6444260 {A K : Type'} (neut : A) (f : K -> A) (x : K) : ((term1446 A K f x neut) = (term1447 A K f x)) = ((term1378 A K f x neut) = (term1448 A K f x)).
Proof. exact (TRANS (@lem6444254 A K neut f x) (@lem6444259 A K neut f x)). Qed.
Lemma lem6444261 {A K : Type'} (f : K -> A) (x : K) (neut : A) (h1 : (@I (K -> A) f x) = neut) : (term1378 A K f x neut) = (term1448 A K f x).
Proof. exact (EQ_MP (@lem6444260 A K neut f x) (@lem6444251 A K f x neut h1)). Qed.
Lemma lem6444459 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : term1448 A K f x.
Proof. exact (EQ_MP (@lem6444261 A K f x neut h2) (@lem6441248 A K k i dom f x neut h1)). Qed.
Lemma lem6444954 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : @I (K -> Prop) k x.
Proof. exact (proj1 (@lem6437662 A K k i dom f x neut h1)). Qed.
Lemma lem6444955 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term1451 K k x.
Proof. exact (fun h0 : term1391 K k x => @lem6444954 A K k i dom f x neut h1). Qed.
Lemma lem6444957 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6444958 {K : Type'} (k : K -> Prop) (x : K) : (term1451 K k x) = (@I (K -> Prop) k x).
Proof. exact (@lem6444957 (@I (K -> Prop) k x)). Qed.
Lemma lem6444959 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : @I (K -> Prop) k x.
Proof. exact (EQ_MP (@lem6444958 K k x) (@lem6444955 A K k i dom f x neut h1)). Qed.
Lemma lem6444962 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6444964 {K : Type'} (k : K -> Prop) (x : K) : (term1391 K k x) = (term1452 K k x).
Proof. exact (@lem6444962 (@I (K -> Prop) k x)). Qed.
Lemma lem6444967 {K : Type'} (k : K -> Prop) (x : K) (h1 : term1391 K k x) : term1452 K k x.
Proof. exact (EQ_MP (@lem6444964 K k x) (@lem6441504 K k x h1)). Qed.
Lemma lem6444970 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (@lem6444967 K k x h1 (@lem6444959 A K k i dom f x neut h2)). Qed.
Lemma lem6444971 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1409 A K k i dom f x neut) : term92.
Proof. exact (fun h0 : ~ False => @lem6444970 A K k i dom f x neut h1 h2). Qed.
Lemma lem6444973 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6444974 : term92 = False.
Proof. exact (@lem6444973 False). Qed.
Lemma lem6444975 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6444974) (@lem6444971 A K k i dom f x neut h1 h2)). Qed.
Lemma lem6445401 {K : Type'} (x : K) : x = x.
Proof. exact (@lem21386 K x). Qed.
Lemma lem6445402 {K : Type'} (x : K) : x = x.
Proof. exact (@lem6445401 K x). Qed.
Lemma lem6445403 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1636 A K _82351 k dom f neut) = (term1636 A K _82351 k dom f neut).
Proof. exact (@lem6445402 K (term1636 A K _82351 k dom f neut)). Qed.
Lemma lem6445404 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : term1642 A K _82351 k dom f neut.
Proof. exact (fun h0 : term1641 A K _82351 k dom f neut => @lem6445403 A K _82351 k dom f neut). Qed.
Lemma lem6445406 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6445407 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1642 A K _82351 k dom f neut) = ((term1636 A K _82351 k dom f neut) = (term1636 A K _82351 k dom f neut)).
Proof. exact (@lem6445406 ((term1636 A K _82351 k dom f neut) = (term1636 A K _82351 k dom f neut))). Qed.
Lemma lem6445408 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1636 A K _82351 k dom f neut) = (term1636 A K _82351 k dom f neut).
Proof. exact (EQ_MP (@lem6445407 A K _82351 k dom f neut) (@lem6445404 A K _82351 k dom f neut)). Qed.
Lemma lem6445411 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6445413 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1641 A K _82351 k dom f neut) = (term1643 A K _82351 k dom f neut).
Proof. exact (@lem6445411 ((term1636 A K _82351 k dom f neut) = (term1636 A K _82351 k dom f neut))). Qed.
Lemma lem6445416 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1628 A K _82351 i _82352 k dom f x' neut) (h3 : x = i) : term1643 A K _82351 k dom f neut.
Proof. exact (EQ_MP (@lem6445413 A K _82351 k dom f neut) (@lem6441916 A K _82351 _82352 k dom f x' neut x i h1 h2 h3)). Qed.
Lemma lem6445419 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1628 A K _82351 i _82352 k dom f x' neut) (h3 : x = i) : False.
Proof. exact (@lem6445416 A K _82351 _82352 k dom f x' neut x i h1 h2 h3 (@lem6445408 A K _82351 k dom f neut)). Qed.
Lemma lem6445420 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1628 A K _82351 i _82352 k dom f x' neut) (h3 : x = i) : term92.
Proof. exact (fun h0 : ~ False => @lem6445419 A K _82351 _82352 k dom f x' neut x i h1 h2 h3). Qed.
Lemma lem6445422 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6445423 : term92 = False.
Proof. exact (@lem6445422 False). Qed.
Lemma lem6445850 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term1380 A K dom f x.
Proof. exact (proj1 (@lem6437657 A K k i dom f x neut h1)). Qed.
Lemma lem6445851 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term1455 A K dom f x.
Proof. exact (fun h0 : term1388 A K dom f x => @lem6445850 A K k i dom f x neut h1). Qed.
Lemma lem6445853 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6445854 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1455 A K dom f x) = (term1380 A K dom f x).
Proof. exact (@lem6445853 (term1380 A K dom f x)). Qed.
Lemma lem6445855 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) : term1380 A K dom f x.
Proof. exact (EQ_MP (@lem6445854 A K dom f x) (@lem6445851 A K k i dom f x neut h1)). Qed.
Lemma lem6445858 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6445860 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1388 A K dom f x) = (term1456 A K dom f x).
Proof. exact (@lem6445858 (term1380 A K dom f x)). Qed.
Lemma lem6445863 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1456 A K dom f x.
Proof. exact (EQ_MP (@lem6445860 A K dom f x) (@lem6442193 A K dom f x h1)). Qed.
Lemma lem6445866 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (@lem6445863 A K dom f x h1 (@lem6445855 A K k i dom f x neut h2)). Qed.
Lemma lem6445867 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1409 A K k i dom f x neut) : term92.
Proof. exact (fun h0 : ~ False => @lem6445866 A K k i dom f x neut h1 h2). Qed.
Lemma lem6445869 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6445870 : term92 = False.
Proof. exact (@lem6445869 False). Qed.
Lemma lem6445871 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6445870) (@lem6445867 A K k i dom f x neut h1 h2)). Qed.
Lemma lem6446297 {A : Type'} (x : A) : x = x.
Proof. exact (@lem21386 A x). Qed.
Lemma lem6446298 {A : Type'} (x : A) : x = x.
Proof. exact (@lem6446297 A x). Qed.
Lemma lem6446299 {A K : Type'} (f : K -> A) (x : K) : (@I (K -> A) f x) = (@I (K -> A) f x).
Proof. exact (@lem6446298 A (@I (K -> A) f x)). Qed.
Lemma lem6446300 {A K : Type'} (f : K -> A) (x : K) : term1457 A K f x.
Proof. exact (fun h0 : term1448 A K f x => @lem6446299 A K f x). Qed.
Lemma lem6446302 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6446303 {A K : Type'} (f : K -> A) (x : K) : (term1457 A K f x) = ((@I (K -> A) f x) = (@I (K -> A) f x)).
Proof. exact (@lem6446302 ((@I (K -> A) f x) = (@I (K -> A) f x))). Qed.
Lemma lem6446304 {A K : Type'} (f : K -> A) (x : K) : (@I (K -> A) f x) = (@I (K -> A) f x).
Proof. exact (EQ_MP (@lem6446303 A K f x) (@lem6446300 A K f x)). Qed.
Lemma lem6446307 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6446309 {A K : Type'} (f : K -> A) (x : K) : (term1448 A K f x) = (term1458 A K f x).
Proof. exact (@lem6446307 ((@I (K -> A) f x) = (@I (K -> A) f x))). Qed.
Lemma lem6446312 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : term1458 A K f x.
Proof. exact (EQ_MP (@lem6446309 A K f x) (@lem6442596 A K k i dom f x neut h1 h2)). Qed.
Lemma lem6446315 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (@lem6446312 A K k i dom f x neut h1 h2 (@lem6446304 A K f x)). Qed.
Lemma lem6446316 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : term92.
Proof. exact (fun h0 : ~ False => @lem6446315 A K k i dom f x neut h1 h2). Qed.
Lemma lem6446318 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6446319 : term92 = False.
Proof. exact (@lem6446318 False). Qed.
Lemma lem6446746 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : @I (K -> Prop) k x.
Proof. exact (proj1 (@lem6437676 A K k i dom f x neut h1)). Qed.
Lemma lem6446747 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1451 K k x.
Proof. exact (fun h0 : term1391 K k x => @lem6446746 A K k i dom f x neut h1). Qed.
Lemma lem6446749 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6446750 {K : Type'} (k : K -> Prop) (x : K) : (term1451 K k x) = (@I (K -> Prop) k x).
Proof. exact (@lem6446749 (@I (K -> Prop) k x)). Qed.
Lemma lem6446751 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : @I (K -> Prop) k x.
Proof. exact (EQ_MP (@lem6446750 K k x) (@lem6446747 A K k i dom f x neut h1)). Qed.
Lemma lem6446754 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6446756 {K : Type'} (k : K -> Prop) (x : K) : (term1391 K k x) = (term1452 K k x).
Proof. exact (@lem6446754 (@I (K -> Prop) k x)). Qed.
Lemma lem6446759 {K : Type'} (k : K -> Prop) (x : K) (h1 : term1391 K k x) : term1452 K k x.
Proof. exact (EQ_MP (@lem6446756 K k x) (@lem6442861 K k x h1)). Qed.
Lemma lem6446762 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (@lem6446759 K k x h1 (@lem6446751 A K k i dom f x neut h2)). Qed.
Lemma lem6446763 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1399 A K k i dom f x neut) : term92.
Proof. exact (fun h0 : ~ False => @lem6446762 A K k i dom f x neut h1 h2). Qed.
Lemma lem6446765 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6446766 : term92 = False.
Proof. exact (@lem6446765 False). Qed.
Lemma lem6446767 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6446766) (@lem6446763 A K k i dom f x neut h1 h2)). Qed.
Lemma lem6447193 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1380 A K dom f x.
Proof. exact (proj1 (@lem6437675 A K k i dom f x neut h1)). Qed.
Lemma lem6447194 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1455 A K dom f x.
Proof. exact (fun h0 : term1388 A K dom f x => @lem6447193 A K k i dom f x neut h1). Qed.
Lemma lem6447196 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6447197 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1455 A K dom f x) = (term1380 A K dom f x).
Proof. exact (@lem6447196 (term1380 A K dom f x)). Qed.
Lemma lem6447198 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1380 A K dom f x.
Proof. exact (EQ_MP (@lem6447197 A K dom f x) (@lem6447194 A K k i dom f x neut h1)). Qed.
Lemma lem6447201 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6447203 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1388 A K dom f x) = (term1456 A K dom f x).
Proof. exact (@lem6447201 (term1380 A K dom f x)). Qed.
Lemma lem6447206 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1456 A K dom f x.
Proof. exact (EQ_MP (@lem6447203 A K dom f x) (@lem6443071 A K dom f x h1)). Qed.
Lemma lem6447209 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (@lem6447206 A K dom f x h1 (@lem6447198 A K k i dom f x neut h2)). Qed.
Lemma lem6447210 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : term92.
Proof. exact (fun h0 : ~ False => @lem6447209 A K k i dom f x neut h1 h2). Qed.
Lemma lem6447212 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6447213 : term92 = False.
Proof. exact (@lem6447212 False). Qed.
Lemma lem6447214 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6447213) (@lem6447210 A K k i dom f x neut h1 h2)). Qed.
Lemma lem6447640 {A : Type'} (x : A) : x = x.
Proof. exact (@lem21386 A x). Qed.
Lemma lem6447641 {A : Type'} (x : A) : x = x.
Proof. exact (@lem6447640 A x). Qed.
Lemma lem6447642 {A K : Type'} (f : K -> A) (x : K) : (@I (K -> A) f x) = (@I (K -> A) f x).
Proof. exact (@lem6447641 A (@I (K -> A) f x)). Qed.
Lemma lem6447643 {A K : Type'} (f : K -> A) (x : K) : term1457 A K f x.
Proof. exact (fun h0 : term1448 A K f x => @lem6447642 A K f x). Qed.
Lemma lem6447645 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6447646 {A K : Type'} (f : K -> A) (x : K) : (term1457 A K f x) = ((@I (K -> A) f x) = (@I (K -> A) f x)).
Proof. exact (@lem6447645 ((@I (K -> A) f x) = (@I (K -> A) f x))). Qed.
Lemma lem6447647 {A K : Type'} (f : K -> A) (x : K) : (@I (K -> A) f x) = (@I (K -> A) f x).
Proof. exact (EQ_MP (@lem6447646 A K f x) (@lem6447643 A K f x)). Qed.
Lemma lem6447650 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6447652 {A K : Type'} (f : K -> A) (x : K) : (term1448 A K f x) = (term1458 A K f x).
Proof. exact (@lem6447650 ((@I (K -> A) f x) = (@I (K -> A) f x))). Qed.
Lemma lem6447655 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : term1458 A K f x.
Proof. exact (EQ_MP (@lem6447652 A K f x) (@lem6443447 A K k i dom f x neut h1 h2)). Qed.
Lemma lem6447658 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (@lem6447655 A K k i dom f x neut h1 h2 (@lem6447647 A K f x)). Qed.
Lemma lem6447659 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : term92.
Proof. exact (fun h0 : ~ False => @lem6447658 A K k i dom f x neut h1 h2). Qed.
Lemma lem6447661 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6447662 : term92 = False.
Proof. exact (@lem6447661 False). Qed.
Lemma lem6448089 {K : Type'} (x : K) : x = x.
Proof. exact (@lem21386 K x). Qed.
Lemma lem6448090 {K : Type'} (x : K) : x = x.
Proof. exact (@lem6448089 K x). Qed.
Lemma lem6448091 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1636 A K _82351 k dom f neut) = (term1636 A K _82351 k dom f neut).
Proof. exact (@lem6448090 K (term1636 A K _82351 k dom f neut)). Qed.
Lemma lem6448092 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : term1642 A K _82351 k dom f neut.
Proof. exact (fun h0 : term1641 A K _82351 k dom f neut => @lem6448091 A K _82351 k dom f neut). Qed.
Lemma lem6448094 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6448095 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1642 A K _82351 k dom f neut) = ((term1636 A K _82351 k dom f neut) = (term1636 A K _82351 k dom f neut)).
Proof. exact (@lem6448094 ((term1636 A K _82351 k dom f neut) = (term1636 A K _82351 k dom f neut))). Qed.
Lemma lem6448096 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1636 A K _82351 k dom f neut) = (term1636 A K _82351 k dom f neut).
Proof. exact (EQ_MP (@lem6448095 A K _82351 k dom f neut) (@lem6448092 A K _82351 k dom f neut)). Qed.
Lemma lem6448099 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6448101 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1641 A K _82351 k dom f neut) = (term1643 A K _82351 k dom f neut).
Proof. exact (@lem6448099 ((term1636 A K _82351 k dom f neut) = (term1636 A K _82351 k dom f neut))). Qed.
Lemma lem6448104 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1628 A K _82351 i _82352 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : x = i) : term1643 A K _82351 k dom f neut.
Proof. exact (EQ_MP (@lem6448101 A K _82351 k dom f neut) (@lem6443873 A K _82351 _82352 x' k dom f neut x i h1 h2 h3)). Qed.
Lemma lem6448107 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1628 A K _82351 i _82352 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : x = i) : False.
Proof. exact (@lem6448104 A K _82351 _82352 x' k dom f neut x i h1 h2 h3 (@lem6448096 A K _82351 k dom f neut)). Qed.
Lemma lem6448108 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1628 A K _82351 i _82352 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : x = i) : term92.
Proof. exact (fun h0 : ~ False => @lem6448107 A K _82351 _82352 x' k dom f neut x i h1 h2 h3). Qed.
Lemma lem6448110 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6448111 : term92 = False.
Proof. exact (@lem6448110 False). Qed.
Lemma lem6448538 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1380 A K dom f x.
Proof. exact (proj1 (@lem6437675 A K k i dom f x neut h1)). Qed.
Lemma lem6448539 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1455 A K dom f x.
Proof. exact (fun h0 : term1388 A K dom f x => @lem6448538 A K k i dom f x neut h1). Qed.
Lemma lem6448541 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6448542 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1455 A K dom f x) = (term1380 A K dom f x).
Proof. exact (@lem6448541 (term1380 A K dom f x)). Qed.
Lemma lem6448543 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) : term1380 A K dom f x.
Proof. exact (EQ_MP (@lem6448542 A K dom f x) (@lem6448539 A K k i dom f x neut h1)). Qed.
Lemma lem6448546 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6448548 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) : (term1388 A K dom f x) = (term1456 A K dom f x).
Proof. exact (@lem6448546 (term1380 A K dom f x)). Qed.
Lemma lem6448551 {A K : Type'} (dom : A -> Prop) (f : K -> A) (x : K) (h1 : term1388 A K dom f x) : term1456 A K dom f x.
Proof. exact (EQ_MP (@lem6448548 A K dom f x) (@lem6444083 A K dom f x h1)). Qed.
Lemma lem6448554 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (@lem6448551 A K dom f x h1 (@lem6448543 A K k i dom f x neut h2)). Qed.
Lemma lem6448555 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : term92.
Proof. exact (fun h0 : ~ False => @lem6448554 A K k i dom f x neut h1 h2). Qed.
Lemma lem6448557 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6448558 : term92 = False.
Proof. exact (@lem6448557 False). Qed.
Lemma lem6448559 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6448558) (@lem6448555 A K k i dom f x neut h1 h2)). Qed.
Lemma lem6448985 {A : Type'} (x : A) : x = x.
Proof. exact (@lem21386 A x). Qed.
Lemma lem6448986 {A : Type'} (x : A) : x = x.
Proof. exact (@lem6448985 A x). Qed.
Lemma lem6448987 {A K : Type'} (f : K -> A) (x : K) : (@I (K -> A) f x) = (@I (K -> A) f x).
Proof. exact (@lem6448986 A (@I (K -> A) f x)). Qed.
Lemma lem6448988 {A K : Type'} (f : K -> A) (x : K) : term1457 A K f x.
Proof. exact (fun h0 : term1448 A K f x => @lem6448987 A K f x). Qed.
Lemma lem6448990 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6448991 {A K : Type'} (f : K -> A) (x : K) : (term1457 A K f x) = ((@I (K -> A) f x) = (@I (K -> A) f x)).
Proof. exact (@lem6448990 ((@I (K -> A) f x) = (@I (K -> A) f x))). Qed.
Lemma lem6448992 {A K : Type'} (f : K -> A) (x : K) : (@I (K -> A) f x) = (@I (K -> A) f x).
Proof. exact (EQ_MP (@lem6448991 A K f x) (@lem6448988 A K f x)). Qed.
Lemma lem6448995 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem6448997 {A K : Type'} (f : K -> A) (x : K) : (term1448 A K f x) = (term1458 A K f x).
Proof. exact (@lem6448995 ((@I (K -> A) f x) = (@I (K -> A) f x))). Qed.
Lemma lem6449000 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : term1458 A K f x.
Proof. exact (EQ_MP (@lem6448997 A K f x) (@lem6444459 A K k i dom f x neut h1 h2)). Qed.
Lemma lem6449003 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (@lem6449000 A K k i dom f x neut h1 h2 (@lem6448992 A K f x)). Qed.
Lemma lem6449004 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : term92.
Proof. exact (fun h0 : ~ False => @lem6449003 A K k i dom f x neut h1 h2). Qed.
Lemma lem6449006 (p : Prop) : (term90 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem6449007 : term92 = False.
Proof. exact (@lem6449006 False). Qed.
Lemma lem6449010 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6449007) (@lem6449004 A K k i dom f x neut h1 h2)). Qed.
Lemma lem6449011 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6448559 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6444083 A K dom f x h1)). Qed.
Lemma lem6449013 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6449011 A K k i dom f x neut h1 h2) (@lem6444083 A K dom f x h1)). Qed.
Lemma lem6449015 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1628 A K _82351 i _82352 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : x = i) : False.
Proof. exact (EQ_MP (@lem6448111) (@lem6448108 A K _82351 _82352 x' k dom f neut x i h1 h2 h3)). Qed.
Lemma lem6449017 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6447662) (@lem6447659 A K k i dom f x neut h1 h2)). Qed.
Lemma lem6449018 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6447214 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6443071 A K dom f x h1)). Qed.
Lemma lem6449020 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6449018 A K k i dom f x neut h1 h2) (@lem6443071 A K dom f x h1)). Qed.
Lemma lem6449021 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1399 A K k i dom f x neut) : (term1391 K k x) = False.
Proof. exact (prop_ext (fun h3 : term1391 K k x => @lem6446767 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6442861 K k x h1)). Qed.
Lemma lem6449023 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6449021 A K k i dom f x neut h1 h2) (@lem6442861 K k x h1)). Qed.
Lemma lem6449025 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6446319) (@lem6446316 A K k i dom f x neut h1 h2)). Qed.
Lemma lem6449026 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1409 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6445871 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6442193 A K dom f x h1)). Qed.
Lemma lem6449028 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6449026 A K k i dom f x neut h1 h2) (@lem6442193 A K dom f x h1)). Qed.
Lemma lem6449030 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1628 A K _82351 i _82352 k dom f x' neut) (h3 : x = i) : False.
Proof. exact (EQ_MP (@lem6445423) (@lem6445420 A K _82351 _82352 k dom f x' neut x i h1 h2 h3)). Qed.
Lemma lem6449031 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1409 A K k i dom f x neut) : (term1391 K k x) = False.
Proof. exact (prop_ext (fun h3 : term1391 K k x => @lem6444975 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6441504 K k x h1)). Qed.
Lemma lem6449033 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6449031 A K k i dom f x neut h1 h2) (@lem6441504 K k x h1)). Qed.
Lemma lem6449034 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : ((@I (K -> A) f x) = neut) = False.
Proof. exact (prop_ext (fun h3 : (@I (K -> A) f x) = neut => @lem6449010 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6441254 A K f x neut h2)). Qed.
Lemma lem6449035 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6449034 A K k i dom f x neut h1 h2) (@lem6441254 A K f x neut h2)). Qed.
Lemma lem6449036 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6449013 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6441168 A K dom f x h1)). Qed.
Lemma lem6449037 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6449036 A K k i dom f x neut h1 h2) (@lem6441168 A K dom f x h1)). Qed.
Lemma lem6449038 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1628 A K _82351 i _82352 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : x = i) : (x = i) = False.
Proof. exact (prop_ext (fun h4 : x = i => @lem6449015 A K _82351 _82352 x' k dom f neut x i h1 h2 h3) (fun h4 : False => @lem6441082 K x i h3)). Qed.
Lemma lem6449039 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1628 A K _82351 i _82352 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : x = i) : False.
Proof. exact (EQ_MP (@lem6449038 A K _82351 _82352 x' k dom f neut x i h1 h2 h3) (@lem6441082 K x i h3)). Qed.
Lemma lem6449040 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : ((@I (K -> A) f x) = neut) = False.
Proof. exact (prop_ext (fun h3 : (@I (K -> A) f x) = neut => @lem6449017 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6440996 A K f x neut h2)). Qed.
Lemma lem6449041 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6449040 A K k i dom f x neut h1 h2) (@lem6440996 A K f x neut h2)). Qed.
Lemma lem6449042 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6449020 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6440910 A K dom f x h1)). Qed.
Lemma lem6449043 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6449042 A K k i dom f x neut h1 h2) (@lem6440910 A K dom f x h1)). Qed.
Lemma lem6449044 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1399 A K k i dom f x neut) : (term1391 K k x) = False.
Proof. exact (prop_ext (fun h3 : term1391 K k x => @lem6449023 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6440824 K k x h1)). Qed.
Lemma lem6449045 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6449044 A K k i dom f x neut h1 h2) (@lem6440824 K k x h1)). Qed.
Lemma lem6449046 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : ((@I (K -> A) f x) = neut) = False.
Proof. exact (prop_ext (fun h3 : (@I (K -> A) f x) = neut => @lem6449025 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6440738 A K f x neut h2)). Qed.
Lemma lem6449047 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6449046 A K k i dom f x neut h1 h2) (@lem6440738 A K f x neut h2)). Qed.
Lemma lem6449048 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1409 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6449028 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6440648 A K dom f x h1)). Qed.
Lemma lem6449049 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6449048 A K k i dom f x neut h1 h2) (@lem6440648 A K dom f x h1)). Qed.
Lemma lem6449050 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1628 A K _82351 i _82352 k dom f x' neut) (h3 : x = i) : (x = i) = False.
Proof. exact (prop_ext (fun h4 : x = i => @lem6449030 A K _82351 _82352 k dom f x' neut x i h1 h2 h3) (fun h4 : False => @lem6440558 K x i h3)). Qed.
Lemma lem6449051 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1628 A K _82351 i _82352 k dom f x' neut) (h3 : x = i) : False.
Proof. exact (EQ_MP (@lem6449050 A K _82351 _82352 k dom f x' neut x i h1 h2 h3) (@lem6440558 K x i h3)). Qed.
Lemma lem6449052 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1409 A K k i dom f x neut) : (term1391 K k x) = False.
Proof. exact (prop_ext (fun h3 : term1391 K k x => @lem6449033 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6440468 K k x h1)). Qed.
Lemma lem6449053 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6449052 A K k i dom f x neut h1 h2) (@lem6440468 K k x h1)). Qed.
Lemma lem6449054 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : ((@I (K -> A) f x) = neut) = False.
Proof. exact (prop_ext (fun h3 : (@I (K -> A) f x) = neut => @lem6449035 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6439912 A K f x neut h2)). Qed.
Lemma lem6449055 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6449054 A K k i dom f x neut h1 h2) (@lem6439912 A K f x neut h2)). Qed.
Lemma lem6449056 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6449037 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6439693 A K dom f x h1)). Qed.
Lemma lem6449057 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6449056 A K k i dom f x neut h1 h2) (@lem6439693 A K dom f x h1)). Qed.
Lemma lem6449058 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1628 A K _82351 i _82352 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : x = i) : (x = i) = False.
Proof. exact (prop_ext (fun h4 : x = i => @lem6449039 A K _82351 _82352 x' k dom f neut x i h1 h2 h3) (fun h4 : False => @lem6439474 K x i h3)). Qed.
Lemma lem6449059 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1628 A K _82351 i _82352 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : x = i) : False.
Proof. exact (EQ_MP (@lem6449058 A K _82351 _82352 x' k dom f neut x i h1 h2 h3) (@lem6439474 K x i h3)). Qed.
Lemma lem6449060 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : ((@I (K -> A) f x) = neut) = False.
Proof. exact (prop_ext (fun h3 : (@I (K -> A) f x) = neut => @lem6449041 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6439255 A K f x neut h2)). Qed.
Lemma lem6449061 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6449060 A K k i dom f x neut h1 h2) (@lem6439255 A K f x neut h2)). Qed.
Lemma lem6449062 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6449043 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6439036 A K dom f x h1)). Qed.
Lemma lem6449063 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6449062 A K k i dom f x neut h1 h2) (@lem6439036 A K dom f x h1)). Qed.
Lemma lem6449064 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1399 A K k i dom f x neut) : (term1391 K k x) = False.
Proof. exact (prop_ext (fun h3 : term1391 K k x => @lem6449045 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6438817 K k x h1)). Qed.
Lemma lem6449065 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6449064 A K k i dom f x neut h1 h2) (@lem6438817 K k x h1)). Qed.
Lemma lem6449066 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : ((@I (K -> A) f x) = neut) = False.
Proof. exact (prop_ext (fun h3 : (@I (K -> A) f x) = neut => @lem6449047 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6438598 A K f x neut h2)). Qed.
Lemma lem6449067 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6449066 A K k i dom f x neut h1 h2) (@lem6438598 A K f x neut h2)). Qed.
Lemma lem6449068 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1409 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6449049 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6438371 A K dom f x h1)). Qed.
Lemma lem6449069 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6449068 A K k i dom f x neut h1 h2) (@lem6438371 A K dom f x h1)). Qed.
Lemma lem6449070 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1628 A K _82351 i _82352 k dom f x' neut) (h3 : x = i) : (x = i) = False.
Proof. exact (prop_ext (fun h4 : x = i => @lem6449051 A K _82351 _82352 k dom f x' neut x i h1 h2 h3) (fun h4 : False => @lem6438144 K x i h3)). Qed.
Lemma lem6449071 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1628 A K _82351 i _82352 k dom f x' neut) (h3 : x = i) : False.
Proof. exact (EQ_MP (@lem6449070 A K _82351 _82352 k dom f x' neut x i h1 h2 h3) (@lem6438144 K x i h3)). Qed.
Lemma lem6449072 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1409 A K k i dom f x neut) : (term1391 K k x) = False.
Proof. exact (prop_ext (fun h3 : term1391 K k x => @lem6449053 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6437917 K k x h1)). Qed.
Lemma lem6449073 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6449072 A K k i dom f x neut h1 h2) (@lem6437917 K k x h1)). Qed.
Lemma lem6449074 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : ((@I (K -> A) f x) = neut) = False.
Proof. exact (prop_ext (fun h3 : (@I (K -> A) f x) = neut => @lem6449055 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6439912 A K f x neut h2)). Qed.
Lemma lem6449075 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6449074 A K k i dom f x neut h1 h2) (@lem6439912 A K f x neut h2)). Qed.
Lemma lem6449076 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6449057 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6439693 A K dom f x h1)). Qed.
Lemma lem6449077 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6449076 A K k i dom f x neut h1 h2) (@lem6439693 A K dom f x h1)). Qed.
Lemma lem6449078 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1628 A K _82351 i _82352 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : x = i) : (x = i) = False.
Proof. exact (prop_ext (fun h4 : x = i => @lem6449059 A K _82351 _82352 x' k dom f neut x i h1 h2 h3) (fun h4 : False => @lem6439474 K x i h3)). Qed.
Lemma lem6449079 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1628 A K _82351 i _82352 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : x = i) : False.
Proof. exact (EQ_MP (@lem6449078 A K _82351 _82352 x' k dom f neut x i h1 h2 h3) (@lem6439474 K x i h3)). Qed.
Lemma lem6449080 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : ((@I (K -> A) f x) = neut) = False.
Proof. exact (prop_ext (fun h3 : (@I (K -> A) f x) = neut => @lem6449061 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6439255 A K f x neut h2)). Qed.
Lemma lem6449081 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6449080 A K k i dom f x neut h1 h2) (@lem6439255 A K f x neut h2)). Qed.
Lemma lem6449082 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6449063 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6439036 A K dom f x h1)). Qed.
Lemma lem6449083 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6449082 A K k i dom f x neut h1 h2) (@lem6439036 A K dom f x h1)). Qed.
Lemma lem6449084 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1399 A K k i dom f x neut) : (term1391 K k x) = False.
Proof. exact (prop_ext (fun h3 : term1391 K k x => @lem6449065 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6438817 K k x h1)). Qed.
Lemma lem6449085 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6449084 A K k i dom f x neut h1 h2) (@lem6438817 K k x h1)). Qed.
Lemma lem6449086 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : ((@I (K -> A) f x) = neut) = False.
Proof. exact (prop_ext (fun h3 : (@I (K -> A) f x) = neut => @lem6449067 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6438598 A K f x neut h2)). Qed.
Lemma lem6449087 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : (@I (K -> A) f x) = neut) : False.
Proof. exact (EQ_MP (@lem6449086 A K k i dom f x neut h1 h2) (@lem6438598 A K f x neut h2)). Qed.
Lemma lem6449088 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1409 A K k i dom f x neut) : (term1388 A K dom f x) = False.
Proof. exact (prop_ext (fun h3 : term1388 A K dom f x => @lem6449069 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6438371 A K dom f x h1)). Qed.
Lemma lem6449089 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1388 A K dom f x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6449088 A K k i dom f x neut h1 h2) (@lem6438371 A K dom f x h1)). Qed.
Lemma lem6449090 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1628 A K _82351 i _82352 k dom f x' neut) (h3 : x = i) : (x = i) = False.
Proof. exact (prop_ext (fun h4 : x = i => @lem6449071 A K _82351 _82352 k dom f x' neut x i h1 h2 h3) (fun h4 : False => @lem6438144 K x i h3)). Qed.
Lemma lem6449091 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1628 A K _82351 i _82352 k dom f x' neut) (h3 : x = i) : False.
Proof. exact (EQ_MP (@lem6449090 A K _82351 _82352 k dom f x' neut x i h1 h2 h3) (@lem6438144 K x i h3)). Qed.
Lemma lem6449092 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1409 A K k i dom f x neut) : (term1391 K k x) = False.
Proof. exact (prop_ext (fun h3 : term1391 K k x => @lem6449073 A K k i dom f x neut h1 h2) (fun h3 : False => @lem6437917 K k x h1)). Qed.
Lemma lem6449093 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1391 K k x) (h2 : term1409 A K k i dom f x neut) : False.
Proof. exact (EQ_MP (@lem6449092 A K k i dom f x neut h1 h2) (@lem6437917 K k x h1)). Qed.
Lemma lem6449094 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : term1390 A K dom f x neut) : False.
Proof. exact (or_elim (@lem6437682 A K dom f x neut h2) (fun h0 : term1388 A K dom f x => @lem6449077 A K k i dom f x neut h0 h1) (fun h0 : (@I (K -> A) f x) = neut => @lem6449075 A K k i dom f x neut h1 h0)). Qed.
Lemma lem6449095 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : term1390 A K dom f x neut) : False.
Proof. exact (or_elim (@lem6437686 A K dom f x neut h2) (fun h0 : term1388 A K dom f x => @lem6449083 A K k i dom f x neut h0 h1) (fun h0 : (@I (K -> A) f x) = neut => @lem6449081 A K k i dom f x neut h1 h0)). Qed.
Lemma lem6449096 {A K : Type'} (i : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1399 A K k i dom f x neut) (h2 : term1393 A K k dom f x neut) : False.
Proof. exact (or_elim (@lem6437683 A K k dom f x neut h2) (fun h0 : term1391 K k x => @lem6449085 A K k i dom f x neut h0 h1) (fun h0 : term1390 A K dom f x neut => @lem6449095 A K k i dom f x neut h1 h0)). Qed.
Lemma lem6449097 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (x' : K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (x : K) (i : K) (h1 : term1628 A K _82351 i _82352 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) (h3 : term1395 A K k dom f neut x i) : False.
Proof. exact (or_elim (@lem6437681 A K k dom f neut x i h3) (fun h0 : term1393 A K k dom f x neut => @lem6449096 A K i k dom f x neut h2 h0) (fun h0 : x = i => @lem6449079 A K _82351 _82352 x' k dom f neut x i h1 h2 h0)). Qed.
Lemma lem6449098 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (x' : K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1628 A K _82351 i _82352 k dom f x' neut) (h2 : term1399 A K k i dom f x neut) : False.
Proof. exact (or_elim (@lem6437674 A K k i dom f x neut h2) (fun h0 : term1395 A K k dom f neut x i => @lem6449097 A K _82351 _82352 x' k dom f neut x i h1 h2 h0) (fun h0 : term1390 A K dom f x neut => @lem6449094 A K k i dom f x neut h2 h0)). Qed.
Lemma lem6449099 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (x : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : term1390 A K dom f x neut) : False.
Proof. exact (or_elim (@lem6437668 A K dom f x neut h2) (fun h0 : term1388 A K dom f x => @lem6449089 A K k i dom f x neut h0 h1) (fun h0 : (@I (K -> A) f x) = neut => @lem6449087 A K k i dom f x neut h1 h0)). Qed.
Lemma lem6449100 {A K : Type'} (_82351 : type836 A K) (_82352 : type835 A K) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (k : K -> Prop) (x : K) (i : K) (h1 : term1409 A K k i dom f x neut) (h2 : term1628 A K _82351 i _82352 k dom f x' neut) (h3 : term1400 K k x i) : False.
Proof. exact (or_elim (@lem6437667 K k x i h3) (fun h0 : term1391 K k x => @lem6449093 A K k i dom f x neut h0 h1) (fun h0 : x = i => @lem6449091 A K _82351 _82352 k dom f x' neut x i h1 h2 h0)). Qed.
Lemma lem6449101 {A K : Type'} (x : K) (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term1409 A K k i dom f x neut) (h2 : term1628 A K _82351 i _82352 k dom f x' neut) : False.
Proof. exact (or_elim (@lem6437655 A K k i dom f x neut h1) (fun h0 : term1400 K k x i => @lem6449100 A K _82351 _82352 dom f x' neut k x i h1 h2 h0) (fun h0 : term1390 A K dom f x neut => @lem6449099 A K k i dom f x neut h1 h0)). Qed.
Lemma lem6449102 {A K : Type'} (x : K) (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term743 A K k i dom f x neut) (h2 : term1628 A K _82351 i _82352 k dom f x' neut) : False.
Proof. exact (or_elim (@lem6437061 A K k i dom f x neut h1) (fun h0 : term1409 A K k i dom f x neut => @lem6449101 A K x _82351 i _82352 k dom f x' neut h0 h2) (fun h0 : term1399 A K k i dom f x neut => @lem6449098 A K _82351 _82352 x' k i dom f x neut h2 h0)). Qed.
Lemma lem6449103 {A K : Type'} (x : K) (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (x' : K) (neut : A) (h1 : term737 A K _82352) (h2 : term743 A K k i dom f x neut) (h3 : term1628 A K _82351 i _82352 k dom f x' neut) : False.
Proof. exact (ex_elim (@lem6436130 A K _82352 h1) (fun i' : type834 A K => fun h0 : term1043 A K _82352 i' => @lem6449102 A K x _82351 i _82352 k dom f x' neut h2 h3)). Qed.
Lemma lem6449104 {A K : Type'} (x : K) (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term737 A K _82352) (h2 : term743 A K k i dom f x neut) (h3 : term1583 A K _82351 i _82352 k dom f neut) : False.
Proof. exact (ex_elim (@lem6436462 A K _82351 i _82352 k dom f neut h3) (fun x' : K => fun h0 : term1630 A K _82351 i _82352 k dom f neut x' => @lem6449103 A K x _82351 i _82352 k dom f x' neut h1 h2 h0)). Qed.
Lemma lem6449105 {A K : Type'} (x : K) (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term737 A K _82352) (h2 : term743 A K k i dom f x neut) (h3 : term1583 A K _82351 i _82352 k dom f neut) : (term743 A K k i dom f x neut) = False.
Proof. exact (prop_ext (fun h4 : term743 A K k i dom f x neut => @lem6449104 A K x _82351 i _82352 k dom f neut h1 h2 h3) (fun h4 : False => @lem6435104 A K k i dom f x neut h2)). Qed.
Lemma lem6449106 {A K : Type'} (x : K) (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term737 A K _82352) (h2 : term743 A K k i dom f x neut) (h3 : term1583 A K _82351 i _82352 k dom f neut) : False.
Proof. exact (EQ_MP (@lem6449105 A K x _82351 i _82352 k dom f neut h1 h2 h3) (@lem6435104 A K k i dom f x neut h2)). Qed.
Lemma lem6449107 {A K : Type'} (x : K) (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term737 A K _82352) (h2 : term1583 A K _82351 i _82352 k dom f neut) : term742 A K k i dom f x neut.
Proof. exact (fun h0 : term743 A K k i dom f x neut => @lem6449106 A K x _82351 i _82352 k dom f neut h1 h0 h2). Qed.
Lemma lem6449108 {A K : Type'} (x : K) (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term737 A K _82352) (h2 : term1583 A K _82351 i _82352 k dom f neut) : (term438 A K k i dom f x neut) = (term461 A K k i dom f x neut).
Proof. exact (EQ_MP (@lem6435103 A K k i dom f x neut) (@lem6449107 A K x _82351 i _82352 k dom f neut h1 h2)). Qed.
Lemma lem6449113 {A K : Type'} (_82351 : type836 A K) (i : K) (_82352 : type835 A K) (k : K -> Prop) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term737 A K _82352) (h2 : term1583 A K _82351 i _82352 k dom f neut) : term464 A K k i dom f neut.
Proof. exact (fun x : K => @lem6449108 A K x _82351 i _82352 k dom f neut h1 h2). Qed.
Lemma lem6449114 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : term737 A K _82352) : term1585 A K _82351 _82352 k i dom f neut.
Proof. exact (fun h0 : term1583 A K _82351 i _82352 k dom f neut => @lem6449113 A K _82351 i _82352 k dom f neut h1 h0). Qed.
Lemma lem6449115 {A K : Type'} (_82351 : type836 A K) (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : term737 A K _82352) : term1586 A K _82351 _82352 k i dom f neut.
Proof. exact (fun h0 : term1534 A K _82351 => @lem6449114 A K _82351 k i dom f neut _82352 h1). Qed.
Lemma lem6449120 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : term737 A K _82352) : term1588 A K _82352 k i dom f neut.
Proof. exact (fun _82351 : type836 A K => @lem6449115 A K _82351 k i dom f neut _82352 h1). Qed.
Lemma lem6449125 {A K : Type'} (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : term737 A K _82352) : term1590 A K _82352 i dom f neut.
Proof. exact (fun k : K -> Prop => @lem6449120 A K k i dom f neut _82352 h1). Qed.
Lemma lem6449130 {A K : Type'} (dom : A -> Prop) (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : term737 A K _82352) : term1592 A K _82352 dom f neut.
Proof. exact (fun i : K => @lem6449125 A K i dom f neut _82352 h1). Qed.
Lemma lem6449135 {A K : Type'} (f : K -> A) (neut : A) (_82352 : type835 A K) (h1 : term737 A K _82352) : term1594 A K _82352 f neut.
Proof. exact (fun dom : A -> Prop => @lem6449130 A K dom f neut _82352 h1). Qed.
Lemma lem6449140 {A K : Type'} (neut : A) (_82352 : type835 A K) (h1 : term737 A K _82352) : term1596 A K _82352 neut.
Proof. exact (fun f : K -> A => @lem6449135 A K f neut _82352 h1). Qed.
Lemma lem6449145 {A K : Type'} (_82352 : type835 A K) (h1 : term737 A K _82352) : term1598 A K _82352.
Proof. exact (fun neut : A => @lem6449140 A K neut _82352 h1). Qed.
Lemma lem6449146 {A K : Type'} (_82352 : type835 A K) : term1618 A K _82352.
Proof. exact (fun h0 : term737 A K _82352 => @lem6449145 A K _82352 h0). Qed.
Lemma lem6449151 {A K : Type'} : term1620 A K.
Proof. exact (fun _82352 : type835 A K => @lem6449146 A K _82352). Qed.
Lemma lem6449152 {A K : Type'} : term1581 A K.
Proof. exact (EQ_MP (@lem6435096 A K) (@lem6449151 A K)). Qed.
Lemma lem6449153 {A K : Type'} (neut : A) : term1644 A K neut.
Proof. exact (@lem6449152 A K neut). Qed.
Lemma lem6449154 {A K : Type'} (neut : A) : (term1644 A K neut) = (term1577 A K neut).
Proof. exact (eq_refl (term1644 A K neut)). Qed.
Lemma lem6449155 {A K : Type'} (neut : A) : term1577 A K neut.
Proof. exact (EQ_MP (@lem6449154 A K neut) (@lem6449153 A K neut)). Qed.
Lemma lem6449156 {A K : Type'} (neut : A) (f : K -> A) : term1645 A K neut f.
Proof. exact (@lem6449155 A K neut f). Qed.
Lemma lem6449157 {A K : Type'} (f : K -> A) (neut : A) : (term1645 A K neut f) = (term1573 A K f neut).
Proof. exact (eq_refl (term1645 A K neut f)). Qed.
Lemma lem6449158 {A K : Type'} (f : K -> A) (neut : A) : term1573 A K f neut.
Proof. exact (EQ_MP (@lem6449157 A K f neut) (@lem6449156 A K neut f)). Qed.
Lemma lem6449159 {A K : Type'} (f : K -> A) (neut : A) (dom : A -> Prop) : term1646 A K f neut dom.
Proof. exact (@lem6449158 A K f neut dom). Qed.
Lemma lem6449160 {A K : Type'} (dom : A -> Prop) (f : K -> A) (neut : A) : (term1646 A K f neut dom) = (term1569 A K dom f neut).
Proof. exact (eq_refl (term1646 A K f neut dom)). Qed.
Lemma lem6449161 {A K : Type'} (dom : A -> Prop) (f : K -> A) (neut : A) : term1569 A K dom f neut.
Proof. exact (EQ_MP (@lem6449160 A K dom f neut) (@lem6449159 A K f neut dom)). Qed.
Lemma lem6449162 {A K : Type'} (dom : A -> Prop) (f : K -> A) (neut : A) (i : K) : term1647 A K dom f neut i.
Proof. exact (@lem6449161 A K dom f neut i). Qed.
Lemma lem6449163 {A K : Type'} (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1647 A K dom f neut i) = (term1565 A K i dom f neut).
Proof. exact (eq_refl (term1647 A K dom f neut i)). Qed.
Lemma lem6449164 {A K : Type'} (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term1565 A K i dom f neut.
Proof. exact (EQ_MP (@lem6449163 A K i dom f neut) (@lem6449162 A K dom f neut i)). Qed.
Lemma lem6449165 {A K : Type'} (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (k : K -> Prop) : term1648 A K i dom f neut k.
Proof. exact (@lem6449164 A K i dom f neut k). Qed.
Lemma lem6449166 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : (term1648 A K i dom f neut k) = (term1546 A K k i dom f neut).
Proof. exact (eq_refl (term1648 A K i dom f neut k)). Qed.
Lemma lem6449167 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term1546 A K k i dom f neut.
Proof. exact (EQ_MP (@lem6449166 A K k i dom f neut) (@lem6449165 A K i dom f neut k)). Qed.
Lemma lem6449169 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term1465 A K k i dom f neut.
Proof. exact (@lem6434169 A K k i dom f neut (@lem6449167 A K k i dom f neut)). Qed.
Lemma lem6449170 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term1466 A K k i dom f neut) : False.
Proof. exact (@lem6449169 A K k i dom f neut (@lem6433986 A K k i dom f neut h1)). Qed.
Lemma lem6449171 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term1466 A K k i dom f neut) : (term1466 A K k i dom f neut) = False.
Proof. exact (prop_ext (fun h2 : term1466 A K k i dom f neut => @lem6449170 A K k i dom f neut h1) (fun h2 : False => @lem6433986 A K k i dom f neut h1)). Qed.
Lemma lem6449172 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) (h1 : term1466 A K k i dom f neut) : False.
Proof. exact (EQ_MP (@lem6449171 A K k i dom f neut h1) (@lem6433986 A K k i dom f neut h1)). Qed.
Lemma lem6449173 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term1465 A K k i dom f neut.
Proof. exact (fun h0 : term1466 A K k i dom f neut => @lem6449172 A K k i dom f neut h0). Qed.
Lemma lem6449174 {A K : Type'} (k : K -> Prop) (i : K) (dom : A -> Prop) (f : K -> A) (neut : A) : term473 A K k i dom f neut.
Proof. exact (EQ_MP (@lem6433985 A K k i dom f neut) (@lem6449173 A K k i dom f neut)). Qed.
Lemma lem6449175 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : term362 A K k i f dom neut.
Proof. exact (EQ_MP (@lem6404862 A K k i f dom neut) (@lem6449174 A K k i dom f neut)). Qed.
Lemma lem6449176 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : term356 A K ltle k i f dom neut.
Proof. exact (EQ_MP (@lem6404342 A K ltle k i f dom neut) (@lem6433981 A K ltle k i dom f neut)). Qed.
Lemma lem6449179 {A K : Type'} (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : term329 A K k i f dom neut.
Proof. exact (EQ_MP (@lem6403738 A K k i f dom neut) (@lem6449175 A K k i f dom neut)). Qed.
Lemma lem6449180 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : term332 A K ltle k i f dom neut.
Proof. exact (fun h0 : term1649 A K ltle k f dom neut => @lem6449179 A K k i f dom neut). Qed.
Lemma lem6449181 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : term334 A K ltle k i f dom neut.
Proof. exact (EQ_MP (@lem6403652 A K ltle k i f dom neut) (@lem6449176 A K ltle k i f dom neut)). Qed.
Lemma lem6449182 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : term337 A K ltle k i f dom neut.
Proof. exact (fun h0 : term217 A K ltle k f dom neut => @lem6449181 A K ltle k i f dom neut). Qed.
Lemma lem6449183 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : term340 A K ltle k i f dom neut.
Proof. exact (conj (@lem6449182 A K ltle k i f dom neut) (@lem6449180 A K ltle k i f dom neut)). Qed.
Lemma lem6449184 {A K : Type'} (ltle : type1402 K) (k : K -> Prop) (i : K) (f : K -> A) (dom : A -> Prop) (neut : A) : term341 A K ltle k i f dom neut.
Proof. exact (EQ_MP (@lem6403516 A K ltle k i f dom neut) (@lem6449183 A K ltle k i f dom neut)). Qed.
Lemma lem6449185 {A K : Type'} (i : K) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term250 A K k f dom neut) (h2 : i = (term226 A K ltle k f dom neut)) : (term353 A K k i f dom neut) = (term354 A K k i f dom neut).
Proof. exact (@lem6449184 A K ltle k i f dom neut (@lem6403498 A K i ltle k f dom neut h1 h2)). Qed.
Lemma lem6449186 {A K : Type'} (op : type1400 A) (i : K) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term250 A K k f dom neut) (h2 : i = (term226 A K ltle k f dom neut)) : (term1650 A K op ltle k i f dom neut) = (term1651 A K op ltle k i f dom neut).
Proof. exact (MK_COMB (@lem6403487 A K dom neut op ltle) (@lem6449185 A K i ltle k f dom neut h1 h2)). Qed.
Lemma lem6449187 {A K : Type'} (op : type1400 A) (i : K) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term250 A K k f dom neut) (h2 : i = (term226 A K ltle k f dom neut)) : (term1652 A K op ltle k i dom neut f) = (term1653 A K op ltle k i dom neut f).
Proof. exact (MK_COMB (@lem6449186 A K op i ltle k f dom neut h1 h2) (@lem6403486 A K f)). Qed.
Lemma lem6449188 {A K : Type'} (op : type1400 A) (i : K) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term250 A K k f dom neut) (h2 : i = (term226 A K ltle k f dom neut)) : (term319 A K op ltle k i dom neut f) = (term314 A K op ltle k i dom neut f).
Proof. exact (MK_COMB (@lem6403485 A K op f i) (@lem6449187 A K op i ltle k f dom neut h1 h2)). Qed.
Lemma lem6449189 {A K : Type'} (op : type1400 A) (i : K) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term250 A K k f dom neut) (h2 : i = (term226 A K ltle k f dom neut)) : (term307 A K op ltle k dom neut f i) = (term314 A K op ltle k i dom neut f).
Proof. exact (EQ_MP (@lem6403484 A K op ltle k i dom neut f) (@lem6449188 A K op i ltle k f dom neut h1 h2)). Qed.
Lemma lem6449190 {A K : Type'} (op : type1400 A) (i : K) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term250 A K k f dom neut) (h2 : i = (term226 A K ltle k f dom neut)) : (term307 A K op ltle k dom neut f i) = (term308 A K op ltle k dom neut f i).
Proof. exact (EQ_MP (@lem6403468 A K op ltle k dom neut f i) (@lem6449189 A K op i ltle k f dom neut h1 h2)). Qed.
Lemma lem6449191 {A K : Type'} (op : type1400 A) (i : K) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term250 A K k f dom neut) (h2 : i = (term226 A K ltle k f dom neut)) : (term250 A K k f dom neut) = ((term307 A K op ltle k dom neut f i) = (term308 A K op ltle k dom neut f i)).
Proof. exact (prop_ext (fun h3 : term250 A K k f dom neut => @lem6449190 A K op i ltle k f dom neut h1 h2) (fun h3 : (term307 A K op ltle k dom neut f i) = (term308 A K op ltle k dom neut f i) => @lem6403454 A K k f dom neut h1)). Qed.
Lemma lem6449192 {A K : Type'} (op : type1400 A) (i : K) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term250 A K k f dom neut) (h2 : i = (term226 A K ltle k f dom neut)) : (term307 A K op ltle k dom neut f i) = (term308 A K op ltle k dom neut f i).
Proof. exact (EQ_MP (@lem6449191 A K op i ltle k f dom neut h1 h2) (@lem6403454 A K k f dom neut h1)). Qed.
Lemma lem6449193 {A K : Type'} (op : type1400 A) (i : K) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term250 A K k f dom neut) (h2 : i = (term226 A K ltle k f dom neut)) : (term255 A K op ltle k f dom neut) = (term229 A K op ltle k f dom neut).
Proof. exact (EQ_MP (@lem6403440 A K op i ltle k f dom neut h2) (@lem6449192 A K op i ltle k f dom neut h1 h2)). Qed.
Lemma lem6449194 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term250 A K k f dom neut) : (term255 A K op ltle k f dom neut) = (term229 A K op ltle k f dom neut).
Proof. exact (ex_elim (@lem6403425 A K ltle k f dom neut) (fun i : K => fun h0 : term299 A K ltle k f dom neut i => @lem6449193 A K op i ltle k f dom neut h1 h0)). Qed.
Lemma lem6449195 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term250 A K k f dom neut) : (term255 A K op ltle k f dom neut) = (term286 A K op ltle k f dom neut).
Proof. exact (EQ_MP (@lem6403383 A K op ltle k f dom neut) (@lem6449194 A K op ltle k f dom neut h1)). Qed.
Lemma lem6449196 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term289 A K k f dom neut) : neut = (term110 A K op ltle k f dom neut).
Proof. exact (EQ_MP (@lem6403261 A K op ltle k f dom neut h1) (@lem6403400 A K op ltle k f dom neut)). Qed.
Lemma lem6449197 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term289 A K k f dom neut) : (term289 A K k f dom neut) = (neut = (term110 A K op ltle k f dom neut)).
Proof. exact (prop_ext (fun h2 : term289 A K k f dom neut => @lem6449196 A K op ltle k f dom neut h1) (fun h2 : neut = (term110 A K op ltle k f dom neut) => @lem6403246 A K k f dom neut h1)). Qed.
Lemma lem6449198 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term289 A K k f dom neut) : neut = (term110 A K op ltle k f dom neut).
Proof. exact (EQ_MP (@lem6449197 A K op ltle k f dom neut h1) (@lem6403246 A K k f dom neut h1)). Qed.
Lemma lem6449199 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : term273 A K op ltle k f dom neut.
Proof. exact (fun h0 : term289 A K k f dom neut => @lem6449198 A K op ltle k f dom neut h0). Qed.
Lemma lem6449200 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term250 A K k f dom neut) : (term255 A K op ltle k f dom neut) = (term110 A K op ltle k f dom neut).
Proof. exact (EQ_MP (@lem6403245 A K op ltle k f dom neut h1) (@lem6449195 A K op ltle k f dom neut h1)). Qed.
Lemma lem6449201 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term250 A K k f dom neut) : (term250 A K k f dom neut) = ((term255 A K op ltle k f dom neut) = (term110 A K op ltle k f dom neut)).
Proof. exact (prop_ext (fun h2 : term250 A K k f dom neut => @lem6449200 A K op ltle k f dom neut h1) (fun h2 : (term255 A K op ltle k f dom neut) = (term110 A K op ltle k f dom neut) => @lem6403230 A K k f dom neut h1)). Qed.
Lemma lem6449202 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) (h1 : term250 A K k f dom neut) : (term255 A K op ltle k f dom neut) = (term110 A K op ltle k f dom neut).
Proof. exact (EQ_MP (@lem6449201 A K op ltle k f dom neut h1) (@lem6403230 A K k f dom neut h1)). Qed.
Lemma lem6449203 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : term277 A K op ltle k f dom neut.
Proof. exact (fun h0 : term250 A K k f dom neut => @lem6449202 A K op ltle k f dom neut h0). Qed.
Lemma lem6449204 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : term280 A K op ltle k f dom neut.
Proof. exact (conj (@lem6449203 A K op ltle k f dom neut) (@lem6449199 A K op ltle k f dom neut)). Qed.
Lemma lem6449205 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term257 A K op ltle k f dom neut) = (term110 A K op ltle k f dom neut).
Proof. exact (EQ_MP (@lem6403229 A K op ltle k f dom neut) (@lem6449204 A K op ltle k f dom neut)). Qed.
Lemma lem6449206 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term199 A K op ltle k f dom neut) = (term234 A K op ltle k f dom neut).
Proof. exact (EQ_MP (@lem6403211 A K op ltle k f dom neut) (@lem6449205 A K op ltle k f dom neut)). Qed.
Lemma lem6449207 {A K : Type'} (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) (dom : A -> Prop) (neut : A) : (term112 A K op ltle k f dom neut) = (term110 A K op ltle k f dom neut).
Proof. exact (EQ_MP (@lem6402651 A K op ltle k f dom neut) (@lem6449206 A K op ltle k f dom neut)). Qed.
Lemma lem6449208 {A K : Type'} (dom : A -> Prop) (neut : A) (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) (f : K -> A) : (term111 A K op ltle k dom neut f) = (@iterato A K dom neut op ltle k f).
Proof. exact (EQ_MP (@lem6402081 A K dom neut op ltle k f) (@lem6449207 A K op ltle k f dom neut)). Qed.
Lemma lem6449213 {A K : Type'} (dom : A -> Prop) (neut : A) (op : type1400 A) (ltle : type1402 K) (k : K -> Prop) : term1654 A K dom neut op ltle k.
Proof. exact (fun f : K -> A => @lem6449208 A K dom neut op ltle k f). Qed.
Lemma lem6449218 {A K : Type'} (dom : A -> Prop) (neut : A) (op : type1400 A) (ltle : type1402 K) : term1655 A K dom neut op ltle.
Proof. exact (fun k : K -> Prop => @lem6449213 A K dom neut op ltle k). Qed.
Lemma lem6449223 {A K : Type'} (dom : A -> Prop) (neut : A) (op : type1400 A) : term1656 A K dom neut op.
Proof. exact (fun ltle : type1402 K => @lem6449218 A K dom neut op ltle). Qed.
Lemma lem6449228 {A K : Type'} (dom : A -> Prop) (neut : A) : term1657 A K dom neut.
Proof. exact (fun op : type1400 A => @lem6449223 A K dom neut op). Qed.
Lemma lem6449233 {A K : Type'} (dom : A -> Prop) : term1658 A K dom.
Proof. exact (fun neut : A => @lem6449228 A K dom neut). Qed.
Lemma lem6449238 {A K : Type'} : term1659 A K.
Proof. exact (fun dom : A -> Prop => @lem6449233 A K dom). Qed.
