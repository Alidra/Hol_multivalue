Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_terms.
Require Import hol_axioms.
Require Import hol_type_abbrevs.
Require Import SUPERADMISSIBLE_MATCH_UNGUARDED_PATTERN_term_abbrevs.
Require Import DISJ_ACI_spec.
Require Import DISJ_ASSOC_spec.
Require Import GEQ_DEF_spec.
Require Import admissible_spec.
Require Import superadmissible_spec.
Require Import tailadmissible_spec.
Require Import thm0_spec.
Require Import thm10578_spec.
Require Import thm10597_spec.
Require Import thm12653_spec.
Require Import thm14781_spec.
Require Import thm15222_spec.
Require Import thm16457_spec.
Require Import thm16458_spec.
Require Import thm16471_spec.
Require Import thm16473_spec.
Require Import thm16474_spec.
Require Import thm16506_spec.
Require Import thm16507_spec.
Require Import thm16933_spec.
Require Import thm17045_spec.
Require Import thm17160_spec.
Require Import thm17265_spec.
Require Import thm17362_spec.
Require Import thm17646_spec.
Require Import thm17784_spec.
Require Import thm1809_spec.
Require Import thm1810_spec.
Require Import thm1821_spec.
Require Import thm1832_spec.
Require Import thm18392_spec.
Require Import thm18393_spec.
Require Import thm18394_spec.
Require Import thm1842_spec.
Require Import thm1843_spec.
Require Import thm1862_spec.
Require Import thm1863_spec.
Require Import thm18897_spec.
Require Import thm18898_spec.
Require Import thm18899_spec.
Require Import thm18904_spec.
Require Import thm18905_spec.
Require Import thm18910_spec.
Require Import thm18911_spec.
Require Import thm18916_spec.
Require Import thm18917_spec.
Require Import thm18922_spec.
Require Import thm18923_spec.
Require Import thm18928_spec.
Require Import thm18929_spec.
Require Import thm18940_spec.
Require Import thm18941_spec.
Require Import thm18946_spec.
Require Import thm18947_spec.
Require Import thm18958_spec.
Require Import thm18959_spec.
Require Import thm19006_spec.
Require Import thm19007_spec.
Require Import thm19012_spec.
Require Import thm19013_spec.
Require Import thm19490_spec.
Require Import thm19699_spec.
Require Import thm19732_spec.
Require Import thm19792_spec.
Require Import thm20230_spec.
Require Import thm20425_spec.
Require Import thm20611_spec.
Require Import thm20612_spec.
Require Import thm20661_spec.
Require Import thm20662_spec.
Require Import thm20664_spec.
Require Import thm20665_spec.
Require Import thm20668_spec.
Require Import thm20682_spec.
Require Import thm20764_spec.
Require Import thm20780_spec.
Require Import thm20789_spec.
Require Import thm20895_spec.
Require Import thm20904_spec.
Require Import thm21007_spec.
Require Import thm21021_spec.
Require Import thm21028_spec.
Require Import thm21107_spec.
Require Import thm21114_spec.
Require Import thm21182_spec.
Require Import thm21385_spec.
Require Import thm21386_spec.
Require Import thm21394_spec.
Require Import thm21490_spec.
Require Import thm21735_spec.
Require Import thm21736_spec.
Require Import thm21741_spec.
Require Import thm4211_spec.
Require Import thm51_spec.
Require Import thm7_spec.
Lemma lem8291644 (t1 : Prop) : term0 t1.
Proof. exact (@lem693 t1). Qed.
Lemma lem8291645 (t1 : Prop) : (term0 t1) = (term1 t1).
Proof. exact (eq_refl (term0 t1)). Qed.
Lemma lem8291646 (t1 : Prop) : term1 t1.
Proof. exact (EQ_MP (@lem8291645 t1) (@lem8291644 t1)). Qed.
Lemma lem8291647 (t1 : Prop) (t2 : Prop) : term2 t1 t2.
Proof. exact (@lem8291646 t1 t2). Qed.
Lemma lem8291648 (t1 : Prop) (t2 : Prop) : (term2 t1 t2) = (term3 t1 t2).
Proof. exact (eq_refl (term2 t1 t2)). Qed.
Lemma lem8291649 (t1 : Prop) (t2 : Prop) : term3 t1 t2.
Proof. exact (EQ_MP (@lem8291648 t1 t2) (@lem8291647 t1 t2)). Qed.
Lemma lem8291650 (t1 : Prop) (t2 : Prop) (t3 : Prop) : term4 t1 t2 t3.
Proof. exact (@lem8291649 t1 t2 t3). Qed.
Lemma lem8291651 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term4 t1 t2 t3) = ((term5 t1 t2 t3) = (term6 t1 t2 t3)).
Proof. exact (eq_refl (term4 t1 t2 t3)). Qed.
Lemma lem8291652 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term5 t1 t2 t3) = (term6 t1 t2 t3).
Proof. exact (EQ_MP (@lem8291651 t1 t2 t3) (@lem8291650 t1 t2 t3)). Qed.
Lemma lem8291653 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term6 t1 t2 t3) = (term5 t1 t2 t3).
Proof. exact (SYM (@lem8291652 t1 t2 t3)). Qed.
Lemma lem8291654 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) : term7 _143449 _143452 _143456 _143457 _143462 p.
Proof. exact (@lem8093231 _143449 _143452 _143456 _143457 _143462 p). Qed.
Lemma lem8291655 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) : (term7 _143449 _143452 _143456 _143457 _143462 p) = (term8 _143449 _143452 _143456 _143457 _143462 p).
Proof. exact (eq_refl (term7 _143449 _143452 _143456 _143457 _143462 p)). Qed.
Lemma lem8291656 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) : term8 _143449 _143452 _143456 _143457 _143462 p.
Proof. exact (EQ_MP (@lem8291655 _143449 _143452 _143456 _143457 _143462 p) (@lem8291654 _143449 _143452 _143456 _143457 _143462 p)). Qed.
Lemma lem8291657 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) : term9 _143449 _143452 _143456 _143457 _143462 p lt2.
Proof. exact (@lem8291656 _143449 _143452 _143456 _143457 _143462 p lt2). Qed.
Lemma lem8291658 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) : (term9 _143449 _143452 _143456 _143457 _143462 p lt2) = (term10 _143449 _143452 _143456 _143457 _143462 p lt2).
Proof. exact (eq_refl (term9 _143449 _143452 _143456 _143457 _143462 p lt2)). Qed.
Lemma lem8291659 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) : term10 _143449 _143452 _143456 _143457 _143462 p lt2.
Proof. exact (EQ_MP (@lem8291658 _143449 _143452 _143456 _143457 _143462 p lt2) (@lem8291657 _143449 _143452 _143456 _143457 _143462 p lt2)). Qed.
Lemma lem8291660 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) (s : _143462 -> _143449) : term11 _143449 _143452 _143456 _143457 _143462 p lt2 s.
Proof. exact (@lem8291659 _143449 _143452 _143456 _143457 _143462 p lt2 s). Qed.
Lemma lem8291661 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) (s : _143462 -> _143449) : (term11 _143449 _143452 _143456 _143457 _143462 p lt2 s) = (term12 _143449 _143452 _143456 _143457 _143462 p lt2 s).
Proof. exact (eq_refl (term11 _143449 _143452 _143456 _143457 _143462 p lt2 s)). Qed.
Lemma lem8291662 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) (s : _143462 -> _143449) : term12 _143449 _143452 _143456 _143457 _143462 p lt2 s.
Proof. exact (EQ_MP (@lem8291661 _143449 _143452 _143456 _143457 _143462 p lt2 s) (@lem8291660 _143449 _143452 _143456 _143457 _143462 p lt2 s)). Qed.
Lemma lem8291663 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) (s : _143462 -> _143449) (t : type801 _143452 _143456 _143457 _143462) : term13 _143449 _143452 _143456 _143457 _143462 p lt2 s t.
Proof. exact (@lem8291662 _143449 _143452 _143456 _143457 _143462 p lt2 s t). Qed.
Lemma lem8291664 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) (s : _143462 -> _143449) (t : type801 _143452 _143456 _143457 _143462) : (term13 _143449 _143452 _143456 _143457 _143462 p lt2 s t) = ((@admissible _143449 _143452 _143456 _143457 _143462 lt2 p s t) = (term14 _143449 _143452 _143456 _143457 _143462 p lt2 s t)).
Proof. exact (eq_refl (term13 _143449 _143452 _143456 _143457 _143462 p lt2 s t)). Qed.
Lemma lem8291666 (t1 : Prop) : term0 t1.
Proof. exact (@lem693 t1). Qed.
Lemma lem8291667 (t1 : Prop) : (term0 t1) = (term1 t1).
Proof. exact (eq_refl (term0 t1)). Qed.
Lemma lem8291668 (t1 : Prop) : term1 t1.
Proof. exact (EQ_MP (@lem8291667 t1) (@lem8291666 t1)). Qed.
Lemma lem8291669 (t1 : Prop) (t2 : Prop) : term2 t1 t2.
Proof. exact (@lem8291668 t1 t2). Qed.
Lemma lem8291670 (t1 : Prop) (t2 : Prop) : (term2 t1 t2) = (term3 t1 t2).
Proof. exact (eq_refl (term2 t1 t2)). Qed.
Lemma lem8291671 (t1 : Prop) (t2 : Prop) : term3 t1 t2.
Proof. exact (EQ_MP (@lem8291670 t1 t2) (@lem8291669 t1 t2)). Qed.
Lemma lem8291672 (t1 : Prop) (t2 : Prop) (t3 : Prop) : term4 t1 t2 t3.
Proof. exact (@lem8291671 t1 t2 t3). Qed.
Lemma lem8291673 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term4 t1 t2 t3) = ((term5 t1 t2 t3) = (term6 t1 t2 t3)).
Proof. exact (eq_refl (term4 t1 t2 t3)). Qed.
Lemma lem8291674 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term5 t1 t2 t3) = (term6 t1 t2 t3).
Proof. exact (EQ_MP (@lem8291673 t1 t2 t3) (@lem8291672 t1 t2 t3)). Qed.
Lemma lem8291675 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term6 t1 t2 t3) = (term5 t1 t2 t3).
Proof. exact (SYM (@lem8291674 t1 t2 t3)). Qed.
Lemma lem8291676 {A B P : Type'} (lt2 : type1402 A) : term15 A B P lt2.
Proof. exact (@lem8094644 A B P lt2). Qed.
Lemma lem8291677 {A B P : Type'} (lt2 : type1402 A) : (term15 A B P lt2) = (term16 A B P lt2).
Proof. exact (eq_refl (term15 A B P lt2)). Qed.
Lemma lem8291678 {A B P : Type'} (lt2 : type1402 A) : term16 A B P lt2.
Proof. exact (EQ_MP (@lem8291677 A B P lt2) (@lem8291676 A B P lt2)). Qed.
Lemma lem8291679 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) : term17 A B P lt2 s.
Proof. exact (@lem8291678 A B P lt2 s). Qed.
Lemma lem8291680 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) : (term17 A B P lt2 s) = (term18 A B P lt2 s).
Proof. exact (eq_refl (term17 A B P lt2 s)). Qed.
Lemma lem8291681 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) : term18 A B P lt2 s.
Proof. exact (EQ_MP (@lem8291680 A B P lt2 s) (@lem8291679 A B P lt2 s)). Qed.
Lemma lem8291682 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : term19 A B P lt2 s p.
Proof. exact (@lem8291681 A B P lt2 s p). Qed.
Lemma lem8291683 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term19 A B P lt2 s p) = (term20 A B P lt2 s p).
Proof. exact (eq_refl (term19 A B P lt2 s p)). Qed.
Lemma lem8291684 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : term20 A B P lt2 s p.
Proof. exact (EQ_MP (@lem8291683 A B P lt2 s p) (@lem8291682 A B P lt2 s p)). Qed.
Lemma lem8291685 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (t : type558 A B P) : term21 A B P lt2 s p t.
Proof. exact (@lem8291684 A B P lt2 s p t). Qed.
Lemma lem8291686 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (t : type558 A B P) : (term21 A B P lt2 s p t) = ((@tailadmissible A B P lt2 p s t) = (term22 A B P lt2 s p t)).
Proof. exact (eq_refl (term21 A B P lt2 s p t)). Qed.
Lemma lem8291688 {A : Type'} (a : A) : term23 A a.
Proof. exact (@lem44156 A a). Qed.
Lemma lem8291689 {A : Type'} (a : A) : (term23 A a) = (term24 A a).
Proof. exact (eq_refl (term23 A a)). Qed.
Lemma lem8291690 {A : Type'} (a : A) : term24 A a.
Proof. exact (EQ_MP (@lem8291689 A a) (@lem8291688 A a)). Qed.
Lemma lem8291691 {A : Type'} (a : A) (b : A) : term25 A a b.
Proof. exact (@lem8291690 A a b). Qed.
Lemma lem8291692 {A : Type'} (a : A) (b : A) : (term25 A a b) = ((@GEQ A a b) = (a = b)).
Proof. exact (eq_refl (term25 A a b)). Qed.
Lemma lem8291694 {_143606 _143608 _143614 : Type'} (lt2 : type1402 _143606) : term26 _143606 _143608 _143614 lt2.
Proof. exact (@lem8096071 _143606 _143608 _143614 lt2). Qed.
Lemma lem8291695 {_143606 _143608 _143614 : Type'} (lt2 : type1402 _143606) : (term26 _143606 _143608 _143614 lt2) = (term27 _143606 _143608 _143614 lt2).
Proof. exact (eq_refl (term26 _143606 _143608 _143614 lt2)). Qed.
Lemma lem8291696 {_143606 _143608 _143614 : Type'} (lt2 : type1402 _143606) : term27 _143606 _143608 _143614 lt2.
Proof. exact (EQ_MP (@lem8291695 _143606 _143608 _143614 lt2) (@lem8291694 _143606 _143608 _143614 lt2)). Qed.
Lemma lem8291697 {_143606 _143608 _143614 : Type'} (lt2 : type1402 _143606) (p : type560 _143606 _143608 _143614) : term28 _143606 _143608 _143614 lt2 p.
Proof. exact (@lem8291696 _143606 _143608 _143614 lt2 p). Qed.
Lemma lem8291698 {_143606 _143608 _143614 : Type'} (lt2 : type1402 _143606) (p : type560 _143606 _143608 _143614) : (term28 _143606 _143608 _143614 lt2 p) = (term29 _143606 _143608 _143614 lt2 p).
Proof. exact (eq_refl (term28 _143606 _143608 _143614 lt2 p)). Qed.
Lemma lem8291699 {_143606 _143608 _143614 : Type'} (lt2 : type1402 _143606) (p : type560 _143606 _143608 _143614) : term29 _143606 _143608 _143614 lt2 p.
Proof. exact (EQ_MP (@lem8291698 _143606 _143608 _143614 lt2 p) (@lem8291697 _143606 _143608 _143614 lt2 p)). Qed.
Lemma lem8291700 {_143606 _143608 _143614 : Type'} (lt2 : type1402 _143606) (p : type560 _143606 _143608 _143614) (s : _143614 -> _143606) : term30 _143606 _143608 _143614 lt2 p s.
Proof. exact (@lem8291699 _143606 _143608 _143614 lt2 p s). Qed.
Lemma lem8291701 {_143606 _143608 _143614 : Type'} (lt2 : type1402 _143606) (p : type560 _143606 _143608 _143614) (s : _143614 -> _143606) : (term30 _143606 _143608 _143614 lt2 p s) = (term31 _143606 _143608 _143614 lt2 p s).
Proof. exact (eq_refl (term30 _143606 _143608 _143614 lt2 p s)). Qed.
Lemma lem8291702 {_143606 _143608 _143614 : Type'} (lt2 : type1402 _143606) (p : type560 _143606 _143608 _143614) (s : _143614 -> _143606) : term31 _143606 _143608 _143614 lt2 p s.
Proof. exact (EQ_MP (@lem8291701 _143606 _143608 _143614 lt2 p s) (@lem8291700 _143606 _143608 _143614 lt2 p s)). Qed.
Lemma lem8291703 {_143606 _143608 _143614 : Type'} (lt2 : type1402 _143606) (p : type560 _143606 _143608 _143614) (s : _143614 -> _143606) (t : type558 _143606 _143608 _143614) : term32 _143606 _143608 _143614 lt2 p s t.
Proof. exact (@lem8291702 _143606 _143608 _143614 lt2 p s t). Qed.
Lemma lem8291704 {_143606 _143608 _143614 : Type'} (lt2 : type1402 _143606) (p : type560 _143606 _143608 _143614) (s : _143614 -> _143606) (t : type558 _143606 _143608 _143614) : (term32 _143606 _143608 _143614 lt2 p s t) = ((@superadmissible _143606 _143608 _143614 lt2 p s t) = (term33 _143606 _143608 _143614 lt2 p s t)).
Proof. exact (eq_refl (term32 _143606 _143608 _143614 lt2 p s t)). Qed.
Lemma lem8291706 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term34 A B D P Q p pat e arg lt2 s) : term34 A B D P Q p pat e arg lt2 s.
Proof. exact (h1). Qed.
Lemma lem8291707 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term35 A B D P Q p pat e arg lt2 s) : term35 A B D P Q p pat e arg lt2 s.
Proof. exact (h1). Qed.
Lemma lem8291708 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term36 A B D P Q p pat e arg.
Proof. exact (h1). Qed.
Lemma lem8291710 {_143606 _143608 _143614 : Type'} (lt2 : type1402 _143606) (p : type560 _143606 _143608 _143614) (s : _143614 -> _143606) (t : type558 _143606 _143608 _143614) : (@superadmissible _143606 _143608 _143614 lt2 p s t) = (term33 _143606 _143608 _143614 lt2 p s t).
Proof. exact (EQ_MP (@lem8291704 _143606 _143608 _143614 lt2 p s t) (@lem8291703 _143606 _143608 _143614 lt2 p s t)). Qed.
Lemma lem8291711 {A B P : Type'} (lt2 : type1402 A) (p : type560 A B P) (s : P -> A) (t : type558 A B P) : (@superadmissible A B P lt2 p s t) = (term33 A B P lt2 p s t).
Proof. exact (@lem8291710 A B P lt2 p s t). Qed.
Lemma lem8291712 {A B D P Q : Type'} (lt2 : type1402 A) (p : type560 A B P) (s : P -> A) (e : P -> D) (pat : Q -> D) (arg : type1475 A P Q) : (term37 A B D P Q lt2 p s e pat arg) = (term38 A B D P Q lt2 p s e pat arg).
Proof. exact (@lem8291711 A B P lt2 p s (term39 A B D P Q e pat arg)). Qed.
Lemma lem8291825 {A B D P Q : Type'} (lt2 : type1402 A) (p : type560 A B P) (s : P -> A) (e : P -> D) (pat : Q -> D) (arg : type1475 A P Q) : (term38 A B D P Q lt2 p s e pat arg) = (term37 A B D P Q lt2 p s e pat arg).
Proof. exact (SYM (@lem8291712 A B D P Q lt2 p s e pat arg)). Qed.
Lemma lem8291826 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term40 A B P lt2 s p) : term40 A B P lt2 s p.
Proof. exact (h1). Qed.
Lemma lem8291934 {_4656 _4660 : Type'} : (@_MATCH _4656 _4660) = (term41 _4656 _4660).
Proof. exact (@_MATCH_def _4656 _4660). Qed.
Lemma lem8291935 {B D : Type'} : (@_MATCH D B) = (term42 B D).
Proof. exact (@lem8291934 D B). Qed.
Lemma lem8291936 {D P : Type'} (e : P -> D) (x : P) : (e x) = (e x).
Proof. exact (eq_refl (e x)). Qed.
Lemma lem8291937 {B D P : Type'} (e : P -> D) (x : P) : (term43 B D P e x) = (term44 B D P e x).
Proof. exact (MK_COMB (@lem8291935 B D) (@lem8291936 D P e x)). Qed.
Lemma lem8291939 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8291940 {B D : Type'} (f : type1450 B D) (y : D) : (term46 B D f y) = (f y).
Proof. exact (@lem8291939 D (type743 B D) f y). Qed.
Lemma lem8291941 {B D P : Type'} (e : P -> D) (x : P) : (term47 B D P e x) = (term44 B D P e x).
Proof. exact (@lem8291940 B D (term42 B D) (e x)). Qed.
Lemma lem8291942 {B D : Type'} (e : D) : (term48 B D e) = (term49 B D e).
Proof. exact (eq_refl (term48 B D e)). Qed.
Lemma lem8291943 {B D : Type'} : (term50 B D) = (term42 B D).
Proof. exact (fun_ext (fun e : D => @lem8291942 B D e)). Qed.
Lemma lem8291944 {D P : Type'} (e : P -> D) (x : P) : (e x) = (e x).
Proof. exact (eq_refl (e x)). Qed.
Lemma lem8291945 {B D P : Type'} (e : P -> D) (x : P) : (term47 B D P e x) = (term44 B D P e x).
Proof. exact (MK_COMB (@lem8291943 B D) (@lem8291944 D P e x)). Qed.
Lemma lem8291946 {B D : Type'} : (@eq ((D -> B -> Prop) -> B)) = (@eq ((D -> B -> Prop) -> B)).
Proof. exact (eq_refl (@eq ((D -> B -> Prop) -> B))). Qed.
Lemma lem8291947 {B D P : Type'} (e : P -> D) (x : P) : (term51 B D P e x) = (term52 B D P e x).
Proof. exact (MK_COMB (@lem8291946 B D) (@lem8291945 B D P e x)). Qed.
Lemma lem8291948 {B D P : Type'} (e : P -> D) (x : P) : (term44 B D P e x) = (term53 B D P e x).
Proof. exact (eq_refl (term44 B D P e x)). Qed.
Lemma lem8291949 {B D P : Type'} (e : P -> D) (x : P) : ((term47 B D P e x) = (term44 B D P e x)) = ((term44 B D P e x) = (term53 B D P e x)).
Proof. exact (MK_COMB (@lem8291947 B D P e x) (@lem8291948 B D P e x)). Qed.
Lemma lem8291950 {B D P : Type'} (e : P -> D) (x : P) : (term44 B D P e x) = (term53 B D P e x).
Proof. exact (EQ_MP (@lem8291949 B D P e x) (@lem8291941 B D P e x)). Qed.
Lemma lem8291951 {B D P : Type'} (e : P -> D) (x : P) : (term43 B D P e x) = (term53 B D P e x).
Proof. exact (TRANS (@lem8291937 B D P e x) (@lem8291950 B D P e x)). Qed.
Lemma lem8291957 : _UNGUARDED_PATTERN = term54.
Proof. exact (@_UNGUARDED_PATTERN_def). Qed.
Lemma lem8291961 {A : Type'} (a : A) (b : A) : (@GEQ A a b) = (a = b).
Proof. exact (EQ_MP (@lem8291692 A a b) (@lem8291691 A a b)). Qed.
Lemma lem8291962 {D : Type'} (a : D) (b : D) : (@GEQ D a b) = (a = b).
Proof. exact (@lem8291961 D a b). Qed.
Lemma lem8291963 {D Q : Type'} (pat : Q -> D) (t : Q) (u : D) : (term55 D Q pat t u) = ((pat t) = u).
Proof. exact (@lem8291962 D (pat t) u). Qed.
Lemma lem8291966 {D Q : Type'} (pat : Q -> D) (t : Q) (u : D) : (term56 D Q pat t u) = (term57 D Q pat t u).
Proof. exact (MK_COMB (@lem8291957) (@lem8291963 D Q pat t u)). Qed.
Lemma lem8291968 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8291969 (f : type1543) (y : Prop) : (term58 f y) = (f y).
Proof. exact (@lem8291968 Prop (Prop -> Prop) f y). Qed.
Lemma lem8291970 {D Q : Type'} (pat : Q -> D) (t : Q) (u : D) : (term59 D Q pat t u) = (term57 D Q pat t u).
Proof. exact (@lem8291969 term54 ((pat t) = u)). Qed.
Lemma lem8291971 (p : Prop) : (term60 p) = (term61 p).
Proof. exact (eq_refl (term60 p)). Qed.
Lemma lem8291972 : term62 = term54.
Proof. exact (fun_ext (fun p : Prop => @lem8291971 p)). Qed.
Lemma lem8291973 {D Q : Type'} (pat : Q -> D) (t : Q) (u : D) : ((pat t) = u) = ((pat t) = u).
Proof. exact (eq_refl ((pat t) = u)). Qed.
Lemma lem8291974 {D Q : Type'} (pat : Q -> D) (t : Q) (u : D) : (term59 D Q pat t u) = (term57 D Q pat t u).
Proof. exact (MK_COMB (@lem8291972) (@lem8291973 D Q pat t u)). Qed.
Lemma lem8291975 : (@eq (Prop -> Prop)) = (@eq (Prop -> Prop)).
Proof. exact (eq_refl (@eq (Prop -> Prop))). Qed.
Lemma lem8291976 {D Q : Type'} (pat : Q -> D) (t : Q) (u : D) : (term63 D Q pat t u) = (term64 D Q pat t u).
Proof. exact (MK_COMB (@lem8291975) (@lem8291974 D Q pat t u)). Qed.
Lemma lem8291977 {D Q : Type'} (pat : Q -> D) (t : Q) (u : D) : (term57 D Q pat t u) = (term65 D Q pat t u).
Proof. exact (eq_refl (term57 D Q pat t u)). Qed.
Lemma lem8291978 {D Q : Type'} (pat : Q -> D) (t : Q) (u : D) : ((term59 D Q pat t u) = (term57 D Q pat t u)) = ((term57 D Q pat t u) = (term65 D Q pat t u)).
Proof. exact (MK_COMB (@lem8291976 D Q pat t u) (@lem8291977 D Q pat t u)). Qed.
Lemma lem8291979 {D Q : Type'} (pat : Q -> D) (t : Q) (u : D) : (term57 D Q pat t u) = (term65 D Q pat t u).
Proof. exact (EQ_MP (@lem8291978 D Q pat t u) (@lem8291970 D Q pat t u)). Qed.
Lemma lem8291984 {D Q : Type'} (pat : Q -> D) (t : Q) (u : D) : (term56 D Q pat t u) = (term65 D Q pat t u).
Proof. exact (TRANS (@lem8291966 D Q pat t u) (@lem8291979 D Q pat t u)). Qed.
Lemma lem8291986 {A : Type'} (a : A) (b : A) : (@GEQ A a b) = (a = b).
Proof. exact (EQ_MP (@lem8291692 A a b) (@lem8291691 A a b)). Qed.
Lemma lem8291987 {B : Type'} (a : B) (b : B) : (@GEQ B a b) = (a = b).
Proof. exact (@lem8291986 B a b). Qed.
Lemma lem8291988 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term66 A B P Q f arg x t v) = ((term67 A B P Q f arg x t) = v).
Proof. exact (@lem8291987 B (term67 A B P Q f arg x t) v). Qed.
Lemma lem8291991 {A B D P Q : Type'} (pat : Q -> D) (u : D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term68 A B D P Q pat u f arg x t v) = (term69 A B D P Q pat u f arg x t v).
Proof. exact (MK_COMB (@lem8291984 D Q pat t u) (@lem8291988 A B P Q f arg x t v)). Qed.
Lemma lem8291993 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8291994 (f : Prop -> Prop) (y : Prop) : (term70 f y) = (f y).
Proof. exact (@lem8291993 Prop Prop f y). Qed.
Lemma lem8291995 {A B D P Q : Type'} (pat : Q -> D) (u : D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term71 A B D P Q pat u f arg x t v) = (term69 A B D P Q pat u f arg x t v).
Proof. exact (@lem8291994 (term65 D Q pat t u) ((term67 A B P Q f arg x t) = v)). Qed.
Lemma lem8291996 {D Q : Type'} (pat : Q -> D) (t : Q) (u : D) (r : Prop) : (term72 D Q pat t u r) = (term73 D Q pat t u r).
Proof. exact (eq_refl (term72 D Q pat t u r)). Qed.
Lemma lem8291997 {D Q : Type'} (pat : Q -> D) (t : Q) (u : D) : (term74 D Q pat t u) = (term65 D Q pat t u).
Proof. exact (fun_ext (fun r : Prop => @lem8291996 D Q pat t u r)). Qed.
Lemma lem8291998 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : ((term67 A B P Q f arg x t) = v) = ((term67 A B P Q f arg x t) = v).
Proof. exact (eq_refl ((term67 A B P Q f arg x t) = v)). Qed.
Lemma lem8291999 {A B D P Q : Type'} (pat : Q -> D) (u : D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term71 A B D P Q pat u f arg x t v) = (term69 A B D P Q pat u f arg x t v).
Proof. exact (MK_COMB (@lem8291997 D Q pat t u) (@lem8291998 A B P Q f arg x t v)). Qed.
Lemma lem8292000 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8292001 {A B D P Q : Type'} (pat : Q -> D) (u : D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term75 A B D P Q pat u f arg x t v) = (term76 A B D P Q pat u f arg x t v).
Proof. exact (MK_COMB (@lem8292000) (@lem8291999 A B D P Q pat u f arg x t v)). Qed.
Lemma lem8292002 {A B D P Q : Type'} (pat : Q -> D) (u : D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term69 A B D P Q pat u f arg x t v) = (term77 A B D P Q pat u f arg x t v).
Proof. exact (eq_refl (term69 A B D P Q pat u f arg x t v)). Qed.
Lemma lem8292003 {A B D P Q : Type'} (pat : Q -> D) (u : D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : ((term71 A B D P Q pat u f arg x t v) = (term69 A B D P Q pat u f arg x t v)) = ((term69 A B D P Q pat u f arg x t v) = (term77 A B D P Q pat u f arg x t v)).
Proof. exact (MK_COMB (@lem8292001 A B D P Q pat u f arg x t v) (@lem8292002 A B D P Q pat u f arg x t v)). Qed.
Lemma lem8292004 {A B D P Q : Type'} (pat : Q -> D) (u : D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term69 A B D P Q pat u f arg x t v) = (term77 A B D P Q pat u f arg x t v).
Proof. exact (EQ_MP (@lem8292003 A B D P Q pat u f arg x t v) (@lem8291995 A B D P Q pat u f arg x t v)). Qed.
Lemma lem8292011 {A B D P Q : Type'} (pat : Q -> D) (u : D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term68 A B D P Q pat u f arg x t v) = (term77 A B D P Q pat u f arg x t v).
Proof. exact (TRANS (@lem8291991 A B D P Q pat u f arg x t v) (@lem8292004 A B D P Q pat u f arg x t v)). Qed.
Lemma lem8292012 {A B D P Q : Type'} (pat : Q -> D) (u : D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term78 A B D P Q pat u f arg x v) = (term79 A B D P Q pat u f arg x v).
Proof. exact (fun_ext (fun t : Q => @lem8292011 A B D P Q pat u f arg x t v)). Qed.
Lemma lem8292013 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8292014 {A B D P Q : Type'} (pat : Q -> D) (u : D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term80 A B D P Q pat u f arg x v) = (term81 A B D P Q pat u f arg x v).
Proof. exact (MK_COMB (@lem8292013 Q) (@lem8292012 A B D P Q pat u f arg x v)). Qed.
Lemma lem8292019 {A B D P Q : Type'} (pat : Q -> D) (u : D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term82 A B D P Q pat u f arg x) = (term83 A B D P Q pat u f arg x).
Proof. exact (fun_ext (fun v : B => @lem8292014 A B D P Q pat u f arg x v)). Qed.
Lemma lem8292020 {A B D P Q : Type'} (pat : Q -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term84 A B D P Q pat f arg x) = (term85 A B D P Q pat f arg x).
Proof. exact (fun_ext (fun u : D => @lem8292019 A B D P Q pat u f arg x)). Qed.
Lemma lem8292021 {A B D P Q : Type'} (e : P -> D) (pat : Q -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term86 A B D P Q e pat f arg x) = (term87 A B D P Q e pat f arg x).
Proof. exact (MK_COMB (@lem8291951 B D P e x) (@lem8292020 A B D P Q pat f arg x)). Qed.
Lemma lem8292023 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8292024 {B D : Type'} (f : type743 B D) (y : type1470 B D) : (term88 B D f y) = (f y).
Proof. exact (@lem8292023 (type1470 B D) B f y). Qed.
Lemma lem8292025 {A B D P Q : Type'} (e : P -> D) (pat : Q -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term89 A B D P Q e pat f arg x) = (term87 A B D P Q e pat f arg x).
Proof. exact (@lem8292024 B D (term53 B D P e x) (term85 A B D P Q pat f arg x)). Qed.
Lemma lem8292026 {B D P : Type'} (r : type1470 B D) (e : P -> D) (x : P) : (term90 B D P e x r) = (term91 B D P r e x).
Proof. exact (eq_refl (term90 B D P e x r)). Qed.
Lemma lem8292027 {B D P : Type'} (e : P -> D) (x : P) : (term92 B D P e x) = (term53 B D P e x).
Proof. exact (fun_ext (fun r : type1470 B D => @lem8292026 B D P r e x)). Qed.
Lemma lem8292028 {A B D P Q : Type'} (pat : Q -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term85 A B D P Q pat f arg x) = (term85 A B D P Q pat f arg x).
Proof. exact (eq_refl (term85 A B D P Q pat f arg x)). Qed.
Lemma lem8292029 {A B D P Q : Type'} (e : P -> D) (pat : Q -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term89 A B D P Q e pat f arg x) = (term87 A B D P Q e pat f arg x).
Proof. exact (MK_COMB (@lem8292027 B D P e x) (@lem8292028 A B D P Q pat f arg x)). Qed.
Lemma lem8292030 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8292031 {A B D P Q : Type'} (e : P -> D) (pat : Q -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term93 A B D P Q e pat f arg x) = (term94 A B D P Q e pat f arg x).
Proof. exact (MK_COMB (@lem8292030 B) (@lem8292029 A B D P Q e pat f arg x)). Qed.
Lemma lem8292032 {A B D P Q : Type'} (pat : Q -> D) (f : A -> B) (arg : type1475 A P Q) (e : P -> D) (x : P) : (term87 A B D P Q e pat f arg x) = (term95 A B D P Q pat f arg e x).
Proof. exact (eq_refl (term87 A B D P Q e pat f arg x)). Qed.
Lemma lem8292033 {A B D P Q : Type'} (pat : Q -> D) (f : A -> B) (arg : type1475 A P Q) (e : P -> D) (x : P) : ((term89 A B D P Q e pat f arg x) = (term87 A B D P Q e pat f arg x)) = ((term87 A B D P Q e pat f arg x) = (term95 A B D P Q pat f arg e x)).
Proof. exact (MK_COMB (@lem8292031 A B D P Q e pat f arg x) (@lem8292032 A B D P Q pat f arg e x)). Qed.
Lemma lem8292034 {A B D P Q : Type'} (pat : Q -> D) (f : A -> B) (arg : type1475 A P Q) (e : P -> D) (x : P) : (term87 A B D P Q e pat f arg x) = (term95 A B D P Q pat f arg e x).
Proof. exact (EQ_MP (@lem8292033 A B D P Q pat f arg e x) (@lem8292025 A B D P Q e pat f arg x)). Qed.
Lemma lem8292036 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8292037 {B D : Type'} (f : type1470 B D) (y : D) : (term96 B D f y) = (f y).
Proof. exact (@lem8292036 D (B -> Prop) f y). Qed.
Lemma lem8292038 {A B D P Q : Type'} (pat : Q -> D) (f : A -> B) (arg : type1475 A P Q) (e : P -> D) (x : P) : (term97 A B D P Q pat f arg e x) = (term98 A B D P Q pat f arg e x).
Proof. exact (@lem8292037 B D (term85 A B D P Q pat f arg x) (e x)). Qed.
Lemma lem8292039 {A B D P Q : Type'} (pat : Q -> D) (u : D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term99 A B D P Q pat f arg x u) = (term83 A B D P Q pat u f arg x).
Proof. exact (eq_refl (term99 A B D P Q pat f arg x u)). Qed.
Lemma lem8292040 {A B D P Q : Type'} (pat : Q -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term100 A B D P Q pat f arg x) = (term85 A B D P Q pat f arg x).
Proof. exact (fun_ext (fun u : D => @lem8292039 A B D P Q pat u f arg x)). Qed.
Lemma lem8292041 {D P : Type'} (e : P -> D) (x : P) : (e x) = (e x).
Proof. exact (eq_refl (e x)). Qed.
Lemma lem8292042 {A B D P Q : Type'} (pat : Q -> D) (f : A -> B) (arg : type1475 A P Q) (e : P -> D) (x : P) : (term97 A B D P Q pat f arg e x) = (term98 A B D P Q pat f arg e x).
Proof. exact (MK_COMB (@lem8292040 A B D P Q pat f arg x) (@lem8292041 D P e x)). Qed.
Lemma lem8292043 {B : Type'} : (@eq (B -> Prop)) = (@eq (B -> Prop)).
Proof. exact (eq_refl (@eq (B -> Prop))). Qed.
Lemma lem8292044 {A B D P Q : Type'} (pat : Q -> D) (f : A -> B) (arg : type1475 A P Q) (e : P -> D) (x : P) : (term101 A B D P Q pat f arg e x) = (term102 A B D P Q pat f arg e x).
Proof. exact (MK_COMB (@lem8292043 B) (@lem8292042 A B D P Q pat f arg e x)). Qed.
Lemma lem8292045 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term98 A B D P Q pat f arg e x) = (term103 A B D P Q pat e f arg x).
Proof. exact (eq_refl (term98 A B D P Q pat f arg e x)). Qed.
Lemma lem8292046 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : ((term97 A B D P Q pat f arg e x) = (term98 A B D P Q pat f arg e x)) = ((term98 A B D P Q pat f arg e x) = (term103 A B D P Q pat e f arg x)).
Proof. exact (MK_COMB (@lem8292044 A B D P Q pat f arg e x) (@lem8292045 A B D P Q pat e f arg x)). Qed.
Lemma lem8292047 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term98 A B D P Q pat f arg e x) = (term103 A B D P Q pat e f arg x).
Proof. exact (EQ_MP (@lem8292046 A B D P Q pat e f arg x) (@lem8292038 A B D P Q pat f arg e x)). Qed.
Lemma lem8292058 {B : Type'} : (@ex1 B) = (@ex1 B).
Proof. exact (eq_refl (@ex1 B)). Qed.
Lemma lem8292059 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term104 A B D P Q pat f arg e x) = (term105 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8292058 B) (@lem8292047 A B D P Q pat e f arg x)). Qed.
Lemma lem8292060 {B : Type'} : (@COND B) = (@COND B).
Proof. exact (eq_refl (@COND B)). Qed.
Lemma lem8292061 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term106 A B D P Q pat f arg e x) = (term107 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8292060 B) (@lem8292059 A B D P Q pat e f arg x)). Qed.
Lemma lem8292063 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8292064 {B D : Type'} (f : type1470 B D) (y : D) : (term96 B D f y) = (f y).
Proof. exact (@lem8292063 D (B -> Prop) f y). Qed.
Lemma lem8292065 {A B D P Q : Type'} (pat : Q -> D) (f : A -> B) (arg : type1475 A P Q) (e : P -> D) (x : P) : (term97 A B D P Q pat f arg e x) = (term98 A B D P Q pat f arg e x).
Proof. exact (@lem8292064 B D (term85 A B D P Q pat f arg x) (e x)). Qed.
Lemma lem8292066 {A B D P Q : Type'} (pat : Q -> D) (u : D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term99 A B D P Q pat f arg x u) = (term83 A B D P Q pat u f arg x).
Proof. exact (eq_refl (term99 A B D P Q pat f arg x u)). Qed.
Lemma lem8292067 {A B D P Q : Type'} (pat : Q -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term100 A B D P Q pat f arg x) = (term85 A B D P Q pat f arg x).
Proof. exact (fun_ext (fun u : D => @lem8292066 A B D P Q pat u f arg x)). Qed.
Lemma lem8292068 {D P : Type'} (e : P -> D) (x : P) : (e x) = (e x).
Proof. exact (eq_refl (e x)). Qed.
Lemma lem8292069 {A B D P Q : Type'} (pat : Q -> D) (f : A -> B) (arg : type1475 A P Q) (e : P -> D) (x : P) : (term97 A B D P Q pat f arg e x) = (term98 A B D P Q pat f arg e x).
Proof. exact (MK_COMB (@lem8292067 A B D P Q pat f arg x) (@lem8292068 D P e x)). Qed.
Lemma lem8292070 {B : Type'} : (@eq (B -> Prop)) = (@eq (B -> Prop)).
Proof. exact (eq_refl (@eq (B -> Prop))). Qed.
Lemma lem8292071 {A B D P Q : Type'} (pat : Q -> D) (f : A -> B) (arg : type1475 A P Q) (e : P -> D) (x : P) : (term101 A B D P Q pat f arg e x) = (term102 A B D P Q pat f arg e x).
Proof. exact (MK_COMB (@lem8292070 B) (@lem8292069 A B D P Q pat f arg e x)). Qed.
Lemma lem8292072 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term98 A B D P Q pat f arg e x) = (term103 A B D P Q pat e f arg x).
Proof. exact (eq_refl (term98 A B D P Q pat f arg e x)). Qed.
Lemma lem8292073 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : ((term97 A B D P Q pat f arg e x) = (term98 A B D P Q pat f arg e x)) = ((term98 A B D P Q pat f arg e x) = (term103 A B D P Q pat e f arg x)).
Proof. exact (MK_COMB (@lem8292071 A B D P Q pat f arg e x) (@lem8292072 A B D P Q pat e f arg x)). Qed.
Lemma lem8292074 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term98 A B D P Q pat f arg e x) = (term103 A B D P Q pat e f arg x).
Proof. exact (EQ_MP (@lem8292073 A B D P Q pat e f arg x) (@lem8292065 A B D P Q pat f arg e x)). Qed.
Lemma lem8292085 {B : Type'} : (@ε B) = (@ε B).
Proof. exact (eq_refl (@ε B)). Qed.
Lemma lem8292086 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term108 A B D P Q pat f arg e x) = (term109 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8292085 B) (@lem8292074 A B D P Q pat e f arg x)). Qed.
Lemma lem8292087 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term110 A B D P Q pat f arg e x) = (term111 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8292061 A B D P Q pat e f arg x) (@lem8292086 A B D P Q pat e f arg x)). Qed.
Lemma lem8292088 {B : Type'} : (term112 B) = (term112 B).
Proof. exact (eq_refl (term112 B)). Qed.
Lemma lem8292089 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term95 A B D P Q pat f arg e x) = (term113 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8292087 A B D P Q pat e f arg x) (@lem8292088 B)). Qed.
Lemma lem8292090 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term87 A B D P Q e pat f arg x) = (term113 A B D P Q pat e f arg x).
Proof. exact (TRANS (@lem8292034 A B D P Q pat f arg e x) (@lem8292089 A B D P Q pat e f arg x)). Qed.
Lemma lem8292091 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term86 A B D P Q e pat f arg x) = (term113 A B D P Q pat e f arg x).
Proof. exact (TRANS (@lem8292021 A B D P Q e pat f arg x) (@lem8292090 A B D P Q pat e f arg x)). Qed.
Lemma lem8292092 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term114 A B D P Q e pat f arg) = (term115 A B D P Q pat e f arg).
Proof. exact (fun_ext (fun x : P => @lem8292091 A B D P Q pat e f arg x)). Qed.
Lemma lem8292093 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term39 A B D P Q e pat arg) = (term116 A B D P Q pat e arg).
Proof. exact (fun_ext (fun f : A -> B => @lem8292092 A B D P Q pat e f arg)). Qed.
Lemma lem8292094 {A B P : Type'} (lt2 : type1402 A) (p : type560 A B P) (s : P -> A) : (@tailadmissible A B P lt2 p s) = (@tailadmissible A B P lt2 p s).
Proof. exact (eq_refl (@tailadmissible A B P lt2 p s)). Qed.
Lemma lem8292095 {A B D P Q : Type'} (lt2 : type1402 A) (p : type560 A B P) (s : P -> A) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term117 A B D P Q lt2 p s e pat arg) = (term118 A B D P Q lt2 p s pat e arg).
Proof. exact (MK_COMB (@lem8292094 A B P lt2 p s) (@lem8292093 A B D P Q pat e arg)). Qed.
Lemma lem8292096 {A B D P Q : Type'} (lt2 : type1402 A) (p : type560 A B P) (s : P -> A) (e : P -> D) (pat : Q -> D) (arg : type1475 A P Q) : (term118 A B D P Q lt2 p s pat e arg) = (term117 A B D P Q lt2 p s e pat arg).
Proof. exact (SYM (@lem8292095 A B D P Q lt2 p s pat e arg)). Qed.
Lemma lem8292098 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (t : type558 A B P) : (@tailadmissible A B P lt2 p s t) = (term22 A B P lt2 s p t).
Proof. exact (EQ_MP (@lem8291686 A B P lt2 s p t) (@lem8291685 A B P lt2 s p t)). Qed.
Lemma lem8292099 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (t : type558 A B P) : (@tailadmissible A B P lt2 p s t) = (term22 A B P lt2 s p t).
Proof. exact (@lem8292098 A B P lt2 s p t). Qed.
Lemma lem8292100 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term118 A B D P Q lt2 p s pat e arg) = (term119 A B D P Q lt2 s p pat e arg).
Proof. exact (@lem8292099 A B P lt2 s p (term116 A B D P Q pat e arg)). Qed.
Lemma lem8292178 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8292179 {A B P : Type'} (f : type558 A B P) (y : A -> B) : (term120 A B P f y) = (f y).
Proof. exact (@lem8292178 (A -> B) (P -> B) f y). Qed.
Lemma lem8292180 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (f : A -> B) : (term121 A B D P Q pat e arg f) = (term122 A B D P Q pat e arg f).
Proof. exact (@lem8292179 A B P (term116 A B D P Q pat e arg) f). Qed.
Lemma lem8292181 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term122 A B D P Q pat e arg f) = (term115 A B D P Q pat e f arg).
Proof. exact (eq_refl (term122 A B D P Q pat e arg f)). Qed.
Lemma lem8292182 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term123 A B D P Q pat e arg) = (term116 A B D P Q pat e arg).
Proof. exact (fun_ext (fun f : A -> B => @lem8292181 A B D P Q pat e f arg)). Qed.
Lemma lem8292183 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8292184 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (f : A -> B) : (term121 A B D P Q pat e arg f) = (term122 A B D P Q pat e arg f).
Proof. exact (MK_COMB (@lem8292182 A B D P Q pat e arg) (@lem8292183 A B f)). Qed.
Lemma lem8292185 {B P : Type'} : (@eq (P -> B)) = (@eq (P -> B)).
Proof. exact (eq_refl (@eq (P -> B))). Qed.
Lemma lem8292186 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (f : A -> B) : (term124 A B D P Q pat e arg f) = (term125 A B D P Q pat e arg f).
Proof. exact (MK_COMB (@lem8292185 B P) (@lem8292184 A B D P Q pat e arg f)). Qed.
Lemma lem8292187 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term122 A B D P Q pat e arg f) = (term115 A B D P Q pat e f arg).
Proof. exact (eq_refl (term122 A B D P Q pat e arg f)). Qed.
Lemma lem8292188 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : ((term121 A B D P Q pat e arg f) = (term122 A B D P Q pat e arg f)) = ((term122 A B D P Q pat e arg f) = (term115 A B D P Q pat e f arg)).
Proof. exact (MK_COMB (@lem8292186 A B D P Q pat e arg f) (@lem8292187 A B D P Q pat e f arg)). Qed.
Lemma lem8292189 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term122 A B D P Q pat e arg f) = (term115 A B D P Q pat e f arg).
Proof. exact (EQ_MP (@lem8292188 A B D P Q pat e f arg) (@lem8292180 A B D P Q pat e arg f)). Qed.
Lemma lem8292210 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8292211 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term126 A B D P Q pat e arg f a) = (term127 A B D P Q pat e f arg a).
Proof. exact (MK_COMB (@lem8292189 A B D P Q pat e f arg) (@lem8292210 P a)). Qed.
Lemma lem8292213 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8292214 {B P : Type'} (f : P -> B) (y : P) : (term128 B P f y) = (f y).
Proof. exact (@lem8292213 P B f y). Qed.
Lemma lem8292215 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term129 A B D P Q pat e f arg a) = (term127 A B D P Q pat e f arg a).
Proof. exact (@lem8292214 B P (term115 A B D P Q pat e f arg) a). Qed.
Lemma lem8292216 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term127 A B D P Q pat e f arg x) = (term113 A B D P Q pat e f arg x).
Proof. exact (eq_refl (term127 A B D P Q pat e f arg x)). Qed.
Lemma lem8292217 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term130 A B D P Q pat e f arg) = (term115 A B D P Q pat e f arg).
Proof. exact (fun_ext (fun x : P => @lem8292216 A B D P Q pat e f arg x)). Qed.
Lemma lem8292218 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8292219 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term129 A B D P Q pat e f arg a) = (term127 A B D P Q pat e f arg a).
Proof. exact (MK_COMB (@lem8292217 A B D P Q pat e f arg) (@lem8292218 P a)). Qed.
Lemma lem8292220 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8292221 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term131 A B D P Q pat e f arg a) = (term132 A B D P Q pat e f arg a).
Proof. exact (MK_COMB (@lem8292220 B) (@lem8292219 A B D P Q pat e f arg a)). Qed.
Lemma lem8292222 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term127 A B D P Q pat e f arg a) = (term113 A B D P Q pat e f arg a).
Proof. exact (eq_refl (term127 A B D P Q pat e f arg a)). Qed.
Lemma lem8292223 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : ((term129 A B D P Q pat e f arg a) = (term127 A B D P Q pat e f arg a)) = ((term127 A B D P Q pat e f arg a) = (term113 A B D P Q pat e f arg a)).
Proof. exact (MK_COMB (@lem8292221 A B D P Q pat e f arg a) (@lem8292222 A B D P Q pat e f arg a)). Qed.
Lemma lem8292224 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term127 A B D P Q pat e f arg a) = (term113 A B D P Q pat e f arg a).
Proof. exact (EQ_MP (@lem8292223 A B D P Q pat e f arg a) (@lem8292215 A B D P Q pat e f arg a)). Qed.
Lemma lem8292245 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term126 A B D P Q pat e arg f a) = (term113 A B D P Q pat e f arg a).
Proof. exact (TRANS (@lem8292211 A B D P Q pat e f arg a) (@lem8292224 A B D P Q pat e f arg a)). Qed.
Lemma lem8292246 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8292247 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term133 A B D P Q pat e arg f a) = (term134 A B D P Q pat e f arg a).
Proof. exact (MK_COMB (@lem8292246 B) (@lem8292245 A B D P Q pat e f arg a)). Qed.
Lemma lem8292248 {A B P : Type'} (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (f : A -> B) (a : P) : (term135 A B P P' G H f a) = (term135 A B P P' G H f a).
Proof. exact (eq_refl (term135 A B P P' G H f a)). Qed.
Lemma lem8292249 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (f : A -> B) (a : P) : ((term126 A B D P Q pat e arg f a) = (term135 A B P P' G H f a)) = ((term113 A B D P Q pat e f arg a) = (term135 A B P P' G H f a)).
Proof. exact (MK_COMB (@lem8292247 A B D P Q pat e f arg a) (@lem8292248 A B P P' G H f a)). Qed.
Lemma lem8292252 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term136 A B P p f a) = (term136 A B P p f a).
Proof. exact (eq_refl (term136 A B P p f a)). Qed.
Lemma lem8292253 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (f : A -> B) (a : P) : (term137 A B D P Q p pat e arg P' G H f a) = (term138 A B D P Q p pat e arg P' G H f a).
Proof. exact (MK_COMB (@lem8292252 A B P p f a) (@lem8292249 A B D P Q pat e arg P' G H f a)). Qed.
Lemma lem8292256 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (f : A -> B) : (term139 A B D P Q p pat e arg P' G H f) = (term140 A B D P Q p pat e arg P' G H f).
Proof. exact (fun_ext (fun a : P => @lem8292253 A B D P Q p pat e arg P' G H f a)). Qed.
Lemma lem8292257 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8292258 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (f : A -> B) : (term141 A B D P Q p pat e arg P' G H f) = (term142 A B D P Q p pat e arg P' G H f).
Proof. exact (MK_COMB (@lem8292257 P) (@lem8292256 A B D P Q p pat e arg P' G H f)). Qed.
Lemma lem8292263 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) : (term143 A B D P Q p pat e arg P' G H) = (term144 A B D P Q p pat e arg P' G H).
Proof. exact (fun_ext (fun f : A -> B => @lem8292258 A B D P Q p pat e arg P' G H f)). Qed.
Lemma lem8292264 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8292265 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) : (term145 A B D P Q p pat e arg P' G H) = (term146 A B D P Q p pat e arg P' G H).
Proof. exact (MK_COMB (@lem8292264 A B) (@lem8292263 A B D P Q p pat e arg P' G H)). Qed.
Lemma lem8292270 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) : (term147 A B P lt2 s P' G H) = (term147 A B P lt2 s P' G H).
Proof. exact (eq_refl (term147 A B P lt2 s P' G H)). Qed.
Lemma lem8292271 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) : (term148 A B D P Q lt2 s p pat e arg P' G H) = (term149 A B D P Q lt2 s p pat e arg P' G H).
Proof. exact (MK_COMB (@lem8292270 A B P lt2 s P' G H) (@lem8292265 A B D P Q p pat e arg P' G H)). Qed.
Lemma lem8292274 {A B P : Type'} (P' : type560 A B P) (G : type557 A B P) (lt2 : type1402 A) (s : P -> A) : (term150 A B P P' G lt2 s) = (term150 A B P P' G lt2 s).
Proof. exact (eq_refl (term150 A B P P' G lt2 s)). Qed.
Lemma lem8292275 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) : (term151 A B D P Q lt2 s p pat e arg P' G H) = (term152 A B D P Q lt2 s p pat e arg P' G H).
Proof. exact (MK_COMB (@lem8292274 A B P P' G lt2 s) (@lem8292271 A B D P Q lt2 s p pat e arg P' G H)). Qed.
Lemma lem8292278 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (P' : type560 A B P) (G : type557 A B P) : (term153 A B D P Q lt2 s p pat e arg P' G) = (term154 A B D P Q lt2 s p pat e arg P' G).
Proof. exact (fun_ext (fun H : type558 A B P => @lem8292275 A B D P Q lt2 s p pat e arg P' G H)). Qed.
Lemma lem8292279 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8292280 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (P' : type560 A B P) (G : type557 A B P) : (term155 A B D P Q lt2 s p pat e arg P' G) = (term156 A B D P Q lt2 s p pat e arg P' G).
Proof. exact (MK_COMB (@lem8292279 A B P) (@lem8292278 A B D P Q lt2 s p pat e arg P' G)). Qed.
Lemma lem8292285 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (P' : type560 A B P) : (term157 A B D P Q lt2 s p pat e arg P') = (term158 A B D P Q lt2 s p pat e arg P').
Proof. exact (fun_ext (fun G : type557 A B P => @lem8292280 A B D P Q lt2 s p pat e arg P' G)). Qed.
Lemma lem8292286 {A B P : Type'} : (@ex ((A -> B) -> P -> A)) = (@ex ((A -> B) -> P -> A)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> A))). Qed.
Lemma lem8292287 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (P' : type560 A B P) : (term159 A B D P Q lt2 s p pat e arg P') = (term160 A B D P Q lt2 s p pat e arg P').
Proof. exact (MK_COMB (@lem8292286 A B P) (@lem8292285 A B D P Q lt2 s p pat e arg P')). Qed.
Lemma lem8292292 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term161 A B D P Q lt2 s p pat e arg) = (term162 A B D P Q lt2 s p pat e arg).
Proof. exact (fun_ext (fun P' : type560 A B P => @lem8292287 A B D P Q lt2 s p pat e arg P')). Qed.
Lemma lem8292293 {A B P : Type'} : (@ex ((A -> B) -> P -> Prop)) = (@ex ((A -> B) -> P -> Prop)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> Prop))). Qed.
Lemma lem8292294 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term119 A B D P Q lt2 s p pat e arg) = (term163 A B D P Q lt2 s p pat e arg).
Proof. exact (MK_COMB (@lem8292293 A B P) (@lem8292292 A B D P Q lt2 s p pat e arg)). Qed.
Lemma lem8292299 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term118 A B D P Q lt2 p s pat e arg) = (term163 A B D P Q lt2 s p pat e arg).
Proof. exact (TRANS (@lem8292100 A B D P Q lt2 s p pat e arg) (@lem8292294 A B D P Q lt2 s p pat e arg)). Qed.
Lemma lem8292300 {A B D P Q : Type'} (lt2 : type1402 A) (p : type560 A B P) (s : P -> A) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term163 A B D P Q lt2 s p pat e arg) = (term118 A B D P Q lt2 p s pat e arg).
Proof. exact (SYM (@lem8292299 A B D P Q lt2 s p pat e arg)). Qed.
Lemma lem8292301 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term164 A B D P Q p arg pat e) : term164 A B D P Q p arg pat e.
Proof. exact (h1). Qed.
Lemma lem8292302 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term164 A B D P Q p arg pat e) : term165 A B D P Q p arg pat e f.
Proof. exact (@lem8292301 A B D P Q p arg pat e h1 f). Qed.
Lemma lem8292303 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term165 A B D P Q p arg pat e f) = (term166 A B D P Q p f arg pat e).
Proof. exact (eq_refl (term165 A B D P Q p arg pat e f)). Qed.
Lemma lem8292304 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term164 A B D P Q p arg pat e) : term166 A B D P Q p f arg pat e.
Proof. exact (EQ_MP (@lem8292303 A B D P Q p f arg pat e) (@lem8292302 A B D P Q f p arg pat e h1)). Qed.
Lemma lem8292305 {A B D P Q : Type'} (f : A -> B) (x : P) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term164 A B D P Q p arg pat e) : term167 A B D P Q p f arg pat e x.
Proof. exact (@lem8292304 A B D P Q f p arg pat e h1 x). Qed.
Lemma lem8292306 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term167 A B D P Q p f arg pat e x) = (term168 A B D P Q p f arg pat e x).
Proof. exact (eq_refl (term167 A B D P Q p f arg pat e x)). Qed.
Lemma lem8292307 {A B D P Q : Type'} (f : A -> B) (x : P) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term164 A B D P Q p arg pat e) : term168 A B D P Q p f arg pat e x.
Proof. exact (EQ_MP (@lem8292306 A B D P Q p f arg pat e x) (@lem8292305 A B D P Q f x p arg pat e h1)). Qed.
Lemma lem8292308 {A B P : Type'} (p : type560 A B P) (f : A -> B) (x : P) (h1 : p f x) : p f x.
Proof. exact (h1). Qed.
Lemma lem8292309 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term164 A B D P Q p arg pat e) (h2 : p f x) : (term105 A B D P Q pat e f arg x) = (term169 D P Q pat e x).
Proof. exact (@lem8292307 A B D P Q f x p arg pat e h1 (@lem8292308 A B P p f x h2)). Qed.
Lemma lem8292510 (p : Prop) (q : Prop) (p' : Prop) (q' : Prop) : term170 p q p' q'.
Proof. exact (fun h0 : p = p' => @lem4211 q q' p p' h0). Qed.
Lemma lem8292511 (p : Prop) (q : Prop) (p' : Prop) : term171 p q p'.
Proof. exact (fun q' : Prop => @lem8292510 p q p' q'). Qed.
Lemma lem8292512 (p : Prop) (q : Prop) : term172 p q.
Proof. exact (fun p' : Prop => @lem8292511 p q p'). Qed.
Lemma lem8292513 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (f : A -> B) (a : P) : term173 A B D P Q p pat e arg P' G H f a.
Proof. exact (@lem8292512 (p f a) ((term113 A B D P Q pat e f arg a) = (term135 A B P P' G H f a))). Qed.
Lemma lem8292514 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (f : A -> B) (a : P) (p' : Prop) : term174 A B D P Q p pat e arg P' G H f a p'.
Proof. exact (@lem8292513 A B D P Q p pat e arg P' G H f a p'). Qed.
Lemma lem8292515 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (f : A -> B) (a : P) (p' : Prop) : (term174 A B D P Q p pat e arg P' G H f a p') = (term175 A B D P Q p pat e arg P' G H f a p').
Proof. exact (eq_refl (term174 A B D P Q p pat e arg P' G H f a p')). Qed.
Lemma lem8292516 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (f : A -> B) (a : P) (p' : Prop) : term175 A B D P Q p pat e arg P' G H f a p'.
Proof. exact (EQ_MP (@lem8292515 A B D P Q p pat e arg P' G H f a p') (@lem8292514 A B D P Q p pat e arg P' G H f a p')). Qed.
Lemma lem8292517 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (f : A -> B) (a : P) (p' : Prop) (q' : Prop) : term176 A B D P Q p pat e arg P' G H f a p' q'.
Proof. exact (@lem8292516 A B D P Q p pat e arg P' G H f a p' q'). Qed.
Lemma lem8292518 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (f : A -> B) (a : P) (p' : Prop) (q' : Prop) : (term176 A B D P Q p pat e arg P' G H f a p' q') = (term177 A B D P Q p pat e arg P' G H f a p' q').
Proof. exact (eq_refl (term176 A B D P Q p pat e arg P' G H f a p' q')). Qed.
Lemma lem8292519 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (f : A -> B) (a : P) (p' : Prop) (q' : Prop) : term177 A B D P Q p pat e arg P' G H f a p' q'.
Proof. exact (EQ_MP (@lem8292518 A B D P Q p pat e arg P' G H f a p' q') (@lem8292517 A B D P Q p pat e arg P' G H f a p' q')). Qed.
Lemma lem8292520 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (p f a) = (p f a).
Proof. exact (eq_refl (p f a)). Qed.
Lemma lem8292521 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (p : type560 A B P) (f : A -> B) (a : P) (q' : Prop) : term178 A B D P Q pat e arg P' G H p f a q'.
Proof. exact (@lem8292519 A B D P Q p pat e arg P' G H f a (p f a) q'). Qed.
Lemma lem8292522 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (p : type560 A B P) (f : A -> B) (a : P) (q' : Prop) : term179 A B D P Q pat e arg P' G H p f a q'.
Proof. exact (@lem8292521 A B D P Q pat e arg P' G H p f a q' (@lem8292520 A B P p f a)). Qed.
Lemma lem8292523 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) (h1 : p f a) : p f a.
Proof. exact (h1). Qed.
Lemma lem8292524 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (p f a) = ((p f a) = True).
Proof. exact (@lem7 (p f a)). Qed.
Lemma lem8292529 {_2963 : Type'} (g : Prop) (t : _2963) (e : _2963) (g' : Prop) (t' : _2963) (e' : _2963) : term180 _2963 g t e g' t' e'.
Proof. exact (EQ_MP (@lem14781 _2963 g t e g' t' e') (@lem15222 _2963 g t e g' t' e')). Qed.
Lemma lem8292530 {_2963 : Type'} (g : Prop) (t : _2963) (e : _2963) (g' : Prop) (t' : _2963) : term181 _2963 g t e g' t'.
Proof. exact (fun e' : _2963 => @lem8292529 _2963 g t e g' t' e'). Qed.
Lemma lem8292531 {_2963 : Type'} (g : Prop) (t : _2963) (e : _2963) (g' : Prop) : term182 _2963 g t e g'.
Proof. exact (fun t' : _2963 => @lem8292530 _2963 g t e g' t'). Qed.
Lemma lem8292532 {_2963 : Type'} (g : Prop) (t : _2963) (e : _2963) : term183 _2963 g t e.
Proof. exact (fun g' : Prop => @lem8292531 _2963 g t e g'). Qed.
Lemma lem8292533 {B : Type'} (g : Prop) (t : B) (e : B) : term183 B g t e.
Proof. exact (@lem8292532 B g t e). Qed.
Lemma lem8292534 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : term184 A B D P Q pat e f arg a.
Proof. exact (@lem8292533 B (term105 A B D P Q pat e f arg a) (term109 A B D P Q pat e f arg a) (term112 B)). Qed.
Lemma lem8292535 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (g' : Prop) : term185 A B D P Q pat e f arg a g'.
Proof. exact (@lem8292534 A B D P Q pat e f arg a g'). Qed.
Lemma lem8292536 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (g' : Prop) : (term185 A B D P Q pat e f arg a g') = (term186 A B D P Q pat e f arg a g').
Proof. exact (eq_refl (term185 A B D P Q pat e f arg a g')). Qed.
Lemma lem8292537 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (g' : Prop) : term186 A B D P Q pat e f arg a g'.
Proof. exact (EQ_MP (@lem8292536 A B D P Q pat e f arg a g') (@lem8292535 A B D P Q pat e f arg a g')). Qed.
Lemma lem8292538 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (g' : Prop) (t' : B) : term187 A B D P Q pat e f arg a g' t'.
Proof. exact (@lem8292537 A B D P Q pat e f arg a g' t'). Qed.
Lemma lem8292539 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (g' : Prop) (t' : B) : (term187 A B D P Q pat e f arg a g' t') = (term188 A B D P Q pat e f arg a g' t').
Proof. exact (eq_refl (term187 A B D P Q pat e f arg a g' t')). Qed.
Lemma lem8292540 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (g' : Prop) (t' : B) : term188 A B D P Q pat e f arg a g' t'.
Proof. exact (EQ_MP (@lem8292539 A B D P Q pat e f arg a g' t') (@lem8292538 A B D P Q pat e f arg a g' t')). Qed.
Lemma lem8292541 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (g' : Prop) (t' : B) (e' : B) : term189 A B D P Q pat e f arg a g' t' e'.
Proof. exact (@lem8292540 A B D P Q pat e f arg a g' t' e'). Qed.
Lemma lem8292542 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (g' : Prop) (t' : B) (e' : B) : (term189 A B D P Q pat e f arg a g' t' e') = (term190 A B D P Q pat e f arg a g' t' e').
Proof. exact (eq_refl (term189 A B D P Q pat e f arg a g' t' e')). Qed.
Lemma lem8292543 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (g' : Prop) (t' : B) (e' : B) : term190 A B D P Q pat e f arg a g' t' e'.
Proof. exact (EQ_MP (@lem8292542 A B D P Q pat e f arg a g' t' e') (@lem8292541 A B D P Q pat e f arg a g' t' e')). Qed.
Lemma lem8292545 {A B D P Q : Type'} (f : A -> B) (x : P) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term164 A B D P Q p arg pat e) : term168 A B D P Q p f arg pat e x.
Proof. exact (fun h0 : p f x => @lem8292309 A B D P Q arg pat e p f x h1 h0). Qed.
Lemma lem8292546 {A B D P Q : Type'} (f : A -> B) (x : P) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term164 A B D P Q p arg pat e) : term168 A B D P Q p f arg pat e x.
Proof. exact (@lem8292545 A B D P Q f x p arg pat e h1). Qed.
Lemma lem8292547 {A B D P Q : Type'} (f : A -> B) (a : P) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term164 A B D P Q p arg pat e) : term168 A B D P Q p f arg pat e a.
Proof. exact (@lem8292546 A B D P Q f a p arg pat e h1). Qed.
Lemma lem8292549 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) (h1 : p f a) : (p f a) = True.
Proof. exact (EQ_MP (@lem8292524 A B P p f a) (@lem8292523 A B P p f a h1)). Qed.
Lemma lem8292550 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) (h1 : p f a) : True = (p f a).
Proof. exact (SYM (@lem8292549 A B P p f a h1)). Qed.
Lemma lem8292551 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) (h1 : p f a) : p f a.
Proof. exact (EQ_MP (@lem8292550 A B P p f a h1) (@lem0)). Qed.
Lemma lem8292552 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (a : P) (h1 : term164 A B D P Q p arg pat e) (h2 : p f a) : (term105 A B D P Q pat e f arg a) = (term169 D P Q pat e a).
Proof. exact (@lem8292547 A B D P Q f a p arg pat e h1 (@lem8292551 A B P p f a h2)). Qed.
Lemma lem8292559 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) (t' : B) (e' : B) : term191 A B D P Q f arg pat e a t' e'.
Proof. exact (@lem8292543 A B D P Q pat e f arg a (term169 D P Q pat e a) t' e'). Qed.
Lemma lem8292560 {A B D P Q : Type'} (t' : B) (e' : B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (a : P) (h1 : term164 A B D P Q p arg pat e) (h2 : p f a) : term192 A B D P Q f arg pat e a t' e'.
Proof. exact (@lem8292559 A B D P Q f arg pat e a t' e' (@lem8292552 A B D P Q arg pat e p f a h1 h2)). Qed.
Lemma lem8292574 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term109 A B D P Q pat e f arg a) = (term109 A B D P Q pat e f arg a).
Proof. exact (eq_refl (term109 A B D P Q pat e f arg a)). Qed.
Lemma lem8292575 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : term193 A B D P Q pat e f arg a.
Proof. exact (fun h0 : term169 D P Q pat e a => @lem8292574 A B D P Q pat e f arg a). Qed.
Lemma lem8292576 {A B D P Q : Type'} (e' : B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (a : P) (h1 : term164 A B D P Q p arg pat e) (h2 : p f a) : term194 A B D P Q pat e f arg a e'.
Proof. exact (@lem8292560 A B D P Q (term109 A B D P Q pat e f arg a) e' arg pat e p f a h1 h2). Qed.
Lemma lem8292577 {A B D P Q : Type'} (e' : B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (a : P) (h1 : term164 A B D P Q p arg pat e) (h2 : p f a) : term195 A B D P Q pat e f arg a e'.
Proof. exact (@lem8292576 A B D P Q e' arg pat e p f a h1 h2 (@lem8292575 A B D P Q pat e f arg a)). Qed.
Lemma lem8292581 {B : Type'} : (term112 B) = (term112 B).
Proof. exact (eq_refl (term112 B)). Qed.
Lemma lem8292582 {B D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : term196 B D P Q pat e a.
Proof. exact (fun h0 : term197 D P Q pat e a => @lem8292581 B). Qed.
Lemma lem8292583 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (a : P) (h1 : term164 A B D P Q p arg pat e) (h2 : p f a) : term198 A B D P Q pat e f arg a.
Proof. exact (@lem8292577 A B D P Q (term112 B) arg pat e p f a h1 h2). Qed.
Lemma lem8292584 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (a : P) (h1 : term164 A B D P Q p arg pat e) (h2 : p f a) : (term113 A B D P Q pat e f arg a) = (term199 A B D P Q pat e f arg a).
Proof. exact (@lem8292583 A B D P Q arg pat e p f a h1 h2 (@lem8292582 B D P Q pat e a)). Qed.
Lemma lem8292650 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8292651 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (a : P) (h1 : term164 A B D P Q p arg pat e) (h2 : p f a) : (term134 A B D P Q pat e f arg a) = (term200 A B D P Q pat e f arg a).
Proof. exact (MK_COMB (@lem8292650 B) (@lem8292584 A B D P Q arg pat e p f a h1 h2)). Qed.
Lemma lem8292750 {A B P : Type'} (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (f : A -> B) (a : P) : (term135 A B P P' G H f a) = (term135 A B P P' G H f a).
Proof. exact (eq_refl (term135 A B P P' G H f a)). Qed.
Lemma lem8292751 {A B D P Q : Type'} (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (a : P) (h1 : term164 A B D P Q p arg pat e) (h2 : p f a) : ((term113 A B D P Q pat e f arg a) = (term135 A B P P' G H f a)) = ((term199 A B D P Q pat e f arg a) = (term135 A B P P' G H f a)).
Proof. exact (MK_COMB (@lem8292651 A B D P Q arg pat e p f a h1 h2) (@lem8292750 A B P P' G H f a)). Qed.
Lemma lem8292852 {A B D P Q : Type'} (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (f : A -> B) (a : P) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term164 A B D P Q p arg pat e) : term201 A B D P Q p pat e arg P' G H f a.
Proof. exact (fun h0 : p f a => @lem8292751 A B D P Q P' G H arg pat e p f a h1 h0). Qed.
Lemma lem8292853 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (f : A -> B) (a : P) : term202 A B D P Q p pat e arg P' G H f a.
Proof. exact (@lem8292522 A B D P Q pat e arg P' G H p f a ((term199 A B D P Q pat e f arg a) = (term135 A B P P' G H f a))). Qed.
Lemma lem8292854 {A B D P Q : Type'} (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (f : A -> B) (a : P) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term164 A B D P Q p arg pat e) : (term138 A B D P Q p pat e arg P' G H f a) = (term203 A B D P Q p pat e arg P' G H f a).
Proof. exact (@lem8292853 A B D P Q p pat e arg P' G H f a (@lem8292852 A B D P Q P' G H f a p arg pat e h1)). Qed.
Lemma lem8293078 {A B D P Q : Type'} (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (f : A -> B) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term164 A B D P Q p arg pat e) : (term140 A B D P Q p pat e arg P' G H f) = (term204 A B D P Q p pat e arg P' G H f).
Proof. exact (fun_ext (fun a : P => @lem8292854 A B D P Q P' G H f a p arg pat e h1)). Qed.
Lemma lem8293302 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8293303 {A B D P Q : Type'} (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (f : A -> B) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term164 A B D P Q p arg pat e) : (term142 A B D P Q p pat e arg P' G H f) = (term205 A B D P Q p pat e arg P' G H f).
Proof. exact (MK_COMB (@lem8293302 P) (@lem8293078 A B D P Q P' G H f p arg pat e h1)). Qed.
Lemma lem8293531 {A B D P Q : Type'} (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term164 A B D P Q p arg pat e) : (term144 A B D P Q p pat e arg P' G H) = (term206 A B D P Q p pat e arg P' G H).
Proof. exact (fun_ext (fun f : A -> B => @lem8293303 A B D P Q P' G H f p arg pat e h1)). Qed.
Lemma lem8293759 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8293760 {A B D P Q : Type'} (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term164 A B D P Q p arg pat e) : (term146 A B D P Q p pat e arg P' G H) = (term207 A B D P Q p pat e arg P' G H).
Proof. exact (MK_COMB (@lem8293759 A B) (@lem8293531 A B D P Q P' G H p arg pat e h1)). Qed.
Lemma lem8293992 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) : (term147 A B P lt2 s P' G H) = (term147 A B P lt2 s P' G H).
Proof. exact (eq_refl (term147 A B P lt2 s P' G H)). Qed.
Lemma lem8293993 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term164 A B D P Q p arg pat e) : (term149 A B D P Q lt2 s p pat e arg P' G H) = (term208 A B D P Q lt2 s p pat e arg P' G H).
Proof. exact (MK_COMB (@lem8293992 A B P lt2 s P' G H) (@lem8293760 A B D P Q P' G H p arg pat e h1)). Qed.
Lemma lem8294352 {A B P : Type'} (P' : type560 A B P) (G : type557 A B P) (lt2 : type1402 A) (s : P -> A) : (term150 A B P P' G lt2 s) = (term150 A B P P' G lt2 s).
Proof. exact (eq_refl (term150 A B P P' G lt2 s)). Qed.
Lemma lem8294353 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (P' : type560 A B P) (G : type557 A B P) (H : type558 A B P) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term164 A B D P Q p arg pat e) : (term152 A B D P Q lt2 s p pat e arg P' G H) = (term209 A B D P Q lt2 s p pat e arg P' G H).
Proof. exact (MK_COMB (@lem8294352 A B P P' G lt2 s) (@lem8293993 A B D P Q lt2 s P' G H p arg pat e h1)). Qed.
Lemma lem8294757 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (P' : type560 A B P) (G : type557 A B P) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term164 A B D P Q p arg pat e) : (term154 A B D P Q lt2 s p pat e arg P' G) = (term210 A B D P Q lt2 s p pat e arg P' G).
Proof. exact (fun_ext (fun H : type558 A B P => @lem8294353 A B D P Q lt2 s P' G H p arg pat e h1)). Qed.
Lemma lem8295161 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8295162 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (P' : type560 A B P) (G : type557 A B P) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term164 A B D P Q p arg pat e) : (term156 A B D P Q lt2 s p pat e arg P' G) = (term211 A B D P Q lt2 s p pat e arg P' G).
Proof. exact (MK_COMB (@lem8295161 A B P) (@lem8294757 A B D P Q lt2 s P' G p arg pat e h1)). Qed.
Lemma lem8295570 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (P' : type560 A B P) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term164 A B D P Q p arg pat e) : (term158 A B D P Q lt2 s p pat e arg P') = (term212 A B D P Q lt2 s p pat e arg P').
Proof. exact (fun_ext (fun G : type557 A B P => @lem8295162 A B D P Q lt2 s P' G p arg pat e h1)). Qed.
Lemma lem8295978 {A B P : Type'} : (@ex ((A -> B) -> P -> A)) = (@ex ((A -> B) -> P -> A)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> A))). Qed.
Lemma lem8295979 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (P' : type560 A B P) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term164 A B D P Q p arg pat e) : (term160 A B D P Q lt2 s p pat e arg P') = (term213 A B D P Q lt2 s p pat e arg P').
Proof. exact (MK_COMB (@lem8295978 A B P) (@lem8295570 A B D P Q lt2 s P' p arg pat e h1)). Qed.
Lemma lem8296391 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term164 A B D P Q p arg pat e) : (term162 A B D P Q lt2 s p pat e arg) = (term214 A B D P Q lt2 s p pat e arg).
Proof. exact (fun_ext (fun P' : type560 A B P => @lem8295979 A B D P Q lt2 s P' p arg pat e h1)). Qed.
Lemma lem8296803 {A B P : Type'} : (@ex ((A -> B) -> P -> Prop)) = (@ex ((A -> B) -> P -> Prop)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> Prop))). Qed.
Lemma lem8296804 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term164 A B D P Q p arg pat e) : (term163 A B D P Q lt2 s p pat e arg) = (term215 A B D P Q lt2 s p pat e arg).
Proof. exact (MK_COMB (@lem8296803 A B P) (@lem8296391 A B D P Q lt2 s p arg pat e h1)). Qed.
Lemma lem8297220 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term164 A B D P Q p arg pat e) : (term215 A B D P Q lt2 s p pat e arg) = (term163 A B D P Q lt2 s p pat e arg).
Proof. exact (SYM (@lem8296804 A B D P Q lt2 s p arg pat e h1)). Qed.
Lemma lem8297222 (p : Prop) : p = (term216 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem8297223 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term164 A B D P Q p arg pat e) = (term217 A B D P Q p arg pat e).
Proof. exact (@lem8297222 (term164 A B D P Q p arg pat e)). Qed.
Lemma lem8297224 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term217 A B D P Q p arg pat e) = (term164 A B D P Q p arg pat e).
Proof. exact (SYM (@lem8297223 A B D P Q p arg pat e)). Qed.
Lemma lem8297225 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term218 A B D P Q p arg pat e) : term218 A B D P Q p arg pat e.
Proof. exact (h1). Qed.
Lemma lem8297228 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term219 A B D P Q lt2 s p arg pat e) : term219 A B D P Q lt2 s p arg pat e.
Proof. exact (h1). Qed.
Lemma lem8297229 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term220 A B D P Q lt2 s p arg pat e.
Proof. exact (fun h0 : term219 A B D P Q lt2 s p arg pat e => @lem8297228 A B D P Q lt2 s p arg pat e h0). Qed.
Lemma lem8297230 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term220 A B D P Q lt2 s p arg pat e) : term220 A B D P Q lt2 s p arg pat e.
Proof. exact (h1). Qed.
Lemma lem8297231 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term219 A B D P Q lt2 s p arg pat e) : term219 A B D P Q lt2 s p arg pat e.
Proof. exact (h1). Qed.
Lemma lem8297232 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term219 A B D P Q lt2 s p arg pat e) (h2 : term220 A B D P Q lt2 s p arg pat e) : term219 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8297230 A B D P Q lt2 s p arg pat e h2 (@lem8297231 A B D P Q lt2 s p arg pat e h1)). Qed.
Lemma lem8297233 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term219 A B D P Q lt2 s p arg pat e) : term221 A B D P Q lt2 s p arg pat e.
Proof. exact (fun h0 : term220 A B D P Q lt2 s p arg pat e => @lem8297232 A B D P Q lt2 s p arg pat e h1 h0). Qed.
Lemma lem8297234 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term220 A B D P Q lt2 s p arg pat e) : term220 A B D P Q lt2 s p arg pat e.
Proof. exact (h1). Qed.
Lemma lem8297235 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term219 A B D P Q lt2 s p arg pat e) (h2 : term220 A B D P Q lt2 s p arg pat e) : term219 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8297233 A B D P Q lt2 s p arg pat e h1 (@lem8297234 A B D P Q lt2 s p arg pat e h2)). Qed.
Lemma lem8297236 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term220 A B D P Q lt2 s p arg pat e) : term220 A B D P Q lt2 s p arg pat e.
Proof. exact (fun h0 : term219 A B D P Q lt2 s p arg pat e => @lem8297235 A B D P Q lt2 s p arg pat e h0 h1). Qed.
Lemma lem8297237 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term222 A B D P Q lt2 s p arg pat e.
Proof. exact (fun h0 : term220 A B D P Q lt2 s p arg pat e => @lem8297236 A B D P Q lt2 s p arg pat e h0). Qed.
Lemma lem8297240 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term220 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8297237 A B D P Q lt2 s p arg pat e (@lem8297229 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8297241 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term220 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8297240 A B D P Q lt2 s p arg pat e). Qed.
Lemma lem8297317 (t : Prop) : (t -> False) = (~ t).
Proof. exact (proj2 (@lem16474 t)). Qed.
Lemma lem8297318 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term217 A B D P Q p arg pat e) = (term223 A B D P Q p arg pat e).
Proof. exact (@lem8297317 (term218 A B D P Q p arg pat e)). Qed.
Lemma lem8297320 (t : Prop) : (term224 t) = t.
Proof. exact (EQ_MP (@lem16507 t) (@lem16506 t)). Qed.
Lemma lem8297321 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term223 A B D P Q p arg pat e) = (term164 A B D P Q p arg pat e).
Proof. exact (@lem8297320 (term164 A B D P Q p arg pat e)). Qed.
Lemma lem8297326 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term217 A B D P Q p arg pat e) = (term164 A B D P Q p arg pat e).
Proof. exact (TRANS (@lem8297318 A B D P Q p arg pat e) (@lem8297321 A B D P Q p arg pat e)). Qed.
Lemma lem8297387 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term225 A B P lt2 s p) = (term225 A B P lt2 s p).
Proof. exact (eq_refl (term225 A B P lt2 s p)). Qed.
Lemma lem8297388 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term226 A B D P Q lt2 s p arg pat e) = (term227 A B D P Q lt2 s p arg pat e).
Proof. exact (MK_COMB (@lem8297387 A B P lt2 s p) (@lem8297326 A B D P Q p arg pat e)). Qed.
Lemma lem8297391 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term228 A B D P Q p pat e arg lt2 s) = (term228 A B D P Q p pat e arg lt2 s).
Proof. exact (eq_refl (term228 A B D P Q p pat e arg lt2 s)). Qed.
Lemma lem8297392 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term229 A B D P Q lt2 s p arg pat e) = (term230 A B D P Q lt2 s p arg pat e).
Proof. exact (MK_COMB (@lem8297391 A B D P Q p pat e arg lt2 s) (@lem8297388 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8297395 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term231 A B D P Q p pat e arg) = (term231 A B D P Q p pat e arg).
Proof. exact (eq_refl (term231 A B D P Q p pat e arg)). Qed.
Lemma lem8297396 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term219 A B D P Q lt2 s p arg pat e) = (term232 A B D P Q lt2 s p arg pat e).
Proof. exact (MK_COMB (@lem8297395 A B D P Q p pat e arg) (@lem8297392 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8297399 {A B D P Q : Type'} (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term233 A B D P Q s p arg pat e) = (term234 A B D P Q s p arg pat e).
Proof. exact (fun_ext (fun lt2 : type1402 A => @lem8297396 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8297400 {A : Type'} : (@all (A -> A -> Prop)) = (@all (A -> A -> Prop)).
Proof. exact (eq_refl (@all (A -> A -> Prop))). Qed.
Lemma lem8297401 {A B D P Q : Type'} (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term235 A B D P Q s p arg pat e) = (term236 A B D P Q s p arg pat e).
Proof. exact (MK_COMB (@lem8297400 A) (@lem8297399 A B D P Q s p arg pat e)). Qed.
Lemma lem8297406 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term237 A B D P Q p arg pat e) = (term238 A B D P Q p arg pat e).
Proof. exact (fun_ext (fun s : P -> A => @lem8297401 A B D P Q s p arg pat e)). Qed.
Lemma lem8297407 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8297408 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term239 A B D P Q p arg pat e) = (term240 A B D P Q p arg pat e).
Proof. exact (MK_COMB (@lem8297407 A P) (@lem8297406 A B D P Q p arg pat e)). Qed.
Lemma lem8297413 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term241 A B D P Q arg pat e) = (term242 A B D P Q arg pat e).
Proof. exact (fun_ext (fun p : type560 A B P => @lem8297408 A B D P Q p arg pat e)). Qed.
Lemma lem8297414 {A B P : Type'} : (@all ((A -> B) -> P -> Prop)) = (@all ((A -> B) -> P -> Prop)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> Prop))). Qed.
Lemma lem8297415 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term243 A B D P Q arg pat e) = (term244 A B D P Q arg pat e).
Proof. exact (MK_COMB (@lem8297414 A B P) (@lem8297413 A B D P Q arg pat e)). Qed.
Lemma lem8297420 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) : (term245 A B D P Q pat e) = (term246 A B D P Q pat e).
Proof. exact (fun_ext (fun arg : type1475 A P Q => @lem8297415 A B D P Q arg pat e)). Qed.
Lemma lem8297421 {A P Q : Type'} : (@all (P -> Q -> A)) = (@all (P -> Q -> A)).
Proof. exact (eq_refl (@all (P -> Q -> A))). Qed.
Lemma lem8297422 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) : (term247 A B D P Q pat e) = (term248 A B D P Q pat e).
Proof. exact (MK_COMB (@lem8297421 A P Q) (@lem8297420 A B D P Q pat e)). Qed.
Lemma lem8297427 {A B D P Q : Type'} (e : P -> D) : (term249 A B D P Q e) = (term250 A B D P Q e).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8297422 A B D P Q pat e)). Qed.
Lemma lem8297428 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8297429 {A B D P Q : Type'} (e : P -> D) : (term251 A B D P Q e) = (term252 A B D P Q e).
Proof. exact (MK_COMB (@lem8297428 D Q) (@lem8297427 A B D P Q e)). Qed.
Lemma lem8297434 {A B D P Q : Type'} : (term253 A B D P Q) = (term254 A B D P Q).
Proof. exact (fun_ext (fun e : P -> D => @lem8297429 A B D P Q e)). Qed.
Lemma lem8297435 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8297442 {A B D P Q : Type'} : (term255 A B D P Q) = (term256 A B D P Q).
Proof. exact (MK_COMB (@lem8297435 D P) (@lem8297434 A B D P Q)). Qed.
Lemma lem8297443 {A B P : Type'} (_111703 : type560 A B P) (h1 : _111703 = (term257 A B P)) : _111703 = (term257 A B P).
Proof. exact (h1). Qed.
Lemma lem8297453 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (x : P) : ((pat t) = (e x)) = ((pat t) = (e x)).
Proof. exact (eq_refl ((pat t) = (e x))). Qed.
Lemma lem8297454 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term258 D P Q pat e x) = (term258 D P Q pat e x).
Proof. exact (fun_ext (fun t : Q => @lem8297453 D P Q pat t e x)). Qed.
Lemma lem8297455 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8297456 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term169 D P Q pat e x) = (term169 D P Q pat e x).
Proof. exact (MK_COMB (@lem8297455 Q) (@lem8297454 D P Q pat e x)). Qed.
Lemma lem8297479 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term259 A B D P Q pat e f arg x t v) = (term259 A B D P Q pat e f arg x t v).
Proof. exact (eq_refl (term259 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8297480 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term260 A B D P Q pat e f arg x v) = (term260 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun t : Q => @lem8297479 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8297481 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8297482 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term261 A B D P Q pat e f arg x v) = (term261 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8297481 Q) (@lem8297480 A B D P Q pat e f arg x v)). Qed.
Lemma lem8297483 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term103 A B D P Q pat e f arg x) = (term103 A B D P Q pat e f arg x).
Proof. exact (fun_ext (fun v : B => @lem8297482 A B D P Q pat e f arg x v)). Qed.
Lemma lem8297484 {B : Type'} : (@ex1 B) = (@ex1 B).
Proof. exact (eq_refl (@ex1 B)). Qed.
Lemma lem8297485 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term105 A B D P Q pat e f arg x) = (term105 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8297484 B) (@lem8297483 A B D P Q pat e f arg x)). Qed.
Lemma lem8297486 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8297487 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term262 A B D P Q pat e f arg x) = (term262 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8297486) (@lem8297485 A B D P Q pat e f arg x)). Qed.
Lemma lem8297488 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : ((term105 A B D P Q pat e f arg x) = (term169 D P Q pat e x)) = ((term105 A B D P Q pat e f arg x) = (term169 D P Q pat e x)).
Proof. exact (MK_COMB (@lem8297487 A B D P Q pat e f arg x) (@lem8297456 D P Q pat e x)). Qed.
Lemma lem8297495 {A B P : Type'} (p : type560 A B P) (f : A -> B) (x : P) : (term136 A B P p f x) = (term136 A B P p f x).
Proof. exact (eq_refl (term136 A B P p f x)). Qed.
Lemma lem8297496 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term168 A B D P Q p f arg pat e x) = (term168 A B D P Q p f arg pat e x).
Proof. exact (MK_COMB (@lem8297495 A B P p f x) (@lem8297488 A B D P Q f arg pat e x)). Qed.
Lemma lem8297497 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term263 A B D P Q p f arg pat e) = (term263 A B D P Q p f arg pat e).
Proof. exact (fun_ext (fun x : P => @lem8297496 A B D P Q p f arg pat e x)). Qed.
Lemma lem8297498 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8297499 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term166 A B D P Q p f arg pat e) = (term166 A B D P Q p f arg pat e).
Proof. exact (MK_COMB (@lem8297498 P) (@lem8297497 A B D P Q p f arg pat e)). Qed.
Lemma lem8297500 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term264 A B D P Q p arg pat e) = (term264 A B D P Q p arg pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8297499 A B D P Q p f arg pat e)). Qed.
Lemma lem8297501 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8297502 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term164 A B D P Q p arg pat e) = (term164 A B D P Q p arg pat e).
Proof. exact (MK_COMB (@lem8297501 A B) (@lem8297500 A B D P Q p arg pat e)). Qed.
Lemma lem8297503 {A B P : Type'} (p : type560 A B P) : p = p.
Proof. exact (eq_refl p). Qed.
Lemma lem8297504 {A P : Type'} (s : P -> A) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8297506 {A B P : Type'} (_111703 : type560 A B P) (h1 : _111703 = (term257 A B P)) : (term257 A B P) = _111703.
Proof. exact (SYM (@lem8297443 A B P _111703 h1)). Qed.
Lemma lem8297507 {A B P : Type'} (_111703 : type560 A B P) (h1 : _111703 = (term257 A B P)) : (term257 A B P) = _111703.
Proof. exact (@lem8297506 A B P _111703 h1). Qed.
Lemma lem8297510 {A B P : Type'} (lt2 : type1402 A) : (@admissible A B A Prop P lt2) = (@admissible A B A Prop P lt2).
Proof. exact (eq_refl (@admissible A B A Prop P lt2)). Qed.
Lemma lem8297511 {A B P : Type'} (lt2 : type1402 A) (_111703 : type560 A B P) (h1 : _111703 = (term257 A B P)) : (term265 A B P lt2) = (@admissible A B A Prop P lt2 _111703).
Proof. exact (MK_COMB (@lem8297510 A B P lt2) (@lem8297507 A B P _111703 h1)). Qed.
Lemma lem8297512 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (_111703 : type560 A B P) (h1 : _111703 = (term257 A B P)) : (term266 A B P lt2 s) = (@admissible A B A Prop P lt2 _111703 s).
Proof. exact (MK_COMB (@lem8297511 A B P lt2 _111703 h1) (@lem8297504 A P s)). Qed.
Lemma lem8297513 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111703 : type560 A B P) (h1 : _111703 = (term257 A B P)) : (term40 A B P lt2 s p) = (@admissible A B A Prop P lt2 _111703 s p).
Proof. exact (MK_COMB (@lem8297512 A B P lt2 s _111703 h1) (@lem8297503 A B P p)). Qed.
Lemma lem8297514 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8297515 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111703 : type560 A B P) (h1 : _111703 = (term257 A B P)) : (term225 A B P lt2 s p) = (term267 A B P lt2 _111703 s p).
Proof. exact (MK_COMB (@lem8297514) (@lem8297513 A B P lt2 s p _111703 h1)). Qed.
Lemma lem8297516 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111703 : type560 A B P) (h1 : _111703 = (term257 A B P)) : (term227 A B D P Q lt2 s p arg pat e) = (term268 A B D P Q lt2 _111703 s p arg pat e).
Proof. exact (MK_COMB (@lem8297515 A B P lt2 s p _111703 h1) (@lem8297502 A B D P Q p arg pat e)). Qed.
Lemma lem8297535 {A P Q : Type'} (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term269 A P Q arg t lt2 y s a) = (term269 A P Q arg t lt2 y s a).
Proof. exact (eq_refl (term269 A P Q arg t lt2 y s a)). Qed.
Lemma lem8297536 {A P Q : Type'} (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term270 A P Q arg t lt2 s a) = (term270 A P Q arg t lt2 s a).
Proof. exact (fun_ext (fun y : A => @lem8297535 A P Q arg t lt2 y s a)). Qed.
Lemma lem8297537 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8297538 {A P Q : Type'} (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term271 A P Q arg t lt2 s a) = (term271 A P Q arg t lt2 s a).
Proof. exact (MK_COMB (@lem8297537 A) (@lem8297536 A P Q arg t lt2 s a)). Qed.
Lemma lem8297557 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term272 A B D P Q p f pat t e a) = (term272 A B D P Q p f pat t e a).
Proof. exact (eq_refl (term272 A B D P Q p f pat t e a)). Qed.
Lemma lem8297558 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term273 A B D P Q p f pat e arg t lt2 s a) = (term273 A B D P Q p f pat e arg t lt2 s a).
Proof. exact (MK_COMB (@lem8297557 A B D P Q p f pat t e a) (@lem8297538 A P Q arg t lt2 s a)). Qed.
Lemma lem8297559 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term274 A B D P Q p f pat e arg lt2 s a) = (term274 A B D P Q p f pat e arg lt2 s a).
Proof. exact (fun_ext (fun t : Q => @lem8297558 A B D P Q p f pat e arg t lt2 s a)). Qed.
Lemma lem8297560 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8297561 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term275 A B D P Q p f pat e arg lt2 s a) = (term275 A B D P Q p f pat e arg lt2 s a).
Proof. exact (MK_COMB (@lem8297560 Q) (@lem8297559 A B D P Q p f pat e arg lt2 s a)). Qed.
Lemma lem8297562 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term276 A B D P Q p f pat e arg lt2 s) = (term276 A B D P Q p f pat e arg lt2 s).
Proof. exact (fun_ext (fun a : P => @lem8297561 A B D P Q p f pat e arg lt2 s a)). Qed.
Lemma lem8297563 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8297564 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term277 A B D P Q p f pat e arg lt2 s) = (term277 A B D P Q p f pat e arg lt2 s).
Proof. exact (MK_COMB (@lem8297563 P) (@lem8297562 A B D P Q p f pat e arg lt2 s)). Qed.
Lemma lem8297565 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term278 A B D P Q p pat e arg lt2 s) = (term278 A B D P Q p pat e arg lt2 s).
Proof. exact (fun_ext (fun f : A -> B => @lem8297564 A B D P Q p f pat e arg lt2 s)). Qed.
Lemma lem8297566 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8297567 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term35 A B D P Q p pat e arg lt2 s) = (term35 A B D P Q p pat e arg lt2 s).
Proof. exact (MK_COMB (@lem8297566 A B) (@lem8297565 A B D P Q p pat e arg lt2 s)). Qed.
Lemma lem8297568 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8297569 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term228 A B D P Q p pat e arg lt2 s) = (term228 A B D P Q p pat e arg lt2 s).
Proof. exact (MK_COMB (@lem8297568) (@lem8297567 A B D P Q p pat e arg lt2 s)). Qed.
Lemma lem8297570 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111703 : type560 A B P) (h1 : _111703 = (term257 A B P)) : (term230 A B D P Q lt2 s p arg pat e) = (term279 A B D P Q lt2 _111703 s p arg pat e).
Proof. exact (MK_COMB (@lem8297569 A B D P Q p pat e arg lt2 s) (@lem8297516 A B D P Q lt2 s p arg pat e _111703 h1)). Qed.
Lemma lem8297615 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) (u : Q) : (term280 A B D P Q p f pat e t arg a u) = (term280 A B D P Q p f pat e t arg a u).
Proof. exact (eq_refl (term280 A B D P Q p f pat e t arg a u)). Qed.
Lemma lem8297616 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) : (term281 A B D P Q p f pat e t arg a) = (term281 A B D P Q p f pat e t arg a).
Proof. exact (fun_ext (fun u : Q => @lem8297615 A B D P Q p f pat e t arg a u)). Qed.
Lemma lem8297617 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8297618 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) : (term282 A B D P Q p f pat e t arg a) = (term282 A B D P Q p f pat e t arg a).
Proof. exact (MK_COMB (@lem8297617 Q) (@lem8297616 A B D P Q p f pat e t arg a)). Qed.
Lemma lem8297619 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (a : P) : (term283 A B D P Q p f pat e arg a) = (term283 A B D P Q p f pat e arg a).
Proof. exact (fun_ext (fun t : Q => @lem8297618 A B D P Q p f pat e t arg a)). Qed.
Lemma lem8297620 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8297621 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (a : P) : (term284 A B D P Q p f pat e arg a) = (term284 A B D P Q p f pat e arg a).
Proof. exact (MK_COMB (@lem8297620 Q) (@lem8297619 A B D P Q p f pat e arg a)). Qed.
Lemma lem8297622 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term285 A B D P Q p f pat e arg) = (term285 A B D P Q p f pat e arg).
Proof. exact (fun_ext (fun a : P => @lem8297621 A B D P Q p f pat e arg a)). Qed.
Lemma lem8297623 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8297624 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term286 A B D P Q p f pat e arg) = (term286 A B D P Q p f pat e arg).
Proof. exact (MK_COMB (@lem8297623 P) (@lem8297622 A B D P Q p f pat e arg)). Qed.
Lemma lem8297625 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term287 A B D P Q p pat e arg) = (term287 A B D P Q p pat e arg).
Proof. exact (fun_ext (fun f : A -> B => @lem8297624 A B D P Q p f pat e arg)). Qed.
Lemma lem8297626 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8297627 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term36 A B D P Q p pat e arg) = (term36 A B D P Q p pat e arg).
Proof. exact (MK_COMB (@lem8297626 A B) (@lem8297625 A B D P Q p pat e arg)). Qed.
Lemma lem8297628 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8297629 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term231 A B D P Q p pat e arg) = (term231 A B D P Q p pat e arg).
Proof. exact (MK_COMB (@lem8297628) (@lem8297627 A B D P Q p pat e arg)). Qed.
Lemma lem8297630 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111703 : type560 A B P) (h1 : _111703 = (term257 A B P)) : (term232 A B D P Q lt2 s p arg pat e) = (term288 A B D P Q lt2 _111703 s p arg pat e).
Proof. exact (MK_COMB (@lem8297629 A B D P Q p pat e arg) (@lem8297570 A B D P Q lt2 s p arg pat e _111703 h1)). Qed.
Lemma lem8297631 {A B D P Q : Type'} (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111703 : type560 A B P) (h1 : _111703 = (term257 A B P)) : (term234 A B D P Q s p arg pat e) = (term289 A B D P Q _111703 s p arg pat e).
Proof. exact (fun_ext (fun lt2 : type1402 A => @lem8297630 A B D P Q lt2 s p arg pat e _111703 h1)). Qed.
Lemma lem8297632 {A : Type'} : (@all (A -> A -> Prop)) = (@all (A -> A -> Prop)).
Proof. exact (eq_refl (@all (A -> A -> Prop))). Qed.
Lemma lem8297633 {A B D P Q : Type'} (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111703 : type560 A B P) (h1 : _111703 = (term257 A B P)) : (term236 A B D P Q s p arg pat e) = (term290 A B D P Q _111703 s p arg pat e).
Proof. exact (MK_COMB (@lem8297632 A) (@lem8297631 A B D P Q s p arg pat e _111703 h1)). Qed.
Lemma lem8297634 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111703 : type560 A B P) (h1 : _111703 = (term257 A B P)) : (term238 A B D P Q p arg pat e) = (term291 A B D P Q _111703 p arg pat e).
Proof. exact (fun_ext (fun s : P -> A => @lem8297633 A B D P Q s p arg pat e _111703 h1)). Qed.
Lemma lem8297635 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8297636 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111703 : type560 A B P) (h1 : _111703 = (term257 A B P)) : (term240 A B D P Q p arg pat e) = (term292 A B D P Q _111703 p arg pat e).
Proof. exact (MK_COMB (@lem8297635 A P) (@lem8297634 A B D P Q p arg pat e _111703 h1)). Qed.
Lemma lem8297637 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111703 : type560 A B P) (h1 : _111703 = (term257 A B P)) : (term242 A B D P Q arg pat e) = (term293 A B D P Q _111703 arg pat e).
Proof. exact (fun_ext (fun p : type560 A B P => @lem8297636 A B D P Q p arg pat e _111703 h1)). Qed.
Lemma lem8297638 {A B P : Type'} : (@all ((A -> B) -> P -> Prop)) = (@all ((A -> B) -> P -> Prop)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> Prop))). Qed.
Lemma lem8297639 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111703 : type560 A B P) (h1 : _111703 = (term257 A B P)) : (term244 A B D P Q arg pat e) = (term294 A B D P Q _111703 arg pat e).
Proof. exact (MK_COMB (@lem8297638 A B P) (@lem8297637 A B D P Q arg pat e _111703 h1)). Qed.
Lemma lem8297640 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (_111703 : type560 A B P) (h1 : _111703 = (term257 A B P)) : (term246 A B D P Q pat e) = (term295 A B D P Q _111703 pat e).
Proof. exact (fun_ext (fun arg : type1475 A P Q => @lem8297639 A B D P Q arg pat e _111703 h1)). Qed.
Lemma lem8297641 {A P Q : Type'} : (@all (P -> Q -> A)) = (@all (P -> Q -> A)).
Proof. exact (eq_refl (@all (P -> Q -> A))). Qed.
Lemma lem8297642 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (_111703 : type560 A B P) (h1 : _111703 = (term257 A B P)) : (term248 A B D P Q pat e) = (term296 A B D P Q _111703 pat e).
Proof. exact (MK_COMB (@lem8297641 A P Q) (@lem8297640 A B D P Q pat e _111703 h1)). Qed.
Lemma lem8297643 {A B D P Q : Type'} (e : P -> D) (_111703 : type560 A B P) (h1 : _111703 = (term257 A B P)) : (term250 A B D P Q e) = (term297 A B D P Q _111703 e).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8297642 A B D P Q pat e _111703 h1)). Qed.
Lemma lem8297644 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8297645 {A B D P Q : Type'} (e : P -> D) (_111703 : type560 A B P) (h1 : _111703 = (term257 A B P)) : (term252 A B D P Q e) = (term298 A B D P Q _111703 e).
Proof. exact (MK_COMB (@lem8297644 D Q) (@lem8297643 A B D P Q e _111703 h1)). Qed.
Lemma lem8297646 {A B D P Q : Type'} (_111703 : type560 A B P) (h1 : _111703 = (term257 A B P)) : (term254 A B D P Q) = (term299 A B D P Q _111703).
Proof. exact (fun_ext (fun e : P -> D => @lem8297645 A B D P Q e _111703 h1)). Qed.
Lemma lem8297647 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8297648 {A B D P Q : Type'} (_111703 : type560 A B P) (h1 : _111703 = (term257 A B P)) : (term256 A B D P Q) = (term300 A B D P Q _111703).
Proof. exact (MK_COMB (@lem8297647 D P) (@lem8297646 A B D P Q _111703 h1)). Qed.
Lemma lem8297649 {A B D P Q : Type'} (_111703 : type560 A B P) : term301 A B D P Q _111703.
Proof. exact (fun h0 : _111703 = (term257 A B P) => @lem8297648 A B D P Q _111703 h0). Qed.
Lemma lem8297650 {A B D P Q : Type'} : term302 A B D P Q.
Proof. exact (fun _111703 : type560 A B P => @lem8297649 A B D P Q _111703). Qed.
Lemma lem8297652 {_3603 : Type'} (P : Prop) (c : _3603) (Q : _3603 -> Prop) : term303 _3603 P c Q.
Proof. exact (EQ_MP (@lem20230 _3603 P c Q) (@lem0)). Qed.
Lemma lem8297653 {A B P : Type'} (P' : Prop) (c : type560 A B P) (Q : type117 A B P) : term304 A B P P' c Q.
Proof. exact (@lem8297652 (type560 A B P) P' c Q). Qed.
Lemma lem8297654 {A B D P Q : Type'} : term305 A B D P Q.
Proof. exact (@lem8297653 A B P (term256 A B D P Q) (term257 A B P) (term306 A B D P Q)). Qed.
Lemma lem8297655 {A B D P Q : Type'} (_111703 : type560 A B P) : (term307 A B D P Q _111703) = (term300 A B D P Q _111703).
Proof. exact (eq_refl (term307 A B D P Q _111703)). Qed.
Lemma lem8297656 {A B D P Q : Type'} : (term308 A B D P Q) = (term308 A B D P Q).
Proof. exact (eq_refl (term308 A B D P Q)). Qed.
Lemma lem8297657 {A B D P Q : Type'} (_111703 : type560 A B P) : ((term256 A B D P Q) = (term307 A B D P Q _111703)) = ((term256 A B D P Q) = (term300 A B D P Q _111703)).
Proof. exact (MK_COMB (@lem8297656 A B D P Q) (@lem8297655 A B D P Q _111703)). Qed.
Lemma lem8297658 {A B P : Type'} (_111703 : type560 A B P) : (term309 A B P _111703) = (term309 A B P _111703).
Proof. exact (eq_refl (term309 A B P _111703)). Qed.
Lemma lem8297659 {A B D P Q : Type'} (_111703 : type560 A B P) : (term310 A B D P Q _111703) = (term301 A B D P Q _111703).
Proof. exact (MK_COMB (@lem8297658 A B P _111703) (@lem8297657 A B D P Q _111703)). Qed.
Lemma lem8297660 {A B D P Q : Type'} : (term311 A B D P Q) = (term312 A B D P Q).
Proof. exact (fun_ext (fun _111703 : type560 A B P => @lem8297659 A B D P Q _111703)). Qed.
Lemma lem8297661 {A B P : Type'} : (@all ((A -> B) -> P -> Prop)) = (@all ((A -> B) -> P -> Prop)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> Prop))). Qed.
Lemma lem8297662 {A B D P Q : Type'} : (term313 A B D P Q) = (term302 A B D P Q).
Proof. exact (MK_COMB (@lem8297661 A B P) (@lem8297660 A B D P Q)). Qed.
Lemma lem8297663 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8297664 {A B D P Q : Type'} : (term314 A B D P Q) = (term315 A B D P Q).
Proof. exact (MK_COMB (@lem8297663) (@lem8297662 A B D P Q)). Qed.
Lemma lem8297665 {A B D P Q : Type'} (_111703 : type560 A B P) : (term307 A B D P Q _111703) = (term300 A B D P Q _111703).
Proof. exact (eq_refl (term307 A B D P Q _111703)). Qed.
Lemma lem8297666 {A B P : Type'} (_111703 : type560 A B P) : (term309 A B P _111703) = (term309 A B P _111703).
Proof. exact (eq_refl (term309 A B P _111703)). Qed.
Lemma lem8297667 {A B D P Q : Type'} (_111703 : type560 A B P) : (term316 A B D P Q _111703) = (term317 A B D P Q _111703).
Proof. exact (MK_COMB (@lem8297666 A B P _111703) (@lem8297665 A B D P Q _111703)). Qed.
Lemma lem8297668 {A B D P Q : Type'} : (term318 A B D P Q) = (term319 A B D P Q).
Proof. exact (fun_ext (fun _111703 : type560 A B P => @lem8297667 A B D P Q _111703)). Qed.
Lemma lem8297669 {A B P : Type'} : (@all ((A -> B) -> P -> Prop)) = (@all ((A -> B) -> P -> Prop)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> Prop))). Qed.
Lemma lem8297670 {A B D P Q : Type'} : (term320 A B D P Q) = (term321 A B D P Q).
Proof. exact (MK_COMB (@lem8297669 A B P) (@lem8297668 A B D P Q)). Qed.
Lemma lem8297671 {A B D P Q : Type'} : (term308 A B D P Q) = (term308 A B D P Q).
Proof. exact (eq_refl (term308 A B D P Q)). Qed.
Lemma lem8297672 {A B D P Q : Type'} : ((term256 A B D P Q) = (term320 A B D P Q)) = ((term256 A B D P Q) = (term321 A B D P Q)).
Proof. exact (MK_COMB (@lem8297671 A B D P Q) (@lem8297670 A B D P Q)). Qed.
Lemma lem8297673 {A B D P Q : Type'} : (term305 A B D P Q) = (term322 A B D P Q).
Proof. exact (MK_COMB (@lem8297664 A B D P Q) (@lem8297672 A B D P Q)). Qed.
Lemma lem8297674 {A B D P Q : Type'} : term322 A B D P Q.
Proof. exact (EQ_MP (@lem8297673 A B D P Q) (@lem8297654 A B D P Q)). Qed.
Lemma lem8297675 {A B D P Q : Type'} : (term256 A B D P Q) = (term321 A B D P Q).
Proof. exact (@lem8297674 A B D P Q (@lem8297650 A B D P Q)). Qed.
Lemma lem8297677 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term323 _3571 _3575 t)) = (term324 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem8297678 {A B P : Type'} (s : type560 A B P) (t : type560 A B P) : (s = (term325 A B P t)) = (term326 A B P s t).
Proof. exact (@lem8297677 (P -> Prop) (A -> B) s t). Qed.
Lemma lem8297679 {A B P : Type'} (_111703 : type560 A B P) : (_111703 = (term327 A B P)) = (term328 A B P _111703).
Proof. exact (@lem8297678 A B P _111703 (term257 A B P)). Qed.
Lemma lem8297680 {A B P : Type'} (f : A -> B) : (term329 A B P f) = (term330 P).
Proof. exact (eq_refl (term329 A B P f)). Qed.
Lemma lem8297681 {A B P : Type'} : (term327 A B P) = (term257 A B P).
Proof. exact (fun_ext (fun f : A -> B => @lem8297680 A B P f)). Qed.
Lemma lem8297682 {A B P : Type'} (_111703 : type560 A B P) : (@eq ((A -> B) -> P -> Prop) _111703) = (@eq ((A -> B) -> P -> Prop) _111703).
Proof. exact (eq_refl (@eq ((A -> B) -> P -> Prop) _111703)). Qed.
Lemma lem8297683 {A B P : Type'} (_111703 : type560 A B P) : (_111703 = (term327 A B P)) = (_111703 = (term257 A B P)).
Proof. exact (MK_COMB (@lem8297682 A B P _111703) (@lem8297681 A B P)). Qed.
Lemma lem8297684 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8297685 {A B P : Type'} (_111703 : type560 A B P) : (term331 A B P _111703) = (term332 A B P _111703).
Proof. exact (MK_COMB (@lem8297684) (@lem8297683 A B P _111703)). Qed.
Lemma lem8297686 {A B P : Type'} (f : A -> B) : (term329 A B P f) = (term330 P).
Proof. exact (eq_refl (term329 A B P f)). Qed.
Lemma lem8297687 {A B P : Type'} (_111703 : type560 A B P) (f : A -> B) : (term333 A B P _111703 f) = (term333 A B P _111703 f).
Proof. exact (eq_refl (term333 A B P _111703 f)). Qed.
Lemma lem8297688 {A B P : Type'} (_111703 : type560 A B P) (f : A -> B) : ((_111703 f) = (term329 A B P f)) = ((_111703 f) = (term330 P)).
Proof. exact (MK_COMB (@lem8297687 A B P _111703 f) (@lem8297686 A B P f)). Qed.
Lemma lem8297689 {A B P : Type'} (_111703 : type560 A B P) : (term334 A B P _111703) = (term335 A B P _111703).
Proof. exact (fun_ext (fun f : A -> B => @lem8297688 A B P _111703 f)). Qed.
Lemma lem8297690 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8297691 {A B P : Type'} (_111703 : type560 A B P) : (term328 A B P _111703) = (term336 A B P _111703).
Proof. exact (MK_COMB (@lem8297690 A B) (@lem8297689 A B P _111703)). Qed.
Lemma lem8297692 {A B P : Type'} (_111703 : type560 A B P) : ((_111703 = (term327 A B P)) = (term328 A B P _111703)) = ((_111703 = (term257 A B P)) = (term336 A B P _111703)).
Proof. exact (MK_COMB (@lem8297685 A B P _111703) (@lem8297691 A B P _111703)). Qed.
Lemma lem8297693 {A B P : Type'} (_111703 : type560 A B P) : (_111703 = (term257 A B P)) = (term336 A B P _111703).
Proof. exact (EQ_MP (@lem8297692 A B P _111703) (@lem8297679 A B P _111703)). Qed.
Lemma lem8297694 {A B P : Type'} (_111703 : type560 A B P) (f : A -> B) : ((_111703 f) = (term330 P)) = ((_111703 f) = (term330 P)).
Proof. exact (eq_refl ((_111703 f) = (term330 P))). Qed.
Lemma lem8297695 {A B P : Type'} (_111703 : type560 A B P) : (term335 A B P _111703) = (term335 A B P _111703).
Proof. exact (fun_ext (fun f : A -> B => @lem8297694 A B P _111703 f)). Qed.
Lemma lem8297696 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8297697 {A B P : Type'} (_111703 : type560 A B P) : (term336 A B P _111703) = (term336 A B P _111703).
Proof. exact (MK_COMB (@lem8297696 A B) (@lem8297695 A B P _111703)). Qed.
Lemma lem8297698 {A B P : Type'} (_111703 : type560 A B P) : (_111703 = (term257 A B P)) = (term336 A B P _111703).
Proof. exact (TRANS (@lem8297693 A B P _111703) (@lem8297697 A B P _111703)). Qed.
Lemma lem8297699 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8297700 {A B P : Type'} (_111703 : type560 A B P) : (term309 A B P _111703) = (term337 A B P _111703).
Proof. exact (MK_COMB (@lem8297699) (@lem8297698 A B P _111703)). Qed.
Lemma lem8297701 {A B D P Q : Type'} (_111703 : type560 A B P) : (term300 A B D P Q _111703) = (term300 A B D P Q _111703).
Proof. exact (eq_refl (term300 A B D P Q _111703)). Qed.
Lemma lem8297702 {A B D P Q : Type'} (_111703 : type560 A B P) : (term317 A B D P Q _111703) = (term338 A B D P Q _111703).
Proof. exact (MK_COMB (@lem8297700 A B P _111703) (@lem8297701 A B D P Q _111703)). Qed.
Lemma lem8297703 {A B D P Q : Type'} : (term319 A B D P Q) = (term339 A B D P Q).
Proof. exact (fun_ext (fun _111703 : type560 A B P => @lem8297702 A B D P Q _111703)). Qed.
Lemma lem8297704 {A B P : Type'} : (@all ((A -> B) -> P -> Prop)) = (@all ((A -> B) -> P -> Prop)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> Prop))). Qed.
Lemma lem8297705 {A B D P Q : Type'} : (term321 A B D P Q) = (term340 A B D P Q).
Proof. exact (MK_COMB (@lem8297704 A B P) (@lem8297703 A B D P Q)). Qed.
Lemma lem8297706 {A B D P Q : Type'} : (term308 A B D P Q) = (term308 A B D P Q).
Proof. exact (eq_refl (term308 A B D P Q)). Qed.
Lemma lem8297707 {A B D P Q : Type'} : ((term256 A B D P Q) = (term321 A B D P Q)) = ((term256 A B D P Q) = (term340 A B D P Q)).
Proof. exact (MK_COMB (@lem8297706 A B D P Q) (@lem8297705 A B D P Q)). Qed.
Lemma lem8297708 {A B D P Q : Type'} : (term256 A B D P Q) = (term340 A B D P Q).
Proof. exact (EQ_MP (@lem8297707 A B D P Q) (@lem8297675 A B D P Q)). Qed.
Lemma lem8297709 {P : Type'} (_111704 : P -> Prop) (h1 : _111704 = (term330 P)) : _111704 = (term330 P).
Proof. exact (h1). Qed.
Lemma lem8297719 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (x : P) : ((pat t) = (e x)) = ((pat t) = (e x)).
Proof. exact (eq_refl ((pat t) = (e x))). Qed.
Lemma lem8297720 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term258 D P Q pat e x) = (term258 D P Q pat e x).
Proof. exact (fun_ext (fun t : Q => @lem8297719 D P Q pat t e x)). Qed.
Lemma lem8297721 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8297722 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term169 D P Q pat e x) = (term169 D P Q pat e x).
Proof. exact (MK_COMB (@lem8297721 Q) (@lem8297720 D P Q pat e x)). Qed.
Lemma lem8297745 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term259 A B D P Q pat e f arg x t v) = (term259 A B D P Q pat e f arg x t v).
Proof. exact (eq_refl (term259 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8297746 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term260 A B D P Q pat e f arg x v) = (term260 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun t : Q => @lem8297745 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8297747 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8297748 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term261 A B D P Q pat e f arg x v) = (term261 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8297747 Q) (@lem8297746 A B D P Q pat e f arg x v)). Qed.
Lemma lem8297749 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term103 A B D P Q pat e f arg x) = (term103 A B D P Q pat e f arg x).
Proof. exact (fun_ext (fun v : B => @lem8297748 A B D P Q pat e f arg x v)). Qed.
Lemma lem8297750 {B : Type'} : (@ex1 B) = (@ex1 B).
Proof. exact (eq_refl (@ex1 B)). Qed.
Lemma lem8297751 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term105 A B D P Q pat e f arg x) = (term105 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8297750 B) (@lem8297749 A B D P Q pat e f arg x)). Qed.
Lemma lem8297752 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8297753 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term262 A B D P Q pat e f arg x) = (term262 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8297752) (@lem8297751 A B D P Q pat e f arg x)). Qed.
Lemma lem8297754 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : ((term105 A B D P Q pat e f arg x) = (term169 D P Q pat e x)) = ((term105 A B D P Q pat e f arg x) = (term169 D P Q pat e x)).
Proof. exact (MK_COMB (@lem8297753 A B D P Q pat e f arg x) (@lem8297722 D P Q pat e x)). Qed.
Lemma lem8297761 {A B P : Type'} (p : type560 A B P) (f : A -> B) (x : P) : (term136 A B P p f x) = (term136 A B P p f x).
Proof. exact (eq_refl (term136 A B P p f x)). Qed.
Lemma lem8297762 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term168 A B D P Q p f arg pat e x) = (term168 A B D P Q p f arg pat e x).
Proof. exact (MK_COMB (@lem8297761 A B P p f x) (@lem8297754 A B D P Q f arg pat e x)). Qed.
Lemma lem8297763 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term263 A B D P Q p f arg pat e) = (term263 A B D P Q p f arg pat e).
Proof. exact (fun_ext (fun x : P => @lem8297762 A B D P Q p f arg pat e x)). Qed.
Lemma lem8297764 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8297765 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term166 A B D P Q p f arg pat e) = (term166 A B D P Q p f arg pat e).
Proof. exact (MK_COMB (@lem8297764 P) (@lem8297763 A B D P Q p f arg pat e)). Qed.
Lemma lem8297766 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term264 A B D P Q p arg pat e) = (term264 A B D P Q p arg pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8297765 A B D P Q p f arg pat e)). Qed.
Lemma lem8297767 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8297768 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term164 A B D P Q p arg pat e) = (term164 A B D P Q p arg pat e).
Proof. exact (MK_COMB (@lem8297767 A B) (@lem8297766 A B D P Q p arg pat e)). Qed.
Lemma lem8297779 {A B P : Type'} (lt2 : type1402 A) (_111703 : type560 A B P) (s : P -> A) (p : type560 A B P) : (term267 A B P lt2 _111703 s p) = (term267 A B P lt2 _111703 s p).
Proof. exact (eq_refl (term267 A B P lt2 _111703 s p)). Qed.
Lemma lem8297780 {A B D P Q : Type'} (lt2 : type1402 A) (_111703 : type560 A B P) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term268 A B D P Q lt2 _111703 s p arg pat e) = (term268 A B D P Q lt2 _111703 s p arg pat e).
Proof. exact (MK_COMB (@lem8297779 A B P lt2 _111703 s p) (@lem8297768 A B D P Q p arg pat e)). Qed.
Lemma lem8297799 {A P Q : Type'} (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term269 A P Q arg t lt2 y s a) = (term269 A P Q arg t lt2 y s a).
Proof. exact (eq_refl (term269 A P Q arg t lt2 y s a)). Qed.
Lemma lem8297800 {A P Q : Type'} (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term270 A P Q arg t lt2 s a) = (term270 A P Q arg t lt2 s a).
Proof. exact (fun_ext (fun y : A => @lem8297799 A P Q arg t lt2 y s a)). Qed.
Lemma lem8297801 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8297802 {A P Q : Type'} (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term271 A P Q arg t lt2 s a) = (term271 A P Q arg t lt2 s a).
Proof. exact (MK_COMB (@lem8297801 A) (@lem8297800 A P Q arg t lt2 s a)). Qed.
Lemma lem8297821 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term272 A B D P Q p f pat t e a) = (term272 A B D P Q p f pat t e a).
Proof. exact (eq_refl (term272 A B D P Q p f pat t e a)). Qed.
Lemma lem8297822 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term273 A B D P Q p f pat e arg t lt2 s a) = (term273 A B D P Q p f pat e arg t lt2 s a).
Proof. exact (MK_COMB (@lem8297821 A B D P Q p f pat t e a) (@lem8297802 A P Q arg t lt2 s a)). Qed.
Lemma lem8297823 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term274 A B D P Q p f pat e arg lt2 s a) = (term274 A B D P Q p f pat e arg lt2 s a).
Proof. exact (fun_ext (fun t : Q => @lem8297822 A B D P Q p f pat e arg t lt2 s a)). Qed.
Lemma lem8297824 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8297825 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term275 A B D P Q p f pat e arg lt2 s a) = (term275 A B D P Q p f pat e arg lt2 s a).
Proof. exact (MK_COMB (@lem8297824 Q) (@lem8297823 A B D P Q p f pat e arg lt2 s a)). Qed.
Lemma lem8297826 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term276 A B D P Q p f pat e arg lt2 s) = (term276 A B D P Q p f pat e arg lt2 s).
Proof. exact (fun_ext (fun a : P => @lem8297825 A B D P Q p f pat e arg lt2 s a)). Qed.
Lemma lem8297827 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8297828 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term277 A B D P Q p f pat e arg lt2 s) = (term277 A B D P Q p f pat e arg lt2 s).
Proof. exact (MK_COMB (@lem8297827 P) (@lem8297826 A B D P Q p f pat e arg lt2 s)). Qed.
Lemma lem8297829 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term278 A B D P Q p pat e arg lt2 s) = (term278 A B D P Q p pat e arg lt2 s).
Proof. exact (fun_ext (fun f : A -> B => @lem8297828 A B D P Q p f pat e arg lt2 s)). Qed.
Lemma lem8297830 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8297831 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term35 A B D P Q p pat e arg lt2 s) = (term35 A B D P Q p pat e arg lt2 s).
Proof. exact (MK_COMB (@lem8297830 A B) (@lem8297829 A B D P Q p pat e arg lt2 s)). Qed.
Lemma lem8297832 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8297833 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term228 A B D P Q p pat e arg lt2 s) = (term228 A B D P Q p pat e arg lt2 s).
Proof. exact (MK_COMB (@lem8297832) (@lem8297831 A B D P Q p pat e arg lt2 s)). Qed.
Lemma lem8297834 {A B D P Q : Type'} (lt2 : type1402 A) (_111703 : type560 A B P) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term279 A B D P Q lt2 _111703 s p arg pat e) = (term279 A B D P Q lt2 _111703 s p arg pat e).
Proof. exact (MK_COMB (@lem8297833 A B D P Q p pat e arg lt2 s) (@lem8297780 A B D P Q lt2 _111703 s p arg pat e)). Qed.
Lemma lem8297879 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) (u : Q) : (term280 A B D P Q p f pat e t arg a u) = (term280 A B D P Q p f pat e t arg a u).
Proof. exact (eq_refl (term280 A B D P Q p f pat e t arg a u)). Qed.
Lemma lem8297880 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) : (term281 A B D P Q p f pat e t arg a) = (term281 A B D P Q p f pat e t arg a).
Proof. exact (fun_ext (fun u : Q => @lem8297879 A B D P Q p f pat e t arg a u)). Qed.
Lemma lem8297881 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8297882 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) : (term282 A B D P Q p f pat e t arg a) = (term282 A B D P Q p f pat e t arg a).
Proof. exact (MK_COMB (@lem8297881 Q) (@lem8297880 A B D P Q p f pat e t arg a)). Qed.
Lemma lem8297883 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (a : P) : (term283 A B D P Q p f pat e arg a) = (term283 A B D P Q p f pat e arg a).
Proof. exact (fun_ext (fun t : Q => @lem8297882 A B D P Q p f pat e t arg a)). Qed.
Lemma lem8297884 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8297885 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (a : P) : (term284 A B D P Q p f pat e arg a) = (term284 A B D P Q p f pat e arg a).
Proof. exact (MK_COMB (@lem8297884 Q) (@lem8297883 A B D P Q p f pat e arg a)). Qed.
Lemma lem8297886 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term285 A B D P Q p f pat e arg) = (term285 A B D P Q p f pat e arg).
Proof. exact (fun_ext (fun a : P => @lem8297885 A B D P Q p f pat e arg a)). Qed.
Lemma lem8297887 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8297888 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term286 A B D P Q p f pat e arg) = (term286 A B D P Q p f pat e arg).
Proof. exact (MK_COMB (@lem8297887 P) (@lem8297886 A B D P Q p f pat e arg)). Qed.
Lemma lem8297889 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term287 A B D P Q p pat e arg) = (term287 A B D P Q p pat e arg).
Proof. exact (fun_ext (fun f : A -> B => @lem8297888 A B D P Q p f pat e arg)). Qed.
Lemma lem8297890 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8297891 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term36 A B D P Q p pat e arg) = (term36 A B D P Q p pat e arg).
Proof. exact (MK_COMB (@lem8297890 A B) (@lem8297889 A B D P Q p pat e arg)). Qed.
Lemma lem8297892 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8297893 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term231 A B D P Q p pat e arg) = (term231 A B D P Q p pat e arg).
Proof. exact (MK_COMB (@lem8297892) (@lem8297891 A B D P Q p pat e arg)). Qed.
Lemma lem8297894 {A B D P Q : Type'} (lt2 : type1402 A) (_111703 : type560 A B P) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term288 A B D P Q lt2 _111703 s p arg pat e) = (term288 A B D P Q lt2 _111703 s p arg pat e).
Proof. exact (MK_COMB (@lem8297893 A B D P Q p pat e arg) (@lem8297834 A B D P Q lt2 _111703 s p arg pat e)). Qed.
Lemma lem8297895 {A B D P Q : Type'} (_111703 : type560 A B P) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term289 A B D P Q _111703 s p arg pat e) = (term289 A B D P Q _111703 s p arg pat e).
Proof. exact (fun_ext (fun lt2 : type1402 A => @lem8297894 A B D P Q lt2 _111703 s p arg pat e)). Qed.
Lemma lem8297896 {A : Type'} : (@all (A -> A -> Prop)) = (@all (A -> A -> Prop)).
Proof. exact (eq_refl (@all (A -> A -> Prop))). Qed.
Lemma lem8297897 {A B D P Q : Type'} (_111703 : type560 A B P) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term290 A B D P Q _111703 s p arg pat e) = (term290 A B D P Q _111703 s p arg pat e).
Proof. exact (MK_COMB (@lem8297896 A) (@lem8297895 A B D P Q _111703 s p arg pat e)). Qed.
Lemma lem8297898 {A B D P Q : Type'} (_111703 : type560 A B P) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term291 A B D P Q _111703 p arg pat e) = (term291 A B D P Q _111703 p arg pat e).
Proof. exact (fun_ext (fun s : P -> A => @lem8297897 A B D P Q _111703 s p arg pat e)). Qed.
Lemma lem8297899 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8297900 {A B D P Q : Type'} (_111703 : type560 A B P) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term292 A B D P Q _111703 p arg pat e) = (term292 A B D P Q _111703 p arg pat e).
Proof. exact (MK_COMB (@lem8297899 A P) (@lem8297898 A B D P Q _111703 p arg pat e)). Qed.
Lemma lem8297901 {A B D P Q : Type'} (_111703 : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term293 A B D P Q _111703 arg pat e) = (term293 A B D P Q _111703 arg pat e).
Proof. exact (fun_ext (fun p : type560 A B P => @lem8297900 A B D P Q _111703 p arg pat e)). Qed.
Lemma lem8297902 {A B P : Type'} : (@all ((A -> B) -> P -> Prop)) = (@all ((A -> B) -> P -> Prop)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> Prop))). Qed.
Lemma lem8297903 {A B D P Q : Type'} (_111703 : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term294 A B D P Q _111703 arg pat e) = (term294 A B D P Q _111703 arg pat e).
Proof. exact (MK_COMB (@lem8297902 A B P) (@lem8297901 A B D P Q _111703 arg pat e)). Qed.
Lemma lem8297904 {A B D P Q : Type'} (_111703 : type560 A B P) (pat : Q -> D) (e : P -> D) : (term295 A B D P Q _111703 pat e) = (term295 A B D P Q _111703 pat e).
Proof. exact (fun_ext (fun arg : type1475 A P Q => @lem8297903 A B D P Q _111703 arg pat e)). Qed.
Lemma lem8297905 {A P Q : Type'} : (@all (P -> Q -> A)) = (@all (P -> Q -> A)).
Proof. exact (eq_refl (@all (P -> Q -> A))). Qed.
Lemma lem8297906 {A B D P Q : Type'} (_111703 : type560 A B P) (pat : Q -> D) (e : P -> D) : (term296 A B D P Q _111703 pat e) = (term296 A B D P Q _111703 pat e).
Proof. exact (MK_COMB (@lem8297905 A P Q) (@lem8297904 A B D P Q _111703 pat e)). Qed.
Lemma lem8297907 {A B D P Q : Type'} (_111703 : type560 A B P) (e : P -> D) : (term297 A B D P Q _111703 e) = (term297 A B D P Q _111703 e).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8297906 A B D P Q _111703 pat e)). Qed.
Lemma lem8297908 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8297909 {A B D P Q : Type'} (_111703 : type560 A B P) (e : P -> D) : (term298 A B D P Q _111703 e) = (term298 A B D P Q _111703 e).
Proof. exact (MK_COMB (@lem8297908 D Q) (@lem8297907 A B D P Q _111703 e)). Qed.
Lemma lem8297910 {A B D P Q : Type'} (_111703 : type560 A B P) : (term299 A B D P Q _111703) = (term299 A B D P Q _111703).
Proof. exact (fun_ext (fun e : P -> D => @lem8297909 A B D P Q _111703 e)). Qed.
Lemma lem8297911 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8297912 {A B D P Q : Type'} (_111703 : type560 A B P) : (term300 A B D P Q _111703) = (term300 A B D P Q _111703).
Proof. exact (MK_COMB (@lem8297911 D P) (@lem8297910 A B D P Q _111703)). Qed.
Lemma lem8297914 {P : Type'} (_111704 : P -> Prop) (h1 : _111704 = (term330 P)) : (term330 P) = _111704.
Proof. exact (SYM (@lem8297709 P _111704 h1)). Qed.
Lemma lem8297915 {P : Type'} (_111704 : P -> Prop) (h1 : _111704 = (term330 P)) : (term330 P) = _111704.
Proof. exact (@lem8297914 P _111704 h1). Qed.
Lemma lem8297920 {A B P : Type'} (_111703 : type560 A B P) (f : A -> B) : (term333 A B P _111703 f) = (term333 A B P _111703 f).
Proof. exact (eq_refl (term333 A B P _111703 f)). Qed.
Lemma lem8297921 {A B P : Type'} (_111703 : type560 A B P) (f : A -> B) (_111704 : P -> Prop) (h1 : _111704 = (term330 P)) : ((_111703 f) = (term330 P)) = ((_111703 f) = _111704).
Proof. exact (MK_COMB (@lem8297920 A B P _111703 f) (@lem8297915 P _111704 h1)). Qed.
Lemma lem8297922 {A B P : Type'} (_111703 : type560 A B P) (_111704 : P -> Prop) (h1 : _111704 = (term330 P)) : (term335 A B P _111703) = (term341 A B P _111703 _111704).
Proof. exact (fun_ext (fun f : A -> B => @lem8297921 A B P _111703 f _111704 h1)). Qed.
Lemma lem8297923 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8297924 {A B P : Type'} (_111703 : type560 A B P) (_111704 : P -> Prop) (h1 : _111704 = (term330 P)) : (term336 A B P _111703) = (term342 A B P _111703 _111704).
Proof. exact (MK_COMB (@lem8297923 A B) (@lem8297922 A B P _111703 _111704 h1)). Qed.
Lemma lem8297925 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8297926 {A B P : Type'} (_111703 : type560 A B P) (_111704 : P -> Prop) (h1 : _111704 = (term330 P)) : (term337 A B P _111703) = (term343 A B P _111703 _111704).
Proof. exact (MK_COMB (@lem8297925) (@lem8297924 A B P _111703 _111704 h1)). Qed.
Lemma lem8297927 {A B D P Q : Type'} (_111703 : type560 A B P) (_111704 : P -> Prop) (h1 : _111704 = (term330 P)) : (term338 A B D P Q _111703) = (term344 A B D P Q _111704 _111703).
Proof. exact (MK_COMB (@lem8297926 A B P _111703 _111704 h1) (@lem8297912 A B D P Q _111703)). Qed.
Lemma lem8297928 {A B D P Q : Type'} (_111704 : P -> Prop) (h1 : _111704 = (term330 P)) : (term339 A B D P Q) = (term345 A B D P Q _111704).
Proof. exact (fun_ext (fun _111703 : type560 A B P => @lem8297927 A B D P Q _111703 _111704 h1)). Qed.
Lemma lem8297929 {A B P : Type'} : (@all ((A -> B) -> P -> Prop)) = (@all ((A -> B) -> P -> Prop)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> Prop))). Qed.
Lemma lem8297930 {A B D P Q : Type'} (_111704 : P -> Prop) (h1 : _111704 = (term330 P)) : (term340 A B D P Q) = (term346 A B D P Q _111704).
Proof. exact (MK_COMB (@lem8297929 A B P) (@lem8297928 A B D P Q _111704 h1)). Qed.
Lemma lem8297931 {A B D P Q : Type'} (_111704 : P -> Prop) : term347 A B D P Q _111704.
Proof. exact (fun h0 : _111704 = (term330 P) => @lem8297930 A B D P Q _111704 h0). Qed.
Lemma lem8297932 {A B D P Q : Type'} : term348 A B D P Q.
Proof. exact (fun _111704 : P -> Prop => @lem8297931 A B D P Q _111704). Qed.
Lemma lem8297934 {_3603 : Type'} (P : Prop) (c : _3603) (Q : _3603 -> Prop) : term303 _3603 P c Q.
Proof. exact (EQ_MP (@lem20230 _3603 P c Q) (@lem0)). Qed.
Lemma lem8297935 {P : Type'} (P' : Prop) (c : P -> Prop) (Q : type686 P) : term349 P P' c Q.
Proof. exact (@lem8297934 (P -> Prop) P' c Q). Qed.
Lemma lem8297936 {A B D P Q : Type'} : term350 A B D P Q.
Proof. exact (@lem8297935 P (term340 A B D P Q) (term330 P) (term351 A B D P Q)). Qed.
Lemma lem8297937 {A B D P Q : Type'} (_111704 : P -> Prop) : (term352 A B D P Q _111704) = (term346 A B D P Q _111704).
Proof. exact (eq_refl (term352 A B D P Q _111704)). Qed.
Lemma lem8297938 {A B D P Q : Type'} : (term353 A B D P Q) = (term353 A B D P Q).
Proof. exact (eq_refl (term353 A B D P Q)). Qed.
Lemma lem8297939 {A B D P Q : Type'} (_111704 : P -> Prop) : ((term340 A B D P Q) = (term352 A B D P Q _111704)) = ((term340 A B D P Q) = (term346 A B D P Q _111704)).
Proof. exact (MK_COMB (@lem8297938 A B D P Q) (@lem8297937 A B D P Q _111704)). Qed.
Lemma lem8297940 {P : Type'} (_111704 : P -> Prop) : (term354 P _111704) = (term354 P _111704).
Proof. exact (eq_refl (term354 P _111704)). Qed.
Lemma lem8297941 {A B D P Q : Type'} (_111704 : P -> Prop) : (term355 A B D P Q _111704) = (term347 A B D P Q _111704).
Proof. exact (MK_COMB (@lem8297940 P _111704) (@lem8297939 A B D P Q _111704)). Qed.
Lemma lem8297942 {A B D P Q : Type'} : (term356 A B D P Q) = (term357 A B D P Q).
Proof. exact (fun_ext (fun _111704 : P -> Prop => @lem8297941 A B D P Q _111704)). Qed.
Lemma lem8297943 {P : Type'} : (@all (P -> Prop)) = (@all (P -> Prop)).
Proof. exact (eq_refl (@all (P -> Prop))). Qed.
Lemma lem8297944 {A B D P Q : Type'} : (term358 A B D P Q) = (term348 A B D P Q).
Proof. exact (MK_COMB (@lem8297943 P) (@lem8297942 A B D P Q)). Qed.
Lemma lem8297945 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8297946 {A B D P Q : Type'} : (term359 A B D P Q) = (term360 A B D P Q).
Proof. exact (MK_COMB (@lem8297945) (@lem8297944 A B D P Q)). Qed.
Lemma lem8297947 {A B D P Q : Type'} (_111704 : P -> Prop) : (term352 A B D P Q _111704) = (term346 A B D P Q _111704).
Proof. exact (eq_refl (term352 A B D P Q _111704)). Qed.
Lemma lem8297948 {P : Type'} (_111704 : P -> Prop) : (term354 P _111704) = (term354 P _111704).
Proof. exact (eq_refl (term354 P _111704)). Qed.
Lemma lem8297949 {A B D P Q : Type'} (_111704 : P -> Prop) : (term361 A B D P Q _111704) = (term362 A B D P Q _111704).
Proof. exact (MK_COMB (@lem8297948 P _111704) (@lem8297947 A B D P Q _111704)). Qed.
Lemma lem8297950 {A B D P Q : Type'} : (term363 A B D P Q) = (term364 A B D P Q).
Proof. exact (fun_ext (fun _111704 : P -> Prop => @lem8297949 A B D P Q _111704)). Qed.
Lemma lem8297951 {P : Type'} : (@all (P -> Prop)) = (@all (P -> Prop)).
Proof. exact (eq_refl (@all (P -> Prop))). Qed.
Lemma lem8297952 {A B D P Q : Type'} : (term365 A B D P Q) = (term366 A B D P Q).
Proof. exact (MK_COMB (@lem8297951 P) (@lem8297950 A B D P Q)). Qed.
Lemma lem8297953 {A B D P Q : Type'} : (term353 A B D P Q) = (term353 A B D P Q).
Proof. exact (eq_refl (term353 A B D P Q)). Qed.
Lemma lem8297954 {A B D P Q : Type'} : ((term340 A B D P Q) = (term365 A B D P Q)) = ((term340 A B D P Q) = (term366 A B D P Q)).
Proof. exact (MK_COMB (@lem8297953 A B D P Q) (@lem8297952 A B D P Q)). Qed.
Lemma lem8297955 {A B D P Q : Type'} : (term350 A B D P Q) = (term367 A B D P Q).
Proof. exact (MK_COMB (@lem8297946 A B D P Q) (@lem8297954 A B D P Q)). Qed.
Lemma lem8297956 {A B D P Q : Type'} : term367 A B D P Q.
Proof. exact (EQ_MP (@lem8297955 A B D P Q) (@lem8297936 A B D P Q)). Qed.
Lemma lem8297957 {A B D P Q : Type'} : (term340 A B D P Q) = (term366 A B D P Q).
Proof. exact (@lem8297956 A B D P Q (@lem8297932 A B D P Q)). Qed.
Lemma lem8297959 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term323 _3571 _3575 t)) = (term324 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem8297960 {P : Type'} (s : P -> Prop) (t : P -> Prop) : (s = (term368 P t)) = (term369 P s t).
Proof. exact (@lem8297959 Prop P s t). Qed.
Lemma lem8297961 {P : Type'} (_111704 : P -> Prop) : (_111704 = (term370 P)) = (term371 P _111704).
Proof. exact (@lem8297960 P _111704 (term330 P)). Qed.
Lemma lem8297962 {P : Type'} (a : P) : (term372 P a) = True.
Proof. exact (eq_refl (term372 P a)). Qed.
Lemma lem8297963 {P : Type'} : (term370 P) = (term330 P).
Proof. exact (fun_ext (fun a : P => @lem8297962 P a)). Qed.
Lemma lem8297964 {P : Type'} (_111704 : P -> Prop) : (@eq (P -> Prop) _111704) = (@eq (P -> Prop) _111704).
Proof. exact (eq_refl (@eq (P -> Prop) _111704)). Qed.
Lemma lem8297965 {P : Type'} (_111704 : P -> Prop) : (_111704 = (term370 P)) = (_111704 = (term330 P)).
Proof. exact (MK_COMB (@lem8297964 P _111704) (@lem8297963 P)). Qed.
Lemma lem8297966 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8297967 {P : Type'} (_111704 : P -> Prop) : (term373 P _111704) = (term374 P _111704).
Proof. exact (MK_COMB (@lem8297966) (@lem8297965 P _111704)). Qed.
Lemma lem8297968 {P : Type'} (a : P) : (term372 P a) = True.
Proof. exact (eq_refl (term372 P a)). Qed.
Lemma lem8297969 {P : Type'} (_111704 : P -> Prop) (a : P) : (term375 P _111704 a) = (term375 P _111704 a).
Proof. exact (eq_refl (term375 P _111704 a)). Qed.
Lemma lem8297970 {P : Type'} (_111704 : P -> Prop) (a : P) : ((_111704 a) = (term372 P a)) = ((_111704 a) = True).
Proof. exact (MK_COMB (@lem8297969 P _111704 a) (@lem8297968 P a)). Qed.
Lemma lem8297971 {P : Type'} (_111704 : P -> Prop) : (term376 P _111704) = (term377 P _111704).
Proof. exact (fun_ext (fun a : P => @lem8297970 P _111704 a)). Qed.
Lemma lem8297972 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8297973 {P : Type'} (_111704 : P -> Prop) : (term371 P _111704) = (term378 P _111704).
Proof. exact (MK_COMB (@lem8297972 P) (@lem8297971 P _111704)). Qed.
Lemma lem8297974 {P : Type'} (_111704 : P -> Prop) : ((_111704 = (term370 P)) = (term371 P _111704)) = ((_111704 = (term330 P)) = (term378 P _111704)).
Proof. exact (MK_COMB (@lem8297967 P _111704) (@lem8297973 P _111704)). Qed.
Lemma lem8297975 {P : Type'} (_111704 : P -> Prop) : (_111704 = (term330 P)) = (term378 P _111704).
Proof. exact (EQ_MP (@lem8297974 P _111704) (@lem8297961 P _111704)). Qed.
Lemma lem8297976 {P : Type'} (_111704 : P -> Prop) (a : P) : ((_111704 a) = True) = ((_111704 a) = True).
Proof. exact (eq_refl ((_111704 a) = True)). Qed.
Lemma lem8297977 {P : Type'} (_111704 : P -> Prop) : (term377 P _111704) = (term377 P _111704).
Proof. exact (fun_ext (fun a : P => @lem8297976 P _111704 a)). Qed.
Lemma lem8297978 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8297979 {P : Type'} (_111704 : P -> Prop) : (term378 P _111704) = (term378 P _111704).
Proof. exact (MK_COMB (@lem8297978 P) (@lem8297977 P _111704)). Qed.
Lemma lem8297980 {P : Type'} (_111704 : P -> Prop) : (_111704 = (term330 P)) = (term378 P _111704).
Proof. exact (TRANS (@lem8297975 P _111704) (@lem8297979 P _111704)). Qed.
Lemma lem8297981 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8297982 {P : Type'} (_111704 : P -> Prop) : (term354 P _111704) = (term379 P _111704).
Proof. exact (MK_COMB (@lem8297981) (@lem8297980 P _111704)). Qed.
Lemma lem8297983 {A B D P Q : Type'} (_111704 : P -> Prop) : (term346 A B D P Q _111704) = (term346 A B D P Q _111704).
Proof. exact (eq_refl (term346 A B D P Q _111704)). Qed.
Lemma lem8297984 {A B D P Q : Type'} (_111704 : P -> Prop) : (term362 A B D P Q _111704) = (term380 A B D P Q _111704).
Proof. exact (MK_COMB (@lem8297982 P _111704) (@lem8297983 A B D P Q _111704)). Qed.
Lemma lem8297985 {A B D P Q : Type'} : (term364 A B D P Q) = (term381 A B D P Q).
Proof. exact (fun_ext (fun _111704 : P -> Prop => @lem8297984 A B D P Q _111704)). Qed.
Lemma lem8297986 {P : Type'} : (@all (P -> Prop)) = (@all (P -> Prop)).
Proof. exact (eq_refl (@all (P -> Prop))). Qed.
Lemma lem8297987 {A B D P Q : Type'} : (term366 A B D P Q) = (term382 A B D P Q).
Proof. exact (MK_COMB (@lem8297986 P) (@lem8297985 A B D P Q)). Qed.
Lemma lem8297988 {A B D P Q : Type'} : (term353 A B D P Q) = (term353 A B D P Q).
Proof. exact (eq_refl (term353 A B D P Q)). Qed.
Lemma lem8297989 {A B D P Q : Type'} : ((term340 A B D P Q) = (term366 A B D P Q)) = ((term340 A B D P Q) = (term382 A B D P Q)).
Proof. exact (MK_COMB (@lem8297988 A B D P Q) (@lem8297987 A B D P Q)). Qed.
Lemma lem8297992 {A B D P Q : Type'} : (term340 A B D P Q) = (term382 A B D P Q).
Proof. exact (EQ_MP (@lem8297989 A B D P Q) (@lem8297957 A B D P Q)). Qed.
Lemma lem8297993 {A B D P Q : Type'} : (term256 A B D P Q) = (term382 A B D P Q).
Proof. exact (TRANS (@lem8297708 A B D P Q) (@lem8297992 A B D P Q)). Qed.
Lemma lem8297994 {A B D P Q : Type'} : (term255 A B D P Q) = (term382 A B D P Q).
Proof. exact (TRANS (@lem8297442 A B D P Q) (@lem8297993 A B D P Q)). Qed.
Lemma lem8297995 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (x : P) : ((pat t) = (e x)) = ((pat t) = (e x)).
Proof. exact (eq_refl ((pat t) = (e x))). Qed.
Lemma lem8297996 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term258 D P Q pat e x) = (term258 D P Q pat e x).
Proof. exact (fun_ext (fun t : Q => @lem8297995 D P Q pat t e x)). Qed.
Lemma lem8297997 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8297998 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term169 D P Q pat e x) = (term169 D P Q pat e x).
Proof. exact (MK_COMB (@lem8297997 Q) (@lem8297996 D P Q pat e x)). Qed.
Lemma lem8298003 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term259 A B D P Q pat e f arg x t v) = (term259 A B D P Q pat e f arg x t v).
Proof. exact (eq_refl (term259 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8298004 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term260 A B D P Q pat e f arg x v) = (term260 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun t : Q => @lem8298003 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8298005 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8298006 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term261 A B D P Q pat e f arg x v) = (term261 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8298005 Q) (@lem8298004 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298007 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term103 A B D P Q pat e f arg x) = (term103 A B D P Q pat e f arg x).
Proof. exact (fun_ext (fun v : B => @lem8298006 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298008 {B : Type'} : (@ex1 B) = (@ex1 B).
Proof. exact (eq_refl (@ex1 B)). Qed.
Lemma lem8298009 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term105 A B D P Q pat e f arg x) = (term105 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8298008 B) (@lem8298007 A B D P Q pat e f arg x)). Qed.
Lemma lem8298010 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8298011 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term262 A B D P Q pat e f arg x) = (term262 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8298010) (@lem8298009 A B D P Q pat e f arg x)). Qed.
Lemma lem8298012 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : ((term105 A B D P Q pat e f arg x) = (term169 D P Q pat e x)) = ((term105 A B D P Q pat e f arg x) = (term169 D P Q pat e x)).
Proof. exact (MK_COMB (@lem8298011 A B D P Q pat e f arg x) (@lem8297998 D P Q pat e x)). Qed.
Lemma lem8298015 {A B P : Type'} (p : type560 A B P) (f : A -> B) (x : P) : (term136 A B P p f x) = (term136 A B P p f x).
Proof. exact (eq_refl (term136 A B P p f x)). Qed.
Lemma lem8298016 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term168 A B D P Q p f arg pat e x) = (term168 A B D P Q p f arg pat e x).
Proof. exact (MK_COMB (@lem8298015 A B P p f x) (@lem8298012 A B D P Q f arg pat e x)). Qed.
Lemma lem8298017 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term263 A B D P Q p f arg pat e) = (term263 A B D P Q p f arg pat e).
Proof. exact (fun_ext (fun x : P => @lem8298016 A B D P Q p f arg pat e x)). Qed.
Lemma lem8298018 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8298019 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term166 A B D P Q p f arg pat e) = (term166 A B D P Q p f arg pat e).
Proof. exact (MK_COMB (@lem8298018 P) (@lem8298017 A B D P Q p f arg pat e)). Qed.
Lemma lem8298020 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term264 A B D P Q p arg pat e) = (term264 A B D P Q p arg pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8298019 A B D P Q p f arg pat e)). Qed.
Lemma lem8298021 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8298022 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term164 A B D P Q p arg pat e) = (term164 A B D P Q p arg pat e).
Proof. exact (MK_COMB (@lem8298021 A B) (@lem8298020 A B D P Q p arg pat e)). Qed.
Lemma lem8298025 {A B P : Type'} (lt2 : type1402 A) (_111703 : type560 A B P) (s : P -> A) (p : type560 A B P) : (term267 A B P lt2 _111703 s p) = (term267 A B P lt2 _111703 s p).
Proof. exact (eq_refl (term267 A B P lt2 _111703 s p)). Qed.
Lemma lem8298026 {A B D P Q : Type'} (lt2 : type1402 A) (_111703 : type560 A B P) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term268 A B D P Q lt2 _111703 s p arg pat e) = (term268 A B D P Q lt2 _111703 s p arg pat e).
Proof. exact (MK_COMB (@lem8298025 A B P lt2 _111703 s p) (@lem8298022 A B D P Q p arg pat e)). Qed.
Lemma lem8298031 {A P Q : Type'} (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term269 A P Q arg t lt2 y s a) = (term269 A P Q arg t lt2 y s a).
Proof. exact (eq_refl (term269 A P Q arg t lt2 y s a)). Qed.
Lemma lem8298032 {A P Q : Type'} (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term270 A P Q arg t lt2 s a) = (term270 A P Q arg t lt2 s a).
Proof. exact (fun_ext (fun y : A => @lem8298031 A P Q arg t lt2 y s a)). Qed.
Lemma lem8298033 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8298034 {A P Q : Type'} (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term271 A P Q arg t lt2 s a) = (term271 A P Q arg t lt2 s a).
Proof. exact (MK_COMB (@lem8298033 A) (@lem8298032 A P Q arg t lt2 s a)). Qed.
Lemma lem8298041 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term272 A B D P Q p f pat t e a) = (term272 A B D P Q p f pat t e a).
Proof. exact (eq_refl (term272 A B D P Q p f pat t e a)). Qed.
Lemma lem8298042 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term273 A B D P Q p f pat e arg t lt2 s a) = (term273 A B D P Q p f pat e arg t lt2 s a).
Proof. exact (MK_COMB (@lem8298041 A B D P Q p f pat t e a) (@lem8298034 A P Q arg t lt2 s a)). Qed.
Lemma lem8298043 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term274 A B D P Q p f pat e arg lt2 s a) = (term274 A B D P Q p f pat e arg lt2 s a).
Proof. exact (fun_ext (fun t : Q => @lem8298042 A B D P Q p f pat e arg t lt2 s a)). Qed.
Lemma lem8298044 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8298045 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term275 A B D P Q p f pat e arg lt2 s a) = (term275 A B D P Q p f pat e arg lt2 s a).
Proof. exact (MK_COMB (@lem8298044 Q) (@lem8298043 A B D P Q p f pat e arg lt2 s a)). Qed.
Lemma lem8298046 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term276 A B D P Q p f pat e arg lt2 s) = (term276 A B D P Q p f pat e arg lt2 s).
Proof. exact (fun_ext (fun a : P => @lem8298045 A B D P Q p f pat e arg lt2 s a)). Qed.
Lemma lem8298047 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8298048 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term277 A B D P Q p f pat e arg lt2 s) = (term277 A B D P Q p f pat e arg lt2 s).
Proof. exact (MK_COMB (@lem8298047 P) (@lem8298046 A B D P Q p f pat e arg lt2 s)). Qed.
Lemma lem8298049 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term278 A B D P Q p pat e arg lt2 s) = (term278 A B D P Q p pat e arg lt2 s).
Proof. exact (fun_ext (fun f : A -> B => @lem8298048 A B D P Q p f pat e arg lt2 s)). Qed.
Lemma lem8298050 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8298051 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term35 A B D P Q p pat e arg lt2 s) = (term35 A B D P Q p pat e arg lt2 s).
Proof. exact (MK_COMB (@lem8298050 A B) (@lem8298049 A B D P Q p pat e arg lt2 s)). Qed.
Lemma lem8298052 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8298053 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term228 A B D P Q p pat e arg lt2 s) = (term228 A B D P Q p pat e arg lt2 s).
Proof. exact (MK_COMB (@lem8298052) (@lem8298051 A B D P Q p pat e arg lt2 s)). Qed.
Lemma lem8298054 {A B D P Q : Type'} (lt2 : type1402 A) (_111703 : type560 A B P) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term279 A B D P Q lt2 _111703 s p arg pat e) = (term279 A B D P Q lt2 _111703 s p arg pat e).
Proof. exact (MK_COMB (@lem8298053 A B D P Q p pat e arg lt2 s) (@lem8298026 A B D P Q lt2 _111703 s p arg pat e)). Qed.
Lemma lem8298067 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) (u : Q) : (term280 A B D P Q p f pat e t arg a u) = (term280 A B D P Q p f pat e t arg a u).
Proof. exact (eq_refl (term280 A B D P Q p f pat e t arg a u)). Qed.
Lemma lem8298068 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) : (term281 A B D P Q p f pat e t arg a) = (term281 A B D P Q p f pat e t arg a).
Proof. exact (fun_ext (fun u : Q => @lem8298067 A B D P Q p f pat e t arg a u)). Qed.
Lemma lem8298069 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8298070 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) : (term282 A B D P Q p f pat e t arg a) = (term282 A B D P Q p f pat e t arg a).
Proof. exact (MK_COMB (@lem8298069 Q) (@lem8298068 A B D P Q p f pat e t arg a)). Qed.
Lemma lem8298071 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (a : P) : (term283 A B D P Q p f pat e arg a) = (term283 A B D P Q p f pat e arg a).
Proof. exact (fun_ext (fun t : Q => @lem8298070 A B D P Q p f pat e t arg a)). Qed.
Lemma lem8298072 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8298073 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (a : P) : (term284 A B D P Q p f pat e arg a) = (term284 A B D P Q p f pat e arg a).
Proof. exact (MK_COMB (@lem8298072 Q) (@lem8298071 A B D P Q p f pat e arg a)). Qed.
Lemma lem8298074 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term285 A B D P Q p f pat e arg) = (term285 A B D P Q p f pat e arg).
Proof. exact (fun_ext (fun a : P => @lem8298073 A B D P Q p f pat e arg a)). Qed.
Lemma lem8298075 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8298076 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term286 A B D P Q p f pat e arg) = (term286 A B D P Q p f pat e arg).
Proof. exact (MK_COMB (@lem8298075 P) (@lem8298074 A B D P Q p f pat e arg)). Qed.
Lemma lem8298077 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term287 A B D P Q p pat e arg) = (term287 A B D P Q p pat e arg).
Proof. exact (fun_ext (fun f : A -> B => @lem8298076 A B D P Q p f pat e arg)). Qed.
Lemma lem8298078 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8298079 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term36 A B D P Q p pat e arg) = (term36 A B D P Q p pat e arg).
Proof. exact (MK_COMB (@lem8298078 A B) (@lem8298077 A B D P Q p pat e arg)). Qed.
Lemma lem8298080 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8298081 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term231 A B D P Q p pat e arg) = (term231 A B D P Q p pat e arg).
Proof. exact (MK_COMB (@lem8298080) (@lem8298079 A B D P Q p pat e arg)). Qed.
Lemma lem8298082 {A B D P Q : Type'} (lt2 : type1402 A) (_111703 : type560 A B P) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term288 A B D P Q lt2 _111703 s p arg pat e) = (term288 A B D P Q lt2 _111703 s p arg pat e).
Proof. exact (MK_COMB (@lem8298081 A B D P Q p pat e arg) (@lem8298054 A B D P Q lt2 _111703 s p arg pat e)). Qed.
Lemma lem8298083 {A B D P Q : Type'} (_111703 : type560 A B P) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term289 A B D P Q _111703 s p arg pat e) = (term289 A B D P Q _111703 s p arg pat e).
Proof. exact (fun_ext (fun lt2 : type1402 A => @lem8298082 A B D P Q lt2 _111703 s p arg pat e)). Qed.
Lemma lem8298084 {A : Type'} : (@all (A -> A -> Prop)) = (@all (A -> A -> Prop)).
Proof. exact (eq_refl (@all (A -> A -> Prop))). Qed.
Lemma lem8298085 {A B D P Q : Type'} (_111703 : type560 A B P) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term290 A B D P Q _111703 s p arg pat e) = (term290 A B D P Q _111703 s p arg pat e).
Proof. exact (MK_COMB (@lem8298084 A) (@lem8298083 A B D P Q _111703 s p arg pat e)). Qed.
Lemma lem8298086 {A B D P Q : Type'} (_111703 : type560 A B P) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term291 A B D P Q _111703 p arg pat e) = (term291 A B D P Q _111703 p arg pat e).
Proof. exact (fun_ext (fun s : P -> A => @lem8298085 A B D P Q _111703 s p arg pat e)). Qed.
Lemma lem8298087 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8298088 {A B D P Q : Type'} (_111703 : type560 A B P) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term292 A B D P Q _111703 p arg pat e) = (term292 A B D P Q _111703 p arg pat e).
Proof. exact (MK_COMB (@lem8298087 A P) (@lem8298086 A B D P Q _111703 p arg pat e)). Qed.
Lemma lem8298089 {A B D P Q : Type'} (_111703 : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term293 A B D P Q _111703 arg pat e) = (term293 A B D P Q _111703 arg pat e).
Proof. exact (fun_ext (fun p : type560 A B P => @lem8298088 A B D P Q _111703 p arg pat e)). Qed.
Lemma lem8298090 {A B P : Type'} : (@all ((A -> B) -> P -> Prop)) = (@all ((A -> B) -> P -> Prop)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> Prop))). Qed.
Lemma lem8298091 {A B D P Q : Type'} (_111703 : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term294 A B D P Q _111703 arg pat e) = (term294 A B D P Q _111703 arg pat e).
Proof. exact (MK_COMB (@lem8298090 A B P) (@lem8298089 A B D P Q _111703 arg pat e)). Qed.
Lemma lem8298092 {A B D P Q : Type'} (_111703 : type560 A B P) (pat : Q -> D) (e : P -> D) : (term295 A B D P Q _111703 pat e) = (term295 A B D P Q _111703 pat e).
Proof. exact (fun_ext (fun arg : type1475 A P Q => @lem8298091 A B D P Q _111703 arg pat e)). Qed.
Lemma lem8298093 {A P Q : Type'} : (@all (P -> Q -> A)) = (@all (P -> Q -> A)).
Proof. exact (eq_refl (@all (P -> Q -> A))). Qed.
Lemma lem8298094 {A B D P Q : Type'} (_111703 : type560 A B P) (pat : Q -> D) (e : P -> D) : (term296 A B D P Q _111703 pat e) = (term296 A B D P Q _111703 pat e).
Proof. exact (MK_COMB (@lem8298093 A P Q) (@lem8298092 A B D P Q _111703 pat e)). Qed.
Lemma lem8298095 {A B D P Q : Type'} (_111703 : type560 A B P) (e : P -> D) : (term297 A B D P Q _111703 e) = (term297 A B D P Q _111703 e).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8298094 A B D P Q _111703 pat e)). Qed.
Lemma lem8298096 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8298097 {A B D P Q : Type'} (_111703 : type560 A B P) (e : P -> D) : (term298 A B D P Q _111703 e) = (term298 A B D P Q _111703 e).
Proof. exact (MK_COMB (@lem8298096 D Q) (@lem8298095 A B D P Q _111703 e)). Qed.
Lemma lem8298098 {A B D P Q : Type'} (_111703 : type560 A B P) : (term299 A B D P Q _111703) = (term299 A B D P Q _111703).
Proof. exact (fun_ext (fun e : P -> D => @lem8298097 A B D P Q _111703 e)). Qed.
Lemma lem8298099 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8298100 {A B D P Q : Type'} (_111703 : type560 A B P) : (term300 A B D P Q _111703) = (term300 A B D P Q _111703).
Proof. exact (MK_COMB (@lem8298099 D P) (@lem8298098 A B D P Q _111703)). Qed.
Lemma lem8298101 {A B P : Type'} (_111703 : type560 A B P) (f : A -> B) (_111704 : P -> Prop) : ((_111703 f) = _111704) = ((_111703 f) = _111704).
Proof. exact (eq_refl ((_111703 f) = _111704)). Qed.
Lemma lem8298102 {A B P : Type'} (_111703 : type560 A B P) (_111704 : P -> Prop) : (term341 A B P _111703 _111704) = (term341 A B P _111703 _111704).
Proof. exact (fun_ext (fun f : A -> B => @lem8298101 A B P _111703 f _111704)). Qed.
Lemma lem8298103 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8298104 {A B P : Type'} (_111703 : type560 A B P) (_111704 : P -> Prop) : (term342 A B P _111703 _111704) = (term342 A B P _111703 _111704).
Proof. exact (MK_COMB (@lem8298103 A B) (@lem8298102 A B P _111703 _111704)). Qed.
Lemma lem8298105 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8298106 {A B P : Type'} (_111703 : type560 A B P) (_111704 : P -> Prop) : (term343 A B P _111703 _111704) = (term343 A B P _111703 _111704).
Proof. exact (MK_COMB (@lem8298105) (@lem8298104 A B P _111703 _111704)). Qed.
Lemma lem8298107 {A B D P Q : Type'} (_111704 : P -> Prop) (_111703 : type560 A B P) : (term344 A B D P Q _111704 _111703) = (term344 A B D P Q _111704 _111703).
Proof. exact (MK_COMB (@lem8298106 A B P _111703 _111704) (@lem8298100 A B D P Q _111703)). Qed.
Lemma lem8298108 {A B D P Q : Type'} (_111704 : P -> Prop) : (term345 A B D P Q _111704) = (term345 A B D P Q _111704).
Proof. exact (fun_ext (fun _111703 : type560 A B P => @lem8298107 A B D P Q _111704 _111703)). Qed.
Lemma lem8298109 {A B P : Type'} : (@all ((A -> B) -> P -> Prop)) = (@all ((A -> B) -> P -> Prop)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> Prop))). Qed.
Lemma lem8298110 {A B D P Q : Type'} (_111704 : P -> Prop) : (term346 A B D P Q _111704) = (term346 A B D P Q _111704).
Proof. exact (MK_COMB (@lem8298109 A B P) (@lem8298108 A B D P Q _111704)). Qed.
Lemma lem8298115 {P : Type'} (_111704 : P -> Prop) (a : P) : ((_111704 a) = True) = ((_111704 a) = True).
Proof. exact (eq_refl ((_111704 a) = True)). Qed.
Lemma lem8298116 {P : Type'} (_111704 : P -> Prop) : (term377 P _111704) = (term377 P _111704).
Proof. exact (fun_ext (fun a : P => @lem8298115 P _111704 a)). Qed.
Lemma lem8298117 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8298118 {P : Type'} (_111704 : P -> Prop) : (term378 P _111704) = (term378 P _111704).
Proof. exact (MK_COMB (@lem8298117 P) (@lem8298116 P _111704)). Qed.
Lemma lem8298119 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8298120 {P : Type'} (_111704 : P -> Prop) : (term379 P _111704) = (term379 P _111704).
Proof. exact (MK_COMB (@lem8298119) (@lem8298118 P _111704)). Qed.
Lemma lem8298121 {A B D P Q : Type'} (_111704 : P -> Prop) : (term380 A B D P Q _111704) = (term380 A B D P Q _111704).
Proof. exact (MK_COMB (@lem8298120 P _111704) (@lem8298110 A B D P Q _111704)). Qed.
Lemma lem8298122 {A B D P Q : Type'} : (term381 A B D P Q) = (term381 A B D P Q).
Proof. exact (fun_ext (fun _111704 : P -> Prop => @lem8298121 A B D P Q _111704)). Qed.
Lemma lem8298123 {P : Type'} : (@all (P -> Prop)) = (@all (P -> Prop)).
Proof. exact (eq_refl (@all (P -> Prop))). Qed.
Lemma lem8298124 {A B D P Q : Type'} : (term382 A B D P Q) = (term382 A B D P Q).
Proof. exact (MK_COMB (@lem8298123 P) (@lem8298122 A B D P Q)). Qed.
Lemma lem8298125 {A B D P Q : Type'} : (term255 A B D P Q) = (term382 A B D P Q).
Proof. exact (TRANS (@lem8297994 A B D P Q) (@lem8298124 A B D P Q)). Qed.
Lemma lem8298141 (t : Prop) : (t = True) = t.
Proof. exact (proj1 (@lem21741 t)). Qed.
Lemma lem8298142 {P : Type'} (_111704 : P -> Prop) (a : P) : ((_111704 a) = True) = (_111704 a).
Proof. exact (@lem8298141 (_111704 a)). Qed.
Lemma lem8298143 {P : Type'} (_111704 : P -> Prop) : (term377 P _111704) = (term368 P _111704).
Proof. exact (fun_ext (fun a : P => @lem8298142 P _111704 a)). Qed.
Lemma lem8298144 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8298145 {P : Type'} (_111704 : P -> Prop) : (term378 P _111704) = (term383 P _111704).
Proof. exact (MK_COMB (@lem8298144 P) (@lem8298143 P _111704)). Qed.
Lemma lem8298152 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8298153 {P : Type'} (_111704 : P -> Prop) : (term379 P _111704) = (term384 P _111704).
Proof. exact (MK_COMB (@lem8298152) (@lem8298145 P _111704)). Qed.
Lemma lem8298298 {A B D P Q : Type'} (_111704 : P -> Prop) : (term346 A B D P Q _111704) = (term346 A B D P Q _111704).
Proof. exact (eq_refl (term346 A B D P Q _111704)). Qed.
Lemma lem8298299 {A B D P Q : Type'} (_111704 : P -> Prop) : (term380 A B D P Q _111704) = (term385 A B D P Q _111704).
Proof. exact (MK_COMB (@lem8298153 P _111704) (@lem8298298 A B D P Q _111704)). Qed.
Lemma lem8298302 {A B D P Q : Type'} : (term381 A B D P Q) = (term386 A B D P Q).
Proof. exact (fun_ext (fun _111704 : P -> Prop => @lem8298299 A B D P Q _111704)). Qed.
Lemma lem8298303 {P : Type'} : (@all (P -> Prop)) = (@all (P -> Prop)).
Proof. exact (eq_refl (@all (P -> Prop))). Qed.
Lemma lem8298304 {A B D P Q : Type'} : (term382 A B D P Q) = (term387 A B D P Q).
Proof. exact (MK_COMB (@lem8298303 P) (@lem8298302 A B D P Q)). Qed.
Lemma lem8298311 {A B D P Q : Type'} : (term255 A B D P Q) = (term387 A B D P Q).
Proof. exact (TRANS (@lem8298125 A B D P Q) (@lem8298304 A B D P Q)). Qed.
Lemma lem8298312 {A B D P Q : Type'} : (term387 A B D P Q) = (term255 A B D P Q).
Proof. exact (SYM (@lem8298311 A B D P Q)). Qed.
Lemma lem8298315 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term36 A B D P Q p pat e arg.
Proof. exact (h1). Qed.
Lemma lem8298320 (p : Prop) : p = (term216 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem8298321 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : ((term105 A B D P Q pat e f arg x) = (term169 D P Q pat e x)) = (term388 A B D P Q f arg pat e x).
Proof. exact (@lem8298320 ((term105 A B D P Q pat e f arg x) = (term169 D P Q pat e x))). Qed.
Lemma lem8298322 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term388 A B D P Q f arg pat e x) = ((term105 A B D P Q pat e f arg x) = (term169 D P Q pat e x)).
Proof. exact (SYM (@lem8298321 A B D P Q f arg pat e x)). Qed.
Lemma lem8298323 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) (h1 : term389 A B D P Q f arg pat e x) : term389 A B D P Q f arg pat e x.
Proof. exact (h1). Qed.
Lemma lem8298357 {D P Q : Type'} (t : Q) (pat : Q -> D) (u : Q) (e : P -> D) (a : P) : (term390 D P Q t pat u e a) = (term391 D P Q t pat u e a).
Proof. exact (@lem17045 ((pat t) = (e a)) ((pat u) = (e a))). Qed.
Lemma lem8298359 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term392 A B P p f a) = (term392 A B P p f a).
Proof. exact (eq_refl (term392 A B P p f a)). Qed.
Lemma lem8298360 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (pat : Q -> D) (u : Q) (e : P -> D) (a : P) : (term393 A B D P Q p f t pat u e a) = (term394 A B D P Q p f t pat u e a).
Proof. exact (MK_COMB (@lem8298359 A B P p f a) (@lem8298357 D P Q t pat u e a)). Qed.
Lemma lem8298361 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (pat : Q -> D) (u : Q) (e : P -> D) (a : P) : (term395 A B D P Q p f t pat u e a) = (term393 A B D P Q p f t pat u e a).
Proof. exact (@lem17045 (p f a) (term396 D P Q t pat u e a)). Qed.
Lemma lem8298362 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (pat : Q -> D) (u : Q) (e : P -> D) (a : P) : (term395 A B D P Q p f t pat u e a) = (term394 A B D P Q p f t pat u e a).
Proof. exact (TRANS (@lem8298361 A B D P Q p f t pat u e a) (@lem8298360 A B D P Q p f t pat u e a)). Qed.
Lemma lem8298363 {A P Q : Type'} (t : Q) (arg : type1475 A P Q) (a : P) (u : Q) : ((arg a t) = (arg a u)) = ((arg a t) = (arg a u)).
Proof. exact (eq_refl ((arg a t) = (arg a u))). Qed.
Lemma lem8298364 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8298365 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (pat : Q -> D) (u : Q) (e : P -> D) (a : P) : (term397 A B D P Q p f t pat u e a) = (term398 A B D P Q p f t pat u e a).
Proof. exact (MK_COMB (@lem8298364) (@lem8298362 A B D P Q p f t pat u e a)). Qed.
Lemma lem8298366 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) (u : Q) : (term399 A B D P Q p f pat e t arg a u) = (term400 A B D P Q p f pat e t arg a u).
Proof. exact (MK_COMB (@lem8298365 A B D P Q p f t pat u e a) (@lem8298363 A P Q t arg a u)). Qed.
Lemma lem8298367 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) (u : Q) : (term280 A B D P Q p f pat e t arg a u) = (term399 A B D P Q p f pat e t arg a u).
Proof. exact (@lem17265 (term401 A B D P Q p f t pat u e a) ((arg a t) = (arg a u))). Qed.
Lemma lem8298368 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) (u : Q) : (term280 A B D P Q p f pat e t arg a u) = (term400 A B D P Q p f pat e t arg a u).
Proof. exact (TRANS (@lem8298367 A B D P Q p f pat e t arg a u) (@lem8298366 A B D P Q p f pat e t arg a u)). Qed.
Lemma lem8298369 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) : (term281 A B D P Q p f pat e t arg a) = (term402 A B D P Q p f pat e t arg a).
Proof. exact (fun_ext (fun u : Q => @lem8298368 A B D P Q p f pat e t arg a u)). Qed.
Lemma lem8298370 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8298371 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) : (term282 A B D P Q p f pat e t arg a) = (term403 A B D P Q p f pat e t arg a).
Proof. exact (MK_COMB (@lem8298370 Q) (@lem8298369 A B D P Q p f pat e t arg a)). Qed.
Lemma lem8298372 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (a : P) : (term283 A B D P Q p f pat e arg a) = (term404 A B D P Q p f pat e arg a).
Proof. exact (fun_ext (fun t : Q => @lem8298371 A B D P Q p f pat e t arg a)). Qed.
Lemma lem8298373 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8298374 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (a : P) : (term284 A B D P Q p f pat e arg a) = (term405 A B D P Q p f pat e arg a).
Proof. exact (MK_COMB (@lem8298373 Q) (@lem8298372 A B D P Q p f pat e arg a)). Qed.
Lemma lem8298375 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term285 A B D P Q p f pat e arg) = (term406 A B D P Q p f pat e arg).
Proof. exact (fun_ext (fun a : P => @lem8298374 A B D P Q p f pat e arg a)). Qed.
Lemma lem8298376 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8298377 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term286 A B D P Q p f pat e arg) = (term407 A B D P Q p f pat e arg).
Proof. exact (MK_COMB (@lem8298376 P) (@lem8298375 A B D P Q p f pat e arg)). Qed.
Lemma lem8298378 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term287 A B D P Q p pat e arg) = (term408 A B D P Q p pat e arg).
Proof. exact (fun_ext (fun f : A -> B => @lem8298377 A B D P Q p f pat e arg)). Qed.
Lemma lem8298379 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8298444 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term36 A B D P Q p pat e arg) = (term409 A B D P Q p pat e arg).
Proof. exact (MK_COMB (@lem8298379 A B) (@lem8298378 A B D P Q p pat e arg)). Qed.
Lemma lem8298445 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term409 A B D P Q p pat e arg.
Proof. exact (EQ_MP (@lem8298444 A B D P Q p pat e arg) (@lem8298315 A B D P Q p pat e arg h1)). Qed.
Lemma lem8298597 {A B P : Type'} (p : type560 A B P) (f : A -> B) (x : P) (h1 : p f x) : p f x.
Proof. exact (h1). Qed.
Lemma lem8298606 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term410 A B D P Q pat e f arg x t v) = (term411 A B D P Q pat e f arg x t v).
Proof. exact (@lem17045 ((pat t) = (e x)) ((term67 A B P Q f arg x t) = v)). Qed.
Lemma lem8298609 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term259 A B D P Q pat e f arg x t v) = (term259 A B D P Q pat e f arg x t v).
Proof. exact (eq_refl (term259 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8298610 {Q : Type'} (P : Q -> Prop) : (term412 Q P) = (term413 Q P).
Proof. exact (@lem18394 Q P). Qed.
Lemma lem8298611 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term414 A B D P Q pat e f arg x v) = (term415 A B D P Q pat e f arg x v).
Proof. exact (@lem8298610 Q (term260 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298612 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term416 A B D P Q pat e f arg x v t) = (term259 A B D P Q pat e f arg x t v).
Proof. exact (eq_refl (term416 A B D P Q pat e f arg x v t)). Qed.
Lemma lem8298613 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8298614 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term417 A B D P Q pat e f arg x v t) = (term410 A B D P Q pat e f arg x t v).
Proof. exact (MK_COMB (@lem8298613) (@lem8298612 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8298615 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term417 A B D P Q pat e f arg x v t) = (term411 A B D P Q pat e f arg x t v).
Proof. exact (TRANS (@lem8298614 A B D P Q pat e f arg x t v) (@lem8298606 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8298616 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term418 A B D P Q pat e f arg x v) = (term419 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun t : Q => @lem8298615 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8298617 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8298618 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term415 A B D P Q pat e f arg x v) = (term420 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8298617 Q) (@lem8298616 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298619 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term414 A B D P Q pat e f arg x v) = (term420 A B D P Q pat e f arg x v).
Proof. exact (TRANS (@lem8298611 A B D P Q pat e f arg x v) (@lem8298618 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298620 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term260 A B D P Q pat e f arg x v) = (term260 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun t : Q => @lem8298609 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8298621 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8298622 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term261 A B D P Q pat e f arg x v) = (term261 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8298621 Q) (@lem8298620 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298623 {B : Type'} (v' : B) (v : B) : (term421 B v' v) = (term421 B v' v).
Proof. exact (eq_refl (term421 B v' v)). Qed.
Lemma lem8298624 {B : Type'} (v' : B) (v : B) : (v' = v) = (v' = v).
Proof. exact (eq_refl (v' = v)). Qed.
Lemma lem8298625 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term422 A B D P Q pat e f arg x v) = (term261 A B D P Q pat e f arg x v).
Proof. exact (eq_refl (term422 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298626 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) : (term422 A B D P Q pat e f arg x v') = (term261 A B D P Q pat e f arg x v').
Proof. exact (eq_refl (term422 A B D P Q pat e f arg x v')). Qed.
Lemma lem8298627 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) : (term261 A B D P Q pat e f arg x v') = (term261 A B D P Q pat e f arg x v').
Proof. exact (@lem8298622 A B D P Q pat e f arg x v'). Qed.
Lemma lem8298628 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) : (term414 A B D P Q pat e f arg x v') = (term420 A B D P Q pat e f arg x v').
Proof. exact (@lem8298619 A B D P Q pat e f arg x v'). Qed.
Lemma lem8298629 {B : Type'} (P : B -> Prop) : (@ex1 B P) = (term423 B P).
Proof. exact (@lem18897 B P). Qed.
Lemma lem8298630 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term105 A B D P Q pat e f arg x) = (term424 A B D P Q pat e f arg x).
Proof. exact (@lem8298629 B (term103 A B D P Q pat e f arg x)). Qed.
Lemma lem8298631 {B : Type'} (P : B -> Prop) : (term425 B P) = (term426 B P).
Proof. exact (@lem18393 B P). Qed.
Lemma lem8298632 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term427 A B D P Q pat e f arg x) = (term428 A B D P Q pat e f arg x).
Proof. exact (@lem8298631 B (term103 A B D P Q pat e f arg x)). Qed.
Lemma lem8298633 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8298634 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) : (term429 A B D P Q pat e f arg x v') = (term414 A B D P Q pat e f arg x v').
Proof. exact (MK_COMB (@lem8298633) (@lem8298626 A B D P Q pat e f arg x v')). Qed.
Lemma lem8298635 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) : (term429 A B D P Q pat e f arg x v') = (term420 A B D P Q pat e f arg x v').
Proof. exact (TRANS (@lem8298634 A B D P Q pat e f arg x v') (@lem8298628 A B D P Q pat e f arg x v')). Qed.
Lemma lem8298636 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8298637 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) : (term430 A B D P Q pat e f arg x v') = (term431 A B D P Q pat e f arg x v').
Proof. exact (MK_COMB (@lem8298636) (@lem8298635 A B D P Q pat e f arg x v')). Qed.
Lemma lem8298638 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term432 A B D P Q pat e f arg x v' v) = (term433 A B D P Q pat e f arg x v' v).
Proof. exact (MK_COMB (@lem8298637 A B D P Q pat e f arg x v') (@lem8298624 B v' v)). Qed.
Lemma lem8298639 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8298640 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term429 A B D P Q pat e f arg x v) = (term414 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8298639) (@lem8298625 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298641 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term429 A B D P Q pat e f arg x v) = (term420 A B D P Q pat e f arg x v).
Proof. exact (TRANS (@lem8298640 A B D P Q pat e f arg x v) (@lem8298619 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298642 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8298643 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term430 A B D P Q pat e f arg x v) = (term431 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8298642) (@lem8298641 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298644 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term434 A B D P Q pat e f arg x v' v) = (term435 A B D P Q pat e f arg x v' v).
Proof. exact (MK_COMB (@lem8298643 A B D P Q pat e f arg x v) (@lem8298638 A B D P Q pat e f arg x v' v)). Qed.
Lemma lem8298645 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term436 A B D P Q pat e f arg x v) = (term437 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun v' : B => @lem8298644 A B D P Q pat e f arg x v' v)). Qed.
Lemma lem8298646 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8298647 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term438 A B D P Q pat e f arg x v) = (term439 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8298646 B) (@lem8298645 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298648 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term440 A B D P Q pat e f arg x) = (term441 A B D P Q pat e f arg x).
Proof. exact (fun_ext (fun v : B => @lem8298647 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298649 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8298650 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term442 A B D P Q pat e f arg x) = (term443 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8298649 B) (@lem8298648 A B D P Q pat e f arg x)). Qed.
Lemma lem8298651 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term422 A B D P Q pat e f arg x v) = (term261 A B D P Q pat e f arg x v).
Proof. exact (TRANS (@lem8298625 A B D P Q pat e f arg x v) (@lem8298622 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298652 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term444 A B D P Q pat e f arg x) = (term103 A B D P Q pat e f arg x).
Proof. exact (fun_ext (fun v : B => @lem8298651 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298653 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8298654 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term445 A B D P Q pat e f arg x) = (term446 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8298653 B) (@lem8298652 A B D P Q pat e f arg x)). Qed.
Lemma lem8298655 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8298656 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term447 A B D P Q pat e f arg x) = (term448 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8298655) (@lem8298654 A B D P Q pat e f arg x)). Qed.
Lemma lem8298657 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term424 A B D P Q pat e f arg x) = (term449 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8298656 A B D P Q pat e f arg x) (@lem8298650 A B D P Q pat e f arg x)). Qed.
Lemma lem8298658 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) : (term422 A B D P Q pat e f arg x v') = (term261 A B D P Q pat e f arg x v').
Proof. exact (TRANS (@lem8298626 A B D P Q pat e f arg x v') (@lem8298627 A B D P Q pat e f arg x v')). Qed.
Lemma lem8298659 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8298660 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) : (term450 A B D P Q pat e f arg x v') = (term451 A B D P Q pat e f arg x v').
Proof. exact (MK_COMB (@lem8298659) (@lem8298658 A B D P Q pat e f arg x v')). Qed.
Lemma lem8298661 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term452 A B D P Q pat e f arg x v' v) = (term453 A B D P Q pat e f arg x v' v).
Proof. exact (MK_COMB (@lem8298660 A B D P Q pat e f arg x v') (@lem8298623 B v' v)). Qed.
Lemma lem8298662 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term422 A B D P Q pat e f arg x v) = (term261 A B D P Q pat e f arg x v).
Proof. exact (TRANS (@lem8298625 A B D P Q pat e f arg x v) (@lem8298622 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298663 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8298664 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term450 A B D P Q pat e f arg x v) = (term451 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8298663) (@lem8298662 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298665 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term454 A B D P Q pat e f arg x v' v) = (term455 A B D P Q pat e f arg x v' v).
Proof. exact (MK_COMB (@lem8298664 A B D P Q pat e f arg x v) (@lem8298661 A B D P Q pat e f arg x v' v)). Qed.
Lemma lem8298666 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term456 A B D P Q pat e f arg x v) = (term457 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun v' : B => @lem8298665 A B D P Q pat e f arg x v' v)). Qed.
Lemma lem8298667 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8298668 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term458 A B D P Q pat e f arg x v) = (term459 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8298667 B) (@lem8298666 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298669 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term460 A B D P Q pat e f arg x) = (term461 A B D P Q pat e f arg x).
Proof. exact (fun_ext (fun v : B => @lem8298668 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298670 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8298671 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term462 A B D P Q pat e f arg x) = (term463 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8298670 B) (@lem8298669 A B D P Q pat e f arg x)). Qed.
Lemma lem8298672 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8298673 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term429 A B D P Q pat e f arg x v) = (term414 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8298672) (@lem8298625 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298674 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term429 A B D P Q pat e f arg x v) = (term420 A B D P Q pat e f arg x v).
Proof. exact (TRANS (@lem8298673 A B D P Q pat e f arg x v) (@lem8298619 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298675 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term464 A B D P Q pat e f arg x) = (term465 A B D P Q pat e f arg x).
Proof. exact (fun_ext (fun v : B => @lem8298674 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298676 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8298677 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term466 A B D P Q pat e f arg x) = (term467 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8298676 B) (@lem8298675 A B D P Q pat e f arg x)). Qed.
Lemma lem8298678 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8298679 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term468 A B D P Q pat e f arg x) = (term469 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8298678) (@lem8298677 A B D P Q pat e f arg x)). Qed.
Lemma lem8298680 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term428 A B D P Q pat e f arg x) = (term470 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8298679 A B D P Q pat e f arg x) (@lem8298671 A B D P Q pat e f arg x)). Qed.
Lemma lem8298681 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term427 A B D P Q pat e f arg x) = (term470 A B D P Q pat e f arg x).
Proof. exact (TRANS (@lem8298632 A B D P Q pat e f arg x) (@lem8298680 A B D P Q pat e f arg x)). Qed.
Lemma lem8298682 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term105 A B D P Q pat e f arg x) = (term449 A B D P Q pat e f arg x).
Proof. exact (TRANS (@lem8298630 A B D P Q pat e f arg x) (@lem8298657 A B D P Q pat e f arg x)). Qed.
Lemma lem8298684 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (x : P) : ((pat t) = (e x)) = ((pat t) = (e x)).
Proof. exact (eq_refl ((pat t) = (e x))). Qed.
Lemma lem8298685 {Q : Type'} (P : Q -> Prop) : (term412 Q P) = (term413 Q P).
Proof. exact (@lem18394 Q P). Qed.
Lemma lem8298686 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term197 D P Q pat e x) = (term471 D P Q pat e x).
Proof. exact (@lem8298685 Q (term258 D P Q pat e x)). Qed.
Lemma lem8298687 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (x : P) : (term472 D P Q pat e x t) = ((pat t) = (e x)).
Proof. exact (eq_refl (term472 D P Q pat e x t)). Qed.
Lemma lem8298688 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8298690 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (x : P) : (term473 D P Q pat e x t) = (term474 D P Q pat t e x).
Proof. exact (MK_COMB (@lem8298688) (@lem8298687 D P Q pat t e x)). Qed.
Lemma lem8298691 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term475 D P Q pat e x) = (term476 D P Q pat e x).
Proof. exact (fun_ext (fun t : Q => @lem8298690 D P Q pat t e x)). Qed.
Lemma lem8298692 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8298693 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term471 D P Q pat e x) = (term477 D P Q pat e x).
Proof. exact (MK_COMB (@lem8298692 Q) (@lem8298691 D P Q pat e x)). Qed.
Lemma lem8298694 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term197 D P Q pat e x) = (term477 D P Q pat e x).
Proof. exact (TRANS (@lem8298686 D P Q pat e x) (@lem8298693 D P Q pat e x)). Qed.
Lemma lem8298695 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term258 D P Q pat e x) = (term258 D P Q pat e x).
Proof. exact (fun_ext (fun t : Q => @lem8298684 D P Q pat t e x)). Qed.
Lemma lem8298696 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8298697 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term169 D P Q pat e x) = (term169 D P Q pat e x).
Proof. exact (MK_COMB (@lem8298696 Q) (@lem8298695 D P Q pat e x)). Qed.
Lemma lem8298698 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8298699 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term478 A B D P Q pat e f arg x) = (term479 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8298698) (@lem8298681 A B D P Q pat e f arg x)). Qed.
Lemma lem8298700 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term480 A B D P Q f arg pat e x) = (term481 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8298699 A B D P Q pat e f arg x) (@lem8298697 D P Q pat e x)). Qed.
Lemma lem8298701 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8298702 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term482 A B D P Q pat e f arg x) = (term483 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8298701) (@lem8298682 A B D P Q pat e f arg x)). Qed.
Lemma lem8298703 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term484 A B D P Q f arg pat e x) = (term485 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8298702 A B D P Q pat e f arg x) (@lem8298694 D P Q pat e x)). Qed.
Lemma lem8298704 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8298705 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term486 A B D P Q f arg pat e x) = (term487 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8298704) (@lem8298703 A B D P Q f arg pat e x)). Qed.
Lemma lem8298706 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term488 A B D P Q f arg pat e x) = (term489 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8298705 A B D P Q f arg pat e x) (@lem8298700 A B D P Q f arg pat e x)). Qed.
Lemma lem8298707 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term389 A B D P Q f arg pat e x) = (term488 A B D P Q f arg pat e x).
Proof. exact (@lem17646 (term105 A B D P Q pat e f arg x) (term169 D P Q pat e x)). Qed.
Lemma lem8298708 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term389 A B D P Q f arg pat e x) = (term489 A B D P Q f arg pat e x).
Proof. exact (TRANS (@lem8298707 A B D P Q f arg pat e x) (@lem8298706 A B D P Q f arg pat e x)). Qed.
Lemma lem8298766 {A : Type'} (P : Prop) (Q : A -> Prop) : (term490 A P Q) = (term491 A P Q).
Proof. exact (EQ_MP (@lem18941 A P Q) (@lem18940 A P Q)). Qed.
Lemma lem8298767 {B : Type'} (P : Prop) (Q : B -> Prop) : (term490 B P Q) = (term491 B P Q).
Proof. exact (@lem8298766 B P Q). Qed.
Lemma lem8298768 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term492 A B D P Q pat e f arg x v) = (term493 A B D P Q pat e f arg x v).
Proof. exact (@lem8298767 B (term420 A B D P Q pat e f arg x v) (term494 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298769 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term495 A B D P Q pat e f arg x v v') = (term433 A B D P Q pat e f arg x v' v).
Proof. exact (eq_refl (term495 A B D P Q pat e f arg x v v')). Qed.
Lemma lem8298770 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term431 A B D P Q pat e f arg x v) = (term431 A B D P Q pat e f arg x v).
Proof. exact (eq_refl (term431 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298771 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term496 A B D P Q pat e f arg x v v') = (term435 A B D P Q pat e f arg x v' v).
Proof. exact (MK_COMB (@lem8298770 A B D P Q pat e f arg x v) (@lem8298769 A B D P Q pat e f arg x v' v)). Qed.
Lemma lem8298772 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term497 A B D P Q pat e f arg x v) = (term437 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun v' : B => @lem8298771 A B D P Q pat e f arg x v' v)). Qed.
Lemma lem8298773 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8298774 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term492 A B D P Q pat e f arg x v) = (term439 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8298773 B) (@lem8298772 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298775 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8298776 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term498 A B D P Q pat e f arg x v) = (term499 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8298775) (@lem8298774 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298777 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term495 A B D P Q pat e f arg x v v') = (term433 A B D P Q pat e f arg x v' v).
Proof. exact (eq_refl (term495 A B D P Q pat e f arg x v v')). Qed.
Lemma lem8298778 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term500 A B D P Q pat e f arg x v) = (term494 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun v' : B => @lem8298777 A B D P Q pat e f arg x v' v)). Qed.
Lemma lem8298779 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8298780 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term501 A B D P Q pat e f arg x v) = (term502 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8298779 B) (@lem8298778 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298781 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term431 A B D P Q pat e f arg x v) = (term431 A B D P Q pat e f arg x v).
Proof. exact (eq_refl (term431 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298782 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term493 A B D P Q pat e f arg x v) = (term503 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8298781 A B D P Q pat e f arg x v) (@lem8298780 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298783 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : ((term492 A B D P Q pat e f arg x v) = (term493 A B D P Q pat e f arg x v)) = ((term439 A B D P Q pat e f arg x v) = (term503 A B D P Q pat e f arg x v)).
Proof. exact (MK_COMB (@lem8298776 A B D P Q pat e f arg x v) (@lem8298782 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298784 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term439 A B D P Q pat e f arg x v) = (term503 A B D P Q pat e f arg x v).
Proof. exact (EQ_MP (@lem8298783 A B D P Q pat e f arg x v) (@lem8298768 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298929 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term441 A B D P Q pat e f arg x) = (term504 A B D P Q pat e f arg x).
Proof. exact (fun_ext (fun v : B => @lem8298784 A B D P Q pat e f arg x v)). Qed.
Lemma lem8298930 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8298931 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term443 A B D P Q pat e f arg x) = (term505 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8298930 B) (@lem8298929 A B D P Q pat e f arg x)). Qed.
Lemma lem8298980 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term448 A B D P Q pat e f arg x) = (term448 A B D P Q pat e f arg x).
Proof. exact (eq_refl (term448 A B D P Q pat e f arg x)). Qed.
Lemma lem8298981 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term449 A B D P Q pat e f arg x) = (term506 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8298980 A B D P Q pat e f arg x) (@lem8298931 A B D P Q pat e f arg x)). Qed.
Lemma lem8298982 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8298983 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term483 A B D P Q pat e f arg x) = (term507 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8298982) (@lem8298981 A B D P Q pat e f arg x)). Qed.
Lemma lem8298988 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term477 D P Q pat e x) = (term477 D P Q pat e x).
Proof. exact (eq_refl (term477 D P Q pat e x)). Qed.
Lemma lem8298989 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term485 A B D P Q f arg pat e x) = (term508 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8298983 A B D P Q pat e f arg x) (@lem8298988 D P Q pat e x)). Qed.
Lemma lem8298990 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8298991 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term487 A B D P Q f arg pat e x) = (term509 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8298990) (@lem8298989 A B D P Q f arg pat e x)). Qed.
Lemma lem8299049 {A : Type'} (P : Prop) (Q : A -> Prop) : (term510 A P Q) = (term511 A P Q).
Proof. exact (EQ_MP (@lem18959 A P Q) (@lem18958 A P Q)). Qed.
Lemma lem8299050 {B : Type'} (P : Prop) (Q : B -> Prop) : (term510 B P Q) = (term511 B P Q).
Proof. exact (@lem8299049 B P Q). Qed.
Lemma lem8299051 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term512 A B D P Q pat e f arg x v) = (term513 A B D P Q pat e f arg x v).
Proof. exact (@lem8299050 B (term261 A B D P Q pat e f arg x v) (term514 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299052 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term515 A B D P Q pat e f arg x v v') = (term453 A B D P Q pat e f arg x v' v).
Proof. exact (eq_refl (term515 A B D P Q pat e f arg x v v')). Qed.
Lemma lem8299053 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term451 A B D P Q pat e f arg x v) = (term451 A B D P Q pat e f arg x v).
Proof. exact (eq_refl (term451 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299054 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term516 A B D P Q pat e f arg x v v') = (term455 A B D P Q pat e f arg x v' v).
Proof. exact (MK_COMB (@lem8299053 A B D P Q pat e f arg x v) (@lem8299052 A B D P Q pat e f arg x v' v)). Qed.
Lemma lem8299055 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term517 A B D P Q pat e f arg x v) = (term457 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun v' : B => @lem8299054 A B D P Q pat e f arg x v' v)). Qed.
Lemma lem8299056 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299057 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term512 A B D P Q pat e f arg x v) = (term459 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299056 B) (@lem8299055 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299058 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8299059 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term518 A B D P Q pat e f arg x v) = (term519 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299058) (@lem8299057 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299060 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term515 A B D P Q pat e f arg x v v') = (term453 A B D P Q pat e f arg x v' v).
Proof. exact (eq_refl (term515 A B D P Q pat e f arg x v v')). Qed.
Lemma lem8299061 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term520 A B D P Q pat e f arg x v) = (term514 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun v' : B => @lem8299060 A B D P Q pat e f arg x v' v)). Qed.
Lemma lem8299062 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299063 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term521 A B D P Q pat e f arg x v) = (term522 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299062 B) (@lem8299061 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299064 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term451 A B D P Q pat e f arg x v) = (term451 A B D P Q pat e f arg x v).
Proof. exact (eq_refl (term451 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299065 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term513 A B D P Q pat e f arg x v) = (term523 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299064 A B D P Q pat e f arg x v) (@lem8299063 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299066 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : ((term512 A B D P Q pat e f arg x v) = (term513 A B D P Q pat e f arg x v)) = ((term459 A B D P Q pat e f arg x v) = (term523 A B D P Q pat e f arg x v)).
Proof. exact (MK_COMB (@lem8299059 A B D P Q pat e f arg x v) (@lem8299065 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299067 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term459 A B D P Q pat e f arg x v) = (term523 A B D P Q pat e f arg x v).
Proof. exact (EQ_MP (@lem8299066 A B D P Q pat e f arg x v) (@lem8299051 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299212 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term461 A B D P Q pat e f arg x) = (term524 A B D P Q pat e f arg x).
Proof. exact (fun_ext (fun v : B => @lem8299067 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299213 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299214 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term463 A B D P Q pat e f arg x) = (term525 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8299213 B) (@lem8299212 A B D P Q pat e f arg x)). Qed.
Lemma lem8299263 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term469 A B D P Q pat e f arg x) = (term469 A B D P Q pat e f arg x).
Proof. exact (eq_refl (term469 A B D P Q pat e f arg x)). Qed.
Lemma lem8299264 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term470 A B D P Q pat e f arg x) = (term526 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8299263 A B D P Q pat e f arg x) (@lem8299214 A B D P Q pat e f arg x)). Qed.
Lemma lem8299265 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8299266 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term479 A B D P Q pat e f arg x) = (term527 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8299265) (@lem8299264 A B D P Q pat e f arg x)). Qed.
Lemma lem8299271 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term169 D P Q pat e x) = (term169 D P Q pat e x).
Proof. exact (eq_refl (term169 D P Q pat e x)). Qed.
Lemma lem8299272 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term481 A B D P Q f arg pat e x) = (term528 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8299266 A B D P Q pat e f arg x) (@lem8299271 D P Q pat e x)). Qed.
Lemma lem8299273 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term489 A B D P Q f arg pat e x) = (term529 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8298991 A B D P Q f arg pat e x) (@lem8299272 A B D P Q f arg pat e x)). Qed.
Lemma lem8299275 {A : Type'} (P : A -> Prop) (Q : Prop) : (term530 A P Q) = (term531 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8299276 {B : Type'} (P : B -> Prop) (Q : Prop) : (term530 B P Q) = (term531 B P Q).
Proof. exact (@lem8299275 B P Q). Qed.
Lemma lem8299277 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term532 A B D P Q pat e f arg x) = (term533 A B D P Q pat e f arg x).
Proof. exact (@lem8299276 B (term103 A B D P Q pat e f arg x) (term505 A B D P Q pat e f arg x)). Qed.
Lemma lem8299278 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term422 A B D P Q pat e f arg x v) = (term261 A B D P Q pat e f arg x v).
Proof. exact (eq_refl (term422 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299279 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term444 A B D P Q pat e f arg x) = (term103 A B D P Q pat e f arg x).
Proof. exact (fun_ext (fun v : B => @lem8299278 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299280 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299281 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term445 A B D P Q pat e f arg x) = (term446 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8299280 B) (@lem8299279 A B D P Q pat e f arg x)). Qed.
Lemma lem8299282 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8299283 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term447 A B D P Q pat e f arg x) = (term448 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8299282) (@lem8299281 A B D P Q pat e f arg x)). Qed.
Lemma lem8299284 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term505 A B D P Q pat e f arg x) = (term505 A B D P Q pat e f arg x).
Proof. exact (eq_refl (term505 A B D P Q pat e f arg x)). Qed.
Lemma lem8299285 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term532 A B D P Q pat e f arg x) = (term506 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8299283 A B D P Q pat e f arg x) (@lem8299284 A B D P Q pat e f arg x)). Qed.
Lemma lem8299286 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8299287 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term534 A B D P Q pat e f arg x) = (term535 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8299286) (@lem8299285 A B D P Q pat e f arg x)). Qed.
Lemma lem8299288 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term422 A B D P Q pat e f arg x v) = (term261 A B D P Q pat e f arg x v).
Proof. exact (eq_refl (term422 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299289 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8299290 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term450 A B D P Q pat e f arg x v) = (term451 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299289) (@lem8299288 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299291 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term505 A B D P Q pat e f arg x) = (term505 A B D P Q pat e f arg x).
Proof. exact (eq_refl (term505 A B D P Q pat e f arg x)). Qed.
Lemma lem8299292 {A B D P Q : Type'} (v : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term536 A B D P Q v pat e f arg x) = (term537 A B D P Q v pat e f arg x).
Proof. exact (MK_COMB (@lem8299290 A B D P Q pat e f arg x v) (@lem8299291 A B D P Q pat e f arg x)). Qed.
Lemma lem8299293 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term538 A B D P Q pat e f arg x) = (term539 A B D P Q pat e f arg x).
Proof. exact (fun_ext (fun v : B => @lem8299292 A B D P Q v pat e f arg x)). Qed.
Lemma lem8299294 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299295 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term533 A B D P Q pat e f arg x) = (term540 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8299294 B) (@lem8299293 A B D P Q pat e f arg x)). Qed.
Lemma lem8299296 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : ((term532 A B D P Q pat e f arg x) = (term533 A B D P Q pat e f arg x)) = ((term506 A B D P Q pat e f arg x) = (term540 A B D P Q pat e f arg x)).
Proof. exact (MK_COMB (@lem8299287 A B D P Q pat e f arg x) (@lem8299295 A B D P Q pat e f arg x)). Qed.
Lemma lem8299297 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term506 A B D P Q pat e f arg x) = (term540 A B D P Q pat e f arg x).
Proof. exact (EQ_MP (@lem8299296 A B D P Q pat e f arg x) (@lem8299277 A B D P Q pat e f arg x)). Qed.
Lemma lem8299299 {A : Type'} (P : A -> Prop) (Q : Prop) : (term530 A P Q) = (term531 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8299300 {Q : Type'} (P : Q -> Prop) (Q' : Prop) : (term530 Q P Q') = (term531 Q P Q').
Proof. exact (@lem8299299 Q P Q'). Qed.
Lemma lem8299301 {A B D P Q : Type'} (v : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term541 A B D P Q v pat e f arg x) = (term542 A B D P Q v pat e f arg x).
Proof. exact (@lem8299300 Q (term260 A B D P Q pat e f arg x v) (term505 A B D P Q pat e f arg x)). Qed.
Lemma lem8299302 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term416 A B D P Q pat e f arg x v t) = (term259 A B D P Q pat e f arg x t v).
Proof. exact (eq_refl (term416 A B D P Q pat e f arg x v t)). Qed.
Lemma lem8299303 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term543 A B D P Q pat e f arg x v) = (term260 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun t : Q => @lem8299302 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8299304 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299305 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term544 A B D P Q pat e f arg x v) = (term261 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299304 Q) (@lem8299303 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299306 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8299307 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term545 A B D P Q pat e f arg x v) = (term451 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299306) (@lem8299305 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299308 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term505 A B D P Q pat e f arg x) = (term505 A B D P Q pat e f arg x).
Proof. exact (eq_refl (term505 A B D P Q pat e f arg x)). Qed.
Lemma lem8299309 {A B D P Q : Type'} (v : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term541 A B D P Q v pat e f arg x) = (term537 A B D P Q v pat e f arg x).
Proof. exact (MK_COMB (@lem8299307 A B D P Q pat e f arg x v) (@lem8299308 A B D P Q pat e f arg x)). Qed.
Lemma lem8299310 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8299311 {A B D P Q : Type'} (v : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term546 A B D P Q v pat e f arg x) = (term547 A B D P Q v pat e f arg x).
Proof. exact (MK_COMB (@lem8299310) (@lem8299309 A B D P Q v pat e f arg x)). Qed.
Lemma lem8299312 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term416 A B D P Q pat e f arg x v t) = (term259 A B D P Q pat e f arg x t v).
Proof. exact (eq_refl (term416 A B D P Q pat e f arg x v t)). Qed.
Lemma lem8299313 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8299314 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term548 A B D P Q pat e f arg x v t) = (term549 A B D P Q pat e f arg x t v).
Proof. exact (MK_COMB (@lem8299313) (@lem8299312 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8299315 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term505 A B D P Q pat e f arg x) = (term505 A B D P Q pat e f arg x).
Proof. exact (eq_refl (term505 A B D P Q pat e f arg x)). Qed.
Lemma lem8299316 {A B D P Q : Type'} (t : Q) (v : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term550 A B D P Q v t pat e f arg x) = (term551 A B D P Q t v pat e f arg x).
Proof. exact (MK_COMB (@lem8299314 A B D P Q pat e f arg x t v) (@lem8299315 A B D P Q pat e f arg x)). Qed.
Lemma lem8299317 {A B D P Q : Type'} (v : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term552 A B D P Q v pat e f arg x) = (term553 A B D P Q v pat e f arg x).
Proof. exact (fun_ext (fun t : Q => @lem8299316 A B D P Q t v pat e f arg x)). Qed.
Lemma lem8299318 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299319 {A B D P Q : Type'} (v : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term542 A B D P Q v pat e f arg x) = (term554 A B D P Q v pat e f arg x).
Proof. exact (MK_COMB (@lem8299318 Q) (@lem8299317 A B D P Q v pat e f arg x)). Qed.
Lemma lem8299320 {A B D P Q : Type'} (v : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : ((term541 A B D P Q v pat e f arg x) = (term542 A B D P Q v pat e f arg x)) = ((term537 A B D P Q v pat e f arg x) = (term554 A B D P Q v pat e f arg x)).
Proof. exact (MK_COMB (@lem8299311 A B D P Q v pat e f arg x) (@lem8299319 A B D P Q v pat e f arg x)). Qed.
Lemma lem8299321 {A B D P Q : Type'} (v : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term537 A B D P Q v pat e f arg x) = (term554 A B D P Q v pat e f arg x).
Proof. exact (EQ_MP (@lem8299320 A B D P Q v pat e f arg x) (@lem8299301 A B D P Q v pat e f arg x)). Qed.
Lemma lem8299322 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term539 A B D P Q pat e f arg x) = (term555 A B D P Q pat e f arg x).
Proof. exact (fun_ext (fun v : B => @lem8299321 A B D P Q v pat e f arg x)). Qed.
Lemma lem8299323 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299324 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term540 A B D P Q pat e f arg x) = (term556 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8299323 B) (@lem8299322 A B D P Q pat e f arg x)). Qed.
Lemma lem8299325 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term506 A B D P Q pat e f arg x) = (term556 A B D P Q pat e f arg x).
Proof. exact (TRANS (@lem8299297 A B D P Q pat e f arg x) (@lem8299324 A B D P Q pat e f arg x)). Qed.
Lemma lem8299326 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8299327 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term507 A B D P Q pat e f arg x) = (term557 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8299326) (@lem8299325 A B D P Q pat e f arg x)). Qed.
Lemma lem8299328 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term477 D P Q pat e x) = (term477 D P Q pat e x).
Proof. exact (eq_refl (term477 D P Q pat e x)). Qed.
Lemma lem8299329 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term508 A B D P Q f arg pat e x) = (term558 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8299327 A B D P Q pat e f arg x) (@lem8299328 D P Q pat e x)). Qed.
Lemma lem8299331 {A : Type'} (P : A -> Prop) (Q : Prop) : (term530 A P Q) = (term531 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8299332 {B : Type'} (P : B -> Prop) (Q : Prop) : (term530 B P Q) = (term531 B P Q).
Proof. exact (@lem8299331 B P Q). Qed.
Lemma lem8299333 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term559 A B D P Q f arg pat e x) = (term560 A B D P Q f arg pat e x).
Proof. exact (@lem8299332 B (term555 A B D P Q pat e f arg x) (term477 D P Q pat e x)). Qed.
Lemma lem8299334 {A B D P Q : Type'} (v : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term561 A B D P Q pat e f arg x v) = (term554 A B D P Q v pat e f arg x).
Proof. exact (eq_refl (term561 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299335 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term562 A B D P Q pat e f arg x) = (term555 A B D P Q pat e f arg x).
Proof. exact (fun_ext (fun v : B => @lem8299334 A B D P Q v pat e f arg x)). Qed.
Lemma lem8299336 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299337 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term563 A B D P Q pat e f arg x) = (term556 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8299336 B) (@lem8299335 A B D P Q pat e f arg x)). Qed.
Lemma lem8299338 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8299339 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term564 A B D P Q pat e f arg x) = (term557 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8299338) (@lem8299337 A B D P Q pat e f arg x)). Qed.
Lemma lem8299340 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term477 D P Q pat e x) = (term477 D P Q pat e x).
Proof. exact (eq_refl (term477 D P Q pat e x)). Qed.
Lemma lem8299341 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term559 A B D P Q f arg pat e x) = (term558 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8299339 A B D P Q pat e f arg x) (@lem8299340 D P Q pat e x)). Qed.
Lemma lem8299342 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8299343 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term565 A B D P Q f arg pat e x) = (term566 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8299342) (@lem8299341 A B D P Q f arg pat e x)). Qed.
Lemma lem8299344 {A B D P Q : Type'} (v : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term561 A B D P Q pat e f arg x v) = (term554 A B D P Q v pat e f arg x).
Proof. exact (eq_refl (term561 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299345 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8299346 {A B D P Q : Type'} (v : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term567 A B D P Q pat e f arg x v) = (term568 A B D P Q v pat e f arg x).
Proof. exact (MK_COMB (@lem8299345) (@lem8299344 A B D P Q v pat e f arg x)). Qed.
Lemma lem8299347 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term477 D P Q pat e x) = (term477 D P Q pat e x).
Proof. exact (eq_refl (term477 D P Q pat e x)). Qed.
Lemma lem8299348 {A B D P Q : Type'} (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term569 A B D P Q f arg v pat e x) = (term570 A B D P Q v f arg pat e x).
Proof. exact (MK_COMB (@lem8299346 A B D P Q v pat e f arg x) (@lem8299347 D P Q pat e x)). Qed.
Lemma lem8299349 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term571 A B D P Q f arg pat e x) = (term572 A B D P Q f arg pat e x).
Proof. exact (fun_ext (fun v : B => @lem8299348 A B D P Q v f arg pat e x)). Qed.
Lemma lem8299350 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299351 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term560 A B D P Q f arg pat e x) = (term573 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8299350 B) (@lem8299349 A B D P Q f arg pat e x)). Qed.
Lemma lem8299352 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : ((term559 A B D P Q f arg pat e x) = (term560 A B D P Q f arg pat e x)) = ((term558 A B D P Q f arg pat e x) = (term573 A B D P Q f arg pat e x)).
Proof. exact (MK_COMB (@lem8299343 A B D P Q f arg pat e x) (@lem8299351 A B D P Q f arg pat e x)). Qed.
Lemma lem8299353 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term558 A B D P Q f arg pat e x) = (term573 A B D P Q f arg pat e x).
Proof. exact (EQ_MP (@lem8299352 A B D P Q f arg pat e x) (@lem8299333 A B D P Q f arg pat e x)). Qed.
Lemma lem8299355 {A : Type'} (P : A -> Prop) (Q : Prop) : (term530 A P Q) = (term531 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8299356 {Q : Type'} (P : Q -> Prop) (Q' : Prop) : (term530 Q P Q') = (term531 Q P Q').
Proof. exact (@lem8299355 Q P Q'). Qed.
Lemma lem8299357 {A B D P Q : Type'} (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term574 A B D P Q v f arg pat e x) = (term575 A B D P Q v f arg pat e x).
Proof. exact (@lem8299356 Q (term553 A B D P Q v pat e f arg x) (term477 D P Q pat e x)). Qed.
Lemma lem8299358 {A B D P Q : Type'} (t : Q) (v : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term576 A B D P Q v pat e f arg x t) = (term551 A B D P Q t v pat e f arg x).
Proof. exact (eq_refl (term576 A B D P Q v pat e f arg x t)). Qed.
Lemma lem8299359 {A B D P Q : Type'} (v : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term577 A B D P Q v pat e f arg x) = (term553 A B D P Q v pat e f arg x).
Proof. exact (fun_ext (fun t : Q => @lem8299358 A B D P Q t v pat e f arg x)). Qed.
Lemma lem8299360 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299361 {A B D P Q : Type'} (v : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term578 A B D P Q v pat e f arg x) = (term554 A B D P Q v pat e f arg x).
Proof. exact (MK_COMB (@lem8299360 Q) (@lem8299359 A B D P Q v pat e f arg x)). Qed.
Lemma lem8299362 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8299363 {A B D P Q : Type'} (v : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term579 A B D P Q v pat e f arg x) = (term568 A B D P Q v pat e f arg x).
Proof. exact (MK_COMB (@lem8299362) (@lem8299361 A B D P Q v pat e f arg x)). Qed.
Lemma lem8299364 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term477 D P Q pat e x) = (term477 D P Q pat e x).
Proof. exact (eq_refl (term477 D P Q pat e x)). Qed.
Lemma lem8299365 {A B D P Q : Type'} (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term574 A B D P Q v f arg pat e x) = (term570 A B D P Q v f arg pat e x).
Proof. exact (MK_COMB (@lem8299363 A B D P Q v pat e f arg x) (@lem8299364 D P Q pat e x)). Qed.
Lemma lem8299366 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8299367 {A B D P Q : Type'} (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term580 A B D P Q v f arg pat e x) = (term581 A B D P Q v f arg pat e x).
Proof. exact (MK_COMB (@lem8299366) (@lem8299365 A B D P Q v f arg pat e x)). Qed.
Lemma lem8299368 {A B D P Q : Type'} (t : Q) (v : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term576 A B D P Q v pat e f arg x t) = (term551 A B D P Q t v pat e f arg x).
Proof. exact (eq_refl (term576 A B D P Q v pat e f arg x t)). Qed.
Lemma lem8299369 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8299370 {A B D P Q : Type'} (t : Q) (v : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term582 A B D P Q v pat e f arg x t) = (term583 A B D P Q t v pat e f arg x).
Proof. exact (MK_COMB (@lem8299369) (@lem8299368 A B D P Q t v pat e f arg x)). Qed.
Lemma lem8299371 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term477 D P Q pat e x) = (term477 D P Q pat e x).
Proof. exact (eq_refl (term477 D P Q pat e x)). Qed.
Lemma lem8299372 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term584 A B D P Q v f arg t pat e x) = (term585 A B D P Q t v f arg pat e x).
Proof. exact (MK_COMB (@lem8299370 A B D P Q t v pat e f arg x) (@lem8299371 D P Q pat e x)). Qed.
Lemma lem8299373 {A B D P Q : Type'} (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term586 A B D P Q v f arg pat e x) = (term587 A B D P Q v f arg pat e x).
Proof. exact (fun_ext (fun t : Q => @lem8299372 A B D P Q t v f arg pat e x)). Qed.
Lemma lem8299374 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299375 {A B D P Q : Type'} (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term575 A B D P Q v f arg pat e x) = (term588 A B D P Q v f arg pat e x).
Proof. exact (MK_COMB (@lem8299374 Q) (@lem8299373 A B D P Q v f arg pat e x)). Qed.
Lemma lem8299376 {A B D P Q : Type'} (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : ((term574 A B D P Q v f arg pat e x) = (term575 A B D P Q v f arg pat e x)) = ((term570 A B D P Q v f arg pat e x) = (term588 A B D P Q v f arg pat e x)).
Proof. exact (MK_COMB (@lem8299367 A B D P Q v f arg pat e x) (@lem8299375 A B D P Q v f arg pat e x)). Qed.
Lemma lem8299377 {A B D P Q : Type'} (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term570 A B D P Q v f arg pat e x) = (term588 A B D P Q v f arg pat e x).
Proof. exact (EQ_MP (@lem8299376 A B D P Q v f arg pat e x) (@lem8299357 A B D P Q v f arg pat e x)). Qed.
Lemma lem8299378 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term572 A B D P Q f arg pat e x) = (term589 A B D P Q f arg pat e x).
Proof. exact (fun_ext (fun v : B => @lem8299377 A B D P Q v f arg pat e x)). Qed.
Lemma lem8299379 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299380 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term573 A B D P Q f arg pat e x) = (term590 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8299379 B) (@lem8299378 A B D P Q f arg pat e x)). Qed.
Lemma lem8299381 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term558 A B D P Q f arg pat e x) = (term590 A B D P Q f arg pat e x).
Proof. exact (TRANS (@lem8299353 A B D P Q f arg pat e x) (@lem8299380 A B D P Q f arg pat e x)). Qed.
Lemma lem8299382 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term508 A B D P Q f arg pat e x) = (term590 A B D P Q f arg pat e x).
Proof. exact (TRANS (@lem8299329 A B D P Q f arg pat e x) (@lem8299381 A B D P Q f arg pat e x)). Qed.
Lemma lem8299383 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8299384 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term509 A B D P Q f arg pat e x) = (term591 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8299383) (@lem8299382 A B D P Q f arg pat e x)). Qed.
Lemma lem8299386 {A : Type'} (P : A -> Prop) (Q : Prop) : (term530 A P Q) = (term531 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8299387 {Q : Type'} (P : Q -> Prop) (Q' : Prop) : (term530 Q P Q') = (term531 Q P Q').
Proof. exact (@lem8299386 Q P Q'). Qed.
Lemma lem8299388 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term592 A B D P Q pat e f arg x v' v) = (term593 A B D P Q pat e f arg x v' v).
Proof. exact (@lem8299387 Q (term260 A B D P Q pat e f arg x v') (term421 B v' v)). Qed.
Lemma lem8299389 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v' : B) : (term416 A B D P Q pat e f arg x v' t) = (term259 A B D P Q pat e f arg x t v').
Proof. exact (eq_refl (term416 A B D P Q pat e f arg x v' t)). Qed.
Lemma lem8299390 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) : (term543 A B D P Q pat e f arg x v') = (term260 A B D P Q pat e f arg x v').
Proof. exact (fun_ext (fun t : Q => @lem8299389 A B D P Q pat e f arg x t v')). Qed.
Lemma lem8299391 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299392 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) : (term544 A B D P Q pat e f arg x v') = (term261 A B D P Q pat e f arg x v').
Proof. exact (MK_COMB (@lem8299391 Q) (@lem8299390 A B D P Q pat e f arg x v')). Qed.
Lemma lem8299393 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8299394 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) : (term545 A B D P Q pat e f arg x v') = (term451 A B D P Q pat e f arg x v').
Proof. exact (MK_COMB (@lem8299393) (@lem8299392 A B D P Q pat e f arg x v')). Qed.
Lemma lem8299395 {B : Type'} (v' : B) (v : B) : (term421 B v' v) = (term421 B v' v).
Proof. exact (eq_refl (term421 B v' v)). Qed.
Lemma lem8299396 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term592 A B D P Q pat e f arg x v' v) = (term453 A B D P Q pat e f arg x v' v).
Proof. exact (MK_COMB (@lem8299394 A B D P Q pat e f arg x v') (@lem8299395 B v' v)). Qed.
Lemma lem8299397 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8299398 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term594 A B D P Q pat e f arg x v' v) = (term595 A B D P Q pat e f arg x v' v).
Proof. exact (MK_COMB (@lem8299397) (@lem8299396 A B D P Q pat e f arg x v' v)). Qed.
Lemma lem8299399 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v' : B) : (term416 A B D P Q pat e f arg x v' t) = (term259 A B D P Q pat e f arg x t v').
Proof. exact (eq_refl (term416 A B D P Q pat e f arg x v' t)). Qed.
Lemma lem8299400 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8299401 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v' : B) : (term548 A B D P Q pat e f arg x v' t) = (term549 A B D P Q pat e f arg x t v').
Proof. exact (MK_COMB (@lem8299400) (@lem8299399 A B D P Q pat e f arg x t v')). Qed.
Lemma lem8299402 {B : Type'} (v' : B) (v : B) : (term421 B v' v) = (term421 B v' v).
Proof. exact (eq_refl (term421 B v' v)). Qed.
Lemma lem8299403 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v' : B) (v : B) : (term596 A B D P Q pat e f arg x t v' v) = (term597 A B D P Q pat e f arg x t v' v).
Proof. exact (MK_COMB (@lem8299401 A B D P Q pat e f arg x t v') (@lem8299402 B v' v)). Qed.
Lemma lem8299404 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term598 A B D P Q pat e f arg x v' v) = (term599 A B D P Q pat e f arg x v' v).
Proof. exact (fun_ext (fun t : Q => @lem8299403 A B D P Q pat e f arg x t v' v)). Qed.
Lemma lem8299405 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299406 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term593 A B D P Q pat e f arg x v' v) = (term600 A B D P Q pat e f arg x v' v).
Proof. exact (MK_COMB (@lem8299405 Q) (@lem8299404 A B D P Q pat e f arg x v' v)). Qed.
Lemma lem8299407 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : ((term592 A B D P Q pat e f arg x v' v) = (term593 A B D P Q pat e f arg x v' v)) = ((term453 A B D P Q pat e f arg x v' v) = (term600 A B D P Q pat e f arg x v' v)).
Proof. exact (MK_COMB (@lem8299398 A B D P Q pat e f arg x v' v) (@lem8299406 A B D P Q pat e f arg x v' v)). Qed.
Lemma lem8299408 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term453 A B D P Q pat e f arg x v' v) = (term600 A B D P Q pat e f arg x v' v).
Proof. exact (EQ_MP (@lem8299407 A B D P Q pat e f arg x v' v) (@lem8299388 A B D P Q pat e f arg x v' v)). Qed.
Lemma lem8299409 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term514 A B D P Q pat e f arg x v) = (term601 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun v' : B => @lem8299408 A B D P Q pat e f arg x v' v)). Qed.
Lemma lem8299410 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299411 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term522 A B D P Q pat e f arg x v) = (term602 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299410 B) (@lem8299409 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299412 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term451 A B D P Q pat e f arg x v) = (term451 A B D P Q pat e f arg x v).
Proof. exact (eq_refl (term451 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299413 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term523 A B D P Q pat e f arg x v) = (term603 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299412 A B D P Q pat e f arg x v) (@lem8299411 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299415 {A : Type'} (P : A -> Prop) (Q : Prop) : (term530 A P Q) = (term531 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8299416 {Q : Type'} (P : Q -> Prop) (Q' : Prop) : (term530 Q P Q') = (term531 Q P Q').
Proof. exact (@lem8299415 Q P Q'). Qed.
Lemma lem8299417 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term604 A B D P Q pat e f arg x v) = (term605 A B D P Q pat e f arg x v).
Proof. exact (@lem8299416 Q (term260 A B D P Q pat e f arg x v) (term602 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299418 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term416 A B D P Q pat e f arg x v t) = (term259 A B D P Q pat e f arg x t v).
Proof. exact (eq_refl (term416 A B D P Q pat e f arg x v t)). Qed.
Lemma lem8299419 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term543 A B D P Q pat e f arg x v) = (term260 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun t : Q => @lem8299418 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8299420 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299421 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term544 A B D P Q pat e f arg x v) = (term261 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299420 Q) (@lem8299419 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299422 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8299423 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term545 A B D P Q pat e f arg x v) = (term451 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299422) (@lem8299421 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299424 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term602 A B D P Q pat e f arg x v) = (term602 A B D P Q pat e f arg x v).
Proof. exact (eq_refl (term602 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299425 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term604 A B D P Q pat e f arg x v) = (term603 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299423 A B D P Q pat e f arg x v) (@lem8299424 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299426 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8299427 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term606 A B D P Q pat e f arg x v) = (term607 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299426) (@lem8299425 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299428 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term416 A B D P Q pat e f arg x v t) = (term259 A B D P Q pat e f arg x t v).
Proof. exact (eq_refl (term416 A B D P Q pat e f arg x v t)). Qed.
Lemma lem8299429 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8299430 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term548 A B D P Q pat e f arg x v t) = (term549 A B D P Q pat e f arg x t v).
Proof. exact (MK_COMB (@lem8299429) (@lem8299428 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8299431 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term602 A B D P Q pat e f arg x v) = (term602 A B D P Q pat e f arg x v).
Proof. exact (eq_refl (term602 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299432 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term608 A B D P Q t pat e f arg x v) = (term609 A B D P Q t pat e f arg x v).
Proof. exact (MK_COMB (@lem8299430 A B D P Q pat e f arg x t v) (@lem8299431 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299433 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term610 A B D P Q pat e f arg x v) = (term611 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun t : Q => @lem8299432 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299434 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299435 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term605 A B D P Q pat e f arg x v) = (term612 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299434 Q) (@lem8299433 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299436 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : ((term604 A B D P Q pat e f arg x v) = (term605 A B D P Q pat e f arg x v)) = ((term603 A B D P Q pat e f arg x v) = (term612 A B D P Q pat e f arg x v)).
Proof. exact (MK_COMB (@lem8299427 A B D P Q pat e f arg x v) (@lem8299435 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299437 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term603 A B D P Q pat e f arg x v) = (term612 A B D P Q pat e f arg x v).
Proof. exact (EQ_MP (@lem8299436 A B D P Q pat e f arg x v) (@lem8299417 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299439 {A : Type'} (P : Prop) (Q : A -> Prop) : (term511 A P Q) = (term510 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem8299440 {B : Type'} (P : Prop) (Q : B -> Prop) : (term511 B P Q) = (term510 B P Q).
Proof. exact (@lem8299439 B P Q). Qed.
Lemma lem8299441 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term613 A B D P Q t pat e f arg x v) = (term614 A B D P Q t pat e f arg x v).
Proof. exact (@lem8299440 B (term259 A B D P Q pat e f arg x t v) (term601 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299442 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term615 A B D P Q pat e f arg x v v') = (term600 A B D P Q pat e f arg x v' v).
Proof. exact (eq_refl (term615 A B D P Q pat e f arg x v v')). Qed.
Lemma lem8299443 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term616 A B D P Q pat e f arg x v) = (term601 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun v' : B => @lem8299442 A B D P Q pat e f arg x v' v)). Qed.
Lemma lem8299444 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299445 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term617 A B D P Q pat e f arg x v) = (term602 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299444 B) (@lem8299443 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299446 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term549 A B D P Q pat e f arg x t v) = (term549 A B D P Q pat e f arg x t v).
Proof. exact (eq_refl (term549 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8299447 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term613 A B D P Q t pat e f arg x v) = (term609 A B D P Q t pat e f arg x v).
Proof. exact (MK_COMB (@lem8299446 A B D P Q pat e f arg x t v) (@lem8299445 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299448 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8299449 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term618 A B D P Q t pat e f arg x v) = (term619 A B D P Q t pat e f arg x v).
Proof. exact (MK_COMB (@lem8299448) (@lem8299447 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299450 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term615 A B D P Q pat e f arg x v v') = (term600 A B D P Q pat e f arg x v' v).
Proof. exact (eq_refl (term615 A B D P Q pat e f arg x v v')). Qed.
Lemma lem8299451 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term549 A B D P Q pat e f arg x t v) = (term549 A B D P Q pat e f arg x t v).
Proof. exact (eq_refl (term549 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8299452 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term620 A B D P Q t pat e f arg x v v') = (term621 A B D P Q t pat e f arg x v' v).
Proof. exact (MK_COMB (@lem8299451 A B D P Q pat e f arg x t v) (@lem8299450 A B D P Q pat e f arg x v' v)). Qed.
Lemma lem8299453 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term622 A B D P Q t pat e f arg x v) = (term623 A B D P Q t pat e f arg x v).
Proof. exact (fun_ext (fun v' : B => @lem8299452 A B D P Q t pat e f arg x v' v)). Qed.
Lemma lem8299454 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299455 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term614 A B D P Q t pat e f arg x v) = (term624 A B D P Q t pat e f arg x v).
Proof. exact (MK_COMB (@lem8299454 B) (@lem8299453 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299456 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : ((term613 A B D P Q t pat e f arg x v) = (term614 A B D P Q t pat e f arg x v)) = ((term609 A B D P Q t pat e f arg x v) = (term624 A B D P Q t pat e f arg x v)).
Proof. exact (MK_COMB (@lem8299449 A B D P Q t pat e f arg x v) (@lem8299455 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299457 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term609 A B D P Q t pat e f arg x v) = (term624 A B D P Q t pat e f arg x v).
Proof. exact (EQ_MP (@lem8299456 A B D P Q t pat e f arg x v) (@lem8299441 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299459 {A : Type'} (P : Prop) (Q : A -> Prop) : (term511 A P Q) = (term510 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem8299460 {Q : Type'} (P : Prop) (Q' : Q -> Prop) : (term511 Q P Q') = (term510 Q P Q').
Proof. exact (@lem8299459 Q P Q'). Qed.
Lemma lem8299461 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term625 A B D P Q t pat e f arg x v' v) = (term626 A B D P Q t pat e f arg x v' v).
Proof. exact (@lem8299460 Q (term259 A B D P Q pat e f arg x t v) (term599 A B D P Q pat e f arg x v' v)). Qed.
Lemma lem8299462 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v' : B) (v : B) : (term627 A B D P Q pat e f arg x v' v t) = (term597 A B D P Q pat e f arg x t v' v).
Proof. exact (eq_refl (term627 A B D P Q pat e f arg x v' v t)). Qed.
Lemma lem8299463 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term628 A B D P Q pat e f arg x v' v) = (term599 A B D P Q pat e f arg x v' v).
Proof. exact (fun_ext (fun t : Q => @lem8299462 A B D P Q pat e f arg x t v' v)). Qed.
Lemma lem8299464 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299465 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term629 A B D P Q pat e f arg x v' v) = (term600 A B D P Q pat e f arg x v' v).
Proof. exact (MK_COMB (@lem8299464 Q) (@lem8299463 A B D P Q pat e f arg x v' v)). Qed.
Lemma lem8299466 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term549 A B D P Q pat e f arg x t v) = (term549 A B D P Q pat e f arg x t v).
Proof. exact (eq_refl (term549 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8299467 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term625 A B D P Q t pat e f arg x v' v) = (term621 A B D P Q t pat e f arg x v' v).
Proof. exact (MK_COMB (@lem8299466 A B D P Q pat e f arg x t v) (@lem8299465 A B D P Q pat e f arg x v' v)). Qed.
Lemma lem8299468 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8299469 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term630 A B D P Q t pat e f arg x v' v) = (term631 A B D P Q t pat e f arg x v' v).
Proof. exact (MK_COMB (@lem8299468) (@lem8299467 A B D P Q t pat e f arg x v' v)). Qed.
Lemma lem8299470 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) : (term627 A B D P Q pat e f arg x v' v t') = (term597 A B D P Q pat e f arg x t' v' v).
Proof. exact (eq_refl (term627 A B D P Q pat e f arg x v' v t')). Qed.
Lemma lem8299471 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term549 A B D P Q pat e f arg x t v) = (term549 A B D P Q pat e f arg x t v).
Proof. exact (eq_refl (term549 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8299472 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) : (term632 A B D P Q t pat e f arg x v' v t') = (term633 A B D P Q t pat e f arg x t' v' v).
Proof. exact (MK_COMB (@lem8299471 A B D P Q pat e f arg x t v) (@lem8299470 A B D P Q pat e f arg x t' v' v)). Qed.
Lemma lem8299473 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term634 A B D P Q t pat e f arg x v' v) = (term635 A B D P Q t pat e f arg x v' v).
Proof. exact (fun_ext (fun t' : Q => @lem8299472 A B D P Q t pat e f arg x t' v' v)). Qed.
Lemma lem8299474 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299475 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term626 A B D P Q t pat e f arg x v' v) = (term636 A B D P Q t pat e f arg x v' v).
Proof. exact (MK_COMB (@lem8299474 Q) (@lem8299473 A B D P Q t pat e f arg x v' v)). Qed.
Lemma lem8299476 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : ((term625 A B D P Q t pat e f arg x v' v) = (term626 A B D P Q t pat e f arg x v' v)) = ((term621 A B D P Q t pat e f arg x v' v) = (term636 A B D P Q t pat e f arg x v' v)).
Proof. exact (MK_COMB (@lem8299469 A B D P Q t pat e f arg x v' v) (@lem8299475 A B D P Q t pat e f arg x v' v)). Qed.
Lemma lem8299477 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term621 A B D P Q t pat e f arg x v' v) = (term636 A B D P Q t pat e f arg x v' v).
Proof. exact (EQ_MP (@lem8299476 A B D P Q t pat e f arg x v' v) (@lem8299461 A B D P Q t pat e f arg x v' v)). Qed.
Lemma lem8299478 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term623 A B D P Q t pat e f arg x v) = (term637 A B D P Q t pat e f arg x v).
Proof. exact (fun_ext (fun v' : B => @lem8299477 A B D P Q t pat e f arg x v' v)). Qed.
Lemma lem8299479 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299480 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term624 A B D P Q t pat e f arg x v) = (term638 A B D P Q t pat e f arg x v).
Proof. exact (MK_COMB (@lem8299479 B) (@lem8299478 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299481 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term609 A B D P Q t pat e f arg x v) = (term638 A B D P Q t pat e f arg x v).
Proof. exact (TRANS (@lem8299457 A B D P Q t pat e f arg x v) (@lem8299480 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299482 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term611 A B D P Q pat e f arg x v) = (term639 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun t : Q => @lem8299481 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299483 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299484 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term612 A B D P Q pat e f arg x v) = (term640 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299483 Q) (@lem8299482 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299485 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term603 A B D P Q pat e f arg x v) = (term640 A B D P Q pat e f arg x v).
Proof. exact (TRANS (@lem8299437 A B D P Q pat e f arg x v) (@lem8299484 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299486 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term523 A B D P Q pat e f arg x v) = (term640 A B D P Q pat e f arg x v).
Proof. exact (TRANS (@lem8299413 A B D P Q pat e f arg x v) (@lem8299485 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299487 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term524 A B D P Q pat e f arg x) = (term641 A B D P Q pat e f arg x).
Proof. exact (fun_ext (fun v : B => @lem8299486 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299488 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299489 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term525 A B D P Q pat e f arg x) = (term642 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8299488 B) (@lem8299487 A B D P Q pat e f arg x)). Qed.
Lemma lem8299490 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term469 A B D P Q pat e f arg x) = (term469 A B D P Q pat e f arg x).
Proof. exact (eq_refl (term469 A B D P Q pat e f arg x)). Qed.
Lemma lem8299491 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term526 A B D P Q pat e f arg x) = (term643 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8299490 A B D P Q pat e f arg x) (@lem8299489 A B D P Q pat e f arg x)). Qed.
Lemma lem8299493 {A : Type'} (P : Prop) (Q : A -> Prop) : (term644 A P Q) = (term645 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8299494 {B : Type'} (P : Prop) (Q : B -> Prop) : (term644 B P Q) = (term645 B P Q).
Proof. exact (@lem8299493 B P Q). Qed.
Lemma lem8299495 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term646 A B D P Q pat e f arg x) = (term647 A B D P Q pat e f arg x).
Proof. exact (@lem8299494 B (term467 A B D P Q pat e f arg x) (term641 A B D P Q pat e f arg x)). Qed.
Lemma lem8299496 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term648 A B D P Q pat e f arg x v) = (term640 A B D P Q pat e f arg x v).
Proof. exact (eq_refl (term648 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299497 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term649 A B D P Q pat e f arg x) = (term641 A B D P Q pat e f arg x).
Proof. exact (fun_ext (fun v : B => @lem8299496 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299498 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299499 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term650 A B D P Q pat e f arg x) = (term642 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8299498 B) (@lem8299497 A B D P Q pat e f arg x)). Qed.
Lemma lem8299500 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term469 A B D P Q pat e f arg x) = (term469 A B D P Q pat e f arg x).
Proof. exact (eq_refl (term469 A B D P Q pat e f arg x)). Qed.
Lemma lem8299501 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term646 A B D P Q pat e f arg x) = (term643 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8299500 A B D P Q pat e f arg x) (@lem8299499 A B D P Q pat e f arg x)). Qed.
Lemma lem8299502 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8299503 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term651 A B D P Q pat e f arg x) = (term652 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8299502) (@lem8299501 A B D P Q pat e f arg x)). Qed.
Lemma lem8299504 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term648 A B D P Q pat e f arg x v) = (term640 A B D P Q pat e f arg x v).
Proof. exact (eq_refl (term648 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299505 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term469 A B D P Q pat e f arg x) = (term469 A B D P Q pat e f arg x).
Proof. exact (eq_refl (term469 A B D P Q pat e f arg x)). Qed.
Lemma lem8299506 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term653 A B D P Q pat e f arg x v) = (term654 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299505 A B D P Q pat e f arg x) (@lem8299504 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299507 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term655 A B D P Q pat e f arg x) = (term656 A B D P Q pat e f arg x).
Proof. exact (fun_ext (fun v : B => @lem8299506 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299508 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299509 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term647 A B D P Q pat e f arg x) = (term657 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8299508 B) (@lem8299507 A B D P Q pat e f arg x)). Qed.
Lemma lem8299510 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : ((term646 A B D P Q pat e f arg x) = (term647 A B D P Q pat e f arg x)) = ((term643 A B D P Q pat e f arg x) = (term657 A B D P Q pat e f arg x)).
Proof. exact (MK_COMB (@lem8299503 A B D P Q pat e f arg x) (@lem8299509 A B D P Q pat e f arg x)). Qed.
Lemma lem8299511 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term643 A B D P Q pat e f arg x) = (term657 A B D P Q pat e f arg x).
Proof. exact (EQ_MP (@lem8299510 A B D P Q pat e f arg x) (@lem8299495 A B D P Q pat e f arg x)). Qed.
Lemma lem8299513 {A : Type'} (P : Prop) (Q : A -> Prop) : (term644 A P Q) = (term645 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8299514 {Q : Type'} (P : Prop) (Q' : Q -> Prop) : (term644 Q P Q') = (term645 Q P Q').
Proof. exact (@lem8299513 Q P Q'). Qed.
Lemma lem8299515 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term658 A B D P Q pat e f arg x v) = (term659 A B D P Q pat e f arg x v).
Proof. exact (@lem8299514 Q (term467 A B D P Q pat e f arg x) (term639 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299516 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term660 A B D P Q pat e f arg x v t) = (term638 A B D P Q t pat e f arg x v).
Proof. exact (eq_refl (term660 A B D P Q pat e f arg x v t)). Qed.
Lemma lem8299517 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term661 A B D P Q pat e f arg x v) = (term639 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun t : Q => @lem8299516 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299518 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299519 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term662 A B D P Q pat e f arg x v) = (term640 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299518 Q) (@lem8299517 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299520 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term469 A B D P Q pat e f arg x) = (term469 A B D P Q pat e f arg x).
Proof. exact (eq_refl (term469 A B D P Q pat e f arg x)). Qed.
Lemma lem8299521 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term658 A B D P Q pat e f arg x v) = (term654 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299520 A B D P Q pat e f arg x) (@lem8299519 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299522 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8299523 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term663 A B D P Q pat e f arg x v) = (term664 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299522) (@lem8299521 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299524 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term660 A B D P Q pat e f arg x v t) = (term638 A B D P Q t pat e f arg x v).
Proof. exact (eq_refl (term660 A B D P Q pat e f arg x v t)). Qed.
Lemma lem8299525 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term469 A B D P Q pat e f arg x) = (term469 A B D P Q pat e f arg x).
Proof. exact (eq_refl (term469 A B D P Q pat e f arg x)). Qed.
Lemma lem8299526 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term665 A B D P Q pat e f arg x v t) = (term666 A B D P Q t pat e f arg x v).
Proof. exact (MK_COMB (@lem8299525 A B D P Q pat e f arg x) (@lem8299524 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299527 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term667 A B D P Q pat e f arg x v) = (term668 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun t : Q => @lem8299526 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299528 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299529 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term659 A B D P Q pat e f arg x v) = (term669 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299528 Q) (@lem8299527 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299530 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : ((term658 A B D P Q pat e f arg x v) = (term659 A B D P Q pat e f arg x v)) = ((term654 A B D P Q pat e f arg x v) = (term669 A B D P Q pat e f arg x v)).
Proof. exact (MK_COMB (@lem8299523 A B D P Q pat e f arg x v) (@lem8299529 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299531 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term654 A B D P Q pat e f arg x v) = (term669 A B D P Q pat e f arg x v).
Proof. exact (EQ_MP (@lem8299530 A B D P Q pat e f arg x v) (@lem8299515 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299533 {A : Type'} (P : Prop) (Q : A -> Prop) : (term644 A P Q) = (term645 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8299534 {B : Type'} (P : Prop) (Q : B -> Prop) : (term644 B P Q) = (term645 B P Q).
Proof. exact (@lem8299533 B P Q). Qed.
Lemma lem8299535 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term670 A B D P Q t pat e f arg x v) = (term671 A B D P Q t pat e f arg x v).
Proof. exact (@lem8299534 B (term467 A B D P Q pat e f arg x) (term637 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299536 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term672 A B D P Q t pat e f arg x v v') = (term636 A B D P Q t pat e f arg x v' v).
Proof. exact (eq_refl (term672 A B D P Q t pat e f arg x v v')). Qed.
Lemma lem8299537 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term673 A B D P Q t pat e f arg x v) = (term637 A B D P Q t pat e f arg x v).
Proof. exact (fun_ext (fun v' : B => @lem8299536 A B D P Q t pat e f arg x v' v)). Qed.
Lemma lem8299538 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299539 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term674 A B D P Q t pat e f arg x v) = (term638 A B D P Q t pat e f arg x v).
Proof. exact (MK_COMB (@lem8299538 B) (@lem8299537 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299540 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term469 A B D P Q pat e f arg x) = (term469 A B D P Q pat e f arg x).
Proof. exact (eq_refl (term469 A B D P Q pat e f arg x)). Qed.
Lemma lem8299541 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term670 A B D P Q t pat e f arg x v) = (term666 A B D P Q t pat e f arg x v).
Proof. exact (MK_COMB (@lem8299540 A B D P Q pat e f arg x) (@lem8299539 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299542 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8299543 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term675 A B D P Q t pat e f arg x v) = (term676 A B D P Q t pat e f arg x v).
Proof. exact (MK_COMB (@lem8299542) (@lem8299541 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299544 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term672 A B D P Q t pat e f arg x v v') = (term636 A B D P Q t pat e f arg x v' v).
Proof. exact (eq_refl (term672 A B D P Q t pat e f arg x v v')). Qed.
Lemma lem8299545 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term469 A B D P Q pat e f arg x) = (term469 A B D P Q pat e f arg x).
Proof. exact (eq_refl (term469 A B D P Q pat e f arg x)). Qed.
Lemma lem8299546 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term677 A B D P Q t pat e f arg x v v') = (term678 A B D P Q t pat e f arg x v' v).
Proof. exact (MK_COMB (@lem8299545 A B D P Q pat e f arg x) (@lem8299544 A B D P Q t pat e f arg x v' v)). Qed.
Lemma lem8299547 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term679 A B D P Q t pat e f arg x v) = (term680 A B D P Q t pat e f arg x v).
Proof. exact (fun_ext (fun v' : B => @lem8299546 A B D P Q t pat e f arg x v' v)). Qed.
Lemma lem8299548 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299549 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term671 A B D P Q t pat e f arg x v) = (term681 A B D P Q t pat e f arg x v).
Proof. exact (MK_COMB (@lem8299548 B) (@lem8299547 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299550 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : ((term670 A B D P Q t pat e f arg x v) = (term671 A B D P Q t pat e f arg x v)) = ((term666 A B D P Q t pat e f arg x v) = (term681 A B D P Q t pat e f arg x v)).
Proof. exact (MK_COMB (@lem8299543 A B D P Q t pat e f arg x v) (@lem8299549 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299551 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term666 A B D P Q t pat e f arg x v) = (term681 A B D P Q t pat e f arg x v).
Proof. exact (EQ_MP (@lem8299550 A B D P Q t pat e f arg x v) (@lem8299535 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299553 {A : Type'} (P : Prop) (Q : A -> Prop) : (term644 A P Q) = (term645 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8299554 {Q : Type'} (P : Prop) (Q' : Q -> Prop) : (term644 Q P Q') = (term645 Q P Q').
Proof. exact (@lem8299553 Q P Q'). Qed.
Lemma lem8299555 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term682 A B D P Q t pat e f arg x v' v) = (term683 A B D P Q t pat e f arg x v' v).
Proof. exact (@lem8299554 Q (term467 A B D P Q pat e f arg x) (term635 A B D P Q t pat e f arg x v' v)). Qed.
Lemma lem8299556 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) : (term684 A B D P Q t pat e f arg x v' v t') = (term633 A B D P Q t pat e f arg x t' v' v).
Proof. exact (eq_refl (term684 A B D P Q t pat e f arg x v' v t')). Qed.
Lemma lem8299557 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term685 A B D P Q t pat e f arg x v' v) = (term635 A B D P Q t pat e f arg x v' v).
Proof. exact (fun_ext (fun t' : Q => @lem8299556 A B D P Q t pat e f arg x t' v' v)). Qed.
Lemma lem8299558 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299559 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term686 A B D P Q t pat e f arg x v' v) = (term636 A B D P Q t pat e f arg x v' v).
Proof. exact (MK_COMB (@lem8299558 Q) (@lem8299557 A B D P Q t pat e f arg x v' v)). Qed.
Lemma lem8299560 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term469 A B D P Q pat e f arg x) = (term469 A B D P Q pat e f arg x).
Proof. exact (eq_refl (term469 A B D P Q pat e f arg x)). Qed.
Lemma lem8299561 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term682 A B D P Q t pat e f arg x v' v) = (term678 A B D P Q t pat e f arg x v' v).
Proof. exact (MK_COMB (@lem8299560 A B D P Q pat e f arg x) (@lem8299559 A B D P Q t pat e f arg x v' v)). Qed.
Lemma lem8299562 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8299563 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term687 A B D P Q t pat e f arg x v' v) = (term688 A B D P Q t pat e f arg x v' v).
Proof. exact (MK_COMB (@lem8299562) (@lem8299561 A B D P Q t pat e f arg x v' v)). Qed.
Lemma lem8299564 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) : (term684 A B D P Q t pat e f arg x v' v t') = (term633 A B D P Q t pat e f arg x t' v' v).
Proof. exact (eq_refl (term684 A B D P Q t pat e f arg x v' v t')). Qed.
Lemma lem8299565 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term469 A B D P Q pat e f arg x) = (term469 A B D P Q pat e f arg x).
Proof. exact (eq_refl (term469 A B D P Q pat e f arg x)). Qed.
Lemma lem8299566 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) : (term689 A B D P Q t pat e f arg x v' v t') = (term690 A B D P Q t pat e f arg x t' v' v).
Proof. exact (MK_COMB (@lem8299565 A B D P Q pat e f arg x) (@lem8299564 A B D P Q t pat e f arg x t' v' v)). Qed.
Lemma lem8299567 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term691 A B D P Q t pat e f arg x v' v) = (term692 A B D P Q t pat e f arg x v' v).
Proof. exact (fun_ext (fun t' : Q => @lem8299566 A B D P Q t pat e f arg x t' v' v)). Qed.
Lemma lem8299568 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299569 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term683 A B D P Q t pat e f arg x v' v) = (term693 A B D P Q t pat e f arg x v' v).
Proof. exact (MK_COMB (@lem8299568 Q) (@lem8299567 A B D P Q t pat e f arg x v' v)). Qed.
Lemma lem8299570 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : ((term682 A B D P Q t pat e f arg x v' v) = (term683 A B D P Q t pat e f arg x v' v)) = ((term678 A B D P Q t pat e f arg x v' v) = (term693 A B D P Q t pat e f arg x v' v)).
Proof. exact (MK_COMB (@lem8299563 A B D P Q t pat e f arg x v' v) (@lem8299569 A B D P Q t pat e f arg x v' v)). Qed.
Lemma lem8299571 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term678 A B D P Q t pat e f arg x v' v) = (term693 A B D P Q t pat e f arg x v' v).
Proof. exact (EQ_MP (@lem8299570 A B D P Q t pat e f arg x v' v) (@lem8299555 A B D P Q t pat e f arg x v' v)). Qed.
Lemma lem8299572 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term680 A B D P Q t pat e f arg x v) = (term694 A B D P Q t pat e f arg x v).
Proof. exact (fun_ext (fun v' : B => @lem8299571 A B D P Q t pat e f arg x v' v)). Qed.
Lemma lem8299573 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299574 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term681 A B D P Q t pat e f arg x v) = (term695 A B D P Q t pat e f arg x v).
Proof. exact (MK_COMB (@lem8299573 B) (@lem8299572 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299575 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term666 A B D P Q t pat e f arg x v) = (term695 A B D P Q t pat e f arg x v).
Proof. exact (TRANS (@lem8299551 A B D P Q t pat e f arg x v) (@lem8299574 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299576 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term668 A B D P Q pat e f arg x v) = (term696 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun t : Q => @lem8299575 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299577 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299578 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term669 A B D P Q pat e f arg x v) = (term697 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299577 Q) (@lem8299576 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299579 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term654 A B D P Q pat e f arg x v) = (term697 A B D P Q pat e f arg x v).
Proof. exact (TRANS (@lem8299531 A B D P Q pat e f arg x v) (@lem8299578 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299580 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term656 A B D P Q pat e f arg x) = (term698 A B D P Q pat e f arg x).
Proof. exact (fun_ext (fun v : B => @lem8299579 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299581 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299582 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term657 A B D P Q pat e f arg x) = (term699 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8299581 B) (@lem8299580 A B D P Q pat e f arg x)). Qed.
Lemma lem8299583 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term643 A B D P Q pat e f arg x) = (term699 A B D P Q pat e f arg x).
Proof. exact (TRANS (@lem8299511 A B D P Q pat e f arg x) (@lem8299582 A B D P Q pat e f arg x)). Qed.
Lemma lem8299584 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term526 A B D P Q pat e f arg x) = (term699 A B D P Q pat e f arg x).
Proof. exact (TRANS (@lem8299491 A B D P Q pat e f arg x) (@lem8299583 A B D P Q pat e f arg x)). Qed.
Lemma lem8299585 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8299586 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term527 A B D P Q pat e f arg x) = (term700 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8299585) (@lem8299584 A B D P Q pat e f arg x)). Qed.
Lemma lem8299587 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term169 D P Q pat e x) = (term169 D P Q pat e x).
Proof. exact (eq_refl (term169 D P Q pat e x)). Qed.
Lemma lem8299588 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term528 A B D P Q f arg pat e x) = (term701 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8299586 A B D P Q pat e f arg x) (@lem8299587 D P Q pat e x)). Qed.
Lemma lem8299590 {A : Type'} (P : A -> Prop) (Q : Prop) : (term530 A P Q) = (term531 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8299591 {B : Type'} (P : B -> Prop) (Q : Prop) : (term530 B P Q) = (term531 B P Q).
Proof. exact (@lem8299590 B P Q). Qed.
Lemma lem8299592 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term702 A B D P Q f arg pat e x) = (term703 A B D P Q f arg pat e x).
Proof. exact (@lem8299591 B (term698 A B D P Q pat e f arg x) (term169 D P Q pat e x)). Qed.
Lemma lem8299593 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term704 A B D P Q pat e f arg x v) = (term697 A B D P Q pat e f arg x v).
Proof. exact (eq_refl (term704 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299594 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term705 A B D P Q pat e f arg x) = (term698 A B D P Q pat e f arg x).
Proof. exact (fun_ext (fun v : B => @lem8299593 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299595 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299596 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term706 A B D P Q pat e f arg x) = (term699 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8299595 B) (@lem8299594 A B D P Q pat e f arg x)). Qed.
Lemma lem8299597 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8299598 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term707 A B D P Q pat e f arg x) = (term700 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8299597) (@lem8299596 A B D P Q pat e f arg x)). Qed.
Lemma lem8299599 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term169 D P Q pat e x) = (term169 D P Q pat e x).
Proof. exact (eq_refl (term169 D P Q pat e x)). Qed.
Lemma lem8299600 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term702 A B D P Q f arg pat e x) = (term701 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8299598 A B D P Q pat e f arg x) (@lem8299599 D P Q pat e x)). Qed.
Lemma lem8299601 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8299602 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term708 A B D P Q f arg pat e x) = (term709 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8299601) (@lem8299600 A B D P Q f arg pat e x)). Qed.
Lemma lem8299603 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term704 A B D P Q pat e f arg x v) = (term697 A B D P Q pat e f arg x v).
Proof. exact (eq_refl (term704 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299604 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8299605 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term710 A B D P Q pat e f arg x v) = (term711 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299604) (@lem8299603 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299606 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term169 D P Q pat e x) = (term169 D P Q pat e x).
Proof. exact (eq_refl (term169 D P Q pat e x)). Qed.
Lemma lem8299607 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term712 A B D P Q f arg v pat e x) = (term713 A B D P Q f arg v pat e x).
Proof. exact (MK_COMB (@lem8299605 A B D P Q pat e f arg x v) (@lem8299606 D P Q pat e x)). Qed.
Lemma lem8299608 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term714 A B D P Q f arg pat e x) = (term715 A B D P Q f arg pat e x).
Proof. exact (fun_ext (fun v : B => @lem8299607 A B D P Q f arg v pat e x)). Qed.
Lemma lem8299609 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299610 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term703 A B D P Q f arg pat e x) = (term716 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8299609 B) (@lem8299608 A B D P Q f arg pat e x)). Qed.
Lemma lem8299611 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : ((term702 A B D P Q f arg pat e x) = (term703 A B D P Q f arg pat e x)) = ((term701 A B D P Q f arg pat e x) = (term716 A B D P Q f arg pat e x)).
Proof. exact (MK_COMB (@lem8299602 A B D P Q f arg pat e x) (@lem8299610 A B D P Q f arg pat e x)). Qed.
Lemma lem8299612 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term701 A B D P Q f arg pat e x) = (term716 A B D P Q f arg pat e x).
Proof. exact (EQ_MP (@lem8299611 A B D P Q f arg pat e x) (@lem8299592 A B D P Q f arg pat e x)). Qed.
Lemma lem8299614 {A : Type'} (P : A -> Prop) (Q : Prop) : (term530 A P Q) = (term531 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8299615 {Q : Type'} (P : Q -> Prop) (Q' : Prop) : (term530 Q P Q') = (term531 Q P Q').
Proof. exact (@lem8299614 Q P Q'). Qed.
Lemma lem8299616 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term717 A B D P Q f arg v pat e x) = (term718 A B D P Q f arg v pat e x).
Proof. exact (@lem8299615 Q (term696 A B D P Q pat e f arg x v) (term169 D P Q pat e x)). Qed.
Lemma lem8299617 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term719 A B D P Q pat e f arg x v t) = (term695 A B D P Q t pat e f arg x v).
Proof. exact (eq_refl (term719 A B D P Q pat e f arg x v t)). Qed.
Lemma lem8299618 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term720 A B D P Q pat e f arg x v) = (term696 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun t : Q => @lem8299617 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299619 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299620 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term721 A B D P Q pat e f arg x v) = (term697 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299619 Q) (@lem8299618 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299621 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8299622 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term722 A B D P Q pat e f arg x v) = (term711 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8299621) (@lem8299620 A B D P Q pat e f arg x v)). Qed.
Lemma lem8299623 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term169 D P Q pat e x) = (term169 D P Q pat e x).
Proof. exact (eq_refl (term169 D P Q pat e x)). Qed.
Lemma lem8299624 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term717 A B D P Q f arg v pat e x) = (term713 A B D P Q f arg v pat e x).
Proof. exact (MK_COMB (@lem8299622 A B D P Q pat e f arg x v) (@lem8299623 D P Q pat e x)). Qed.
Lemma lem8299625 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8299626 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term723 A B D P Q f arg v pat e x) = (term724 A B D P Q f arg v pat e x).
Proof. exact (MK_COMB (@lem8299625) (@lem8299624 A B D P Q f arg v pat e x)). Qed.
Lemma lem8299627 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term719 A B D P Q pat e f arg x v t) = (term695 A B D P Q t pat e f arg x v).
Proof. exact (eq_refl (term719 A B D P Q pat e f arg x v t)). Qed.
Lemma lem8299628 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8299629 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term725 A B D P Q pat e f arg x v t) = (term726 A B D P Q t pat e f arg x v).
Proof. exact (MK_COMB (@lem8299628) (@lem8299627 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299630 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term169 D P Q pat e x) = (term169 D P Q pat e x).
Proof. exact (eq_refl (term169 D P Q pat e x)). Qed.
Lemma lem8299631 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term727 A B D P Q f arg v t pat e x) = (term728 A B D P Q t f arg v pat e x).
Proof. exact (MK_COMB (@lem8299629 A B D P Q t pat e f arg x v) (@lem8299630 D P Q pat e x)). Qed.
Lemma lem8299632 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term729 A B D P Q f arg v pat e x) = (term730 A B D P Q f arg v pat e x).
Proof. exact (fun_ext (fun t : Q => @lem8299631 A B D P Q t f arg v pat e x)). Qed.
Lemma lem8299633 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299634 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term718 A B D P Q f arg v pat e x) = (term731 A B D P Q f arg v pat e x).
Proof. exact (MK_COMB (@lem8299633 Q) (@lem8299632 A B D P Q f arg v pat e x)). Qed.
Lemma lem8299635 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : ((term717 A B D P Q f arg v pat e x) = (term718 A B D P Q f arg v pat e x)) = ((term713 A B D P Q f arg v pat e x) = (term731 A B D P Q f arg v pat e x)).
Proof. exact (MK_COMB (@lem8299626 A B D P Q f arg v pat e x) (@lem8299634 A B D P Q f arg v pat e x)). Qed.
Lemma lem8299636 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term713 A B D P Q f arg v pat e x) = (term731 A B D P Q f arg v pat e x).
Proof. exact (EQ_MP (@lem8299635 A B D P Q f arg v pat e x) (@lem8299616 A B D P Q f arg v pat e x)). Qed.
Lemma lem8299638 {A : Type'} (P : A -> Prop) (Q : Prop) : (term530 A P Q) = (term531 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8299639 {B : Type'} (P : B -> Prop) (Q : Prop) : (term530 B P Q) = (term531 B P Q).
Proof. exact (@lem8299638 B P Q). Qed.
Lemma lem8299640 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term732 A B D P Q t f arg v pat e x) = (term733 A B D P Q t f arg v pat e x).
Proof. exact (@lem8299639 B (term694 A B D P Q t pat e f arg x v) (term169 D P Q pat e x)). Qed.
Lemma lem8299641 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term734 A B D P Q t pat e f arg x v v') = (term693 A B D P Q t pat e f arg x v' v).
Proof. exact (eq_refl (term734 A B D P Q t pat e f arg x v v')). Qed.
Lemma lem8299642 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term735 A B D P Q t pat e f arg x v) = (term694 A B D P Q t pat e f arg x v).
Proof. exact (fun_ext (fun v' : B => @lem8299641 A B D P Q t pat e f arg x v' v)). Qed.
Lemma lem8299643 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299644 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term736 A B D P Q t pat e f arg x v) = (term695 A B D P Q t pat e f arg x v).
Proof. exact (MK_COMB (@lem8299643 B) (@lem8299642 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299645 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8299646 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term737 A B D P Q t pat e f arg x v) = (term726 A B D P Q t pat e f arg x v).
Proof. exact (MK_COMB (@lem8299645) (@lem8299644 A B D P Q t pat e f arg x v)). Qed.
Lemma lem8299647 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term169 D P Q pat e x) = (term169 D P Q pat e x).
Proof. exact (eq_refl (term169 D P Q pat e x)). Qed.
Lemma lem8299648 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term732 A B D P Q t f arg v pat e x) = (term728 A B D P Q t f arg v pat e x).
Proof. exact (MK_COMB (@lem8299646 A B D P Q t pat e f arg x v) (@lem8299647 D P Q pat e x)). Qed.
Lemma lem8299649 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8299650 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term738 A B D P Q t f arg v pat e x) = (term739 A B D P Q t f arg v pat e x).
Proof. exact (MK_COMB (@lem8299649) (@lem8299648 A B D P Q t f arg v pat e x)). Qed.
Lemma lem8299651 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term734 A B D P Q t pat e f arg x v v') = (term693 A B D P Q t pat e f arg x v' v).
Proof. exact (eq_refl (term734 A B D P Q t pat e f arg x v v')). Qed.
Lemma lem8299652 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8299653 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term740 A B D P Q t pat e f arg x v v') = (term741 A B D P Q t pat e f arg x v' v).
Proof. exact (MK_COMB (@lem8299652) (@lem8299651 A B D P Q t pat e f arg x v' v)). Qed.
Lemma lem8299654 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term169 D P Q pat e x) = (term169 D P Q pat e x).
Proof. exact (eq_refl (term169 D P Q pat e x)). Qed.
Lemma lem8299655 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term742 A B D P Q t f arg v v' pat e x) = (term743 A B D P Q t f arg v' v pat e x).
Proof. exact (MK_COMB (@lem8299653 A B D P Q t pat e f arg x v' v) (@lem8299654 D P Q pat e x)). Qed.
Lemma lem8299656 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term744 A B D P Q t f arg v pat e x) = (term745 A B D P Q t f arg v pat e x).
Proof. exact (fun_ext (fun v' : B => @lem8299655 A B D P Q t f arg v' v pat e x)). Qed.
Lemma lem8299657 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299658 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term733 A B D P Q t f arg v pat e x) = (term746 A B D P Q t f arg v pat e x).
Proof. exact (MK_COMB (@lem8299657 B) (@lem8299656 A B D P Q t f arg v pat e x)). Qed.
Lemma lem8299659 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : ((term732 A B D P Q t f arg v pat e x) = (term733 A B D P Q t f arg v pat e x)) = ((term728 A B D P Q t f arg v pat e x) = (term746 A B D P Q t f arg v pat e x)).
Proof. exact (MK_COMB (@lem8299650 A B D P Q t f arg v pat e x) (@lem8299658 A B D P Q t f arg v pat e x)). Qed.
Lemma lem8299660 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term728 A B D P Q t f arg v pat e x) = (term746 A B D P Q t f arg v pat e x).
Proof. exact (EQ_MP (@lem8299659 A B D P Q t f arg v pat e x) (@lem8299640 A B D P Q t f arg v pat e x)). Qed.
Lemma lem8299662 {A : Type'} (P : A -> Prop) (Q : Prop) : (term530 A P Q) = (term531 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8299663 {Q : Type'} (P : Q -> Prop) (Q' : Prop) : (term530 Q P Q') = (term531 Q P Q').
Proof. exact (@lem8299662 Q P Q'). Qed.
Lemma lem8299664 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term747 A B D P Q t f arg v' v pat e x) = (term748 A B D P Q t f arg v' v pat e x).
Proof. exact (@lem8299663 Q (term692 A B D P Q t pat e f arg x v' v) (term169 D P Q pat e x)). Qed.
Lemma lem8299665 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) : (term749 A B D P Q t pat e f arg x v' v t') = (term690 A B D P Q t pat e f arg x t' v' v).
Proof. exact (eq_refl (term749 A B D P Q t pat e f arg x v' v t')). Qed.
Lemma lem8299666 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term750 A B D P Q t pat e f arg x v' v) = (term692 A B D P Q t pat e f arg x v' v).
Proof. exact (fun_ext (fun t' : Q => @lem8299665 A B D P Q t pat e f arg x t' v' v)). Qed.
Lemma lem8299667 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299668 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term751 A B D P Q t pat e f arg x v' v) = (term693 A B D P Q t pat e f arg x v' v).
Proof. exact (MK_COMB (@lem8299667 Q) (@lem8299666 A B D P Q t pat e f arg x v' v)). Qed.
Lemma lem8299669 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8299670 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term752 A B D P Q t pat e f arg x v' v) = (term741 A B D P Q t pat e f arg x v' v).
Proof. exact (MK_COMB (@lem8299669) (@lem8299668 A B D P Q t pat e f arg x v' v)). Qed.
Lemma lem8299671 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term169 D P Q pat e x) = (term169 D P Q pat e x).
Proof. exact (eq_refl (term169 D P Q pat e x)). Qed.
Lemma lem8299672 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term747 A B D P Q t f arg v' v pat e x) = (term743 A B D P Q t f arg v' v pat e x).
Proof. exact (MK_COMB (@lem8299670 A B D P Q t pat e f arg x v' v) (@lem8299671 D P Q pat e x)). Qed.
Lemma lem8299673 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8299674 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term753 A B D P Q t f arg v' v pat e x) = (term754 A B D P Q t f arg v' v pat e x).
Proof. exact (MK_COMB (@lem8299673) (@lem8299672 A B D P Q t f arg v' v pat e x)). Qed.
Lemma lem8299675 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) : (term749 A B D P Q t pat e f arg x v' v t') = (term690 A B D P Q t pat e f arg x t' v' v).
Proof. exact (eq_refl (term749 A B D P Q t pat e f arg x v' v t')). Qed.
Lemma lem8299676 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8299677 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) : (term755 A B D P Q t pat e f arg x v' v t') = (term756 A B D P Q t pat e f arg x t' v' v).
Proof. exact (MK_COMB (@lem8299676) (@lem8299675 A B D P Q t pat e f arg x t' v' v)). Qed.
Lemma lem8299678 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term169 D P Q pat e x) = (term169 D P Q pat e x).
Proof. exact (eq_refl (term169 D P Q pat e x)). Qed.
Lemma lem8299679 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term757 A B D P Q t f arg v' v t' pat e x) = (term758 A B D P Q t f arg t' v' v pat e x).
Proof. exact (MK_COMB (@lem8299677 A B D P Q t pat e f arg x t' v' v) (@lem8299678 D P Q pat e x)). Qed.
Lemma lem8299680 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term759 A B D P Q t f arg v' v pat e x) = (term760 A B D P Q t f arg v' v pat e x).
Proof. exact (fun_ext (fun t' : Q => @lem8299679 A B D P Q t f arg t' v' v pat e x)). Qed.
Lemma lem8299681 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299682 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term748 A B D P Q t f arg v' v pat e x) = (term761 A B D P Q t f arg v' v pat e x).
Proof. exact (MK_COMB (@lem8299681 Q) (@lem8299680 A B D P Q t f arg v' v pat e x)). Qed.
Lemma lem8299683 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : ((term747 A B D P Q t f arg v' v pat e x) = (term748 A B D P Q t f arg v' v pat e x)) = ((term743 A B D P Q t f arg v' v pat e x) = (term761 A B D P Q t f arg v' v pat e x)).
Proof. exact (MK_COMB (@lem8299674 A B D P Q t f arg v' v pat e x) (@lem8299682 A B D P Q t f arg v' v pat e x)). Qed.
Lemma lem8299684 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term743 A B D P Q t f arg v' v pat e x) = (term761 A B D P Q t f arg v' v pat e x).
Proof. exact (EQ_MP (@lem8299683 A B D P Q t f arg v' v pat e x) (@lem8299664 A B D P Q t f arg v' v pat e x)). Qed.
Lemma lem8299686 {A : Type'} (P : Prop) (Q : A -> Prop) : (term511 A P Q) = (term510 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem8299687 {Q : Type'} (P : Prop) (Q' : Q -> Prop) : (term511 Q P Q') = (term510 Q P Q').
Proof. exact (@lem8299686 Q P Q'). Qed.
Lemma lem8299688 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term762 A B D P Q t f arg t' v' v pat e x) = (term763 A B D P Q t f arg t' v' v pat e x).
Proof. exact (@lem8299687 Q (term690 A B D P Q t pat e f arg x t' v' v) (term258 D P Q pat e x)). Qed.
Lemma lem8299689 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (x : P) : (term472 D P Q pat e x t) = ((pat t) = (e x)).
Proof. exact (eq_refl (term472 D P Q pat e x t)). Qed.
Lemma lem8299690 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term764 D P Q pat e x) = (term258 D P Q pat e x).
Proof. exact (fun_ext (fun t : Q => @lem8299689 D P Q pat t e x)). Qed.
Lemma lem8299691 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299692 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term765 D P Q pat e x) = (term169 D P Q pat e x).
Proof. exact (MK_COMB (@lem8299691 Q) (@lem8299690 D P Q pat e x)). Qed.
Lemma lem8299693 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) : (term756 A B D P Q t pat e f arg x t' v' v) = (term756 A B D P Q t pat e f arg x t' v' v).
Proof. exact (eq_refl (term756 A B D P Q t pat e f arg x t' v' v)). Qed.
Lemma lem8299694 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term762 A B D P Q t f arg t' v' v pat e x) = (term758 A B D P Q t f arg t' v' v pat e x).
Proof. exact (MK_COMB (@lem8299693 A B D P Q t pat e f arg x t' v' v) (@lem8299692 D P Q pat e x)). Qed.
Lemma lem8299695 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8299696 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term766 A B D P Q t f arg t' v' v pat e x) = (term767 A B D P Q t f arg t' v' v pat e x).
Proof. exact (MK_COMB (@lem8299695) (@lem8299694 A B D P Q t f arg t' v' v pat e x)). Qed.
Lemma lem8299697 {D P Q : Type'} (pat : Q -> D) (t'' : Q) (e : P -> D) (x : P) : (term472 D P Q pat e x t'') = ((pat t'') = (e x)).
Proof. exact (eq_refl (term472 D P Q pat e x t'')). Qed.
Lemma lem8299698 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) : (term756 A B D P Q t pat e f arg x t' v' v) = (term756 A B D P Q t pat e f arg x t' v' v).
Proof. exact (eq_refl (term756 A B D P Q t pat e f arg x t' v' v)). Qed.
Lemma lem8299699 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (t'' : Q) (e : P -> D) (x : P) : (term768 A B D P Q t f arg t' v' v pat e x t'') = (term769 A B D P Q t f arg t' v' v pat t'' e x).
Proof. exact (MK_COMB (@lem8299698 A B D P Q t pat e f arg x t' v' v) (@lem8299697 D P Q pat t'' e x)). Qed.
Lemma lem8299700 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term770 A B D P Q t f arg t' v' v pat e x) = (term771 A B D P Q t f arg t' v' v pat e x).
Proof. exact (fun_ext (fun t'' : Q => @lem8299699 A B D P Q t f arg t' v' v pat t'' e x)). Qed.
Lemma lem8299701 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299702 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term763 A B D P Q t f arg t' v' v pat e x) = (term772 A B D P Q t f arg t' v' v pat e x).
Proof. exact (MK_COMB (@lem8299701 Q) (@lem8299700 A B D P Q t f arg t' v' v pat e x)). Qed.
Lemma lem8299703 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : ((term762 A B D P Q t f arg t' v' v pat e x) = (term763 A B D P Q t f arg t' v' v pat e x)) = ((term758 A B D P Q t f arg t' v' v pat e x) = (term772 A B D P Q t f arg t' v' v pat e x)).
Proof. exact (MK_COMB (@lem8299696 A B D P Q t f arg t' v' v pat e x) (@lem8299702 A B D P Q t f arg t' v' v pat e x)). Qed.
Lemma lem8299704 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term758 A B D P Q t f arg t' v' v pat e x) = (term772 A B D P Q t f arg t' v' v pat e x).
Proof. exact (EQ_MP (@lem8299703 A B D P Q t f arg t' v' v pat e x) (@lem8299688 A B D P Q t f arg t' v' v pat e x)). Qed.
Lemma lem8299705 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term760 A B D P Q t f arg v' v pat e x) = (term773 A B D P Q t f arg v' v pat e x).
Proof. exact (fun_ext (fun t' : Q => @lem8299704 A B D P Q t f arg t' v' v pat e x)). Qed.
Lemma lem8299706 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299707 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term761 A B D P Q t f arg v' v pat e x) = (term774 A B D P Q t f arg v' v pat e x).
Proof. exact (MK_COMB (@lem8299706 Q) (@lem8299705 A B D P Q t f arg v' v pat e x)). Qed.
Lemma lem8299708 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term743 A B D P Q t f arg v' v pat e x) = (term774 A B D P Q t f arg v' v pat e x).
Proof. exact (TRANS (@lem8299684 A B D P Q t f arg v' v pat e x) (@lem8299707 A B D P Q t f arg v' v pat e x)). Qed.
Lemma lem8299709 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term745 A B D P Q t f arg v pat e x) = (term775 A B D P Q t f arg v pat e x).
Proof. exact (fun_ext (fun v' : B => @lem8299708 A B D P Q t f arg v' v pat e x)). Qed.
Lemma lem8299710 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299711 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term746 A B D P Q t f arg v pat e x) = (term776 A B D P Q t f arg v pat e x).
Proof. exact (MK_COMB (@lem8299710 B) (@lem8299709 A B D P Q t f arg v pat e x)). Qed.
Lemma lem8299712 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term728 A B D P Q t f arg v pat e x) = (term776 A B D P Q t f arg v pat e x).
Proof. exact (TRANS (@lem8299660 A B D P Q t f arg v pat e x) (@lem8299711 A B D P Q t f arg v pat e x)). Qed.
Lemma lem8299713 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term730 A B D P Q f arg v pat e x) = (term777 A B D P Q f arg v pat e x).
Proof. exact (fun_ext (fun t : Q => @lem8299712 A B D P Q t f arg v pat e x)). Qed.
Lemma lem8299714 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299715 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term731 A B D P Q f arg v pat e x) = (term778 A B D P Q f arg v pat e x).
Proof. exact (MK_COMB (@lem8299714 Q) (@lem8299713 A B D P Q f arg v pat e x)). Qed.
Lemma lem8299716 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term713 A B D P Q f arg v pat e x) = (term778 A B D P Q f arg v pat e x).
Proof. exact (TRANS (@lem8299636 A B D P Q f arg v pat e x) (@lem8299715 A B D P Q f arg v pat e x)). Qed.
Lemma lem8299717 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term715 A B D P Q f arg pat e x) = (term779 A B D P Q f arg pat e x).
Proof. exact (fun_ext (fun v : B => @lem8299716 A B D P Q f arg v pat e x)). Qed.
Lemma lem8299718 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299719 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term716 A B D P Q f arg pat e x) = (term780 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8299718 B) (@lem8299717 A B D P Q f arg pat e x)). Qed.
Lemma lem8299720 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term701 A B D P Q f arg pat e x) = (term780 A B D P Q f arg pat e x).
Proof. exact (TRANS (@lem8299612 A B D P Q f arg pat e x) (@lem8299719 A B D P Q f arg pat e x)). Qed.
Lemma lem8299721 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term528 A B D P Q f arg pat e x) = (term780 A B D P Q f arg pat e x).
Proof. exact (TRANS (@lem8299588 A B D P Q f arg pat e x) (@lem8299720 A B D P Q f arg pat e x)). Qed.
Lemma lem8299722 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term529 A B D P Q f arg pat e x) = (term781 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8299384 A B D P Q f arg pat e x) (@lem8299721 A B D P Q f arg pat e x)). Qed.
Lemma lem8299724 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term782 A P Q) = (term783 A P Q).
Proof. exact (EQ_MP (@lem18917 A P Q) (@lem18916 A P Q)). Qed.
Lemma lem8299725 {B : Type'} (P : B -> Prop) (Q : B -> Prop) : (term782 B P Q) = (term783 B P Q).
Proof. exact (@lem8299724 B P Q). Qed.
Lemma lem8299726 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term784 A B D P Q f arg pat e x) = (term785 A B D P Q f arg pat e x).
Proof. exact (@lem8299725 B (term589 A B D P Q f arg pat e x) (term779 A B D P Q f arg pat e x)). Qed.
Lemma lem8299727 {A B D P Q : Type'} (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term786 A B D P Q f arg pat e x v) = (term588 A B D P Q v f arg pat e x).
Proof. exact (eq_refl (term786 A B D P Q f arg pat e x v)). Qed.
Lemma lem8299728 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term787 A B D P Q f arg pat e x) = (term589 A B D P Q f arg pat e x).
Proof. exact (fun_ext (fun v : B => @lem8299727 A B D P Q v f arg pat e x)). Qed.
Lemma lem8299729 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299730 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term788 A B D P Q f arg pat e x) = (term590 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8299729 B) (@lem8299728 A B D P Q f arg pat e x)). Qed.
Lemma lem8299731 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8299732 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term789 A B D P Q f arg pat e x) = (term591 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8299731) (@lem8299730 A B D P Q f arg pat e x)). Qed.
Lemma lem8299733 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term790 A B D P Q f arg pat e x v) = (term778 A B D P Q f arg v pat e x).
Proof. exact (eq_refl (term790 A B D P Q f arg pat e x v)). Qed.
Lemma lem8299734 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term791 A B D P Q f arg pat e x) = (term779 A B D P Q f arg pat e x).
Proof. exact (fun_ext (fun v : B => @lem8299733 A B D P Q f arg v pat e x)). Qed.
Lemma lem8299735 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299736 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term792 A B D P Q f arg pat e x) = (term780 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8299735 B) (@lem8299734 A B D P Q f arg pat e x)). Qed.
Lemma lem8299737 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term784 A B D P Q f arg pat e x) = (term781 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8299732 A B D P Q f arg pat e x) (@lem8299736 A B D P Q f arg pat e x)). Qed.
Lemma lem8299738 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8299739 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term793 A B D P Q f arg pat e x) = (term794 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8299738) (@lem8299737 A B D P Q f arg pat e x)). Qed.
Lemma lem8299740 {A B D P Q : Type'} (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term786 A B D P Q f arg pat e x v) = (term588 A B D P Q v f arg pat e x).
Proof. exact (eq_refl (term786 A B D P Q f arg pat e x v)). Qed.
Lemma lem8299741 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8299742 {A B D P Q : Type'} (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term795 A B D P Q f arg pat e x v) = (term796 A B D P Q v f arg pat e x).
Proof. exact (MK_COMB (@lem8299741) (@lem8299740 A B D P Q v f arg pat e x)). Qed.
Lemma lem8299743 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term790 A B D P Q f arg pat e x v) = (term778 A B D P Q f arg v pat e x).
Proof. exact (eq_refl (term790 A B D P Q f arg pat e x v)). Qed.
Lemma lem8299744 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term797 A B D P Q f arg pat e x v) = (term798 A B D P Q f arg v pat e x).
Proof. exact (MK_COMB (@lem8299742 A B D P Q v f arg pat e x) (@lem8299743 A B D P Q f arg v pat e x)). Qed.
Lemma lem8299745 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term799 A B D P Q f arg pat e x) = (term800 A B D P Q f arg pat e x).
Proof. exact (fun_ext (fun v : B => @lem8299744 A B D P Q f arg v pat e x)). Qed.
Lemma lem8299746 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299747 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term785 A B D P Q f arg pat e x) = (term801 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8299746 B) (@lem8299745 A B D P Q f arg pat e x)). Qed.
Lemma lem8299748 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : ((term784 A B D P Q f arg pat e x) = (term785 A B D P Q f arg pat e x)) = ((term781 A B D P Q f arg pat e x) = (term801 A B D P Q f arg pat e x)).
Proof. exact (MK_COMB (@lem8299739 A B D P Q f arg pat e x) (@lem8299747 A B D P Q f arg pat e x)). Qed.
Lemma lem8299749 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term781 A B D P Q f arg pat e x) = (term801 A B D P Q f arg pat e x).
Proof. exact (EQ_MP (@lem8299748 A B D P Q f arg pat e x) (@lem8299726 A B D P Q f arg pat e x)). Qed.
Lemma lem8299751 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term782 A P Q) = (term783 A P Q).
Proof. exact (EQ_MP (@lem18917 A P Q) (@lem18916 A P Q)). Qed.
Lemma lem8299752 {Q : Type'} (P : Q -> Prop) (Q' : Q -> Prop) : (term782 Q P Q') = (term783 Q P Q').
Proof. exact (@lem8299751 Q P Q'). Qed.
Lemma lem8299753 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term802 A B D P Q f arg v pat e x) = (term803 A B D P Q f arg v pat e x).
Proof. exact (@lem8299752 Q (term587 A B D P Q v f arg pat e x) (term777 A B D P Q f arg v pat e x)). Qed.
Lemma lem8299754 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term804 A B D P Q v f arg pat e x t) = (term585 A B D P Q t v f arg pat e x).
Proof. exact (eq_refl (term804 A B D P Q v f arg pat e x t)). Qed.
Lemma lem8299755 {A B D P Q : Type'} (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term805 A B D P Q v f arg pat e x) = (term587 A B D P Q v f arg pat e x).
Proof. exact (fun_ext (fun t : Q => @lem8299754 A B D P Q t v f arg pat e x)). Qed.
Lemma lem8299756 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299757 {A B D P Q : Type'} (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term806 A B D P Q v f arg pat e x) = (term588 A B D P Q v f arg pat e x).
Proof. exact (MK_COMB (@lem8299756 Q) (@lem8299755 A B D P Q v f arg pat e x)). Qed.
Lemma lem8299758 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8299759 {A B D P Q : Type'} (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term807 A B D P Q v f arg pat e x) = (term796 A B D P Q v f arg pat e x).
Proof. exact (MK_COMB (@lem8299758) (@lem8299757 A B D P Q v f arg pat e x)). Qed.
Lemma lem8299760 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term808 A B D P Q f arg v pat e x t) = (term776 A B D P Q t f arg v pat e x).
Proof. exact (eq_refl (term808 A B D P Q f arg v pat e x t)). Qed.
Lemma lem8299761 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term809 A B D P Q f arg v pat e x) = (term777 A B D P Q f arg v pat e x).
Proof. exact (fun_ext (fun t : Q => @lem8299760 A B D P Q t f arg v pat e x)). Qed.
Lemma lem8299762 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299763 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term810 A B D P Q f arg v pat e x) = (term778 A B D P Q f arg v pat e x).
Proof. exact (MK_COMB (@lem8299762 Q) (@lem8299761 A B D P Q f arg v pat e x)). Qed.
Lemma lem8299764 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term802 A B D P Q f arg v pat e x) = (term798 A B D P Q f arg v pat e x).
Proof. exact (MK_COMB (@lem8299759 A B D P Q v f arg pat e x) (@lem8299763 A B D P Q f arg v pat e x)). Qed.
Lemma lem8299765 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8299766 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term811 A B D P Q f arg v pat e x) = (term812 A B D P Q f arg v pat e x).
Proof. exact (MK_COMB (@lem8299765) (@lem8299764 A B D P Q f arg v pat e x)). Qed.
Lemma lem8299767 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term804 A B D P Q v f arg pat e x t) = (term585 A B D P Q t v f arg pat e x).
Proof. exact (eq_refl (term804 A B D P Q v f arg pat e x t)). Qed.
Lemma lem8299768 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8299769 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term813 A B D P Q v f arg pat e x t) = (term814 A B D P Q t v f arg pat e x).
Proof. exact (MK_COMB (@lem8299768) (@lem8299767 A B D P Q t v f arg pat e x)). Qed.
Lemma lem8299770 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term808 A B D P Q f arg v pat e x t) = (term776 A B D P Q t f arg v pat e x).
Proof. exact (eq_refl (term808 A B D P Q f arg v pat e x t)). Qed.
Lemma lem8299771 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term815 A B D P Q f arg v pat e x t) = (term816 A B D P Q t f arg v pat e x).
Proof. exact (MK_COMB (@lem8299769 A B D P Q t v f arg pat e x) (@lem8299770 A B D P Q t f arg v pat e x)). Qed.
Lemma lem8299772 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term817 A B D P Q f arg v pat e x) = (term818 A B D P Q f arg v pat e x).
Proof. exact (fun_ext (fun t : Q => @lem8299771 A B D P Q t f arg v pat e x)). Qed.
Lemma lem8299773 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299774 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term803 A B D P Q f arg v pat e x) = (term819 A B D P Q f arg v pat e x).
Proof. exact (MK_COMB (@lem8299773 Q) (@lem8299772 A B D P Q f arg v pat e x)). Qed.
Lemma lem8299775 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : ((term802 A B D P Q f arg v pat e x) = (term803 A B D P Q f arg v pat e x)) = ((term798 A B D P Q f arg v pat e x) = (term819 A B D P Q f arg v pat e x)).
Proof. exact (MK_COMB (@lem8299766 A B D P Q f arg v pat e x) (@lem8299774 A B D P Q f arg v pat e x)). Qed.
Lemma lem8299776 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term798 A B D P Q f arg v pat e x) = (term819 A B D P Q f arg v pat e x).
Proof. exact (EQ_MP (@lem8299775 A B D P Q f arg v pat e x) (@lem8299753 A B D P Q f arg v pat e x)). Qed.
Lemma lem8299778 {A : Type'} (P : Prop) (Q : A -> Prop) : (term644 A P Q) = (term645 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8299779 {B : Type'} (P : Prop) (Q : B -> Prop) : (term644 B P Q) = (term645 B P Q).
Proof. exact (@lem8299778 B P Q). Qed.
Lemma lem8299780 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term820 A B D P Q t f arg v pat e x) = (term821 A B D P Q t f arg v pat e x).
Proof. exact (@lem8299779 B (term585 A B D P Q t v f arg pat e x) (term775 A B D P Q t f arg v pat e x)). Qed.
Lemma lem8299781 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term822 A B D P Q t f arg v pat e x v') = (term774 A B D P Q t f arg v' v pat e x).
Proof. exact (eq_refl (term822 A B D P Q t f arg v pat e x v')). Qed.
Lemma lem8299782 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term823 A B D P Q t f arg v pat e x) = (term775 A B D P Q t f arg v pat e x).
Proof. exact (fun_ext (fun v' : B => @lem8299781 A B D P Q t f arg v' v pat e x)). Qed.
Lemma lem8299783 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299784 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term824 A B D P Q t f arg v pat e x) = (term776 A B D P Q t f arg v pat e x).
Proof. exact (MK_COMB (@lem8299783 B) (@lem8299782 A B D P Q t f arg v pat e x)). Qed.
Lemma lem8299785 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term814 A B D P Q t v f arg pat e x) = (term814 A B D P Q t v f arg pat e x).
Proof. exact (eq_refl (term814 A B D P Q t v f arg pat e x)). Qed.
Lemma lem8299786 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term820 A B D P Q t f arg v pat e x) = (term816 A B D P Q t f arg v pat e x).
Proof. exact (MK_COMB (@lem8299785 A B D P Q t v f arg pat e x) (@lem8299784 A B D P Q t f arg v pat e x)). Qed.
Lemma lem8299787 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8299788 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term825 A B D P Q t f arg v pat e x) = (term826 A B D P Q t f arg v pat e x).
Proof. exact (MK_COMB (@lem8299787) (@lem8299786 A B D P Q t f arg v pat e x)). Qed.
Lemma lem8299789 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term822 A B D P Q t f arg v pat e x v') = (term774 A B D P Q t f arg v' v pat e x).
Proof. exact (eq_refl (term822 A B D P Q t f arg v pat e x v')). Qed.
Lemma lem8299790 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term814 A B D P Q t v f arg pat e x) = (term814 A B D P Q t v f arg pat e x).
Proof. exact (eq_refl (term814 A B D P Q t v f arg pat e x)). Qed.
Lemma lem8299791 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term827 A B D P Q t f arg v pat e x v') = (term828 A B D P Q t f arg v' v pat e x).
Proof. exact (MK_COMB (@lem8299790 A B D P Q t v f arg pat e x) (@lem8299789 A B D P Q t f arg v' v pat e x)). Qed.
Lemma lem8299792 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term829 A B D P Q t f arg v pat e x) = (term830 A B D P Q t f arg v pat e x).
Proof. exact (fun_ext (fun v' : B => @lem8299791 A B D P Q t f arg v' v pat e x)). Qed.
Lemma lem8299793 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299794 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term821 A B D P Q t f arg v pat e x) = (term831 A B D P Q t f arg v pat e x).
Proof. exact (MK_COMB (@lem8299793 B) (@lem8299792 A B D P Q t f arg v pat e x)). Qed.
Lemma lem8299795 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : ((term820 A B D P Q t f arg v pat e x) = (term821 A B D P Q t f arg v pat e x)) = ((term816 A B D P Q t f arg v pat e x) = (term831 A B D P Q t f arg v pat e x)).
Proof. exact (MK_COMB (@lem8299788 A B D P Q t f arg v pat e x) (@lem8299794 A B D P Q t f arg v pat e x)). Qed.
Lemma lem8299796 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term816 A B D P Q t f arg v pat e x) = (term831 A B D P Q t f arg v pat e x).
Proof. exact (EQ_MP (@lem8299795 A B D P Q t f arg v pat e x) (@lem8299780 A B D P Q t f arg v pat e x)). Qed.
Lemma lem8299798 {A : Type'} (P : Prop) (Q : A -> Prop) : (term644 A P Q) = (term645 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8299799 {Q : Type'} (P : Prop) (Q' : Q -> Prop) : (term644 Q P Q') = (term645 Q P Q').
Proof. exact (@lem8299798 Q P Q'). Qed.
Lemma lem8299800 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term832 A B D P Q t f arg v' v pat e x) = (term833 A B D P Q t f arg v' v pat e x).
Proof. exact (@lem8299799 Q (term585 A B D P Q t v f arg pat e x) (term773 A B D P Q t f arg v' v pat e x)). Qed.
Lemma lem8299801 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term834 A B D P Q t f arg v' v pat e x t') = (term772 A B D P Q t f arg t' v' v pat e x).
Proof. exact (eq_refl (term834 A B D P Q t f arg v' v pat e x t')). Qed.
Lemma lem8299802 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term835 A B D P Q t f arg v' v pat e x) = (term773 A B D P Q t f arg v' v pat e x).
Proof. exact (fun_ext (fun t' : Q => @lem8299801 A B D P Q t f arg t' v' v pat e x)). Qed.
Lemma lem8299803 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299804 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term836 A B D P Q t f arg v' v pat e x) = (term774 A B D P Q t f arg v' v pat e x).
Proof. exact (MK_COMB (@lem8299803 Q) (@lem8299802 A B D P Q t f arg v' v pat e x)). Qed.
Lemma lem8299805 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term814 A B D P Q t v f arg pat e x) = (term814 A B D P Q t v f arg pat e x).
Proof. exact (eq_refl (term814 A B D P Q t v f arg pat e x)). Qed.
Lemma lem8299806 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term832 A B D P Q t f arg v' v pat e x) = (term828 A B D P Q t f arg v' v pat e x).
Proof. exact (MK_COMB (@lem8299805 A B D P Q t v f arg pat e x) (@lem8299804 A B D P Q t f arg v' v pat e x)). Qed.
Lemma lem8299807 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8299808 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term837 A B D P Q t f arg v' v pat e x) = (term838 A B D P Q t f arg v' v pat e x).
Proof. exact (MK_COMB (@lem8299807) (@lem8299806 A B D P Q t f arg v' v pat e x)). Qed.
Lemma lem8299809 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term834 A B D P Q t f arg v' v pat e x t') = (term772 A B D P Q t f arg t' v' v pat e x).
Proof. exact (eq_refl (term834 A B D P Q t f arg v' v pat e x t')). Qed.
Lemma lem8299810 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term814 A B D P Q t v f arg pat e x) = (term814 A B D P Q t v f arg pat e x).
Proof. exact (eq_refl (term814 A B D P Q t v f arg pat e x)). Qed.
Lemma lem8299811 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term839 A B D P Q t f arg v' v pat e x t') = (term840 A B D P Q t f arg t' v' v pat e x).
Proof. exact (MK_COMB (@lem8299810 A B D P Q t v f arg pat e x) (@lem8299809 A B D P Q t f arg t' v' v pat e x)). Qed.
Lemma lem8299812 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term841 A B D P Q t f arg v' v pat e x) = (term842 A B D P Q t f arg v' v pat e x).
Proof. exact (fun_ext (fun t' : Q => @lem8299811 A B D P Q t f arg t' v' v pat e x)). Qed.
Lemma lem8299813 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299814 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term833 A B D P Q t f arg v' v pat e x) = (term843 A B D P Q t f arg v' v pat e x).
Proof. exact (MK_COMB (@lem8299813 Q) (@lem8299812 A B D P Q t f arg v' v pat e x)). Qed.
Lemma lem8299815 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : ((term832 A B D P Q t f arg v' v pat e x) = (term833 A B D P Q t f arg v' v pat e x)) = ((term828 A B D P Q t f arg v' v pat e x) = (term843 A B D P Q t f arg v' v pat e x)).
Proof. exact (MK_COMB (@lem8299808 A B D P Q t f arg v' v pat e x) (@lem8299814 A B D P Q t f arg v' v pat e x)). Qed.
Lemma lem8299816 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term828 A B D P Q t f arg v' v pat e x) = (term843 A B D P Q t f arg v' v pat e x).
Proof. exact (EQ_MP (@lem8299815 A B D P Q t f arg v' v pat e x) (@lem8299800 A B D P Q t f arg v' v pat e x)). Qed.
Lemma lem8299818 {A : Type'} (P : Prop) (Q : A -> Prop) : (term644 A P Q) = (term645 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8299819 {Q : Type'} (P : Prop) (Q' : Q -> Prop) : (term644 Q P Q') = (term645 Q P Q').
Proof. exact (@lem8299818 Q P Q'). Qed.
Lemma lem8299820 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term844 A B D P Q t f arg t' v' v pat e x) = (term845 A B D P Q t f arg t' v' v pat e x).
Proof. exact (@lem8299819 Q (term585 A B D P Q t v f arg pat e x) (term771 A B D P Q t f arg t' v' v pat e x)). Qed.
Lemma lem8299821 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (t'' : Q) (e : P -> D) (x : P) : (term846 A B D P Q t f arg t' v' v pat e x t'') = (term769 A B D P Q t f arg t' v' v pat t'' e x).
Proof. exact (eq_refl (term846 A B D P Q t f arg t' v' v pat e x t'')). Qed.
Lemma lem8299822 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term847 A B D P Q t f arg t' v' v pat e x) = (term771 A B D P Q t f arg t' v' v pat e x).
Proof. exact (fun_ext (fun t'' : Q => @lem8299821 A B D P Q t f arg t' v' v pat t'' e x)). Qed.
Lemma lem8299823 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299824 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term848 A B D P Q t f arg t' v' v pat e x) = (term772 A B D P Q t f arg t' v' v pat e x).
Proof. exact (MK_COMB (@lem8299823 Q) (@lem8299822 A B D P Q t f arg t' v' v pat e x)). Qed.
Lemma lem8299825 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term814 A B D P Q t v f arg pat e x) = (term814 A B D P Q t v f arg pat e x).
Proof. exact (eq_refl (term814 A B D P Q t v f arg pat e x)). Qed.
Lemma lem8299826 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term844 A B D P Q t f arg t' v' v pat e x) = (term840 A B D P Q t f arg t' v' v pat e x).
Proof. exact (MK_COMB (@lem8299825 A B D P Q t v f arg pat e x) (@lem8299824 A B D P Q t f arg t' v' v pat e x)). Qed.
Lemma lem8299827 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8299828 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term849 A B D P Q t f arg t' v' v pat e x) = (term850 A B D P Q t f arg t' v' v pat e x).
Proof. exact (MK_COMB (@lem8299827) (@lem8299826 A B D P Q t f arg t' v' v pat e x)). Qed.
Lemma lem8299829 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (t'' : Q) (e : P -> D) (x : P) : (term846 A B D P Q t f arg t' v' v pat e x t'') = (term769 A B D P Q t f arg t' v' v pat t'' e x).
Proof. exact (eq_refl (term846 A B D P Q t f arg t' v' v pat e x t'')). Qed.
Lemma lem8299830 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term814 A B D P Q t v f arg pat e x) = (term814 A B D P Q t v f arg pat e x).
Proof. exact (eq_refl (term814 A B D P Q t v f arg pat e x)). Qed.
Lemma lem8299831 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (t'' : Q) (e : P -> D) (x : P) : (term851 A B D P Q t f arg t' v' v pat e x t'') = (term852 A B D P Q t f arg t' v' v pat t'' e x).
Proof. exact (MK_COMB (@lem8299830 A B D P Q t v f arg pat e x) (@lem8299829 A B D P Q t f arg t' v' v pat t'' e x)). Qed.
Lemma lem8299832 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term853 A B D P Q t f arg t' v' v pat e x) = (term854 A B D P Q t f arg t' v' v pat e x).
Proof. exact (fun_ext (fun t'' : Q => @lem8299831 A B D P Q t f arg t' v' v pat t'' e x)). Qed.
Lemma lem8299833 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299834 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term845 A B D P Q t f arg t' v' v pat e x) = (term855 A B D P Q t f arg t' v' v pat e x).
Proof. exact (MK_COMB (@lem8299833 Q) (@lem8299832 A B D P Q t f arg t' v' v pat e x)). Qed.
Lemma lem8299835 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : ((term844 A B D P Q t f arg t' v' v pat e x) = (term845 A B D P Q t f arg t' v' v pat e x)) = ((term840 A B D P Q t f arg t' v' v pat e x) = (term855 A B D P Q t f arg t' v' v pat e x)).
Proof. exact (MK_COMB (@lem8299828 A B D P Q t f arg t' v' v pat e x) (@lem8299834 A B D P Q t f arg t' v' v pat e x)). Qed.
Lemma lem8299836 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term840 A B D P Q t f arg t' v' v pat e x) = (term855 A B D P Q t f arg t' v' v pat e x).
Proof. exact (EQ_MP (@lem8299835 A B D P Q t f arg t' v' v pat e x) (@lem8299820 A B D P Q t f arg t' v' v pat e x)). Qed.
Lemma lem8299837 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term842 A B D P Q t f arg v' v pat e x) = (term856 A B D P Q t f arg v' v pat e x).
Proof. exact (fun_ext (fun t' : Q => @lem8299836 A B D P Q t f arg t' v' v pat e x)). Qed.
Lemma lem8299838 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299839 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term843 A B D P Q t f arg v' v pat e x) = (term857 A B D P Q t f arg v' v pat e x).
Proof. exact (MK_COMB (@lem8299838 Q) (@lem8299837 A B D P Q t f arg v' v pat e x)). Qed.
Lemma lem8299840 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term828 A B D P Q t f arg v' v pat e x) = (term857 A B D P Q t f arg v' v pat e x).
Proof. exact (TRANS (@lem8299816 A B D P Q t f arg v' v pat e x) (@lem8299839 A B D P Q t f arg v' v pat e x)). Qed.
Lemma lem8299841 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term830 A B D P Q t f arg v pat e x) = (term858 A B D P Q t f arg v pat e x).
Proof. exact (fun_ext (fun v' : B => @lem8299840 A B D P Q t f arg v' v pat e x)). Qed.
Lemma lem8299842 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299843 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term831 A B D P Q t f arg v pat e x) = (term859 A B D P Q t f arg v pat e x).
Proof. exact (MK_COMB (@lem8299842 B) (@lem8299841 A B D P Q t f arg v pat e x)). Qed.
Lemma lem8299844 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term816 A B D P Q t f arg v pat e x) = (term859 A B D P Q t f arg v pat e x).
Proof. exact (TRANS (@lem8299796 A B D P Q t f arg v pat e x) (@lem8299843 A B D P Q t f arg v pat e x)). Qed.
Lemma lem8299845 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term818 A B D P Q f arg v pat e x) = (term860 A B D P Q f arg v pat e x).
Proof. exact (fun_ext (fun t : Q => @lem8299844 A B D P Q t f arg v pat e x)). Qed.
Lemma lem8299846 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8299847 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term819 A B D P Q f arg v pat e x) = (term861 A B D P Q f arg v pat e x).
Proof. exact (MK_COMB (@lem8299846 Q) (@lem8299845 A B D P Q f arg v pat e x)). Qed.
Lemma lem8299848 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) : (term798 A B D P Q f arg v pat e x) = (term861 A B D P Q f arg v pat e x).
Proof. exact (TRANS (@lem8299776 A B D P Q f arg v pat e x) (@lem8299847 A B D P Q f arg v pat e x)). Qed.
Lemma lem8299849 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term800 A B D P Q f arg pat e x) = (term862 A B D P Q f arg pat e x).
Proof. exact (fun_ext (fun v : B => @lem8299848 A B D P Q f arg v pat e x)). Qed.
Lemma lem8299850 {B : Type'} : (@ex B) = (@ex B).
Proof. exact (eq_refl (@ex B)). Qed.
Lemma lem8299851 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term801 A B D P Q f arg pat e x) = (term863 A B D P Q f arg pat e x).
Proof. exact (MK_COMB (@lem8299850 B) (@lem8299849 A B D P Q f arg pat e x)). Qed.
Lemma lem8299852 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term781 A B D P Q f arg pat e x) = (term863 A B D P Q f arg pat e x).
Proof. exact (TRANS (@lem8299749 A B D P Q f arg pat e x) (@lem8299851 A B D P Q f arg pat e x)). Qed.
Lemma lem8299853 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term529 A B D P Q f arg pat e x) = (term863 A B D P Q f arg pat e x).
Proof. exact (TRANS (@lem8299722 A B D P Q f arg pat e x) (@lem8299852 A B D P Q f arg pat e x)). Qed.
Lemma lem8299854 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term489 A B D P Q f arg pat e x) = (term863 A B D P Q f arg pat e x).
Proof. exact (TRANS (@lem8299273 A B D P Q f arg pat e x) (@lem8299853 A B D P Q f arg pat e x)). Qed.
Lemma lem8299855 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term389 A B D P Q f arg pat e x) = (term863 A B D P Q f arg pat e x).
Proof. exact (TRANS (@lem8298708 A B D P Q f arg pat e x) (@lem8299854 A B D P Q f arg pat e x)). Qed.
Lemma lem8299856 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) (h1 : term389 A B D P Q f arg pat e x) : term863 A B D P Q f arg pat e x.
Proof. exact (EQ_MP (@lem8299855 A B D P Q f arg pat e x) (@lem8298323 A B D P Q f arg pat e x h1)). Qed.
Lemma lem8299857 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) (h1 : term861 A B D P Q f arg v pat e x) : term861 A B D P Q f arg v pat e x.
Proof. exact (h1). Qed.
Lemma lem8299858 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (x : P) (h1 : term859 A B D P Q t f arg v pat e x) : term859 A B D P Q t f arg v pat e x.
Proof. exact (h1). Qed.
Lemma lem8299859 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) (h1 : term857 A B D P Q t f arg v' v pat e x) : term857 A B D P Q t f arg v' v pat e x.
Proof. exact (h1). Qed.
Lemma lem8299860 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (x : P) (h1 : term855 A B D P Q t f arg t' v' v pat e x) : term855 A B D P Q t f arg t' v' v pat e x.
Proof. exact (h1). Qed.
Lemma lem8299861 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (t'' : Q) (e : P -> D) (x : P) (h1 : term852 A B D P Q t f arg t' v' v pat t'' e x) : term852 A B D P Q t f arg t' v' v pat t'' e x.
Proof. exact (h1). Qed.
Lemma lem8299902 {A P Q : Type'} (t : Q) (arg : type1475 A P Q) (a : P) (u : Q) : ((arg a t) = (arg a u)) = ((arg a t) = (arg a u)).
Proof. exact (eq_refl ((arg a t) = (arg a u))). Qed.
Lemma lem8299927 {D P Q : Type'} (t : Q) (pat : Q -> D) (u : Q) (e : P -> D) (a : P) : (term391 D P Q t pat u e a) = (term391 D P Q t pat u e a).
Proof. exact (eq_refl (term391 D P Q t pat u e a)). Qed.
Lemma lem8299928 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8299935 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8299936 {A B P : Type'} (f : type560 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> Prop) f x).
Proof. exact (@lem8299935 (A -> B) (P -> Prop) f x). Qed.
Lemma lem8299937 {A B P : Type'} (p : type560 A B P) (f : A -> B) : (p f) = (@I ((A -> B) -> P -> Prop) p f).
Proof. exact (@lem8299936 A B P p f). Qed.
Lemma lem8299938 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8299939 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (p f a) = (@I ((A -> B) -> P -> Prop) p f a).
Proof. exact (MK_COMB (@lem8299937 A B P p f) (@lem8299938 P a)). Qed.
Lemma lem8299941 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8299942 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8299941 P Prop f x). Qed.
Lemma lem8299943 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (@I ((A -> B) -> P -> Prop) p f a) = (term864 A B P p f a).
Proof. exact (@lem8299942 P (@I ((A -> B) -> P -> Prop) p f) a). Qed.
Lemma lem8299945 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (p f a) = (term864 A B P p f a).
Proof. exact (TRANS (@lem8299939 A B P p f a) (@lem8299943 A B P p f a)). Qed.
Lemma lem8299946 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term865 A B P p f a) = (term866 A B P p f a).
Proof. exact (MK_COMB (@lem8299928) (@lem8299945 A B P p f a)). Qed.
Lemma lem8299947 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8299948 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term392 A B P p f a) = (term867 A B P p f a).
Proof. exact (MK_COMB (@lem8299947) (@lem8299946 A B P p f a)). Qed.
Lemma lem8299949 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (pat : Q -> D) (u : Q) (e : P -> D) (a : P) : (term394 A B D P Q p f t pat u e a) = (term868 A B D P Q p f t pat u e a).
Proof. exact (MK_COMB (@lem8299948 A B P p f a) (@lem8299927 D P Q t pat u e a)). Qed.
Lemma lem8299950 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8299951 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (pat : Q -> D) (u : Q) (e : P -> D) (a : P) : (term398 A B D P Q p f t pat u e a) = (term869 A B D P Q p f t pat u e a).
Proof. exact (MK_COMB (@lem8299950) (@lem8299949 A B D P Q p f t pat u e a)). Qed.
Lemma lem8299952 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) (u : Q) : (term400 A B D P Q p f pat e t arg a u) = (term870 A B D P Q p f pat e t arg a u).
Proof. exact (MK_COMB (@lem8299951 A B D P Q p f t pat u e a) (@lem8299902 A P Q t arg a u)). Qed.
Lemma lem8299953 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) : (term402 A B D P Q p f pat e t arg a) = (term871 A B D P Q p f pat e t arg a).
Proof. exact (fun_ext (fun u : Q => @lem8299952 A B D P Q p f pat e t arg a u)). Qed.
Lemma lem8299954 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8299955 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) : (term403 A B D P Q p f pat e t arg a) = (term872 A B D P Q p f pat e t arg a).
Proof. exact (MK_COMB (@lem8299954 Q) (@lem8299953 A B D P Q p f pat e t arg a)). Qed.
Lemma lem8299956 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (a : P) : (term404 A B D P Q p f pat e arg a) = (term873 A B D P Q p f pat e arg a).
Proof. exact (fun_ext (fun t : Q => @lem8299955 A B D P Q p f pat e t arg a)). Qed.
Lemma lem8299957 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8299958 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (a : P) : (term405 A B D P Q p f pat e arg a) = (term874 A B D P Q p f pat e arg a).
Proof. exact (MK_COMB (@lem8299957 Q) (@lem8299956 A B D P Q p f pat e arg a)). Qed.
Lemma lem8299959 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term406 A B D P Q p f pat e arg) = (term875 A B D P Q p f pat e arg).
Proof. exact (fun_ext (fun a : P => @lem8299958 A B D P Q p f pat e arg a)). Qed.
Lemma lem8299960 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8299961 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term407 A B D P Q p f pat e arg) = (term876 A B D P Q p f pat e arg).
Proof. exact (MK_COMB (@lem8299960 P) (@lem8299959 A B D P Q p f pat e arg)). Qed.
Lemma lem8299962 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term408 A B D P Q p pat e arg) = (term877 A B D P Q p pat e arg).
Proof. exact (fun_ext (fun f : A -> B => @lem8299961 A B D P Q p f pat e arg)). Qed.
Lemma lem8299963 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8299964 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term409 A B D P Q p pat e arg) = (term878 A B D P Q p pat e arg).
Proof. exact (MK_COMB (@lem8299963 A B) (@lem8299962 A B D P Q p pat e arg)). Qed.
Lemma lem8299965 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term878 A B D P Q p pat e arg.
Proof. exact (EQ_MP (@lem8299964 A B D P Q p pat e arg) (@lem8298445 A B D P Q p pat e arg h1)). Qed.
Lemma lem8300081 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8300082 {A B P : Type'} (f : type560 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> Prop) f x).
Proof. exact (@lem8300081 (A -> B) (P -> Prop) f x). Qed.
Lemma lem8300083 {A B P : Type'} (p : type560 A B P) (f : A -> B) : (p f) = (@I ((A -> B) -> P -> Prop) p f).
Proof. exact (@lem8300082 A B P p f). Qed.
Lemma lem8300084 {P : Type'} (x : P) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8300085 {A B P : Type'} (p : type560 A B P) (f : A -> B) (x : P) : (p f x) = (@I ((A -> B) -> P -> Prop) p f x).
Proof. exact (MK_COMB (@lem8300083 A B P p f) (@lem8300084 P x)). Qed.
Lemma lem8300087 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8300088 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8300087 P Prop f x). Qed.
Lemma lem8300089 {A B P : Type'} (p : type560 A B P) (f : A -> B) (x : P) : (@I ((A -> B) -> P -> Prop) p f x) = (term864 A B P p f x).
Proof. exact (@lem8300088 P (@I ((A -> B) -> P -> Prop) p f) x). Qed.
Lemma lem8300091 {A B P : Type'} (p : type560 A B P) (f : A -> B) (x : P) : (p f x) = (term864 A B P p f x).
Proof. exact (TRANS (@lem8300085 A B P p f x) (@lem8300089 A B P p f x)). Qed.
Lemma lem8300101 {D P Q : Type'} (pat : Q -> D) (t'' : Q) (e : P -> D) (x : P) : ((pat t'') = (e x)) = ((pat t'') = (e x)).
Proof. exact (eq_refl ((pat t'') = (e x))). Qed.
Lemma lem8300108 {B : Type'} (v' : B) (v : B) : (term421 B v' v) = (term421 B v' v).
Proof. exact (eq_refl (term421 B v' v)). Qed.
Lemma lem8300109 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8300118 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8300119 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (@lem8300118 A B f x). Qed.
Lemma lem8300121 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) : (term67 A B P Q f arg x t') = (term879 A B P Q f arg x t').
Proof. exact (@lem8300119 A B f (arg x t')). Qed.
Lemma lem8300122 {B : Type'} (v' : B) : v' = v'.
Proof. exact (eq_refl v'). Qed.
Lemma lem8300123 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) : (term880 A B P Q f arg x t') = (term881 A B P Q f arg x t').
Proof. exact (MK_COMB (@lem8300109 B) (@lem8300121 A B P Q f arg x t')). Qed.
Lemma lem8300124 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) : ((term67 A B P Q f arg x t') = v') = ((term879 A B P Q f arg x t') = v').
Proof. exact (MK_COMB (@lem8300123 A B P Q f arg x t') (@lem8300122 B v')). Qed.
Lemma lem8300135 {D P Q : Type'} (pat : Q -> D) (t' : Q) (e : P -> D) (x : P) : (term882 D P Q pat t' e x) = (term882 D P Q pat t' e x).
Proof. exact (eq_refl (term882 D P Q pat t' e x)). Qed.
Lemma lem8300136 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) : (term259 A B D P Q pat e f arg x t' v') = (term883 A B D P Q pat e f arg x t' v').
Proof. exact (MK_COMB (@lem8300135 D P Q pat t' e x) (@lem8300124 A B P Q f arg x t' v')). Qed.
Lemma lem8300137 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8300138 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) : (term549 A B D P Q pat e f arg x t' v') = (term884 A B D P Q pat e f arg x t' v').
Proof. exact (MK_COMB (@lem8300137) (@lem8300136 A B D P Q pat e f arg x t' v')). Qed.
Lemma lem8300139 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) : (term597 A B D P Q pat e f arg x t' v' v) = (term885 A B D P Q pat e f arg x t' v' v).
Proof. exact (MK_COMB (@lem8300138 A B D P Q pat e f arg x t' v') (@lem8300108 B v' v)). Qed.
Lemma lem8300140 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8300149 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8300150 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (@lem8300149 A B f x). Qed.
Lemma lem8300152 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : (term67 A B P Q f arg x t) = (term879 A B P Q f arg x t).
Proof. exact (@lem8300150 A B f (arg x t)). Qed.
Lemma lem8300153 {B : Type'} (v : B) : v = v.
Proof. exact (eq_refl v). Qed.
Lemma lem8300154 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : (term880 A B P Q f arg x t) = (term881 A B P Q f arg x t).
Proof. exact (MK_COMB (@lem8300140 B) (@lem8300152 A B P Q f arg x t)). Qed.
Lemma lem8300155 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : ((term67 A B P Q f arg x t) = v) = ((term879 A B P Q f arg x t) = v).
Proof. exact (MK_COMB (@lem8300154 A B P Q f arg x t) (@lem8300153 B v)). Qed.
Lemma lem8300166 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (x : P) : (term882 D P Q pat t e x) = (term882 D P Q pat t e x).
Proof. exact (eq_refl (term882 D P Q pat t e x)). Qed.
Lemma lem8300167 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term259 A B D P Q pat e f arg x t v) = (term883 A B D P Q pat e f arg x t v).
Proof. exact (MK_COMB (@lem8300166 D P Q pat t e x) (@lem8300155 A B P Q f arg x t v)). Qed.
Lemma lem8300168 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8300169 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term549 A B D P Q pat e f arg x t v) = (term884 A B D P Q pat e f arg x t v).
Proof. exact (MK_COMB (@lem8300168) (@lem8300167 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8300170 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) : (term633 A B D P Q t pat e f arg x t' v' v) = (term886 A B D P Q t pat e f arg x t' v' v).
Proof. exact (MK_COMB (@lem8300169 A B D P Q pat e f arg x t v) (@lem8300139 A B D P Q pat e f arg x t' v' v)). Qed.
Lemma lem8300171 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8300172 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8300181 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8300182 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (@lem8300181 A B f x). Qed.
Lemma lem8300184 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : (term67 A B P Q f arg x t) = (term879 A B P Q f arg x t).
Proof. exact (@lem8300182 A B f (arg x t)). Qed.
Lemma lem8300185 {B : Type'} (v : B) : v = v.
Proof. exact (eq_refl v). Qed.
Lemma lem8300186 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : (term880 A B P Q f arg x t) = (term881 A B P Q f arg x t).
Proof. exact (MK_COMB (@lem8300172 B) (@lem8300184 A B P Q f arg x t)). Qed.
Lemma lem8300187 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : ((term67 A B P Q f arg x t) = v) = ((term879 A B P Q f arg x t) = v).
Proof. exact (MK_COMB (@lem8300186 A B P Q f arg x t) (@lem8300185 B v)). Qed.
Lemma lem8300188 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term887 A B P Q f arg x t v) = (term888 A B P Q f arg x t v).
Proof. exact (MK_COMB (@lem8300171) (@lem8300187 A B P Q f arg x t v)). Qed.
Lemma lem8300201 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (x : P) : (term889 D P Q pat t e x) = (term889 D P Q pat t e x).
Proof. exact (eq_refl (term889 D P Q pat t e x)). Qed.
Lemma lem8300202 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term411 A B D P Q pat e f arg x t v) = (term890 A B D P Q pat e f arg x t v).
Proof. exact (MK_COMB (@lem8300201 D P Q pat t e x) (@lem8300188 A B P Q f arg x t v)). Qed.
Lemma lem8300203 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term419 A B D P Q pat e f arg x v) = (term891 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun t : Q => @lem8300202 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8300204 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8300205 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term420 A B D P Q pat e f arg x v) = (term892 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8300204 Q) (@lem8300203 A B D P Q pat e f arg x v)). Qed.
Lemma lem8300206 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term465 A B D P Q pat e f arg x) = (term893 A B D P Q pat e f arg x).
Proof. exact (fun_ext (fun v : B => @lem8300205 A B D P Q pat e f arg x v)). Qed.
Lemma lem8300207 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8300208 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term467 A B D P Q pat e f arg x) = (term894 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8300207 B) (@lem8300206 A B D P Q pat e f arg x)). Qed.
Lemma lem8300209 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8300210 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term469 A B D P Q pat e f arg x) = (term895 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8300209) (@lem8300208 A B D P Q pat e f arg x)). Qed.
Lemma lem8300211 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) : (term690 A B D P Q t pat e f arg x t' v' v) = (term896 A B D P Q t pat e f arg x t' v' v).
Proof. exact (MK_COMB (@lem8300210 A B D P Q pat e f arg x) (@lem8300170 A B D P Q t pat e f arg x t' v' v)). Qed.
Lemma lem8300212 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8300213 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) : (term756 A B D P Q t pat e f arg x t' v' v) = (term897 A B D P Q t pat e f arg x t' v' v).
Proof. exact (MK_COMB (@lem8300212) (@lem8300211 A B D P Q t pat e f arg x t' v' v)). Qed.
Lemma lem8300214 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (t'' : Q) (e : P -> D) (x : P) : (term769 A B D P Q t f arg t' v' v pat t'' e x) = (term898 A B D P Q t f arg t' v' v pat t'' e x).
Proof. exact (MK_COMB (@lem8300213 A B D P Q t pat e f arg x t' v' v) (@lem8300101 D P Q pat t'' e x)). Qed.
Lemma lem8300225 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (x : P) : (term474 D P Q pat t e x) = (term474 D P Q pat t e x).
Proof. exact (eq_refl (term474 D P Q pat t e x)). Qed.
Lemma lem8300226 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term476 D P Q pat e x) = (term476 D P Q pat e x).
Proof. exact (fun_ext (fun t : Q => @lem8300225 D P Q pat t e x)). Qed.
Lemma lem8300227 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8300228 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term477 D P Q pat e x) = (term477 D P Q pat e x).
Proof. exact (MK_COMB (@lem8300227 Q) (@lem8300226 D P Q pat e x)). Qed.
Lemma lem8300233 {B : Type'} (v' : B) (v : B) : (v' = v) = (v' = v).
Proof. exact (eq_refl (v' = v)). Qed.
Lemma lem8300234 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8300235 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8300244 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8300245 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (@lem8300244 A B f x). Qed.
Lemma lem8300247 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : (term67 A B P Q f arg x t) = (term879 A B P Q f arg x t).
Proof. exact (@lem8300245 A B f (arg x t)). Qed.
Lemma lem8300248 {B : Type'} (v' : B) : v' = v'.
Proof. exact (eq_refl v'). Qed.
Lemma lem8300249 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : (term880 A B P Q f arg x t) = (term881 A B P Q f arg x t).
Proof. exact (MK_COMB (@lem8300235 B) (@lem8300247 A B P Q f arg x t)). Qed.
Lemma lem8300250 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v' : B) : ((term67 A B P Q f arg x t) = v') = ((term879 A B P Q f arg x t) = v').
Proof. exact (MK_COMB (@lem8300249 A B P Q f arg x t) (@lem8300248 B v')). Qed.
Lemma lem8300251 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v' : B) : (term887 A B P Q f arg x t v') = (term888 A B P Q f arg x t v').
Proof. exact (MK_COMB (@lem8300234) (@lem8300250 A B P Q f arg x t v')). Qed.
Lemma lem8300264 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (x : P) : (term889 D P Q pat t e x) = (term889 D P Q pat t e x).
Proof. exact (eq_refl (term889 D P Q pat t e x)). Qed.
Lemma lem8300265 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v' : B) : (term411 A B D P Q pat e f arg x t v') = (term890 A B D P Q pat e f arg x t v').
Proof. exact (MK_COMB (@lem8300264 D P Q pat t e x) (@lem8300251 A B P Q f arg x t v')). Qed.
Lemma lem8300266 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) : (term419 A B D P Q pat e f arg x v') = (term891 A B D P Q pat e f arg x v').
Proof. exact (fun_ext (fun t : Q => @lem8300265 A B D P Q pat e f arg x t v')). Qed.
Lemma lem8300267 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8300268 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) : (term420 A B D P Q pat e f arg x v') = (term892 A B D P Q pat e f arg x v').
Proof. exact (MK_COMB (@lem8300267 Q) (@lem8300266 A B D P Q pat e f arg x v')). Qed.
Lemma lem8300269 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8300270 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) : (term431 A B D P Q pat e f arg x v') = (term899 A B D P Q pat e f arg x v').
Proof. exact (MK_COMB (@lem8300269) (@lem8300268 A B D P Q pat e f arg x v')). Qed.
Lemma lem8300271 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v' : B) (v : B) : (term433 A B D P Q pat e f arg x v' v) = (term900 A B D P Q pat e f arg x v' v).
Proof. exact (MK_COMB (@lem8300270 A B D P Q pat e f arg x v') (@lem8300233 B v' v)). Qed.
Lemma lem8300272 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term494 A B D P Q pat e f arg x v) = (term901 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun v' : B => @lem8300271 A B D P Q pat e f arg x v' v)). Qed.
Lemma lem8300273 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8300274 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term502 A B D P Q pat e f arg x v) = (term902 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8300273 B) (@lem8300272 A B D P Q pat e f arg x v)). Qed.
Lemma lem8300275 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8300276 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8300285 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8300286 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (@lem8300285 A B f x). Qed.
Lemma lem8300288 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : (term67 A B P Q f arg x t) = (term879 A B P Q f arg x t).
Proof. exact (@lem8300286 A B f (arg x t)). Qed.
Lemma lem8300289 {B : Type'} (v : B) : v = v.
Proof. exact (eq_refl v). Qed.
Lemma lem8300290 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : (term880 A B P Q f arg x t) = (term881 A B P Q f arg x t).
Proof. exact (MK_COMB (@lem8300276 B) (@lem8300288 A B P Q f arg x t)). Qed.
Lemma lem8300291 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : ((term67 A B P Q f arg x t) = v) = ((term879 A B P Q f arg x t) = v).
Proof. exact (MK_COMB (@lem8300290 A B P Q f arg x t) (@lem8300289 B v)). Qed.
Lemma lem8300292 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term887 A B P Q f arg x t v) = (term888 A B P Q f arg x t v).
Proof. exact (MK_COMB (@lem8300275) (@lem8300291 A B P Q f arg x t v)). Qed.
Lemma lem8300305 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (x : P) : (term889 D P Q pat t e x) = (term889 D P Q pat t e x).
Proof. exact (eq_refl (term889 D P Q pat t e x)). Qed.
Lemma lem8300306 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term411 A B D P Q pat e f arg x t v) = (term890 A B D P Q pat e f arg x t v).
Proof. exact (MK_COMB (@lem8300305 D P Q pat t e x) (@lem8300292 A B P Q f arg x t v)). Qed.
Lemma lem8300307 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term419 A B D P Q pat e f arg x v) = (term891 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun t : Q => @lem8300306 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8300308 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8300309 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term420 A B D P Q pat e f arg x v) = (term892 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8300308 Q) (@lem8300307 A B D P Q pat e f arg x v)). Qed.
Lemma lem8300310 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8300311 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term431 A B D P Q pat e f arg x v) = (term899 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8300310) (@lem8300309 A B D P Q pat e f arg x v)). Qed.
Lemma lem8300312 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term503 A B D P Q pat e f arg x v) = (term903 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8300311 A B D P Q pat e f arg x v) (@lem8300274 A B D P Q pat e f arg x v)). Qed.
Lemma lem8300313 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term504 A B D P Q pat e f arg x) = (term904 A B D P Q pat e f arg x).
Proof. exact (fun_ext (fun v : B => @lem8300312 A B D P Q pat e f arg x v)). Qed.
Lemma lem8300314 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8300315 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term505 A B D P Q pat e f arg x) = (term905 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8300314 B) (@lem8300313 A B D P Q pat e f arg x)). Qed.
Lemma lem8300316 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8300325 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8300326 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (@lem8300325 A B f x). Qed.
Lemma lem8300328 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : (term67 A B P Q f arg x t) = (term879 A B P Q f arg x t).
Proof. exact (@lem8300326 A B f (arg x t)). Qed.
Lemma lem8300329 {B : Type'} (v : B) : v = v.
Proof. exact (eq_refl v). Qed.
Lemma lem8300330 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : (term880 A B P Q f arg x t) = (term881 A B P Q f arg x t).
Proof. exact (MK_COMB (@lem8300316 B) (@lem8300328 A B P Q f arg x t)). Qed.
Lemma lem8300331 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : ((term67 A B P Q f arg x t) = v) = ((term879 A B P Q f arg x t) = v).
Proof. exact (MK_COMB (@lem8300330 A B P Q f arg x t) (@lem8300329 B v)). Qed.
Lemma lem8300342 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (x : P) : (term882 D P Q pat t e x) = (term882 D P Q pat t e x).
Proof. exact (eq_refl (term882 D P Q pat t e x)). Qed.
Lemma lem8300343 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term259 A B D P Q pat e f arg x t v) = (term883 A B D P Q pat e f arg x t v).
Proof. exact (MK_COMB (@lem8300342 D P Q pat t e x) (@lem8300331 A B P Q f arg x t v)). Qed.
Lemma lem8300344 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8300345 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term549 A B D P Q pat e f arg x t v) = (term884 A B D P Q pat e f arg x t v).
Proof. exact (MK_COMB (@lem8300344) (@lem8300343 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8300346 {A B D P Q : Type'} (t : Q) (v : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term551 A B D P Q t v pat e f arg x) = (term906 A B D P Q t v pat e f arg x).
Proof. exact (MK_COMB (@lem8300345 A B D P Q pat e f arg x t v) (@lem8300315 A B D P Q pat e f arg x)). Qed.
Lemma lem8300347 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8300348 {A B D P Q : Type'} (t : Q) (v : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term583 A B D P Q t v pat e f arg x) = (term907 A B D P Q t v pat e f arg x).
Proof. exact (MK_COMB (@lem8300347) (@lem8300346 A B D P Q t v pat e f arg x)). Qed.
Lemma lem8300349 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term585 A B D P Q t v f arg pat e x) = (term908 A B D P Q t v f arg pat e x).
Proof. exact (MK_COMB (@lem8300348 A B D P Q t v pat e f arg x) (@lem8300228 D P Q pat e x)). Qed.
Lemma lem8300350 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8300351 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term814 A B D P Q t v f arg pat e x) = (term909 A B D P Q t v f arg pat e x).
Proof. exact (MK_COMB (@lem8300350) (@lem8300349 A B D P Q t v f arg pat e x)). Qed.
Lemma lem8300352 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (t'' : Q) (e : P -> D) (x : P) : (term852 A B D P Q t f arg t' v' v pat t'' e x) = (term910 A B D P Q t f arg t' v' v pat t'' e x).
Proof. exact (MK_COMB (@lem8300351 A B D P Q t v f arg pat e x) (@lem8300214 A B D P Q t f arg t' v' v pat t'' e x)). Qed.
Lemma lem8300353 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (t'' : Q) (e : P -> D) (x : P) (h1 : term852 A B D P Q t f arg t' v' v pat t'' e x) : term910 A B D P Q t f arg t' v' v pat t'' e x.
Proof. exact (EQ_MP (@lem8300352 A B D P Q t f arg t' v' v pat t'' e x) (@lem8299861 A B D P Q t f arg t' v' v pat t'' e x h1)). Qed.
Lemma lem8300354 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) (h1 : term908 A B D P Q t v f arg pat e x) : term908 A B D P Q t v f arg pat e x.
Proof. exact (h1). Qed.
Lemma lem8300355 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (t'' : Q) (e : P -> D) (x : P) (h1 : term898 A B D P Q t f arg t' v' v pat t'' e x) : term898 A B D P Q t f arg t' v' v pat t'' e x.
Proof. exact (h1). Qed.
Lemma lem8300356 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) (h1 : term908 A B D P Q t v f arg pat e x) : term477 D P Q pat e x.
Proof. exact (proj2 (@lem8300354 A B D P Q t v f arg pat e x h1)). Qed.
Lemma lem8300357 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) (h1 : term908 A B D P Q t v f arg pat e x) : term906 A B D P Q t v pat e f arg x.
Proof. exact (proj1 (@lem8300354 A B D P Q t v f arg pat e x h1)). Qed.
Lemma lem8300359 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) (h1 : term908 A B D P Q t v f arg pat e x) : term883 A B D P Q pat e f arg x t v.
Proof. exact (proj1 (@lem8300357 A B D P Q t v f arg pat e x h1)). Qed.
Lemma lem8300363 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (t'' : Q) (e : P -> D) (x : P) (h1 : term898 A B D P Q t f arg t' v' v pat t'' e x) : term896 A B D P Q t pat e f arg x t' v' v.
Proof. exact (proj1 (@lem8300355 A B D P Q t f arg t' v' v pat t'' e x h1)). Qed.
Lemma lem8300364 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (h1 : term894 A B D P Q pat e f arg x) : term894 A B D P Q pat e f arg x.
Proof. exact (h1). Qed.
Lemma lem8300365 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) (h1 : term886 A B D P Q t pat e f arg x t' v' v) : term886 A B D P Q t pat e f arg x t' v' v.
Proof. exact (h1). Qed.
Lemma lem8300366 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) (h1 : term886 A B D P Q t pat e f arg x t' v' v) : term885 A B D P Q pat e f arg x t' v' v.
Proof. exact (proj2 (@lem8300365 A B D P Q t pat e f arg x t' v' v h1)). Qed.
Lemma lem8300367 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) (h1 : term886 A B D P Q t pat e f arg x t' v' v) : term883 A B D P Q pat e f arg x t v.
Proof. exact (proj1 (@lem8300365 A B D P Q t pat e f arg x t' v' v h1)). Qed.
Lemma lem8300369 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) (h1 : term886 A B D P Q t pat e f arg x t' v' v) : term883 A B D P Q pat e f arg x t' v'.
Proof. exact (proj1 (@lem8300366 A B D P Q t pat e f arg x t' v' v h1)). Qed.
Lemma lem8300493 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (x : P) : (term474 D P Q pat t e x) = (term474 D P Q pat t e x).
Proof. exact (eq_refl (term474 D P Q pat t e x)). Qed.
Lemma lem8300494 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term476 D P Q pat e x) = (term476 D P Q pat e x).
Proof. exact (fun_ext (fun t : Q => @lem8300493 D P Q pat t e x)). Qed.
Lemma lem8300495 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8300497 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (x : P) : (term477 D P Q pat e x) = (term477 D P Q pat e x).
Proof. exact (MK_COMB (@lem8300495 Q) (@lem8300494 D P Q pat e x)). Qed.
Lemma lem8300498 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) (h1 : term908 A B D P Q t v f arg pat e x) : term477 D P Q pat e x.
Proof. exact (EQ_MP (@lem8300497 D P Q pat e x) (@lem8300356 A B D P Q t v f arg pat e x h1)). Qed.
Lemma lem8300780 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v : B) : (term890 A B D P Q pat e f arg x t v) = (term890 A B D P Q pat e f arg x t v).
Proof. exact (eq_refl (term890 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8300781 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term891 A B D P Q pat e f arg x v) = (term891 A B D P Q pat e f arg x v).
Proof. exact (fun_ext (fun t : Q => @lem8300780 A B D P Q pat e f arg x t v)). Qed.
Lemma lem8300782 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8300783 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (v : B) : (term892 A B D P Q pat e f arg x v) = (term892 A B D P Q pat e f arg x v).
Proof. exact (MK_COMB (@lem8300782 Q) (@lem8300781 A B D P Q pat e f arg x v)). Qed.
Lemma lem8300784 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term893 A B D P Q pat e f arg x) = (term893 A B D P Q pat e f arg x).
Proof. exact (fun_ext (fun v : B => @lem8300783 A B D P Q pat e f arg x v)). Qed.
Lemma lem8300785 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8300787 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) : (term894 A B D P Q pat e f arg x) = (term894 A B D P Q pat e f arg x).
Proof. exact (MK_COMB (@lem8300785 B) (@lem8300784 A B D P Q pat e f arg x)). Qed.
Lemma lem8300788 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (h1 : term894 A B D P Q pat e f arg x) : term894 A B D P Q pat e f arg x.
Proof. exact (EQ_MP (@lem8300787 A B D P Q pat e f arg x) (@lem8300364 A B D P Q pat e f arg x h1)). Qed.
Lemma lem8300822 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) (u : Q) : (term870 A B D P Q p f pat e t arg a u) = (term870 A B D P Q p f pat e t arg a u).
Proof. exact (eq_refl (term870 A B D P Q p f pat e t arg a u)). Qed.
Lemma lem8300823 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) : (term871 A B D P Q p f pat e t arg a) = (term871 A B D P Q p f pat e t arg a).
Proof. exact (fun_ext (fun u : Q => @lem8300822 A B D P Q p f pat e t arg a u)). Qed.
Lemma lem8300824 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8300825 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) : (term872 A B D P Q p f pat e t arg a) = (term872 A B D P Q p f pat e t arg a).
Proof. exact (MK_COMB (@lem8300824 Q) (@lem8300823 A B D P Q p f pat e t arg a)). Qed.
Lemma lem8300826 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (a : P) : (term873 A B D P Q p f pat e arg a) = (term873 A B D P Q p f pat e arg a).
Proof. exact (fun_ext (fun t : Q => @lem8300825 A B D P Q p f pat e t arg a)). Qed.
Lemma lem8300827 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8300828 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (a : P) : (term874 A B D P Q p f pat e arg a) = (term874 A B D P Q p f pat e arg a).
Proof. exact (MK_COMB (@lem8300827 Q) (@lem8300826 A B D P Q p f pat e arg a)). Qed.
Lemma lem8300829 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term875 A B D P Q p f pat e arg) = (term875 A B D P Q p f pat e arg).
Proof. exact (fun_ext (fun a : P => @lem8300828 A B D P Q p f pat e arg a)). Qed.
Lemma lem8300830 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8300831 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term876 A B D P Q p f pat e arg) = (term876 A B D P Q p f pat e arg).
Proof. exact (MK_COMB (@lem8300830 P) (@lem8300829 A B D P Q p f pat e arg)). Qed.
Lemma lem8300832 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term877 A B D P Q p pat e arg) = (term877 A B D P Q p pat e arg).
Proof. exact (fun_ext (fun f : A -> B => @lem8300831 A B D P Q p f pat e arg)). Qed.
Lemma lem8300833 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8300835 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term878 A B D P Q p pat e arg) = (term878 A B D P Q p pat e arg).
Proof. exact (MK_COMB (@lem8300833 A B) (@lem8300832 A B D P Q p pat e arg)). Qed.
Lemma lem8300836 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term878 A B D P Q p pat e arg.
Proof. exact (EQ_MP (@lem8300835 A B D P Q p pat e arg) (@lem8299965 A B D P Q p pat e arg h1)). Qed.
Lemma lem8300961 {A B D P Q : Type'} (_111715 : Q) (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) (h1 : term908 A B D P Q t v f arg pat e x) : term911 D P Q pat e x _111715.
Proof. exact (@lem8300498 A B D P Q t v f arg pat e x h1 _111715). Qed.
Lemma lem8300962 {D P Q : Type'} (pat : Q -> D) (_111715 : Q) (e : P -> D) (x : P) : (term911 D P Q pat e x _111715) = (term474 D P Q pat _111715 e x).
Proof. exact (eq_refl (term911 D P Q pat e x _111715)). Qed.
Lemma lem8301006 {A B D P Q : Type'} (_111730 : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (h1 : term894 A B D P Q pat e f arg x) : term912 A B D P Q pat e f arg x _111730.
Proof. exact (@lem8300788 A B D P Q pat e f arg x h1 _111730). Qed.
Lemma lem8301007 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (_111730 : B) : (term912 A B D P Q pat e f arg x _111730) = (term892 A B D P Q pat e f arg x _111730).
Proof. exact (eq_refl (term912 A B D P Q pat e f arg x _111730)). Qed.
Lemma lem8301008 {A B D P Q : Type'} (_111730 : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (h1 : term894 A B D P Q pat e f arg x) : term892 A B D P Q pat e f arg x _111730.
Proof. exact (EQ_MP (@lem8301007 A B D P Q pat e f arg x _111730) (@lem8301006 A B D P Q _111730 pat e f arg x h1)). Qed.
Lemma lem8301009 {A B D P Q : Type'} (_111730 : B) (_111731 : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (h1 : term894 A B D P Q pat e f arg x) : term913 A B D P Q pat e f arg x _111730 _111731.
Proof. exact (@lem8301008 A B D P Q _111730 pat e f arg x h1 _111731). Qed.
Lemma lem8301010 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (_111731 : Q) (_111730 : B) : (term913 A B D P Q pat e f arg x _111730 _111731) = (term890 A B D P Q pat e f arg x _111731 _111730).
Proof. exact (eq_refl (term913 A B D P Q pat e f arg x _111730 _111731)). Qed.
Lemma lem8301018 {A B D P Q : Type'} (_111734 : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term914 A B D P Q p pat e arg _111734.
Proof. exact (@lem8300836 A B D P Q p pat e arg h1 _111734). Qed.
Lemma lem8301019 {A B D P Q : Type'} (p : type560 A B P) (_111734 : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term914 A B D P Q p pat e arg _111734) = (term876 A B D P Q p _111734 pat e arg).
Proof. exact (eq_refl (term914 A B D P Q p pat e arg _111734)). Qed.
Lemma lem8301020 {A B D P Q : Type'} (_111734 : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term876 A B D P Q p _111734 pat e arg.
Proof. exact (EQ_MP (@lem8301019 A B D P Q p _111734 pat e arg) (@lem8301018 A B D P Q _111734 p pat e arg h1)). Qed.
Lemma lem8301021 {A B D P Q : Type'} (_111734 : A -> B) (_111735 : P) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term915 A B D P Q p _111734 pat e arg _111735.
Proof. exact (@lem8301020 A B D P Q _111734 p pat e arg h1 _111735). Qed.
Lemma lem8301022 {A B D P Q : Type'} (p : type560 A B P) (_111734 : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (_111735 : P) : (term915 A B D P Q p _111734 pat e arg _111735) = (term874 A B D P Q p _111734 pat e arg _111735).
Proof. exact (eq_refl (term915 A B D P Q p _111734 pat e arg _111735)). Qed.
Lemma lem8301023 {A B D P Q : Type'} (_111734 : A -> B) (_111735 : P) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term874 A B D P Q p _111734 pat e arg _111735.
Proof. exact (EQ_MP (@lem8301022 A B D P Q p _111734 pat e arg _111735) (@lem8301021 A B D P Q _111734 _111735 p pat e arg h1)). Qed.
Lemma lem8301024 {A B D P Q : Type'} (_111734 : A -> B) (_111735 : P) (_111736 : Q) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term916 A B D P Q p _111734 pat e arg _111735 _111736.
Proof. exact (@lem8301023 A B D P Q _111734 _111735 p pat e arg h1 _111736). Qed.
Lemma lem8301025 {A B D P Q : Type'} (p : type560 A B P) (_111734 : A -> B) (pat : Q -> D) (e : P -> D) (_111736 : Q) (arg : type1475 A P Q) (_111735 : P) : (term916 A B D P Q p _111734 pat e arg _111735 _111736) = (term872 A B D P Q p _111734 pat e _111736 arg _111735).
Proof. exact (eq_refl (term916 A B D P Q p _111734 pat e arg _111735 _111736)). Qed.
Lemma lem8301026 {A B D P Q : Type'} (_111734 : A -> B) (_111736 : Q) (_111735 : P) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term872 A B D P Q p _111734 pat e _111736 arg _111735.
Proof. exact (EQ_MP (@lem8301025 A B D P Q p _111734 pat e _111736 arg _111735) (@lem8301024 A B D P Q _111734 _111735 _111736 p pat e arg h1)). Qed.
Lemma lem8301027 {A B D P Q : Type'} (_111734 : A -> B) (_111736 : Q) (_111735 : P) (_111737 : Q) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term917 A B D P Q p _111734 pat e _111736 arg _111735 _111737.
Proof. exact (@lem8301026 A B D P Q _111734 _111736 _111735 p pat e arg h1 _111737). Qed.
Lemma lem8301028 {A B D P Q : Type'} (p : type560 A B P) (_111734 : A -> B) (pat : Q -> D) (e : P -> D) (_111736 : Q) (arg : type1475 A P Q) (_111735 : P) (_111737 : Q) : (term917 A B D P Q p _111734 pat e _111736 arg _111735 _111737) = (term870 A B D P Q p _111734 pat e _111736 arg _111735 _111737).
Proof. exact (eq_refl (term917 A B D P Q p _111734 pat e _111736 arg _111735 _111737)). Qed.
Lemma lem8301029 {A B D P Q : Type'} (_111734 : A -> B) (_111736 : Q) (_111735 : P) (_111737 : Q) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term870 A B D P Q p _111734 pat e _111736 arg _111735 _111737.
Proof. exact (EQ_MP (@lem8301028 A B D P Q p _111734 pat e _111736 arg _111735 _111737) (@lem8301027 A B D P Q _111734 _111736 _111735 _111737 p pat e arg h1)). Qed.
Lemma lem8301161 {A B D P Q : Type'} (_111731 : Q) (_111730 : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (h1 : term894 A B D P Q pat e f arg x) : term890 A B D P Q pat e f arg x _111731 _111730.
Proof. exact (EQ_MP (@lem8301010 A B D P Q pat e f arg x _111731 _111730) (@lem8301009 A B D P Q _111730 _111731 pat e f arg x h1)). Qed.
Lemma lem8301169 {A B D P Q : Type'} (p : type560 A B P) (_111734 : A -> B) (pat : Q -> D) (e : P -> D) (_111736 : Q) (arg : type1475 A P Q) (_111735 : P) (_111737 : Q) : (term870 A B D P Q p _111734 pat e _111736 arg _111735 _111737) = (term918 A B D P Q p _111734 pat e _111736 arg _111735 _111737).
Proof. exact (@lem8291675 (term866 A B P p _111734 _111735) (term391 D P Q _111736 pat _111737 e _111735) ((arg _111735 _111736) = (arg _111735 _111737))). Qed.
Lemma lem8301176 {A D P Q : Type'} (pat : Q -> D) (e : P -> D) (_111736 : Q) (arg : type1475 A P Q) (_111735 : P) (_111737 : Q) : (term919 A D P Q pat e _111736 arg _111735 _111737) = (term920 A D P Q pat e _111736 arg _111735 _111737).
Proof. exact (@lem8291675 (term474 D P Q pat _111736 e _111735) (term474 D P Q pat _111737 e _111735) ((arg _111735 _111736) = (arg _111735 _111737))). Qed.
Lemma lem8301177 {A B P : Type'} (p : type560 A B P) (_111734 : A -> B) (_111735 : P) : (term867 A B P p _111734 _111735) = (term867 A B P p _111734 _111735).
Proof. exact (eq_refl (term867 A B P p _111734 _111735)). Qed.
Lemma lem8301180 {A B D P Q : Type'} (p : type560 A B P) (_111734 : A -> B) (pat : Q -> D) (e : P -> D) (_111736 : Q) (arg : type1475 A P Q) (_111735 : P) (_111737 : Q) : (term918 A B D P Q p _111734 pat e _111736 arg _111735 _111737) = (term921 A B D P Q p _111734 pat e _111736 arg _111735 _111737).
Proof. exact (MK_COMB (@lem8301177 A B P p _111734 _111735) (@lem8301176 A D P Q pat e _111736 arg _111735 _111737)). Qed.
Lemma lem8301182 {A B D P Q : Type'} (p : type560 A B P) (_111734 : A -> B) (pat : Q -> D) (e : P -> D) (_111736 : Q) (arg : type1475 A P Q) (_111735 : P) (_111737 : Q) : (term870 A B D P Q p _111734 pat e _111736 arg _111735 _111737) = (term921 A B D P Q p _111734 pat e _111736 arg _111735 _111737).
Proof. exact (TRANS (@lem8301169 A B D P Q p _111734 pat e _111736 arg _111735 _111737) (@lem8301180 A B D P Q p _111734 pat e _111736 arg _111735 _111737)). Qed.
Lemma lem8301207 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) (h1 : term886 A B D P Q t pat e f arg x t' v' v) : term421 B v' v.
Proof. exact (proj2 (@lem8300366 A B D P Q t pat e f arg x t' v' v h1)). Qed.
Lemma lem8301215 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) (h1 : term886 A B D P Q t pat e f arg x t' v' v) : (term879 A B P Q f arg x t) = v.
Proof. exact (proj2 (@lem8300367 A B D P Q t pat e f arg x t' v' v h1)). Qed.
Lemma lem8301328 {A B D P Q : Type'} (_111715 : Q) (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) (h1 : term908 A B D P Q t v f arg pat e x) : term474 D P Q pat _111715 e x.
Proof. exact (EQ_MP (@lem8300962 D P Q pat _111715 e x) (@lem8300961 A B D P Q _111715 t v f arg pat e x h1)). Qed.
Lemma lem8301357 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) (h1 : term886 A B D P Q t pat e f arg x t' v' v) : v = (term879 A B P Q f arg x t).
Proof. exact (SYM (@lem8301215 A B D P Q t pat e f arg x t' v' v h1)). Qed.
Lemma lem8301470 {B : Type'} (v' : B) : (term922 B v') = (term922 B v').
Proof. exact (eq_refl (term922 B v')). Qed.
Lemma lem8301471 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) (h1 : term886 A B D P Q t pat e f arg x t' v' v) : (term923 B v' v) = (term924 A B P Q v' f arg x t).
Proof. exact (MK_COMB (@lem8301470 B v') (@lem8301357 A B D P Q t pat e f arg x t' v' v h1)). Qed.
Lemma lem8301472 {A B P Q : Type'} (v' : B) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : (term924 A B P Q v' f arg x t) = (term925 A B P Q v' f arg x t).
Proof. exact (eq_refl (term924 A B P Q v' f arg x t)). Qed.
Lemma lem8301473 {B : Type'} (v' : B) (v : B) : (term926 B v' v) = (term926 B v' v).
Proof. exact (eq_refl (term926 B v' v)). Qed.
Lemma lem8301474 {A B P Q : Type'} (v : B) (v' : B) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : ((term923 B v' v) = (term924 A B P Q v' f arg x t)) = ((term923 B v' v) = (term925 A B P Q v' f arg x t)).
Proof. exact (MK_COMB (@lem8301473 B v' v) (@lem8301472 A B P Q v' f arg x t)). Qed.
Lemma lem8301475 {B : Type'} (v' : B) (v : B) : (term923 B v' v) = (term421 B v' v).
Proof. exact (eq_refl (term923 B v' v)). Qed.
Lemma lem8301476 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8301477 {B : Type'} (v' : B) (v : B) : (term926 B v' v) = (term927 B v' v).
Proof. exact (MK_COMB (@lem8301476) (@lem8301475 B v' v)). Qed.
Lemma lem8301478 {A B P Q : Type'} (v' : B) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : (term925 A B P Q v' f arg x t) = (term925 A B P Q v' f arg x t).
Proof. exact (eq_refl (term925 A B P Q v' f arg x t)). Qed.
Lemma lem8301479 {A B P Q : Type'} (v : B) (v' : B) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : ((term923 B v' v) = (term925 A B P Q v' f arg x t)) = ((term421 B v' v) = (term925 A B P Q v' f arg x t)).
Proof. exact (MK_COMB (@lem8301477 B v' v) (@lem8301478 A B P Q v' f arg x t)). Qed.
Lemma lem8301480 {A B P Q : Type'} (v : B) (v' : B) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : ((term923 B v' v) = (term924 A B P Q v' f arg x t)) = ((term421 B v' v) = (term925 A B P Q v' f arg x t)).
Proof. exact (TRANS (@lem8301474 A B P Q v v' f arg x t) (@lem8301479 A B P Q v v' f arg x t)). Qed.
Lemma lem8301481 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) (h1 : term886 A B D P Q t pat e f arg x t' v' v) : (term421 B v' v) = (term925 A B P Q v' f arg x t).
Proof. exact (EQ_MP (@lem8301480 A B P Q v v' f arg x t) (@lem8301471 A B D P Q t pat e f arg x t' v' v h1)). Qed.
Lemma lem8301482 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) (h1 : term886 A B D P Q t pat e f arg x t' v' v) : term925 A B P Q v' f arg x t.
Proof. exact (EQ_MP (@lem8301481 A B D P Q t pat e f arg x t' v' v h1) (@lem8301207 A B D P Q t pat e f arg x t' v' v h1)). Qed.
Lemma lem8301510 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) (h1 : term886 A B D P Q t pat e f arg x t' v' v) : (term879 A B P Q f arg x t') = v'.
Proof. exact (proj2 (@lem8300369 A B D P Q t pat e f arg x t' v' v h1)). Qed.
Lemma lem8301525 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) (h1 : term886 A B D P Q t pat e f arg x t' v' v) : v' = (term879 A B P Q f arg x t').
Proof. exact (SYM (@lem8301510 A B D P Q t pat e f arg x t' v' v h1)). Qed.
Lemma lem8301581 {A B D P Q : Type'} (_111734 : A -> B) (_111736 : Q) (_111735 : P) (_111737 : Q) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term921 A B D P Q p _111734 pat e _111736 arg _111735 _111737.
Proof. exact (EQ_MP (@lem8301182 A B D P Q p _111734 pat e _111736 arg _111735 _111737) (@lem8301029 A B D P Q _111734 _111736 _111735 _111737 p pat e arg h1)). Qed.
Lemma lem8301638 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : (term928 A B P Q f arg x t) = (term928 A B P Q f arg x t).
Proof. exact (eq_refl (term928 A B P Q f arg x t)). Qed.
Lemma lem8301639 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) (h1 : term886 A B D P Q t pat e f arg x t' v' v) : (term929 A B P Q f arg x t v') = (term930 A B P Q t f arg x t').
Proof. exact (MK_COMB (@lem8301638 A B P Q f arg x t) (@lem8301525 A B D P Q t pat e f arg x t' v' v h1)). Qed.
Lemma lem8301640 {A B P Q : Type'} (t' : Q) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : (term930 A B P Q t f arg x t') = (term931 A B P Q t' f arg x t).
Proof. exact (eq_refl (term930 A B P Q t f arg x t')). Qed.
Lemma lem8301641 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) (v' : B) : (term932 A B P Q f arg x t v') = (term932 A B P Q f arg x t v').
Proof. exact (eq_refl (term932 A B P Q f arg x t v')). Qed.
Lemma lem8301642 {A B P Q : Type'} (v' : B) (t' : Q) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : ((term929 A B P Q f arg x t v') = (term930 A B P Q t f arg x t')) = ((term929 A B P Q f arg x t v') = (term931 A B P Q t' f arg x t)).
Proof. exact (MK_COMB (@lem8301641 A B P Q f arg x t v') (@lem8301640 A B P Q t' f arg x t)). Qed.
Lemma lem8301643 {A B P Q : Type'} (v' : B) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : (term929 A B P Q f arg x t v') = (term925 A B P Q v' f arg x t).
Proof. exact (eq_refl (term929 A B P Q f arg x t v')). Qed.
Lemma lem8301644 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8301645 {A B P Q : Type'} (v' : B) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : (term932 A B P Q f arg x t v') = (term933 A B P Q v' f arg x t).
Proof. exact (MK_COMB (@lem8301644) (@lem8301643 A B P Q v' f arg x t)). Qed.
Lemma lem8301646 {A B P Q : Type'} (t' : Q) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : (term931 A B P Q t' f arg x t) = (term931 A B P Q t' f arg x t).
Proof. exact (eq_refl (term931 A B P Q t' f arg x t)). Qed.
Lemma lem8301647 {A B P Q : Type'} (v' : B) (t' : Q) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : ((term929 A B P Q f arg x t v') = (term931 A B P Q t' f arg x t)) = ((term925 A B P Q v' f arg x t) = (term931 A B P Q t' f arg x t)).
Proof. exact (MK_COMB (@lem8301645 A B P Q v' f arg x t) (@lem8301646 A B P Q t' f arg x t)). Qed.
Lemma lem8301648 {A B P Q : Type'} (v' : B) (t' : Q) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : ((term929 A B P Q f arg x t v') = (term930 A B P Q t f arg x t')) = ((term925 A B P Q v' f arg x t) = (term931 A B P Q t' f arg x t)).
Proof. exact (TRANS (@lem8301642 A B P Q v' t' f arg x t) (@lem8301647 A B P Q v' t' f arg x t)). Qed.
Lemma lem8301649 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) (h1 : term886 A B D P Q t pat e f arg x t' v' v) : (term925 A B P Q v' f arg x t) = (term931 A B P Q t' f arg x t).
Proof. exact (EQ_MP (@lem8301648 A B P Q v' t' f arg x t) (@lem8301639 A B D P Q t pat e f arg x t' v' v h1)). Qed.
Lemma lem8301650 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) (h1 : term886 A B D P Q t pat e f arg x t' v' v) : term931 A B P Q t' f arg x t.
Proof. exact (EQ_MP (@lem8301649 A B D P Q t pat e f arg x t' v' v h1) (@lem8301482 A B D P Q t pat e f arg x t' v' v h1)). Qed.
Lemma lem8301864 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) (h1 : term908 A B D P Q t v f arg pat e x) : (pat t) = (e x).
Proof. exact (proj1 (@lem8300359 A B D P Q t v f arg pat e x h1)). Qed.
Lemma lem8301865 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) (h1 : term908 A B D P Q t v f arg pat e x) : term934 D P Q pat t e x.
Proof. exact (fun h0 : term474 D P Q pat t e x => @lem8301864 A B D P Q t v f arg pat e x h1). Qed.
Lemma lem8301867 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8301868 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (x : P) : (term934 D P Q pat t e x) = ((pat t) = (e x)).
Proof. exact (@lem8301867 ((pat t) = (e x))). Qed.
Lemma lem8301869 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) (h1 : term908 A B D P Q t v f arg pat e x) : (pat t) = (e x).
Proof. exact (EQ_MP (@lem8301868 D P Q pat t e x) (@lem8301865 A B D P Q t v f arg pat e x h1)). Qed.
Lemma lem8301872 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem8301874 {D P Q : Type'} (pat : Q -> D) (_111715 : Q) (e : P -> D) (x : P) : (term474 D P Q pat _111715 e x) = (term936 D P Q pat _111715 e x).
Proof. exact (@lem8301872 ((pat _111715) = (e x))). Qed.
Lemma lem8301877 {A B D P Q : Type'} (_111715 : Q) (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) (h1 : term908 A B D P Q t v f arg pat e x) : term936 D P Q pat _111715 e x.
Proof. exact (EQ_MP (@lem8301874 D P Q pat _111715 e x) (@lem8301328 A B D P Q _111715 t v f arg pat e x h1)). Qed.
Lemma lem8301878 {A B D P Q : Type'} (_111715 : Q) (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) (h1 : term908 A B D P Q t v f arg pat e x) : term936 D P Q pat _111715 e x.
Proof. exact (@lem8301877 A B D P Q _111715 t v f arg pat e x h1). Qed.
Lemma lem8301879 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) (h1 : term908 A B D P Q t v f arg pat e x) : term936 D P Q pat t e x.
Proof. exact (@lem8301878 A B D P Q t t v f arg pat e x h1). Qed.
Lemma lem8301882 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) (h1 : term908 A B D P Q t v f arg pat e x) : False.
Proof. exact (@lem8301879 A B D P Q t v f arg pat e x h1 (@lem8301869 A B D P Q t v f arg pat e x h1)). Qed.
Lemma lem8301883 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) (h1 : term908 A B D P Q t v f arg pat e x) : term937.
Proof. exact (fun h0 : ~ False => @lem8301882 A B D P Q t v f arg pat e x h1). Qed.
Lemma lem8301885 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8301886 : term937 = False.
Proof. exact (@lem8301885 False). Qed.
Lemma lem8302073 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (t'' : Q) (e : P -> D) (x : P) (h1 : term898 A B D P Q t f arg t' v' v pat t'' e x) : (pat t'') = (e x).
Proof. exact (proj2 (@lem8300355 A B D P Q t f arg t' v' v pat t'' e x h1)). Qed.
Lemma lem8302074 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (t'' : Q) (e : P -> D) (x : P) (h1 : term898 A B D P Q t f arg t' v' v pat t'' e x) : term934 D P Q pat t'' e x.
Proof. exact (fun h0 : term474 D P Q pat t'' e x => @lem8302073 A B D P Q t f arg t' v' v pat t'' e x h1). Qed.
Lemma lem8302076 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8302077 {D P Q : Type'} (pat : Q -> D) (t'' : Q) (e : P -> D) (x : P) : (term934 D P Q pat t'' e x) = ((pat t'') = (e x)).
Proof. exact (@lem8302076 ((pat t'') = (e x))). Qed.
Lemma lem8302078 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (t'' : Q) (e : P -> D) (x : P) (h1 : term898 A B D P Q t f arg t' v' v pat t'' e x) : (pat t'') = (e x).
Proof. exact (EQ_MP (@lem8302077 D P Q pat t'' e x) (@lem8302074 A B D P Q t f arg t' v' v pat t'' e x h1)). Qed.
Lemma lem8302080 {B : Type'} (x : B) : x = x.
Proof. exact (@lem21386 B x). Qed.
Lemma lem8302081 {B : Type'} (x : B) : x = x.
Proof. exact (@lem8302080 B x). Qed.
Lemma lem8302082 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t'' : Q) : (term879 A B P Q f arg x t'') = (term879 A B P Q f arg x t'').
Proof. exact (@lem8302081 B (term879 A B P Q f arg x t'')). Qed.
Lemma lem8302083 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t'' : Q) : term938 A B P Q f arg x t''.
Proof. exact (fun h0 : term939 A B P Q f arg x t'' => @lem8302082 A B P Q f arg x t''). Qed.
Lemma lem8302085 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8302086 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t'' : Q) : (term938 A B P Q f arg x t'') = ((term879 A B P Q f arg x t'') = (term879 A B P Q f arg x t'')).
Proof. exact (@lem8302085 ((term879 A B P Q f arg x t'') = (term879 A B P Q f arg x t''))). Qed.
Lemma lem8302087 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (x : P) (t'' : Q) : (term879 A B P Q f arg x t'') = (term879 A B P Q f arg x t'').
Proof. exact (EQ_MP (@lem8302086 A B P Q f arg x t'') (@lem8302083 A B P Q f arg x t'')). Qed.
Lemma lem8302089 (a : Prop) (b : Prop) : (term940 a b) = (term941 a b).
Proof. exact (EQ_MP (@lem20904 a b) (@lem21007 a b)). Qed.
Lemma lem8302090 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (_111731 : Q) (_111730 : B) : (term890 A B D P Q pat e f arg x _111731 _111730) = (term942 A B D P Q pat e f arg x _111731 _111730).
Proof. exact (@lem8302089 ((pat _111731) = (e x)) ((term879 A B P Q f arg x _111731) = _111730)). Qed.
Lemma lem8302092 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem8302093 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (_111731 : Q) (_111730 : B) : (term942 A B D P Q pat e f arg x _111731 _111730) = (term943 A B D P Q pat e f arg x _111731 _111730).
Proof. exact (@lem8302092 (term883 A B D P Q pat e f arg x _111731 _111730)). Qed.
Lemma lem8302094 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (_111731 : Q) (_111730 : B) : (term890 A B D P Q pat e f arg x _111731 _111730) = (term943 A B D P Q pat e f arg x _111731 _111730).
Proof. exact (TRANS (@lem8302090 A B D P Q pat e f arg x _111731 _111730) (@lem8302093 A B D P Q pat e f arg x _111731 _111730)). Qed.
Lemma lem8302096 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (t'' : Q) (e : P -> D) (x : P) (h1 : term898 A B D P Q t f arg t' v' v pat t'' e x) : term944 A B D P Q pat e f arg x t''.
Proof. exact (conj (@lem8302078 A B D P Q t f arg t' v' v pat t'' e x h1) (@lem8302087 A B P Q f arg x t'')). Qed.
Lemma lem8302098 {A B D P Q : Type'} (_111731 : Q) (_111730 : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (h1 : term894 A B D P Q pat e f arg x) : term943 A B D P Q pat e f arg x _111731 _111730.
Proof. exact (EQ_MP (@lem8302094 A B D P Q pat e f arg x _111731 _111730) (@lem8301161 A B D P Q _111731 _111730 pat e f arg x h1)). Qed.
Lemma lem8302099 {A B D P Q : Type'} (_111731 : Q) (_111730 : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (h1 : term894 A B D P Q pat e f arg x) : term943 A B D P Q pat e f arg x _111731 _111730.
Proof. exact (@lem8302098 A B D P Q _111731 _111730 pat e f arg x h1). Qed.
Lemma lem8302100 {A B D P Q : Type'} (t'' : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (h1 : term894 A B D P Q pat e f arg x) : term945 A B D P Q pat e f arg x t''.
Proof. exact (@lem8302099 A B D P Q t'' (term879 A B P Q f arg x t'') pat e f arg x h1). Qed.
Lemma lem8302103 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (t'' : Q) (e : P -> D) (x : P) (h1 : term894 A B D P Q pat e f arg x) (h2 : term898 A B D P Q t f arg t' v' v pat t'' e x) : False.
Proof. exact (@lem8302100 A B D P Q t'' pat e f arg x h1 (@lem8302096 A B D P Q t f arg t' v' v pat t'' e x h2)). Qed.
Lemma lem8302104 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (t'' : Q) (e : P -> D) (x : P) (h1 : term894 A B D P Q pat e f arg x) (h2 : term898 A B D P Q t f arg t' v' v pat t'' e x) : term937.
Proof. exact (fun h0 : ~ False => @lem8302103 A B D P Q t f arg t' v' v pat t'' e x h1 h2). Qed.
Lemma lem8302106 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8302107 : term937 = False.
Proof. exact (@lem8302106 False). Qed.
Lemma lem8302108 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (t'' : Q) (e : P -> D) (x : P) (h1 : term894 A B D P Q pat e f arg x) (h2 : term898 A B D P Q t f arg t' v' v pat t'' e x) : False.
Proof. exact (EQ_MP (@lem8302107) (@lem8302104 A B D P Q t f arg t' v' v pat t'' e x h1 h2)). Qed.
Lemma lem8302180 {A B : Type'} : (@I (A -> B)) = (@I (A -> B)).
Proof. exact (eq_refl (@I (A -> B))). Qed.
Lemma lem8302181 {A B : Type'} (_111904 : A -> B) (_111906 : A -> B) (h1 : _111904 = _111906) : _111904 = _111906.
Proof. exact (h1). Qed.
Lemma lem8302182 {A : Type'} (_111905 : A) (_111907 : A) (h1 : _111905 = _111907) : _111905 = _111907.
Proof. exact (h1). Qed.
Lemma lem8302183 {A B : Type'} (_111904 : A -> B) (_111906 : A -> B) (h1 : _111904 = _111906) : (@I (A -> B) _111904) = (@I (A -> B) _111906).
Proof. exact (MK_COMB (@lem8302180 A B) (@lem8302181 A B _111904 _111906 h1)). Qed.
Lemma lem8302184 {A B : Type'} (_111905 : A) (_111907 : A) (_111904 : A -> B) (_111906 : A -> B) (h1 : _111905 = _111907) (h2 : _111904 = _111906) : (@I (A -> B) _111904 _111905) = (@I (A -> B) _111906 _111907).
Proof. exact (MK_COMB (@lem8302183 A B _111904 _111906 h2) (@lem8302182 A _111905 _111907 h1)). Qed.
Lemma lem8302185 {A B : Type'} (_111904 : A -> B) (_111906 : A -> B) (_111905 : A) (_111907 : A) (h1 : _111905 = _111907) : term946 A B _111904 _111905 _111906 _111907.
Proof. exact (fun h0 : _111904 = _111906 => @lem8302184 A B _111905 _111907 _111904 _111906 h1 h0). Qed.
Lemma lem8302187 (a : Prop) (b : Prop) : (a -> b) = (term947 a b).
Proof. exact (EQ_MP (@lem21394 a b) (@lem21490 a b)). Qed.
Lemma lem8302188 {A B : Type'} (_111904 : A -> B) (_111905 : A) (_111906 : A -> B) (_111907 : A) : (term946 A B _111904 _111905 _111906 _111907) = (term948 A B _111904 _111905 _111906 _111907).
Proof. exact (@lem8302187 (_111904 = _111906) ((@I (A -> B) _111904 _111905) = (@I (A -> B) _111906 _111907))). Qed.
Lemma lem8302189 {A B : Type'} (_111904 : A -> B) (_111906 : A -> B) (_111905 : A) (_111907 : A) (h1 : _111905 = _111907) : term948 A B _111904 _111905 _111906 _111907.
Proof. exact (EQ_MP (@lem8302188 A B _111904 _111905 _111906 _111907) (@lem8302185 A B _111904 _111906 _111905 _111907 h1)). Qed.
Lemma lem8302190 {A B : Type'} (_111904 : A -> B) (_111905 : A) (_111906 : A -> B) (_111907 : A) : term949 A B _111904 _111905 _111906 _111907.
Proof. exact (fun h0 : _111905 = _111907 => @lem8302189 A B _111904 _111906 _111905 _111907 h0). Qed.
Lemma lem8302192 (a : Prop) (b : Prop) : (a -> b) = (term947 a b).
Proof. exact (EQ_MP (@lem21394 a b) (@lem21490 a b)). Qed.
Lemma lem8302193 {A B : Type'} (_111904 : A -> B) (_111905 : A) (_111906 : A -> B) (_111907 : A) : (term949 A B _111904 _111905 _111906 _111907) = (term950 A B _111904 _111905 _111906 _111907).
Proof. exact (@lem8302192 (_111905 = _111907) (term948 A B _111904 _111905 _111906 _111907)). Qed.
Lemma lem8302194 {A B : Type'} (_111904 : A -> B) (_111905 : A) (_111906 : A -> B) (_111907 : A) : term950 A B _111904 _111905 _111906 _111907.
Proof. exact (EQ_MP (@lem8302193 A B _111904 _111905 _111906 _111907) (@lem8302190 A B _111904 _111905 _111906 _111907)). Qed.
Lemma lem8302294 {A B P : Type'} (p : type560 A B P) (f : A -> B) (x : P) (h1 : p f x) : term864 A B P p f x.
Proof. exact (EQ_MP (@lem8300091 A B P p f x) (@lem8298597 A B P p f x h1)). Qed.
Lemma lem8302295 {A B P : Type'} (p : type560 A B P) (f : A -> B) (x : P) (h1 : p f x) : term951 A B P p f x.
Proof. exact (fun h0 : term866 A B P p f x => @lem8302294 A B P p f x h1). Qed.
Lemma lem8302297 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8302298 {A B P : Type'} (p : type560 A B P) (f : A -> B) (x : P) : (term951 A B P p f x) = (term864 A B P p f x).
Proof. exact (@lem8302297 (term864 A B P p f x)). Qed.
Lemma lem8302299 {A B P : Type'} (p : type560 A B P) (f : A -> B) (x : P) (h1 : p f x) : term864 A B P p f x.
Proof. exact (EQ_MP (@lem8302298 A B P p f x) (@lem8302295 A B P p f x h1)). Qed.
Lemma lem8302301 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) (h1 : term886 A B D P Q t pat e f arg x t' v' v) : (pat t') = (e x).
Proof. exact (proj1 (@lem8300369 A B D P Q t pat e f arg x t' v' v h1)). Qed.
Lemma lem8302302 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) (h1 : term886 A B D P Q t pat e f arg x t' v' v) : term934 D P Q pat t' e x.
Proof. exact (fun h0 : term474 D P Q pat t' e x => @lem8302301 A B D P Q t pat e f arg x t' v' v h1). Qed.
Lemma lem8302304 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8302305 {D P Q : Type'} (pat : Q -> D) (t' : Q) (e : P -> D) (x : P) : (term934 D P Q pat t' e x) = ((pat t') = (e x)).
Proof. exact (@lem8302304 ((pat t') = (e x))). Qed.
Lemma lem8302306 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) (h1 : term886 A B D P Q t pat e f arg x t' v' v) : (pat t') = (e x).
Proof. exact (EQ_MP (@lem8302305 D P Q pat t' e x) (@lem8302302 A B D P Q t pat e f arg x t' v' v h1)). Qed.
Lemma lem8302308 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) (h1 : term886 A B D P Q t pat e f arg x t' v' v) : (pat t) = (e x).
Proof. exact (proj1 (@lem8300367 A B D P Q t pat e f arg x t' v' v h1)). Qed.
Lemma lem8302309 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) (h1 : term886 A B D P Q t pat e f arg x t' v' v) : term934 D P Q pat t e x.
Proof. exact (fun h0 : term474 D P Q pat t e x => @lem8302308 A B D P Q t pat e f arg x t' v' v h1). Qed.
Lemma lem8302311 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8302312 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (x : P) : (term934 D P Q pat t e x) = ((pat t) = (e x)).
Proof. exact (@lem8302311 ((pat t) = (e x))). Qed.
Lemma lem8302313 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) (h1 : term886 A B D P Q t pat e f arg x t' v' v) : (pat t) = (e x).
Proof. exact (EQ_MP (@lem8302312 D P Q pat t e x) (@lem8302309 A B D P Q t pat e f arg x t' v' v h1)). Qed.
Lemma lem8302319 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8302320 {A B D P Q : Type'} (p : type560 A B P) (_111734 : A -> B) (pat : Q -> D) (e : P -> D) (_111736 : Q) (arg : type1475 A P Q) (_111735 : P) (_111737 : Q) : (term921 A B D P Q p _111734 pat e _111736 arg _111735 _111737) = (term952 A B D P Q p _111734 pat e _111736 arg _111735 _111737).
Proof. exact (@lem8302319 (term474 D P Q pat _111736 e _111735) (term866 A B P p _111734 _111735) (term953 A D P Q pat e _111736 arg _111735 _111737)). Qed.
Lemma lem8302336 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8302337 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (p : type560 A B P) (_111734 : A -> B) (_111736 : Q) (arg : type1475 A P Q) (_111735 : P) (_111737 : Q) : (term954 A B D P Q p _111734 pat e _111736 arg _111735 _111737) = (term955 A B D P Q pat e p _111734 _111736 arg _111735 _111737).
Proof. exact (@lem8302336 (term474 D P Q pat _111737 e _111735) (term866 A B P p _111734 _111735) ((arg _111735 _111736) = (arg _111735 _111737))). Qed.
Lemma lem8302353 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8302354 {A B P Q : Type'} (_111736 : Q) (arg : type1475 A P Q) (_111737 : Q) (p : type560 A B P) (_111734 : A -> B) (_111735 : P) : (term956 A B P Q p _111734 _111736 arg _111735 _111737) = (term957 A B P Q _111736 arg _111737 p _111734 _111735).
Proof. exact (@lem8302353 ((arg _111735 _111736) = (arg _111735 _111737)) (term866 A B P p _111734 _111735)). Qed.
Lemma lem8302362 {D P Q : Type'} (pat : Q -> D) (_111737 : Q) (e : P -> D) (_111735 : P) : (term889 D P Q pat _111737 e _111735) = (term889 D P Q pat _111737 e _111735).
Proof. exact (eq_refl (term889 D P Q pat _111737 e _111735)). Qed.
Lemma lem8302363 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (_111736 : Q) (arg : type1475 A P Q) (_111737 : Q) (p : type560 A B P) (_111734 : A -> B) (_111735 : P) : (term955 A B D P Q pat e p _111734 _111736 arg _111735 _111737) = (term958 A B D P Q pat e _111736 arg _111737 p _111734 _111735).
Proof. exact (MK_COMB (@lem8302362 D P Q pat _111737 e _111735) (@lem8302354 A B P Q _111736 arg _111737 p _111734 _111735)). Qed.
Lemma lem8302367 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8302368 {A B D P Q : Type'} (_111736 : Q) (arg : type1475 A P Q) (pat : Q -> D) (_111737 : Q) (e : P -> D) (p : type560 A B P) (_111734 : A -> B) (_111735 : P) : (term958 A B D P Q pat e _111736 arg _111737 p _111734 _111735) = (term959 A B D P Q _111736 arg pat _111737 e p _111734 _111735).
Proof. exact (@lem8302367 ((arg _111735 _111736) = (arg _111735 _111737)) (term474 D P Q pat _111737 e _111735) (term866 A B P p _111734 _111735)). Qed.
Lemma lem8302388 {A B D P Q : Type'} (_111736 : Q) (arg : type1475 A P Q) (pat : Q -> D) (_111737 : Q) (e : P -> D) (p : type560 A B P) (_111734 : A -> B) (_111735 : P) : (term955 A B D P Q pat e p _111734 _111736 arg _111735 _111737) = (term959 A B D P Q _111736 arg pat _111737 e p _111734 _111735).
Proof. exact (TRANS (@lem8302363 A B D P Q pat e _111736 arg _111737 p _111734 _111735) (@lem8302368 A B D P Q _111736 arg pat _111737 e p _111734 _111735)). Qed.
Lemma lem8302389 {A B D P Q : Type'} (_111736 : Q) (arg : type1475 A P Q) (pat : Q -> D) (_111737 : Q) (e : P -> D) (p : type560 A B P) (_111734 : A -> B) (_111735 : P) : (term954 A B D P Q p _111734 pat e _111736 arg _111735 _111737) = (term959 A B D P Q _111736 arg pat _111737 e p _111734 _111735).
Proof. exact (TRANS (@lem8302337 A B D P Q pat e p _111734 _111736 arg _111735 _111737) (@lem8302388 A B D P Q _111736 arg pat _111737 e p _111734 _111735)). Qed.
Lemma lem8302390 {D P Q : Type'} (pat : Q -> D) (_111736 : Q) (e : P -> D) (_111735 : P) : (term889 D P Q pat _111736 e _111735) = (term889 D P Q pat _111736 e _111735).
Proof. exact (eq_refl (term889 D P Q pat _111736 e _111735)). Qed.
Lemma lem8302391 {A B D P Q : Type'} (_111736 : Q) (arg : type1475 A P Q) (pat : Q -> D) (_111737 : Q) (e : P -> D) (p : type560 A B P) (_111734 : A -> B) (_111735 : P) : (term952 A B D P Q p _111734 pat e _111736 arg _111735 _111737) = (term960 A B D P Q _111736 arg pat _111737 e p _111734 _111735).
Proof. exact (MK_COMB (@lem8302390 D P Q pat _111736 e _111735) (@lem8302389 A B D P Q _111736 arg pat _111737 e p _111734 _111735)). Qed.
Lemma lem8302395 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8302396 {A B D P Q : Type'} (arg : type1475 A P Q) (_111736 : Q) (pat : Q -> D) (_111737 : Q) (e : P -> D) (p : type560 A B P) (_111734 : A -> B) (_111735 : P) : (term960 A B D P Q _111736 arg pat _111737 e p _111734 _111735) = (term961 A B D P Q arg _111736 pat _111737 e p _111734 _111735).
Proof. exact (@lem8302395 ((arg _111735 _111736) = (arg _111735 _111737)) (term474 D P Q pat _111736 e _111735) (term962 A B D P Q pat _111737 e p _111734 _111735)). Qed.
Lemma lem8302428 {A B D P Q : Type'} (arg : type1475 A P Q) (_111736 : Q) (pat : Q -> D) (_111737 : Q) (e : P -> D) (p : type560 A B P) (_111734 : A -> B) (_111735 : P) : (term952 A B D P Q p _111734 pat e _111736 arg _111735 _111737) = (term961 A B D P Q arg _111736 pat _111737 e p _111734 _111735).
Proof. exact (TRANS (@lem8302391 A B D P Q _111736 arg pat _111737 e p _111734 _111735) (@lem8302396 A B D P Q arg _111736 pat _111737 e p _111734 _111735)). Qed.
Lemma lem8302429 {A B D P Q : Type'} (arg : type1475 A P Q) (_111736 : Q) (pat : Q -> D) (_111737 : Q) (e : P -> D) (p : type560 A B P) (_111734 : A -> B) (_111735 : P) : (term921 A B D P Q p _111734 pat e _111736 arg _111735 _111737) = (term961 A B D P Q arg _111736 pat _111737 e p _111734 _111735).
Proof. exact (TRANS (@lem8302320 A B D P Q p _111734 pat e _111736 arg _111735 _111737) (@lem8302428 A B D P Q arg _111736 pat _111737 e p _111734 _111735)). Qed.
Lemma lem8302430 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8302431 {A B D P Q : Type'} (arg : type1475 A P Q) (_111736 : Q) (pat : Q -> D) (_111737 : Q) (e : P -> D) (p : type560 A B P) (_111734 : A -> B) (_111735 : P) : (term963 A B D P Q p _111734 pat e _111736 arg _111735 _111737) = (term964 A B D P Q arg _111736 pat _111737 e p _111734 _111735).
Proof. exact (MK_COMB (@lem8302430) (@lem8302429 A B D P Q arg _111736 pat _111737 e p _111734 _111735)). Qed.
Lemma lem8302447 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8302448 {A B D P Q : Type'} (_111736 : Q) (p : type560 A B P) (_111734 : A -> B) (pat : Q -> D) (_111737 : Q) (e : P -> D) (_111735 : P) : (term868 A B D P Q p _111734 _111736 pat _111737 e _111735) = (term965 A B D P Q _111736 p _111734 pat _111737 e _111735).
Proof. exact (@lem8302447 (term474 D P Q pat _111736 e _111735) (term866 A B P p _111734 _111735) (term474 D P Q pat _111737 e _111735)). Qed.
Lemma lem8302464 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8302465 {A B D P Q : Type'} (pat : Q -> D) (_111737 : Q) (e : P -> D) (p : type560 A B P) (_111734 : A -> B) (_111735 : P) : (term966 A B D P Q p _111734 pat _111737 e _111735) = (term962 A B D P Q pat _111737 e p _111734 _111735).
Proof. exact (@lem8302464 (term474 D P Q pat _111737 e _111735) (term866 A B P p _111734 _111735)). Qed.
Lemma lem8302473 {D P Q : Type'} (pat : Q -> D) (_111736 : Q) (e : P -> D) (_111735 : P) : (term889 D P Q pat _111736 e _111735) = (term889 D P Q pat _111736 e _111735).
Proof. exact (eq_refl (term889 D P Q pat _111736 e _111735)). Qed.
Lemma lem8302474 {A B D P Q : Type'} (_111736 : Q) (pat : Q -> D) (_111737 : Q) (e : P -> D) (p : type560 A B P) (_111734 : A -> B) (_111735 : P) : (term965 A B D P Q _111736 p _111734 pat _111737 e _111735) = (term967 A B D P Q _111736 pat _111737 e p _111734 _111735).
Proof. exact (MK_COMB (@lem8302473 D P Q pat _111736 e _111735) (@lem8302465 A B D P Q pat _111737 e p _111734 _111735)). Qed.
Lemma lem8302485 {A B D P Q : Type'} (_111736 : Q) (pat : Q -> D) (_111737 : Q) (e : P -> D) (p : type560 A B P) (_111734 : A -> B) (_111735 : P) : (term868 A B D P Q p _111734 _111736 pat _111737 e _111735) = (term967 A B D P Q _111736 pat _111737 e p _111734 _111735).
Proof. exact (TRANS (@lem8302448 A B D P Q _111736 p _111734 pat _111737 e _111735) (@lem8302474 A B D P Q _111736 pat _111737 e p _111734 _111735)). Qed.
Lemma lem8302486 {A P Q : Type'} (_111736 : Q) (arg : type1475 A P Q) (_111735 : P) (_111737 : Q) : (term968 A P Q _111736 arg _111735 _111737) = (term968 A P Q _111736 arg _111735 _111737).
Proof. exact (eq_refl (term968 A P Q _111736 arg _111735 _111737)). Qed.
Lemma lem8302487 {A B D P Q : Type'} (arg : type1475 A P Q) (_111736 : Q) (pat : Q -> D) (_111737 : Q) (e : P -> D) (p : type560 A B P) (_111734 : A -> B) (_111735 : P) : (term969 A B D P Q arg p _111734 _111736 pat _111737 e _111735) = (term961 A B D P Q arg _111736 pat _111737 e p _111734 _111735).
Proof. exact (MK_COMB (@lem8302486 A P Q _111736 arg _111735 _111737) (@lem8302485 A B D P Q _111736 pat _111737 e p _111734 _111735)). Qed.
Lemma lem8302498 {A B D P Q : Type'} (arg : type1475 A P Q) (_111736 : Q) (pat : Q -> D) (_111737 : Q) (e : P -> D) (p : type560 A B P) (_111734 : A -> B) (_111735 : P) : ((term921 A B D P Q p _111734 pat e _111736 arg _111735 _111737) = (term969 A B D P Q arg p _111734 _111736 pat _111737 e _111735)) = ((term961 A B D P Q arg _111736 pat _111737 e p _111734 _111735) = (term961 A B D P Q arg _111736 pat _111737 e p _111734 _111735)).
Proof. exact (MK_COMB (@lem8302431 A B D P Q arg _111736 pat _111737 e p _111734 _111735) (@lem8302487 A B D P Q arg _111736 pat _111737 e p _111734 _111735)). Qed.
Lemma lem8302500 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8302501 (x : Prop) : (x = x) = True.
Proof. exact (@lem8302500 Prop x). Qed.
Lemma lem8302502 {A B D P Q : Type'} (arg : type1475 A P Q) (_111736 : Q) (pat : Q -> D) (_111737 : Q) (e : P -> D) (p : type560 A B P) (_111734 : A -> B) (_111735 : P) : ((term961 A B D P Q arg _111736 pat _111737 e p _111734 _111735) = (term961 A B D P Q arg _111736 pat _111737 e p _111734 _111735)) = True.
Proof. exact (@lem8302501 (term961 A B D P Q arg _111736 pat _111737 e p _111734 _111735)). Qed.
Lemma lem8302503 {A B D P Q : Type'} (arg : type1475 A P Q) (p : type560 A B P) (_111734 : A -> B) (_111736 : Q) (pat : Q -> D) (_111737 : Q) (e : P -> D) (_111735 : P) : ((term921 A B D P Q p _111734 pat e _111736 arg _111735 _111737) = (term969 A B D P Q arg p _111734 _111736 pat _111737 e _111735)) = True.
Proof. exact (TRANS (@lem8302498 A B D P Q arg _111736 pat _111737 e p _111734 _111735) (@lem8302502 A B D P Q arg _111736 pat _111737 e p _111734 _111735)). Qed.
Lemma lem8302504 {A B D P Q : Type'} (arg : type1475 A P Q) (p : type560 A B P) (_111734 : A -> B) (_111736 : Q) (pat : Q -> D) (_111737 : Q) (e : P -> D) (_111735 : P) : True = ((term921 A B D P Q p _111734 pat e _111736 arg _111735 _111737) = (term969 A B D P Q arg p _111734 _111736 pat _111737 e _111735)).
Proof. exact (SYM (@lem8302503 A B D P Q arg p _111734 _111736 pat _111737 e _111735)). Qed.
Lemma lem8302505 {A B D P Q : Type'} (arg : type1475 A P Q) (p : type560 A B P) (_111734 : A -> B) (_111736 : Q) (pat : Q -> D) (_111737 : Q) (e : P -> D) (_111735 : P) : (term921 A B D P Q p _111734 pat e _111736 arg _111735 _111737) = (term969 A B D P Q arg p _111734 _111736 pat _111737 e _111735).
Proof. exact (EQ_MP (@lem8302504 A B D P Q arg p _111734 _111736 pat _111737 e _111735) (@lem0)). Qed.
Lemma lem8302506 {A B D P Q : Type'} (_111734 : A -> B) (_111736 : Q) (_111737 : Q) (_111735 : P) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term969 A B D P Q arg p _111734 _111736 pat _111737 e _111735.
Proof. exact (EQ_MP (@lem8302505 A B D P Q arg p _111734 _111736 pat _111737 e _111735) (@lem8301581 A B D P Q _111734 _111736 _111735 _111737 p pat e arg h1)). Qed.
Lemma lem8302508 (b : Prop) (a : Prop) : (a \/ b) = (term970 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8302509 {A B D P Q : Type'} (p : type560 A B P) (_111734 : A -> B) (pat : Q -> D) (e : P -> D) (_111736 : Q) (arg : type1475 A P Q) (_111735 : P) (_111737 : Q) : (term969 A B D P Q arg p _111734 _111736 pat _111737 e _111735) = (term971 A B D P Q p _111734 pat e _111736 arg _111735 _111737).
Proof. exact (@lem8302508 (term868 A B D P Q p _111734 _111736 pat _111737 e _111735) ((arg _111735 _111736) = (arg _111735 _111737))). Qed.
Lemma lem8302511 (a : Prop) (b : Prop) : (term972 a b) = (term973 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8302512 {A B D P Q : Type'} (p : type560 A B P) (_111734 : A -> B) (_111736 : Q) (pat : Q -> D) (_111737 : Q) (e : P -> D) (_111735 : P) : (term974 A B D P Q p _111734 _111736 pat _111737 e _111735) = (term975 A B D P Q p _111734 _111736 pat _111737 e _111735).
Proof. exact (@lem8302511 (term866 A B P p _111734 _111735) (term391 D P Q _111736 pat _111737 e _111735)). Qed.
Lemma lem8302514 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8302515 {A B P : Type'} (p : type560 A B P) (_111734 : A -> B) (_111735 : P) : (term976 A B P p _111734 _111735) = (term864 A B P p _111734 _111735).
Proof. exact (@lem8302514 (term864 A B P p _111734 _111735)). Qed.
Lemma lem8302516 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8302517 {A B P : Type'} (p : type560 A B P) (_111734 : A -> B) (_111735 : P) : (term977 A B P p _111734 _111735) = (term978 A B P p _111734 _111735).
Proof. exact (MK_COMB (@lem8302516) (@lem8302515 A B P p _111734 _111735)). Qed.
Lemma lem8302519 (a : Prop) (b : Prop) : (term972 a b) = (term973 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8302520 {D P Q : Type'} (_111736 : Q) (pat : Q -> D) (_111737 : Q) (e : P -> D) (_111735 : P) : (term979 D P Q _111736 pat _111737 e _111735) = (term980 D P Q _111736 pat _111737 e _111735).
Proof. exact (@lem8302519 (term474 D P Q pat _111736 e _111735) (term474 D P Q pat _111737 e _111735)). Qed.
Lemma lem8302522 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8302523 {D P Q : Type'} (pat : Q -> D) (_111736 : Q) (e : P -> D) (_111735 : P) : (term981 D P Q pat _111736 e _111735) = ((pat _111736) = (e _111735)).
Proof. exact (@lem8302522 ((pat _111736) = (e _111735))). Qed.
Lemma lem8302524 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8302525 {D P Q : Type'} (pat : Q -> D) (_111736 : Q) (e : P -> D) (_111735 : P) : (term982 D P Q pat _111736 e _111735) = (term882 D P Q pat _111736 e _111735).
Proof. exact (MK_COMB (@lem8302524) (@lem8302523 D P Q pat _111736 e _111735)). Qed.
Lemma lem8302527 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8302528 {D P Q : Type'} (pat : Q -> D) (_111737 : Q) (e : P -> D) (_111735 : P) : (term981 D P Q pat _111737 e _111735) = ((pat _111737) = (e _111735)).
Proof. exact (@lem8302527 ((pat _111737) = (e _111735))). Qed.
Lemma lem8302529 {D P Q : Type'} (_111736 : Q) (pat : Q -> D) (_111737 : Q) (e : P -> D) (_111735 : P) : (term980 D P Q _111736 pat _111737 e _111735) = (term396 D P Q _111736 pat _111737 e _111735).
Proof. exact (MK_COMB (@lem8302525 D P Q pat _111736 e _111735) (@lem8302528 D P Q pat _111737 e _111735)). Qed.
Lemma lem8302530 {D P Q : Type'} (_111736 : Q) (pat : Q -> D) (_111737 : Q) (e : P -> D) (_111735 : P) : (term979 D P Q _111736 pat _111737 e _111735) = (term396 D P Q _111736 pat _111737 e _111735).
Proof. exact (TRANS (@lem8302520 D P Q _111736 pat _111737 e _111735) (@lem8302529 D P Q _111736 pat _111737 e _111735)). Qed.
Lemma lem8302531 {A B D P Q : Type'} (p : type560 A B P) (_111734 : A -> B) (_111736 : Q) (pat : Q -> D) (_111737 : Q) (e : P -> D) (_111735 : P) : (term975 A B D P Q p _111734 _111736 pat _111737 e _111735) = (term983 A B D P Q p _111734 _111736 pat _111737 e _111735).
Proof. exact (MK_COMB (@lem8302517 A B P p _111734 _111735) (@lem8302530 D P Q _111736 pat _111737 e _111735)). Qed.
Lemma lem8302532 {A B D P Q : Type'} (p : type560 A B P) (_111734 : A -> B) (_111736 : Q) (pat : Q -> D) (_111737 : Q) (e : P -> D) (_111735 : P) : (term974 A B D P Q p _111734 _111736 pat _111737 e _111735) = (term983 A B D P Q p _111734 _111736 pat _111737 e _111735).
Proof. exact (TRANS (@lem8302512 A B D P Q p _111734 _111736 pat _111737 e _111735) (@lem8302531 A B D P Q p _111734 _111736 pat _111737 e _111735)). Qed.
Lemma lem8302533 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8302534 {A B D P Q : Type'} (p : type560 A B P) (_111734 : A -> B) (_111736 : Q) (pat : Q -> D) (_111737 : Q) (e : P -> D) (_111735 : P) : (term984 A B D P Q p _111734 _111736 pat _111737 e _111735) = (term985 A B D P Q p _111734 _111736 pat _111737 e _111735).
Proof. exact (MK_COMB (@lem8302533) (@lem8302532 A B D P Q p _111734 _111736 pat _111737 e _111735)). Qed.
Lemma lem8302535 {A P Q : Type'} (_111736 : Q) (arg : type1475 A P Q) (_111735 : P) (_111737 : Q) : ((arg _111735 _111736) = (arg _111735 _111737)) = ((arg _111735 _111736) = (arg _111735 _111737)).
Proof. exact (eq_refl ((arg _111735 _111736) = (arg _111735 _111737))). Qed.
Lemma lem8302536 {A B D P Q : Type'} (p : type560 A B P) (_111734 : A -> B) (pat : Q -> D) (e : P -> D) (_111736 : Q) (arg : type1475 A P Q) (_111735 : P) (_111737 : Q) : (term971 A B D P Q p _111734 pat e _111736 arg _111735 _111737) = (term986 A B D P Q p _111734 pat e _111736 arg _111735 _111737).
Proof. exact (MK_COMB (@lem8302534 A B D P Q p _111734 _111736 pat _111737 e _111735) (@lem8302535 A P Q _111736 arg _111735 _111737)). Qed.
Lemma lem8302537 {A B D P Q : Type'} (p : type560 A B P) (_111734 : A -> B) (pat : Q -> D) (e : P -> D) (_111736 : Q) (arg : type1475 A P Q) (_111735 : P) (_111737 : Q) : (term969 A B D P Q arg p _111734 _111736 pat _111737 e _111735) = (term986 A B D P Q p _111734 pat e _111736 arg _111735 _111737).
Proof. exact (TRANS (@lem8302509 A B D P Q p _111734 pat e _111736 arg _111735 _111737) (@lem8302536 A B D P Q p _111734 pat e _111736 arg _111735 _111737)). Qed.
Lemma lem8302539 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) (h1 : term886 A B D P Q t pat e f arg x t' v' v) : term396 D P Q t' pat t e x.
Proof. exact (conj (@lem8302306 A B D P Q t pat e f arg x t' v' v h1) (@lem8302313 A B D P Q t pat e f arg x t' v' v h1)). Qed.
Lemma lem8302540 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term886 A B D P Q t pat e f arg x t' v' v) (h2 : p f x) : term983 A B D P Q p f t' pat t e x.
Proof. exact (conj (@lem8302299 A B P p f x h2) (@lem8302539 A B D P Q t pat e f arg x t' v' v h1)). Qed.
Lemma lem8302542 {A B D P Q : Type'} (_111734 : A -> B) (_111736 : Q) (_111735 : P) (_111737 : Q) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term986 A B D P Q p _111734 pat e _111736 arg _111735 _111737.
Proof. exact (EQ_MP (@lem8302537 A B D P Q p _111734 pat e _111736 arg _111735 _111737) (@lem8302506 A B D P Q _111734 _111736 _111737 _111735 p pat e arg h1)). Qed.
Lemma lem8302543 {A B D P Q : Type'} (_111734 : A -> B) (_111736 : Q) (_111735 : P) (_111737 : Q) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term986 A B D P Q p _111734 pat e _111736 arg _111735 _111737.
Proof. exact (@lem8302542 A B D P Q _111734 _111736 _111735 _111737 p pat e arg h1). Qed.
Lemma lem8302544 {A B D P Q : Type'} (f : A -> B) (t' : Q) (x : P) (t : Q) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term986 A B D P Q p f pat e t' arg x t.
Proof. exact (@lem8302543 A B D P Q f t' x t p pat e arg h1). Qed.
Lemma lem8302547 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term886 A B D P Q t pat e f arg x t' v' v) (h3 : p f x) : (arg x t') = (arg x t).
Proof. exact (@lem8302544 A B D P Q f t' x t p pat e arg h1 (@lem8302540 A B D P Q t pat e arg t' v' v p f x h2 h3)). Qed.
Lemma lem8302548 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term886 A B D P Q t pat e f arg x t' v' v) (h3 : p f x) : term987 A P Q t' arg x t.
Proof. exact (fun h0 : term988 A P Q t' arg x t => @lem8302547 A B D P Q t pat e arg t' v' v p f x h1 h2 h3). Qed.
Lemma lem8302550 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8302551 {A P Q : Type'} (t' : Q) (arg : type1475 A P Q) (x : P) (t : Q) : (term987 A P Q t' arg x t) = ((arg x t') = (arg x t)).
Proof. exact (@lem8302550 ((arg x t') = (arg x t))). Qed.
Lemma lem8302552 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term886 A B D P Q t pat e f arg x t' v' v) (h3 : p f x) : (arg x t') = (arg x t).
Proof. exact (EQ_MP (@lem8302551 A P Q t' arg x t) (@lem8302548 A B D P Q t pat e arg t' v' v p f x h1 h2 h3)). Qed.
Lemma lem8302554 {A B : Type'} (x : A -> B) : x = x.
Proof. exact (@lem21386 (A -> B) x). Qed.
Lemma lem8302555 {A B : Type'} (x : A -> B) : x = x.
Proof. exact (@lem8302554 A B x). Qed.
Lemma lem8302556 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (@lem8302555 A B f). Qed.
Lemma lem8302557 {A B : Type'} (f : A -> B) : term989 A B f.
Proof. exact (fun h0 : term990 A B f => @lem8302556 A B f). Qed.
Lemma lem8302559 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8302560 {A B : Type'} (f : A -> B) : (term989 A B f) = (f = f).
Proof. exact (@lem8302559 (f = f)). Qed.
Lemma lem8302561 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (EQ_MP (@lem8302560 A B f) (@lem8302557 A B f)). Qed.
Lemma lem8302579 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8302580 {A B : Type'} (_111905 : A) (_111907 : A) (_111904 : A -> B) (_111906 : A -> B) : (term948 A B _111904 _111905 _111906 _111907) = (term991 A B _111905 _111907 _111904 _111906).
Proof. exact (@lem8302579 ((@I (A -> B) _111904 _111905) = (@I (A -> B) _111906 _111907)) (term992 A B _111904 _111906)). Qed.
Lemma lem8302590 {A : Type'} (_111905 : A) (_111907 : A) : (term993 A _111905 _111907) = (term993 A _111905 _111907).
Proof. exact (eq_refl (term993 A _111905 _111907)). Qed.
Lemma lem8302591 {A B : Type'} (_111905 : A) (_111907 : A) (_111904 : A -> B) (_111906 : A -> B) : (term950 A B _111904 _111905 _111906 _111907) = (term994 A B _111905 _111907 _111904 _111906).
Proof. exact (MK_COMB (@lem8302590 A _111905 _111907) (@lem8302580 A B _111905 _111907 _111904 _111906)). Qed.
Lemma lem8302595 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8302596 {A B : Type'} (_111905 : A) (_111907 : A) (_111904 : A -> B) (_111906 : A -> B) : (term994 A B _111905 _111907 _111904 _111906) = (term995 A B _111905 _111907 _111904 _111906).
Proof. exact (@lem8302595 ((@I (A -> B) _111904 _111905) = (@I (A -> B) _111906 _111907)) (term421 A _111905 _111907) (term992 A B _111904 _111906)). Qed.
Lemma lem8302618 {A B : Type'} (_111905 : A) (_111907 : A) (_111904 : A -> B) (_111906 : A -> B) : (term950 A B _111904 _111905 _111906 _111907) = (term995 A B _111905 _111907 _111904 _111906).
Proof. exact (TRANS (@lem8302591 A B _111905 _111907 _111904 _111906) (@lem8302596 A B _111905 _111907 _111904 _111906)). Qed.
Lemma lem8302619 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8302620 {A B : Type'} (_111905 : A) (_111907 : A) (_111904 : A -> B) (_111906 : A -> B) : (term996 A B _111904 _111905 _111906 _111907) = (term997 A B _111905 _111907 _111904 _111906).
Proof. exact (MK_COMB (@lem8302619) (@lem8302618 A B _111905 _111907 _111904 _111906)). Qed.
Lemma lem8302642 {A B : Type'} (_111905 : A) (_111907 : A) (_111904 : A -> B) (_111906 : A -> B) : (term995 A B _111905 _111907 _111904 _111906) = (term995 A B _111905 _111907 _111904 _111906).
Proof. exact (eq_refl (term995 A B _111905 _111907 _111904 _111906)). Qed.
Lemma lem8302643 {A B : Type'} (_111905 : A) (_111907 : A) (_111904 : A -> B) (_111906 : A -> B) : ((term950 A B _111904 _111905 _111906 _111907) = (term995 A B _111905 _111907 _111904 _111906)) = ((term995 A B _111905 _111907 _111904 _111906) = (term995 A B _111905 _111907 _111904 _111906)).
Proof. exact (MK_COMB (@lem8302620 A B _111905 _111907 _111904 _111906) (@lem8302642 A B _111905 _111907 _111904 _111906)). Qed.
Lemma lem8302645 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8302646 (x : Prop) : (x = x) = True.
Proof. exact (@lem8302645 Prop x). Qed.
Lemma lem8302647 {A B : Type'} (_111905 : A) (_111907 : A) (_111904 : A -> B) (_111906 : A -> B) : ((term995 A B _111905 _111907 _111904 _111906) = (term995 A B _111905 _111907 _111904 _111906)) = True.
Proof. exact (@lem8302646 (term995 A B _111905 _111907 _111904 _111906)). Qed.
Lemma lem8302648 {A B : Type'} (_111905 : A) (_111907 : A) (_111904 : A -> B) (_111906 : A -> B) : ((term950 A B _111904 _111905 _111906 _111907) = (term995 A B _111905 _111907 _111904 _111906)) = True.
Proof. exact (TRANS (@lem8302643 A B _111905 _111907 _111904 _111906) (@lem8302647 A B _111905 _111907 _111904 _111906)). Qed.
Lemma lem8302649 {A B : Type'} (_111905 : A) (_111907 : A) (_111904 : A -> B) (_111906 : A -> B) : True = ((term950 A B _111904 _111905 _111906 _111907) = (term995 A B _111905 _111907 _111904 _111906)).
Proof. exact (SYM (@lem8302648 A B _111905 _111907 _111904 _111906)). Qed.
Lemma lem8302650 {A B : Type'} (_111905 : A) (_111907 : A) (_111904 : A -> B) (_111906 : A -> B) : (term950 A B _111904 _111905 _111906 _111907) = (term995 A B _111905 _111907 _111904 _111906).
Proof. exact (EQ_MP (@lem8302649 A B _111905 _111907 _111904 _111906) (@lem0)). Qed.
Lemma lem8302651 {A B : Type'} (_111905 : A) (_111907 : A) (_111904 : A -> B) (_111906 : A -> B) : term995 A B _111905 _111907 _111904 _111906.
Proof. exact (EQ_MP (@lem8302650 A B _111905 _111907 _111904 _111906) (@lem8302194 A B _111904 _111905 _111906 _111907)). Qed.
Lemma lem8302653 (b : Prop) (a : Prop) : (a \/ b) = (term970 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8302654 {A B : Type'} (_111904 : A -> B) (_111905 : A) (_111906 : A -> B) (_111907 : A) : (term995 A B _111905 _111907 _111904 _111906) = (term998 A B _111904 _111905 _111906 _111907).
Proof. exact (@lem8302653 (term999 A B _111905 _111907 _111904 _111906) ((@I (A -> B) _111904 _111905) = (@I (A -> B) _111906 _111907))). Qed.
Lemma lem8302656 (a : Prop) (b : Prop) : (term972 a b) = (term973 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8302657 {A B : Type'} (_111905 : A) (_111907 : A) (_111904 : A -> B) (_111906 : A -> B) : (term1000 A B _111905 _111907 _111904 _111906) = (term1001 A B _111905 _111907 _111904 _111906).
Proof. exact (@lem8302656 (term421 A _111905 _111907) (term992 A B _111904 _111906)). Qed.
Lemma lem8302659 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8302660 {A : Type'} (_111905 : A) (_111907 : A) : (term1002 A _111905 _111907) = (_111905 = _111907).
Proof. exact (@lem8302659 (_111905 = _111907)). Qed.
Lemma lem8302661 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8302662 {A : Type'} (_111905 : A) (_111907 : A) : (term1003 A _111905 _111907) = (term1004 A _111905 _111907).
Proof. exact (MK_COMB (@lem8302661) (@lem8302660 A _111905 _111907)). Qed.
Lemma lem8302664 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8302665 {A B : Type'} (_111904 : A -> B) (_111906 : A -> B) : (term1005 A B _111904 _111906) = (_111904 = _111906).
Proof. exact (@lem8302664 (_111904 = _111906)). Qed.
Lemma lem8302666 {A B : Type'} (_111905 : A) (_111907 : A) (_111904 : A -> B) (_111906 : A -> B) : (term1001 A B _111905 _111907 _111904 _111906) = (term1006 A B _111905 _111907 _111904 _111906).
Proof. exact (MK_COMB (@lem8302662 A _111905 _111907) (@lem8302665 A B _111904 _111906)). Qed.
Lemma lem8302667 {A B : Type'} (_111905 : A) (_111907 : A) (_111904 : A -> B) (_111906 : A -> B) : (term1000 A B _111905 _111907 _111904 _111906) = (term1006 A B _111905 _111907 _111904 _111906).
Proof. exact (TRANS (@lem8302657 A B _111905 _111907 _111904 _111906) (@lem8302666 A B _111905 _111907 _111904 _111906)). Qed.
Lemma lem8302668 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8302669 {A B : Type'} (_111905 : A) (_111907 : A) (_111904 : A -> B) (_111906 : A -> B) : (term1007 A B _111905 _111907 _111904 _111906) = (term1008 A B _111905 _111907 _111904 _111906).
Proof. exact (MK_COMB (@lem8302668) (@lem8302667 A B _111905 _111907 _111904 _111906)). Qed.
Lemma lem8302670 {A B : Type'} (_111904 : A -> B) (_111905 : A) (_111906 : A -> B) (_111907 : A) : ((@I (A -> B) _111904 _111905) = (@I (A -> B) _111906 _111907)) = ((@I (A -> B) _111904 _111905) = (@I (A -> B) _111906 _111907)).
Proof. exact (eq_refl ((@I (A -> B) _111904 _111905) = (@I (A -> B) _111906 _111907))). Qed.
Lemma lem8302671 {A B : Type'} (_111904 : A -> B) (_111905 : A) (_111906 : A -> B) (_111907 : A) : (term998 A B _111904 _111905 _111906 _111907) = (term1009 A B _111904 _111905 _111906 _111907).
Proof. exact (MK_COMB (@lem8302669 A B _111905 _111907 _111904 _111906) (@lem8302670 A B _111904 _111905 _111906 _111907)). Qed.
Lemma lem8302672 {A B : Type'} (_111904 : A -> B) (_111905 : A) (_111906 : A -> B) (_111907 : A) : (term995 A B _111905 _111907 _111904 _111906) = (term1009 A B _111904 _111905 _111906 _111907).
Proof. exact (TRANS (@lem8302654 A B _111904 _111905 _111906 _111907) (@lem8302671 A B _111904 _111905 _111906 _111907)). Qed.
Lemma lem8302674 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term886 A B D P Q t pat e f arg x t' v' v) (h3 : p f x) : term1010 A B P Q t' arg x t f.
Proof. exact (conj (@lem8302552 A B D P Q t pat e arg t' v' v p f x h1 h2 h3) (@lem8302561 A B f)). Qed.
Lemma lem8302676 {A B : Type'} (_111904 : A -> B) (_111905 : A) (_111906 : A -> B) (_111907 : A) : term1009 A B _111904 _111905 _111906 _111907.
Proof. exact (EQ_MP (@lem8302672 A B _111904 _111905 _111906 _111907) (@lem8302651 A B _111905 _111907 _111904 _111906)). Qed.
Lemma lem8302677 {A B : Type'} (_111904 : A -> B) (_111905 : A) (_111906 : A -> B) (_111907 : A) : term1009 A B _111904 _111905 _111906 _111907.
Proof. exact (@lem8302676 A B _111904 _111905 _111906 _111907). Qed.
Lemma lem8302678 {A B P Q : Type'} (t' : Q) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : term1011 A B P Q t' f arg x t.
Proof. exact (@lem8302677 A B f (arg x t') f (arg x t)). Qed.
Lemma lem8302681 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term886 A B D P Q t pat e f arg x t' v' v) (h3 : p f x) : (term879 A B P Q f arg x t') = (term879 A B P Q f arg x t).
Proof. exact (@lem8302678 A B P Q t' f arg x t (@lem8302674 A B D P Q t pat e arg t' v' v p f x h1 h2 h3)). Qed.
Lemma lem8302682 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term886 A B D P Q t pat e f arg x t' v' v) (h3 : p f x) : term1012 A B P Q t' f arg x t.
Proof. exact (fun h0 : term931 A B P Q t' f arg x t => @lem8302681 A B D P Q t pat e arg t' v' v p f x h1 h2 h3). Qed.
Lemma lem8302684 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8302685 {A B P Q : Type'} (t' : Q) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : (term1012 A B P Q t' f arg x t) = ((term879 A B P Q f arg x t') = (term879 A B P Q f arg x t)).
Proof. exact (@lem8302684 ((term879 A B P Q f arg x t') = (term879 A B P Q f arg x t))). Qed.
Lemma lem8302686 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term886 A B D P Q t pat e f arg x t' v' v) (h3 : p f x) : (term879 A B P Q f arg x t') = (term879 A B P Q f arg x t).
Proof. exact (EQ_MP (@lem8302685 A B P Q t' f arg x t) (@lem8302682 A B D P Q t pat e arg t' v' v p f x h1 h2 h3)). Qed.
Lemma lem8302689 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem8302691 {A B P Q : Type'} (t' : Q) (f : A -> B) (arg : type1475 A P Q) (x : P) (t : Q) : (term931 A B P Q t' f arg x t) = (term1013 A B P Q t' f arg x t).
Proof. exact (@lem8302689 ((term879 A B P Q f arg x t') = (term879 A B P Q f arg x t))). Qed.
Lemma lem8302694 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (x : P) (t' : Q) (v' : B) (v : B) (h1 : term886 A B D P Q t pat e f arg x t' v' v) : term1013 A B P Q t' f arg x t.
Proof. exact (EQ_MP (@lem8302691 A B P Q t' f arg x t) (@lem8301650 A B D P Q t pat e f arg x t' v' v h1)). Qed.
Lemma lem8302697 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term886 A B D P Q t pat e f arg x t' v' v) (h3 : p f x) : False.
Proof. exact (@lem8302694 A B D P Q t pat e f arg x t' v' v h2 (@lem8302686 A B D P Q t pat e arg t' v' v p f x h1 h2 h3)). Qed.
Lemma lem8302698 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term886 A B D P Q t pat e f arg x t' v' v) (h3 : p f x) : term937.
Proof. exact (fun h0 : ~ False => @lem8302697 A B D P Q t pat e arg t' v' v p f x h1 h2 h3). Qed.
Lemma lem8302700 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8302701 : term937 = False.
Proof. exact (@lem8302700 False). Qed.
Lemma lem8302704 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term886 A B D P Q t pat e f arg x t' v' v) (h3 : p f x) : False.
Proof. exact (EQ_MP (@lem8302701) (@lem8302698 A B D P Q t pat e arg t' v' v p f x h1 h2 h3)). Qed.
Lemma lem8302705 {A B D P Q : Type'} (t : Q) (v : B) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) (h1 : term908 A B D P Q t v f arg pat e x) : False.
Proof. exact (EQ_MP (@lem8301886) (@lem8301883 A B D P Q t v f arg pat e x h1)). Qed.
Lemma lem8302706 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (t'' : Q) (e : P -> D) (x : P) (h1 : term894 A B D P Q pat e f arg x) (h2 : term898 A B D P Q t f arg t' v' v pat t'' e x) : (term894 A B D P Q pat e f arg x) = False.
Proof. exact (prop_ext (fun h3 : term894 A B D P Q pat e f arg x => @lem8302108 A B D P Q t f arg t' v' v pat t'' e x h1 h2) (fun h3 : False => @lem8300788 A B D P Q pat e f arg x h1)). Qed.
Lemma lem8302707 {A B D P Q : Type'} (t : Q) (f : A -> B) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (t'' : Q) (e : P -> D) (x : P) (h1 : term894 A B D P Q pat e f arg x) (h2 : term898 A B D P Q t f arg t' v' v pat t'' e x) : False.
Proof. exact (EQ_MP (@lem8302706 A B D P Q t f arg t' v' v pat t'' e x h1 h2) (@lem8300788 A B D P Q pat e f arg x h1)). Qed.
Lemma lem8302708 {A B D P Q : Type'} (t : Q) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (t'' : Q) (e : P -> D) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term898 A B D P Q t f arg t' v' v pat t'' e x) (h3 : p f x) : False.
Proof. exact (or_elim (@lem8300363 A B D P Q t f arg t' v' v pat t'' e x h2) (fun h0 : term894 A B D P Q pat e f arg x => @lem8302707 A B D P Q t f arg t' v' v pat t'' e x h0 h2) (fun h0 : term886 A B D P Q t pat e f arg x t' v' v => @lem8302704 A B D P Q t pat e arg t' v' v p f x h1 h0 h3)). Qed.
Lemma lem8302709 {A B D P Q : Type'} (t : Q) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (t'' : Q) (e : P -> D) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term852 A B D P Q t f arg t' v' v pat t'' e x) (h3 : p f x) : False.
Proof. exact (or_elim (@lem8300353 A B D P Q t f arg t' v' v pat t'' e x h2) (fun h0 : term908 A B D P Q t v f arg pat e x => @lem8302705 A B D P Q t v f arg pat e x h0) (fun h0 : term898 A B D P Q t f arg t' v' v pat t'' e x => @lem8302708 A B D P Q t arg t' v' v pat t'' e p f x h1 h0 h3)). Qed.
Lemma lem8302710 {A B D P Q : Type'} (t : Q) (arg : type1475 A P Q) (t' : Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term855 A B D P Q t f arg t' v' v pat e x) (h3 : p f x) : False.
Proof. exact (ex_elim (@lem8299860 A B D P Q t f arg t' v' v pat e x h2) (fun t'' : Q => fun h0 : term854 A B D P Q t f arg t' v' v pat e x t'' => @lem8302709 A B D P Q t arg t' v' v pat t'' e p f x h1 h0 h3)). Qed.
Lemma lem8302711 {A B D P Q : Type'} (t : Q) (arg : type1475 A P Q) (v' : B) (v : B) (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term857 A B D P Q t f arg v' v pat e x) (h3 : p f x) : False.
Proof. exact (ex_elim (@lem8299859 A B D P Q t f arg v' v pat e x h2) (fun t' : Q => fun h0 : term856 A B D P Q t f arg v' v pat e x t' => @lem8302710 A B D P Q t arg t' v' v pat e p f x h1 h0 h3)). Qed.
Lemma lem8302712 {A B D P Q : Type'} (t : Q) (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term859 A B D P Q t f arg v pat e x) (h3 : p f x) : False.
Proof. exact (ex_elim (@lem8299858 A B D P Q t f arg v pat e x h2) (fun v' : B => fun h0 : term858 A B D P Q t f arg v pat e x v' => @lem8302711 A B D P Q t arg v' v pat e p f x h1 h0 h3)). Qed.
Lemma lem8302713 {A B D P Q : Type'} (arg : type1475 A P Q) (v : B) (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term861 A B D P Q f arg v pat e x) (h3 : p f x) : False.
Proof. exact (ex_elim (@lem8299857 A B D P Q f arg v pat e x h2) (fun t : Q => fun h0 : term860 A B D P Q f arg v pat e x t => @lem8302712 A B D P Q t arg v pat e p f x h1 h0 h3)). Qed.
Lemma lem8302714 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term389 A B D P Q f arg pat e x) (h3 : p f x) : False.
Proof. exact (ex_elim (@lem8299856 A B D P Q f arg pat e x h2) (fun v : B => fun h0 : term862 A B D P Q f arg pat e x v => @lem8302713 A B D P Q arg v pat e p f x h1 h0 h3)). Qed.
Lemma lem8302715 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term389 A B D P Q f arg pat e x) (h3 : p f x) : (p f x) = False.
Proof. exact (prop_ext (fun h4 : p f x => @lem8302714 A B D P Q arg pat e p f x h1 h2 h3) (fun h4 : False => @lem8298597 A B P p f x h3)). Qed.
Lemma lem8302716 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term389 A B D P Q f arg pat e x) (h3 : p f x) : False.
Proof. exact (EQ_MP (@lem8302715 A B D P Q arg pat e p f x h1 h2 h3) (@lem8298597 A B P p f x h3)). Qed.
Lemma lem8302717 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term389 A B D P Q f arg pat e x) (h3 : p f x) : (term389 A B D P Q f arg pat e x) = False.
Proof. exact (prop_ext (fun h4 : term389 A B D P Q f arg pat e x => @lem8302716 A B D P Q arg pat e p f x h1 h2 h3) (fun h4 : False => @lem8298323 A B D P Q f arg pat e x h2)). Qed.
Lemma lem8302718 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term389 A B D P Q f arg pat e x) (h3 : p f x) : False.
Proof. exact (EQ_MP (@lem8302717 A B D P Q arg pat e p f x h1 h2 h3) (@lem8298323 A B D P Q f arg pat e x h2)). Qed.
Lemma lem8302719 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term36 A B D P Q p pat e arg) (h2 : p f x) : term388 A B D P Q f arg pat e x.
Proof. exact (fun h0 : term389 A B D P Q f arg pat e x => @lem8302718 A B D P Q arg pat e p f x h1 h0 h2). Qed.
Lemma lem8302720 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (p : type560 A B P) (f : A -> B) (x : P) (h1 : term36 A B D P Q p pat e arg) (h2 : p f x) : (term105 A B D P Q pat e f arg x) = (term169 D P Q pat e x).
Proof. exact (EQ_MP (@lem8298322 A B D P Q f arg pat e x) (@lem8302719 A B D P Q pat e arg p f x h1 h2)). Qed.
Lemma lem8302721 {A B D P Q : Type'} (f : A -> B) (x : P) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term168 A B D P Q p f arg pat e x.
Proof. exact (fun h0 : p f x => @lem8302720 A B D P Q pat e arg p f x h1 h0). Qed.
Lemma lem8302726 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term166 A B D P Q p f arg pat e.
Proof. exact (fun x : P => @lem8302721 A B D P Q f x p pat e arg h1). Qed.
Lemma lem8302731 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term164 A B D P Q p arg pat e.
Proof. exact (fun f : A -> B => @lem8302726 A B D P Q f p pat e arg h1). Qed.
Lemma lem8302732 {A B D P Q : Type'} (lt2 : type1402 A) (_111703 : type560 A B P) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term268 A B D P Q lt2 _111703 s p arg pat e.
Proof. exact (fun h0 : @admissible A B A Prop P lt2 _111703 s p => @lem8302731 A B D P Q p pat e arg h1). Qed.
Lemma lem8302733 {A B D P Q : Type'} (lt2 : type1402 A) (_111703 : type560 A B P) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term279 A B D P Q lt2 _111703 s p arg pat e.
Proof. exact (fun h0 : term35 A B D P Q p pat e arg lt2 s => @lem8302732 A B D P Q lt2 _111703 s p pat e arg h1). Qed.
Lemma lem8302734 {A B D P Q : Type'} (lt2 : type1402 A) (_111703 : type560 A B P) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term288 A B D P Q lt2 _111703 s p arg pat e.
Proof. exact (fun h0 : term36 A B D P Q p pat e arg => @lem8302733 A B D P Q lt2 _111703 s p pat e arg h0). Qed.
Lemma lem8302739 {A B D P Q : Type'} (_111703 : type560 A B P) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term290 A B D P Q _111703 s p arg pat e.
Proof. exact (fun lt2 : type1402 A => @lem8302734 A B D P Q lt2 _111703 s p arg pat e). Qed.
Lemma lem8302744 {A B D P Q : Type'} (_111703 : type560 A B P) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term292 A B D P Q _111703 p arg pat e.
Proof. exact (fun s : P -> A => @lem8302739 A B D P Q _111703 s p arg pat e). Qed.
Lemma lem8302749 {A B D P Q : Type'} (_111703 : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term294 A B D P Q _111703 arg pat e.
Proof. exact (fun p : type560 A B P => @lem8302744 A B D P Q _111703 p arg pat e). Qed.
Lemma lem8302754 {A B D P Q : Type'} (_111703 : type560 A B P) (pat : Q -> D) (e : P -> D) : term296 A B D P Q _111703 pat e.
Proof. exact (fun arg : type1475 A P Q => @lem8302749 A B D P Q _111703 arg pat e). Qed.
Lemma lem8302759 {A B D P Q : Type'} (_111703 : type560 A B P) (e : P -> D) : term298 A B D P Q _111703 e.
Proof. exact (fun pat : Q -> D => @lem8302754 A B D P Q _111703 pat e). Qed.
Lemma lem8302764 {A B D P Q : Type'} (_111703 : type560 A B P) : term300 A B D P Q _111703.
Proof. exact (fun e : P -> D => @lem8302759 A B D P Q _111703 e). Qed.
Lemma lem8302765 {A B D P Q : Type'} (_111704 : P -> Prop) (_111703 : type560 A B P) : term344 A B D P Q _111704 _111703.
Proof. exact (fun h0 : term342 A B P _111703 _111704 => @lem8302764 A B D P Q _111703). Qed.
Lemma lem8302770 {A B D P Q : Type'} (_111704 : P -> Prop) : term346 A B D P Q _111704.
Proof. exact (fun _111703 : type560 A B P => @lem8302765 A B D P Q _111704 _111703). Qed.
Lemma lem8302771 {A B D P Q : Type'} (_111704 : P -> Prop) : term385 A B D P Q _111704.
Proof. exact (fun h0 : term383 P _111704 => @lem8302770 A B D P Q _111704). Qed.
Lemma lem8302776 {A B D P Q : Type'} : term387 A B D P Q.
Proof. exact (fun _111704 : P -> Prop => @lem8302771 A B D P Q _111704). Qed.
Lemma lem8302777 {A B D P Q : Type'} : term255 A B D P Q.
Proof. exact (EQ_MP (@lem8298312 A B D P Q) (@lem8302776 A B D P Q)). Qed.
Lemma lem8302778 {A B D P Q : Type'} (e : P -> D) : term1014 A B D P Q e.
Proof. exact (@lem8302777 A B D P Q e). Qed.
Lemma lem8302779 {A B D P Q : Type'} (e : P -> D) : (term1014 A B D P Q e) = (term251 A B D P Q e).
Proof. exact (eq_refl (term1014 A B D P Q e)). Qed.
Lemma lem8302780 {A B D P Q : Type'} (e : P -> D) : term251 A B D P Q e.
Proof. exact (EQ_MP (@lem8302779 A B D P Q e) (@lem8302778 A B D P Q e)). Qed.
Lemma lem8302781 {A B D P Q : Type'} (e : P -> D) (pat : Q -> D) : term1015 A B D P Q e pat.
Proof. exact (@lem8302780 A B D P Q e pat). Qed.
Lemma lem8302782 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) : (term1015 A B D P Q e pat) = (term247 A B D P Q pat e).
Proof. exact (eq_refl (term1015 A B D P Q e pat)). Qed.
Lemma lem8302783 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) : term247 A B D P Q pat e.
Proof. exact (EQ_MP (@lem8302782 A B D P Q pat e) (@lem8302781 A B D P Q e pat)). Qed.
Lemma lem8302784 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : term1016 A B D P Q pat e arg.
Proof. exact (@lem8302783 A B D P Q pat e arg). Qed.
Lemma lem8302785 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1016 A B D P Q pat e arg) = (term243 A B D P Q arg pat e).
Proof. exact (eq_refl (term1016 A B D P Q pat e arg)). Qed.
Lemma lem8302786 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term243 A B D P Q arg pat e.
Proof. exact (EQ_MP (@lem8302785 A B D P Q arg pat e) (@lem8302784 A B D P Q pat e arg)). Qed.
Lemma lem8302787 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (p : type560 A B P) : term1017 A B D P Q arg pat e p.
Proof. exact (@lem8302786 A B D P Q arg pat e p). Qed.
Lemma lem8302788 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1017 A B D P Q arg pat e p) = (term239 A B D P Q p arg pat e).
Proof. exact (eq_refl (term1017 A B D P Q arg pat e p)). Qed.
Lemma lem8302789 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term239 A B D P Q p arg pat e.
Proof. exact (EQ_MP (@lem8302788 A B D P Q p arg pat e) (@lem8302787 A B D P Q arg pat e p)). Qed.
Lemma lem8302790 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (s : P -> A) : term1018 A B D P Q p arg pat e s.
Proof. exact (@lem8302789 A B D P Q p arg pat e s). Qed.
Lemma lem8302791 {A B D P Q : Type'} (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1018 A B D P Q p arg pat e s) = (term235 A B D P Q s p arg pat e).
Proof. exact (eq_refl (term1018 A B D P Q p arg pat e s)). Qed.
Lemma lem8302792 {A B D P Q : Type'} (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term235 A B D P Q s p arg pat e.
Proof. exact (EQ_MP (@lem8302791 A B D P Q s p arg pat e) (@lem8302790 A B D P Q p arg pat e s)). Qed.
Lemma lem8302793 {A B D P Q : Type'} (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) : term1019 A B D P Q s p arg pat e lt2.
Proof. exact (@lem8302792 A B D P Q s p arg pat e lt2). Qed.
Lemma lem8302794 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1019 A B D P Q s p arg pat e lt2) = (term219 A B D P Q lt2 s p arg pat e).
Proof. exact (eq_refl (term1019 A B D P Q s p arg pat e lt2)). Qed.
Lemma lem8302795 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term219 A B D P Q lt2 s p arg pat e.
Proof. exact (EQ_MP (@lem8302794 A B D P Q lt2 s p arg pat e) (@lem8302793 A B D P Q s p arg pat e lt2)). Qed.
Lemma lem8302797 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term219 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8297241 A B D P Q lt2 s p arg pat e (@lem8302795 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8302798 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term229 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8302797 A B D P Q lt2 s p arg pat e (@lem8291708 A B D P Q p pat e arg h1)). Qed.
Lemma lem8302799 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) : term226 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8302798 A B D P Q lt2 s p pat e arg h1 (@lem8291707 A B D P Q p pat e arg lt2 s h2)). Qed.
Lemma lem8302800 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term40 A B P lt2 s p) : term217 A B D P Q p arg pat e.
Proof. exact (@lem8302799 A B D P Q p pat e arg lt2 s h1 h2 (@lem8291826 A B P lt2 s p h3)). Qed.
Lemma lem8302801 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term218 A B D P Q p arg pat e) (h4 : term40 A B P lt2 s p) : False.
Proof. exact (@lem8302800 A B D P Q pat e arg lt2 s p h1 h2 h4 (@lem8297225 A B D P Q p arg pat e h3)). Qed.
Lemma lem8302802 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term218 A B D P Q p arg pat e) (h4 : term40 A B P lt2 s p) : (term218 A B D P Q p arg pat e) = False.
Proof. exact (prop_ext (fun h5 : term218 A B D P Q p arg pat e => @lem8302801 A B D P Q arg pat e lt2 s p h1 h2 h3 h4) (fun h5 : False => @lem8297225 A B D P Q p arg pat e h3)). Qed.
Lemma lem8302803 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term218 A B D P Q p arg pat e) (h4 : term40 A B P lt2 s p) : False.
Proof. exact (EQ_MP (@lem8302802 A B D P Q arg pat e lt2 s p h1 h2 h3 h4) (@lem8297225 A B D P Q p arg pat e h3)). Qed.
Lemma lem8302804 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term40 A B P lt2 s p) : term217 A B D P Q p arg pat e.
Proof. exact (fun h0 : term218 A B D P Q p arg pat e => @lem8302803 A B D P Q arg pat e lt2 s p h1 h2 h0 h3). Qed.
Lemma lem8302805 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term40 A B P lt2 s p) : term164 A B D P Q p arg pat e.
Proof. exact (EQ_MP (@lem8297224 A B D P Q p arg pat e) (@lem8302804 A B D P Q pat e arg lt2 s p h1 h2 h3)). Qed.
Lemma lem8302835 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term36 A B D P Q p pat e arg.
Proof. exact (h1). Qed.
Lemma lem8302861 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term35 A B D P Q p pat e arg lt2 s) : term35 A B D P Q p pat e arg lt2 s.
Proof. exact (h1). Qed.
Lemma lem8302863 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) (s : _143462 -> _143449) (t : type801 _143452 _143456 _143457 _143462) : (@admissible _143449 _143452 _143456 _143457 _143462 lt2 p s t) = (term14 _143449 _143452 _143456 _143457 _143462 p lt2 s t).
Proof. exact (EQ_MP (@lem8291664 _143449 _143452 _143456 _143457 _143462 p lt2 s t) (@lem8291663 _143449 _143452 _143456 _143457 _143462 p lt2 s t)). Qed.
Lemma lem8302864 {A B P : Type'} (p : type560 A B P) (lt2 : type1402 A) (s : P -> A) (t : type560 A B P) : (@admissible A B A Prop P lt2 p s t) = (term1020 A B P p lt2 s t).
Proof. exact (@lem8302863 A B A Prop P p lt2 s t). Qed.
Lemma lem8302865 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term40 A B P lt2 s p) = (term1021 A B P lt2 s p).
Proof. exact (@lem8302864 A B P (term257 A B P) lt2 s p). Qed.
Lemma lem8302883 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8302884 {A B P : Type'} (f : type560 A B P) (y : A -> B) : (term1022 A B P f y) = (f y).
Proof. exact (@lem8302883 (A -> B) (P -> Prop) f y). Qed.
Lemma lem8302885 {A B P : Type'} (f : A -> B) : (term1023 A B P f) = (term329 A B P f).
Proof. exact (@lem8302884 A B P (term257 A B P) f). Qed.
Lemma lem8302886 {A B P : Type'} (f : A -> B) : (term329 A B P f) = (term330 P).
Proof. exact (eq_refl (term329 A B P f)). Qed.
Lemma lem8302887 {A B P : Type'} : (term327 A B P) = (term257 A B P).
Proof. exact (fun_ext (fun f : A -> B => @lem8302886 A B P f)). Qed.
Lemma lem8302888 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8302889 {A B P : Type'} (f : A -> B) : (term1023 A B P f) = (term329 A B P f).
Proof. exact (MK_COMB (@lem8302887 A B P) (@lem8302888 A B f)). Qed.
Lemma lem8302890 {P : Type'} : (@eq (P -> Prop)) = (@eq (P -> Prop)).
Proof. exact (eq_refl (@eq (P -> Prop))). Qed.
Lemma lem8302891 {A B P : Type'} (f : A -> B) : (term1024 A B P f) = (term1025 A B P f).
Proof. exact (MK_COMB (@lem8302890 P) (@lem8302889 A B P f)). Qed.
Lemma lem8302892 {A B P : Type'} (f : A -> B) : (term329 A B P f) = (term330 P).
Proof. exact (eq_refl (term329 A B P f)). Qed.
Lemma lem8302893 {A B P : Type'} (f : A -> B) : ((term1023 A B P f) = (term329 A B P f)) = ((term329 A B P f) = (term330 P)).
Proof. exact (MK_COMB (@lem8302891 A B P f) (@lem8302892 A B P f)). Qed.
Lemma lem8302894 {A B P : Type'} (f : A -> B) : (term329 A B P f) = (term330 P).
Proof. exact (EQ_MP (@lem8302893 A B P f) (@lem8302885 A B P f)). Qed.
Lemma lem8302895 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8302896 {A B P : Type'} (f : A -> B) (a : P) : (term1026 A B P f a) = (term372 P a).
Proof. exact (MK_COMB (@lem8302894 A B P f) (@lem8302895 P a)). Qed.
Lemma lem8302898 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8302899 {P : Type'} (f : P -> Prop) (y : P) : (term1027 P f y) = (f y).
Proof. exact (@lem8302898 P Prop f y). Qed.
Lemma lem8302900 {P : Type'} (a : P) : (term1028 P a) = (term372 P a).
Proof. exact (@lem8302899 P (term330 P) a). Qed.
Lemma lem8302901 {P : Type'} (a : P) : (term372 P a) = True.
Proof. exact (eq_refl (term372 P a)). Qed.
Lemma lem8302902 {P : Type'} : (term370 P) = (term330 P).
Proof. exact (fun_ext (fun a : P => @lem8302901 P a)). Qed.
Lemma lem8302903 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8302904 {P : Type'} (a : P) : (term1028 P a) = (term372 P a).
Proof. exact (MK_COMB (@lem8302902 P) (@lem8302903 P a)). Qed.
Lemma lem8302905 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8302906 {P : Type'} (a : P) : (term1029 P a) = (term1030 P a).
Proof. exact (MK_COMB (@lem8302905) (@lem8302904 P a)). Qed.
Lemma lem8302907 {P : Type'} (a : P) : (term372 P a) = True.
Proof. exact (eq_refl (term372 P a)). Qed.
Lemma lem8302908 {P : Type'} (a : P) : ((term1028 P a) = (term372 P a)) = ((term372 P a) = True).
Proof. exact (MK_COMB (@lem8302906 P a) (@lem8302907 P a)). Qed.
Lemma lem8302909 {P : Type'} (a : P) : (term372 P a) = True.
Proof. exact (EQ_MP (@lem8302908 P a) (@lem8302900 P a)). Qed.
Lemma lem8302910 {A B P : Type'} (f : A -> B) (a : P) : (term1026 A B P f a) = True.
Proof. exact (TRANS (@lem8302896 A B P f a) (@lem8302909 P a)). Qed.
Lemma lem8302911 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8302912 {A B P : Type'} (f : A -> B) (a : P) : (term1031 A B P f a) = (and True).
Proof. exact (MK_COMB (@lem8302911) (@lem8302910 A B P f a)). Qed.
Lemma lem8302916 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8302917 {A B P : Type'} (f : type560 A B P) (y : A -> B) : (term1022 A B P f y) = (f y).
Proof. exact (@lem8302916 (A -> B) (P -> Prop) f y). Qed.
Lemma lem8302918 {A B P : Type'} (g : A -> B) : (term1023 A B P g) = (term329 A B P g).
Proof. exact (@lem8302917 A B P (term257 A B P) g). Qed.
Lemma lem8302919 {A B P : Type'} (f : A -> B) : (term329 A B P f) = (term330 P).
Proof. exact (eq_refl (term329 A B P f)). Qed.
Lemma lem8302920 {A B P : Type'} : (term327 A B P) = (term257 A B P).
Proof. exact (fun_ext (fun f : A -> B => @lem8302919 A B P f)). Qed.
Lemma lem8302921 {A B : Type'} (g : A -> B) : g = g.
Proof. exact (eq_refl g). Qed.
Lemma lem8302922 {A B P : Type'} (g : A -> B) : (term1023 A B P g) = (term329 A B P g).
Proof. exact (MK_COMB (@lem8302920 A B P) (@lem8302921 A B g)). Qed.
Lemma lem8302923 {P : Type'} : (@eq (P -> Prop)) = (@eq (P -> Prop)).
Proof. exact (eq_refl (@eq (P -> Prop))). Qed.
Lemma lem8302924 {A B P : Type'} (g : A -> B) : (term1024 A B P g) = (term1025 A B P g).
Proof. exact (MK_COMB (@lem8302923 P) (@lem8302922 A B P g)). Qed.
Lemma lem8302925 {A B P : Type'} (g : A -> B) : (term329 A B P g) = (term330 P).
Proof. exact (eq_refl (term329 A B P g)). Qed.
Lemma lem8302926 {A B P : Type'} (g : A -> B) : ((term1023 A B P g) = (term329 A B P g)) = ((term329 A B P g) = (term330 P)).
Proof. exact (MK_COMB (@lem8302924 A B P g) (@lem8302925 A B P g)). Qed.
Lemma lem8302927 {A B P : Type'} (g : A -> B) : (term329 A B P g) = (term330 P).
Proof. exact (EQ_MP (@lem8302926 A B P g) (@lem8302918 A B P g)). Qed.
Lemma lem8302928 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8302929 {A B P : Type'} (g : A -> B) (a : P) : (term1026 A B P g a) = (term372 P a).
Proof. exact (MK_COMB (@lem8302927 A B P g) (@lem8302928 P a)). Qed.
Lemma lem8302931 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8302932 {P : Type'} (f : P -> Prop) (y : P) : (term1027 P f y) = (f y).
Proof. exact (@lem8302931 P Prop f y). Qed.
Lemma lem8302933 {P : Type'} (a : P) : (term1028 P a) = (term372 P a).
Proof. exact (@lem8302932 P (term330 P) a). Qed.
Lemma lem8302934 {P : Type'} (a : P) : (term372 P a) = True.
Proof. exact (eq_refl (term372 P a)). Qed.
Lemma lem8302935 {P : Type'} : (term370 P) = (term330 P).
Proof. exact (fun_ext (fun a : P => @lem8302934 P a)). Qed.
Lemma lem8302936 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8302937 {P : Type'} (a : P) : (term1028 P a) = (term372 P a).
Proof. exact (MK_COMB (@lem8302935 P) (@lem8302936 P a)). Qed.
Lemma lem8302938 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8302939 {P : Type'} (a : P) : (term1029 P a) = (term1030 P a).
Proof. exact (MK_COMB (@lem8302938) (@lem8302937 P a)). Qed.
Lemma lem8302940 {P : Type'} (a : P) : (term372 P a) = True.
Proof. exact (eq_refl (term372 P a)). Qed.
Lemma lem8302941 {P : Type'} (a : P) : ((term1028 P a) = (term372 P a)) = ((term372 P a) = True).
Proof. exact (MK_COMB (@lem8302939 P a) (@lem8302940 P a)). Qed.
Lemma lem8302942 {P : Type'} (a : P) : (term372 P a) = True.
Proof. exact (EQ_MP (@lem8302941 P a) (@lem8302933 P a)). Qed.
Lemma lem8302943 {A B P : Type'} (g : A -> B) (a : P) : (term1026 A B P g a) = True.
Proof. exact (TRANS (@lem8302929 A B P g a) (@lem8302942 P a)). Qed.
Lemma lem8302944 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8302945 {A B P : Type'} (g : A -> B) (a : P) : (term1031 A B P g a) = (and True).
Proof. exact (MK_COMB (@lem8302944) (@lem8302943 A B P g a)). Qed.
Lemma lem8302954 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1032 A B P lt2 s a f g) = (term1032 A B P lt2 s a f g).
Proof. exact (eq_refl (term1032 A B P lt2 s a f g)). Qed.
Lemma lem8302955 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1033 A B P lt2 s a f g) = (term1034 A B P lt2 s a f g).
Proof. exact (MK_COMB (@lem8302945 A B P g a) (@lem8302954 A B P lt2 s a f g)). Qed.
Lemma lem8302957 (t : Prop) : (True /\ t) = t.
Proof. exact (proj1 (@lem1842 t)). Qed.
Lemma lem8302958 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1034 A B P lt2 s a f g) = (term1032 A B P lt2 s a f g).
Proof. exact (@lem8302957 (term1032 A B P lt2 s a f g)). Qed.
Lemma lem8302967 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1033 A B P lt2 s a f g) = (term1032 A B P lt2 s a f g).
Proof. exact (TRANS (@lem8302955 A B P lt2 s a f g) (@lem8302958 A B P lt2 s a f g)). Qed.
Lemma lem8302968 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1035 A B P lt2 s a f g) = (term1034 A B P lt2 s a f g).
Proof. exact (MK_COMB (@lem8302912 A B P f a) (@lem8302967 A B P lt2 s a f g)). Qed.
Lemma lem8302970 (t : Prop) : (True /\ t) = t.
Proof. exact (proj1 (@lem1842 t)). Qed.
Lemma lem8302971 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1034 A B P lt2 s a f g) = (term1032 A B P lt2 s a f g).
Proof. exact (@lem8302970 (term1032 A B P lt2 s a f g)). Qed.
Lemma lem8302980 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1035 A B P lt2 s a f g) = (term1032 A B P lt2 s a f g).
Proof. exact (TRANS (@lem8302968 A B P lt2 s a f g) (@lem8302971 A B P lt2 s a f g)). Qed.
Lemma lem8302981 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8302982 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1036 A B P lt2 s a f g) = (term1037 A B P lt2 s a f g).
Proof. exact (MK_COMB (@lem8302981) (@lem8302980 A B P lt2 s a f g)). Qed.
Lemma lem8302985 {A B P : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : ((p f a) = (p g a)) = ((p f a) = (p g a)).
Proof. exact (eq_refl ((p f a) = (p g a))). Qed.
Lemma lem8302986 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term1038 A B P lt2 s f p g a) = (term1039 A B P lt2 s f p g a).
Proof. exact (MK_COMB (@lem8302982 A B P lt2 s a f g) (@lem8302985 A B P f p g a)). Qed.
Lemma lem8302989 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1040 A B P lt2 s f p g) = (term1041 A B P lt2 s f p g).
Proof. exact (fun_ext (fun a : P => @lem8302986 A B P lt2 s f p g a)). Qed.
Lemma lem8302990 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8302991 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1042 A B P lt2 s f p g) = (term1043 A B P lt2 s f p g).
Proof. exact (MK_COMB (@lem8302990 P) (@lem8302989 A B P lt2 s f p g)). Qed.
Lemma lem8302996 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) : (term1044 A B P lt2 s f p) = (term1045 A B P lt2 s f p).
Proof. exact (fun_ext (fun g : A -> B => @lem8302991 A B P lt2 s f p g)). Qed.
Lemma lem8302997 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8302998 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) : (term1046 A B P lt2 s f p) = (term1047 A B P lt2 s f p).
Proof. exact (MK_COMB (@lem8302997 A B) (@lem8302996 A B P lt2 s f p)). Qed.
Lemma lem8303003 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term1048 A B P lt2 s p) = (term1049 A B P lt2 s p).
Proof. exact (fun_ext (fun f : A -> B => @lem8302998 A B P lt2 s f p)). Qed.
Lemma lem8303004 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8303005 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term1021 A B P lt2 s p) = (term1050 A B P lt2 s p).
Proof. exact (MK_COMB (@lem8303004 A B) (@lem8303003 A B P lt2 s p)). Qed.
Lemma lem8303010 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term40 A B P lt2 s p) = (term1050 A B P lt2 s p).
Proof. exact (TRANS (@lem8302865 A B P lt2 s p) (@lem8303005 A B P lt2 s p)). Qed.
Lemma lem8303011 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term40 A B P lt2 s p) : term1050 A B P lt2 s p.
Proof. exact (EQ_MP (@lem8303010 A B P lt2 s p) (@lem8291826 A B P lt2 s p h1)). Qed.
Lemma lem8303029 (p : Prop) (q : Prop) (p' : Prop) (q' : Prop) : term170 p q p' q'.
Proof. exact (fun h0 : p = p' => @lem4211 q q' p p' h0). Qed.
Lemma lem8303030 (p : Prop) (q : Prop) (p' : Prop) : term171 p q p'.
Proof. exact (fun q' : Prop => @lem8303029 p q p' q'). Qed.
Lemma lem8303031 (p : Prop) (q : Prop) : term172 p q.
Proof. exact (fun p' : Prop => @lem8303030 p q p'). Qed.
Lemma lem8303032 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : term1051 A B D P Q p arg pat e f lt2 y s a.
Proof. exact (@lem8303031 (term1052 A B D P Q p lt2 y arg pat e f a) (term1053 A P lt2 y s a)). Qed.
Lemma lem8303033 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (p' : Prop) : term1054 A B D P Q p arg pat e f lt2 y s a p'.
Proof. exact (@lem8303032 A B D P Q p arg pat e f lt2 y s a p'). Qed.
Lemma lem8303034 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (p' : Prop) : (term1054 A B D P Q p arg pat e f lt2 y s a p') = (term1055 A B D P Q p arg pat e f lt2 y s a p').
Proof. exact (eq_refl (term1054 A B D P Q p arg pat e f lt2 y s a p')). Qed.
Lemma lem8303035 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (p' : Prop) : term1055 A B D P Q p arg pat e f lt2 y s a p'.
Proof. exact (EQ_MP (@lem8303034 A B D P Q p arg pat e f lt2 y s a p') (@lem8303033 A B D P Q p arg pat e f lt2 y s a p')). Qed.
Lemma lem8303036 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (p' : Prop) (q' : Prop) : term1056 A B D P Q p arg pat e f lt2 y s a p' q'.
Proof. exact (@lem8303035 A B D P Q p arg pat e f lt2 y s a p' q'). Qed.
Lemma lem8303037 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (p' : Prop) (q' : Prop) : (term1056 A B D P Q p arg pat e f lt2 y s a p' q') = (term1057 A B D P Q p arg pat e f lt2 y s a p' q').
Proof. exact (eq_refl (term1056 A B D P Q p arg pat e f lt2 y s a p' q')). Qed.
Lemma lem8303038 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (p' : Prop) (q' : Prop) : term1057 A B D P Q p arg pat e f lt2 y s a p' q'.
Proof. exact (EQ_MP (@lem8303037 A B D P Q p arg pat e f lt2 y s a p' q') (@lem8303036 A B D P Q p arg pat e f lt2 y s a p' q')). Qed.
Lemma lem8303042 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8303043 {A B P : Type'} (f : type560 A B P) (y : A -> B) : (term1022 A B P f y) = (f y).
Proof. exact (@lem8303042 (A -> B) (P -> Prop) f y). Qed.
Lemma lem8303044 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1058 A B D P Q p pat e f) = (term1059 A B D P Q p pat e f).
Proof. exact (@lem8303043 A B P (term1060 A B D P Q p pat e) f). Qed.
Lemma lem8303045 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) : (term1059 A B D P Q p pat e f) = (term1061 A B D P Q p f pat e).
Proof. exact (eq_refl (term1059 A B D P Q p pat e f)). Qed.
Lemma lem8303046 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1062 A B D P Q p pat e) = (term1060 A B D P Q p pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8303045 A B D P Q p f pat e)). Qed.
Lemma lem8303047 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8303048 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1058 A B D P Q p pat e f) = (term1059 A B D P Q p pat e f).
Proof. exact (MK_COMB (@lem8303046 A B D P Q p pat e) (@lem8303047 A B f)). Qed.
Lemma lem8303049 {P : Type'} : (@eq (P -> Prop)) = (@eq (P -> Prop)).
Proof. exact (eq_refl (@eq (P -> Prop))). Qed.
Lemma lem8303050 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1063 A B D P Q p pat e f) = (term1064 A B D P Q p pat e f).
Proof. exact (MK_COMB (@lem8303049 P) (@lem8303048 A B D P Q p pat e f)). Qed.
Lemma lem8303051 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) : (term1059 A B D P Q p pat e f) = (term1061 A B D P Q p f pat e).
Proof. exact (eq_refl (term1059 A B D P Q p pat e f)). Qed.
Lemma lem8303052 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) : ((term1058 A B D P Q p pat e f) = (term1059 A B D P Q p pat e f)) = ((term1059 A B D P Q p pat e f) = (term1061 A B D P Q p f pat e)).
Proof. exact (MK_COMB (@lem8303050 A B D P Q p pat e f) (@lem8303051 A B D P Q p f pat e)). Qed.
Lemma lem8303053 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) : (term1059 A B D P Q p pat e f) = (term1061 A B D P Q p f pat e).
Proof. exact (EQ_MP (@lem8303052 A B D P Q p f pat e) (@lem8303044 A B D P Q p pat e f)). Qed.
Lemma lem8303062 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8303063 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1065 A B D P Q p pat e f a) = (term1066 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8303053 A B D P Q p f pat e) (@lem8303062 P a)). Qed.
Lemma lem8303065 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8303066 {P : Type'} (f : P -> Prop) (y : P) : (term1027 P f y) = (f y).
Proof. exact (@lem8303065 P Prop f y). Qed.
Lemma lem8303067 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1067 A B D P Q p f pat e a) = (term1066 A B D P Q p f pat e a).
Proof. exact (@lem8303066 P (term1061 A B D P Q p f pat e) a). Qed.
Lemma lem8303068 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (x : P) : (term1066 A B D P Q p f pat e x) = (term1068 A B D P Q p f pat e x).
Proof. exact (eq_refl (term1066 A B D P Q p f pat e x)). Qed.
Lemma lem8303069 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) : (term1069 A B D P Q p f pat e) = (term1061 A B D P Q p f pat e).
Proof. exact (fun_ext (fun x : P => @lem8303068 A B D P Q p f pat e x)). Qed.
Lemma lem8303070 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8303071 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1067 A B D P Q p f pat e a) = (term1066 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8303069 A B D P Q p f pat e) (@lem8303070 P a)). Qed.
Lemma lem8303072 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8303073 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1070 A B D P Q p f pat e a) = (term1071 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8303072) (@lem8303071 A B D P Q p f pat e a)). Qed.
Lemma lem8303074 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1066 A B D P Q p f pat e a) = (term1068 A B D P Q p f pat e a).
Proof. exact (eq_refl (term1066 A B D P Q p f pat e a)). Qed.
Lemma lem8303075 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : ((term1067 A B D P Q p f pat e a) = (term1066 A B D P Q p f pat e a)) = ((term1066 A B D P Q p f pat e a) = (term1068 A B D P Q p f pat e a)).
Proof. exact (MK_COMB (@lem8303073 A B D P Q p f pat e a) (@lem8303074 A B D P Q p f pat e a)). Qed.
Lemma lem8303076 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1066 A B D P Q p f pat e a) = (term1068 A B D P Q p f pat e a).
Proof. exact (EQ_MP (@lem8303075 A B D P Q p f pat e a) (@lem8303067 A B D P Q p f pat e a)). Qed.
Lemma lem8303085 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1065 A B D P Q p pat e f a) = (term1068 A B D P Q p f pat e a).
Proof. exact (TRANS (@lem8303063 A B D P Q p f pat e a) (@lem8303076 A B D P Q p f pat e a)). Qed.
Lemma lem8303086 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8303087 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1072 A B D P Q p pat e f a) = (term1073 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8303086) (@lem8303085 A B D P Q p f pat e a)). Qed.
Lemma lem8303097 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8303098 {A B P : Type'} (f : type557 A B P) (y : A -> B) : (term1074 A B P f y) = (f y).
Proof. exact (@lem8303097 (A -> B) (P -> A) f y). Qed.
Lemma lem8303099 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1075 A B D P Q arg pat e f) = (term1076 A B D P Q arg pat e f).
Proof. exact (@lem8303098 A B P (term1077 A B D P Q arg pat e) f). Qed.
Lemma lem8303100 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1076 A B D P Q arg pat e f) = (term1078 A D P Q arg pat e).
Proof. exact (eq_refl (term1076 A B D P Q arg pat e f)). Qed.
Lemma lem8303101 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1079 A B D P Q arg pat e) = (term1077 A B D P Q arg pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8303100 A B D P Q f arg pat e)). Qed.
Lemma lem8303102 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8303103 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1075 A B D P Q arg pat e f) = (term1076 A B D P Q arg pat e f).
Proof. exact (MK_COMB (@lem8303101 A B D P Q arg pat e) (@lem8303102 A B f)). Qed.
Lemma lem8303104 {A P : Type'} : (@eq (P -> A)) = (@eq (P -> A)).
Proof. exact (eq_refl (@eq (P -> A))). Qed.
Lemma lem8303105 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1080 A B D P Q arg pat e f) = (term1081 A B D P Q arg pat e f).
Proof. exact (MK_COMB (@lem8303104 A P) (@lem8303103 A B D P Q arg pat e f)). Qed.
Lemma lem8303106 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1076 A B D P Q arg pat e f) = (term1078 A D P Q arg pat e).
Proof. exact (eq_refl (term1076 A B D P Q arg pat e f)). Qed.
Lemma lem8303107 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : ((term1075 A B D P Q arg pat e f) = (term1076 A B D P Q arg pat e f)) = ((term1076 A B D P Q arg pat e f) = (term1078 A D P Q arg pat e)).
Proof. exact (MK_COMB (@lem8303105 A B D P Q arg pat e f) (@lem8303106 A B D P Q f arg pat e)). Qed.
Lemma lem8303108 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1076 A B D P Q arg pat e f) = (term1078 A D P Q arg pat e).
Proof. exact (EQ_MP (@lem8303107 A B D P Q f arg pat e) (@lem8303099 A B D P Q arg pat e f)). Qed.
Lemma lem8303113 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8303114 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1082 A B D P Q arg pat e f a) = (term1083 A D P Q arg pat e a).
Proof. exact (MK_COMB (@lem8303108 A B D P Q f arg pat e) (@lem8303113 P a)). Qed.
Lemma lem8303116 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8303117 {A P : Type'} (f : P -> A) (y : P) : (term128 A P f y) = (f y).
Proof. exact (@lem8303116 P A f y). Qed.
Lemma lem8303118 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1084 A D P Q arg pat e a) = (term1083 A D P Q arg pat e a).
Proof. exact (@lem8303117 A P (term1078 A D P Q arg pat e) a). Qed.
Lemma lem8303119 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term1083 A D P Q arg pat e x) = (term1085 A D P Q arg pat e x).
Proof. exact (eq_refl (term1083 A D P Q arg pat e x)). Qed.
Lemma lem8303120 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1086 A D P Q arg pat e) = (term1078 A D P Q arg pat e).
Proof. exact (fun_ext (fun x : P => @lem8303119 A D P Q arg pat e x)). Qed.
Lemma lem8303121 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8303122 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1084 A D P Q arg pat e a) = (term1083 A D P Q arg pat e a).
Proof. exact (MK_COMB (@lem8303120 A D P Q arg pat e) (@lem8303121 P a)). Qed.
Lemma lem8303123 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem8303124 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1087 A D P Q arg pat e a) = (term1088 A D P Q arg pat e a).
Proof. exact (MK_COMB (@lem8303123 A) (@lem8303122 A D P Q arg pat e a)). Qed.
Lemma lem8303125 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1083 A D P Q arg pat e a) = (term1085 A D P Q arg pat e a).
Proof. exact (eq_refl (term1083 A D P Q arg pat e a)). Qed.
Lemma lem8303126 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : ((term1084 A D P Q arg pat e a) = (term1083 A D P Q arg pat e a)) = ((term1083 A D P Q arg pat e a) = (term1085 A D P Q arg pat e a)).
Proof. exact (MK_COMB (@lem8303124 A D P Q arg pat e a) (@lem8303125 A D P Q arg pat e a)). Qed.
Lemma lem8303127 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1083 A D P Q arg pat e a) = (term1085 A D P Q arg pat e a).
Proof. exact (EQ_MP (@lem8303126 A D P Q arg pat e a) (@lem8303118 A D P Q arg pat e a)). Qed.
Lemma lem8303132 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1082 A B D P Q arg pat e f a) = (term1085 A D P Q arg pat e a).
Proof. exact (TRANS (@lem8303114 A B D P Q f arg pat e a) (@lem8303127 A D P Q arg pat e a)). Qed.
Lemma lem8303133 {A : Type'} (lt2 : type1402 A) (y : A) : (lt2 y) = (lt2 y).
Proof. exact (eq_refl (lt2 y)). Qed.
Lemma lem8303134 {A B D P Q : Type'} (f : A -> B) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1089 A B D P Q lt2 y arg pat e f a) = (term1090 A D P Q lt2 y arg pat e a).
Proof. exact (MK_COMB (@lem8303133 A lt2 y) (@lem8303132 A B D P Q f arg pat e a)). Qed.
Lemma lem8303139 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1052 A B D P Q p lt2 y arg pat e f a) = (term1091 A B D P Q p f lt2 y arg pat e a).
Proof. exact (MK_COMB (@lem8303087 A B D P Q p f pat e a) (@lem8303134 A B D P Q f lt2 y arg pat e a)). Qed.
Lemma lem8303154 {A B D P Q : Type'} (s : P -> A) (p : type560 A B P) (f : A -> B) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) (q' : Prop) : term1092 A B D P Q s p f lt2 y arg pat e a q'.
Proof. exact (@lem8303038 A B D P Q p arg pat e f lt2 y s a (term1091 A B D P Q p f lt2 y arg pat e a) q'). Qed.
Lemma lem8303155 {A B D P Q : Type'} (s : P -> A) (p : type560 A B P) (f : A -> B) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) (q' : Prop) : term1093 A B D P Q s p f lt2 y arg pat e a q'.
Proof. exact (@lem8303154 A B D P Q s p f lt2 y arg pat e a q' (@lem8303139 A B D P Q p f lt2 y arg pat e a)). Qed.
Lemma lem8303167 {A P : Type'} (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term1053 A P lt2 y s a) = (term1053 A P lt2 y s a).
Proof. exact (eq_refl (term1053 A P lt2 y s a)). Qed.
Lemma lem8303168 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : term1094 A B D P Q p f arg pat e lt2 y s a.
Proof. exact (fun h0 : term1091 A B D P Q p f lt2 y arg pat e a => @lem8303167 A P lt2 y s a). Qed.
Lemma lem8303169 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : term1095 A B D P Q p f arg pat e lt2 y s a.
Proof. exact (@lem8303155 A B D P Q s p f lt2 y arg pat e a (term1053 A P lt2 y s a)). Qed.
Lemma lem8303170 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term1096 A B D P Q p arg pat e f lt2 y s a) = (term1097 A B D P Q p f arg pat e lt2 y s a).
Proof. exact (@lem8303169 A B D P Q p f arg pat e lt2 y s a (@lem8303168 A B D P Q p f arg pat e lt2 y s a)). Qed.
Lemma lem8303230 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (a : P) : (term1098 A B D P Q p arg pat e f lt2 s a) = (term1099 A B D P Q p f arg pat e lt2 s a).
Proof. exact (fun_ext (fun y : A => @lem8303170 A B D P Q p f arg pat e lt2 y s a)). Qed.
Lemma lem8303290 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8303291 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (a : P) : (term1100 A B D P Q p arg pat e f lt2 s a) = (term1101 A B D P Q p f arg pat e lt2 s a).
Proof. exact (MK_COMB (@lem8303290 A) (@lem8303230 A B D P Q p f arg pat e lt2 s a)). Qed.
Lemma lem8303355 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1102 A B D P Q p arg pat e f lt2 s) = (term1103 A B D P Q p f arg pat e lt2 s).
Proof. exact (fun_ext (fun a : P => @lem8303291 A B D P Q p f arg pat e lt2 s a)). Qed.
Lemma lem8303419 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8303420 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1104 A B D P Q p arg pat e f lt2 s) = (term1105 A B D P Q p f arg pat e lt2 s).
Proof. exact (MK_COMB (@lem8303419 P) (@lem8303355 A B D P Q p f arg pat e lt2 s)). Qed.
Lemma lem8303488 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1106 A B D P Q p arg pat e lt2 s) = (term1107 A B D P Q p arg pat e lt2 s).
Proof. exact (fun_ext (fun f : A -> B => @lem8303420 A B D P Q p f arg pat e lt2 s)). Qed.
Lemma lem8303556 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8303557 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1108 A B D P Q p arg pat e lt2 s) = (term1109 A B D P Q p arg pat e lt2 s).
Proof. exact (MK_COMB (@lem8303556 A B) (@lem8303488 A B D P Q p arg pat e lt2 s)). Qed.
Lemma lem8303629 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8303630 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1110 A B D P Q p arg pat e lt2 s) = (term1111 A B D P Q p arg pat e lt2 s).
Proof. exact (MK_COMB (@lem8303629) (@lem8303557 A B D P Q p arg pat e lt2 s)). Qed.
Lemma lem8303719 (p : Prop) (q : Prop) (p' : Prop) (q' : Prop) : term170 p q p' q'.
Proof. exact (fun h0 : p = p' => @lem4211 q q' p p' h0). Qed.
Lemma lem8303720 (p : Prop) (q : Prop) (p' : Prop) : term171 p q p'.
Proof. exact (fun q' : Prop => @lem8303719 p q p' q'). Qed.
Lemma lem8303721 (p : Prop) (q : Prop) : term172 p q.
Proof. exact (fun p' : Prop => @lem8303720 p q p'). Qed.
Lemma lem8303722 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (g : A -> B) (a : P) : term1112 A B D P Q lt2 s p arg pat e f g a.
Proof. exact (@lem8303721 (term1032 A B P lt2 s a f g) (term1113 A B D P Q p arg pat e f g a)). Qed.
Lemma lem8303723 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (g : A -> B) (a : P) (p' : Prop) : term1114 A B D P Q lt2 s p arg pat e f g a p'.
Proof. exact (@lem8303722 A B D P Q lt2 s p arg pat e f g a p'). Qed.
Lemma lem8303724 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (g : A -> B) (a : P) (p' : Prop) : (term1114 A B D P Q lt2 s p arg pat e f g a p') = (term1115 A B D P Q lt2 s p arg pat e f g a p').
Proof. exact (eq_refl (term1114 A B D P Q lt2 s p arg pat e f g a p')). Qed.
Lemma lem8303725 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (g : A -> B) (a : P) (p' : Prop) : term1115 A B D P Q lt2 s p arg pat e f g a p'.
Proof. exact (EQ_MP (@lem8303724 A B D P Q lt2 s p arg pat e f g a p') (@lem8303723 A B D P Q lt2 s p arg pat e f g a p')). Qed.
Lemma lem8303726 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (g : A -> B) (a : P) (p' : Prop) (q' : Prop) : term1116 A B D P Q lt2 s p arg pat e f g a p' q'.
Proof. exact (@lem8303725 A B D P Q lt2 s p arg pat e f g a p' q'). Qed.
Lemma lem8303727 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (g : A -> B) (a : P) (p' : Prop) (q' : Prop) : (term1116 A B D P Q lt2 s p arg pat e f g a p' q') = (term1117 A B D P Q lt2 s p arg pat e f g a p' q').
Proof. exact (eq_refl (term1116 A B D P Q lt2 s p arg pat e f g a p' q')). Qed.
Lemma lem8303728 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (g : A -> B) (a : P) (p' : Prop) (q' : Prop) : term1117 A B D P Q lt2 s p arg pat e f g a p' q'.
Proof. exact (EQ_MP (@lem8303727 A B D P Q lt2 s p arg pat e f g a p' q') (@lem8303726 A B D P Q lt2 s p arg pat e f g a p' q')). Qed.
Lemma lem8303760 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1032 A B P lt2 s a f g) = (term1032 A B P lt2 s a f g).
Proof. exact (eq_refl (term1032 A B P lt2 s a f g)). Qed.
Lemma lem8303761 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) (q' : Prop) : term1118 A B D P Q p arg pat e lt2 s a f g q'.
Proof. exact (@lem8303728 A B D P Q lt2 s p arg pat e f g a (term1032 A B P lt2 s a f g) q'). Qed.
Lemma lem8303762 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) (q' : Prop) : term1119 A B D P Q p arg pat e lt2 s a f g q'.
Proof. exact (@lem8303761 A B D P Q p arg pat e lt2 s a f g q' (@lem8303760 A B P lt2 s a f g)). Qed.
Lemma lem8303779 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8303780 {A B P : Type'} (f : type560 A B P) (y : A -> B) : (term1022 A B P f y) = (f y).
Proof. exact (@lem8303779 (A -> B) (P -> Prop) f y). Qed.
Lemma lem8303781 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1058 A B D P Q p pat e f) = (term1059 A B D P Q p pat e f).
Proof. exact (@lem8303780 A B P (term1060 A B D P Q p pat e) f). Qed.
Lemma lem8303782 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) : (term1059 A B D P Q p pat e f) = (term1061 A B D P Q p f pat e).
Proof. exact (eq_refl (term1059 A B D P Q p pat e f)). Qed.
Lemma lem8303783 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1062 A B D P Q p pat e) = (term1060 A B D P Q p pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8303782 A B D P Q p f pat e)). Qed.
Lemma lem8303784 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8303785 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1058 A B D P Q p pat e f) = (term1059 A B D P Q p pat e f).
Proof. exact (MK_COMB (@lem8303783 A B D P Q p pat e) (@lem8303784 A B f)). Qed.
Lemma lem8303786 {P : Type'} : (@eq (P -> Prop)) = (@eq (P -> Prop)).
Proof. exact (eq_refl (@eq (P -> Prop))). Qed.
Lemma lem8303787 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1063 A B D P Q p pat e f) = (term1064 A B D P Q p pat e f).
Proof. exact (MK_COMB (@lem8303786 P) (@lem8303785 A B D P Q p pat e f)). Qed.
Lemma lem8303788 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) : (term1059 A B D P Q p pat e f) = (term1061 A B D P Q p f pat e).
Proof. exact (eq_refl (term1059 A B D P Q p pat e f)). Qed.
Lemma lem8303789 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) : ((term1058 A B D P Q p pat e f) = (term1059 A B D P Q p pat e f)) = ((term1059 A B D P Q p pat e f) = (term1061 A B D P Q p f pat e)).
Proof. exact (MK_COMB (@lem8303787 A B D P Q p pat e f) (@lem8303788 A B D P Q p f pat e)). Qed.
Lemma lem8303790 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) : (term1059 A B D P Q p pat e f) = (term1061 A B D P Q p f pat e).
Proof. exact (EQ_MP (@lem8303789 A B D P Q p f pat e) (@lem8303781 A B D P Q p pat e f)). Qed.
Lemma lem8303799 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8303800 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1065 A B D P Q p pat e f a) = (term1066 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8303790 A B D P Q p f pat e) (@lem8303799 P a)). Qed.
Lemma lem8303802 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8303803 {P : Type'} (f : P -> Prop) (y : P) : (term1027 P f y) = (f y).
Proof. exact (@lem8303802 P Prop f y). Qed.
Lemma lem8303804 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1067 A B D P Q p f pat e a) = (term1066 A B D P Q p f pat e a).
Proof. exact (@lem8303803 P (term1061 A B D P Q p f pat e) a). Qed.
Lemma lem8303805 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (x : P) : (term1066 A B D P Q p f pat e x) = (term1068 A B D P Q p f pat e x).
Proof. exact (eq_refl (term1066 A B D P Q p f pat e x)). Qed.
Lemma lem8303806 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) : (term1069 A B D P Q p f pat e) = (term1061 A B D P Q p f pat e).
Proof. exact (fun_ext (fun x : P => @lem8303805 A B D P Q p f pat e x)). Qed.
Lemma lem8303807 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8303808 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1067 A B D P Q p f pat e a) = (term1066 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8303806 A B D P Q p f pat e) (@lem8303807 P a)). Qed.
Lemma lem8303809 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8303810 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1070 A B D P Q p f pat e a) = (term1071 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8303809) (@lem8303808 A B D P Q p f pat e a)). Qed.
Lemma lem8303811 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1066 A B D P Q p f pat e a) = (term1068 A B D P Q p f pat e a).
Proof. exact (eq_refl (term1066 A B D P Q p f pat e a)). Qed.
Lemma lem8303812 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : ((term1067 A B D P Q p f pat e a) = (term1066 A B D P Q p f pat e a)) = ((term1066 A B D P Q p f pat e a) = (term1068 A B D P Q p f pat e a)).
Proof. exact (MK_COMB (@lem8303810 A B D P Q p f pat e a) (@lem8303811 A B D P Q p f pat e a)). Qed.
Lemma lem8303813 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1066 A B D P Q p f pat e a) = (term1068 A B D P Q p f pat e a).
Proof. exact (EQ_MP (@lem8303812 A B D P Q p f pat e a) (@lem8303804 A B D P Q p f pat e a)). Qed.
Lemma lem8303822 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1065 A B D P Q p pat e f a) = (term1068 A B D P Q p f pat e a).
Proof. exact (TRANS (@lem8303800 A B D P Q p f pat e a) (@lem8303813 A B D P Q p f pat e a)). Qed.
Lemma lem8303823 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8303824 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1120 A B D P Q p pat e f a) = (term1121 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8303823) (@lem8303822 A B D P Q p f pat e a)). Qed.
Lemma lem8303834 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8303835 {A B P : Type'} (f : type560 A B P) (y : A -> B) : (term1022 A B P f y) = (f y).
Proof. exact (@lem8303834 (A -> B) (P -> Prop) f y). Qed.
Lemma lem8303836 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (g : A -> B) : (term1058 A B D P Q p pat e g) = (term1059 A B D P Q p pat e g).
Proof. exact (@lem8303835 A B P (term1060 A B D P Q p pat e) g). Qed.
Lemma lem8303837 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) : (term1059 A B D P Q p pat e f) = (term1061 A B D P Q p f pat e).
Proof. exact (eq_refl (term1059 A B D P Q p pat e f)). Qed.
Lemma lem8303838 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1062 A B D P Q p pat e) = (term1060 A B D P Q p pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8303837 A B D P Q p f pat e)). Qed.
Lemma lem8303839 {A B : Type'} (g : A -> B) : g = g.
Proof. exact (eq_refl g). Qed.
Lemma lem8303840 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (g : A -> B) : (term1058 A B D P Q p pat e g) = (term1059 A B D P Q p pat e g).
Proof. exact (MK_COMB (@lem8303838 A B D P Q p pat e) (@lem8303839 A B g)). Qed.
Lemma lem8303841 {P : Type'} : (@eq (P -> Prop)) = (@eq (P -> Prop)).
Proof. exact (eq_refl (@eq (P -> Prop))). Qed.
Lemma lem8303842 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (g : A -> B) : (term1063 A B D P Q p pat e g) = (term1064 A B D P Q p pat e g).
Proof. exact (MK_COMB (@lem8303841 P) (@lem8303840 A B D P Q p pat e g)). Qed.
Lemma lem8303843 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) : (term1059 A B D P Q p pat e g) = (term1061 A B D P Q p g pat e).
Proof. exact (eq_refl (term1059 A B D P Q p pat e g)). Qed.
Lemma lem8303844 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) : ((term1058 A B D P Q p pat e g) = (term1059 A B D P Q p pat e g)) = ((term1059 A B D P Q p pat e g) = (term1061 A B D P Q p g pat e)).
Proof. exact (MK_COMB (@lem8303842 A B D P Q p pat e g) (@lem8303843 A B D P Q p g pat e)). Qed.
Lemma lem8303845 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) : (term1059 A B D P Q p pat e g) = (term1061 A B D P Q p g pat e).
Proof. exact (EQ_MP (@lem8303844 A B D P Q p g pat e) (@lem8303836 A B D P Q p pat e g)). Qed.
Lemma lem8303854 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8303855 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1065 A B D P Q p pat e g a) = (term1066 A B D P Q p g pat e a).
Proof. exact (MK_COMB (@lem8303845 A B D P Q p g pat e) (@lem8303854 P a)). Qed.
Lemma lem8303857 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8303858 {P : Type'} (f : P -> Prop) (y : P) : (term1027 P f y) = (f y).
Proof. exact (@lem8303857 P Prop f y). Qed.
Lemma lem8303859 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1067 A B D P Q p g pat e a) = (term1066 A B D P Q p g pat e a).
Proof. exact (@lem8303858 P (term1061 A B D P Q p g pat e) a). Qed.
Lemma lem8303860 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (x : P) : (term1066 A B D P Q p g pat e x) = (term1068 A B D P Q p g pat e x).
Proof. exact (eq_refl (term1066 A B D P Q p g pat e x)). Qed.
Lemma lem8303861 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) : (term1069 A B D P Q p g pat e) = (term1061 A B D P Q p g pat e).
Proof. exact (fun_ext (fun x : P => @lem8303860 A B D P Q p g pat e x)). Qed.
Lemma lem8303862 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8303863 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1067 A B D P Q p g pat e a) = (term1066 A B D P Q p g pat e a).
Proof. exact (MK_COMB (@lem8303861 A B D P Q p g pat e) (@lem8303862 P a)). Qed.
Lemma lem8303864 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8303865 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1070 A B D P Q p g pat e a) = (term1071 A B D P Q p g pat e a).
Proof. exact (MK_COMB (@lem8303864) (@lem8303863 A B D P Q p g pat e a)). Qed.
Lemma lem8303866 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1066 A B D P Q p g pat e a) = (term1068 A B D P Q p g pat e a).
Proof. exact (eq_refl (term1066 A B D P Q p g pat e a)). Qed.
Lemma lem8303867 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : ((term1067 A B D P Q p g pat e a) = (term1066 A B D P Q p g pat e a)) = ((term1066 A B D P Q p g pat e a) = (term1068 A B D P Q p g pat e a)).
Proof. exact (MK_COMB (@lem8303865 A B D P Q p g pat e a) (@lem8303866 A B D P Q p g pat e a)). Qed.
Lemma lem8303868 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1066 A B D P Q p g pat e a) = (term1068 A B D P Q p g pat e a).
Proof. exact (EQ_MP (@lem8303867 A B D P Q p g pat e a) (@lem8303859 A B D P Q p g pat e a)). Qed.
Lemma lem8303877 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1065 A B D P Q p pat e g a) = (term1068 A B D P Q p g pat e a).
Proof. exact (TRANS (@lem8303855 A B D P Q p g pat e a) (@lem8303868 A B D P Q p g pat e a)). Qed.
Lemma lem8303878 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : ((term1065 A B D P Q p pat e f a) = (term1065 A B D P Q p pat e g a)) = ((term1068 A B D P Q p f pat e a) = (term1068 A B D P Q p g pat e a)).
Proof. exact (MK_COMB (@lem8303824 A B D P Q p f pat e a) (@lem8303877 A B D P Q p g pat e a)). Qed.
Lemma lem8303897 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8303898 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1122 A B D P Q f p pat e g a) = (term1123 A B D P Q f p g pat e a).
Proof. exact (MK_COMB (@lem8303897) (@lem8303878 A B D P Q f p g pat e a)). Qed.
Lemma lem8303922 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8303923 {A B P : Type'} (f : type557 A B P) (y : A -> B) : (term1074 A B P f y) = (f y).
Proof. exact (@lem8303922 (A -> B) (P -> A) f y). Qed.
Lemma lem8303924 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1075 A B D P Q arg pat e f) = (term1076 A B D P Q arg pat e f).
Proof. exact (@lem8303923 A B P (term1077 A B D P Q arg pat e) f). Qed.
Lemma lem8303925 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1076 A B D P Q arg pat e f) = (term1078 A D P Q arg pat e).
Proof. exact (eq_refl (term1076 A B D P Q arg pat e f)). Qed.
Lemma lem8303926 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1079 A B D P Q arg pat e) = (term1077 A B D P Q arg pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8303925 A B D P Q f arg pat e)). Qed.
Lemma lem8303927 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8303928 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1075 A B D P Q arg pat e f) = (term1076 A B D P Q arg pat e f).
Proof. exact (MK_COMB (@lem8303926 A B D P Q arg pat e) (@lem8303927 A B f)). Qed.
Lemma lem8303929 {A P : Type'} : (@eq (P -> A)) = (@eq (P -> A)).
Proof. exact (eq_refl (@eq (P -> A))). Qed.
Lemma lem8303930 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1080 A B D P Q arg pat e f) = (term1081 A B D P Q arg pat e f).
Proof. exact (MK_COMB (@lem8303929 A P) (@lem8303928 A B D P Q arg pat e f)). Qed.
Lemma lem8303931 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1076 A B D P Q arg pat e f) = (term1078 A D P Q arg pat e).
Proof. exact (eq_refl (term1076 A B D P Q arg pat e f)). Qed.
Lemma lem8303932 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : ((term1075 A B D P Q arg pat e f) = (term1076 A B D P Q arg pat e f)) = ((term1076 A B D P Q arg pat e f) = (term1078 A D P Q arg pat e)).
Proof. exact (MK_COMB (@lem8303930 A B D P Q arg pat e f) (@lem8303931 A B D P Q f arg pat e)). Qed.
Lemma lem8303933 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1076 A B D P Q arg pat e f) = (term1078 A D P Q arg pat e).
Proof. exact (EQ_MP (@lem8303932 A B D P Q f arg pat e) (@lem8303924 A B D P Q arg pat e f)). Qed.
Lemma lem8303938 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8303939 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1082 A B D P Q arg pat e f a) = (term1083 A D P Q arg pat e a).
Proof. exact (MK_COMB (@lem8303933 A B D P Q f arg pat e) (@lem8303938 P a)). Qed.
Lemma lem8303941 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8303942 {A P : Type'} (f : P -> A) (y : P) : (term128 A P f y) = (f y).
Proof. exact (@lem8303941 P A f y). Qed.
Lemma lem8303943 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1084 A D P Q arg pat e a) = (term1083 A D P Q arg pat e a).
Proof. exact (@lem8303942 A P (term1078 A D P Q arg pat e) a). Qed.
Lemma lem8303944 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term1083 A D P Q arg pat e x) = (term1085 A D P Q arg pat e x).
Proof. exact (eq_refl (term1083 A D P Q arg pat e x)). Qed.
Lemma lem8303945 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1086 A D P Q arg pat e) = (term1078 A D P Q arg pat e).
Proof. exact (fun_ext (fun x : P => @lem8303944 A D P Q arg pat e x)). Qed.
Lemma lem8303946 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8303947 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1084 A D P Q arg pat e a) = (term1083 A D P Q arg pat e a).
Proof. exact (MK_COMB (@lem8303945 A D P Q arg pat e) (@lem8303946 P a)). Qed.
Lemma lem8303948 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem8303949 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1087 A D P Q arg pat e a) = (term1088 A D P Q arg pat e a).
Proof. exact (MK_COMB (@lem8303948 A) (@lem8303947 A D P Q arg pat e a)). Qed.
Lemma lem8303950 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1083 A D P Q arg pat e a) = (term1085 A D P Q arg pat e a).
Proof. exact (eq_refl (term1083 A D P Q arg pat e a)). Qed.
Lemma lem8303951 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : ((term1084 A D P Q arg pat e a) = (term1083 A D P Q arg pat e a)) = ((term1083 A D P Q arg pat e a) = (term1085 A D P Q arg pat e a)).
Proof. exact (MK_COMB (@lem8303949 A D P Q arg pat e a) (@lem8303950 A D P Q arg pat e a)). Qed.
Lemma lem8303952 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1083 A D P Q arg pat e a) = (term1085 A D P Q arg pat e a).
Proof. exact (EQ_MP (@lem8303951 A D P Q arg pat e a) (@lem8303943 A D P Q arg pat e a)). Qed.
Lemma lem8303957 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1082 A B D P Q arg pat e f a) = (term1085 A D P Q arg pat e a).
Proof. exact (TRANS (@lem8303939 A B D P Q f arg pat e a) (@lem8303952 A D P Q arg pat e a)). Qed.
Lemma lem8303958 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem8303959 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1124 A B D P Q arg pat e f a) = (term1125 A D P Q arg pat e a).
Proof. exact (MK_COMB (@lem8303958 A) (@lem8303957 A B D P Q f arg pat e a)). Qed.
Lemma lem8303965 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8303966 {A B P : Type'} (f : type557 A B P) (y : A -> B) : (term1074 A B P f y) = (f y).
Proof. exact (@lem8303965 (A -> B) (P -> A) f y). Qed.
Lemma lem8303967 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (g : A -> B) : (term1075 A B D P Q arg pat e g) = (term1076 A B D P Q arg pat e g).
Proof. exact (@lem8303966 A B P (term1077 A B D P Q arg pat e) g). Qed.
Lemma lem8303968 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1076 A B D P Q arg pat e f) = (term1078 A D P Q arg pat e).
Proof. exact (eq_refl (term1076 A B D P Q arg pat e f)). Qed.
Lemma lem8303969 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1079 A B D P Q arg pat e) = (term1077 A B D P Q arg pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8303968 A B D P Q f arg pat e)). Qed.
Lemma lem8303970 {A B : Type'} (g : A -> B) : g = g.
Proof. exact (eq_refl g). Qed.
Lemma lem8303971 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (g : A -> B) : (term1075 A B D P Q arg pat e g) = (term1076 A B D P Q arg pat e g).
Proof. exact (MK_COMB (@lem8303969 A B D P Q arg pat e) (@lem8303970 A B g)). Qed.
Lemma lem8303972 {A P : Type'} : (@eq (P -> A)) = (@eq (P -> A)).
Proof. exact (eq_refl (@eq (P -> A))). Qed.
Lemma lem8303973 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (g : A -> B) : (term1080 A B D P Q arg pat e g) = (term1081 A B D P Q arg pat e g).
Proof. exact (MK_COMB (@lem8303972 A P) (@lem8303971 A B D P Q arg pat e g)). Qed.
Lemma lem8303974 {A B D P Q : Type'} (g : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1076 A B D P Q arg pat e g) = (term1078 A D P Q arg pat e).
Proof. exact (eq_refl (term1076 A B D P Q arg pat e g)). Qed.
Lemma lem8303975 {A B D P Q : Type'} (g : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : ((term1075 A B D P Q arg pat e g) = (term1076 A B D P Q arg pat e g)) = ((term1076 A B D P Q arg pat e g) = (term1078 A D P Q arg pat e)).
Proof. exact (MK_COMB (@lem8303973 A B D P Q arg pat e g) (@lem8303974 A B D P Q g arg pat e)). Qed.
Lemma lem8303976 {A B D P Q : Type'} (g : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1076 A B D P Q arg pat e g) = (term1078 A D P Q arg pat e).
Proof. exact (EQ_MP (@lem8303975 A B D P Q g arg pat e) (@lem8303967 A B D P Q arg pat e g)). Qed.
Lemma lem8303981 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8303982 {A B D P Q : Type'} (g : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1082 A B D P Q arg pat e g a) = (term1083 A D P Q arg pat e a).
Proof. exact (MK_COMB (@lem8303976 A B D P Q g arg pat e) (@lem8303981 P a)). Qed.
Lemma lem8303984 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8303985 {A P : Type'} (f : P -> A) (y : P) : (term128 A P f y) = (f y).
Proof. exact (@lem8303984 P A f y). Qed.
Lemma lem8303986 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1084 A D P Q arg pat e a) = (term1083 A D P Q arg pat e a).
Proof. exact (@lem8303985 A P (term1078 A D P Q arg pat e) a). Qed.
Lemma lem8303987 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term1083 A D P Q arg pat e x) = (term1085 A D P Q arg pat e x).
Proof. exact (eq_refl (term1083 A D P Q arg pat e x)). Qed.
Lemma lem8303988 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1086 A D P Q arg pat e) = (term1078 A D P Q arg pat e).
Proof. exact (fun_ext (fun x : P => @lem8303987 A D P Q arg pat e x)). Qed.
Lemma lem8303989 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8303990 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1084 A D P Q arg pat e a) = (term1083 A D P Q arg pat e a).
Proof. exact (MK_COMB (@lem8303988 A D P Q arg pat e) (@lem8303989 P a)). Qed.
Lemma lem8303991 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem8303992 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1087 A D P Q arg pat e a) = (term1088 A D P Q arg pat e a).
Proof. exact (MK_COMB (@lem8303991 A) (@lem8303990 A D P Q arg pat e a)). Qed.
Lemma lem8303993 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1083 A D P Q arg pat e a) = (term1085 A D P Q arg pat e a).
Proof. exact (eq_refl (term1083 A D P Q arg pat e a)). Qed.
Lemma lem8303994 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : ((term1084 A D P Q arg pat e a) = (term1083 A D P Q arg pat e a)) = ((term1083 A D P Q arg pat e a) = (term1085 A D P Q arg pat e a)).
Proof. exact (MK_COMB (@lem8303992 A D P Q arg pat e a) (@lem8303993 A D P Q arg pat e a)). Qed.
Lemma lem8303995 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1083 A D P Q arg pat e a) = (term1085 A D P Q arg pat e a).
Proof. exact (EQ_MP (@lem8303994 A D P Q arg pat e a) (@lem8303986 A D P Q arg pat e a)). Qed.
Lemma lem8304000 {A B D P Q : Type'} (g : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1082 A B D P Q arg pat e g a) = (term1085 A D P Q arg pat e a).
Proof. exact (TRANS (@lem8303982 A B D P Q g arg pat e a) (@lem8303995 A D P Q arg pat e a)). Qed.
Lemma lem8304001 {A B D P Q : Type'} (f : A -> B) (g : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : ((term1082 A B D P Q arg pat e f a) = (term1082 A B D P Q arg pat e g a)) = ((term1085 A D P Q arg pat e a) = (term1085 A D P Q arg pat e a)).
Proof. exact (MK_COMB (@lem8303959 A B D P Q f arg pat e a) (@lem8304000 A B D P Q g arg pat e a)). Qed.
Lemma lem8304003 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem1863 A x) (@lem1862 A x)). Qed.
Lemma lem8304004 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (@lem8304003 A x). Qed.
Lemma lem8304005 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : ((term1085 A D P Q arg pat e a) = (term1085 A D P Q arg pat e a)) = True.
Proof. exact (@lem8304004 A (term1085 A D P Q arg pat e a)). Qed.
Lemma lem8304006 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (g : A -> B) (a : P) : ((term1082 A B D P Q arg pat e f a) = (term1082 A B D P Q arg pat e g a)) = True.
Proof. exact (TRANS (@lem8304001 A B D P Q f g arg pat e a) (@lem8304005 A D P Q arg pat e a)). Qed.
Lemma lem8304007 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8304008 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (g : A -> B) (a : P) : (term1126 A B D P Q f arg pat e g a) = (and True).
Proof. exact (MK_COMB (@lem8304007) (@lem8304006 A B D P Q f arg pat e g a)). Qed.
Lemma lem8304012 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8304013 {A B P : Type'} (f : type558 A B P) (y : A -> B) : (term120 A B P f y) = (f y).
Proof. exact (@lem8304012 (A -> B) (P -> B) f y). Qed.
Lemma lem8304014 {A B P : Type'} (f : A -> B) : (term1127 A B P f) = (term1128 A B P f).
Proof. exact (@lem8304013 A B P (term1129 A B P) f). Qed.
Lemma lem8304015 {A B P : Type'} (f : A -> B) : (term1128 A B P f) = (term1130 B P).
Proof. exact (eq_refl (term1128 A B P f)). Qed.
Lemma lem8304016 {A B P : Type'} : (term1131 A B P) = (term1129 A B P).
Proof. exact (fun_ext (fun f : A -> B => @lem8304015 A B P f)). Qed.
Lemma lem8304017 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8304018 {A B P : Type'} (f : A -> B) : (term1127 A B P f) = (term1128 A B P f).
Proof. exact (MK_COMB (@lem8304016 A B P) (@lem8304017 A B f)). Qed.
Lemma lem8304019 {B P : Type'} : (@eq (P -> B)) = (@eq (P -> B)).
Proof. exact (eq_refl (@eq (P -> B))). Qed.
Lemma lem8304020 {A B P : Type'} (f : A -> B) : (term1132 A B P f) = (term1133 A B P f).
Proof. exact (MK_COMB (@lem8304019 B P) (@lem8304018 A B P f)). Qed.
Lemma lem8304021 {A B P : Type'} (f : A -> B) : (term1128 A B P f) = (term1130 B P).
Proof. exact (eq_refl (term1128 A B P f)). Qed.
Lemma lem8304022 {A B P : Type'} (f : A -> B) : ((term1127 A B P f) = (term1128 A B P f)) = ((term1128 A B P f) = (term1130 B P)).
Proof. exact (MK_COMB (@lem8304020 A B P f) (@lem8304021 A B P f)). Qed.
Lemma lem8304023 {A B P : Type'} (f : A -> B) : (term1128 A B P f) = (term1130 B P).
Proof. exact (EQ_MP (@lem8304022 A B P f) (@lem8304014 A B P f)). Qed.
Lemma lem8304024 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8304025 {A B P : Type'} (f : A -> B) (a : P) : (term1134 A B P f a) = (term1135 B P a).
Proof. exact (MK_COMB (@lem8304023 A B P f) (@lem8304024 P a)). Qed.
Lemma lem8304027 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8304028 {B P : Type'} (f : P -> B) (y : P) : (term128 B P f y) = (f y).
Proof. exact (@lem8304027 P B f y). Qed.
Lemma lem8304029 {B P : Type'} (a : P) : (term1136 B P a) = (term1135 B P a).
Proof. exact (@lem8304028 B P (term1130 B P) a). Qed.
Lemma lem8304030 {B P : Type'} (x : P) : (term1135 B P x) = (term112 B).
Proof. exact (eq_refl (term1135 B P x)). Qed.
Lemma lem8304031 {B P : Type'} : (term1137 B P) = (term1130 B P).
Proof. exact (fun_ext (fun x : P => @lem8304030 B P x)). Qed.
Lemma lem8304032 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8304033 {B P : Type'} (a : P) : (term1136 B P a) = (term1135 B P a).
Proof. exact (MK_COMB (@lem8304031 B P) (@lem8304032 P a)). Qed.
Lemma lem8304034 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8304035 {B P : Type'} (a : P) : (term1138 B P a) = (term1139 B P a).
Proof. exact (MK_COMB (@lem8304034 B) (@lem8304033 B P a)). Qed.
Lemma lem8304036 {B P : Type'} (a : P) : (term1135 B P a) = (term112 B).
Proof. exact (eq_refl (term1135 B P a)). Qed.
Lemma lem8304037 {B P : Type'} (a : P) : ((term1136 B P a) = (term1135 B P a)) = ((term1135 B P a) = (term112 B)).
Proof. exact (MK_COMB (@lem8304035 B P a) (@lem8304036 B P a)). Qed.
Lemma lem8304038 {B P : Type'} (a : P) : (term1135 B P a) = (term112 B).
Proof. exact (EQ_MP (@lem8304037 B P a) (@lem8304029 B P a)). Qed.
Lemma lem8304039 {A B P : Type'} (f : A -> B) (a : P) : (term1134 A B P f a) = (term112 B).
Proof. exact (TRANS (@lem8304025 A B P f a) (@lem8304038 B P a)). Qed.
Lemma lem8304040 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8304041 {A B P : Type'} (f : A -> B) (a : P) : (term1140 A B P f a) = (term1141 B).
Proof. exact (MK_COMB (@lem8304040 B) (@lem8304039 A B P f a)). Qed.
Lemma lem8304043 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8304044 {A B P : Type'} (f : type558 A B P) (y : A -> B) : (term120 A B P f y) = (f y).
Proof. exact (@lem8304043 (A -> B) (P -> B) f y). Qed.
Lemma lem8304045 {A B P : Type'} (g : A -> B) : (term1127 A B P g) = (term1128 A B P g).
Proof. exact (@lem8304044 A B P (term1129 A B P) g). Qed.
Lemma lem8304046 {A B P : Type'} (f : A -> B) : (term1128 A B P f) = (term1130 B P).
Proof. exact (eq_refl (term1128 A B P f)). Qed.
Lemma lem8304047 {A B P : Type'} : (term1131 A B P) = (term1129 A B P).
Proof. exact (fun_ext (fun f : A -> B => @lem8304046 A B P f)). Qed.
Lemma lem8304048 {A B : Type'} (g : A -> B) : g = g.
Proof. exact (eq_refl g). Qed.
Lemma lem8304049 {A B P : Type'} (g : A -> B) : (term1127 A B P g) = (term1128 A B P g).
Proof. exact (MK_COMB (@lem8304047 A B P) (@lem8304048 A B g)). Qed.
Lemma lem8304050 {B P : Type'} : (@eq (P -> B)) = (@eq (P -> B)).
Proof. exact (eq_refl (@eq (P -> B))). Qed.
Lemma lem8304051 {A B P : Type'} (g : A -> B) : (term1132 A B P g) = (term1133 A B P g).
Proof. exact (MK_COMB (@lem8304050 B P) (@lem8304049 A B P g)). Qed.
Lemma lem8304052 {A B P : Type'} (g : A -> B) : (term1128 A B P g) = (term1130 B P).
Proof. exact (eq_refl (term1128 A B P g)). Qed.
Lemma lem8304053 {A B P : Type'} (g : A -> B) : ((term1127 A B P g) = (term1128 A B P g)) = ((term1128 A B P g) = (term1130 B P)).
Proof. exact (MK_COMB (@lem8304051 A B P g) (@lem8304052 A B P g)). Qed.
Lemma lem8304054 {A B P : Type'} (g : A -> B) : (term1128 A B P g) = (term1130 B P).
Proof. exact (EQ_MP (@lem8304053 A B P g) (@lem8304045 A B P g)). Qed.
Lemma lem8304055 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8304056 {A B P : Type'} (g : A -> B) (a : P) : (term1134 A B P g a) = (term1135 B P a).
Proof. exact (MK_COMB (@lem8304054 A B P g) (@lem8304055 P a)). Qed.
Lemma lem8304058 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8304059 {B P : Type'} (f : P -> B) (y : P) : (term128 B P f y) = (f y).
Proof. exact (@lem8304058 P B f y). Qed.
Lemma lem8304060 {B P : Type'} (a : P) : (term1136 B P a) = (term1135 B P a).
Proof. exact (@lem8304059 B P (term1130 B P) a). Qed.
Lemma lem8304061 {B P : Type'} (x : P) : (term1135 B P x) = (term112 B).
Proof. exact (eq_refl (term1135 B P x)). Qed.
Lemma lem8304062 {B P : Type'} : (term1137 B P) = (term1130 B P).
Proof. exact (fun_ext (fun x : P => @lem8304061 B P x)). Qed.
Lemma lem8304063 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8304064 {B P : Type'} (a : P) : (term1136 B P a) = (term1135 B P a).
Proof. exact (MK_COMB (@lem8304062 B P) (@lem8304063 P a)). Qed.
Lemma lem8304065 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8304066 {B P : Type'} (a : P) : (term1138 B P a) = (term1139 B P a).
Proof. exact (MK_COMB (@lem8304065 B) (@lem8304064 B P a)). Qed.
Lemma lem8304067 {B P : Type'} (a : P) : (term1135 B P a) = (term112 B).
Proof. exact (eq_refl (term1135 B P a)). Qed.
Lemma lem8304068 {B P : Type'} (a : P) : ((term1136 B P a) = (term1135 B P a)) = ((term1135 B P a) = (term112 B)).
Proof. exact (MK_COMB (@lem8304066 B P a) (@lem8304067 B P a)). Qed.
Lemma lem8304069 {B P : Type'} (a : P) : (term1135 B P a) = (term112 B).
Proof. exact (EQ_MP (@lem8304068 B P a) (@lem8304060 B P a)). Qed.
Lemma lem8304070 {A B P : Type'} (g : A -> B) (a : P) : (term1134 A B P g a) = (term112 B).
Proof. exact (TRANS (@lem8304056 A B P g a) (@lem8304069 B P a)). Qed.
Lemma lem8304071 {A B P : Type'} (f : A -> B) (g : A -> B) (a : P) : ((term1134 A B P f a) = (term1134 A B P g a)) = ((term112 B) = (term112 B)).
Proof. exact (MK_COMB (@lem8304041 A B P f a) (@lem8304070 A B P g a)). Qed.
Lemma lem8304073 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem1863 A x) (@lem1862 A x)). Qed.
Lemma lem8304074 {B : Type'} (x : B) : (x = x) = True.
Proof. exact (@lem8304073 B x). Qed.
Lemma lem8304075 {B : Type'} : ((term112 B) = (term112 B)) = True.
Proof. exact (@lem8304074 B (term112 B)). Qed.
Lemma lem8304076 {A B P : Type'} (f : A -> B) (g : A -> B) (a : P) : ((term1134 A B P f a) = (term1134 A B P g a)) = True.
Proof. exact (TRANS (@lem8304071 A B P f g a) (@lem8304075 B)). Qed.
Lemma lem8304077 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (g : A -> B) (a : P) : (term1142 A B D P Q arg pat e f g a) = (True /\ True).
Proof. exact (MK_COMB (@lem8304008 A B D P Q f arg pat e g a) (@lem8304076 A B P f g a)). Qed.
Lemma lem8304079 (t : Prop) : (True /\ t) = t.
Proof. exact (proj1 (@lem1842 t)). Qed.
Lemma lem8304080 : (True /\ True) = True.
Proof. exact (@lem8304079 True). Qed.
Lemma lem8304081 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (g : A -> B) (a : P) : (term1142 A B D P Q arg pat e f g a) = True.
Proof. exact (TRANS (@lem8304077 A B D P Q arg pat e f g a) (@lem8304080)). Qed.
Lemma lem8304082 {A B D P Q : Type'} (arg : type1475 A P Q) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1113 A B D P Q p arg pat e f g a) = (term1143 A B D P Q f p g pat e a).
Proof. exact (MK_COMB (@lem8303898 A B D P Q f p g pat e a) (@lem8304081 A B D P Q arg pat e f g a)). Qed.
Lemma lem8304084 (t : Prop) : (t /\ True) = t.
Proof. exact (proj1 (@lem1843 t)). Qed.
Lemma lem8304085 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1143 A B D P Q f p g pat e a) = ((term1068 A B D P Q p f pat e a) = (term1068 A B D P Q p g pat e a)).
Proof. exact (@lem8304084 ((term1068 A B D P Q p f pat e a) = (term1068 A B D P Q p g pat e a))). Qed.
Lemma lem8304104 {A B D P Q : Type'} (arg : type1475 A P Q) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1113 A B D P Q p arg pat e f g a) = ((term1068 A B D P Q p f pat e a) = (term1068 A B D P Q p g pat e a)).
Proof. exact (TRANS (@lem8304082 A B D P Q arg f p g pat e a) (@lem8304085 A B D P Q f p g pat e a)). Qed.
Lemma lem8304105 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (arg : type1475 A P Q) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : term1144 A B D P Q lt2 s arg f p g pat e a.
Proof. exact (fun h0 : term1032 A B P lt2 s a f g => @lem8304104 A B D P Q arg f p g pat e a). Qed.
Lemma lem8304106 {A B D P Q : Type'} (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : term1145 A B D P Q arg lt2 s f p g pat e a.
Proof. exact (@lem8303762 A B D P Q p arg pat e lt2 s a f g ((term1068 A B D P Q p f pat e a) = (term1068 A B D P Q p g pat e a))). Qed.
Lemma lem8304107 {A B D P Q : Type'} (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1146 A B D P Q lt2 s p arg pat e f g a) = (term1147 A B D P Q lt2 s f p g pat e a).
Proof. exact (@lem8304106 A B D P Q arg lt2 s f p g pat e a (@lem8304105 A B D P Q lt2 s arg f p g pat e a)). Qed.
Lemma lem8304237 {A B D P Q : Type'} (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) : (term1148 A B D P Q lt2 s p arg pat e f g) = (term1149 A B D P Q lt2 s f p g pat e).
Proof. exact (fun_ext (fun a : P => @lem8304107 A B D P Q arg lt2 s f p g pat e a)). Qed.
Lemma lem8304367 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8304368 {A B D P Q : Type'} (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) : (term1150 A B D P Q lt2 s p arg pat e f g) = (term1151 A B D P Q lt2 s f p g pat e).
Proof. exact (MK_COMB (@lem8304367 P) (@lem8304237 A B D P Q arg lt2 s f p g pat e)). Qed.
Lemma lem8304502 {A B D P Q : Type'} (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1152 A B D P Q lt2 s p arg pat e f) = (term1153 A B D P Q lt2 s f p pat e).
Proof. exact (fun_ext (fun g : A -> B => @lem8304368 A B D P Q arg lt2 s f p g pat e)). Qed.
Lemma lem8304636 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8304637 {A B D P Q : Type'} (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1154 A B D P Q lt2 s p arg pat e f) = (term1155 A B D P Q lt2 s f p pat e).
Proof. exact (MK_COMB (@lem8304636 A B) (@lem8304502 A B D P Q arg lt2 s f p pat e)). Qed.
Lemma lem8304775 {A B D P Q : Type'} (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1156 A B D P Q lt2 s p arg pat e) = (term1157 A B D P Q lt2 s p pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8304637 A B D P Q arg lt2 s f p pat e)). Qed.
Lemma lem8304913 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8304914 {A B D P Q : Type'} (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1158 A B D P Q lt2 s p arg pat e) = (term1159 A B D P Q lt2 s p pat e).
Proof. exact (MK_COMB (@lem8304913 A B) (@lem8304775 A B D P Q arg lt2 s p pat e)). Qed.
Lemma lem8305056 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8305057 {A B D P Q : Type'} (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1160 A B D P Q lt2 s p arg pat e) = (term1161 A B D P Q lt2 s p pat e).
Proof. exact (MK_COMB (@lem8305056) (@lem8304914 A B D P Q arg lt2 s p pat e)). Qed.
Lemma lem8305210 (p : Prop) (q : Prop) (p' : Prop) (q' : Prop) : term170 p q p' q'.
Proof. exact (fun h0 : p = p' => @lem4211 q q' p p' h0). Qed.
Lemma lem8305211 (p : Prop) (q : Prop) (p' : Prop) : term171 p q p'.
Proof. exact (fun q' : Prop => @lem8305210 p q p' q'). Qed.
Lemma lem8305212 (p : Prop) (q : Prop) : term172 p q.
Proof. exact (fun p' : Prop => @lem8305211 p q p'). Qed.
Lemma lem8305213 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (a : P) : term1162 A B D P Q p arg pat e f a.
Proof. exact (@lem8305212 (p f a) ((term199 A B D P Q pat e f arg a) = (term1163 A B D P Q p arg pat e f a))). Qed.
Lemma lem8305214 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (a : P) (p' : Prop) : term1164 A B D P Q p arg pat e f a p'.
Proof. exact (@lem8305213 A B D P Q p arg pat e f a p'). Qed.
Lemma lem8305215 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (a : P) (p' : Prop) : (term1164 A B D P Q p arg pat e f a p') = (term1165 A B D P Q p arg pat e f a p').
Proof. exact (eq_refl (term1164 A B D P Q p arg pat e f a p')). Qed.
Lemma lem8305216 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (a : P) (p' : Prop) : term1165 A B D P Q p arg pat e f a p'.
Proof. exact (EQ_MP (@lem8305215 A B D P Q p arg pat e f a p') (@lem8305214 A B D P Q p arg pat e f a p')). Qed.
Lemma lem8305217 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (a : P) (p' : Prop) (q' : Prop) : term1166 A B D P Q p arg pat e f a p' q'.
Proof. exact (@lem8305216 A B D P Q p arg pat e f a p' q'). Qed.
Lemma lem8305218 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (a : P) (p' : Prop) (q' : Prop) : (term1166 A B D P Q p arg pat e f a p' q') = (term1167 A B D P Q p arg pat e f a p' q').
Proof. exact (eq_refl (term1166 A B D P Q p arg pat e f a p' q')). Qed.
Lemma lem8305219 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (a : P) (p' : Prop) (q' : Prop) : term1167 A B D P Q p arg pat e f a p' q'.
Proof. exact (EQ_MP (@lem8305218 A B D P Q p arg pat e f a p' q') (@lem8305217 A B D P Q p arg pat e f a p' q')). Qed.
Lemma lem8305220 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (p f a) = (p f a).
Proof. exact (eq_refl (p f a)). Qed.
Lemma lem8305221 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (a : P) (q' : Prop) : term1168 A B D P Q arg pat e p f a q'.
Proof. exact (@lem8305219 A B D P Q p arg pat e f a (p f a) q'). Qed.
Lemma lem8305222 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (a : P) (q' : Prop) : term1169 A B D P Q arg pat e p f a q'.
Proof. exact (@lem8305221 A B D P Q arg pat e p f a q' (@lem8305220 A B P p f a)). Qed.
Lemma lem8305223 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) (h1 : p f a) : p f a.
Proof. exact (h1). Qed.
Lemma lem8305224 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (p f a) = ((p f a) = True).
Proof. exact (@lem7 (p f a)). Qed.
Lemma lem8305294 {_2963 : Type'} (g : Prop) (t : _2963) (e : _2963) (g' : Prop) (t' : _2963) (e' : _2963) : term180 _2963 g t e g' t' e'.
Proof. exact (EQ_MP (@lem14781 _2963 g t e g' t' e') (@lem15222 _2963 g t e g' t' e')). Qed.
Lemma lem8305295 {_2963 : Type'} (g : Prop) (t : _2963) (e : _2963) (g' : Prop) (t' : _2963) : term181 _2963 g t e g' t'.
Proof. exact (fun e' : _2963 => @lem8305294 _2963 g t e g' t' e'). Qed.
Lemma lem8305296 {_2963 : Type'} (g : Prop) (t : _2963) (e : _2963) (g' : Prop) : term182 _2963 g t e g'.
Proof. exact (fun t' : _2963 => @lem8305295 _2963 g t e g' t'). Qed.
Lemma lem8305297 {_2963 : Type'} (g : Prop) (t : _2963) (e : _2963) : term183 _2963 g t e.
Proof. exact (fun g' : Prop => @lem8305296 _2963 g t e g'). Qed.
Lemma lem8305298 {B : Type'} (g : Prop) (t : B) (e : B) : term183 B g t e.
Proof. exact (@lem8305297 B g t e). Qed.
Lemma lem8305299 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (a : P) : term1170 A B D P Q p arg pat e f a.
Proof. exact (@lem8305298 B (term1065 A B D P Q p pat e f a) (term1171 A B D P Q arg pat e f a) (term1134 A B P f a)). Qed.
Lemma lem8305300 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (a : P) (g' : Prop) : term1172 A B D P Q p arg pat e f a g'.
Proof. exact (@lem8305299 A B D P Q p arg pat e f a g'). Qed.
Lemma lem8305301 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (a : P) (g' : Prop) : (term1172 A B D P Q p arg pat e f a g') = (term1173 A B D P Q p arg pat e f a g').
Proof. exact (eq_refl (term1172 A B D P Q p arg pat e f a g')). Qed.
Lemma lem8305302 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (a : P) (g' : Prop) : term1173 A B D P Q p arg pat e f a g'.
Proof. exact (EQ_MP (@lem8305301 A B D P Q p arg pat e f a g') (@lem8305300 A B D P Q p arg pat e f a g')). Qed.
Lemma lem8305303 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (a : P) (g' : Prop) (t' : B) : term1174 A B D P Q p arg pat e f a g' t'.
Proof. exact (@lem8305302 A B D P Q p arg pat e f a g' t'). Qed.
Lemma lem8305304 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (a : P) (g' : Prop) (t' : B) : (term1174 A B D P Q p arg pat e f a g' t') = (term1175 A B D P Q p arg pat e f a g' t').
Proof. exact (eq_refl (term1174 A B D P Q p arg pat e f a g' t')). Qed.
Lemma lem8305305 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (a : P) (g' : Prop) (t' : B) : term1175 A B D P Q p arg pat e f a g' t'.
Proof. exact (EQ_MP (@lem8305304 A B D P Q p arg pat e f a g' t') (@lem8305303 A B D P Q p arg pat e f a g' t')). Qed.
Lemma lem8305306 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (a : P) (g' : Prop) (t' : B) (e' : B) : term1176 A B D P Q p arg pat e f a g' t' e'.
Proof. exact (@lem8305305 A B D P Q p arg pat e f a g' t' e'). Qed.
Lemma lem8305307 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (a : P) (g' : Prop) (t' : B) (e' : B) : (term1176 A B D P Q p arg pat e f a g' t' e') = (term1177 A B D P Q p arg pat e f a g' t' e').
Proof. exact (eq_refl (term1176 A B D P Q p arg pat e f a g' t' e')). Qed.
Lemma lem8305308 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (a : P) (g' : Prop) (t' : B) (e' : B) : term1177 A B D P Q p arg pat e f a g' t' e'.
Proof. exact (EQ_MP (@lem8305307 A B D P Q p arg pat e f a g' t' e') (@lem8305306 A B D P Q p arg pat e f a g' t' e')). Qed.
Lemma lem8305310 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8305311 {A B P : Type'} (f : type560 A B P) (y : A -> B) : (term1022 A B P f y) = (f y).
Proof. exact (@lem8305310 (A -> B) (P -> Prop) f y). Qed.
Lemma lem8305312 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1058 A B D P Q p pat e f) = (term1059 A B D P Q p pat e f).
Proof. exact (@lem8305311 A B P (term1060 A B D P Q p pat e) f). Qed.
Lemma lem8305313 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) : (term1059 A B D P Q p pat e f) = (term1061 A B D P Q p f pat e).
Proof. exact (eq_refl (term1059 A B D P Q p pat e f)). Qed.
Lemma lem8305314 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1062 A B D P Q p pat e) = (term1060 A B D P Q p pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8305313 A B D P Q p f pat e)). Qed.
Lemma lem8305315 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8305316 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1058 A B D P Q p pat e f) = (term1059 A B D P Q p pat e f).
Proof. exact (MK_COMB (@lem8305314 A B D P Q p pat e) (@lem8305315 A B f)). Qed.
Lemma lem8305317 {P : Type'} : (@eq (P -> Prop)) = (@eq (P -> Prop)).
Proof. exact (eq_refl (@eq (P -> Prop))). Qed.
Lemma lem8305318 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1063 A B D P Q p pat e f) = (term1064 A B D P Q p pat e f).
Proof. exact (MK_COMB (@lem8305317 P) (@lem8305316 A B D P Q p pat e f)). Qed.
Lemma lem8305319 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) : (term1059 A B D P Q p pat e f) = (term1061 A B D P Q p f pat e).
Proof. exact (eq_refl (term1059 A B D P Q p pat e f)). Qed.
Lemma lem8305320 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) : ((term1058 A B D P Q p pat e f) = (term1059 A B D P Q p pat e f)) = ((term1059 A B D P Q p pat e f) = (term1061 A B D P Q p f pat e)).
Proof. exact (MK_COMB (@lem8305318 A B D P Q p pat e f) (@lem8305319 A B D P Q p f pat e)). Qed.
Lemma lem8305321 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) : (term1059 A B D P Q p pat e f) = (term1061 A B D P Q p f pat e).
Proof. exact (EQ_MP (@lem8305320 A B D P Q p f pat e) (@lem8305312 A B D P Q p pat e f)). Qed.
Lemma lem8305330 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8305331 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1065 A B D P Q p pat e f a) = (term1066 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8305321 A B D P Q p f pat e) (@lem8305330 P a)). Qed.
Lemma lem8305333 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8305334 {P : Type'} (f : P -> Prop) (y : P) : (term1027 P f y) = (f y).
Proof. exact (@lem8305333 P Prop f y). Qed.
Lemma lem8305335 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1067 A B D P Q p f pat e a) = (term1066 A B D P Q p f pat e a).
Proof. exact (@lem8305334 P (term1061 A B D P Q p f pat e) a). Qed.
Lemma lem8305336 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (x : P) : (term1066 A B D P Q p f pat e x) = (term1068 A B D P Q p f pat e x).
Proof. exact (eq_refl (term1066 A B D P Q p f pat e x)). Qed.
Lemma lem8305337 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) : (term1069 A B D P Q p f pat e) = (term1061 A B D P Q p f pat e).
Proof. exact (fun_ext (fun x : P => @lem8305336 A B D P Q p f pat e x)). Qed.
Lemma lem8305338 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8305339 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1067 A B D P Q p f pat e a) = (term1066 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8305337 A B D P Q p f pat e) (@lem8305338 P a)). Qed.
Lemma lem8305340 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8305341 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1070 A B D P Q p f pat e a) = (term1071 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8305340) (@lem8305339 A B D P Q p f pat e a)). Qed.
Lemma lem8305342 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1066 A B D P Q p f pat e a) = (term1068 A B D P Q p f pat e a).
Proof. exact (eq_refl (term1066 A B D P Q p f pat e a)). Qed.
Lemma lem8305343 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : ((term1067 A B D P Q p f pat e a) = (term1066 A B D P Q p f pat e a)) = ((term1066 A B D P Q p f pat e a) = (term1068 A B D P Q p f pat e a)).
Proof. exact (MK_COMB (@lem8305341 A B D P Q p f pat e a) (@lem8305342 A B D P Q p f pat e a)). Qed.
Lemma lem8305344 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1066 A B D P Q p f pat e a) = (term1068 A B D P Q p f pat e a).
Proof. exact (EQ_MP (@lem8305343 A B D P Q p f pat e a) (@lem8305335 A B D P Q p f pat e a)). Qed.
Lemma lem8305348 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) (h1 : p f a) : (p f a) = True.
Proof. exact (EQ_MP (@lem8305224 A B P p f a) (@lem8305223 A B P p f a h1)). Qed.
Lemma lem8305349 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8305350 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) (h1 : p f a) : (term1178 A B P p f a) = (and True).
Proof. exact (MK_COMB (@lem8305349) (@lem8305348 A B P p f a h1)). Qed.
Lemma lem8305357 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term169 D P Q pat e a) = (term169 D P Q pat e a).
Proof. exact (eq_refl (term169 D P Q pat e a)). Qed.
Lemma lem8305358 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (a : P) (h1 : p f a) : (term1068 A B D P Q p f pat e a) = (term1179 D P Q pat e a).
Proof. exact (MK_COMB (@lem8305350 A B P p f a h1) (@lem8305357 D P Q pat e a)). Qed.
Lemma lem8305360 (t : Prop) : (True /\ t) = t.
Proof. exact (proj1 (@lem1842 t)). Qed.
Lemma lem8305361 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term1179 D P Q pat e a) = (term169 D P Q pat e a).
Proof. exact (@lem8305360 (term169 D P Q pat e a)). Qed.
Lemma lem8305368 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (a : P) (h1 : p f a) : (term1068 A B D P Q p f pat e a) = (term169 D P Q pat e a).
Proof. exact (TRANS (@lem8305358 A B D P Q pat e p f a h1) (@lem8305361 D P Q pat e a)). Qed.
Lemma lem8305369 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (a : P) (h1 : p f a) : (term1066 A B D P Q p f pat e a) = (term169 D P Q pat e a).
Proof. exact (TRANS (@lem8305344 A B D P Q p f pat e a) (@lem8305368 A B D P Q pat e p f a h1)). Qed.
Lemma lem8305370 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (a : P) (h1 : p f a) : (term1065 A B D P Q p pat e f a) = (term169 D P Q pat e a).
Proof. exact (TRANS (@lem8305331 A B D P Q p f pat e a) (@lem8305369 A B D P Q pat e p f a h1)). Qed.
Lemma lem8305371 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) (t' : B) (e' : B) : term1180 A B D P Q p arg f pat e a t' e'.
Proof. exact (@lem8305308 A B D P Q p arg pat e f a (term169 D P Q pat e a) t' e'). Qed.
Lemma lem8305372 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (t' : B) (e' : B) (p : type560 A B P) (f : A -> B) (a : P) (h1 : p f a) : term1181 A B D P Q p arg f pat e a t' e'.
Proof. exact (@lem8305371 A B D P Q p arg f pat e a t' e' (@lem8305370 A B D P Q pat e p f a h1)). Qed.
Lemma lem8305377 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8305378 {A B P : Type'} (f : type557 A B P) (y : A -> B) : (term1074 A B P f y) = (f y).
Proof. exact (@lem8305377 (A -> B) (P -> A) f y). Qed.
Lemma lem8305379 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1075 A B D P Q arg pat e f) = (term1076 A B D P Q arg pat e f).
Proof. exact (@lem8305378 A B P (term1077 A B D P Q arg pat e) f). Qed.
Lemma lem8305380 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1076 A B D P Q arg pat e f) = (term1078 A D P Q arg pat e).
Proof. exact (eq_refl (term1076 A B D P Q arg pat e f)). Qed.
Lemma lem8305381 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1079 A B D P Q arg pat e) = (term1077 A B D P Q arg pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8305380 A B D P Q f arg pat e)). Qed.
Lemma lem8305382 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8305383 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1075 A B D P Q arg pat e f) = (term1076 A B D P Q arg pat e f).
Proof. exact (MK_COMB (@lem8305381 A B D P Q arg pat e) (@lem8305382 A B f)). Qed.
Lemma lem8305384 {A P : Type'} : (@eq (P -> A)) = (@eq (P -> A)).
Proof. exact (eq_refl (@eq (P -> A))). Qed.
Lemma lem8305385 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1080 A B D P Q arg pat e f) = (term1081 A B D P Q arg pat e f).
Proof. exact (MK_COMB (@lem8305384 A P) (@lem8305383 A B D P Q arg pat e f)). Qed.
Lemma lem8305386 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1076 A B D P Q arg pat e f) = (term1078 A D P Q arg pat e).
Proof. exact (eq_refl (term1076 A B D P Q arg pat e f)). Qed.
Lemma lem8305387 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : ((term1075 A B D P Q arg pat e f) = (term1076 A B D P Q arg pat e f)) = ((term1076 A B D P Q arg pat e f) = (term1078 A D P Q arg pat e)).
Proof. exact (MK_COMB (@lem8305385 A B D P Q arg pat e f) (@lem8305386 A B D P Q f arg pat e)). Qed.
Lemma lem8305388 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1076 A B D P Q arg pat e f) = (term1078 A D P Q arg pat e).
Proof. exact (EQ_MP (@lem8305387 A B D P Q f arg pat e) (@lem8305379 A B D P Q arg pat e f)). Qed.
Lemma lem8305393 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8305394 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1082 A B D P Q arg pat e f a) = (term1083 A D P Q arg pat e a).
Proof. exact (MK_COMB (@lem8305388 A B D P Q f arg pat e) (@lem8305393 P a)). Qed.
Lemma lem8305396 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8305397 {A P : Type'} (f : P -> A) (y : P) : (term128 A P f y) = (f y).
Proof. exact (@lem8305396 P A f y). Qed.
Lemma lem8305398 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1084 A D P Q arg pat e a) = (term1083 A D P Q arg pat e a).
Proof. exact (@lem8305397 A P (term1078 A D P Q arg pat e) a). Qed.
Lemma lem8305399 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (x : P) : (term1083 A D P Q arg pat e x) = (term1085 A D P Q arg pat e x).
Proof. exact (eq_refl (term1083 A D P Q arg pat e x)). Qed.
Lemma lem8305400 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1086 A D P Q arg pat e) = (term1078 A D P Q arg pat e).
Proof. exact (fun_ext (fun x : P => @lem8305399 A D P Q arg pat e x)). Qed.
Lemma lem8305401 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8305402 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1084 A D P Q arg pat e a) = (term1083 A D P Q arg pat e a).
Proof. exact (MK_COMB (@lem8305400 A D P Q arg pat e) (@lem8305401 P a)). Qed.
Lemma lem8305403 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem8305404 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1087 A D P Q arg pat e a) = (term1088 A D P Q arg pat e a).
Proof. exact (MK_COMB (@lem8305403 A) (@lem8305402 A D P Q arg pat e a)). Qed.
Lemma lem8305405 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1083 A D P Q arg pat e a) = (term1085 A D P Q arg pat e a).
Proof. exact (eq_refl (term1083 A D P Q arg pat e a)). Qed.
Lemma lem8305406 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : ((term1084 A D P Q arg pat e a) = (term1083 A D P Q arg pat e a)) = ((term1083 A D P Q arg pat e a) = (term1085 A D P Q arg pat e a)).
Proof. exact (MK_COMB (@lem8305404 A D P Q arg pat e a) (@lem8305405 A D P Q arg pat e a)). Qed.
Lemma lem8305407 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1083 A D P Q arg pat e a) = (term1085 A D P Q arg pat e a).
Proof. exact (EQ_MP (@lem8305406 A D P Q arg pat e a) (@lem8305398 A D P Q arg pat e a)). Qed.
Lemma lem8305412 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1082 A B D P Q arg pat e f a) = (term1085 A D P Q arg pat e a).
Proof. exact (TRANS (@lem8305394 A B D P Q f arg pat e a) (@lem8305407 A D P Q arg pat e a)). Qed.
Lemma lem8305413 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8305414 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1171 A B D P Q arg pat e f a) = (term1182 A B D P Q f arg pat e a).
Proof. exact (MK_COMB (@lem8305413 A B f) (@lem8305412 A B D P Q f arg pat e a)). Qed.
Lemma lem8305419 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : term1183 A B D P Q f arg pat e a.
Proof. exact (fun h0 : term169 D P Q pat e a => @lem8305414 A B D P Q f arg pat e a). Qed.
Lemma lem8305420 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (e' : B) (p : type560 A B P) (f : A -> B) (a : P) (h1 : p f a) : term1184 A B D P Q p f arg pat e a e'.
Proof. exact (@lem8305372 A B D P Q arg pat e (term1182 A B D P Q f arg pat e a) e' p f a h1). Qed.
Lemma lem8305421 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (e' : B) (p : type560 A B P) (f : A -> B) (a : P) (h1 : p f a) : term1185 A B D P Q p f arg pat e a e'.
Proof. exact (@lem8305420 A B D P Q arg pat e e' p f a h1 (@lem8305419 A B D P Q f arg pat e a)). Qed.
Lemma lem8305426 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8305427 {A B P : Type'} (f : type558 A B P) (y : A -> B) : (term120 A B P f y) = (f y).
Proof. exact (@lem8305426 (A -> B) (P -> B) f y). Qed.
Lemma lem8305428 {A B P : Type'} (f : A -> B) : (term1127 A B P f) = (term1128 A B P f).
Proof. exact (@lem8305427 A B P (term1129 A B P) f). Qed.
Lemma lem8305429 {A B P : Type'} (f : A -> B) : (term1128 A B P f) = (term1130 B P).
Proof. exact (eq_refl (term1128 A B P f)). Qed.
Lemma lem8305430 {A B P : Type'} : (term1131 A B P) = (term1129 A B P).
Proof. exact (fun_ext (fun f : A -> B => @lem8305429 A B P f)). Qed.
Lemma lem8305431 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8305432 {A B P : Type'} (f : A -> B) : (term1127 A B P f) = (term1128 A B P f).
Proof. exact (MK_COMB (@lem8305430 A B P) (@lem8305431 A B f)). Qed.
Lemma lem8305433 {B P : Type'} : (@eq (P -> B)) = (@eq (P -> B)).
Proof. exact (eq_refl (@eq (P -> B))). Qed.
Lemma lem8305434 {A B P : Type'} (f : A -> B) : (term1132 A B P f) = (term1133 A B P f).
Proof. exact (MK_COMB (@lem8305433 B P) (@lem8305432 A B P f)). Qed.
Lemma lem8305435 {A B P : Type'} (f : A -> B) : (term1128 A B P f) = (term1130 B P).
Proof. exact (eq_refl (term1128 A B P f)). Qed.
Lemma lem8305436 {A B P : Type'} (f : A -> B) : ((term1127 A B P f) = (term1128 A B P f)) = ((term1128 A B P f) = (term1130 B P)).
Proof. exact (MK_COMB (@lem8305434 A B P f) (@lem8305435 A B P f)). Qed.
Lemma lem8305437 {A B P : Type'} (f : A -> B) : (term1128 A B P f) = (term1130 B P).
Proof. exact (EQ_MP (@lem8305436 A B P f) (@lem8305428 A B P f)). Qed.
Lemma lem8305438 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8305439 {A B P : Type'} (f : A -> B) (a : P) : (term1134 A B P f a) = (term1135 B P a).
Proof. exact (MK_COMB (@lem8305437 A B P f) (@lem8305438 P a)). Qed.
Lemma lem8305441 {A B : Type'} (f : A -> B) (y : A) : (term45 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8305442 {B P : Type'} (f : P -> B) (y : P) : (term128 B P f y) = (f y).
Proof. exact (@lem8305441 P B f y). Qed.
Lemma lem8305443 {B P : Type'} (a : P) : (term1136 B P a) = (term1135 B P a).
Proof. exact (@lem8305442 B P (term1130 B P) a). Qed.
Lemma lem8305444 {B P : Type'} (x : P) : (term1135 B P x) = (term112 B).
Proof. exact (eq_refl (term1135 B P x)). Qed.
Lemma lem8305445 {B P : Type'} : (term1137 B P) = (term1130 B P).
Proof. exact (fun_ext (fun x : P => @lem8305444 B P x)). Qed.
Lemma lem8305446 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8305447 {B P : Type'} (a : P) : (term1136 B P a) = (term1135 B P a).
Proof. exact (MK_COMB (@lem8305445 B P) (@lem8305446 P a)). Qed.
Lemma lem8305448 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8305449 {B P : Type'} (a : P) : (term1138 B P a) = (term1139 B P a).
Proof. exact (MK_COMB (@lem8305448 B) (@lem8305447 B P a)). Qed.
Lemma lem8305450 {B P : Type'} (a : P) : (term1135 B P a) = (term112 B).
Proof. exact (eq_refl (term1135 B P a)). Qed.
Lemma lem8305451 {B P : Type'} (a : P) : ((term1136 B P a) = (term1135 B P a)) = ((term1135 B P a) = (term112 B)).
Proof. exact (MK_COMB (@lem8305449 B P a) (@lem8305450 B P a)). Qed.
Lemma lem8305452 {B P : Type'} (a : P) : (term1135 B P a) = (term112 B).
Proof. exact (EQ_MP (@lem8305451 B P a) (@lem8305443 B P a)). Qed.
Lemma lem8305453 {A B P : Type'} (f : A -> B) (a : P) : (term1134 A B P f a) = (term112 B).
Proof. exact (TRANS (@lem8305439 A B P f a) (@lem8305452 B P a)). Qed.
Lemma lem8305454 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (a : P) : term1186 A B D P Q pat e f a.
Proof. exact (fun h0 : term197 D P Q pat e a => @lem8305453 A B P f a). Qed.
Lemma lem8305455 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (a : P) (h1 : p f a) : term1187 A B D P Q p f arg pat e a.
Proof. exact (@lem8305421 A B D P Q arg pat e (term112 B) p f a h1). Qed.
Lemma lem8305456 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (a : P) (h1 : p f a) : (term1163 A B D P Q p arg pat e f a) = (term1188 A B D P Q f arg pat e a).
Proof. exact (@lem8305455 A B D P Q arg pat e p f a h1 (@lem8305454 A B D P Q pat e f a)). Qed.
Lemma lem8305510 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term200 A B D P Q pat e f arg a) = (term200 A B D P Q pat e f arg a).
Proof. exact (eq_refl (term200 A B D P Q pat e f arg a)). Qed.
Lemma lem8305511 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (p : type560 A B P) (f : A -> B) (a : P) (h1 : p f a) : ((term199 A B D P Q pat e f arg a) = (term1163 A B D P Q p arg pat e f a)) = ((term199 A B D P Q pat e f arg a) = (term1188 A B D P Q f arg pat e a)).
Proof. exact (MK_COMB (@lem8305510 A B D P Q pat e f arg a) (@lem8305456 A B D P Q arg pat e p f a h1)). Qed.
Lemma lem8305632 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : term1189 A B D P Q p f arg pat e a.
Proof. exact (fun h0 : p f a => @lem8305511 A B D P Q arg pat e p f a h0). Qed.
Lemma lem8305633 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : term1190 A B D P Q p f arg pat e a.
Proof. exact (@lem8305222 A B D P Q arg pat e p f a ((term199 A B D P Q pat e f arg a) = (term1188 A B D P Q f arg pat e a))). Qed.
Lemma lem8305634 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1191 A B D P Q p arg pat e f a) = (term1192 A B D P Q p f arg pat e a).
Proof. exact (@lem8305633 A B D P Q p f arg pat e a (@lem8305632 A B D P Q p f arg pat e a)). Qed.
Lemma lem8305898 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1193 A B D P Q p arg pat e f) = (term1194 A B D P Q p f arg pat e).
Proof. exact (fun_ext (fun a : P => @lem8305634 A B D P Q p f arg pat e a)). Qed.
Lemma lem8306162 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8306163 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1195 A B D P Q p arg pat e f) = (term1196 A B D P Q p f arg pat e).
Proof. exact (MK_COMB (@lem8306162 P) (@lem8305898 A B D P Q p f arg pat e)). Qed.
Lemma lem8306431 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1197 A B D P Q p arg pat e) = (term1198 A B D P Q p arg pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8306163 A B D P Q p f arg pat e)). Qed.
Lemma lem8306699 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8306700 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1199 A B D P Q p arg pat e) = (term1200 A B D P Q p arg pat e).
Proof. exact (MK_COMB (@lem8306699 A B) (@lem8306431 A B D P Q p arg pat e)). Qed.
Lemma lem8306972 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1201 A B D P Q lt2 s p arg pat e) = (term1202 A B D P Q lt2 s p arg pat e).
Proof. exact (MK_COMB (@lem8305057 A B D P Q arg lt2 s p pat e) (@lem8306700 A B D P Q p arg pat e)). Qed.
Lemma lem8307387 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1203 A B D P Q lt2 s p arg pat e) = (term1204 A B D P Q lt2 s p arg pat e).
Proof. exact (MK_COMB (@lem8303630 A B D P Q p arg pat e lt2 s) (@lem8306972 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8307875 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1204 A B D P Q lt2 s p arg pat e) = (term1203 A B D P Q lt2 s p arg pat e).
Proof. exact (SYM (@lem8307387 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8307877 (p : Prop) : p = (term216 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem8307878 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1204 A B D P Q lt2 s p arg pat e) = (term1205 A B D P Q lt2 s p arg pat e).
Proof. exact (@lem8307877 (term1204 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8307879 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1205 A B D P Q lt2 s p arg pat e) = (term1204 A B D P Q lt2 s p arg pat e).
Proof. exact (SYM (@lem8307878 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8307880 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1206 A B D P Q lt2 s p arg pat e) : term1206 A B D P Q lt2 s p arg pat e.
Proof. exact (h1). Qed.
Lemma lem8307951 {Q : Type'} (P : Q -> Prop) : term1207 Q P.
Proof. exact (@lem19732 Q P). Qed.
Lemma lem8307952 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : term1208 D P Q pat e a.
Proof. exact (@lem8307951 Q (term258 D P Q pat e a)). Qed.
Lemma lem8307953 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term1209 D P Q pat e a) = ((term1210 D P Q pat e a) = (e a)).
Proof. exact (eq_refl (term1209 D P Q pat e a)). Qed.
Lemma lem8307954 {D P Q : Type'} (pat : Q -> D) (x : Q) (e : P -> D) (a : P) : (term472 D P Q pat e a x) = ((pat x) = (e a)).
Proof. exact (eq_refl (term472 D P Q pat e a x)). Qed.
Lemma lem8307955 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8307956 {D P Q : Type'} (pat : Q -> D) (x : Q) (e : P -> D) (a : P) : (term1211 D P Q pat e a x) = (term1212 D P Q pat x e a).
Proof. exact (MK_COMB (@lem8307955) (@lem8307954 D P Q pat x e a)). Qed.
Lemma lem8307957 {D P Q : Type'} (x : Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1213 D P Q x pat e a) = (term1214 D P Q x pat e a).
Proof. exact (MK_COMB (@lem8307956 D P Q pat x e a) (@lem8307953 D P Q pat e a)). Qed.
Lemma lem8307958 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term1215 D P Q pat e a) = (term1216 D P Q pat e a).
Proof. exact (fun_ext (fun x : Q => @lem8307957 D P Q x pat e a)). Qed.
Lemma lem8307959 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8307960 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term1208 D P Q pat e a) = (term1217 D P Q pat e a).
Proof. exact (MK_COMB (@lem8307959 Q) (@lem8307958 D P Q pat e a)). Qed.
Lemma lem8307961 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : term1217 D P Q pat e a.
Proof. exact (EQ_MP (@lem8307960 D P Q pat e a) (@lem8307952 D P Q pat e a)). Qed.
Lemma lem8307962 {D P Q : Type'} (pat : Q -> D) (e : P -> D) : term1218 D P Q pat e.
Proof. exact (fun a : P => @lem8307961 D P Q pat e a). Qed.
Lemma lem8307963 {D P Q : Type'} (pat : Q -> D) : term1219 D P Q pat.
Proof. exact (fun e : P -> D => @lem8307962 D P Q pat e). Qed.
Lemma lem8307964 {D P Q : Type'} : term1220 D P Q.
Proof. exact (fun pat : Q -> D => @lem8307963 D P Q pat). Qed.
Lemma lem8307965 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1221 A B D P Q lt2 s p arg pat e) : term1221 A B D P Q lt2 s p arg pat e.
Proof. exact (h1). Qed.
Lemma lem8307966 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1221 A B D P Q lt2 s p arg pat e) : term1222 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8307965 A B D P Q lt2 s p arg pat e h1 (@lem8307964 D P Q)). Qed.
Lemma lem8307967 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1223 A B D P Q lt2 s p arg pat e.
Proof. exact (fun h0 : term1221 A B D P Q lt2 s p arg pat e => @lem8307966 A B D P Q lt2 s p arg pat e h0). Qed.
Lemma lem8307968 {D P Q : Type'} (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : _111928 = (term1224 D P Q).
Proof. exact (h1). Qed.
Lemma lem8307969 {D Q : Type'} (pat : Q -> D) : pat = pat.
Proof. exact (eq_refl pat). Qed.
Lemma lem8307970 {D P Q : Type'} (pat : Q -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (_111928 pat) = (term1225 D P Q pat).
Proof. exact (MK_COMB (@lem8307968 D P Q _111928 h1) (@lem8307969 D Q pat)). Qed.
Lemma lem8307971 {D P Q : Type'} (pat : Q -> D) : (term1225 D P Q pat) = (term1226 D P Q pat).
Proof. exact (eq_refl (term1225 D P Q pat)). Qed.
Lemma lem8307972 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) : (term1227 D P Q _111928 pat) = (term1227 D P Q _111928 pat).
Proof. exact (eq_refl (term1227 D P Q _111928 pat)). Qed.
Lemma lem8307973 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) : ((_111928 pat) = (term1225 D P Q pat)) = ((_111928 pat) = (term1226 D P Q pat)).
Proof. exact (MK_COMB (@lem8307972 D P Q _111928 pat) (@lem8307971 D P Q pat)). Qed.
Lemma lem8307974 {D P Q : Type'} (pat : Q -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (_111928 pat) = (term1226 D P Q pat).
Proof. exact (EQ_MP (@lem8307973 D P Q _111928 pat) (@lem8307970 D P Q pat _111928 h1)). Qed.
Lemma lem8307975 {D P : Type'} (e : P -> D) : e = e.
Proof. exact (eq_refl e). Qed.
Lemma lem8307976 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (_111928 pat e) = (term1228 D P Q pat e).
Proof. exact (MK_COMB (@lem8307974 D P Q pat _111928 h1) (@lem8307975 D P e)). Qed.
Lemma lem8307977 {D P Q : Type'} (pat : Q -> D) (e : P -> D) : (term1228 D P Q pat e) = (term1229 D P Q pat e).
Proof. exact (eq_refl (term1228 D P Q pat e)). Qed.
Lemma lem8307978 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1230 D P Q _111928 pat e) = (term1230 D P Q _111928 pat e).
Proof. exact (eq_refl (term1230 D P Q _111928 pat e)). Qed.
Lemma lem8307979 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : ((_111928 pat e) = (term1228 D P Q pat e)) = ((_111928 pat e) = (term1229 D P Q pat e)).
Proof. exact (MK_COMB (@lem8307978 D P Q _111928 pat e) (@lem8307977 D P Q pat e)). Qed.
Lemma lem8307980 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (_111928 pat e) = (term1229 D P Q pat e).
Proof. exact (EQ_MP (@lem8307979 D P Q _111928 pat e) (@lem8307976 D P Q pat e _111928 h1)). Qed.
Lemma lem8307981 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8307982 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (_111928 pat e a) = (term1231 D P Q pat e a).
Proof. exact (MK_COMB (@lem8307980 D P Q pat e _111928 h1) (@lem8307981 P a)). Qed.
Lemma lem8307983 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term1231 D P Q pat e a) = (term1232 D P Q pat e a).
Proof. exact (eq_refl (term1231 D P Q pat e a)). Qed.
Lemma lem8307984 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1233 D P Q _111928 pat e a) = (term1233 D P Q _111928 pat e a).
Proof. exact (eq_refl (term1233 D P Q _111928 pat e a)). Qed.
Lemma lem8307985 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : ((_111928 pat e a) = (term1231 D P Q pat e a)) = ((_111928 pat e a) = (term1232 D P Q pat e a)).
Proof. exact (MK_COMB (@lem8307984 D P Q _111928 pat e a) (@lem8307983 D P Q pat e a)). Qed.
Lemma lem8307986 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (_111928 pat e a) = (term1232 D P Q pat e a).
Proof. exact (EQ_MP (@lem8307985 D P Q _111928 pat e a) (@lem8307982 D P Q pat e a _111928 h1)). Qed.
Lemma lem8307987 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1232 D P Q pat e a) = (_111928 pat e a).
Proof. exact (SYM (@lem8307986 D P Q pat e a _111928 h1)). Qed.
Lemma lem8307988 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : term1234 D P Q _111928 pat e.
Proof. exact (fun a : P => @lem8307987 D P Q pat e a _111928 h1). Qed.
Lemma lem8307989 {D P Q : Type'} (pat : Q -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : term1235 D P Q _111928 pat.
Proof. exact (fun e : P -> D => @lem8307988 D P Q pat e _111928 h1). Qed.
Lemma lem8307990 {D P Q : Type'} (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : term1236 D P Q _111928.
Proof. exact (fun pat : Q -> D => @lem8307989 D P Q pat _111928 h1). Qed.
Lemma lem8307991 {D P Q : Type'} (pat : Q -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : term1237 D P Q _111928 pat.
Proof. exact (@lem8307990 D P Q _111928 h1 pat). Qed.
Lemma lem8307992 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) : (term1237 D P Q _111928 pat) = (term1235 D P Q _111928 pat).
Proof. exact (eq_refl (term1237 D P Q _111928 pat)). Qed.
Lemma lem8307993 {D P Q : Type'} (pat : Q -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : term1235 D P Q _111928 pat.
Proof. exact (EQ_MP (@lem8307992 D P Q _111928 pat) (@lem8307991 D P Q pat _111928 h1)). Qed.
Lemma lem8307994 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : term1238 D P Q _111928 pat e.
Proof. exact (@lem8307993 D P Q pat _111928 h1 e). Qed.
Lemma lem8307995 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1238 D P Q _111928 pat e) = (term1234 D P Q _111928 pat e).
Proof. exact (eq_refl (term1238 D P Q _111928 pat e)). Qed.
Lemma lem8307996 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : term1234 D P Q _111928 pat e.
Proof. exact (EQ_MP (@lem8307995 D P Q _111928 pat e) (@lem8307994 D P Q pat e _111928 h1)). Qed.
Lemma lem8307997 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : term1239 D P Q _111928 pat e a.
Proof. exact (@lem8307996 D P Q pat e _111928 h1 a). Qed.
Lemma lem8307998 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1239 D P Q _111928 pat e a) = ((term1232 D P Q pat e a) = (_111928 pat e a)).
Proof. exact (eq_refl (term1239 D P Q _111928 pat e a)). Qed.
Lemma lem8308001 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1232 D P Q pat e a) = (_111928 pat e a).
Proof. exact (EQ_MP (@lem8307998 D P Q _111928 pat e a) (@lem8307997 D P Q pat e a _111928 h1)). Qed.
Lemma lem8308002 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1232 D P Q pat e a) = (_111928 pat e a).
Proof. exact (@lem8308001 D P Q pat e a _111928 h1). Qed.
Lemma lem8308003 {D Q : Type'} (pat : Q -> D) : pat = pat.
Proof. exact (eq_refl pat). Qed.
Lemma lem8308004 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1210 D P Q pat e a) = (term1240 D P Q _111928 pat e a).
Proof. exact (MK_COMB (@lem8308003 D Q pat) (@lem8308002 D P Q pat e a _111928 h1)). Qed.
Lemma lem8308005 {D : Type'} : (@eq D) = (@eq D).
Proof. exact (eq_refl (@eq D)). Qed.
Lemma lem8308006 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1241 D P Q pat e a) = (term1242 D P Q _111928 pat e a).
Proof. exact (MK_COMB (@lem8308005 D) (@lem8308004 D P Q pat e a _111928 h1)). Qed.
Lemma lem8308007 {D P : Type'} (e : P -> D) (a : P) : (e a) = (e a).
Proof. exact (eq_refl (e a)). Qed.
Lemma lem8308008 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : ((term1210 D P Q pat e a) = (e a)) = ((term1240 D P Q _111928 pat e a) = (e a)).
Proof. exact (MK_COMB (@lem8308006 D P Q pat e a _111928 h1) (@lem8308007 D P e a)). Qed.
Lemma lem8308009 {D P Q : Type'} (pat : Q -> D) (x : Q) (e : P -> D) (a : P) : (term1212 D P Q pat x e a) = (term1212 D P Q pat x e a).
Proof. exact (eq_refl (term1212 D P Q pat x e a)). Qed.
Lemma lem8308010 {D P Q : Type'} (x : Q) (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1214 D P Q x pat e a) = (term1243 D P Q x _111928 pat e a).
Proof. exact (MK_COMB (@lem8308009 D P Q pat x e a) (@lem8308008 D P Q pat e a _111928 h1)). Qed.
Lemma lem8308011 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1216 D P Q pat e a) = (term1244 D P Q _111928 pat e a).
Proof. exact (fun_ext (fun x : Q => @lem8308010 D P Q x pat e a _111928 h1)). Qed.
Lemma lem8308012 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8308013 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1217 D P Q pat e a) = (term1245 D P Q _111928 pat e a).
Proof. exact (MK_COMB (@lem8308012 Q) (@lem8308011 D P Q pat e a _111928 h1)). Qed.
Lemma lem8308014 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1246 D P Q pat e) = (term1247 D P Q _111928 pat e).
Proof. exact (fun_ext (fun a : P => @lem8308013 D P Q pat e a _111928 h1)). Qed.
Lemma lem8308015 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8308016 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1218 D P Q pat e) = (term1248 D P Q _111928 pat e).
Proof. exact (MK_COMB (@lem8308015 P) (@lem8308014 D P Q pat e _111928 h1)). Qed.
Lemma lem8308017 {D P Q : Type'} (pat : Q -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1249 D P Q pat) = (term1250 D P Q _111928 pat).
Proof. exact (fun_ext (fun e : P -> D => @lem8308016 D P Q pat e _111928 h1)). Qed.
Lemma lem8308018 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8308019 {D P Q : Type'} (pat : Q -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1219 D P Q pat) = (term1251 D P Q _111928 pat).
Proof. exact (MK_COMB (@lem8308018 D P) (@lem8308017 D P Q pat _111928 h1)). Qed.
Lemma lem8308020 {D P Q : Type'} (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1252 D P Q) = (term1253 D P Q _111928).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8308019 D P Q pat _111928 h1)). Qed.
Lemma lem8308021 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8308022 {D P Q : Type'} (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1220 D P Q) = (term1254 D P Q _111928).
Proof. exact (MK_COMB (@lem8308021 D Q) (@lem8308020 D P Q _111928 h1)). Qed.
Lemma lem8308023 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8308024 {D P Q : Type'} (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1255 D P Q) = (term1256 D P Q _111928).
Proof. exact (MK_COMB (@lem8308023) (@lem8308022 D P Q _111928 h1)). Qed.
Lemma lem8308026 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1232 D P Q pat e a) = (_111928 pat e a).
Proof. exact (EQ_MP (@lem8307998 D P Q _111928 pat e a) (@lem8307997 D P Q pat e a _111928 h1)). Qed.
Lemma lem8308027 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1232 D P Q pat e a) = (_111928 pat e a).
Proof. exact (@lem8308026 D P Q pat e a _111928 h1). Qed.
Lemma lem8308028 {A P Q : Type'} (arg : type1475 A P Q) (a : P) : (arg a) = (arg a).
Proof. exact (eq_refl (arg a)). Qed.
Lemma lem8308029 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1085 A D P Q arg pat e a) = (term1257 A D P Q arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8308028 A P Q arg a) (@lem8308027 D P Q pat e a _111928 h1)). Qed.
Lemma lem8308030 {A : Type'} (lt2 : type1402 A) (y : A) : (lt2 y) = (lt2 y).
Proof. exact (eq_refl (lt2 y)). Qed.
Lemma lem8308031 {A D P Q : Type'} (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1090 A D P Q lt2 y arg pat e a) = (term1258 A D P Q lt2 y arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8308030 A lt2 y) (@lem8308029 A D P Q arg pat e a _111928 h1)). Qed.
Lemma lem8308032 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1073 A B D P Q p f pat e a) = (term1073 A B D P Q p f pat e a).
Proof. exact (eq_refl (term1073 A B D P Q p f pat e a)). Qed.
Lemma lem8308033 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1091 A B D P Q p f lt2 y arg pat e a) = (term1259 A B D P Q p f lt2 y arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8308032 A B D P Q p f pat e a) (@lem8308031 A D P Q lt2 y arg pat e a _111928 h1)). Qed.
Lemma lem8308034 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8308035 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1260 A B D P Q p f lt2 y arg pat e a) = (term1261 A B D P Q p f lt2 y arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8308034) (@lem8308033 A B D P Q p f lt2 y arg pat e a _111928 h1)). Qed.
Lemma lem8308036 {A P : Type'} (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term1053 A P lt2 y s a) = (term1053 A P lt2 y s a).
Proof. exact (eq_refl (term1053 A P lt2 y s a)). Qed.
Lemma lem8308037 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1097 A B D P Q p f arg pat e lt2 y s a) = (term1262 A B D P Q p f arg _111928 pat e lt2 y s a).
Proof. exact (MK_COMB (@lem8308035 A B D P Q p f lt2 y arg pat e a _111928 h1) (@lem8308036 A P lt2 y s a)). Qed.
Lemma lem8308038 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1099 A B D P Q p f arg pat e lt2 s a) = (term1263 A B D P Q p f arg _111928 pat e lt2 s a).
Proof. exact (fun_ext (fun y : A => @lem8308037 A B D P Q p f arg pat e lt2 y s a _111928 h1)). Qed.
Lemma lem8308039 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8308040 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1101 A B D P Q p f arg pat e lt2 s a) = (term1264 A B D P Q p f arg _111928 pat e lt2 s a).
Proof. exact (MK_COMB (@lem8308039 A) (@lem8308038 A B D P Q p f arg pat e lt2 s a _111928 h1)). Qed.
Lemma lem8308041 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1103 A B D P Q p f arg pat e lt2 s) = (term1265 A B D P Q p f arg _111928 pat e lt2 s).
Proof. exact (fun_ext (fun a : P => @lem8308040 A B D P Q p f arg pat e lt2 s a _111928 h1)). Qed.
Lemma lem8308042 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8308043 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1105 A B D P Q p f arg pat e lt2 s) = (term1266 A B D P Q p f arg _111928 pat e lt2 s).
Proof. exact (MK_COMB (@lem8308042 P) (@lem8308041 A B D P Q p f arg pat e lt2 s _111928 h1)). Qed.
Lemma lem8308044 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1107 A B D P Q p arg pat e lt2 s) = (term1267 A B D P Q p arg _111928 pat e lt2 s).
Proof. exact (fun_ext (fun f : A -> B => @lem8308043 A B D P Q p f arg pat e lt2 s _111928 h1)). Qed.
Lemma lem8308045 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8308046 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1109 A B D P Q p arg pat e lt2 s) = (term1268 A B D P Q p arg _111928 pat e lt2 s).
Proof. exact (MK_COMB (@lem8308045 A B) (@lem8308044 A B D P Q p arg pat e lt2 s _111928 h1)). Qed.
Lemma lem8308047 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8308048 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1111 A B D P Q p arg pat e lt2 s) = (term1269 A B D P Q p arg _111928 pat e lt2 s).
Proof. exact (MK_COMB (@lem8308047) (@lem8308046 A B D P Q p arg pat e lt2 s _111928 h1)). Qed.
Lemma lem8308050 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1232 D P Q pat e a) = (_111928 pat e a).
Proof. exact (EQ_MP (@lem8307998 D P Q _111928 pat e a) (@lem8307997 D P Q pat e a _111928 h1)). Qed.
Lemma lem8308051 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1232 D P Q pat e a) = (_111928 pat e a).
Proof. exact (@lem8308050 D P Q pat e a _111928 h1). Qed.
Lemma lem8308052 {A P Q : Type'} (arg : type1475 A P Q) (a : P) : (arg a) = (arg a).
Proof. exact (eq_refl (arg a)). Qed.
Lemma lem8308053 {A D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1085 A D P Q arg pat e a) = (term1257 A D P Q arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8308052 A P Q arg a) (@lem8308051 D P Q pat e a _111928 h1)). Qed.
Lemma lem8308054 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8308055 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1182 A B D P Q f arg pat e a) = (term1270 A B D P Q f arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8308054 A B f) (@lem8308053 A D P Q arg pat e a _111928 h1)). Qed.
Lemma lem8308056 {B D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term1271 B D P Q pat e a) = (term1271 B D P Q pat e a).
Proof. exact (eq_refl (term1271 B D P Q pat e a)). Qed.
Lemma lem8308057 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1272 A B D P Q f arg pat e a) = (term1273 A B D P Q f arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8308056 B D P Q pat e a) (@lem8308055 A B D P Q f arg pat e a _111928 h1)). Qed.
Lemma lem8308058 {B : Type'} : (term112 B) = (term112 B).
Proof. exact (eq_refl (term112 B)). Qed.
Lemma lem8308059 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1188 A B D P Q f arg pat e a) = (term1274 A B D P Q f arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8308057 A B D P Q f arg pat e a _111928 h1) (@lem8308058 B)). Qed.
Lemma lem8308060 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term200 A B D P Q pat e f arg a) = (term200 A B D P Q pat e f arg a).
Proof. exact (eq_refl (term200 A B D P Q pat e f arg a)). Qed.
Lemma lem8308061 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : ((term199 A B D P Q pat e f arg a) = (term1188 A B D P Q f arg pat e a)) = ((term199 A B D P Q pat e f arg a) = (term1274 A B D P Q f arg _111928 pat e a)).
Proof. exact (MK_COMB (@lem8308060 A B D P Q pat e f arg a) (@lem8308059 A B D P Q f arg pat e a _111928 h1)). Qed.
Lemma lem8308062 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term136 A B P p f a) = (term136 A B P p f a).
Proof. exact (eq_refl (term136 A B P p f a)). Qed.
Lemma lem8308063 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1192 A B D P Q p f arg pat e a) = (term1275 A B D P Q p f arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8308062 A B P p f a) (@lem8308061 A B D P Q f arg pat e a _111928 h1)). Qed.
Lemma lem8308064 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1194 A B D P Q p f arg pat e) = (term1276 A B D P Q p f arg _111928 pat e).
Proof. exact (fun_ext (fun a : P => @lem8308063 A B D P Q p f arg pat e a _111928 h1)). Qed.
Lemma lem8308065 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8308066 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1196 A B D P Q p f arg pat e) = (term1277 A B D P Q p f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8308065 P) (@lem8308064 A B D P Q p f arg pat e _111928 h1)). Qed.
Lemma lem8308067 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1198 A B D P Q p arg pat e) = (term1278 A B D P Q p arg _111928 pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8308066 A B D P Q p f arg pat e _111928 h1)). Qed.
Lemma lem8308068 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8308069 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1200 A B D P Q p arg pat e) = (term1279 A B D P Q p arg _111928 pat e).
Proof. exact (MK_COMB (@lem8308068 A B) (@lem8308067 A B D P Q p arg pat e _111928 h1)). Qed.
Lemma lem8308070 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1161 A B D P Q lt2 s p pat e) = (term1161 A B D P Q lt2 s p pat e).
Proof. exact (eq_refl (term1161 A B D P Q lt2 s p pat e)). Qed.
Lemma lem8308071 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1202 A B D P Q lt2 s p arg pat e) = (term1280 A B D P Q lt2 s p arg _111928 pat e).
Proof. exact (MK_COMB (@lem8308070 A B D P Q lt2 s p pat e) (@lem8308069 A B D P Q p arg pat e _111928 h1)). Qed.
Lemma lem8308072 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1204 A B D P Q lt2 s p arg pat e) = (term1281 A B D P Q lt2 s p arg _111928 pat e).
Proof. exact (MK_COMB (@lem8308048 A B D P Q p arg pat e lt2 s _111928 h1) (@lem8308071 A B D P Q lt2 s p arg pat e _111928 h1)). Qed.
Lemma lem8308073 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8308074 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1206 A B D P Q lt2 s p arg pat e) = (term1282 A B D P Q lt2 s p arg _111928 pat e).
Proof. exact (MK_COMB (@lem8308073) (@lem8308072 A B D P Q lt2 s p arg pat e _111928 h1)). Qed.
Lemma lem8308075 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8308076 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1283 A B D P Q lt2 s p arg pat e) = (term1284 A B D P Q lt2 s p arg _111928 pat e).
Proof. exact (MK_COMB (@lem8308075) (@lem8308074 A B D P Q lt2 s p arg pat e _111928 h1)). Qed.
Lemma lem8308077 : False = False.
Proof. exact (eq_refl False). Qed.
Lemma lem8308078 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1205 A B D P Q lt2 s p arg pat e) = (term1285 A B D P Q lt2 s p arg _111928 pat e).
Proof. exact (MK_COMB (@lem8308076 A B D P Q lt2 s p arg pat e _111928 h1) (@lem8308077)). Qed.
Lemma lem8308079 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term1286 A B P lt2 s p) = (term1286 A B P lt2 s p).
Proof. exact (eq_refl (term1286 A B P lt2 s p)). Qed.
Lemma lem8308080 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1287 A B D P Q lt2 s p arg pat e) = (term1288 A B D P Q lt2 s p arg _111928 pat e).
Proof. exact (MK_COMB (@lem8308079 A B P lt2 s p) (@lem8308078 A B D P Q lt2 s p arg pat e _111928 h1)). Qed.
Lemma lem8308081 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term228 A B D P Q p pat e arg lt2 s) = (term228 A B D P Q p pat e arg lt2 s).
Proof. exact (eq_refl (term228 A B D P Q p pat e arg lt2 s)). Qed.
Lemma lem8308082 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1289 A B D P Q lt2 s p arg pat e) = (term1290 A B D P Q lt2 s p arg _111928 pat e).
Proof. exact (MK_COMB (@lem8308081 A B D P Q p pat e arg lt2 s) (@lem8308080 A B D P Q lt2 s p arg pat e _111928 h1)). Qed.
Lemma lem8308083 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term231 A B D P Q p pat e arg) = (term231 A B D P Q p pat e arg).
Proof. exact (eq_refl (term231 A B D P Q p pat e arg)). Qed.
Lemma lem8308084 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1222 A B D P Q lt2 s p arg pat e) = (term1291 A B D P Q lt2 s p arg _111928 pat e).
Proof. exact (MK_COMB (@lem8308083 A B D P Q p pat e arg) (@lem8308082 A B D P Q lt2 s p arg pat e _111928 h1)). Qed.
Lemma lem8308085 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1221 A B D P Q lt2 s p arg pat e) = (term1292 A B D P Q lt2 s p arg _111928 pat e).
Proof. exact (MK_COMB (@lem8308024 D P Q _111928 h1) (@lem8308084 A B D P Q lt2 s p arg pat e _111928 h1)). Qed.
Lemma lem8308086 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1293 A B D P Q lt2 s p arg pat e) : term1293 A B D P Q lt2 s p arg pat e.
Proof. exact (h1). Qed.
Lemma lem8308087 {A B D P Q : Type'} (_111928 : type886 D P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1293 A B D P Q lt2 s p arg pat e) : term1294 A B D P Q lt2 s p arg pat e _111928.
Proof. exact (@lem8308086 A B D P Q lt2 s p arg pat e h1 _111928). Qed.
Lemma lem8308088 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1294 A B D P Q lt2 s p arg pat e _111928) = (term1292 A B D P Q lt2 s p arg _111928 pat e).
Proof. exact (eq_refl (term1294 A B D P Q lt2 s p arg pat e _111928)). Qed.
Lemma lem8308089 {A B D P Q : Type'} (_111928 : type886 D P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1293 A B D P Q lt2 s p arg pat e) : term1292 A B D P Q lt2 s p arg _111928 pat e.
Proof. exact (EQ_MP (@lem8308088 A B D P Q lt2 s p arg _111928 pat e) (@lem8308087 A B D P Q _111928 lt2 s p arg pat e h1)). Qed.
Lemma lem8308090 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : (term1292 A B D P Q lt2 s p arg _111928 pat e) = (term1221 A B D P Q lt2 s p arg pat e).
Proof. exact (SYM (@lem8308085 A B D P Q lt2 s p arg pat e _111928 h1)). Qed.
Lemma lem8308091 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : term1293 A B D P Q lt2 s p arg pat e) (h2 : _111928 = (term1224 D P Q)) : term1221 A B D P Q lt2 s p arg pat e.
Proof. exact (EQ_MP (@lem8308090 A B D P Q lt2 s p arg pat e _111928 h2) (@lem8308089 A B D P Q _111928 lt2 s p arg pat e h1)). Qed.
Lemma lem8308092 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : term1295 A B D P Q lt2 s p arg pat e.
Proof. exact (fun h0 : term1293 A B D P Q lt2 s p arg pat e => @lem8308091 A B D P Q lt2 s p arg pat e _111928 h0 h1). Qed.
Lemma lem8308093 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1296 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem51 (term1221 A B D P Q lt2 s p arg pat e) (term1293 A B D P Q lt2 s p arg pat e) (term1222 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8308094 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : term1297 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308093 A B D P Q lt2 s p arg pat e (@lem8308092 A B D P Q lt2 s p arg pat e _111928 h1)). Qed.
Lemma lem8308095 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (h1 : _111928 = (term1224 D P Q)) : term1298 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308094 A B D P Q lt2 s p arg pat e _111928 h1 (@lem8307967 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8308096 {D P Q : Type'} : (term1224 D P Q) = (term1224 D P Q).
Proof. exact (eq_refl (term1224 D P Q)). Qed.
Lemma lem8308097 {A B D P Q : Type'} (_111928 : type886 D P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1299 A B D P Q _111928 lt2 s p arg pat e.
Proof. exact (fun h0 : _111928 = (term1224 D P Q) => @lem8308095 A B D P Q lt2 s p arg pat e _111928 h0). Qed.
Lemma lem8308098 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1300 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308097 A B D P Q (term1224 D P Q) lt2 s p arg pat e). Qed.
Lemma lem8308099 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1298 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308098 A B D P Q lt2 s p arg pat e (@lem8308096 D P Q)). Qed.
Lemma lem8308100 {B : Type'} (P : B -> Prop) : term1207 B P.
Proof. exact (@lem19732 B P). Qed.
Lemma lem8308101 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : term1301 A B D P Q pat e f arg a.
Proof. exact (@lem8308100 B (term103 A B D P Q pat e f arg a)). Qed.
Lemma lem8308102 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1302 A B D P Q pat e f arg a) = (term1303 A B D P Q pat e f arg a).
Proof. exact (eq_refl (term1302 A B D P Q pat e f arg a)). Qed.
Lemma lem8308103 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (x : B) : (term422 A B D P Q pat e f arg a x) = (term261 A B D P Q pat e f arg a x).
Proof. exact (eq_refl (term422 A B D P Q pat e f arg a x)). Qed.
Lemma lem8308104 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8308105 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (x : B) : (term1304 A B D P Q pat e f arg a x) = (term1305 A B D P Q pat e f arg a x).
Proof. exact (MK_COMB (@lem8308104) (@lem8308103 A B D P Q pat e f arg a x)). Qed.
Lemma lem8308106 {A B D P Q : Type'} (x : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1306 A B D P Q x pat e f arg a) = (term1307 A B D P Q x pat e f arg a).
Proof. exact (MK_COMB (@lem8308105 A B D P Q pat e f arg a x) (@lem8308102 A B D P Q pat e f arg a)). Qed.
Lemma lem8308107 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1308 A B D P Q pat e f arg a) = (term1309 A B D P Q pat e f arg a).
Proof. exact (fun_ext (fun x : B => @lem8308106 A B D P Q x pat e f arg a)). Qed.
Lemma lem8308108 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8308109 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1301 A B D P Q pat e f arg a) = (term1310 A B D P Q pat e f arg a).
Proof. exact (MK_COMB (@lem8308108 B) (@lem8308107 A B D P Q pat e f arg a)). Qed.
Lemma lem8308110 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : term1310 A B D P Q pat e f arg a.
Proof. exact (EQ_MP (@lem8308109 A B D P Q pat e f arg a) (@lem8308101 A B D P Q pat e f arg a)). Qed.
Lemma lem8308111 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : term1311 A B D P Q pat e f arg.
Proof. exact (fun a : P => @lem8308110 A B D P Q pat e f arg a). Qed.
Lemma lem8308112 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) : term1312 A B D P Q pat e f.
Proof. exact (fun arg : type1475 A P Q => @lem8308111 A B D P Q pat e f arg). Qed.
Lemma lem8308113 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) : term1313 A B D P Q pat e.
Proof. exact (fun f : A -> B => @lem8308112 A B D P Q pat e f). Qed.
Lemma lem8308114 {A B D P Q : Type'} (pat : Q -> D) : term1314 A B D P Q pat.
Proof. exact (fun e : P -> D => @lem8308113 A B D P Q pat e). Qed.
Lemma lem8308115 {A B D P Q : Type'} : term1315 A B D P Q.
Proof. exact (fun pat : Q -> D => @lem8308114 A B D P Q pat). Qed.
Lemma lem8308116 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1316 A B D P Q lt2 s p arg pat e) : term1316 A B D P Q lt2 s p arg pat e.
Proof. exact (h1). Qed.
Lemma lem8308117 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1316 A B D P Q lt2 s p arg pat e) : term1293 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308116 A B D P Q lt2 s p arg pat e h1 (@lem8308115 A B D P Q)). Qed.
Lemma lem8308118 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1317 A B D P Q lt2 s p arg pat e.
Proof. exact (fun h0 : term1316 A B D P Q lt2 s p arg pat e => @lem8308117 A B D P Q lt2 s p arg pat e h0). Qed.
Lemma lem8308119 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : _111929 = (term1318 A B D P Q).
Proof. exact (h1). Qed.
Lemma lem8308120 {D Q : Type'} (pat : Q -> D) : pat = pat.
Proof. exact (eq_refl pat). Qed.
Lemma lem8308121 {A B D P Q : Type'} (pat : Q -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (_111929 pat) = (term1319 A B D P Q pat).
Proof. exact (MK_COMB (@lem8308119 A B D P Q _111929 h1) (@lem8308120 D Q pat)). Qed.
Lemma lem8308122 {A B D P Q : Type'} (pat : Q -> D) : (term1319 A B D P Q pat) = (term1320 A B D P Q pat).
Proof. exact (eq_refl (term1319 A B D P Q pat)). Qed.
Lemma lem8308123 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1321 A B D P Q _111929 pat) = (term1321 A B D P Q _111929 pat).
Proof. exact (eq_refl (term1321 A B D P Q _111929 pat)). Qed.
Lemma lem8308124 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : ((_111929 pat) = (term1319 A B D P Q pat)) = ((_111929 pat) = (term1320 A B D P Q pat)).
Proof. exact (MK_COMB (@lem8308123 A B D P Q _111929 pat) (@lem8308122 A B D P Q pat)). Qed.
Lemma lem8308125 {A B D P Q : Type'} (pat : Q -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (_111929 pat) = (term1320 A B D P Q pat).
Proof. exact (EQ_MP (@lem8308124 A B D P Q _111929 pat) (@lem8308121 A B D P Q pat _111929 h1)). Qed.
Lemma lem8308126 {D P : Type'} (e : P -> D) : e = e.
Proof. exact (eq_refl e). Qed.
Lemma lem8308127 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (_111929 pat e) = (term1322 A B D P Q pat e).
Proof. exact (MK_COMB (@lem8308125 A B D P Q pat _111929 h1) (@lem8308126 D P e)). Qed.
Lemma lem8308128 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) : (term1322 A B D P Q pat e) = (term1323 A B D P Q pat e).
Proof. exact (eq_refl (term1322 A B D P Q pat e)). Qed.
Lemma lem8308129 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1324 A B D P Q _111929 pat e) = (term1324 A B D P Q _111929 pat e).
Proof. exact (eq_refl (term1324 A B D P Q _111929 pat e)). Qed.
Lemma lem8308130 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : ((_111929 pat e) = (term1322 A B D P Q pat e)) = ((_111929 pat e) = (term1323 A B D P Q pat e)).
Proof. exact (MK_COMB (@lem8308129 A B D P Q _111929 pat e) (@lem8308128 A B D P Q pat e)). Qed.
Lemma lem8308131 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (_111929 pat e) = (term1323 A B D P Q pat e).
Proof. exact (EQ_MP (@lem8308130 A B D P Q _111929 pat e) (@lem8308127 A B D P Q pat e _111929 h1)). Qed.
Lemma lem8308132 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8308133 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (_111929 pat e f) = (term1325 A B D P Q pat e f).
Proof. exact (MK_COMB (@lem8308131 A B D P Q pat e _111929 h1) (@lem8308132 A B f)). Qed.
Lemma lem8308134 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1325 A B D P Q pat e f) = (term1326 A B D P Q pat e f).
Proof. exact (eq_refl (term1325 A B D P Q pat e f)). Qed.
Lemma lem8308135 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1327 A B D P Q _111929 pat e f) = (term1327 A B D P Q _111929 pat e f).
Proof. exact (eq_refl (term1327 A B D P Q _111929 pat e f)). Qed.
Lemma lem8308136 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : ((_111929 pat e f) = (term1325 A B D P Q pat e f)) = ((_111929 pat e f) = (term1326 A B D P Q pat e f)).
Proof. exact (MK_COMB (@lem8308135 A B D P Q _111929 pat e f) (@lem8308134 A B D P Q pat e f)). Qed.
Lemma lem8308137 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (_111929 pat e f) = (term1326 A B D P Q pat e f).
Proof. exact (EQ_MP (@lem8308136 A B D P Q _111929 pat e f) (@lem8308133 A B D P Q pat e f _111929 h1)). Qed.
Lemma lem8308138 {A P Q : Type'} (arg : type1475 A P Q) : arg = arg.
Proof. exact (eq_refl arg). Qed.
Lemma lem8308139 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (_111929 pat e f arg) = (term1328 A B D P Q pat e f arg).
Proof. exact (MK_COMB (@lem8308137 A B D P Q pat e f _111929 h1) (@lem8308138 A P Q arg)). Qed.
Lemma lem8308140 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1328 A B D P Q pat e f arg) = (term1329 A B D P Q pat e f arg).
Proof. exact (eq_refl (term1328 A B D P Q pat e f arg)). Qed.
Lemma lem8308141 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1330 A B D P Q _111929 pat e f arg) = (term1330 A B D P Q _111929 pat e f arg).
Proof. exact (eq_refl (term1330 A B D P Q _111929 pat e f arg)). Qed.
Lemma lem8308142 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : ((_111929 pat e f arg) = (term1328 A B D P Q pat e f arg)) = ((_111929 pat e f arg) = (term1329 A B D P Q pat e f arg)).
Proof. exact (MK_COMB (@lem8308141 A B D P Q _111929 pat e f arg) (@lem8308140 A B D P Q pat e f arg)). Qed.
Lemma lem8308143 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (_111929 pat e f arg) = (term1329 A B D P Q pat e f arg).
Proof. exact (EQ_MP (@lem8308142 A B D P Q _111929 pat e f arg) (@lem8308139 A B D P Q pat e f arg _111929 h1)). Qed.
Lemma lem8308144 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8308145 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (_111929 pat e f arg a) = (term1331 A B D P Q pat e f arg a).
Proof. exact (MK_COMB (@lem8308143 A B D P Q pat e f arg _111929 h1) (@lem8308144 P a)). Qed.
Lemma lem8308146 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1331 A B D P Q pat e f arg a) = (term109 A B D P Q pat e f arg a).
Proof. exact (eq_refl (term1331 A B D P Q pat e f arg a)). Qed.
Lemma lem8308147 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1332 A B D P Q _111929 pat e f arg a) = (term1332 A B D P Q _111929 pat e f arg a).
Proof. exact (eq_refl (term1332 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8308148 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : ((_111929 pat e f arg a) = (term1331 A B D P Q pat e f arg a)) = ((_111929 pat e f arg a) = (term109 A B D P Q pat e f arg a)).
Proof. exact (MK_COMB (@lem8308147 A B D P Q _111929 pat e f arg a) (@lem8308146 A B D P Q pat e f arg a)). Qed.
Lemma lem8308149 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (_111929 pat e f arg a) = (term109 A B D P Q pat e f arg a).
Proof. exact (EQ_MP (@lem8308148 A B D P Q _111929 pat e f arg a) (@lem8308145 A B D P Q pat e f arg a _111929 h1)). Qed.
Lemma lem8308150 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term109 A B D P Q pat e f arg a) = (_111929 pat e f arg a).
Proof. exact (SYM (@lem8308149 A B D P Q pat e f arg a _111929 h1)). Qed.
Lemma lem8308151 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : term1333 A B D P Q _111929 pat e f arg.
Proof. exact (fun a : P => @lem8308150 A B D P Q pat e f arg a _111929 h1). Qed.
Lemma lem8308152 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : term1334 A B D P Q _111929 pat e f.
Proof. exact (fun arg : type1475 A P Q => @lem8308151 A B D P Q pat e f arg _111929 h1). Qed.
Lemma lem8308153 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : term1335 A B D P Q _111929 pat e.
Proof. exact (fun f : A -> B => @lem8308152 A B D P Q pat e f _111929 h1). Qed.
Lemma lem8308154 {A B D P Q : Type'} (pat : Q -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : term1336 A B D P Q _111929 pat.
Proof. exact (fun e : P -> D => @lem8308153 A B D P Q pat e _111929 h1). Qed.
Lemma lem8308155 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : term1337 A B D P Q _111929.
Proof. exact (fun pat : Q -> D => @lem8308154 A B D P Q pat _111929 h1). Qed.
Lemma lem8308156 {A B D P Q : Type'} (pat : Q -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : term1338 A B D P Q _111929 pat.
Proof. exact (@lem8308155 A B D P Q _111929 h1 pat). Qed.
Lemma lem8308157 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1338 A B D P Q _111929 pat) = (term1336 A B D P Q _111929 pat).
Proof. exact (eq_refl (term1338 A B D P Q _111929 pat)). Qed.
Lemma lem8308158 {A B D P Q : Type'} (pat : Q -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : term1336 A B D P Q _111929 pat.
Proof. exact (EQ_MP (@lem8308157 A B D P Q _111929 pat) (@lem8308156 A B D P Q pat _111929 h1)). Qed.
Lemma lem8308159 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : term1339 A B D P Q _111929 pat e.
Proof. exact (@lem8308158 A B D P Q pat _111929 h1 e). Qed.
Lemma lem8308160 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1339 A B D P Q _111929 pat e) = (term1335 A B D P Q _111929 pat e).
Proof. exact (eq_refl (term1339 A B D P Q _111929 pat e)). Qed.
Lemma lem8308161 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : term1335 A B D P Q _111929 pat e.
Proof. exact (EQ_MP (@lem8308160 A B D P Q _111929 pat e) (@lem8308159 A B D P Q pat e _111929 h1)). Qed.
Lemma lem8308162 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : term1340 A B D P Q _111929 pat e f.
Proof. exact (@lem8308161 A B D P Q pat e _111929 h1 f). Qed.
Lemma lem8308163 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1340 A B D P Q _111929 pat e f) = (term1334 A B D P Q _111929 pat e f).
Proof. exact (eq_refl (term1340 A B D P Q _111929 pat e f)). Qed.
Lemma lem8308164 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : term1334 A B D P Q _111929 pat e f.
Proof. exact (EQ_MP (@lem8308163 A B D P Q _111929 pat e f) (@lem8308162 A B D P Q pat e f _111929 h1)). Qed.
Lemma lem8308165 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : term1341 A B D P Q _111929 pat e f arg.
Proof. exact (@lem8308164 A B D P Q pat e f _111929 h1 arg). Qed.
Lemma lem8308166 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1341 A B D P Q _111929 pat e f arg) = (term1333 A B D P Q _111929 pat e f arg).
Proof. exact (eq_refl (term1341 A B D P Q _111929 pat e f arg)). Qed.
Lemma lem8308167 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : term1333 A B D P Q _111929 pat e f arg.
Proof. exact (EQ_MP (@lem8308166 A B D P Q _111929 pat e f arg) (@lem8308165 A B D P Q pat e f arg _111929 h1)). Qed.
Lemma lem8308168 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : term1342 A B D P Q _111929 pat e f arg a.
Proof. exact (@lem8308167 A B D P Q pat e f arg _111929 h1 a). Qed.
Lemma lem8308169 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1342 A B D P Q _111929 pat e f arg a) = ((term109 A B D P Q pat e f arg a) = (_111929 pat e f arg a)).
Proof. exact (eq_refl (term1342 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8308172 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term109 A B D P Q pat e f arg a) = (_111929 pat e f arg a).
Proof. exact (EQ_MP (@lem8308169 A B D P Q _111929 pat e f arg a) (@lem8308168 A B D P Q pat e f arg a _111929 h1)). Qed.
Lemma lem8308173 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term109 A B D P Q pat e f arg a) = (_111929 pat e f arg a).
Proof. exact (@lem8308172 A B D P Q pat e f arg a _111929 h1). Qed.
Lemma lem8308174 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (a : P) (t : Q) : (term880 A B P Q f arg a t) = (term880 A B P Q f arg a t).
Proof. exact (eq_refl (term880 A B P Q f arg a t)). Qed.
Lemma lem8308175 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : ((term67 A B P Q f arg a t) = (term109 A B D P Q pat e f arg a)) = ((term67 A B P Q f arg a t) = (_111929 pat e f arg a)).
Proof. exact (MK_COMB (@lem8308174 A B P Q f arg a t) (@lem8308173 A B D P Q pat e f arg a _111929 h1)). Qed.
Lemma lem8308176 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term882 D P Q pat t e a) = (term882 D P Q pat t e a).
Proof. exact (eq_refl (term882 D P Q pat t e a)). Qed.
Lemma lem8308177 {A B D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1343 A B D P Q t pat e f arg a) = (term1344 A B D P Q t _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8308176 D P Q pat t e a) (@lem8308175 A B D P Q t pat e f arg a _111929 h1)). Qed.
Lemma lem8308178 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1345 A B D P Q pat e f arg a) = (term1346 A B D P Q _111929 pat e f arg a).
Proof. exact (fun_ext (fun t : Q => @lem8308177 A B D P Q t pat e f arg a _111929 h1)). Qed.
Lemma lem8308179 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8308180 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1303 A B D P Q pat e f arg a) = (term1347 A B D P Q _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8308179 Q) (@lem8308178 A B D P Q pat e f arg a _111929 h1)). Qed.
Lemma lem8308181 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (x : B) : (term1305 A B D P Q pat e f arg a x) = (term1305 A B D P Q pat e f arg a x).
Proof. exact (eq_refl (term1305 A B D P Q pat e f arg a x)). Qed.
Lemma lem8308182 {A B D P Q : Type'} (x : B) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1307 A B D P Q x pat e f arg a) = (term1348 A B D P Q x _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8308181 A B D P Q pat e f arg a x) (@lem8308180 A B D P Q pat e f arg a _111929 h1)). Qed.
Lemma lem8308183 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1309 A B D P Q pat e f arg a) = (term1349 A B D P Q _111929 pat e f arg a).
Proof. exact (fun_ext (fun x : B => @lem8308182 A B D P Q x pat e f arg a _111929 h1)). Qed.
Lemma lem8308184 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8308185 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1310 A B D P Q pat e f arg a) = (term1350 A B D P Q _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8308184 B) (@lem8308183 A B D P Q pat e f arg a _111929 h1)). Qed.
Lemma lem8308186 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1351 A B D P Q pat e f arg) = (term1352 A B D P Q _111929 pat e f arg).
Proof. exact (fun_ext (fun a : P => @lem8308185 A B D P Q pat e f arg a _111929 h1)). Qed.
Lemma lem8308187 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8308188 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1311 A B D P Q pat e f arg) = (term1353 A B D P Q _111929 pat e f arg).
Proof. exact (MK_COMB (@lem8308187 P) (@lem8308186 A B D P Q pat e f arg _111929 h1)). Qed.
Lemma lem8308189 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1354 A B D P Q pat e f) = (term1355 A B D P Q _111929 pat e f).
Proof. exact (fun_ext (fun arg : type1475 A P Q => @lem8308188 A B D P Q pat e f arg _111929 h1)). Qed.
Lemma lem8308190 {A P Q : Type'} : (@all (P -> Q -> A)) = (@all (P -> Q -> A)).
Proof. exact (eq_refl (@all (P -> Q -> A))). Qed.
Lemma lem8308191 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1312 A B D P Q pat e f) = (term1356 A B D P Q _111929 pat e f).
Proof. exact (MK_COMB (@lem8308190 A P Q) (@lem8308189 A B D P Q pat e f _111929 h1)). Qed.
Lemma lem8308192 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1357 A B D P Q pat e) = (term1358 A B D P Q _111929 pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8308191 A B D P Q pat e f _111929 h1)). Qed.
Lemma lem8308193 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8308194 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1313 A B D P Q pat e) = (term1359 A B D P Q _111929 pat e).
Proof. exact (MK_COMB (@lem8308193 A B) (@lem8308192 A B D P Q pat e _111929 h1)). Qed.
Lemma lem8308195 {A B D P Q : Type'} (pat : Q -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1360 A B D P Q pat) = (term1361 A B D P Q _111929 pat).
Proof. exact (fun_ext (fun e : P -> D => @lem8308194 A B D P Q pat e _111929 h1)). Qed.
Lemma lem8308196 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8308197 {A B D P Q : Type'} (pat : Q -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1314 A B D P Q pat) = (term1362 A B D P Q _111929 pat).
Proof. exact (MK_COMB (@lem8308196 D P) (@lem8308195 A B D P Q pat _111929 h1)). Qed.
Lemma lem8308198 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1363 A B D P Q) = (term1364 A B D P Q _111929).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8308197 A B D P Q pat _111929 h1)). Qed.
Lemma lem8308199 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8308200 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1315 A B D P Q) = (term1365 A B D P Q _111929).
Proof. exact (MK_COMB (@lem8308199 D Q) (@lem8308198 A B D P Q _111929 h1)). Qed.
Lemma lem8308201 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8308202 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1366 A B D P Q) = (term1367 A B D P Q _111929).
Proof. exact (MK_COMB (@lem8308201) (@lem8308200 A B D P Q _111929 h1)). Qed.
Lemma lem8308204 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term109 A B D P Q pat e f arg a) = (_111929 pat e f arg a).
Proof. exact (EQ_MP (@lem8308169 A B D P Q _111929 pat e f arg a) (@lem8308168 A B D P Q pat e f arg a _111929 h1)). Qed.
Lemma lem8308205 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term109 A B D P Q pat e f arg a) = (_111929 pat e f arg a).
Proof. exact (@lem8308204 A B D P Q pat e f arg a _111929 h1). Qed.
Lemma lem8308206 {B D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term1271 B D P Q pat e a) = (term1271 B D P Q pat e a).
Proof. exact (eq_refl (term1271 B D P Q pat e a)). Qed.
Lemma lem8308207 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1368 A B D P Q pat e f arg a) = (term1369 A B D P Q _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8308206 B D P Q pat e a) (@lem8308205 A B D P Q pat e f arg a _111929 h1)). Qed.
Lemma lem8308208 {B : Type'} : (term112 B) = (term112 B).
Proof. exact (eq_refl (term112 B)). Qed.
Lemma lem8308209 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term199 A B D P Q pat e f arg a) = (term1370 A B D P Q _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8308207 A B D P Q pat e f arg a _111929 h1) (@lem8308208 B)). Qed.
Lemma lem8308210 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8308211 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term200 A B D P Q pat e f arg a) = (term1371 A B D P Q _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8308210 B) (@lem8308209 A B D P Q pat e f arg a _111929 h1)). Qed.
Lemma lem8308212 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1274 A B D P Q f arg _111928 pat e a) = (term1274 A B D P Q f arg _111928 pat e a).
Proof. exact (eq_refl (term1274 A B D P Q f arg _111928 pat e a)). Qed.
Lemma lem8308213 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : ((term199 A B D P Q pat e f arg a) = (term1274 A B D P Q f arg _111928 pat e a)) = ((term1370 A B D P Q _111929 pat e f arg a) = (term1274 A B D P Q f arg _111928 pat e a)).
Proof. exact (MK_COMB (@lem8308211 A B D P Q pat e f arg a _111929 h1) (@lem8308212 A B D P Q f arg _111928 pat e a)). Qed.
Lemma lem8308214 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term136 A B P p f a) = (term136 A B P p f a).
Proof. exact (eq_refl (term136 A B P p f a)). Qed.
Lemma lem8308215 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1275 A B D P Q p f arg _111928 pat e a) = (term1372 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8308214 A B P p f a) (@lem8308213 A B D P Q f arg _111928 pat e a _111929 h1)). Qed.
Lemma lem8308216 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1276 A B D P Q p f arg _111928 pat e) = (term1373 A B D P Q p _111929 f arg _111928 pat e).
Proof. exact (fun_ext (fun a : P => @lem8308215 A B D P Q p f arg _111928 pat e a _111929 h1)). Qed.
Lemma lem8308217 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8308218 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1277 A B D P Q p f arg _111928 pat e) = (term1374 A B D P Q p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8308217 P) (@lem8308216 A B D P Q p f arg _111928 pat e _111929 h1)). Qed.
Lemma lem8308219 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1278 A B D P Q p arg _111928 pat e) = (term1375 A B D P Q p _111929 arg _111928 pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8308218 A B D P Q p f arg _111928 pat e _111929 h1)). Qed.
Lemma lem8308220 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8308221 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1279 A B D P Q p arg _111928 pat e) = (term1376 A B D P Q p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8308220 A B) (@lem8308219 A B D P Q p arg _111928 pat e _111929 h1)). Qed.
Lemma lem8308222 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1161 A B D P Q lt2 s p pat e) = (term1161 A B D P Q lt2 s p pat e).
Proof. exact (eq_refl (term1161 A B D P Q lt2 s p pat e)). Qed.
Lemma lem8308223 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1280 A B D P Q lt2 s p arg _111928 pat e) = (term1377 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8308222 A B D P Q lt2 s p pat e) (@lem8308221 A B D P Q p arg _111928 pat e _111929 h1)). Qed.
Lemma lem8308224 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1269 A B D P Q p arg _111928 pat e lt2 s) = (term1269 A B D P Q p arg _111928 pat e lt2 s).
Proof. exact (eq_refl (term1269 A B D P Q p arg _111928 pat e lt2 s)). Qed.
Lemma lem8308225 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1281 A B D P Q lt2 s p arg _111928 pat e) = (term1378 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8308224 A B D P Q p arg _111928 pat e lt2 s) (@lem8308223 A B D P Q lt2 s p arg _111928 pat e _111929 h1)). Qed.
Lemma lem8308226 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8308227 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1282 A B D P Q lt2 s p arg _111928 pat e) = (term1379 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8308226) (@lem8308225 A B D P Q lt2 s p arg _111928 pat e _111929 h1)). Qed.
Lemma lem8308228 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8308229 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1284 A B D P Q lt2 s p arg _111928 pat e) = (term1380 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8308228) (@lem8308227 A B D P Q lt2 s p arg _111928 pat e _111929 h1)). Qed.
Lemma lem8308230 : False = False.
Proof. exact (eq_refl False). Qed.
Lemma lem8308231 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1285 A B D P Q lt2 s p arg _111928 pat e) = (term1381 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8308229 A B D P Q lt2 s p arg _111928 pat e _111929 h1) (@lem8308230)). Qed.
Lemma lem8308232 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term1286 A B P lt2 s p) = (term1286 A B P lt2 s p).
Proof. exact (eq_refl (term1286 A B P lt2 s p)). Qed.
Lemma lem8308233 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1288 A B D P Q lt2 s p arg _111928 pat e) = (term1382 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8308232 A B P lt2 s p) (@lem8308231 A B D P Q lt2 s p arg _111928 pat e _111929 h1)). Qed.
Lemma lem8308234 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term228 A B D P Q p pat e arg lt2 s) = (term228 A B D P Q p pat e arg lt2 s).
Proof. exact (eq_refl (term228 A B D P Q p pat e arg lt2 s)). Qed.
Lemma lem8308235 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1290 A B D P Q lt2 s p arg _111928 pat e) = (term1383 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8308234 A B D P Q p pat e arg lt2 s) (@lem8308233 A B D P Q lt2 s p arg _111928 pat e _111929 h1)). Qed.
Lemma lem8308236 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term231 A B D P Q p pat e arg) = (term231 A B D P Q p pat e arg).
Proof. exact (eq_refl (term231 A B D P Q p pat e arg)). Qed.
Lemma lem8308237 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1291 A B D P Q lt2 s p arg _111928 pat e) = (term1384 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8308236 A B D P Q p pat e arg) (@lem8308235 A B D P Q lt2 s p arg _111928 pat e _111929 h1)). Qed.
Lemma lem8308238 {D P Q : Type'} (_111928 : type886 D P Q) : (term1256 D P Q _111928) = (term1256 D P Q _111928).
Proof. exact (eq_refl (term1256 D P Q _111928)). Qed.
Lemma lem8308239 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1292 A B D P Q lt2 s p arg _111928 pat e) = (term1385 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8308238 D P Q _111928) (@lem8308237 A B D P Q lt2 s p arg _111928 pat e _111929 h1)). Qed.
Lemma lem8308240 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1386 A B D P Q lt2 s p arg pat e) = (term1387 A B D P Q lt2 s p _111929 arg pat e).
Proof. exact (fun_ext (fun _111928 : type886 D P Q => @lem8308239 A B D P Q lt2 s p arg _111928 pat e _111929 h1)). Qed.
Lemma lem8308241 {D P Q : Type'} : (@all ((Q -> D) -> (P -> D) -> P -> Q)) = (@all ((Q -> D) -> (P -> D) -> P -> Q)).
Proof. exact (eq_refl (@all ((Q -> D) -> (P -> D) -> P -> Q))). Qed.
Lemma lem8308242 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1293 A B D P Q lt2 s p arg pat e) = (term1388 A B D P Q lt2 s p _111929 arg pat e).
Proof. exact (MK_COMB (@lem8308241 D P Q) (@lem8308240 A B D P Q lt2 s p arg pat e _111929 h1)). Qed.
Lemma lem8308243 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1316 A B D P Q lt2 s p arg pat e) = (term1389 A B D P Q lt2 s p _111929 arg pat e).
Proof. exact (MK_COMB (@lem8308202 A B D P Q _111929 h1) (@lem8308242 A B D P Q lt2 s p arg pat e _111929 h1)). Qed.
Lemma lem8308244 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1390 A B D P Q lt2 s p arg pat e) : term1390 A B D P Q lt2 s p arg pat e.
Proof. exact (h1). Qed.
Lemma lem8308245 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1390 A B D P Q lt2 s p arg pat e) : term1391 A B D P Q lt2 s p arg pat e _111929.
Proof. exact (@lem8308244 A B D P Q lt2 s p arg pat e h1 _111929). Qed.
Lemma lem8308246 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1391 A B D P Q lt2 s p arg pat e _111929) = (term1389 A B D P Q lt2 s p _111929 arg pat e).
Proof. exact (eq_refl (term1391 A B D P Q lt2 s p arg pat e _111929)). Qed.
Lemma lem8308247 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1390 A B D P Q lt2 s p arg pat e) : term1389 A B D P Q lt2 s p _111929 arg pat e.
Proof. exact (EQ_MP (@lem8308246 A B D P Q lt2 s p _111929 arg pat e) (@lem8308245 A B D P Q _111929 lt2 s p arg pat e h1)). Qed.
Lemma lem8308248 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : (term1389 A B D P Q lt2 s p _111929 arg pat e) = (term1316 A B D P Q lt2 s p arg pat e).
Proof. exact (SYM (@lem8308243 A B D P Q lt2 s p arg pat e _111929 h1)). Qed.
Lemma lem8308249 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : term1390 A B D P Q lt2 s p arg pat e) (h2 : _111929 = (term1318 A B D P Q)) : term1316 A B D P Q lt2 s p arg pat e.
Proof. exact (EQ_MP (@lem8308248 A B D P Q lt2 s p arg pat e _111929 h2) (@lem8308247 A B D P Q _111929 lt2 s p arg pat e h1)). Qed.
Lemma lem8308250 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : term1392 A B D P Q lt2 s p arg pat e.
Proof. exact (fun h0 : term1390 A B D P Q lt2 s p arg pat e => @lem8308249 A B D P Q lt2 s p arg pat e _111929 h0 h1). Qed.
Lemma lem8308251 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1393 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem51 (term1316 A B D P Q lt2 s p arg pat e) (term1390 A B D P Q lt2 s p arg pat e) (term1293 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8308252 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : term1394 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308251 A B D P Q lt2 s p arg pat e (@lem8308250 A B D P Q lt2 s p arg pat e _111929 h1)). Qed.
Lemma lem8308253 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : _111929 = (term1318 A B D P Q)) : term1395 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308252 A B D P Q lt2 s p arg pat e _111929 h1 (@lem8308118 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8308254 {A B D P Q : Type'} : (term1318 A B D P Q) = (term1318 A B D P Q).
Proof. exact (eq_refl (term1318 A B D P Q)). Qed.
Lemma lem8308255 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1396 A B D P Q _111929 lt2 s p arg pat e.
Proof. exact (fun h0 : _111929 = (term1318 A B D P Q) => @lem8308253 A B D P Q lt2 s p arg pat e _111929 h0). Qed.
Lemma lem8308256 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1397 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308255 A B D P Q (term1318 A B D P Q) lt2 s p arg pat e). Qed.
Lemma lem8308257 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1395 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308256 A B D P Q lt2 s p arg pat e (@lem8308254 A B D P Q)). Qed.
Lemma lem8308258 {B : Type'} (P : B -> Prop) : term1207 B P.
Proof. exact (@lem19732 B P). Qed.
Lemma lem8308259 {B : Type'} : term1398 B.
Proof. exact (@lem8308258 B (term1399 B)). Qed.
Lemma lem8308260 {B : Type'} : (term1400 B) = False.
Proof. exact (eq_refl (term1400 B)). Qed.
Lemma lem8308261 {B : Type'} (x : B) : (term1401 B x) = False.
Proof. exact (eq_refl (term1401 B x)). Qed.
Lemma lem8308262 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8308263 {B : Type'} (x : B) : (term1402 B x) = (imp False).
Proof. exact (MK_COMB (@lem8308262) (@lem8308261 B x)). Qed.
Lemma lem8308264 {B : Type'} (x : B) : (term1403 B x) = (False -> False).
Proof. exact (MK_COMB (@lem8308263 B x) (@lem8308260 B)). Qed.
Lemma lem8308265 {B : Type'} : (term1404 B) = (term1405 B).
Proof. exact (fun_ext (fun x : B => @lem8308264 B x)). Qed.
Lemma lem8308266 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8308267 {B : Type'} : (term1398 B) = (term1406 B).
Proof. exact (MK_COMB (@lem8308266 B) (@lem8308265 B)). Qed.
Lemma lem8308268 {B : Type'} : term1406 B.
Proof. exact (EQ_MP (@lem8308267 B) (@lem8308259 B)). Qed.
Lemma lem8308269 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1407 A B D P Q lt2 s p arg pat e) : term1407 A B D P Q lt2 s p arg pat e.
Proof. exact (h1). Qed.
Lemma lem8308270 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1407 A B D P Q lt2 s p arg pat e) : term1390 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308269 A B D P Q lt2 s p arg pat e h1 (@lem8308268 B)). Qed.
Lemma lem8308271 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1408 A B D P Q lt2 s p arg pat e.
Proof. exact (fun h0 : term1407 A B D P Q lt2 s p arg pat e => @lem8308270 A B D P Q lt2 s p arg pat e h0). Qed.
Lemma lem8308272 {B : Type'} (_111930 : B) (h1 : _111930 = (term112 B)) : _111930 = (term112 B).
Proof. exact (h1). Qed.
Lemma lem8308275 {B : Type'} (_111930 : B) (h1 : _111930 = (term112 B)) : (term112 B) = _111930.
Proof. exact (SYM (@lem8308272 B _111930 h1)). Qed.
Lemma lem8308276 {B : Type'} (_111930 : B) (h1 : _111930 = (term112 B)) : (term112 B) = _111930.
Proof. exact (@lem8308275 B _111930 h1). Qed.
Lemma lem8308277 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1369 A B D P Q _111929 pat e f arg a) = (term1369 A B D P Q _111929 pat e f arg a).
Proof. exact (eq_refl (term1369 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8308278 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1370 A B D P Q _111929 pat e f arg a) = (term1409 A B D P Q _111929 pat e f arg a _111930).
Proof. exact (MK_COMB (@lem8308277 A B D P Q _111929 pat e f arg a) (@lem8308276 B _111930 h1)). Qed.
Lemma lem8308279 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8308280 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1371 A B D P Q _111929 pat e f arg a) = (term1410 A B D P Q _111929 pat e f arg a _111930).
Proof. exact (MK_COMB (@lem8308279 B) (@lem8308278 A B D P Q _111929 pat e f arg a _111930 h1)). Qed.
Lemma lem8308282 {B : Type'} (_111930 : B) (h1 : _111930 = (term112 B)) : (term112 B) = _111930.
Proof. exact (SYM (@lem8308272 B _111930 h1)). Qed.
Lemma lem8308283 {B : Type'} (_111930 : B) (h1 : _111930 = (term112 B)) : (term112 B) = _111930.
Proof. exact (@lem8308282 B _111930 h1). Qed.
Lemma lem8308284 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1273 A B D P Q f arg _111928 pat e a) = (term1273 A B D P Q f arg _111928 pat e a).
Proof. exact (eq_refl (term1273 A B D P Q f arg _111928 pat e a)). Qed.
Lemma lem8308285 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1274 A B D P Q f arg _111928 pat e a) = (term1411 A B D P Q f arg _111928 pat e a _111930).
Proof. exact (MK_COMB (@lem8308284 A B D P Q f arg _111928 pat e a) (@lem8308283 B _111930 h1)). Qed.
Lemma lem8308286 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) (_111930 : B) (h1 : _111930 = (term112 B)) : ((term1370 A B D P Q _111929 pat e f arg a) = (term1274 A B D P Q f arg _111928 pat e a)) = ((term1409 A B D P Q _111929 pat e f arg a _111930) = (term1411 A B D P Q f arg _111928 pat e a _111930)).
Proof. exact (MK_COMB (@lem8308280 A B D P Q _111929 pat e f arg a _111930 h1) (@lem8308285 A B D P Q f arg _111928 pat e a _111930 h1)). Qed.
Lemma lem8308287 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term136 A B P p f a) = (term136 A B P p f a).
Proof. exact (eq_refl (term136 A B P p f a)). Qed.
Lemma lem8308288 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1372 A B D P Q p _111929 f arg _111928 pat e a) = (term1412 A B D P Q p _111929 f arg _111928 pat e a _111930).
Proof. exact (MK_COMB (@lem8308287 A B P p f a) (@lem8308286 A B D P Q _111929 f arg _111928 pat e a _111930 h1)). Qed.
Lemma lem8308289 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1373 A B D P Q p _111929 f arg _111928 pat e) = (term1413 A B D P Q p _111929 f arg _111928 pat e _111930).
Proof. exact (fun_ext (fun a : P => @lem8308288 A B D P Q p _111929 f arg _111928 pat e a _111930 h1)). Qed.
Lemma lem8308290 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8308291 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1374 A B D P Q p _111929 f arg _111928 pat e) = (term1414 A B D P Q p _111929 f arg _111928 pat e _111930).
Proof. exact (MK_COMB (@lem8308290 P) (@lem8308289 A B D P Q p _111929 f arg _111928 pat e _111930 h1)). Qed.
Lemma lem8308292 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1375 A B D P Q p _111929 arg _111928 pat e) = (term1415 A B D P Q p _111929 arg _111928 pat e _111930).
Proof. exact (fun_ext (fun f : A -> B => @lem8308291 A B D P Q p _111929 f arg _111928 pat e _111930 h1)). Qed.
Lemma lem8308293 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8308294 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1376 A B D P Q p _111929 arg _111928 pat e) = (term1416 A B D P Q p _111929 arg _111928 pat e _111930).
Proof. exact (MK_COMB (@lem8308293 A B) (@lem8308292 A B D P Q p _111929 arg _111928 pat e _111930 h1)). Qed.
Lemma lem8308295 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1161 A B D P Q lt2 s p pat e) = (term1161 A B D P Q lt2 s p pat e).
Proof. exact (eq_refl (term1161 A B D P Q lt2 s p pat e)). Qed.
Lemma lem8308296 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1377 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term1417 A B D P Q lt2 s p _111929 arg _111928 pat e _111930).
Proof. exact (MK_COMB (@lem8308295 A B D P Q lt2 s p pat e) (@lem8308294 A B D P Q p _111929 arg _111928 pat e _111930 h1)). Qed.
Lemma lem8308297 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1269 A B D P Q p arg _111928 pat e lt2 s) = (term1269 A B D P Q p arg _111928 pat e lt2 s).
Proof. exact (eq_refl (term1269 A B D P Q p arg _111928 pat e lt2 s)). Qed.
Lemma lem8308298 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1378 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term1418 A B D P Q lt2 s p _111929 arg _111928 pat e _111930).
Proof. exact (MK_COMB (@lem8308297 A B D P Q p arg _111928 pat e lt2 s) (@lem8308296 A B D P Q lt2 s p _111929 arg _111928 pat e _111930 h1)). Qed.
Lemma lem8308299 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8308300 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1379 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term1419 A B D P Q lt2 s p _111929 arg _111928 pat e _111930).
Proof. exact (MK_COMB (@lem8308299) (@lem8308298 A B D P Q lt2 s p _111929 arg _111928 pat e _111930 h1)). Qed.
Lemma lem8308301 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8308302 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1380 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term1420 A B D P Q lt2 s p _111929 arg _111928 pat e _111930).
Proof. exact (MK_COMB (@lem8308301) (@lem8308300 A B D P Q lt2 s p _111929 arg _111928 pat e _111930 h1)). Qed.
Lemma lem8308303 : False = False.
Proof. exact (eq_refl False). Qed.
Lemma lem8308304 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1381 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term1421 A B D P Q lt2 s p _111929 arg _111928 pat e _111930).
Proof. exact (MK_COMB (@lem8308302 A B D P Q lt2 s p _111929 arg _111928 pat e _111930 h1) (@lem8308303)). Qed.
Lemma lem8308305 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term1286 A B P lt2 s p) = (term1286 A B P lt2 s p).
Proof. exact (eq_refl (term1286 A B P lt2 s p)). Qed.
Lemma lem8308306 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1382 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term1422 A B D P Q lt2 s p _111929 arg _111928 pat e _111930).
Proof. exact (MK_COMB (@lem8308305 A B P lt2 s p) (@lem8308304 A B D P Q lt2 s p _111929 arg _111928 pat e _111930 h1)). Qed.
Lemma lem8308307 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term228 A B D P Q p pat e arg lt2 s) = (term228 A B D P Q p pat e arg lt2 s).
Proof. exact (eq_refl (term228 A B D P Q p pat e arg lt2 s)). Qed.
Lemma lem8308308 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1383 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term1423 A B D P Q lt2 s p _111929 arg _111928 pat e _111930).
Proof. exact (MK_COMB (@lem8308307 A B D P Q p pat e arg lt2 s) (@lem8308306 A B D P Q lt2 s p _111929 arg _111928 pat e _111930 h1)). Qed.
Lemma lem8308309 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term231 A B D P Q p pat e arg) = (term231 A B D P Q p pat e arg).
Proof. exact (eq_refl (term231 A B D P Q p pat e arg)). Qed.
Lemma lem8308310 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1384 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term1424 A B D P Q lt2 s p _111929 arg _111928 pat e _111930).
Proof. exact (MK_COMB (@lem8308309 A B D P Q p pat e arg) (@lem8308308 A B D P Q lt2 s p _111929 arg _111928 pat e _111930 h1)). Qed.
Lemma lem8308311 {D P Q : Type'} (_111928 : type886 D P Q) : (term1256 D P Q _111928) = (term1256 D P Q _111928).
Proof. exact (eq_refl (term1256 D P Q _111928)). Qed.
Lemma lem8308312 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1385 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term1425 A B D P Q lt2 s p _111929 arg _111928 pat e _111930).
Proof. exact (MK_COMB (@lem8308311 D P Q _111928) (@lem8308310 A B D P Q lt2 s p _111929 arg _111928 pat e _111930 h1)). Qed.
Lemma lem8308313 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1387 A B D P Q lt2 s p _111929 arg pat e) = (term1426 A B D P Q lt2 s p _111929 arg pat e _111930).
Proof. exact (fun_ext (fun _111928 : type886 D P Q => @lem8308312 A B D P Q lt2 s p _111929 arg _111928 pat e _111930 h1)). Qed.
Lemma lem8308314 {D P Q : Type'} : (@all ((Q -> D) -> (P -> D) -> P -> Q)) = (@all ((Q -> D) -> (P -> D) -> P -> Q)).
Proof. exact (eq_refl (@all ((Q -> D) -> (P -> D) -> P -> Q))). Qed.
Lemma lem8308315 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1388 A B D P Q lt2 s p _111929 arg pat e) = (term1427 A B D P Q lt2 s p _111929 arg pat e _111930).
Proof. exact (MK_COMB (@lem8308314 D P Q) (@lem8308313 A B D P Q lt2 s p _111929 arg pat e _111930 h1)). Qed.
Lemma lem8308316 {A B D P Q : Type'} (_111929 : type904 A B D P Q) : (term1367 A B D P Q _111929) = (term1367 A B D P Q _111929).
Proof. exact (eq_refl (term1367 A B D P Q _111929)). Qed.
Lemma lem8308317 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1389 A B D P Q lt2 s p _111929 arg pat e) = (term1428 A B D P Q lt2 s p _111929 arg pat e _111930).
Proof. exact (MK_COMB (@lem8308316 A B D P Q _111929) (@lem8308315 A B D P Q lt2 s p _111929 arg pat e _111930 h1)). Qed.
Lemma lem8308318 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1429 A B D P Q lt2 s p arg pat e) = (term1430 A B D P Q lt2 s p arg pat e _111930).
Proof. exact (fun_ext (fun _111929 : type904 A B D P Q => @lem8308317 A B D P Q lt2 s p _111929 arg pat e _111930 h1)). Qed.
Lemma lem8308319 {A B D P Q : Type'} : (@all ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> B)) = (@all ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> B)).
Proof. exact (eq_refl (@all ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> B))). Qed.
Lemma lem8308320 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1390 A B D P Q lt2 s p arg pat e) = (term1431 A B D P Q lt2 s p arg pat e _111930).
Proof. exact (MK_COMB (@lem8308319 A B D P Q) (@lem8308318 A B D P Q lt2 s p arg pat e _111930 h1)). Qed.
Lemma lem8308321 {B : Type'} : (term1432 B) = (term1432 B).
Proof. exact (eq_refl (term1432 B)). Qed.
Lemma lem8308322 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1407 A B D P Q lt2 s p arg pat e) = (term1433 A B D P Q lt2 s p arg pat e _111930).
Proof. exact (MK_COMB (@lem8308321 B) (@lem8308320 A B D P Q lt2 s p arg pat e _111930 h1)). Qed.
Lemma lem8308323 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1434 A B D P Q lt2 s p arg pat e) : term1434 A B D P Q lt2 s p arg pat e.
Proof. exact (h1). Qed.
Lemma lem8308324 {A B D P Q : Type'} (_111930 : B) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1434 A B D P Q lt2 s p arg pat e) : term1435 A B D P Q lt2 s p arg pat e _111930.
Proof. exact (@lem8308323 A B D P Q lt2 s p arg pat e h1 _111930). Qed.
Lemma lem8308325 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) : (term1435 A B D P Q lt2 s p arg pat e _111930) = (term1433 A B D P Q lt2 s p arg pat e _111930).
Proof. exact (eq_refl (term1435 A B D P Q lt2 s p arg pat e _111930)). Qed.
Lemma lem8308326 {A B D P Q : Type'} (_111930 : B) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1434 A B D P Q lt2 s p arg pat e) : term1433 A B D P Q lt2 s p arg pat e _111930.
Proof. exact (EQ_MP (@lem8308325 A B D P Q lt2 s p arg pat e _111930) (@lem8308324 A B D P Q _111930 lt2 s p arg pat e h1)). Qed.
Lemma lem8308327 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : _111930 = (term112 B)) : (term1433 A B D P Q lt2 s p arg pat e _111930) = (term1407 A B D P Q lt2 s p arg pat e).
Proof. exact (SYM (@lem8308322 A B D P Q lt2 s p arg pat e _111930 h1)). Qed.
Lemma lem8308328 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : term1434 A B D P Q lt2 s p arg pat e) (h2 : _111930 = (term112 B)) : term1407 A B D P Q lt2 s p arg pat e.
Proof. exact (EQ_MP (@lem8308327 A B D P Q lt2 s p arg pat e _111930 h2) (@lem8308326 A B D P Q _111930 lt2 s p arg pat e h1)). Qed.
Lemma lem8308329 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : _111930 = (term112 B)) : term1436 A B D P Q lt2 s p arg pat e.
Proof. exact (fun h0 : term1434 A B D P Q lt2 s p arg pat e => @lem8308328 A B D P Q lt2 s p arg pat e _111930 h0 h1). Qed.
Lemma lem8308330 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1437 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem51 (term1407 A B D P Q lt2 s p arg pat e) (term1434 A B D P Q lt2 s p arg pat e) (term1390 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8308331 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : _111930 = (term112 B)) : term1438 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308330 A B D P Q lt2 s p arg pat e (@lem8308329 A B D P Q lt2 s p arg pat e _111930 h1)). Qed.
Lemma lem8308332 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) (h1 : _111930 = (term112 B)) : term1439 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308331 A B D P Q lt2 s p arg pat e _111930 h1 (@lem8308271 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8308333 {B : Type'} : (term112 B) = (term112 B).
Proof. exact (eq_refl (term112 B)). Qed.
Lemma lem8308334 {A B D P Q : Type'} (_111930 : B) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1440 A B D P Q _111930 lt2 s p arg pat e.
Proof. exact (fun h0 : _111930 = (term112 B) => @lem8308332 A B D P Q lt2 s p arg pat e _111930 h0). Qed.
Lemma lem8308335 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1441 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308334 A B D P Q (term112 B) lt2 s p arg pat e). Qed.
Lemma lem8308336 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1439 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308335 A B D P Q lt2 s p arg pat e (@lem8308333 B)). Qed.
Lemma lem8308337 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1434 A B D P Q lt2 s p arg pat e) : term1434 A B D P Q lt2 s p arg pat e.
Proof. exact (h1). Qed.
Lemma lem8308338 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1442 A B D P Q lt2 s p arg pat e.
Proof. exact (fun h0 : term1434 A B D P Q lt2 s p arg pat e => @lem8308337 A B D P Q lt2 s p arg pat e h0). Qed.
Lemma lem8308339 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1443 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem51 (term1434 A B D P Q lt2 s p arg pat e) (term1434 A B D P Q lt2 s p arg pat e) (term1390 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8308340 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1444 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308339 A B D P Q lt2 s p arg pat e (@lem8308338 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8308341 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1439 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308340 A B D P Q lt2 s p arg pat e (@lem8308336 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8308342 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1445 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem51 (term1390 A B D P Q lt2 s p arg pat e) (term1434 A B D P Q lt2 s p arg pat e) (term1293 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8308343 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1446 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308342 A B D P Q lt2 s p arg pat e (@lem8308341 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8308344 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1447 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308343 A B D P Q lt2 s p arg pat e (@lem8308257 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8308345 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1448 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem51 (term1293 A B D P Q lt2 s p arg pat e) (term1434 A B D P Q lt2 s p arg pat e) (term1222 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8308346 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1449 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308345 A B D P Q lt2 s p arg pat e (@lem8308344 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8308347 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1450 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308346 A B D P Q lt2 s p arg pat e (@lem8308099 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8308348 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1450 A B D P Q lt2 s p arg pat e) : term1450 A B D P Q lt2 s p arg pat e.
Proof. exact (h1). Qed.
Lemma lem8308349 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1434 A B D P Q lt2 s p arg pat e) : term1434 A B D P Q lt2 s p arg pat e.
Proof. exact (h1). Qed.
Lemma lem8308350 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1434 A B D P Q lt2 s p arg pat e) (h2 : term1450 A B D P Q lt2 s p arg pat e) : term1222 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308348 A B D P Q lt2 s p arg pat e h2 (@lem8308349 A B D P Q lt2 s p arg pat e h1)). Qed.
Lemma lem8308351 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1434 A B D P Q lt2 s p arg pat e) : term1451 A B D P Q lt2 s p arg pat e.
Proof. exact (fun h0 : term1450 A B D P Q lt2 s p arg pat e => @lem8308350 A B D P Q lt2 s p arg pat e h1 h0). Qed.
Lemma lem8308352 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1450 A B D P Q lt2 s p arg pat e) : term1450 A B D P Q lt2 s p arg pat e.
Proof. exact (h1). Qed.
Lemma lem8308353 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1434 A B D P Q lt2 s p arg pat e) (h2 : term1450 A B D P Q lt2 s p arg pat e) : term1222 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308351 A B D P Q lt2 s p arg pat e h1 (@lem8308352 A B D P Q lt2 s p arg pat e h2)). Qed.
Lemma lem8308354 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (h1 : term1450 A B D P Q lt2 s p arg pat e) : term1450 A B D P Q lt2 s p arg pat e.
Proof. exact (fun h0 : term1434 A B D P Q lt2 s p arg pat e => @lem8308353 A B D P Q lt2 s p arg pat e h0 h1). Qed.
Lemma lem8308355 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1452 A B D P Q lt2 s p arg pat e.
Proof. exact (fun h0 : term1450 A B D P Q lt2 s p arg pat e => @lem8308354 A B D P Q lt2 s p arg pat e h0). Qed.
Lemma lem8308358 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1450 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308355 A B D P Q lt2 s p arg pat e (@lem8308347 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8308359 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1450 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308358 A B D P Q lt2 s p arg pat e). Qed.
Lemma lem8308391 {A : Type'} (t : Prop) : (term1453 A t) = t.
Proof. exact (EQ_MP (@lem16458 A t) (@lem16457 A t)). Qed.
Lemma lem8308392 {B : Type'} (t : Prop) : (term1453 B t) = t.
Proof. exact (@lem8308391 B t). Qed.
Lemma lem8308393 {B : Type'} : (term1406 B) = (False -> False).
Proof. exact (@lem8308392 B (False -> False)). Qed.
Lemma lem8308395 (t : Prop) : (False -> t) = True.
Proof. exact (proj1 (@lem16473 t)). Qed.
Lemma lem8308396 : (False -> False) = True.
Proof. exact (@lem8308395 False). Qed.
Lemma lem8308397 {B : Type'} : (term1406 B) = True.
Proof. exact (TRANS (@lem8308393 B) (@lem8308396)). Qed.
Lemma lem8308398 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8308399 {B : Type'} : (term1432 B) = (imp True).
Proof. exact (MK_COMB (@lem8308398) (@lem8308397 B)). Qed.
Lemma lem8308627 (t : Prop) : (t -> False) = (~ t).
Proof. exact (proj2 (@lem16474 t)). Qed.
Lemma lem8308628 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) : (term1421 A B D P Q lt2 s p _111929 arg _111928 pat e _111930) = (term1454 A B D P Q lt2 s p _111929 arg _111928 pat e _111930).
Proof. exact (@lem8308627 (term1419 A B D P Q lt2 s p _111929 arg _111928 pat e _111930)). Qed.
Lemma lem8308630 (t : Prop) : (term224 t) = t.
Proof. exact (EQ_MP (@lem16507 t) (@lem16506 t)). Qed.
Lemma lem8308631 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) : (term1454 A B D P Q lt2 s p _111929 arg _111928 pat e _111930) = (term1418 A B D P Q lt2 s p _111929 arg _111928 pat e _111930).
Proof. exact (@lem8308630 (term1418 A B D P Q lt2 s p _111929 arg _111928 pat e _111930)). Qed.
Lemma lem8308634 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) : (term1421 A B D P Q lt2 s p _111929 arg _111928 pat e _111930) = (term1418 A B D P Q lt2 s p _111929 arg _111928 pat e _111930).
Proof. exact (TRANS (@lem8308628 A B D P Q lt2 s p _111929 arg _111928 pat e _111930) (@lem8308631 A B D P Q lt2 s p _111929 arg _111928 pat e _111930)). Qed.
Lemma lem8308709 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term1286 A B P lt2 s p) = (term1286 A B P lt2 s p).
Proof. exact (eq_refl (term1286 A B P lt2 s p)). Qed.
Lemma lem8308710 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) : (term1422 A B D P Q lt2 s p _111929 arg _111928 pat e _111930) = (term1455 A B D P Q lt2 s p _111929 arg _111928 pat e _111930).
Proof. exact (MK_COMB (@lem8308709 A B P lt2 s p) (@lem8308634 A B D P Q lt2 s p _111929 arg _111928 pat e _111930)). Qed.
Lemma lem8308713 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term228 A B D P Q p pat e arg lt2 s) = (term228 A B D P Q p pat e arg lt2 s).
Proof. exact (eq_refl (term228 A B D P Q p pat e arg lt2 s)). Qed.
Lemma lem8308714 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) : (term1423 A B D P Q lt2 s p _111929 arg _111928 pat e _111930) = (term1456 A B D P Q lt2 s p _111929 arg _111928 pat e _111930).
Proof. exact (MK_COMB (@lem8308713 A B D P Q p pat e arg lt2 s) (@lem8308710 A B D P Q lt2 s p _111929 arg _111928 pat e _111930)). Qed.
Lemma lem8308717 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term231 A B D P Q p pat e arg) = (term231 A B D P Q p pat e arg).
Proof. exact (eq_refl (term231 A B D P Q p pat e arg)). Qed.
Lemma lem8308718 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) : (term1424 A B D P Q lt2 s p _111929 arg _111928 pat e _111930) = (term1457 A B D P Q lt2 s p _111929 arg _111928 pat e _111930).
Proof. exact (MK_COMB (@lem8308717 A B D P Q p pat e arg) (@lem8308714 A B D P Q lt2 s p _111929 arg _111928 pat e _111930)). Qed.
Lemma lem8308721 {D P Q : Type'} (_111928 : type886 D P Q) : (term1256 D P Q _111928) = (term1256 D P Q _111928).
Proof. exact (eq_refl (term1256 D P Q _111928)). Qed.
Lemma lem8308722 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) : (term1425 A B D P Q lt2 s p _111929 arg _111928 pat e _111930) = (term1458 A B D P Q lt2 s p _111929 arg _111928 pat e _111930).
Proof. exact (MK_COMB (@lem8308721 D P Q _111928) (@lem8308718 A B D P Q lt2 s p _111929 arg _111928 pat e _111930)). Qed.
Lemma lem8308725 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) : (term1426 A B D P Q lt2 s p _111929 arg pat e _111930) = (term1459 A B D P Q lt2 s p _111929 arg pat e _111930).
Proof. exact (fun_ext (fun _111928 : type886 D P Q => @lem8308722 A B D P Q lt2 s p _111929 arg _111928 pat e _111930)). Qed.
Lemma lem8308726 {D P Q : Type'} : (@all ((Q -> D) -> (P -> D) -> P -> Q)) = (@all ((Q -> D) -> (P -> D) -> P -> Q)).
Proof. exact (eq_refl (@all ((Q -> D) -> (P -> D) -> P -> Q))). Qed.
Lemma lem8308727 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) : (term1427 A B D P Q lt2 s p _111929 arg pat e _111930) = (term1460 A B D P Q lt2 s p _111929 arg pat e _111930).
Proof. exact (MK_COMB (@lem8308726 D P Q) (@lem8308725 A B D P Q lt2 s p _111929 arg pat e _111930)). Qed.
Lemma lem8308732 {A B D P Q : Type'} (_111929 : type904 A B D P Q) : (term1367 A B D P Q _111929) = (term1367 A B D P Q _111929).
Proof. exact (eq_refl (term1367 A B D P Q _111929)). Qed.
Lemma lem8308733 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) : (term1428 A B D P Q lt2 s p _111929 arg pat e _111930) = (term1461 A B D P Q lt2 s p _111929 arg pat e _111930).
Proof. exact (MK_COMB (@lem8308732 A B D P Q _111929) (@lem8308727 A B D P Q lt2 s p _111929 arg pat e _111930)). Qed.
Lemma lem8308736 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) : (term1430 A B D P Q lt2 s p arg pat e _111930) = (term1462 A B D P Q lt2 s p arg pat e _111930).
Proof. exact (fun_ext (fun _111929 : type904 A B D P Q => @lem8308733 A B D P Q lt2 s p _111929 arg pat e _111930)). Qed.
Lemma lem8308737 {A B D P Q : Type'} : (@all ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> B)) = (@all ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> B)).
Proof. exact (eq_refl (@all ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> B))). Qed.
Lemma lem8308738 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) : (term1431 A B D P Q lt2 s p arg pat e _111930) = (term1463 A B D P Q lt2 s p arg pat e _111930).
Proof. exact (MK_COMB (@lem8308737 A B D P Q) (@lem8308736 A B D P Q lt2 s p arg pat e _111930)). Qed.
Lemma lem8308743 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) : (term1433 A B D P Q lt2 s p arg pat e _111930) = (term1464 A B D P Q lt2 s p arg pat e _111930).
Proof. exact (MK_COMB (@lem8308399 B) (@lem8308738 A B D P Q lt2 s p arg pat e _111930)). Qed.
Lemma lem8308745 (t : Prop) : (True -> t) = t.
Proof. exact (proj1 (@lem16471 t)). Qed.
Lemma lem8308746 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) : (term1464 A B D P Q lt2 s p arg pat e _111930) = (term1463 A B D P Q lt2 s p arg pat e _111930).
Proof. exact (@lem8308745 (term1463 A B D P Q lt2 s p arg pat e _111930)). Qed.
Lemma lem8309049 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111930 : B) : (term1433 A B D P Q lt2 s p arg pat e _111930) = (term1463 A B D P Q lt2 s p arg pat e _111930).
Proof. exact (TRANS (@lem8308743 A B D P Q lt2 s p arg pat e _111930) (@lem8308746 A B D P Q lt2 s p arg pat e _111930)). Qed.
Lemma lem8309050 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1465 A B D P Q lt2 s p arg pat e) = (term1466 A B D P Q lt2 s p arg pat e).
Proof. exact (fun_ext (fun _111930 : B => @lem8309049 A B D P Q lt2 s p arg pat e _111930)). Qed.
Lemma lem8309051 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8309052 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1434 A B D P Q lt2 s p arg pat e) = (term1467 A B D P Q lt2 s p arg pat e).
Proof. exact (MK_COMB (@lem8309051 B) (@lem8309050 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8309057 {A B D P Q : Type'} (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1468 A B D P Q s p arg pat e) = (term1469 A B D P Q s p arg pat e).
Proof. exact (fun_ext (fun lt2 : type1402 A => @lem8309052 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8309058 {A : Type'} : (@all (A -> A -> Prop)) = (@all (A -> A -> Prop)).
Proof. exact (eq_refl (@all (A -> A -> Prop))). Qed.
Lemma lem8309059 {A B D P Q : Type'} (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1470 A B D P Q s p arg pat e) = (term1471 A B D P Q s p arg pat e).
Proof. exact (MK_COMB (@lem8309058 A) (@lem8309057 A B D P Q s p arg pat e)). Qed.
Lemma lem8309064 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1472 A B D P Q p arg pat e) = (term1473 A B D P Q p arg pat e).
Proof. exact (fun_ext (fun s : P -> A => @lem8309059 A B D P Q s p arg pat e)). Qed.
Lemma lem8309065 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8309066 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1474 A B D P Q p arg pat e) = (term1475 A B D P Q p arg pat e).
Proof. exact (MK_COMB (@lem8309065 A P) (@lem8309064 A B D P Q p arg pat e)). Qed.
Lemma lem8309071 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1476 A B D P Q arg pat e) = (term1477 A B D P Q arg pat e).
Proof. exact (fun_ext (fun p : type560 A B P => @lem8309066 A B D P Q p arg pat e)). Qed.
Lemma lem8309072 {A B P : Type'} : (@all ((A -> B) -> P -> Prop)) = (@all ((A -> B) -> P -> Prop)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> Prop))). Qed.
Lemma lem8309073 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1478 A B D P Q arg pat e) = (term1479 A B D P Q arg pat e).
Proof. exact (MK_COMB (@lem8309072 A B P) (@lem8309071 A B D P Q arg pat e)). Qed.
Lemma lem8309078 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) : (term1480 A B D P Q pat e) = (term1481 A B D P Q pat e).
Proof. exact (fun_ext (fun arg : type1475 A P Q => @lem8309073 A B D P Q arg pat e)). Qed.
Lemma lem8309079 {A P Q : Type'} : (@all (P -> Q -> A)) = (@all (P -> Q -> A)).
Proof. exact (eq_refl (@all (P -> Q -> A))). Qed.
Lemma lem8309080 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) : (term1482 A B D P Q pat e) = (term1483 A B D P Q pat e).
Proof. exact (MK_COMB (@lem8309079 A P Q) (@lem8309078 A B D P Q pat e)). Qed.
Lemma lem8309085 {A B D P Q : Type'} (e : P -> D) : (term1484 A B D P Q e) = (term1485 A B D P Q e).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8309080 A B D P Q pat e)). Qed.
Lemma lem8309086 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8309087 {A B D P Q : Type'} (e : P -> D) : (term1486 A B D P Q e) = (term1487 A B D P Q e).
Proof. exact (MK_COMB (@lem8309086 D Q) (@lem8309085 A B D P Q e)). Qed.
Lemma lem8309092 {A B D P Q : Type'} : (term1488 A B D P Q) = (term1489 A B D P Q).
Proof. exact (fun_ext (fun e : P -> D => @lem8309087 A B D P Q e)). Qed.
Lemma lem8309093 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8309102 {A B D P Q : Type'} : (term1490 A B D P Q) = (term1491 A B D P Q).
Proof. exact (MK_COMB (@lem8309093 D P) (@lem8309092 A B D P Q)). Qed.
Lemma lem8309108 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = False) : (term169 D P Q pat e a) = False.
Proof. exact (h1). Qed.
Lemma lem8309109 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = False) : (term169 D P Q pat e a) = False.
Proof. exact (@lem8309108 D P Q pat e a h1). Qed.
Lemma lem8309110 {B : Type'} : (@COND B) = (@COND B).
Proof. exact (eq_refl (@COND B)). Qed.
Lemma lem8309111 {B D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = False) : (term1271 B D P Q pat e a) = (@COND B False).
Proof. exact (MK_COMB (@lem8309110 B) (@lem8309109 D P Q pat e a h1)). Qed.
Lemma lem8309112 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (_111929 pat e f arg a) = (_111929 pat e f arg a).
Proof. exact (eq_refl (_111929 pat e f arg a)). Qed.
Lemma lem8309113 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = False) : (term1369 A B D P Q _111929 pat e f arg a) = (term1492 A B D P Q _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8309111 B D P Q pat e a h1) (@lem8309112 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8309114 {B : Type'} (_111930 : B) : _111930 = _111930.
Proof. exact (eq_refl _111930). Qed.
Lemma lem8309115 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111930 : B) (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = False) : (term1409 A B D P Q _111929 pat e f arg a _111930) = (term1493 A B D P Q _111929 pat e f arg a _111930).
Proof. exact (MK_COMB (@lem8309113 A B D P Q _111929 f arg pat e a h1) (@lem8309114 B _111930)). Qed.
Lemma lem8309117 {A : Type'} (t1 : A) (t2 : A) : (@COND A False t1 t2) = t2.
Proof. exact (proj2 (@lem12653 A t1 t2)). Qed.
Lemma lem8309118 {B : Type'} (t1 : B) (t2 : B) : (@COND B False t1 t2) = t2.
Proof. exact (@lem8309117 B t1 t2). Qed.
Lemma lem8309119 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (_111930 : B) : (term1493 A B D P Q _111929 pat e f arg a _111930) = _111930.
Proof. exact (@lem8309118 B (_111929 pat e f arg a) _111930). Qed.
Lemma lem8309120 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111930 : B) (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = False) : (term1409 A B D P Q _111929 pat e f arg a _111930) = _111930.
Proof. exact (TRANS (@lem8309115 A B D P Q _111929 f arg _111930 pat e a h1) (@lem8309119 A B D P Q _111929 pat e f arg a _111930)). Qed.
Lemma lem8309121 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8309122 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111930 : B) (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = False) : (term1410 A B D P Q _111929 pat e f arg a _111930) = (@eq B _111930).
Proof. exact (MK_COMB (@lem8309121 B) (@lem8309120 A B D P Q _111929 f arg _111930 pat e a h1)). Qed.
Lemma lem8309126 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = False) : (term169 D P Q pat e a) = False.
Proof. exact (h1). Qed.
Lemma lem8309127 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = False) : (term169 D P Q pat e a) = False.
Proof. exact (@lem8309126 D P Q pat e a h1). Qed.
Lemma lem8309128 {B : Type'} : (@COND B) = (@COND B).
Proof. exact (eq_refl (@COND B)). Qed.
Lemma lem8309129 {B D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = False) : (term1271 B D P Q pat e a) = (@COND B False).
Proof. exact (MK_COMB (@lem8309128 B) (@lem8309127 D P Q pat e a h1)). Qed.
Lemma lem8309130 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1270 A B D P Q f arg _111928 pat e a) = (term1270 A B D P Q f arg _111928 pat e a).
Proof. exact (eq_refl (term1270 A B D P Q f arg _111928 pat e a)). Qed.
Lemma lem8309131 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = False) : (term1273 A B D P Q f arg _111928 pat e a) = (term1494 A B D P Q f arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8309129 B D P Q pat e a h1) (@lem8309130 A B D P Q f arg _111928 pat e a)). Qed.
Lemma lem8309132 {B : Type'} (_111930 : B) : _111930 = _111930.
Proof. exact (eq_refl _111930). Qed.
Lemma lem8309133 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (_111930 : B) (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = False) : (term1411 A B D P Q f arg _111928 pat e a _111930) = (term1495 A B D P Q f arg _111928 pat e a _111930).
Proof. exact (MK_COMB (@lem8309131 A B D P Q f arg _111928 pat e a h1) (@lem8309132 B _111930)). Qed.
Lemma lem8309135 {A : Type'} (t1 : A) (t2 : A) : (@COND A False t1 t2) = t2.
Proof. exact (proj2 (@lem12653 A t1 t2)). Qed.
Lemma lem8309136 {B : Type'} (t1 : B) (t2 : B) : (@COND B False t1 t2) = t2.
Proof. exact (@lem8309135 B t1 t2). Qed.
Lemma lem8309137 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) (_111930 : B) : (term1495 A B D P Q f arg _111928 pat e a _111930) = _111930.
Proof. exact (@lem8309136 B (term1270 A B D P Q f arg _111928 pat e a) _111930). Qed.
Lemma lem8309138 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (_111930 : B) (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = False) : (term1411 A B D P Q f arg _111928 pat e a _111930) = _111930.
Proof. exact (TRANS (@lem8309133 A B D P Q f arg _111928 _111930 pat e a h1) (@lem8309137 A B D P Q f arg _111928 pat e a _111930)). Qed.
Lemma lem8309139 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (_111930 : B) (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = False) : ((term1409 A B D P Q _111929 pat e f arg a _111930) = (term1411 A B D P Q f arg _111928 pat e a _111930)) = (_111930 = _111930).
Proof. exact (MK_COMB (@lem8309122 A B D P Q _111929 f arg _111930 pat e a h1) (@lem8309138 A B D P Q f arg _111928 _111930 pat e a h1)). Qed.
Lemma lem8309141 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem1863 A x) (@lem1862 A x)). Qed.
Lemma lem8309142 {B : Type'} (x : B) : (x = x) = True.
Proof. exact (@lem8309141 B x). Qed.
Lemma lem8309143 {B : Type'} (_111930 : B) : (_111930 = _111930) = True.
Proof. exact (@lem8309142 B _111930). Qed.
Lemma lem8309144 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (_111930 : B) (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = False) : ((term1409 A B D P Q _111929 pat e f arg a _111930) = (term1411 A B D P Q f arg _111928 pat e a _111930)) = True.
Proof. exact (TRANS (@lem8309139 A B D P Q _111929 f arg _111928 _111930 pat e a h1) (@lem8309143 B _111930)). Qed.
Lemma lem8309145 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term136 A B P p f a) = (term136 A B P p f a).
Proof. exact (eq_refl (term136 A B P p f a)). Qed.
Lemma lem8309146 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (_111930 : B) (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = False) : (term1412 A B D P Q p _111929 f arg _111928 pat e a _111930) = (term1496 A B P p f a).
Proof. exact (MK_COMB (@lem8309145 A B P p f a) (@lem8309144 A B D P Q _111929 f arg _111928 _111930 pat e a h1)). Qed.
Lemma lem8309148 (t : Prop) : (t -> True) = True.
Proof. exact (proj1 (@lem1821 t)). Qed.
Lemma lem8309149 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term1496 A B P p f a) = True.
Proof. exact (@lem8309148 (p f a)). Qed.
Lemma lem8309150 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (_111930 : B) (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = False) : (term1412 A B D P Q p _111929 f arg _111928 pat e a _111930) = True.
Proof. exact (TRANS (@lem8309146 A B D P Q _111929 arg _111928 _111930 p f pat e a h1) (@lem8309149 A B P p f a)). Qed.
Lemma lem8309151 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) (_111930 : B) : term1497 A B D P Q p _111929 f arg _111928 pat e a _111930.
Proof. exact (fun h0 : (term169 D P Q pat e a) = False => @lem8309150 A B D P Q p _111929 f arg _111928 _111930 pat e a h0). Qed.
Lemma lem8309155 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = True) : (term169 D P Q pat e a) = True.
Proof. exact (h1). Qed.
Lemma lem8309156 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = True) : (term169 D P Q pat e a) = True.
Proof. exact (@lem8309155 D P Q pat e a h1). Qed.
Lemma lem8309157 {B : Type'} : (@COND B) = (@COND B).
Proof. exact (eq_refl (@COND B)). Qed.
Lemma lem8309158 {B D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = True) : (term1271 B D P Q pat e a) = (@COND B True).
Proof. exact (MK_COMB (@lem8309157 B) (@lem8309156 D P Q pat e a h1)). Qed.
Lemma lem8309159 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (_111929 pat e f arg a) = (_111929 pat e f arg a).
Proof. exact (eq_refl (_111929 pat e f arg a)). Qed.
Lemma lem8309160 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = True) : (term1369 A B D P Q _111929 pat e f arg a) = (term1498 A B D P Q _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8309158 B D P Q pat e a h1) (@lem8309159 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8309161 {B : Type'} (_111930 : B) : _111930 = _111930.
Proof. exact (eq_refl _111930). Qed.
Lemma lem8309162 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111930 : B) (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = True) : (term1409 A B D P Q _111929 pat e f arg a _111930) = (term1499 A B D P Q _111929 pat e f arg a _111930).
Proof. exact (MK_COMB (@lem8309160 A B D P Q _111929 f arg pat e a h1) (@lem8309161 B _111930)). Qed.
Lemma lem8309164 {A : Type'} (t2 : A) (t1 : A) : (@COND A True t1 t2) = t1.
Proof. exact (proj1 (@lem12653 A t1 t2)). Qed.
Lemma lem8309165 {B : Type'} (t2 : B) (t1 : B) : (@COND B True t1 t2) = t1.
Proof. exact (@lem8309164 B t2 t1). Qed.
Lemma lem8309166 {A B D P Q : Type'} (_111930 : B) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1499 A B D P Q _111929 pat e f arg a _111930) = (_111929 pat e f arg a).
Proof. exact (@lem8309165 B _111930 (_111929 pat e f arg a)). Qed.
Lemma lem8309167 {A B D P Q : Type'} (_111930 : B) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = True) : (term1409 A B D P Q _111929 pat e f arg a _111930) = (_111929 pat e f arg a).
Proof. exact (TRANS (@lem8309162 A B D P Q _111929 f arg _111930 pat e a h1) (@lem8309166 A B D P Q _111930 _111929 pat e f arg a)). Qed.
Lemma lem8309168 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8309169 {A B D P Q : Type'} (_111930 : B) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = True) : (term1410 A B D P Q _111929 pat e f arg a _111930) = (term1332 A B D P Q _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8309168 B) (@lem8309167 A B D P Q _111930 _111929 f arg pat e a h1)). Qed.
Lemma lem8309173 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = True) : (term169 D P Q pat e a) = True.
Proof. exact (h1). Qed.
Lemma lem8309174 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = True) : (term169 D P Q pat e a) = True.
Proof. exact (@lem8309173 D P Q pat e a h1). Qed.
Lemma lem8309175 {B : Type'} : (@COND B) = (@COND B).
Proof. exact (eq_refl (@COND B)). Qed.
Lemma lem8309176 {B D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = True) : (term1271 B D P Q pat e a) = (@COND B True).
Proof. exact (MK_COMB (@lem8309175 B) (@lem8309174 D P Q pat e a h1)). Qed.
Lemma lem8309177 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1270 A B D P Q f arg _111928 pat e a) = (term1270 A B D P Q f arg _111928 pat e a).
Proof. exact (eq_refl (term1270 A B D P Q f arg _111928 pat e a)). Qed.
Lemma lem8309178 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = True) : (term1273 A B D P Q f arg _111928 pat e a) = (term1500 A B D P Q f arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8309176 B D P Q pat e a h1) (@lem8309177 A B D P Q f arg _111928 pat e a)). Qed.
Lemma lem8309179 {B : Type'} (_111930 : B) : _111930 = _111930.
Proof. exact (eq_refl _111930). Qed.
Lemma lem8309180 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (_111930 : B) (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = True) : (term1411 A B D P Q f arg _111928 pat e a _111930) = (term1501 A B D P Q f arg _111928 pat e a _111930).
Proof. exact (MK_COMB (@lem8309178 A B D P Q f arg _111928 pat e a h1) (@lem8309179 B _111930)). Qed.
Lemma lem8309182 {A : Type'} (t2 : A) (t1 : A) : (@COND A True t1 t2) = t1.
Proof. exact (proj1 (@lem12653 A t1 t2)). Qed.
Lemma lem8309183 {B : Type'} (t2 : B) (t1 : B) : (@COND B True t1 t2) = t1.
Proof. exact (@lem8309182 B t2 t1). Qed.
Lemma lem8309184 {A B D P Q : Type'} (_111930 : B) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1501 A B D P Q f arg _111928 pat e a _111930) = (term1270 A B D P Q f arg _111928 pat e a).
Proof. exact (@lem8309183 B _111930 (term1270 A B D P Q f arg _111928 pat e a)). Qed.
Lemma lem8309185 {A B D P Q : Type'} (_111930 : B) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = True) : (term1411 A B D P Q f arg _111928 pat e a _111930) = (term1270 A B D P Q f arg _111928 pat e a).
Proof. exact (TRANS (@lem8309180 A B D P Q f arg _111928 _111930 pat e a h1) (@lem8309184 A B D P Q _111930 f arg _111928 pat e a)). Qed.
Lemma lem8309186 {A B D P Q : Type'} (_111930 : B) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = True) : ((term1409 A B D P Q _111929 pat e f arg a _111930) = (term1411 A B D P Q f arg _111928 pat e a _111930)) = ((_111929 pat e f arg a) = (term1270 A B D P Q f arg _111928 pat e a)).
Proof. exact (MK_COMB (@lem8309169 A B D P Q _111930 _111929 f arg pat e a h1) (@lem8309185 A B D P Q _111930 f arg _111928 pat e a h1)). Qed.
Lemma lem8309189 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term136 A B P p f a) = (term136 A B P p f a).
Proof. exact (eq_refl (term136 A B P p f a)). Qed.
Lemma lem8309190 {A B D P Q : Type'} (_111930 : B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) (h1 : (term169 D P Q pat e a) = True) : (term1412 A B D P Q p _111929 f arg _111928 pat e a _111930) = (term1502 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8309189 A B P p f a) (@lem8309186 A B D P Q _111930 _111929 f arg _111928 pat e a h1)). Qed.
Lemma lem8309193 {A B D P Q : Type'} (_111930 : B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : term1503 A B D P Q _111930 p _111929 f arg _111928 pat e a.
Proof. exact (fun h0 : (term169 D P Q pat e a) = True => @lem8309190 A B D P Q _111930 p _111929 f arg _111928 pat e a h0). Qed.
Lemma lem8309194 {A B D P Q : Type'} (_111930 : B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : term1504 A B D P Q _111930 p _111929 f arg _111928 pat e a.
Proof. exact (conj (@lem8309151 A B D P Q p _111929 f arg _111928 pat e a _111930) (@lem8309193 A B D P Q _111930 p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8309196 (x : Prop) (x1 : Prop) (b : Prop) (x0 : Prop) : term1505 x x1 b x0.
Proof. exact (or_elim (@lem20425 b) (fun h0 : b = True => @lem20612 x x1 x0 b h0) (fun h0 : b = False => @lem20611 x x1 x0 b h0)). Qed.
Lemma lem8309197 {A B D P Q : Type'} (_111930 : B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : term1506 A B D P Q _111930 p _111929 f arg _111928 pat e a.
Proof. exact (@lem8309196 (term1412 A B D P Q p _111929 f arg _111928 pat e a _111930) (term1502 A B D P Q p _111929 f arg _111928 pat e a) (term169 D P Q pat e a) True). Qed.
Lemma lem8309198 {A B D P Q : Type'} (_111930 : B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1412 A B D P Q p _111929 f arg _111928 pat e a _111930) = (term1507 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (@lem8309197 A B D P Q _111930 p _111929 f arg _111928 pat e a (@lem8309194 A B D P Q _111930 p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8309200 (t : Prop) : (t \/ True) = True.
Proof. exact (proj1 (@lem1832 t)). Qed.
Lemma lem8309201 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term1508 D P Q pat e a) = True.
Proof. exact (@lem8309200 (term169 D P Q pat e a)). Qed.
Lemma lem8309206 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1509 A B D P Q p _111929 f arg _111928 pat e a) = (term1509 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (eq_refl (term1509 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8309207 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1507 A B D P Q p _111929 f arg _111928 pat e a) = (term1510 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8309206 A B D P Q p _111929 f arg _111928 pat e a) (@lem8309201 D P Q pat e a)). Qed.
Lemma lem8309209 (t : Prop) : (t /\ True) = t.
Proof. exact (proj1 (@lem1843 t)). Qed.
Lemma lem8309210 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1510 A B D P Q p _111929 f arg _111928 pat e a) = (term1511 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (@lem8309209 (term1511 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8309211 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1507 A B D P Q p _111929 f arg _111928 pat e a) = (term1511 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (TRANS (@lem8309207 A B D P Q p _111929 f arg _111928 pat e a) (@lem8309210 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8309212 {A B D P Q : Type'} (_111930 : B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1412 A B D P Q p _111929 f arg _111928 pat e a _111930) = (term1511 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (TRANS (@lem8309198 A B D P Q _111930 p _111929 f arg _111928 pat e a) (@lem8309211 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8309217 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1502 A B D P Q p _111929 f arg _111928 pat e a) = (term1502 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (eq_refl (term1502 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8309218 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : ((pat t) = (e a)) = ((pat t) = (e a)).
Proof. exact (eq_refl ((pat t) = (e a))). Qed.
Lemma lem8309219 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term258 D P Q pat e a) = (term258 D P Q pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8309218 D P Q pat t e a)). Qed.
Lemma lem8309220 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8309221 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term169 D P Q pat e a) = (term169 D P Q pat e a).
Proof. exact (MK_COMB (@lem8309220 Q) (@lem8309219 D P Q pat e a)). Qed.
Lemma lem8309222 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8309223 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term197 D P Q pat e a) = (term197 D P Q pat e a).
Proof. exact (MK_COMB (@lem8309222) (@lem8309221 D P Q pat e a)). Qed.
Lemma lem8309224 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8309225 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term1512 D P Q pat e a) = (term1512 D P Q pat e a).
Proof. exact (MK_COMB (@lem8309224) (@lem8309223 D P Q pat e a)). Qed.
Lemma lem8309226 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1511 A B D P Q p _111929 f arg _111928 pat e a) = (term1511 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8309225 D P Q pat e a) (@lem8309217 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8309227 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) (_111930 : B) : (term1513 A B D P Q p _111929 f arg _111928 pat e a _111930) = (term1513 A B D P Q p _111929 f arg _111928 pat e a _111930).
Proof. exact (eq_refl (term1513 A B D P Q p _111929 f arg _111928 pat e a _111930)). Qed.
Lemma lem8309228 {A B D P Q : Type'} (_111930 : B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : ((term1412 A B D P Q p _111929 f arg _111928 pat e a _111930) = (term1511 A B D P Q p _111929 f arg _111928 pat e a)) = ((term1412 A B D P Q p _111929 f arg _111928 pat e a _111930) = (term1511 A B D P Q p _111929 f arg _111928 pat e a)).
Proof. exact (MK_COMB (@lem8309227 A B D P Q p _111929 f arg _111928 pat e a _111930) (@lem8309226 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8309229 {A B D P Q : Type'} (_111930 : B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1412 A B D P Q p _111929 f arg _111928 pat e a _111930) = (term1511 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (EQ_MP (@lem8309228 A B D P Q _111930 p _111929 f arg _111928 pat e a) (@lem8309212 A B D P Q _111930 p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8309230 {A B D P Q : Type'} (_111930 : B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1413 A B D P Q p _111929 f arg _111928 pat e _111930) = (term1514 A B D P Q p _111929 f arg _111928 pat e).
Proof. exact (fun_ext (fun a : P => @lem8309229 A B D P Q _111930 p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8309231 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8309232 {A B D P Q : Type'} (_111930 : B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1414 A B D P Q p _111929 f arg _111928 pat e _111930) = (term1515 A B D P Q p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8309231 P) (@lem8309230 A B D P Q _111930 p _111929 f arg _111928 pat e)). Qed.
Lemma lem8309233 {A B D P Q : Type'} (_111930 : B) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1415 A B D P Q p _111929 arg _111928 pat e _111930) = (term1516 A B D P Q p _111929 arg _111928 pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8309232 A B D P Q _111930 p _111929 f arg _111928 pat e)). Qed.
Lemma lem8309234 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8309235 {A B D P Q : Type'} (_111930 : B) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1416 A B D P Q p _111929 arg _111928 pat e _111930) = (term1517 A B D P Q p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8309234 A B) (@lem8309233 A B D P Q _111930 p _111929 arg _111928 pat e)). Qed.
Lemma lem8309236 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : ((pat t) = (e a)) = ((pat t) = (e a)).
Proof. exact (eq_refl ((pat t) = (e a))). Qed.
Lemma lem8309237 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term258 D P Q pat e a) = (term258 D P Q pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8309236 D P Q pat t e a)). Qed.
Lemma lem8309238 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8309239 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term169 D P Q pat e a) = (term169 D P Q pat e a).
Proof. exact (MK_COMB (@lem8309238 Q) (@lem8309237 D P Q pat e a)). Qed.
Lemma lem8309242 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a : P) : (term1178 A B P p g a) = (term1178 A B P p g a).
Proof. exact (eq_refl (term1178 A B P p g a)). Qed.
Lemma lem8309243 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1068 A B D P Q p g pat e a) = (term1068 A B D P Q p g pat e a).
Proof. exact (MK_COMB (@lem8309242 A B P p g a) (@lem8309239 D P Q pat e a)). Qed.
Lemma lem8309244 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : ((pat t) = (e a)) = ((pat t) = (e a)).
Proof. exact (eq_refl ((pat t) = (e a))). Qed.
Lemma lem8309245 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term258 D P Q pat e a) = (term258 D P Q pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8309244 D P Q pat t e a)). Qed.
Lemma lem8309246 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8309247 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term169 D P Q pat e a) = (term169 D P Q pat e a).
Proof. exact (MK_COMB (@lem8309246 Q) (@lem8309245 D P Q pat e a)). Qed.
Lemma lem8309250 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term1178 A B P p f a) = (term1178 A B P p f a).
Proof. exact (eq_refl (term1178 A B P p f a)). Qed.
Lemma lem8309251 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1068 A B D P Q p f pat e a) = (term1068 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8309250 A B P p f a) (@lem8309247 D P Q pat e a)). Qed.
Lemma lem8309252 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8309253 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1121 A B D P Q p f pat e a) = (term1121 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8309252) (@lem8309251 A B D P Q p f pat e a)). Qed.
Lemma lem8309254 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : ((term1068 A B D P Q p f pat e a) = (term1068 A B D P Q p g pat e a)) = ((term1068 A B D P Q p f pat e a) = (term1068 A B D P Q p g pat e a)).
Proof. exact (MK_COMB (@lem8309253 A B D P Q p f pat e a) (@lem8309243 A B D P Q p g pat e a)). Qed.
Lemma lem8309259 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) (z : A) : (term1518 A B P lt2 s a f g z) = (term1518 A B P lt2 s a f g z).
Proof. exact (eq_refl (term1518 A B P lt2 s a f g z)). Qed.
Lemma lem8309260 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1519 A B P lt2 s a f g) = (term1519 A B P lt2 s a f g).
Proof. exact (fun_ext (fun z : A => @lem8309259 A B P lt2 s a f g z)). Qed.
Lemma lem8309261 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8309262 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1032 A B P lt2 s a f g) = (term1032 A B P lt2 s a f g).
Proof. exact (MK_COMB (@lem8309261 A) (@lem8309260 A B P lt2 s a f g)). Qed.
Lemma lem8309263 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8309264 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1037 A B P lt2 s a f g) = (term1037 A B P lt2 s a f g).
Proof. exact (MK_COMB (@lem8309263) (@lem8309262 A B P lt2 s a f g)). Qed.
Lemma lem8309265 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1147 A B D P Q lt2 s f p g pat e a) = (term1147 A B D P Q lt2 s f p g pat e a).
Proof. exact (MK_COMB (@lem8309264 A B P lt2 s a f g) (@lem8309254 A B D P Q f p g pat e a)). Qed.
Lemma lem8309266 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) : (term1149 A B D P Q lt2 s f p g pat e) = (term1149 A B D P Q lt2 s f p g pat e).
Proof. exact (fun_ext (fun a : P => @lem8309265 A B D P Q lt2 s f p g pat e a)). Qed.
Lemma lem8309267 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8309268 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) : (term1151 A B D P Q lt2 s f p g pat e) = (term1151 A B D P Q lt2 s f p g pat e).
Proof. exact (MK_COMB (@lem8309267 P) (@lem8309266 A B D P Q lt2 s f p g pat e)). Qed.
Lemma lem8309269 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1153 A B D P Q lt2 s f p pat e) = (term1153 A B D P Q lt2 s f p pat e).
Proof. exact (fun_ext (fun g : A -> B => @lem8309268 A B D P Q lt2 s f p g pat e)). Qed.
Lemma lem8309270 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8309271 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1155 A B D P Q lt2 s f p pat e) = (term1155 A B D P Q lt2 s f p pat e).
Proof. exact (MK_COMB (@lem8309270 A B) (@lem8309269 A B D P Q lt2 s f p pat e)). Qed.
Lemma lem8309272 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1157 A B D P Q lt2 s p pat e) = (term1157 A B D P Q lt2 s p pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8309271 A B D P Q lt2 s f p pat e)). Qed.
Lemma lem8309273 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8309274 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1159 A B D P Q lt2 s p pat e) = (term1159 A B D P Q lt2 s p pat e).
Proof. exact (MK_COMB (@lem8309273 A B) (@lem8309272 A B D P Q lt2 s p pat e)). Qed.
Lemma lem8309275 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8309276 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1161 A B D P Q lt2 s p pat e) = (term1161 A B D P Q lt2 s p pat e).
Proof. exact (MK_COMB (@lem8309275) (@lem8309274 A B D P Q lt2 s p pat e)). Qed.
Lemma lem8309277 {A B D P Q : Type'} (_111930 : B) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1417 A B D P Q lt2 s p _111929 arg _111928 pat e _111930) = (term1520 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8309276 A B D P Q lt2 s p pat e) (@lem8309235 A B D P Q _111930 p _111929 arg _111928 pat e)). Qed.
Lemma lem8309278 {A P : Type'} (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term1053 A P lt2 y s a) = (term1053 A P lt2 y s a).
Proof. exact (eq_refl (term1053 A P lt2 y s a)). Qed.
Lemma lem8309279 {A D P Q : Type'} (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1258 A D P Q lt2 y arg _111928 pat e a) = (term1258 A D P Q lt2 y arg _111928 pat e a).
Proof. exact (eq_refl (term1258 A D P Q lt2 y arg _111928 pat e a)). Qed.
Lemma lem8309280 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : ((pat t) = (e a)) = ((pat t) = (e a)).
Proof. exact (eq_refl ((pat t) = (e a))). Qed.
Lemma lem8309281 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term258 D P Q pat e a) = (term258 D P Q pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8309280 D P Q pat t e a)). Qed.
Lemma lem8309282 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8309283 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term169 D P Q pat e a) = (term169 D P Q pat e a).
Proof. exact (MK_COMB (@lem8309282 Q) (@lem8309281 D P Q pat e a)). Qed.
Lemma lem8309286 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term1178 A B P p f a) = (term1178 A B P p f a).
Proof. exact (eq_refl (term1178 A B P p f a)). Qed.
Lemma lem8309287 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1068 A B D P Q p f pat e a) = (term1068 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8309286 A B P p f a) (@lem8309283 D P Q pat e a)). Qed.
Lemma lem8309288 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8309289 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1073 A B D P Q p f pat e a) = (term1073 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8309288) (@lem8309287 A B D P Q p f pat e a)). Qed.
Lemma lem8309290 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1259 A B D P Q p f lt2 y arg _111928 pat e a) = (term1259 A B D P Q p f lt2 y arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8309289 A B D P Q p f pat e a) (@lem8309279 A D P Q lt2 y arg _111928 pat e a)). Qed.
Lemma lem8309291 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8309292 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1261 A B D P Q p f lt2 y arg _111928 pat e a) = (term1261 A B D P Q p f lt2 y arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8309291) (@lem8309290 A B D P Q p f lt2 y arg _111928 pat e a)). Qed.
Lemma lem8309293 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term1262 A B D P Q p f arg _111928 pat e lt2 y s a) = (term1262 A B D P Q p f arg _111928 pat e lt2 y s a).
Proof. exact (MK_COMB (@lem8309292 A B D P Q p f lt2 y arg _111928 pat e a) (@lem8309278 A P lt2 y s a)). Qed.
Lemma lem8309294 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (a : P) : (term1263 A B D P Q p f arg _111928 pat e lt2 s a) = (term1263 A B D P Q p f arg _111928 pat e lt2 s a).
Proof. exact (fun_ext (fun y : A => @lem8309293 A B D P Q p f arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8309295 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8309296 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (a : P) : (term1264 A B D P Q p f arg _111928 pat e lt2 s a) = (term1264 A B D P Q p f arg _111928 pat e lt2 s a).
Proof. exact (MK_COMB (@lem8309295 A) (@lem8309294 A B D P Q p f arg _111928 pat e lt2 s a)). Qed.
Lemma lem8309297 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1265 A B D P Q p f arg _111928 pat e lt2 s) = (term1265 A B D P Q p f arg _111928 pat e lt2 s).
Proof. exact (fun_ext (fun a : P => @lem8309296 A B D P Q p f arg _111928 pat e lt2 s a)). Qed.
Lemma lem8309298 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8309299 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1266 A B D P Q p f arg _111928 pat e lt2 s) = (term1266 A B D P Q p f arg _111928 pat e lt2 s).
Proof. exact (MK_COMB (@lem8309298 P) (@lem8309297 A B D P Q p f arg _111928 pat e lt2 s)). Qed.
Lemma lem8309300 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1267 A B D P Q p arg _111928 pat e lt2 s) = (term1267 A B D P Q p arg _111928 pat e lt2 s).
Proof. exact (fun_ext (fun f : A -> B => @lem8309299 A B D P Q p f arg _111928 pat e lt2 s)). Qed.
Lemma lem8309301 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8309302 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1268 A B D P Q p arg _111928 pat e lt2 s) = (term1268 A B D P Q p arg _111928 pat e lt2 s).
Proof. exact (MK_COMB (@lem8309301 A B) (@lem8309300 A B D P Q p arg _111928 pat e lt2 s)). Qed.
Lemma lem8309303 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8309304 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1269 A B D P Q p arg _111928 pat e lt2 s) = (term1269 A B D P Q p arg _111928 pat e lt2 s).
Proof. exact (MK_COMB (@lem8309303) (@lem8309302 A B D P Q p arg _111928 pat e lt2 s)). Qed.
Lemma lem8309305 {A B D P Q : Type'} (_111930 : B) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1418 A B D P Q lt2 s p _111929 arg _111928 pat e _111930) = (term1521 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8309304 A B D P Q p arg _111928 pat e lt2 s) (@lem8309277 A B D P Q _111930 lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8309310 {A B P : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : ((p f a) = (p g a)) = ((p f a) = (p g a)).
Proof. exact (eq_refl ((p f a) = (p g a))). Qed.
Lemma lem8309315 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) (z : A) : (term1518 A B P lt2 s a f g z) = (term1518 A B P lt2 s a f g z).
Proof. exact (eq_refl (term1518 A B P lt2 s a f g z)). Qed.
Lemma lem8309316 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1519 A B P lt2 s a f g) = (term1519 A B P lt2 s a f g).
Proof. exact (fun_ext (fun z : A => @lem8309315 A B P lt2 s a f g z)). Qed.
Lemma lem8309317 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8309318 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1032 A B P lt2 s a f g) = (term1032 A B P lt2 s a f g).
Proof. exact (MK_COMB (@lem8309317 A) (@lem8309316 A B P lt2 s a f g)). Qed.
Lemma lem8309319 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8309320 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1037 A B P lt2 s a f g) = (term1037 A B P lt2 s a f g).
Proof. exact (MK_COMB (@lem8309319) (@lem8309318 A B P lt2 s a f g)). Qed.
Lemma lem8309321 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term1039 A B P lt2 s f p g a) = (term1039 A B P lt2 s f p g a).
Proof. exact (MK_COMB (@lem8309320 A B P lt2 s a f g) (@lem8309310 A B P f p g a)). Qed.
Lemma lem8309322 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1041 A B P lt2 s f p g) = (term1041 A B P lt2 s f p g).
Proof. exact (fun_ext (fun a : P => @lem8309321 A B P lt2 s f p g a)). Qed.
Lemma lem8309323 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8309324 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1043 A B P lt2 s f p g) = (term1043 A B P lt2 s f p g).
Proof. exact (MK_COMB (@lem8309323 P) (@lem8309322 A B P lt2 s f p g)). Qed.
Lemma lem8309325 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) : (term1045 A B P lt2 s f p) = (term1045 A B P lt2 s f p).
Proof. exact (fun_ext (fun g : A -> B => @lem8309324 A B P lt2 s f p g)). Qed.
Lemma lem8309326 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8309327 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) : (term1047 A B P lt2 s f p) = (term1047 A B P lt2 s f p).
Proof. exact (MK_COMB (@lem8309326 A B) (@lem8309325 A B P lt2 s f p)). Qed.
Lemma lem8309328 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term1049 A B P lt2 s p) = (term1049 A B P lt2 s p).
Proof. exact (fun_ext (fun f : A -> B => @lem8309327 A B P lt2 s f p)). Qed.
Lemma lem8309329 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8309330 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term1050 A B P lt2 s p) = (term1050 A B P lt2 s p).
Proof. exact (MK_COMB (@lem8309329 A B) (@lem8309328 A B P lt2 s p)). Qed.
Lemma lem8309331 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8309332 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term1286 A B P lt2 s p) = (term1286 A B P lt2 s p).
Proof. exact (MK_COMB (@lem8309331) (@lem8309330 A B P lt2 s p)). Qed.
Lemma lem8309333 {A B D P Q : Type'} (_111930 : B) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1455 A B D P Q lt2 s p _111929 arg _111928 pat e _111930) = (term1522 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8309332 A B P lt2 s p) (@lem8309305 A B D P Q _111930 lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8309338 {A P Q : Type'} (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term269 A P Q arg t lt2 y s a) = (term269 A P Q arg t lt2 y s a).
Proof. exact (eq_refl (term269 A P Q arg t lt2 y s a)). Qed.
Lemma lem8309339 {A P Q : Type'} (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term270 A P Q arg t lt2 s a) = (term270 A P Q arg t lt2 s a).
Proof. exact (fun_ext (fun y : A => @lem8309338 A P Q arg t lt2 y s a)). Qed.
Lemma lem8309340 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8309341 {A P Q : Type'} (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term271 A P Q arg t lt2 s a) = (term271 A P Q arg t lt2 s a).
Proof. exact (MK_COMB (@lem8309340 A) (@lem8309339 A P Q arg t lt2 s a)). Qed.
Lemma lem8309348 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term272 A B D P Q p f pat t e a) = (term272 A B D P Q p f pat t e a).
Proof. exact (eq_refl (term272 A B D P Q p f pat t e a)). Qed.
Lemma lem8309349 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term273 A B D P Q p f pat e arg t lt2 s a) = (term273 A B D P Q p f pat e arg t lt2 s a).
Proof. exact (MK_COMB (@lem8309348 A B D P Q p f pat t e a) (@lem8309341 A P Q arg t lt2 s a)). Qed.
Lemma lem8309350 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term274 A B D P Q p f pat e arg lt2 s a) = (term274 A B D P Q p f pat e arg lt2 s a).
Proof. exact (fun_ext (fun t : Q => @lem8309349 A B D P Q p f pat e arg t lt2 s a)). Qed.
Lemma lem8309351 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8309352 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term275 A B D P Q p f pat e arg lt2 s a) = (term275 A B D P Q p f pat e arg lt2 s a).
Proof. exact (MK_COMB (@lem8309351 Q) (@lem8309350 A B D P Q p f pat e arg lt2 s a)). Qed.
Lemma lem8309353 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term276 A B D P Q p f pat e arg lt2 s) = (term276 A B D P Q p f pat e arg lt2 s).
Proof. exact (fun_ext (fun a : P => @lem8309352 A B D P Q p f pat e arg lt2 s a)). Qed.
Lemma lem8309354 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8309355 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term277 A B D P Q p f pat e arg lt2 s) = (term277 A B D P Q p f pat e arg lt2 s).
Proof. exact (MK_COMB (@lem8309354 P) (@lem8309353 A B D P Q p f pat e arg lt2 s)). Qed.
Lemma lem8309356 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term278 A B D P Q p pat e arg lt2 s) = (term278 A B D P Q p pat e arg lt2 s).
Proof. exact (fun_ext (fun f : A -> B => @lem8309355 A B D P Q p f pat e arg lt2 s)). Qed.
Lemma lem8309357 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8309358 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term35 A B D P Q p pat e arg lt2 s) = (term35 A B D P Q p pat e arg lt2 s).
Proof. exact (MK_COMB (@lem8309357 A B) (@lem8309356 A B D P Q p pat e arg lt2 s)). Qed.
Lemma lem8309359 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8309360 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term228 A B D P Q p pat e arg lt2 s) = (term228 A B D P Q p pat e arg lt2 s).
Proof. exact (MK_COMB (@lem8309359) (@lem8309358 A B D P Q p pat e arg lt2 s)). Qed.
Lemma lem8309361 {A B D P Q : Type'} (_111930 : B) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1456 A B D P Q lt2 s p _111929 arg _111928 pat e _111930) = (term1523 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8309360 A B D P Q p pat e arg lt2 s) (@lem8309333 A B D P Q _111930 lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8309374 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) (u : Q) : (term280 A B D P Q p f pat e t arg a u) = (term280 A B D P Q p f pat e t arg a u).
Proof. exact (eq_refl (term280 A B D P Q p f pat e t arg a u)). Qed.
Lemma lem8309375 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) : (term281 A B D P Q p f pat e t arg a) = (term281 A B D P Q p f pat e t arg a).
Proof. exact (fun_ext (fun u : Q => @lem8309374 A B D P Q p f pat e t arg a u)). Qed.
Lemma lem8309376 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8309377 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) : (term282 A B D P Q p f pat e t arg a) = (term282 A B D P Q p f pat e t arg a).
Proof. exact (MK_COMB (@lem8309376 Q) (@lem8309375 A B D P Q p f pat e t arg a)). Qed.
Lemma lem8309378 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (a : P) : (term283 A B D P Q p f pat e arg a) = (term283 A B D P Q p f pat e arg a).
Proof. exact (fun_ext (fun t : Q => @lem8309377 A B D P Q p f pat e t arg a)). Qed.
Lemma lem8309379 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8309380 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (a : P) : (term284 A B D P Q p f pat e arg a) = (term284 A B D P Q p f pat e arg a).
Proof. exact (MK_COMB (@lem8309379 Q) (@lem8309378 A B D P Q p f pat e arg a)). Qed.
Lemma lem8309381 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term285 A B D P Q p f pat e arg) = (term285 A B D P Q p f pat e arg).
Proof. exact (fun_ext (fun a : P => @lem8309380 A B D P Q p f pat e arg a)). Qed.
Lemma lem8309382 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8309383 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term286 A B D P Q p f pat e arg) = (term286 A B D P Q p f pat e arg).
Proof. exact (MK_COMB (@lem8309382 P) (@lem8309381 A B D P Q p f pat e arg)). Qed.
Lemma lem8309384 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term287 A B D P Q p pat e arg) = (term287 A B D P Q p pat e arg).
Proof. exact (fun_ext (fun f : A -> B => @lem8309383 A B D P Q p f pat e arg)). Qed.
Lemma lem8309385 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8309386 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term36 A B D P Q p pat e arg) = (term36 A B D P Q p pat e arg).
Proof. exact (MK_COMB (@lem8309385 A B) (@lem8309384 A B D P Q p pat e arg)). Qed.
Lemma lem8309387 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8309388 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term231 A B D P Q p pat e arg) = (term231 A B D P Q p pat e arg).
Proof. exact (MK_COMB (@lem8309387) (@lem8309386 A B D P Q p pat e arg)). Qed.
Lemma lem8309389 {A B D P Q : Type'} (_111930 : B) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1457 A B D P Q lt2 s p _111929 arg _111928 pat e _111930) = (term1524 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8309388 A B D P Q p pat e arg) (@lem8309361 A B D P Q _111930 lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8309394 {D P Q : Type'} (x : Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1243 D P Q x _111928 pat e a) = (term1243 D P Q x _111928 pat e a).
Proof. exact (eq_refl (term1243 D P Q x _111928 pat e a)). Qed.
Lemma lem8309395 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1244 D P Q _111928 pat e a) = (term1244 D P Q _111928 pat e a).
Proof. exact (fun_ext (fun x : Q => @lem8309394 D P Q x _111928 pat e a)). Qed.
Lemma lem8309396 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8309397 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1245 D P Q _111928 pat e a) = (term1245 D P Q _111928 pat e a).
Proof. exact (MK_COMB (@lem8309396 Q) (@lem8309395 D P Q _111928 pat e a)). Qed.
Lemma lem8309398 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1247 D P Q _111928 pat e) = (term1247 D P Q _111928 pat e).
Proof. exact (fun_ext (fun a : P => @lem8309397 D P Q _111928 pat e a)). Qed.
Lemma lem8309399 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8309400 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1248 D P Q _111928 pat e) = (term1248 D P Q _111928 pat e).
Proof. exact (MK_COMB (@lem8309399 P) (@lem8309398 D P Q _111928 pat e)). Qed.
Lemma lem8309401 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) : (term1250 D P Q _111928 pat) = (term1250 D P Q _111928 pat).
Proof. exact (fun_ext (fun e : P -> D => @lem8309400 D P Q _111928 pat e)). Qed.
Lemma lem8309402 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8309403 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) : (term1251 D P Q _111928 pat) = (term1251 D P Q _111928 pat).
Proof. exact (MK_COMB (@lem8309402 D P) (@lem8309401 D P Q _111928 pat)). Qed.
Lemma lem8309404 {D P Q : Type'} (_111928 : type886 D P Q) : (term1253 D P Q _111928) = (term1253 D P Q _111928).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8309403 D P Q _111928 pat)). Qed.
Lemma lem8309405 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8309406 {D P Q : Type'} (_111928 : type886 D P Q) : (term1254 D P Q _111928) = (term1254 D P Q _111928).
Proof. exact (MK_COMB (@lem8309405 D Q) (@lem8309404 D P Q _111928)). Qed.
Lemma lem8309407 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8309408 {D P Q : Type'} (_111928 : type886 D P Q) : (term1256 D P Q _111928) = (term1256 D P Q _111928).
Proof. exact (MK_COMB (@lem8309407) (@lem8309406 D P Q _111928)). Qed.
Lemma lem8309409 {A B D P Q : Type'} (_111930 : B) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1458 A B D P Q lt2 s p _111929 arg _111928 pat e _111930) = (term1525 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8309408 D P Q _111928) (@lem8309389 A B D P Q _111930 lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8309410 {A B D P Q : Type'} (_111930 : B) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1459 A B D P Q lt2 s p _111929 arg pat e _111930) = (term1526 A B D P Q lt2 s p _111929 arg pat e).
Proof. exact (fun_ext (fun _111928 : type886 D P Q => @lem8309409 A B D P Q _111930 lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8309411 {D P Q : Type'} : (@all ((Q -> D) -> (P -> D) -> P -> Q)) = (@all ((Q -> D) -> (P -> D) -> P -> Q)).
Proof. exact (eq_refl (@all ((Q -> D) -> (P -> D) -> P -> Q))). Qed.
Lemma lem8309412 {A B D P Q : Type'} (_111930 : B) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1460 A B D P Q lt2 s p _111929 arg pat e _111930) = (term1527 A B D P Q lt2 s p _111929 arg pat e).
Proof. exact (MK_COMB (@lem8309411 D P Q) (@lem8309410 A B D P Q _111930 lt2 s p _111929 arg pat e)). Qed.
Lemma lem8309417 {A B D P Q : Type'} (t : Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1344 A B D P Q t _111929 pat e f arg a) = (term1344 A B D P Q t _111929 pat e f arg a).
Proof. exact (eq_refl (term1344 A B D P Q t _111929 pat e f arg a)). Qed.
Lemma lem8309418 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1346 A B D P Q _111929 pat e f arg a) = (term1346 A B D P Q _111929 pat e f arg a).
Proof. exact (fun_ext (fun t : Q => @lem8309417 A B D P Q t _111929 pat e f arg a)). Qed.
Lemma lem8309419 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8309420 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1347 A B D P Q _111929 pat e f arg a) = (term1347 A B D P Q _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8309419 Q) (@lem8309418 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8309425 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (t : Q) (x : B) : (term259 A B D P Q pat e f arg a t x) = (term259 A B D P Q pat e f arg a t x).
Proof. exact (eq_refl (term259 A B D P Q pat e f arg a t x)). Qed.
Lemma lem8309426 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (x : B) : (term260 A B D P Q pat e f arg a x) = (term260 A B D P Q pat e f arg a x).
Proof. exact (fun_ext (fun t : Q => @lem8309425 A B D P Q pat e f arg a t x)). Qed.
Lemma lem8309427 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8309428 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (x : B) : (term261 A B D P Q pat e f arg a x) = (term261 A B D P Q pat e f arg a x).
Proof. exact (MK_COMB (@lem8309427 Q) (@lem8309426 A B D P Q pat e f arg a x)). Qed.
Lemma lem8309429 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8309430 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (x : B) : (term1305 A B D P Q pat e f arg a x) = (term1305 A B D P Q pat e f arg a x).
Proof. exact (MK_COMB (@lem8309429) (@lem8309428 A B D P Q pat e f arg a x)). Qed.
Lemma lem8309431 {A B D P Q : Type'} (x : B) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1348 A B D P Q x _111929 pat e f arg a) = (term1348 A B D P Q x _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8309430 A B D P Q pat e f arg a x) (@lem8309420 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8309432 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1349 A B D P Q _111929 pat e f arg a) = (term1349 A B D P Q _111929 pat e f arg a).
Proof. exact (fun_ext (fun x : B => @lem8309431 A B D P Q x _111929 pat e f arg a)). Qed.
Lemma lem8309433 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8309434 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1350 A B D P Q _111929 pat e f arg a) = (term1350 A B D P Q _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8309433 B) (@lem8309432 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8309435 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1352 A B D P Q _111929 pat e f arg) = (term1352 A B D P Q _111929 pat e f arg).
Proof. exact (fun_ext (fun a : P => @lem8309434 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8309436 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8309437 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1353 A B D P Q _111929 pat e f arg) = (term1353 A B D P Q _111929 pat e f arg).
Proof. exact (MK_COMB (@lem8309436 P) (@lem8309435 A B D P Q _111929 pat e f arg)). Qed.
Lemma lem8309438 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1355 A B D P Q _111929 pat e f) = (term1355 A B D P Q _111929 pat e f).
Proof. exact (fun_ext (fun arg : type1475 A P Q => @lem8309437 A B D P Q _111929 pat e f arg)). Qed.
Lemma lem8309439 {A P Q : Type'} : (@all (P -> Q -> A)) = (@all (P -> Q -> A)).
Proof. exact (eq_refl (@all (P -> Q -> A))). Qed.
Lemma lem8309440 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1356 A B D P Q _111929 pat e f) = (term1356 A B D P Q _111929 pat e f).
Proof. exact (MK_COMB (@lem8309439 A P Q) (@lem8309438 A B D P Q _111929 pat e f)). Qed.
Lemma lem8309441 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1358 A B D P Q _111929 pat e) = (term1358 A B D P Q _111929 pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8309440 A B D P Q _111929 pat e f)). Qed.
Lemma lem8309442 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8309443 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1359 A B D P Q _111929 pat e) = (term1359 A B D P Q _111929 pat e).
Proof. exact (MK_COMB (@lem8309442 A B) (@lem8309441 A B D P Q _111929 pat e)). Qed.
Lemma lem8309444 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1361 A B D P Q _111929 pat) = (term1361 A B D P Q _111929 pat).
Proof. exact (fun_ext (fun e : P -> D => @lem8309443 A B D P Q _111929 pat e)). Qed.
Lemma lem8309445 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8309446 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1362 A B D P Q _111929 pat) = (term1362 A B D P Q _111929 pat).
Proof. exact (MK_COMB (@lem8309445 D P) (@lem8309444 A B D P Q _111929 pat)). Qed.
Lemma lem8309447 {A B D P Q : Type'} (_111929 : type904 A B D P Q) : (term1364 A B D P Q _111929) = (term1364 A B D P Q _111929).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8309446 A B D P Q _111929 pat)). Qed.
Lemma lem8309448 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8309449 {A B D P Q : Type'} (_111929 : type904 A B D P Q) : (term1365 A B D P Q _111929) = (term1365 A B D P Q _111929).
Proof. exact (MK_COMB (@lem8309448 D Q) (@lem8309447 A B D P Q _111929)). Qed.
Lemma lem8309450 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8309451 {A B D P Q : Type'} (_111929 : type904 A B D P Q) : (term1367 A B D P Q _111929) = (term1367 A B D P Q _111929).
Proof. exact (MK_COMB (@lem8309450) (@lem8309449 A B D P Q _111929)). Qed.
Lemma lem8309452 {A B D P Q : Type'} (_111930 : B) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1461 A B D P Q lt2 s p _111929 arg pat e _111930) = (term1528 A B D P Q lt2 s p _111929 arg pat e).
Proof. exact (MK_COMB (@lem8309451 A B D P Q _111929) (@lem8309412 A B D P Q _111930 lt2 s p _111929 arg pat e)). Qed.
Lemma lem8309453 {A B D P Q : Type'} (_111930 : B) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1462 A B D P Q lt2 s p arg pat e _111930) = (term1529 A B D P Q lt2 s p arg pat e).
Proof. exact (fun_ext (fun _111929 : type904 A B D P Q => @lem8309452 A B D P Q _111930 lt2 s p _111929 arg pat e)). Qed.
Lemma lem8309454 {A B D P Q : Type'} : (@all ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> B)) = (@all ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> B)).
Proof. exact (eq_refl (@all ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> B))). Qed.
Lemma lem8309455 {A B D P Q : Type'} (_111930 : B) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1463 A B D P Q lt2 s p arg pat e _111930) = (term1530 A B D P Q lt2 s p arg pat e).
Proof. exact (MK_COMB (@lem8309454 A B D P Q) (@lem8309453 A B D P Q _111930 lt2 s p arg pat e)). Qed.
Lemma lem8309456 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1466 A B D P Q lt2 s p arg pat e) = (term1531 A B D P Q lt2 s p arg pat e).
Proof. exact (fun_ext (fun _111930 : B => @lem8309455 A B D P Q _111930 lt2 s p arg pat e)). Qed.
Lemma lem8309457 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8309458 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1467 A B D P Q lt2 s p arg pat e) = (term1532 A B D P Q lt2 s p arg pat e).
Proof. exact (MK_COMB (@lem8309457 B) (@lem8309456 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8309459 {A B D P Q : Type'} (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1469 A B D P Q s p arg pat e) = (term1533 A B D P Q s p arg pat e).
Proof. exact (fun_ext (fun lt2 : type1402 A => @lem8309458 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8309460 {A : Type'} : (@all (A -> A -> Prop)) = (@all (A -> A -> Prop)).
Proof. exact (eq_refl (@all (A -> A -> Prop))). Qed.
Lemma lem8309461 {A B D P Q : Type'} (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1471 A B D P Q s p arg pat e) = (term1534 A B D P Q s p arg pat e).
Proof. exact (MK_COMB (@lem8309460 A) (@lem8309459 A B D P Q s p arg pat e)). Qed.
Lemma lem8309462 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1473 A B D P Q p arg pat e) = (term1535 A B D P Q p arg pat e).
Proof. exact (fun_ext (fun s : P -> A => @lem8309461 A B D P Q s p arg pat e)). Qed.
Lemma lem8309463 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8309464 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1475 A B D P Q p arg pat e) = (term1536 A B D P Q p arg pat e).
Proof. exact (MK_COMB (@lem8309463 A P) (@lem8309462 A B D P Q p arg pat e)). Qed.
Lemma lem8309465 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1477 A B D P Q arg pat e) = (term1537 A B D P Q arg pat e).
Proof. exact (fun_ext (fun p : type560 A B P => @lem8309464 A B D P Q p arg pat e)). Qed.
Lemma lem8309466 {A B P : Type'} : (@all ((A -> B) -> P -> Prop)) = (@all ((A -> B) -> P -> Prop)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> Prop))). Qed.
Lemma lem8309467 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1479 A B D P Q arg pat e) = (term1538 A B D P Q arg pat e).
Proof. exact (MK_COMB (@lem8309466 A B P) (@lem8309465 A B D P Q arg pat e)). Qed.
Lemma lem8309468 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) : (term1481 A B D P Q pat e) = (term1539 A B D P Q pat e).
Proof. exact (fun_ext (fun arg : type1475 A P Q => @lem8309467 A B D P Q arg pat e)). Qed.
Lemma lem8309469 {A P Q : Type'} : (@all (P -> Q -> A)) = (@all (P -> Q -> A)).
Proof. exact (eq_refl (@all (P -> Q -> A))). Qed.
Lemma lem8309470 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) : (term1483 A B D P Q pat e) = (term1540 A B D P Q pat e).
Proof. exact (MK_COMB (@lem8309469 A P Q) (@lem8309468 A B D P Q pat e)). Qed.
Lemma lem8309471 {A B D P Q : Type'} (e : P -> D) : (term1485 A B D P Q e) = (term1541 A B D P Q e).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8309470 A B D P Q pat e)). Qed.
Lemma lem8309472 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8309473 {A B D P Q : Type'} (e : P -> D) : (term1487 A B D P Q e) = (term1542 A B D P Q e).
Proof. exact (MK_COMB (@lem8309472 D Q) (@lem8309471 A B D P Q e)). Qed.
Lemma lem8309474 {A B D P Q : Type'} : (term1489 A B D P Q) = (term1543 A B D P Q).
Proof. exact (fun_ext (fun e : P -> D => @lem8309473 A B D P Q e)). Qed.
Lemma lem8309475 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8309476 {A B D P Q : Type'} : (term1491 A B D P Q) = (term1544 A B D P Q).
Proof. exact (MK_COMB (@lem8309475 D P) (@lem8309474 A B D P Q)). Qed.
Lemma lem8309477 {A B D P Q : Type'} : (term1490 A B D P Q) = (term1544 A B D P Q).
Proof. exact (TRANS (@lem8309102 A B D P Q) (@lem8309476 A B D P Q)). Qed.
Lemma lem8309515 {A : Type'} (t : Prop) : (term1453 A t) = t.
Proof. exact (EQ_MP (@lem21736 A t) (@lem21735 A t)). Qed.
Lemma lem8309516 {B : Type'} (t : Prop) : (term1453 B t) = t.
Proof. exact (@lem8309515 B t). Qed.
Lemma lem8309517 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1532 A B D P Q lt2 s p arg pat e) = (term1530 A B D P Q lt2 s p arg pat e).
Proof. exact (@lem8309516 B (term1530 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8309808 {A B D P Q : Type'} (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1533 A B D P Q s p arg pat e) = (term1545 A B D P Q s p arg pat e).
Proof. exact (fun_ext (fun lt2 : type1402 A => @lem8309517 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8309809 {A : Type'} : (@all (A -> A -> Prop)) = (@all (A -> A -> Prop)).
Proof. exact (eq_refl (@all (A -> A -> Prop))). Qed.
Lemma lem8309810 {A B D P Q : Type'} (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1534 A B D P Q s p arg pat e) = (term1546 A B D P Q s p arg pat e).
Proof. exact (MK_COMB (@lem8309809 A) (@lem8309808 A B D P Q s p arg pat e)). Qed.
Lemma lem8309817 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1535 A B D P Q p arg pat e) = (term1547 A B D P Q p arg pat e).
Proof. exact (fun_ext (fun s : P -> A => @lem8309810 A B D P Q s p arg pat e)). Qed.
Lemma lem8309818 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8309819 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1536 A B D P Q p arg pat e) = (term1548 A B D P Q p arg pat e).
Proof. exact (MK_COMB (@lem8309818 A P) (@lem8309817 A B D P Q p arg pat e)). Qed.
Lemma lem8309826 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1537 A B D P Q arg pat e) = (term1549 A B D P Q arg pat e).
Proof. exact (fun_ext (fun p : type560 A B P => @lem8309819 A B D P Q p arg pat e)). Qed.
Lemma lem8309827 {A B P : Type'} : (@all ((A -> B) -> P -> Prop)) = (@all ((A -> B) -> P -> Prop)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> Prop))). Qed.
Lemma lem8309828 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term1538 A B D P Q arg pat e) = (term1550 A B D P Q arg pat e).
Proof. exact (MK_COMB (@lem8309827 A B P) (@lem8309826 A B D P Q arg pat e)). Qed.
Lemma lem8309835 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) : (term1539 A B D P Q pat e) = (term1551 A B D P Q pat e).
Proof. exact (fun_ext (fun arg : type1475 A P Q => @lem8309828 A B D P Q arg pat e)). Qed.
Lemma lem8309836 {A P Q : Type'} : (@all (P -> Q -> A)) = (@all (P -> Q -> A)).
Proof. exact (eq_refl (@all (P -> Q -> A))). Qed.
Lemma lem8309837 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) : (term1540 A B D P Q pat e) = (term1552 A B D P Q pat e).
Proof. exact (MK_COMB (@lem8309836 A P Q) (@lem8309835 A B D P Q pat e)). Qed.
Lemma lem8309844 {A B D P Q : Type'} (e : P -> D) : (term1541 A B D P Q e) = (term1553 A B D P Q e).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8309837 A B D P Q pat e)). Qed.
Lemma lem8309845 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8309846 {A B D P Q : Type'} (e : P -> D) : (term1542 A B D P Q e) = (term1554 A B D P Q e).
Proof. exact (MK_COMB (@lem8309845 D Q) (@lem8309844 A B D P Q e)). Qed.
Lemma lem8309853 {A B D P Q : Type'} : (term1543 A B D P Q) = (term1555 A B D P Q).
Proof. exact (fun_ext (fun e : P -> D => @lem8309846 A B D P Q e)). Qed.
Lemma lem8309854 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8309855 {A B D P Q : Type'} : (term1544 A B D P Q) = (term1556 A B D P Q).
Proof. exact (MK_COMB (@lem8309854 D P) (@lem8309853 A B D P Q)). Qed.
Lemma lem8309862 {A B D P Q : Type'} : (term1490 A B D P Q) = (term1556 A B D P Q).
Proof. exact (TRANS (@lem8309477 A B D P Q) (@lem8309855 A B D P Q)). Qed.
Lemma lem8309863 {A B D P Q : Type'} : (term1556 A B D P Q) = (term1490 A B D P Q).
Proof. exact (SYM (@lem8309862 A B D P Q)). Qed.
Lemma lem8309864 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (h1 : term1365 A B D P Q _111929) : term1365 A B D P Q _111929.
Proof. exact (h1). Qed.
Lemma lem8309865 {D P Q : Type'} (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term1254 D P Q _111928.
Proof. exact (h1). Qed.
Lemma lem8309866 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term36 A B D P Q p pat e arg.
Proof. exact (h1). Qed.
Lemma lem8309867 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term35 A B D P Q p pat e arg lt2 s) : term35 A B D P Q p pat e arg lt2 s.
Proof. exact (h1). Qed.
Lemma lem8309868 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term1050 A B P lt2 s p) : term1050 A B P lt2 s p.
Proof. exact (h1). Qed.
Lemma lem8309870 (p : Prop) : p = (term216 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem8309871 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1521 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term1557 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (@lem8309870 (term1521 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8309872 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1557 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term1521 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (SYM (@lem8309871 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8309873 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (h1 : term1558 A B D P Q lt2 s p _111929 arg _111928 pat e) : term1558 A B D P Q lt2 s p _111929 arg _111928 pat e.
Proof. exact (h1). Qed.
Lemma lem8309880 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (t : Q) (x : B) : (term410 A B D P Q pat e f arg a t x) = (term411 A B D P Q pat e f arg a t x).
Proof. exact (@lem17045 ((pat t) = (e a)) ((term67 A B P Q f arg a t) = x)). Qed.
Lemma lem8309881 {Q : Type'} (P : Q -> Prop) : (term412 Q P) = (term413 Q P).
Proof. exact (@lem18394 Q P). Qed.
Lemma lem8309882 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (x : B) : (term414 A B D P Q pat e f arg a x) = (term415 A B D P Q pat e f arg a x).
Proof. exact (@lem8309881 Q (term260 A B D P Q pat e f arg a x)). Qed.
Lemma lem8309883 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (t : Q) (x : B) : (term416 A B D P Q pat e f arg a x t) = (term259 A B D P Q pat e f arg a t x).
Proof. exact (eq_refl (term416 A B D P Q pat e f arg a x t)). Qed.
Lemma lem8309884 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8309885 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (t : Q) (x : B) : (term417 A B D P Q pat e f arg a x t) = (term410 A B D P Q pat e f arg a t x).
Proof. exact (MK_COMB (@lem8309884) (@lem8309883 A B D P Q pat e f arg a t x)). Qed.
Lemma lem8309886 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (t : Q) (x : B) : (term417 A B D P Q pat e f arg a x t) = (term411 A B D P Q pat e f arg a t x).
Proof. exact (TRANS (@lem8309885 A B D P Q pat e f arg a t x) (@lem8309880 A B D P Q pat e f arg a t x)). Qed.
Lemma lem8309887 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (x : B) : (term418 A B D P Q pat e f arg a x) = (term419 A B D P Q pat e f arg a x).
Proof. exact (fun_ext (fun t : Q => @lem8309886 A B D P Q pat e f arg a t x)). Qed.
Lemma lem8309888 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8309889 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (x : B) : (term415 A B D P Q pat e f arg a x) = (term420 A B D P Q pat e f arg a x).
Proof. exact (MK_COMB (@lem8309888 Q) (@lem8309887 A B D P Q pat e f arg a x)). Qed.
Lemma lem8309890 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (x : B) : (term414 A B D P Q pat e f arg a x) = (term420 A B D P Q pat e f arg a x).
Proof. exact (TRANS (@lem8309882 A B D P Q pat e f arg a x) (@lem8309889 A B D P Q pat e f arg a x)). Qed.
Lemma lem8309895 {A B D P Q : Type'} (t : Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1344 A B D P Q t _111929 pat e f arg a) = (term1344 A B D P Q t _111929 pat e f arg a).
Proof. exact (eq_refl (term1344 A B D P Q t _111929 pat e f arg a)). Qed.
Lemma lem8309896 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1346 A B D P Q _111929 pat e f arg a) = (term1346 A B D P Q _111929 pat e f arg a).
Proof. exact (fun_ext (fun t : Q => @lem8309895 A B D P Q t _111929 pat e f arg a)). Qed.
Lemma lem8309897 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8309898 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1347 A B D P Q _111929 pat e f arg a) = (term1347 A B D P Q _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8309897 Q) (@lem8309896 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8309899 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8309900 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (x : B) : (term1559 A B D P Q pat e f arg a x) = (term431 A B D P Q pat e f arg a x).
Proof. exact (MK_COMB (@lem8309899) (@lem8309890 A B D P Q pat e f arg a x)). Qed.
Lemma lem8309901 {A B D P Q : Type'} (x : B) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1560 A B D P Q x _111929 pat e f arg a) = (term1561 A B D P Q x _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8309900 A B D P Q pat e f arg a x) (@lem8309898 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8309902 {A B D P Q : Type'} (x : B) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1348 A B D P Q x _111929 pat e f arg a) = (term1560 A B D P Q x _111929 pat e f arg a).
Proof. exact (@lem17265 (term261 A B D P Q pat e f arg a x) (term1347 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8309903 {A B D P Q : Type'} (x : B) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1348 A B D P Q x _111929 pat e f arg a) = (term1561 A B D P Q x _111929 pat e f arg a).
Proof. exact (TRANS (@lem8309902 A B D P Q x _111929 pat e f arg a) (@lem8309901 A B D P Q x _111929 pat e f arg a)). Qed.
Lemma lem8309904 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1349 A B D P Q _111929 pat e f arg a) = (term1562 A B D P Q _111929 pat e f arg a).
Proof. exact (fun_ext (fun x : B => @lem8309903 A B D P Q x _111929 pat e f arg a)). Qed.
Lemma lem8309905 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8309906 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1350 A B D P Q _111929 pat e f arg a) = (term1563 A B D P Q _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8309905 B) (@lem8309904 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8309907 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1352 A B D P Q _111929 pat e f arg) = (term1564 A B D P Q _111929 pat e f arg).
Proof. exact (fun_ext (fun a : P => @lem8309906 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8309908 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8309909 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1353 A B D P Q _111929 pat e f arg) = (term1565 A B D P Q _111929 pat e f arg).
Proof. exact (MK_COMB (@lem8309908 P) (@lem8309907 A B D P Q _111929 pat e f arg)). Qed.
Lemma lem8309910 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1355 A B D P Q _111929 pat e f) = (term1566 A B D P Q _111929 pat e f).
Proof. exact (fun_ext (fun arg : type1475 A P Q => @lem8309909 A B D P Q _111929 pat e f arg)). Qed.
Lemma lem8309911 {A P Q : Type'} : (@all (P -> Q -> A)) = (@all (P -> Q -> A)).
Proof. exact (eq_refl (@all (P -> Q -> A))). Qed.
Lemma lem8309912 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1356 A B D P Q _111929 pat e f) = (term1567 A B D P Q _111929 pat e f).
Proof. exact (MK_COMB (@lem8309911 A P Q) (@lem8309910 A B D P Q _111929 pat e f)). Qed.
Lemma lem8309913 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1358 A B D P Q _111929 pat e) = (term1568 A B D P Q _111929 pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8309912 A B D P Q _111929 pat e f)). Qed.
Lemma lem8309914 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8309915 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1359 A B D P Q _111929 pat e) = (term1569 A B D P Q _111929 pat e).
Proof. exact (MK_COMB (@lem8309914 A B) (@lem8309913 A B D P Q _111929 pat e)). Qed.
Lemma lem8309916 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1361 A B D P Q _111929 pat) = (term1570 A B D P Q _111929 pat).
Proof. exact (fun_ext (fun e : P -> D => @lem8309915 A B D P Q _111929 pat e)). Qed.
Lemma lem8309917 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8309918 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1362 A B D P Q _111929 pat) = (term1571 A B D P Q _111929 pat).
Proof. exact (MK_COMB (@lem8309917 D P) (@lem8309916 A B D P Q _111929 pat)). Qed.
Lemma lem8309919 {A B D P Q : Type'} (_111929 : type904 A B D P Q) : (term1364 A B D P Q _111929) = (term1572 A B D P Q _111929).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8309918 A B D P Q _111929 pat)). Qed.
Lemma lem8309920 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8309921 {A B D P Q : Type'} (_111929 : type904 A B D P Q) : (term1365 A B D P Q _111929) = (term1573 A B D P Q _111929).
Proof. exact (MK_COMB (@lem8309920 D Q) (@lem8309919 A B D P Q _111929)). Qed.
Lemma lem8309963 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1574 A P Q) = (term1575 A P Q).
Proof. exact (EQ_MP (@lem18947 A P Q) (@lem18946 A P Q)). Qed.
Lemma lem8309964 {B : Type'} (P : B -> Prop) (Q : Prop) : (term1574 B P Q) = (term1575 B P Q).
Proof. exact (@lem8309963 B P Q). Qed.
Lemma lem8309965 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1576 A B D P Q _111929 pat e f arg a) = (term1577 A B D P Q _111929 pat e f arg a).
Proof. exact (@lem8309964 B (term465 A B D P Q pat e f arg a) (term1347 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8309966 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (x : B) : (term1578 A B D P Q pat e f arg a x) = (term420 A B D P Q pat e f arg a x).
Proof. exact (eq_refl (term1578 A B D P Q pat e f arg a x)). Qed.
Lemma lem8309967 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8309968 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (x : B) : (term1579 A B D P Q pat e f arg a x) = (term431 A B D P Q pat e f arg a x).
Proof. exact (MK_COMB (@lem8309967) (@lem8309966 A B D P Q pat e f arg a x)). Qed.
Lemma lem8309969 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1347 A B D P Q _111929 pat e f arg a) = (term1347 A B D P Q _111929 pat e f arg a).
Proof. exact (eq_refl (term1347 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8309970 {A B D P Q : Type'} (x : B) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1580 A B D P Q x _111929 pat e f arg a) = (term1561 A B D P Q x _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8309968 A B D P Q pat e f arg a x) (@lem8309969 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8309971 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1581 A B D P Q _111929 pat e f arg a) = (term1562 A B D P Q _111929 pat e f arg a).
Proof. exact (fun_ext (fun x : B => @lem8309970 A B D P Q x _111929 pat e f arg a)). Qed.
Lemma lem8309972 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8309973 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1576 A B D P Q _111929 pat e f arg a) = (term1563 A B D P Q _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8309972 B) (@lem8309971 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8309974 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8309975 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1582 A B D P Q _111929 pat e f arg a) = (term1583 A B D P Q _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8309974) (@lem8309973 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8309976 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (x : B) : (term1578 A B D P Q pat e f arg a x) = (term420 A B D P Q pat e f arg a x).
Proof. exact (eq_refl (term1578 A B D P Q pat e f arg a x)). Qed.
Lemma lem8309977 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1584 A B D P Q pat e f arg a) = (term465 A B D P Q pat e f arg a).
Proof. exact (fun_ext (fun x : B => @lem8309976 A B D P Q pat e f arg a x)). Qed.
Lemma lem8309978 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8309979 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1585 A B D P Q pat e f arg a) = (term467 A B D P Q pat e f arg a).
Proof. exact (MK_COMB (@lem8309978 B) (@lem8309977 A B D P Q pat e f arg a)). Qed.
Lemma lem8309980 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8309981 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1586 A B D P Q pat e f arg a) = (term469 A B D P Q pat e f arg a).
Proof. exact (MK_COMB (@lem8309980) (@lem8309979 A B D P Q pat e f arg a)). Qed.
Lemma lem8309982 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1347 A B D P Q _111929 pat e f arg a) = (term1347 A B D P Q _111929 pat e f arg a).
Proof. exact (eq_refl (term1347 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8309983 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1577 A B D P Q _111929 pat e f arg a) = (term1587 A B D P Q _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8309981 A B D P Q pat e f arg a) (@lem8309982 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8309984 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : ((term1576 A B D P Q _111929 pat e f arg a) = (term1577 A B D P Q _111929 pat e f arg a)) = ((term1563 A B D P Q _111929 pat e f arg a) = (term1587 A B D P Q _111929 pat e f arg a)).
Proof. exact (MK_COMB (@lem8309975 A B D P Q _111929 pat e f arg a) (@lem8309983 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8309985 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1563 A B D P Q _111929 pat e f arg a) = (term1587 A B D P Q _111929 pat e f arg a).
Proof. exact (EQ_MP (@lem8309984 A B D P Q _111929 pat e f arg a) (@lem8309965 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8310086 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1564 A B D P Q _111929 pat e f arg) = (term1588 A B D P Q _111929 pat e f arg).
Proof. exact (fun_ext (fun a : P => @lem8309985 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8310087 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8310088 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1565 A B D P Q _111929 pat e f arg) = (term1589 A B D P Q _111929 pat e f arg).
Proof. exact (MK_COMB (@lem8310087 P) (@lem8310086 A B D P Q _111929 pat e f arg)). Qed.
Lemma lem8310137 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1566 A B D P Q _111929 pat e f) = (term1590 A B D P Q _111929 pat e f).
Proof. exact (fun_ext (fun arg : type1475 A P Q => @lem8310088 A B D P Q _111929 pat e f arg)). Qed.
Lemma lem8310138 {A P Q : Type'} : (@all (P -> Q -> A)) = (@all (P -> Q -> A)).
Proof. exact (eq_refl (@all (P -> Q -> A))). Qed.
Lemma lem8310139 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1567 A B D P Q _111929 pat e f) = (term1591 A B D P Q _111929 pat e f).
Proof. exact (MK_COMB (@lem8310138 A P Q) (@lem8310137 A B D P Q _111929 pat e f)). Qed.
Lemma lem8310144 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1568 A B D P Q _111929 pat e) = (term1592 A B D P Q _111929 pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8310139 A B D P Q _111929 pat e f)). Qed.
Lemma lem8310145 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8310146 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1569 A B D P Q _111929 pat e) = (term1593 A B D P Q _111929 pat e).
Proof. exact (MK_COMB (@lem8310145 A B) (@lem8310144 A B D P Q _111929 pat e)). Qed.
Lemma lem8310151 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1570 A B D P Q _111929 pat) = (term1594 A B D P Q _111929 pat).
Proof. exact (fun_ext (fun e : P -> D => @lem8310146 A B D P Q _111929 pat e)). Qed.
Lemma lem8310152 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8310153 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1571 A B D P Q _111929 pat) = (term1595 A B D P Q _111929 pat).
Proof. exact (MK_COMB (@lem8310152 D P) (@lem8310151 A B D P Q _111929 pat)). Qed.
Lemma lem8310158 {A B D P Q : Type'} (_111929 : type904 A B D P Q) : (term1572 A B D P Q _111929) = (term1596 A B D P Q _111929).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8310153 A B D P Q _111929 pat)). Qed.
Lemma lem8310159 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8310160 {A B D P Q : Type'} (_111929 : type904 A B D P Q) : (term1573 A B D P Q _111929) = (term1597 A B D P Q _111929).
Proof. exact (MK_COMB (@lem8310159 D Q) (@lem8310158 A B D P Q _111929)). Qed.
Lemma lem8310166 {A : Type'} (P : Prop) (Q : A -> Prop) : (term644 A P Q) = (term645 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8310167 {Q : Type'} (P : Prop) (Q' : Q -> Prop) : (term644 Q P Q') = (term645 Q P Q').
Proof. exact (@lem8310166 Q P Q'). Qed.
Lemma lem8310168 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1598 A B D P Q _111929 pat e f arg a) = (term1599 A B D P Q _111929 pat e f arg a).
Proof. exact (@lem8310167 Q (term467 A B D P Q pat e f arg a) (term1346 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8310169 {A B D P Q : Type'} (t : Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1600 A B D P Q _111929 pat e f arg a t) = (term1344 A B D P Q t _111929 pat e f arg a).
Proof. exact (eq_refl (term1600 A B D P Q _111929 pat e f arg a t)). Qed.
Lemma lem8310170 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1601 A B D P Q _111929 pat e f arg a) = (term1346 A B D P Q _111929 pat e f arg a).
Proof. exact (fun_ext (fun t : Q => @lem8310169 A B D P Q t _111929 pat e f arg a)). Qed.
Lemma lem8310171 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8310172 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1602 A B D P Q _111929 pat e f arg a) = (term1347 A B D P Q _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8310171 Q) (@lem8310170 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8310173 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term469 A B D P Q pat e f arg a) = (term469 A B D P Q pat e f arg a).
Proof. exact (eq_refl (term469 A B D P Q pat e f arg a)). Qed.
Lemma lem8310174 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1598 A B D P Q _111929 pat e f arg a) = (term1587 A B D P Q _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8310173 A B D P Q pat e f arg a) (@lem8310172 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8310175 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8310176 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1603 A B D P Q _111929 pat e f arg a) = (term1604 A B D P Q _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8310175) (@lem8310174 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8310177 {A B D P Q : Type'} (t : Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1600 A B D P Q _111929 pat e f arg a t) = (term1344 A B D P Q t _111929 pat e f arg a).
Proof. exact (eq_refl (term1600 A B D P Q _111929 pat e f arg a t)). Qed.
Lemma lem8310178 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term469 A B D P Q pat e f arg a) = (term469 A B D P Q pat e f arg a).
Proof. exact (eq_refl (term469 A B D P Q pat e f arg a)). Qed.
Lemma lem8310179 {A B D P Q : Type'} (t : Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1605 A B D P Q _111929 pat e f arg a t) = (term1606 A B D P Q t _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8310178 A B D P Q pat e f arg a) (@lem8310177 A B D P Q t _111929 pat e f arg a)). Qed.
Lemma lem8310180 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1607 A B D P Q _111929 pat e f arg a) = (term1608 A B D P Q _111929 pat e f arg a).
Proof. exact (fun_ext (fun t : Q => @lem8310179 A B D P Q t _111929 pat e f arg a)). Qed.
Lemma lem8310181 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8310182 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1599 A B D P Q _111929 pat e f arg a) = (term1609 A B D P Q _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8310181 Q) (@lem8310180 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8310183 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : ((term1598 A B D P Q _111929 pat e f arg a) = (term1599 A B D P Q _111929 pat e f arg a)) = ((term1587 A B D P Q _111929 pat e f arg a) = (term1609 A B D P Q _111929 pat e f arg a)).
Proof. exact (MK_COMB (@lem8310176 A B D P Q _111929 pat e f arg a) (@lem8310182 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8310184 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1587 A B D P Q _111929 pat e f arg a) = (term1609 A B D P Q _111929 pat e f arg a).
Proof. exact (EQ_MP (@lem8310183 A B D P Q _111929 pat e f arg a) (@lem8310168 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8310185 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1588 A B D P Q _111929 pat e f arg) = (term1610 A B D P Q _111929 pat e f arg).
Proof. exact (fun_ext (fun a : P => @lem8310184 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8310186 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8310187 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1589 A B D P Q _111929 pat e f arg) = (term1611 A B D P Q _111929 pat e f arg).
Proof. exact (MK_COMB (@lem8310186 P) (@lem8310185 A B D P Q _111929 pat e f arg)). Qed.
Lemma lem8310189 {A B : Type'} (P : type1413 A B) : (term1612 A B P) = (term1613 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8310190 {P Q : Type'} (P' : type1413 P Q) : (term1612 P Q P') = (term1613 P Q P').
Proof. exact (@lem8310189 P Q P'). Qed.
Lemma lem8310191 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1614 A B D P Q _111929 pat e f arg) = (term1615 A B D P Q _111929 pat e f arg).
Proof. exact (@lem8310190 P Q (term1616 A B D P Q _111929 pat e f arg)). Qed.
Lemma lem8310192 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1617 A B D P Q _111929 pat e f arg a) = (term1608 A B D P Q _111929 pat e f arg a).
Proof. exact (eq_refl (term1617 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8310193 {Q : Type'} (t : Q) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8310194 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (t : Q) : (term1618 A B D P Q _111929 pat e f arg a t) = (term1619 A B D P Q _111929 pat e f arg a t).
Proof. exact (MK_COMB (@lem8310192 A B D P Q _111929 pat e f arg a) (@lem8310193 Q t)). Qed.
Lemma lem8310195 {A B D P Q : Type'} (t : Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1619 A B D P Q _111929 pat e f arg a t) = (term1606 A B D P Q t _111929 pat e f arg a).
Proof. exact (eq_refl (term1619 A B D P Q _111929 pat e f arg a t)). Qed.
Lemma lem8310196 {A B D P Q : Type'} (t : Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1618 A B D P Q _111929 pat e f arg a t) = (term1606 A B D P Q t _111929 pat e f arg a).
Proof. exact (TRANS (@lem8310194 A B D P Q _111929 pat e f arg a t) (@lem8310195 A B D P Q t _111929 pat e f arg a)). Qed.
Lemma lem8310197 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1620 A B D P Q _111929 pat e f arg a) = (term1608 A B D P Q _111929 pat e f arg a).
Proof. exact (fun_ext (fun t : Q => @lem8310196 A B D P Q t _111929 pat e f arg a)). Qed.
Lemma lem8310198 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8310199 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1621 A B D P Q _111929 pat e f arg a) = (term1609 A B D P Q _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8310198 Q) (@lem8310197 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8310200 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1622 A B D P Q _111929 pat e f arg) = (term1610 A B D P Q _111929 pat e f arg).
Proof. exact (fun_ext (fun a : P => @lem8310199 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8310201 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8310202 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1614 A B D P Q _111929 pat e f arg) = (term1611 A B D P Q _111929 pat e f arg).
Proof. exact (MK_COMB (@lem8310201 P) (@lem8310200 A B D P Q _111929 pat e f arg)). Qed.
Lemma lem8310203 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8310204 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1623 A B D P Q _111929 pat e f arg) = (term1624 A B D P Q _111929 pat e f arg).
Proof. exact (MK_COMB (@lem8310203) (@lem8310202 A B D P Q _111929 pat e f arg)). Qed.
Lemma lem8310205 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1617 A B D P Q _111929 pat e f arg a) = (term1608 A B D P Q _111929 pat e f arg a).
Proof. exact (eq_refl (term1617 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8310206 {P Q : Type'} (t : P -> Q) (a : P) : (t a) = (t a).
Proof. exact (eq_refl (t a)). Qed.
Lemma lem8310207 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (t : P -> Q) (a : P) : (term1625 A B D P Q _111929 pat e f arg t a) = (term1626 A B D P Q _111929 pat e f arg t a).
Proof. exact (MK_COMB (@lem8310205 A B D P Q _111929 pat e f arg a) (@lem8310206 P Q t a)). Qed.
Lemma lem8310208 {A B D P Q : Type'} (t : P -> Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1626 A B D P Q _111929 pat e f arg t a) = (term1627 A B D P Q t _111929 pat e f arg a).
Proof. exact (eq_refl (term1626 A B D P Q _111929 pat e f arg t a)). Qed.
Lemma lem8310209 {A B D P Q : Type'} (t : P -> Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term1625 A B D P Q _111929 pat e f arg t a) = (term1627 A B D P Q t _111929 pat e f arg a).
Proof. exact (TRANS (@lem8310207 A B D P Q _111929 pat e f arg t a) (@lem8310208 A B D P Q t _111929 pat e f arg a)). Qed.
Lemma lem8310210 {A B D P Q : Type'} (t : P -> Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1628 A B D P Q _111929 pat e f arg t) = (term1629 A B D P Q t _111929 pat e f arg).
Proof. exact (fun_ext (fun a : P => @lem8310209 A B D P Q t _111929 pat e f arg a)). Qed.
Lemma lem8310211 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8310212 {A B D P Q : Type'} (t : P -> Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1630 A B D P Q _111929 pat e f arg t) = (term1631 A B D P Q t _111929 pat e f arg).
Proof. exact (MK_COMB (@lem8310211 P) (@lem8310210 A B D P Q t _111929 pat e f arg)). Qed.
Lemma lem8310213 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1632 A B D P Q _111929 pat e f arg) = (term1633 A B D P Q _111929 pat e f arg).
Proof. exact (fun_ext (fun t : P -> Q => @lem8310212 A B D P Q t _111929 pat e f arg)). Qed.
Lemma lem8310214 {P Q : Type'} : (@ex (P -> Q)) = (@ex (P -> Q)).
Proof. exact (eq_refl (@ex (P -> Q))). Qed.
Lemma lem8310215 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1615 A B D P Q _111929 pat e f arg) = (term1634 A B D P Q _111929 pat e f arg).
Proof. exact (MK_COMB (@lem8310214 P Q) (@lem8310213 A B D P Q _111929 pat e f arg)). Qed.
Lemma lem8310216 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : ((term1614 A B D P Q _111929 pat e f arg) = (term1615 A B D P Q _111929 pat e f arg)) = ((term1611 A B D P Q _111929 pat e f arg) = (term1634 A B D P Q _111929 pat e f arg)).
Proof. exact (MK_COMB (@lem8310204 A B D P Q _111929 pat e f arg) (@lem8310215 A B D P Q _111929 pat e f arg)). Qed.
Lemma lem8310217 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1611 A B D P Q _111929 pat e f arg) = (term1634 A B D P Q _111929 pat e f arg).
Proof. exact (EQ_MP (@lem8310216 A B D P Q _111929 pat e f arg) (@lem8310191 A B D P Q _111929 pat e f arg)). Qed.
Lemma lem8310218 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1589 A B D P Q _111929 pat e f arg) = (term1634 A B D P Q _111929 pat e f arg).
Proof. exact (TRANS (@lem8310187 A B D P Q _111929 pat e f arg) (@lem8310217 A B D P Q _111929 pat e f arg)). Qed.
Lemma lem8310219 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1590 A B D P Q _111929 pat e f) = (term1635 A B D P Q _111929 pat e f).
Proof. exact (fun_ext (fun arg : type1475 A P Q => @lem8310218 A B D P Q _111929 pat e f arg)). Qed.
Lemma lem8310220 {A P Q : Type'} : (@all (P -> Q -> A)) = (@all (P -> Q -> A)).
Proof. exact (eq_refl (@all (P -> Q -> A))). Qed.
Lemma lem8310221 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1591 A B D P Q _111929 pat e f) = (term1636 A B D P Q _111929 pat e f).
Proof. exact (MK_COMB (@lem8310220 A P Q) (@lem8310219 A B D P Q _111929 pat e f)). Qed.
Lemma lem8310223 {A B : Type'} (P : type1413 A B) : (term1612 A B P) = (term1613 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8310224 {A P Q : Type'} (P' : type762 A P Q) : (term1637 A P Q P') = (term1638 A P Q P').
Proof. exact (@lem8310223 (type1475 A P Q) (P -> Q) P'). Qed.
Lemma lem8310225 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1639 A B D P Q _111929 pat e f) = (term1640 A B D P Q _111929 pat e f).
Proof. exact (@lem8310224 A P Q (term1641 A B D P Q _111929 pat e f)). Qed.
Lemma lem8310226 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1642 A B D P Q _111929 pat e f arg) = (term1633 A B D P Q _111929 pat e f arg).
Proof. exact (eq_refl (term1642 A B D P Q _111929 pat e f arg)). Qed.
Lemma lem8310227 {P Q : Type'} (t : P -> Q) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8310228 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (t : P -> Q) : (term1643 A B D P Q _111929 pat e f arg t) = (term1644 A B D P Q _111929 pat e f arg t).
Proof. exact (MK_COMB (@lem8310226 A B D P Q _111929 pat e f arg) (@lem8310227 P Q t)). Qed.
Lemma lem8310229 {A B D P Q : Type'} (t : P -> Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1644 A B D P Q _111929 pat e f arg t) = (term1631 A B D P Q t _111929 pat e f arg).
Proof. exact (eq_refl (term1644 A B D P Q _111929 pat e f arg t)). Qed.
Lemma lem8310230 {A B D P Q : Type'} (t : P -> Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1643 A B D P Q _111929 pat e f arg t) = (term1631 A B D P Q t _111929 pat e f arg).
Proof. exact (TRANS (@lem8310228 A B D P Q _111929 pat e f arg t) (@lem8310229 A B D P Q t _111929 pat e f arg)). Qed.
Lemma lem8310231 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1645 A B D P Q _111929 pat e f arg) = (term1633 A B D P Q _111929 pat e f arg).
Proof. exact (fun_ext (fun t : P -> Q => @lem8310230 A B D P Q t _111929 pat e f arg)). Qed.
Lemma lem8310232 {P Q : Type'} : (@ex (P -> Q)) = (@ex (P -> Q)).
Proof. exact (eq_refl (@ex (P -> Q))). Qed.
Lemma lem8310233 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1646 A B D P Q _111929 pat e f arg) = (term1634 A B D P Q _111929 pat e f arg).
Proof. exact (MK_COMB (@lem8310232 P Q) (@lem8310231 A B D P Q _111929 pat e f arg)). Qed.
Lemma lem8310234 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1647 A B D P Q _111929 pat e f) = (term1635 A B D P Q _111929 pat e f).
Proof. exact (fun_ext (fun arg : type1475 A P Q => @lem8310233 A B D P Q _111929 pat e f arg)). Qed.
Lemma lem8310235 {A P Q : Type'} : (@all (P -> Q -> A)) = (@all (P -> Q -> A)).
Proof. exact (eq_refl (@all (P -> Q -> A))). Qed.
Lemma lem8310236 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1639 A B D P Q _111929 pat e f) = (term1636 A B D P Q _111929 pat e f).
Proof. exact (MK_COMB (@lem8310235 A P Q) (@lem8310234 A B D P Q _111929 pat e f)). Qed.
Lemma lem8310237 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8310238 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1648 A B D P Q _111929 pat e f) = (term1649 A B D P Q _111929 pat e f).
Proof. exact (MK_COMB (@lem8310237) (@lem8310236 A B D P Q _111929 pat e f)). Qed.
Lemma lem8310239 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1642 A B D P Q _111929 pat e f arg) = (term1633 A B D P Q _111929 pat e f arg).
Proof. exact (eq_refl (term1642 A B D P Q _111929 pat e f arg)). Qed.
Lemma lem8310240 {A P Q : Type'} (t : type765 A P Q) (arg : type1475 A P Q) : (t arg) = (t arg).
Proof. exact (eq_refl (t arg)). Qed.
Lemma lem8310241 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (t : type765 A P Q) (arg : type1475 A P Q) : (term1650 A B D P Q _111929 pat e f t arg) = (term1651 A B D P Q _111929 pat e f t arg).
Proof. exact (MK_COMB (@lem8310239 A B D P Q _111929 pat e f arg) (@lem8310240 A P Q t arg)). Qed.
Lemma lem8310242 {A B D P Q : Type'} (t : type765 A P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1651 A B D P Q _111929 pat e f t arg) = (term1652 A B D P Q t _111929 pat e f arg).
Proof. exact (eq_refl (term1651 A B D P Q _111929 pat e f t arg)). Qed.
Lemma lem8310243 {A B D P Q : Type'} (t : type765 A P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term1650 A B D P Q _111929 pat e f t arg) = (term1652 A B D P Q t _111929 pat e f arg).
Proof. exact (TRANS (@lem8310241 A B D P Q _111929 pat e f t arg) (@lem8310242 A B D P Q t _111929 pat e f arg)). Qed.
Lemma lem8310244 {A B D P Q : Type'} (t : type765 A P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1653 A B D P Q _111929 pat e f t) = (term1654 A B D P Q t _111929 pat e f).
Proof. exact (fun_ext (fun arg : type1475 A P Q => @lem8310243 A B D P Q t _111929 pat e f arg)). Qed.
Lemma lem8310245 {A P Q : Type'} : (@all (P -> Q -> A)) = (@all (P -> Q -> A)).
Proof. exact (eq_refl (@all (P -> Q -> A))). Qed.
Lemma lem8310246 {A B D P Q : Type'} (t : type765 A P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1655 A B D P Q _111929 pat e f t) = (term1656 A B D P Q t _111929 pat e f).
Proof. exact (MK_COMB (@lem8310245 A P Q) (@lem8310244 A B D P Q t _111929 pat e f)). Qed.
Lemma lem8310247 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1657 A B D P Q _111929 pat e f) = (term1658 A B D P Q _111929 pat e f).
Proof. exact (fun_ext (fun t : type765 A P Q => @lem8310246 A B D P Q t _111929 pat e f)). Qed.
Lemma lem8310248 {A P Q : Type'} : (@ex ((P -> Q -> A) -> P -> Q)) = (@ex ((P -> Q -> A) -> P -> Q)).
Proof. exact (eq_refl (@ex ((P -> Q -> A) -> P -> Q))). Qed.
Lemma lem8310249 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1640 A B D P Q _111929 pat e f) = (term1659 A B D P Q _111929 pat e f).
Proof. exact (MK_COMB (@lem8310248 A P Q) (@lem8310247 A B D P Q _111929 pat e f)). Qed.
Lemma lem8310250 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : ((term1639 A B D P Q _111929 pat e f) = (term1640 A B D P Q _111929 pat e f)) = ((term1636 A B D P Q _111929 pat e f) = (term1659 A B D P Q _111929 pat e f)).
Proof. exact (MK_COMB (@lem8310238 A B D P Q _111929 pat e f) (@lem8310249 A B D P Q _111929 pat e f)). Qed.
Lemma lem8310251 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1636 A B D P Q _111929 pat e f) = (term1659 A B D P Q _111929 pat e f).
Proof. exact (EQ_MP (@lem8310250 A B D P Q _111929 pat e f) (@lem8310225 A B D P Q _111929 pat e f)). Qed.
Lemma lem8310252 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1591 A B D P Q _111929 pat e f) = (term1659 A B D P Q _111929 pat e f).
Proof. exact (TRANS (@lem8310221 A B D P Q _111929 pat e f) (@lem8310251 A B D P Q _111929 pat e f)). Qed.
Lemma lem8310253 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1592 A B D P Q _111929 pat e) = (term1660 A B D P Q _111929 pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8310252 A B D P Q _111929 pat e f)). Qed.
Lemma lem8310254 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8310255 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1593 A B D P Q _111929 pat e) = (term1661 A B D P Q _111929 pat e).
Proof. exact (MK_COMB (@lem8310254 A B) (@lem8310253 A B D P Q _111929 pat e)). Qed.
Lemma lem8310257 {A B : Type'} (P : type1413 A B) : (term1612 A B P) = (term1613 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8310258 {A B P Q : Type'} (P' : type509 A B P Q) : (term1662 A B P Q P') = (term1663 A B P Q P').
Proof. exact (@lem8310257 (A -> B) (type765 A P Q) P'). Qed.
Lemma lem8310259 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1664 A B D P Q _111929 pat e) = (term1665 A B D P Q _111929 pat e).
Proof. exact (@lem8310258 A B P Q (term1666 A B D P Q _111929 pat e)). Qed.
Lemma lem8310260 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1667 A B D P Q _111929 pat e f) = (term1658 A B D P Q _111929 pat e f).
Proof. exact (eq_refl (term1667 A B D P Q _111929 pat e f)). Qed.
Lemma lem8310261 {A P Q : Type'} (t : type765 A P Q) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8310262 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (t : type765 A P Q) : (term1668 A B D P Q _111929 pat e f t) = (term1669 A B D P Q _111929 pat e f t).
Proof. exact (MK_COMB (@lem8310260 A B D P Q _111929 pat e f) (@lem8310261 A P Q t)). Qed.
Lemma lem8310263 {A B D P Q : Type'} (t : type765 A P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1669 A B D P Q _111929 pat e f t) = (term1656 A B D P Q t _111929 pat e f).
Proof. exact (eq_refl (term1669 A B D P Q _111929 pat e f t)). Qed.
Lemma lem8310264 {A B D P Q : Type'} (t : type765 A P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1668 A B D P Q _111929 pat e f t) = (term1656 A B D P Q t _111929 pat e f).
Proof. exact (TRANS (@lem8310262 A B D P Q _111929 pat e f t) (@lem8310263 A B D P Q t _111929 pat e f)). Qed.
Lemma lem8310265 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1670 A B D P Q _111929 pat e f) = (term1658 A B D P Q _111929 pat e f).
Proof. exact (fun_ext (fun t : type765 A P Q => @lem8310264 A B D P Q t _111929 pat e f)). Qed.
Lemma lem8310266 {A P Q : Type'} : (@ex ((P -> Q -> A) -> P -> Q)) = (@ex ((P -> Q -> A) -> P -> Q)).
Proof. exact (eq_refl (@ex ((P -> Q -> A) -> P -> Q))). Qed.
Lemma lem8310267 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1671 A B D P Q _111929 pat e f) = (term1659 A B D P Q _111929 pat e f).
Proof. exact (MK_COMB (@lem8310266 A P Q) (@lem8310265 A B D P Q _111929 pat e f)). Qed.
Lemma lem8310268 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1672 A B D P Q _111929 pat e) = (term1660 A B D P Q _111929 pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8310267 A B D P Q _111929 pat e f)). Qed.
Lemma lem8310269 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8310270 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1664 A B D P Q _111929 pat e) = (term1661 A B D P Q _111929 pat e).
Proof. exact (MK_COMB (@lem8310269 A B) (@lem8310268 A B D P Q _111929 pat e)). Qed.
Lemma lem8310271 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8310272 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1673 A B D P Q _111929 pat e) = (term1674 A B D P Q _111929 pat e).
Proof. exact (MK_COMB (@lem8310271) (@lem8310270 A B D P Q _111929 pat e)). Qed.
Lemma lem8310273 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1667 A B D P Q _111929 pat e f) = (term1658 A B D P Q _111929 pat e f).
Proof. exact (eq_refl (term1667 A B D P Q _111929 pat e f)). Qed.
Lemma lem8310274 {A B P Q : Type'} (t : type535 A B P Q) (f : A -> B) : (t f) = (t f).
Proof. exact (eq_refl (t f)). Qed.
Lemma lem8310275 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (t : type535 A B P Q) (f : A -> B) : (term1675 A B D P Q _111929 pat e t f) = (term1676 A B D P Q _111929 pat e t f).
Proof. exact (MK_COMB (@lem8310273 A B D P Q _111929 pat e f) (@lem8310274 A B P Q t f)). Qed.
Lemma lem8310276 {A B D P Q : Type'} (t : type535 A B P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1676 A B D P Q _111929 pat e t f) = (term1677 A B D P Q t _111929 pat e f).
Proof. exact (eq_refl (term1676 A B D P Q _111929 pat e t f)). Qed.
Lemma lem8310277 {A B D P Q : Type'} (t : type535 A B P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term1675 A B D P Q _111929 pat e t f) = (term1677 A B D P Q t _111929 pat e f).
Proof. exact (TRANS (@lem8310275 A B D P Q _111929 pat e t f) (@lem8310276 A B D P Q t _111929 pat e f)). Qed.
Lemma lem8310278 {A B D P Q : Type'} (t : type535 A B P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1678 A B D P Q _111929 pat e t) = (term1679 A B D P Q t _111929 pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8310277 A B D P Q t _111929 pat e f)). Qed.
Lemma lem8310279 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8310280 {A B D P Q : Type'} (t : type535 A B P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1680 A B D P Q _111929 pat e t) = (term1681 A B D P Q t _111929 pat e).
Proof. exact (MK_COMB (@lem8310279 A B) (@lem8310278 A B D P Q t _111929 pat e)). Qed.
Lemma lem8310281 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1682 A B D P Q _111929 pat e) = (term1683 A B D P Q _111929 pat e).
Proof. exact (fun_ext (fun t : type535 A B P Q => @lem8310280 A B D P Q t _111929 pat e)). Qed.
Lemma lem8310282 {A B P Q : Type'} : (@ex ((A -> B) -> (P -> Q -> A) -> P -> Q)) = (@ex ((A -> B) -> (P -> Q -> A) -> P -> Q)).
Proof. exact (eq_refl (@ex ((A -> B) -> (P -> Q -> A) -> P -> Q))). Qed.
Lemma lem8310283 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1665 A B D P Q _111929 pat e) = (term1684 A B D P Q _111929 pat e).
Proof. exact (MK_COMB (@lem8310282 A B P Q) (@lem8310281 A B D P Q _111929 pat e)). Qed.
Lemma lem8310284 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : ((term1664 A B D P Q _111929 pat e) = (term1665 A B D P Q _111929 pat e)) = ((term1661 A B D P Q _111929 pat e) = (term1684 A B D P Q _111929 pat e)).
Proof. exact (MK_COMB (@lem8310272 A B D P Q _111929 pat e) (@lem8310283 A B D P Q _111929 pat e)). Qed.
Lemma lem8310285 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1661 A B D P Q _111929 pat e) = (term1684 A B D P Q _111929 pat e).
Proof. exact (EQ_MP (@lem8310284 A B D P Q _111929 pat e) (@lem8310259 A B D P Q _111929 pat e)). Qed.
Lemma lem8310286 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1593 A B D P Q _111929 pat e) = (term1684 A B D P Q _111929 pat e).
Proof. exact (TRANS (@lem8310255 A B D P Q _111929 pat e) (@lem8310285 A B D P Q _111929 pat e)). Qed.
Lemma lem8310287 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1594 A B D P Q _111929 pat) = (term1685 A B D P Q _111929 pat).
Proof. exact (fun_ext (fun e : P -> D => @lem8310286 A B D P Q _111929 pat e)). Qed.
Lemma lem8310288 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8310289 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1595 A B D P Q _111929 pat) = (term1686 A B D P Q _111929 pat).
Proof. exact (MK_COMB (@lem8310288 D P) (@lem8310287 A B D P Q _111929 pat)). Qed.
Lemma lem8310291 {A B : Type'} (P : type1413 A B) : (term1612 A B P) = (term1613 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8310292 {A B D P Q : Type'} (P' : type895 A B D P Q) : (term1687 A B D P Q P') = (term1688 A B D P Q P').
Proof. exact (@lem8310291 (P -> D) (type535 A B P Q) P'). Qed.
Lemma lem8310293 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1689 A B D P Q _111929 pat) = (term1690 A B D P Q _111929 pat).
Proof. exact (@lem8310292 A B D P Q (term1691 A B D P Q _111929 pat)). Qed.
Lemma lem8310294 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1692 A B D P Q _111929 pat e) = (term1683 A B D P Q _111929 pat e).
Proof. exact (eq_refl (term1692 A B D P Q _111929 pat e)). Qed.
Lemma lem8310295 {A B P Q : Type'} (t : type535 A B P Q) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8310296 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (t : type535 A B P Q) : (term1693 A B D P Q _111929 pat e t) = (term1694 A B D P Q _111929 pat e t).
Proof. exact (MK_COMB (@lem8310294 A B D P Q _111929 pat e) (@lem8310295 A B P Q t)). Qed.
Lemma lem8310297 {A B D P Q : Type'} (t : type535 A B P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1694 A B D P Q _111929 pat e t) = (term1681 A B D P Q t _111929 pat e).
Proof. exact (eq_refl (term1694 A B D P Q _111929 pat e t)). Qed.
Lemma lem8310298 {A B D P Q : Type'} (t : type535 A B P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1693 A B D P Q _111929 pat e t) = (term1681 A B D P Q t _111929 pat e).
Proof. exact (TRANS (@lem8310296 A B D P Q _111929 pat e t) (@lem8310297 A B D P Q t _111929 pat e)). Qed.
Lemma lem8310299 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1695 A B D P Q _111929 pat e) = (term1683 A B D P Q _111929 pat e).
Proof. exact (fun_ext (fun t : type535 A B P Q => @lem8310298 A B D P Q t _111929 pat e)). Qed.
Lemma lem8310300 {A B P Q : Type'} : (@ex ((A -> B) -> (P -> Q -> A) -> P -> Q)) = (@ex ((A -> B) -> (P -> Q -> A) -> P -> Q)).
Proof. exact (eq_refl (@ex ((A -> B) -> (P -> Q -> A) -> P -> Q))). Qed.
Lemma lem8310301 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1696 A B D P Q _111929 pat e) = (term1684 A B D P Q _111929 pat e).
Proof. exact (MK_COMB (@lem8310300 A B P Q) (@lem8310299 A B D P Q _111929 pat e)). Qed.
Lemma lem8310302 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1697 A B D P Q _111929 pat) = (term1685 A B D P Q _111929 pat).
Proof. exact (fun_ext (fun e : P -> D => @lem8310301 A B D P Q _111929 pat e)). Qed.
Lemma lem8310303 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8310304 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1689 A B D P Q _111929 pat) = (term1686 A B D P Q _111929 pat).
Proof. exact (MK_COMB (@lem8310303 D P) (@lem8310302 A B D P Q _111929 pat)). Qed.
Lemma lem8310305 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8310306 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1698 A B D P Q _111929 pat) = (term1699 A B D P Q _111929 pat).
Proof. exact (MK_COMB (@lem8310305) (@lem8310304 A B D P Q _111929 pat)). Qed.
Lemma lem8310307 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1692 A B D P Q _111929 pat e) = (term1683 A B D P Q _111929 pat e).
Proof. exact (eq_refl (term1692 A B D P Q _111929 pat e)). Qed.
Lemma lem8310308 {A B D P Q : Type'} (t : type898 A B D P Q) (e : P -> D) : (t e) = (t e).
Proof. exact (eq_refl (t e)). Qed.
Lemma lem8310309 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (t : type898 A B D P Q) (e : P -> D) : (term1700 A B D P Q _111929 pat t e) = (term1701 A B D P Q _111929 pat t e).
Proof. exact (MK_COMB (@lem8310307 A B D P Q _111929 pat e) (@lem8310308 A B D P Q t e)). Qed.
Lemma lem8310310 {A B D P Q : Type'} (t : type898 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1701 A B D P Q _111929 pat t e) = (term1702 A B D P Q t _111929 pat e).
Proof. exact (eq_refl (term1701 A B D P Q _111929 pat t e)). Qed.
Lemma lem8310311 {A B D P Q : Type'} (t : type898 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term1700 A B D P Q _111929 pat t e) = (term1702 A B D P Q t _111929 pat e).
Proof. exact (TRANS (@lem8310309 A B D P Q _111929 pat t e) (@lem8310310 A B D P Q t _111929 pat e)). Qed.
Lemma lem8310312 {A B D P Q : Type'} (t : type898 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1703 A B D P Q _111929 pat t) = (term1704 A B D P Q t _111929 pat).
Proof. exact (fun_ext (fun e : P -> D => @lem8310311 A B D P Q t _111929 pat e)). Qed.
Lemma lem8310313 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8310314 {A B D P Q : Type'} (t : type898 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1705 A B D P Q _111929 pat t) = (term1706 A B D P Q t _111929 pat).
Proof. exact (MK_COMB (@lem8310313 D P) (@lem8310312 A B D P Q t _111929 pat)). Qed.
Lemma lem8310315 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1707 A B D P Q _111929 pat) = (term1708 A B D P Q _111929 pat).
Proof. exact (fun_ext (fun t : type898 A B D P Q => @lem8310314 A B D P Q t _111929 pat)). Qed.
Lemma lem8310316 {A B D P Q : Type'} : (@ex ((P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> Q)) = (@ex ((P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> Q)).
Proof. exact (eq_refl (@ex ((P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> Q))). Qed.
Lemma lem8310317 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1690 A B D P Q _111929 pat) = (term1709 A B D P Q _111929 pat).
Proof. exact (MK_COMB (@lem8310316 A B D P Q) (@lem8310315 A B D P Q _111929 pat)). Qed.
Lemma lem8310318 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : ((term1689 A B D P Q _111929 pat) = (term1690 A B D P Q _111929 pat)) = ((term1686 A B D P Q _111929 pat) = (term1709 A B D P Q _111929 pat)).
Proof. exact (MK_COMB (@lem8310306 A B D P Q _111929 pat) (@lem8310317 A B D P Q _111929 pat)). Qed.
Lemma lem8310319 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1686 A B D P Q _111929 pat) = (term1709 A B D P Q _111929 pat).
Proof. exact (EQ_MP (@lem8310318 A B D P Q _111929 pat) (@lem8310293 A B D P Q _111929 pat)). Qed.
Lemma lem8310320 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1595 A B D P Q _111929 pat) = (term1709 A B D P Q _111929 pat).
Proof. exact (TRANS (@lem8310289 A B D P Q _111929 pat) (@lem8310319 A B D P Q _111929 pat)). Qed.
Lemma lem8310321 {A B D P Q : Type'} (_111929 : type904 A B D P Q) : (term1596 A B D P Q _111929) = (term1710 A B D P Q _111929).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8310320 A B D P Q _111929 pat)). Qed.
Lemma lem8310322 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8310323 {A B D P Q : Type'} (_111929 : type904 A B D P Q) : (term1597 A B D P Q _111929) = (term1711 A B D P Q _111929).
Proof. exact (MK_COMB (@lem8310322 D Q) (@lem8310321 A B D P Q _111929)). Qed.
Lemma lem8310325 {A B : Type'} (P : type1413 A B) : (term1612 A B P) = (term1613 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8310326 {A B D P Q : Type'} (P' : type902 A B D P Q) : (term1712 A B D P Q P') = (term1713 A B D P Q P').
Proof. exact (@lem8310325 (Q -> D) (type898 A B D P Q) P'). Qed.
Lemma lem8310327 {A B D P Q : Type'} (_111929 : type904 A B D P Q) : (term1714 A B D P Q _111929) = (term1715 A B D P Q _111929).
Proof. exact (@lem8310326 A B D P Q (term1716 A B D P Q _111929)). Qed.
Lemma lem8310328 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1717 A B D P Q _111929 pat) = (term1708 A B D P Q _111929 pat).
Proof. exact (eq_refl (term1717 A B D P Q _111929 pat)). Qed.
Lemma lem8310329 {A B D P Q : Type'} (t : type898 A B D P Q) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8310330 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (t : type898 A B D P Q) : (term1718 A B D P Q _111929 pat t) = (term1719 A B D P Q _111929 pat t).
Proof. exact (MK_COMB (@lem8310328 A B D P Q _111929 pat) (@lem8310329 A B D P Q t)). Qed.
Lemma lem8310331 {A B D P Q : Type'} (t : type898 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1719 A B D P Q _111929 pat t) = (term1706 A B D P Q t _111929 pat).
Proof. exact (eq_refl (term1719 A B D P Q _111929 pat t)). Qed.
Lemma lem8310332 {A B D P Q : Type'} (t : type898 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1718 A B D P Q _111929 pat t) = (term1706 A B D P Q t _111929 pat).
Proof. exact (TRANS (@lem8310330 A B D P Q _111929 pat t) (@lem8310331 A B D P Q t _111929 pat)). Qed.
Lemma lem8310333 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1720 A B D P Q _111929 pat) = (term1708 A B D P Q _111929 pat).
Proof. exact (fun_ext (fun t : type898 A B D P Q => @lem8310332 A B D P Q t _111929 pat)). Qed.
Lemma lem8310334 {A B D P Q : Type'} : (@ex ((P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> Q)) = (@ex ((P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> Q)).
Proof. exact (eq_refl (@ex ((P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> Q))). Qed.
Lemma lem8310335 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1721 A B D P Q _111929 pat) = (term1709 A B D P Q _111929 pat).
Proof. exact (MK_COMB (@lem8310334 A B D P Q) (@lem8310333 A B D P Q _111929 pat)). Qed.
Lemma lem8310336 {A B D P Q : Type'} (_111929 : type904 A B D P Q) : (term1722 A B D P Q _111929) = (term1710 A B D P Q _111929).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8310335 A B D P Q _111929 pat)). Qed.
Lemma lem8310337 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8310338 {A B D P Q : Type'} (_111929 : type904 A B D P Q) : (term1714 A B D P Q _111929) = (term1711 A B D P Q _111929).
Proof. exact (MK_COMB (@lem8310337 D Q) (@lem8310336 A B D P Q _111929)). Qed.
Lemma lem8310339 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8310340 {A B D P Q : Type'} (_111929 : type904 A B D P Q) : (term1723 A B D P Q _111929) = (term1724 A B D P Q _111929).
Proof. exact (MK_COMB (@lem8310339) (@lem8310338 A B D P Q _111929)). Qed.
Lemma lem8310341 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1717 A B D P Q _111929 pat) = (term1708 A B D P Q _111929 pat).
Proof. exact (eq_refl (term1717 A B D P Q _111929 pat)). Qed.
Lemma lem8310342 {A B D P Q : Type'} (t : type905 A B D P Q) (pat : Q -> D) : (t pat) = (t pat).
Proof. exact (eq_refl (t pat)). Qed.
Lemma lem8310343 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (t : type905 A B D P Q) (pat : Q -> D) : (term1725 A B D P Q _111929 t pat) = (term1726 A B D P Q _111929 t pat).
Proof. exact (MK_COMB (@lem8310341 A B D P Q _111929 pat) (@lem8310342 A B D P Q t pat)). Qed.
Lemma lem8310344 {A B D P Q : Type'} (t : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1726 A B D P Q _111929 t pat) = (term1727 A B D P Q t _111929 pat).
Proof. exact (eq_refl (term1726 A B D P Q _111929 t pat)). Qed.
Lemma lem8310345 {A B D P Q : Type'} (t : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1725 A B D P Q _111929 t pat) = (term1727 A B D P Q t _111929 pat).
Proof. exact (TRANS (@lem8310343 A B D P Q _111929 t pat) (@lem8310344 A B D P Q t _111929 pat)). Qed.
Lemma lem8310346 {A B D P Q : Type'} (t : type905 A B D P Q) (_111929 : type904 A B D P Q) : (term1728 A B D P Q _111929 t) = (term1729 A B D P Q t _111929).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8310345 A B D P Q t _111929 pat)). Qed.
Lemma lem8310347 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8310348 {A B D P Q : Type'} (t : type905 A B D P Q) (_111929 : type904 A B D P Q) : (term1730 A B D P Q _111929 t) = (term1731 A B D P Q t _111929).
Proof. exact (MK_COMB (@lem8310347 D Q) (@lem8310346 A B D P Q t _111929)). Qed.
Lemma lem8310349 {A B D P Q : Type'} (_111929 : type904 A B D P Q) : (term1732 A B D P Q _111929) = (term1733 A B D P Q _111929).
Proof. exact (fun_ext (fun t : type905 A B D P Q => @lem8310348 A B D P Q t _111929)). Qed.
Lemma lem8310350 {A B D P Q : Type'} : (@ex ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> Q)) = (@ex ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> Q)).
Proof. exact (eq_refl (@ex ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> Q))). Qed.
Lemma lem8310351 {A B D P Q : Type'} (_111929 : type904 A B D P Q) : (term1715 A B D P Q _111929) = (term1734 A B D P Q _111929).
Proof. exact (MK_COMB (@lem8310350 A B D P Q) (@lem8310349 A B D P Q _111929)). Qed.
Lemma lem8310352 {A B D P Q : Type'} (_111929 : type904 A B D P Q) : ((term1714 A B D P Q _111929) = (term1715 A B D P Q _111929)) = ((term1711 A B D P Q _111929) = (term1734 A B D P Q _111929)).
Proof. exact (MK_COMB (@lem8310340 A B D P Q _111929) (@lem8310351 A B D P Q _111929)). Qed.
Lemma lem8310353 {A B D P Q : Type'} (_111929 : type904 A B D P Q) : (term1711 A B D P Q _111929) = (term1734 A B D P Q _111929).
Proof. exact (EQ_MP (@lem8310352 A B D P Q _111929) (@lem8310327 A B D P Q _111929)). Qed.
Lemma lem8310354 {A B D P Q : Type'} (_111929 : type904 A B D P Q) : (term1597 A B D P Q _111929) = (term1734 A B D P Q _111929).
Proof. exact (TRANS (@lem8310323 A B D P Q _111929) (@lem8310353 A B D P Q _111929)). Qed.
Lemma lem8310355 {A B D P Q : Type'} (_111929 : type904 A B D P Q) : (term1573 A B D P Q _111929) = (term1734 A B D P Q _111929).
Proof. exact (TRANS (@lem8310160 A B D P Q _111929) (@lem8310354 A B D P Q _111929)). Qed.
Lemma lem8310356 {A B D P Q : Type'} (_111929 : type904 A B D P Q) : (term1365 A B D P Q _111929) = (term1734 A B D P Q _111929).
Proof. exact (TRANS (@lem8309921 A B D P Q _111929) (@lem8310355 A B D P Q _111929)). Qed.
Lemma lem8310357 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (h1 : term1365 A B D P Q _111929) : term1734 A B D P Q _111929.
Proof. exact (EQ_MP (@lem8310356 A B D P Q _111929) (@lem8309864 A B D P Q _111929 h1)). Qed.
Lemma lem8310364 {D P Q : Type'} (x : Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1243 D P Q x _111928 pat e a) = (term1735 D P Q x _111928 pat e a).
Proof. exact (@lem17265 ((pat x) = (e a)) ((term1240 D P Q _111928 pat e a) = (e a))). Qed.
Lemma lem8310365 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1244 D P Q _111928 pat e a) = (term1736 D P Q _111928 pat e a).
Proof. exact (fun_ext (fun x : Q => @lem8310364 D P Q x _111928 pat e a)). Qed.
Lemma lem8310366 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8310367 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1245 D P Q _111928 pat e a) = (term1737 D P Q _111928 pat e a).
Proof. exact (MK_COMB (@lem8310366 Q) (@lem8310365 D P Q _111928 pat e a)). Qed.
Lemma lem8310368 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1247 D P Q _111928 pat e) = (term1738 D P Q _111928 pat e).
Proof. exact (fun_ext (fun a : P => @lem8310367 D P Q _111928 pat e a)). Qed.
Lemma lem8310369 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8310370 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1248 D P Q _111928 pat e) = (term1739 D P Q _111928 pat e).
Proof. exact (MK_COMB (@lem8310369 P) (@lem8310368 D P Q _111928 pat e)). Qed.
Lemma lem8310371 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) : (term1250 D P Q _111928 pat) = (term1740 D P Q _111928 pat).
Proof. exact (fun_ext (fun e : P -> D => @lem8310370 D P Q _111928 pat e)). Qed.
Lemma lem8310372 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8310373 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) : (term1251 D P Q _111928 pat) = (term1741 D P Q _111928 pat).
Proof. exact (MK_COMB (@lem8310372 D P) (@lem8310371 D P Q _111928 pat)). Qed.
Lemma lem8310374 {D P Q : Type'} (_111928 : type886 D P Q) : (term1253 D P Q _111928) = (term1742 D P Q _111928).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8310373 D P Q _111928 pat)). Qed.
Lemma lem8310375 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8310376 {D P Q : Type'} (_111928 : type886 D P Q) : (term1254 D P Q _111928) = (term1743 D P Q _111928).
Proof. exact (MK_COMB (@lem8310375 D Q) (@lem8310374 D P Q _111928)). Qed.
Lemma lem8310410 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1574 A P Q) = (term1575 A P Q).
Proof. exact (EQ_MP (@lem18947 A P Q) (@lem18946 A P Q)). Qed.
Lemma lem8310411 {Q : Type'} (P : Q -> Prop) (Q' : Prop) : (term1574 Q P Q') = (term1575 Q P Q').
Proof. exact (@lem8310410 Q P Q'). Qed.
Lemma lem8310412 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1744 D P Q _111928 pat e a) = (term1745 D P Q _111928 pat e a).
Proof. exact (@lem8310411 Q (term476 D P Q pat e a) ((term1240 D P Q _111928 pat e a) = (e a))). Qed.
Lemma lem8310413 {D P Q : Type'} (pat : Q -> D) (x : Q) (e : P -> D) (a : P) : (term911 D P Q pat e a x) = (term474 D P Q pat x e a).
Proof. exact (eq_refl (term911 D P Q pat e a x)). Qed.
Lemma lem8310414 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8310415 {D P Q : Type'} (pat : Q -> D) (x : Q) (e : P -> D) (a : P) : (term1746 D P Q pat e a x) = (term889 D P Q pat x e a).
Proof. exact (MK_COMB (@lem8310414) (@lem8310413 D P Q pat x e a)). Qed.
Lemma lem8310416 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : ((term1240 D P Q _111928 pat e a) = (e a)) = ((term1240 D P Q _111928 pat e a) = (e a)).
Proof. exact (eq_refl ((term1240 D P Q _111928 pat e a) = (e a))). Qed.
Lemma lem8310417 {D P Q : Type'} (x : Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1747 D P Q x _111928 pat e a) = (term1735 D P Q x _111928 pat e a).
Proof. exact (MK_COMB (@lem8310415 D P Q pat x e a) (@lem8310416 D P Q _111928 pat e a)). Qed.
Lemma lem8310418 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1748 D P Q _111928 pat e a) = (term1736 D P Q _111928 pat e a).
Proof. exact (fun_ext (fun x : Q => @lem8310417 D P Q x _111928 pat e a)). Qed.
Lemma lem8310419 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8310420 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1744 D P Q _111928 pat e a) = (term1737 D P Q _111928 pat e a).
Proof. exact (MK_COMB (@lem8310419 Q) (@lem8310418 D P Q _111928 pat e a)). Qed.
Lemma lem8310421 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8310422 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1749 D P Q _111928 pat e a) = (term1750 D P Q _111928 pat e a).
Proof. exact (MK_COMB (@lem8310421) (@lem8310420 D P Q _111928 pat e a)). Qed.
Lemma lem8310423 {D P Q : Type'} (pat : Q -> D) (x : Q) (e : P -> D) (a : P) : (term911 D P Q pat e a x) = (term474 D P Q pat x e a).
Proof. exact (eq_refl (term911 D P Q pat e a x)). Qed.
Lemma lem8310424 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term1751 D P Q pat e a) = (term476 D P Q pat e a).
Proof. exact (fun_ext (fun x : Q => @lem8310423 D P Q pat x e a)). Qed.
Lemma lem8310425 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8310426 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term1752 D P Q pat e a) = (term477 D P Q pat e a).
Proof. exact (MK_COMB (@lem8310425 Q) (@lem8310424 D P Q pat e a)). Qed.
Lemma lem8310427 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8310428 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term1753 D P Q pat e a) = (term1754 D P Q pat e a).
Proof. exact (MK_COMB (@lem8310427) (@lem8310426 D P Q pat e a)). Qed.
Lemma lem8310429 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : ((term1240 D P Q _111928 pat e a) = (e a)) = ((term1240 D P Q _111928 pat e a) = (e a)).
Proof. exact (eq_refl ((term1240 D P Q _111928 pat e a) = (e a))). Qed.
Lemma lem8310430 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1745 D P Q _111928 pat e a) = (term1755 D P Q _111928 pat e a).
Proof. exact (MK_COMB (@lem8310428 D P Q pat e a) (@lem8310429 D P Q _111928 pat e a)). Qed.
Lemma lem8310431 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : ((term1744 D P Q _111928 pat e a) = (term1745 D P Q _111928 pat e a)) = ((term1737 D P Q _111928 pat e a) = (term1755 D P Q _111928 pat e a)).
Proof. exact (MK_COMB (@lem8310422 D P Q _111928 pat e a) (@lem8310430 D P Q _111928 pat e a)). Qed.
Lemma lem8310432 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1737 D P Q _111928 pat e a) = (term1755 D P Q _111928 pat e a).
Proof. exact (EQ_MP (@lem8310431 D P Q _111928 pat e a) (@lem8310412 D P Q _111928 pat e a)). Qed.
Lemma lem8310437 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1738 D P Q _111928 pat e) = (term1756 D P Q _111928 pat e).
Proof. exact (fun_ext (fun a : P => @lem8310432 D P Q _111928 pat e a)). Qed.
Lemma lem8310438 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8310439 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1739 D P Q _111928 pat e) = (term1757 D P Q _111928 pat e).
Proof. exact (MK_COMB (@lem8310438 P) (@lem8310437 D P Q _111928 pat e)). Qed.
Lemma lem8310488 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) : (term1740 D P Q _111928 pat) = (term1758 D P Q _111928 pat).
Proof. exact (fun_ext (fun e : P -> D => @lem8310439 D P Q _111928 pat e)). Qed.
Lemma lem8310489 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8310490 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) : (term1741 D P Q _111928 pat) = (term1759 D P Q _111928 pat).
Proof. exact (MK_COMB (@lem8310489 D P) (@lem8310488 D P Q _111928 pat)). Qed.
Lemma lem8310495 {D P Q : Type'} (_111928 : type886 D P Q) : (term1742 D P Q _111928) = (term1760 D P Q _111928).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8310490 D P Q _111928 pat)). Qed.
Lemma lem8310496 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8310503 {D P Q : Type'} (_111928 : type886 D P Q) : (term1743 D P Q _111928) = (term1761 D P Q _111928).
Proof. exact (MK_COMB (@lem8310496 D Q) (@lem8310495 D P Q _111928)). Qed.
Lemma lem8310504 {D P Q : Type'} (_111928 : type886 D P Q) : (term1254 D P Q _111928) = (term1761 D P Q _111928).
Proof. exact (TRANS (@lem8310376 D P Q _111928) (@lem8310503 D P Q _111928)). Qed.
Lemma lem8310505 {D P Q : Type'} (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term1761 D P Q _111928.
Proof. exact (EQ_MP (@lem8310504 D P Q _111928) (@lem8309865 D P Q _111928 h1)). Qed.
Lemma lem8310513 {D P Q : Type'} (t : Q) (pat : Q -> D) (u : Q) (e : P -> D) (a : P) : (term390 D P Q t pat u e a) = (term391 D P Q t pat u e a).
Proof. exact (@lem17045 ((pat t) = (e a)) ((pat u) = (e a))). Qed.
Lemma lem8310515 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term392 A B P p f a) = (term392 A B P p f a).
Proof. exact (eq_refl (term392 A B P p f a)). Qed.
Lemma lem8310516 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (pat : Q -> D) (u : Q) (e : P -> D) (a : P) : (term393 A B D P Q p f t pat u e a) = (term394 A B D P Q p f t pat u e a).
Proof. exact (MK_COMB (@lem8310515 A B P p f a) (@lem8310513 D P Q t pat u e a)). Qed.
Lemma lem8310517 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (pat : Q -> D) (u : Q) (e : P -> D) (a : P) : (term395 A B D P Q p f t pat u e a) = (term393 A B D P Q p f t pat u e a).
Proof. exact (@lem17045 (p f a) (term396 D P Q t pat u e a)). Qed.
Lemma lem8310518 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (pat : Q -> D) (u : Q) (e : P -> D) (a : P) : (term395 A B D P Q p f t pat u e a) = (term394 A B D P Q p f t pat u e a).
Proof. exact (TRANS (@lem8310517 A B D P Q p f t pat u e a) (@lem8310516 A B D P Q p f t pat u e a)). Qed.
Lemma lem8310519 {A P Q : Type'} (t : Q) (arg : type1475 A P Q) (a : P) (u : Q) : ((arg a t) = (arg a u)) = ((arg a t) = (arg a u)).
Proof. exact (eq_refl ((arg a t) = (arg a u))). Qed.
Lemma lem8310520 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8310521 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (pat : Q -> D) (u : Q) (e : P -> D) (a : P) : (term397 A B D P Q p f t pat u e a) = (term398 A B D P Q p f t pat u e a).
Proof. exact (MK_COMB (@lem8310520) (@lem8310518 A B D P Q p f t pat u e a)). Qed.
Lemma lem8310522 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) (u : Q) : (term399 A B D P Q p f pat e t arg a u) = (term400 A B D P Q p f pat e t arg a u).
Proof. exact (MK_COMB (@lem8310521 A B D P Q p f t pat u e a) (@lem8310519 A P Q t arg a u)). Qed.
Lemma lem8310523 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) (u : Q) : (term280 A B D P Q p f pat e t arg a u) = (term399 A B D P Q p f pat e t arg a u).
Proof. exact (@lem17265 (term401 A B D P Q p f t pat u e a) ((arg a t) = (arg a u))). Qed.
Lemma lem8310524 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) (u : Q) : (term280 A B D P Q p f pat e t arg a u) = (term400 A B D P Q p f pat e t arg a u).
Proof. exact (TRANS (@lem8310523 A B D P Q p f pat e t arg a u) (@lem8310522 A B D P Q p f pat e t arg a u)). Qed.
Lemma lem8310525 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) : (term281 A B D P Q p f pat e t arg a) = (term402 A B D P Q p f pat e t arg a).
Proof. exact (fun_ext (fun u : Q => @lem8310524 A B D P Q p f pat e t arg a u)). Qed.
Lemma lem8310526 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8310527 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) : (term282 A B D P Q p f pat e t arg a) = (term403 A B D P Q p f pat e t arg a).
Proof. exact (MK_COMB (@lem8310526 Q) (@lem8310525 A B D P Q p f pat e t arg a)). Qed.
Lemma lem8310528 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (a : P) : (term283 A B D P Q p f pat e arg a) = (term404 A B D P Q p f pat e arg a).
Proof. exact (fun_ext (fun t : Q => @lem8310527 A B D P Q p f pat e t arg a)). Qed.
Lemma lem8310529 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8310530 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (a : P) : (term284 A B D P Q p f pat e arg a) = (term405 A B D P Q p f pat e arg a).
Proof. exact (MK_COMB (@lem8310529 Q) (@lem8310528 A B D P Q p f pat e arg a)). Qed.
Lemma lem8310531 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term285 A B D P Q p f pat e arg) = (term406 A B D P Q p f pat e arg).
Proof. exact (fun_ext (fun a : P => @lem8310530 A B D P Q p f pat e arg a)). Qed.
Lemma lem8310532 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8310533 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term286 A B D P Q p f pat e arg) = (term407 A B D P Q p f pat e arg).
Proof. exact (MK_COMB (@lem8310532 P) (@lem8310531 A B D P Q p f pat e arg)). Qed.
Lemma lem8310534 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term287 A B D P Q p pat e arg) = (term408 A B D P Q p pat e arg).
Proof. exact (fun_ext (fun f : A -> B => @lem8310533 A B D P Q p f pat e arg)). Qed.
Lemma lem8310535 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8310600 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term36 A B D P Q p pat e arg) = (term409 A B D P Q p pat e arg).
Proof. exact (MK_COMB (@lem8310535 A B) (@lem8310534 A B D P Q p pat e arg)). Qed.
Lemma lem8310601 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term409 A B D P Q p pat e arg.
Proof. exact (EQ_MP (@lem8310600 A B D P Q p pat e arg) (@lem8309866 A B D P Q p pat e arg h1)). Qed.
Lemma lem8310608 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term1762 A B D P Q p f pat t e a) = (term1763 A B D P Q p f pat t e a).
Proof. exact (@lem17045 (p f a) ((pat t) = (e a))). Qed.
Lemma lem8310615 {A P Q : Type'} (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term269 A P Q arg t lt2 y s a) = (term1764 A P Q arg t lt2 y s a).
Proof. exact (@lem17265 (term1765 A P Q lt2 y arg a t) (term1053 A P lt2 y s a)). Qed.
Lemma lem8310616 {A P Q : Type'} (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term270 A P Q arg t lt2 s a) = (term1766 A P Q arg t lt2 s a).
Proof. exact (fun_ext (fun y : A => @lem8310615 A P Q arg t lt2 y s a)). Qed.
Lemma lem8310617 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8310618 {A P Q : Type'} (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term271 A P Q arg t lt2 s a) = (term1767 A P Q arg t lt2 s a).
Proof. exact (MK_COMB (@lem8310617 A) (@lem8310616 A P Q arg t lt2 s a)). Qed.
Lemma lem8310619 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8310620 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term1768 A B D P Q p f pat t e a) = (term1769 A B D P Q p f pat t e a).
Proof. exact (MK_COMB (@lem8310619) (@lem8310608 A B D P Q p f pat t e a)). Qed.
Lemma lem8310621 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term1770 A B D P Q p f pat e arg t lt2 s a) = (term1771 A B D P Q p f pat e arg t lt2 s a).
Proof. exact (MK_COMB (@lem8310620 A B D P Q p f pat t e a) (@lem8310618 A P Q arg t lt2 s a)). Qed.
Lemma lem8310622 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term273 A B D P Q p f pat e arg t lt2 s a) = (term1770 A B D P Q p f pat e arg t lt2 s a).
Proof. exact (@lem17265 (term1772 A B D P Q p f pat t e a) (term271 A P Q arg t lt2 s a)). Qed.
Lemma lem8310623 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term273 A B D P Q p f pat e arg t lt2 s a) = (term1771 A B D P Q p f pat e arg t lt2 s a).
Proof. exact (TRANS (@lem8310622 A B D P Q p f pat e arg t lt2 s a) (@lem8310621 A B D P Q p f pat e arg t lt2 s a)). Qed.
Lemma lem8310624 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term274 A B D P Q p f pat e arg lt2 s a) = (term1773 A B D P Q p f pat e arg lt2 s a).
Proof. exact (fun_ext (fun t : Q => @lem8310623 A B D P Q p f pat e arg t lt2 s a)). Qed.
Lemma lem8310625 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8310626 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term275 A B D P Q p f pat e arg lt2 s a) = (term1774 A B D P Q p f pat e arg lt2 s a).
Proof. exact (MK_COMB (@lem8310625 Q) (@lem8310624 A B D P Q p f pat e arg lt2 s a)). Qed.
Lemma lem8310627 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term276 A B D P Q p f pat e arg lt2 s) = (term1775 A B D P Q p f pat e arg lt2 s).
Proof. exact (fun_ext (fun a : P => @lem8310626 A B D P Q p f pat e arg lt2 s a)). Qed.
Lemma lem8310628 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8310629 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term277 A B D P Q p f pat e arg lt2 s) = (term1776 A B D P Q p f pat e arg lt2 s).
Proof. exact (MK_COMB (@lem8310628 P) (@lem8310627 A B D P Q p f pat e arg lt2 s)). Qed.
Lemma lem8310630 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term278 A B D P Q p pat e arg lt2 s) = (term1777 A B D P Q p pat e arg lt2 s).
Proof. exact (fun_ext (fun f : A -> B => @lem8310629 A B D P Q p f pat e arg lt2 s)). Qed.
Lemma lem8310631 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8310740 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term35 A B D P Q p pat e arg lt2 s) = (term1778 A B D P Q p pat e arg lt2 s).
Proof. exact (MK_COMB (@lem8310631 A B) (@lem8310630 A B D P Q p pat e arg lt2 s)). Qed.
Lemma lem8310741 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term35 A B D P Q p pat e arg lt2 s) : term1778 A B D P Q p pat e arg lt2 s.
Proof. exact (EQ_MP (@lem8310740 A B D P Q p pat e arg lt2 s) (@lem8309867 A B D P Q p pat e arg lt2 s h1)). Qed.
Lemma lem8310748 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) (z : A) : (term1779 A B P lt2 s a f g z) = (term1780 A B P lt2 s a f g z).
Proof. exact (@lem17362 (term1053 A P lt2 z s a) ((f z) = (g z))). Qed.
Lemma lem8310749 {A : Type'} (P : A -> Prop) : (term1781 A P) = (term1782 A P).
Proof. exact (@lem18392 A P). Qed.
Lemma lem8310750 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1783 A B P lt2 s a f g) = (term1784 A B P lt2 s a f g).
Proof. exact (@lem8310749 A (term1519 A B P lt2 s a f g)). Qed.
Lemma lem8310751 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) (z : A) : (term1785 A B P lt2 s a f g z) = (term1518 A B P lt2 s a f g z).
Proof. exact (eq_refl (term1785 A B P lt2 s a f g z)). Qed.
Lemma lem8310752 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8310753 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) (z : A) : (term1786 A B P lt2 s a f g z) = (term1779 A B P lt2 s a f g z).
Proof. exact (MK_COMB (@lem8310752) (@lem8310751 A B P lt2 s a f g z)). Qed.
Lemma lem8310754 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) (z : A) : (term1786 A B P lt2 s a f g z) = (term1780 A B P lt2 s a f g z).
Proof. exact (TRANS (@lem8310753 A B P lt2 s a f g z) (@lem8310748 A B P lt2 s a f g z)). Qed.
Lemma lem8310755 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1787 A B P lt2 s a f g) = (term1788 A B P lt2 s a f g).
Proof. exact (fun_ext (fun z : A => @lem8310754 A B P lt2 s a f g z)). Qed.
Lemma lem8310756 {A : Type'} : (@ex A) = (@ex A).
Proof. exact (eq_refl (@ex A)). Qed.
Lemma lem8310757 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1784 A B P lt2 s a f g) = (term1789 A B P lt2 s a f g).
Proof. exact (MK_COMB (@lem8310756 A) (@lem8310755 A B P lt2 s a f g)). Qed.
Lemma lem8310758 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1783 A B P lt2 s a f g) = (term1789 A B P lt2 s a f g).
Proof. exact (TRANS (@lem8310750 A B P lt2 s a f g) (@lem8310757 A B P lt2 s a f g)). Qed.
Lemma lem8310773 {A B P : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : ((p f a) = (p g a)) = (term1790 A B P f p g a).
Proof. exact (@lem17784 (p f a) (p g a)). Qed.
Lemma lem8310774 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8310775 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1791 A B P lt2 s a f g) = (term1792 A B P lt2 s a f g).
Proof. exact (MK_COMB (@lem8310774) (@lem8310758 A B P lt2 s a f g)). Qed.
Lemma lem8310776 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term1793 A B P lt2 s f p g a) = (term1794 A B P lt2 s f p g a).
Proof. exact (MK_COMB (@lem8310775 A B P lt2 s a f g) (@lem8310773 A B P f p g a)). Qed.
Lemma lem8310777 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term1039 A B P lt2 s f p g a) = (term1793 A B P lt2 s f p g a).
Proof. exact (@lem17265 (term1032 A B P lt2 s a f g) ((p f a) = (p g a))). Qed.
Lemma lem8310778 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term1039 A B P lt2 s f p g a) = (term1794 A B P lt2 s f p g a).
Proof. exact (TRANS (@lem8310777 A B P lt2 s f p g a) (@lem8310776 A B P lt2 s f p g a)). Qed.
Lemma lem8310779 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1041 A B P lt2 s f p g) = (term1795 A B P lt2 s f p g).
Proof. exact (fun_ext (fun a : P => @lem8310778 A B P lt2 s f p g a)). Qed.
Lemma lem8310780 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8310781 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1043 A B P lt2 s f p g) = (term1796 A B P lt2 s f p g).
Proof. exact (MK_COMB (@lem8310780 P) (@lem8310779 A B P lt2 s f p g)). Qed.
Lemma lem8310782 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) : (term1045 A B P lt2 s f p) = (term1797 A B P lt2 s f p).
Proof. exact (fun_ext (fun g : A -> B => @lem8310781 A B P lt2 s f p g)). Qed.
Lemma lem8310783 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8310784 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) : (term1047 A B P lt2 s f p) = (term1798 A B P lt2 s f p).
Proof. exact (MK_COMB (@lem8310783 A B) (@lem8310782 A B P lt2 s f p)). Qed.
Lemma lem8310785 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term1049 A B P lt2 s p) = (term1799 A B P lt2 s p).
Proof. exact (fun_ext (fun f : A -> B => @lem8310784 A B P lt2 s f p)). Qed.
Lemma lem8310786 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8310787 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term1050 A B P lt2 s p) = (term1800 A B P lt2 s p).
Proof. exact (MK_COMB (@lem8310786 A B) (@lem8310785 A B P lt2 s p)). Qed.
Lemma lem8310894 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1801 A P Q) = (term1802 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8310895 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1801 A P Q) = (term1802 A P Q).
Proof. exact (@lem8310894 A P Q). Qed.
Lemma lem8310896 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term1803 A B P lt2 s f p g a) = (term1804 A B P lt2 s f p g a).
Proof. exact (@lem8310895 A (term1788 A B P lt2 s a f g) (term1790 A B P f p g a)). Qed.
Lemma lem8310897 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) (z : A) : (term1805 A B P lt2 s a f g z) = (term1780 A B P lt2 s a f g z).
Proof. exact (eq_refl (term1805 A B P lt2 s a f g z)). Qed.
Lemma lem8310898 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1806 A B P lt2 s a f g) = (term1788 A B P lt2 s a f g).
Proof. exact (fun_ext (fun z : A => @lem8310897 A B P lt2 s a f g z)). Qed.
Lemma lem8310899 {A : Type'} : (@ex A) = (@ex A).
Proof. exact (eq_refl (@ex A)). Qed.
Lemma lem8310900 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1807 A B P lt2 s a f g) = (term1789 A B P lt2 s a f g).
Proof. exact (MK_COMB (@lem8310899 A) (@lem8310898 A B P lt2 s a f g)). Qed.
Lemma lem8310901 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8310902 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1808 A B P lt2 s a f g) = (term1792 A B P lt2 s a f g).
Proof. exact (MK_COMB (@lem8310901) (@lem8310900 A B P lt2 s a f g)). Qed.
Lemma lem8310903 {A B P : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term1790 A B P f p g a) = (term1790 A B P f p g a).
Proof. exact (eq_refl (term1790 A B P f p g a)). Qed.
Lemma lem8310904 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term1803 A B P lt2 s f p g a) = (term1794 A B P lt2 s f p g a).
Proof. exact (MK_COMB (@lem8310902 A B P lt2 s a f g) (@lem8310903 A B P f p g a)). Qed.
Lemma lem8310905 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8310906 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term1809 A B P lt2 s f p g a) = (term1810 A B P lt2 s f p g a).
Proof. exact (MK_COMB (@lem8310905) (@lem8310904 A B P lt2 s f p g a)). Qed.
Lemma lem8310907 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) (z : A) : (term1805 A B P lt2 s a f g z) = (term1780 A B P lt2 s a f g z).
Proof. exact (eq_refl (term1805 A B P lt2 s a f g z)). Qed.
Lemma lem8310908 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8310909 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) (z : A) : (term1811 A B P lt2 s a f g z) = (term1812 A B P lt2 s a f g z).
Proof. exact (MK_COMB (@lem8310908) (@lem8310907 A B P lt2 s a f g z)). Qed.
Lemma lem8310910 {A B P : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term1790 A B P f p g a) = (term1790 A B P f p g a).
Proof. exact (eq_refl (term1790 A B P f p g a)). Qed.
Lemma lem8310911 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : A) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term1813 A B P lt2 s z f p g a) = (term1814 A B P lt2 s z f p g a).
Proof. exact (MK_COMB (@lem8310909 A B P lt2 s a f g z) (@lem8310910 A B P f p g a)). Qed.
Lemma lem8310912 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term1815 A B P lt2 s f p g a) = (term1816 A B P lt2 s f p g a).
Proof. exact (fun_ext (fun z : A => @lem8310911 A B P lt2 s z f p g a)). Qed.
Lemma lem8310913 {A : Type'} : (@ex A) = (@ex A).
Proof. exact (eq_refl (@ex A)). Qed.
Lemma lem8310914 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term1804 A B P lt2 s f p g a) = (term1817 A B P lt2 s f p g a).
Proof. exact (MK_COMB (@lem8310913 A) (@lem8310912 A B P lt2 s f p g a)). Qed.
Lemma lem8310915 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : ((term1803 A B P lt2 s f p g a) = (term1804 A B P lt2 s f p g a)) = ((term1794 A B P lt2 s f p g a) = (term1817 A B P lt2 s f p g a)).
Proof. exact (MK_COMB (@lem8310906 A B P lt2 s f p g a) (@lem8310914 A B P lt2 s f p g a)). Qed.
Lemma lem8310916 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term1794 A B P lt2 s f p g a) = (term1817 A B P lt2 s f p g a).
Proof. exact (EQ_MP (@lem8310915 A B P lt2 s f p g a) (@lem8310896 A B P lt2 s f p g a)). Qed.
Lemma lem8310917 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1795 A B P lt2 s f p g) = (term1818 A B P lt2 s f p g).
Proof. exact (fun_ext (fun a : P => @lem8310916 A B P lt2 s f p g a)). Qed.
Lemma lem8310918 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8310919 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1796 A B P lt2 s f p g) = (term1819 A B P lt2 s f p g).
Proof. exact (MK_COMB (@lem8310918 P) (@lem8310917 A B P lt2 s f p g)). Qed.
Lemma lem8310921 {A B : Type'} (P : type1413 A B) : (term1612 A B P) = (term1613 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8310922 {A P : Type'} (P' : type1470 A P) : (term1820 A P P') = (term1821 A P P').
Proof. exact (@lem8310921 P A P'). Qed.
Lemma lem8310923 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1822 A B P lt2 s f p g) = (term1823 A B P lt2 s f p g).
Proof. exact (@lem8310922 A P (term1824 A B P lt2 s f p g)). Qed.
Lemma lem8310924 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term1825 A B P lt2 s f p g a) = (term1816 A B P lt2 s f p g a).
Proof. exact (eq_refl (term1825 A B P lt2 s f p g a)). Qed.
Lemma lem8310925 {A : Type'} (z : A) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8310926 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) (z : A) : (term1826 A B P lt2 s f p g a z) = (term1827 A B P lt2 s f p g a z).
Proof. exact (MK_COMB (@lem8310924 A B P lt2 s f p g a) (@lem8310925 A z)). Qed.
Lemma lem8310927 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : A) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term1827 A B P lt2 s f p g a z) = (term1814 A B P lt2 s z f p g a).
Proof. exact (eq_refl (term1827 A B P lt2 s f p g a z)). Qed.
Lemma lem8310928 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : A) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term1826 A B P lt2 s f p g a z) = (term1814 A B P lt2 s z f p g a).
Proof. exact (TRANS (@lem8310926 A B P lt2 s f p g a z) (@lem8310927 A B P lt2 s z f p g a)). Qed.
Lemma lem8310929 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term1828 A B P lt2 s f p g a) = (term1816 A B P lt2 s f p g a).
Proof. exact (fun_ext (fun z : A => @lem8310928 A B P lt2 s z f p g a)). Qed.
Lemma lem8310930 {A : Type'} : (@ex A) = (@ex A).
Proof. exact (eq_refl (@ex A)). Qed.
Lemma lem8310931 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term1829 A B P lt2 s f p g a) = (term1817 A B P lt2 s f p g a).
Proof. exact (MK_COMB (@lem8310930 A) (@lem8310929 A B P lt2 s f p g a)). Qed.
Lemma lem8310932 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1830 A B P lt2 s f p g) = (term1818 A B P lt2 s f p g).
Proof. exact (fun_ext (fun a : P => @lem8310931 A B P lt2 s f p g a)). Qed.
Lemma lem8310933 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8310934 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1822 A B P lt2 s f p g) = (term1819 A B P lt2 s f p g).
Proof. exact (MK_COMB (@lem8310933 P) (@lem8310932 A B P lt2 s f p g)). Qed.
Lemma lem8310935 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8310936 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1831 A B P lt2 s f p g) = (term1832 A B P lt2 s f p g).
Proof. exact (MK_COMB (@lem8310935) (@lem8310934 A B P lt2 s f p g)). Qed.
Lemma lem8310937 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term1825 A B P lt2 s f p g a) = (term1816 A B P lt2 s f p g a).
Proof. exact (eq_refl (term1825 A B P lt2 s f p g a)). Qed.
Lemma lem8310938 {A P : Type'} (z : P -> A) (a : P) : (z a) = (z a).
Proof. exact (eq_refl (z a)). Qed.
Lemma lem8310939 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (z : P -> A) (a : P) : (term1833 A B P lt2 s f p g z a) = (term1834 A B P lt2 s f p g z a).
Proof. exact (MK_COMB (@lem8310937 A B P lt2 s f p g a) (@lem8310938 A P z a)). Qed.
Lemma lem8310940 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term1834 A B P lt2 s f p g z a) = (term1835 A B P lt2 s z f p g a).
Proof. exact (eq_refl (term1834 A B P lt2 s f p g z a)). Qed.
Lemma lem8310941 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term1833 A B P lt2 s f p g z a) = (term1835 A B P lt2 s z f p g a).
Proof. exact (TRANS (@lem8310939 A B P lt2 s f p g z a) (@lem8310940 A B P lt2 s z f p g a)). Qed.
Lemma lem8310942 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1836 A B P lt2 s f p g z) = (term1837 A B P lt2 s z f p g).
Proof. exact (fun_ext (fun a : P => @lem8310941 A B P lt2 s z f p g a)). Qed.
Lemma lem8310943 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8310944 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1838 A B P lt2 s f p g z) = (term1839 A B P lt2 s z f p g).
Proof. exact (MK_COMB (@lem8310943 P) (@lem8310942 A B P lt2 s z f p g)). Qed.
Lemma lem8310945 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1840 A B P lt2 s f p g) = (term1841 A B P lt2 s f p g).
Proof. exact (fun_ext (fun z : P -> A => @lem8310944 A B P lt2 s z f p g)). Qed.
Lemma lem8310946 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8310947 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1823 A B P lt2 s f p g) = (term1842 A B P lt2 s f p g).
Proof. exact (MK_COMB (@lem8310946 A P) (@lem8310945 A B P lt2 s f p g)). Qed.
Lemma lem8310948 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : ((term1822 A B P lt2 s f p g) = (term1823 A B P lt2 s f p g)) = ((term1819 A B P lt2 s f p g) = (term1842 A B P lt2 s f p g)).
Proof. exact (MK_COMB (@lem8310936 A B P lt2 s f p g) (@lem8310947 A B P lt2 s f p g)). Qed.
Lemma lem8310949 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1819 A B P lt2 s f p g) = (term1842 A B P lt2 s f p g).
Proof. exact (EQ_MP (@lem8310948 A B P lt2 s f p g) (@lem8310923 A B P lt2 s f p g)). Qed.
Lemma lem8310950 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1796 A B P lt2 s f p g) = (term1842 A B P lt2 s f p g).
Proof. exact (TRANS (@lem8310919 A B P lt2 s f p g) (@lem8310949 A B P lt2 s f p g)). Qed.
Lemma lem8310951 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) : (term1797 A B P lt2 s f p) = (term1843 A B P lt2 s f p).
Proof. exact (fun_ext (fun g : A -> B => @lem8310950 A B P lt2 s f p g)). Qed.
Lemma lem8310952 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8310953 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) : (term1798 A B P lt2 s f p) = (term1844 A B P lt2 s f p).
Proof. exact (MK_COMB (@lem8310952 A B) (@lem8310951 A B P lt2 s f p)). Qed.
Lemma lem8310955 {A B : Type'} (P : type1413 A B) : (term1612 A B P) = (term1613 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8310956 {A B P : Type'} (P' : type537 A B P) : (term1845 A B P P') = (term1846 A B P P').
Proof. exact (@lem8310955 (A -> B) (P -> A) P'). Qed.
Lemma lem8310957 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) : (term1847 A B P lt2 s f p) = (term1848 A B P lt2 s f p).
Proof. exact (@lem8310956 A B P (term1849 A B P lt2 s f p)). Qed.
Lemma lem8310958 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1850 A B P lt2 s f p g) = (term1841 A B P lt2 s f p g).
Proof. exact (eq_refl (term1850 A B P lt2 s f p g)). Qed.
Lemma lem8310959 {A P : Type'} (z : P -> A) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8310960 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (z : P -> A) : (term1851 A B P lt2 s f p g z) = (term1852 A B P lt2 s f p g z).
Proof. exact (MK_COMB (@lem8310958 A B P lt2 s f p g) (@lem8310959 A P z)). Qed.
Lemma lem8310961 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1852 A B P lt2 s f p g z) = (term1839 A B P lt2 s z f p g).
Proof. exact (eq_refl (term1852 A B P lt2 s f p g z)). Qed.
Lemma lem8310962 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1851 A B P lt2 s f p g z) = (term1839 A B P lt2 s z f p g).
Proof. exact (TRANS (@lem8310960 A B P lt2 s f p g z) (@lem8310961 A B P lt2 s z f p g)). Qed.
Lemma lem8310963 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1853 A B P lt2 s f p g) = (term1841 A B P lt2 s f p g).
Proof. exact (fun_ext (fun z : P -> A => @lem8310962 A B P lt2 s z f p g)). Qed.
Lemma lem8310964 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8310965 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1854 A B P lt2 s f p g) = (term1842 A B P lt2 s f p g).
Proof. exact (MK_COMB (@lem8310964 A P) (@lem8310963 A B P lt2 s f p g)). Qed.
Lemma lem8310966 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) : (term1855 A B P lt2 s f p) = (term1843 A B P lt2 s f p).
Proof. exact (fun_ext (fun g : A -> B => @lem8310965 A B P lt2 s f p g)). Qed.
Lemma lem8310967 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8310968 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) : (term1847 A B P lt2 s f p) = (term1844 A B P lt2 s f p).
Proof. exact (MK_COMB (@lem8310967 A B) (@lem8310966 A B P lt2 s f p)). Qed.
Lemma lem8310969 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8310970 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) : (term1856 A B P lt2 s f p) = (term1857 A B P lt2 s f p).
Proof. exact (MK_COMB (@lem8310969) (@lem8310968 A B P lt2 s f p)). Qed.
Lemma lem8310971 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1850 A B P lt2 s f p g) = (term1841 A B P lt2 s f p g).
Proof. exact (eq_refl (term1850 A B P lt2 s f p g)). Qed.
Lemma lem8310972 {A B P : Type'} (z : type557 A B P) (g : A -> B) : (z g) = (z g).
Proof. exact (eq_refl (z g)). Qed.
Lemma lem8310973 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (z : type557 A B P) (g : A -> B) : (term1858 A B P lt2 s f p z g) = (term1859 A B P lt2 s f p z g).
Proof. exact (MK_COMB (@lem8310971 A B P lt2 s f p g) (@lem8310972 A B P z g)). Qed.
Lemma lem8310974 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type557 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1859 A B P lt2 s f p z g) = (term1860 A B P lt2 s z f p g).
Proof. exact (eq_refl (term1859 A B P lt2 s f p z g)). Qed.
Lemma lem8310975 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type557 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term1858 A B P lt2 s f p z g) = (term1860 A B P lt2 s z f p g).
Proof. exact (TRANS (@lem8310973 A B P lt2 s f p z g) (@lem8310974 A B P lt2 s z f p g)). Qed.
Lemma lem8310976 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type557 A B P) (f : A -> B) (p : type560 A B P) : (term1861 A B P lt2 s f p z) = (term1862 A B P lt2 s z f p).
Proof. exact (fun_ext (fun g : A -> B => @lem8310975 A B P lt2 s z f p g)). Qed.
Lemma lem8310977 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8310978 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type557 A B P) (f : A -> B) (p : type560 A B P) : (term1863 A B P lt2 s f p z) = (term1864 A B P lt2 s z f p).
Proof. exact (MK_COMB (@lem8310977 A B) (@lem8310976 A B P lt2 s z f p)). Qed.
Lemma lem8310979 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) : (term1865 A B P lt2 s f p) = (term1866 A B P lt2 s f p).
Proof. exact (fun_ext (fun z : type557 A B P => @lem8310978 A B P lt2 s z f p)). Qed.
Lemma lem8310980 {A B P : Type'} : (@ex ((A -> B) -> P -> A)) = (@ex ((A -> B) -> P -> A)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> A))). Qed.
Lemma lem8310981 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) : (term1848 A B P lt2 s f p) = (term1867 A B P lt2 s f p).
Proof. exact (MK_COMB (@lem8310980 A B P) (@lem8310979 A B P lt2 s f p)). Qed.
Lemma lem8310982 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) : ((term1847 A B P lt2 s f p) = (term1848 A B P lt2 s f p)) = ((term1844 A B P lt2 s f p) = (term1867 A B P lt2 s f p)).
Proof. exact (MK_COMB (@lem8310970 A B P lt2 s f p) (@lem8310981 A B P lt2 s f p)). Qed.
Lemma lem8310983 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) : (term1844 A B P lt2 s f p) = (term1867 A B P lt2 s f p).
Proof. exact (EQ_MP (@lem8310982 A B P lt2 s f p) (@lem8310957 A B P lt2 s f p)). Qed.
Lemma lem8310984 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) : (term1798 A B P lt2 s f p) = (term1867 A B P lt2 s f p).
Proof. exact (TRANS (@lem8310953 A B P lt2 s f p) (@lem8310983 A B P lt2 s f p)). Qed.
Lemma lem8310985 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term1799 A B P lt2 s p) = (term1868 A B P lt2 s p).
Proof. exact (fun_ext (fun f : A -> B => @lem8310984 A B P lt2 s f p)). Qed.
Lemma lem8310986 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8310987 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term1800 A B P lt2 s p) = (term1869 A B P lt2 s p).
Proof. exact (MK_COMB (@lem8310986 A B) (@lem8310985 A B P lt2 s p)). Qed.
Lemma lem8310989 {A B : Type'} (P : type1413 A B) : (term1612 A B P) = (term1613 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8310990 {A B P : Type'} (P' : type495 A B P) : (term1870 A B P P') = (term1871 A B P P').
Proof. exact (@lem8310989 (A -> B) (type557 A B P) P'). Qed.
Lemma lem8310991 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term1872 A B P lt2 s p) = (term1873 A B P lt2 s p).
Proof. exact (@lem8310990 A B P (term1874 A B P lt2 s p)). Qed.
Lemma lem8310992 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) : (term1875 A B P lt2 s p f) = (term1866 A B P lt2 s f p).
Proof. exact (eq_refl (term1875 A B P lt2 s p f)). Qed.
Lemma lem8310993 {A B P : Type'} (z : type557 A B P) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8310994 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (z : type557 A B P) : (term1876 A B P lt2 s p f z) = (term1877 A B P lt2 s f p z).
Proof. exact (MK_COMB (@lem8310992 A B P lt2 s f p) (@lem8310993 A B P z)). Qed.
Lemma lem8310995 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type557 A B P) (f : A -> B) (p : type560 A B P) : (term1877 A B P lt2 s f p z) = (term1864 A B P lt2 s z f p).
Proof. exact (eq_refl (term1877 A B P lt2 s f p z)). Qed.
Lemma lem8310996 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type557 A B P) (f : A -> B) (p : type560 A B P) : (term1876 A B P lt2 s p f z) = (term1864 A B P lt2 s z f p).
Proof. exact (TRANS (@lem8310994 A B P lt2 s f p z) (@lem8310995 A B P lt2 s z f p)). Qed.
Lemma lem8310997 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) : (term1878 A B P lt2 s p f) = (term1866 A B P lt2 s f p).
Proof. exact (fun_ext (fun z : type557 A B P => @lem8310996 A B P lt2 s z f p)). Qed.
Lemma lem8310998 {A B P : Type'} : (@ex ((A -> B) -> P -> A)) = (@ex ((A -> B) -> P -> A)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> A))). Qed.
Lemma lem8310999 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) : (term1879 A B P lt2 s p f) = (term1867 A B P lt2 s f p).
Proof. exact (MK_COMB (@lem8310998 A B P) (@lem8310997 A B P lt2 s f p)). Qed.
Lemma lem8311000 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term1880 A B P lt2 s p) = (term1868 A B P lt2 s p).
Proof. exact (fun_ext (fun f : A -> B => @lem8310999 A B P lt2 s f p)). Qed.
Lemma lem8311001 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8311002 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term1872 A B P lt2 s p) = (term1869 A B P lt2 s p).
Proof. exact (MK_COMB (@lem8311001 A B) (@lem8311000 A B P lt2 s p)). Qed.
Lemma lem8311003 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8311004 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term1881 A B P lt2 s p) = (term1882 A B P lt2 s p).
Proof. exact (MK_COMB (@lem8311003) (@lem8311002 A B P lt2 s p)). Qed.
Lemma lem8311005 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) : (term1875 A B P lt2 s p f) = (term1866 A B P lt2 s f p).
Proof. exact (eq_refl (term1875 A B P lt2 s p f)). Qed.
Lemma lem8311006 {A B P : Type'} (z : type518 A B P) (f : A -> B) : (z f) = (z f).
Proof. exact (eq_refl (z f)). Qed.
Lemma lem8311007 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (z : type518 A B P) (f : A -> B) : (term1883 A B P lt2 s p z f) = (term1884 A B P lt2 s p z f).
Proof. exact (MK_COMB (@lem8311005 A B P lt2 s f p) (@lem8311006 A B P z f)). Qed.
Lemma lem8311008 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) : (term1884 A B P lt2 s p z f) = (term1885 A B P lt2 s z f p).
Proof. exact (eq_refl (term1884 A B P lt2 s p z f)). Qed.
Lemma lem8311009 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) : (term1883 A B P lt2 s p z f) = (term1885 A B P lt2 s z f p).
Proof. exact (TRANS (@lem8311007 A B P lt2 s p z f) (@lem8311008 A B P lt2 s z f p)). Qed.
Lemma lem8311010 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) : (term1886 A B P lt2 s p z) = (term1887 A B P lt2 s z p).
Proof. exact (fun_ext (fun f : A -> B => @lem8311009 A B P lt2 s z f p)). Qed.
Lemma lem8311011 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8311012 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) : (term1888 A B P lt2 s p z) = (term1889 A B P lt2 s z p).
Proof. exact (MK_COMB (@lem8311011 A B) (@lem8311010 A B P lt2 s z p)). Qed.
Lemma lem8311013 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term1890 A B P lt2 s p) = (term1891 A B P lt2 s p).
Proof. exact (fun_ext (fun z : type518 A B P => @lem8311012 A B P lt2 s z p)). Qed.
Lemma lem8311014 {A B P : Type'} : (@ex ((A -> B) -> (A -> B) -> P -> A)) = (@ex ((A -> B) -> (A -> B) -> P -> A)).
Proof. exact (eq_refl (@ex ((A -> B) -> (A -> B) -> P -> A))). Qed.
Lemma lem8311015 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term1873 A B P lt2 s p) = (term1892 A B P lt2 s p).
Proof. exact (MK_COMB (@lem8311014 A B P) (@lem8311013 A B P lt2 s p)). Qed.
Lemma lem8311016 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : ((term1872 A B P lt2 s p) = (term1873 A B P lt2 s p)) = ((term1869 A B P lt2 s p) = (term1892 A B P lt2 s p)).
Proof. exact (MK_COMB (@lem8311004 A B P lt2 s p) (@lem8311015 A B P lt2 s p)). Qed.
Lemma lem8311017 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term1869 A B P lt2 s p) = (term1892 A B P lt2 s p).
Proof. exact (EQ_MP (@lem8311016 A B P lt2 s p) (@lem8310991 A B P lt2 s p)). Qed.
Lemma lem8311019 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term1800 A B P lt2 s p) = (term1892 A B P lt2 s p).
Proof. exact (TRANS (@lem8310987 A B P lt2 s p) (@lem8311017 A B P lt2 s p)). Qed.
Lemma lem8311020 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term1050 A B P lt2 s p) = (term1892 A B P lt2 s p).
Proof. exact (TRANS (@lem8310787 A B P lt2 s p) (@lem8311019 A B P lt2 s p)). Qed.
Lemma lem8311021 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term1050 A B P lt2 s p) : term1892 A B P lt2 s p.
Proof. exact (EQ_MP (@lem8311020 A B P lt2 s p) (@lem8309868 A B P lt2 s p h1)). Qed.
Lemma lem8311023 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : ((pat t) = (e a)) = ((pat t) = (e a)).
Proof. exact (eq_refl ((pat t) = (e a))). Qed.
Lemma lem8311024 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term258 D P Q pat e a) = (term258 D P Q pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311023 D P Q pat t e a)). Qed.
Lemma lem8311025 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311026 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term169 D P Q pat e a) = (term169 D P Q pat e a).
Proof. exact (MK_COMB (@lem8311025 Q) (@lem8311024 D P Q pat e a)). Qed.
Lemma lem8311028 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term1178 A B P p f a) = (term1178 A B P p f a).
Proof. exact (eq_refl (term1178 A B P p f a)). Qed.
Lemma lem8311029 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1068 A B D P Q p f pat e a) = (term1068 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8311028 A B P p f a) (@lem8311026 D P Q pat e a)). Qed.
Lemma lem8311030 {A D P Q : Type'} (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1258 A D P Q lt2 y arg _111928 pat e a) = (term1258 A D P Q lt2 y arg _111928 pat e a).
Proof. exact (eq_refl (term1258 A D P Q lt2 y arg _111928 pat e a)). Qed.
Lemma lem8311031 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8311032 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1073 A B D P Q p f pat e a) = (term1073 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8311031) (@lem8311029 A B D P Q p f pat e a)). Qed.
Lemma lem8311033 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1259 A B D P Q p f lt2 y arg _111928 pat e a) = (term1259 A B D P Q p f lt2 y arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8311032 A B D P Q p f pat e a) (@lem8311030 A D P Q lt2 y arg _111928 pat e a)). Qed.
Lemma lem8311034 {A P : Type'} (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term1893 A P lt2 y s a) = (term1893 A P lt2 y s a).
Proof. exact (eq_refl (term1893 A P lt2 y s a)). Qed.
Lemma lem8311035 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8311036 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1894 A B D P Q p f lt2 y arg _111928 pat e a) = (term1894 A B D P Q p f lt2 y arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8311035) (@lem8311033 A B D P Q p f lt2 y arg _111928 pat e a)). Qed.
Lemma lem8311037 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term1895 A B D P Q p f arg _111928 pat e lt2 y s a) = (term1895 A B D P Q p f arg _111928 pat e lt2 y s a).
Proof. exact (MK_COMB (@lem8311036 A B D P Q p f lt2 y arg _111928 pat e a) (@lem8311034 A P lt2 y s a)). Qed.
Lemma lem8311038 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term1896 A B D P Q p f arg _111928 pat e lt2 y s a) = (term1895 A B D P Q p f arg _111928 pat e lt2 y s a).
Proof. exact (@lem17362 (term1259 A B D P Q p f lt2 y arg _111928 pat e a) (term1053 A P lt2 y s a)). Qed.
Lemma lem8311039 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term1896 A B D P Q p f arg _111928 pat e lt2 y s a) = (term1895 A B D P Q p f arg _111928 pat e lt2 y s a).
Proof. exact (TRANS (@lem8311038 A B D P Q p f arg _111928 pat e lt2 y s a) (@lem8311037 A B D P Q p f arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8311040 {A : Type'} (P : A -> Prop) : (term1781 A P) = (term1782 A P).
Proof. exact (@lem18392 A P). Qed.
Lemma lem8311041 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (a : P) : (term1897 A B D P Q p f arg _111928 pat e lt2 s a) = (term1898 A B D P Q p f arg _111928 pat e lt2 s a).
Proof. exact (@lem8311040 A (term1263 A B D P Q p f arg _111928 pat e lt2 s a)). Qed.
Lemma lem8311042 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term1899 A B D P Q p f arg _111928 pat e lt2 s a y) = (term1262 A B D P Q p f arg _111928 pat e lt2 y s a).
Proof. exact (eq_refl (term1899 A B D P Q p f arg _111928 pat e lt2 s a y)). Qed.
Lemma lem8311043 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8311044 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term1900 A B D P Q p f arg _111928 pat e lt2 s a y) = (term1896 A B D P Q p f arg _111928 pat e lt2 y s a).
Proof. exact (MK_COMB (@lem8311043) (@lem8311042 A B D P Q p f arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8311045 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term1900 A B D P Q p f arg _111928 pat e lt2 s a y) = (term1895 A B D P Q p f arg _111928 pat e lt2 y s a).
Proof. exact (TRANS (@lem8311044 A B D P Q p f arg _111928 pat e lt2 y s a) (@lem8311039 A B D P Q p f arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8311046 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (a : P) : (term1901 A B D P Q p f arg _111928 pat e lt2 s a) = (term1902 A B D P Q p f arg _111928 pat e lt2 s a).
Proof. exact (fun_ext (fun y : A => @lem8311045 A B D P Q p f arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8311047 {A : Type'} : (@ex A) = (@ex A).
Proof. exact (eq_refl (@ex A)). Qed.
Lemma lem8311048 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (a : P) : (term1898 A B D P Q p f arg _111928 pat e lt2 s a) = (term1903 A B D P Q p f arg _111928 pat e lt2 s a).
Proof. exact (MK_COMB (@lem8311047 A) (@lem8311046 A B D P Q p f arg _111928 pat e lt2 s a)). Qed.
Lemma lem8311049 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (a : P) : (term1897 A B D P Q p f arg _111928 pat e lt2 s a) = (term1903 A B D P Q p f arg _111928 pat e lt2 s a).
Proof. exact (TRANS (@lem8311041 A B D P Q p f arg _111928 pat e lt2 s a) (@lem8311048 A B D P Q p f arg _111928 pat e lt2 s a)). Qed.
Lemma lem8311050 {P : Type'} (P' : P -> Prop) : (term1781 P P') = (term1782 P P').
Proof. exact (@lem18392 P P'). Qed.
Lemma lem8311051 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1904 A B D P Q p f arg _111928 pat e lt2 s) = (term1905 A B D P Q p f arg _111928 pat e lt2 s).
Proof. exact (@lem8311050 P (term1265 A B D P Q p f arg _111928 pat e lt2 s)). Qed.
Lemma lem8311052 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (a : P) : (term1906 A B D P Q p f arg _111928 pat e lt2 s a) = (term1264 A B D P Q p f arg _111928 pat e lt2 s a).
Proof. exact (eq_refl (term1906 A B D P Q p f arg _111928 pat e lt2 s a)). Qed.
Lemma lem8311053 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8311054 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (a : P) : (term1907 A B D P Q p f arg _111928 pat e lt2 s a) = (term1897 A B D P Q p f arg _111928 pat e lt2 s a).
Proof. exact (MK_COMB (@lem8311053) (@lem8311052 A B D P Q p f arg _111928 pat e lt2 s a)). Qed.
Lemma lem8311055 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (a : P) : (term1907 A B D P Q p f arg _111928 pat e lt2 s a) = (term1903 A B D P Q p f arg _111928 pat e lt2 s a).
Proof. exact (TRANS (@lem8311054 A B D P Q p f arg _111928 pat e lt2 s a) (@lem8311049 A B D P Q p f arg _111928 pat e lt2 s a)). Qed.
Lemma lem8311056 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1908 A B D P Q p f arg _111928 pat e lt2 s) = (term1909 A B D P Q p f arg _111928 pat e lt2 s).
Proof. exact (fun_ext (fun a : P => @lem8311055 A B D P Q p f arg _111928 pat e lt2 s a)). Qed.
Lemma lem8311057 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8311058 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1905 A B D P Q p f arg _111928 pat e lt2 s) = (term1910 A B D P Q p f arg _111928 pat e lt2 s).
Proof. exact (MK_COMB (@lem8311057 P) (@lem8311056 A B D P Q p f arg _111928 pat e lt2 s)). Qed.
Lemma lem8311059 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1904 A B D P Q p f arg _111928 pat e lt2 s) = (term1910 A B D P Q p f arg _111928 pat e lt2 s).
Proof. exact (TRANS (@lem8311051 A B D P Q p f arg _111928 pat e lt2 s) (@lem8311058 A B D P Q p f arg _111928 pat e lt2 s)). Qed.
Lemma lem8311060 {A B : Type'} (P : type572 A B) : (term1911 A B P) = (term1912 A B P).
Proof. exact (@lem18392 (A -> B) P). Qed.
Lemma lem8311061 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1913 A B D P Q p arg _111928 pat e lt2 s) = (term1914 A B D P Q p arg _111928 pat e lt2 s).
Proof. exact (@lem8311060 A B (term1267 A B D P Q p arg _111928 pat e lt2 s)). Qed.
Lemma lem8311062 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1915 A B D P Q p arg _111928 pat e lt2 s f) = (term1266 A B D P Q p f arg _111928 pat e lt2 s).
Proof. exact (eq_refl (term1915 A B D P Q p arg _111928 pat e lt2 s f)). Qed.
Lemma lem8311063 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8311064 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1916 A B D P Q p arg _111928 pat e lt2 s f) = (term1904 A B D P Q p f arg _111928 pat e lt2 s).
Proof. exact (MK_COMB (@lem8311063) (@lem8311062 A B D P Q p f arg _111928 pat e lt2 s)). Qed.
Lemma lem8311065 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1916 A B D P Q p arg _111928 pat e lt2 s f) = (term1910 A B D P Q p f arg _111928 pat e lt2 s).
Proof. exact (TRANS (@lem8311064 A B D P Q p f arg _111928 pat e lt2 s) (@lem8311059 A B D P Q p f arg _111928 pat e lt2 s)). Qed.
Lemma lem8311066 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1917 A B D P Q p arg _111928 pat e lt2 s) = (term1918 A B D P Q p arg _111928 pat e lt2 s).
Proof. exact (fun_ext (fun f : A -> B => @lem8311065 A B D P Q p f arg _111928 pat e lt2 s)). Qed.
Lemma lem8311067 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8311068 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1914 A B D P Q p arg _111928 pat e lt2 s) = (term1919 A B D P Q p arg _111928 pat e lt2 s).
Proof. exact (MK_COMB (@lem8311067 A B) (@lem8311066 A B D P Q p arg _111928 pat e lt2 s)). Qed.
Lemma lem8311069 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1913 A B D P Q p arg _111928 pat e lt2 s) = (term1919 A B D P Q p arg _111928 pat e lt2 s).
Proof. exact (TRANS (@lem8311061 A B D P Q p arg _111928 pat e lt2 s) (@lem8311068 A B D P Q p arg _111928 pat e lt2 s)). Qed.
Lemma lem8311076 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) (z : A) : (term1518 A B P lt2 s a f g z) = (term1920 A B P lt2 s a f g z).
Proof. exact (@lem17265 (term1053 A P lt2 z s a) ((f z) = (g z))). Qed.
Lemma lem8311077 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1519 A B P lt2 s a f g) = (term1921 A B P lt2 s a f g).
Proof. exact (fun_ext (fun z : A => @lem8311076 A B P lt2 s a f g z)). Qed.
Lemma lem8311078 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8311079 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1032 A B P lt2 s a f g) = (term1922 A B P lt2 s a f g).
Proof. exact (MK_COMB (@lem8311078 A) (@lem8311077 A B P lt2 s a f g)). Qed.
Lemma lem8311083 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : ((pat t) = (e a)) = ((pat t) = (e a)).
Proof. exact (eq_refl ((pat t) = (e a))). Qed.
Lemma lem8311084 {Q : Type'} (P : Q -> Prop) : (term412 Q P) = (term413 Q P).
Proof. exact (@lem18394 Q P). Qed.
Lemma lem8311085 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term197 D P Q pat e a) = (term471 D P Q pat e a).
Proof. exact (@lem8311084 Q (term258 D P Q pat e a)). Qed.
Lemma lem8311086 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term472 D P Q pat e a t) = ((pat t) = (e a)).
Proof. exact (eq_refl (term472 D P Q pat e a t)). Qed.
Lemma lem8311087 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8311089 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term473 D P Q pat e a t) = (term474 D P Q pat t e a).
Proof. exact (MK_COMB (@lem8311087) (@lem8311086 D P Q pat t e a)). Qed.
Lemma lem8311090 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term475 D P Q pat e a) = (term476 D P Q pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311089 D P Q pat t e a)). Qed.
Lemma lem8311091 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8311092 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term471 D P Q pat e a) = (term477 D P Q pat e a).
Proof. exact (MK_COMB (@lem8311091 Q) (@lem8311090 D P Q pat e a)). Qed.
Lemma lem8311093 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term197 D P Q pat e a) = (term477 D P Q pat e a).
Proof. exact (TRANS (@lem8311085 D P Q pat e a) (@lem8311092 D P Q pat e a)). Qed.
Lemma lem8311094 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term258 D P Q pat e a) = (term258 D P Q pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311083 D P Q pat t e a)). Qed.
Lemma lem8311095 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311096 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term169 D P Q pat e a) = (term169 D P Q pat e a).
Proof. exact (MK_COMB (@lem8311095 Q) (@lem8311094 D P Q pat e a)). Qed.
Lemma lem8311098 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term392 A B P p f a) = (term392 A B P p f a).
Proof. exact (eq_refl (term392 A B P p f a)). Qed.
Lemma lem8311099 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1923 A B D P Q p f pat e a) = (term1924 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8311098 A B P p f a) (@lem8311093 D P Q pat e a)). Qed.
Lemma lem8311100 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1925 A B D P Q p f pat e a) = (term1923 A B D P Q p f pat e a).
Proof. exact (@lem17045 (p f a) (term169 D P Q pat e a)). Qed.
Lemma lem8311101 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1925 A B D P Q p f pat e a) = (term1924 A B D P Q p f pat e a).
Proof. exact (TRANS (@lem8311100 A B D P Q p f pat e a) (@lem8311099 A B D P Q p f pat e a)). Qed.
Lemma lem8311103 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term1178 A B P p f a) = (term1178 A B P p f a).
Proof. exact (eq_refl (term1178 A B P p f a)). Qed.
Lemma lem8311104 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1068 A B D P Q p f pat e a) = (term1068 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8311103 A B P p f a) (@lem8311096 D P Q pat e a)). Qed.
Lemma lem8311108 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : ((pat t) = (e a)) = ((pat t) = (e a)).
Proof. exact (eq_refl ((pat t) = (e a))). Qed.
Lemma lem8311109 {Q : Type'} (P : Q -> Prop) : (term412 Q P) = (term413 Q P).
Proof. exact (@lem18394 Q P). Qed.
Lemma lem8311110 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term197 D P Q pat e a) = (term471 D P Q pat e a).
Proof. exact (@lem8311109 Q (term258 D P Q pat e a)). Qed.
Lemma lem8311111 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term472 D P Q pat e a t) = ((pat t) = (e a)).
Proof. exact (eq_refl (term472 D P Q pat e a t)). Qed.
Lemma lem8311112 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8311114 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term473 D P Q pat e a t) = (term474 D P Q pat t e a).
Proof. exact (MK_COMB (@lem8311112) (@lem8311111 D P Q pat t e a)). Qed.
Lemma lem8311115 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term475 D P Q pat e a) = (term476 D P Q pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311114 D P Q pat t e a)). Qed.
Lemma lem8311116 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8311117 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term471 D P Q pat e a) = (term477 D P Q pat e a).
Proof. exact (MK_COMB (@lem8311116 Q) (@lem8311115 D P Q pat e a)). Qed.
Lemma lem8311118 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term197 D P Q pat e a) = (term477 D P Q pat e a).
Proof. exact (TRANS (@lem8311110 D P Q pat e a) (@lem8311117 D P Q pat e a)). Qed.
Lemma lem8311119 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term258 D P Q pat e a) = (term258 D P Q pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311108 D P Q pat t e a)). Qed.
Lemma lem8311120 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311121 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term169 D P Q pat e a) = (term169 D P Q pat e a).
Proof. exact (MK_COMB (@lem8311120 Q) (@lem8311119 D P Q pat e a)). Qed.
Lemma lem8311123 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a : P) : (term392 A B P p g a) = (term392 A B P p g a).
Proof. exact (eq_refl (term392 A B P p g a)). Qed.
Lemma lem8311124 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1923 A B D P Q p g pat e a) = (term1924 A B D P Q p g pat e a).
Proof. exact (MK_COMB (@lem8311123 A B P p g a) (@lem8311118 D P Q pat e a)). Qed.
Lemma lem8311125 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1925 A B D P Q p g pat e a) = (term1923 A B D P Q p g pat e a).
Proof. exact (@lem17045 (p g a) (term169 D P Q pat e a)). Qed.
Lemma lem8311126 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1925 A B D P Q p g pat e a) = (term1924 A B D P Q p g pat e a).
Proof. exact (TRANS (@lem8311125 A B D P Q p g pat e a) (@lem8311124 A B D P Q p g pat e a)). Qed.
Lemma lem8311128 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a : P) : (term1178 A B P p g a) = (term1178 A B P p g a).
Proof. exact (eq_refl (term1178 A B P p g a)). Qed.
Lemma lem8311129 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1068 A B D P Q p g pat e a) = (term1068 A B D P Q p g pat e a).
Proof. exact (MK_COMB (@lem8311128 A B P p g a) (@lem8311121 D P Q pat e a)). Qed.
Lemma lem8311130 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8311131 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1926 A B D P Q p f pat e a) = (term1927 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8311130) (@lem8311101 A B D P Q p f pat e a)). Qed.
Lemma lem8311132 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1928 A B D P Q f p g pat e a) = (term1929 A B D P Q f p g pat e a).
Proof. exact (MK_COMB (@lem8311131 A B D P Q p f pat e a) (@lem8311129 A B D P Q p g pat e a)). Qed.
Lemma lem8311133 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8311134 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1073 A B D P Q p f pat e a) = (term1073 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8311133) (@lem8311104 A B D P Q p f pat e a)). Qed.
Lemma lem8311135 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1930 A B D P Q f p g pat e a) = (term1931 A B D P Q f p g pat e a).
Proof. exact (MK_COMB (@lem8311134 A B D P Q p f pat e a) (@lem8311126 A B D P Q p g pat e a)). Qed.
Lemma lem8311136 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311137 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1932 A B D P Q f p g pat e a) = (term1933 A B D P Q f p g pat e a).
Proof. exact (MK_COMB (@lem8311136) (@lem8311135 A B D P Q f p g pat e a)). Qed.
Lemma lem8311138 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1934 A B D P Q f p g pat e a) = (term1935 A B D P Q f p g pat e a).
Proof. exact (MK_COMB (@lem8311137 A B D P Q f p g pat e a) (@lem8311132 A B D P Q f p g pat e a)). Qed.
Lemma lem8311139 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1936 A B D P Q f p g pat e a) = (term1934 A B D P Q f p g pat e a).
Proof. exact (@lem17646 (term1068 A B D P Q p f pat e a) (term1068 A B D P Q p g pat e a)). Qed.
Lemma lem8311140 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1936 A B D P Q f p g pat e a) = (term1935 A B D P Q f p g pat e a).
Proof. exact (TRANS (@lem8311139 A B D P Q f p g pat e a) (@lem8311138 A B D P Q f p g pat e a)). Qed.
Lemma lem8311141 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8311142 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1937 A B P lt2 s a f g) = (term1938 A B P lt2 s a f g).
Proof. exact (MK_COMB (@lem8311141) (@lem8311079 A B P lt2 s a f g)). Qed.
Lemma lem8311143 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1939 A B D P Q lt2 s f p g pat e a) = (term1940 A B D P Q lt2 s f p g pat e a).
Proof. exact (MK_COMB (@lem8311142 A B P lt2 s a f g) (@lem8311140 A B D P Q f p g pat e a)). Qed.
Lemma lem8311144 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1941 A B D P Q lt2 s f p g pat e a) = (term1939 A B D P Q lt2 s f p g pat e a).
Proof. exact (@lem17362 (term1032 A B P lt2 s a f g) ((term1068 A B D P Q p f pat e a) = (term1068 A B D P Q p g pat e a))). Qed.
Lemma lem8311145 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1941 A B D P Q lt2 s f p g pat e a) = (term1940 A B D P Q lt2 s f p g pat e a).
Proof. exact (TRANS (@lem8311144 A B D P Q lt2 s f p g pat e a) (@lem8311143 A B D P Q lt2 s f p g pat e a)). Qed.
Lemma lem8311146 {P : Type'} (P' : P -> Prop) : (term1781 P P') = (term1782 P P').
Proof. exact (@lem18392 P P'). Qed.
Lemma lem8311147 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) : (term1942 A B D P Q lt2 s f p g pat e) = (term1943 A B D P Q lt2 s f p g pat e).
Proof. exact (@lem8311146 P (term1149 A B D P Q lt2 s f p g pat e)). Qed.
Lemma lem8311148 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1944 A B D P Q lt2 s f p g pat e a) = (term1147 A B D P Q lt2 s f p g pat e a).
Proof. exact (eq_refl (term1944 A B D P Q lt2 s f p g pat e a)). Qed.
Lemma lem8311149 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8311150 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1945 A B D P Q lt2 s f p g pat e a) = (term1941 A B D P Q lt2 s f p g pat e a).
Proof. exact (MK_COMB (@lem8311149) (@lem8311148 A B D P Q lt2 s f p g pat e a)). Qed.
Lemma lem8311151 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1945 A B D P Q lt2 s f p g pat e a) = (term1940 A B D P Q lt2 s f p g pat e a).
Proof. exact (TRANS (@lem8311150 A B D P Q lt2 s f p g pat e a) (@lem8311145 A B D P Q lt2 s f p g pat e a)). Qed.
Lemma lem8311152 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) : (term1946 A B D P Q lt2 s f p g pat e) = (term1947 A B D P Q lt2 s f p g pat e).
Proof. exact (fun_ext (fun a : P => @lem8311151 A B D P Q lt2 s f p g pat e a)). Qed.
Lemma lem8311153 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8311154 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) : (term1943 A B D P Q lt2 s f p g pat e) = (term1948 A B D P Q lt2 s f p g pat e).
Proof. exact (MK_COMB (@lem8311153 P) (@lem8311152 A B D P Q lt2 s f p g pat e)). Qed.
Lemma lem8311155 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) : (term1942 A B D P Q lt2 s f p g pat e) = (term1948 A B D P Q lt2 s f p g pat e).
Proof. exact (TRANS (@lem8311147 A B D P Q lt2 s f p g pat e) (@lem8311154 A B D P Q lt2 s f p g pat e)). Qed.
Lemma lem8311156 {A B : Type'} (P : type572 A B) : (term1911 A B P) = (term1912 A B P).
Proof. exact (@lem18392 (A -> B) P). Qed.
Lemma lem8311157 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1949 A B D P Q lt2 s f p pat e) = (term1950 A B D P Q lt2 s f p pat e).
Proof. exact (@lem8311156 A B (term1153 A B D P Q lt2 s f p pat e)). Qed.
Lemma lem8311158 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) : (term1951 A B D P Q lt2 s f p pat e g) = (term1151 A B D P Q lt2 s f p g pat e).
Proof. exact (eq_refl (term1951 A B D P Q lt2 s f p pat e g)). Qed.
Lemma lem8311159 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8311160 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) : (term1952 A B D P Q lt2 s f p pat e g) = (term1942 A B D P Q lt2 s f p g pat e).
Proof. exact (MK_COMB (@lem8311159) (@lem8311158 A B D P Q lt2 s f p g pat e)). Qed.
Lemma lem8311161 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) : (term1952 A B D P Q lt2 s f p pat e g) = (term1948 A B D P Q lt2 s f p g pat e).
Proof. exact (TRANS (@lem8311160 A B D P Q lt2 s f p g pat e) (@lem8311155 A B D P Q lt2 s f p g pat e)). Qed.
Lemma lem8311162 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1953 A B D P Q lt2 s f p pat e) = (term1954 A B D P Q lt2 s f p pat e).
Proof. exact (fun_ext (fun g : A -> B => @lem8311161 A B D P Q lt2 s f p g pat e)). Qed.
Lemma lem8311163 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8311164 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1950 A B D P Q lt2 s f p pat e) = (term1955 A B D P Q lt2 s f p pat e).
Proof. exact (MK_COMB (@lem8311163 A B) (@lem8311162 A B D P Q lt2 s f p pat e)). Qed.
Lemma lem8311165 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1949 A B D P Q lt2 s f p pat e) = (term1955 A B D P Q lt2 s f p pat e).
Proof. exact (TRANS (@lem8311157 A B D P Q lt2 s f p pat e) (@lem8311164 A B D P Q lt2 s f p pat e)). Qed.
Lemma lem8311166 {A B : Type'} (P : type572 A B) : (term1911 A B P) = (term1912 A B P).
Proof. exact (@lem18392 (A -> B) P). Qed.
Lemma lem8311167 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1956 A B D P Q lt2 s p pat e) = (term1957 A B D P Q lt2 s p pat e).
Proof. exact (@lem8311166 A B (term1157 A B D P Q lt2 s p pat e)). Qed.
Lemma lem8311168 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1958 A B D P Q lt2 s p pat e f) = (term1155 A B D P Q lt2 s f p pat e).
Proof. exact (eq_refl (term1958 A B D P Q lt2 s p pat e f)). Qed.
Lemma lem8311169 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8311170 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1959 A B D P Q lt2 s p pat e f) = (term1949 A B D P Q lt2 s f p pat e).
Proof. exact (MK_COMB (@lem8311169) (@lem8311168 A B D P Q lt2 s f p pat e)). Qed.
Lemma lem8311171 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1959 A B D P Q lt2 s p pat e f) = (term1955 A B D P Q lt2 s f p pat e).
Proof. exact (TRANS (@lem8311170 A B D P Q lt2 s f p pat e) (@lem8311165 A B D P Q lt2 s f p pat e)). Qed.
Lemma lem8311172 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1960 A B D P Q lt2 s p pat e) = (term1961 A B D P Q lt2 s p pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8311171 A B D P Q lt2 s f p pat e)). Qed.
Lemma lem8311173 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8311174 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1957 A B D P Q lt2 s p pat e) = (term1962 A B D P Q lt2 s p pat e).
Proof. exact (MK_COMB (@lem8311173 A B) (@lem8311172 A B D P Q lt2 s p pat e)). Qed.
Lemma lem8311175 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1956 A B D P Q lt2 s p pat e) = (term1962 A B D P Q lt2 s p pat e).
Proof. exact (TRANS (@lem8311167 A B D P Q lt2 s p pat e) (@lem8311174 A B D P Q lt2 s p pat e)). Qed.
Lemma lem8311176 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : ((pat t) = (e a)) = ((pat t) = (e a)).
Proof. exact (eq_refl ((pat t) = (e a))). Qed.
Lemma lem8311177 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term258 D P Q pat e a) = (term258 D P Q pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311176 D P Q pat t e a)). Qed.
Lemma lem8311178 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311179 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term169 D P Q pat e a) = (term169 D P Q pat e a).
Proof. exact (MK_COMB (@lem8311178 Q) (@lem8311177 D P Q pat e a)). Qed.
Lemma lem8311180 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term1963 D P Q pat e a) = (term169 D P Q pat e a).
Proof. exact (@lem16933 (term169 D P Q pat e a)). Qed.
Lemma lem8311181 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term1963 D P Q pat e a) = (term169 D P Q pat e a).
Proof. exact (TRANS (@lem8311180 D P Q pat e a) (@lem8311179 D P Q pat e a)). Qed.
Lemma lem8311188 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1964 A B D P Q p _111929 f arg _111928 pat e a) = (term1965 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (@lem17362 (p f a) ((_111929 pat e f arg a) = (term1270 A B D P Q f arg _111928 pat e a))). Qed.
Lemma lem8311189 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8311190 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term1966 D P Q pat e a) = (term1967 D P Q pat e a).
Proof. exact (MK_COMB (@lem8311189) (@lem8311181 D P Q pat e a)). Qed.
Lemma lem8311191 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1968 A B D P Q p _111929 f arg _111928 pat e a) = (term1969 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8311190 D P Q pat e a) (@lem8311188 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311192 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1970 A B D P Q p _111929 f arg _111928 pat e a) = (term1968 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (@lem17160 (term197 D P Q pat e a) (term1502 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311193 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1970 A B D P Q p _111929 f arg _111928 pat e a) = (term1969 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (TRANS (@lem8311192 A B D P Q p _111929 f arg _111928 pat e a) (@lem8311191 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311194 {P : Type'} (P' : P -> Prop) : (term1781 P P') = (term1782 P P').
Proof. exact (@lem18392 P P'). Qed.
Lemma lem8311195 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1971 A B D P Q p _111929 f arg _111928 pat e) = (term1972 A B D P Q p _111929 f arg _111928 pat e).
Proof. exact (@lem8311194 P (term1514 A B D P Q p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311196 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1973 A B D P Q p _111929 f arg _111928 pat e a) = (term1511 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (eq_refl (term1973 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311197 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8311198 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1974 A B D P Q p _111929 f arg _111928 pat e a) = (term1970 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8311197) (@lem8311196 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311199 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1974 A B D P Q p _111929 f arg _111928 pat e a) = (term1969 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (TRANS (@lem8311198 A B D P Q p _111929 f arg _111928 pat e a) (@lem8311193 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311200 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1975 A B D P Q p _111929 f arg _111928 pat e) = (term1976 A B D P Q p _111929 f arg _111928 pat e).
Proof. exact (fun_ext (fun a : P => @lem8311199 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311201 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8311202 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1972 A B D P Q p _111929 f arg _111928 pat e) = (term1977 A B D P Q p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311201 P) (@lem8311200 A B D P Q p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311203 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1971 A B D P Q p _111929 f arg _111928 pat e) = (term1977 A B D P Q p _111929 f arg _111928 pat e).
Proof. exact (TRANS (@lem8311195 A B D P Q p _111929 f arg _111928 pat e) (@lem8311202 A B D P Q p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311204 {A B : Type'} (P : type572 A B) : (term1911 A B P) = (term1912 A B P).
Proof. exact (@lem18392 (A -> B) P). Qed.
Lemma lem8311205 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1978 A B D P Q p _111929 arg _111928 pat e) = (term1979 A B D P Q p _111929 arg _111928 pat e).
Proof. exact (@lem8311204 A B (term1516 A B D P Q p _111929 arg _111928 pat e)). Qed.
Lemma lem8311206 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1980 A B D P Q p _111929 arg _111928 pat e f) = (term1515 A B D P Q p _111929 f arg _111928 pat e).
Proof. exact (eq_refl (term1980 A B D P Q p _111929 arg _111928 pat e f)). Qed.
Lemma lem8311207 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8311208 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1981 A B D P Q p _111929 arg _111928 pat e f) = (term1971 A B D P Q p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311207) (@lem8311206 A B D P Q p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311209 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1981 A B D P Q p _111929 arg _111928 pat e f) = (term1977 A B D P Q p _111929 f arg _111928 pat e).
Proof. exact (TRANS (@lem8311208 A B D P Q p _111929 f arg _111928 pat e) (@lem8311203 A B D P Q p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311210 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1982 A B D P Q p _111929 arg _111928 pat e) = (term1983 A B D P Q p _111929 arg _111928 pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8311209 A B D P Q p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311211 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8311212 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1979 A B D P Q p _111929 arg _111928 pat e) = (term1984 A B D P Q p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311211 A B) (@lem8311210 A B D P Q p _111929 arg _111928 pat e)). Qed.
Lemma lem8311213 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1978 A B D P Q p _111929 arg _111928 pat e) = (term1984 A B D P Q p _111929 arg _111928 pat e).
Proof. exact (TRANS (@lem8311205 A B D P Q p _111929 arg _111928 pat e) (@lem8311212 A B D P Q p _111929 arg _111928 pat e)). Qed.
Lemma lem8311214 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311215 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1985 A B D P Q lt2 s p pat e) = (term1986 A B D P Q lt2 s p pat e).
Proof. exact (MK_COMB (@lem8311214) (@lem8311175 A B D P Q lt2 s p pat e)). Qed.
Lemma lem8311216 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1987 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term1988 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311215 A B D P Q lt2 s p pat e) (@lem8311213 A B D P Q p _111929 arg _111928 pat e)). Qed.
Lemma lem8311217 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1989 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term1987 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (@lem17045 (term1159 A B D P Q lt2 s p pat e) (term1517 A B D P Q p _111929 arg _111928 pat e)). Qed.
Lemma lem8311218 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1989 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term1988 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (TRANS (@lem8311217 A B D P Q lt2 s p _111929 arg _111928 pat e) (@lem8311216 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8311219 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311220 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1990 A B D P Q p arg _111928 pat e lt2 s) = (term1991 A B D P Q p arg _111928 pat e lt2 s).
Proof. exact (MK_COMB (@lem8311219) (@lem8311069 A B D P Q p arg _111928 pat e lt2 s)). Qed.
Lemma lem8311221 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1992 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term1993 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311220 A B D P Q p arg _111928 pat e lt2 s) (@lem8311218 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8311222 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1558 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term1992 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (@lem17045 (term1268 A B D P Q p arg _111928 pat e lt2 s) (term1520 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8311223 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1558 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term1993 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (TRANS (@lem8311222 A B D P Q lt2 s p _111929 arg _111928 pat e) (@lem8311221 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8311462 {A : Type'} (P : Prop) (Q : A -> Prop) : (term511 A P Q) = (term510 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem8311463 {Q : Type'} (P : Prop) (Q' : Q -> Prop) : (term511 Q P Q') = (term510 Q P Q').
Proof. exact (@lem8311462 Q P Q'). Qed.
Lemma lem8311464 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1994 A B D P Q p f pat e a) = (term1995 A B D P Q p f pat e a).
Proof. exact (@lem8311463 Q (p f a) (term258 D P Q pat e a)). Qed.
Lemma lem8311465 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term472 D P Q pat e a t) = ((pat t) = (e a)).
Proof. exact (eq_refl (term472 D P Q pat e a t)). Qed.
Lemma lem8311466 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term764 D P Q pat e a) = (term258 D P Q pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311465 D P Q pat t e a)). Qed.
Lemma lem8311467 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311468 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term765 D P Q pat e a) = (term169 D P Q pat e a).
Proof. exact (MK_COMB (@lem8311467 Q) (@lem8311466 D P Q pat e a)). Qed.
Lemma lem8311469 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term1178 A B P p f a) = (term1178 A B P p f a).
Proof. exact (eq_refl (term1178 A B P p f a)). Qed.
Lemma lem8311470 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1994 A B D P Q p f pat e a) = (term1068 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8311469 A B P p f a) (@lem8311468 D P Q pat e a)). Qed.
Lemma lem8311471 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8311472 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1996 A B D P Q p f pat e a) = (term1121 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8311471) (@lem8311470 A B D P Q p f pat e a)). Qed.
Lemma lem8311473 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term472 D P Q pat e a t) = ((pat t) = (e a)).
Proof. exact (eq_refl (term472 D P Q pat e a t)). Qed.
Lemma lem8311474 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term1178 A B P p f a) = (term1178 A B P p f a).
Proof. exact (eq_refl (term1178 A B P p f a)). Qed.
Lemma lem8311475 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term1997 A B D P Q p f pat e a t) = (term1772 A B D P Q p f pat t e a).
Proof. exact (MK_COMB (@lem8311474 A B P p f a) (@lem8311473 D P Q pat t e a)). Qed.
Lemma lem8311476 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1998 A B D P Q p f pat e a) = (term1999 A B D P Q p f pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311475 A B D P Q p f pat t e a)). Qed.
Lemma lem8311477 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311478 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1995 A B D P Q p f pat e a) = (term2000 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8311477 Q) (@lem8311476 A B D P Q p f pat e a)). Qed.
Lemma lem8311479 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : ((term1994 A B D P Q p f pat e a) = (term1995 A B D P Q p f pat e a)) = ((term1068 A B D P Q p f pat e a) = (term2000 A B D P Q p f pat e a)).
Proof. exact (MK_COMB (@lem8311472 A B D P Q p f pat e a) (@lem8311478 A B D P Q p f pat e a)). Qed.
Lemma lem8311480 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1068 A B D P Q p f pat e a) = (term2000 A B D P Q p f pat e a).
Proof. exact (EQ_MP (@lem8311479 A B D P Q p f pat e a) (@lem8311464 A B D P Q p f pat e a)). Qed.
Lemma lem8311481 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8311482 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1073 A B D P Q p f pat e a) = (term2001 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8311481) (@lem8311480 A B D P Q p f pat e a)). Qed.
Lemma lem8311483 {A D P Q : Type'} (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1258 A D P Q lt2 y arg _111928 pat e a) = (term1258 A D P Q lt2 y arg _111928 pat e a).
Proof. exact (eq_refl (term1258 A D P Q lt2 y arg _111928 pat e a)). Qed.
Lemma lem8311484 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1259 A B D P Q p f lt2 y arg _111928 pat e a) = (term2002 A B D P Q p f lt2 y arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8311482 A B D P Q p f pat e a) (@lem8311483 A D P Q lt2 y arg _111928 pat e a)). Qed.
Lemma lem8311486 {A : Type'} (P : A -> Prop) (Q : Prop) : (term530 A P Q) = (term531 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8311487 {Q : Type'} (P : Q -> Prop) (Q' : Prop) : (term530 Q P Q') = (term531 Q P Q').
Proof. exact (@lem8311486 Q P Q'). Qed.
Lemma lem8311488 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2003 A B D P Q p f lt2 y arg _111928 pat e a) = (term2004 A B D P Q p f lt2 y arg _111928 pat e a).
Proof. exact (@lem8311487 Q (term1999 A B D P Q p f pat e a) (term1258 A D P Q lt2 y arg _111928 pat e a)). Qed.
Lemma lem8311489 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term2005 A B D P Q p f pat e a t) = (term1772 A B D P Q p f pat t e a).
Proof. exact (eq_refl (term2005 A B D P Q p f pat e a t)). Qed.
Lemma lem8311490 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2006 A B D P Q p f pat e a) = (term1999 A B D P Q p f pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311489 A B D P Q p f pat t e a)). Qed.
Lemma lem8311491 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311492 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2007 A B D P Q p f pat e a) = (term2000 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8311491 Q) (@lem8311490 A B D P Q p f pat e a)). Qed.
Lemma lem8311493 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8311494 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2008 A B D P Q p f pat e a) = (term2001 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8311493) (@lem8311492 A B D P Q p f pat e a)). Qed.
Lemma lem8311495 {A D P Q : Type'} (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1258 A D P Q lt2 y arg _111928 pat e a) = (term1258 A D P Q lt2 y arg _111928 pat e a).
Proof. exact (eq_refl (term1258 A D P Q lt2 y arg _111928 pat e a)). Qed.
Lemma lem8311496 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2003 A B D P Q p f lt2 y arg _111928 pat e a) = (term2002 A B D P Q p f lt2 y arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8311494 A B D P Q p f pat e a) (@lem8311495 A D P Q lt2 y arg _111928 pat e a)). Qed.
Lemma lem8311497 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8311498 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2009 A B D P Q p f lt2 y arg _111928 pat e a) = (term2010 A B D P Q p f lt2 y arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8311497) (@lem8311496 A B D P Q p f lt2 y arg _111928 pat e a)). Qed.
Lemma lem8311499 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term2005 A B D P Q p f pat e a t) = (term1772 A B D P Q p f pat t e a).
Proof. exact (eq_refl (term2005 A B D P Q p f pat e a t)). Qed.
Lemma lem8311500 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8311501 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term2011 A B D P Q p f pat e a t) = (term2012 A B D P Q p f pat t e a).
Proof. exact (MK_COMB (@lem8311500) (@lem8311499 A B D P Q p f pat t e a)). Qed.
Lemma lem8311502 {A D P Q : Type'} (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1258 A D P Q lt2 y arg _111928 pat e a) = (term1258 A D P Q lt2 y arg _111928 pat e a).
Proof. exact (eq_refl (term1258 A D P Q lt2 y arg _111928 pat e a)). Qed.
Lemma lem8311503 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2013 A B D P Q p f t lt2 y arg _111928 pat e a) = (term2014 A B D P Q p f t lt2 y arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8311501 A B D P Q p f pat t e a) (@lem8311502 A D P Q lt2 y arg _111928 pat e a)). Qed.
Lemma lem8311504 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2015 A B D P Q p f lt2 y arg _111928 pat e a) = (term2016 A B D P Q p f lt2 y arg _111928 pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311503 A B D P Q p f t lt2 y arg _111928 pat e a)). Qed.
Lemma lem8311505 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311506 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2004 A B D P Q p f lt2 y arg _111928 pat e a) = (term2017 A B D P Q p f lt2 y arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8311505 Q) (@lem8311504 A B D P Q p f lt2 y arg _111928 pat e a)). Qed.
Lemma lem8311507 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : ((term2003 A B D P Q p f lt2 y arg _111928 pat e a) = (term2004 A B D P Q p f lt2 y arg _111928 pat e a)) = ((term2002 A B D P Q p f lt2 y arg _111928 pat e a) = (term2017 A B D P Q p f lt2 y arg _111928 pat e a)).
Proof. exact (MK_COMB (@lem8311498 A B D P Q p f lt2 y arg _111928 pat e a) (@lem8311506 A B D P Q p f lt2 y arg _111928 pat e a)). Qed.
Lemma lem8311508 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2002 A B D P Q p f lt2 y arg _111928 pat e a) = (term2017 A B D P Q p f lt2 y arg _111928 pat e a).
Proof. exact (EQ_MP (@lem8311507 A B D P Q p f lt2 y arg _111928 pat e a) (@lem8311488 A B D P Q p f lt2 y arg _111928 pat e a)). Qed.
Lemma lem8311509 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1259 A B D P Q p f lt2 y arg _111928 pat e a) = (term2017 A B D P Q p f lt2 y arg _111928 pat e a).
Proof. exact (TRANS (@lem8311484 A B D P Q p f lt2 y arg _111928 pat e a) (@lem8311508 A B D P Q p f lt2 y arg _111928 pat e a)). Qed.
Lemma lem8311510 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8311511 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1894 A B D P Q p f lt2 y arg _111928 pat e a) = (term2018 A B D P Q p f lt2 y arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8311510) (@lem8311509 A B D P Q p f lt2 y arg _111928 pat e a)). Qed.
Lemma lem8311512 {A P : Type'} (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term1893 A P lt2 y s a) = (term1893 A P lt2 y s a).
Proof. exact (eq_refl (term1893 A P lt2 y s a)). Qed.
Lemma lem8311513 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term1895 A B D P Q p f arg _111928 pat e lt2 y s a) = (term2019 A B D P Q p f arg _111928 pat e lt2 y s a).
Proof. exact (MK_COMB (@lem8311511 A B D P Q p f lt2 y arg _111928 pat e a) (@lem8311512 A P lt2 y s a)). Qed.
Lemma lem8311515 {A : Type'} (P : A -> Prop) (Q : Prop) : (term530 A P Q) = (term531 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8311516 {Q : Type'} (P : Q -> Prop) (Q' : Prop) : (term530 Q P Q') = (term531 Q P Q').
Proof. exact (@lem8311515 Q P Q'). Qed.
Lemma lem8311517 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2020 A B D P Q p f arg _111928 pat e lt2 y s a) = (term2021 A B D P Q p f arg _111928 pat e lt2 y s a).
Proof. exact (@lem8311516 Q (term2016 A B D P Q p f lt2 y arg _111928 pat e a) (term1893 A P lt2 y s a)). Qed.
Lemma lem8311518 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2022 A B D P Q p f lt2 y arg _111928 pat e a t) = (term2014 A B D P Q p f t lt2 y arg _111928 pat e a).
Proof. exact (eq_refl (term2022 A B D P Q p f lt2 y arg _111928 pat e a t)). Qed.
Lemma lem8311519 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2023 A B D P Q p f lt2 y arg _111928 pat e a) = (term2016 A B D P Q p f lt2 y arg _111928 pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311518 A B D P Q p f t lt2 y arg _111928 pat e a)). Qed.
Lemma lem8311520 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311521 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2024 A B D P Q p f lt2 y arg _111928 pat e a) = (term2017 A B D P Q p f lt2 y arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8311520 Q) (@lem8311519 A B D P Q p f lt2 y arg _111928 pat e a)). Qed.
Lemma lem8311522 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8311523 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2025 A B D P Q p f lt2 y arg _111928 pat e a) = (term2018 A B D P Q p f lt2 y arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8311522) (@lem8311521 A B D P Q p f lt2 y arg _111928 pat e a)). Qed.
Lemma lem8311524 {A P : Type'} (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term1893 A P lt2 y s a) = (term1893 A P lt2 y s a).
Proof. exact (eq_refl (term1893 A P lt2 y s a)). Qed.
Lemma lem8311525 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2020 A B D P Q p f arg _111928 pat e lt2 y s a) = (term2019 A B D P Q p f arg _111928 pat e lt2 y s a).
Proof. exact (MK_COMB (@lem8311523 A B D P Q p f lt2 y arg _111928 pat e a) (@lem8311524 A P lt2 y s a)). Qed.
Lemma lem8311526 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8311527 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2026 A B D P Q p f arg _111928 pat e lt2 y s a) = (term2027 A B D P Q p f arg _111928 pat e lt2 y s a).
Proof. exact (MK_COMB (@lem8311526) (@lem8311525 A B D P Q p f arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8311528 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2022 A B D P Q p f lt2 y arg _111928 pat e a t) = (term2014 A B D P Q p f t lt2 y arg _111928 pat e a).
Proof. exact (eq_refl (term2022 A B D P Q p f lt2 y arg _111928 pat e a t)). Qed.
Lemma lem8311529 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8311530 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2028 A B D P Q p f lt2 y arg _111928 pat e a t) = (term2029 A B D P Q p f t lt2 y arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8311529) (@lem8311528 A B D P Q p f t lt2 y arg _111928 pat e a)). Qed.
Lemma lem8311531 {A P : Type'} (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term1893 A P lt2 y s a) = (term1893 A P lt2 y s a).
Proof. exact (eq_refl (term1893 A P lt2 y s a)). Qed.
Lemma lem8311532 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2030 A B D P Q p f arg _111928 pat e t lt2 y s a) = (term2031 A B D P Q p f t arg _111928 pat e lt2 y s a).
Proof. exact (MK_COMB (@lem8311530 A B D P Q p f t lt2 y arg _111928 pat e a) (@lem8311531 A P lt2 y s a)). Qed.
Lemma lem8311533 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2032 A B D P Q p f arg _111928 pat e lt2 y s a) = (term2033 A B D P Q p f arg _111928 pat e lt2 y s a).
Proof. exact (fun_ext (fun t : Q => @lem8311532 A B D P Q p f t arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8311534 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311535 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2021 A B D P Q p f arg _111928 pat e lt2 y s a) = (term2034 A B D P Q p f arg _111928 pat e lt2 y s a).
Proof. exact (MK_COMB (@lem8311534 Q) (@lem8311533 A B D P Q p f arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8311536 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : ((term2020 A B D P Q p f arg _111928 pat e lt2 y s a) = (term2021 A B D P Q p f arg _111928 pat e lt2 y s a)) = ((term2019 A B D P Q p f arg _111928 pat e lt2 y s a) = (term2034 A B D P Q p f arg _111928 pat e lt2 y s a)).
Proof. exact (MK_COMB (@lem8311527 A B D P Q p f arg _111928 pat e lt2 y s a) (@lem8311535 A B D P Q p f arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8311537 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2019 A B D P Q p f arg _111928 pat e lt2 y s a) = (term2034 A B D P Q p f arg _111928 pat e lt2 y s a).
Proof. exact (EQ_MP (@lem8311536 A B D P Q p f arg _111928 pat e lt2 y s a) (@lem8311517 A B D P Q p f arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8311538 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term1895 A B D P Q p f arg _111928 pat e lt2 y s a) = (term2034 A B D P Q p f arg _111928 pat e lt2 y s a).
Proof. exact (TRANS (@lem8311513 A B D P Q p f arg _111928 pat e lt2 y s a) (@lem8311537 A B D P Q p f arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8311539 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (a : P) : (term1902 A B D P Q p f arg _111928 pat e lt2 s a) = (term2035 A B D P Q p f arg _111928 pat e lt2 s a).
Proof. exact (fun_ext (fun y : A => @lem8311538 A B D P Q p f arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8311540 {A : Type'} : (@ex A) = (@ex A).
Proof. exact (eq_refl (@ex A)). Qed.
Lemma lem8311541 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (a : P) : (term1903 A B D P Q p f arg _111928 pat e lt2 s a) = (term2036 A B D P Q p f arg _111928 pat e lt2 s a).
Proof. exact (MK_COMB (@lem8311540 A) (@lem8311539 A B D P Q p f arg _111928 pat e lt2 s a)). Qed.
Lemma lem8311542 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1909 A B D P Q p f arg _111928 pat e lt2 s) = (term2037 A B D P Q p f arg _111928 pat e lt2 s).
Proof. exact (fun_ext (fun a : P => @lem8311541 A B D P Q p f arg _111928 pat e lt2 s a)). Qed.
Lemma lem8311543 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8311544 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1910 A B D P Q p f arg _111928 pat e lt2 s) = (term2038 A B D P Q p f arg _111928 pat e lt2 s).
Proof. exact (MK_COMB (@lem8311543 P) (@lem8311542 A B D P Q p f arg _111928 pat e lt2 s)). Qed.
Lemma lem8311545 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1918 A B D P Q p arg _111928 pat e lt2 s) = (term2039 A B D P Q p arg _111928 pat e lt2 s).
Proof. exact (fun_ext (fun f : A -> B => @lem8311544 A B D P Q p f arg _111928 pat e lt2 s)). Qed.
Lemma lem8311546 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8311547 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1919 A B D P Q p arg _111928 pat e lt2 s) = (term2040 A B D P Q p arg _111928 pat e lt2 s).
Proof. exact (MK_COMB (@lem8311546 A B) (@lem8311545 A B D P Q p arg _111928 pat e lt2 s)). Qed.
Lemma lem8311548 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311549 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term1991 A B D P Q p arg _111928 pat e lt2 s) = (term2041 A B D P Q p arg _111928 pat e lt2 s).
Proof. exact (MK_COMB (@lem8311548) (@lem8311547 A B D P Q p arg _111928 pat e lt2 s)). Qed.
Lemma lem8311551 {A : Type'} (P : Prop) (Q : A -> Prop) : (term511 A P Q) = (term510 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem8311552 {Q : Type'} (P : Prop) (Q' : Q -> Prop) : (term511 Q P Q') = (term510 Q P Q').
Proof. exact (@lem8311551 Q P Q'). Qed.
Lemma lem8311553 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1994 A B D P Q p f pat e a) = (term1995 A B D P Q p f pat e a).
Proof. exact (@lem8311552 Q (p f a) (term258 D P Q pat e a)). Qed.
Lemma lem8311554 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term472 D P Q pat e a t) = ((pat t) = (e a)).
Proof. exact (eq_refl (term472 D P Q pat e a t)). Qed.
Lemma lem8311555 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term764 D P Q pat e a) = (term258 D P Q pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311554 D P Q pat t e a)). Qed.
Lemma lem8311556 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311557 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term765 D P Q pat e a) = (term169 D P Q pat e a).
Proof. exact (MK_COMB (@lem8311556 Q) (@lem8311555 D P Q pat e a)). Qed.
Lemma lem8311558 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term1178 A B P p f a) = (term1178 A B P p f a).
Proof. exact (eq_refl (term1178 A B P p f a)). Qed.
Lemma lem8311559 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1994 A B D P Q p f pat e a) = (term1068 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8311558 A B P p f a) (@lem8311557 D P Q pat e a)). Qed.
Lemma lem8311560 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8311561 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1996 A B D P Q p f pat e a) = (term1121 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8311560) (@lem8311559 A B D P Q p f pat e a)). Qed.
Lemma lem8311562 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term472 D P Q pat e a t) = ((pat t) = (e a)).
Proof. exact (eq_refl (term472 D P Q pat e a t)). Qed.
Lemma lem8311563 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term1178 A B P p f a) = (term1178 A B P p f a).
Proof. exact (eq_refl (term1178 A B P p f a)). Qed.
Lemma lem8311564 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term1997 A B D P Q p f pat e a t) = (term1772 A B D P Q p f pat t e a).
Proof. exact (MK_COMB (@lem8311563 A B P p f a) (@lem8311562 D P Q pat t e a)). Qed.
Lemma lem8311565 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1998 A B D P Q p f pat e a) = (term1999 A B D P Q p f pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311564 A B D P Q p f pat t e a)). Qed.
Lemma lem8311566 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311567 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1995 A B D P Q p f pat e a) = (term2000 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8311566 Q) (@lem8311565 A B D P Q p f pat e a)). Qed.
Lemma lem8311568 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : ((term1994 A B D P Q p f pat e a) = (term1995 A B D P Q p f pat e a)) = ((term1068 A B D P Q p f pat e a) = (term2000 A B D P Q p f pat e a)).
Proof. exact (MK_COMB (@lem8311561 A B D P Q p f pat e a) (@lem8311567 A B D P Q p f pat e a)). Qed.
Lemma lem8311569 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1068 A B D P Q p f pat e a) = (term2000 A B D P Q p f pat e a).
Proof. exact (EQ_MP (@lem8311568 A B D P Q p f pat e a) (@lem8311553 A B D P Q p f pat e a)). Qed.
Lemma lem8311570 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8311571 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1073 A B D P Q p f pat e a) = (term2001 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8311570) (@lem8311569 A B D P Q p f pat e a)). Qed.
Lemma lem8311572 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1924 A B D P Q p g pat e a) = (term1924 A B D P Q p g pat e a).
Proof. exact (eq_refl (term1924 A B D P Q p g pat e a)). Qed.
Lemma lem8311573 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1931 A B D P Q f p g pat e a) = (term2042 A B D P Q f p g pat e a).
Proof. exact (MK_COMB (@lem8311571 A B D P Q p f pat e a) (@lem8311572 A B D P Q p g pat e a)). Qed.
Lemma lem8311575 {A : Type'} (P : A -> Prop) (Q : Prop) : (term530 A P Q) = (term531 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8311576 {Q : Type'} (P : Q -> Prop) (Q' : Prop) : (term530 Q P Q') = (term531 Q P Q').
Proof. exact (@lem8311575 Q P Q'). Qed.
Lemma lem8311577 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2043 A B D P Q f p g pat e a) = (term2044 A B D P Q f p g pat e a).
Proof. exact (@lem8311576 Q (term1999 A B D P Q p f pat e a) (term1924 A B D P Q p g pat e a)). Qed.
Lemma lem8311578 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term2005 A B D P Q p f pat e a t) = (term1772 A B D P Q p f pat t e a).
Proof. exact (eq_refl (term2005 A B D P Q p f pat e a t)). Qed.
Lemma lem8311579 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2006 A B D P Q p f pat e a) = (term1999 A B D P Q p f pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311578 A B D P Q p f pat t e a)). Qed.
Lemma lem8311580 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311581 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2007 A B D P Q p f pat e a) = (term2000 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8311580 Q) (@lem8311579 A B D P Q p f pat e a)). Qed.
Lemma lem8311582 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8311583 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2008 A B D P Q p f pat e a) = (term2001 A B D P Q p f pat e a).
Proof. exact (MK_COMB (@lem8311582) (@lem8311581 A B D P Q p f pat e a)). Qed.
Lemma lem8311584 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1924 A B D P Q p g pat e a) = (term1924 A B D P Q p g pat e a).
Proof. exact (eq_refl (term1924 A B D P Q p g pat e a)). Qed.
Lemma lem8311585 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2043 A B D P Q f p g pat e a) = (term2042 A B D P Q f p g pat e a).
Proof. exact (MK_COMB (@lem8311583 A B D P Q p f pat e a) (@lem8311584 A B D P Q p g pat e a)). Qed.
Lemma lem8311586 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8311587 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2045 A B D P Q f p g pat e a) = (term2046 A B D P Q f p g pat e a).
Proof. exact (MK_COMB (@lem8311586) (@lem8311585 A B D P Q f p g pat e a)). Qed.
Lemma lem8311588 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term2005 A B D P Q p f pat e a t) = (term1772 A B D P Q p f pat t e a).
Proof. exact (eq_refl (term2005 A B D P Q p f pat e a t)). Qed.
Lemma lem8311589 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8311590 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term2011 A B D P Q p f pat e a t) = (term2012 A B D P Q p f pat t e a).
Proof. exact (MK_COMB (@lem8311589) (@lem8311588 A B D P Q p f pat t e a)). Qed.
Lemma lem8311591 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1924 A B D P Q p g pat e a) = (term1924 A B D P Q p g pat e a).
Proof. exact (eq_refl (term1924 A B D P Q p g pat e a)). Qed.
Lemma lem8311592 {A B D P Q : Type'} (f : A -> B) (t : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2047 A B D P Q f t p g pat e a) = (term2048 A B D P Q f t p g pat e a).
Proof. exact (MK_COMB (@lem8311590 A B D P Q p f pat t e a) (@lem8311591 A B D P Q p g pat e a)). Qed.
Lemma lem8311593 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2049 A B D P Q f p g pat e a) = (term2050 A B D P Q f p g pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311592 A B D P Q f t p g pat e a)). Qed.
Lemma lem8311594 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311595 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2044 A B D P Q f p g pat e a) = (term2051 A B D P Q f p g pat e a).
Proof. exact (MK_COMB (@lem8311594 Q) (@lem8311593 A B D P Q f p g pat e a)). Qed.
Lemma lem8311596 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : ((term2043 A B D P Q f p g pat e a) = (term2044 A B D P Q f p g pat e a)) = ((term2042 A B D P Q f p g pat e a) = (term2051 A B D P Q f p g pat e a)).
Proof. exact (MK_COMB (@lem8311587 A B D P Q f p g pat e a) (@lem8311595 A B D P Q f p g pat e a)). Qed.
Lemma lem8311597 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2042 A B D P Q f p g pat e a) = (term2051 A B D P Q f p g pat e a).
Proof. exact (EQ_MP (@lem8311596 A B D P Q f p g pat e a) (@lem8311577 A B D P Q f p g pat e a)). Qed.
Lemma lem8311598 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1931 A B D P Q f p g pat e a) = (term2051 A B D P Q f p g pat e a).
Proof. exact (TRANS (@lem8311573 A B D P Q f p g pat e a) (@lem8311597 A B D P Q f p g pat e a)). Qed.
Lemma lem8311599 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311600 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1933 A B D P Q f p g pat e a) = (term2052 A B D P Q f p g pat e a).
Proof. exact (MK_COMB (@lem8311599) (@lem8311598 A B D P Q f p g pat e a)). Qed.
Lemma lem8311602 {A : Type'} (P : Prop) (Q : A -> Prop) : (term511 A P Q) = (term510 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem8311603 {Q : Type'} (P : Prop) (Q' : Q -> Prop) : (term511 Q P Q') = (term510 Q P Q').
Proof. exact (@lem8311602 Q P Q'). Qed.
Lemma lem8311604 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1994 A B D P Q p g pat e a) = (term1995 A B D P Q p g pat e a).
Proof. exact (@lem8311603 Q (p g a) (term258 D P Q pat e a)). Qed.
Lemma lem8311605 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term472 D P Q pat e a t) = ((pat t) = (e a)).
Proof. exact (eq_refl (term472 D P Q pat e a t)). Qed.
Lemma lem8311606 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term764 D P Q pat e a) = (term258 D P Q pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311605 D P Q pat t e a)). Qed.
Lemma lem8311607 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311608 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term765 D P Q pat e a) = (term169 D P Q pat e a).
Proof. exact (MK_COMB (@lem8311607 Q) (@lem8311606 D P Q pat e a)). Qed.
Lemma lem8311609 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a : P) : (term1178 A B P p g a) = (term1178 A B P p g a).
Proof. exact (eq_refl (term1178 A B P p g a)). Qed.
Lemma lem8311610 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1994 A B D P Q p g pat e a) = (term1068 A B D P Q p g pat e a).
Proof. exact (MK_COMB (@lem8311609 A B P p g a) (@lem8311608 D P Q pat e a)). Qed.
Lemma lem8311611 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8311612 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1996 A B D P Q p g pat e a) = (term1121 A B D P Q p g pat e a).
Proof. exact (MK_COMB (@lem8311611) (@lem8311610 A B D P Q p g pat e a)). Qed.
Lemma lem8311613 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term472 D P Q pat e a t) = ((pat t) = (e a)).
Proof. exact (eq_refl (term472 D P Q pat e a t)). Qed.
Lemma lem8311614 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a : P) : (term1178 A B P p g a) = (term1178 A B P p g a).
Proof. exact (eq_refl (term1178 A B P p g a)). Qed.
Lemma lem8311615 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term1997 A B D P Q p g pat e a t) = (term1772 A B D P Q p g pat t e a).
Proof. exact (MK_COMB (@lem8311614 A B P p g a) (@lem8311613 D P Q pat t e a)). Qed.
Lemma lem8311616 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1998 A B D P Q p g pat e a) = (term1999 A B D P Q p g pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311615 A B D P Q p g pat t e a)). Qed.
Lemma lem8311617 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311618 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1995 A B D P Q p g pat e a) = (term2000 A B D P Q p g pat e a).
Proof. exact (MK_COMB (@lem8311617 Q) (@lem8311616 A B D P Q p g pat e a)). Qed.
Lemma lem8311619 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : ((term1994 A B D P Q p g pat e a) = (term1995 A B D P Q p g pat e a)) = ((term1068 A B D P Q p g pat e a) = (term2000 A B D P Q p g pat e a)).
Proof. exact (MK_COMB (@lem8311612 A B D P Q p g pat e a) (@lem8311618 A B D P Q p g pat e a)). Qed.
Lemma lem8311620 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1068 A B D P Q p g pat e a) = (term2000 A B D P Q p g pat e a).
Proof. exact (EQ_MP (@lem8311619 A B D P Q p g pat e a) (@lem8311604 A B D P Q p g pat e a)). Qed.
Lemma lem8311621 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1927 A B D P Q p f pat e a) = (term1927 A B D P Q p f pat e a).
Proof. exact (eq_refl (term1927 A B D P Q p f pat e a)). Qed.
Lemma lem8311622 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1929 A B D P Q f p g pat e a) = (term2053 A B D P Q f p g pat e a).
Proof. exact (MK_COMB (@lem8311621 A B D P Q p f pat e a) (@lem8311620 A B D P Q p g pat e a)). Qed.
Lemma lem8311624 {A : Type'} (P : Prop) (Q : A -> Prop) : (term511 A P Q) = (term510 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem8311625 {Q : Type'} (P : Prop) (Q' : Q -> Prop) : (term511 Q P Q') = (term510 Q P Q').
Proof. exact (@lem8311624 Q P Q'). Qed.
Lemma lem8311626 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2054 A B D P Q f p g pat e a) = (term2055 A B D P Q f p g pat e a).
Proof. exact (@lem8311625 Q (term1924 A B D P Q p f pat e a) (term1999 A B D P Q p g pat e a)). Qed.
Lemma lem8311627 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term2005 A B D P Q p g pat e a t) = (term1772 A B D P Q p g pat t e a).
Proof. exact (eq_refl (term2005 A B D P Q p g pat e a t)). Qed.
Lemma lem8311628 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2006 A B D P Q p g pat e a) = (term1999 A B D P Q p g pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311627 A B D P Q p g pat t e a)). Qed.
Lemma lem8311629 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311630 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2007 A B D P Q p g pat e a) = (term2000 A B D P Q p g pat e a).
Proof. exact (MK_COMB (@lem8311629 Q) (@lem8311628 A B D P Q p g pat e a)). Qed.
Lemma lem8311631 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1927 A B D P Q p f pat e a) = (term1927 A B D P Q p f pat e a).
Proof. exact (eq_refl (term1927 A B D P Q p f pat e a)). Qed.
Lemma lem8311632 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2054 A B D P Q f p g pat e a) = (term2053 A B D P Q f p g pat e a).
Proof. exact (MK_COMB (@lem8311631 A B D P Q p f pat e a) (@lem8311630 A B D P Q p g pat e a)). Qed.
Lemma lem8311633 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8311634 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2056 A B D P Q f p g pat e a) = (term2057 A B D P Q f p g pat e a).
Proof. exact (MK_COMB (@lem8311633) (@lem8311632 A B D P Q f p g pat e a)). Qed.
Lemma lem8311635 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term2005 A B D P Q p g pat e a t) = (term1772 A B D P Q p g pat t e a).
Proof. exact (eq_refl (term2005 A B D P Q p g pat e a t)). Qed.
Lemma lem8311636 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1927 A B D P Q p f pat e a) = (term1927 A B D P Q p f pat e a).
Proof. exact (eq_refl (term1927 A B D P Q p f pat e a)). Qed.
Lemma lem8311637 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term2058 A B D P Q f p g pat e a t) = (term2059 A B D P Q f p g pat t e a).
Proof. exact (MK_COMB (@lem8311636 A B D P Q p f pat e a) (@lem8311635 A B D P Q p g pat t e a)). Qed.
Lemma lem8311638 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2060 A B D P Q f p g pat e a) = (term2061 A B D P Q f p g pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311637 A B D P Q f p g pat t e a)). Qed.
Lemma lem8311639 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311640 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2055 A B D P Q f p g pat e a) = (term2062 A B D P Q f p g pat e a).
Proof. exact (MK_COMB (@lem8311639 Q) (@lem8311638 A B D P Q f p g pat e a)). Qed.
Lemma lem8311641 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : ((term2054 A B D P Q f p g pat e a) = (term2055 A B D P Q f p g pat e a)) = ((term2053 A B D P Q f p g pat e a) = (term2062 A B D P Q f p g pat e a)).
Proof. exact (MK_COMB (@lem8311634 A B D P Q f p g pat e a) (@lem8311640 A B D P Q f p g pat e a)). Qed.
Lemma lem8311642 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2053 A B D P Q f p g pat e a) = (term2062 A B D P Q f p g pat e a).
Proof. exact (EQ_MP (@lem8311641 A B D P Q f p g pat e a) (@lem8311626 A B D P Q f p g pat e a)). Qed.
Lemma lem8311643 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1929 A B D P Q f p g pat e a) = (term2062 A B D P Q f p g pat e a).
Proof. exact (TRANS (@lem8311622 A B D P Q f p g pat e a) (@lem8311642 A B D P Q f p g pat e a)). Qed.
Lemma lem8311644 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1935 A B D P Q f p g pat e a) = (term2063 A B D P Q f p g pat e a).
Proof. exact (MK_COMB (@lem8311600 A B D P Q f p g pat e a) (@lem8311643 A B D P Q f p g pat e a)). Qed.
Lemma lem8311646 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term782 A P Q) = (term783 A P Q).
Proof. exact (EQ_MP (@lem18917 A P Q) (@lem18916 A P Q)). Qed.
Lemma lem8311647 {Q : Type'} (P : Q -> Prop) (Q' : Q -> Prop) : (term782 Q P Q') = (term783 Q P Q').
Proof. exact (@lem8311646 Q P Q'). Qed.
Lemma lem8311648 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2064 A B D P Q f p g pat e a) = (term2065 A B D P Q f p g pat e a).
Proof. exact (@lem8311647 Q (term2050 A B D P Q f p g pat e a) (term2061 A B D P Q f p g pat e a)). Qed.
Lemma lem8311649 {A B D P Q : Type'} (f : A -> B) (t : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2066 A B D P Q f p g pat e a t) = (term2048 A B D P Q f t p g pat e a).
Proof. exact (eq_refl (term2066 A B D P Q f p g pat e a t)). Qed.
Lemma lem8311650 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2067 A B D P Q f p g pat e a) = (term2050 A B D P Q f p g pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311649 A B D P Q f t p g pat e a)). Qed.
Lemma lem8311651 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311652 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2068 A B D P Q f p g pat e a) = (term2051 A B D P Q f p g pat e a).
Proof. exact (MK_COMB (@lem8311651 Q) (@lem8311650 A B D P Q f p g pat e a)). Qed.
Lemma lem8311653 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311654 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2069 A B D P Q f p g pat e a) = (term2052 A B D P Q f p g pat e a).
Proof. exact (MK_COMB (@lem8311653) (@lem8311652 A B D P Q f p g pat e a)). Qed.
Lemma lem8311655 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term2070 A B D P Q f p g pat e a t) = (term2059 A B D P Q f p g pat t e a).
Proof. exact (eq_refl (term2070 A B D P Q f p g pat e a t)). Qed.
Lemma lem8311656 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2071 A B D P Q f p g pat e a) = (term2061 A B D P Q f p g pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311655 A B D P Q f p g pat t e a)). Qed.
Lemma lem8311657 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311658 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2072 A B D P Q f p g pat e a) = (term2062 A B D P Q f p g pat e a).
Proof. exact (MK_COMB (@lem8311657 Q) (@lem8311656 A B D P Q f p g pat e a)). Qed.
Lemma lem8311659 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2064 A B D P Q f p g pat e a) = (term2063 A B D P Q f p g pat e a).
Proof. exact (MK_COMB (@lem8311654 A B D P Q f p g pat e a) (@lem8311658 A B D P Q f p g pat e a)). Qed.
Lemma lem8311660 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8311661 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2073 A B D P Q f p g pat e a) = (term2074 A B D P Q f p g pat e a).
Proof. exact (MK_COMB (@lem8311660) (@lem8311659 A B D P Q f p g pat e a)). Qed.
Lemma lem8311662 {A B D P Q : Type'} (f : A -> B) (t : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2066 A B D P Q f p g pat e a t) = (term2048 A B D P Q f t p g pat e a).
Proof. exact (eq_refl (term2066 A B D P Q f p g pat e a t)). Qed.
Lemma lem8311663 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311664 {A B D P Q : Type'} (f : A -> B) (t : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2075 A B D P Q f p g pat e a t) = (term2076 A B D P Q f t p g pat e a).
Proof. exact (MK_COMB (@lem8311663) (@lem8311662 A B D P Q f t p g pat e a)). Qed.
Lemma lem8311665 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term2070 A B D P Q f p g pat e a t) = (term2059 A B D P Q f p g pat t e a).
Proof. exact (eq_refl (term2070 A B D P Q f p g pat e a t)). Qed.
Lemma lem8311666 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term2077 A B D P Q f p g pat e a t) = (term2078 A B D P Q f p g pat t e a).
Proof. exact (MK_COMB (@lem8311664 A B D P Q f t p g pat e a) (@lem8311665 A B D P Q f p g pat t e a)). Qed.
Lemma lem8311667 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2079 A B D P Q f p g pat e a) = (term2080 A B D P Q f p g pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311666 A B D P Q f p g pat t e a)). Qed.
Lemma lem8311668 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311669 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2065 A B D P Q f p g pat e a) = (term2081 A B D P Q f p g pat e a).
Proof. exact (MK_COMB (@lem8311668 Q) (@lem8311667 A B D P Q f p g pat e a)). Qed.
Lemma lem8311670 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : ((term2064 A B D P Q f p g pat e a) = (term2065 A B D P Q f p g pat e a)) = ((term2063 A B D P Q f p g pat e a) = (term2081 A B D P Q f p g pat e a)).
Proof. exact (MK_COMB (@lem8311661 A B D P Q f p g pat e a) (@lem8311669 A B D P Q f p g pat e a)). Qed.
Lemma lem8311671 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2063 A B D P Q f p g pat e a) = (term2081 A B D P Q f p g pat e a).
Proof. exact (EQ_MP (@lem8311670 A B D P Q f p g pat e a) (@lem8311648 A B D P Q f p g pat e a)). Qed.
Lemma lem8311672 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1935 A B D P Q f p g pat e a) = (term2081 A B D P Q f p g pat e a).
Proof. exact (TRANS (@lem8311644 A B D P Q f p g pat e a) (@lem8311671 A B D P Q f p g pat e a)). Qed.
Lemma lem8311673 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1938 A B P lt2 s a f g) = (term1938 A B P lt2 s a f g).
Proof. exact (eq_refl (term1938 A B P lt2 s a f g)). Qed.
Lemma lem8311674 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1940 A B D P Q lt2 s f p g pat e a) = (term2082 A B D P Q lt2 s f p g pat e a).
Proof. exact (MK_COMB (@lem8311673 A B P lt2 s a f g) (@lem8311672 A B D P Q f p g pat e a)). Qed.
Lemma lem8311676 {A : Type'} (P : Prop) (Q : A -> Prop) : (term511 A P Q) = (term510 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem8311677 {Q : Type'} (P : Prop) (Q' : Q -> Prop) : (term511 Q P Q') = (term510 Q P Q').
Proof. exact (@lem8311676 Q P Q'). Qed.
Lemma lem8311678 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2083 A B D P Q lt2 s f p g pat e a) = (term2084 A B D P Q lt2 s f p g pat e a).
Proof. exact (@lem8311677 Q (term1922 A B P lt2 s a f g) (term2080 A B D P Q f p g pat e a)). Qed.
Lemma lem8311679 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term2085 A B D P Q f p g pat e a t) = (term2078 A B D P Q f p g pat t e a).
Proof. exact (eq_refl (term2085 A B D P Q f p g pat e a t)). Qed.
Lemma lem8311680 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2086 A B D P Q f p g pat e a) = (term2080 A B D P Q f p g pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311679 A B D P Q f p g pat t e a)). Qed.
Lemma lem8311681 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311682 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2087 A B D P Q f p g pat e a) = (term2081 A B D P Q f p g pat e a).
Proof. exact (MK_COMB (@lem8311681 Q) (@lem8311680 A B D P Q f p g pat e a)). Qed.
Lemma lem8311683 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1938 A B P lt2 s a f g) = (term1938 A B P lt2 s a f g).
Proof. exact (eq_refl (term1938 A B P lt2 s a f g)). Qed.
Lemma lem8311684 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2083 A B D P Q lt2 s f p g pat e a) = (term2082 A B D P Q lt2 s f p g pat e a).
Proof. exact (MK_COMB (@lem8311683 A B P lt2 s a f g) (@lem8311682 A B D P Q f p g pat e a)). Qed.
Lemma lem8311685 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8311686 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2088 A B D P Q lt2 s f p g pat e a) = (term2089 A B D P Q lt2 s f p g pat e a).
Proof. exact (MK_COMB (@lem8311685) (@lem8311684 A B D P Q lt2 s f p g pat e a)). Qed.
Lemma lem8311687 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term2085 A B D P Q f p g pat e a t) = (term2078 A B D P Q f p g pat t e a).
Proof. exact (eq_refl (term2085 A B D P Q f p g pat e a t)). Qed.
Lemma lem8311688 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a : P) (f : A -> B) (g : A -> B) : (term1938 A B P lt2 s a f g) = (term1938 A B P lt2 s a f g).
Proof. exact (eq_refl (term1938 A B P lt2 s a f g)). Qed.
Lemma lem8311689 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term2090 A B D P Q lt2 s f p g pat e a t) = (term2091 A B D P Q lt2 s f p g pat t e a).
Proof. exact (MK_COMB (@lem8311688 A B P lt2 s a f g) (@lem8311687 A B D P Q f p g pat t e a)). Qed.
Lemma lem8311690 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2092 A B D P Q lt2 s f p g pat e a) = (term2093 A B D P Q lt2 s f p g pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311689 A B D P Q lt2 s f p g pat t e a)). Qed.
Lemma lem8311691 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311692 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2084 A B D P Q lt2 s f p g pat e a) = (term2094 A B D P Q lt2 s f p g pat e a).
Proof. exact (MK_COMB (@lem8311691 Q) (@lem8311690 A B D P Q lt2 s f p g pat e a)). Qed.
Lemma lem8311693 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : ((term2083 A B D P Q lt2 s f p g pat e a) = (term2084 A B D P Q lt2 s f p g pat e a)) = ((term2082 A B D P Q lt2 s f p g pat e a) = (term2094 A B D P Q lt2 s f p g pat e a)).
Proof. exact (MK_COMB (@lem8311686 A B D P Q lt2 s f p g pat e a) (@lem8311692 A B D P Q lt2 s f p g pat e a)). Qed.
Lemma lem8311694 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2082 A B D P Q lt2 s f p g pat e a) = (term2094 A B D P Q lt2 s f p g pat e a).
Proof. exact (EQ_MP (@lem8311693 A B D P Q lt2 s f p g pat e a) (@lem8311678 A B D P Q lt2 s f p g pat e a)). Qed.
Lemma lem8311695 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term1940 A B D P Q lt2 s f p g pat e a) = (term2094 A B D P Q lt2 s f p g pat e a).
Proof. exact (TRANS (@lem8311674 A B D P Q lt2 s f p g pat e a) (@lem8311694 A B D P Q lt2 s f p g pat e a)). Qed.
Lemma lem8311696 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) : (term1947 A B D P Q lt2 s f p g pat e) = (term2095 A B D P Q lt2 s f p g pat e).
Proof. exact (fun_ext (fun a : P => @lem8311695 A B D P Q lt2 s f p g pat e a)). Qed.
Lemma lem8311697 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8311698 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) : (term1948 A B D P Q lt2 s f p g pat e) = (term2096 A B D P Q lt2 s f p g pat e).
Proof. exact (MK_COMB (@lem8311697 P) (@lem8311696 A B D P Q lt2 s f p g pat e)). Qed.
Lemma lem8311699 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1954 A B D P Q lt2 s f p pat e) = (term2097 A B D P Q lt2 s f p pat e).
Proof. exact (fun_ext (fun g : A -> B => @lem8311698 A B D P Q lt2 s f p g pat e)). Qed.
Lemma lem8311700 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8311701 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1955 A B D P Q lt2 s f p pat e) = (term2098 A B D P Q lt2 s f p pat e).
Proof. exact (MK_COMB (@lem8311700 A B) (@lem8311699 A B D P Q lt2 s f p pat e)). Qed.
Lemma lem8311702 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1961 A B D P Q lt2 s p pat e) = (term2099 A B D P Q lt2 s p pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8311701 A B D P Q lt2 s f p pat e)). Qed.
Lemma lem8311703 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8311704 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1962 A B D P Q lt2 s p pat e) = (term2100 A B D P Q lt2 s p pat e).
Proof. exact (MK_COMB (@lem8311703 A B) (@lem8311702 A B D P Q lt2 s p pat e)). Qed.
Lemma lem8311705 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311706 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term1986 A B D P Q lt2 s p pat e) = (term2101 A B D P Q lt2 s p pat e).
Proof. exact (MK_COMB (@lem8311705) (@lem8311704 A B D P Q lt2 s p pat e)). Qed.
Lemma lem8311708 {A : Type'} (P : A -> Prop) (Q : Prop) : (term530 A P Q) = (term531 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8311709 {Q : Type'} (P : Q -> Prop) (Q' : Prop) : (term530 Q P Q') = (term531 Q P Q').
Proof. exact (@lem8311708 Q P Q'). Qed.
Lemma lem8311710 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2102 A B D P Q p _111929 f arg _111928 pat e a) = (term2103 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (@lem8311709 Q (term258 D P Q pat e a) (term1965 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311711 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term472 D P Q pat e a t) = ((pat t) = (e a)).
Proof. exact (eq_refl (term472 D P Q pat e a t)). Qed.
Lemma lem8311712 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term764 D P Q pat e a) = (term258 D P Q pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311711 D P Q pat t e a)). Qed.
Lemma lem8311713 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311714 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term765 D P Q pat e a) = (term169 D P Q pat e a).
Proof. exact (MK_COMB (@lem8311713 Q) (@lem8311712 D P Q pat e a)). Qed.
Lemma lem8311715 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8311716 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term2104 D P Q pat e a) = (term1967 D P Q pat e a).
Proof. exact (MK_COMB (@lem8311715) (@lem8311714 D P Q pat e a)). Qed.
Lemma lem8311717 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1965 A B D P Q p _111929 f arg _111928 pat e a) = (term1965 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (eq_refl (term1965 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311718 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2102 A B D P Q p _111929 f arg _111928 pat e a) = (term1969 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8311716 D P Q pat e a) (@lem8311717 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311719 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8311720 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2105 A B D P Q p _111929 f arg _111928 pat e a) = (term2106 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8311719) (@lem8311718 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311721 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term472 D P Q pat e a t) = ((pat t) = (e a)).
Proof. exact (eq_refl (term472 D P Q pat e a t)). Qed.
Lemma lem8311722 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8311723 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term2107 D P Q pat e a t) = (term882 D P Q pat t e a).
Proof. exact (MK_COMB (@lem8311722) (@lem8311721 D P Q pat t e a)). Qed.
Lemma lem8311724 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1965 A B D P Q p _111929 f arg _111928 pat e a) = (term1965 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (eq_refl (term1965 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311725 {A B D P Q : Type'} (t : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2108 A B D P Q t p _111929 f arg _111928 pat e a) = (term2109 A B D P Q t p _111929 f arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8311723 D P Q pat t e a) (@lem8311724 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311726 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2110 A B D P Q p _111929 f arg _111928 pat e a) = (term2111 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311725 A B D P Q t p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311727 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311728 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2103 A B D P Q p _111929 f arg _111928 pat e a) = (term2112 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8311727 Q) (@lem8311726 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311729 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : ((term2102 A B D P Q p _111929 f arg _111928 pat e a) = (term2103 A B D P Q p _111929 f arg _111928 pat e a)) = ((term1969 A B D P Q p _111929 f arg _111928 pat e a) = (term2112 A B D P Q p _111929 f arg _111928 pat e a)).
Proof. exact (MK_COMB (@lem8311720 A B D P Q p _111929 f arg _111928 pat e a) (@lem8311728 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311730 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1969 A B D P Q p _111929 f arg _111928 pat e a) = (term2112 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (EQ_MP (@lem8311729 A B D P Q p _111929 f arg _111928 pat e a) (@lem8311710 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311731 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1976 A B D P Q p _111929 f arg _111928 pat e) = (term2113 A B D P Q p _111929 f arg _111928 pat e).
Proof. exact (fun_ext (fun a : P => @lem8311730 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311732 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8311733 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1977 A B D P Q p _111929 f arg _111928 pat e) = (term2114 A B D P Q p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311732 P) (@lem8311731 A B D P Q p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311734 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1983 A B D P Q p _111929 arg _111928 pat e) = (term2115 A B D P Q p _111929 arg _111928 pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8311733 A B D P Q p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311735 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8311736 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1984 A B D P Q p _111929 arg _111928 pat e) = (term2116 A B D P Q p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311735 A B) (@lem8311734 A B D P Q p _111929 arg _111928 pat e)). Qed.
Lemma lem8311737 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1988 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2117 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311706 A B D P Q lt2 s p pat e) (@lem8311736 A B D P Q p _111929 arg _111928 pat e)). Qed.
Lemma lem8311739 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term782 A P Q) = (term783 A P Q).
Proof. exact (EQ_MP (@lem18917 A P Q) (@lem18916 A P Q)). Qed.
Lemma lem8311740 {A B : Type'} (P : type572 A B) (Q : type572 A B) : (term2118 A B P Q) = (term2119 A B P Q).
Proof. exact (@lem8311739 (A -> B) P Q). Qed.
Lemma lem8311741 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2120 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2121 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (@lem8311740 A B (term2099 A B D P Q lt2 s p pat e) (term2115 A B D P Q p _111929 arg _111928 pat e)). Qed.
Lemma lem8311742 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term2122 A B D P Q lt2 s p pat e f) = (term2098 A B D P Q lt2 s f p pat e).
Proof. exact (eq_refl (term2122 A B D P Q lt2 s p pat e f)). Qed.
Lemma lem8311743 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term2123 A B D P Q lt2 s p pat e) = (term2099 A B D P Q lt2 s p pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8311742 A B D P Q lt2 s f p pat e)). Qed.
Lemma lem8311744 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8311745 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term2124 A B D P Q lt2 s p pat e) = (term2100 A B D P Q lt2 s p pat e).
Proof. exact (MK_COMB (@lem8311744 A B) (@lem8311743 A B D P Q lt2 s p pat e)). Qed.
Lemma lem8311746 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311747 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term2125 A B D P Q lt2 s p pat e) = (term2101 A B D P Q lt2 s p pat e).
Proof. exact (MK_COMB (@lem8311746) (@lem8311745 A B D P Q lt2 s p pat e)). Qed.
Lemma lem8311748 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2126 A B D P Q p _111929 arg _111928 pat e f) = (term2114 A B D P Q p _111929 f arg _111928 pat e).
Proof. exact (eq_refl (term2126 A B D P Q p _111929 arg _111928 pat e f)). Qed.
Lemma lem8311749 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2127 A B D P Q p _111929 arg _111928 pat e) = (term2115 A B D P Q p _111929 arg _111928 pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8311748 A B D P Q p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311750 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8311751 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2128 A B D P Q p _111929 arg _111928 pat e) = (term2116 A B D P Q p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311750 A B) (@lem8311749 A B D P Q p _111929 arg _111928 pat e)). Qed.
Lemma lem8311752 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2120 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2117 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311747 A B D P Q lt2 s p pat e) (@lem8311751 A B D P Q p _111929 arg _111928 pat e)). Qed.
Lemma lem8311753 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8311754 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2129 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2130 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311753) (@lem8311752 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8311755 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term2122 A B D P Q lt2 s p pat e f) = (term2098 A B D P Q lt2 s f p pat e).
Proof. exact (eq_refl (term2122 A B D P Q lt2 s p pat e f)). Qed.
Lemma lem8311756 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311757 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term2131 A B D P Q lt2 s p pat e f) = (term2132 A B D P Q lt2 s f p pat e).
Proof. exact (MK_COMB (@lem8311756) (@lem8311755 A B D P Q lt2 s f p pat e)). Qed.
Lemma lem8311758 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2126 A B D P Q p _111929 arg _111928 pat e f) = (term2114 A B D P Q p _111929 f arg _111928 pat e).
Proof. exact (eq_refl (term2126 A B D P Q p _111929 arg _111928 pat e f)). Qed.
Lemma lem8311759 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2133 A B D P Q lt2 s p _111929 arg _111928 pat e f) = (term2134 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311757 A B D P Q lt2 s f p pat e) (@lem8311758 A B D P Q p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311760 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2135 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2136 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8311759 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311761 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8311762 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2121 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2137 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311761 A B) (@lem8311760 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8311763 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : ((term2120 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2121 A B D P Q lt2 s p _111929 arg _111928 pat e)) = ((term2117 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2137 A B D P Q lt2 s p _111929 arg _111928 pat e)).
Proof. exact (MK_COMB (@lem8311754 A B D P Q lt2 s p _111929 arg _111928 pat e) (@lem8311762 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8311764 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2117 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2137 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (EQ_MP (@lem8311763 A B D P Q lt2 s p _111929 arg _111928 pat e) (@lem8311741 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8311768 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1801 A P Q) = (term1802 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8311769 {A B : Type'} (P : type572 A B) (Q : Prop) : (term2138 A B P Q) = (term2139 A B P Q).
Proof. exact (@lem8311768 (A -> B) P Q). Qed.
Lemma lem8311770 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2140 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2141 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (@lem8311769 A B (term2097 A B D P Q lt2 s f p pat e) (term2114 A B D P Q p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311771 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) : (term2142 A B D P Q lt2 s f p pat e g) = (term2096 A B D P Q lt2 s f p g pat e).
Proof. exact (eq_refl (term2142 A B D P Q lt2 s f p pat e g)). Qed.
Lemma lem8311772 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term2143 A B D P Q lt2 s f p pat e) = (term2097 A B D P Q lt2 s f p pat e).
Proof. exact (fun_ext (fun g : A -> B => @lem8311771 A B D P Q lt2 s f p g pat e)). Qed.
Lemma lem8311773 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8311774 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term2144 A B D P Q lt2 s f p pat e) = (term2098 A B D P Q lt2 s f p pat e).
Proof. exact (MK_COMB (@lem8311773 A B) (@lem8311772 A B D P Q lt2 s f p pat e)). Qed.
Lemma lem8311775 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311776 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) : (term2145 A B D P Q lt2 s f p pat e) = (term2132 A B D P Q lt2 s f p pat e).
Proof. exact (MK_COMB (@lem8311775) (@lem8311774 A B D P Q lt2 s f p pat e)). Qed.
Lemma lem8311777 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2114 A B D P Q p _111929 f arg _111928 pat e) = (term2114 A B D P Q p _111929 f arg _111928 pat e).
Proof. exact (eq_refl (term2114 A B D P Q p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311778 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2140 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2134 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311776 A B D P Q lt2 s f p pat e) (@lem8311777 A B D P Q p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311779 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8311780 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2146 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2147 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311779) (@lem8311778 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311781 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) : (term2142 A B D P Q lt2 s f p pat e g) = (term2096 A B D P Q lt2 s f p g pat e).
Proof. exact (eq_refl (term2142 A B D P Q lt2 s f p pat e g)). Qed.
Lemma lem8311782 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311783 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) : (term2148 A B D P Q lt2 s f p pat e g) = (term2149 A B D P Q lt2 s f p g pat e).
Proof. exact (MK_COMB (@lem8311782) (@lem8311781 A B D P Q lt2 s f p g pat e)). Qed.
Lemma lem8311784 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2114 A B D P Q p _111929 f arg _111928 pat e) = (term2114 A B D P Q p _111929 f arg _111928 pat e).
Proof. exact (eq_refl (term2114 A B D P Q p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311785 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2150 A B D P Q lt2 s g p _111929 f arg _111928 pat e) = (term2151 A B D P Q lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311783 A B D P Q lt2 s f p g pat e) (@lem8311784 A B D P Q p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311786 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2152 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2153 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (fun_ext (fun g : A -> B => @lem8311785 A B D P Q lt2 s g p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311787 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8311788 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2141 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2154 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311787 A B) (@lem8311786 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311789 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : ((term2140 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2141 A B D P Q lt2 s p _111929 f arg _111928 pat e)) = ((term2134 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2154 A B D P Q lt2 s p _111929 f arg _111928 pat e)).
Proof. exact (MK_COMB (@lem8311780 A B D P Q lt2 s p _111929 f arg _111928 pat e) (@lem8311788 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311790 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2134 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2154 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (EQ_MP (@lem8311789 A B D P Q lt2 s p _111929 f arg _111928 pat e) (@lem8311770 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311792 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term782 A P Q) = (term783 A P Q).
Proof. exact (EQ_MP (@lem18917 A P Q) (@lem18916 A P Q)). Qed.
Lemma lem8311793 {P : Type'} (P' : P -> Prop) (Q : P -> Prop) : (term782 P P' Q) = (term783 P P' Q).
Proof. exact (@lem8311792 P P' Q). Qed.
Lemma lem8311794 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2155 A B D P Q lt2 s g p _111929 f arg _111928 pat e) = (term2156 A B D P Q lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (@lem8311793 P (term2095 A B D P Q lt2 s f p g pat e) (term2113 A B D P Q p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311795 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2157 A B D P Q lt2 s f p g pat e a) = (term2094 A B D P Q lt2 s f p g pat e a).
Proof. exact (eq_refl (term2157 A B D P Q lt2 s f p g pat e a)). Qed.
Lemma lem8311796 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) : (term2158 A B D P Q lt2 s f p g pat e) = (term2095 A B D P Q lt2 s f p g pat e).
Proof. exact (fun_ext (fun a : P => @lem8311795 A B D P Q lt2 s f p g pat e a)). Qed.
Lemma lem8311797 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8311798 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) : (term2159 A B D P Q lt2 s f p g pat e) = (term2096 A B D P Q lt2 s f p g pat e).
Proof. exact (MK_COMB (@lem8311797 P) (@lem8311796 A B D P Q lt2 s f p g pat e)). Qed.
Lemma lem8311799 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311800 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) : (term2160 A B D P Q lt2 s f p g pat e) = (term2149 A B D P Q lt2 s f p g pat e).
Proof. exact (MK_COMB (@lem8311799) (@lem8311798 A B D P Q lt2 s f p g pat e)). Qed.
Lemma lem8311801 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2161 A B D P Q p _111929 f arg _111928 pat e a) = (term2112 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (eq_refl (term2161 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311802 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2162 A B D P Q p _111929 f arg _111928 pat e) = (term2113 A B D P Q p _111929 f arg _111928 pat e).
Proof. exact (fun_ext (fun a : P => @lem8311801 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311803 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8311804 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2163 A B D P Q p _111929 f arg _111928 pat e) = (term2114 A B D P Q p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311803 P) (@lem8311802 A B D P Q p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311805 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2155 A B D P Q lt2 s g p _111929 f arg _111928 pat e) = (term2151 A B D P Q lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311800 A B D P Q lt2 s f p g pat e) (@lem8311804 A B D P Q p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311806 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8311807 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2164 A B D P Q lt2 s g p _111929 f arg _111928 pat e) = (term2165 A B D P Q lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311806) (@lem8311805 A B D P Q lt2 s g p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311808 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2157 A B D P Q lt2 s f p g pat e a) = (term2094 A B D P Q lt2 s f p g pat e a).
Proof. exact (eq_refl (term2157 A B D P Q lt2 s f p g pat e a)). Qed.
Lemma lem8311809 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311810 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2166 A B D P Q lt2 s f p g pat e a) = (term2167 A B D P Q lt2 s f p g pat e a).
Proof. exact (MK_COMB (@lem8311809) (@lem8311808 A B D P Q lt2 s f p g pat e a)). Qed.
Lemma lem8311811 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2161 A B D P Q p _111929 f arg _111928 pat e a) = (term2112 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (eq_refl (term2161 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311812 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2168 A B D P Q lt2 s g p _111929 f arg _111928 pat e a) = (term2169 A B D P Q lt2 s g p _111929 f arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8311810 A B D P Q lt2 s f p g pat e a) (@lem8311811 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311813 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2170 A B D P Q lt2 s g p _111929 f arg _111928 pat e) = (term2171 A B D P Q lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (fun_ext (fun a : P => @lem8311812 A B D P Q lt2 s g p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311814 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8311815 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2156 A B D P Q lt2 s g p _111929 f arg _111928 pat e) = (term2172 A B D P Q lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311814 P) (@lem8311813 A B D P Q lt2 s g p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311816 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : ((term2155 A B D P Q lt2 s g p _111929 f arg _111928 pat e) = (term2156 A B D P Q lt2 s g p _111929 f arg _111928 pat e)) = ((term2151 A B D P Q lt2 s g p _111929 f arg _111928 pat e) = (term2172 A B D P Q lt2 s g p _111929 f arg _111928 pat e)).
Proof. exact (MK_COMB (@lem8311807 A B D P Q lt2 s g p _111929 f arg _111928 pat e) (@lem8311815 A B D P Q lt2 s g p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311817 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2151 A B D P Q lt2 s g p _111929 f arg _111928 pat e) = (term2172 A B D P Q lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (EQ_MP (@lem8311816 A B D P Q lt2 s g p _111929 f arg _111928 pat e) (@lem8311794 A B D P Q lt2 s g p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311819 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term782 A P Q) = (term783 A P Q).
Proof. exact (EQ_MP (@lem18917 A P Q) (@lem18916 A P Q)). Qed.
Lemma lem8311820 {Q : Type'} (P : Q -> Prop) (Q' : Q -> Prop) : (term782 Q P Q') = (term783 Q P Q').
Proof. exact (@lem8311819 Q P Q'). Qed.
Lemma lem8311821 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2173 A B D P Q lt2 s g p _111929 f arg _111928 pat e a) = (term2174 A B D P Q lt2 s g p _111929 f arg _111928 pat e a).
Proof. exact (@lem8311820 Q (term2093 A B D P Q lt2 s f p g pat e a) (term2111 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311822 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term2175 A B D P Q lt2 s f p g pat e a t) = (term2091 A B D P Q lt2 s f p g pat t e a).
Proof. exact (eq_refl (term2175 A B D P Q lt2 s f p g pat e a t)). Qed.
Lemma lem8311823 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2176 A B D P Q lt2 s f p g pat e a) = (term2093 A B D P Q lt2 s f p g pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311822 A B D P Q lt2 s f p g pat t e a)). Qed.
Lemma lem8311824 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311825 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2177 A B D P Q lt2 s f p g pat e a) = (term2094 A B D P Q lt2 s f p g pat e a).
Proof. exact (MK_COMB (@lem8311824 Q) (@lem8311823 A B D P Q lt2 s f p g pat e a)). Qed.
Lemma lem8311826 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311827 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a : P) : (term2178 A B D P Q lt2 s f p g pat e a) = (term2167 A B D P Q lt2 s f p g pat e a).
Proof. exact (MK_COMB (@lem8311826) (@lem8311825 A B D P Q lt2 s f p g pat e a)). Qed.
Lemma lem8311828 {A B D P Q : Type'} (t : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2179 A B D P Q p _111929 f arg _111928 pat e a t) = (term2109 A B D P Q t p _111929 f arg _111928 pat e a).
Proof. exact (eq_refl (term2179 A B D P Q p _111929 f arg _111928 pat e a t)). Qed.
Lemma lem8311829 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2180 A B D P Q p _111929 f arg _111928 pat e a) = (term2111 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311828 A B D P Q t p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311830 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311831 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2181 A B D P Q p _111929 f arg _111928 pat e a) = (term2112 A B D P Q p _111929 f arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8311830 Q) (@lem8311829 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311832 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2173 A B D P Q lt2 s g p _111929 f arg _111928 pat e a) = (term2169 A B D P Q lt2 s g p _111929 f arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8311827 A B D P Q lt2 s f p g pat e a) (@lem8311831 A B D P Q p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311833 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8311834 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2182 A B D P Q lt2 s g p _111929 f arg _111928 pat e a) = (term2183 A B D P Q lt2 s g p _111929 f arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8311833) (@lem8311832 A B D P Q lt2 s g p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311835 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term2175 A B D P Q lt2 s f p g pat e a t) = (term2091 A B D P Q lt2 s f p g pat t e a).
Proof. exact (eq_refl (term2175 A B D P Q lt2 s f p g pat e a t)). Qed.
Lemma lem8311836 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311837 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term2184 A B D P Q lt2 s f p g pat e a t) = (term2185 A B D P Q lt2 s f p g pat t e a).
Proof. exact (MK_COMB (@lem8311836) (@lem8311835 A B D P Q lt2 s f p g pat t e a)). Qed.
Lemma lem8311838 {A B D P Q : Type'} (t : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2179 A B D P Q p _111929 f arg _111928 pat e a t) = (term2109 A B D P Q t p _111929 f arg _111928 pat e a).
Proof. exact (eq_refl (term2179 A B D P Q p _111929 f arg _111928 pat e a t)). Qed.
Lemma lem8311839 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (t : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2186 A B D P Q lt2 s g p _111929 f arg _111928 pat e a t) = (term2187 A B D P Q lt2 s g t p _111929 f arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8311837 A B D P Q lt2 s f p g pat t e a) (@lem8311838 A B D P Q t p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311840 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2188 A B D P Q lt2 s g p _111929 f arg _111928 pat e a) = (term2189 A B D P Q lt2 s g p _111929 f arg _111928 pat e a).
Proof. exact (fun_ext (fun t : Q => @lem8311839 A B D P Q lt2 s g t p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311841 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311842 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2174 A B D P Q lt2 s g p _111929 f arg _111928 pat e a) = (term2190 A B D P Q lt2 s g p _111929 f arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8311841 Q) (@lem8311840 A B D P Q lt2 s g p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311843 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : ((term2173 A B D P Q lt2 s g p _111929 f arg _111928 pat e a) = (term2174 A B D P Q lt2 s g p _111929 f arg _111928 pat e a)) = ((term2169 A B D P Q lt2 s g p _111929 f arg _111928 pat e a) = (term2190 A B D P Q lt2 s g p _111929 f arg _111928 pat e a)).
Proof. exact (MK_COMB (@lem8311834 A B D P Q lt2 s g p _111929 f arg _111928 pat e a) (@lem8311842 A B D P Q lt2 s g p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311844 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2169 A B D P Q lt2 s g p _111929 f arg _111928 pat e a) = (term2190 A B D P Q lt2 s g p _111929 f arg _111928 pat e a).
Proof. exact (EQ_MP (@lem8311843 A B D P Q lt2 s g p _111929 f arg _111928 pat e a) (@lem8311821 A B D P Q lt2 s g p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311845 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2171 A B D P Q lt2 s g p _111929 f arg _111928 pat e) = (term2191 A B D P Q lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (fun_ext (fun a : P => @lem8311844 A B D P Q lt2 s g p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311846 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8311847 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2172 A B D P Q lt2 s g p _111929 f arg _111928 pat e) = (term2192 A B D P Q lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311846 P) (@lem8311845 A B D P Q lt2 s g p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311848 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2151 A B D P Q lt2 s g p _111929 f arg _111928 pat e) = (term2192 A B D P Q lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (TRANS (@lem8311817 A B D P Q lt2 s g p _111929 f arg _111928 pat e) (@lem8311847 A B D P Q lt2 s g p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311849 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2153 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2193 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (fun_ext (fun g : A -> B => @lem8311848 A B D P Q lt2 s g p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311850 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8311851 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2154 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311850 A B) (@lem8311849 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311852 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2134 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (TRANS (@lem8311790 A B D P Q lt2 s p _111929 f arg _111928 pat e) (@lem8311851 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311853 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2136 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2195 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8311852 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311854 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8311855 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2137 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2196 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311854 A B) (@lem8311853 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8311856 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2117 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2196 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (TRANS (@lem8311764 A B D P Q lt2 s p _111929 arg _111928 pat e) (@lem8311855 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8311857 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1988 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2196 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (TRANS (@lem8311737 A B D P Q lt2 s p _111929 arg _111928 pat e) (@lem8311856 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8311858 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1993 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2197 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311549 A B D P Q p arg _111928 pat e lt2 s) (@lem8311857 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8311860 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term782 A P Q) = (term783 A P Q).
Proof. exact (EQ_MP (@lem18917 A P Q) (@lem18916 A P Q)). Qed.
Lemma lem8311861 {A B : Type'} (P : type572 A B) (Q : type572 A B) : (term2118 A B P Q) = (term2119 A B P Q).
Proof. exact (@lem8311860 (A -> B) P Q). Qed.
Lemma lem8311862 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2198 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2199 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (@lem8311861 A B (term2039 A B D P Q p arg _111928 pat e lt2 s) (term2195 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8311863 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term2200 A B D P Q p arg _111928 pat e lt2 s f) = (term2038 A B D P Q p f arg _111928 pat e lt2 s).
Proof. exact (eq_refl (term2200 A B D P Q p arg _111928 pat e lt2 s f)). Qed.
Lemma lem8311864 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term2201 A B D P Q p arg _111928 pat e lt2 s) = (term2039 A B D P Q p arg _111928 pat e lt2 s).
Proof. exact (fun_ext (fun f : A -> B => @lem8311863 A B D P Q p f arg _111928 pat e lt2 s)). Qed.
Lemma lem8311865 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8311866 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term2202 A B D P Q p arg _111928 pat e lt2 s) = (term2040 A B D P Q p arg _111928 pat e lt2 s).
Proof. exact (MK_COMB (@lem8311865 A B) (@lem8311864 A B D P Q p arg _111928 pat e lt2 s)). Qed.
Lemma lem8311867 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311868 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term2203 A B D P Q p arg _111928 pat e lt2 s) = (term2041 A B D P Q p arg _111928 pat e lt2 s).
Proof. exact (MK_COMB (@lem8311867) (@lem8311866 A B D P Q p arg _111928 pat e lt2 s)). Qed.
Lemma lem8311869 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2204 A B D P Q lt2 s p _111929 arg _111928 pat e f) = (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (eq_refl (term2204 A B D P Q lt2 s p _111929 arg _111928 pat e f)). Qed.
Lemma lem8311870 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2205 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2195 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8311869 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311871 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8311872 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2206 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2196 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311871 A B) (@lem8311870 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8311873 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2198 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2197 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311868 A B D P Q p arg _111928 pat e lt2 s) (@lem8311872 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8311874 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8311875 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2207 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2208 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311874) (@lem8311873 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8311876 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term2200 A B D P Q p arg _111928 pat e lt2 s f) = (term2038 A B D P Q p f arg _111928 pat e lt2 s).
Proof. exact (eq_refl (term2200 A B D P Q p arg _111928 pat e lt2 s f)). Qed.
Lemma lem8311877 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311878 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term2209 A B D P Q p arg _111928 pat e lt2 s f) = (term2210 A B D P Q p f arg _111928 pat e lt2 s).
Proof. exact (MK_COMB (@lem8311877) (@lem8311876 A B D P Q p f arg _111928 pat e lt2 s)). Qed.
Lemma lem8311879 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2204 A B D P Q lt2 s p _111929 arg _111928 pat e f) = (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (eq_refl (term2204 A B D P Q lt2 s p _111929 arg _111928 pat e f)). Qed.
Lemma lem8311880 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2211 A B D P Q lt2 s p _111929 arg _111928 pat e f) = (term2212 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311878 A B D P Q p f arg _111928 pat e lt2 s) (@lem8311879 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311881 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2213 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2214 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8311880 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311882 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8311883 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2199 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2215 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311882 A B) (@lem8311881 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8311884 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : ((term2198 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2199 A B D P Q lt2 s p _111929 arg _111928 pat e)) = ((term2197 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2215 A B D P Q lt2 s p _111929 arg _111928 pat e)).
Proof. exact (MK_COMB (@lem8311875 A B D P Q lt2 s p _111929 arg _111928 pat e) (@lem8311883 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8311885 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2197 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2215 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (EQ_MP (@lem8311884 A B D P Q lt2 s p _111929 arg _111928 pat e) (@lem8311862 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8311889 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1801 A P Q) = (term1802 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8311890 {P : Type'} (P' : P -> Prop) (Q : Prop) : (term1801 P P' Q) = (term1802 P P' Q).
Proof. exact (@lem8311889 P P' Q). Qed.
Lemma lem8311891 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2216 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2217 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (@lem8311890 P (term2037 A B D P Q p f arg _111928 pat e lt2 s) (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311892 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (a : P) : (term2218 A B D P Q p f arg _111928 pat e lt2 s a) = (term2036 A B D P Q p f arg _111928 pat e lt2 s a).
Proof. exact (eq_refl (term2218 A B D P Q p f arg _111928 pat e lt2 s a)). Qed.
Lemma lem8311893 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term2219 A B D P Q p f arg _111928 pat e lt2 s) = (term2037 A B D P Q p f arg _111928 pat e lt2 s).
Proof. exact (fun_ext (fun a : P => @lem8311892 A B D P Q p f arg _111928 pat e lt2 s a)). Qed.
Lemma lem8311894 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8311895 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term2220 A B D P Q p f arg _111928 pat e lt2 s) = (term2038 A B D P Q p f arg _111928 pat e lt2 s).
Proof. exact (MK_COMB (@lem8311894 P) (@lem8311893 A B D P Q p f arg _111928 pat e lt2 s)). Qed.
Lemma lem8311896 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311897 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) : (term2221 A B D P Q p f arg _111928 pat e lt2 s) = (term2210 A B D P Q p f arg _111928 pat e lt2 s).
Proof. exact (MK_COMB (@lem8311896) (@lem8311895 A B D P Q p f arg _111928 pat e lt2 s)). Qed.
Lemma lem8311898 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (eq_refl (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311899 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2216 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2212 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311897 A B D P Q p f arg _111928 pat e lt2 s) (@lem8311898 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311900 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8311901 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2222 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2223 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311900) (@lem8311899 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311902 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (a : P) : (term2218 A B D P Q p f arg _111928 pat e lt2 s a) = (term2036 A B D P Q p f arg _111928 pat e lt2 s a).
Proof. exact (eq_refl (term2218 A B D P Q p f arg _111928 pat e lt2 s a)). Qed.
Lemma lem8311903 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311904 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (a : P) : (term2224 A B D P Q p f arg _111928 pat e lt2 s a) = (term2225 A B D P Q p f arg _111928 pat e lt2 s a).
Proof. exact (MK_COMB (@lem8311903) (@lem8311902 A B D P Q p f arg _111928 pat e lt2 s a)). Qed.
Lemma lem8311905 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (eq_refl (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311906 {A B D P Q : Type'} (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2226 A B D P Q a lt2 s p _111929 f arg _111928 pat e) = (term2227 A B D P Q a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311904 A B D P Q p f arg _111928 pat e lt2 s a) (@lem8311905 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311907 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2228 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2229 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (fun_ext (fun a : P => @lem8311906 A B D P Q a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311908 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8311909 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2217 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2230 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311908 P) (@lem8311907 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311910 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : ((term2216 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2217 A B D P Q lt2 s p _111929 f arg _111928 pat e)) = ((term2212 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2230 A B D P Q lt2 s p _111929 f arg _111928 pat e)).
Proof. exact (MK_COMB (@lem8311901 A B D P Q lt2 s p _111929 f arg _111928 pat e) (@lem8311909 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311911 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2212 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2230 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (EQ_MP (@lem8311910 A B D P Q lt2 s p _111929 f arg _111928 pat e) (@lem8311891 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311915 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1801 A P Q) = (term1802 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8311916 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1801 A P Q) = (term1802 A P Q).
Proof. exact (@lem8311915 A P Q). Qed.
Lemma lem8311917 {A B D P Q : Type'} (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2231 A B D P Q a lt2 s p _111929 f arg _111928 pat e) = (term2232 A B D P Q a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (@lem8311916 A (term2035 A B D P Q p f arg _111928 pat e lt2 s a) (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311918 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2233 A B D P Q p f arg _111928 pat e lt2 s a y) = (term2034 A B D P Q p f arg _111928 pat e lt2 y s a).
Proof. exact (eq_refl (term2233 A B D P Q p f arg _111928 pat e lt2 s a y)). Qed.
Lemma lem8311919 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (a : P) : (term2234 A B D P Q p f arg _111928 pat e lt2 s a) = (term2035 A B D P Q p f arg _111928 pat e lt2 s a).
Proof. exact (fun_ext (fun y : A => @lem8311918 A B D P Q p f arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8311920 {A : Type'} : (@ex A) = (@ex A).
Proof. exact (eq_refl (@ex A)). Qed.
Lemma lem8311921 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (a : P) : (term2235 A B D P Q p f arg _111928 pat e lt2 s a) = (term2036 A B D P Q p f arg _111928 pat e lt2 s a).
Proof. exact (MK_COMB (@lem8311920 A) (@lem8311919 A B D P Q p f arg _111928 pat e lt2 s a)). Qed.
Lemma lem8311922 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311923 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (a : P) : (term2236 A B D P Q p f arg _111928 pat e lt2 s a) = (term2225 A B D P Q p f arg _111928 pat e lt2 s a).
Proof. exact (MK_COMB (@lem8311922) (@lem8311921 A B D P Q p f arg _111928 pat e lt2 s a)). Qed.
Lemma lem8311924 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (eq_refl (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311925 {A B D P Q : Type'} (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2231 A B D P Q a lt2 s p _111929 f arg _111928 pat e) = (term2227 A B D P Q a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311923 A B D P Q p f arg _111928 pat e lt2 s a) (@lem8311924 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311926 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8311927 {A B D P Q : Type'} (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2237 A B D P Q a lt2 s p _111929 f arg _111928 pat e) = (term2238 A B D P Q a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311926) (@lem8311925 A B D P Q a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311928 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2233 A B D P Q p f arg _111928 pat e lt2 s a y) = (term2034 A B D P Q p f arg _111928 pat e lt2 y s a).
Proof. exact (eq_refl (term2233 A B D P Q p f arg _111928 pat e lt2 s a y)). Qed.
Lemma lem8311929 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311930 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2239 A B D P Q p f arg _111928 pat e lt2 s a y) = (term2240 A B D P Q p f arg _111928 pat e lt2 y s a).
Proof. exact (MK_COMB (@lem8311929) (@lem8311928 A B D P Q p f arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8311931 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (eq_refl (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311932 {A B D P Q : Type'} (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2241 A B D P Q a y lt2 s p _111929 f arg _111928 pat e) = (term2242 A B D P Q y a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311930 A B D P Q p f arg _111928 pat e lt2 y s a) (@lem8311931 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311933 {A B D P Q : Type'} (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2243 A B D P Q a lt2 s p _111929 f arg _111928 pat e) = (term2244 A B D P Q a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (fun_ext (fun y : A => @lem8311932 A B D P Q y a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311934 {A : Type'} : (@ex A) = (@ex A).
Proof. exact (eq_refl (@ex A)). Qed.
Lemma lem8311935 {A B D P Q : Type'} (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2232 A B D P Q a lt2 s p _111929 f arg _111928 pat e) = (term2245 A B D P Q a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311934 A) (@lem8311933 A B D P Q a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311936 {A B D P Q : Type'} (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : ((term2231 A B D P Q a lt2 s p _111929 f arg _111928 pat e) = (term2232 A B D P Q a lt2 s p _111929 f arg _111928 pat e)) = ((term2227 A B D P Q a lt2 s p _111929 f arg _111928 pat e) = (term2245 A B D P Q a lt2 s p _111929 f arg _111928 pat e)).
Proof. exact (MK_COMB (@lem8311927 A B D P Q a lt2 s p _111929 f arg _111928 pat e) (@lem8311935 A B D P Q a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311937 {A B D P Q : Type'} (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2227 A B D P Q a lt2 s p _111929 f arg _111928 pat e) = (term2245 A B D P Q a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (EQ_MP (@lem8311936 A B D P Q a lt2 s p _111929 f arg _111928 pat e) (@lem8311917 A B D P Q a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311941 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1801 A P Q) = (term1802 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8311942 {Q : Type'} (P : Q -> Prop) (Q' : Prop) : (term1801 Q P Q') = (term1802 Q P Q').
Proof. exact (@lem8311941 Q P Q'). Qed.
Lemma lem8311943 {A B D P Q : Type'} (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2246 A B D P Q y a lt2 s p _111929 f arg _111928 pat e) = (term2247 A B D P Q y a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (@lem8311942 Q (term2033 A B D P Q p f arg _111928 pat e lt2 y s a) (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311944 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2248 A B D P Q p f arg _111928 pat e lt2 y s a t) = (term2031 A B D P Q p f t arg _111928 pat e lt2 y s a).
Proof. exact (eq_refl (term2248 A B D P Q p f arg _111928 pat e lt2 y s a t)). Qed.
Lemma lem8311945 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2249 A B D P Q p f arg _111928 pat e lt2 y s a) = (term2033 A B D P Q p f arg _111928 pat e lt2 y s a).
Proof. exact (fun_ext (fun t : Q => @lem8311944 A B D P Q p f t arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8311946 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311947 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2250 A B D P Q p f arg _111928 pat e lt2 y s a) = (term2034 A B D P Q p f arg _111928 pat e lt2 y s a).
Proof. exact (MK_COMB (@lem8311946 Q) (@lem8311945 A B D P Q p f arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8311948 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311949 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2251 A B D P Q p f arg _111928 pat e lt2 y s a) = (term2240 A B D P Q p f arg _111928 pat e lt2 y s a).
Proof. exact (MK_COMB (@lem8311948) (@lem8311947 A B D P Q p f arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8311950 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (eq_refl (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311951 {A B D P Q : Type'} (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2246 A B D P Q y a lt2 s p _111929 f arg _111928 pat e) = (term2242 A B D P Q y a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311949 A B D P Q p f arg _111928 pat e lt2 y s a) (@lem8311950 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311952 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8311953 {A B D P Q : Type'} (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2252 A B D P Q y a lt2 s p _111929 f arg _111928 pat e) = (term2253 A B D P Q y a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311952) (@lem8311951 A B D P Q y a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311954 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2248 A B D P Q p f arg _111928 pat e lt2 y s a t) = (term2031 A B D P Q p f t arg _111928 pat e lt2 y s a).
Proof. exact (eq_refl (term2248 A B D P Q p f arg _111928 pat e lt2 y s a t)). Qed.
Lemma lem8311955 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8311956 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2254 A B D P Q p f arg _111928 pat e lt2 y s a t) = (term2255 A B D P Q p f t arg _111928 pat e lt2 y s a).
Proof. exact (MK_COMB (@lem8311955) (@lem8311954 A B D P Q p f t arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8311957 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (eq_refl (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311958 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2256 A B D P Q y a t lt2 s p _111929 f arg _111928 pat e) = (term2257 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311956 A B D P Q p f t arg _111928 pat e lt2 y s a) (@lem8311957 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311959 {A B D P Q : Type'} (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2258 A B D P Q y a lt2 s p _111929 f arg _111928 pat e) = (term2259 A B D P Q y a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (fun_ext (fun t : Q => @lem8311958 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311960 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8311961 {A B D P Q : Type'} (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2247 A B D P Q y a lt2 s p _111929 f arg _111928 pat e) = (term2260 A B D P Q y a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311960 Q) (@lem8311959 A B D P Q y a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311962 {A B D P Q : Type'} (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : ((term2246 A B D P Q y a lt2 s p _111929 f arg _111928 pat e) = (term2247 A B D P Q y a lt2 s p _111929 f arg _111928 pat e)) = ((term2242 A B D P Q y a lt2 s p _111929 f arg _111928 pat e) = (term2260 A B D P Q y a lt2 s p _111929 f arg _111928 pat e)).
Proof. exact (MK_COMB (@lem8311953 A B D P Q y a lt2 s p _111929 f arg _111928 pat e) (@lem8311961 A B D P Q y a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311963 {A B D P Q : Type'} (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2242 A B D P Q y a lt2 s p _111929 f arg _111928 pat e) = (term2260 A B D P Q y a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (EQ_MP (@lem8311962 A B D P Q y a lt2 s p _111929 f arg _111928 pat e) (@lem8311943 A B D P Q y a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311965 {A : Type'} (P : Prop) (Q : A -> Prop) : (term644 A P Q) = (term645 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8311966 {A B : Type'} (P : Prop) (Q : type572 A B) : (term2261 A B P Q) = (term2262 A B P Q).
Proof. exact (@lem8311965 (A -> B) P Q). Qed.
Lemma lem8311967 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2263 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e) = (term2264 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (@lem8311966 A B (term2031 A B D P Q p f t arg _111928 pat e lt2 y s a) (term2193 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311968 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2265 A B D P Q lt2 s p _111929 f arg _111928 pat e g) = (term2192 A B D P Q lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (eq_refl (term2265 A B D P Q lt2 s p _111929 f arg _111928 pat e g)). Qed.
Lemma lem8311969 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2266 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2193 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (fun_ext (fun g : A -> B => @lem8311968 A B D P Q lt2 s g p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311970 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8311971 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2267 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2194 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311970 A B) (@lem8311969 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311972 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2255 A B D P Q p f t arg _111928 pat e lt2 y s a) = (term2255 A B D P Q p f t arg _111928 pat e lt2 y s a).
Proof. exact (eq_refl (term2255 A B D P Q p f t arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8311973 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2263 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e) = (term2257 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311972 A B D P Q p f t arg _111928 pat e lt2 y s a) (@lem8311971 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311974 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8311975 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2268 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e) = (term2269 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311974) (@lem8311973 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311976 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2265 A B D P Q lt2 s p _111929 f arg _111928 pat e g) = (term2192 A B D P Q lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (eq_refl (term2265 A B D P Q lt2 s p _111929 f arg _111928 pat e g)). Qed.
Lemma lem8311977 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2255 A B D P Q p f t arg _111928 pat e lt2 y s a) = (term2255 A B D P Q p f t arg _111928 pat e lt2 y s a).
Proof. exact (eq_refl (term2255 A B D P Q p f t arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8311978 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2270 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e g) = (term2271 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311977 A B D P Q p f t arg _111928 pat e lt2 y s a) (@lem8311976 A B D P Q lt2 s g p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311979 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2272 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e) = (term2273 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (fun_ext (fun g : A -> B => @lem8311978 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311980 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8311981 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2264 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e) = (term2274 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311980 A B) (@lem8311979 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311982 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : ((term2263 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e) = (term2264 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e)) = ((term2257 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e) = (term2274 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e)).
Proof. exact (MK_COMB (@lem8311975 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e) (@lem8311981 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311983 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2257 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e) = (term2274 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (EQ_MP (@lem8311982 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e) (@lem8311967 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311985 {A : Type'} (P : Prop) (Q : A -> Prop) : (term644 A P Q) = (term645 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8311986 {P : Type'} (P' : Prop) (Q : P -> Prop) : (term644 P P' Q) = (term645 P P' Q).
Proof. exact (@lem8311985 P P' Q). Qed.
Lemma lem8311987 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2275 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e) = (term2276 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (@lem8311986 P (term2031 A B D P Q p f t arg _111928 pat e lt2 y s a) (term2191 A B D P Q lt2 s g p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311988 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2277 A B D P Q lt2 s g p _111929 f arg _111928 pat e a) = (term2190 A B D P Q lt2 s g p _111929 f arg _111928 pat e a).
Proof. exact (eq_refl (term2277 A B D P Q lt2 s g p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311989 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2278 A B D P Q lt2 s g p _111929 f arg _111928 pat e) = (term2191 A B D P Q lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (fun_ext (fun a : P => @lem8311988 A B D P Q lt2 s g p _111929 f arg _111928 pat e a)). Qed.
Lemma lem8311990 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8311991 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2279 A B D P Q lt2 s g p _111929 f arg _111928 pat e) = (term2192 A B D P Q lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311990 P) (@lem8311989 A B D P Q lt2 s g p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311992 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2255 A B D P Q p f t arg _111928 pat e lt2 y s a) = (term2255 A B D P Q p f t arg _111928 pat e lt2 y s a).
Proof. exact (eq_refl (term2255 A B D P Q p f t arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8311993 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2275 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e) = (term2271 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311992 A B D P Q p f t arg _111928 pat e lt2 y s a) (@lem8311991 A B D P Q lt2 s g p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311994 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8311995 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2280 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e) = (term2281 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8311994) (@lem8311993 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e)). Qed.
Lemma lem8311996 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2277 A B D P Q lt2 s g p _111929 f arg _111928 pat e a') = (term2190 A B D P Q lt2 s g p _111929 f arg _111928 pat e a').
Proof. exact (eq_refl (term2277 A B D P Q lt2 s g p _111929 f arg _111928 pat e a')). Qed.
Lemma lem8311997 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2255 A B D P Q p f t arg _111928 pat e lt2 y s a) = (term2255 A B D P Q p f t arg _111928 pat e lt2 y s a).
Proof. exact (eq_refl (term2255 A B D P Q p f t arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8311998 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2282 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a') = (term2283 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a').
Proof. exact (MK_COMB (@lem8311997 A B D P Q p f t arg _111928 pat e lt2 y s a) (@lem8311996 A B D P Q lt2 s g p _111929 f arg _111928 pat e a')). Qed.
Lemma lem8311999 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2284 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e) = (term2285 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (fun_ext (fun a' : P => @lem8311998 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a')). Qed.
Lemma lem8312000 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8312001 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2276 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e) = (term2286 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8312000 P) (@lem8311999 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e)). Qed.
Lemma lem8312002 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : ((term2275 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e) = (term2276 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e)) = ((term2271 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e) = (term2286 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e)).
Proof. exact (MK_COMB (@lem8311995 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e) (@lem8312001 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e)). Qed.
Lemma lem8312003 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2271 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e) = (term2286 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (EQ_MP (@lem8312002 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e) (@lem8311987 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e)). Qed.
Lemma lem8312005 {A : Type'} (P : Prop) (Q : A -> Prop) : (term644 A P Q) = (term645 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8312006 {Q : Type'} (P : Prop) (Q' : Q -> Prop) : (term644 Q P Q') = (term645 Q P Q').
Proof. exact (@lem8312005 Q P Q'). Qed.
Lemma lem8312007 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2287 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a') = (term2288 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a').
Proof. exact (@lem8312006 Q (term2031 A B D P Q p f t arg _111928 pat e lt2 y s a) (term2189 A B D P Q lt2 s g p _111929 f arg _111928 pat e a')). Qed.
Lemma lem8312008 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (t : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2289 A B D P Q lt2 s g p _111929 f arg _111928 pat e a' t) = (term2187 A B D P Q lt2 s g t p _111929 f arg _111928 pat e a').
Proof. exact (eq_refl (term2289 A B D P Q lt2 s g p _111929 f arg _111928 pat e a' t)). Qed.
Lemma lem8312009 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2290 A B D P Q lt2 s g p _111929 f arg _111928 pat e a') = (term2189 A B D P Q lt2 s g p _111929 f arg _111928 pat e a').
Proof. exact (fun_ext (fun t : Q => @lem8312008 A B D P Q lt2 s g t p _111929 f arg _111928 pat e a')). Qed.
Lemma lem8312010 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8312011 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2291 A B D P Q lt2 s g p _111929 f arg _111928 pat e a') = (term2190 A B D P Q lt2 s g p _111929 f arg _111928 pat e a').
Proof. exact (MK_COMB (@lem8312010 Q) (@lem8312009 A B D P Q lt2 s g p _111929 f arg _111928 pat e a')). Qed.
Lemma lem8312012 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2255 A B D P Q p f t arg _111928 pat e lt2 y s a) = (term2255 A B D P Q p f t arg _111928 pat e lt2 y s a).
Proof. exact (eq_refl (term2255 A B D P Q p f t arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8312013 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2287 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a') = (term2283 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a').
Proof. exact (MK_COMB (@lem8312012 A B D P Q p f t arg _111928 pat e lt2 y s a) (@lem8312011 A B D P Q lt2 s g p _111929 f arg _111928 pat e a')). Qed.
Lemma lem8312014 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8312015 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2292 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a') = (term2293 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a').
Proof. exact (MK_COMB (@lem8312014) (@lem8312013 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a')). Qed.
Lemma lem8312016 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2289 A B D P Q lt2 s g p _111929 f arg _111928 pat e a' t') = (term2187 A B D P Q lt2 s g t' p _111929 f arg _111928 pat e a').
Proof. exact (eq_refl (term2289 A B D P Q lt2 s g p _111929 f arg _111928 pat e a' t')). Qed.
Lemma lem8312017 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2255 A B D P Q p f t arg _111928 pat e lt2 y s a) = (term2255 A B D P Q p f t arg _111928 pat e lt2 y s a).
Proof. exact (eq_refl (term2255 A B D P Q p f t arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8312018 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2294 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a' t') = (term2295 A B D P Q t y a lt2 s g t' p _111929 f arg _111928 pat e a').
Proof. exact (MK_COMB (@lem8312017 A B D P Q p f t arg _111928 pat e lt2 y s a) (@lem8312016 A B D P Q lt2 s g t' p _111929 f arg _111928 pat e a')). Qed.
Lemma lem8312019 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2296 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a') = (term2297 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a').
Proof. exact (fun_ext (fun t' : Q => @lem8312018 A B D P Q t y a lt2 s g t' p _111929 f arg _111928 pat e a')). Qed.
Lemma lem8312020 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8312021 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2288 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a') = (term2298 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a').
Proof. exact (MK_COMB (@lem8312020 Q) (@lem8312019 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a')). Qed.
Lemma lem8312022 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : ((term2287 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a') = (term2288 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a')) = ((term2283 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a') = (term2298 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a')).
Proof. exact (MK_COMB (@lem8312015 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a') (@lem8312021 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a')). Qed.
Lemma lem8312023 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2283 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a') = (term2298 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a').
Proof. exact (EQ_MP (@lem8312022 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a') (@lem8312007 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a')). Qed.
Lemma lem8312024 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2285 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e) = (term2299 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (fun_ext (fun a' : P => @lem8312023 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a')). Qed.
Lemma lem8312025 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8312026 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2286 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e) = (term2300 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8312025 P) (@lem8312024 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e)). Qed.
Lemma lem8312027 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2271 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e) = (term2300 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e).
Proof. exact (TRANS (@lem8312003 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e) (@lem8312026 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e)). Qed.
Lemma lem8312028 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2273 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e) = (term2301 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (fun_ext (fun g : A -> B => @lem8312027 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e)). Qed.
Lemma lem8312029 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8312030 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2274 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e) = (term2302 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8312029 A B) (@lem8312028 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8312031 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2257 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e) = (term2302 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (TRANS (@lem8311983 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e) (@lem8312030 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8312032 {A B D P Q : Type'} (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2259 A B D P Q y a lt2 s p _111929 f arg _111928 pat e) = (term2303 A B D P Q y a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (fun_ext (fun t : Q => @lem8312031 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8312033 {Q : Type'} : (@ex Q) = (@ex Q).
Proof. exact (eq_refl (@ex Q)). Qed.
Lemma lem8312034 {A B D P Q : Type'} (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2260 A B D P Q y a lt2 s p _111929 f arg _111928 pat e) = (term2304 A B D P Q y a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8312033 Q) (@lem8312032 A B D P Q y a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8312035 {A B D P Q : Type'} (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2242 A B D P Q y a lt2 s p _111929 f arg _111928 pat e) = (term2304 A B D P Q y a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (TRANS (@lem8311963 A B D P Q y a lt2 s p _111929 f arg _111928 pat e) (@lem8312034 A B D P Q y a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8312036 {A B D P Q : Type'} (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2244 A B D P Q a lt2 s p _111929 f arg _111928 pat e) = (term2305 A B D P Q a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (fun_ext (fun y : A => @lem8312035 A B D P Q y a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8312037 {A : Type'} : (@ex A) = (@ex A).
Proof. exact (eq_refl (@ex A)). Qed.
Lemma lem8312038 {A B D P Q : Type'} (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2245 A B D P Q a lt2 s p _111929 f arg _111928 pat e) = (term2306 A B D P Q a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8312037 A) (@lem8312036 A B D P Q a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8312039 {A B D P Q : Type'} (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2227 A B D P Q a lt2 s p _111929 f arg _111928 pat e) = (term2306 A B D P Q a lt2 s p _111929 f arg _111928 pat e).
Proof. exact (TRANS (@lem8311937 A B D P Q a lt2 s p _111929 f arg _111928 pat e) (@lem8312038 A B D P Q a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8312040 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2229 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2307 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (fun_ext (fun a : P => @lem8312039 A B D P Q a lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8312041 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8312042 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2230 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2308 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (MK_COMB (@lem8312041 P) (@lem8312040 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8312043 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2212 A B D P Q lt2 s p _111929 f arg _111928 pat e) = (term2308 A B D P Q lt2 s p _111929 f arg _111928 pat e).
Proof. exact (TRANS (@lem8311911 A B D P Q lt2 s p _111929 f arg _111928 pat e) (@lem8312042 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8312044 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2214 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2309 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8312043 A B D P Q lt2 s p _111929 f arg _111928 pat e)). Qed.
Lemma lem8312045 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8312046 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2215 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2310 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (MK_COMB (@lem8312045 A B) (@lem8312044 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8312047 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2197 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2310 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (TRANS (@lem8311885 A B D P Q lt2 s p _111929 arg _111928 pat e) (@lem8312046 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8312049 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1993 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2310 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (TRANS (@lem8311858 A B D P Q lt2 s p _111929 arg _111928 pat e) (@lem8312047 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8312050 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1558 A B D P Q lt2 s p _111929 arg _111928 pat e) = (term2310 A B D P Q lt2 s p _111929 arg _111928 pat e).
Proof. exact (TRANS (@lem8311223 A B D P Q lt2 s p _111929 arg _111928 pat e) (@lem8312049 A B D P Q lt2 s p _111929 arg _111928 pat e)). Qed.
Lemma lem8312051 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (h1 : term1558 A B D P Q lt2 s p _111929 arg _111928 pat e) : term2310 A B D P Q lt2 s p _111929 arg _111928 pat e.
Proof. exact (EQ_MP (@lem8312050 A B D P Q lt2 s p _111929 arg _111928 pat e) (@lem8309873 A B D P Q lt2 s p _111929 arg _111928 pat e h1)). Qed.
Lemma lem8312052 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (h1 : term2308 A B D P Q lt2 s p _111929 f arg _111928 pat e) : term2308 A B D P Q lt2 s p _111929 f arg _111928 pat e.
Proof. exact (h1). Qed.
Lemma lem8312053 {A B D P Q : Type'} (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (h1 : term2306 A B D P Q a lt2 s p _111929 f arg _111928 pat e) : term2306 A B D P Q a lt2 s p _111929 f arg _111928 pat e.
Proof. exact (h1). Qed.
Lemma lem8312054 {A B D P Q : Type'} (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (h1 : term2304 A B D P Q y a lt2 s p _111929 f arg _111928 pat e) : term2304 A B D P Q y a lt2 s p _111929 f arg _111928 pat e.
Proof. exact (h1). Qed.
Lemma lem8312055 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (h1 : term2302 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e) : term2302 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e.
Proof. exact (h1). Qed.
Lemma lem8312056 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (h1 : term2300 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e) : term2300 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e.
Proof. exact (h1). Qed.
Lemma lem8312057 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2298 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a') : term2298 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a'.
Proof. exact (h1). Qed.
Lemma lem8312058 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2295 A B D P Q t y a lt2 s g t' p _111929 f arg _111928 pat e a') : term2295 A B D P Q t y a lt2 s g t' p _111929 f arg _111928 pat e a'.
Proof. exact (h1). Qed.
Lemma lem8312059 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term1889 A B P lt2 s z p.
Proof. exact (h1). Qed.
Lemma lem8312060 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term1731 A B D P Q t'' _111929.
Proof. exact (h1). Qed.
Lemma lem8312061 {D : Type'} : (@eq D) = (@eq D).
Proof. exact (eq_refl (@eq D)). Qed.
Lemma lem8312062 {D Q : Type'} (pat : Q -> D) : pat = pat.
Proof. exact (eq_refl pat). Qed.
Lemma lem8312071 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312072 {D P Q : Type'} (f : type886 D P Q) (x : Q -> D) : (f x) = (@I ((Q -> D) -> (P -> D) -> P -> Q) f x).
Proof. exact (@lem8312071 (Q -> D) (type798 D P Q) f x). Qed.
Lemma lem8312073 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) : (_111928 pat) = (@I ((Q -> D) -> (P -> D) -> P -> Q) _111928 pat).
Proof. exact (@lem8312072 D P Q _111928 pat). Qed.
Lemma lem8312074 {D P : Type'} (e : P -> D) : e = e.
Proof. exact (eq_refl e). Qed.
Lemma lem8312075 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (_111928 pat e) = (@I ((Q -> D) -> (P -> D) -> P -> Q) _111928 pat e).
Proof. exact (MK_COMB (@lem8312073 D P Q _111928 pat) (@lem8312074 D P e)). Qed.
Lemma lem8312077 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312078 {D P Q : Type'} (f : type798 D P Q) (x : P -> D) : (f x) = (@I ((P -> D) -> P -> Q) f x).
Proof. exact (@lem8312077 (P -> D) (P -> Q) f x). Qed.
Lemma lem8312079 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (@I ((Q -> D) -> (P -> D) -> P -> Q) _111928 pat e) = (term2311 D P Q _111928 pat e).
Proof. exact (@lem8312078 D P Q (@I ((Q -> D) -> (P -> D) -> P -> Q) _111928 pat) e). Qed.
Lemma lem8312080 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (_111928 pat e) = (term2311 D P Q _111928 pat e).
Proof. exact (TRANS (@lem8312075 D P Q _111928 pat e) (@lem8312079 D P Q _111928 pat e)). Qed.
Lemma lem8312081 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8312082 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (_111928 pat e a) = (term2312 D P Q _111928 pat e a).
Proof. exact (MK_COMB (@lem8312080 D P Q _111928 pat e) (@lem8312081 P a)). Qed.
Lemma lem8312084 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312085 {P Q : Type'} (f : P -> Q) (x : P) : (f x) = (@I (P -> Q) f x).
Proof. exact (@lem8312084 P Q f x). Qed.
Lemma lem8312086 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2312 D P Q _111928 pat e a) = (term2313 D P Q _111928 pat e a).
Proof. exact (@lem8312085 P Q (term2311 D P Q _111928 pat e) a). Qed.
Lemma lem8312088 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (_111928 pat e a) = (term2313 D P Q _111928 pat e a).
Proof. exact (TRANS (@lem8312082 D P Q _111928 pat e a) (@lem8312086 D P Q _111928 pat e a)). Qed.
Lemma lem8312089 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1240 D P Q _111928 pat e a) = (term2314 D P Q _111928 pat e a).
Proof. exact (MK_COMB (@lem8312062 D Q pat) (@lem8312088 D P Q _111928 pat e a)). Qed.
Lemma lem8312091 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312092 {D Q : Type'} (f : Q -> D) (x : Q) : (f x) = (@I (Q -> D) f x).
Proof. exact (@lem8312091 Q D f x). Qed.
Lemma lem8312093 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2314 D P Q _111928 pat e a) = (term2315 D P Q _111928 pat e a).
Proof. exact (@lem8312092 D Q pat (term2313 D P Q _111928 pat e a)). Qed.
Lemma lem8312094 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1240 D P Q _111928 pat e a) = (term2315 D P Q _111928 pat e a).
Proof. exact (TRANS (@lem8312089 D P Q _111928 pat e a) (@lem8312093 D P Q _111928 pat e a)). Qed.
Lemma lem8312099 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312100 {D P : Type'} (f : P -> D) (x : P) : (f x) = (@I (P -> D) f x).
Proof. exact (@lem8312099 P D f x). Qed.
Lemma lem8312102 {D P : Type'} (e : P -> D) (a : P) : (e a) = (@I (P -> D) e a).
Proof. exact (@lem8312100 D P e a). Qed.
Lemma lem8312103 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1242 D P Q _111928 pat e a) = (term2316 D P Q _111928 pat e a).
Proof. exact (MK_COMB (@lem8312061 D) (@lem8312094 D P Q _111928 pat e a)). Qed.
Lemma lem8312104 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : ((term1240 D P Q _111928 pat e a) = (e a)) = ((term2315 D P Q _111928 pat e a) = (@I (P -> D) e a)).
Proof. exact (MK_COMB (@lem8312103 D P Q _111928 pat e a) (@lem8312102 D P e a)). Qed.
Lemma lem8312105 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8312106 {D : Type'} : (@eq D) = (@eq D).
Proof. exact (eq_refl (@eq D)). Qed.
Lemma lem8312111 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312112 {D Q : Type'} (f : Q -> D) (x : Q) : (f x) = (@I (Q -> D) f x).
Proof. exact (@lem8312111 Q D f x). Qed.
Lemma lem8312114 {D Q : Type'} (pat : Q -> D) (x : Q) : (pat x) = (@I (Q -> D) pat x).
Proof. exact (@lem8312112 D Q pat x). Qed.
Lemma lem8312119 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312120 {D P : Type'} (f : P -> D) (x : P) : (f x) = (@I (P -> D) f x).
Proof. exact (@lem8312119 P D f x). Qed.
Lemma lem8312122 {D P : Type'} (e : P -> D) (a : P) : (e a) = (@I (P -> D) e a).
Proof. exact (@lem8312120 D P e a). Qed.
Lemma lem8312123 {D Q : Type'} (pat : Q -> D) (x : Q) : (term2317 D Q pat x) = (term2318 D Q pat x).
Proof. exact (MK_COMB (@lem8312106 D) (@lem8312114 D Q pat x)). Qed.
Lemma lem8312124 {D P Q : Type'} (pat : Q -> D) (x : Q) (e : P -> D) (a : P) : ((pat x) = (e a)) = ((@I (Q -> D) pat x) = (@I (P -> D) e a)).
Proof. exact (MK_COMB (@lem8312123 D Q pat x) (@lem8312122 D P e a)). Qed.
Lemma lem8312125 {D P Q : Type'} (pat : Q -> D) (x : Q) (e : P -> D) (a : P) : (term474 D P Q pat x e a) = (term2319 D P Q pat x e a).
Proof. exact (MK_COMB (@lem8312105) (@lem8312124 D P Q pat x e a)). Qed.
Lemma lem8312126 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term476 D P Q pat e a) = (term2320 D P Q pat e a).
Proof. exact (fun_ext (fun x : Q => @lem8312125 D P Q pat x e a)). Qed.
Lemma lem8312127 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8312128 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term477 D P Q pat e a) = (term2321 D P Q pat e a).
Proof. exact (MK_COMB (@lem8312127 Q) (@lem8312126 D P Q pat e a)). Qed.
Lemma lem8312129 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8312130 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term1754 D P Q pat e a) = (term2322 D P Q pat e a).
Proof. exact (MK_COMB (@lem8312129) (@lem8312128 D P Q pat e a)). Qed.
Lemma lem8312131 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1755 D P Q _111928 pat e a) = (term2323 D P Q _111928 pat e a).
Proof. exact (MK_COMB (@lem8312130 D P Q pat e a) (@lem8312104 D P Q _111928 pat e a)). Qed.
Lemma lem8312132 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1756 D P Q _111928 pat e) = (term2324 D P Q _111928 pat e).
Proof. exact (fun_ext (fun a : P => @lem8312131 D P Q _111928 pat e a)). Qed.
Lemma lem8312133 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8312134 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term1757 D P Q _111928 pat e) = (term2325 D P Q _111928 pat e).
Proof. exact (MK_COMB (@lem8312133 P) (@lem8312132 D P Q _111928 pat e)). Qed.
Lemma lem8312135 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) : (term1758 D P Q _111928 pat) = (term2326 D P Q _111928 pat).
Proof. exact (fun_ext (fun e : P -> D => @lem8312134 D P Q _111928 pat e)). Qed.
Lemma lem8312136 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8312137 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) : (term1759 D P Q _111928 pat) = (term2327 D P Q _111928 pat).
Proof. exact (MK_COMB (@lem8312136 D P) (@lem8312135 D P Q _111928 pat)). Qed.
Lemma lem8312138 {D P Q : Type'} (_111928 : type886 D P Q) : (term1760 D P Q _111928) = (term2328 D P Q _111928).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8312137 D P Q _111928 pat)). Qed.
Lemma lem8312139 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8312140 {D P Q : Type'} (_111928 : type886 D P Q) : (term1761 D P Q _111928) = (term2329 D P Q _111928).
Proof. exact (MK_COMB (@lem8312139 D Q) (@lem8312138 D P Q _111928)). Qed.
Lemma lem8312141 {D P Q : Type'} (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2329 D P Q _111928.
Proof. exact (EQ_MP (@lem8312140 D P Q _111928) (@lem8310505 D P Q _111928 h1)). Qed.
Lemma lem8312142 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem8312149 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312150 {A P Q : Type'} (f : type1475 A P Q) (x : P) : (f x) = (@I (P -> Q -> A) f x).
Proof. exact (@lem8312149 P (Q -> A) f x). Qed.
Lemma lem8312151 {A P Q : Type'} (arg : type1475 A P Q) (a : P) : (arg a) = (@I (P -> Q -> A) arg a).
Proof. exact (@lem8312150 A P Q arg a). Qed.
Lemma lem8312152 {Q : Type'} (t : Q) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8312153 {A P Q : Type'} (arg : type1475 A P Q) (a : P) (t : Q) : (arg a t) = (@I (P -> Q -> A) arg a t).
Proof. exact (MK_COMB (@lem8312151 A P Q arg a) (@lem8312152 Q t)). Qed.
Lemma lem8312155 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312156 {A Q : Type'} (f : Q -> A) (x : Q) : (f x) = (@I (Q -> A) f x).
Proof. exact (@lem8312155 Q A f x). Qed.
Lemma lem8312157 {A P Q : Type'} (arg : type1475 A P Q) (a : P) (t : Q) : (@I (P -> Q -> A) arg a t) = (term2330 A P Q arg a t).
Proof. exact (@lem8312156 A Q (@I (P -> Q -> A) arg a) t). Qed.
Lemma lem8312159 {A P Q : Type'} (arg : type1475 A P Q) (a : P) (t : Q) : (arg a t) = (term2330 A P Q arg a t).
Proof. exact (TRANS (@lem8312153 A P Q arg a t) (@lem8312157 A P Q arg a t)). Qed.
Lemma lem8312166 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312167 {A P Q : Type'} (f : type1475 A P Q) (x : P) : (f x) = (@I (P -> Q -> A) f x).
Proof. exact (@lem8312166 P (Q -> A) f x). Qed.
Lemma lem8312168 {A P Q : Type'} (arg : type1475 A P Q) (a : P) : (arg a) = (@I (P -> Q -> A) arg a).
Proof. exact (@lem8312167 A P Q arg a). Qed.
Lemma lem8312169 {Q : Type'} (u : Q) : u = u.
Proof. exact (eq_refl u). Qed.
Lemma lem8312170 {A P Q : Type'} (arg : type1475 A P Q) (a : P) (u : Q) : (arg a u) = (@I (P -> Q -> A) arg a u).
Proof. exact (MK_COMB (@lem8312168 A P Q arg a) (@lem8312169 Q u)). Qed.
Lemma lem8312172 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312173 {A Q : Type'} (f : Q -> A) (x : Q) : (f x) = (@I (Q -> A) f x).
Proof. exact (@lem8312172 Q A f x). Qed.
Lemma lem8312174 {A P Q : Type'} (arg : type1475 A P Q) (a : P) (u : Q) : (@I (P -> Q -> A) arg a u) = (term2330 A P Q arg a u).
Proof. exact (@lem8312173 A Q (@I (P -> Q -> A) arg a) u). Qed.
Lemma lem8312176 {A P Q : Type'} (arg : type1475 A P Q) (a : P) (u : Q) : (arg a u) = (term2330 A P Q arg a u).
Proof. exact (TRANS (@lem8312170 A P Q arg a u) (@lem8312174 A P Q arg a u)). Qed.
Lemma lem8312177 {A P Q : Type'} (arg : type1475 A P Q) (a : P) (t : Q) : (term2331 A P Q arg a t) = (term2332 A P Q arg a t).
Proof. exact (MK_COMB (@lem8312142 A) (@lem8312159 A P Q arg a t)). Qed.
Lemma lem8312178 {A P Q : Type'} (t : Q) (arg : type1475 A P Q) (a : P) (u : Q) : ((arg a t) = (arg a u)) = ((term2330 A P Q arg a t) = (term2330 A P Q arg a u)).
Proof. exact (MK_COMB (@lem8312177 A P Q arg a t) (@lem8312176 A P Q arg a u)). Qed.
Lemma lem8312179 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8312180 {D : Type'} : (@eq D) = (@eq D).
Proof. exact (eq_refl (@eq D)). Qed.
Lemma lem8312185 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312186 {D Q : Type'} (f : Q -> D) (x : Q) : (f x) = (@I (Q -> D) f x).
Proof. exact (@lem8312185 Q D f x). Qed.
Lemma lem8312188 {D Q : Type'} (pat : Q -> D) (u : Q) : (pat u) = (@I (Q -> D) pat u).
Proof. exact (@lem8312186 D Q pat u). Qed.
Lemma lem8312193 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312194 {D P : Type'} (f : P -> D) (x : P) : (f x) = (@I (P -> D) f x).
Proof. exact (@lem8312193 P D f x). Qed.
Lemma lem8312196 {D P : Type'} (e : P -> D) (a : P) : (e a) = (@I (P -> D) e a).
Proof. exact (@lem8312194 D P e a). Qed.
Lemma lem8312197 {D Q : Type'} (pat : Q -> D) (u : Q) : (term2317 D Q pat u) = (term2318 D Q pat u).
Proof. exact (MK_COMB (@lem8312180 D) (@lem8312188 D Q pat u)). Qed.
Lemma lem8312198 {D P Q : Type'} (pat : Q -> D) (u : Q) (e : P -> D) (a : P) : ((pat u) = (e a)) = ((@I (Q -> D) pat u) = (@I (P -> D) e a)).
Proof. exact (MK_COMB (@lem8312197 D Q pat u) (@lem8312196 D P e a)). Qed.
Lemma lem8312199 {D P Q : Type'} (pat : Q -> D) (u : Q) (e : P -> D) (a : P) : (term474 D P Q pat u e a) = (term2319 D P Q pat u e a).
Proof. exact (MK_COMB (@lem8312179) (@lem8312198 D P Q pat u e a)). Qed.
Lemma lem8312200 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8312201 {D : Type'} : (@eq D) = (@eq D).
Proof. exact (eq_refl (@eq D)). Qed.
Lemma lem8312206 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312207 {D Q : Type'} (f : Q -> D) (x : Q) : (f x) = (@I (Q -> D) f x).
Proof. exact (@lem8312206 Q D f x). Qed.
Lemma lem8312209 {D Q : Type'} (pat : Q -> D) (t : Q) : (pat t) = (@I (Q -> D) pat t).
Proof. exact (@lem8312207 D Q pat t). Qed.
Lemma lem8312214 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312215 {D P : Type'} (f : P -> D) (x : P) : (f x) = (@I (P -> D) f x).
Proof. exact (@lem8312214 P D f x). Qed.
Lemma lem8312217 {D P : Type'} (e : P -> D) (a : P) : (e a) = (@I (P -> D) e a).
Proof. exact (@lem8312215 D P e a). Qed.
Lemma lem8312218 {D Q : Type'} (pat : Q -> D) (t : Q) : (term2317 D Q pat t) = (term2318 D Q pat t).
Proof. exact (MK_COMB (@lem8312201 D) (@lem8312209 D Q pat t)). Qed.
Lemma lem8312219 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : ((pat t) = (e a)) = ((@I (Q -> D) pat t) = (@I (P -> D) e a)).
Proof. exact (MK_COMB (@lem8312218 D Q pat t) (@lem8312217 D P e a)). Qed.
Lemma lem8312220 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term474 D P Q pat t e a) = (term2319 D P Q pat t e a).
Proof. exact (MK_COMB (@lem8312200) (@lem8312219 D P Q pat t e a)). Qed.
Lemma lem8312221 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8312222 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term889 D P Q pat t e a) = (term2333 D P Q pat t e a).
Proof. exact (MK_COMB (@lem8312221) (@lem8312220 D P Q pat t e a)). Qed.
Lemma lem8312223 {D P Q : Type'} (t : Q) (pat : Q -> D) (u : Q) (e : P -> D) (a : P) : (term391 D P Q t pat u e a) = (term2334 D P Q t pat u e a).
Proof. exact (MK_COMB (@lem8312222 D P Q pat t e a) (@lem8312199 D P Q pat u e a)). Qed.
Lemma lem8312224 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8312231 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312232 {A B P : Type'} (f : type560 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> Prop) f x).
Proof. exact (@lem8312231 (A -> B) (P -> Prop) f x). Qed.
Lemma lem8312233 {A B P : Type'} (p : type560 A B P) (f : A -> B) : (p f) = (@I ((A -> B) -> P -> Prop) p f).
Proof. exact (@lem8312232 A B P p f). Qed.
Lemma lem8312234 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8312235 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (p f a) = (@I ((A -> B) -> P -> Prop) p f a).
Proof. exact (MK_COMB (@lem8312233 A B P p f) (@lem8312234 P a)). Qed.
Lemma lem8312237 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312238 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8312237 P Prop f x). Qed.
Lemma lem8312239 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (@I ((A -> B) -> P -> Prop) p f a) = (term864 A B P p f a).
Proof. exact (@lem8312238 P (@I ((A -> B) -> P -> Prop) p f) a). Qed.
Lemma lem8312241 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (p f a) = (term864 A B P p f a).
Proof. exact (TRANS (@lem8312235 A B P p f a) (@lem8312239 A B P p f a)). Qed.
Lemma lem8312242 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term865 A B P p f a) = (term866 A B P p f a).
Proof. exact (MK_COMB (@lem8312224) (@lem8312241 A B P p f a)). Qed.
Lemma lem8312243 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8312244 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term392 A B P p f a) = (term867 A B P p f a).
Proof. exact (MK_COMB (@lem8312243) (@lem8312242 A B P p f a)). Qed.
Lemma lem8312245 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (pat : Q -> D) (u : Q) (e : P -> D) (a : P) : (term394 A B D P Q p f t pat u e a) = (term2335 A B D P Q p f t pat u e a).
Proof. exact (MK_COMB (@lem8312244 A B P p f a) (@lem8312223 D P Q t pat u e a)). Qed.
Lemma lem8312246 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8312247 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (pat : Q -> D) (u : Q) (e : P -> D) (a : P) : (term398 A B D P Q p f t pat u e a) = (term2336 A B D P Q p f t pat u e a).
Proof. exact (MK_COMB (@lem8312246) (@lem8312245 A B D P Q p f t pat u e a)). Qed.
Lemma lem8312248 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) (u : Q) : (term400 A B D P Q p f pat e t arg a u) = (term2337 A B D P Q p f pat e t arg a u).
Proof. exact (MK_COMB (@lem8312247 A B D P Q p f t pat u e a) (@lem8312178 A P Q t arg a u)). Qed.
Lemma lem8312249 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) : (term402 A B D P Q p f pat e t arg a) = (term2338 A B D P Q p f pat e t arg a).
Proof. exact (fun_ext (fun u : Q => @lem8312248 A B D P Q p f pat e t arg a u)). Qed.
Lemma lem8312250 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8312251 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) : (term403 A B D P Q p f pat e t arg a) = (term2339 A B D P Q p f pat e t arg a).
Proof. exact (MK_COMB (@lem8312250 Q) (@lem8312249 A B D P Q p f pat e t arg a)). Qed.
Lemma lem8312252 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (a : P) : (term404 A B D P Q p f pat e arg a) = (term2340 A B D P Q p f pat e arg a).
Proof. exact (fun_ext (fun t : Q => @lem8312251 A B D P Q p f pat e t arg a)). Qed.
Lemma lem8312253 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8312254 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (a : P) : (term405 A B D P Q p f pat e arg a) = (term2341 A B D P Q p f pat e arg a).
Proof. exact (MK_COMB (@lem8312253 Q) (@lem8312252 A B D P Q p f pat e arg a)). Qed.
Lemma lem8312255 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term406 A B D P Q p f pat e arg) = (term2342 A B D P Q p f pat e arg).
Proof. exact (fun_ext (fun a : P => @lem8312254 A B D P Q p f pat e arg a)). Qed.
Lemma lem8312256 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8312257 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term407 A B D P Q p f pat e arg) = (term2343 A B D P Q p f pat e arg).
Proof. exact (MK_COMB (@lem8312256 P) (@lem8312255 A B D P Q p f pat e arg)). Qed.
Lemma lem8312258 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term408 A B D P Q p pat e arg) = (term2344 A B D P Q p pat e arg).
Proof. exact (fun_ext (fun f : A -> B => @lem8312257 A B D P Q p f pat e arg)). Qed.
Lemma lem8312259 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8312260 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term409 A B D P Q p pat e arg) = (term2345 A B D P Q p pat e arg).
Proof. exact (MK_COMB (@lem8312259 A B) (@lem8312258 A B D P Q p pat e arg)). Qed.
Lemma lem8312261 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term2345 A B D P Q p pat e arg.
Proof. exact (EQ_MP (@lem8312260 A B D P Q p pat e arg) (@lem8310601 A B D P Q p pat e arg h1)). Qed.
Lemma lem8312268 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312269 {A P : Type'} (f : P -> A) (x : P) : (f x) = (@I (P -> A) f x).
Proof. exact (@lem8312268 P A f x). Qed.
Lemma lem8312271 {A P : Type'} (s : P -> A) (a : P) : (s a) = (@I (P -> A) s a).
Proof. exact (@lem8312269 A P s a). Qed.
Lemma lem8312272 {A : Type'} (lt2 : type1402 A) (y : A) : (lt2 y) = (lt2 y).
Proof. exact (eq_refl (lt2 y)). Qed.
Lemma lem8312273 {A P : Type'} (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term1053 A P lt2 y s a) = (term2346 A P lt2 y s a).
Proof. exact (MK_COMB (@lem8312272 A lt2 y) (@lem8312271 A P s a)). Qed.
Lemma lem8312275 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312276 {A : Type'} (f : type1402 A) (x : A) : (f x) = (@I (A -> A -> Prop) f x).
Proof. exact (@lem8312275 A (A -> Prop) f x). Qed.
Lemma lem8312277 {A : Type'} (lt2 : type1402 A) (y : A) : (lt2 y) = (@I (A -> A -> Prop) lt2 y).
Proof. exact (@lem8312276 A lt2 y). Qed.
Lemma lem8312278 {A P : Type'} (s : P -> A) (a : P) : (@I (P -> A) s a) = (@I (P -> A) s a).
Proof. exact (eq_refl (@I (P -> A) s a)). Qed.
Lemma lem8312279 {A P : Type'} (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2346 A P lt2 y s a) = (term2347 A P lt2 y s a).
Proof. exact (MK_COMB (@lem8312277 A lt2 y) (@lem8312278 A P s a)). Qed.
Lemma lem8312281 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312282 {A : Type'} (f : A -> Prop) (x : A) : (f x) = (@I (A -> Prop) f x).
Proof. exact (@lem8312281 A Prop f x). Qed.
Lemma lem8312283 {A P : Type'} (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2347 A P lt2 y s a) = (term2348 A P lt2 y s a).
Proof. exact (@lem8312282 A (@I (A -> A -> Prop) lt2 y) (@I (P -> A) s a)). Qed.
Lemma lem8312284 {A P : Type'} (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2346 A P lt2 y s a) = (term2348 A P lt2 y s a).
Proof. exact (TRANS (@lem8312279 A P lt2 y s a) (@lem8312283 A P lt2 y s a)). Qed.
Lemma lem8312285 {A P : Type'} (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term1053 A P lt2 y s a) = (term2348 A P lt2 y s a).
Proof. exact (TRANS (@lem8312273 A P lt2 y s a) (@lem8312284 A P lt2 y s a)). Qed.
Lemma lem8312286 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8312295 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312296 {A P Q : Type'} (f : type1475 A P Q) (x : P) : (f x) = (@I (P -> Q -> A) f x).
Proof. exact (@lem8312295 P (Q -> A) f x). Qed.
Lemma lem8312297 {A P Q : Type'} (arg : type1475 A P Q) (a : P) : (arg a) = (@I (P -> Q -> A) arg a).
Proof. exact (@lem8312296 A P Q arg a). Qed.
Lemma lem8312298 {Q : Type'} (t : Q) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8312299 {A P Q : Type'} (arg : type1475 A P Q) (a : P) (t : Q) : (arg a t) = (@I (P -> Q -> A) arg a t).
Proof. exact (MK_COMB (@lem8312297 A P Q arg a) (@lem8312298 Q t)). Qed.
Lemma lem8312301 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312302 {A Q : Type'} (f : Q -> A) (x : Q) : (f x) = (@I (Q -> A) f x).
Proof. exact (@lem8312301 Q A f x). Qed.
Lemma lem8312303 {A P Q : Type'} (arg : type1475 A P Q) (a : P) (t : Q) : (@I (P -> Q -> A) arg a t) = (term2330 A P Q arg a t).
Proof. exact (@lem8312302 A Q (@I (P -> Q -> A) arg a) t). Qed.
Lemma lem8312305 {A P Q : Type'} (arg : type1475 A P Q) (a : P) (t : Q) : (arg a t) = (term2330 A P Q arg a t).
Proof. exact (TRANS (@lem8312299 A P Q arg a t) (@lem8312303 A P Q arg a t)). Qed.
Lemma lem8312306 {A : Type'} (lt2 : type1402 A) (y : A) : (lt2 y) = (lt2 y).
Proof. exact (eq_refl (lt2 y)). Qed.
Lemma lem8312307 {A P Q : Type'} (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (a : P) (t : Q) : (term1765 A P Q lt2 y arg a t) = (term2349 A P Q lt2 y arg a t).
Proof. exact (MK_COMB (@lem8312306 A lt2 y) (@lem8312305 A P Q arg a t)). Qed.
Lemma lem8312309 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312310 {A : Type'} (f : type1402 A) (x : A) : (f x) = (@I (A -> A -> Prop) f x).
Proof. exact (@lem8312309 A (A -> Prop) f x). Qed.
Lemma lem8312311 {A : Type'} (lt2 : type1402 A) (y : A) : (lt2 y) = (@I (A -> A -> Prop) lt2 y).
Proof. exact (@lem8312310 A lt2 y). Qed.
Lemma lem8312312 {A P Q : Type'} (arg : type1475 A P Q) (a : P) (t : Q) : (term2330 A P Q arg a t) = (term2330 A P Q arg a t).
Proof. exact (eq_refl (term2330 A P Q arg a t)). Qed.
Lemma lem8312313 {A P Q : Type'} (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (a : P) (t : Q) : (term2349 A P Q lt2 y arg a t) = (term2350 A P Q lt2 y arg a t).
Proof. exact (MK_COMB (@lem8312311 A lt2 y) (@lem8312312 A P Q arg a t)). Qed.
Lemma lem8312315 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312316 {A : Type'} (f : A -> Prop) (x : A) : (f x) = (@I (A -> Prop) f x).
Proof. exact (@lem8312315 A Prop f x). Qed.
Lemma lem8312317 {A P Q : Type'} (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (a : P) (t : Q) : (term2350 A P Q lt2 y arg a t) = (term2351 A P Q lt2 y arg a t).
Proof. exact (@lem8312316 A (@I (A -> A -> Prop) lt2 y) (term2330 A P Q arg a t)). Qed.
Lemma lem8312318 {A P Q : Type'} (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (a : P) (t : Q) : (term2349 A P Q lt2 y arg a t) = (term2351 A P Q lt2 y arg a t).
Proof. exact (TRANS (@lem8312313 A P Q lt2 y arg a t) (@lem8312317 A P Q lt2 y arg a t)). Qed.
Lemma lem8312319 {A P Q : Type'} (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (a : P) (t : Q) : (term1765 A P Q lt2 y arg a t) = (term2351 A P Q lt2 y arg a t).
Proof. exact (TRANS (@lem8312307 A P Q lt2 y arg a t) (@lem8312318 A P Q lt2 y arg a t)). Qed.
Lemma lem8312320 {A P Q : Type'} (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (a : P) (t : Q) : (term2352 A P Q lt2 y arg a t) = (term2353 A P Q lt2 y arg a t).
Proof. exact (MK_COMB (@lem8312286) (@lem8312319 A P Q lt2 y arg a t)). Qed.
Lemma lem8312321 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8312322 {A P Q : Type'} (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (a : P) (t : Q) : (term2354 A P Q lt2 y arg a t) = (term2355 A P Q lt2 y arg a t).
Proof. exact (MK_COMB (@lem8312321) (@lem8312320 A P Q lt2 y arg a t)). Qed.
Lemma lem8312323 {A P Q : Type'} (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term1764 A P Q arg t lt2 y s a) = (term2356 A P Q arg t lt2 y s a).
Proof. exact (MK_COMB (@lem8312322 A P Q lt2 y arg a t) (@lem8312285 A P lt2 y s a)). Qed.
Lemma lem8312324 {A P Q : Type'} (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term1766 A P Q arg t lt2 s a) = (term2357 A P Q arg t lt2 s a).
Proof. exact (fun_ext (fun y : A => @lem8312323 A P Q arg t lt2 y s a)). Qed.
Lemma lem8312325 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8312326 {A P Q : Type'} (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term1767 A P Q arg t lt2 s a) = (term2358 A P Q arg t lt2 s a).
Proof. exact (MK_COMB (@lem8312325 A) (@lem8312324 A P Q arg t lt2 s a)). Qed.
Lemma lem8312327 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8312328 {D : Type'} : (@eq D) = (@eq D).
Proof. exact (eq_refl (@eq D)). Qed.
Lemma lem8312333 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312334 {D Q : Type'} (f : Q -> D) (x : Q) : (f x) = (@I (Q -> D) f x).
Proof. exact (@lem8312333 Q D f x). Qed.
Lemma lem8312336 {D Q : Type'} (pat : Q -> D) (t : Q) : (pat t) = (@I (Q -> D) pat t).
Proof. exact (@lem8312334 D Q pat t). Qed.
Lemma lem8312341 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312342 {D P : Type'} (f : P -> D) (x : P) : (f x) = (@I (P -> D) f x).
Proof. exact (@lem8312341 P D f x). Qed.
Lemma lem8312344 {D P : Type'} (e : P -> D) (a : P) : (e a) = (@I (P -> D) e a).
Proof. exact (@lem8312342 D P e a). Qed.
Lemma lem8312345 {D Q : Type'} (pat : Q -> D) (t : Q) : (term2317 D Q pat t) = (term2318 D Q pat t).
Proof. exact (MK_COMB (@lem8312328 D) (@lem8312336 D Q pat t)). Qed.
Lemma lem8312346 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : ((pat t) = (e a)) = ((@I (Q -> D) pat t) = (@I (P -> D) e a)).
Proof. exact (MK_COMB (@lem8312345 D Q pat t) (@lem8312344 D P e a)). Qed.
Lemma lem8312347 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term474 D P Q pat t e a) = (term2319 D P Q pat t e a).
Proof. exact (MK_COMB (@lem8312327) (@lem8312346 D P Q pat t e a)). Qed.
Lemma lem8312348 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8312355 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312356 {A B P : Type'} (f : type560 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> Prop) f x).
Proof. exact (@lem8312355 (A -> B) (P -> Prop) f x). Qed.
Lemma lem8312357 {A B P : Type'} (p : type560 A B P) (f : A -> B) : (p f) = (@I ((A -> B) -> P -> Prop) p f).
Proof. exact (@lem8312356 A B P p f). Qed.
Lemma lem8312358 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8312359 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (p f a) = (@I ((A -> B) -> P -> Prop) p f a).
Proof. exact (MK_COMB (@lem8312357 A B P p f) (@lem8312358 P a)). Qed.
Lemma lem8312361 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312362 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8312361 P Prop f x). Qed.
Lemma lem8312363 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (@I ((A -> B) -> P -> Prop) p f a) = (term864 A B P p f a).
Proof. exact (@lem8312362 P (@I ((A -> B) -> P -> Prop) p f) a). Qed.
Lemma lem8312365 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (p f a) = (term864 A B P p f a).
Proof. exact (TRANS (@lem8312359 A B P p f a) (@lem8312363 A B P p f a)). Qed.
Lemma lem8312366 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term865 A B P p f a) = (term866 A B P p f a).
Proof. exact (MK_COMB (@lem8312348) (@lem8312365 A B P p f a)). Qed.
Lemma lem8312367 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8312368 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term392 A B P p f a) = (term867 A B P p f a).
Proof. exact (MK_COMB (@lem8312367) (@lem8312366 A B P p f a)). Qed.
Lemma lem8312369 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term1763 A B D P Q p f pat t e a) = (term2359 A B D P Q p f pat t e a).
Proof. exact (MK_COMB (@lem8312368 A B P p f a) (@lem8312347 D P Q pat t e a)). Qed.
Lemma lem8312370 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8312371 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term1769 A B D P Q p f pat t e a) = (term2360 A B D P Q p f pat t e a).
Proof. exact (MK_COMB (@lem8312370) (@lem8312369 A B D P Q p f pat t e a)). Qed.
Lemma lem8312372 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term1771 A B D P Q p f pat e arg t lt2 s a) = (term2361 A B D P Q p f pat e arg t lt2 s a).
Proof. exact (MK_COMB (@lem8312371 A B D P Q p f pat t e a) (@lem8312326 A P Q arg t lt2 s a)). Qed.
Lemma lem8312373 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term1773 A B D P Q p f pat e arg lt2 s a) = (term2362 A B D P Q p f pat e arg lt2 s a).
Proof. exact (fun_ext (fun t : Q => @lem8312372 A B D P Q p f pat e arg t lt2 s a)). Qed.
Lemma lem8312374 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8312375 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term1774 A B D P Q p f pat e arg lt2 s a) = (term2363 A B D P Q p f pat e arg lt2 s a).
Proof. exact (MK_COMB (@lem8312374 Q) (@lem8312373 A B D P Q p f pat e arg lt2 s a)). Qed.
Lemma lem8312376 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term1775 A B D P Q p f pat e arg lt2 s) = (term2364 A B D P Q p f pat e arg lt2 s).
Proof. exact (fun_ext (fun a : P => @lem8312375 A B D P Q p f pat e arg lt2 s a)). Qed.
Lemma lem8312377 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8312378 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term1776 A B D P Q p f pat e arg lt2 s) = (term2365 A B D P Q p f pat e arg lt2 s).
Proof. exact (MK_COMB (@lem8312377 P) (@lem8312376 A B D P Q p f pat e arg lt2 s)). Qed.
Lemma lem8312379 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term1777 A B D P Q p pat e arg lt2 s) = (term2366 A B D P Q p pat e arg lt2 s).
Proof. exact (fun_ext (fun f : A -> B => @lem8312378 A B D P Q p f pat e arg lt2 s)). Qed.
Lemma lem8312380 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8312381 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term1778 A B D P Q p pat e arg lt2 s) = (term2367 A B D P Q p pat e arg lt2 s).
Proof. exact (MK_COMB (@lem8312380 A B) (@lem8312379 A B D P Q p pat e arg lt2 s)). Qed.
Lemma lem8312382 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term35 A B D P Q p pat e arg lt2 s) : term2367 A B D P Q p pat e arg lt2 s.
Proof. exact (EQ_MP (@lem8312381 A B D P Q p pat e arg lt2 s) (@lem8310741 A B D P Q p pat e arg lt2 s h1)). Qed.
Lemma lem8312383 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8312384 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8312397 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312398 {A B D P Q : Type'} (f : type904 A B D P Q) (x : Q -> D) : (f x) = (@I ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> B) f x).
Proof. exact (@lem8312397 (Q -> D) (type897 A B D P Q) f x). Qed.
Lemma lem8312399 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (_111929 pat) = (@I ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> B) _111929 pat).
Proof. exact (@lem8312398 A B D P Q _111929 pat). Qed.
Lemma lem8312400 {D P : Type'} (e : P -> D) : e = e.
Proof. exact (eq_refl e). Qed.
Lemma lem8312401 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (_111929 pat e) = (@I ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> B) _111929 pat e).
Proof. exact (MK_COMB (@lem8312399 A B D P Q _111929 pat) (@lem8312400 D P e)). Qed.
Lemma lem8312403 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312404 {A B D P Q : Type'} (f : type897 A B D P Q) (x : P -> D) : (f x) = (@I ((P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> B) f x).
Proof. exact (@lem8312403 (P -> D) (type534 A B P Q) f x). Qed.
Lemma lem8312405 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (@I ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> B) _111929 pat e) = (term2368 A B D P Q _111929 pat e).
Proof. exact (@lem8312404 A B D P Q (@I ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> B) _111929 pat) e). Qed.
Lemma lem8312406 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (_111929 pat e) = (term2368 A B D P Q _111929 pat e).
Proof. exact (TRANS (@lem8312401 A B D P Q _111929 pat e) (@lem8312405 A B D P Q _111929 pat e)). Qed.
Lemma lem8312407 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8312408 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (_111929 pat e f) = (term2369 A B D P Q _111929 pat e f).
Proof. exact (MK_COMB (@lem8312406 A B D P Q _111929 pat e) (@lem8312407 A B f)). Qed.
Lemma lem8312410 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312411 {A B P Q : Type'} (f : type534 A B P Q) (x : A -> B) : (f x) = (@I ((A -> B) -> (P -> Q -> A) -> P -> B) f x).
Proof. exact (@lem8312410 (A -> B) (type878 A B P Q) f x). Qed.
Lemma lem8312412 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term2369 A B D P Q _111929 pat e f) = (term2370 A B D P Q _111929 pat e f).
Proof. exact (@lem8312411 A B P Q (term2368 A B D P Q _111929 pat e) f). Qed.
Lemma lem8312413 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (_111929 pat e f) = (term2370 A B D P Q _111929 pat e f).
Proof. exact (TRANS (@lem8312408 A B D P Q _111929 pat e f) (@lem8312412 A B D P Q _111929 pat e f)). Qed.
Lemma lem8312414 {A P Q : Type'} (arg : type1475 A P Q) : arg = arg.
Proof. exact (eq_refl arg). Qed.
Lemma lem8312415 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (_111929 pat e f arg) = (term2371 A B D P Q _111929 pat e f arg).
Proof. exact (MK_COMB (@lem8312413 A B D P Q _111929 pat e f) (@lem8312414 A P Q arg)). Qed.
Lemma lem8312417 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312418 {A B P Q : Type'} (f : type878 A B P Q) (x : type1475 A P Q) : (f x) = (@I ((P -> Q -> A) -> P -> B) f x).
Proof. exact (@lem8312417 (type1475 A P Q) (P -> B) f x). Qed.
Lemma lem8312419 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term2371 A B D P Q _111929 pat e f arg) = (term2372 A B D P Q _111929 pat e f arg).
Proof. exact (@lem8312418 A B P Q (term2370 A B D P Q _111929 pat e f) arg). Qed.
Lemma lem8312420 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (_111929 pat e f arg) = (term2372 A B D P Q _111929 pat e f arg).
Proof. exact (TRANS (@lem8312415 A B D P Q _111929 pat e f arg) (@lem8312419 A B D P Q _111929 pat e f arg)). Qed.
Lemma lem8312421 {P : Type'} (a' : P) : a' = a'.
Proof. exact (eq_refl a'). Qed.
Lemma lem8312422 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a' : P) : (_111929 pat e f arg a') = (term2373 A B D P Q _111929 pat e f arg a').
Proof. exact (MK_COMB (@lem8312420 A B D P Q _111929 pat e f arg) (@lem8312421 P a')). Qed.
Lemma lem8312424 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312425 {B P : Type'} (f : P -> B) (x : P) : (f x) = (@I (P -> B) f x).
Proof. exact (@lem8312424 P B f x). Qed.
Lemma lem8312426 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a' : P) : (term2373 A B D P Q _111929 pat e f arg a') = (term2374 A B D P Q _111929 pat e f arg a').
Proof. exact (@lem8312425 B P (term2372 A B D P Q _111929 pat e f arg) a'). Qed.
Lemma lem8312428 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a' : P) : (_111929 pat e f arg a') = (term2374 A B D P Q _111929 pat e f arg a').
Proof. exact (TRANS (@lem8312422 A B D P Q _111929 pat e f arg a') (@lem8312426 A B D P Q _111929 pat e f arg a')). Qed.
Lemma lem8312429 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8312440 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312441 {D P Q : Type'} (f : type886 D P Q) (x : Q -> D) : (f x) = (@I ((Q -> D) -> (P -> D) -> P -> Q) f x).
Proof. exact (@lem8312440 (Q -> D) (type798 D P Q) f x). Qed.
Lemma lem8312442 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) : (_111928 pat) = (@I ((Q -> D) -> (P -> D) -> P -> Q) _111928 pat).
Proof. exact (@lem8312441 D P Q _111928 pat). Qed.
Lemma lem8312443 {D P : Type'} (e : P -> D) : e = e.
Proof. exact (eq_refl e). Qed.
Lemma lem8312444 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (_111928 pat e) = (@I ((Q -> D) -> (P -> D) -> P -> Q) _111928 pat e).
Proof. exact (MK_COMB (@lem8312442 D P Q _111928 pat) (@lem8312443 D P e)). Qed.
Lemma lem8312446 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312447 {D P Q : Type'} (f : type798 D P Q) (x : P -> D) : (f x) = (@I ((P -> D) -> P -> Q) f x).
Proof. exact (@lem8312446 (P -> D) (P -> Q) f x). Qed.
Lemma lem8312448 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (@I ((Q -> D) -> (P -> D) -> P -> Q) _111928 pat e) = (term2311 D P Q _111928 pat e).
Proof. exact (@lem8312447 D P Q (@I ((Q -> D) -> (P -> D) -> P -> Q) _111928 pat) e). Qed.
Lemma lem8312449 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (_111928 pat e) = (term2311 D P Q _111928 pat e).
Proof. exact (TRANS (@lem8312444 D P Q _111928 pat e) (@lem8312448 D P Q _111928 pat e)). Qed.
Lemma lem8312450 {P : Type'} (a' : P) : a' = a'.
Proof. exact (eq_refl a'). Qed.
Lemma lem8312451 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (_111928 pat e a') = (term2312 D P Q _111928 pat e a').
Proof. exact (MK_COMB (@lem8312449 D P Q _111928 pat e) (@lem8312450 P a')). Qed.
Lemma lem8312453 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312454 {P Q : Type'} (f : P -> Q) (x : P) : (f x) = (@I (P -> Q) f x).
Proof. exact (@lem8312453 P Q f x). Qed.
Lemma lem8312455 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2312 D P Q _111928 pat e a') = (term2313 D P Q _111928 pat e a').
Proof. exact (@lem8312454 P Q (term2311 D P Q _111928 pat e) a'). Qed.
Lemma lem8312457 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (_111928 pat e a') = (term2313 D P Q _111928 pat e a').
Proof. exact (TRANS (@lem8312451 D P Q _111928 pat e a') (@lem8312455 D P Q _111928 pat e a')). Qed.
Lemma lem8312458 {A P Q : Type'} (arg : type1475 A P Q) (a' : P) : (arg a') = (arg a').
Proof. exact (eq_refl (arg a')). Qed.
Lemma lem8312459 {A D P Q : Type'} (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term1257 A D P Q arg _111928 pat e a') = (term2375 A D P Q arg _111928 pat e a').
Proof. exact (MK_COMB (@lem8312458 A P Q arg a') (@lem8312457 D P Q _111928 pat e a')). Qed.
Lemma lem8312461 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312462 {A P Q : Type'} (f : type1475 A P Q) (x : P) : (f x) = (@I (P -> Q -> A) f x).
Proof. exact (@lem8312461 P (Q -> A) f x). Qed.
Lemma lem8312463 {A P Q : Type'} (arg : type1475 A P Q) (a' : P) : (arg a') = (@I (P -> Q -> A) arg a').
Proof. exact (@lem8312462 A P Q arg a'). Qed.
Lemma lem8312464 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2313 D P Q _111928 pat e a') = (term2313 D P Q _111928 pat e a').
Proof. exact (eq_refl (term2313 D P Q _111928 pat e a')). Qed.
Lemma lem8312465 {A D P Q : Type'} (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2375 A D P Q arg _111928 pat e a') = (term2376 A D P Q arg _111928 pat e a').
Proof. exact (MK_COMB (@lem8312463 A P Q arg a') (@lem8312464 D P Q _111928 pat e a')). Qed.
Lemma lem8312467 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312468 {A Q : Type'} (f : Q -> A) (x : Q) : (f x) = (@I (Q -> A) f x).
Proof. exact (@lem8312467 Q A f x). Qed.
Lemma lem8312469 {A D P Q : Type'} (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2376 A D P Q arg _111928 pat e a') = (term2377 A D P Q arg _111928 pat e a').
Proof. exact (@lem8312468 A Q (@I (P -> Q -> A) arg a') (term2313 D P Q _111928 pat e a')). Qed.
Lemma lem8312470 {A D P Q : Type'} (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2375 A D P Q arg _111928 pat e a') = (term2377 A D P Q arg _111928 pat e a').
Proof. exact (TRANS (@lem8312465 A D P Q arg _111928 pat e a') (@lem8312469 A D P Q arg _111928 pat e a')). Qed.
Lemma lem8312471 {A D P Q : Type'} (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term1257 A D P Q arg _111928 pat e a') = (term2377 A D P Q arg _111928 pat e a').
Proof. exact (TRANS (@lem8312459 A D P Q arg _111928 pat e a') (@lem8312470 A D P Q arg _111928 pat e a')). Qed.
Lemma lem8312472 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term1270 A B D P Q f arg _111928 pat e a') = (term2378 A B D P Q f arg _111928 pat e a').
Proof. exact (MK_COMB (@lem8312429 A B f) (@lem8312471 A D P Q arg _111928 pat e a')). Qed.
Lemma lem8312474 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312475 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (@lem8312474 A B f x). Qed.
Lemma lem8312476 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2378 A B D P Q f arg _111928 pat e a') = (term2379 A B D P Q f arg _111928 pat e a').
Proof. exact (@lem8312475 A B f (term2377 A D P Q arg _111928 pat e a')). Qed.
Lemma lem8312477 {A B D P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term1270 A B D P Q f arg _111928 pat e a') = (term2379 A B D P Q f arg _111928 pat e a').
Proof. exact (TRANS (@lem8312472 A B D P Q f arg _111928 pat e a') (@lem8312476 A B D P Q f arg _111928 pat e a')). Qed.
Lemma lem8312478 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a' : P) : (term1332 A B D P Q _111929 pat e f arg a') = (term2380 A B D P Q _111929 pat e f arg a').
Proof. exact (MK_COMB (@lem8312384 B) (@lem8312428 A B D P Q _111929 pat e f arg a')). Qed.
Lemma lem8312479 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : ((_111929 pat e f arg a') = (term1270 A B D P Q f arg _111928 pat e a')) = ((term2374 A B D P Q _111929 pat e f arg a') = (term2379 A B D P Q f arg _111928 pat e a')).
Proof. exact (MK_COMB (@lem8312478 A B D P Q _111929 pat e f arg a') (@lem8312477 A B D P Q f arg _111928 pat e a')). Qed.
Lemma lem8312480 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2381 A B D P Q _111929 f arg _111928 pat e a') = (term2382 A B D P Q _111929 f arg _111928 pat e a').
Proof. exact (MK_COMB (@lem8312383) (@lem8312479 A B D P Q _111929 f arg _111928 pat e a')). Qed.
Lemma lem8312487 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312488 {A B P : Type'} (f : type560 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> Prop) f x).
Proof. exact (@lem8312487 (A -> B) (P -> Prop) f x). Qed.
Lemma lem8312489 {A B P : Type'} (p : type560 A B P) (f : A -> B) : (p f) = (@I ((A -> B) -> P -> Prop) p f).
Proof. exact (@lem8312488 A B P p f). Qed.
Lemma lem8312490 {P : Type'} (a' : P) : a' = a'.
Proof. exact (eq_refl a'). Qed.
Lemma lem8312491 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) : (p f a') = (@I ((A -> B) -> P -> Prop) p f a').
Proof. exact (MK_COMB (@lem8312489 A B P p f) (@lem8312490 P a')). Qed.
Lemma lem8312493 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312494 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8312493 P Prop f x). Qed.
Lemma lem8312495 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) : (@I ((A -> B) -> P -> Prop) p f a') = (term864 A B P p f a').
Proof. exact (@lem8312494 P (@I ((A -> B) -> P -> Prop) p f) a'). Qed.
Lemma lem8312497 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) : (p f a') = (term864 A B P p f a').
Proof. exact (TRANS (@lem8312491 A B P p f a') (@lem8312495 A B P p f a')). Qed.
Lemma lem8312498 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8312499 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) : (term1178 A B P p f a') = (term978 A B P p f a').
Proof. exact (MK_COMB (@lem8312498) (@lem8312497 A B P p f a')). Qed.
Lemma lem8312500 {A B D P Q : Type'} (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term1965 A B D P Q p _111929 f arg _111928 pat e a') = (term2383 A B D P Q p _111929 f arg _111928 pat e a').
Proof. exact (MK_COMB (@lem8312499 A B P p f a') (@lem8312480 A B D P Q _111929 f arg _111928 pat e a')). Qed.
Lemma lem8312501 {D : Type'} : (@eq D) = (@eq D).
Proof. exact (eq_refl (@eq D)). Qed.
Lemma lem8312506 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312507 {D Q : Type'} (f : Q -> D) (x : Q) : (f x) = (@I (Q -> D) f x).
Proof. exact (@lem8312506 Q D f x). Qed.
Lemma lem8312509 {D Q : Type'} (pat : Q -> D) (t' : Q) : (pat t') = (@I (Q -> D) pat t').
Proof. exact (@lem8312507 D Q pat t'). Qed.
Lemma lem8312514 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312515 {D P : Type'} (f : P -> D) (x : P) : (f x) = (@I (P -> D) f x).
Proof. exact (@lem8312514 P D f x). Qed.
Lemma lem8312517 {D P : Type'} (e : P -> D) (a' : P) : (e a') = (@I (P -> D) e a').
Proof. exact (@lem8312515 D P e a'). Qed.
Lemma lem8312518 {D Q : Type'} (pat : Q -> D) (t' : Q) : (term2317 D Q pat t') = (term2318 D Q pat t').
Proof. exact (MK_COMB (@lem8312501 D) (@lem8312509 D Q pat t')). Qed.
Lemma lem8312519 {D P Q : Type'} (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) : ((pat t') = (e a')) = ((@I (Q -> D) pat t') = (@I (P -> D) e a')).
Proof. exact (MK_COMB (@lem8312518 D Q pat t') (@lem8312517 D P e a')). Qed.
Lemma lem8312520 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8312521 {D P Q : Type'} (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) : (term882 D P Q pat t' e a') = (term2384 D P Q pat t' e a').
Proof. exact (MK_COMB (@lem8312520) (@lem8312519 D P Q pat t' e a')). Qed.
Lemma lem8312522 {A B D P Q : Type'} (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2109 A B D P Q t' p _111929 f arg _111928 pat e a') = (term2385 A B D P Q t' p _111929 f arg _111928 pat e a').
Proof. exact (MK_COMB (@lem8312521 D P Q pat t' e a') (@lem8312500 A B D P Q p _111929 f arg _111928 pat e a')). Qed.
Lemma lem8312523 {D : Type'} : (@eq D) = (@eq D).
Proof. exact (eq_refl (@eq D)). Qed.
Lemma lem8312528 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312529 {D Q : Type'} (f : Q -> D) (x : Q) : (f x) = (@I (Q -> D) f x).
Proof. exact (@lem8312528 Q D f x). Qed.
Lemma lem8312531 {D Q : Type'} (pat : Q -> D) (t' : Q) : (pat t') = (@I (Q -> D) pat t').
Proof. exact (@lem8312529 D Q pat t'). Qed.
Lemma lem8312536 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312537 {D P : Type'} (f : P -> D) (x : P) : (f x) = (@I (P -> D) f x).
Proof. exact (@lem8312536 P D f x). Qed.
Lemma lem8312539 {D P : Type'} (e : P -> D) (a' : P) : (e a') = (@I (P -> D) e a').
Proof. exact (@lem8312537 D P e a'). Qed.
Lemma lem8312540 {D Q : Type'} (pat : Q -> D) (t' : Q) : (term2317 D Q pat t') = (term2318 D Q pat t').
Proof. exact (MK_COMB (@lem8312523 D) (@lem8312531 D Q pat t')). Qed.
Lemma lem8312541 {D P Q : Type'} (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) : ((pat t') = (e a')) = ((@I (Q -> D) pat t') = (@I (P -> D) e a')).
Proof. exact (MK_COMB (@lem8312540 D Q pat t') (@lem8312539 D P e a')). Qed.
Lemma lem8312548 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312549 {A B P : Type'} (f : type560 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> Prop) f x).
Proof. exact (@lem8312548 (A -> B) (P -> Prop) f x). Qed.
Lemma lem8312550 {A B P : Type'} (p : type560 A B P) (g : A -> B) : (p g) = (@I ((A -> B) -> P -> Prop) p g).
Proof. exact (@lem8312549 A B P p g). Qed.
Lemma lem8312551 {P : Type'} (a' : P) : a' = a'.
Proof. exact (eq_refl a'). Qed.
Lemma lem8312552 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a' : P) : (p g a') = (@I ((A -> B) -> P -> Prop) p g a').
Proof. exact (MK_COMB (@lem8312550 A B P p g) (@lem8312551 P a')). Qed.
Lemma lem8312554 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312555 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8312554 P Prop f x). Qed.
Lemma lem8312556 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a' : P) : (@I ((A -> B) -> P -> Prop) p g a') = (term864 A B P p g a').
Proof. exact (@lem8312555 P (@I ((A -> B) -> P -> Prop) p g) a'). Qed.
Lemma lem8312558 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a' : P) : (p g a') = (term864 A B P p g a').
Proof. exact (TRANS (@lem8312552 A B P p g a') (@lem8312556 A B P p g a')). Qed.
Lemma lem8312559 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8312560 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a' : P) : (term1178 A B P p g a') = (term978 A B P p g a').
Proof. exact (MK_COMB (@lem8312559) (@lem8312558 A B P p g a')). Qed.
Lemma lem8312561 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) : (term1772 A B D P Q p g pat t' e a') = (term2386 A B D P Q p g pat t' e a').
Proof. exact (MK_COMB (@lem8312560 A B P p g a') (@lem8312541 D P Q pat t' e a')). Qed.
Lemma lem8312562 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8312563 {D : Type'} : (@eq D) = (@eq D).
Proof. exact (eq_refl (@eq D)). Qed.
Lemma lem8312568 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312569 {D Q : Type'} (f : Q -> D) (x : Q) : (f x) = (@I (Q -> D) f x).
Proof. exact (@lem8312568 Q D f x). Qed.
Lemma lem8312571 {D Q : Type'} (pat : Q -> D) (t : Q) : (pat t) = (@I (Q -> D) pat t).
Proof. exact (@lem8312569 D Q pat t). Qed.
Lemma lem8312576 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312577 {D P : Type'} (f : P -> D) (x : P) : (f x) = (@I (P -> D) f x).
Proof. exact (@lem8312576 P D f x). Qed.
Lemma lem8312579 {D P : Type'} (e : P -> D) (a' : P) : (e a') = (@I (P -> D) e a').
Proof. exact (@lem8312577 D P e a'). Qed.
Lemma lem8312580 {D Q : Type'} (pat : Q -> D) (t : Q) : (term2317 D Q pat t) = (term2318 D Q pat t).
Proof. exact (MK_COMB (@lem8312563 D) (@lem8312571 D Q pat t)). Qed.
Lemma lem8312581 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a' : P) : ((pat t) = (e a')) = ((@I (Q -> D) pat t) = (@I (P -> D) e a')).
Proof. exact (MK_COMB (@lem8312580 D Q pat t) (@lem8312579 D P e a')). Qed.
Lemma lem8312582 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a' : P) : (term474 D P Q pat t e a') = (term2319 D P Q pat t e a').
Proof. exact (MK_COMB (@lem8312562) (@lem8312581 D P Q pat t e a')). Qed.
Lemma lem8312583 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a' : P) : (term476 D P Q pat e a') = (term2320 D P Q pat e a').
Proof. exact (fun_ext (fun t : Q => @lem8312582 D P Q pat t e a')). Qed.
Lemma lem8312584 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8312585 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a' : P) : (term477 D P Q pat e a') = (term2321 D P Q pat e a').
Proof. exact (MK_COMB (@lem8312584 Q) (@lem8312583 D P Q pat e a')). Qed.
Lemma lem8312586 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8312593 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312594 {A B P : Type'} (f : type560 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> Prop) f x).
Proof. exact (@lem8312593 (A -> B) (P -> Prop) f x). Qed.
Lemma lem8312595 {A B P : Type'} (p : type560 A B P) (f : A -> B) : (p f) = (@I ((A -> B) -> P -> Prop) p f).
Proof. exact (@lem8312594 A B P p f). Qed.
Lemma lem8312596 {P : Type'} (a' : P) : a' = a'.
Proof. exact (eq_refl a'). Qed.
Lemma lem8312597 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) : (p f a') = (@I ((A -> B) -> P -> Prop) p f a').
Proof. exact (MK_COMB (@lem8312595 A B P p f) (@lem8312596 P a')). Qed.
Lemma lem8312599 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312600 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8312599 P Prop f x). Qed.
Lemma lem8312601 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) : (@I ((A -> B) -> P -> Prop) p f a') = (term864 A B P p f a').
Proof. exact (@lem8312600 P (@I ((A -> B) -> P -> Prop) p f) a'). Qed.
Lemma lem8312603 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) : (p f a') = (term864 A B P p f a').
Proof. exact (TRANS (@lem8312597 A B P p f a') (@lem8312601 A B P p f a')). Qed.
Lemma lem8312604 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) : (term865 A B P p f a') = (term866 A B P p f a').
Proof. exact (MK_COMB (@lem8312586) (@lem8312603 A B P p f a')). Qed.
Lemma lem8312605 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8312606 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) : (term392 A B P p f a') = (term867 A B P p f a').
Proof. exact (MK_COMB (@lem8312605) (@lem8312604 A B P p f a')). Qed.
Lemma lem8312607 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) : (term1924 A B D P Q p f pat e a') = (term2387 A B D P Q p f pat e a').
Proof. exact (MK_COMB (@lem8312606 A B P p f a') (@lem8312585 D P Q pat e a')). Qed.
Lemma lem8312608 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8312609 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) : (term1927 A B D P Q p f pat e a') = (term2388 A B D P Q p f pat e a').
Proof. exact (MK_COMB (@lem8312608) (@lem8312607 A B D P Q p f pat e a')). Qed.
Lemma lem8312610 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) : (term2059 A B D P Q f p g pat t' e a') = (term2389 A B D P Q f p g pat t' e a').
Proof. exact (MK_COMB (@lem8312609 A B D P Q p f pat e a') (@lem8312561 A B D P Q p g pat t' e a')). Qed.
Lemma lem8312611 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8312612 {D : Type'} : (@eq D) = (@eq D).
Proof. exact (eq_refl (@eq D)). Qed.
Lemma lem8312617 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312618 {D Q : Type'} (f : Q -> D) (x : Q) : (f x) = (@I (Q -> D) f x).
Proof. exact (@lem8312617 Q D f x). Qed.
Lemma lem8312620 {D Q : Type'} (pat : Q -> D) (t : Q) : (pat t) = (@I (Q -> D) pat t).
Proof. exact (@lem8312618 D Q pat t). Qed.
Lemma lem8312625 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312626 {D P : Type'} (f : P -> D) (x : P) : (f x) = (@I (P -> D) f x).
Proof. exact (@lem8312625 P D f x). Qed.
Lemma lem8312628 {D P : Type'} (e : P -> D) (a' : P) : (e a') = (@I (P -> D) e a').
Proof. exact (@lem8312626 D P e a'). Qed.
Lemma lem8312629 {D Q : Type'} (pat : Q -> D) (t : Q) : (term2317 D Q pat t) = (term2318 D Q pat t).
Proof. exact (MK_COMB (@lem8312612 D) (@lem8312620 D Q pat t)). Qed.
Lemma lem8312630 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a' : P) : ((pat t) = (e a')) = ((@I (Q -> D) pat t) = (@I (P -> D) e a')).
Proof. exact (MK_COMB (@lem8312629 D Q pat t) (@lem8312628 D P e a')). Qed.
Lemma lem8312631 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a' : P) : (term474 D P Q pat t e a') = (term2319 D P Q pat t e a').
Proof. exact (MK_COMB (@lem8312611) (@lem8312630 D P Q pat t e a')). Qed.
Lemma lem8312632 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a' : P) : (term476 D P Q pat e a') = (term2320 D P Q pat e a').
Proof. exact (fun_ext (fun t : Q => @lem8312631 D P Q pat t e a')). Qed.
Lemma lem8312633 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8312634 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a' : P) : (term477 D P Q pat e a') = (term2321 D P Q pat e a').
Proof. exact (MK_COMB (@lem8312633 Q) (@lem8312632 D P Q pat e a')). Qed.
Lemma lem8312635 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8312642 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312643 {A B P : Type'} (f : type560 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> Prop) f x).
Proof. exact (@lem8312642 (A -> B) (P -> Prop) f x). Qed.
Lemma lem8312644 {A B P : Type'} (p : type560 A B P) (g : A -> B) : (p g) = (@I ((A -> B) -> P -> Prop) p g).
Proof. exact (@lem8312643 A B P p g). Qed.
Lemma lem8312645 {P : Type'} (a' : P) : a' = a'.
Proof. exact (eq_refl a'). Qed.
Lemma lem8312646 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a' : P) : (p g a') = (@I ((A -> B) -> P -> Prop) p g a').
Proof. exact (MK_COMB (@lem8312644 A B P p g) (@lem8312645 P a')). Qed.
Lemma lem8312648 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312649 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8312648 P Prop f x). Qed.
Lemma lem8312650 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a' : P) : (@I ((A -> B) -> P -> Prop) p g a') = (term864 A B P p g a').
Proof. exact (@lem8312649 P (@I ((A -> B) -> P -> Prop) p g) a'). Qed.
Lemma lem8312652 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a' : P) : (p g a') = (term864 A B P p g a').
Proof. exact (TRANS (@lem8312646 A B P p g a') (@lem8312650 A B P p g a')). Qed.
Lemma lem8312653 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a' : P) : (term865 A B P p g a') = (term866 A B P p g a').
Proof. exact (MK_COMB (@lem8312635) (@lem8312652 A B P p g a')). Qed.
Lemma lem8312654 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8312655 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a' : P) : (term392 A B P p g a') = (term867 A B P p g a').
Proof. exact (MK_COMB (@lem8312654) (@lem8312653 A B P p g a')). Qed.
Lemma lem8312656 {A B D P Q : Type'} (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) : (term1924 A B D P Q p g pat e a') = (term2387 A B D P Q p g pat e a').
Proof. exact (MK_COMB (@lem8312655 A B P p g a') (@lem8312634 D P Q pat e a')). Qed.
Lemma lem8312657 {D : Type'} : (@eq D) = (@eq D).
Proof. exact (eq_refl (@eq D)). Qed.
Lemma lem8312662 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312663 {D Q : Type'} (f : Q -> D) (x : Q) : (f x) = (@I (Q -> D) f x).
Proof. exact (@lem8312662 Q D f x). Qed.
Lemma lem8312665 {D Q : Type'} (pat : Q -> D) (t' : Q) : (pat t') = (@I (Q -> D) pat t').
Proof. exact (@lem8312663 D Q pat t'). Qed.
Lemma lem8312670 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312671 {D P : Type'} (f : P -> D) (x : P) : (f x) = (@I (P -> D) f x).
Proof. exact (@lem8312670 P D f x). Qed.
Lemma lem8312673 {D P : Type'} (e : P -> D) (a' : P) : (e a') = (@I (P -> D) e a').
Proof. exact (@lem8312671 D P e a'). Qed.
Lemma lem8312674 {D Q : Type'} (pat : Q -> D) (t' : Q) : (term2317 D Q pat t') = (term2318 D Q pat t').
Proof. exact (MK_COMB (@lem8312657 D) (@lem8312665 D Q pat t')). Qed.
Lemma lem8312675 {D P Q : Type'} (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) : ((pat t') = (e a')) = ((@I (Q -> D) pat t') = (@I (P -> D) e a')).
Proof. exact (MK_COMB (@lem8312674 D Q pat t') (@lem8312673 D P e a')). Qed.
Lemma lem8312682 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312683 {A B P : Type'} (f : type560 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> Prop) f x).
Proof. exact (@lem8312682 (A -> B) (P -> Prop) f x). Qed.
Lemma lem8312684 {A B P : Type'} (p : type560 A B P) (f : A -> B) : (p f) = (@I ((A -> B) -> P -> Prop) p f).
Proof. exact (@lem8312683 A B P p f). Qed.
Lemma lem8312685 {P : Type'} (a' : P) : a' = a'.
Proof. exact (eq_refl a'). Qed.
Lemma lem8312686 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) : (p f a') = (@I ((A -> B) -> P -> Prop) p f a').
Proof. exact (MK_COMB (@lem8312684 A B P p f) (@lem8312685 P a')). Qed.
Lemma lem8312688 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312689 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8312688 P Prop f x). Qed.
Lemma lem8312690 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) : (@I ((A -> B) -> P -> Prop) p f a') = (term864 A B P p f a').
Proof. exact (@lem8312689 P (@I ((A -> B) -> P -> Prop) p f) a'). Qed.
Lemma lem8312692 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) : (p f a') = (term864 A B P p f a').
Proof. exact (TRANS (@lem8312686 A B P p f a') (@lem8312690 A B P p f a')). Qed.
Lemma lem8312693 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8312694 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) : (term1178 A B P p f a') = (term978 A B P p f a').
Proof. exact (MK_COMB (@lem8312693) (@lem8312692 A B P p f a')). Qed.
Lemma lem8312695 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) : (term1772 A B D P Q p f pat t' e a') = (term2386 A B D P Q p f pat t' e a').
Proof. exact (MK_COMB (@lem8312694 A B P p f a') (@lem8312675 D P Q pat t' e a')). Qed.
Lemma lem8312696 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8312697 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) : (term2012 A B D P Q p f pat t' e a') = (term2390 A B D P Q p f pat t' e a').
Proof. exact (MK_COMB (@lem8312696) (@lem8312695 A B D P Q p f pat t' e a')). Qed.
Lemma lem8312698 {A B D P Q : Type'} (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) : (term2048 A B D P Q f t' p g pat e a') = (term2391 A B D P Q f t' p g pat e a').
Proof. exact (MK_COMB (@lem8312697 A B D P Q p f pat t' e a') (@lem8312656 A B D P Q p g pat e a')). Qed.
Lemma lem8312699 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8312700 {A B D P Q : Type'} (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) : (term2076 A B D P Q f t' p g pat e a') = (term2392 A B D P Q f t' p g pat e a').
Proof. exact (MK_COMB (@lem8312699) (@lem8312698 A B D P Q f t' p g pat e a')). Qed.
Lemma lem8312701 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) : (term2078 A B D P Q f p g pat t' e a') = (term2393 A B D P Q f p g pat t' e a').
Proof. exact (MK_COMB (@lem8312700 A B D P Q f t' p g pat e a') (@lem8312610 A B D P Q f p g pat t' e a')). Qed.
Lemma lem8312702 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8312707 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312708 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (@lem8312707 A B f x). Qed.
Lemma lem8312710 {A B : Type'} (f : A -> B) (z : A) : (f z) = (@I (A -> B) f z).
Proof. exact (@lem8312708 A B f z). Qed.
Lemma lem8312715 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312716 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (@lem8312715 A B f x). Qed.
Lemma lem8312718 {A B : Type'} (g : A -> B) (z : A) : (g z) = (@I (A -> B) g z).
Proof. exact (@lem8312716 A B g z). Qed.
Lemma lem8312719 {A B : Type'} (f : A -> B) (z : A) : (term2394 A B f z) = (term2395 A B f z).
Proof. exact (MK_COMB (@lem8312702 B) (@lem8312710 A B f z)). Qed.
Lemma lem8312720 {A B : Type'} (f : A -> B) (g : A -> B) (z : A) : ((f z) = (g z)) = ((@I (A -> B) f z) = (@I (A -> B) g z)).
Proof. exact (MK_COMB (@lem8312719 A B f z) (@lem8312718 A B g z)). Qed.
Lemma lem8312721 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8312728 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312729 {A P : Type'} (f : P -> A) (x : P) : (f x) = (@I (P -> A) f x).
Proof. exact (@lem8312728 P A f x). Qed.
Lemma lem8312731 {A P : Type'} (s : P -> A) (a' : P) : (s a') = (@I (P -> A) s a').
Proof. exact (@lem8312729 A P s a'). Qed.
Lemma lem8312732 {A : Type'} (lt2 : type1402 A) (z : A) : (lt2 z) = (lt2 z).
Proof. exact (eq_refl (lt2 z)). Qed.
Lemma lem8312733 {A P : Type'} (lt2 : type1402 A) (z : A) (s : P -> A) (a' : P) : (term1053 A P lt2 z s a') = (term2346 A P lt2 z s a').
Proof. exact (MK_COMB (@lem8312732 A lt2 z) (@lem8312731 A P s a')). Qed.
Lemma lem8312735 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312736 {A : Type'} (f : type1402 A) (x : A) : (f x) = (@I (A -> A -> Prop) f x).
Proof. exact (@lem8312735 A (A -> Prop) f x). Qed.
Lemma lem8312737 {A : Type'} (lt2 : type1402 A) (z : A) : (lt2 z) = (@I (A -> A -> Prop) lt2 z).
Proof. exact (@lem8312736 A lt2 z). Qed.
Lemma lem8312738 {A P : Type'} (s : P -> A) (a' : P) : (@I (P -> A) s a') = (@I (P -> A) s a').
Proof. exact (eq_refl (@I (P -> A) s a')). Qed.
Lemma lem8312739 {A P : Type'} (lt2 : type1402 A) (z : A) (s : P -> A) (a' : P) : (term2346 A P lt2 z s a') = (term2347 A P lt2 z s a').
Proof. exact (MK_COMB (@lem8312737 A lt2 z) (@lem8312738 A P s a')). Qed.
Lemma lem8312741 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312742 {A : Type'} (f : A -> Prop) (x : A) : (f x) = (@I (A -> Prop) f x).
Proof. exact (@lem8312741 A Prop f x). Qed.
Lemma lem8312743 {A P : Type'} (lt2 : type1402 A) (z : A) (s : P -> A) (a' : P) : (term2347 A P lt2 z s a') = (term2348 A P lt2 z s a').
Proof. exact (@lem8312742 A (@I (A -> A -> Prop) lt2 z) (@I (P -> A) s a')). Qed.
Lemma lem8312744 {A P : Type'} (lt2 : type1402 A) (z : A) (s : P -> A) (a' : P) : (term2346 A P lt2 z s a') = (term2348 A P lt2 z s a').
Proof. exact (TRANS (@lem8312739 A P lt2 z s a') (@lem8312743 A P lt2 z s a')). Qed.
Lemma lem8312745 {A P : Type'} (lt2 : type1402 A) (z : A) (s : P -> A) (a' : P) : (term1053 A P lt2 z s a') = (term2348 A P lt2 z s a').
Proof. exact (TRANS (@lem8312733 A P lt2 z s a') (@lem8312744 A P lt2 z s a')). Qed.
Lemma lem8312746 {A P : Type'} (lt2 : type1402 A) (z : A) (s : P -> A) (a' : P) : (term1893 A P lt2 z s a') = (term2396 A P lt2 z s a').
Proof. exact (MK_COMB (@lem8312721) (@lem8312745 A P lt2 z s a')). Qed.
Lemma lem8312747 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8312748 {A P : Type'} (lt2 : type1402 A) (z : A) (s : P -> A) (a' : P) : (term2397 A P lt2 z s a') = (term2398 A P lt2 z s a').
Proof. exact (MK_COMB (@lem8312747) (@lem8312746 A P lt2 z s a')). Qed.
Lemma lem8312749 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a' : P) (f : A -> B) (g : A -> B) (z : A) : (term1920 A B P lt2 s a' f g z) = (term2399 A B P lt2 s a' f g z).
Proof. exact (MK_COMB (@lem8312748 A P lt2 z s a') (@lem8312720 A B f g z)). Qed.
Lemma lem8312750 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a' : P) (f : A -> B) (g : A -> B) : (term1921 A B P lt2 s a' f g) = (term2400 A B P lt2 s a' f g).
Proof. exact (fun_ext (fun z : A => @lem8312749 A B P lt2 s a' f g z)). Qed.
Lemma lem8312751 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8312752 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a' : P) (f : A -> B) (g : A -> B) : (term1922 A B P lt2 s a' f g) = (term2401 A B P lt2 s a' f g).
Proof. exact (MK_COMB (@lem8312751 A) (@lem8312750 A B P lt2 s a' f g)). Qed.
Lemma lem8312753 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8312754 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a' : P) (f : A -> B) (g : A -> B) : (term1938 A B P lt2 s a' f g) = (term2402 A B P lt2 s a' f g).
Proof. exact (MK_COMB (@lem8312753) (@lem8312752 A B P lt2 s a' f g)). Qed.
Lemma lem8312755 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) : (term2091 A B D P Q lt2 s f p g pat t' e a') = (term2403 A B D P Q lt2 s f p g pat t' e a').
Proof. exact (MK_COMB (@lem8312754 A B P lt2 s a' f g) (@lem8312701 A B D P Q f p g pat t' e a')). Qed.
Lemma lem8312756 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8312757 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) : (term2185 A B D P Q lt2 s f p g pat t' e a') = (term2404 A B D P Q lt2 s f p g pat t' e a').
Proof. exact (MK_COMB (@lem8312756) (@lem8312755 A B D P Q lt2 s f p g pat t' e a')). Qed.
Lemma lem8312758 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2187 A B D P Q lt2 s g t' p _111929 f arg _111928 pat e a') = (term2405 A B D P Q lt2 s g t' p _111929 f arg _111928 pat e a').
Proof. exact (MK_COMB (@lem8312757 A B D P Q lt2 s f p g pat t' e a') (@lem8312522 A B D P Q t' p _111929 f arg _111928 pat e a')). Qed.
Lemma lem8312759 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8312766 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312767 {A P : Type'} (f : P -> A) (x : P) : (f x) = (@I (P -> A) f x).
Proof. exact (@lem8312766 P A f x). Qed.
Lemma lem8312769 {A P : Type'} (s : P -> A) (a : P) : (s a) = (@I (P -> A) s a).
Proof. exact (@lem8312767 A P s a). Qed.
Lemma lem8312770 {A : Type'} (lt2 : type1402 A) (y : A) : (lt2 y) = (lt2 y).
Proof. exact (eq_refl (lt2 y)). Qed.
Lemma lem8312771 {A P : Type'} (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term1053 A P lt2 y s a) = (term2346 A P lt2 y s a).
Proof. exact (MK_COMB (@lem8312770 A lt2 y) (@lem8312769 A P s a)). Qed.
Lemma lem8312773 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312774 {A : Type'} (f : type1402 A) (x : A) : (f x) = (@I (A -> A -> Prop) f x).
Proof. exact (@lem8312773 A (A -> Prop) f x). Qed.
Lemma lem8312775 {A : Type'} (lt2 : type1402 A) (y : A) : (lt2 y) = (@I (A -> A -> Prop) lt2 y).
Proof. exact (@lem8312774 A lt2 y). Qed.
Lemma lem8312776 {A P : Type'} (s : P -> A) (a : P) : (@I (P -> A) s a) = (@I (P -> A) s a).
Proof. exact (eq_refl (@I (P -> A) s a)). Qed.
Lemma lem8312777 {A P : Type'} (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2346 A P lt2 y s a) = (term2347 A P lt2 y s a).
Proof. exact (MK_COMB (@lem8312775 A lt2 y) (@lem8312776 A P s a)). Qed.
Lemma lem8312779 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312780 {A : Type'} (f : A -> Prop) (x : A) : (f x) = (@I (A -> Prop) f x).
Proof. exact (@lem8312779 A Prop f x). Qed.
Lemma lem8312781 {A P : Type'} (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2347 A P lt2 y s a) = (term2348 A P lt2 y s a).
Proof. exact (@lem8312780 A (@I (A -> A -> Prop) lt2 y) (@I (P -> A) s a)). Qed.
Lemma lem8312782 {A P : Type'} (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2346 A P lt2 y s a) = (term2348 A P lt2 y s a).
Proof. exact (TRANS (@lem8312777 A P lt2 y s a) (@lem8312781 A P lt2 y s a)). Qed.
Lemma lem8312783 {A P : Type'} (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term1053 A P lt2 y s a) = (term2348 A P lt2 y s a).
Proof. exact (TRANS (@lem8312771 A P lt2 y s a) (@lem8312782 A P lt2 y s a)). Qed.
Lemma lem8312784 {A P : Type'} (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term1893 A P lt2 y s a) = (term2396 A P lt2 y s a).
Proof. exact (MK_COMB (@lem8312759) (@lem8312783 A P lt2 y s a)). Qed.
Lemma lem8312797 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312798 {D P Q : Type'} (f : type886 D P Q) (x : Q -> D) : (f x) = (@I ((Q -> D) -> (P -> D) -> P -> Q) f x).
Proof. exact (@lem8312797 (Q -> D) (type798 D P Q) f x). Qed.
Lemma lem8312799 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) : (_111928 pat) = (@I ((Q -> D) -> (P -> D) -> P -> Q) _111928 pat).
Proof. exact (@lem8312798 D P Q _111928 pat). Qed.
Lemma lem8312800 {D P : Type'} (e : P -> D) : e = e.
Proof. exact (eq_refl e). Qed.
Lemma lem8312801 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (_111928 pat e) = (@I ((Q -> D) -> (P -> D) -> P -> Q) _111928 pat e).
Proof. exact (MK_COMB (@lem8312799 D P Q _111928 pat) (@lem8312800 D P e)). Qed.
Lemma lem8312803 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312804 {D P Q : Type'} (f : type798 D P Q) (x : P -> D) : (f x) = (@I ((P -> D) -> P -> Q) f x).
Proof. exact (@lem8312803 (P -> D) (P -> Q) f x). Qed.
Lemma lem8312805 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (@I ((Q -> D) -> (P -> D) -> P -> Q) _111928 pat e) = (term2311 D P Q _111928 pat e).
Proof. exact (@lem8312804 D P Q (@I ((Q -> D) -> (P -> D) -> P -> Q) _111928 pat) e). Qed.
Lemma lem8312806 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (_111928 pat e) = (term2311 D P Q _111928 pat e).
Proof. exact (TRANS (@lem8312801 D P Q _111928 pat e) (@lem8312805 D P Q _111928 pat e)). Qed.
Lemma lem8312807 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8312808 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (_111928 pat e a) = (term2312 D P Q _111928 pat e a).
Proof. exact (MK_COMB (@lem8312806 D P Q _111928 pat e) (@lem8312807 P a)). Qed.
Lemma lem8312810 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312811 {P Q : Type'} (f : P -> Q) (x : P) : (f x) = (@I (P -> Q) f x).
Proof. exact (@lem8312810 P Q f x). Qed.
Lemma lem8312812 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2312 D P Q _111928 pat e a) = (term2313 D P Q _111928 pat e a).
Proof. exact (@lem8312811 P Q (term2311 D P Q _111928 pat e) a). Qed.
Lemma lem8312814 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (_111928 pat e a) = (term2313 D P Q _111928 pat e a).
Proof. exact (TRANS (@lem8312808 D P Q _111928 pat e a) (@lem8312812 D P Q _111928 pat e a)). Qed.
Lemma lem8312815 {A P Q : Type'} (arg : type1475 A P Q) (a : P) : (arg a) = (arg a).
Proof. exact (eq_refl (arg a)). Qed.
Lemma lem8312816 {A D P Q : Type'} (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1257 A D P Q arg _111928 pat e a) = (term2375 A D P Q arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8312815 A P Q arg a) (@lem8312814 D P Q _111928 pat e a)). Qed.
Lemma lem8312818 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312819 {A P Q : Type'} (f : type1475 A P Q) (x : P) : (f x) = (@I (P -> Q -> A) f x).
Proof. exact (@lem8312818 P (Q -> A) f x). Qed.
Lemma lem8312820 {A P Q : Type'} (arg : type1475 A P Q) (a : P) : (arg a) = (@I (P -> Q -> A) arg a).
Proof. exact (@lem8312819 A P Q arg a). Qed.
Lemma lem8312821 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2313 D P Q _111928 pat e a) = (term2313 D P Q _111928 pat e a).
Proof. exact (eq_refl (term2313 D P Q _111928 pat e a)). Qed.
Lemma lem8312822 {A D P Q : Type'} (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2375 A D P Q arg _111928 pat e a) = (term2376 A D P Q arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8312820 A P Q arg a) (@lem8312821 D P Q _111928 pat e a)). Qed.
Lemma lem8312824 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312825 {A Q : Type'} (f : Q -> A) (x : Q) : (f x) = (@I (Q -> A) f x).
Proof. exact (@lem8312824 Q A f x). Qed.
Lemma lem8312826 {A D P Q : Type'} (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2376 A D P Q arg _111928 pat e a) = (term2377 A D P Q arg _111928 pat e a).
Proof. exact (@lem8312825 A Q (@I (P -> Q -> A) arg a) (term2313 D P Q _111928 pat e a)). Qed.
Lemma lem8312827 {A D P Q : Type'} (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2375 A D P Q arg _111928 pat e a) = (term2377 A D P Q arg _111928 pat e a).
Proof. exact (TRANS (@lem8312822 A D P Q arg _111928 pat e a) (@lem8312826 A D P Q arg _111928 pat e a)). Qed.
Lemma lem8312828 {A D P Q : Type'} (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1257 A D P Q arg _111928 pat e a) = (term2377 A D P Q arg _111928 pat e a).
Proof. exact (TRANS (@lem8312816 A D P Q arg _111928 pat e a) (@lem8312827 A D P Q arg _111928 pat e a)). Qed.
Lemma lem8312829 {A : Type'} (lt2 : type1402 A) (y : A) : (lt2 y) = (lt2 y).
Proof. exact (eq_refl (lt2 y)). Qed.
Lemma lem8312830 {A D P Q : Type'} (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1258 A D P Q lt2 y arg _111928 pat e a) = (term2406 A D P Q lt2 y arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8312829 A lt2 y) (@lem8312828 A D P Q arg _111928 pat e a)). Qed.
Lemma lem8312832 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312833 {A : Type'} (f : type1402 A) (x : A) : (f x) = (@I (A -> A -> Prop) f x).
Proof. exact (@lem8312832 A (A -> Prop) f x). Qed.
Lemma lem8312834 {A : Type'} (lt2 : type1402 A) (y : A) : (lt2 y) = (@I (A -> A -> Prop) lt2 y).
Proof. exact (@lem8312833 A lt2 y). Qed.
Lemma lem8312835 {A D P Q : Type'} (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2377 A D P Q arg _111928 pat e a) = (term2377 A D P Q arg _111928 pat e a).
Proof. exact (eq_refl (term2377 A D P Q arg _111928 pat e a)). Qed.
Lemma lem8312836 {A D P Q : Type'} (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2406 A D P Q lt2 y arg _111928 pat e a) = (term2407 A D P Q lt2 y arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8312834 A lt2 y) (@lem8312835 A D P Q arg _111928 pat e a)). Qed.
Lemma lem8312838 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312839 {A : Type'} (f : A -> Prop) (x : A) : (f x) = (@I (A -> Prop) f x).
Proof. exact (@lem8312838 A Prop f x). Qed.
Lemma lem8312840 {A D P Q : Type'} (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2407 A D P Q lt2 y arg _111928 pat e a) = (term2408 A D P Q lt2 y arg _111928 pat e a).
Proof. exact (@lem8312839 A (@I (A -> A -> Prop) lt2 y) (term2377 A D P Q arg _111928 pat e a)). Qed.
Lemma lem8312841 {A D P Q : Type'} (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2406 A D P Q lt2 y arg _111928 pat e a) = (term2408 A D P Q lt2 y arg _111928 pat e a).
Proof. exact (TRANS (@lem8312836 A D P Q lt2 y arg _111928 pat e a) (@lem8312840 A D P Q lt2 y arg _111928 pat e a)). Qed.
Lemma lem8312842 {A D P Q : Type'} (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term1258 A D P Q lt2 y arg _111928 pat e a) = (term2408 A D P Q lt2 y arg _111928 pat e a).
Proof. exact (TRANS (@lem8312830 A D P Q lt2 y arg _111928 pat e a) (@lem8312841 A D P Q lt2 y arg _111928 pat e a)). Qed.
Lemma lem8312843 {D : Type'} : (@eq D) = (@eq D).
Proof. exact (eq_refl (@eq D)). Qed.
Lemma lem8312848 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312849 {D Q : Type'} (f : Q -> D) (x : Q) : (f x) = (@I (Q -> D) f x).
Proof. exact (@lem8312848 Q D f x). Qed.
Lemma lem8312851 {D Q : Type'} (pat : Q -> D) (t : Q) : (pat t) = (@I (Q -> D) pat t).
Proof. exact (@lem8312849 D Q pat t). Qed.
Lemma lem8312856 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312857 {D P : Type'} (f : P -> D) (x : P) : (f x) = (@I (P -> D) f x).
Proof. exact (@lem8312856 P D f x). Qed.
Lemma lem8312859 {D P : Type'} (e : P -> D) (a : P) : (e a) = (@I (P -> D) e a).
Proof. exact (@lem8312857 D P e a). Qed.
Lemma lem8312860 {D Q : Type'} (pat : Q -> D) (t : Q) : (term2317 D Q pat t) = (term2318 D Q pat t).
Proof. exact (MK_COMB (@lem8312843 D) (@lem8312851 D Q pat t)). Qed.
Lemma lem8312861 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : ((pat t) = (e a)) = ((@I (Q -> D) pat t) = (@I (P -> D) e a)).
Proof. exact (MK_COMB (@lem8312860 D Q pat t) (@lem8312859 D P e a)). Qed.
Lemma lem8312868 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312869 {A B P : Type'} (f : type560 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> Prop) f x).
Proof. exact (@lem8312868 (A -> B) (P -> Prop) f x). Qed.
Lemma lem8312870 {A B P : Type'} (p : type560 A B P) (f : A -> B) : (p f) = (@I ((A -> B) -> P -> Prop) p f).
Proof. exact (@lem8312869 A B P p f). Qed.
Lemma lem8312871 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8312872 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (p f a) = (@I ((A -> B) -> P -> Prop) p f a).
Proof. exact (MK_COMB (@lem8312870 A B P p f) (@lem8312871 P a)). Qed.
Lemma lem8312874 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312875 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8312874 P Prop f x). Qed.
Lemma lem8312876 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (@I ((A -> B) -> P -> Prop) p f a) = (term864 A B P p f a).
Proof. exact (@lem8312875 P (@I ((A -> B) -> P -> Prop) p f) a). Qed.
Lemma lem8312878 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (p f a) = (term864 A B P p f a).
Proof. exact (TRANS (@lem8312872 A B P p f a) (@lem8312876 A B P p f a)). Qed.
Lemma lem8312879 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8312880 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term1178 A B P p f a) = (term978 A B P p f a).
Proof. exact (MK_COMB (@lem8312879) (@lem8312878 A B P p f a)). Qed.
Lemma lem8312881 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term1772 A B D P Q p f pat t e a) = (term2386 A B D P Q p f pat t e a).
Proof. exact (MK_COMB (@lem8312880 A B P p f a) (@lem8312861 D P Q pat t e a)). Qed.
Lemma lem8312882 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8312883 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term2012 A B D P Q p f pat t e a) = (term2390 A B D P Q p f pat t e a).
Proof. exact (MK_COMB (@lem8312882) (@lem8312881 A B D P Q p f pat t e a)). Qed.
Lemma lem8312884 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2014 A B D P Q p f t lt2 y arg _111928 pat e a) = (term2409 A B D P Q p f t lt2 y arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8312883 A B D P Q p f pat t e a) (@lem8312842 A D P Q lt2 y arg _111928 pat e a)). Qed.
Lemma lem8312885 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8312886 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2029 A B D P Q p f t lt2 y arg _111928 pat e a) = (term2410 A B D P Q p f t lt2 y arg _111928 pat e a).
Proof. exact (MK_COMB (@lem8312885) (@lem8312884 A B D P Q p f t lt2 y arg _111928 pat e a)). Qed.
Lemma lem8312887 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2031 A B D P Q p f t arg _111928 pat e lt2 y s a) = (term2411 A B D P Q p f t arg _111928 pat e lt2 y s a).
Proof. exact (MK_COMB (@lem8312886 A B D P Q p f t lt2 y arg _111928 pat e a) (@lem8312784 A P lt2 y s a)). Qed.
Lemma lem8312888 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8312889 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2255 A B D P Q p f t arg _111928 pat e lt2 y s a) = (term2412 A B D P Q p f t arg _111928 pat e lt2 y s a).
Proof. exact (MK_COMB (@lem8312888) (@lem8312887 A B D P Q p f t arg _111928 pat e lt2 y s a)). Qed.
Lemma lem8312890 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2295 A B D P Q t y a lt2 s g t' p _111929 f arg _111928 pat e a') = (term2413 A B D P Q t y a lt2 s g t' p _111929 f arg _111928 pat e a').
Proof. exact (MK_COMB (@lem8312889 A B D P Q p f t arg _111928 pat e lt2 y s a) (@lem8312758 A B D P Q lt2 s g t' p _111929 f arg _111928 pat e a')). Qed.
Lemma lem8312891 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2295 A B D P Q t y a lt2 s g t' p _111929 f arg _111928 pat e a') : term2413 A B D P Q t y a lt2 s g t' p _111929 f arg _111928 pat e a'.
Proof. exact (EQ_MP (@lem8312890 A B D P Q t y a lt2 s g t' p _111929 f arg _111928 pat e a') (@lem8312058 A B D P Q t y a lt2 s g t' p _111929 f arg _111928 pat e a' h1)). Qed.
Lemma lem8312898 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312899 {A B P : Type'} (f : type560 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> Prop) f x).
Proof. exact (@lem8312898 (A -> B) (P -> Prop) f x). Qed.
Lemma lem8312900 {A B P : Type'} (p : type560 A B P) (g : A -> B) : (p g) = (@I ((A -> B) -> P -> Prop) p g).
Proof. exact (@lem8312899 A B P p g). Qed.
Lemma lem8312901 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8312902 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a : P) : (p g a) = (@I ((A -> B) -> P -> Prop) p g a).
Proof. exact (MK_COMB (@lem8312900 A B P p g) (@lem8312901 P a)). Qed.
Lemma lem8312904 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312905 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8312904 P Prop f x). Qed.
Lemma lem8312906 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a : P) : (@I ((A -> B) -> P -> Prop) p g a) = (term864 A B P p g a).
Proof. exact (@lem8312905 P (@I ((A -> B) -> P -> Prop) p g) a). Qed.
Lemma lem8312908 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a : P) : (p g a) = (term864 A B P p g a).
Proof. exact (TRANS (@lem8312902 A B P p g a) (@lem8312906 A B P p g a)). Qed.
Lemma lem8312909 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8312916 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312917 {A B P : Type'} (f : type560 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> Prop) f x).
Proof. exact (@lem8312916 (A -> B) (P -> Prop) f x). Qed.
Lemma lem8312918 {A B P : Type'} (p : type560 A B P) (f : A -> B) : (p f) = (@I ((A -> B) -> P -> Prop) p f).
Proof. exact (@lem8312917 A B P p f). Qed.
Lemma lem8312919 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8312920 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (p f a) = (@I ((A -> B) -> P -> Prop) p f a).
Proof. exact (MK_COMB (@lem8312918 A B P p f) (@lem8312919 P a)). Qed.
Lemma lem8312922 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312923 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8312922 P Prop f x). Qed.
Lemma lem8312924 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (@I ((A -> B) -> P -> Prop) p f a) = (term864 A B P p f a).
Proof. exact (@lem8312923 P (@I ((A -> B) -> P -> Prop) p f) a). Qed.
Lemma lem8312926 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (p f a) = (term864 A B P p f a).
Proof. exact (TRANS (@lem8312920 A B P p f a) (@lem8312924 A B P p f a)). Qed.
Lemma lem8312927 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term865 A B P p f a) = (term866 A B P p f a).
Proof. exact (MK_COMB (@lem8312909) (@lem8312926 A B P p f a)). Qed.
Lemma lem8312928 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8312929 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term392 A B P p f a) = (term867 A B P p f a).
Proof. exact (MK_COMB (@lem8312928) (@lem8312927 A B P p f a)). Qed.
Lemma lem8312930 {A B P : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term2414 A B P f p g a) = (term2415 A B P f p g a).
Proof. exact (MK_COMB (@lem8312929 A B P p f a) (@lem8312908 A B P p g a)). Qed.
Lemma lem8312931 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8312938 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312939 {A B P : Type'} (f : type560 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> Prop) f x).
Proof. exact (@lem8312938 (A -> B) (P -> Prop) f x). Qed.
Lemma lem8312940 {A B P : Type'} (p : type560 A B P) (g : A -> B) : (p g) = (@I ((A -> B) -> P -> Prop) p g).
Proof. exact (@lem8312939 A B P p g). Qed.
Lemma lem8312941 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8312942 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a : P) : (p g a) = (@I ((A -> B) -> P -> Prop) p g a).
Proof. exact (MK_COMB (@lem8312940 A B P p g) (@lem8312941 P a)). Qed.
Lemma lem8312944 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312945 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8312944 P Prop f x). Qed.
Lemma lem8312946 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a : P) : (@I ((A -> B) -> P -> Prop) p g a) = (term864 A B P p g a).
Proof. exact (@lem8312945 P (@I ((A -> B) -> P -> Prop) p g) a). Qed.
Lemma lem8312948 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a : P) : (p g a) = (term864 A B P p g a).
Proof. exact (TRANS (@lem8312942 A B P p g a) (@lem8312946 A B P p g a)). Qed.
Lemma lem8312949 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a : P) : (term865 A B P p g a) = (term866 A B P p g a).
Proof. exact (MK_COMB (@lem8312931) (@lem8312948 A B P p g a)). Qed.
Lemma lem8312956 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312957 {A B P : Type'} (f : type560 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> Prop) f x).
Proof. exact (@lem8312956 (A -> B) (P -> Prop) f x). Qed.
Lemma lem8312958 {A B P : Type'} (p : type560 A B P) (f : A -> B) : (p f) = (@I ((A -> B) -> P -> Prop) p f).
Proof. exact (@lem8312957 A B P p f). Qed.
Lemma lem8312959 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8312960 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (p f a) = (@I ((A -> B) -> P -> Prop) p f a).
Proof. exact (MK_COMB (@lem8312958 A B P p f) (@lem8312959 P a)). Qed.
Lemma lem8312962 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312963 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8312962 P Prop f x). Qed.
Lemma lem8312964 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (@I ((A -> B) -> P -> Prop) p f a) = (term864 A B P p f a).
Proof. exact (@lem8312963 P (@I ((A -> B) -> P -> Prop) p f) a). Qed.
Lemma lem8312966 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (p f a) = (term864 A B P p f a).
Proof. exact (TRANS (@lem8312960 A B P p f a) (@lem8312964 A B P p f a)). Qed.
Lemma lem8312967 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8312968 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term2416 A B P p f a) = (term2417 A B P p f a).
Proof. exact (MK_COMB (@lem8312967) (@lem8312966 A B P p f a)). Qed.
Lemma lem8312969 {A B P : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term2418 A B P f p g a) = (term2419 A B P f p g a).
Proof. exact (MK_COMB (@lem8312968 A B P p f a) (@lem8312949 A B P p g a)). Qed.
Lemma lem8312970 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8312971 {A B P : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term2420 A B P f p g a) = (term2421 A B P f p g a).
Proof. exact (MK_COMB (@lem8312970) (@lem8312969 A B P f p g a)). Qed.
Lemma lem8312972 {A B P : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term1790 A B P f p g a) = (term2422 A B P f p g a).
Proof. exact (MK_COMB (@lem8312971 A B P f p g a) (@lem8312930 A B P f p g a)). Qed.
Lemma lem8312973 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8312974 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8312975 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8312984 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312985 {A B P : Type'} (f : type518 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> (A -> B) -> P -> A) f x).
Proof. exact (@lem8312984 (A -> B) (type557 A B P) f x). Qed.
Lemma lem8312986 {A B P : Type'} (z : type518 A B P) (f : A -> B) : (z f) = (@I ((A -> B) -> (A -> B) -> P -> A) z f).
Proof. exact (@lem8312985 A B P z f). Qed.
Lemma lem8312987 {A B : Type'} (g : A -> B) : g = g.
Proof. exact (eq_refl g). Qed.
Lemma lem8312988 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) : (z f g) = (@I ((A -> B) -> (A -> B) -> P -> A) z f g).
Proof. exact (MK_COMB (@lem8312986 A B P z f) (@lem8312987 A B g)). Qed.
Lemma lem8312990 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312991 {A B P : Type'} (f : type557 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> A) f x).
Proof. exact (@lem8312990 (A -> B) (P -> A) f x). Qed.
Lemma lem8312992 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) : (@I ((A -> B) -> (A -> B) -> P -> A) z f g) = (term2423 A B P z f g).
Proof. exact (@lem8312991 A B P (@I ((A -> B) -> (A -> B) -> P -> A) z f) g). Qed.
Lemma lem8312993 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) : (z f g) = (term2423 A B P z f g).
Proof. exact (TRANS (@lem8312988 A B P z f g) (@lem8312992 A B P z f g)). Qed.
Lemma lem8312994 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8312995 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) (a : P) : (z f g a) = (term2424 A B P z f g a).
Proof. exact (MK_COMB (@lem8312993 A B P z f g) (@lem8312994 P a)). Qed.
Lemma lem8312997 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8312998 {A P : Type'} (f : P -> A) (x : P) : (f x) = (@I (P -> A) f x).
Proof. exact (@lem8312997 P A f x). Qed.
Lemma lem8312999 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) (a : P) : (term2424 A B P z f g a) = (term2425 A B P z f g a).
Proof. exact (@lem8312998 A P (term2423 A B P z f g) a). Qed.
Lemma lem8313001 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) (a : P) : (z f g a) = (term2425 A B P z f g a).
Proof. exact (TRANS (@lem8312995 A B P z f g a) (@lem8312999 A B P z f g a)). Qed.
Lemma lem8313002 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) (a : P) : (term2426 A B P z f g a) = (term2427 A B P z f g a).
Proof. exact (MK_COMB (@lem8312975 A B f) (@lem8313001 A B P z f g a)). Qed.
Lemma lem8313004 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313005 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (@lem8313004 A B f x). Qed.
Lemma lem8313006 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) (a : P) : (term2427 A B P z f g a) = (term2428 A B P z f g a).
Proof. exact (@lem8313005 A B f (term2425 A B P z f g a)). Qed.
Lemma lem8313007 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) (a : P) : (term2426 A B P z f g a) = (term2428 A B P z f g a).
Proof. exact (TRANS (@lem8313002 A B P z f g a) (@lem8313006 A B P z f g a)). Qed.
Lemma lem8313008 {A B : Type'} (g : A -> B) : g = g.
Proof. exact (eq_refl g). Qed.
Lemma lem8313017 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313018 {A B P : Type'} (f : type518 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> (A -> B) -> P -> A) f x).
Proof. exact (@lem8313017 (A -> B) (type557 A B P) f x). Qed.
Lemma lem8313019 {A B P : Type'} (z : type518 A B P) (f : A -> B) : (z f) = (@I ((A -> B) -> (A -> B) -> P -> A) z f).
Proof. exact (@lem8313018 A B P z f). Qed.
Lemma lem8313020 {A B : Type'} (g : A -> B) : g = g.
Proof. exact (eq_refl g). Qed.
Lemma lem8313021 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) : (z f g) = (@I ((A -> B) -> (A -> B) -> P -> A) z f g).
Proof. exact (MK_COMB (@lem8313019 A B P z f) (@lem8313020 A B g)). Qed.
Lemma lem8313023 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313024 {A B P : Type'} (f : type557 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> A) f x).
Proof. exact (@lem8313023 (A -> B) (P -> A) f x). Qed.
Lemma lem8313025 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) : (@I ((A -> B) -> (A -> B) -> P -> A) z f g) = (term2423 A B P z f g).
Proof. exact (@lem8313024 A B P (@I ((A -> B) -> (A -> B) -> P -> A) z f) g). Qed.
Lemma lem8313026 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) : (z f g) = (term2423 A B P z f g).
Proof. exact (TRANS (@lem8313021 A B P z f g) (@lem8313025 A B P z f g)). Qed.
Lemma lem8313027 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8313028 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) (a : P) : (z f g a) = (term2424 A B P z f g a).
Proof. exact (MK_COMB (@lem8313026 A B P z f g) (@lem8313027 P a)). Qed.
Lemma lem8313030 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313031 {A P : Type'} (f : P -> A) (x : P) : (f x) = (@I (P -> A) f x).
Proof. exact (@lem8313030 P A f x). Qed.
Lemma lem8313032 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) (a : P) : (term2424 A B P z f g a) = (term2425 A B P z f g a).
Proof. exact (@lem8313031 A P (term2423 A B P z f g) a). Qed.
Lemma lem8313034 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) (a : P) : (z f g a) = (term2425 A B P z f g a).
Proof. exact (TRANS (@lem8313028 A B P z f g a) (@lem8313032 A B P z f g a)). Qed.
Lemma lem8313035 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) (a : P) : (term2429 A B P z f g a) = (term2430 A B P z f g a).
Proof. exact (MK_COMB (@lem8313008 A B g) (@lem8313034 A B P z f g a)). Qed.
Lemma lem8313037 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313038 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (@lem8313037 A B f x). Qed.
Lemma lem8313039 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) (a : P) : (term2430 A B P z f g a) = (term2431 A B P z f g a).
Proof. exact (@lem8313038 A B g (term2425 A B P z f g a)). Qed.
Lemma lem8313040 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) (a : P) : (term2429 A B P z f g a) = (term2431 A B P z f g a).
Proof. exact (TRANS (@lem8313035 A B P z f g a) (@lem8313039 A B P z f g a)). Qed.
Lemma lem8313041 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) (a : P) : (term2432 A B P z f g a) = (term2433 A B P z f g a).
Proof. exact (MK_COMB (@lem8312974 B) (@lem8313007 A B P z f g a)). Qed.
Lemma lem8313042 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) (a : P) : ((term2426 A B P z f g a) = (term2429 A B P z f g a)) = ((term2428 A B P z f g a) = (term2431 A B P z f g a)).
Proof. exact (MK_COMB (@lem8313041 A B P z f g a) (@lem8313040 A B P z f g a)). Qed.
Lemma lem8313043 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) (a : P) : (term2434 A B P z f g a) = (term2435 A B P z f g a).
Proof. exact (MK_COMB (@lem8312973) (@lem8313042 A B P z f g a)). Qed.
Lemma lem8313044 {A : Type'} (lt2 : type1402 A) : lt2 = lt2.
Proof. exact (eq_refl lt2). Qed.
Lemma lem8313053 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313054 {A B P : Type'} (f : type518 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> (A -> B) -> P -> A) f x).
Proof. exact (@lem8313053 (A -> B) (type557 A B P) f x). Qed.
Lemma lem8313055 {A B P : Type'} (z : type518 A B P) (f : A -> B) : (z f) = (@I ((A -> B) -> (A -> B) -> P -> A) z f).
Proof. exact (@lem8313054 A B P z f). Qed.
Lemma lem8313056 {A B : Type'} (g : A -> B) : g = g.
Proof. exact (eq_refl g). Qed.
Lemma lem8313057 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) : (z f g) = (@I ((A -> B) -> (A -> B) -> P -> A) z f g).
Proof. exact (MK_COMB (@lem8313055 A B P z f) (@lem8313056 A B g)). Qed.
Lemma lem8313059 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313060 {A B P : Type'} (f : type557 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> A) f x).
Proof. exact (@lem8313059 (A -> B) (P -> A) f x). Qed.
Lemma lem8313061 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) : (@I ((A -> B) -> (A -> B) -> P -> A) z f g) = (term2423 A B P z f g).
Proof. exact (@lem8313060 A B P (@I ((A -> B) -> (A -> B) -> P -> A) z f) g). Qed.
Lemma lem8313062 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) : (z f g) = (term2423 A B P z f g).
Proof. exact (TRANS (@lem8313057 A B P z f g) (@lem8313061 A B P z f g)). Qed.
Lemma lem8313063 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8313064 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) (a : P) : (z f g a) = (term2424 A B P z f g a).
Proof. exact (MK_COMB (@lem8313062 A B P z f g) (@lem8313063 P a)). Qed.
Lemma lem8313066 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313067 {A P : Type'} (f : P -> A) (x : P) : (f x) = (@I (P -> A) f x).
Proof. exact (@lem8313066 P A f x). Qed.
Lemma lem8313068 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) (a : P) : (term2424 A B P z f g a) = (term2425 A B P z f g a).
Proof. exact (@lem8313067 A P (term2423 A B P z f g) a). Qed.
Lemma lem8313070 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) (a : P) : (z f g a) = (term2425 A B P z f g a).
Proof. exact (TRANS (@lem8313064 A B P z f g a) (@lem8313068 A B P z f g a)). Qed.
Lemma lem8313075 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313076 {A P : Type'} (f : P -> A) (x : P) : (f x) = (@I (P -> A) f x).
Proof. exact (@lem8313075 P A f x). Qed.
Lemma lem8313078 {A P : Type'} (s : P -> A) (a : P) : (s a) = (@I (P -> A) s a).
Proof. exact (@lem8313076 A P s a). Qed.
Lemma lem8313079 {A B P : Type'} (lt2 : type1402 A) (z : type518 A B P) (f : A -> B) (g : A -> B) (a : P) : (term2436 A B P lt2 z f g a) = (term2437 A B P lt2 z f g a).
Proof. exact (MK_COMB (@lem8313044 A lt2) (@lem8313070 A B P z f g a)). Qed.
Lemma lem8313080 {A B P : Type'} (lt2 : type1402 A) (z : type518 A B P) (f : A -> B) (g : A -> B) (s : P -> A) (a : P) : (term2438 A B P lt2 z f g s a) = (term2439 A B P lt2 z f g s a).
Proof. exact (MK_COMB (@lem8313079 A B P lt2 z f g a) (@lem8313078 A P s a)). Qed.
Lemma lem8313082 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313083 {A : Type'} (f : type1402 A) (x : A) : (f x) = (@I (A -> A -> Prop) f x).
Proof. exact (@lem8313082 A (A -> Prop) f x). Qed.
Lemma lem8313084 {A B P : Type'} (lt2 : type1402 A) (z : type518 A B P) (f : A -> B) (g : A -> B) (a : P) : (term2437 A B P lt2 z f g a) = (term2440 A B P lt2 z f g a).
Proof. exact (@lem8313083 A lt2 (term2425 A B P z f g a)). Qed.
Lemma lem8313085 {A P : Type'} (s : P -> A) (a : P) : (@I (P -> A) s a) = (@I (P -> A) s a).
Proof. exact (eq_refl (@I (P -> A) s a)). Qed.
Lemma lem8313086 {A B P : Type'} (lt2 : type1402 A) (z : type518 A B P) (f : A -> B) (g : A -> B) (s : P -> A) (a : P) : (term2439 A B P lt2 z f g s a) = (term2441 A B P lt2 z f g s a).
Proof. exact (MK_COMB (@lem8313084 A B P lt2 z f g a) (@lem8313085 A P s a)). Qed.
Lemma lem8313088 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313089 {A : Type'} (f : A -> Prop) (x : A) : (f x) = (@I (A -> Prop) f x).
Proof. exact (@lem8313088 A Prop f x). Qed.
Lemma lem8313090 {A B P : Type'} (lt2 : type1402 A) (z : type518 A B P) (f : A -> B) (g : A -> B) (s : P -> A) (a : P) : (term2441 A B P lt2 z f g s a) = (term2442 A B P lt2 z f g s a).
Proof. exact (@lem8313089 A (term2440 A B P lt2 z f g a) (@I (P -> A) s a)). Qed.
Lemma lem8313091 {A B P : Type'} (lt2 : type1402 A) (z : type518 A B P) (f : A -> B) (g : A -> B) (s : P -> A) (a : P) : (term2439 A B P lt2 z f g s a) = (term2442 A B P lt2 z f g s a).
Proof. exact (TRANS (@lem8313086 A B P lt2 z f g s a) (@lem8313090 A B P lt2 z f g s a)). Qed.
Lemma lem8313092 {A B P : Type'} (lt2 : type1402 A) (z : type518 A B P) (f : A -> B) (g : A -> B) (s : P -> A) (a : P) : (term2438 A B P lt2 z f g s a) = (term2442 A B P lt2 z f g s a).
Proof. exact (TRANS (@lem8313080 A B P lt2 z f g s a) (@lem8313091 A B P lt2 z f g s a)). Qed.
Lemma lem8313093 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8313094 {A B P : Type'} (lt2 : type1402 A) (z : type518 A B P) (f : A -> B) (g : A -> B) (s : P -> A) (a : P) : (term2443 A B P lt2 z f g s a) = (term2444 A B P lt2 z f g s a).
Proof. exact (MK_COMB (@lem8313093) (@lem8313092 A B P lt2 z f g s a)). Qed.
Lemma lem8313095 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (g : A -> B) (a : P) : (term2445 A B P lt2 s z f g a) = (term2446 A B P lt2 s z f g a).
Proof. exact (MK_COMB (@lem8313094 A B P lt2 z f g s a) (@lem8313043 A B P z f g a)). Qed.
Lemma lem8313096 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8313097 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (g : A -> B) (a : P) : (term2447 A B P lt2 s z f g a) = (term2448 A B P lt2 s z f g a).
Proof. exact (MK_COMB (@lem8313096) (@lem8313095 A B P lt2 s z f g a)). Qed.
Lemma lem8313098 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term2449 A B P lt2 s z f p g a) = (term2450 A B P lt2 s z f p g a).
Proof. exact (MK_COMB (@lem8313097 A B P lt2 s z f g a) (@lem8312972 A B P f p g a)). Qed.
Lemma lem8313099 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term2451 A B P lt2 s z f p g) = (term2452 A B P lt2 s z f p g).
Proof. exact (fun_ext (fun a : P => @lem8313098 A B P lt2 s z f p g a)). Qed.
Lemma lem8313100 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8313101 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term2453 A B P lt2 s z f p g) = (term2454 A B P lt2 s z f p g).
Proof. exact (MK_COMB (@lem8313100 P) (@lem8313099 A B P lt2 s z f p g)). Qed.
Lemma lem8313102 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) : (term2455 A B P lt2 s z f p) = (term2456 A B P lt2 s z f p).
Proof. exact (fun_ext (fun g : A -> B => @lem8313101 A B P lt2 s z f p g)). Qed.
Lemma lem8313103 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8313104 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) : (term1885 A B P lt2 s z f p) = (term2457 A B P lt2 s z f p).
Proof. exact (MK_COMB (@lem8313103 A B) (@lem8313102 A B P lt2 s z f p)). Qed.
Lemma lem8313105 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) : (term1887 A B P lt2 s z p) = (term2458 A B P lt2 s z p).
Proof. exact (fun_ext (fun f : A -> B => @lem8313104 A B P lt2 s z f p)). Qed.
Lemma lem8313106 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8313107 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) : (term1889 A B P lt2 s z p) = (term2459 A B P lt2 s z p).
Proof. exact (MK_COMB (@lem8313106 A B) (@lem8313105 A B P lt2 s z p)). Qed.
Lemma lem8313108 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2459 A B P lt2 s z p.
Proof. exact (EQ_MP (@lem8313107 A B P lt2 s z p) (@lem8312059 A B P lt2 s z p h1)). Qed.
Lemma lem8313109 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8313110 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8313125 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313126 {A B D P Q : Type'} (f : type905 A B D P Q) (x : Q -> D) : (f x) = (@I ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> Q) f x).
Proof. exact (@lem8313125 (Q -> D) (type898 A B D P Q) f x). Qed.
Lemma lem8313127 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) : (t'' pat) = (@I ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> Q) t'' pat).
Proof. exact (@lem8313126 A B D P Q t'' pat). Qed.
Lemma lem8313128 {D P : Type'} (e : P -> D) : e = e.
Proof. exact (eq_refl e). Qed.
Lemma lem8313129 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) : (t'' pat e) = (@I ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> Q) t'' pat e).
Proof. exact (MK_COMB (@lem8313127 A B D P Q t'' pat) (@lem8313128 D P e)). Qed.
Lemma lem8313131 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313132 {A B D P Q : Type'} (f : type898 A B D P Q) (x : P -> D) : (f x) = (@I ((P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> Q) f x).
Proof. exact (@lem8313131 (P -> D) (type535 A B P Q) f x). Qed.
Lemma lem8313133 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) : (@I ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> Q) t'' pat e) = (term2460 A B D P Q t'' pat e).
Proof. exact (@lem8313132 A B D P Q (@I ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> Q) t'' pat) e). Qed.
Lemma lem8313134 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) : (t'' pat e) = (term2460 A B D P Q t'' pat e).
Proof. exact (TRANS (@lem8313129 A B D P Q t'' pat e) (@lem8313133 A B D P Q t'' pat e)). Qed.
Lemma lem8313135 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8313136 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (t'' pat e f) = (term2461 A B D P Q t'' pat e f).
Proof. exact (MK_COMB (@lem8313134 A B D P Q t'' pat e) (@lem8313135 A B f)). Qed.
Lemma lem8313138 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313139 {A B P Q : Type'} (f : type535 A B P Q) (x : A -> B) : (f x) = (@I ((A -> B) -> (P -> Q -> A) -> P -> Q) f x).
Proof. exact (@lem8313138 (A -> B) (type765 A P Q) f x). Qed.
Lemma lem8313140 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term2461 A B D P Q t'' pat e f) = (term2462 A B D P Q t'' pat e f).
Proof. exact (@lem8313139 A B P Q (term2460 A B D P Q t'' pat e) f). Qed.
Lemma lem8313141 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (t'' pat e f) = (term2462 A B D P Q t'' pat e f).
Proof. exact (TRANS (@lem8313136 A B D P Q t'' pat e f) (@lem8313140 A B D P Q t'' pat e f)). Qed.
Lemma lem8313142 {A P Q : Type'} (arg : type1475 A P Q) : arg = arg.
Proof. exact (eq_refl arg). Qed.
Lemma lem8313143 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (t'' pat e f arg) = (term2463 A B D P Q t'' pat e f arg).
Proof. exact (MK_COMB (@lem8313141 A B D P Q t'' pat e f) (@lem8313142 A P Q arg)). Qed.
Lemma lem8313145 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313146 {A P Q : Type'} (f : type765 A P Q) (x : type1475 A P Q) : (f x) = (@I ((P -> Q -> A) -> P -> Q) f x).
Proof. exact (@lem8313145 (type1475 A P Q) (P -> Q) f x). Qed.
Lemma lem8313147 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term2463 A B D P Q t'' pat e f arg) = (term2464 A B D P Q t'' pat e f arg).
Proof. exact (@lem8313146 A P Q (term2462 A B D P Q t'' pat e f) arg). Qed.
Lemma lem8313148 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (t'' pat e f arg) = (term2464 A B D P Q t'' pat e f arg).
Proof. exact (TRANS (@lem8313143 A B D P Q t'' pat e f arg) (@lem8313147 A B D P Q t'' pat e f arg)). Qed.
Lemma lem8313149 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8313150 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (t'' pat e f arg a) = (term2465 A B D P Q t'' pat e f arg a).
Proof. exact (MK_COMB (@lem8313148 A B D P Q t'' pat e f arg) (@lem8313149 P a)). Qed.
Lemma lem8313152 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313153 {P Q : Type'} (f : P -> Q) (x : P) : (f x) = (@I (P -> Q) f x).
Proof. exact (@lem8313152 P Q f x). Qed.
Lemma lem8313154 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2465 A B D P Q t'' pat e f arg a) = (term2466 A B D P Q t'' pat e f arg a).
Proof. exact (@lem8313153 P Q (term2464 A B D P Q t'' pat e f arg) a). Qed.
Lemma lem8313156 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (t'' pat e f arg a) = (term2466 A B D P Q t'' pat e f arg a).
Proof. exact (TRANS (@lem8313150 A B D P Q t'' pat e f arg a) (@lem8313154 A B D P Q t'' pat e f arg a)). Qed.
Lemma lem8313157 {A P Q : Type'} (arg : type1475 A P Q) (a : P) : (arg a) = (arg a).
Proof. exact (eq_refl (arg a)). Qed.
Lemma lem8313158 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2467 A B D P Q t'' pat e f arg a) = (term2468 A B D P Q t'' pat e f arg a).
Proof. exact (MK_COMB (@lem8313157 A P Q arg a) (@lem8313156 A B D P Q t'' pat e f arg a)). Qed.
Lemma lem8313160 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313161 {A P Q : Type'} (f : type1475 A P Q) (x : P) : (f x) = (@I (P -> Q -> A) f x).
Proof. exact (@lem8313160 P (Q -> A) f x). Qed.
Lemma lem8313162 {A P Q : Type'} (arg : type1475 A P Q) (a : P) : (arg a) = (@I (P -> Q -> A) arg a).
Proof. exact (@lem8313161 A P Q arg a). Qed.
Lemma lem8313163 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2466 A B D P Q t'' pat e f arg a) = (term2466 A B D P Q t'' pat e f arg a).
Proof. exact (eq_refl (term2466 A B D P Q t'' pat e f arg a)). Qed.
Lemma lem8313164 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2468 A B D P Q t'' pat e f arg a) = (term2469 A B D P Q t'' pat e f arg a).
Proof. exact (MK_COMB (@lem8313162 A P Q arg a) (@lem8313163 A B D P Q t'' pat e f arg a)). Qed.
Lemma lem8313166 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313167 {A Q : Type'} (f : Q -> A) (x : Q) : (f x) = (@I (Q -> A) f x).
Proof. exact (@lem8313166 Q A f x). Qed.
Lemma lem8313168 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2469 A B D P Q t'' pat e f arg a) = (term2470 A B D P Q t'' pat e f arg a).
Proof. exact (@lem8313167 A Q (@I (P -> Q -> A) arg a) (term2466 A B D P Q t'' pat e f arg a)). Qed.
Lemma lem8313169 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2468 A B D P Q t'' pat e f arg a) = (term2470 A B D P Q t'' pat e f arg a).
Proof. exact (TRANS (@lem8313164 A B D P Q t'' pat e f arg a) (@lem8313168 A B D P Q t'' pat e f arg a)). Qed.
Lemma lem8313170 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2467 A B D P Q t'' pat e f arg a) = (term2470 A B D P Q t'' pat e f arg a).
Proof. exact (TRANS (@lem8313158 A B D P Q t'' pat e f arg a) (@lem8313169 A B D P Q t'' pat e f arg a)). Qed.
Lemma lem8313171 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2471 A B D P Q t'' pat e f arg a) = (term2472 A B D P Q t'' pat e f arg a).
Proof. exact (MK_COMB (@lem8313110 A B f) (@lem8313170 A B D P Q t'' pat e f arg a)). Qed.
Lemma lem8313173 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313174 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (@lem8313173 A B f x). Qed.
Lemma lem8313175 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2472 A B D P Q t'' pat e f arg a) = (term2473 A B D P Q t'' pat e f arg a).
Proof. exact (@lem8313174 A B f (term2470 A B D P Q t'' pat e f arg a)). Qed.
Lemma lem8313176 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2471 A B D P Q t'' pat e f arg a) = (term2473 A B D P Q t'' pat e f arg a).
Proof. exact (TRANS (@lem8313171 A B D P Q t'' pat e f arg a) (@lem8313175 A B D P Q t'' pat e f arg a)). Qed.
Lemma lem8313189 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313190 {A B D P Q : Type'} (f : type904 A B D P Q) (x : Q -> D) : (f x) = (@I ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> B) f x).
Proof. exact (@lem8313189 (Q -> D) (type897 A B D P Q) f x). Qed.
Lemma lem8313191 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) : (_111929 pat) = (@I ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> B) _111929 pat).
Proof. exact (@lem8313190 A B D P Q _111929 pat). Qed.
Lemma lem8313192 {D P : Type'} (e : P -> D) : e = e.
Proof. exact (eq_refl e). Qed.
Lemma lem8313193 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (_111929 pat e) = (@I ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> B) _111929 pat e).
Proof. exact (MK_COMB (@lem8313191 A B D P Q _111929 pat) (@lem8313192 D P e)). Qed.
Lemma lem8313195 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313196 {A B D P Q : Type'} (f : type897 A B D P Q) (x : P -> D) : (f x) = (@I ((P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> B) f x).
Proof. exact (@lem8313195 (P -> D) (type534 A B P Q) f x). Qed.
Lemma lem8313197 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (@I ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> B) _111929 pat e) = (term2368 A B D P Q _111929 pat e).
Proof. exact (@lem8313196 A B D P Q (@I ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> B) _111929 pat) e). Qed.
Lemma lem8313198 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (_111929 pat e) = (term2368 A B D P Q _111929 pat e).
Proof. exact (TRANS (@lem8313193 A B D P Q _111929 pat e) (@lem8313197 A B D P Q _111929 pat e)). Qed.
Lemma lem8313199 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8313200 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (_111929 pat e f) = (term2369 A B D P Q _111929 pat e f).
Proof. exact (MK_COMB (@lem8313198 A B D P Q _111929 pat e) (@lem8313199 A B f)). Qed.
Lemma lem8313202 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313203 {A B P Q : Type'} (f : type534 A B P Q) (x : A -> B) : (f x) = (@I ((A -> B) -> (P -> Q -> A) -> P -> B) f x).
Proof. exact (@lem8313202 (A -> B) (type878 A B P Q) f x). Qed.
Lemma lem8313204 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term2369 A B D P Q _111929 pat e f) = (term2370 A B D P Q _111929 pat e f).
Proof. exact (@lem8313203 A B P Q (term2368 A B D P Q _111929 pat e) f). Qed.
Lemma lem8313205 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (_111929 pat e f) = (term2370 A B D P Q _111929 pat e f).
Proof. exact (TRANS (@lem8313200 A B D P Q _111929 pat e f) (@lem8313204 A B D P Q _111929 pat e f)). Qed.
Lemma lem8313206 {A P Q : Type'} (arg : type1475 A P Q) : arg = arg.
Proof. exact (eq_refl arg). Qed.
Lemma lem8313207 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (_111929 pat e f arg) = (term2371 A B D P Q _111929 pat e f arg).
Proof. exact (MK_COMB (@lem8313205 A B D P Q _111929 pat e f) (@lem8313206 A P Q arg)). Qed.
Lemma lem8313209 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313210 {A B P Q : Type'} (f : type878 A B P Q) (x : type1475 A P Q) : (f x) = (@I ((P -> Q -> A) -> P -> B) f x).
Proof. exact (@lem8313209 (type1475 A P Q) (P -> B) f x). Qed.
Lemma lem8313211 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term2371 A B D P Q _111929 pat e f arg) = (term2372 A B D P Q _111929 pat e f arg).
Proof. exact (@lem8313210 A B P Q (term2370 A B D P Q _111929 pat e f) arg). Qed.
Lemma lem8313212 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (_111929 pat e f arg) = (term2372 A B D P Q _111929 pat e f arg).
Proof. exact (TRANS (@lem8313207 A B D P Q _111929 pat e f arg) (@lem8313211 A B D P Q _111929 pat e f arg)). Qed.
Lemma lem8313213 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8313214 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (_111929 pat e f arg a) = (term2373 A B D P Q _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8313212 A B D P Q _111929 pat e f arg) (@lem8313213 P a)). Qed.
Lemma lem8313216 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313217 {B P : Type'} (f : P -> B) (x : P) : (f x) = (@I (P -> B) f x).
Proof. exact (@lem8313216 P B f x). Qed.
Lemma lem8313218 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2373 A B D P Q _111929 pat e f arg a) = (term2374 A B D P Q _111929 pat e f arg a).
Proof. exact (@lem8313217 B P (term2372 A B D P Q _111929 pat e f arg) a). Qed.
Lemma lem8313220 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (_111929 pat e f arg a) = (term2374 A B D P Q _111929 pat e f arg a).
Proof. exact (TRANS (@lem8313214 A B D P Q _111929 pat e f arg a) (@lem8313218 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8313221 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2474 A B D P Q t'' pat e f arg a) = (term2475 A B D P Q t'' pat e f arg a).
Proof. exact (MK_COMB (@lem8313109 B) (@lem8313176 A B D P Q t'' pat e f arg a)). Qed.
Lemma lem8313222 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : ((term2471 A B D P Q t'' pat e f arg a) = (_111929 pat e f arg a)) = ((term2473 A B D P Q t'' pat e f arg a) = (term2374 A B D P Q _111929 pat e f arg a)).
Proof. exact (MK_COMB (@lem8313221 A B D P Q t'' pat e f arg a) (@lem8313220 A B D P Q _111929 pat e f arg a)). Qed.
Lemma lem8313223 {D : Type'} : (@eq D) = (@eq D).
Proof. exact (eq_refl (@eq D)). Qed.
Lemma lem8313224 {D Q : Type'} (pat : Q -> D) : pat = pat.
Proof. exact (eq_refl pat). Qed.
Lemma lem8313237 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313238 {A B D P Q : Type'} (f : type905 A B D P Q) (x : Q -> D) : (f x) = (@I ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> Q) f x).
Proof. exact (@lem8313237 (Q -> D) (type898 A B D P Q) f x). Qed.
Lemma lem8313239 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) : (t'' pat) = (@I ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> Q) t'' pat).
Proof. exact (@lem8313238 A B D P Q t'' pat). Qed.
Lemma lem8313240 {D P : Type'} (e : P -> D) : e = e.
Proof. exact (eq_refl e). Qed.
Lemma lem8313241 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) : (t'' pat e) = (@I ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> Q) t'' pat e).
Proof. exact (MK_COMB (@lem8313239 A B D P Q t'' pat) (@lem8313240 D P e)). Qed.
Lemma lem8313243 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313244 {A B D P Q : Type'} (f : type898 A B D P Q) (x : P -> D) : (f x) = (@I ((P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> Q) f x).
Proof. exact (@lem8313243 (P -> D) (type535 A B P Q) f x). Qed.
Lemma lem8313245 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) : (@I ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> Q) t'' pat e) = (term2460 A B D P Q t'' pat e).
Proof. exact (@lem8313244 A B D P Q (@I ((Q -> D) -> (P -> D) -> (A -> B) -> (P -> Q -> A) -> P -> Q) t'' pat) e). Qed.
Lemma lem8313246 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) : (t'' pat e) = (term2460 A B D P Q t'' pat e).
Proof. exact (TRANS (@lem8313241 A B D P Q t'' pat e) (@lem8313245 A B D P Q t'' pat e)). Qed.
Lemma lem8313247 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8313248 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (t'' pat e f) = (term2461 A B D P Q t'' pat e f).
Proof. exact (MK_COMB (@lem8313246 A B D P Q t'' pat e) (@lem8313247 A B f)). Qed.
Lemma lem8313250 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313251 {A B P Q : Type'} (f : type535 A B P Q) (x : A -> B) : (f x) = (@I ((A -> B) -> (P -> Q -> A) -> P -> Q) f x).
Proof. exact (@lem8313250 (A -> B) (type765 A P Q) f x). Qed.
Lemma lem8313252 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term2461 A B D P Q t'' pat e f) = (term2462 A B D P Q t'' pat e f).
Proof. exact (@lem8313251 A B P Q (term2460 A B D P Q t'' pat e) f). Qed.
Lemma lem8313253 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (t'' pat e f) = (term2462 A B D P Q t'' pat e f).
Proof. exact (TRANS (@lem8313248 A B D P Q t'' pat e f) (@lem8313252 A B D P Q t'' pat e f)). Qed.
Lemma lem8313254 {A P Q : Type'} (arg : type1475 A P Q) : arg = arg.
Proof. exact (eq_refl arg). Qed.
Lemma lem8313255 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (t'' pat e f arg) = (term2463 A B D P Q t'' pat e f arg).
Proof. exact (MK_COMB (@lem8313253 A B D P Q t'' pat e f) (@lem8313254 A P Q arg)). Qed.
Lemma lem8313257 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313258 {A P Q : Type'} (f : type765 A P Q) (x : type1475 A P Q) : (f x) = (@I ((P -> Q -> A) -> P -> Q) f x).
Proof. exact (@lem8313257 (type1475 A P Q) (P -> Q) f x). Qed.
Lemma lem8313259 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term2463 A B D P Q t'' pat e f arg) = (term2464 A B D P Q t'' pat e f arg).
Proof. exact (@lem8313258 A P Q (term2462 A B D P Q t'' pat e f) arg). Qed.
Lemma lem8313260 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (t'' pat e f arg) = (term2464 A B D P Q t'' pat e f arg).
Proof. exact (TRANS (@lem8313255 A B D P Q t'' pat e f arg) (@lem8313259 A B D P Q t'' pat e f arg)). Qed.
Lemma lem8313261 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8313262 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (t'' pat e f arg a) = (term2465 A B D P Q t'' pat e f arg a).
Proof. exact (MK_COMB (@lem8313260 A B D P Q t'' pat e f arg) (@lem8313261 P a)). Qed.
Lemma lem8313264 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313265 {P Q : Type'} (f : P -> Q) (x : P) : (f x) = (@I (P -> Q) f x).
Proof. exact (@lem8313264 P Q f x). Qed.
Lemma lem8313266 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2465 A B D P Q t'' pat e f arg a) = (term2466 A B D P Q t'' pat e f arg a).
Proof. exact (@lem8313265 P Q (term2464 A B D P Q t'' pat e f arg) a). Qed.
Lemma lem8313268 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (t'' pat e f arg a) = (term2466 A B D P Q t'' pat e f arg a).
Proof. exact (TRANS (@lem8313262 A B D P Q t'' pat e f arg a) (@lem8313266 A B D P Q t'' pat e f arg a)). Qed.
Lemma lem8313269 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2476 A B D P Q t'' pat e f arg a) = (term2477 A B D P Q t'' pat e f arg a).
Proof. exact (MK_COMB (@lem8313224 D Q pat) (@lem8313268 A B D P Q t'' pat e f arg a)). Qed.
Lemma lem8313271 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313272 {D Q : Type'} (f : Q -> D) (x : Q) : (f x) = (@I (Q -> D) f x).
Proof. exact (@lem8313271 Q D f x). Qed.
Lemma lem8313273 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2477 A B D P Q t'' pat e f arg a) = (term2478 A B D P Q t'' pat e f arg a).
Proof. exact (@lem8313272 D Q pat (term2466 A B D P Q t'' pat e f arg a)). Qed.
Lemma lem8313274 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2476 A B D P Q t'' pat e f arg a) = (term2478 A B D P Q t'' pat e f arg a).
Proof. exact (TRANS (@lem8313269 A B D P Q t'' pat e f arg a) (@lem8313273 A B D P Q t'' pat e f arg a)). Qed.
Lemma lem8313279 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313280 {D P : Type'} (f : P -> D) (x : P) : (f x) = (@I (P -> D) f x).
Proof. exact (@lem8313279 P D f x). Qed.
Lemma lem8313282 {D P : Type'} (e : P -> D) (a : P) : (e a) = (@I (P -> D) e a).
Proof. exact (@lem8313280 D P e a). Qed.
Lemma lem8313283 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2479 A B D P Q t'' pat e f arg a) = (term2480 A B D P Q t'' pat e f arg a).
Proof. exact (MK_COMB (@lem8313223 D) (@lem8313274 A B D P Q t'' pat e f arg a)). Qed.
Lemma lem8313284 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (f : A -> B) (arg : type1475 A P Q) (e : P -> D) (a : P) : ((term2476 A B D P Q t'' pat e f arg a) = (e a)) = ((term2478 A B D P Q t'' pat e f arg a) = (@I (P -> D) e a)).
Proof. exact (MK_COMB (@lem8313283 A B D P Q t'' pat e f arg a) (@lem8313282 D P e a)). Qed.
Lemma lem8313285 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8313286 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (f : A -> B) (arg : type1475 A P Q) (e : P -> D) (a : P) : (term2481 A B D P Q t'' pat f arg e a) = (term2482 A B D P Q t'' pat f arg e a).
Proof. exact (MK_COMB (@lem8313285) (@lem8313284 A B D P Q t'' pat f arg e a)). Qed.
Lemma lem8313287 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2483 A B D P Q t'' _111929 pat e f arg a) = (term2484 A B D P Q t'' _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8313286 A B D P Q t'' pat f arg e a) (@lem8313222 A B D P Q t'' _111929 pat e f arg a)). Qed.
Lemma lem8313288 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8313289 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8313290 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8313297 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313298 {A P Q : Type'} (f : type1475 A P Q) (x : P) : (f x) = (@I (P -> Q -> A) f x).
Proof. exact (@lem8313297 P (Q -> A) f x). Qed.
Lemma lem8313299 {A P Q : Type'} (arg : type1475 A P Q) (a : P) : (arg a) = (@I (P -> Q -> A) arg a).
Proof. exact (@lem8313298 A P Q arg a). Qed.
Lemma lem8313300 {Q : Type'} (t : Q) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8313301 {A P Q : Type'} (arg : type1475 A P Q) (a : P) (t : Q) : (arg a t) = (@I (P -> Q -> A) arg a t).
Proof. exact (MK_COMB (@lem8313299 A P Q arg a) (@lem8313300 Q t)). Qed.
Lemma lem8313303 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313304 {A Q : Type'} (f : Q -> A) (x : Q) : (f x) = (@I (Q -> A) f x).
Proof. exact (@lem8313303 Q A f x). Qed.
Lemma lem8313305 {A P Q : Type'} (arg : type1475 A P Q) (a : P) (t : Q) : (@I (P -> Q -> A) arg a t) = (term2330 A P Q arg a t).
Proof. exact (@lem8313304 A Q (@I (P -> Q -> A) arg a) t). Qed.
Lemma lem8313307 {A P Q : Type'} (arg : type1475 A P Q) (a : P) (t : Q) : (arg a t) = (term2330 A P Q arg a t).
Proof. exact (TRANS (@lem8313301 A P Q arg a t) (@lem8313305 A P Q arg a t)). Qed.
Lemma lem8313308 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (a : P) (t : Q) : (term67 A B P Q f arg a t) = (term2485 A B P Q f arg a t).
Proof. exact (MK_COMB (@lem8313290 A B f) (@lem8313307 A P Q arg a t)). Qed.
Lemma lem8313310 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313311 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (@lem8313310 A B f x). Qed.
Lemma lem8313312 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (a : P) (t : Q) : (term2485 A B P Q f arg a t) = (term2486 A B P Q f arg a t).
Proof. exact (@lem8313311 A B f (term2330 A P Q arg a t)). Qed.
Lemma lem8313313 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (a : P) (t : Q) : (term67 A B P Q f arg a t) = (term2486 A B P Q f arg a t).
Proof. exact (TRANS (@lem8313308 A B P Q f arg a t) (@lem8313312 A B P Q f arg a t)). Qed.
Lemma lem8313314 {B : Type'} (x : B) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8313315 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (a : P) (t : Q) : (term880 A B P Q f arg a t) = (term2487 A B P Q f arg a t).
Proof. exact (MK_COMB (@lem8313289 B) (@lem8313313 A B P Q f arg a t)). Qed.
Lemma lem8313316 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (a : P) (t : Q) (x : B) : ((term67 A B P Q f arg a t) = x) = ((term2486 A B P Q f arg a t) = x).
Proof. exact (MK_COMB (@lem8313315 A B P Q f arg a t) (@lem8313314 B x)). Qed.
Lemma lem8313317 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (a : P) (t : Q) (x : B) : (term887 A B P Q f arg a t x) = (term2488 A B P Q f arg a t x).
Proof. exact (MK_COMB (@lem8313288) (@lem8313316 A B P Q f arg a t x)). Qed.
Lemma lem8313318 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8313319 {D : Type'} : (@eq D) = (@eq D).
Proof. exact (eq_refl (@eq D)). Qed.
Lemma lem8313324 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313325 {D Q : Type'} (f : Q -> D) (x : Q) : (f x) = (@I (Q -> D) f x).
Proof. exact (@lem8313324 Q D f x). Qed.
Lemma lem8313327 {D Q : Type'} (pat : Q -> D) (t : Q) : (pat t) = (@I (Q -> D) pat t).
Proof. exact (@lem8313325 D Q pat t). Qed.
Lemma lem8313332 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8313333 {D P : Type'} (f : P -> D) (x : P) : (f x) = (@I (P -> D) f x).
Proof. exact (@lem8313332 P D f x). Qed.
Lemma lem8313335 {D P : Type'} (e : P -> D) (a : P) : (e a) = (@I (P -> D) e a).
Proof. exact (@lem8313333 D P e a). Qed.
Lemma lem8313336 {D Q : Type'} (pat : Q -> D) (t : Q) : (term2317 D Q pat t) = (term2318 D Q pat t).
Proof. exact (MK_COMB (@lem8313319 D) (@lem8313327 D Q pat t)). Qed.
Lemma lem8313337 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : ((pat t) = (e a)) = ((@I (Q -> D) pat t) = (@I (P -> D) e a)).
Proof. exact (MK_COMB (@lem8313336 D Q pat t) (@lem8313335 D P e a)). Qed.
Lemma lem8313338 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term474 D P Q pat t e a) = (term2319 D P Q pat t e a).
Proof. exact (MK_COMB (@lem8313318) (@lem8313337 D P Q pat t e a)). Qed.
Lemma lem8313339 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8313340 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term889 D P Q pat t e a) = (term2333 D P Q pat t e a).
Proof. exact (MK_COMB (@lem8313339) (@lem8313338 D P Q pat t e a)). Qed.
Lemma lem8313341 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (t : Q) (x : B) : (term411 A B D P Q pat e f arg a t x) = (term2489 A B D P Q pat e f arg a t x).
Proof. exact (MK_COMB (@lem8313340 D P Q pat t e a) (@lem8313317 A B P Q f arg a t x)). Qed.
Lemma lem8313342 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (x : B) : (term419 A B D P Q pat e f arg a x) = (term2490 A B D P Q pat e f arg a x).
Proof. exact (fun_ext (fun t : Q => @lem8313341 A B D P Q pat e f arg a t x)). Qed.
Lemma lem8313343 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8313344 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (x : B) : (term420 A B D P Q pat e f arg a x) = (term2491 A B D P Q pat e f arg a x).
Proof. exact (MK_COMB (@lem8313343 Q) (@lem8313342 A B D P Q pat e f arg a x)). Qed.
Lemma lem8313345 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term465 A B D P Q pat e f arg a) = (term2492 A B D P Q pat e f arg a).
Proof. exact (fun_ext (fun x : B => @lem8313344 A B D P Q pat e f arg a x)). Qed.
Lemma lem8313346 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8313347 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term467 A B D P Q pat e f arg a) = (term2493 A B D P Q pat e f arg a).
Proof. exact (MK_COMB (@lem8313346 B) (@lem8313345 A B D P Q pat e f arg a)). Qed.
Lemma lem8313348 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8313349 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term469 A B D P Q pat e f arg a) = (term2494 A B D P Q pat e f arg a).
Proof. exact (MK_COMB (@lem8313348) (@lem8313347 A B D P Q pat e f arg a)). Qed.
Lemma lem8313350 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2495 A B D P Q t'' _111929 pat e f arg a) = (term2496 A B D P Q t'' _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8313349 A B D P Q pat e f arg a) (@lem8313287 A B D P Q t'' _111929 pat e f arg a)). Qed.
Lemma lem8313351 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term2497 A B D P Q t'' _111929 pat e f arg) = (term2498 A B D P Q t'' _111929 pat e f arg).
Proof. exact (fun_ext (fun a : P => @lem8313350 A B D P Q t'' _111929 pat e f arg a)). Qed.
Lemma lem8313352 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8313353 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term2499 A B D P Q t'' _111929 pat e f arg) = (term2500 A B D P Q t'' _111929 pat e f arg).
Proof. exact (MK_COMB (@lem8313352 P) (@lem8313351 A B D P Q t'' _111929 pat e f arg)). Qed.
Lemma lem8313354 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term2501 A B D P Q t'' _111929 pat e f) = (term2502 A B D P Q t'' _111929 pat e f).
Proof. exact (fun_ext (fun arg : type1475 A P Q => @lem8313353 A B D P Q t'' _111929 pat e f arg)). Qed.
Lemma lem8313355 {A P Q : Type'} : (@all (P -> Q -> A)) = (@all (P -> Q -> A)).
Proof. exact (eq_refl (@all (P -> Q -> A))). Qed.
Lemma lem8313356 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term2503 A B D P Q t'' _111929 pat e f) = (term2504 A B D P Q t'' _111929 pat e f).
Proof. exact (MK_COMB (@lem8313355 A P Q) (@lem8313354 A B D P Q t'' _111929 pat e f)). Qed.
Lemma lem8313357 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term2505 A B D P Q t'' _111929 pat e) = (term2506 A B D P Q t'' _111929 pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8313356 A B D P Q t'' _111929 pat e f)). Qed.
Lemma lem8313358 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8313359 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term2507 A B D P Q t'' _111929 pat e) = (term2508 A B D P Q t'' _111929 pat e).
Proof. exact (MK_COMB (@lem8313358 A B) (@lem8313357 A B D P Q t'' _111929 pat e)). Qed.
Lemma lem8313360 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) : (term2509 A B D P Q t'' _111929 pat) = (term2510 A B D P Q t'' _111929 pat).
Proof. exact (fun_ext (fun e : P -> D => @lem8313359 A B D P Q t'' _111929 pat e)). Qed.
Lemma lem8313361 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8313362 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) : (term1727 A B D P Q t'' _111929 pat) = (term2511 A B D P Q t'' _111929 pat).
Proof. exact (MK_COMB (@lem8313361 D P) (@lem8313360 A B D P Q t'' _111929 pat)). Qed.
Lemma lem8313363 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) : (term1729 A B D P Q t'' _111929) = (term2512 A B D P Q t'' _111929).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8313362 A B D P Q t'' _111929 pat)). Qed.
Lemma lem8313364 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8313365 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) : (term1731 A B D P Q t'' _111929) = (term2513 A B D P Q t'' _111929).
Proof. exact (MK_COMB (@lem8313364 D Q) (@lem8313363 A B D P Q t'' _111929)). Qed.
Lemma lem8313366 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2513 A B D P Q t'' _111929.
Proof. exact (EQ_MP (@lem8313365 A B D P Q t'' _111929) (@lem8312060 A B D P Q t'' _111929 h1)). Qed.
Lemma lem8313367 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a.
Proof. exact (h1). Qed.
Lemma lem8313368 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (g : A -> B) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2405 A B D P Q lt2 s g t' p _111929 f arg _111928 pat e a') : term2405 A B D P Q lt2 s g t' p _111929 f arg _111928 pat e a'.
Proof. exact (h1). Qed.
Lemma lem8313370 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : term2409 A B D P Q p f t lt2 y arg _111928 pat e a.
Proof. exact (proj1 (@lem8313367 A B D P Q p f t arg _111928 pat e lt2 y s a h1)). Qed.
Lemma lem8313372 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : term2386 A B D P Q p f pat t e a.
Proof. exact (proj1 (@lem8313370 A B D P Q p f t arg _111928 pat e lt2 y s a h1)). Qed.
Lemma lem8313375 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2403 A B D P Q lt2 s f p g pat t' e a') : term2403 A B D P Q lt2 s f p g pat t' e a'.
Proof. exact (h1). Qed.
Lemma lem8313376 {A B D P Q : Type'} (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : term2385 A B D P Q t' p _111929 f arg _111928 pat e a'.
Proof. exact (h1). Qed.
Lemma lem8313377 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2403 A B D P Q lt2 s f p g pat t' e a') : term2393 A B D P Q f p g pat t' e a'.
Proof. exact (proj2 (@lem8313375 A B D P Q lt2 s f p g pat t' e a' h1)). Qed.
Lemma lem8313378 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2403 A B D P Q lt2 s f p g pat t' e a') : term2401 A B P lt2 s a' f g.
Proof. exact (proj1 (@lem8313375 A B D P Q lt2 s f p g pat t' e a' h1)). Qed.
Lemma lem8313379 {A B D P Q : Type'} (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2391 A B D P Q f t' p g pat e a') : term2391 A B D P Q f t' p g pat e a'.
Proof. exact (h1). Qed.
Lemma lem8313380 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2389 A B D P Q f p g pat t' e a') : term2389 A B D P Q f p g pat t' e a'.
Proof. exact (h1). Qed.
Lemma lem8313381 {A B D P Q : Type'} (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2391 A B D P Q f t' p g pat e a') : term2387 A B D P Q p g pat e a'.
Proof. exact (proj2 (@lem8313379 A B D P Q f t' p g pat e a' h1)). Qed.
Lemma lem8313382 {A B D P Q : Type'} (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2391 A B D P Q f t' p g pat e a') : term2386 A B D P Q p f pat t' e a'.
Proof. exact (proj1 (@lem8313379 A B D P Q f t' p g pat e a' h1)). Qed.
Lemma lem8313386 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') : term2321 D P Q pat e a'.
Proof. exact (h1). Qed.
Lemma lem8313387 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2389 A B D P Q f p g pat t' e a') : term2386 A B D P Q p g pat t' e a'.
Proof. exact (proj2 (@lem8313380 A B D P Q f p g pat t' e a' h1)). Qed.
Lemma lem8313388 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2389 A B D P Q f p g pat t' e a') : term2387 A B D P Q p f pat e a'.
Proof. exact (proj1 (@lem8313380 A B D P Q f p g pat t' e a' h1)). Qed.
Lemma lem8313392 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') : term2321 D P Q pat e a'.
Proof. exact (h1). Qed.
Lemma lem8313393 {A B D P Q : Type'} (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : term2383 A B D P Q p _111929 f arg _111928 pat e a'.
Proof. exact (proj2 (@lem8313376 A B D P Q t' p _111929 f arg _111928 pat e a' h1)). Qed.
Lemma lem8313398 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1575 A P Q) = (term1574 A P Q).
Proof. exact (EQ_MP (@lem19013 A P Q) (@lem19012 A P Q)). Qed.
Lemma lem8313399 {Q : Type'} (P : Q -> Prop) (Q' : Prop) : (term1575 Q P Q') = (term1574 Q P Q').
Proof. exact (@lem8313398 Q P Q'). Qed.
Lemma lem8313400 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2514 D P Q _111928 pat e a) = (term2515 D P Q _111928 pat e a).
Proof. exact (@lem8313399 Q (term2320 D P Q pat e a) ((term2315 D P Q _111928 pat e a) = (@I (P -> D) e a))). Qed.
Lemma lem8313401 {D P Q : Type'} (pat : Q -> D) (x : Q) (e : P -> D) (a : P) : (term2516 D P Q pat e a x) = (term2319 D P Q pat x e a).
Proof. exact (eq_refl (term2516 D P Q pat e a x)). Qed.
Lemma lem8313402 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term2517 D P Q pat e a) = (term2320 D P Q pat e a).
Proof. exact (fun_ext (fun x : Q => @lem8313401 D P Q pat x e a)). Qed.
Lemma lem8313403 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8313404 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term2518 D P Q pat e a) = (term2321 D P Q pat e a).
Proof. exact (MK_COMB (@lem8313403 Q) (@lem8313402 D P Q pat e a)). Qed.
Lemma lem8313405 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8313406 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term2519 D P Q pat e a) = (term2322 D P Q pat e a).
Proof. exact (MK_COMB (@lem8313405) (@lem8313404 D P Q pat e a)). Qed.
Lemma lem8313407 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : ((term2315 D P Q _111928 pat e a) = (@I (P -> D) e a)) = ((term2315 D P Q _111928 pat e a) = (@I (P -> D) e a)).
Proof. exact (eq_refl ((term2315 D P Q _111928 pat e a) = (@I (P -> D) e a))). Qed.
Lemma lem8313408 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2514 D P Q _111928 pat e a) = (term2323 D P Q _111928 pat e a).
Proof. exact (MK_COMB (@lem8313406 D P Q pat e a) (@lem8313407 D P Q _111928 pat e a)). Qed.
Lemma lem8313409 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8313410 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2520 D P Q _111928 pat e a) = (term2521 D P Q _111928 pat e a).
Proof. exact (MK_COMB (@lem8313409) (@lem8313408 D P Q _111928 pat e a)). Qed.
Lemma lem8313411 {D P Q : Type'} (pat : Q -> D) (x : Q) (e : P -> D) (a : P) : (term2516 D P Q pat e a x) = (term2319 D P Q pat x e a).
Proof. exact (eq_refl (term2516 D P Q pat e a x)). Qed.
Lemma lem8313412 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8313413 {D P Q : Type'} (pat : Q -> D) (x : Q) (e : P -> D) (a : P) : (term2522 D P Q pat e a x) = (term2333 D P Q pat x e a).
Proof. exact (MK_COMB (@lem8313412) (@lem8313411 D P Q pat x e a)). Qed.
Lemma lem8313414 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : ((term2315 D P Q _111928 pat e a) = (@I (P -> D) e a)) = ((term2315 D P Q _111928 pat e a) = (@I (P -> D) e a)).
Proof. exact (eq_refl ((term2315 D P Q _111928 pat e a) = (@I (P -> D) e a))). Qed.
Lemma lem8313415 {D P Q : Type'} (x : Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2523 D P Q x _111928 pat e a) = (term2524 D P Q x _111928 pat e a).
Proof. exact (MK_COMB (@lem8313413 D P Q pat x e a) (@lem8313414 D P Q _111928 pat e a)). Qed.
Lemma lem8313416 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2525 D P Q _111928 pat e a) = (term2526 D P Q _111928 pat e a).
Proof. exact (fun_ext (fun x : Q => @lem8313415 D P Q x _111928 pat e a)). Qed.
Lemma lem8313417 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8313418 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2515 D P Q _111928 pat e a) = (term2527 D P Q _111928 pat e a).
Proof. exact (MK_COMB (@lem8313417 Q) (@lem8313416 D P Q _111928 pat e a)). Qed.
Lemma lem8313419 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : ((term2514 D P Q _111928 pat e a) = (term2515 D P Q _111928 pat e a)) = ((term2323 D P Q _111928 pat e a) = (term2527 D P Q _111928 pat e a)).
Proof. exact (MK_COMB (@lem8313410 D P Q _111928 pat e a) (@lem8313418 D P Q _111928 pat e a)). Qed.
Lemma lem8313420 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2323 D P Q _111928 pat e a) = (term2527 D P Q _111928 pat e a).
Proof. exact (EQ_MP (@lem8313419 D P Q _111928 pat e a) (@lem8313400 D P Q _111928 pat e a)). Qed.
Lemma lem8313421 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2324 D P Q _111928 pat e) = (term2528 D P Q _111928 pat e).
Proof. exact (fun_ext (fun a : P => @lem8313420 D P Q _111928 pat e a)). Qed.
Lemma lem8313422 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8313423 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2325 D P Q _111928 pat e) = (term2529 D P Q _111928 pat e).
Proof. exact (MK_COMB (@lem8313422 P) (@lem8313421 D P Q _111928 pat e)). Qed.
Lemma lem8313424 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) : (term2326 D P Q _111928 pat) = (term2530 D P Q _111928 pat).
Proof. exact (fun_ext (fun e : P -> D => @lem8313423 D P Q _111928 pat e)). Qed.
Lemma lem8313425 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8313426 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) : (term2327 D P Q _111928 pat) = (term2531 D P Q _111928 pat).
Proof. exact (MK_COMB (@lem8313425 D P) (@lem8313424 D P Q _111928 pat)). Qed.
Lemma lem8313427 {D P Q : Type'} (_111928 : type886 D P Q) : (term2328 D P Q _111928) = (term2532 D P Q _111928).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8313426 D P Q _111928 pat)). Qed.
Lemma lem8313428 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8313429 {D P Q : Type'} (_111928 : type886 D P Q) : (term2329 D P Q _111928) = (term2533 D P Q _111928).
Proof. exact (MK_COMB (@lem8313428 D Q) (@lem8313427 D P Q _111928)). Qed.
Lemma lem8313436 {D P Q : Type'} (x : Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2524 D P Q x _111928 pat e a) = (term2524 D P Q x _111928 pat e a).
Proof. exact (eq_refl (term2524 D P Q x _111928 pat e a)). Qed.
Lemma lem8313437 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2526 D P Q _111928 pat e a) = (term2526 D P Q _111928 pat e a).
Proof. exact (fun_ext (fun x : Q => @lem8313436 D P Q x _111928 pat e a)). Qed.
Lemma lem8313438 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8313439 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2527 D P Q _111928 pat e a) = (term2527 D P Q _111928 pat e a).
Proof. exact (MK_COMB (@lem8313438 Q) (@lem8313437 D P Q _111928 pat e a)). Qed.
Lemma lem8313440 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2528 D P Q _111928 pat e) = (term2528 D P Q _111928 pat e).
Proof. exact (fun_ext (fun a : P => @lem8313439 D P Q _111928 pat e a)). Qed.
Lemma lem8313441 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8313442 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2529 D P Q _111928 pat e) = (term2529 D P Q _111928 pat e).
Proof. exact (MK_COMB (@lem8313441 P) (@lem8313440 D P Q _111928 pat e)). Qed.
Lemma lem8313443 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) : (term2530 D P Q _111928 pat) = (term2530 D P Q _111928 pat).
Proof. exact (fun_ext (fun e : P -> D => @lem8313442 D P Q _111928 pat e)). Qed.
Lemma lem8313444 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8313445 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) : (term2531 D P Q _111928 pat) = (term2531 D P Q _111928 pat).
Proof. exact (MK_COMB (@lem8313444 D P) (@lem8313443 D P Q _111928 pat)). Qed.
Lemma lem8313446 {D P Q : Type'} (_111928 : type886 D P Q) : (term2532 D P Q _111928) = (term2532 D P Q _111928).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8313445 D P Q _111928 pat)). Qed.
Lemma lem8313447 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8313448 {D P Q : Type'} (_111928 : type886 D P Q) : (term2533 D P Q _111928) = (term2533 D P Q _111928).
Proof. exact (MK_COMB (@lem8313447 D Q) (@lem8313446 D P Q _111928)). Qed.
Lemma lem8313449 {D P Q : Type'} (_111928 : type886 D P Q) : (term2329 D P Q _111928) = (term2533 D P Q _111928).
Proof. exact (TRANS (@lem8313429 D P Q _111928) (@lem8313448 D P Q _111928)). Qed.
Lemma lem8313450 {D P Q : Type'} (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2533 D P Q _111928.
Proof. exact (EQ_MP (@lem8313449 D P Q _111928) (@lem8312141 D P Q _111928 h1)). Qed.
Lemma lem8313486 {A : Type'} (P : Prop) (Q : A -> Prop) : (term491 A P Q) = (term490 A P Q).
Proof. exact (EQ_MP (@lem19007 A P Q) (@lem19006 A P Q)). Qed.
Lemma lem8313487 {A : Type'} (P : Prop) (Q : A -> Prop) : (term491 A P Q) = (term490 A P Q).
Proof. exact (@lem8313486 A P Q). Qed.
Lemma lem8313488 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term2534 A B D P Q p f pat e arg t lt2 s a) = (term2535 A B D P Q p f pat e arg t lt2 s a).
Proof. exact (@lem8313487 A (term2359 A B D P Q p f pat t e a) (term2357 A P Q arg t lt2 s a)). Qed.
Lemma lem8313489 {A P Q : Type'} (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2536 A P Q arg t lt2 s a y) = (term2356 A P Q arg t lt2 y s a).
Proof. exact (eq_refl (term2536 A P Q arg t lt2 s a y)). Qed.
Lemma lem8313490 {A P Q : Type'} (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term2537 A P Q arg t lt2 s a) = (term2357 A P Q arg t lt2 s a).
Proof. exact (fun_ext (fun y : A => @lem8313489 A P Q arg t lt2 y s a)). Qed.
Lemma lem8313491 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8313492 {A P Q : Type'} (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term2538 A P Q arg t lt2 s a) = (term2358 A P Q arg t lt2 s a).
Proof. exact (MK_COMB (@lem8313491 A) (@lem8313490 A P Q arg t lt2 s a)). Qed.
Lemma lem8313493 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term2360 A B D P Q p f pat t e a) = (term2360 A B D P Q p f pat t e a).
Proof. exact (eq_refl (term2360 A B D P Q p f pat t e a)). Qed.
Lemma lem8313494 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term2534 A B D P Q p f pat e arg t lt2 s a) = (term2361 A B D P Q p f pat e arg t lt2 s a).
Proof. exact (MK_COMB (@lem8313493 A B D P Q p f pat t e a) (@lem8313492 A P Q arg t lt2 s a)). Qed.
Lemma lem8313495 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8313496 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term2539 A B D P Q p f pat e arg t lt2 s a) = (term2540 A B D P Q p f pat e arg t lt2 s a).
Proof. exact (MK_COMB (@lem8313495) (@lem8313494 A B D P Q p f pat e arg t lt2 s a)). Qed.
Lemma lem8313497 {A P Q : Type'} (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2536 A P Q arg t lt2 s a y) = (term2356 A P Q arg t lt2 y s a).
Proof. exact (eq_refl (term2536 A P Q arg t lt2 s a y)). Qed.
Lemma lem8313498 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term2360 A B D P Q p f pat t e a) = (term2360 A B D P Q p f pat t e a).
Proof. exact (eq_refl (term2360 A B D P Q p f pat t e a)). Qed.
Lemma lem8313499 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2541 A B D P Q p f pat e arg t lt2 s a y) = (term2542 A B D P Q p f pat e arg t lt2 y s a).
Proof. exact (MK_COMB (@lem8313498 A B D P Q p f pat t e a) (@lem8313497 A P Q arg t lt2 y s a)). Qed.
Lemma lem8313500 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term2543 A B D P Q p f pat e arg t lt2 s a) = (term2544 A B D P Q p f pat e arg t lt2 s a).
Proof. exact (fun_ext (fun y : A => @lem8313499 A B D P Q p f pat e arg t lt2 y s a)). Qed.
Lemma lem8313501 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8313502 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term2535 A B D P Q p f pat e arg t lt2 s a) = (term2545 A B D P Q p f pat e arg t lt2 s a).
Proof. exact (MK_COMB (@lem8313501 A) (@lem8313500 A B D P Q p f pat e arg t lt2 s a)). Qed.
Lemma lem8313503 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : ((term2534 A B D P Q p f pat e arg t lt2 s a) = (term2535 A B D P Q p f pat e arg t lt2 s a)) = ((term2361 A B D P Q p f pat e arg t lt2 s a) = (term2545 A B D P Q p f pat e arg t lt2 s a)).
Proof. exact (MK_COMB (@lem8313496 A B D P Q p f pat e arg t lt2 s a) (@lem8313502 A B D P Q p f pat e arg t lt2 s a)). Qed.
Lemma lem8313504 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term2361 A B D P Q p f pat e arg t lt2 s a) = (term2545 A B D P Q p f pat e arg t lt2 s a).
Proof. exact (EQ_MP (@lem8313503 A B D P Q p f pat e arg t lt2 s a) (@lem8313488 A B D P Q p f pat e arg t lt2 s a)). Qed.
Lemma lem8313505 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term2362 A B D P Q p f pat e arg lt2 s a) = (term2546 A B D P Q p f pat e arg lt2 s a).
Proof. exact (fun_ext (fun t : Q => @lem8313504 A B D P Q p f pat e arg t lt2 s a)). Qed.
Lemma lem8313506 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8313507 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term2363 A B D P Q p f pat e arg lt2 s a) = (term2547 A B D P Q p f pat e arg lt2 s a).
Proof. exact (MK_COMB (@lem8313506 Q) (@lem8313505 A B D P Q p f pat e arg lt2 s a)). Qed.
Lemma lem8313508 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term2364 A B D P Q p f pat e arg lt2 s) = (term2548 A B D P Q p f pat e arg lt2 s).
Proof. exact (fun_ext (fun a : P => @lem8313507 A B D P Q p f pat e arg lt2 s a)). Qed.
Lemma lem8313509 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8313510 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term2365 A B D P Q p f pat e arg lt2 s) = (term2549 A B D P Q p f pat e arg lt2 s).
Proof. exact (MK_COMB (@lem8313509 P) (@lem8313508 A B D P Q p f pat e arg lt2 s)). Qed.
Lemma lem8313511 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term2366 A B D P Q p pat e arg lt2 s) = (term2550 A B D P Q p pat e arg lt2 s).
Proof. exact (fun_ext (fun f : A -> B => @lem8313510 A B D P Q p f pat e arg lt2 s)). Qed.
Lemma lem8313512 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8313513 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term2367 A B D P Q p pat e arg lt2 s) = (term2551 A B D P Q p pat e arg lt2 s).
Proof. exact (MK_COMB (@lem8313512 A B) (@lem8313511 A B D P Q p pat e arg lt2 s)). Qed.
Lemma lem8313532 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2542 A B D P Q p f pat e arg t lt2 y s a) = (term2542 A B D P Q p f pat e arg t lt2 y s a).
Proof. exact (eq_refl (term2542 A B D P Q p f pat e arg t lt2 y s a)). Qed.
Lemma lem8313533 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term2544 A B D P Q p f pat e arg t lt2 s a) = (term2544 A B D P Q p f pat e arg t lt2 s a).
Proof. exact (fun_ext (fun y : A => @lem8313532 A B D P Q p f pat e arg t lt2 y s a)). Qed.
Lemma lem8313534 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8313535 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (t : Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term2545 A B D P Q p f pat e arg t lt2 s a) = (term2545 A B D P Q p f pat e arg t lt2 s a).
Proof. exact (MK_COMB (@lem8313534 A) (@lem8313533 A B D P Q p f pat e arg t lt2 s a)). Qed.
Lemma lem8313536 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term2546 A B D P Q p f pat e arg lt2 s a) = (term2546 A B D P Q p f pat e arg lt2 s a).
Proof. exact (fun_ext (fun t : Q => @lem8313535 A B D P Q p f pat e arg t lt2 s a)). Qed.
Lemma lem8313537 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8313538 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (a : P) : (term2547 A B D P Q p f pat e arg lt2 s a) = (term2547 A B D P Q p f pat e arg lt2 s a).
Proof. exact (MK_COMB (@lem8313537 Q) (@lem8313536 A B D P Q p f pat e arg lt2 s a)). Qed.
Lemma lem8313539 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term2548 A B D P Q p f pat e arg lt2 s) = (term2548 A B D P Q p f pat e arg lt2 s).
Proof. exact (fun_ext (fun a : P => @lem8313538 A B D P Q p f pat e arg lt2 s a)). Qed.
Lemma lem8313540 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8313541 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term2549 A B D P Q p f pat e arg lt2 s) = (term2549 A B D P Q p f pat e arg lt2 s).
Proof. exact (MK_COMB (@lem8313540 P) (@lem8313539 A B D P Q p f pat e arg lt2 s)). Qed.
Lemma lem8313542 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term2550 A B D P Q p pat e arg lt2 s) = (term2550 A B D P Q p pat e arg lt2 s).
Proof. exact (fun_ext (fun f : A -> B => @lem8313541 A B D P Q p f pat e arg lt2 s)). Qed.
Lemma lem8313543 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8313544 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term2551 A B D P Q p pat e arg lt2 s) = (term2551 A B D P Q p pat e arg lt2 s).
Proof. exact (MK_COMB (@lem8313543 A B) (@lem8313542 A B D P Q p pat e arg lt2 s)). Qed.
Lemma lem8313545 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term2367 A B D P Q p pat e arg lt2 s) = (term2551 A B D P Q p pat e arg lt2 s).
Proof. exact (TRANS (@lem8313513 A B D P Q p pat e arg lt2 s) (@lem8313544 A B D P Q p pat e arg lt2 s)). Qed.
Lemma lem8313546 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term35 A B D P Q p pat e arg lt2 s) : term2551 A B D P Q p pat e arg lt2 s.
Proof. exact (EQ_MP (@lem8313545 A B D P Q p pat e arg lt2 s) (@lem8312382 A B D P Q p pat e arg lt2 s h1)). Qed.
Lemma lem8313909 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term2450 A B P lt2 s z f p g a) = (term2552 A B P lt2 s z f p g a).
Proof. exact (@lem19490 (term2419 A B P f p g a) (term2446 A B P lt2 s z f g a) (term2415 A B P f p g a)). Qed.
Lemma lem8313916 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term2553 A B P lt2 s z f p g a) = (term2554 A B P lt2 s z f p g a).
Proof. exact (@lem19699 (term2442 A B P lt2 z f g s a) (term2435 A B P z f g a) (term2415 A B P f p g a)). Qed.
Lemma lem8313923 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term2555 A B P lt2 s z f p g a) = (term2556 A B P lt2 s z f p g a).
Proof. exact (@lem19699 (term2442 A B P lt2 z f g s a) (term2435 A B P z f g a) (term2419 A B P f p g a)). Qed.
Lemma lem8313924 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8313925 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term2557 A B P lt2 s z f p g a) = (term2558 A B P lt2 s z f p g a).
Proof. exact (MK_COMB (@lem8313924) (@lem8313923 A B P lt2 s z f p g a)). Qed.
Lemma lem8313926 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term2552 A B P lt2 s z f p g a) = (term2559 A B P lt2 s z f p g a).
Proof. exact (MK_COMB (@lem8313925 A B P lt2 s z f p g a) (@lem8313916 A B P lt2 s z f p g a)). Qed.
Lemma lem8313928 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term2450 A B P lt2 s z f p g a) = (term2559 A B P lt2 s z f p g a).
Proof. exact (TRANS (@lem8313909 A B P lt2 s z f p g a) (@lem8313926 A B P lt2 s z f p g a)). Qed.
Lemma lem8313929 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term2452 A B P lt2 s z f p g) = (term2560 A B P lt2 s z f p g).
Proof. exact (fun_ext (fun a : P => @lem8313928 A B P lt2 s z f p g a)). Qed.
Lemma lem8313930 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8313931 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term2454 A B P lt2 s z f p g) = (term2561 A B P lt2 s z f p g).
Proof. exact (MK_COMB (@lem8313930 P) (@lem8313929 A B P lt2 s z f p g)). Qed.
Lemma lem8313932 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) : (term2456 A B P lt2 s z f p) = (term2562 A B P lt2 s z f p).
Proof. exact (fun_ext (fun g : A -> B => @lem8313931 A B P lt2 s z f p g)). Qed.
Lemma lem8313933 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8313934 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) : (term2457 A B P lt2 s z f p) = (term2563 A B P lt2 s z f p).
Proof. exact (MK_COMB (@lem8313933 A B) (@lem8313932 A B P lt2 s z f p)). Qed.
Lemma lem8313935 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) : (term2458 A B P lt2 s z p) = (term2564 A B P lt2 s z p).
Proof. exact (fun_ext (fun f : A -> B => @lem8313934 A B P lt2 s z f p)). Qed.
Lemma lem8313936 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8313938 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) : (term2459 A B P lt2 s z p) = (term2565 A B P lt2 s z p).
Proof. exact (MK_COMB (@lem8313936 A B) (@lem8313935 A B P lt2 s z p)). Qed.
Lemma lem8313939 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2565 A B P lt2 s z p.
Proof. exact (EQ_MP (@lem8313938 A B P lt2 s z p) (@lem8313108 A B P lt2 s z p h1)). Qed.
Lemma lem8314060 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a' : P) (f : A -> B) (g : A -> B) (z : A) : (term2399 A B P lt2 s a' f g z) = (term2399 A B P lt2 s a' f g z).
Proof. exact (eq_refl (term2399 A B P lt2 s a' f g z)). Qed.
Lemma lem8314061 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a' : P) (f : A -> B) (g : A -> B) : (term2400 A B P lt2 s a' f g) = (term2400 A B P lt2 s a' f g).
Proof. exact (fun_ext (fun z : A => @lem8314060 A B P lt2 s a' f g z)). Qed.
Lemma lem8314062 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8314064 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a' : P) (f : A -> B) (g : A -> B) : (term2401 A B P lt2 s a' f g) = (term2401 A B P lt2 s a' f g).
Proof. exact (MK_COMB (@lem8314062 A) (@lem8314061 A B P lt2 s a' f g)). Qed.
Lemma lem8314065 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2403 A B D P Q lt2 s f p g pat t' e a') : term2401 A B P lt2 s a' f g.
Proof. exact (EQ_MP (@lem8314064 A B P lt2 s a' f g) (@lem8313378 A B D P Q lt2 s f p g pat t' e a' h1)). Qed.
Lemma lem8314077 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a' : P) (h1 : term866 A B P p g a') : term866 A B P p g a'.
Proof. exact (h1). Qed.
Lemma lem8314420 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a' : P) : (term2319 D P Q pat t e a') = (term2319 D P Q pat t e a').
Proof. exact (eq_refl (term2319 D P Q pat t e a')). Qed.
Lemma lem8314421 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a' : P) : (term2320 D P Q pat e a') = (term2320 D P Q pat e a').
Proof. exact (fun_ext (fun t : Q => @lem8314420 D P Q pat t e a')). Qed.
Lemma lem8314422 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8314424 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a' : P) : (term2321 D P Q pat e a') = (term2321 D P Q pat e a').
Proof. exact (MK_COMB (@lem8314422 Q) (@lem8314421 D P Q pat e a')). Qed.
Lemma lem8314425 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') : term2321 D P Q pat e a'.
Proof. exact (EQ_MP (@lem8314424 D P Q pat e a') (@lem8313386 D P Q pat e a' h1)). Qed.
Lemma lem8314602 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term2450 A B P lt2 s z f p g a) = (term2552 A B P lt2 s z f p g a).
Proof. exact (@lem19490 (term2419 A B P f p g a) (term2446 A B P lt2 s z f g a) (term2415 A B P f p g a)). Qed.
Lemma lem8314609 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term2553 A B P lt2 s z f p g a) = (term2554 A B P lt2 s z f p g a).
Proof. exact (@lem19699 (term2442 A B P lt2 z f g s a) (term2435 A B P z f g a) (term2415 A B P f p g a)). Qed.
Lemma lem8314616 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term2555 A B P lt2 s z f p g a) = (term2556 A B P lt2 s z f p g a).
Proof. exact (@lem19699 (term2442 A B P lt2 z f g s a) (term2435 A B P z f g a) (term2419 A B P f p g a)). Qed.
Lemma lem8314617 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8314618 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term2557 A B P lt2 s z f p g a) = (term2558 A B P lt2 s z f p g a).
Proof. exact (MK_COMB (@lem8314617) (@lem8314616 A B P lt2 s z f p g a)). Qed.
Lemma lem8314619 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term2552 A B P lt2 s z f p g a) = (term2559 A B P lt2 s z f p g a).
Proof. exact (MK_COMB (@lem8314618 A B P lt2 s z f p g a) (@lem8314609 A B P lt2 s z f p g a)). Qed.
Lemma lem8314621 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) (a : P) : (term2450 A B P lt2 s z f p g a) = (term2559 A B P lt2 s z f p g a).
Proof. exact (TRANS (@lem8314602 A B P lt2 s z f p g a) (@lem8314619 A B P lt2 s z f p g a)). Qed.
Lemma lem8314622 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term2452 A B P lt2 s z f p g) = (term2560 A B P lt2 s z f p g).
Proof. exact (fun_ext (fun a : P => @lem8314621 A B P lt2 s z f p g a)). Qed.
Lemma lem8314623 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8314624 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) : (term2454 A B P lt2 s z f p g) = (term2561 A B P lt2 s z f p g).
Proof. exact (MK_COMB (@lem8314623 P) (@lem8314622 A B P lt2 s z f p g)). Qed.
Lemma lem8314625 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) : (term2456 A B P lt2 s z f p) = (term2562 A B P lt2 s z f p).
Proof. exact (fun_ext (fun g : A -> B => @lem8314624 A B P lt2 s z f p g)). Qed.
Lemma lem8314626 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8314627 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) : (term2457 A B P lt2 s z f p) = (term2563 A B P lt2 s z f p).
Proof. exact (MK_COMB (@lem8314626 A B) (@lem8314625 A B P lt2 s z f p)). Qed.
Lemma lem8314628 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) : (term2458 A B P lt2 s z p) = (term2564 A B P lt2 s z p).
Proof. exact (fun_ext (fun f : A -> B => @lem8314627 A B P lt2 s z f p)). Qed.
Lemma lem8314629 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8314631 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) : (term2459 A B P lt2 s z p) = (term2565 A B P lt2 s z p).
Proof. exact (MK_COMB (@lem8314629 A B) (@lem8314628 A B P lt2 s z p)). Qed.
Lemma lem8314632 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2565 A B P lt2 s z p.
Proof. exact (EQ_MP (@lem8314631 A B P lt2 s z p) (@lem8313108 A B P lt2 s z p h1)). Qed.
Lemma lem8314753 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a' : P) (f : A -> B) (g : A -> B) (z : A) : (term2399 A B P lt2 s a' f g z) = (term2399 A B P lt2 s a' f g z).
Proof. exact (eq_refl (term2399 A B P lt2 s a' f g z)). Qed.
Lemma lem8314754 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a' : P) (f : A -> B) (g : A -> B) : (term2400 A B P lt2 s a' f g) = (term2400 A B P lt2 s a' f g).
Proof. exact (fun_ext (fun z : A => @lem8314753 A B P lt2 s a' f g z)). Qed.
Lemma lem8314755 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8314757 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a' : P) (f : A -> B) (g : A -> B) : (term2401 A B P lt2 s a' f g) = (term2401 A B P lt2 s a' f g).
Proof. exact (MK_COMB (@lem8314755 A) (@lem8314754 A B P lt2 s a' f g)). Qed.
Lemma lem8314758 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2403 A B D P Q lt2 s f p g pat t' e a') : term2401 A B P lt2 s a' f g.
Proof. exact (EQ_MP (@lem8314757 A B P lt2 s a' f g) (@lem8313378 A B D P Q lt2 s f p g pat t' e a' h1)). Qed.
Lemma lem8314770 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) (h1 : term866 A B P p f a') : term866 A B P p f a'.
Proof. exact (h1). Qed.
Lemma lem8315113 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a' : P) : (term2319 D P Q pat t e a') = (term2319 D P Q pat t e a').
Proof. exact (eq_refl (term2319 D P Q pat t e a')). Qed.
Lemma lem8315114 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a' : P) : (term2320 D P Q pat e a') = (term2320 D P Q pat e a').
Proof. exact (fun_ext (fun t : Q => @lem8315113 D P Q pat t e a')). Qed.
Lemma lem8315115 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8315117 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a' : P) : (term2321 D P Q pat e a') = (term2321 D P Q pat e a').
Proof. exact (MK_COMB (@lem8315115 Q) (@lem8315114 D P Q pat e a')). Qed.
Lemma lem8315118 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') : term2321 D P Q pat e a'.
Proof. exact (EQ_MP (@lem8315117 D P Q pat e a') (@lem8313392 D P Q pat e a' h1)). Qed.
Lemma lem8315120 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1575 A P Q) = (term1574 A P Q).
Proof. exact (EQ_MP (@lem19013 A P Q) (@lem19012 A P Q)). Qed.
Lemma lem8315121 {Q : Type'} (P : Q -> Prop) (Q' : Prop) : (term1575 Q P Q') = (term1574 Q P Q').
Proof. exact (@lem8315120 Q P Q'). Qed.
Lemma lem8315122 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2514 D P Q _111928 pat e a) = (term2515 D P Q _111928 pat e a).
Proof. exact (@lem8315121 Q (term2320 D P Q pat e a) ((term2315 D P Q _111928 pat e a) = (@I (P -> D) e a))). Qed.
Lemma lem8315123 {D P Q : Type'} (pat : Q -> D) (x : Q) (e : P -> D) (a : P) : (term2516 D P Q pat e a x) = (term2319 D P Q pat x e a).
Proof. exact (eq_refl (term2516 D P Q pat e a x)). Qed.
Lemma lem8315124 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term2517 D P Q pat e a) = (term2320 D P Q pat e a).
Proof. exact (fun_ext (fun x : Q => @lem8315123 D P Q pat x e a)). Qed.
Lemma lem8315125 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8315126 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term2518 D P Q pat e a) = (term2321 D P Q pat e a).
Proof. exact (MK_COMB (@lem8315125 Q) (@lem8315124 D P Q pat e a)). Qed.
Lemma lem8315127 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8315128 {D P Q : Type'} (pat : Q -> D) (e : P -> D) (a : P) : (term2519 D P Q pat e a) = (term2322 D P Q pat e a).
Proof. exact (MK_COMB (@lem8315127) (@lem8315126 D P Q pat e a)). Qed.
Lemma lem8315129 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : ((term2315 D P Q _111928 pat e a) = (@I (P -> D) e a)) = ((term2315 D P Q _111928 pat e a) = (@I (P -> D) e a)).
Proof. exact (eq_refl ((term2315 D P Q _111928 pat e a) = (@I (P -> D) e a))). Qed.
Lemma lem8315130 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2514 D P Q _111928 pat e a) = (term2323 D P Q _111928 pat e a).
Proof. exact (MK_COMB (@lem8315128 D P Q pat e a) (@lem8315129 D P Q _111928 pat e a)). Qed.
Lemma lem8315131 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8315132 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2520 D P Q _111928 pat e a) = (term2521 D P Q _111928 pat e a).
Proof. exact (MK_COMB (@lem8315131) (@lem8315130 D P Q _111928 pat e a)). Qed.
Lemma lem8315133 {D P Q : Type'} (pat : Q -> D) (x : Q) (e : P -> D) (a : P) : (term2516 D P Q pat e a x) = (term2319 D P Q pat x e a).
Proof. exact (eq_refl (term2516 D P Q pat e a x)). Qed.
Lemma lem8315134 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8315135 {D P Q : Type'} (pat : Q -> D) (x : Q) (e : P -> D) (a : P) : (term2522 D P Q pat e a x) = (term2333 D P Q pat x e a).
Proof. exact (MK_COMB (@lem8315134) (@lem8315133 D P Q pat x e a)). Qed.
Lemma lem8315136 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : ((term2315 D P Q _111928 pat e a) = (@I (P -> D) e a)) = ((term2315 D P Q _111928 pat e a) = (@I (P -> D) e a)).
Proof. exact (eq_refl ((term2315 D P Q _111928 pat e a) = (@I (P -> D) e a))). Qed.
Lemma lem8315137 {D P Q : Type'} (x : Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2523 D P Q x _111928 pat e a) = (term2524 D P Q x _111928 pat e a).
Proof. exact (MK_COMB (@lem8315135 D P Q pat x e a) (@lem8315136 D P Q _111928 pat e a)). Qed.
Lemma lem8315138 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2525 D P Q _111928 pat e a) = (term2526 D P Q _111928 pat e a).
Proof. exact (fun_ext (fun x : Q => @lem8315137 D P Q x _111928 pat e a)). Qed.
Lemma lem8315139 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8315140 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2515 D P Q _111928 pat e a) = (term2527 D P Q _111928 pat e a).
Proof. exact (MK_COMB (@lem8315139 Q) (@lem8315138 D P Q _111928 pat e a)). Qed.
Lemma lem8315141 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : ((term2514 D P Q _111928 pat e a) = (term2515 D P Q _111928 pat e a)) = ((term2323 D P Q _111928 pat e a) = (term2527 D P Q _111928 pat e a)).
Proof. exact (MK_COMB (@lem8315132 D P Q _111928 pat e a) (@lem8315140 D P Q _111928 pat e a)). Qed.
Lemma lem8315142 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2323 D P Q _111928 pat e a) = (term2527 D P Q _111928 pat e a).
Proof. exact (EQ_MP (@lem8315141 D P Q _111928 pat e a) (@lem8315122 D P Q _111928 pat e a)). Qed.
Lemma lem8315143 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2324 D P Q _111928 pat e) = (term2528 D P Q _111928 pat e).
Proof. exact (fun_ext (fun a : P => @lem8315142 D P Q _111928 pat e a)). Qed.
Lemma lem8315144 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8315145 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2325 D P Q _111928 pat e) = (term2529 D P Q _111928 pat e).
Proof. exact (MK_COMB (@lem8315144 P) (@lem8315143 D P Q _111928 pat e)). Qed.
Lemma lem8315146 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) : (term2326 D P Q _111928 pat) = (term2530 D P Q _111928 pat).
Proof. exact (fun_ext (fun e : P -> D => @lem8315145 D P Q _111928 pat e)). Qed.
Lemma lem8315147 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8315148 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) : (term2327 D P Q _111928 pat) = (term2531 D P Q _111928 pat).
Proof. exact (MK_COMB (@lem8315147 D P) (@lem8315146 D P Q _111928 pat)). Qed.
Lemma lem8315149 {D P Q : Type'} (_111928 : type886 D P Q) : (term2328 D P Q _111928) = (term2532 D P Q _111928).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8315148 D P Q _111928 pat)). Qed.
Lemma lem8315150 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8315151 {D P Q : Type'} (_111928 : type886 D P Q) : (term2329 D P Q _111928) = (term2533 D P Q _111928).
Proof. exact (MK_COMB (@lem8315150 D Q) (@lem8315149 D P Q _111928)). Qed.
Lemma lem8315158 {D P Q : Type'} (x : Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2524 D P Q x _111928 pat e a) = (term2524 D P Q x _111928 pat e a).
Proof. exact (eq_refl (term2524 D P Q x _111928 pat e a)). Qed.
Lemma lem8315159 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2526 D P Q _111928 pat e a) = (term2526 D P Q _111928 pat e a).
Proof. exact (fun_ext (fun x : Q => @lem8315158 D P Q x _111928 pat e a)). Qed.
Lemma lem8315160 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8315161 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2527 D P Q _111928 pat e a) = (term2527 D P Q _111928 pat e a).
Proof. exact (MK_COMB (@lem8315160 Q) (@lem8315159 D P Q _111928 pat e a)). Qed.
Lemma lem8315162 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2528 D P Q _111928 pat e) = (term2528 D P Q _111928 pat e).
Proof. exact (fun_ext (fun a : P => @lem8315161 D P Q _111928 pat e a)). Qed.
Lemma lem8315163 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8315164 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) : (term2529 D P Q _111928 pat e) = (term2529 D P Q _111928 pat e).
Proof. exact (MK_COMB (@lem8315163 P) (@lem8315162 D P Q _111928 pat e)). Qed.
Lemma lem8315165 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) : (term2530 D P Q _111928 pat) = (term2530 D P Q _111928 pat).
Proof. exact (fun_ext (fun e : P -> D => @lem8315164 D P Q _111928 pat e)). Qed.
Lemma lem8315166 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8315167 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) : (term2531 D P Q _111928 pat) = (term2531 D P Q _111928 pat).
Proof. exact (MK_COMB (@lem8315166 D P) (@lem8315165 D P Q _111928 pat)). Qed.
Lemma lem8315168 {D P Q : Type'} (_111928 : type886 D P Q) : (term2532 D P Q _111928) = (term2532 D P Q _111928).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8315167 D P Q _111928 pat)). Qed.
Lemma lem8315169 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8315170 {D P Q : Type'} (_111928 : type886 D P Q) : (term2533 D P Q _111928) = (term2533 D P Q _111928).
Proof. exact (MK_COMB (@lem8315169 D Q) (@lem8315168 D P Q _111928)). Qed.
Lemma lem8315171 {D P Q : Type'} (_111928 : type886 D P Q) : (term2329 D P Q _111928) = (term2533 D P Q _111928).
Proof. exact (TRANS (@lem8315151 D P Q _111928) (@lem8315170 D P Q _111928)). Qed.
Lemma lem8315172 {D P Q : Type'} (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2533 D P Q _111928.
Proof. exact (EQ_MP (@lem8315171 D P Q _111928) (@lem8312141 D P Q _111928 h1)). Qed.
Lemma lem8315192 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) (u : Q) : (term2337 A B D P Q p f pat e t arg a u) = (term2337 A B D P Q p f pat e t arg a u).
Proof. exact (eq_refl (term2337 A B D P Q p f pat e t arg a u)). Qed.
Lemma lem8315193 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) : (term2338 A B D P Q p f pat e t arg a) = (term2338 A B D P Q p f pat e t arg a).
Proof. exact (fun_ext (fun u : Q => @lem8315192 A B D P Q p f pat e t arg a u)). Qed.
Lemma lem8315194 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8315195 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (t : Q) (arg : type1475 A P Q) (a : P) : (term2339 A B D P Q p f pat e t arg a) = (term2339 A B D P Q p f pat e t arg a).
Proof. exact (MK_COMB (@lem8315194 Q) (@lem8315193 A B D P Q p f pat e t arg a)). Qed.
Lemma lem8315196 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (a : P) : (term2340 A B D P Q p f pat e arg a) = (term2340 A B D P Q p f pat e arg a).
Proof. exact (fun_ext (fun t : Q => @lem8315195 A B D P Q p f pat e t arg a)). Qed.
Lemma lem8315197 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8315198 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (a : P) : (term2341 A B D P Q p f pat e arg a) = (term2341 A B D P Q p f pat e arg a).
Proof. exact (MK_COMB (@lem8315197 Q) (@lem8315196 A B D P Q p f pat e arg a)). Qed.
Lemma lem8315199 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term2342 A B D P Q p f pat e arg) = (term2342 A B D P Q p f pat e arg).
Proof. exact (fun_ext (fun a : P => @lem8315198 A B D P Q p f pat e arg a)). Qed.
Lemma lem8315200 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8315201 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term2343 A B D P Q p f pat e arg) = (term2343 A B D P Q p f pat e arg).
Proof. exact (MK_COMB (@lem8315200 P) (@lem8315199 A B D P Q p f pat e arg)). Qed.
Lemma lem8315202 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term2344 A B D P Q p pat e arg) = (term2344 A B D P Q p pat e arg).
Proof. exact (fun_ext (fun f : A -> B => @lem8315201 A B D P Q p f pat e arg)). Qed.
Lemma lem8315203 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8315205 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term2345 A B D P Q p pat e arg) = (term2345 A B D P Q p pat e arg).
Proof. exact (MK_COMB (@lem8315203 A B) (@lem8315202 A B D P Q p pat e arg)). Qed.
Lemma lem8315206 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term2345 A B D P Q p pat e arg.
Proof. exact (EQ_MP (@lem8315205 A B D P Q p pat e arg) (@lem8312261 A B D P Q p pat e arg h1)). Qed.
Lemma lem8315327 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1575 A P Q) = (term1574 A P Q).
Proof. exact (EQ_MP (@lem19013 A P Q) (@lem19012 A P Q)). Qed.
Lemma lem8315328 {B : Type'} (P : B -> Prop) (Q : Prop) : (term1575 B P Q) = (term1574 B P Q).
Proof. exact (@lem8315327 B P Q). Qed.
Lemma lem8315329 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2566 A B D P Q t'' _111929 pat e f arg a) = (term2567 A B D P Q t'' _111929 pat e f arg a).
Proof. exact (@lem8315328 B (term2492 A B D P Q pat e f arg a) (term2484 A B D P Q t'' _111929 pat e f arg a)). Qed.
Lemma lem8315330 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (x : B) : (term2568 A B D P Q pat e f arg a x) = (term2491 A B D P Q pat e f arg a x).
Proof. exact (eq_refl (term2568 A B D P Q pat e f arg a x)). Qed.
Lemma lem8315331 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2569 A B D P Q pat e f arg a) = (term2492 A B D P Q pat e f arg a).
Proof. exact (fun_ext (fun x : B => @lem8315330 A B D P Q pat e f arg a x)). Qed.
Lemma lem8315332 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8315333 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2570 A B D P Q pat e f arg a) = (term2493 A B D P Q pat e f arg a).
Proof. exact (MK_COMB (@lem8315332 B) (@lem8315331 A B D P Q pat e f arg a)). Qed.
Lemma lem8315334 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8315335 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2571 A B D P Q pat e f arg a) = (term2494 A B D P Q pat e f arg a).
Proof. exact (MK_COMB (@lem8315334) (@lem8315333 A B D P Q pat e f arg a)). Qed.
Lemma lem8315336 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2484 A B D P Q t'' _111929 pat e f arg a) = (term2484 A B D P Q t'' _111929 pat e f arg a).
Proof. exact (eq_refl (term2484 A B D P Q t'' _111929 pat e f arg a)). Qed.
Lemma lem8315337 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2566 A B D P Q t'' _111929 pat e f arg a) = (term2496 A B D P Q t'' _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8315335 A B D P Q pat e f arg a) (@lem8315336 A B D P Q t'' _111929 pat e f arg a)). Qed.
Lemma lem8315338 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8315339 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2572 A B D P Q t'' _111929 pat e f arg a) = (term2573 A B D P Q t'' _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8315338) (@lem8315337 A B D P Q t'' _111929 pat e f arg a)). Qed.
Lemma lem8315340 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (x : B) : (term2568 A B D P Q pat e f arg a x) = (term2491 A B D P Q pat e f arg a x).
Proof. exact (eq_refl (term2568 A B D P Q pat e f arg a x)). Qed.
Lemma lem8315341 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8315342 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (x : B) : (term2574 A B D P Q pat e f arg a x) = (term2575 A B D P Q pat e f arg a x).
Proof. exact (MK_COMB (@lem8315341) (@lem8315340 A B D P Q pat e f arg a x)). Qed.
Lemma lem8315343 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2484 A B D P Q t'' _111929 pat e f arg a) = (term2484 A B D P Q t'' _111929 pat e f arg a).
Proof. exact (eq_refl (term2484 A B D P Q t'' _111929 pat e f arg a)). Qed.
Lemma lem8315344 {A B D P Q : Type'} (x : B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2576 A B D P Q x t'' _111929 pat e f arg a) = (term2577 A B D P Q x t'' _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8315342 A B D P Q pat e f arg a x) (@lem8315343 A B D P Q t'' _111929 pat e f arg a)). Qed.
Lemma lem8315345 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2578 A B D P Q t'' _111929 pat e f arg a) = (term2579 A B D P Q t'' _111929 pat e f arg a).
Proof. exact (fun_ext (fun x : B => @lem8315344 A B D P Q x t'' _111929 pat e f arg a)). Qed.
Lemma lem8315346 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8315347 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2567 A B D P Q t'' _111929 pat e f arg a) = (term2580 A B D P Q t'' _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8315346 B) (@lem8315345 A B D P Q t'' _111929 pat e f arg a)). Qed.
Lemma lem8315348 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : ((term2566 A B D P Q t'' _111929 pat e f arg a) = (term2567 A B D P Q t'' _111929 pat e f arg a)) = ((term2496 A B D P Q t'' _111929 pat e f arg a) = (term2580 A B D P Q t'' _111929 pat e f arg a)).
Proof. exact (MK_COMB (@lem8315339 A B D P Q t'' _111929 pat e f arg a) (@lem8315347 A B D P Q t'' _111929 pat e f arg a)). Qed.
Lemma lem8315349 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2496 A B D P Q t'' _111929 pat e f arg a) = (term2580 A B D P Q t'' _111929 pat e f arg a).
Proof. exact (EQ_MP (@lem8315348 A B D P Q t'' _111929 pat e f arg a) (@lem8315329 A B D P Q t'' _111929 pat e f arg a)). Qed.
Lemma lem8315351 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1575 A P Q) = (term1574 A P Q).
Proof. exact (EQ_MP (@lem19013 A P Q) (@lem19012 A P Q)). Qed.
Lemma lem8315352 {Q : Type'} (P : Q -> Prop) (Q' : Prop) : (term1575 Q P Q') = (term1574 Q P Q').
Proof. exact (@lem8315351 Q P Q'). Qed.
Lemma lem8315353 {A B D P Q : Type'} (x : B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2581 A B D P Q x t'' _111929 pat e f arg a) = (term2582 A B D P Q x t'' _111929 pat e f arg a).
Proof. exact (@lem8315352 Q (term2490 A B D P Q pat e f arg a x) (term2484 A B D P Q t'' _111929 pat e f arg a)). Qed.
Lemma lem8315354 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (t : Q) (x : B) : (term2583 A B D P Q pat e f arg a x t) = (term2489 A B D P Q pat e f arg a t x).
Proof. exact (eq_refl (term2583 A B D P Q pat e f arg a x t)). Qed.
Lemma lem8315355 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (x : B) : (term2584 A B D P Q pat e f arg a x) = (term2490 A B D P Q pat e f arg a x).
Proof. exact (fun_ext (fun t : Q => @lem8315354 A B D P Q pat e f arg a t x)). Qed.
Lemma lem8315356 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8315357 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (x : B) : (term2585 A B D P Q pat e f arg a x) = (term2491 A B D P Q pat e f arg a x).
Proof. exact (MK_COMB (@lem8315356 Q) (@lem8315355 A B D P Q pat e f arg a x)). Qed.
Lemma lem8315358 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8315359 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (x : B) : (term2586 A B D P Q pat e f arg a x) = (term2575 A B D P Q pat e f arg a x).
Proof. exact (MK_COMB (@lem8315358) (@lem8315357 A B D P Q pat e f arg a x)). Qed.
Lemma lem8315360 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2484 A B D P Q t'' _111929 pat e f arg a) = (term2484 A B D P Q t'' _111929 pat e f arg a).
Proof. exact (eq_refl (term2484 A B D P Q t'' _111929 pat e f arg a)). Qed.
Lemma lem8315361 {A B D P Q : Type'} (x : B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2581 A B D P Q x t'' _111929 pat e f arg a) = (term2577 A B D P Q x t'' _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8315359 A B D P Q pat e f arg a x) (@lem8315360 A B D P Q t'' _111929 pat e f arg a)). Qed.
Lemma lem8315362 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8315363 {A B D P Q : Type'} (x : B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2587 A B D P Q x t'' _111929 pat e f arg a) = (term2588 A B D P Q x t'' _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8315362) (@lem8315361 A B D P Q x t'' _111929 pat e f arg a)). Qed.
Lemma lem8315364 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (t : Q) (x : B) : (term2583 A B D P Q pat e f arg a x t) = (term2489 A B D P Q pat e f arg a t x).
Proof. exact (eq_refl (term2583 A B D P Q pat e f arg a x t)). Qed.
Lemma lem8315365 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8315366 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) (t : Q) (x : B) : (term2589 A B D P Q pat e f arg a x t) = (term2590 A B D P Q pat e f arg a t x).
Proof. exact (MK_COMB (@lem8315365) (@lem8315364 A B D P Q pat e f arg a t x)). Qed.
Lemma lem8315367 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2484 A B D P Q t'' _111929 pat e f arg a) = (term2484 A B D P Q t'' _111929 pat e f arg a).
Proof. exact (eq_refl (term2484 A B D P Q t'' _111929 pat e f arg a)). Qed.
Lemma lem8315368 {A B D P Q : Type'} (t : Q) (x : B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2591 A B D P Q x t t'' _111929 pat e f arg a) = (term2592 A B D P Q t x t'' _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8315366 A B D P Q pat e f arg a t x) (@lem8315367 A B D P Q t'' _111929 pat e f arg a)). Qed.
Lemma lem8315369 {A B D P Q : Type'} (x : B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2593 A B D P Q x t'' _111929 pat e f arg a) = (term2594 A B D P Q x t'' _111929 pat e f arg a).
Proof. exact (fun_ext (fun t : Q => @lem8315368 A B D P Q t x t'' _111929 pat e f arg a)). Qed.
Lemma lem8315370 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8315371 {A B D P Q : Type'} (x : B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2582 A B D P Q x t'' _111929 pat e f arg a) = (term2595 A B D P Q x t'' _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8315370 Q) (@lem8315369 A B D P Q x t'' _111929 pat e f arg a)). Qed.
Lemma lem8315372 {A B D P Q : Type'} (x : B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : ((term2581 A B D P Q x t'' _111929 pat e f arg a) = (term2582 A B D P Q x t'' _111929 pat e f arg a)) = ((term2577 A B D P Q x t'' _111929 pat e f arg a) = (term2595 A B D P Q x t'' _111929 pat e f arg a)).
Proof. exact (MK_COMB (@lem8315363 A B D P Q x t'' _111929 pat e f arg a) (@lem8315371 A B D P Q x t'' _111929 pat e f arg a)). Qed.
Lemma lem8315373 {A B D P Q : Type'} (x : B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2577 A B D P Q x t'' _111929 pat e f arg a) = (term2595 A B D P Q x t'' _111929 pat e f arg a).
Proof. exact (EQ_MP (@lem8315372 A B D P Q x t'' _111929 pat e f arg a) (@lem8315353 A B D P Q x t'' _111929 pat e f arg a)). Qed.
Lemma lem8315374 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2579 A B D P Q t'' _111929 pat e f arg a) = (term2596 A B D P Q t'' _111929 pat e f arg a).
Proof. exact (fun_ext (fun x : B => @lem8315373 A B D P Q x t'' _111929 pat e f arg a)). Qed.
Lemma lem8315375 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8315376 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2580 A B D P Q t'' _111929 pat e f arg a) = (term2597 A B D P Q t'' _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8315375 B) (@lem8315374 A B D P Q t'' _111929 pat e f arg a)). Qed.
Lemma lem8315377 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2496 A B D P Q t'' _111929 pat e f arg a) = (term2597 A B D P Q t'' _111929 pat e f arg a).
Proof. exact (TRANS (@lem8315349 A B D P Q t'' _111929 pat e f arg a) (@lem8315376 A B D P Q t'' _111929 pat e f arg a)). Qed.
Lemma lem8315378 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term2498 A B D P Q t'' _111929 pat e f arg) = (term2598 A B D P Q t'' _111929 pat e f arg).
Proof. exact (fun_ext (fun a : P => @lem8315377 A B D P Q t'' _111929 pat e f arg a)). Qed.
Lemma lem8315379 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8315380 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term2500 A B D P Q t'' _111929 pat e f arg) = (term2599 A B D P Q t'' _111929 pat e f arg).
Proof. exact (MK_COMB (@lem8315379 P) (@lem8315378 A B D P Q t'' _111929 pat e f arg)). Qed.
Lemma lem8315381 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term2502 A B D P Q t'' _111929 pat e f) = (term2600 A B D P Q t'' _111929 pat e f).
Proof. exact (fun_ext (fun arg : type1475 A P Q => @lem8315380 A B D P Q t'' _111929 pat e f arg)). Qed.
Lemma lem8315382 {A P Q : Type'} : (@all (P -> Q -> A)) = (@all (P -> Q -> A)).
Proof. exact (eq_refl (@all (P -> Q -> A))). Qed.
Lemma lem8315383 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term2504 A B D P Q t'' _111929 pat e f) = (term2601 A B D P Q t'' _111929 pat e f).
Proof. exact (MK_COMB (@lem8315382 A P Q) (@lem8315381 A B D P Q t'' _111929 pat e f)). Qed.
Lemma lem8315384 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term2506 A B D P Q t'' _111929 pat e) = (term2602 A B D P Q t'' _111929 pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8315383 A B D P Q t'' _111929 pat e f)). Qed.
Lemma lem8315385 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8315386 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term2508 A B D P Q t'' _111929 pat e) = (term2603 A B D P Q t'' _111929 pat e).
Proof. exact (MK_COMB (@lem8315385 A B) (@lem8315384 A B D P Q t'' _111929 pat e)). Qed.
Lemma lem8315387 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) : (term2510 A B D P Q t'' _111929 pat) = (term2604 A B D P Q t'' _111929 pat).
Proof. exact (fun_ext (fun e : P -> D => @lem8315386 A B D P Q t'' _111929 pat e)). Qed.
Lemma lem8315388 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8315389 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) : (term2511 A B D P Q t'' _111929 pat) = (term2605 A B D P Q t'' _111929 pat).
Proof. exact (MK_COMB (@lem8315388 D P) (@lem8315387 A B D P Q t'' _111929 pat)). Qed.
Lemma lem8315390 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) : (term2512 A B D P Q t'' _111929) = (term2606 A B D P Q t'' _111929).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8315389 A B D P Q t'' _111929 pat)). Qed.
Lemma lem8315391 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8315392 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) : (term2513 A B D P Q t'' _111929) = (term2607 A B D P Q t'' _111929).
Proof. exact (MK_COMB (@lem8315391 D Q) (@lem8315390 A B D P Q t'' _111929)). Qed.
Lemma lem8315415 {A B D P Q : Type'} (t : Q) (x : B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2592 A B D P Q t x t'' _111929 pat e f arg a) = (term2608 A B D P Q t x t'' _111929 pat e f arg a).
Proof. exact (@lem19490 ((term2478 A B D P Q t'' pat e f arg a) = (@I (P -> D) e a)) (term2489 A B D P Q pat e f arg a t x) ((term2473 A B D P Q t'' pat e f arg a) = (term2374 A B D P Q _111929 pat e f arg a))). Qed.
Lemma lem8315416 {A B D P Q : Type'} (x : B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2594 A B D P Q x t'' _111929 pat e f arg a) = (term2609 A B D P Q x t'' _111929 pat e f arg a).
Proof. exact (fun_ext (fun t : Q => @lem8315415 A B D P Q t x t'' _111929 pat e f arg a)). Qed.
Lemma lem8315417 {Q : Type'} : (@all Q) = (@all Q).
Proof. exact (eq_refl (@all Q)). Qed.
Lemma lem8315418 {A B D P Q : Type'} (x : B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2595 A B D P Q x t'' _111929 pat e f arg a) = (term2610 A B D P Q x t'' _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8315417 Q) (@lem8315416 A B D P Q x t'' _111929 pat e f arg a)). Qed.
Lemma lem8315419 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2596 A B D P Q t'' _111929 pat e f arg a) = (term2611 A B D P Q t'' _111929 pat e f arg a).
Proof. exact (fun_ext (fun x : B => @lem8315418 A B D P Q x t'' _111929 pat e f arg a)). Qed.
Lemma lem8315420 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8315421 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a : P) : (term2597 A B D P Q t'' _111929 pat e f arg a) = (term2612 A B D P Q t'' _111929 pat e f arg a).
Proof. exact (MK_COMB (@lem8315420 B) (@lem8315419 A B D P Q t'' _111929 pat e f arg a)). Qed.
Lemma lem8315422 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term2598 A B D P Q t'' _111929 pat e f arg) = (term2613 A B D P Q t'' _111929 pat e f arg).
Proof. exact (fun_ext (fun a : P => @lem8315421 A B D P Q t'' _111929 pat e f arg a)). Qed.
Lemma lem8315423 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8315424 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) : (term2599 A B D P Q t'' _111929 pat e f arg) = (term2614 A B D P Q t'' _111929 pat e f arg).
Proof. exact (MK_COMB (@lem8315423 P) (@lem8315422 A B D P Q t'' _111929 pat e f arg)). Qed.
Lemma lem8315425 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term2600 A B D P Q t'' _111929 pat e f) = (term2615 A B D P Q t'' _111929 pat e f).
Proof. exact (fun_ext (fun arg : type1475 A P Q => @lem8315424 A B D P Q t'' _111929 pat e f arg)). Qed.
Lemma lem8315426 {A P Q : Type'} : (@all (P -> Q -> A)) = (@all (P -> Q -> A)).
Proof. exact (eq_refl (@all (P -> Q -> A))). Qed.
Lemma lem8315427 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) : (term2601 A B D P Q t'' _111929 pat e f) = (term2616 A B D P Q t'' _111929 pat e f).
Proof. exact (MK_COMB (@lem8315426 A P Q) (@lem8315425 A B D P Q t'' _111929 pat e f)). Qed.
Lemma lem8315428 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term2602 A B D P Q t'' _111929 pat e) = (term2617 A B D P Q t'' _111929 pat e).
Proof. exact (fun_ext (fun f : A -> B => @lem8315427 A B D P Q t'' _111929 pat e f)). Qed.
Lemma lem8315429 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8315430 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) : (term2603 A B D P Q t'' _111929 pat e) = (term2618 A B D P Q t'' _111929 pat e).
Proof. exact (MK_COMB (@lem8315429 A B) (@lem8315428 A B D P Q t'' _111929 pat e)). Qed.
Lemma lem8315431 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) : (term2604 A B D P Q t'' _111929 pat) = (term2619 A B D P Q t'' _111929 pat).
Proof. exact (fun_ext (fun e : P -> D => @lem8315430 A B D P Q t'' _111929 pat e)). Qed.
Lemma lem8315432 {D P : Type'} : (@all (P -> D)) = (@all (P -> D)).
Proof. exact (eq_refl (@all (P -> D))). Qed.
Lemma lem8315433 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) : (term2605 A B D P Q t'' _111929 pat) = (term2620 A B D P Q t'' _111929 pat).
Proof. exact (MK_COMB (@lem8315432 D P) (@lem8315431 A B D P Q t'' _111929 pat)). Qed.
Lemma lem8315434 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) : (term2606 A B D P Q t'' _111929) = (term2621 A B D P Q t'' _111929).
Proof. exact (fun_ext (fun pat : Q -> D => @lem8315433 A B D P Q t'' _111929 pat)). Qed.
Lemma lem8315435 {D Q : Type'} : (@all (Q -> D)) = (@all (Q -> D)).
Proof. exact (eq_refl (@all (Q -> D))). Qed.
Lemma lem8315436 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) : (term2607 A B D P Q t'' _111929) = (term2622 A B D P Q t'' _111929).
Proof. exact (MK_COMB (@lem8315435 D Q) (@lem8315434 A B D P Q t'' _111929)). Qed.
Lemma lem8315437 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) : (term2513 A B D P Q t'' _111929) = (term2622 A B D P Q t'' _111929).
Proof. exact (TRANS (@lem8315392 A B D P Q t'' _111929) (@lem8315436 A B D P Q t'' _111929)). Qed.
Lemma lem8315438 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2622 A B D P Q t'' _111929.
Proof. exact (EQ_MP (@lem8315437 A B D P Q t'' _111929) (@lem8313366 A B D P Q t'' _111929 h1)). Qed.
Lemma lem8315451 {D P Q : Type'} (_111931 : Q -> D) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2623 D P Q _111928 _111931.
Proof. exact (@lem8313450 D P Q _111928 h1 _111931). Qed.
Lemma lem8315452 {D P Q : Type'} (_111928 : type886 D P Q) (_111931 : Q -> D) : (term2623 D P Q _111928 _111931) = (term2531 D P Q _111928 _111931).
Proof. exact (eq_refl (term2623 D P Q _111928 _111931)). Qed.
Lemma lem8315453 {D P Q : Type'} (_111931 : Q -> D) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2531 D P Q _111928 _111931.
Proof. exact (EQ_MP (@lem8315452 D P Q _111928 _111931) (@lem8315451 D P Q _111931 _111928 h1)). Qed.
Lemma lem8315454 {D P Q : Type'} (_111931 : Q -> D) (_111932 : P -> D) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2624 D P Q _111928 _111931 _111932.
Proof. exact (@lem8315453 D P Q _111931 _111928 h1 _111932). Qed.
Lemma lem8315455 {D P Q : Type'} (_111928 : type886 D P Q) (_111931 : Q -> D) (_111932 : P -> D) : (term2624 D P Q _111928 _111931 _111932) = (term2529 D P Q _111928 _111931 _111932).
Proof. exact (eq_refl (term2624 D P Q _111928 _111931 _111932)). Qed.
Lemma lem8315456 {D P Q : Type'} (_111931 : Q -> D) (_111932 : P -> D) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2529 D P Q _111928 _111931 _111932.
Proof. exact (EQ_MP (@lem8315455 D P Q _111928 _111931 _111932) (@lem8315454 D P Q _111931 _111932 _111928 h1)). Qed.
Lemma lem8315457 {D P Q : Type'} (_111931 : Q -> D) (_111932 : P -> D) (_111933 : P) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2625 D P Q _111928 _111931 _111932 _111933.
Proof. exact (@lem8315456 D P Q _111931 _111932 _111928 h1 _111933). Qed.
Lemma lem8315458 {D P Q : Type'} (_111928 : type886 D P Q) (_111931 : Q -> D) (_111932 : P -> D) (_111933 : P) : (term2625 D P Q _111928 _111931 _111932 _111933) = (term2527 D P Q _111928 _111931 _111932 _111933).
Proof. exact (eq_refl (term2625 D P Q _111928 _111931 _111932 _111933)). Qed.
Lemma lem8315459 {D P Q : Type'} (_111931 : Q -> D) (_111932 : P -> D) (_111933 : P) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2527 D P Q _111928 _111931 _111932 _111933.
Proof. exact (EQ_MP (@lem8315458 D P Q _111928 _111931 _111932 _111933) (@lem8315457 D P Q _111931 _111932 _111933 _111928 h1)). Qed.
Lemma lem8315460 {D P Q : Type'} (_111931 : Q -> D) (_111932 : P -> D) (_111933 : P) (_111934 : Q) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2626 D P Q _111928 _111931 _111932 _111933 _111934.
Proof. exact (@lem8315459 D P Q _111931 _111932 _111933 _111928 h1 _111934). Qed.
Lemma lem8315461 {D P Q : Type'} (_111934 : Q) (_111928 : type886 D P Q) (_111931 : Q -> D) (_111932 : P -> D) (_111933 : P) : (term2626 D P Q _111928 _111931 _111932 _111933 _111934) = (term2524 D P Q _111934 _111928 _111931 _111932 _111933).
Proof. exact (eq_refl (term2626 D P Q _111928 _111931 _111932 _111933 _111934)). Qed.
Lemma lem8315475 {A B D P Q : Type'} (_111939 : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term35 A B D P Q p pat e arg lt2 s) : term2627 A B D P Q p pat e arg lt2 s _111939.
Proof. exact (@lem8313546 A B D P Q p pat e arg lt2 s h1 _111939). Qed.
Lemma lem8315476 {A B D P Q : Type'} (p : type560 A B P) (_111939 : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) : (term2627 A B D P Q p pat e arg lt2 s _111939) = (term2549 A B D P Q p _111939 pat e arg lt2 s).
Proof. exact (eq_refl (term2627 A B D P Q p pat e arg lt2 s _111939)). Qed.
Lemma lem8315477 {A B D P Q : Type'} (_111939 : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term35 A B D P Q p pat e arg lt2 s) : term2549 A B D P Q p _111939 pat e arg lt2 s.
Proof. exact (EQ_MP (@lem8315476 A B D P Q p _111939 pat e arg lt2 s) (@lem8315475 A B D P Q _111939 p pat e arg lt2 s h1)). Qed.
Lemma lem8315478 {A B D P Q : Type'} (_111939 : A -> B) (_111940 : P) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term35 A B D P Q p pat e arg lt2 s) : term2628 A B D P Q p _111939 pat e arg lt2 s _111940.
Proof. exact (@lem8315477 A B D P Q _111939 p pat e arg lt2 s h1 _111940). Qed.
Lemma lem8315479 {A B D P Q : Type'} (p : type560 A B P) (_111939 : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (_111940 : P) : (term2628 A B D P Q p _111939 pat e arg lt2 s _111940) = (term2547 A B D P Q p _111939 pat e arg lt2 s _111940).
Proof. exact (eq_refl (term2628 A B D P Q p _111939 pat e arg lt2 s _111940)). Qed.
Lemma lem8315480 {A B D P Q : Type'} (_111939 : A -> B) (_111940 : P) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term35 A B D P Q p pat e arg lt2 s) : term2547 A B D P Q p _111939 pat e arg lt2 s _111940.
Proof. exact (EQ_MP (@lem8315479 A B D P Q p _111939 pat e arg lt2 s _111940) (@lem8315478 A B D P Q _111939 _111940 p pat e arg lt2 s h1)). Qed.
Lemma lem8315481 {A B D P Q : Type'} (_111939 : A -> B) (_111940 : P) (_111941 : Q) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term35 A B D P Q p pat e arg lt2 s) : term2629 A B D P Q p _111939 pat e arg lt2 s _111940 _111941.
Proof. exact (@lem8315480 A B D P Q _111939 _111940 p pat e arg lt2 s h1 _111941). Qed.
Lemma lem8315482 {A B D P Q : Type'} (p : type560 A B P) (_111939 : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (_111941 : Q) (lt2 : type1402 A) (s : P -> A) (_111940 : P) : (term2629 A B D P Q p _111939 pat e arg lt2 s _111940 _111941) = (term2545 A B D P Q p _111939 pat e arg _111941 lt2 s _111940).
Proof. exact (eq_refl (term2629 A B D P Q p _111939 pat e arg lt2 s _111940 _111941)). Qed.
Lemma lem8315483 {A B D P Q : Type'} (_111939 : A -> B) (_111941 : Q) (_111940 : P) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term35 A B D P Q p pat e arg lt2 s) : term2545 A B D P Q p _111939 pat e arg _111941 lt2 s _111940.
Proof. exact (EQ_MP (@lem8315482 A B D P Q p _111939 pat e arg _111941 lt2 s _111940) (@lem8315481 A B D P Q _111939 _111940 _111941 p pat e arg lt2 s h1)). Qed.
Lemma lem8315484 {A B D P Q : Type'} (_111939 : A -> B) (_111941 : Q) (_111940 : P) (_111942 : A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term35 A B D P Q p pat e arg lt2 s) : term2630 A B D P Q p _111939 pat e arg _111941 lt2 s _111940 _111942.
Proof. exact (@lem8315483 A B D P Q _111939 _111941 _111940 p pat e arg lt2 s h1 _111942). Qed.
Lemma lem8315485 {A B D P Q : Type'} (p : type560 A B P) (_111939 : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (_111941 : Q) (lt2 : type1402 A) (_111942 : A) (s : P -> A) (_111940 : P) : (term2630 A B D P Q p _111939 pat e arg _111941 lt2 s _111940 _111942) = (term2542 A B D P Q p _111939 pat e arg _111941 lt2 _111942 s _111940).
Proof. exact (eq_refl (term2630 A B D P Q p _111939 pat e arg _111941 lt2 s _111940 _111942)). Qed.
Lemma lem8315486 {A B D P Q : Type'} (_111939 : A -> B) (_111941 : Q) (_111942 : A) (_111940 : P) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term35 A B D P Q p pat e arg lt2 s) : term2542 A B D P Q p _111939 pat e arg _111941 lt2 _111942 s _111940.
Proof. exact (EQ_MP (@lem8315485 A B D P Q p _111939 pat e arg _111941 lt2 _111942 s _111940) (@lem8315484 A B D P Q _111939 _111941 _111940 _111942 p pat e arg lt2 s h1)). Qed.
Lemma lem8315553 {A B P : Type'} (_111965 : A -> B) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2631 A B P lt2 s z p _111965.
Proof. exact (@lem8313939 A B P lt2 s z p h1 _111965). Qed.
Lemma lem8315554 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (_111965 : A -> B) (p : type560 A B P) : (term2631 A B P lt2 s z p _111965) = (term2563 A B P lt2 s z _111965 p).
Proof. exact (eq_refl (term2631 A B P lt2 s z p _111965)). Qed.
Lemma lem8315555 {A B P : Type'} (_111965 : A -> B) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2563 A B P lt2 s z _111965 p.
Proof. exact (EQ_MP (@lem8315554 A B P lt2 s z _111965 p) (@lem8315553 A B P _111965 lt2 s z p h1)). Qed.
Lemma lem8315556 {A B P : Type'} (_111965 : A -> B) (_111966 : A -> B) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2632 A B P lt2 s z _111965 p _111966.
Proof. exact (@lem8315555 A B P _111965 lt2 s z p h1 _111966). Qed.
Lemma lem8315557 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (_111965 : A -> B) (p : type560 A B P) (_111966 : A -> B) : (term2632 A B P lt2 s z _111965 p _111966) = (term2561 A B P lt2 s z _111965 p _111966).
Proof. exact (eq_refl (term2632 A B P lt2 s z _111965 p _111966)). Qed.
Lemma lem8315558 {A B P : Type'} (_111965 : A -> B) (_111966 : A -> B) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2561 A B P lt2 s z _111965 p _111966.
Proof. exact (EQ_MP (@lem8315557 A B P lt2 s z _111965 p _111966) (@lem8315556 A B P _111965 _111966 lt2 s z p h1)). Qed.
Lemma lem8315559 {A B P : Type'} (_111965 : A -> B) (_111966 : A -> B) (_111967 : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2633 A B P lt2 s z _111965 p _111966 _111967.
Proof. exact (@lem8315558 A B P _111965 _111966 lt2 s z p h1 _111967). Qed.
Lemma lem8315560 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (_111965 : A -> B) (p : type560 A B P) (_111966 : A -> B) (_111967 : P) : (term2633 A B P lt2 s z _111965 p _111966 _111967) = (term2559 A B P lt2 s z _111965 p _111966 _111967).
Proof. exact (eq_refl (term2633 A B P lt2 s z _111965 p _111966 _111967)). Qed.
Lemma lem8315561 {A B P : Type'} (_111965 : A -> B) (_111966 : A -> B) (_111967 : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2559 A B P lt2 s z _111965 p _111966 _111967.
Proof. exact (EQ_MP (@lem8315560 A B P lt2 s z _111965 p _111966 _111967) (@lem8315559 A B P _111965 _111966 _111967 lt2 s z p h1)). Qed.
Lemma lem8315583 {A B D P Q : Type'} (_111975 : A) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2403 A B D P Q lt2 s f p g pat t' e a') : term2634 A B P lt2 s a' f g _111975.
Proof. exact (@lem8314065 A B D P Q lt2 s f p g pat t' e a' h1 _111975). Qed.
Lemma lem8315584 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a' : P) (f : A -> B) (g : A -> B) (_111975 : A) : (term2634 A B P lt2 s a' f g _111975) = (term2399 A B P lt2 s a' f g _111975).
Proof. exact (eq_refl (term2634 A B P lt2 s a' f g _111975)). Qed.
Lemma lem8315655 {D P Q : Type'} (_111999 : Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') : term2516 D P Q pat e a' _111999.
Proof. exact (@lem8314425 D P Q pat e a' h1 _111999). Qed.
Lemma lem8315656 {D P Q : Type'} (pat : Q -> D) (_111999 : Q) (e : P -> D) (a' : P) : (term2516 D P Q pat e a' _111999) = (term2319 D P Q pat _111999 e a').
Proof. exact (eq_refl (term2516 D P Q pat e a' _111999)). Qed.
Lemma lem8315694 {A B P : Type'} (_112012 : A -> B) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2631 A B P lt2 s z p _112012.
Proof. exact (@lem8314632 A B P lt2 s z p h1 _112012). Qed.
Lemma lem8315695 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (_112012 : A -> B) (p : type560 A B P) : (term2631 A B P lt2 s z p _112012) = (term2563 A B P lt2 s z _112012 p).
Proof. exact (eq_refl (term2631 A B P lt2 s z p _112012)). Qed.
Lemma lem8315696 {A B P : Type'} (_112012 : A -> B) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2563 A B P lt2 s z _112012 p.
Proof. exact (EQ_MP (@lem8315695 A B P lt2 s z _112012 p) (@lem8315694 A B P _112012 lt2 s z p h1)). Qed.
Lemma lem8315697 {A B P : Type'} (_112012 : A -> B) (_112013 : A -> B) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2632 A B P lt2 s z _112012 p _112013.
Proof. exact (@lem8315696 A B P _112012 lt2 s z p h1 _112013). Qed.
Lemma lem8315698 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (_112012 : A -> B) (p : type560 A B P) (_112013 : A -> B) : (term2632 A B P lt2 s z _112012 p _112013) = (term2561 A B P lt2 s z _112012 p _112013).
Proof. exact (eq_refl (term2632 A B P lt2 s z _112012 p _112013)). Qed.
Lemma lem8315699 {A B P : Type'} (_112012 : A -> B) (_112013 : A -> B) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2561 A B P lt2 s z _112012 p _112013.
Proof. exact (EQ_MP (@lem8315698 A B P lt2 s z _112012 p _112013) (@lem8315697 A B P _112012 _112013 lt2 s z p h1)). Qed.
Lemma lem8315700 {A B P : Type'} (_112012 : A -> B) (_112013 : A -> B) (_112014 : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2633 A B P lt2 s z _112012 p _112013 _112014.
Proof. exact (@lem8315699 A B P _112012 _112013 lt2 s z p h1 _112014). Qed.
Lemma lem8315701 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (_112012 : A -> B) (p : type560 A B P) (_112013 : A -> B) (_112014 : P) : (term2633 A B P lt2 s z _112012 p _112013 _112014) = (term2559 A B P lt2 s z _112012 p _112013 _112014).
Proof. exact (eq_refl (term2633 A B P lt2 s z _112012 p _112013 _112014)). Qed.
Lemma lem8315702 {A B P : Type'} (_112012 : A -> B) (_112013 : A -> B) (_112014 : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2559 A B P lt2 s z _112012 p _112013 _112014.
Proof. exact (EQ_MP (@lem8315701 A B P lt2 s z _112012 p _112013 _112014) (@lem8315700 A B P _112012 _112013 _112014 lt2 s z p h1)). Qed.
Lemma lem8315724 {A B D P Q : Type'} (_112022 : A) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2403 A B D P Q lt2 s f p g pat t' e a') : term2634 A B P lt2 s a' f g _112022.
Proof. exact (@lem8314758 A B D P Q lt2 s f p g pat t' e a' h1 _112022). Qed.
Lemma lem8315725 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a' : P) (f : A -> B) (g : A -> B) (_112022 : A) : (term2634 A B P lt2 s a' f g _112022) = (term2399 A B P lt2 s a' f g _112022).
Proof. exact (eq_refl (term2634 A B P lt2 s a' f g _112022)). Qed.
Lemma lem8315796 {D P Q : Type'} (_112046 : Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') : term2516 D P Q pat e a' _112046.
Proof. exact (@lem8315118 D P Q pat e a' h1 _112046). Qed.
Lemma lem8315797 {D P Q : Type'} (pat : Q -> D) (_112046 : Q) (e : P -> D) (a' : P) : (term2516 D P Q pat e a' _112046) = (term2319 D P Q pat _112046 e a').
Proof. exact (eq_refl (term2516 D P Q pat e a' _112046)). Qed.
Lemma lem8315799 {D P Q : Type'} (_112047 : Q -> D) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2623 D P Q _111928 _112047.
Proof. exact (@lem8315172 D P Q _111928 h1 _112047). Qed.
Lemma lem8315800 {D P Q : Type'} (_111928 : type886 D P Q) (_112047 : Q -> D) : (term2623 D P Q _111928 _112047) = (term2531 D P Q _111928 _112047).
Proof. exact (eq_refl (term2623 D P Q _111928 _112047)). Qed.
Lemma lem8315801 {D P Q : Type'} (_112047 : Q -> D) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2531 D P Q _111928 _112047.
Proof. exact (EQ_MP (@lem8315800 D P Q _111928 _112047) (@lem8315799 D P Q _112047 _111928 h1)). Qed.
Lemma lem8315802 {D P Q : Type'} (_112047 : Q -> D) (_112048 : P -> D) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2624 D P Q _111928 _112047 _112048.
Proof. exact (@lem8315801 D P Q _112047 _111928 h1 _112048). Qed.
Lemma lem8315803 {D P Q : Type'} (_111928 : type886 D P Q) (_112047 : Q -> D) (_112048 : P -> D) : (term2624 D P Q _111928 _112047 _112048) = (term2529 D P Q _111928 _112047 _112048).
Proof. exact (eq_refl (term2624 D P Q _111928 _112047 _112048)). Qed.
Lemma lem8315804 {D P Q : Type'} (_112047 : Q -> D) (_112048 : P -> D) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2529 D P Q _111928 _112047 _112048.
Proof. exact (EQ_MP (@lem8315803 D P Q _111928 _112047 _112048) (@lem8315802 D P Q _112047 _112048 _111928 h1)). Qed.
Lemma lem8315805 {D P Q : Type'} (_112047 : Q -> D) (_112048 : P -> D) (_112049 : P) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2625 D P Q _111928 _112047 _112048 _112049.
Proof. exact (@lem8315804 D P Q _112047 _112048 _111928 h1 _112049). Qed.
Lemma lem8315806 {D P Q : Type'} (_111928 : type886 D P Q) (_112047 : Q -> D) (_112048 : P -> D) (_112049 : P) : (term2625 D P Q _111928 _112047 _112048 _112049) = (term2527 D P Q _111928 _112047 _112048 _112049).
Proof. exact (eq_refl (term2625 D P Q _111928 _112047 _112048 _112049)). Qed.
Lemma lem8315807 {D P Q : Type'} (_112047 : Q -> D) (_112048 : P -> D) (_112049 : P) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2527 D P Q _111928 _112047 _112048 _112049.
Proof. exact (EQ_MP (@lem8315806 D P Q _111928 _112047 _112048 _112049) (@lem8315805 D P Q _112047 _112048 _112049 _111928 h1)). Qed.
Lemma lem8315808 {D P Q : Type'} (_112047 : Q -> D) (_112048 : P -> D) (_112049 : P) (_112050 : Q) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2626 D P Q _111928 _112047 _112048 _112049 _112050.
Proof. exact (@lem8315807 D P Q _112047 _112048 _112049 _111928 h1 _112050). Qed.
Lemma lem8315809 {D P Q : Type'} (_112050 : Q) (_111928 : type886 D P Q) (_112047 : Q -> D) (_112048 : P -> D) (_112049 : P) : (term2626 D P Q _111928 _112047 _112048 _112049 _112050) = (term2524 D P Q _112050 _111928 _112047 _112048 _112049).
Proof. exact (eq_refl (term2626 D P Q _111928 _112047 _112048 _112049 _112050)). Qed.
Lemma lem8315811 {A B D P Q : Type'} (_112051 : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term2635 A B D P Q p pat e arg _112051.
Proof. exact (@lem8315206 A B D P Q p pat e arg h1 _112051). Qed.
Lemma lem8315812 {A B D P Q : Type'} (p : type560 A B P) (_112051 : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : (term2635 A B D P Q p pat e arg _112051) = (term2343 A B D P Q p _112051 pat e arg).
Proof. exact (eq_refl (term2635 A B D P Q p pat e arg _112051)). Qed.
Lemma lem8315813 {A B D P Q : Type'} (_112051 : A -> B) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term2343 A B D P Q p _112051 pat e arg.
Proof. exact (EQ_MP (@lem8315812 A B D P Q p _112051 pat e arg) (@lem8315811 A B D P Q _112051 p pat e arg h1)). Qed.
Lemma lem8315814 {A B D P Q : Type'} (_112051 : A -> B) (_112052 : P) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term2636 A B D P Q p _112051 pat e arg _112052.
Proof. exact (@lem8315813 A B D P Q _112051 p pat e arg h1 _112052). Qed.
Lemma lem8315815 {A B D P Q : Type'} (p : type560 A B P) (_112051 : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (_112052 : P) : (term2636 A B D P Q p _112051 pat e arg _112052) = (term2341 A B D P Q p _112051 pat e arg _112052).
Proof. exact (eq_refl (term2636 A B D P Q p _112051 pat e arg _112052)). Qed.
Lemma lem8315816 {A B D P Q : Type'} (_112051 : A -> B) (_112052 : P) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term2341 A B D P Q p _112051 pat e arg _112052.
Proof. exact (EQ_MP (@lem8315815 A B D P Q p _112051 pat e arg _112052) (@lem8315814 A B D P Q _112051 _112052 p pat e arg h1)). Qed.
Lemma lem8315817 {A B D P Q : Type'} (_112051 : A -> B) (_112052 : P) (_112053 : Q) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term2637 A B D P Q p _112051 pat e arg _112052 _112053.
Proof. exact (@lem8315816 A B D P Q _112051 _112052 p pat e arg h1 _112053). Qed.
Lemma lem8315818 {A B D P Q : Type'} (p : type560 A B P) (_112051 : A -> B) (pat : Q -> D) (e : P -> D) (_112053 : Q) (arg : type1475 A P Q) (_112052 : P) : (term2637 A B D P Q p _112051 pat e arg _112052 _112053) = (term2339 A B D P Q p _112051 pat e _112053 arg _112052).
Proof. exact (eq_refl (term2637 A B D P Q p _112051 pat e arg _112052 _112053)). Qed.
Lemma lem8315819 {A B D P Q : Type'} (_112051 : A -> B) (_112053 : Q) (_112052 : P) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term2339 A B D P Q p _112051 pat e _112053 arg _112052.
Proof. exact (EQ_MP (@lem8315818 A B D P Q p _112051 pat e _112053 arg _112052) (@lem8315817 A B D P Q _112051 _112052 _112053 p pat e arg h1)). Qed.
Lemma lem8315820 {A B D P Q : Type'} (_112051 : A -> B) (_112053 : Q) (_112052 : P) (_112054 : Q) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term2638 A B D P Q p _112051 pat e _112053 arg _112052 _112054.
Proof. exact (@lem8315819 A B D P Q _112051 _112053 _112052 p pat e arg h1 _112054). Qed.
Lemma lem8315821 {A B D P Q : Type'} (p : type560 A B P) (_112051 : A -> B) (pat : Q -> D) (e : P -> D) (_112053 : Q) (arg : type1475 A P Q) (_112052 : P) (_112054 : Q) : (term2638 A B D P Q p _112051 pat e _112053 arg _112052 _112054) = (term2337 A B D P Q p _112051 pat e _112053 arg _112052 _112054).
Proof. exact (eq_refl (term2638 A B D P Q p _112051 pat e _112053 arg _112052 _112054)). Qed.
Lemma lem8315822 {A B D P Q : Type'} (_112051 : A -> B) (_112053 : Q) (_112052 : P) (_112054 : Q) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term2337 A B D P Q p _112051 pat e _112053 arg _112052 _112054.
Proof. exact (EQ_MP (@lem8315821 A B D P Q p _112051 pat e _112053 arg _112052 _112054) (@lem8315820 A B D P Q _112051 _112053 _112052 _112054 p pat e arg h1)). Qed.
Lemma lem8315844 {A B D P Q : Type'} (_112062 : Q -> D) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2639 A B D P Q t'' _111929 _112062.
Proof. exact (@lem8315438 A B D P Q t'' _111929 h1 _112062). Qed.
Lemma lem8315845 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112062 : Q -> D) : (term2639 A B D P Q t'' _111929 _112062) = (term2620 A B D P Q t'' _111929 _112062).
Proof. exact (eq_refl (term2639 A B D P Q t'' _111929 _112062)). Qed.
Lemma lem8315846 {A B D P Q : Type'} (_112062 : Q -> D) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2620 A B D P Q t'' _111929 _112062.
Proof. exact (EQ_MP (@lem8315845 A B D P Q t'' _111929 _112062) (@lem8315844 A B D P Q _112062 t'' _111929 h1)). Qed.
Lemma lem8315847 {A B D P Q : Type'} (_112062 : Q -> D) (_112063 : P -> D) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2640 A B D P Q t'' _111929 _112062 _112063.
Proof. exact (@lem8315846 A B D P Q _112062 t'' _111929 h1 _112063). Qed.
Lemma lem8315848 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112062 : Q -> D) (_112063 : P -> D) : (term2640 A B D P Q t'' _111929 _112062 _112063) = (term2618 A B D P Q t'' _111929 _112062 _112063).
Proof. exact (eq_refl (term2640 A B D P Q t'' _111929 _112062 _112063)). Qed.
Lemma lem8315849 {A B D P Q : Type'} (_112062 : Q -> D) (_112063 : P -> D) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2618 A B D P Q t'' _111929 _112062 _112063.
Proof. exact (EQ_MP (@lem8315848 A B D P Q t'' _111929 _112062 _112063) (@lem8315847 A B D P Q _112062 _112063 t'' _111929 h1)). Qed.
Lemma lem8315850 {A B D P Q : Type'} (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2641 A B D P Q t'' _111929 _112062 _112063 _112064.
Proof. exact (@lem8315849 A B D P Q _112062 _112063 t'' _111929 h1 _112064). Qed.
Lemma lem8315851 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) : (term2641 A B D P Q t'' _111929 _112062 _112063 _112064) = (term2616 A B D P Q t'' _111929 _112062 _112063 _112064).
Proof. exact (eq_refl (term2641 A B D P Q t'' _111929 _112062 _112063 _112064)). Qed.
Lemma lem8315852 {A B D P Q : Type'} (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2616 A B D P Q t'' _111929 _112062 _112063 _112064.
Proof. exact (EQ_MP (@lem8315851 A B D P Q t'' _111929 _112062 _112063 _112064) (@lem8315850 A B D P Q _112062 _112063 _112064 t'' _111929 h1)). Qed.
Lemma lem8315853 {A B D P Q : Type'} (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2642 A B D P Q t'' _111929 _112062 _112063 _112064 _112065.
Proof. exact (@lem8315852 A B D P Q _112062 _112063 _112064 t'' _111929 h1 _112065). Qed.
Lemma lem8315854 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) : (term2642 A B D P Q t'' _111929 _112062 _112063 _112064 _112065) = (term2614 A B D P Q t'' _111929 _112062 _112063 _112064 _112065).
Proof. exact (eq_refl (term2642 A B D P Q t'' _111929 _112062 _112063 _112064 _112065)). Qed.
Lemma lem8315855 {A B D P Q : Type'} (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2614 A B D P Q t'' _111929 _112062 _112063 _112064 _112065.
Proof. exact (EQ_MP (@lem8315854 A B D P Q t'' _111929 _112062 _112063 _112064 _112065) (@lem8315853 A B D P Q _112062 _112063 _112064 _112065 t'' _111929 h1)). Qed.
Lemma lem8315856 {A B D P Q : Type'} (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2643 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066.
Proof. exact (@lem8315855 A B D P Q _112062 _112063 _112064 _112065 t'' _111929 h1 _112066). Qed.
Lemma lem8315857 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) : (term2643 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066) = (term2612 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066).
Proof. exact (eq_refl (term2643 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066)). Qed.
Lemma lem8315858 {A B D P Q : Type'} (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2612 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066.
Proof. exact (EQ_MP (@lem8315857 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066) (@lem8315856 A B D P Q _112062 _112063 _112064 _112065 _112066 t'' _111929 h1)). Qed.
Lemma lem8315859 {A B D P Q : Type'} (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (_112067 : B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2644 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066 _112067.
Proof. exact (@lem8315858 A B D P Q _112062 _112063 _112064 _112065 _112066 t'' _111929 h1 _112067). Qed.
Lemma lem8315860 {A B D P Q : Type'} (_112067 : B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) : (term2644 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066 _112067) = (term2610 A B D P Q _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066).
Proof. exact (eq_refl (term2644 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066 _112067)). Qed.
Lemma lem8315861 {A B D P Q : Type'} (_112067 : B) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2610 A B D P Q _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066.
Proof. exact (EQ_MP (@lem8315860 A B D P Q _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066) (@lem8315859 A B D P Q _112062 _112063 _112064 _112065 _112066 _112067 t'' _111929 h1)). Qed.
Lemma lem8315862 {A B D P Q : Type'} (_112067 : B) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (_112068 : Q) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2645 A B D P Q _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066 _112068.
Proof. exact (@lem8315861 A B D P Q _112067 _112062 _112063 _112064 _112065 _112066 t'' _111929 h1 _112068). Qed.
Lemma lem8315863 {A B D P Q : Type'} (_112068 : Q) (_112067 : B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) : (term2645 A B D P Q _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066 _112068) = (term2608 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066).
Proof. exact (eq_refl (term2645 A B D P Q _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066 _112068)). Qed.
Lemma lem8315864 {A B D P Q : Type'} (_112068 : Q) (_112067 : B) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2608 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066.
Proof. exact (EQ_MP (@lem8315863 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066) (@lem8315862 A B D P Q _112067 _112062 _112063 _112064 _112065 _112066 _112068 t'' _111929 h1)). Qed.
Lemma lem8315875 {A B P : Type'} (_111965 : A -> B) (_111966 : A -> B) (_111967 : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2554 A B P lt2 s z _111965 p _111966 _111967.
Proof. exact (proj2 (@lem8315561 A B P _111965 _111966 _111967 lt2 s z p h1)). Qed.
Lemma lem8315892 {A B P : Type'} (_112012 : A -> B) (_112013 : A -> B) (_112014 : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2556 A B P lt2 s z _112012 p _112013 _112014.
Proof. exact (proj1 (@lem8315702 A B P _112012 _112013 _112014 lt2 s z p h1)). Qed.
Lemma lem8315905 {A B D P Q : Type'} (_112068 : Q) (_112067 : B) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2646 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066.
Proof. exact (proj2 (@lem8315864 A B D P Q _112068 _112067 _112062 _112063 _112064 _112065 _112066 t'' _111929 h1)). Qed.
Lemma lem8315906 {A B D P Q : Type'} (_112068 : Q) (_112067 : B) (_112062 : Q -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112063 : P -> D) (_112066 : P) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2647 A B D P Q _112068 _112067 t'' _112062 _112064 _112065 _112063 _112066.
Proof. exact (proj1 (@lem8315864 A B D P Q _112068 _112067 _112062 _112063 _112064 _112065 _112066 t'' _111929 h1)). Qed.
Lemma lem8315918 {D P Q : Type'} (_111934 : Q) (_111931 : Q -> D) (_111932 : P -> D) (_111933 : P) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2524 D P Q _111934 _111928 _111931 _111932 _111933.
Proof. exact (EQ_MP (@lem8315461 D P Q _111934 _111928 _111931 _111932 _111933) (@lem8315460 D P Q _111931 _111932 _111933 _111934 _111928 h1)). Qed.
Lemma lem8315951 {A B D P Q : Type'} (p : type560 A B P) (_111939 : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (_111941 : Q) (lt2 : type1402 A) (_111942 : A) (s : P -> A) (_111940 : P) : (term2542 A B D P Q p _111939 pat e arg _111941 lt2 _111942 s _111940) = (term2648 A B D P Q p _111939 pat e arg _111941 lt2 _111942 s _111940).
Proof. exact (@lem8291653 (term866 A B P p _111939 _111940) (term2319 D P Q pat _111941 e _111940) (term2356 A P Q arg _111941 lt2 _111942 s _111940)). Qed.
Lemma lem8315952 {A B D P Q : Type'} (_111939 : A -> B) (_111941 : Q) (_111942 : A) (_111940 : P) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term35 A B D P Q p pat e arg lt2 s) : term2648 A B D P Q p _111939 pat e arg _111941 lt2 _111942 s _111940.
Proof. exact (EQ_MP (@lem8315951 A B D P Q p _111939 pat e arg _111941 lt2 _111942 s _111940) (@lem8315486 A B D P Q _111939 _111941 _111942 _111940 p pat e arg lt2 s h1)). Qed.
Lemma lem8315954 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : term2396 A P lt2 y s a.
Proof. exact (proj2 (@lem8313367 A B D P Q p f t arg _111928 pat e lt2 y s a h1)). Qed.
Lemma lem8316070 {A B D P Q : Type'} (_111975 : A) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2403 A B D P Q lt2 s f p g pat t' e a') : term2399 A B P lt2 s a' f g _111975.
Proof. exact (EQ_MP (@lem8315584 A B P lt2 s a' f g _111975) (@lem8315583 A B D P Q _111975 lt2 s f p g pat t' e a' h1)). Qed.
Lemma lem8316076 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a' : P) (h1 : term866 A B P p g a') : term866 A B P p g a'.
Proof. exact (h1). Qed.
Lemma lem8316110 {A B P : Type'} (_111965 : A -> B) (_111966 : A -> B) (_111967 : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2649 A B P lt2 z s _111965 p _111966 _111967.
Proof. exact (proj1 (@lem8315875 A B P _111965 _111966 _111967 lt2 s z p h1)). Qed.
Lemma lem8316120 {A B P : Type'} (_111965 : A -> B) (_111966 : A -> B) (_111967 : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2650 A B P z _111965 p _111966 _111967.
Proof. exact (proj2 (@lem8315875 A B P _111965 _111966 _111967 lt2 s z p h1)). Qed.
Lemma lem8316192 {D P Q : Type'} (_111999 : Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') : term2319 D P Q pat _111999 e a'.
Proof. exact (EQ_MP (@lem8315656 D P Q pat _111999 e a') (@lem8315655 D P Q _111999 pat e a' h1)). Qed.
Lemma lem8316302 {A B D P Q : Type'} (_112022 : A) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2403 A B D P Q lt2 s f p g pat t' e a') : term2399 A B P lt2 s a' f g _112022.
Proof. exact (EQ_MP (@lem8315725 A B P lt2 s a' f g _112022) (@lem8315724 A B D P Q _112022 lt2 s f p g pat t' e a' h1)). Qed.
Lemma lem8316308 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) (h1 : term866 A B P p f a') : term866 A B P p f a'.
Proof. exact (h1). Qed.
Lemma lem8316362 {A B P : Type'} (_112012 : A -> B) (_112013 : A -> B) (_112014 : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2651 A B P lt2 z s _112012 p _112013 _112014.
Proof. exact (proj1 (@lem8315892 A B P _112012 _112013 _112014 lt2 s z p h1)). Qed.
Lemma lem8316372 {A B P : Type'} (_112012 : A -> B) (_112013 : A -> B) (_112014 : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2652 A B P z _112012 p _112013 _112014.
Proof. exact (proj2 (@lem8315892 A B P _112012 _112013 _112014 lt2 s z p h1)). Qed.
Lemma lem8316424 {D P Q : Type'} (_112046 : Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') : term2319 D P Q pat _112046 e a'.
Proof. exact (EQ_MP (@lem8315797 D P Q pat _112046 e a') (@lem8315796 D P Q _112046 pat e a' h1)). Qed.
Lemma lem8316494 {D P Q : Type'} (_112050 : Q) (_112047 : Q -> D) (_112048 : P -> D) (_112049 : P) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2524 D P Q _112050 _111928 _112047 _112048 _112049.
Proof. exact (EQ_MP (@lem8315809 D P Q _112050 _111928 _112047 _112048 _112049) (@lem8315808 D P Q _112047 _112048 _112049 _112050 _111928 h1)). Qed.
Lemma lem8316498 {A B D P Q : Type'} (p : type560 A B P) (_112051 : A -> B) (pat : Q -> D) (e : P -> D) (_112053 : Q) (arg : type1475 A P Q) (_112052 : P) (_112054 : Q) : (term2337 A B D P Q p _112051 pat e _112053 arg _112052 _112054) = (term2653 A B D P Q p _112051 pat e _112053 arg _112052 _112054).
Proof. exact (@lem8291653 (term866 A B P p _112051 _112052) (term2334 D P Q _112053 pat _112054 e _112052) ((term2330 A P Q arg _112052 _112053) = (term2330 A P Q arg _112052 _112054))). Qed.
Lemma lem8316505 {A D P Q : Type'} (pat : Q -> D) (e : P -> D) (_112053 : Q) (arg : type1475 A P Q) (_112052 : P) (_112054 : Q) : (term2654 A D P Q pat e _112053 arg _112052 _112054) = (term2655 A D P Q pat e _112053 arg _112052 _112054).
Proof. exact (@lem8291653 (term2319 D P Q pat _112053 e _112052) (term2319 D P Q pat _112054 e _112052) ((term2330 A P Q arg _112052 _112053) = (term2330 A P Q arg _112052 _112054))). Qed.
Lemma lem8316506 {A B P : Type'} (p : type560 A B P) (_112051 : A -> B) (_112052 : P) : (term867 A B P p _112051 _112052) = (term867 A B P p _112051 _112052).
Proof. exact (eq_refl (term867 A B P p _112051 _112052)). Qed.
Lemma lem8316509 {A B D P Q : Type'} (p : type560 A B P) (_112051 : A -> B) (pat : Q -> D) (e : P -> D) (_112053 : Q) (arg : type1475 A P Q) (_112052 : P) (_112054 : Q) : (term2653 A B D P Q p _112051 pat e _112053 arg _112052 _112054) = (term2656 A B D P Q p _112051 pat e _112053 arg _112052 _112054).
Proof. exact (MK_COMB (@lem8316506 A B P p _112051 _112052) (@lem8316505 A D P Q pat e _112053 arg _112052 _112054)). Qed.
Lemma lem8316511 {A B D P Q : Type'} (p : type560 A B P) (_112051 : A -> B) (pat : Q -> D) (e : P -> D) (_112053 : Q) (arg : type1475 A P Q) (_112052 : P) (_112054 : Q) : (term2337 A B D P Q p _112051 pat e _112053 arg _112052 _112054) = (term2656 A B D P Q p _112051 pat e _112053 arg _112052 _112054).
Proof. exact (TRANS (@lem8316498 A B D P Q p _112051 pat e _112053 arg _112052 _112054) (@lem8316509 A B D P Q p _112051 pat e _112053 arg _112052 _112054)). Qed.
Lemma lem8316512 {A B D P Q : Type'} (_112051 : A -> B) (_112053 : Q) (_112052 : P) (_112054 : Q) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term2656 A B D P Q p _112051 pat e _112053 arg _112052 _112054.
Proof. exact (EQ_MP (@lem8316511 A B D P Q p _112051 pat e _112053 arg _112052 _112054) (@lem8315822 A B D P Q _112051 _112053 _112052 _112054 p pat e arg h1)). Qed.
Lemma lem8316534 {A B D P Q : Type'} (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : term2382 A B D P Q _111929 f arg _111928 pat e a'.
Proof. exact (proj2 (@lem8313393 A B D P Q t' p _111929 f arg _111928 pat e a' h1)). Qed.
Lemma lem8316545 {A B D P Q : Type'} (_112068 : Q) (_112067 : B) (t'' : type905 A B D P Q) (_112062 : Q -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112063 : P -> D) (_112066 : P) : (term2647 A B D P Q _112068 _112067 t'' _112062 _112064 _112065 _112063 _112066) = (term2657 A B D P Q _112068 _112067 t'' _112062 _112064 _112065 _112063 _112066).
Proof. exact (@lem8291653 (term2319 D P Q _112062 _112068 _112063 _112066) (term2488 A B P Q _112064 _112065 _112066 _112068 _112067) ((term2478 A B D P Q t'' _112062 _112063 _112064 _112065 _112066) = (@I (P -> D) _112063 _112066))). Qed.
Lemma lem8316546 {A B D P Q : Type'} (_112068 : Q) (_112067 : B) (_112062 : Q -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112063 : P -> D) (_112066 : P) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2657 A B D P Q _112068 _112067 t'' _112062 _112064 _112065 _112063 _112066.
Proof. exact (EQ_MP (@lem8316545 A B D P Q _112068 _112067 t'' _112062 _112064 _112065 _112063 _112066) (@lem8315906 A B D P Q _112068 _112067 _112062 _112064 _112065 _112063 _112066 t'' _111929 h1)). Qed.
Lemma lem8316557 {A B D P Q : Type'} (_112068 : Q) (_112067 : B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) : (term2646 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066) = (term2658 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066).
Proof. exact (@lem8291653 (term2319 D P Q _112062 _112068 _112063 _112066) (term2488 A B P Q _112064 _112065 _112066 _112068 _112067) ((term2473 A B D P Q t'' _112062 _112063 _112064 _112065 _112066) = (term2374 A B D P Q _111929 _112062 _112063 _112064 _112065 _112066))). Qed.
Lemma lem8316558 {A B D P Q : Type'} (_112068 : Q) (_112067 : B) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2658 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066.
Proof. exact (EQ_MP (@lem8316557 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066) (@lem8315905 A B D P Q _112068 _112067 _112062 _112063 _112064 _112065 _112066 t'' _111929 h1)). Qed.
Lemma lem8317026 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : term864 A B P p f a.
Proof. exact (proj1 (@lem8313372 A B D P Q p f t arg _111928 pat e lt2 y s a h1)). Qed.
Lemma lem8317027 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : term951 A B P p f a.
Proof. exact (fun h0 : term866 A B P p f a => @lem8317026 A B D P Q p f t arg _111928 pat e lt2 y s a h1). Qed.
Lemma lem8317029 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8317030 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a : P) : (term951 A B P p f a) = (term864 A B P p f a).
Proof. exact (@lem8317029 (term864 A B P p f a)). Qed.
Lemma lem8317031 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : term864 A B P p f a.
Proof. exact (EQ_MP (@lem8317030 A B P p f a) (@lem8317027 A B D P Q p f t arg _111928 pat e lt2 y s a h1)). Qed.
Lemma lem8317033 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : (@I (Q -> D) pat t) = (@I (P -> D) e a).
Proof. exact (proj2 (@lem8313372 A B D P Q p f t arg _111928 pat e lt2 y s a h1)). Qed.
Lemma lem8317034 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : term2659 D P Q pat t e a.
Proof. exact (fun h0 : term2319 D P Q pat t e a => @lem8317033 A B D P Q p f t arg _111928 pat e lt2 y s a h1). Qed.
Lemma lem8317036 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8317037 {D P Q : Type'} (pat : Q -> D) (t : Q) (e : P -> D) (a : P) : (term2659 D P Q pat t e a) = ((@I (Q -> D) pat t) = (@I (P -> D) e a)).
Proof. exact (@lem8317036 ((@I (Q -> D) pat t) = (@I (P -> D) e a))). Qed.
Lemma lem8317038 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : (@I (Q -> D) pat t) = (@I (P -> D) e a).
Proof. exact (EQ_MP (@lem8317037 D P Q pat t e a) (@lem8317034 A B D P Q p f t arg _111928 pat e lt2 y s a h1)). Qed.
Lemma lem8317044 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8317045 {D P Q : Type'} (_111928 : type886 D P Q) (_111931 : Q -> D) (_111934 : Q) (_111932 : P -> D) (_111933 : P) : (term2524 D P Q _111934 _111928 _111931 _111932 _111933) = (term2660 D P Q _111928 _111931 _111934 _111932 _111933).
Proof. exact (@lem8317044 ((term2315 D P Q _111928 _111931 _111932 _111933) = (@I (P -> D) _111932 _111933)) (term2319 D P Q _111931 _111934 _111932 _111933)). Qed.
Lemma lem8317055 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8317056 {D P Q : Type'} (_111928 : type886 D P Q) (_111931 : Q -> D) (_111934 : Q) (_111932 : P -> D) (_111933 : P) : (term2661 D P Q _111934 _111928 _111931 _111932 _111933) = (term2662 D P Q _111928 _111931 _111934 _111932 _111933).
Proof. exact (MK_COMB (@lem8317055) (@lem8317045 D P Q _111928 _111931 _111934 _111932 _111933)). Qed.
Lemma lem8317066 {D P Q : Type'} (_111928 : type886 D P Q) (_111931 : Q -> D) (_111934 : Q) (_111932 : P -> D) (_111933 : P) : (term2660 D P Q _111928 _111931 _111934 _111932 _111933) = (term2660 D P Q _111928 _111931 _111934 _111932 _111933).
Proof. exact (eq_refl (term2660 D P Q _111928 _111931 _111934 _111932 _111933)). Qed.
Lemma lem8317067 {D P Q : Type'} (_111928 : type886 D P Q) (_111931 : Q -> D) (_111934 : Q) (_111932 : P -> D) (_111933 : P) : ((term2524 D P Q _111934 _111928 _111931 _111932 _111933) = (term2660 D P Q _111928 _111931 _111934 _111932 _111933)) = ((term2660 D P Q _111928 _111931 _111934 _111932 _111933) = (term2660 D P Q _111928 _111931 _111934 _111932 _111933)).
Proof. exact (MK_COMB (@lem8317056 D P Q _111928 _111931 _111934 _111932 _111933) (@lem8317066 D P Q _111928 _111931 _111934 _111932 _111933)). Qed.
Lemma lem8317069 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8317070 (x : Prop) : (x = x) = True.
Proof. exact (@lem8317069 Prop x). Qed.
Lemma lem8317071 {D P Q : Type'} (_111928 : type886 D P Q) (_111931 : Q -> D) (_111934 : Q) (_111932 : P -> D) (_111933 : P) : ((term2660 D P Q _111928 _111931 _111934 _111932 _111933) = (term2660 D P Q _111928 _111931 _111934 _111932 _111933)) = True.
Proof. exact (@lem8317070 (term2660 D P Q _111928 _111931 _111934 _111932 _111933)). Qed.
Lemma lem8317072 {D P Q : Type'} (_111928 : type886 D P Q) (_111931 : Q -> D) (_111934 : Q) (_111932 : P -> D) (_111933 : P) : ((term2524 D P Q _111934 _111928 _111931 _111932 _111933) = (term2660 D P Q _111928 _111931 _111934 _111932 _111933)) = True.
Proof. exact (TRANS (@lem8317067 D P Q _111928 _111931 _111934 _111932 _111933) (@lem8317071 D P Q _111928 _111931 _111934 _111932 _111933)). Qed.
Lemma lem8317073 {D P Q : Type'} (_111928 : type886 D P Q) (_111931 : Q -> D) (_111934 : Q) (_111932 : P -> D) (_111933 : P) : True = ((term2524 D P Q _111934 _111928 _111931 _111932 _111933) = (term2660 D P Q _111928 _111931 _111934 _111932 _111933)).
Proof. exact (SYM (@lem8317072 D P Q _111928 _111931 _111934 _111932 _111933)). Qed.
Lemma lem8317074 {D P Q : Type'} (_111928 : type886 D P Q) (_111931 : Q -> D) (_111934 : Q) (_111932 : P -> D) (_111933 : P) : (term2524 D P Q _111934 _111928 _111931 _111932 _111933) = (term2660 D P Q _111928 _111931 _111934 _111932 _111933).
Proof. exact (EQ_MP (@lem8317073 D P Q _111928 _111931 _111934 _111932 _111933) (@lem0)). Qed.
Lemma lem8317075 {D P Q : Type'} (_111931 : Q -> D) (_111934 : Q) (_111932 : P -> D) (_111933 : P) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2660 D P Q _111928 _111931 _111934 _111932 _111933.
Proof. exact (EQ_MP (@lem8317074 D P Q _111928 _111931 _111934 _111932 _111933) (@lem8315918 D P Q _111934 _111931 _111932 _111933 _111928 h1)). Qed.
Lemma lem8317077 (b : Prop) (a : Prop) : (a \/ b) = (term970 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8317078 {D P Q : Type'} (_111934 : Q) (_111928 : type886 D P Q) (_111931 : Q -> D) (_111932 : P -> D) (_111933 : P) : (term2660 D P Q _111928 _111931 _111934 _111932 _111933) = (term2663 D P Q _111934 _111928 _111931 _111932 _111933).
Proof. exact (@lem8317077 (term2319 D P Q _111931 _111934 _111932 _111933) ((term2315 D P Q _111928 _111931 _111932 _111933) = (@I (P -> D) _111932 _111933))). Qed.
Lemma lem8317080 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8317081 {D P Q : Type'} (_111931 : Q -> D) (_111934 : Q) (_111932 : P -> D) (_111933 : P) : (term2664 D P Q _111931 _111934 _111932 _111933) = ((@I (Q -> D) _111931 _111934) = (@I (P -> D) _111932 _111933)).
Proof. exact (@lem8317080 ((@I (Q -> D) _111931 _111934) = (@I (P -> D) _111932 _111933))). Qed.
Lemma lem8317082 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8317083 {D P Q : Type'} (_111931 : Q -> D) (_111934 : Q) (_111932 : P -> D) (_111933 : P) : (term2665 D P Q _111931 _111934 _111932 _111933) = (term2666 D P Q _111931 _111934 _111932 _111933).
Proof. exact (MK_COMB (@lem8317082) (@lem8317081 D P Q _111931 _111934 _111932 _111933)). Qed.
Lemma lem8317084 {D P Q : Type'} (_111928 : type886 D P Q) (_111931 : Q -> D) (_111932 : P -> D) (_111933 : P) : ((term2315 D P Q _111928 _111931 _111932 _111933) = (@I (P -> D) _111932 _111933)) = ((term2315 D P Q _111928 _111931 _111932 _111933) = (@I (P -> D) _111932 _111933)).
Proof. exact (eq_refl ((term2315 D P Q _111928 _111931 _111932 _111933) = (@I (P -> D) _111932 _111933))). Qed.
Lemma lem8317085 {D P Q : Type'} (_111934 : Q) (_111928 : type886 D P Q) (_111931 : Q -> D) (_111932 : P -> D) (_111933 : P) : (term2663 D P Q _111934 _111928 _111931 _111932 _111933) = (term2667 D P Q _111934 _111928 _111931 _111932 _111933).
Proof. exact (MK_COMB (@lem8317083 D P Q _111931 _111934 _111932 _111933) (@lem8317084 D P Q _111928 _111931 _111932 _111933)). Qed.
Lemma lem8317086 {D P Q : Type'} (_111934 : Q) (_111928 : type886 D P Q) (_111931 : Q -> D) (_111932 : P -> D) (_111933 : P) : (term2660 D P Q _111928 _111931 _111934 _111932 _111933) = (term2667 D P Q _111934 _111928 _111931 _111932 _111933).
Proof. exact (TRANS (@lem8317078 D P Q _111934 _111928 _111931 _111932 _111933) (@lem8317085 D P Q _111934 _111928 _111931 _111932 _111933)). Qed.
Lemma lem8317089 {D P Q : Type'} (_111934 : Q) (_111931 : Q -> D) (_111932 : P -> D) (_111933 : P) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2667 D P Q _111934 _111928 _111931 _111932 _111933.
Proof. exact (EQ_MP (@lem8317086 D P Q _111934 _111928 _111931 _111932 _111933) (@lem8317075 D P Q _111931 _111934 _111932 _111933 _111928 h1)). Qed.
Lemma lem8317090 {D P Q : Type'} (_111934 : Q) (_111931 : Q -> D) (_111932 : P -> D) (_111933 : P) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2667 D P Q _111934 _111928 _111931 _111932 _111933.
Proof. exact (@lem8317089 D P Q _111934 _111931 _111932 _111933 _111928 h1). Qed.
Lemma lem8317091 {D P Q : Type'} (t : Q) (pat : Q -> D) (e : P -> D) (a : P) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2667 D P Q t _111928 pat e a.
Proof. exact (@lem8317090 D P Q t pat e a _111928 h1). Qed.
Lemma lem8317094 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term1254 D P Q _111928) (h2 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : (term2315 D P Q _111928 pat e a) = (@I (P -> D) e a).
Proof. exact (@lem8317091 D P Q t pat e a _111928 h1 (@lem8317038 A B D P Q p f t arg _111928 pat e lt2 y s a h2)). Qed.
Lemma lem8317095 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term1254 D P Q _111928) (h2 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : term2668 D P Q _111928 pat e a.
Proof. exact (fun h0 : term2669 D P Q _111928 pat e a => @lem8317094 A B D P Q p f t arg _111928 pat e lt2 y s a h1 h2). Qed.
Lemma lem8317097 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8317098 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2668 D P Q _111928 pat e a) = ((term2315 D P Q _111928 pat e a) = (@I (P -> D) e a)).
Proof. exact (@lem8317097 ((term2315 D P Q _111928 pat e a) = (@I (P -> D) e a))). Qed.
Lemma lem8317099 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term1254 D P Q _111928) (h2 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : (term2315 D P Q _111928 pat e a) = (@I (P -> D) e a).
Proof. exact (EQ_MP (@lem8317098 D P Q _111928 pat e a) (@lem8317095 A B D P Q p f t arg _111928 pat e lt2 y s a h1 h2)). Qed.
Lemma lem8317101 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : term2408 A D P Q lt2 y arg _111928 pat e a.
Proof. exact (proj2 (@lem8313370 A B D P Q p f t arg _111928 pat e lt2 y s a h1)). Qed.
Lemma lem8317102 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : term2670 A D P Q lt2 y arg _111928 pat e a.
Proof. exact (fun h0 : term2671 A D P Q lt2 y arg _111928 pat e a => @lem8317101 A B D P Q p f t arg _111928 pat e lt2 y s a h1). Qed.
Lemma lem8317104 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8317105 {A D P Q : Type'} (lt2 : type1402 A) (y : A) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a : P) : (term2670 A D P Q lt2 y arg _111928 pat e a) = (term2408 A D P Q lt2 y arg _111928 pat e a).
Proof. exact (@lem8317104 (term2408 A D P Q lt2 y arg _111928 pat e a)). Qed.
Lemma lem8317106 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : term2408 A D P Q lt2 y arg _111928 pat e a.
Proof. exact (EQ_MP (@lem8317105 A D P Q lt2 y arg _111928 pat e a) (@lem8317102 A B D P Q p f t arg _111928 pat e lt2 y s a h1)). Qed.
Lemma lem8317112 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8317113 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (p : type560 A B P) (_111939 : A -> B) (arg : type1475 A P Q) (_111941 : Q) (lt2 : type1402 A) (_111942 : A) (s : P -> A) (_111940 : P) : (term2648 A B D P Q p _111939 pat e arg _111941 lt2 _111942 s _111940) = (term2672 A B D P Q pat e p _111939 arg _111941 lt2 _111942 s _111940).
Proof. exact (@lem8317112 (term2319 D P Q pat _111941 e _111940) (term866 A B P p _111939 _111940) (term2356 A P Q arg _111941 lt2 _111942 s _111940)). Qed.
Lemma lem8317129 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8317130 {A B P Q : Type'} (arg : type1475 A P Q) (_111941 : Q) (p : type560 A B P) (_111939 : A -> B) (lt2 : type1402 A) (_111942 : A) (s : P -> A) (_111940 : P) : (term2673 A B P Q p _111939 arg _111941 lt2 _111942 s _111940) = (term2674 A B P Q arg _111941 p _111939 lt2 _111942 s _111940).
Proof. exact (@lem8317129 (term2353 A P Q lt2 _111942 arg _111940 _111941) (term866 A B P p _111939 _111940) (term2348 A P lt2 _111942 s _111940)). Qed.
Lemma lem8317144 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8317145 {A B P : Type'} (lt2 : type1402 A) (_111942 : A) (s : P -> A) (p : type560 A B P) (_111939 : A -> B) (_111940 : P) : (term2675 A B P p _111939 lt2 _111942 s _111940) = (term2676 A B P lt2 _111942 s p _111939 _111940).
Proof. exact (@lem8317144 (term2348 A P lt2 _111942 s _111940) (term866 A B P p _111939 _111940)). Qed.
Lemma lem8317151 {A P Q : Type'} (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111940 : P) (_111941 : Q) : (term2355 A P Q lt2 _111942 arg _111940 _111941) = (term2355 A P Q lt2 _111942 arg _111940 _111941).
Proof. exact (eq_refl (term2355 A P Q lt2 _111942 arg _111940 _111941)). Qed.
Lemma lem8317152 {A B P Q : Type'} (arg : type1475 A P Q) (_111941 : Q) (lt2 : type1402 A) (_111942 : A) (s : P -> A) (p : type560 A B P) (_111939 : A -> B) (_111940 : P) : (term2674 A B P Q arg _111941 p _111939 lt2 _111942 s _111940) = (term2677 A B P Q arg _111941 lt2 _111942 s p _111939 _111940).
Proof. exact (MK_COMB (@lem8317151 A P Q lt2 _111942 arg _111940 _111941) (@lem8317145 A B P lt2 _111942 s p _111939 _111940)). Qed.
Lemma lem8317156 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8317157 {A B P Q : Type'} (s : P -> A) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111941 : Q) (p : type560 A B P) (_111939 : A -> B) (_111940 : P) : (term2677 A B P Q arg _111941 lt2 _111942 s p _111939 _111940) = (term2678 A B P Q s lt2 _111942 arg _111941 p _111939 _111940).
Proof. exact (@lem8317156 (term2348 A P lt2 _111942 s _111940) (term2353 A P Q lt2 _111942 arg _111940 _111941) (term866 A B P p _111939 _111940)). Qed.
Lemma lem8317173 {A B P Q : Type'} (s : P -> A) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111941 : Q) (p : type560 A B P) (_111939 : A -> B) (_111940 : P) : (term2674 A B P Q arg _111941 p _111939 lt2 _111942 s _111940) = (term2678 A B P Q s lt2 _111942 arg _111941 p _111939 _111940).
Proof. exact (TRANS (@lem8317152 A B P Q arg _111941 lt2 _111942 s p _111939 _111940) (@lem8317157 A B P Q s lt2 _111942 arg _111941 p _111939 _111940)). Qed.
Lemma lem8317174 {A B P Q : Type'} (s : P -> A) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111941 : Q) (p : type560 A B P) (_111939 : A -> B) (_111940 : P) : (term2673 A B P Q p _111939 arg _111941 lt2 _111942 s _111940) = (term2678 A B P Q s lt2 _111942 arg _111941 p _111939 _111940).
Proof. exact (TRANS (@lem8317130 A B P Q arg _111941 p _111939 lt2 _111942 s _111940) (@lem8317173 A B P Q s lt2 _111942 arg _111941 p _111939 _111940)). Qed.
Lemma lem8317175 {D P Q : Type'} (pat : Q -> D) (_111941 : Q) (e : P -> D) (_111940 : P) : (term2333 D P Q pat _111941 e _111940) = (term2333 D P Q pat _111941 e _111940).
Proof. exact (eq_refl (term2333 D P Q pat _111941 e _111940)). Qed.
Lemma lem8317176 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (s : P -> A) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111941 : Q) (p : type560 A B P) (_111939 : A -> B) (_111940 : P) : (term2672 A B D P Q pat e p _111939 arg _111941 lt2 _111942 s _111940) = (term2679 A B D P Q pat e s lt2 _111942 arg _111941 p _111939 _111940).
Proof. exact (MK_COMB (@lem8317175 D P Q pat _111941 e _111940) (@lem8317174 A B P Q s lt2 _111942 arg _111941 p _111939 _111940)). Qed.
Lemma lem8317180 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8317181 {A B D P Q : Type'} (s : P -> A) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111941 : Q) (p : type560 A B P) (_111939 : A -> B) (_111940 : P) : (term2679 A B D P Q pat e s lt2 _111942 arg _111941 p _111939 _111940) = (term2680 A B D P Q s pat e lt2 _111942 arg _111941 p _111939 _111940).
Proof. exact (@lem8317180 (term2348 A P lt2 _111942 s _111940) (term2319 D P Q pat _111941 e _111940) (term2681 A B P Q lt2 _111942 arg _111941 p _111939 _111940)). Qed.
Lemma lem8317209 {A B D P Q : Type'} (s : P -> A) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111941 : Q) (p : type560 A B P) (_111939 : A -> B) (_111940 : P) : (term2672 A B D P Q pat e p _111939 arg _111941 lt2 _111942 s _111940) = (term2680 A B D P Q s pat e lt2 _111942 arg _111941 p _111939 _111940).
Proof. exact (TRANS (@lem8317176 A B D P Q pat e s lt2 _111942 arg _111941 p _111939 _111940) (@lem8317181 A B D P Q s pat e lt2 _111942 arg _111941 p _111939 _111940)). Qed.
Lemma lem8317210 {A B D P Q : Type'} (s : P -> A) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111941 : Q) (p : type560 A B P) (_111939 : A -> B) (_111940 : P) : (term2648 A B D P Q p _111939 pat e arg _111941 lt2 _111942 s _111940) = (term2680 A B D P Q s pat e lt2 _111942 arg _111941 p _111939 _111940).
Proof. exact (TRANS (@lem8317113 A B D P Q pat e p _111939 arg _111941 lt2 _111942 s _111940) (@lem8317209 A B D P Q s pat e lt2 _111942 arg _111941 p _111939 _111940)). Qed.
Lemma lem8317211 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8317212 {A B D P Q : Type'} (s : P -> A) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111941 : Q) (p : type560 A B P) (_111939 : A -> B) (_111940 : P) : (term2682 A B D P Q p _111939 pat e arg _111941 lt2 _111942 s _111940) = (term2683 A B D P Q s pat e lt2 _111942 arg _111941 p _111939 _111940).
Proof. exact (MK_COMB (@lem8317211) (@lem8317210 A B D P Q s pat e lt2 _111942 arg _111941 p _111939 _111940)). Qed.
Lemma lem8317226 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8317227 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (p : type560 A B P) (_111939 : A -> B) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111940 : P) (_111941 : Q) : (term2684 A B D P Q p _111939 pat e lt2 _111942 arg _111940 _111941) = (term2685 A B D P Q pat e p _111939 lt2 _111942 arg _111940 _111941).
Proof. exact (@lem8317226 (term2319 D P Q pat _111941 e _111940) (term866 A B P p _111939 _111940) (term2353 A P Q lt2 _111942 arg _111940 _111941)). Qed.
Lemma lem8317243 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8317244 {A B P Q : Type'} (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111941 : Q) (p : type560 A B P) (_111939 : A -> B) (_111940 : P) : (term2686 A B P Q p _111939 lt2 _111942 arg _111940 _111941) = (term2681 A B P Q lt2 _111942 arg _111941 p _111939 _111940).
Proof. exact (@lem8317243 (term2353 A P Q lt2 _111942 arg _111940 _111941) (term866 A B P p _111939 _111940)). Qed.
Lemma lem8317250 {D P Q : Type'} (pat : Q -> D) (_111941 : Q) (e : P -> D) (_111940 : P) : (term2333 D P Q pat _111941 e _111940) = (term2333 D P Q pat _111941 e _111940).
Proof. exact (eq_refl (term2333 D P Q pat _111941 e _111940)). Qed.
Lemma lem8317251 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111941 : Q) (p : type560 A B P) (_111939 : A -> B) (_111940 : P) : (term2685 A B D P Q pat e p _111939 lt2 _111942 arg _111940 _111941) = (term2687 A B D P Q pat e lt2 _111942 arg _111941 p _111939 _111940).
Proof. exact (MK_COMB (@lem8317250 D P Q pat _111941 e _111940) (@lem8317244 A B P Q lt2 _111942 arg _111941 p _111939 _111940)). Qed.
Lemma lem8317262 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111941 : Q) (p : type560 A B P) (_111939 : A -> B) (_111940 : P) : (term2684 A B D P Q p _111939 pat e lt2 _111942 arg _111940 _111941) = (term2687 A B D P Q pat e lt2 _111942 arg _111941 p _111939 _111940).
Proof. exact (TRANS (@lem8317227 A B D P Q pat e p _111939 lt2 _111942 arg _111940 _111941) (@lem8317251 A B D P Q pat e lt2 _111942 arg _111941 p _111939 _111940)). Qed.
Lemma lem8317263 {A P : Type'} (lt2 : type1402 A) (_111942 : A) (s : P -> A) (_111940 : P) : (term2688 A P lt2 _111942 s _111940) = (term2688 A P lt2 _111942 s _111940).
Proof. exact (eq_refl (term2688 A P lt2 _111942 s _111940)). Qed.
Lemma lem8317264 {A B D P Q : Type'} (s : P -> A) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111941 : Q) (p : type560 A B P) (_111939 : A -> B) (_111940 : P) : (term2689 A B D P Q s p _111939 pat e lt2 _111942 arg _111940 _111941) = (term2680 A B D P Q s pat e lt2 _111942 arg _111941 p _111939 _111940).
Proof. exact (MK_COMB (@lem8317263 A P lt2 _111942 s _111940) (@lem8317262 A B D P Q pat e lt2 _111942 arg _111941 p _111939 _111940)). Qed.
Lemma lem8317275 {A B D P Q : Type'} (s : P -> A) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111941 : Q) (p : type560 A B P) (_111939 : A -> B) (_111940 : P) : ((term2648 A B D P Q p _111939 pat e arg _111941 lt2 _111942 s _111940) = (term2689 A B D P Q s p _111939 pat e lt2 _111942 arg _111940 _111941)) = ((term2680 A B D P Q s pat e lt2 _111942 arg _111941 p _111939 _111940) = (term2680 A B D P Q s pat e lt2 _111942 arg _111941 p _111939 _111940)).
Proof. exact (MK_COMB (@lem8317212 A B D P Q s pat e lt2 _111942 arg _111941 p _111939 _111940) (@lem8317264 A B D P Q s pat e lt2 _111942 arg _111941 p _111939 _111940)). Qed.
Lemma lem8317277 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8317278 (x : Prop) : (x = x) = True.
Proof. exact (@lem8317277 Prop x). Qed.
Lemma lem8317279 {A B D P Q : Type'} (s : P -> A) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111941 : Q) (p : type560 A B P) (_111939 : A -> B) (_111940 : P) : ((term2680 A B D P Q s pat e lt2 _111942 arg _111941 p _111939 _111940) = (term2680 A B D P Q s pat e lt2 _111942 arg _111941 p _111939 _111940)) = True.
Proof. exact (@lem8317278 (term2680 A B D P Q s pat e lt2 _111942 arg _111941 p _111939 _111940)). Qed.
Lemma lem8317280 {A B D P Q : Type'} (s : P -> A) (p : type560 A B P) (_111939 : A -> B) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111940 : P) (_111941 : Q) : ((term2648 A B D P Q p _111939 pat e arg _111941 lt2 _111942 s _111940) = (term2689 A B D P Q s p _111939 pat e lt2 _111942 arg _111940 _111941)) = True.
Proof. exact (TRANS (@lem8317275 A B D P Q s pat e lt2 _111942 arg _111941 p _111939 _111940) (@lem8317279 A B D P Q s pat e lt2 _111942 arg _111941 p _111939 _111940)). Qed.
Lemma lem8317281 {A B D P Q : Type'} (s : P -> A) (p : type560 A B P) (_111939 : A -> B) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111940 : P) (_111941 : Q) : True = ((term2648 A B D P Q p _111939 pat e arg _111941 lt2 _111942 s _111940) = (term2689 A B D P Q s p _111939 pat e lt2 _111942 arg _111940 _111941)).
Proof. exact (SYM (@lem8317280 A B D P Q s p _111939 pat e lt2 _111942 arg _111940 _111941)). Qed.
Lemma lem8317282 {A B D P Q : Type'} (s : P -> A) (p : type560 A B P) (_111939 : A -> B) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111940 : P) (_111941 : Q) : (term2648 A B D P Q p _111939 pat e arg _111941 lt2 _111942 s _111940) = (term2689 A B D P Q s p _111939 pat e lt2 _111942 arg _111940 _111941).
Proof. exact (EQ_MP (@lem8317281 A B D P Q s p _111939 pat e lt2 _111942 arg _111940 _111941) (@lem0)). Qed.
Lemma lem8317283 {A B D P Q : Type'} (_111939 : A -> B) (_111942 : A) (_111940 : P) (_111941 : Q) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term35 A B D P Q p pat e arg lt2 s) : term2689 A B D P Q s p _111939 pat e lt2 _111942 arg _111940 _111941.
Proof. exact (EQ_MP (@lem8317282 A B D P Q s p _111939 pat e lt2 _111942 arg _111940 _111941) (@lem8315952 A B D P Q _111939 _111941 _111942 _111940 p pat e arg lt2 s h1)). Qed.
Lemma lem8317285 (b : Prop) (a : Prop) : (a \/ b) = (term970 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8317286 {A B D P Q : Type'} (p : type560 A B P) (_111939 : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (_111941 : Q) (lt2 : type1402 A) (_111942 : A) (s : P -> A) (_111940 : P) : (term2689 A B D P Q s p _111939 pat e lt2 _111942 arg _111940 _111941) = (term2690 A B D P Q p _111939 pat e arg _111941 lt2 _111942 s _111940).
Proof. exact (@lem8317285 (term2684 A B D P Q p _111939 pat e lt2 _111942 arg _111940 _111941) (term2348 A P lt2 _111942 s _111940)). Qed.
Lemma lem8317288 (a : Prop) (b : Prop) : (term972 a b) = (term973 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8317289 {A B D P Q : Type'} (p : type560 A B P) (_111939 : A -> B) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111940 : P) (_111941 : Q) : (term2691 A B D P Q p _111939 pat e lt2 _111942 arg _111940 _111941) = (term2692 A B D P Q p _111939 pat e lt2 _111942 arg _111940 _111941).
Proof. exact (@lem8317288 (term866 A B P p _111939 _111940) (term2693 A D P Q pat e lt2 _111942 arg _111940 _111941)). Qed.
Lemma lem8317291 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8317292 {A B P : Type'} (p : type560 A B P) (_111939 : A -> B) (_111940 : P) : (term976 A B P p _111939 _111940) = (term864 A B P p _111939 _111940).
Proof. exact (@lem8317291 (term864 A B P p _111939 _111940)). Qed.
Lemma lem8317293 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8317294 {A B P : Type'} (p : type560 A B P) (_111939 : A -> B) (_111940 : P) : (term977 A B P p _111939 _111940) = (term978 A B P p _111939 _111940).
Proof. exact (MK_COMB (@lem8317293) (@lem8317292 A B P p _111939 _111940)). Qed.
Lemma lem8317296 (a : Prop) (b : Prop) : (term972 a b) = (term973 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8317297 {A D P Q : Type'} (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111940 : P) (_111941 : Q) : (term2694 A D P Q pat e lt2 _111942 arg _111940 _111941) = (term2695 A D P Q pat e lt2 _111942 arg _111940 _111941).
Proof. exact (@lem8317296 (term2319 D P Q pat _111941 e _111940) (term2353 A P Q lt2 _111942 arg _111940 _111941)). Qed.
Lemma lem8317299 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8317300 {D P Q : Type'} (pat : Q -> D) (_111941 : Q) (e : P -> D) (_111940 : P) : (term2664 D P Q pat _111941 e _111940) = ((@I (Q -> D) pat _111941) = (@I (P -> D) e _111940)).
Proof. exact (@lem8317299 ((@I (Q -> D) pat _111941) = (@I (P -> D) e _111940))). Qed.
Lemma lem8317301 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8317302 {D P Q : Type'} (pat : Q -> D) (_111941 : Q) (e : P -> D) (_111940 : P) : (term2696 D P Q pat _111941 e _111940) = (term2384 D P Q pat _111941 e _111940).
Proof. exact (MK_COMB (@lem8317301) (@lem8317300 D P Q pat _111941 e _111940)). Qed.
Lemma lem8317304 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8317305 {A P Q : Type'} (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111940 : P) (_111941 : Q) : (term2697 A P Q lt2 _111942 arg _111940 _111941) = (term2351 A P Q lt2 _111942 arg _111940 _111941).
Proof. exact (@lem8317304 (term2351 A P Q lt2 _111942 arg _111940 _111941)). Qed.
Lemma lem8317306 {A D P Q : Type'} (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111940 : P) (_111941 : Q) : (term2695 A D P Q pat e lt2 _111942 arg _111940 _111941) = (term2698 A D P Q pat e lt2 _111942 arg _111940 _111941).
Proof. exact (MK_COMB (@lem8317302 D P Q pat _111941 e _111940) (@lem8317305 A P Q lt2 _111942 arg _111940 _111941)). Qed.
Lemma lem8317307 {A D P Q : Type'} (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111940 : P) (_111941 : Q) : (term2694 A D P Q pat e lt2 _111942 arg _111940 _111941) = (term2698 A D P Q pat e lt2 _111942 arg _111940 _111941).
Proof. exact (TRANS (@lem8317297 A D P Q pat e lt2 _111942 arg _111940 _111941) (@lem8317306 A D P Q pat e lt2 _111942 arg _111940 _111941)). Qed.
Lemma lem8317308 {A B D P Q : Type'} (p : type560 A B P) (_111939 : A -> B) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111940 : P) (_111941 : Q) : (term2692 A B D P Q p _111939 pat e lt2 _111942 arg _111940 _111941) = (term2699 A B D P Q p _111939 pat e lt2 _111942 arg _111940 _111941).
Proof. exact (MK_COMB (@lem8317294 A B P p _111939 _111940) (@lem8317307 A D P Q pat e lt2 _111942 arg _111940 _111941)). Qed.
Lemma lem8317309 {A B D P Q : Type'} (p : type560 A B P) (_111939 : A -> B) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111940 : P) (_111941 : Q) : (term2691 A B D P Q p _111939 pat e lt2 _111942 arg _111940 _111941) = (term2699 A B D P Q p _111939 pat e lt2 _111942 arg _111940 _111941).
Proof. exact (TRANS (@lem8317289 A B D P Q p _111939 pat e lt2 _111942 arg _111940 _111941) (@lem8317308 A B D P Q p _111939 pat e lt2 _111942 arg _111940 _111941)). Qed.
Lemma lem8317310 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8317311 {A B D P Q : Type'} (p : type560 A B P) (_111939 : A -> B) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (_111942 : A) (arg : type1475 A P Q) (_111940 : P) (_111941 : Q) : (term2700 A B D P Q p _111939 pat e lt2 _111942 arg _111940 _111941) = (term2701 A B D P Q p _111939 pat e lt2 _111942 arg _111940 _111941).
Proof. exact (MK_COMB (@lem8317310) (@lem8317309 A B D P Q p _111939 pat e lt2 _111942 arg _111940 _111941)). Qed.
Lemma lem8317312 {A P : Type'} (lt2 : type1402 A) (_111942 : A) (s : P -> A) (_111940 : P) : (term2348 A P lt2 _111942 s _111940) = (term2348 A P lt2 _111942 s _111940).
Proof. exact (eq_refl (term2348 A P lt2 _111942 s _111940)). Qed.
Lemma lem8317313 {A B D P Q : Type'} (p : type560 A B P) (_111939 : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (_111941 : Q) (lt2 : type1402 A) (_111942 : A) (s : P -> A) (_111940 : P) : (term2690 A B D P Q p _111939 pat e arg _111941 lt2 _111942 s _111940) = (term2702 A B D P Q p _111939 pat e arg _111941 lt2 _111942 s _111940).
Proof. exact (MK_COMB (@lem8317311 A B D P Q p _111939 pat e lt2 _111942 arg _111940 _111941) (@lem8317312 A P lt2 _111942 s _111940)). Qed.
Lemma lem8317314 {A B D P Q : Type'} (p : type560 A B P) (_111939 : A -> B) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (_111941 : Q) (lt2 : type1402 A) (_111942 : A) (s : P -> A) (_111940 : P) : (term2689 A B D P Q s p _111939 pat e lt2 _111942 arg _111940 _111941) = (term2702 A B D P Q p _111939 pat e arg _111941 lt2 _111942 s _111940).
Proof. exact (TRANS (@lem8317286 A B D P Q p _111939 pat e arg _111941 lt2 _111942 s _111940) (@lem8317313 A B D P Q p _111939 pat e arg _111941 lt2 _111942 s _111940)). Qed.
Lemma lem8317316 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term1254 D P Q _111928) (h2 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : term2703 A D P Q lt2 y arg _111928 pat e a.
Proof. exact (conj (@lem8317099 A B D P Q p f t arg _111928 pat e lt2 y s a h1 h2) (@lem8317106 A B D P Q p f t arg _111928 pat e lt2 y s a h2)). Qed.
Lemma lem8317317 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term1254 D P Q _111928) (h2 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : term2704 A B D P Q p f lt2 y arg _111928 pat e a.
Proof. exact (conj (@lem8317031 A B D P Q p f t arg _111928 pat e lt2 y s a h2) (@lem8317316 A B D P Q p f t arg _111928 pat e lt2 y s a h1 h2)). Qed.
Lemma lem8317319 {A B D P Q : Type'} (_111939 : A -> B) (_111941 : Q) (_111942 : A) (_111940 : P) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term35 A B D P Q p pat e arg lt2 s) : term2702 A B D P Q p _111939 pat e arg _111941 lt2 _111942 s _111940.
Proof. exact (EQ_MP (@lem8317314 A B D P Q p _111939 pat e arg _111941 lt2 _111942 s _111940) (@lem8317283 A B D P Q _111939 _111942 _111940 _111941 p pat e arg lt2 s h1)). Qed.
Lemma lem8317320 {A B D P Q : Type'} (_111939 : A -> B) (_111941 : Q) (_111942 : A) (_111940 : P) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term35 A B D P Q p pat e arg lt2 s) : term2702 A B D P Q p _111939 pat e arg _111941 lt2 _111942 s _111940.
Proof. exact (@lem8317319 A B D P Q _111939 _111941 _111942 _111940 p pat e arg lt2 s h1). Qed.
Lemma lem8317321 {A B D P Q : Type'} (f : A -> B) (_111928 : type886 D P Q) (y : A) (a : P) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term35 A B D P Q p pat e arg lt2 s) : term2705 A B D P Q p f arg _111928 pat e lt2 y s a.
Proof. exact (@lem8317320 A B D P Q f (term2313 D P Q _111928 pat e a) y a p pat e arg lt2 s h1). Qed.
Lemma lem8317324 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term35 A B D P Q p pat e arg lt2 s) (h2 : term1254 D P Q _111928) (h3 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : term2348 A P lt2 y s a.
Proof. exact (@lem8317321 A B D P Q f _111928 y a p pat e arg lt2 s h1 (@lem8317317 A B D P Q p f t arg _111928 pat e lt2 y s a h2 h3)). Qed.
Lemma lem8317325 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term35 A B D P Q p pat e arg lt2 s) (h2 : term1254 D P Q _111928) (h3 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : term2706 A P lt2 y s a.
Proof. exact (fun h0 : term2396 A P lt2 y s a => @lem8317324 A B D P Q p f t arg _111928 pat e lt2 y s a h1 h2 h3). Qed.
Lemma lem8317327 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8317328 {A P : Type'} (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2706 A P lt2 y s a) = (term2348 A P lt2 y s a).
Proof. exact (@lem8317327 (term2348 A P lt2 y s a)). Qed.
Lemma lem8317329 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term35 A B D P Q p pat e arg lt2 s) (h2 : term1254 D P Q _111928) (h3 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : term2348 A P lt2 y s a.
Proof. exact (EQ_MP (@lem8317328 A P lt2 y s a) (@lem8317325 A B D P Q p f t arg _111928 pat e lt2 y s a h1 h2 h3)). Qed.
Lemma lem8317332 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem8317334 {A P : Type'} (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) : (term2396 A P lt2 y s a) = (term2707 A P lt2 y s a).
Proof. exact (@lem8317332 (term2348 A P lt2 y s a)). Qed.
Lemma lem8317337 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : term2707 A P lt2 y s a.
Proof. exact (EQ_MP (@lem8317334 A P lt2 y s a) (@lem8315954 A B D P Q p f t arg _111928 pat e lt2 y s a h1)). Qed.
Lemma lem8317340 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term35 A B D P Q p pat e arg lt2 s) (h2 : term1254 D P Q _111928) (h3 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : False.
Proof. exact (@lem8317337 A B D P Q p f t arg _111928 pat e lt2 y s a h3 (@lem8317329 A B D P Q p f t arg _111928 pat e lt2 y s a h1 h2 h3)). Qed.
Lemma lem8317341 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term35 A B D P Q p pat e arg lt2 s) (h2 : term1254 D P Q _111928) (h3 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : term937.
Proof. exact (fun h0 : ~ False => @lem8317340 A B D P Q p f t arg _111928 pat e lt2 y s a h1 h2 h3). Qed.
Lemma lem8317343 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8317344 : term937 = False.
Proof. exact (@lem8317343 False). Qed.
Lemma lem8317345 {A B D P Q : Type'} (p : type560 A B P) (f : A -> B) (t : Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (y : A) (s : P -> A) (a : P) (h1 : term35 A B D P Q p pat e arg lt2 s) (h2 : term1254 D P Q _111928) (h3 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a) : False.
Proof. exact (EQ_MP (@lem8317344) (@lem8317341 A B D P Q p f t arg _111928 pat e lt2 y s a h1 h2 h3)). Qed.
Lemma lem8317773 {A B D P Q : Type'} (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2391 A B D P Q f t' p g pat e a') : term864 A B P p f a'.
Proof. exact (proj1 (@lem8313382 A B D P Q f t' p g pat e a' h1)). Qed.
Lemma lem8317774 {A B D P Q : Type'} (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2391 A B D P Q f t' p g pat e a') : term951 A B P p f a'.
Proof. exact (fun h0 : term866 A B P p f a' => @lem8317773 A B D P Q f t' p g pat e a' h1). Qed.
Lemma lem8317776 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8317777 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) : (term951 A B P p f a') = (term864 A B P p f a').
Proof. exact (@lem8317776 (term864 A B P p f a')). Qed.
Lemma lem8317778 {A B D P Q : Type'} (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2391 A B D P Q f t' p g pat e a') : term864 A B P p f a'.
Proof. exact (EQ_MP (@lem8317777 A B P p f a') (@lem8317774 A B D P Q f t' p g pat e a' h1)). Qed.
Lemma lem8317781 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a' : P) (h1 : term866 A B P p g a') : term866 A B P p g a'.
Proof. exact (h1). Qed.
Lemma lem8317782 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a' : P) (h1 : term866 A B P p g a') : term2708 A B P p g a'.
Proof. exact (fun h0 : term864 A B P p g a' => @lem8317781 A B P p g a' h1). Qed.
Lemma lem8317784 (p : Prop) : (term2709 p) = (~ p).
Proof. exact (EQ_MP (@lem21028 p) (@lem21107 p)). Qed.
Lemma lem8317785 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a' : P) : (term2708 A B P p g a') = (term866 A B P p g a').
Proof. exact (@lem8317784 (term864 A B P p g a')). Qed.
Lemma lem8317786 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a' : P) (h1 : term866 A B P p g a') : term866 A B P p g a'.
Proof. exact (EQ_MP (@lem8317785 A B P p g a') (@lem8317782 A B P p g a' h1)). Qed.
Lemma lem8317788 (b : Prop) (a : Prop) : (a \/ b) = (term970 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8317789 {A B P : Type'} (p : type560 A B P) (lt2 : type1402 A) (z : type518 A B P) (_111965 : A -> B) (_111966 : A -> B) (s : P -> A) (_111967 : P) : (term2649 A B P lt2 z s _111965 p _111966 _111967) = (term2710 A B P p lt2 z _111965 _111966 s _111967).
Proof. exact (@lem8317788 (term2415 A B P _111965 p _111966 _111967) (term2442 A B P lt2 z _111965 _111966 s _111967)). Qed.
Lemma lem8317791 (a : Prop) (b : Prop) : (term972 a b) = (term973 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8317792 {A B P : Type'} (_111965 : A -> B) (p : type560 A B P) (_111966 : A -> B) (_111967 : P) : (term2711 A B P _111965 p _111966 _111967) = (term2712 A B P _111965 p _111966 _111967).
Proof. exact (@lem8317791 (term866 A B P p _111965 _111967) (term864 A B P p _111966 _111967)). Qed.
Lemma lem8317794 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8317795 {A B P : Type'} (p : type560 A B P) (_111965 : A -> B) (_111967 : P) : (term976 A B P p _111965 _111967) = (term864 A B P p _111965 _111967).
Proof. exact (@lem8317794 (term864 A B P p _111965 _111967)). Qed.
Lemma lem8317796 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8317797 {A B P : Type'} (p : type560 A B P) (_111965 : A -> B) (_111967 : P) : (term977 A B P p _111965 _111967) = (term978 A B P p _111965 _111967).
Proof. exact (MK_COMB (@lem8317796) (@lem8317795 A B P p _111965 _111967)). Qed.
Lemma lem8317798 {A B P : Type'} (p : type560 A B P) (_111966 : A -> B) (_111967 : P) : (term866 A B P p _111966 _111967) = (term866 A B P p _111966 _111967).
Proof. exact (eq_refl (term866 A B P p _111966 _111967)). Qed.
Lemma lem8317799 {A B P : Type'} (_111965 : A -> B) (p : type560 A B P) (_111966 : A -> B) (_111967 : P) : (term2712 A B P _111965 p _111966 _111967) = (term2713 A B P _111965 p _111966 _111967).
Proof. exact (MK_COMB (@lem8317797 A B P p _111965 _111967) (@lem8317798 A B P p _111966 _111967)). Qed.
Lemma lem8317800 {A B P : Type'} (_111965 : A -> B) (p : type560 A B P) (_111966 : A -> B) (_111967 : P) : (term2711 A B P _111965 p _111966 _111967) = (term2713 A B P _111965 p _111966 _111967).
Proof. exact (TRANS (@lem8317792 A B P _111965 p _111966 _111967) (@lem8317799 A B P _111965 p _111966 _111967)). Qed.
Lemma lem8317801 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8317802 {A B P : Type'} (_111965 : A -> B) (p : type560 A B P) (_111966 : A -> B) (_111967 : P) : (term2714 A B P _111965 p _111966 _111967) = (term2715 A B P _111965 p _111966 _111967).
Proof. exact (MK_COMB (@lem8317801) (@lem8317800 A B P _111965 p _111966 _111967)). Qed.
Lemma lem8317803 {A B P : Type'} (lt2 : type1402 A) (z : type518 A B P) (_111965 : A -> B) (_111966 : A -> B) (s : P -> A) (_111967 : P) : (term2442 A B P lt2 z _111965 _111966 s _111967) = (term2442 A B P lt2 z _111965 _111966 s _111967).
Proof. exact (eq_refl (term2442 A B P lt2 z _111965 _111966 s _111967)). Qed.
Lemma lem8317804 {A B P : Type'} (p : type560 A B P) (lt2 : type1402 A) (z : type518 A B P) (_111965 : A -> B) (_111966 : A -> B) (s : P -> A) (_111967 : P) : (term2710 A B P p lt2 z _111965 _111966 s _111967) = (term2716 A B P p lt2 z _111965 _111966 s _111967).
Proof. exact (MK_COMB (@lem8317802 A B P _111965 p _111966 _111967) (@lem8317803 A B P lt2 z _111965 _111966 s _111967)). Qed.
Lemma lem8317805 {A B P : Type'} (p : type560 A B P) (lt2 : type1402 A) (z : type518 A B P) (_111965 : A -> B) (_111966 : A -> B) (s : P -> A) (_111967 : P) : (term2649 A B P lt2 z s _111965 p _111966 _111967) = (term2716 A B P p lt2 z _111965 _111966 s _111967).
Proof. exact (TRANS (@lem8317789 A B P p lt2 z _111965 _111966 s _111967) (@lem8317804 A B P p lt2 z _111965 _111966 s _111967)). Qed.
Lemma lem8317807 {A B D P Q : Type'} (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term866 A B P p g a') (h2 : term2391 A B D P Q f t' p g pat e a') : term2713 A B P f p g a'.
Proof. exact (conj (@lem8317778 A B D P Q f t' p g pat e a' h2) (@lem8317786 A B P p g a' h1)). Qed.
Lemma lem8317809 {A B P : Type'} (_111965 : A -> B) (_111966 : A -> B) (_111967 : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2716 A B P p lt2 z _111965 _111966 s _111967.
Proof. exact (EQ_MP (@lem8317805 A B P p lt2 z _111965 _111966 s _111967) (@lem8316110 A B P _111965 _111966 _111967 lt2 s z p h1)). Qed.
Lemma lem8317810 {A B P : Type'} (_111965 : A -> B) (_111966 : A -> B) (_111967 : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2716 A B P p lt2 z _111965 _111966 s _111967.
Proof. exact (@lem8317809 A B P _111965 _111966 _111967 lt2 s z p h1). Qed.
Lemma lem8317811 {A B P : Type'} (f : A -> B) (g : A -> B) (a' : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2716 A B P p lt2 z f g s a'.
Proof. exact (@lem8317810 A B P f g a' lt2 s z p h1). Qed.
Lemma lem8317814 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p g a') (h3 : term2391 A B D P Q f t' p g pat e a') : term2442 A B P lt2 z f g s a'.
Proof. exact (@lem8317811 A B P f g a' lt2 s z p h1 (@lem8317807 A B D P Q f t' p g pat e a' h2 h3)). Qed.
Lemma lem8317815 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p g a') (h3 : term2391 A B D P Q f t' p g pat e a') : term2717 A B P lt2 z f g s a'.
Proof. exact (fun h0 : term2718 A B P lt2 z f g s a' => @lem8317814 A B D P Q lt2 s z f t' p g pat e a' h1 h2 h3). Qed.
Lemma lem8317817 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8317818 {A B P : Type'} (lt2 : type1402 A) (z : type518 A B P) (f : A -> B) (g : A -> B) (s : P -> A) (a' : P) : (term2717 A B P lt2 z f g s a') = (term2442 A B P lt2 z f g s a').
Proof. exact (@lem8317817 (term2442 A B P lt2 z f g s a')). Qed.
Lemma lem8317819 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p g a') (h3 : term2391 A B D P Q f t' p g pat e a') : term2442 A B P lt2 z f g s a'.
Proof. exact (EQ_MP (@lem8317818 A B P lt2 z f g s a') (@lem8317815 A B D P Q lt2 s z f t' p g pat e a' h1 h2 h3)). Qed.
Lemma lem8317825 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8317826 {A B P : Type'} (f : A -> B) (g : A -> B) (lt2 : type1402 A) (_111975 : A) (s : P -> A) (a' : P) : (term2399 A B P lt2 s a' f g _111975) = (term2719 A B P f g lt2 _111975 s a').
Proof. exact (@lem8317825 ((@I (A -> B) f _111975) = (@I (A -> B) g _111975)) (term2396 A P lt2 _111975 s a')). Qed.
Lemma lem8317834 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8317835 {A B P : Type'} (f : A -> B) (g : A -> B) (lt2 : type1402 A) (_111975 : A) (s : P -> A) (a' : P) : (term2720 A B P lt2 s a' f g _111975) = (term2721 A B P f g lt2 _111975 s a').
Proof. exact (MK_COMB (@lem8317834) (@lem8317826 A B P f g lt2 _111975 s a')). Qed.
Lemma lem8317843 {A B P : Type'} (f : A -> B) (g : A -> B) (lt2 : type1402 A) (_111975 : A) (s : P -> A) (a' : P) : (term2719 A B P f g lt2 _111975 s a') = (term2719 A B P f g lt2 _111975 s a').
Proof. exact (eq_refl (term2719 A B P f g lt2 _111975 s a')). Qed.
Lemma lem8317844 {A B P : Type'} (f : A -> B) (g : A -> B) (lt2 : type1402 A) (_111975 : A) (s : P -> A) (a' : P) : ((term2399 A B P lt2 s a' f g _111975) = (term2719 A B P f g lt2 _111975 s a')) = ((term2719 A B P f g lt2 _111975 s a') = (term2719 A B P f g lt2 _111975 s a')).
Proof. exact (MK_COMB (@lem8317835 A B P f g lt2 _111975 s a') (@lem8317843 A B P f g lt2 _111975 s a')). Qed.
Lemma lem8317846 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8317847 (x : Prop) : (x = x) = True.
Proof. exact (@lem8317846 Prop x). Qed.
Lemma lem8317848 {A B P : Type'} (f : A -> B) (g : A -> B) (lt2 : type1402 A) (_111975 : A) (s : P -> A) (a' : P) : ((term2719 A B P f g lt2 _111975 s a') = (term2719 A B P f g lt2 _111975 s a')) = True.
Proof. exact (@lem8317847 (term2719 A B P f g lt2 _111975 s a')). Qed.
Lemma lem8317849 {A B P : Type'} (f : A -> B) (g : A -> B) (lt2 : type1402 A) (_111975 : A) (s : P -> A) (a' : P) : ((term2399 A B P lt2 s a' f g _111975) = (term2719 A B P f g lt2 _111975 s a')) = True.
Proof. exact (TRANS (@lem8317844 A B P f g lt2 _111975 s a') (@lem8317848 A B P f g lt2 _111975 s a')). Qed.
Lemma lem8317850 {A B P : Type'} (f : A -> B) (g : A -> B) (lt2 : type1402 A) (_111975 : A) (s : P -> A) (a' : P) : True = ((term2399 A B P lt2 s a' f g _111975) = (term2719 A B P f g lt2 _111975 s a')).
Proof. exact (SYM (@lem8317849 A B P f g lt2 _111975 s a')). Qed.
Lemma lem8317851 {A B P : Type'} (f : A -> B) (g : A -> B) (lt2 : type1402 A) (_111975 : A) (s : P -> A) (a' : P) : (term2399 A B P lt2 s a' f g _111975) = (term2719 A B P f g lt2 _111975 s a').
Proof. exact (EQ_MP (@lem8317850 A B P f g lt2 _111975 s a') (@lem0)). Qed.
Lemma lem8317852 {A B D P Q : Type'} (_111975 : A) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2403 A B D P Q lt2 s f p g pat t' e a') : term2719 A B P f g lt2 _111975 s a'.
Proof. exact (EQ_MP (@lem8317851 A B P f g lt2 _111975 s a') (@lem8316070 A B D P Q _111975 lt2 s f p g pat t' e a' h1)). Qed.
Lemma lem8317854 (b : Prop) (a : Prop) : (a \/ b) = (term970 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8317855 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a' : P) (f : A -> B) (g : A -> B) (_111975 : A) : (term2719 A B P f g lt2 _111975 s a') = (term2722 A B P lt2 s a' f g _111975).
Proof. exact (@lem8317854 (term2396 A P lt2 _111975 s a') ((@I (A -> B) f _111975) = (@I (A -> B) g _111975))). Qed.
Lemma lem8317857 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8317858 {A P : Type'} (lt2 : type1402 A) (_111975 : A) (s : P -> A) (a' : P) : (term2723 A P lt2 _111975 s a') = (term2348 A P lt2 _111975 s a').
Proof. exact (@lem8317857 (term2348 A P lt2 _111975 s a')). Qed.
Lemma lem8317859 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8317860 {A P : Type'} (lt2 : type1402 A) (_111975 : A) (s : P -> A) (a' : P) : (term2724 A P lt2 _111975 s a') = (term2725 A P lt2 _111975 s a').
Proof. exact (MK_COMB (@lem8317859) (@lem8317858 A P lt2 _111975 s a')). Qed.
Lemma lem8317861 {A B : Type'} (f : A -> B) (g : A -> B) (_111975 : A) : ((@I (A -> B) f _111975) = (@I (A -> B) g _111975)) = ((@I (A -> B) f _111975) = (@I (A -> B) g _111975)).
Proof. exact (eq_refl ((@I (A -> B) f _111975) = (@I (A -> B) g _111975))). Qed.
Lemma lem8317862 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a' : P) (f : A -> B) (g : A -> B) (_111975 : A) : (term2722 A B P lt2 s a' f g _111975) = (term2726 A B P lt2 s a' f g _111975).
Proof. exact (MK_COMB (@lem8317860 A P lt2 _111975 s a') (@lem8317861 A B f g _111975)). Qed.
Lemma lem8317863 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a' : P) (f : A -> B) (g : A -> B) (_111975 : A) : (term2719 A B P f g lt2 _111975 s a') = (term2726 A B P lt2 s a' f g _111975).
Proof. exact (TRANS (@lem8317855 A B P lt2 s a' f g _111975) (@lem8317862 A B P lt2 s a' f g _111975)). Qed.
Lemma lem8317866 {A B D P Q : Type'} (_111975 : A) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2403 A B D P Q lt2 s f p g pat t' e a') : term2726 A B P lt2 s a' f g _111975.
Proof. exact (EQ_MP (@lem8317863 A B P lt2 s a' f g _111975) (@lem8317852 A B D P Q _111975 lt2 s f p g pat t' e a' h1)). Qed.
Lemma lem8317867 {A B D P Q : Type'} (_111975 : A) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2403 A B D P Q lt2 s f p g pat t' e a') : term2726 A B P lt2 s a' f g _111975.
Proof. exact (@lem8317866 A B D P Q _111975 lt2 s f p g pat t' e a' h1). Qed.
Lemma lem8317868 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2403 A B D P Q lt2 s f p g pat t' e a') : term2727 A B P lt2 s z f g a'.
Proof. exact (@lem8317867 A B D P Q (term2425 A B P z f g a') lt2 s f p g pat t' e a' h1). Qed.
Lemma lem8317871 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p g a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2391 A B D P Q f t' p g pat e a') : (term2428 A B P z f g a') = (term2431 A B P z f g a').
Proof. exact (@lem8317868 A B D P Q z lt2 s f p g pat t' e a' h3 (@lem8317819 A B D P Q lt2 s z f t' p g pat e a' h1 h2 h4)). Qed.
Lemma lem8317872 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p g a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2391 A B D P Q f t' p g pat e a') : term2728 A B P z f g a'.
Proof. exact (fun h0 : term2435 A B P z f g a' => @lem8317871 A B D P Q z lt2 s f t' p g pat e a' h1 h2 h3 h4). Qed.
Lemma lem8317874 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8317875 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) (a' : P) : (term2728 A B P z f g a') = ((term2428 A B P z f g a') = (term2431 A B P z f g a')).
Proof. exact (@lem8317874 ((term2428 A B P z f g a') = (term2431 A B P z f g a'))). Qed.
Lemma lem8317876 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p g a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2391 A B D P Q f t' p g pat e a') : (term2428 A B P z f g a') = (term2431 A B P z f g a').
Proof. exact (EQ_MP (@lem8317875 A B P z f g a') (@lem8317872 A B D P Q z lt2 s f t' p g pat e a' h1 h2 h3 h4)). Qed.
Lemma lem8317878 {A B D P Q : Type'} (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2391 A B D P Q f t' p g pat e a') : term864 A B P p f a'.
Proof. exact (proj1 (@lem8313382 A B D P Q f t' p g pat e a' h1)). Qed.
Lemma lem8317879 {A B D P Q : Type'} (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2391 A B D P Q f t' p g pat e a') : term951 A B P p f a'.
Proof. exact (fun h0 : term866 A B P p f a' => @lem8317878 A B D P Q f t' p g pat e a' h1). Qed.
Lemma lem8317881 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8317882 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) : (term951 A B P p f a') = (term864 A B P p f a').
Proof. exact (@lem8317881 (term864 A B P p f a')). Qed.
Lemma lem8317883 {A B D P Q : Type'} (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2391 A B D P Q f t' p g pat e a') : term864 A B P p f a'.
Proof. exact (EQ_MP (@lem8317882 A B P p f a') (@lem8317879 A B D P Q f t' p g pat e a' h1)). Qed.
Lemma lem8317901 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8317902 {A B P : Type'} (_111966 : A -> B) (p : type560 A B P) (_111965 : A -> B) (_111967 : P) : (term2415 A B P _111965 p _111966 _111967) = (term2419 A B P _111966 p _111965 _111967).
Proof. exact (@lem8317901 (term864 A B P p _111966 _111967) (term866 A B P p _111965 _111967)). Qed.
Lemma lem8317908 {A B P : Type'} (z : type518 A B P) (_111965 : A -> B) (_111966 : A -> B) (_111967 : P) : (term2729 A B P z _111965 _111966 _111967) = (term2729 A B P z _111965 _111966 _111967).
Proof. exact (eq_refl (term2729 A B P z _111965 _111966 _111967)). Qed.
Lemma lem8317909 {A B P : Type'} (z : type518 A B P) (_111966 : A -> B) (p : type560 A B P) (_111965 : A -> B) (_111967 : P) : (term2650 A B P z _111965 p _111966 _111967) = (term2730 A B P z _111966 p _111965 _111967).
Proof. exact (MK_COMB (@lem8317908 A B P z _111965 _111966 _111967) (@lem8317902 A B P _111966 p _111965 _111967)). Qed.
Lemma lem8317913 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8317914 {A B P : Type'} (z : type518 A B P) (_111966 : A -> B) (p : type560 A B P) (_111965 : A -> B) (_111967 : P) : (term2730 A B P z _111966 p _111965 _111967) = (term2731 A B P z _111966 p _111965 _111967).
Proof. exact (@lem8317913 (term864 A B P p _111966 _111967) (term2435 A B P z _111965 _111966 _111967) (term866 A B P p _111965 _111967)). Qed.
Lemma lem8317932 {A B P : Type'} (z : type518 A B P) (_111966 : A -> B) (p : type560 A B P) (_111965 : A -> B) (_111967 : P) : (term2650 A B P z _111965 p _111966 _111967) = (term2731 A B P z _111966 p _111965 _111967).
Proof. exact (TRANS (@lem8317909 A B P z _111966 p _111965 _111967) (@lem8317914 A B P z _111966 p _111965 _111967)). Qed.
Lemma lem8317933 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8317934 {A B P : Type'} (z : type518 A B P) (_111966 : A -> B) (p : type560 A B P) (_111965 : A -> B) (_111967 : P) : (term2732 A B P z _111965 p _111966 _111967) = (term2733 A B P z _111966 p _111965 _111967).
Proof. exact (MK_COMB (@lem8317933) (@lem8317932 A B P z _111966 p _111965 _111967)). Qed.
Lemma lem8317952 {A B P : Type'} (z : type518 A B P) (_111966 : A -> B) (p : type560 A B P) (_111965 : A -> B) (_111967 : P) : (term2731 A B P z _111966 p _111965 _111967) = (term2731 A B P z _111966 p _111965 _111967).
Proof. exact (eq_refl (term2731 A B P z _111966 p _111965 _111967)). Qed.
Lemma lem8317953 {A B P : Type'} (z : type518 A B P) (_111966 : A -> B) (p : type560 A B P) (_111965 : A -> B) (_111967 : P) : ((term2650 A B P z _111965 p _111966 _111967) = (term2731 A B P z _111966 p _111965 _111967)) = ((term2731 A B P z _111966 p _111965 _111967) = (term2731 A B P z _111966 p _111965 _111967)).
Proof. exact (MK_COMB (@lem8317934 A B P z _111966 p _111965 _111967) (@lem8317952 A B P z _111966 p _111965 _111967)). Qed.
Lemma lem8317955 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8317956 (x : Prop) : (x = x) = True.
Proof. exact (@lem8317955 Prop x). Qed.
Lemma lem8317957 {A B P : Type'} (z : type518 A B P) (_111966 : A -> B) (p : type560 A B P) (_111965 : A -> B) (_111967 : P) : ((term2731 A B P z _111966 p _111965 _111967) = (term2731 A B P z _111966 p _111965 _111967)) = True.
Proof. exact (@lem8317956 (term2731 A B P z _111966 p _111965 _111967)). Qed.
Lemma lem8317958 {A B P : Type'} (z : type518 A B P) (_111966 : A -> B) (p : type560 A B P) (_111965 : A -> B) (_111967 : P) : ((term2650 A B P z _111965 p _111966 _111967) = (term2731 A B P z _111966 p _111965 _111967)) = True.
Proof. exact (TRANS (@lem8317953 A B P z _111966 p _111965 _111967) (@lem8317957 A B P z _111966 p _111965 _111967)). Qed.
Lemma lem8317959 {A B P : Type'} (z : type518 A B P) (_111966 : A -> B) (p : type560 A B P) (_111965 : A -> B) (_111967 : P) : True = ((term2650 A B P z _111965 p _111966 _111967) = (term2731 A B P z _111966 p _111965 _111967)).
Proof. exact (SYM (@lem8317958 A B P z _111966 p _111965 _111967)). Qed.
Lemma lem8317960 {A B P : Type'} (z : type518 A B P) (_111966 : A -> B) (p : type560 A B P) (_111965 : A -> B) (_111967 : P) : (term2650 A B P z _111965 p _111966 _111967) = (term2731 A B P z _111966 p _111965 _111967).
Proof. exact (EQ_MP (@lem8317959 A B P z _111966 p _111965 _111967) (@lem0)). Qed.
Lemma lem8317961 {A B P : Type'} (_111966 : A -> B) (_111965 : A -> B) (_111967 : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2731 A B P z _111966 p _111965 _111967.
Proof. exact (EQ_MP (@lem8317960 A B P z _111966 p _111965 _111967) (@lem8316120 A B P _111965 _111966 _111967 lt2 s z p h1)). Qed.
Lemma lem8317963 (b : Prop) (a : Prop) : (a \/ b) = (term970 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8317964 {A B P : Type'} (z : type518 A B P) (_111965 : A -> B) (p : type560 A B P) (_111966 : A -> B) (_111967 : P) : (term2731 A B P z _111966 p _111965 _111967) = (term2734 A B P z _111965 p _111966 _111967).
Proof. exact (@lem8317963 (term2735 A B P z _111966 p _111965 _111967) (term864 A B P p _111966 _111967)). Qed.
Lemma lem8317966 (a : Prop) (b : Prop) : (term972 a b) = (term973 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8317967 {A B P : Type'} (z : type518 A B P) (_111966 : A -> B) (p : type560 A B P) (_111965 : A -> B) (_111967 : P) : (term2736 A B P z _111966 p _111965 _111967) = (term2737 A B P z _111966 p _111965 _111967).
Proof. exact (@lem8317966 (term2435 A B P z _111965 _111966 _111967) (term866 A B P p _111965 _111967)). Qed.
Lemma lem8317969 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8317970 {A B P : Type'} (z : type518 A B P) (_111965 : A -> B) (_111966 : A -> B) (_111967 : P) : (term2738 A B P z _111965 _111966 _111967) = ((term2428 A B P z _111965 _111966 _111967) = (term2431 A B P z _111965 _111966 _111967)).
Proof. exact (@lem8317969 ((term2428 A B P z _111965 _111966 _111967) = (term2431 A B P z _111965 _111966 _111967))). Qed.
Lemma lem8317971 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8317972 {A B P : Type'} (z : type518 A B P) (_111965 : A -> B) (_111966 : A -> B) (_111967 : P) : (term2739 A B P z _111965 _111966 _111967) = (term2740 A B P z _111965 _111966 _111967).
Proof. exact (MK_COMB (@lem8317971) (@lem8317970 A B P z _111965 _111966 _111967)). Qed.
Lemma lem8317974 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8317975 {A B P : Type'} (p : type560 A B P) (_111965 : A -> B) (_111967 : P) : (term976 A B P p _111965 _111967) = (term864 A B P p _111965 _111967).
Proof. exact (@lem8317974 (term864 A B P p _111965 _111967)). Qed.
Lemma lem8317976 {A B P : Type'} (z : type518 A B P) (_111966 : A -> B) (p : type560 A B P) (_111965 : A -> B) (_111967 : P) : (term2737 A B P z _111966 p _111965 _111967) = (term2741 A B P z _111966 p _111965 _111967).
Proof. exact (MK_COMB (@lem8317972 A B P z _111965 _111966 _111967) (@lem8317975 A B P p _111965 _111967)). Qed.
Lemma lem8317977 {A B P : Type'} (z : type518 A B P) (_111966 : A -> B) (p : type560 A B P) (_111965 : A -> B) (_111967 : P) : (term2736 A B P z _111966 p _111965 _111967) = (term2741 A B P z _111966 p _111965 _111967).
Proof. exact (TRANS (@lem8317967 A B P z _111966 p _111965 _111967) (@lem8317976 A B P z _111966 p _111965 _111967)). Qed.
Lemma lem8317978 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8317979 {A B P : Type'} (z : type518 A B P) (_111966 : A -> B) (p : type560 A B P) (_111965 : A -> B) (_111967 : P) : (term2742 A B P z _111966 p _111965 _111967) = (term2743 A B P z _111966 p _111965 _111967).
Proof. exact (MK_COMB (@lem8317978) (@lem8317977 A B P z _111966 p _111965 _111967)). Qed.
Lemma lem8317980 {A B P : Type'} (p : type560 A B P) (_111966 : A -> B) (_111967 : P) : (term864 A B P p _111966 _111967) = (term864 A B P p _111966 _111967).
Proof. exact (eq_refl (term864 A B P p _111966 _111967)). Qed.
Lemma lem8317981 {A B P : Type'} (z : type518 A B P) (_111965 : A -> B) (p : type560 A B P) (_111966 : A -> B) (_111967 : P) : (term2734 A B P z _111965 p _111966 _111967) = (term2744 A B P z _111965 p _111966 _111967).
Proof. exact (MK_COMB (@lem8317979 A B P z _111966 p _111965 _111967) (@lem8317980 A B P p _111966 _111967)). Qed.
Lemma lem8317982 {A B P : Type'} (z : type518 A B P) (_111965 : A -> B) (p : type560 A B P) (_111966 : A -> B) (_111967 : P) : (term2731 A B P z _111966 p _111965 _111967) = (term2744 A B P z _111965 p _111966 _111967).
Proof. exact (TRANS (@lem8317964 A B P z _111965 p _111966 _111967) (@lem8317981 A B P z _111965 p _111966 _111967)). Qed.
Lemma lem8317984 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p g a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2391 A B D P Q f t' p g pat e a') : term2741 A B P z g p f a'.
Proof. exact (conj (@lem8317876 A B D P Q z lt2 s f t' p g pat e a' h1 h2 h3 h4) (@lem8317883 A B D P Q f t' p g pat e a' h4)). Qed.
Lemma lem8317986 {A B P : Type'} (_111965 : A -> B) (_111966 : A -> B) (_111967 : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2744 A B P z _111965 p _111966 _111967.
Proof. exact (EQ_MP (@lem8317982 A B P z _111965 p _111966 _111967) (@lem8317961 A B P _111966 _111965 _111967 lt2 s z p h1)). Qed.
Lemma lem8317987 {A B P : Type'} (_111965 : A -> B) (_111966 : A -> B) (_111967 : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2744 A B P z _111965 p _111966 _111967.
Proof. exact (@lem8317986 A B P _111965 _111966 _111967 lt2 s z p h1). Qed.
Lemma lem8317988 {A B P : Type'} (f : A -> B) (g : A -> B) (a' : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2744 A B P z f p g a'.
Proof. exact (@lem8317987 A B P f g a' lt2 s z p h1). Qed.
Lemma lem8317991 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p g a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2391 A B D P Q f t' p g pat e a') : term864 A B P p g a'.
Proof. exact (@lem8317988 A B P f g a' lt2 s z p h1 (@lem8317984 A B D P Q z lt2 s f t' p g pat e a' h1 h2 h3 h4)). Qed.
Lemma lem8317992 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term2403 A B D P Q lt2 s f p g pat t' e a') (h3 : term2391 A B D P Q f t' p g pat e a') : term951 A B P p g a'.
Proof. exact (fun h0 : term866 A B P p g a' => @lem8317991 A B D P Q z lt2 s f t' p g pat e a' h1 h0 h2 h3). Qed.
Lemma lem8317994 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8317995 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a' : P) : (term951 A B P p g a') = (term864 A B P p g a').
Proof. exact (@lem8317994 (term864 A B P p g a')). Qed.
Lemma lem8317996 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term2403 A B D P Q lt2 s f p g pat t' e a') (h3 : term2391 A B D P Q f t' p g pat e a') : term864 A B P p g a'.
Proof. exact (EQ_MP (@lem8317995 A B P p g a') (@lem8317992 A B D P Q z lt2 s f t' p g pat e a' h1 h2 h3)). Qed.
Lemma lem8317999 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem8318001 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a' : P) : (term866 A B P p g a') = (term2745 A B P p g a').
Proof. exact (@lem8317999 (term864 A B P p g a')). Qed.
Lemma lem8318004 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a' : P) (h1 : term866 A B P p g a') : term2745 A B P p g a'.
Proof. exact (EQ_MP (@lem8318001 A B P p g a') (@lem8316076 A B P p g a' h1)). Qed.
Lemma lem8318007 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p g a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2391 A B D P Q f t' p g pat e a') : False.
Proof. exact (@lem8318004 A B P p g a' h2 (@lem8317996 A B D P Q z lt2 s f t' p g pat e a' h1 h3 h4)). Qed.
Lemma lem8318008 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p g a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2391 A B D P Q f t' p g pat e a') : term937.
Proof. exact (fun h0 : ~ False => @lem8318007 A B D P Q z lt2 s f t' p g pat e a' h1 h2 h3 h4). Qed.
Lemma lem8318010 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8318011 : term937 = False.
Proof. exact (@lem8318010 False). Qed.
Lemma lem8318012 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p g a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2391 A B D P Q f t' p g pat e a') : False.
Proof. exact (EQ_MP (@lem8318011) (@lem8318008 A B D P Q z lt2 s f t' p g pat e a' h1 h2 h3 h4)). Qed.
Lemma lem8318440 {A B D P Q : Type'} (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2391 A B D P Q f t' p g pat e a') : (@I (Q -> D) pat t') = (@I (P -> D) e a').
Proof. exact (proj2 (@lem8313382 A B D P Q f t' p g pat e a' h1)). Qed.
Lemma lem8318441 {A B D P Q : Type'} (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2391 A B D P Q f t' p g pat e a') : term2659 D P Q pat t' e a'.
Proof. exact (fun h0 : term2319 D P Q pat t' e a' => @lem8318440 A B D P Q f t' p g pat e a' h1). Qed.
Lemma lem8318443 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8318444 {D P Q : Type'} (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) : (term2659 D P Q pat t' e a') = ((@I (Q -> D) pat t') = (@I (P -> D) e a')).
Proof. exact (@lem8318443 ((@I (Q -> D) pat t') = (@I (P -> D) e a'))). Qed.
Lemma lem8318445 {A B D P Q : Type'} (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2391 A B D P Q f t' p g pat e a') : (@I (Q -> D) pat t') = (@I (P -> D) e a').
Proof. exact (EQ_MP (@lem8318444 D P Q pat t' e a') (@lem8318441 A B D P Q f t' p g pat e a' h1)). Qed.
Lemma lem8318448 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem8318450 {D P Q : Type'} (pat : Q -> D) (_111999 : Q) (e : P -> D) (a' : P) : (term2319 D P Q pat _111999 e a') = (term2746 D P Q pat _111999 e a').
Proof. exact (@lem8318448 ((@I (Q -> D) pat _111999) = (@I (P -> D) e a'))). Qed.
Lemma lem8318453 {D P Q : Type'} (_111999 : Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') : term2746 D P Q pat _111999 e a'.
Proof. exact (EQ_MP (@lem8318450 D P Q pat _111999 e a') (@lem8316192 D P Q _111999 pat e a' h1)). Qed.
Lemma lem8318454 {D P Q : Type'} (_111999 : Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') : term2746 D P Q pat _111999 e a'.
Proof. exact (@lem8318453 D P Q _111999 pat e a' h1). Qed.
Lemma lem8318455 {D P Q : Type'} (t' : Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') : term2746 D P Q pat t' e a'.
Proof. exact (@lem8318454 D P Q t' pat e a' h1). Qed.
Lemma lem8318458 {A B D P Q : Type'} (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') (h2 : term2391 A B D P Q f t' p g pat e a') : False.
Proof. exact (@lem8318455 D P Q t' pat e a' h1 (@lem8318445 A B D P Q f t' p g pat e a' h2)). Qed.
Lemma lem8318459 {A B D P Q : Type'} (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') (h2 : term2391 A B D P Q f t' p g pat e a') : term937.
Proof. exact (fun h0 : ~ False => @lem8318458 A B D P Q f t' p g pat e a' h1 h2). Qed.
Lemma lem8318461 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8318462 : term937 = False.
Proof. exact (@lem8318461 False). Qed.
Lemma lem8318463 {A B D P Q : Type'} (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') (h2 : term2391 A B D P Q f t' p g pat e a') : False.
Proof. exact (EQ_MP (@lem8318462) (@lem8318459 A B D P Q f t' p g pat e a' h1 h2)). Qed.
Lemma lem8318892 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) (h1 : term866 A B P p f a') : term866 A B P p f a'.
Proof. exact (h1). Qed.
Lemma lem8318893 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) (h1 : term866 A B P p f a') : term2708 A B P p f a'.
Proof. exact (fun h0 : term864 A B P p f a' => @lem8318892 A B P p f a' h1). Qed.
Lemma lem8318895 (p : Prop) : (term2709 p) = (~ p).
Proof. exact (EQ_MP (@lem21028 p) (@lem21107 p)). Qed.
Lemma lem8318896 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) : (term2708 A B P p f a') = (term866 A B P p f a').
Proof. exact (@lem8318895 (term864 A B P p f a')). Qed.
Lemma lem8318897 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) (h1 : term866 A B P p f a') : term866 A B P p f a'.
Proof. exact (EQ_MP (@lem8318896 A B P p f a') (@lem8318893 A B P p f a' h1)). Qed.
Lemma lem8318899 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2389 A B D P Q f p g pat t' e a') : term864 A B P p g a'.
Proof. exact (proj1 (@lem8313387 A B D P Q f p g pat t' e a' h1)). Qed.
Lemma lem8318900 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2389 A B D P Q f p g pat t' e a') : term951 A B P p g a'.
Proof. exact (fun h0 : term866 A B P p g a' => @lem8318899 A B D P Q f p g pat t' e a' h1). Qed.
Lemma lem8318902 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8318903 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a' : P) : (term951 A B P p g a') = (term864 A B P p g a').
Proof. exact (@lem8318902 (term864 A B P p g a')). Qed.
Lemma lem8318904 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2389 A B D P Q f p g pat t' e a') : term864 A B P p g a'.
Proof. exact (EQ_MP (@lem8318903 A B P p g a') (@lem8318900 A B D P Q f p g pat t' e a' h1)). Qed.
Lemma lem8318906 (b : Prop) (a : Prop) : (a \/ b) = (term970 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8318907 {A B P : Type'} (p : type560 A B P) (lt2 : type1402 A) (z : type518 A B P) (_112012 : A -> B) (_112013 : A -> B) (s : P -> A) (_112014 : P) : (term2651 A B P lt2 z s _112012 p _112013 _112014) = (term2747 A B P p lt2 z _112012 _112013 s _112014).
Proof. exact (@lem8318906 (term2419 A B P _112012 p _112013 _112014) (term2442 A B P lt2 z _112012 _112013 s _112014)). Qed.
Lemma lem8318909 (a : Prop) (b : Prop) : (term972 a b) = (term973 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8318910 {A B P : Type'} (_112012 : A -> B) (p : type560 A B P) (_112013 : A -> B) (_112014 : P) : (term2748 A B P _112012 p _112013 _112014) = (term2749 A B P _112012 p _112013 _112014).
Proof. exact (@lem8318909 (term864 A B P p _112012 _112014) (term866 A B P p _112013 _112014)). Qed.
Lemma lem8318912 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8318913 {A B P : Type'} (p : type560 A B P) (_112013 : A -> B) (_112014 : P) : (term976 A B P p _112013 _112014) = (term864 A B P p _112013 _112014).
Proof. exact (@lem8318912 (term864 A B P p _112013 _112014)). Qed.
Lemma lem8318914 {A B P : Type'} (p : type560 A B P) (_112012 : A -> B) (_112014 : P) : (term2750 A B P p _112012 _112014) = (term2750 A B P p _112012 _112014).
Proof. exact (eq_refl (term2750 A B P p _112012 _112014)). Qed.
Lemma lem8318915 {A B P : Type'} (_112012 : A -> B) (p : type560 A B P) (_112013 : A -> B) (_112014 : P) : (term2749 A B P _112012 p _112013 _112014) = (term2751 A B P _112012 p _112013 _112014).
Proof. exact (MK_COMB (@lem8318914 A B P p _112012 _112014) (@lem8318913 A B P p _112013 _112014)). Qed.
Lemma lem8318916 {A B P : Type'} (_112012 : A -> B) (p : type560 A B P) (_112013 : A -> B) (_112014 : P) : (term2748 A B P _112012 p _112013 _112014) = (term2751 A B P _112012 p _112013 _112014).
Proof. exact (TRANS (@lem8318910 A B P _112012 p _112013 _112014) (@lem8318915 A B P _112012 p _112013 _112014)). Qed.
Lemma lem8318917 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8318918 {A B P : Type'} (_112012 : A -> B) (p : type560 A B P) (_112013 : A -> B) (_112014 : P) : (term2752 A B P _112012 p _112013 _112014) = (term2753 A B P _112012 p _112013 _112014).
Proof. exact (MK_COMB (@lem8318917) (@lem8318916 A B P _112012 p _112013 _112014)). Qed.
Lemma lem8318919 {A B P : Type'} (lt2 : type1402 A) (z : type518 A B P) (_112012 : A -> B) (_112013 : A -> B) (s : P -> A) (_112014 : P) : (term2442 A B P lt2 z _112012 _112013 s _112014) = (term2442 A B P lt2 z _112012 _112013 s _112014).
Proof. exact (eq_refl (term2442 A B P lt2 z _112012 _112013 s _112014)). Qed.
Lemma lem8318920 {A B P : Type'} (p : type560 A B P) (lt2 : type1402 A) (z : type518 A B P) (_112012 : A -> B) (_112013 : A -> B) (s : P -> A) (_112014 : P) : (term2747 A B P p lt2 z _112012 _112013 s _112014) = (term2754 A B P p lt2 z _112012 _112013 s _112014).
Proof. exact (MK_COMB (@lem8318918 A B P _112012 p _112013 _112014) (@lem8318919 A B P lt2 z _112012 _112013 s _112014)). Qed.
Lemma lem8318921 {A B P : Type'} (p : type560 A B P) (lt2 : type1402 A) (z : type518 A B P) (_112012 : A -> B) (_112013 : A -> B) (s : P -> A) (_112014 : P) : (term2651 A B P lt2 z s _112012 p _112013 _112014) = (term2754 A B P p lt2 z _112012 _112013 s _112014).
Proof. exact (TRANS (@lem8318907 A B P p lt2 z _112012 _112013 s _112014) (@lem8318920 A B P p lt2 z _112012 _112013 s _112014)). Qed.
Lemma lem8318923 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term866 A B P p f a') (h2 : term2389 A B D P Q f p g pat t' e a') : term2751 A B P f p g a'.
Proof. exact (conj (@lem8318897 A B P p f a' h1) (@lem8318904 A B D P Q f p g pat t' e a' h2)). Qed.
Lemma lem8318925 {A B P : Type'} (_112012 : A -> B) (_112013 : A -> B) (_112014 : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2754 A B P p lt2 z _112012 _112013 s _112014.
Proof. exact (EQ_MP (@lem8318921 A B P p lt2 z _112012 _112013 s _112014) (@lem8316362 A B P _112012 _112013 _112014 lt2 s z p h1)). Qed.
Lemma lem8318926 {A B P : Type'} (_112012 : A -> B) (_112013 : A -> B) (_112014 : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2754 A B P p lt2 z _112012 _112013 s _112014.
Proof. exact (@lem8318925 A B P _112012 _112013 _112014 lt2 s z p h1). Qed.
Lemma lem8318927 {A B P : Type'} (f : A -> B) (g : A -> B) (a' : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2754 A B P p lt2 z f g s a'.
Proof. exact (@lem8318926 A B P f g a' lt2 s z p h1). Qed.
Lemma lem8318930 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p f a') (h3 : term2389 A B D P Q f p g pat t' e a') : term2442 A B P lt2 z f g s a'.
Proof. exact (@lem8318927 A B P f g a' lt2 s z p h1 (@lem8318923 A B D P Q f p g pat t' e a' h2 h3)). Qed.
Lemma lem8318931 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p f a') (h3 : term2389 A B D P Q f p g pat t' e a') : term2717 A B P lt2 z f g s a'.
Proof. exact (fun h0 : term2718 A B P lt2 z f g s a' => @lem8318930 A B D P Q lt2 s z f p g pat t' e a' h1 h2 h3). Qed.
Lemma lem8318933 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8318934 {A B P : Type'} (lt2 : type1402 A) (z : type518 A B P) (f : A -> B) (g : A -> B) (s : P -> A) (a' : P) : (term2717 A B P lt2 z f g s a') = (term2442 A B P lt2 z f g s a').
Proof. exact (@lem8318933 (term2442 A B P lt2 z f g s a')). Qed.
Lemma lem8318935 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p f a') (h3 : term2389 A B D P Q f p g pat t' e a') : term2442 A B P lt2 z f g s a'.
Proof. exact (EQ_MP (@lem8318934 A B P lt2 z f g s a') (@lem8318931 A B D P Q lt2 s z f p g pat t' e a' h1 h2 h3)). Qed.
Lemma lem8318941 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8318942 {A B P : Type'} (f : A -> B) (g : A -> B) (lt2 : type1402 A) (_112022 : A) (s : P -> A) (a' : P) : (term2399 A B P lt2 s a' f g _112022) = (term2719 A B P f g lt2 _112022 s a').
Proof. exact (@lem8318941 ((@I (A -> B) f _112022) = (@I (A -> B) g _112022)) (term2396 A P lt2 _112022 s a')). Qed.
Lemma lem8318950 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8318951 {A B P : Type'} (f : A -> B) (g : A -> B) (lt2 : type1402 A) (_112022 : A) (s : P -> A) (a' : P) : (term2720 A B P lt2 s a' f g _112022) = (term2721 A B P f g lt2 _112022 s a').
Proof. exact (MK_COMB (@lem8318950) (@lem8318942 A B P f g lt2 _112022 s a')). Qed.
Lemma lem8318959 {A B P : Type'} (f : A -> B) (g : A -> B) (lt2 : type1402 A) (_112022 : A) (s : P -> A) (a' : P) : (term2719 A B P f g lt2 _112022 s a') = (term2719 A B P f g lt2 _112022 s a').
Proof. exact (eq_refl (term2719 A B P f g lt2 _112022 s a')). Qed.
Lemma lem8318960 {A B P : Type'} (f : A -> B) (g : A -> B) (lt2 : type1402 A) (_112022 : A) (s : P -> A) (a' : P) : ((term2399 A B P lt2 s a' f g _112022) = (term2719 A B P f g lt2 _112022 s a')) = ((term2719 A B P f g lt2 _112022 s a') = (term2719 A B P f g lt2 _112022 s a')).
Proof. exact (MK_COMB (@lem8318951 A B P f g lt2 _112022 s a') (@lem8318959 A B P f g lt2 _112022 s a')). Qed.
Lemma lem8318962 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8318963 (x : Prop) : (x = x) = True.
Proof. exact (@lem8318962 Prop x). Qed.
Lemma lem8318964 {A B P : Type'} (f : A -> B) (g : A -> B) (lt2 : type1402 A) (_112022 : A) (s : P -> A) (a' : P) : ((term2719 A B P f g lt2 _112022 s a') = (term2719 A B P f g lt2 _112022 s a')) = True.
Proof. exact (@lem8318963 (term2719 A B P f g lt2 _112022 s a')). Qed.
Lemma lem8318965 {A B P : Type'} (f : A -> B) (g : A -> B) (lt2 : type1402 A) (_112022 : A) (s : P -> A) (a' : P) : ((term2399 A B P lt2 s a' f g _112022) = (term2719 A B P f g lt2 _112022 s a')) = True.
Proof. exact (TRANS (@lem8318960 A B P f g lt2 _112022 s a') (@lem8318964 A B P f g lt2 _112022 s a')). Qed.
Lemma lem8318966 {A B P : Type'} (f : A -> B) (g : A -> B) (lt2 : type1402 A) (_112022 : A) (s : P -> A) (a' : P) : True = ((term2399 A B P lt2 s a' f g _112022) = (term2719 A B P f g lt2 _112022 s a')).
Proof. exact (SYM (@lem8318965 A B P f g lt2 _112022 s a')). Qed.
Lemma lem8318967 {A B P : Type'} (f : A -> B) (g : A -> B) (lt2 : type1402 A) (_112022 : A) (s : P -> A) (a' : P) : (term2399 A B P lt2 s a' f g _112022) = (term2719 A B P f g lt2 _112022 s a').
Proof. exact (EQ_MP (@lem8318966 A B P f g lt2 _112022 s a') (@lem0)). Qed.
Lemma lem8318968 {A B D P Q : Type'} (_112022 : A) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2403 A B D P Q lt2 s f p g pat t' e a') : term2719 A B P f g lt2 _112022 s a'.
Proof. exact (EQ_MP (@lem8318967 A B P f g lt2 _112022 s a') (@lem8316302 A B D P Q _112022 lt2 s f p g pat t' e a' h1)). Qed.
Lemma lem8318970 (b : Prop) (a : Prop) : (a \/ b) = (term970 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8318971 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a' : P) (f : A -> B) (g : A -> B) (_112022 : A) : (term2719 A B P f g lt2 _112022 s a') = (term2722 A B P lt2 s a' f g _112022).
Proof. exact (@lem8318970 (term2396 A P lt2 _112022 s a') ((@I (A -> B) f _112022) = (@I (A -> B) g _112022))). Qed.
Lemma lem8318973 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8318974 {A P : Type'} (lt2 : type1402 A) (_112022 : A) (s : P -> A) (a' : P) : (term2723 A P lt2 _112022 s a') = (term2348 A P lt2 _112022 s a').
Proof. exact (@lem8318973 (term2348 A P lt2 _112022 s a')). Qed.
Lemma lem8318975 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8318976 {A P : Type'} (lt2 : type1402 A) (_112022 : A) (s : P -> A) (a' : P) : (term2724 A P lt2 _112022 s a') = (term2725 A P lt2 _112022 s a').
Proof. exact (MK_COMB (@lem8318975) (@lem8318974 A P lt2 _112022 s a')). Qed.
Lemma lem8318977 {A B : Type'} (f : A -> B) (g : A -> B) (_112022 : A) : ((@I (A -> B) f _112022) = (@I (A -> B) g _112022)) = ((@I (A -> B) f _112022) = (@I (A -> B) g _112022)).
Proof. exact (eq_refl ((@I (A -> B) f _112022) = (@I (A -> B) g _112022))). Qed.
Lemma lem8318978 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a' : P) (f : A -> B) (g : A -> B) (_112022 : A) : (term2722 A B P lt2 s a' f g _112022) = (term2726 A B P lt2 s a' f g _112022).
Proof. exact (MK_COMB (@lem8318976 A P lt2 _112022 s a') (@lem8318977 A B f g _112022)). Qed.
Lemma lem8318979 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (a' : P) (f : A -> B) (g : A -> B) (_112022 : A) : (term2719 A B P f g lt2 _112022 s a') = (term2726 A B P lt2 s a' f g _112022).
Proof. exact (TRANS (@lem8318971 A B P lt2 s a' f g _112022) (@lem8318978 A B P lt2 s a' f g _112022)). Qed.
Lemma lem8318982 {A B D P Q : Type'} (_112022 : A) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2403 A B D P Q lt2 s f p g pat t' e a') : term2726 A B P lt2 s a' f g _112022.
Proof. exact (EQ_MP (@lem8318979 A B P lt2 s a' f g _112022) (@lem8318968 A B D P Q _112022 lt2 s f p g pat t' e a' h1)). Qed.
Lemma lem8318983 {A B D P Q : Type'} (_112022 : A) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2403 A B D P Q lt2 s f p g pat t' e a') : term2726 A B P lt2 s a' f g _112022.
Proof. exact (@lem8318982 A B D P Q _112022 lt2 s f p g pat t' e a' h1). Qed.
Lemma lem8318984 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2403 A B D P Q lt2 s f p g pat t' e a') : term2727 A B P lt2 s z f g a'.
Proof. exact (@lem8318983 A B D P Q (term2425 A B P z f g a') lt2 s f p g pat t' e a' h1). Qed.
Lemma lem8318987 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p f a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2389 A B D P Q f p g pat t' e a') : (term2428 A B P z f g a') = (term2431 A B P z f g a').
Proof. exact (@lem8318984 A B D P Q z lt2 s f p g pat t' e a' h3 (@lem8318935 A B D P Q lt2 s z f p g pat t' e a' h1 h2 h4)). Qed.
Lemma lem8318988 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p f a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2389 A B D P Q f p g pat t' e a') : term2728 A B P z f g a'.
Proof. exact (fun h0 : term2435 A B P z f g a' => @lem8318987 A B D P Q z lt2 s f p g pat t' e a' h1 h2 h3 h4). Qed.
Lemma lem8318990 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8318991 {A B P : Type'} (z : type518 A B P) (f : A -> B) (g : A -> B) (a' : P) : (term2728 A B P z f g a') = ((term2428 A B P z f g a') = (term2431 A B P z f g a')).
Proof. exact (@lem8318990 ((term2428 A B P z f g a') = (term2431 A B P z f g a'))). Qed.
Lemma lem8318992 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p f a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2389 A B D P Q f p g pat t' e a') : (term2428 A B P z f g a') = (term2431 A B P z f g a').
Proof. exact (EQ_MP (@lem8318991 A B P z f g a') (@lem8318988 A B D P Q z lt2 s f p g pat t' e a' h1 h2 h3 h4)). Qed.
Lemma lem8318994 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2389 A B D P Q f p g pat t' e a') : term864 A B P p g a'.
Proof. exact (proj1 (@lem8313387 A B D P Q f p g pat t' e a' h1)). Qed.
Lemma lem8318995 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2389 A B D P Q f p g pat t' e a') : term951 A B P p g a'.
Proof. exact (fun h0 : term866 A B P p g a' => @lem8318994 A B D P Q f p g pat t' e a' h1). Qed.
Lemma lem8318997 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8318998 {A B P : Type'} (p : type560 A B P) (g : A -> B) (a' : P) : (term951 A B P p g a') = (term864 A B P p g a').
Proof. exact (@lem8318997 (term864 A B P p g a')). Qed.
Lemma lem8318999 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2389 A B D P Q f p g pat t' e a') : term864 A B P p g a'.
Proof. exact (EQ_MP (@lem8318998 A B P p g a') (@lem8318995 A B D P Q f p g pat t' e a' h1)). Qed.
Lemma lem8319005 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8319006 {A B P : Type'} (z : type518 A B P) (_112012 : A -> B) (p : type560 A B P) (_112013 : A -> B) (_112014 : P) : (term2652 A B P z _112012 p _112013 _112014) = (term2755 A B P z _112012 p _112013 _112014).
Proof. exact (@lem8319005 (term864 A B P p _112012 _112014) (term2435 A B P z _112012 _112013 _112014) (term866 A B P p _112013 _112014)). Qed.
Lemma lem8319024 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8319025 {A B P : Type'} (z : type518 A B P) (_112012 : A -> B) (p : type560 A B P) (_112013 : A -> B) (_112014 : P) : (term2756 A B P z _112012 p _112013 _112014) = (term2757 A B P z _112012 p _112013 _112014).
Proof. exact (MK_COMB (@lem8319024) (@lem8319006 A B P z _112012 p _112013 _112014)). Qed.
Lemma lem8319043 {A B P : Type'} (z : type518 A B P) (_112012 : A -> B) (p : type560 A B P) (_112013 : A -> B) (_112014 : P) : (term2755 A B P z _112012 p _112013 _112014) = (term2755 A B P z _112012 p _112013 _112014).
Proof. exact (eq_refl (term2755 A B P z _112012 p _112013 _112014)). Qed.
Lemma lem8319044 {A B P : Type'} (z : type518 A B P) (_112012 : A -> B) (p : type560 A B P) (_112013 : A -> B) (_112014 : P) : ((term2652 A B P z _112012 p _112013 _112014) = (term2755 A B P z _112012 p _112013 _112014)) = ((term2755 A B P z _112012 p _112013 _112014) = (term2755 A B P z _112012 p _112013 _112014)).
Proof. exact (MK_COMB (@lem8319025 A B P z _112012 p _112013 _112014) (@lem8319043 A B P z _112012 p _112013 _112014)). Qed.
Lemma lem8319046 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8319047 (x : Prop) : (x = x) = True.
Proof. exact (@lem8319046 Prop x). Qed.
Lemma lem8319048 {A B P : Type'} (z : type518 A B P) (_112012 : A -> B) (p : type560 A B P) (_112013 : A -> B) (_112014 : P) : ((term2755 A B P z _112012 p _112013 _112014) = (term2755 A B P z _112012 p _112013 _112014)) = True.
Proof. exact (@lem8319047 (term2755 A B P z _112012 p _112013 _112014)). Qed.
Lemma lem8319049 {A B P : Type'} (z : type518 A B P) (_112012 : A -> B) (p : type560 A B P) (_112013 : A -> B) (_112014 : P) : ((term2652 A B P z _112012 p _112013 _112014) = (term2755 A B P z _112012 p _112013 _112014)) = True.
Proof. exact (TRANS (@lem8319044 A B P z _112012 p _112013 _112014) (@lem8319048 A B P z _112012 p _112013 _112014)). Qed.
Lemma lem8319050 {A B P : Type'} (z : type518 A B P) (_112012 : A -> B) (p : type560 A B P) (_112013 : A -> B) (_112014 : P) : True = ((term2652 A B P z _112012 p _112013 _112014) = (term2755 A B P z _112012 p _112013 _112014)).
Proof. exact (SYM (@lem8319049 A B P z _112012 p _112013 _112014)). Qed.
Lemma lem8319051 {A B P : Type'} (z : type518 A B P) (_112012 : A -> B) (p : type560 A B P) (_112013 : A -> B) (_112014 : P) : (term2652 A B P z _112012 p _112013 _112014) = (term2755 A B P z _112012 p _112013 _112014).
Proof. exact (EQ_MP (@lem8319050 A B P z _112012 p _112013 _112014) (@lem0)). Qed.
Lemma lem8319052 {A B P : Type'} (_112012 : A -> B) (_112013 : A -> B) (_112014 : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2755 A B P z _112012 p _112013 _112014.
Proof. exact (EQ_MP (@lem8319051 A B P z _112012 p _112013 _112014) (@lem8316372 A B P _112012 _112013 _112014 lt2 s z p h1)). Qed.
Lemma lem8319054 (b : Prop) (a : Prop) : (a \/ b) = (term970 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8319055 {A B P : Type'} (z : type518 A B P) (_112013 : A -> B) (p : type560 A B P) (_112012 : A -> B) (_112014 : P) : (term2755 A B P z _112012 p _112013 _112014) = (term2758 A B P z _112013 p _112012 _112014).
Proof. exact (@lem8319054 (term2759 A B P z _112012 p _112013 _112014) (term864 A B P p _112012 _112014)). Qed.
Lemma lem8319057 (a : Prop) (b : Prop) : (term972 a b) = (term973 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8319058 {A B P : Type'} (z : type518 A B P) (_112012 : A -> B) (p : type560 A B P) (_112013 : A -> B) (_112014 : P) : (term2760 A B P z _112012 p _112013 _112014) = (term2761 A B P z _112012 p _112013 _112014).
Proof. exact (@lem8319057 (term2435 A B P z _112012 _112013 _112014) (term866 A B P p _112013 _112014)). Qed.
Lemma lem8319060 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8319061 {A B P : Type'} (z : type518 A B P) (_112012 : A -> B) (_112013 : A -> B) (_112014 : P) : (term2738 A B P z _112012 _112013 _112014) = ((term2428 A B P z _112012 _112013 _112014) = (term2431 A B P z _112012 _112013 _112014)).
Proof. exact (@lem8319060 ((term2428 A B P z _112012 _112013 _112014) = (term2431 A B P z _112012 _112013 _112014))). Qed.
Lemma lem8319062 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8319063 {A B P : Type'} (z : type518 A B P) (_112012 : A -> B) (_112013 : A -> B) (_112014 : P) : (term2739 A B P z _112012 _112013 _112014) = (term2740 A B P z _112012 _112013 _112014).
Proof. exact (MK_COMB (@lem8319062) (@lem8319061 A B P z _112012 _112013 _112014)). Qed.
Lemma lem8319065 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8319066 {A B P : Type'} (p : type560 A B P) (_112013 : A -> B) (_112014 : P) : (term976 A B P p _112013 _112014) = (term864 A B P p _112013 _112014).
Proof. exact (@lem8319065 (term864 A B P p _112013 _112014)). Qed.
Lemma lem8319067 {A B P : Type'} (z : type518 A B P) (_112012 : A -> B) (p : type560 A B P) (_112013 : A -> B) (_112014 : P) : (term2761 A B P z _112012 p _112013 _112014) = (term2762 A B P z _112012 p _112013 _112014).
Proof. exact (MK_COMB (@lem8319063 A B P z _112012 _112013 _112014) (@lem8319066 A B P p _112013 _112014)). Qed.
Lemma lem8319068 {A B P : Type'} (z : type518 A B P) (_112012 : A -> B) (p : type560 A B P) (_112013 : A -> B) (_112014 : P) : (term2760 A B P z _112012 p _112013 _112014) = (term2762 A B P z _112012 p _112013 _112014).
Proof. exact (TRANS (@lem8319058 A B P z _112012 p _112013 _112014) (@lem8319067 A B P z _112012 p _112013 _112014)). Qed.
Lemma lem8319069 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8319070 {A B P : Type'} (z : type518 A B P) (_112012 : A -> B) (p : type560 A B P) (_112013 : A -> B) (_112014 : P) : (term2763 A B P z _112012 p _112013 _112014) = (term2764 A B P z _112012 p _112013 _112014).
Proof. exact (MK_COMB (@lem8319069) (@lem8319068 A B P z _112012 p _112013 _112014)). Qed.
Lemma lem8319071 {A B P : Type'} (p : type560 A B P) (_112012 : A -> B) (_112014 : P) : (term864 A B P p _112012 _112014) = (term864 A B P p _112012 _112014).
Proof. exact (eq_refl (term864 A B P p _112012 _112014)). Qed.
Lemma lem8319072 {A B P : Type'} (z : type518 A B P) (_112013 : A -> B) (p : type560 A B P) (_112012 : A -> B) (_112014 : P) : (term2758 A B P z _112013 p _112012 _112014) = (term2765 A B P z _112013 p _112012 _112014).
Proof. exact (MK_COMB (@lem8319070 A B P z _112012 p _112013 _112014) (@lem8319071 A B P p _112012 _112014)). Qed.
Lemma lem8319073 {A B P : Type'} (z : type518 A B P) (_112013 : A -> B) (p : type560 A B P) (_112012 : A -> B) (_112014 : P) : (term2755 A B P z _112012 p _112013 _112014) = (term2765 A B P z _112013 p _112012 _112014).
Proof. exact (TRANS (@lem8319055 A B P z _112013 p _112012 _112014) (@lem8319072 A B P z _112013 p _112012 _112014)). Qed.
Lemma lem8319075 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p f a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2389 A B D P Q f p g pat t' e a') : term2762 A B P z f p g a'.
Proof. exact (conj (@lem8318992 A B D P Q z lt2 s f p g pat t' e a' h1 h2 h3 h4) (@lem8318999 A B D P Q f p g pat t' e a' h4)). Qed.
Lemma lem8319077 {A B P : Type'} (_112013 : A -> B) (_112012 : A -> B) (_112014 : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2765 A B P z _112013 p _112012 _112014.
Proof. exact (EQ_MP (@lem8319073 A B P z _112013 p _112012 _112014) (@lem8319052 A B P _112012 _112013 _112014 lt2 s z p h1)). Qed.
Lemma lem8319078 {A B P : Type'} (_112013 : A -> B) (_112012 : A -> B) (_112014 : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2765 A B P z _112013 p _112012 _112014.
Proof. exact (@lem8319077 A B P _112013 _112012 _112014 lt2 s z p h1). Qed.
Lemma lem8319079 {A B P : Type'} (g : A -> B) (f : A -> B) (a' : P) (lt2 : type1402 A) (s : P -> A) (z : type518 A B P) (p : type560 A B P) (h1 : term1889 A B P lt2 s z p) : term2765 A B P z g p f a'.
Proof. exact (@lem8319078 A B P g f a' lt2 s z p h1). Qed.
Lemma lem8319082 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p f a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2389 A B D P Q f p g pat t' e a') : term864 A B P p f a'.
Proof. exact (@lem8319079 A B P g f a' lt2 s z p h1 (@lem8319075 A B D P Q z lt2 s f p g pat t' e a' h1 h2 h3 h4)). Qed.
Lemma lem8319083 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term2403 A B D P Q lt2 s f p g pat t' e a') (h3 : term2389 A B D P Q f p g pat t' e a') : term951 A B P p f a'.
Proof. exact (fun h0 : term866 A B P p f a' => @lem8319082 A B D P Q z lt2 s f p g pat t' e a' h1 h0 h2 h3). Qed.
Lemma lem8319085 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8319086 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) : (term951 A B P p f a') = (term864 A B P p f a').
Proof. exact (@lem8319085 (term864 A B P p f a')). Qed.
Lemma lem8319087 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term2403 A B D P Q lt2 s f p g pat t' e a') (h3 : term2389 A B D P Q f p g pat t' e a') : term864 A B P p f a'.
Proof. exact (EQ_MP (@lem8319086 A B P p f a') (@lem8319083 A B D P Q z lt2 s f p g pat t' e a' h1 h2 h3)). Qed.
Lemma lem8319090 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem8319092 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) : (term866 A B P p f a') = (term2745 A B P p f a').
Proof. exact (@lem8319090 (term864 A B P p f a')). Qed.
Lemma lem8319095 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) (h1 : term866 A B P p f a') : term2745 A B P p f a'.
Proof. exact (EQ_MP (@lem8319092 A B P p f a') (@lem8316308 A B P p f a' h1)). Qed.
Lemma lem8319098 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p f a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2389 A B D P Q f p g pat t' e a') : False.
Proof. exact (@lem8319095 A B P p f a' h2 (@lem8319087 A B D P Q z lt2 s f p g pat t' e a' h1 h3 h4)). Qed.
Lemma lem8319099 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p f a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2389 A B D P Q f p g pat t' e a') : term937.
Proof. exact (fun h0 : ~ False => @lem8319098 A B D P Q z lt2 s f p g pat t' e a' h1 h2 h3 h4). Qed.
Lemma lem8319101 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8319102 : term937 = False.
Proof. exact (@lem8319101 False). Qed.
Lemma lem8319103 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p f a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2389 A B D P Q f p g pat t' e a') : False.
Proof. exact (EQ_MP (@lem8319102) (@lem8319099 A B D P Q z lt2 s f p g pat t' e a' h1 h2 h3 h4)). Qed.
Lemma lem8319531 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2389 A B D P Q f p g pat t' e a') : (@I (Q -> D) pat t') = (@I (P -> D) e a').
Proof. exact (proj2 (@lem8313387 A B D P Q f p g pat t' e a' h1)). Qed.
Lemma lem8319532 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2389 A B D P Q f p g pat t' e a') : term2659 D P Q pat t' e a'.
Proof. exact (fun h0 : term2319 D P Q pat t' e a' => @lem8319531 A B D P Q f p g pat t' e a' h1). Qed.
Lemma lem8319534 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8319535 {D P Q : Type'} (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) : (term2659 D P Q pat t' e a') = ((@I (Q -> D) pat t') = (@I (P -> D) e a')).
Proof. exact (@lem8319534 ((@I (Q -> D) pat t') = (@I (P -> D) e a'))). Qed.
Lemma lem8319536 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2389 A B D P Q f p g pat t' e a') : (@I (Q -> D) pat t') = (@I (P -> D) e a').
Proof. exact (EQ_MP (@lem8319535 D P Q pat t' e a') (@lem8319532 A B D P Q f p g pat t' e a' h1)). Qed.
Lemma lem8319539 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem8319541 {D P Q : Type'} (pat : Q -> D) (_112046 : Q) (e : P -> D) (a' : P) : (term2319 D P Q pat _112046 e a') = (term2746 D P Q pat _112046 e a').
Proof. exact (@lem8319539 ((@I (Q -> D) pat _112046) = (@I (P -> D) e a'))). Qed.
Lemma lem8319544 {D P Q : Type'} (_112046 : Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') : term2746 D P Q pat _112046 e a'.
Proof. exact (EQ_MP (@lem8319541 D P Q pat _112046 e a') (@lem8316424 D P Q _112046 pat e a' h1)). Qed.
Lemma lem8319545 {D P Q : Type'} (_112046 : Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') : term2746 D P Q pat _112046 e a'.
Proof. exact (@lem8319544 D P Q _112046 pat e a' h1). Qed.
Lemma lem8319546 {D P Q : Type'} (t' : Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') : term2746 D P Q pat t' e a'.
Proof. exact (@lem8319545 D P Q t' pat e a' h1). Qed.
Lemma lem8319549 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') (h2 : term2389 A B D P Q f p g pat t' e a') : False.
Proof. exact (@lem8319546 D P Q t' pat e a' h1 (@lem8319536 A B D P Q f p g pat t' e a' h2)). Qed.
Lemma lem8319550 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') (h2 : term2389 A B D P Q f p g pat t' e a') : term937.
Proof. exact (fun h0 : ~ False => @lem8319549 A B D P Q f p g pat t' e a' h1 h2). Qed.
Lemma lem8319552 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8319553 : term937 = False.
Proof. exact (@lem8319552 False). Qed.
Lemma lem8319554 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') (h2 : term2389 A B D P Q f p g pat t' e a') : False.
Proof. exact (EQ_MP (@lem8319553) (@lem8319550 A B D P Q f p g pat t' e a' h1 h2)). Qed.
Lemma lem8319758 {A B : Type'} : (@I (A -> B)) = (@I (A -> B)).
Proof. exact (eq_refl (@I (A -> B))). Qed.
Lemma lem8319759 {A B : Type'} (_112601 : A -> B) (_112603 : A -> B) (h1 : _112601 = _112603) : _112601 = _112603.
Proof. exact (h1). Qed.
Lemma lem8319760 {A : Type'} (_112602 : A) (_112604 : A) (h1 : _112602 = _112604) : _112602 = _112604.
Proof. exact (h1). Qed.
Lemma lem8319761 {A B : Type'} (_112601 : A -> B) (_112603 : A -> B) (h1 : _112601 = _112603) : (@I (A -> B) _112601) = (@I (A -> B) _112603).
Proof. exact (MK_COMB (@lem8319758 A B) (@lem8319759 A B _112601 _112603 h1)). Qed.
Lemma lem8319762 {A B : Type'} (_112602 : A) (_112604 : A) (_112601 : A -> B) (_112603 : A -> B) (h1 : _112602 = _112604) (h2 : _112601 = _112603) : (@I (A -> B) _112601 _112602) = (@I (A -> B) _112603 _112604).
Proof. exact (MK_COMB (@lem8319761 A B _112601 _112603 h2) (@lem8319760 A _112602 _112604 h1)). Qed.
Lemma lem8319763 {A B : Type'} (_112601 : A -> B) (_112603 : A -> B) (_112602 : A) (_112604 : A) (h1 : _112602 = _112604) : term946 A B _112601 _112602 _112603 _112604.
Proof. exact (fun h0 : _112601 = _112603 => @lem8319762 A B _112602 _112604 _112601 _112603 h1 h0). Qed.
Lemma lem8319765 (a : Prop) (b : Prop) : (a -> b) = (term947 a b).
Proof. exact (EQ_MP (@lem21394 a b) (@lem21490 a b)). Qed.
Lemma lem8319766 {A B : Type'} (_112601 : A -> B) (_112602 : A) (_112603 : A -> B) (_112604 : A) : (term946 A B _112601 _112602 _112603 _112604) = (term948 A B _112601 _112602 _112603 _112604).
Proof. exact (@lem8319765 (_112601 = _112603) ((@I (A -> B) _112601 _112602) = (@I (A -> B) _112603 _112604))). Qed.
Lemma lem8319767 {A B : Type'} (_112601 : A -> B) (_112603 : A -> B) (_112602 : A) (_112604 : A) (h1 : _112602 = _112604) : term948 A B _112601 _112602 _112603 _112604.
Proof. exact (EQ_MP (@lem8319766 A B _112601 _112602 _112603 _112604) (@lem8319763 A B _112601 _112603 _112602 _112604 h1)). Qed.
Lemma lem8319768 {A B : Type'} (_112601 : A -> B) (_112602 : A) (_112603 : A -> B) (_112604 : A) : term949 A B _112601 _112602 _112603 _112604.
Proof. exact (fun h0 : _112602 = _112604 => @lem8319767 A B _112601 _112603 _112602 _112604 h0). Qed.
Lemma lem8319770 (a : Prop) (b : Prop) : (a -> b) = (term947 a b).
Proof. exact (EQ_MP (@lem21394 a b) (@lem21490 a b)). Qed.
Lemma lem8319771 {A B : Type'} (_112601 : A -> B) (_112602 : A) (_112603 : A -> B) (_112604 : A) : (term949 A B _112601 _112602 _112603 _112604) = (term950 A B _112601 _112602 _112603 _112604).
Proof. exact (@lem8319770 (_112602 = _112604) (term948 A B _112601 _112602 _112603 _112604)). Qed.
Lemma lem8319772 {A B : Type'} (_112601 : A -> B) (_112602 : A) (_112603 : A -> B) (_112604 : A) : term950 A B _112601 _112602 _112603 _112604.
Proof. exact (EQ_MP (@lem8319771 A B _112601 _112602 _112603 _112604) (@lem8319768 A B _112601 _112602 _112603 _112604)). Qed.
Lemma lem8319958 {B : Type'} (x : B) (y : B) (z : B) : term2766 B x y z.
Proof. exact (@lem21385 B x y z). Qed.
Lemma lem8319982 {A B D P Q : Type'} (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : (@I (Q -> D) pat t') = (@I (P -> D) e a').
Proof. exact (proj1 (@lem8313376 A B D P Q t' p _111929 f arg _111928 pat e a' h1)). Qed.
Lemma lem8319983 {A B D P Q : Type'} (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : term2659 D P Q pat t' e a'.
Proof. exact (fun h0 : term2319 D P Q pat t' e a' => @lem8319982 A B D P Q t' p _111929 f arg _111928 pat e a' h1). Qed.
Lemma lem8319985 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8319986 {D P Q : Type'} (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) : (term2659 D P Q pat t' e a') = ((@I (Q -> D) pat t') = (@I (P -> D) e a')).
Proof. exact (@lem8319985 ((@I (Q -> D) pat t') = (@I (P -> D) e a'))). Qed.
Lemma lem8319987 {A B D P Q : Type'} (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : (@I (Q -> D) pat t') = (@I (P -> D) e a').
Proof. exact (EQ_MP (@lem8319986 D P Q pat t' e a') (@lem8319983 A B D P Q t' p _111929 f arg _111928 pat e a' h1)). Qed.
Lemma lem8319989 {B : Type'} (x : B) : x = x.
Proof. exact (@lem21386 B x). Qed.
Lemma lem8319990 {B : Type'} (x : B) : x = x.
Proof. exact (@lem8319989 B x). Qed.
Lemma lem8319991 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (a' : P) (t' : Q) : (term2486 A B P Q f arg a' t') = (term2486 A B P Q f arg a' t').
Proof. exact (@lem8319990 B (term2486 A B P Q f arg a' t')). Qed.
Lemma lem8319992 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (a' : P) (t' : Q) : term2767 A B P Q f arg a' t'.
Proof. exact (fun h0 : term2768 A B P Q f arg a' t' => @lem8319991 A B P Q f arg a' t'). Qed.
Lemma lem8319994 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8319995 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (a' : P) (t' : Q) : (term2767 A B P Q f arg a' t') = ((term2486 A B P Q f arg a' t') = (term2486 A B P Q f arg a' t')).
Proof. exact (@lem8319994 ((term2486 A B P Q f arg a' t') = (term2486 A B P Q f arg a' t'))). Qed.
Lemma lem8319996 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (a' : P) (t' : Q) : (term2486 A B P Q f arg a' t') = (term2486 A B P Q f arg a' t').
Proof. exact (EQ_MP (@lem8319995 A B P Q f arg a' t') (@lem8319992 A B P Q f arg a' t')). Qed.
Lemma lem8320002 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8320003 {A B D P Q : Type'} (_112067 : B) (_112068 : Q) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) : (term2658 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066) = (term2769 A B D P Q _112067 _112068 t'' _111929 _112062 _112063 _112064 _112065 _112066).
Proof. exact (@lem8320002 (term2488 A B P Q _112064 _112065 _112066 _112068 _112067) (term2319 D P Q _112062 _112068 _112063 _112066) ((term2473 A B D P Q t'' _112062 _112063 _112064 _112065 _112066) = (term2374 A B D P Q _111929 _112062 _112063 _112064 _112065 _112066))). Qed.
Lemma lem8320019 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8320020 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : (term2770 A B D P Q _112068 t'' _111929 _112062 _112063 _112064 _112065 _112066) = (term2771 A B D P Q t'' _111929 _112064 _112065 _112062 _112068 _112063 _112066).
Proof. exact (@lem8320019 ((term2473 A B D P Q t'' _112062 _112063 _112064 _112065 _112066) = (term2374 A B D P Q _111929 _112062 _112063 _112064 _112065 _112066)) (term2319 D P Q _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320030 {A B P Q : Type'} (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (_112068 : Q) (_112067 : B) : (term2772 A B P Q _112064 _112065 _112066 _112068 _112067) = (term2772 A B P Q _112064 _112065 _112066 _112068 _112067).
Proof. exact (eq_refl (term2772 A B P Q _112064 _112065 _112066 _112068 _112067)). Qed.
Lemma lem8320031 {A B D P Q : Type'} (_112067 : B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : (term2769 A B D P Q _112067 _112068 t'' _111929 _112062 _112063 _112064 _112065 _112066) = (term2773 A B D P Q _112067 t'' _111929 _112064 _112065 _112062 _112068 _112063 _112066).
Proof. exact (MK_COMB (@lem8320030 A B P Q _112064 _112065 _112066 _112068 _112067) (@lem8320020 A B D P Q t'' _111929 _112064 _112065 _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320035 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8320036 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112067 : B) (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : (term2773 A B D P Q _112067 t'' _111929 _112064 _112065 _112062 _112068 _112063 _112066) = (term2774 A B D P Q t'' _111929 _112064 _112065 _112067 _112062 _112068 _112063 _112066).
Proof. exact (@lem8320035 ((term2473 A B D P Q t'' _112062 _112063 _112064 _112065 _112066) = (term2374 A B D P Q _111929 _112062 _112063 _112064 _112065 _112066)) (term2488 A B P Q _112064 _112065 _112066 _112068 _112067) (term2319 D P Q _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320058 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112067 : B) (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : (term2769 A B D P Q _112067 _112068 t'' _111929 _112062 _112063 _112064 _112065 _112066) = (term2774 A B D P Q t'' _111929 _112064 _112065 _112067 _112062 _112068 _112063 _112066).
Proof. exact (TRANS (@lem8320031 A B D P Q _112067 t'' _111929 _112064 _112065 _112062 _112068 _112063 _112066) (@lem8320036 A B D P Q t'' _111929 _112064 _112065 _112067 _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320059 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112067 : B) (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : (term2658 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066) = (term2774 A B D P Q t'' _111929 _112064 _112065 _112067 _112062 _112068 _112063 _112066).
Proof. exact (TRANS (@lem8320003 A B D P Q _112067 _112068 t'' _111929 _112062 _112063 _112064 _112065 _112066) (@lem8320058 A B D P Q t'' _111929 _112064 _112065 _112067 _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320060 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8320061 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112067 : B) (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : (term2775 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066) = (term2776 A B D P Q t'' _111929 _112064 _112065 _112067 _112062 _112068 _112063 _112066).
Proof. exact (MK_COMB (@lem8320060) (@lem8320059 A B D P Q t'' _111929 _112064 _112065 _112067 _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320077 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8320078 {A B D P Q : Type'} (_112064 : A -> B) (_112065 : type1475 A P Q) (_112067 : B) (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : (term2489 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067) = (term2777 A B D P Q _112064 _112065 _112067 _112062 _112068 _112063 _112066).
Proof. exact (@lem8320077 (term2488 A B P Q _112064 _112065 _112066 _112068 _112067) (term2319 D P Q _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320088 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) : (term2778 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066) = (term2778 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066).
Proof. exact (eq_refl (term2778 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066)). Qed.
Lemma lem8320089 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112067 : B) (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : (term2779 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066 _112068 _112067) = (term2774 A B D P Q t'' _111929 _112064 _112065 _112067 _112062 _112068 _112063 _112066).
Proof. exact (MK_COMB (@lem8320088 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066) (@lem8320078 A B D P Q _112064 _112065 _112067 _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320100 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112067 : B) (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : ((term2658 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066) = (term2779 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066 _112068 _112067)) = ((term2774 A B D P Q t'' _111929 _112064 _112065 _112067 _112062 _112068 _112063 _112066) = (term2774 A B D P Q t'' _111929 _112064 _112065 _112067 _112062 _112068 _112063 _112066)).
Proof. exact (MK_COMB (@lem8320061 A B D P Q t'' _111929 _112064 _112065 _112067 _112062 _112068 _112063 _112066) (@lem8320089 A B D P Q t'' _111929 _112064 _112065 _112067 _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320102 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8320103 (x : Prop) : (x = x) = True.
Proof. exact (@lem8320102 Prop x). Qed.
Lemma lem8320104 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112067 : B) (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : ((term2774 A B D P Q t'' _111929 _112064 _112065 _112067 _112062 _112068 _112063 _112066) = (term2774 A B D P Q t'' _111929 _112064 _112065 _112067 _112062 _112068 _112063 _112066)) = True.
Proof. exact (@lem8320103 (term2774 A B D P Q t'' _111929 _112064 _112065 _112067 _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320105 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (_112068 : Q) (_112067 : B) : ((term2658 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066) = (term2779 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066 _112068 _112067)) = True.
Proof. exact (TRANS (@lem8320100 A B D P Q t'' _111929 _112064 _112065 _112067 _112062 _112068 _112063 _112066) (@lem8320104 A B D P Q t'' _111929 _112064 _112065 _112067 _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320106 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (_112068 : Q) (_112067 : B) : True = ((term2658 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066) = (term2779 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066 _112068 _112067)).
Proof. exact (SYM (@lem8320105 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066 _112068 _112067)). Qed.
Lemma lem8320107 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (_112068 : Q) (_112067 : B) : (term2658 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066) = (term2779 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066 _112068 _112067).
Proof. exact (EQ_MP (@lem8320106 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066 _112068 _112067) (@lem0)). Qed.
Lemma lem8320108 {A B D P Q : Type'} (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (_112068 : Q) (_112067 : B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2779 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066 _112068 _112067.
Proof. exact (EQ_MP (@lem8320107 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066 _112068 _112067) (@lem8316558 A B D P Q _112068 _112067 _112062 _112063 _112064 _112065 _112066 t'' _111929 h1)). Qed.
Lemma lem8320110 (b : Prop) (a : Prop) : (a \/ b) = (term970 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8320111 {A B D P Q : Type'} (_112068 : Q) (_112067 : B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) : (term2779 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066 _112068 _112067) = (term2780 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066).
Proof. exact (@lem8320110 (term2489 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067) ((term2473 A B D P Q t'' _112062 _112063 _112064 _112065 _112066) = (term2374 A B D P Q _111929 _112062 _112063 _112064 _112065 _112066))). Qed.
Lemma lem8320113 (a : Prop) (b : Prop) : (term972 a b) = (term973 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8320114 {A B D P Q : Type'} (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (_112068 : Q) (_112067 : B) : (term2781 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067) = (term2782 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067).
Proof. exact (@lem8320113 (term2319 D P Q _112062 _112068 _112063 _112066) (term2488 A B P Q _112064 _112065 _112066 _112068 _112067)). Qed.
Lemma lem8320116 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8320117 {D P Q : Type'} (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : (term2664 D P Q _112062 _112068 _112063 _112066) = ((@I (Q -> D) _112062 _112068) = (@I (P -> D) _112063 _112066)).
Proof. exact (@lem8320116 ((@I (Q -> D) _112062 _112068) = (@I (P -> D) _112063 _112066))). Qed.
Lemma lem8320118 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8320119 {D P Q : Type'} (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : (term2696 D P Q _112062 _112068 _112063 _112066) = (term2384 D P Q _112062 _112068 _112063 _112066).
Proof. exact (MK_COMB (@lem8320118) (@lem8320117 D P Q _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320121 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8320122 {A B P Q : Type'} (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (_112068 : Q) (_112067 : B) : (term2783 A B P Q _112064 _112065 _112066 _112068 _112067) = ((term2486 A B P Q _112064 _112065 _112066 _112068) = _112067).
Proof. exact (@lem8320121 ((term2486 A B P Q _112064 _112065 _112066 _112068) = _112067)). Qed.
Lemma lem8320123 {A B D P Q : Type'} (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (_112068 : Q) (_112067 : B) : (term2782 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067) = (term2784 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067).
Proof. exact (MK_COMB (@lem8320119 D P Q _112062 _112068 _112063 _112066) (@lem8320122 A B P Q _112064 _112065 _112066 _112068 _112067)). Qed.
Lemma lem8320124 {A B D P Q : Type'} (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (_112068 : Q) (_112067 : B) : (term2781 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067) = (term2784 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067).
Proof. exact (TRANS (@lem8320114 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067) (@lem8320123 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067)). Qed.
Lemma lem8320125 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8320126 {A B D P Q : Type'} (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (_112068 : Q) (_112067 : B) : (term2785 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067) = (term2786 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067).
Proof. exact (MK_COMB (@lem8320125) (@lem8320124 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067)). Qed.
Lemma lem8320127 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) : ((term2473 A B D P Q t'' _112062 _112063 _112064 _112065 _112066) = (term2374 A B D P Q _111929 _112062 _112063 _112064 _112065 _112066)) = ((term2473 A B D P Q t'' _112062 _112063 _112064 _112065 _112066) = (term2374 A B D P Q _111929 _112062 _112063 _112064 _112065 _112066)).
Proof. exact (eq_refl ((term2473 A B D P Q t'' _112062 _112063 _112064 _112065 _112066) = (term2374 A B D P Q _111929 _112062 _112063 _112064 _112065 _112066))). Qed.
Lemma lem8320128 {A B D P Q : Type'} (_112068 : Q) (_112067 : B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) : (term2780 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066) = (term2787 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066).
Proof. exact (MK_COMB (@lem8320126 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067) (@lem8320127 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066)). Qed.
Lemma lem8320129 {A B D P Q : Type'} (_112068 : Q) (_112067 : B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) : (term2779 A B D P Q t'' _111929 _112062 _112063 _112064 _112065 _112066 _112068 _112067) = (term2787 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066).
Proof. exact (TRANS (@lem8320111 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066) (@lem8320128 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066)). Qed.
Lemma lem8320131 {A B D P Q : Type'} (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : term2788 A B D P Q pat e f arg a' t'.
Proof. exact (conj (@lem8319987 A B D P Q t' p _111929 f arg _111928 pat e a' h1) (@lem8319996 A B P Q f arg a' t')). Qed.
Lemma lem8320133 {A B D P Q : Type'} (_112068 : Q) (_112067 : B) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2787 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066.
Proof. exact (EQ_MP (@lem8320129 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066) (@lem8320108 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067 t'' _111929 h1)). Qed.
Lemma lem8320134 {A B D P Q : Type'} (_112068 : Q) (_112067 : B) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2787 A B D P Q _112068 _112067 t'' _111929 _112062 _112063 _112064 _112065 _112066.
Proof. exact (@lem8320133 A B D P Q _112068 _112067 _112062 _112063 _112064 _112065 _112066 t'' _111929 h1). Qed.
Lemma lem8320135 {A B D P Q : Type'} (t' : Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a' : P) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2789 A B D P Q t' t'' _111929 pat e f arg a'.
Proof. exact (@lem8320134 A B D P Q t' (term2486 A B P Q f arg a' t') pat e f arg a' t'' _111929 h1). Qed.
Lemma lem8320138 {A B D P Q : Type'} (t'' : type905 A B D P Q) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1731 A B D P Q t'' _111929) (h2 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : (term2473 A B D P Q t'' pat e f arg a') = (term2374 A B D P Q _111929 pat e f arg a').
Proof. exact (@lem8320135 A B D P Q t' pat e f arg a' t'' _111929 h1 (@lem8320131 A B D P Q t' p _111929 f arg _111928 pat e a' h2)). Qed.
Lemma lem8320139 {A B D P Q : Type'} (t'' : type905 A B D P Q) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1731 A B D P Q t'' _111929) (h2 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : term2790 A B D P Q t'' _111929 pat e f arg a'.
Proof. exact (fun h0 : term2791 A B D P Q t'' _111929 pat e f arg a' => @lem8320138 A B D P Q t'' t' p _111929 f arg _111928 pat e a' h1 h2). Qed.
Lemma lem8320141 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8320142 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (pat : Q -> D) (e : P -> D) (f : A -> B) (arg : type1475 A P Q) (a' : P) : (term2790 A B D P Q t'' _111929 pat e f arg a') = ((term2473 A B D P Q t'' pat e f arg a') = (term2374 A B D P Q _111929 pat e f arg a')).
Proof. exact (@lem8320141 ((term2473 A B D P Q t'' pat e f arg a') = (term2374 A B D P Q _111929 pat e f arg a'))). Qed.
Lemma lem8320143 {A B D P Q : Type'} (t'' : type905 A B D P Q) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1731 A B D P Q t'' _111929) (h2 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : (term2473 A B D P Q t'' pat e f arg a') = (term2374 A B D P Q _111929 pat e f arg a').
Proof. exact (EQ_MP (@lem8320142 A B D P Q t'' _111929 pat e f arg a') (@lem8320139 A B D P Q t'' t' p _111929 f arg _111928 pat e a' h1 h2)). Qed.
Lemma lem8320145 {A B D P Q : Type'} (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : term864 A B P p f a'.
Proof. exact (proj1 (@lem8313393 A B D P Q t' p _111929 f arg _111928 pat e a' h1)). Qed.
Lemma lem8320146 {A B D P Q : Type'} (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : term951 A B P p f a'.
Proof. exact (fun h0 : term866 A B P p f a' => @lem8320145 A B D P Q t' p _111929 f arg _111928 pat e a' h1). Qed.
Lemma lem8320148 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8320149 {A B P : Type'} (p : type560 A B P) (f : A -> B) (a' : P) : (term951 A B P p f a') = (term864 A B P p f a').
Proof. exact (@lem8320148 (term864 A B P p f a')). Qed.
Lemma lem8320150 {A B D P Q : Type'} (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : term864 A B P p f a'.
Proof. exact (EQ_MP (@lem8320149 A B P p f a') (@lem8320146 A B D P Q t' p _111929 f arg _111928 pat e a' h1)). Qed.
Lemma lem8320152 {A B D P Q : Type'} (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : (@I (Q -> D) pat t') = (@I (P -> D) e a').
Proof. exact (proj1 (@lem8313376 A B D P Q t' p _111929 f arg _111928 pat e a' h1)). Qed.
Lemma lem8320153 {A B D P Q : Type'} (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : term2659 D P Q pat t' e a'.
Proof. exact (fun h0 : term2319 D P Q pat t' e a' => @lem8320152 A B D P Q t' p _111929 f arg _111928 pat e a' h1). Qed.
Lemma lem8320155 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8320156 {D P Q : Type'} (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) : (term2659 D P Q pat t' e a') = ((@I (Q -> D) pat t') = (@I (P -> D) e a')).
Proof. exact (@lem8320155 ((@I (Q -> D) pat t') = (@I (P -> D) e a'))). Qed.
Lemma lem8320157 {A B D P Q : Type'} (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : (@I (Q -> D) pat t') = (@I (P -> D) e a').
Proof. exact (EQ_MP (@lem8320156 D P Q pat t' e a') (@lem8320153 A B D P Q t' p _111929 f arg _111928 pat e a' h1)). Qed.
Lemma lem8320159 {B : Type'} (x : B) : x = x.
Proof. exact (@lem21386 B x). Qed.
Lemma lem8320160 {B : Type'} (x : B) : x = x.
Proof. exact (@lem8320159 B x). Qed.
Lemma lem8320161 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (a' : P) (t' : Q) : (term2486 A B P Q f arg a' t') = (term2486 A B P Q f arg a' t').
Proof. exact (@lem8320160 B (term2486 A B P Q f arg a' t')). Qed.
Lemma lem8320162 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (a' : P) (t' : Q) : term2767 A B P Q f arg a' t'.
Proof. exact (fun h0 : term2768 A B P Q f arg a' t' => @lem8320161 A B P Q f arg a' t'). Qed.
Lemma lem8320164 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8320165 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (a' : P) (t' : Q) : (term2767 A B P Q f arg a' t') = ((term2486 A B P Q f arg a' t') = (term2486 A B P Q f arg a' t')).
Proof. exact (@lem8320164 ((term2486 A B P Q f arg a' t') = (term2486 A B P Q f arg a' t'))). Qed.
Lemma lem8320166 {A B P Q : Type'} (f : A -> B) (arg : type1475 A P Q) (a' : P) (t' : Q) : (term2486 A B P Q f arg a' t') = (term2486 A B P Q f arg a' t').
Proof. exact (EQ_MP (@lem8320165 A B P Q f arg a' t') (@lem8320162 A B P Q f arg a' t')). Qed.
Lemma lem8320172 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8320173 {A B D P Q : Type'} (_112067 : B) (_112068 : Q) (t'' : type905 A B D P Q) (_112062 : Q -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112063 : P -> D) (_112066 : P) : (term2657 A B D P Q _112068 _112067 t'' _112062 _112064 _112065 _112063 _112066) = (term2792 A B D P Q _112067 _112068 t'' _112062 _112064 _112065 _112063 _112066).
Proof. exact (@lem8320172 (term2488 A B P Q _112064 _112065 _112066 _112068 _112067) (term2319 D P Q _112062 _112068 _112063 _112066) ((term2478 A B D P Q t'' _112062 _112063 _112064 _112065 _112066) = (@I (P -> D) _112063 _112066))). Qed.
Lemma lem8320189 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8320190 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : (term2793 A B D P Q _112068 t'' _112062 _112064 _112065 _112063 _112066) = (term2794 A B D P Q t'' _112064 _112065 _112062 _112068 _112063 _112066).
Proof. exact (@lem8320189 ((term2478 A B D P Q t'' _112062 _112063 _112064 _112065 _112066) = (@I (P -> D) _112063 _112066)) (term2319 D P Q _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320200 {A B P Q : Type'} (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (_112068 : Q) (_112067 : B) : (term2772 A B P Q _112064 _112065 _112066 _112068 _112067) = (term2772 A B P Q _112064 _112065 _112066 _112068 _112067).
Proof. exact (eq_refl (term2772 A B P Q _112064 _112065 _112066 _112068 _112067)). Qed.
Lemma lem8320201 {A B D P Q : Type'} (_112067 : B) (t'' : type905 A B D P Q) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : (term2792 A B D P Q _112067 _112068 t'' _112062 _112064 _112065 _112063 _112066) = (term2795 A B D P Q _112067 t'' _112064 _112065 _112062 _112068 _112063 _112066).
Proof. exact (MK_COMB (@lem8320200 A B P Q _112064 _112065 _112066 _112068 _112067) (@lem8320190 A B D P Q t'' _112064 _112065 _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320205 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8320206 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112067 : B) (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : (term2795 A B D P Q _112067 t'' _112064 _112065 _112062 _112068 _112063 _112066) = (term2796 A B D P Q t'' _112064 _112065 _112067 _112062 _112068 _112063 _112066).
Proof. exact (@lem8320205 ((term2478 A B D P Q t'' _112062 _112063 _112064 _112065 _112066) = (@I (P -> D) _112063 _112066)) (term2488 A B P Q _112064 _112065 _112066 _112068 _112067) (term2319 D P Q _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320228 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112067 : B) (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : (term2792 A B D P Q _112067 _112068 t'' _112062 _112064 _112065 _112063 _112066) = (term2796 A B D P Q t'' _112064 _112065 _112067 _112062 _112068 _112063 _112066).
Proof. exact (TRANS (@lem8320201 A B D P Q _112067 t'' _112064 _112065 _112062 _112068 _112063 _112066) (@lem8320206 A B D P Q t'' _112064 _112065 _112067 _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320229 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112067 : B) (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : (term2657 A B D P Q _112068 _112067 t'' _112062 _112064 _112065 _112063 _112066) = (term2796 A B D P Q t'' _112064 _112065 _112067 _112062 _112068 _112063 _112066).
Proof. exact (TRANS (@lem8320173 A B D P Q _112067 _112068 t'' _112062 _112064 _112065 _112063 _112066) (@lem8320228 A B D P Q t'' _112064 _112065 _112067 _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320230 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8320231 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112067 : B) (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : (term2797 A B D P Q _112068 _112067 t'' _112062 _112064 _112065 _112063 _112066) = (term2798 A B D P Q t'' _112064 _112065 _112067 _112062 _112068 _112063 _112066).
Proof. exact (MK_COMB (@lem8320230) (@lem8320229 A B D P Q t'' _112064 _112065 _112067 _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320247 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8320248 {A B D P Q : Type'} (_112064 : A -> B) (_112065 : type1475 A P Q) (_112067 : B) (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : (term2489 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067) = (term2777 A B D P Q _112064 _112065 _112067 _112062 _112068 _112063 _112066).
Proof. exact (@lem8320247 (term2488 A B P Q _112064 _112065 _112066 _112068 _112067) (term2319 D P Q _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320258 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_112062 : Q -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112063 : P -> D) (_112066 : P) : (term2799 A B D P Q t'' _112062 _112064 _112065 _112063 _112066) = (term2799 A B D P Q t'' _112062 _112064 _112065 _112063 _112066).
Proof. exact (eq_refl (term2799 A B D P Q t'' _112062 _112064 _112065 _112063 _112066)). Qed.
Lemma lem8320259 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112067 : B) (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : (term2800 A B D P Q t'' _112062 _112063 _112064 _112065 _112066 _112068 _112067) = (term2796 A B D P Q t'' _112064 _112065 _112067 _112062 _112068 _112063 _112066).
Proof. exact (MK_COMB (@lem8320258 A B D P Q t'' _112062 _112064 _112065 _112063 _112066) (@lem8320248 A B D P Q _112064 _112065 _112067 _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320270 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112067 : B) (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : ((term2657 A B D P Q _112068 _112067 t'' _112062 _112064 _112065 _112063 _112066) = (term2800 A B D P Q t'' _112062 _112063 _112064 _112065 _112066 _112068 _112067)) = ((term2796 A B D P Q t'' _112064 _112065 _112067 _112062 _112068 _112063 _112066) = (term2796 A B D P Q t'' _112064 _112065 _112067 _112062 _112068 _112063 _112066)).
Proof. exact (MK_COMB (@lem8320231 A B D P Q t'' _112064 _112065 _112067 _112062 _112068 _112063 _112066) (@lem8320259 A B D P Q t'' _112064 _112065 _112067 _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320272 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8320273 (x : Prop) : (x = x) = True.
Proof. exact (@lem8320272 Prop x). Qed.
Lemma lem8320274 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112067 : B) (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : ((term2796 A B D P Q t'' _112064 _112065 _112067 _112062 _112068 _112063 _112066) = (term2796 A B D P Q t'' _112064 _112065 _112067 _112062 _112068 _112063 _112066)) = True.
Proof. exact (@lem8320273 (term2796 A B D P Q t'' _112064 _112065 _112067 _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320275 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (_112068 : Q) (_112067 : B) : ((term2657 A B D P Q _112068 _112067 t'' _112062 _112064 _112065 _112063 _112066) = (term2800 A B D P Q t'' _112062 _112063 _112064 _112065 _112066 _112068 _112067)) = True.
Proof. exact (TRANS (@lem8320270 A B D P Q t'' _112064 _112065 _112067 _112062 _112068 _112063 _112066) (@lem8320274 A B D P Q t'' _112064 _112065 _112067 _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320276 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (_112068 : Q) (_112067 : B) : True = ((term2657 A B D P Q _112068 _112067 t'' _112062 _112064 _112065 _112063 _112066) = (term2800 A B D P Q t'' _112062 _112063 _112064 _112065 _112066 _112068 _112067)).
Proof. exact (SYM (@lem8320275 A B D P Q t'' _112062 _112063 _112064 _112065 _112066 _112068 _112067)). Qed.
Lemma lem8320277 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (_112068 : Q) (_112067 : B) : (term2657 A B D P Q _112068 _112067 t'' _112062 _112064 _112065 _112063 _112066) = (term2800 A B D P Q t'' _112062 _112063 _112064 _112065 _112066 _112068 _112067).
Proof. exact (EQ_MP (@lem8320276 A B D P Q t'' _112062 _112063 _112064 _112065 _112066 _112068 _112067) (@lem0)). Qed.
Lemma lem8320278 {A B D P Q : Type'} (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (_112068 : Q) (_112067 : B) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2800 A B D P Q t'' _112062 _112063 _112064 _112065 _112066 _112068 _112067.
Proof. exact (EQ_MP (@lem8320277 A B D P Q t'' _112062 _112063 _112064 _112065 _112066 _112068 _112067) (@lem8316546 A B D P Q _112068 _112067 _112062 _112064 _112065 _112063 _112066 t'' _111929 h1)). Qed.
Lemma lem8320280 (b : Prop) (a : Prop) : (a \/ b) = (term970 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8320281 {A B D P Q : Type'} (_112068 : Q) (_112067 : B) (t'' : type905 A B D P Q) (_112062 : Q -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112063 : P -> D) (_112066 : P) : (term2800 A B D P Q t'' _112062 _112063 _112064 _112065 _112066 _112068 _112067) = (term2801 A B D P Q _112068 _112067 t'' _112062 _112064 _112065 _112063 _112066).
Proof. exact (@lem8320280 (term2489 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067) ((term2478 A B D P Q t'' _112062 _112063 _112064 _112065 _112066) = (@I (P -> D) _112063 _112066))). Qed.
Lemma lem8320283 (a : Prop) (b : Prop) : (term972 a b) = (term973 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8320284 {A B D P Q : Type'} (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (_112068 : Q) (_112067 : B) : (term2781 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067) = (term2782 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067).
Proof. exact (@lem8320283 (term2319 D P Q _112062 _112068 _112063 _112066) (term2488 A B P Q _112064 _112065 _112066 _112068 _112067)). Qed.
Lemma lem8320286 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8320287 {D P Q : Type'} (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : (term2664 D P Q _112062 _112068 _112063 _112066) = ((@I (Q -> D) _112062 _112068) = (@I (P -> D) _112063 _112066)).
Proof. exact (@lem8320286 ((@I (Q -> D) _112062 _112068) = (@I (P -> D) _112063 _112066))). Qed.
Lemma lem8320288 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8320289 {D P Q : Type'} (_112062 : Q -> D) (_112068 : Q) (_112063 : P -> D) (_112066 : P) : (term2696 D P Q _112062 _112068 _112063 _112066) = (term2384 D P Q _112062 _112068 _112063 _112066).
Proof. exact (MK_COMB (@lem8320288) (@lem8320287 D P Q _112062 _112068 _112063 _112066)). Qed.
Lemma lem8320291 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8320292 {A B P Q : Type'} (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (_112068 : Q) (_112067 : B) : (term2783 A B P Q _112064 _112065 _112066 _112068 _112067) = ((term2486 A B P Q _112064 _112065 _112066 _112068) = _112067).
Proof. exact (@lem8320291 ((term2486 A B P Q _112064 _112065 _112066 _112068) = _112067)). Qed.
Lemma lem8320293 {A B D P Q : Type'} (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (_112068 : Q) (_112067 : B) : (term2782 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067) = (term2784 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067).
Proof. exact (MK_COMB (@lem8320289 D P Q _112062 _112068 _112063 _112066) (@lem8320292 A B P Q _112064 _112065 _112066 _112068 _112067)). Qed.
Lemma lem8320294 {A B D P Q : Type'} (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (_112068 : Q) (_112067 : B) : (term2781 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067) = (term2784 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067).
Proof. exact (TRANS (@lem8320284 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067) (@lem8320293 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067)). Qed.
Lemma lem8320295 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8320296 {A B D P Q : Type'} (_112062 : Q -> D) (_112063 : P -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112066 : P) (_112068 : Q) (_112067 : B) : (term2785 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067) = (term2786 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067).
Proof. exact (MK_COMB (@lem8320295) (@lem8320294 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067)). Qed.
Lemma lem8320297 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_112062 : Q -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112063 : P -> D) (_112066 : P) : ((term2478 A B D P Q t'' _112062 _112063 _112064 _112065 _112066) = (@I (P -> D) _112063 _112066)) = ((term2478 A B D P Q t'' _112062 _112063 _112064 _112065 _112066) = (@I (P -> D) _112063 _112066)).
Proof. exact (eq_refl ((term2478 A B D P Q t'' _112062 _112063 _112064 _112065 _112066) = (@I (P -> D) _112063 _112066))). Qed.
Lemma lem8320298 {A B D P Q : Type'} (_112068 : Q) (_112067 : B) (t'' : type905 A B D P Q) (_112062 : Q -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112063 : P -> D) (_112066 : P) : (term2801 A B D P Q _112068 _112067 t'' _112062 _112064 _112065 _112063 _112066) = (term2802 A B D P Q _112068 _112067 t'' _112062 _112064 _112065 _112063 _112066).
Proof. exact (MK_COMB (@lem8320296 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067) (@lem8320297 A B D P Q t'' _112062 _112064 _112065 _112063 _112066)). Qed.
Lemma lem8320299 {A B D P Q : Type'} (_112068 : Q) (_112067 : B) (t'' : type905 A B D P Q) (_112062 : Q -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112063 : P -> D) (_112066 : P) : (term2800 A B D P Q t'' _112062 _112063 _112064 _112065 _112066 _112068 _112067) = (term2802 A B D P Q _112068 _112067 t'' _112062 _112064 _112065 _112063 _112066).
Proof. exact (TRANS (@lem8320281 A B D P Q _112068 _112067 t'' _112062 _112064 _112065 _112063 _112066) (@lem8320298 A B D P Q _112068 _112067 t'' _112062 _112064 _112065 _112063 _112066)). Qed.
Lemma lem8320301 {A B D P Q : Type'} (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : term2788 A B D P Q pat e f arg a' t'.
Proof. exact (conj (@lem8320157 A B D P Q t' p _111929 f arg _111928 pat e a' h1) (@lem8320166 A B P Q f arg a' t')). Qed.
Lemma lem8320303 {A B D P Q : Type'} (_112068 : Q) (_112067 : B) (_112062 : Q -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112063 : P -> D) (_112066 : P) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2802 A B D P Q _112068 _112067 t'' _112062 _112064 _112065 _112063 _112066.
Proof. exact (EQ_MP (@lem8320299 A B D P Q _112068 _112067 t'' _112062 _112064 _112065 _112063 _112066) (@lem8320278 A B D P Q _112062 _112063 _112064 _112065 _112066 _112068 _112067 t'' _111929 h1)). Qed.
Lemma lem8320304 {A B D P Q : Type'} (_112068 : Q) (_112067 : B) (_112062 : Q -> D) (_112064 : A -> B) (_112065 : type1475 A P Q) (_112063 : P -> D) (_112066 : P) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2802 A B D P Q _112068 _112067 t'' _112062 _112064 _112065 _112063 _112066.
Proof. exact (@lem8320303 A B D P Q _112068 _112067 _112062 _112064 _112065 _112063 _112066 t'' _111929 h1). Qed.
Lemma lem8320305 {A B D P Q : Type'} (t' : Q) (pat : Q -> D) (f : A -> B) (arg : type1475 A P Q) (e : P -> D) (a' : P) (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (h1 : term1731 A B D P Q t'' _111929) : term2803 A B D P Q t' t'' pat f arg e a'.
Proof. exact (@lem8320304 A B D P Q t' (term2486 A B P Q f arg a' t') pat f arg e a' t'' _111929 h1). Qed.
Lemma lem8320308 {A B D P Q : Type'} (t'' : type905 A B D P Q) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1731 A B D P Q t'' _111929) (h2 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : (term2478 A B D P Q t'' pat e f arg a') = (@I (P -> D) e a').
Proof. exact (@lem8320305 A B D P Q t' pat f arg e a' t'' _111929 h1 (@lem8320301 A B D P Q t' p _111929 f arg _111928 pat e a' h2)). Qed.
Lemma lem8320309 {A B D P Q : Type'} (t'' : type905 A B D P Q) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1731 A B D P Q t'' _111929) (h2 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : term2804 A B D P Q t'' pat f arg e a'.
Proof. exact (fun h0 : term2805 A B D P Q t'' pat f arg e a' => @lem8320308 A B D P Q t'' t' p _111929 f arg _111928 pat e a' h1 h2). Qed.
Lemma lem8320311 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8320312 {A B D P Q : Type'} (t'' : type905 A B D P Q) (pat : Q -> D) (f : A -> B) (arg : type1475 A P Q) (e : P -> D) (a' : P) : (term2804 A B D P Q t'' pat f arg e a') = ((term2478 A B D P Q t'' pat e f arg a') = (@I (P -> D) e a')).
Proof. exact (@lem8320311 ((term2478 A B D P Q t'' pat e f arg a') = (@I (P -> D) e a'))). Qed.
Lemma lem8320313 {A B D P Q : Type'} (t'' : type905 A B D P Q) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1731 A B D P Q t'' _111929) (h2 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : (term2478 A B D P Q t'' pat e f arg a') = (@I (P -> D) e a').
Proof. exact (EQ_MP (@lem8320312 A B D P Q t'' pat f arg e a') (@lem8320309 A B D P Q t'' t' p _111929 f arg _111928 pat e a' h1 h2)). Qed.
Lemma lem8320315 {A B D P Q : Type'} (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : (@I (Q -> D) pat t') = (@I (P -> D) e a').
Proof. exact (proj1 (@lem8313376 A B D P Q t' p _111929 f arg _111928 pat e a' h1)). Qed.
Lemma lem8320316 {A B D P Q : Type'} (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : term2659 D P Q pat t' e a'.
Proof. exact (fun h0 : term2319 D P Q pat t' e a' => @lem8320315 A B D P Q t' p _111929 f arg _111928 pat e a' h1). Qed.
Lemma lem8320318 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8320319 {D P Q : Type'} (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) : (term2659 D P Q pat t' e a') = ((@I (Q -> D) pat t') = (@I (P -> D) e a')).
Proof. exact (@lem8320318 ((@I (Q -> D) pat t') = (@I (P -> D) e a'))). Qed.
Lemma lem8320320 {A B D P Q : Type'} (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : (@I (Q -> D) pat t') = (@I (P -> D) e a').
Proof. exact (EQ_MP (@lem8320319 D P Q pat t' e a') (@lem8320316 A B D P Q t' p _111929 f arg _111928 pat e a' h1)). Qed.
Lemma lem8320326 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8320327 {D P Q : Type'} (_111928 : type886 D P Q) (_112047 : Q -> D) (_112050 : Q) (_112048 : P -> D) (_112049 : P) : (term2524 D P Q _112050 _111928 _112047 _112048 _112049) = (term2660 D P Q _111928 _112047 _112050 _112048 _112049).
Proof. exact (@lem8320326 ((term2315 D P Q _111928 _112047 _112048 _112049) = (@I (P -> D) _112048 _112049)) (term2319 D P Q _112047 _112050 _112048 _112049)). Qed.
Lemma lem8320337 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8320338 {D P Q : Type'} (_111928 : type886 D P Q) (_112047 : Q -> D) (_112050 : Q) (_112048 : P -> D) (_112049 : P) : (term2661 D P Q _112050 _111928 _112047 _112048 _112049) = (term2662 D P Q _111928 _112047 _112050 _112048 _112049).
Proof. exact (MK_COMB (@lem8320337) (@lem8320327 D P Q _111928 _112047 _112050 _112048 _112049)). Qed.
Lemma lem8320348 {D P Q : Type'} (_111928 : type886 D P Q) (_112047 : Q -> D) (_112050 : Q) (_112048 : P -> D) (_112049 : P) : (term2660 D P Q _111928 _112047 _112050 _112048 _112049) = (term2660 D P Q _111928 _112047 _112050 _112048 _112049).
Proof. exact (eq_refl (term2660 D P Q _111928 _112047 _112050 _112048 _112049)). Qed.
Lemma lem8320349 {D P Q : Type'} (_111928 : type886 D P Q) (_112047 : Q -> D) (_112050 : Q) (_112048 : P -> D) (_112049 : P) : ((term2524 D P Q _112050 _111928 _112047 _112048 _112049) = (term2660 D P Q _111928 _112047 _112050 _112048 _112049)) = ((term2660 D P Q _111928 _112047 _112050 _112048 _112049) = (term2660 D P Q _111928 _112047 _112050 _112048 _112049)).
Proof. exact (MK_COMB (@lem8320338 D P Q _111928 _112047 _112050 _112048 _112049) (@lem8320348 D P Q _111928 _112047 _112050 _112048 _112049)). Qed.
Lemma lem8320351 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8320352 (x : Prop) : (x = x) = True.
Proof. exact (@lem8320351 Prop x). Qed.
Lemma lem8320353 {D P Q : Type'} (_111928 : type886 D P Q) (_112047 : Q -> D) (_112050 : Q) (_112048 : P -> D) (_112049 : P) : ((term2660 D P Q _111928 _112047 _112050 _112048 _112049) = (term2660 D P Q _111928 _112047 _112050 _112048 _112049)) = True.
Proof. exact (@lem8320352 (term2660 D P Q _111928 _112047 _112050 _112048 _112049)). Qed.
Lemma lem8320354 {D P Q : Type'} (_111928 : type886 D P Q) (_112047 : Q -> D) (_112050 : Q) (_112048 : P -> D) (_112049 : P) : ((term2524 D P Q _112050 _111928 _112047 _112048 _112049) = (term2660 D P Q _111928 _112047 _112050 _112048 _112049)) = True.
Proof. exact (TRANS (@lem8320349 D P Q _111928 _112047 _112050 _112048 _112049) (@lem8320353 D P Q _111928 _112047 _112050 _112048 _112049)). Qed.
Lemma lem8320355 {D P Q : Type'} (_111928 : type886 D P Q) (_112047 : Q -> D) (_112050 : Q) (_112048 : P -> D) (_112049 : P) : True = ((term2524 D P Q _112050 _111928 _112047 _112048 _112049) = (term2660 D P Q _111928 _112047 _112050 _112048 _112049)).
Proof. exact (SYM (@lem8320354 D P Q _111928 _112047 _112050 _112048 _112049)). Qed.
Lemma lem8320356 {D P Q : Type'} (_111928 : type886 D P Q) (_112047 : Q -> D) (_112050 : Q) (_112048 : P -> D) (_112049 : P) : (term2524 D P Q _112050 _111928 _112047 _112048 _112049) = (term2660 D P Q _111928 _112047 _112050 _112048 _112049).
Proof. exact (EQ_MP (@lem8320355 D P Q _111928 _112047 _112050 _112048 _112049) (@lem0)). Qed.
Lemma lem8320357 {D P Q : Type'} (_112047 : Q -> D) (_112050 : Q) (_112048 : P -> D) (_112049 : P) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2660 D P Q _111928 _112047 _112050 _112048 _112049.
Proof. exact (EQ_MP (@lem8320356 D P Q _111928 _112047 _112050 _112048 _112049) (@lem8316494 D P Q _112050 _112047 _112048 _112049 _111928 h1)). Qed.
Lemma lem8320359 (b : Prop) (a : Prop) : (a \/ b) = (term970 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8320360 {D P Q : Type'} (_112050 : Q) (_111928 : type886 D P Q) (_112047 : Q -> D) (_112048 : P -> D) (_112049 : P) : (term2660 D P Q _111928 _112047 _112050 _112048 _112049) = (term2663 D P Q _112050 _111928 _112047 _112048 _112049).
Proof. exact (@lem8320359 (term2319 D P Q _112047 _112050 _112048 _112049) ((term2315 D P Q _111928 _112047 _112048 _112049) = (@I (P -> D) _112048 _112049))). Qed.
Lemma lem8320362 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8320363 {D P Q : Type'} (_112047 : Q -> D) (_112050 : Q) (_112048 : P -> D) (_112049 : P) : (term2664 D P Q _112047 _112050 _112048 _112049) = ((@I (Q -> D) _112047 _112050) = (@I (P -> D) _112048 _112049)).
Proof. exact (@lem8320362 ((@I (Q -> D) _112047 _112050) = (@I (P -> D) _112048 _112049))). Qed.
Lemma lem8320364 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8320365 {D P Q : Type'} (_112047 : Q -> D) (_112050 : Q) (_112048 : P -> D) (_112049 : P) : (term2665 D P Q _112047 _112050 _112048 _112049) = (term2666 D P Q _112047 _112050 _112048 _112049).
Proof. exact (MK_COMB (@lem8320364) (@lem8320363 D P Q _112047 _112050 _112048 _112049)). Qed.
Lemma lem8320366 {D P Q : Type'} (_111928 : type886 D P Q) (_112047 : Q -> D) (_112048 : P -> D) (_112049 : P) : ((term2315 D P Q _111928 _112047 _112048 _112049) = (@I (P -> D) _112048 _112049)) = ((term2315 D P Q _111928 _112047 _112048 _112049) = (@I (P -> D) _112048 _112049)).
Proof. exact (eq_refl ((term2315 D P Q _111928 _112047 _112048 _112049) = (@I (P -> D) _112048 _112049))). Qed.
Lemma lem8320367 {D P Q : Type'} (_112050 : Q) (_111928 : type886 D P Q) (_112047 : Q -> D) (_112048 : P -> D) (_112049 : P) : (term2663 D P Q _112050 _111928 _112047 _112048 _112049) = (term2667 D P Q _112050 _111928 _112047 _112048 _112049).
Proof. exact (MK_COMB (@lem8320365 D P Q _112047 _112050 _112048 _112049) (@lem8320366 D P Q _111928 _112047 _112048 _112049)). Qed.
Lemma lem8320368 {D P Q : Type'} (_112050 : Q) (_111928 : type886 D P Q) (_112047 : Q -> D) (_112048 : P -> D) (_112049 : P) : (term2660 D P Q _111928 _112047 _112050 _112048 _112049) = (term2667 D P Q _112050 _111928 _112047 _112048 _112049).
Proof. exact (TRANS (@lem8320360 D P Q _112050 _111928 _112047 _112048 _112049) (@lem8320367 D P Q _112050 _111928 _112047 _112048 _112049)). Qed.
Lemma lem8320371 {D P Q : Type'} (_112050 : Q) (_112047 : Q -> D) (_112048 : P -> D) (_112049 : P) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2667 D P Q _112050 _111928 _112047 _112048 _112049.
Proof. exact (EQ_MP (@lem8320368 D P Q _112050 _111928 _112047 _112048 _112049) (@lem8320357 D P Q _112047 _112050 _112048 _112049 _111928 h1)). Qed.
Lemma lem8320372 {D P Q : Type'} (_112050 : Q) (_112047 : Q -> D) (_112048 : P -> D) (_112049 : P) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2667 D P Q _112050 _111928 _112047 _112048 _112049.
Proof. exact (@lem8320371 D P Q _112050 _112047 _112048 _112049 _111928 h1). Qed.
Lemma lem8320373 {D P Q : Type'} (t' : Q) (pat : Q -> D) (e : P -> D) (a' : P) (_111928 : type886 D P Q) (h1 : term1254 D P Q _111928) : term2667 D P Q t' _111928 pat e a'.
Proof. exact (@lem8320372 D P Q t' pat e a' _111928 h1). Qed.
Lemma lem8320376 {A B D P Q : Type'} (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1254 D P Q _111928) (h2 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : (term2315 D P Q _111928 pat e a') = (@I (P -> D) e a').
Proof. exact (@lem8320373 D P Q t' pat e a' _111928 h1 (@lem8320320 A B D P Q t' p _111929 f arg _111928 pat e a' h2)). Qed.
Lemma lem8320377 {A B D P Q : Type'} (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1254 D P Q _111928) (h2 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : term2668 D P Q _111928 pat e a'.
Proof. exact (fun h0 : term2669 D P Q _111928 pat e a' => @lem8320376 A B D P Q t' p _111929 f arg _111928 pat e a' h1 h2). Qed.
Lemma lem8320379 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8320380 {D P Q : Type'} (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2668 D P Q _111928 pat e a') = ((term2315 D P Q _111928 pat e a') = (@I (P -> D) e a')).
Proof. exact (@lem8320379 ((term2315 D P Q _111928 pat e a') = (@I (P -> D) e a'))). Qed.
Lemma lem8320381 {A B D P Q : Type'} (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1254 D P Q _111928) (h2 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : (term2315 D P Q _111928 pat e a') = (@I (P -> D) e a').
Proof. exact (EQ_MP (@lem8320380 D P Q _111928 pat e a') (@lem8320377 A B D P Q t' p _111929 f arg _111928 pat e a' h1 h2)). Qed.
Lemma lem8320387 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8320388 {A B D P Q : Type'} (p : type560 A B P) (_112051 : A -> B) (pat : Q -> D) (e : P -> D) (_112053 : Q) (arg : type1475 A P Q) (_112052 : P) (_112054 : Q) : (term2656 A B D P Q p _112051 pat e _112053 arg _112052 _112054) = (term2806 A B D P Q p _112051 pat e _112053 arg _112052 _112054).
Proof. exact (@lem8320387 (term2319 D P Q pat _112053 e _112052) (term866 A B P p _112051 _112052) (term2807 A D P Q pat e _112053 arg _112052 _112054)). Qed.
Lemma lem8320404 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8320405 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (p : type560 A B P) (_112051 : A -> B) (_112053 : Q) (arg : type1475 A P Q) (_112052 : P) (_112054 : Q) : (term2808 A B D P Q p _112051 pat e _112053 arg _112052 _112054) = (term2809 A B D P Q pat e p _112051 _112053 arg _112052 _112054).
Proof. exact (@lem8320404 (term2319 D P Q pat _112054 e _112052) (term866 A B P p _112051 _112052) ((term2330 A P Q arg _112052 _112053) = (term2330 A P Q arg _112052 _112054))). Qed.
Lemma lem8320421 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8320422 {A B P Q : Type'} (_112053 : Q) (arg : type1475 A P Q) (_112054 : Q) (p : type560 A B P) (_112051 : A -> B) (_112052 : P) : (term2810 A B P Q p _112051 _112053 arg _112052 _112054) = (term2811 A B P Q _112053 arg _112054 p _112051 _112052).
Proof. exact (@lem8320421 ((term2330 A P Q arg _112052 _112053) = (term2330 A P Q arg _112052 _112054)) (term866 A B P p _112051 _112052)). Qed.
Lemma lem8320430 {D P Q : Type'} (pat : Q -> D) (_112054 : Q) (e : P -> D) (_112052 : P) : (term2333 D P Q pat _112054 e _112052) = (term2333 D P Q pat _112054 e _112052).
Proof. exact (eq_refl (term2333 D P Q pat _112054 e _112052)). Qed.
Lemma lem8320431 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (_112053 : Q) (arg : type1475 A P Q) (_112054 : Q) (p : type560 A B P) (_112051 : A -> B) (_112052 : P) : (term2809 A B D P Q pat e p _112051 _112053 arg _112052 _112054) = (term2812 A B D P Q pat e _112053 arg _112054 p _112051 _112052).
Proof. exact (MK_COMB (@lem8320430 D P Q pat _112054 e _112052) (@lem8320422 A B P Q _112053 arg _112054 p _112051 _112052)). Qed.
Lemma lem8320435 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8320436 {A B D P Q : Type'} (_112053 : Q) (arg : type1475 A P Q) (pat : Q -> D) (_112054 : Q) (e : P -> D) (p : type560 A B P) (_112051 : A -> B) (_112052 : P) : (term2812 A B D P Q pat e _112053 arg _112054 p _112051 _112052) = (term2813 A B D P Q _112053 arg pat _112054 e p _112051 _112052).
Proof. exact (@lem8320435 ((term2330 A P Q arg _112052 _112053) = (term2330 A P Q arg _112052 _112054)) (term2319 D P Q pat _112054 e _112052) (term866 A B P p _112051 _112052)). Qed.
Lemma lem8320456 {A B D P Q : Type'} (_112053 : Q) (arg : type1475 A P Q) (pat : Q -> D) (_112054 : Q) (e : P -> D) (p : type560 A B P) (_112051 : A -> B) (_112052 : P) : (term2809 A B D P Q pat e p _112051 _112053 arg _112052 _112054) = (term2813 A B D P Q _112053 arg pat _112054 e p _112051 _112052).
Proof. exact (TRANS (@lem8320431 A B D P Q pat e _112053 arg _112054 p _112051 _112052) (@lem8320436 A B D P Q _112053 arg pat _112054 e p _112051 _112052)). Qed.
Lemma lem8320457 {A B D P Q : Type'} (_112053 : Q) (arg : type1475 A P Q) (pat : Q -> D) (_112054 : Q) (e : P -> D) (p : type560 A B P) (_112051 : A -> B) (_112052 : P) : (term2808 A B D P Q p _112051 pat e _112053 arg _112052 _112054) = (term2813 A B D P Q _112053 arg pat _112054 e p _112051 _112052).
Proof. exact (TRANS (@lem8320405 A B D P Q pat e p _112051 _112053 arg _112052 _112054) (@lem8320456 A B D P Q _112053 arg pat _112054 e p _112051 _112052)). Qed.
Lemma lem8320458 {D P Q : Type'} (pat : Q -> D) (_112053 : Q) (e : P -> D) (_112052 : P) : (term2333 D P Q pat _112053 e _112052) = (term2333 D P Q pat _112053 e _112052).
Proof. exact (eq_refl (term2333 D P Q pat _112053 e _112052)). Qed.
Lemma lem8320459 {A B D P Q : Type'} (_112053 : Q) (arg : type1475 A P Q) (pat : Q -> D) (_112054 : Q) (e : P -> D) (p : type560 A B P) (_112051 : A -> B) (_112052 : P) : (term2806 A B D P Q p _112051 pat e _112053 arg _112052 _112054) = (term2814 A B D P Q _112053 arg pat _112054 e p _112051 _112052).
Proof. exact (MK_COMB (@lem8320458 D P Q pat _112053 e _112052) (@lem8320457 A B D P Q _112053 arg pat _112054 e p _112051 _112052)). Qed.
Lemma lem8320463 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8320464 {A B D P Q : Type'} (arg : type1475 A P Q) (_112053 : Q) (pat : Q -> D) (_112054 : Q) (e : P -> D) (p : type560 A B P) (_112051 : A -> B) (_112052 : P) : (term2814 A B D P Q _112053 arg pat _112054 e p _112051 _112052) = (term2815 A B D P Q arg _112053 pat _112054 e p _112051 _112052).
Proof. exact (@lem8320463 ((term2330 A P Q arg _112052 _112053) = (term2330 A P Q arg _112052 _112054)) (term2319 D P Q pat _112053 e _112052) (term2816 A B D P Q pat _112054 e p _112051 _112052)). Qed.
Lemma lem8320496 {A B D P Q : Type'} (arg : type1475 A P Q) (_112053 : Q) (pat : Q -> D) (_112054 : Q) (e : P -> D) (p : type560 A B P) (_112051 : A -> B) (_112052 : P) : (term2806 A B D P Q p _112051 pat e _112053 arg _112052 _112054) = (term2815 A B D P Q arg _112053 pat _112054 e p _112051 _112052).
Proof. exact (TRANS (@lem8320459 A B D P Q _112053 arg pat _112054 e p _112051 _112052) (@lem8320464 A B D P Q arg _112053 pat _112054 e p _112051 _112052)). Qed.
Lemma lem8320497 {A B D P Q : Type'} (arg : type1475 A P Q) (_112053 : Q) (pat : Q -> D) (_112054 : Q) (e : P -> D) (p : type560 A B P) (_112051 : A -> B) (_112052 : P) : (term2656 A B D P Q p _112051 pat e _112053 arg _112052 _112054) = (term2815 A B D P Q arg _112053 pat _112054 e p _112051 _112052).
Proof. exact (TRANS (@lem8320388 A B D P Q p _112051 pat e _112053 arg _112052 _112054) (@lem8320496 A B D P Q arg _112053 pat _112054 e p _112051 _112052)). Qed.
Lemma lem8320498 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8320499 {A B D P Q : Type'} (arg : type1475 A P Q) (_112053 : Q) (pat : Q -> D) (_112054 : Q) (e : P -> D) (p : type560 A B P) (_112051 : A -> B) (_112052 : P) : (term2817 A B D P Q p _112051 pat e _112053 arg _112052 _112054) = (term2818 A B D P Q arg _112053 pat _112054 e p _112051 _112052).
Proof. exact (MK_COMB (@lem8320498) (@lem8320497 A B D P Q arg _112053 pat _112054 e p _112051 _112052)). Qed.
Lemma lem8320515 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8320516 {A B D P Q : Type'} (_112053 : Q) (p : type560 A B P) (_112051 : A -> B) (pat : Q -> D) (_112054 : Q) (e : P -> D) (_112052 : P) : (term2335 A B D P Q p _112051 _112053 pat _112054 e _112052) = (term2819 A B D P Q _112053 p _112051 pat _112054 e _112052).
Proof. exact (@lem8320515 (term2319 D P Q pat _112053 e _112052) (term866 A B P p _112051 _112052) (term2319 D P Q pat _112054 e _112052)). Qed.
Lemma lem8320532 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8320533 {A B D P Q : Type'} (pat : Q -> D) (_112054 : Q) (e : P -> D) (p : type560 A B P) (_112051 : A -> B) (_112052 : P) : (term2359 A B D P Q p _112051 pat _112054 e _112052) = (term2816 A B D P Q pat _112054 e p _112051 _112052).
Proof. exact (@lem8320532 (term2319 D P Q pat _112054 e _112052) (term866 A B P p _112051 _112052)). Qed.
Lemma lem8320541 {D P Q : Type'} (pat : Q -> D) (_112053 : Q) (e : P -> D) (_112052 : P) : (term2333 D P Q pat _112053 e _112052) = (term2333 D P Q pat _112053 e _112052).
Proof. exact (eq_refl (term2333 D P Q pat _112053 e _112052)). Qed.
Lemma lem8320542 {A B D P Q : Type'} (_112053 : Q) (pat : Q -> D) (_112054 : Q) (e : P -> D) (p : type560 A B P) (_112051 : A -> B) (_112052 : P) : (term2819 A B D P Q _112053 p _112051 pat _112054 e _112052) = (term2820 A B D P Q _112053 pat _112054 e p _112051 _112052).
Proof. exact (MK_COMB (@lem8320541 D P Q pat _112053 e _112052) (@lem8320533 A B D P Q pat _112054 e p _112051 _112052)). Qed.
Lemma lem8320553 {A B D P Q : Type'} (_112053 : Q) (pat : Q -> D) (_112054 : Q) (e : P -> D) (p : type560 A B P) (_112051 : A -> B) (_112052 : P) : (term2335 A B D P Q p _112051 _112053 pat _112054 e _112052) = (term2820 A B D P Q _112053 pat _112054 e p _112051 _112052).
Proof. exact (TRANS (@lem8320516 A B D P Q _112053 p _112051 pat _112054 e _112052) (@lem8320542 A B D P Q _112053 pat _112054 e p _112051 _112052)). Qed.
Lemma lem8320554 {A P Q : Type'} (_112053 : Q) (arg : type1475 A P Q) (_112052 : P) (_112054 : Q) : (term2821 A P Q _112053 arg _112052 _112054) = (term2821 A P Q _112053 arg _112052 _112054).
Proof. exact (eq_refl (term2821 A P Q _112053 arg _112052 _112054)). Qed.
Lemma lem8320555 {A B D P Q : Type'} (arg : type1475 A P Q) (_112053 : Q) (pat : Q -> D) (_112054 : Q) (e : P -> D) (p : type560 A B P) (_112051 : A -> B) (_112052 : P) : (term2822 A B D P Q arg p _112051 _112053 pat _112054 e _112052) = (term2815 A B D P Q arg _112053 pat _112054 e p _112051 _112052).
Proof. exact (MK_COMB (@lem8320554 A P Q _112053 arg _112052 _112054) (@lem8320553 A B D P Q _112053 pat _112054 e p _112051 _112052)). Qed.
Lemma lem8320566 {A B D P Q : Type'} (arg : type1475 A P Q) (_112053 : Q) (pat : Q -> D) (_112054 : Q) (e : P -> D) (p : type560 A B P) (_112051 : A -> B) (_112052 : P) : ((term2656 A B D P Q p _112051 pat e _112053 arg _112052 _112054) = (term2822 A B D P Q arg p _112051 _112053 pat _112054 e _112052)) = ((term2815 A B D P Q arg _112053 pat _112054 e p _112051 _112052) = (term2815 A B D P Q arg _112053 pat _112054 e p _112051 _112052)).
Proof. exact (MK_COMB (@lem8320499 A B D P Q arg _112053 pat _112054 e p _112051 _112052) (@lem8320555 A B D P Q arg _112053 pat _112054 e p _112051 _112052)). Qed.
Lemma lem8320568 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8320569 (x : Prop) : (x = x) = True.
Proof. exact (@lem8320568 Prop x). Qed.
Lemma lem8320570 {A B D P Q : Type'} (arg : type1475 A P Q) (_112053 : Q) (pat : Q -> D) (_112054 : Q) (e : P -> D) (p : type560 A B P) (_112051 : A -> B) (_112052 : P) : ((term2815 A B D P Q arg _112053 pat _112054 e p _112051 _112052) = (term2815 A B D P Q arg _112053 pat _112054 e p _112051 _112052)) = True.
Proof. exact (@lem8320569 (term2815 A B D P Q arg _112053 pat _112054 e p _112051 _112052)). Qed.
Lemma lem8320571 {A B D P Q : Type'} (arg : type1475 A P Q) (p : type560 A B P) (_112051 : A -> B) (_112053 : Q) (pat : Q -> D) (_112054 : Q) (e : P -> D) (_112052 : P) : ((term2656 A B D P Q p _112051 pat e _112053 arg _112052 _112054) = (term2822 A B D P Q arg p _112051 _112053 pat _112054 e _112052)) = True.
Proof. exact (TRANS (@lem8320566 A B D P Q arg _112053 pat _112054 e p _112051 _112052) (@lem8320570 A B D P Q arg _112053 pat _112054 e p _112051 _112052)). Qed.
Lemma lem8320572 {A B D P Q : Type'} (arg : type1475 A P Q) (p : type560 A B P) (_112051 : A -> B) (_112053 : Q) (pat : Q -> D) (_112054 : Q) (e : P -> D) (_112052 : P) : True = ((term2656 A B D P Q p _112051 pat e _112053 arg _112052 _112054) = (term2822 A B D P Q arg p _112051 _112053 pat _112054 e _112052)).
Proof. exact (SYM (@lem8320571 A B D P Q arg p _112051 _112053 pat _112054 e _112052)). Qed.
Lemma lem8320573 {A B D P Q : Type'} (arg : type1475 A P Q) (p : type560 A B P) (_112051 : A -> B) (_112053 : Q) (pat : Q -> D) (_112054 : Q) (e : P -> D) (_112052 : P) : (term2656 A B D P Q p _112051 pat e _112053 arg _112052 _112054) = (term2822 A B D P Q arg p _112051 _112053 pat _112054 e _112052).
Proof. exact (EQ_MP (@lem8320572 A B D P Q arg p _112051 _112053 pat _112054 e _112052) (@lem0)). Qed.
Lemma lem8320574 {A B D P Q : Type'} (_112051 : A -> B) (_112053 : Q) (_112054 : Q) (_112052 : P) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term2822 A B D P Q arg p _112051 _112053 pat _112054 e _112052.
Proof. exact (EQ_MP (@lem8320573 A B D P Q arg p _112051 _112053 pat _112054 e _112052) (@lem8316512 A B D P Q _112051 _112053 _112052 _112054 p pat e arg h1)). Qed.
Lemma lem8320576 (b : Prop) (a : Prop) : (a \/ b) = (term970 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8320577 {A B D P Q : Type'} (p : type560 A B P) (_112051 : A -> B) (pat : Q -> D) (e : P -> D) (_112053 : Q) (arg : type1475 A P Q) (_112052 : P) (_112054 : Q) : (term2822 A B D P Q arg p _112051 _112053 pat _112054 e _112052) = (term2823 A B D P Q p _112051 pat e _112053 arg _112052 _112054).
Proof. exact (@lem8320576 (term2335 A B D P Q p _112051 _112053 pat _112054 e _112052) ((term2330 A P Q arg _112052 _112053) = (term2330 A P Q arg _112052 _112054))). Qed.
Lemma lem8320579 (a : Prop) (b : Prop) : (term972 a b) = (term973 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8320580 {A B D P Q : Type'} (p : type560 A B P) (_112051 : A -> B) (_112053 : Q) (pat : Q -> D) (_112054 : Q) (e : P -> D) (_112052 : P) : (term2824 A B D P Q p _112051 _112053 pat _112054 e _112052) = (term2825 A B D P Q p _112051 _112053 pat _112054 e _112052).
Proof. exact (@lem8320579 (term866 A B P p _112051 _112052) (term2334 D P Q _112053 pat _112054 e _112052)). Qed.
Lemma lem8320582 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8320583 {A B P : Type'} (p : type560 A B P) (_112051 : A -> B) (_112052 : P) : (term976 A B P p _112051 _112052) = (term864 A B P p _112051 _112052).
Proof. exact (@lem8320582 (term864 A B P p _112051 _112052)). Qed.
Lemma lem8320584 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8320585 {A B P : Type'} (p : type560 A B P) (_112051 : A -> B) (_112052 : P) : (term977 A B P p _112051 _112052) = (term978 A B P p _112051 _112052).
Proof. exact (MK_COMB (@lem8320584) (@lem8320583 A B P p _112051 _112052)). Qed.
Lemma lem8320587 (a : Prop) (b : Prop) : (term972 a b) = (term973 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8320588 {D P Q : Type'} (_112053 : Q) (pat : Q -> D) (_112054 : Q) (e : P -> D) (_112052 : P) : (term2826 D P Q _112053 pat _112054 e _112052) = (term2827 D P Q _112053 pat _112054 e _112052).
Proof. exact (@lem8320587 (term2319 D P Q pat _112053 e _112052) (term2319 D P Q pat _112054 e _112052)). Qed.
Lemma lem8320590 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8320591 {D P Q : Type'} (pat : Q -> D) (_112053 : Q) (e : P -> D) (_112052 : P) : (term2664 D P Q pat _112053 e _112052) = ((@I (Q -> D) pat _112053) = (@I (P -> D) e _112052)).
Proof. exact (@lem8320590 ((@I (Q -> D) pat _112053) = (@I (P -> D) e _112052))). Qed.
Lemma lem8320592 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8320593 {D P Q : Type'} (pat : Q -> D) (_112053 : Q) (e : P -> D) (_112052 : P) : (term2696 D P Q pat _112053 e _112052) = (term2384 D P Q pat _112053 e _112052).
Proof. exact (MK_COMB (@lem8320592) (@lem8320591 D P Q pat _112053 e _112052)). Qed.
Lemma lem8320595 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8320596 {D P Q : Type'} (pat : Q -> D) (_112054 : Q) (e : P -> D) (_112052 : P) : (term2664 D P Q pat _112054 e _112052) = ((@I (Q -> D) pat _112054) = (@I (P -> D) e _112052)).
Proof. exact (@lem8320595 ((@I (Q -> D) pat _112054) = (@I (P -> D) e _112052))). Qed.
Lemma lem8320597 {D P Q : Type'} (_112053 : Q) (pat : Q -> D) (_112054 : Q) (e : P -> D) (_112052 : P) : (term2827 D P Q _112053 pat _112054 e _112052) = (term2828 D P Q _112053 pat _112054 e _112052).
Proof. exact (MK_COMB (@lem8320593 D P Q pat _112053 e _112052) (@lem8320596 D P Q pat _112054 e _112052)). Qed.
Lemma lem8320598 {D P Q : Type'} (_112053 : Q) (pat : Q -> D) (_112054 : Q) (e : P -> D) (_112052 : P) : (term2826 D P Q _112053 pat _112054 e _112052) = (term2828 D P Q _112053 pat _112054 e _112052).
Proof. exact (TRANS (@lem8320588 D P Q _112053 pat _112054 e _112052) (@lem8320597 D P Q _112053 pat _112054 e _112052)). Qed.
Lemma lem8320599 {A B D P Q : Type'} (p : type560 A B P) (_112051 : A -> B) (_112053 : Q) (pat : Q -> D) (_112054 : Q) (e : P -> D) (_112052 : P) : (term2825 A B D P Q p _112051 _112053 pat _112054 e _112052) = (term2829 A B D P Q p _112051 _112053 pat _112054 e _112052).
Proof. exact (MK_COMB (@lem8320585 A B P p _112051 _112052) (@lem8320598 D P Q _112053 pat _112054 e _112052)). Qed.
Lemma lem8320600 {A B D P Q : Type'} (p : type560 A B P) (_112051 : A -> B) (_112053 : Q) (pat : Q -> D) (_112054 : Q) (e : P -> D) (_112052 : P) : (term2824 A B D P Q p _112051 _112053 pat _112054 e _112052) = (term2829 A B D P Q p _112051 _112053 pat _112054 e _112052).
Proof. exact (TRANS (@lem8320580 A B D P Q p _112051 _112053 pat _112054 e _112052) (@lem8320599 A B D P Q p _112051 _112053 pat _112054 e _112052)). Qed.
Lemma lem8320601 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8320602 {A B D P Q : Type'} (p : type560 A B P) (_112051 : A -> B) (_112053 : Q) (pat : Q -> D) (_112054 : Q) (e : P -> D) (_112052 : P) : (term2830 A B D P Q p _112051 _112053 pat _112054 e _112052) = (term2831 A B D P Q p _112051 _112053 pat _112054 e _112052).
Proof. exact (MK_COMB (@lem8320601) (@lem8320600 A B D P Q p _112051 _112053 pat _112054 e _112052)). Qed.
Lemma lem8320603 {A P Q : Type'} (_112053 : Q) (arg : type1475 A P Q) (_112052 : P) (_112054 : Q) : ((term2330 A P Q arg _112052 _112053) = (term2330 A P Q arg _112052 _112054)) = ((term2330 A P Q arg _112052 _112053) = (term2330 A P Q arg _112052 _112054)).
Proof. exact (eq_refl ((term2330 A P Q arg _112052 _112053) = (term2330 A P Q arg _112052 _112054))). Qed.
Lemma lem8320604 {A B D P Q : Type'} (p : type560 A B P) (_112051 : A -> B) (pat : Q -> D) (e : P -> D) (_112053 : Q) (arg : type1475 A P Q) (_112052 : P) (_112054 : Q) : (term2823 A B D P Q p _112051 pat e _112053 arg _112052 _112054) = (term2832 A B D P Q p _112051 pat e _112053 arg _112052 _112054).
Proof. exact (MK_COMB (@lem8320602 A B D P Q p _112051 _112053 pat _112054 e _112052) (@lem8320603 A P Q _112053 arg _112052 _112054)). Qed.
Lemma lem8320605 {A B D P Q : Type'} (p : type560 A B P) (_112051 : A -> B) (pat : Q -> D) (e : P -> D) (_112053 : Q) (arg : type1475 A P Q) (_112052 : P) (_112054 : Q) : (term2822 A B D P Q arg p _112051 _112053 pat _112054 e _112052) = (term2832 A B D P Q p _112051 pat e _112053 arg _112052 _112054).
Proof. exact (TRANS (@lem8320577 A B D P Q p _112051 pat e _112053 arg _112052 _112054) (@lem8320604 A B D P Q p _112051 pat e _112053 arg _112052 _112054)). Qed.
Lemma lem8320607 {A B D P Q : Type'} (t'' : type905 A B D P Q) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1254 D P Q _111928) (h2 : term1731 A B D P Q t'' _111929) (h3 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : term2833 A B D P Q t'' f arg _111928 pat e a'.
Proof. exact (conj (@lem8320313 A B D P Q t'' t' p _111929 f arg _111928 pat e a' h2 h3) (@lem8320381 A B D P Q t' p _111929 f arg _111928 pat e a' h1 h3)). Qed.
Lemma lem8320608 {A B D P Q : Type'} (t'' : type905 A B D P Q) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1254 D P Q _111928) (h2 : term1731 A B D P Q t'' _111929) (h3 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : term2834 A B D P Q p t'' f arg _111928 pat e a'.
Proof. exact (conj (@lem8320150 A B D P Q t' p _111929 f arg _111928 pat e a' h3) (@lem8320607 A B D P Q t'' t' p _111929 f arg _111928 pat e a' h1 h2 h3)). Qed.
Lemma lem8320610 {A B D P Q : Type'} (_112051 : A -> B) (_112053 : Q) (_112052 : P) (_112054 : Q) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term2832 A B D P Q p _112051 pat e _112053 arg _112052 _112054.
Proof. exact (EQ_MP (@lem8320605 A B D P Q p _112051 pat e _112053 arg _112052 _112054) (@lem8320574 A B D P Q _112051 _112053 _112054 _112052 p pat e arg h1)). Qed.
Lemma lem8320611 {A B D P Q : Type'} (_112051 : A -> B) (_112053 : Q) (_112052 : P) (_112054 : Q) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term2832 A B D P Q p _112051 pat e _112053 arg _112052 _112054.
Proof. exact (@lem8320610 A B D P Q _112051 _112053 _112052 _112054 p pat e arg h1). Qed.
Lemma lem8320612 {A B D P Q : Type'} (t'' : type905 A B D P Q) (f : A -> B) (_111928 : type886 D P Q) (a' : P) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term2835 A B D P Q p t'' f arg _111928 pat e a'.
Proof. exact (@lem8320611 A B D P Q f (term2466 A B D P Q t'' pat e f arg a') a' (term2313 D P Q _111928 pat e a') p pat e arg h1). Qed.
Lemma lem8320615 {A B D P Q : Type'} (t'' : type905 A B D P Q) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term1254 D P Q _111928) (h3 : term1731 A B D P Q t'' _111929) (h4 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : (term2470 A B D P Q t'' pat e f arg a') = (term2377 A D P Q arg _111928 pat e a').
Proof. exact (@lem8320612 A B D P Q t'' f _111928 a' p pat e arg h1 (@lem8320608 A B D P Q t'' t' p _111929 f arg _111928 pat e a' h2 h3 h4)). Qed.
Lemma lem8320616 {A B D P Q : Type'} (t'' : type905 A B D P Q) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term1254 D P Q _111928) (h3 : term1731 A B D P Q t'' _111929) (h4 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : term2836 A B D P Q t'' f arg _111928 pat e a'.
Proof. exact (fun h0 : term2837 A B D P Q t'' f arg _111928 pat e a' => @lem8320615 A B D P Q t'' t' p _111929 f arg _111928 pat e a' h1 h2 h3 h4). Qed.
Lemma lem8320618 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8320619 {A B D P Q : Type'} (t'' : type905 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2836 A B D P Q t'' f arg _111928 pat e a') = ((term2470 A B D P Q t'' pat e f arg a') = (term2377 A D P Q arg _111928 pat e a')).
Proof. exact (@lem8320618 ((term2470 A B D P Q t'' pat e f arg a') = (term2377 A D P Q arg _111928 pat e a'))). Qed.
Lemma lem8320620 {A B D P Q : Type'} (t'' : type905 A B D P Q) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term1254 D P Q _111928) (h3 : term1731 A B D P Q t'' _111929) (h4 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : (term2470 A B D P Q t'' pat e f arg a') = (term2377 A D P Q arg _111928 pat e a').
Proof. exact (EQ_MP (@lem8320619 A B D P Q t'' f arg _111928 pat e a') (@lem8320616 A B D P Q t'' t' p _111929 f arg _111928 pat e a' h1 h2 h3 h4)). Qed.
Lemma lem8320622 {A B : Type'} (x : A -> B) : x = x.
Proof. exact (@lem21386 (A -> B) x). Qed.
Lemma lem8320623 {A B : Type'} (x : A -> B) : x = x.
Proof. exact (@lem8320622 A B x). Qed.
Lemma lem8320624 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (@lem8320623 A B f). Qed.
Lemma lem8320625 {A B : Type'} (f : A -> B) : term989 A B f.
Proof. exact (fun h0 : term990 A B f => @lem8320624 A B f). Qed.
Lemma lem8320627 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8320628 {A B : Type'} (f : A -> B) : (term989 A B f) = (f = f).
Proof. exact (@lem8320627 (f = f)). Qed.
Lemma lem8320629 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (EQ_MP (@lem8320628 A B f) (@lem8320625 A B f)). Qed.
Lemma lem8320647 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8320648 {A B : Type'} (_112602 : A) (_112604 : A) (_112601 : A -> B) (_112603 : A -> B) : (term948 A B _112601 _112602 _112603 _112604) = (term991 A B _112602 _112604 _112601 _112603).
Proof. exact (@lem8320647 ((@I (A -> B) _112601 _112602) = (@I (A -> B) _112603 _112604)) (term992 A B _112601 _112603)). Qed.
Lemma lem8320658 {A : Type'} (_112602 : A) (_112604 : A) : (term993 A _112602 _112604) = (term993 A _112602 _112604).
Proof. exact (eq_refl (term993 A _112602 _112604)). Qed.
Lemma lem8320659 {A B : Type'} (_112602 : A) (_112604 : A) (_112601 : A -> B) (_112603 : A -> B) : (term950 A B _112601 _112602 _112603 _112604) = (term994 A B _112602 _112604 _112601 _112603).
Proof. exact (MK_COMB (@lem8320658 A _112602 _112604) (@lem8320648 A B _112602 _112604 _112601 _112603)). Qed.
Lemma lem8320663 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8320664 {A B : Type'} (_112602 : A) (_112604 : A) (_112601 : A -> B) (_112603 : A -> B) : (term994 A B _112602 _112604 _112601 _112603) = (term995 A B _112602 _112604 _112601 _112603).
Proof. exact (@lem8320663 ((@I (A -> B) _112601 _112602) = (@I (A -> B) _112603 _112604)) (term421 A _112602 _112604) (term992 A B _112601 _112603)). Qed.
Lemma lem8320686 {A B : Type'} (_112602 : A) (_112604 : A) (_112601 : A -> B) (_112603 : A -> B) : (term950 A B _112601 _112602 _112603 _112604) = (term995 A B _112602 _112604 _112601 _112603).
Proof. exact (TRANS (@lem8320659 A B _112602 _112604 _112601 _112603) (@lem8320664 A B _112602 _112604 _112601 _112603)). Qed.
Lemma lem8320687 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8320688 {A B : Type'} (_112602 : A) (_112604 : A) (_112601 : A -> B) (_112603 : A -> B) : (term996 A B _112601 _112602 _112603 _112604) = (term997 A B _112602 _112604 _112601 _112603).
Proof. exact (MK_COMB (@lem8320687) (@lem8320686 A B _112602 _112604 _112601 _112603)). Qed.
Lemma lem8320710 {A B : Type'} (_112602 : A) (_112604 : A) (_112601 : A -> B) (_112603 : A -> B) : (term995 A B _112602 _112604 _112601 _112603) = (term995 A B _112602 _112604 _112601 _112603).
Proof. exact (eq_refl (term995 A B _112602 _112604 _112601 _112603)). Qed.
Lemma lem8320711 {A B : Type'} (_112602 : A) (_112604 : A) (_112601 : A -> B) (_112603 : A -> B) : ((term950 A B _112601 _112602 _112603 _112604) = (term995 A B _112602 _112604 _112601 _112603)) = ((term995 A B _112602 _112604 _112601 _112603) = (term995 A B _112602 _112604 _112601 _112603)).
Proof. exact (MK_COMB (@lem8320688 A B _112602 _112604 _112601 _112603) (@lem8320710 A B _112602 _112604 _112601 _112603)). Qed.
Lemma lem8320713 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8320714 (x : Prop) : (x = x) = True.
Proof. exact (@lem8320713 Prop x). Qed.
Lemma lem8320715 {A B : Type'} (_112602 : A) (_112604 : A) (_112601 : A -> B) (_112603 : A -> B) : ((term995 A B _112602 _112604 _112601 _112603) = (term995 A B _112602 _112604 _112601 _112603)) = True.
Proof. exact (@lem8320714 (term995 A B _112602 _112604 _112601 _112603)). Qed.
Lemma lem8320716 {A B : Type'} (_112602 : A) (_112604 : A) (_112601 : A -> B) (_112603 : A -> B) : ((term950 A B _112601 _112602 _112603 _112604) = (term995 A B _112602 _112604 _112601 _112603)) = True.
Proof. exact (TRANS (@lem8320711 A B _112602 _112604 _112601 _112603) (@lem8320715 A B _112602 _112604 _112601 _112603)). Qed.
Lemma lem8320717 {A B : Type'} (_112602 : A) (_112604 : A) (_112601 : A -> B) (_112603 : A -> B) : True = ((term950 A B _112601 _112602 _112603 _112604) = (term995 A B _112602 _112604 _112601 _112603)).
Proof. exact (SYM (@lem8320716 A B _112602 _112604 _112601 _112603)). Qed.
Lemma lem8320718 {A B : Type'} (_112602 : A) (_112604 : A) (_112601 : A -> B) (_112603 : A -> B) : (term950 A B _112601 _112602 _112603 _112604) = (term995 A B _112602 _112604 _112601 _112603).
Proof. exact (EQ_MP (@lem8320717 A B _112602 _112604 _112601 _112603) (@lem0)). Qed.
Lemma lem8320719 {A B : Type'} (_112602 : A) (_112604 : A) (_112601 : A -> B) (_112603 : A -> B) : term995 A B _112602 _112604 _112601 _112603.
Proof. exact (EQ_MP (@lem8320718 A B _112602 _112604 _112601 _112603) (@lem8319772 A B _112601 _112602 _112603 _112604)). Qed.
Lemma lem8320721 (b : Prop) (a : Prop) : (a \/ b) = (term970 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8320722 {A B : Type'} (_112601 : A -> B) (_112602 : A) (_112603 : A -> B) (_112604 : A) : (term995 A B _112602 _112604 _112601 _112603) = (term998 A B _112601 _112602 _112603 _112604).
Proof. exact (@lem8320721 (term999 A B _112602 _112604 _112601 _112603) ((@I (A -> B) _112601 _112602) = (@I (A -> B) _112603 _112604))). Qed.
Lemma lem8320724 (a : Prop) (b : Prop) : (term972 a b) = (term973 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8320725 {A B : Type'} (_112602 : A) (_112604 : A) (_112601 : A -> B) (_112603 : A -> B) : (term1000 A B _112602 _112604 _112601 _112603) = (term1001 A B _112602 _112604 _112601 _112603).
Proof. exact (@lem8320724 (term421 A _112602 _112604) (term992 A B _112601 _112603)). Qed.
Lemma lem8320727 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8320728 {A : Type'} (_112602 : A) (_112604 : A) : (term1002 A _112602 _112604) = (_112602 = _112604).
Proof. exact (@lem8320727 (_112602 = _112604)). Qed.
Lemma lem8320729 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8320730 {A : Type'} (_112602 : A) (_112604 : A) : (term1003 A _112602 _112604) = (term1004 A _112602 _112604).
Proof. exact (MK_COMB (@lem8320729) (@lem8320728 A _112602 _112604)). Qed.
Lemma lem8320732 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8320733 {A B : Type'} (_112601 : A -> B) (_112603 : A -> B) : (term1005 A B _112601 _112603) = (_112601 = _112603).
Proof. exact (@lem8320732 (_112601 = _112603)). Qed.
Lemma lem8320734 {A B : Type'} (_112602 : A) (_112604 : A) (_112601 : A -> B) (_112603 : A -> B) : (term1001 A B _112602 _112604 _112601 _112603) = (term1006 A B _112602 _112604 _112601 _112603).
Proof. exact (MK_COMB (@lem8320730 A _112602 _112604) (@lem8320733 A B _112601 _112603)). Qed.
Lemma lem8320735 {A B : Type'} (_112602 : A) (_112604 : A) (_112601 : A -> B) (_112603 : A -> B) : (term1000 A B _112602 _112604 _112601 _112603) = (term1006 A B _112602 _112604 _112601 _112603).
Proof. exact (TRANS (@lem8320725 A B _112602 _112604 _112601 _112603) (@lem8320734 A B _112602 _112604 _112601 _112603)). Qed.
Lemma lem8320736 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8320737 {A B : Type'} (_112602 : A) (_112604 : A) (_112601 : A -> B) (_112603 : A -> B) : (term1007 A B _112602 _112604 _112601 _112603) = (term1008 A B _112602 _112604 _112601 _112603).
Proof. exact (MK_COMB (@lem8320736) (@lem8320735 A B _112602 _112604 _112601 _112603)). Qed.
Lemma lem8320738 {A B : Type'} (_112601 : A -> B) (_112602 : A) (_112603 : A -> B) (_112604 : A) : ((@I (A -> B) _112601 _112602) = (@I (A -> B) _112603 _112604)) = ((@I (A -> B) _112601 _112602) = (@I (A -> B) _112603 _112604)).
Proof. exact (eq_refl ((@I (A -> B) _112601 _112602) = (@I (A -> B) _112603 _112604))). Qed.
Lemma lem8320739 {A B : Type'} (_112601 : A -> B) (_112602 : A) (_112603 : A -> B) (_112604 : A) : (term998 A B _112601 _112602 _112603 _112604) = (term1009 A B _112601 _112602 _112603 _112604).
Proof. exact (MK_COMB (@lem8320737 A B _112602 _112604 _112601 _112603) (@lem8320738 A B _112601 _112602 _112603 _112604)). Qed.
Lemma lem8320740 {A B : Type'} (_112601 : A -> B) (_112602 : A) (_112603 : A -> B) (_112604 : A) : (term995 A B _112602 _112604 _112601 _112603) = (term1009 A B _112601 _112602 _112603 _112604).
Proof. exact (TRANS (@lem8320722 A B _112601 _112602 _112603 _112604) (@lem8320739 A B _112601 _112602 _112603 _112604)). Qed.
Lemma lem8320742 {A B D P Q : Type'} (t'' : type905 A B D P Q) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term1254 D P Q _111928) (h3 : term1731 A B D P Q t'' _111929) (h4 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : term2838 A B D P Q t'' arg _111928 pat e a' f.
Proof. exact (conj (@lem8320620 A B D P Q t'' t' p _111929 f arg _111928 pat e a' h1 h2 h3 h4) (@lem8320629 A B f)). Qed.
Lemma lem8320744 {A B : Type'} (_112601 : A -> B) (_112602 : A) (_112603 : A -> B) (_112604 : A) : term1009 A B _112601 _112602 _112603 _112604.
Proof. exact (EQ_MP (@lem8320740 A B _112601 _112602 _112603 _112604) (@lem8320719 A B _112602 _112604 _112601 _112603)). Qed.
Lemma lem8320745 {A B : Type'} (_112601 : A -> B) (_112602 : A) (_112603 : A -> B) (_112604 : A) : term1009 A B _112601 _112602 _112603 _112604.
Proof. exact (@lem8320744 A B _112601 _112602 _112603 _112604). Qed.
Lemma lem8320746 {A B D P Q : Type'} (t'' : type905 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : term2839 A B D P Q t'' f arg _111928 pat e a'.
Proof. exact (@lem8320745 A B f (term2470 A B D P Q t'' pat e f arg a') f (term2377 A D P Q arg _111928 pat e a')). Qed.
Lemma lem8320749 {A B D P Q : Type'} (t'' : type905 A B D P Q) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term1254 D P Q _111928) (h3 : term1731 A B D P Q t'' _111929) (h4 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : (term2473 A B D P Q t'' pat e f arg a') = (term2379 A B D P Q f arg _111928 pat e a').
Proof. exact (@lem8320746 A B D P Q t'' f arg _111928 pat e a' (@lem8320742 A B D P Q t'' t' p _111929 f arg _111928 pat e a' h1 h2 h3 h4)). Qed.
Lemma lem8320750 {A B D P Q : Type'} (t'' : type905 A B D P Q) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term1254 D P Q _111928) (h3 : term1731 A B D P Q t'' _111929) (h4 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : term2840 A B D P Q t'' f arg _111928 pat e a'.
Proof. exact (fun h0 : term2841 A B D P Q t'' f arg _111928 pat e a' => @lem8320749 A B D P Q t'' t' p _111929 f arg _111928 pat e a' h1 h2 h3 h4). Qed.
Lemma lem8320752 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8320753 {A B D P Q : Type'} (t'' : type905 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2840 A B D P Q t'' f arg _111928 pat e a') = ((term2473 A B D P Q t'' pat e f arg a') = (term2379 A B D P Q f arg _111928 pat e a')).
Proof. exact (@lem8320752 ((term2473 A B D P Q t'' pat e f arg a') = (term2379 A B D P Q f arg _111928 pat e a'))). Qed.
Lemma lem8320754 {A B D P Q : Type'} (t'' : type905 A B D P Q) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term1254 D P Q _111928) (h3 : term1731 A B D P Q t'' _111929) (h4 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : (term2473 A B D P Q t'' pat e f arg a') = (term2379 A B D P Q f arg _111928 pat e a').
Proof. exact (EQ_MP (@lem8320753 A B D P Q t'' f arg _111928 pat e a') (@lem8320750 A B D P Q t'' t' p _111929 f arg _111928 pat e a' h1 h2 h3 h4)). Qed.
Lemma lem8320772 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8320773 {B : Type'} (y : B) (x : B) (z : B) : (term2842 B x y z) = (term2843 B y x z).
Proof. exact (@lem8320772 (y = z) (term421 B x z)). Qed.
Lemma lem8320783 {B : Type'} (x : B) (y : B) : (term993 B x y) = (term993 B x y).
Proof. exact (eq_refl (term993 B x y)). Qed.
Lemma lem8320784 {B : Type'} (y : B) (x : B) (z : B) : (term2766 B x y z) = (term2844 B y x z).
Proof. exact (MK_COMB (@lem8320783 B x y) (@lem8320773 B y x z)). Qed.
Lemma lem8320788 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8320789 {B : Type'} (y : B) (x : B) (z : B) : (term2844 B y x z) = (term2845 B y x z).
Proof. exact (@lem8320788 (y = z) (term421 B x y) (term421 B x z)). Qed.
Lemma lem8320811 {B : Type'} (y : B) (x : B) (z : B) : (term2766 B x y z) = (term2845 B y x z).
Proof. exact (TRANS (@lem8320784 B y x z) (@lem8320789 B y x z)). Qed.
Lemma lem8320812 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8320813 {B : Type'} (y : B) (x : B) (z : B) : (term2846 B x y z) = (term2847 B y x z).
Proof. exact (MK_COMB (@lem8320812) (@lem8320811 B y x z)). Qed.
Lemma lem8320835 {B : Type'} (y : B) (x : B) (z : B) : (term2845 B y x z) = (term2845 B y x z).
Proof. exact (eq_refl (term2845 B y x z)). Qed.
Lemma lem8320836 {B : Type'} (y : B) (x : B) (z : B) : ((term2766 B x y z) = (term2845 B y x z)) = ((term2845 B y x z) = (term2845 B y x z)).
Proof. exact (MK_COMB (@lem8320813 B y x z) (@lem8320835 B y x z)). Qed.
Lemma lem8320838 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8320839 (x : Prop) : (x = x) = True.
Proof. exact (@lem8320838 Prop x). Qed.
Lemma lem8320840 {B : Type'} (y : B) (x : B) (z : B) : ((term2845 B y x z) = (term2845 B y x z)) = True.
Proof. exact (@lem8320839 (term2845 B y x z)). Qed.
Lemma lem8320841 {B : Type'} (y : B) (x : B) (z : B) : ((term2766 B x y z) = (term2845 B y x z)) = True.
Proof. exact (TRANS (@lem8320836 B y x z) (@lem8320840 B y x z)). Qed.
Lemma lem8320842 {B : Type'} (y : B) (x : B) (z : B) : True = ((term2766 B x y z) = (term2845 B y x z)).
Proof. exact (SYM (@lem8320841 B y x z)). Qed.
Lemma lem8320843 {B : Type'} (y : B) (x : B) (z : B) : (term2766 B x y z) = (term2845 B y x z).
Proof. exact (EQ_MP (@lem8320842 B y x z) (@lem0)). Qed.
Lemma lem8320844 {B : Type'} (y : B) (x : B) (z : B) : term2845 B y x z.
Proof. exact (EQ_MP (@lem8320843 B y x z) (@lem8319958 B x y z)). Qed.
Lemma lem8320846 (b : Prop) (a : Prop) : (a \/ b) = (term970 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8320847 {B : Type'} (x : B) (y : B) (z : B) : (term2845 B y x z) = (term2848 B x y z).
Proof. exact (@lem8320846 (term2849 B y x z) (y = z)). Qed.
Lemma lem8320849 (a : Prop) (b : Prop) : (term972 a b) = (term973 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8320850 {B : Type'} (y : B) (x : B) (z : B) : (term2850 B y x z) = (term2851 B y x z).
Proof. exact (@lem8320849 (term421 B x y) (term421 B x z)). Qed.
Lemma lem8320852 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8320853 {B : Type'} (x : B) (y : B) : (term1002 B x y) = (x = y).
Proof. exact (@lem8320852 (x = y)). Qed.
Lemma lem8320854 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8320855 {B : Type'} (x : B) (y : B) : (term1003 B x y) = (term1004 B x y).
Proof. exact (MK_COMB (@lem8320854) (@lem8320853 B x y)). Qed.
Lemma lem8320857 (a : Prop) : (term224 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8320858 {B : Type'} (x : B) (z : B) : (term1002 B x z) = (x = z).
Proof. exact (@lem8320857 (x = z)). Qed.
Lemma lem8320859 {B : Type'} (y : B) (x : B) (z : B) : (term2851 B y x z) = (term2852 B y x z).
Proof. exact (MK_COMB (@lem8320855 B x y) (@lem8320858 B x z)). Qed.
Lemma lem8320860 {B : Type'} (y : B) (x : B) (z : B) : (term2850 B y x z) = (term2852 B y x z).
Proof. exact (TRANS (@lem8320850 B y x z) (@lem8320859 B y x z)). Qed.
Lemma lem8320861 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8320862 {B : Type'} (y : B) (x : B) (z : B) : (term2853 B y x z) = (term2854 B y x z).
Proof. exact (MK_COMB (@lem8320861) (@lem8320860 B y x z)). Qed.
Lemma lem8320863 {B : Type'} (y : B) (z : B) : (y = z) = (y = z).
Proof. exact (eq_refl (y = z)). Qed.
Lemma lem8320864 {B : Type'} (x : B) (y : B) (z : B) : (term2848 B x y z) = (term2855 B x y z).
Proof. exact (MK_COMB (@lem8320862 B y x z) (@lem8320863 B y z)). Qed.
Lemma lem8320865 {B : Type'} (x : B) (y : B) (z : B) : (term2845 B y x z) = (term2855 B x y z).
Proof. exact (TRANS (@lem8320847 B x y z) (@lem8320864 B x y z)). Qed.
Lemma lem8320867 {A B D P Q : Type'} (t'' : type905 A B D P Q) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term1254 D P Q _111928) (h3 : term1731 A B D P Q t'' _111929) (h4 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : term2856 A B D P Q _111929 t'' f arg _111928 pat e a'.
Proof. exact (conj (@lem8320143 A B D P Q t'' t' p _111929 f arg _111928 pat e a' h3 h4) (@lem8320754 A B D P Q t'' t' p _111929 f arg _111928 pat e a' h1 h2 h3 h4)). Qed.
Lemma lem8320869 {B : Type'} (x : B) (y : B) (z : B) : term2855 B x y z.
Proof. exact (EQ_MP (@lem8320865 B x y z) (@lem8320844 B y x z)). Qed.
Lemma lem8320870 {B : Type'} (x : B) (y : B) (z : B) : term2855 B x y z.
Proof. exact (@lem8320869 B x y z). Qed.
Lemma lem8320871 {A B D P Q : Type'} (t'' : type905 A B D P Q) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : term2857 A B D P Q t'' _111929 f arg _111928 pat e a'.
Proof. exact (@lem8320870 B (term2473 A B D P Q t'' pat e f arg a') (term2374 A B D P Q _111929 pat e f arg a') (term2379 A B D P Q f arg _111928 pat e a')). Qed.
Lemma lem8320874 {A B D P Q : Type'} (t'' : type905 A B D P Q) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term1254 D P Q _111928) (h3 : term1731 A B D P Q t'' _111929) (h4 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : (term2374 A B D P Q _111929 pat e f arg a') = (term2379 A B D P Q f arg _111928 pat e a').
Proof. exact (@lem8320871 A B D P Q t'' _111929 f arg _111928 pat e a' (@lem8320867 A B D P Q t'' t' p _111929 f arg _111928 pat e a' h1 h2 h3 h4)). Qed.
Lemma lem8320875 {A B D P Q : Type'} (t'' : type905 A B D P Q) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term1254 D P Q _111928) (h3 : term1731 A B D P Q t'' _111929) (h4 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : term2858 A B D P Q _111929 f arg _111928 pat e a'.
Proof. exact (fun h0 : term2382 A B D P Q _111929 f arg _111928 pat e a' => @lem8320874 A B D P Q t'' t' p _111929 f arg _111928 pat e a' h1 h2 h3 h4). Qed.
Lemma lem8320877 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8320878 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2858 A B D P Q _111929 f arg _111928 pat e a') = ((term2374 A B D P Q _111929 pat e f arg a') = (term2379 A B D P Q f arg _111928 pat e a')).
Proof. exact (@lem8320877 ((term2374 A B D P Q _111929 pat e f arg a') = (term2379 A B D P Q f arg _111928 pat e a'))). Qed.
Lemma lem8320879 {A B D P Q : Type'} (t'' : type905 A B D P Q) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term1254 D P Q _111928) (h3 : term1731 A B D P Q t'' _111929) (h4 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : (term2374 A B D P Q _111929 pat e f arg a') = (term2379 A B D P Q f arg _111928 pat e a').
Proof. exact (EQ_MP (@lem8320878 A B D P Q _111929 f arg _111928 pat e a') (@lem8320875 A B D P Q t'' t' p _111929 f arg _111928 pat e a' h1 h2 h3 h4)). Qed.
Lemma lem8320882 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem8320884 {A B D P Q : Type'} (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) : (term2382 A B D P Q _111929 f arg _111928 pat e a') = (term2859 A B D P Q _111929 f arg _111928 pat e a').
Proof. exact (@lem8320882 ((term2374 A B D P Q _111929 pat e f arg a') = (term2379 A B D P Q f arg _111928 pat e a'))). Qed.
Lemma lem8320887 {A B D P Q : Type'} (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : term2859 A B D P Q _111929 f arg _111928 pat e a'.
Proof. exact (EQ_MP (@lem8320884 A B D P Q _111929 f arg _111928 pat e a') (@lem8316534 A B D P Q t' p _111929 f arg _111928 pat e a' h1)). Qed.
Lemma lem8320890 {A B D P Q : Type'} (t'' : type905 A B D P Q) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term1254 D P Q _111928) (h3 : term1731 A B D P Q t'' _111929) (h4 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : False.
Proof. exact (@lem8320887 A B D P Q t' p _111929 f arg _111928 pat e a' h4 (@lem8320879 A B D P Q t'' t' p _111929 f arg _111928 pat e a' h1 h2 h3 h4)). Qed.
Lemma lem8320891 {A B D P Q : Type'} (t'' : type905 A B D P Q) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term1254 D P Q _111928) (h3 : term1731 A B D P Q t'' _111929) (h4 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : term937.
Proof. exact (fun h0 : ~ False => @lem8320890 A B D P Q t'' t' p _111929 f arg _111928 pat e a' h1 h2 h3 h4). Qed.
Lemma lem8320893 (p : Prop) : (term935 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8320894 : term937 = False.
Proof. exact (@lem8320893 False). Qed.
Lemma lem8320895 {A B D P Q : Type'} (t'' : type905 A B D P Q) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term1254 D P Q _111928) (h3 : term1731 A B D P Q t'' _111929) (h4 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a') : False.
Proof. exact (EQ_MP (@lem8320894) (@lem8320891 A B D P Q t'' t' p _111929 f arg _111928 pat e a' h1 h2 h3 h4)). Qed.
Lemma lem8320896 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p f a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2389 A B D P Q f p g pat t' e a') : (term866 A B P p f a') = False.
Proof. exact (prop_ext (fun h5 : term866 A B P p f a' => @lem8319103 A B D P Q z lt2 s f p g pat t' e a' h1 h2 h3 h4) (fun h5 : False => @lem8316308 A B P p f a' h2)). Qed.
Lemma lem8320897 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p f a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2389 A B D P Q f p g pat t' e a') : False.
Proof. exact (EQ_MP (@lem8320896 A B D P Q z lt2 s f p g pat t' e a' h1 h2 h3 h4) (@lem8316308 A B P p f a' h2)). Qed.
Lemma lem8320898 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p g a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2391 A B D P Q f t' p g pat e a') : (term866 A B P p g a') = False.
Proof. exact (prop_ext (fun h5 : term866 A B P p g a' => @lem8318012 A B D P Q z lt2 s f t' p g pat e a' h1 h2 h3 h4) (fun h5 : False => @lem8316076 A B P p g a' h2)). Qed.
Lemma lem8320899 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p g a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2391 A B D P Q f t' p g pat e a') : False.
Proof. exact (EQ_MP (@lem8320898 A B D P Q z lt2 s f t' p g pat e a' h1 h2 h3 h4) (@lem8316076 A B P p g a' h2)). Qed.
Lemma lem8320900 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p f a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2389 A B D P Q f p g pat t' e a') : (term866 A B P p f a') = False.
Proof. exact (prop_ext (fun h5 : term866 A B P p f a' => @lem8320897 A B D P Q z lt2 s f p g pat t' e a' h1 h2 h3 h4) (fun h5 : False => @lem8314770 A B P p f a' h2)). Qed.
Lemma lem8320901 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p f a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2389 A B D P Q f p g pat t' e a') : False.
Proof. exact (EQ_MP (@lem8320900 A B D P Q z lt2 s f p g pat t' e a' h1 h2 h3 h4) (@lem8314770 A B P p f a' h2)). Qed.
Lemma lem8320902 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p g a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2391 A B D P Q f t' p g pat e a') : (term866 A B P p g a') = False.
Proof. exact (prop_ext (fun h5 : term866 A B P p g a' => @lem8320899 A B D P Q z lt2 s f t' p g pat e a' h1 h2 h3 h4) (fun h5 : False => @lem8314077 A B P p g a' h2)). Qed.
Lemma lem8320903 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p g a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2391 A B D P Q f t' p g pat e a') : False.
Proof. exact (EQ_MP (@lem8320902 A B D P Q z lt2 s f t' p g pat e a' h1 h2 h3 h4) (@lem8314077 A B P p g a' h2)). Qed.
Lemma lem8320904 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') (h2 : term2389 A B D P Q f p g pat t' e a') : (term2321 D P Q pat e a') = False.
Proof. exact (prop_ext (fun h3 : term2321 D P Q pat e a' => @lem8319554 A B D P Q f p g pat t' e a' h1 h2) (fun h3 : False => @lem8315118 D P Q pat e a' h1)). Qed.
Lemma lem8320905 {A B D P Q : Type'} (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') (h2 : term2389 A B D P Q f p g pat t' e a') : False.
Proof. exact (EQ_MP (@lem8320904 A B D P Q f p g pat t' e a' h1 h2) (@lem8315118 D P Q pat e a' h1)). Qed.
Lemma lem8320906 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p f a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2389 A B D P Q f p g pat t' e a') : (term866 A B P p f a') = False.
Proof. exact (prop_ext (fun h5 : term866 A B P p f a' => @lem8320901 A B D P Q z lt2 s f p g pat t' e a' h1 h2 h3 h4) (fun h5 : False => @lem8314770 A B P p f a' h2)). Qed.
Lemma lem8320907 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p f a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2389 A B D P Q f p g pat t' e a') : False.
Proof. exact (EQ_MP (@lem8320906 A B D P Q z lt2 s f p g pat t' e a' h1 h2 h3 h4) (@lem8314770 A B P p f a' h2)). Qed.
Lemma lem8320908 {A B D P Q : Type'} (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') (h2 : term2391 A B D P Q f t' p g pat e a') : (term2321 D P Q pat e a') = False.
Proof. exact (prop_ext (fun h3 : term2321 D P Q pat e a' => @lem8318463 A B D P Q f t' p g pat e a' h1 h2) (fun h3 : False => @lem8314425 D P Q pat e a' h1)). Qed.
Lemma lem8320909 {A B D P Q : Type'} (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term2321 D P Q pat e a') (h2 : term2391 A B D P Q f t' p g pat e a') : False.
Proof. exact (EQ_MP (@lem8320908 A B D P Q f t' p g pat e a' h1 h2) (@lem8314425 D P Q pat e a' h1)). Qed.
Lemma lem8320910 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p g a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2391 A B D P Q f t' p g pat e a') : (term866 A B P p g a') = False.
Proof. exact (prop_ext (fun h5 : term866 A B P p g a' => @lem8320903 A B D P Q z lt2 s f t' p g pat e a' h1 h2 h3 h4) (fun h5 : False => @lem8314077 A B P p g a' h2)). Qed.
Lemma lem8320911 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term866 A B P p g a') (h3 : term2403 A B D P Q lt2 s f p g pat t' e a') (h4 : term2391 A B D P Q f t' p g pat e a') : False.
Proof. exact (EQ_MP (@lem8320910 A B D P Q z lt2 s f t' p g pat e a' h1 h2 h3 h4) (@lem8314077 A B P p g a' h2)). Qed.
Lemma lem8320912 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term2403 A B D P Q lt2 s f p g pat t' e a') (h3 : term2389 A B D P Q f p g pat t' e a') : False.
Proof. exact (or_elim (@lem8313388 A B D P Q f p g pat t' e a' h3) (fun h0 : term866 A B P p f a' => @lem8320907 A B D P Q z lt2 s f p g pat t' e a' h1 h0 h2 h3) (fun h0 : term2321 D P Q pat e a' => @lem8320905 A B D P Q f p g pat t' e a' h0 h3)). Qed.
Lemma lem8320913 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (t' : Q) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term2403 A B D P Q lt2 s f p g pat t' e a') (h3 : term2391 A B D P Q f t' p g pat e a') : False.
Proof. exact (or_elim (@lem8313381 A B D P Q f t' p g pat e a' h3) (fun h0 : term866 A B P p g a' => @lem8320911 A B D P Q z lt2 s f t' p g pat e a' h1 h0 h2 h3) (fun h0 : term2321 D P Q pat e a' => @lem8320909 A B D P Q f t' p g pat e a' h0 h3)). Qed.
Lemma lem8320914 {A B D P Q : Type'} (z : type518 A B P) (lt2 : type1402 A) (s : P -> A) (f : A -> B) (p : type560 A B P) (g : A -> B) (pat : Q -> D) (t' : Q) (e : P -> D) (a' : P) (h1 : term1889 A B P lt2 s z p) (h2 : term2403 A B D P Q lt2 s f p g pat t' e a') : False.
Proof. exact (or_elim (@lem8313377 A B D P Q lt2 s f p g pat t' e a' h2) (fun h0 : term2391 A B D P Q f t' p g pat e a' => @lem8320913 A B D P Q z lt2 s f t' p g pat e a' h1 h2 h0) (fun h0 : term2389 A B D P Q f p g pat t' e a' => @lem8320912 A B D P Q z lt2 s f p g pat t' e a' h1 h2 h0)). Qed.
Lemma lem8320915 {A B D P Q : Type'} (z : type518 A B P) (t'' : type905 A B D P Q) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term1889 A B P lt2 s z p) (h3 : term1254 D P Q _111928) (h4 : term1731 A B D P Q t'' _111929) (h5 : term2405 A B D P Q lt2 s g t' p _111929 f arg _111928 pat e a') : False.
Proof. exact (or_elim (@lem8313368 A B D P Q lt2 s g t' p _111929 f arg _111928 pat e a' h5) (fun h0 : term2403 A B D P Q lt2 s f p g pat t' e a' => @lem8320914 A B D P Q z lt2 s f p g pat t' e a' h2 h0) (fun h0 : term2385 A B D P Q t' p _111929 f arg _111928 pat e a' => @lem8320895 A B D P Q t'' t' p _111929 f arg _111928 pat e a' h1 h3 h4 h0)). Qed.
Lemma lem8320916 {A B D P Q : Type'} (z : type518 A B P) (t'' : type905 A B D P Q) (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term1889 A B P lt2 s z p) (h4 : term1254 D P Q _111928) (h5 : term1731 A B D P Q t'' _111929) (h6 : term2295 A B D P Q t y a lt2 s g t' p _111929 f arg _111928 pat e a') : False.
Proof. exact (or_elim (@lem8312891 A B D P Q t y a lt2 s g t' p _111929 f arg _111928 pat e a' h6) (fun h0 : term2411 A B D P Q p f t arg _111928 pat e lt2 y s a => @lem8317345 A B D P Q p f t arg _111928 pat e lt2 y s a h2 h4 h0) (fun h0 : term2405 A B D P Q lt2 s g t' p _111929 f arg _111928 pat e a' => @lem8320915 A B D P Q z t'' lt2 s g t' p _111929 f arg _111928 pat e a' h1 h3 h4 h5 h0)). Qed.
Lemma lem8320917 {A B D P Q : Type'} (z : type518 A B P) (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term1889 A B P lt2 s z p) (h4 : term1254 D P Q _111928) (h5 : term1365 A B D P Q _111929) (h6 : term2295 A B D P Q t y a lt2 s g t' p _111929 f arg _111928 pat e a') : False.
Proof. exact (ex_elim (@lem8310357 A B D P Q _111929 h5) (fun t'' : type905 A B D P Q => fun h0 : term1733 A B D P Q _111929 t'' => @lem8320916 A B D P Q z t'' t y a lt2 s g t' p _111929 f arg _111928 pat e a' h1 h2 h3 h4 h0 h6)). Qed.
Lemma lem8320918 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (t' : Q) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term1050 A B P lt2 s p) (h4 : term1254 D P Q _111928) (h5 : term1365 A B D P Q _111929) (h6 : term2295 A B D P Q t y a lt2 s g t' p _111929 f arg _111928 pat e a') : False.
Proof. exact (ex_elim (@lem8311021 A B P lt2 s p h3) (fun z : type518 A B P => fun h0 : term1891 A B P lt2 s p z => @lem8320917 A B D P Q z t y a lt2 s g t' p _111929 f arg _111928 pat e a' h1 h2 h0 h4 h5 h6)). Qed.
Lemma lem8320919 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (a' : P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term1050 A B P lt2 s p) (h4 : term1254 D P Q _111928) (h5 : term1365 A B D P Q _111929) (h6 : term2298 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a') : False.
Proof. exact (ex_elim (@lem8312057 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a' h6) (fun t' : Q => fun h0 : term2297 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a' t' => @lem8320918 A B D P Q t y a lt2 s g t' p _111929 f arg _111928 pat e a' h1 h2 h3 h4 h5 h0)). Qed.
Lemma lem8320920 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (g : A -> B) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term1050 A B P lt2 s p) (h4 : term1254 D P Q _111928) (h5 : term1365 A B D P Q _111929) (h6 : term2300 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e) : False.
Proof. exact (ex_elim (@lem8312056 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e h6) (fun a' : P => fun h0 : term2299 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a' => @lem8320919 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e a' h1 h2 h3 h4 h5 h0)). Qed.
Lemma lem8320921 {A B D P Q : Type'} (t : Q) (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term1050 A B P lt2 s p) (h4 : term1254 D P Q _111928) (h5 : term1365 A B D P Q _111929) (h6 : term2302 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e) : False.
Proof. exact (ex_elim (@lem8312055 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e h6) (fun g : A -> B => fun h0 : term2301 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e g => @lem8320920 A B D P Q t y a lt2 s g p _111929 f arg _111928 pat e h1 h2 h3 h4 h5 h0)). Qed.
Lemma lem8320922 {A B D P Q : Type'} (y : A) (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term1050 A B P lt2 s p) (h4 : term1254 D P Q _111928) (h5 : term1365 A B D P Q _111929) (h6 : term2304 A B D P Q y a lt2 s p _111929 f arg _111928 pat e) : False.
Proof. exact (ex_elim (@lem8312054 A B D P Q y a lt2 s p _111929 f arg _111928 pat e h6) (fun t : Q => fun h0 : term2303 A B D P Q y a lt2 s p _111929 f arg _111928 pat e t => @lem8320921 A B D P Q t y a lt2 s p _111929 f arg _111928 pat e h1 h2 h3 h4 h5 h0)). Qed.
Lemma lem8320923 {A B D P Q : Type'} (a : P) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term1050 A B P lt2 s p) (h4 : term1254 D P Q _111928) (h5 : term1365 A B D P Q _111929) (h6 : term2306 A B D P Q a lt2 s p _111929 f arg _111928 pat e) : False.
Proof. exact (ex_elim (@lem8312053 A B D P Q a lt2 s p _111929 f arg _111928 pat e h6) (fun y : A => fun h0 : term2305 A B D P Q a lt2 s p _111929 f arg _111928 pat e y => @lem8320922 A B D P Q y a lt2 s p _111929 f arg _111928 pat e h1 h2 h3 h4 h5 h0)). Qed.
Lemma lem8320924 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (f : A -> B) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term1050 A B P lt2 s p) (h4 : term1254 D P Q _111928) (h5 : term1365 A B D P Q _111929) (h6 : term2308 A B D P Q lt2 s p _111929 f arg _111928 pat e) : False.
Proof. exact (ex_elim (@lem8312052 A B D P Q lt2 s p _111929 f arg _111928 pat e h6) (fun a : P => fun h0 : term2307 A B D P Q lt2 s p _111929 f arg _111928 pat e a => @lem8320923 A B D P Q a lt2 s p _111929 f arg _111928 pat e h1 h2 h3 h4 h5 h0)). Qed.
Lemma lem8320925 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term1050 A B P lt2 s p) (h4 : term1254 D P Q _111928) (h5 : term1365 A B D P Q _111929) (h6 : term1558 A B D P Q lt2 s p _111929 arg _111928 pat e) : False.
Proof. exact (ex_elim (@lem8312051 A B D P Q lt2 s p _111929 arg _111928 pat e h6) (fun f : A -> B => fun h0 : term2309 A B D P Q lt2 s p _111929 arg _111928 pat e f => @lem8320924 A B D P Q lt2 s p _111929 f arg _111928 pat e h1 h2 h3 h4 h5 h0)). Qed.
Lemma lem8320926 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term1050 A B P lt2 s p) (h4 : term1254 D P Q _111928) (h5 : term1365 A B D P Q _111929) (h6 : term1558 A B D P Q lt2 s p _111929 arg _111928 pat e) : (term1558 A B D P Q lt2 s p _111929 arg _111928 pat e) = False.
Proof. exact (prop_ext (fun h7 : term1558 A B D P Q lt2 s p _111929 arg _111928 pat e => @lem8320925 A B D P Q lt2 s p _111929 arg _111928 pat e h1 h2 h3 h4 h5 h6) (fun h7 : False => @lem8309873 A B D P Q lt2 s p _111929 arg _111928 pat e h6)). Qed.
Lemma lem8320927 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term1050 A B P lt2 s p) (h4 : term1254 D P Q _111928) (h5 : term1365 A B D P Q _111929) (h6 : term1558 A B D P Q lt2 s p _111929 arg _111928 pat e) : False.
Proof. exact (EQ_MP (@lem8320926 A B D P Q lt2 s p _111929 arg _111928 pat e h1 h2 h3 h4 h5 h6) (@lem8309873 A B D P Q lt2 s p _111929 arg _111928 pat e h6)). Qed.
Lemma lem8320928 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111928 : type886 D P Q) (_111929 : type904 A B D P Q) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term1050 A B P lt2 s p) (h4 : term1254 D P Q _111928) (h5 : term1365 A B D P Q _111929) : term1557 A B D P Q lt2 s p _111929 arg _111928 pat e.
Proof. exact (fun h0 : term1558 A B D P Q lt2 s p _111929 arg _111928 pat e => @lem8320927 A B D P Q lt2 s p _111929 arg _111928 pat e h1 h2 h3 h4 h5 h0). Qed.
Lemma lem8320929 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111928 : type886 D P Q) (_111929 : type904 A B D P Q) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term1050 A B P lt2 s p) (h4 : term1254 D P Q _111928) (h5 : term1365 A B D P Q _111929) : term1521 A B D P Q lt2 s p _111929 arg _111928 pat e.
Proof. exact (EQ_MP (@lem8309872 A B D P Q lt2 s p _111929 arg _111928 pat e) (@lem8320928 A B D P Q pat e arg lt2 s p _111928 _111929 h1 h2 h3 h4 h5)). Qed.
Lemma lem8320930 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (_111928 : type886 D P Q) (_111929 : type904 A B D P Q) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term1254 D P Q _111928) (h4 : term1365 A B D P Q _111929) : term1522 A B D P Q lt2 s p _111929 arg _111928 pat e.
Proof. exact (fun h0 : term1050 A B P lt2 s p => @lem8320929 A B D P Q pat e arg lt2 s p _111928 _111929 h1 h2 h0 h3 h4). Qed.
Lemma lem8320931 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (_111928 : type886 D P Q) (_111929 : type904 A B D P Q) (h1 : term36 A B D P Q p pat e arg) (h2 : term1254 D P Q _111928) (h3 : term1365 A B D P Q _111929) : term1523 A B D P Q lt2 s p _111929 arg _111928 pat e.
Proof. exact (fun h0 : term35 A B D P Q p pat e arg lt2 s => @lem8320930 A B D P Q p pat e arg lt2 s _111928 _111929 h1 h0 h2 h3). Qed.
Lemma lem8320932 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111928 : type886 D P Q) (_111929 : type904 A B D P Q) (h1 : term1254 D P Q _111928) (h2 : term1365 A B D P Q _111929) : term1524 A B D P Q lt2 s p _111929 arg _111928 pat e.
Proof. exact (fun h0 : term36 A B D P Q p pat e arg => @lem8320931 A B D P Q lt2 s p pat e arg _111928 _111929 h0 h1 h2). Qed.
Lemma lem8320933 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (_111928 : type886 D P Q) (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : term1365 A B D P Q _111929) : term1525 A B D P Q lt2 s p _111929 arg _111928 pat e.
Proof. exact (fun h0 : term1254 D P Q _111928 => @lem8320932 A B D P Q lt2 s p arg pat e _111928 _111929 h0 h1). Qed.
Lemma lem8320938 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (_111929 : type904 A B D P Q) (h1 : term1365 A B D P Q _111929) : term1527 A B D P Q lt2 s p _111929 arg pat e.
Proof. exact (fun _111928 : type886 D P Q => @lem8320933 A B D P Q lt2 s p arg _111928 pat e _111929 h1). Qed.
Lemma lem8320939 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (_111929 : type904 A B D P Q) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1528 A B D P Q lt2 s p _111929 arg pat e.
Proof. exact (fun h0 : term1365 A B D P Q _111929 => @lem8320938 A B D P Q lt2 s p arg pat e _111929 h0). Qed.
Lemma lem8320944 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1530 A B D P Q lt2 s p arg pat e.
Proof. exact (fun _111929 : type904 A B D P Q => @lem8320939 A B D P Q lt2 s p _111929 arg pat e). Qed.
Lemma lem8320949 {A B D P Q : Type'} (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1546 A B D P Q s p arg pat e.
Proof. exact (fun lt2 : type1402 A => @lem8320944 A B D P Q lt2 s p arg pat e). Qed.
Lemma lem8320954 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1548 A B D P Q p arg pat e.
Proof. exact (fun s : P -> A => @lem8320949 A B D P Q s p arg pat e). Qed.
Lemma lem8320959 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1550 A B D P Q arg pat e.
Proof. exact (fun p : type560 A B P => @lem8320954 A B D P Q p arg pat e). Qed.
Lemma lem8320964 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) : term1552 A B D P Q pat e.
Proof. exact (fun arg : type1475 A P Q => @lem8320959 A B D P Q arg pat e). Qed.
Lemma lem8320969 {A B D P Q : Type'} (e : P -> D) : term1554 A B D P Q e.
Proof. exact (fun pat : Q -> D => @lem8320964 A B D P Q pat e). Qed.
Lemma lem8320974 {A B D P Q : Type'} : term1556 A B D P Q.
Proof. exact (fun e : P -> D => @lem8320969 A B D P Q e). Qed.
Lemma lem8320975 {A B D P Q : Type'} : term1490 A B D P Q.
Proof. exact (EQ_MP (@lem8309863 A B D P Q) (@lem8320974 A B D P Q)). Qed.
Lemma lem8320976 {A B D P Q : Type'} (e : P -> D) : term2860 A B D P Q e.
Proof. exact (@lem8320975 A B D P Q e). Qed.
Lemma lem8320977 {A B D P Q : Type'} (e : P -> D) : (term2860 A B D P Q e) = (term1486 A B D P Q e).
Proof. exact (eq_refl (term2860 A B D P Q e)). Qed.
Lemma lem8320978 {A B D P Q : Type'} (e : P -> D) : term1486 A B D P Q e.
Proof. exact (EQ_MP (@lem8320977 A B D P Q e) (@lem8320976 A B D P Q e)). Qed.
Lemma lem8320979 {A B D P Q : Type'} (e : P -> D) (pat : Q -> D) : term2861 A B D P Q e pat.
Proof. exact (@lem8320978 A B D P Q e pat). Qed.
Lemma lem8320980 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) : (term2861 A B D P Q e pat) = (term1482 A B D P Q pat e).
Proof. exact (eq_refl (term2861 A B D P Q e pat)). Qed.
Lemma lem8320981 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) : term1482 A B D P Q pat e.
Proof. exact (EQ_MP (@lem8320980 A B D P Q pat e) (@lem8320979 A B D P Q e pat)). Qed.
Lemma lem8320982 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) : term2862 A B D P Q pat e arg.
Proof. exact (@lem8320981 A B D P Q pat e arg). Qed.
Lemma lem8320983 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term2862 A B D P Q pat e arg) = (term1478 A B D P Q arg pat e).
Proof. exact (eq_refl (term2862 A B D P Q pat e arg)). Qed.
Lemma lem8320984 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1478 A B D P Q arg pat e.
Proof. exact (EQ_MP (@lem8320983 A B D P Q arg pat e) (@lem8320982 A B D P Q pat e arg)). Qed.
Lemma lem8320985 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (p : type560 A B P) : term2863 A B D P Q arg pat e p.
Proof. exact (@lem8320984 A B D P Q arg pat e p). Qed.
Lemma lem8320986 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term2863 A B D P Q arg pat e p) = (term1474 A B D P Q p arg pat e).
Proof. exact (eq_refl (term2863 A B D P Q arg pat e p)). Qed.
Lemma lem8320987 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1474 A B D P Q p arg pat e.
Proof. exact (EQ_MP (@lem8320986 A B D P Q p arg pat e) (@lem8320985 A B D P Q arg pat e p)). Qed.
Lemma lem8320988 {A B D P Q : Type'} (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (s : P -> A) : term2864 A B D P Q p arg pat e s.
Proof. exact (@lem8320987 A B D P Q p arg pat e s). Qed.
Lemma lem8320989 {A B D P Q : Type'} (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term2864 A B D P Q p arg pat e s) = (term1470 A B D P Q s p arg pat e).
Proof. exact (eq_refl (term2864 A B D P Q p arg pat e s)). Qed.
Lemma lem8320990 {A B D P Q : Type'} (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1470 A B D P Q s p arg pat e.
Proof. exact (EQ_MP (@lem8320989 A B D P Q s p arg pat e) (@lem8320988 A B D P Q p arg pat e s)). Qed.
Lemma lem8320991 {A B D P Q : Type'} (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) : term2865 A B D P Q s p arg pat e lt2.
Proof. exact (@lem8320990 A B D P Q s p arg pat e lt2). Qed.
Lemma lem8320992 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : (term2865 A B D P Q s p arg pat e lt2) = (term1434 A B D P Q lt2 s p arg pat e).
Proof. exact (eq_refl (term2865 A B D P Q s p arg pat e lt2)). Qed.
Lemma lem8320993 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1434 A B D P Q lt2 s p arg pat e.
Proof. exact (EQ_MP (@lem8320992 A B D P Q lt2 s p arg pat e) (@lem8320991 A B D P Q s p arg pat e lt2)). Qed.
Lemma lem8320995 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) : term1222 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8308359 A B D P Q lt2 s p arg pat e (@lem8320993 A B D P Q lt2 s p arg pat e)). Qed.
Lemma lem8320996 {A B D P Q : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (h1 : term36 A B D P Q p pat e arg) : term1289 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8320995 A B D P Q lt2 s p arg pat e (@lem8302835 A B D P Q p pat e arg h1)). Qed.
Lemma lem8320997 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) : term1287 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8320996 A B D P Q lt2 s p pat e arg h1 (@lem8302861 A B D P Q p pat e arg lt2 s h2)). Qed.
Lemma lem8320998 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term40 A B P lt2 s p) : term1205 A B D P Q lt2 s p arg pat e.
Proof. exact (@lem8320997 A B D P Q p pat e arg lt2 s h1 h2 (@lem8303011 A B P lt2 s p h3)). Qed.
Lemma lem8320999 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term1206 A B D P Q lt2 s p arg pat e) (h4 : term40 A B P lt2 s p) : False.
Proof. exact (@lem8320998 A B D P Q pat e arg lt2 s p h1 h2 h4 (@lem8307880 A B D P Q lt2 s p arg pat e h3)). Qed.
Lemma lem8321000 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term1206 A B D P Q lt2 s p arg pat e) (h4 : term40 A B P lt2 s p) : (term1206 A B D P Q lt2 s p arg pat e) = False.
Proof. exact (prop_ext (fun h5 : term1206 A B D P Q lt2 s p arg pat e => @lem8320999 A B D P Q arg pat e lt2 s p h1 h2 h3 h4) (fun h5 : False => @lem8307880 A B D P Q lt2 s p arg pat e h3)). Qed.
Lemma lem8321001 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term1206 A B D P Q lt2 s p arg pat e) (h4 : term40 A B P lt2 s p) : False.
Proof. exact (EQ_MP (@lem8321000 A B D P Q arg pat e lt2 s p h1 h2 h3 h4) (@lem8307880 A B D P Q lt2 s p arg pat e h3)). Qed.
Lemma lem8321002 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term40 A B P lt2 s p) : term1205 A B D P Q lt2 s p arg pat e.
Proof. exact (fun h0 : term1206 A B D P Q lt2 s p arg pat e => @lem8321001 A B D P Q arg pat e lt2 s p h1 h2 h0 h3). Qed.
Lemma lem8321003 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term40 A B P lt2 s p) : term1204 A B D P Q lt2 s p arg pat e.
Proof. exact (EQ_MP (@lem8307879 A B D P Q lt2 s p arg pat e) (@lem8321002 A B D P Q pat e arg lt2 s p h1 h2 h3)). Qed.
Lemma lem8321004 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term40 A B P lt2 s p) : term1203 A B D P Q lt2 s p arg pat e.
Proof. exact (EQ_MP (@lem8307875 A B D P Q lt2 s p arg pat e) (@lem8321003 A B D P Q pat e arg lt2 s p h1 h2 h3)). Qed.
Lemma lem8321005 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term40 A B P lt2 s p) : (term35 A B D P Q p pat e arg lt2 s) = (term1203 A B D P Q lt2 s p arg pat e).
Proof. exact (prop_ext (fun h4 : term35 A B D P Q p pat e arg lt2 s => @lem8321004 A B D P Q pat e arg lt2 s p h1 h2 h3) (fun h4 : term1203 A B D P Q lt2 s p arg pat e => @lem8302861 A B D P Q p pat e arg lt2 s h2)). Qed.
Lemma lem8321006 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term40 A B P lt2 s p) : term1203 A B D P Q lt2 s p arg pat e.
Proof. exact (EQ_MP (@lem8321005 A B D P Q pat e arg lt2 s p h1 h2 h3) (@lem8302861 A B D P Q p pat e arg lt2 s h2)). Qed.
Lemma lem8321007 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term40 A B P lt2 s p) : (term36 A B D P Q p pat e arg) = (term1203 A B D P Q lt2 s p arg pat e).
Proof. exact (prop_ext (fun h4 : term36 A B D P Q p pat e arg => @lem8321006 A B D P Q pat e arg lt2 s p h1 h2 h3) (fun h4 : term1203 A B D P Q lt2 s p arg pat e => @lem8302835 A B D P Q p pat e arg h1)). Qed.
Lemma lem8321008 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term40 A B P lt2 s p) : term1203 A B D P Q lt2 s p arg pat e.
Proof. exact (EQ_MP (@lem8321007 A B D P Q pat e arg lt2 s p h1 h2 h3) (@lem8302835 A B D P Q p pat e arg h1)). Qed.
Lemma lem8321009 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term40 A B P lt2 s p) : term2866 A B D P Q lt2 s p arg pat e.
Proof. exact (ex_intro (term2867 A B D P Q lt2 s p arg pat e) (term1129 A B P) (@lem8321008 A B D P Q pat e arg lt2 s p h1 h2 h3)). Qed.
Lemma lem8321010 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term40 A B P lt2 s p) : term2868 A B D P Q lt2 s arg p pat e.
Proof. exact (ex_intro (term2869 A B D P Q lt2 s arg p pat e) (term1077 A B D P Q arg pat e) (@lem8321009 A B D P Q pat e arg lt2 s p h1 h2 h3)). Qed.
Lemma lem8321011 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term40 A B P lt2 s p) : term215 A B D P Q lt2 s p pat e arg.
Proof. exact (ex_intro (term214 A B D P Q lt2 s p pat e arg) (term1060 A B D P Q p pat e) (@lem8321010 A B D P Q pat e arg lt2 s p h1 h2 h3)). Qed.
Lemma lem8321012 {A B D P Q : Type'} (arg : type1475 A P Q) (pat : Q -> D) (e : P -> D) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term164 A B D P Q p arg pat e) (h4 : term40 A B P lt2 s p) : term163 A B D P Q lt2 s p pat e arg.
Proof. exact (EQ_MP (@lem8297220 A B D P Q lt2 s p arg pat e h3) (@lem8321011 A B D P Q pat e arg lt2 s p h1 h2 h4)). Qed.
Lemma lem8321013 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term40 A B P lt2 s p) : (term164 A B D P Q p arg pat e) = (term163 A B D P Q lt2 s p pat e arg).
Proof. exact (prop_ext (fun h4 : term164 A B D P Q p arg pat e => @lem8321012 A B D P Q arg pat e lt2 s p h1 h2 h4 h3) (fun h4 : term163 A B D P Q lt2 s p pat e arg => @lem8302805 A B D P Q pat e arg lt2 s p h1 h2 h3)). Qed.
Lemma lem8321014 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term40 A B P lt2 s p) : term163 A B D P Q lt2 s p pat e arg.
Proof. exact (EQ_MP (@lem8321013 A B D P Q pat e arg lt2 s p h1 h2 h3) (@lem8302805 A B D P Q pat e arg lt2 s p h1 h2 h3)). Qed.
Lemma lem8321015 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term40 A B P lt2 s p) : term118 A B D P Q lt2 p s pat e arg.
Proof. exact (EQ_MP (@lem8292300 A B D P Q lt2 p s pat e arg) (@lem8321014 A B D P Q pat e arg lt2 s p h1 h2 h3)). Qed.
Lemma lem8321016 {A B D P Q : Type'} (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) (h3 : term40 A B P lt2 s p) : term117 A B D P Q lt2 p s e pat arg.
Proof. exact (EQ_MP (@lem8292096 A B D P Q lt2 p s e pat arg) (@lem8321015 A B D P Q pat e arg lt2 s p h1 h2 h3)). Qed.
Lemma lem8321017 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) : term38 A B D P Q lt2 p s e pat arg.
Proof. exact (fun h0 : term40 A B P lt2 s p => @lem8321016 A B D P Q pat e arg lt2 s p h1 h2 h0). Qed.
Lemma lem8321018 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) : term37 A B D P Q lt2 p s e pat arg.
Proof. exact (EQ_MP (@lem8291825 A B D P Q lt2 p s e pat arg) (@lem8321017 A B D P Q p pat e arg lt2 s h1 h2)). Qed.
Lemma lem8321019 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term34 A B D P Q p pat e arg lt2 s) : term35 A B D P Q p pat e arg lt2 s.
Proof. exact (proj2 (@lem8291706 A B D P Q p pat e arg lt2 s h1)). Qed.
Lemma lem8321020 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term34 A B D P Q p pat e arg lt2 s) : term36 A B D P Q p pat e arg.
Proof. exact (proj1 (@lem8291706 A B D P Q p pat e arg lt2 s h1)). Qed.
Lemma lem8321021 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) : (term35 A B D P Q p pat e arg lt2 s) = (term37 A B D P Q lt2 p s e pat arg).
Proof. exact (prop_ext (fun h3 : term35 A B D P Q p pat e arg lt2 s => @lem8321018 A B D P Q p pat e arg lt2 s h1 h2) (fun h3 : term37 A B D P Q lt2 p s e pat arg => @lem8291707 A B D P Q p pat e arg lt2 s h2)). Qed.
Lemma lem8321022 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) : term37 A B D P Q lt2 p s e pat arg.
Proof. exact (EQ_MP (@lem8321021 A B D P Q p pat e arg lt2 s h1 h2) (@lem8291707 A B D P Q p pat e arg lt2 s h2)). Qed.
Lemma lem8321023 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) : (term36 A B D P Q p pat e arg) = (term37 A B D P Q lt2 p s e pat arg).
Proof. exact (prop_ext (fun h3 : term36 A B D P Q p pat e arg => @lem8321022 A B D P Q p pat e arg lt2 s h1 h2) (fun h3 : term37 A B D P Q lt2 p s e pat arg => @lem8291708 A B D P Q p pat e arg h1)). Qed.
Lemma lem8321024 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term36 A B D P Q p pat e arg) (h2 : term35 A B D P Q p pat e arg lt2 s) : term37 A B D P Q lt2 p s e pat arg.
Proof. exact (EQ_MP (@lem8321023 A B D P Q p pat e arg lt2 s h1 h2) (@lem8291708 A B D P Q p pat e arg h1)). Qed.
Lemma lem8321025 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term36 A B D P Q p pat e arg) (h2 : term34 A B D P Q p pat e arg lt2 s) : (term35 A B D P Q p pat e arg lt2 s) = (term37 A B D P Q lt2 p s e pat arg).
Proof. exact (prop_ext (fun h3 : term35 A B D P Q p pat e arg lt2 s => @lem8321024 A B D P Q p pat e arg lt2 s h1 h3) (fun h3 : term37 A B D P Q lt2 p s e pat arg => @lem8321019 A B D P Q p pat e arg lt2 s h2)). Qed.
Lemma lem8321026 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term36 A B D P Q p pat e arg) (h2 : term34 A B D P Q p pat e arg lt2 s) : term37 A B D P Q lt2 p s e pat arg.
Proof. exact (EQ_MP (@lem8321025 A B D P Q p pat e arg lt2 s h1 h2) (@lem8321019 A B D P Q p pat e arg lt2 s h2)). Qed.
Lemma lem8321027 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term34 A B D P Q p pat e arg lt2 s) : (term36 A B D P Q p pat e arg) = (term37 A B D P Q lt2 p s e pat arg).
Proof. exact (prop_ext (fun h2 : term36 A B D P Q p pat e arg => @lem8321026 A B D P Q p pat e arg lt2 s h2 h1) (fun h2 : term37 A B D P Q lt2 p s e pat arg => @lem8321020 A B D P Q p pat e arg lt2 s h1)). Qed.
Lemma lem8321028 {A B D P Q : Type'} (p : type560 A B P) (pat : Q -> D) (e : P -> D) (arg : type1475 A P Q) (lt2 : type1402 A) (s : P -> A) (h1 : term34 A B D P Q p pat e arg lt2 s) : term37 A B D P Q lt2 p s e pat arg.
Proof. exact (EQ_MP (@lem8321027 A B D P Q p pat e arg lt2 s h1) (@lem8321020 A B D P Q p pat e arg lt2 s h1)). Qed.
Lemma lem8321029 {A B D P Q : Type'} (lt2 : type1402 A) (p : type560 A B P) (s : P -> A) (e : P -> D) (pat : Q -> D) (arg : type1475 A P Q) : term2870 A B D P Q lt2 p s e pat arg.
Proof. exact (fun h0 : term34 A B D P Q p pat e arg lt2 s => @lem8321028 A B D P Q p pat e arg lt2 s h0). Qed.
Lemma lem8321034 {A B D P Q : Type'} (lt2 : type1402 A) (p : type560 A B P) (s : P -> A) (e : P -> D) (pat : Q -> D) : term2871 A B D P Q lt2 p s e pat.
Proof. exact (fun arg : type1475 A P Q => @lem8321029 A B D P Q lt2 p s e pat arg). Qed.
Lemma lem8321039 {A B D P Q : Type'} (lt2 : type1402 A) (p : type560 A B P) (s : P -> A) (e : P -> D) : term2872 A B D P Q lt2 p s e.
Proof. exact (fun pat : Q -> D => @lem8321034 A B D P Q lt2 p s e pat). Qed.
Lemma lem8321044 {A B D P Q : Type'} (lt2 : type1402 A) (p : type560 A B P) (s : P -> A) : term2873 A B D P Q lt2 p s.
Proof. exact (fun e : P -> D => @lem8321039 A B D P Q lt2 p s e). Qed.
Lemma lem8321049 {A B D P Q : Type'} (lt2 : type1402 A) (p : type560 A B P) : term2874 A B D P Q lt2 p.
Proof. exact (fun s : P -> A => @lem8321044 A B D P Q lt2 p s). Qed.
Lemma lem8321054 {A B D P Q : Type'} (lt2 : type1402 A) : term2875 A B D P Q lt2.
Proof. exact (fun p : type560 A B P => @lem8321049 A B D P Q lt2 p). Qed.
Lemma lem8321059 {A B D P Q : Type'} : term2876 A B D P Q.
Proof. exact (fun lt2 : type1402 A => @lem8321054 A B D P Q lt2). Qed.
