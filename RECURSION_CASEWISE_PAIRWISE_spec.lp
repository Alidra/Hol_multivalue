require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_terms;
symbol lem8440648 [_146879 _146895 _146899] : Prf (∀ (λ clauses : El (list (prod (fun _146899 _146879) (fun (fun _146879 _146895) (fun _146899 _146895)))), (⇒ (∧ (∃ (λ << : El (fun _146879 (fun _146879 bool)), (∧ ((@WF _146879) <<) ((@ALL (prod (fun _146899 _146879) (fun (fun _146879 _146895) (fun _146899 _146895)))) ((@GABS (fun (prod (fun _146899 _146879) (fun (fun _146879 _146895) (fun _146899 _146895))) bool)) (λ f : El (fun (prod (fun _146899 _146879) (fun (fun _146879 _146895) (fun _146899 _146895))) bool), (∀ (λ s : El (fun _146899 _146879), (∀ (λ t : El (fun (fun _146879 _146895) (fun _146899 _146895)), ((@GEQ bool) (f ((@̦‚ (fun _146899 _146879) (fun (fun _146879 _146895) (fun _146899 _146895))) s t)) ((@tailadmissible _146879 _146895 _146899) << (λ f' : El (fun _146879 _146895), (λ a : El _146899, T)) s t)))))))) clauses)))) (∧ ((@ALL (prod (fun _146899 _146879) (fun (fun _146879 _146895) (fun _146899 _146895)))) ((@GABS (fun (prod (fun _146899 _146879) (fun (fun _146879 _146895) (fun _146899 _146895))) bool)) (λ f : El (fun (prod (fun _146899 _146879) (fun (fun _146879 _146895) (fun _146899 _146895))) bool), (∀ (λ s : El (fun _146899 _146879), (∀ (λ t : El (fun (fun _146879 _146895) (fun _146899 _146895)), ((@GEQ bool) (f ((@̦‚ (fun _146899 _146879) (fun (fun _146879 _146895) (fun _146899 _146895))) s t)) (∀ (λ f' : El (fun _146879 _146895), (∀ (λ x : El _146899, (∀ (λ y : El _146899, (⇒ (= (s x) (s y)) (= (t f' x) (t f' y)))))))))))))))) clauses) ((@PAIRWISE (prod (fun _146899 _146879) (fun (fun _146879 _146895) (fun _146899 _146895)))) ((@GABS (fun (prod (fun _146899 _146879) (fun (fun _146879 _146895) (fun _146899 _146895))) (fun (prod (fun _146899 _146879) (fun (fun _146879 _146895) (fun _146899 _146895))) bool))) (λ f : El (fun (prod (fun _146899 _146879) (fun (fun _146879 _146895) (fun _146899 _146895))) (fun (prod (fun _146899 _146879) (fun (fun _146879 _146895) (fun _146899 _146895))) bool)), (∀ (λ s : El (fun _146899 _146879), (∀ (λ t : El (fun (fun _146879 _146895) (fun _146899 _146895)), ((@GEQ (fun (prod (fun _146899 _146879) (fun (fun _146879 _146895) (fun _146899 _146895))) bool)) (f ((@̦‚ (fun _146899 _146879) (fun (fun _146879 _146895) (fun _146899 _146895))) s t)) ((@GABS (fun (prod (fun _146899 _146879) (fun (fun _146879 _146895) (fun _146899 _146895))) bool)) (λ f' : El (fun (prod (fun _146899 _146879) (fun (fun _146879 _146895) (fun _146899 _146895))) bool), (∀ (λ s' : El (fun _146899 _146879), (∀ (λ t' : El (fun (fun _146879 _146895) (fun _146899 _146895)), ((@GEQ bool) (f' ((@̦‚ (fun _146899 _146879) (fun (fun _146879 _146895) (fun _146899 _146895))) s' t')) (∀ (λ f'' : El (fun _146879 _146895), (∀ (λ x : El _146899, (∀ (λ y : El _146899, (⇒ (= (s x) (s' y)) (= (t f'' x) (t' f'' y))))))))))))))))))))))) clauses))) (∃ (λ f : El (fun _146879 _146895), ((@ALL (prod (fun _146899 _146879) (fun (fun _146879 _146895) (fun _146899 _146895)))) ((@GABS (fun (prod (fun _146899 _146879) (fun (fun _146879 _146895) (fun _146899 _146895))) bool)) (λ f' : El (fun (prod (fun _146899 _146879) (fun (fun _146879 _146895) (fun _146899 _146895))) bool), (∀ (λ s : El (fun _146899 _146879), (∀ (λ t : El (fun (fun _146879 _146895) (fun _146899 _146895)), ((@GEQ bool) (f' ((@̦‚ (fun _146899 _146879) (fun (fun _146879 _146895) (fun _146899 _146895))) s t)) (∀ (λ x : El _146899, (= (f (s x)) (t f x))))))))))) clauses))))));
