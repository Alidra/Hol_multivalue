require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_type_abbrevs;
require open hol-light.hol_terms;
symbol term0 a0 a1 ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun (fun a1 (fun a0 bool)) (fun (list a1) (fun (list a0) bool))))) (λ y0 : El (type1245 a0 a1), (∀ (λ y1 : El type1669, (∧ (∀ (λ y2 : El (type1470 a0 a1), (∀ (λ y3 : El (list a0), (= (y0 y1 y2 (@NIL a1) y3) T))))) (∀ (λ y2 : El a1, (∀ (λ y3 : El (type1470 a0 a1), (∀ (λ y4 : El (list a1), (∀ (λ y5 : El (list a0), (= (y0 y1 y3 ((@CONS a1) y2 y4) y5) (∧ ((@ALL a0) (y3 y2) y5) (y0 y1 y3 y4 y5))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0))))))))))))))));
