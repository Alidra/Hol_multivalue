Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_type_abbrevs.
Require Import hol_terms.
Definition term93 (a0 : Type') (a1 : Type') := @List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1)).
Definition term107 (x0 : nat) := ~ ((NUMERAL 0) = (S x0)).
Definition term43 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : list a1) := ((fun y0 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y0)) = (@List.length a1 y0)) x1) -> (fun y0 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y0)) = (@List.length a1 y0)) (@cons a1 x0 x1).
Definition term153 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : a1) (x3 : list a1) (x4 : Prop) (x5 : Prop) := (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@cons a1 x2 x3))) = x4) -> (x4 -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@cons a1 x2 x3))) = (@List.length a1 (@cons a1 x2 x3))) = x5) -> (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@cons a1 x2 x3))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@cons a1 x2 x3))) = (@List.length a1 (@cons a1 x2 x3))) = (x4 -> x5).
Definition term24 (a0 : Type') (a1 : Type') := (forall y0 : list a1, ((@List.length a0 (@nil a0)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y0)) = (@List.length a1 y0)) /\ (forall y0 : a0, forall y1 : list a0, (forall y2 : list a1, ((@List.length a0 y1) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y1 y2)) = (@List.length a1 y2)) -> forall y2 : list a1, ((@List.length a0 (@cons a0 y0 y1)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 y0 y1) y2)) = (@List.length a1 y2)).
Definition term103 (a0 : Type') (a1 : Type') := True -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1))) = (@List.length a1 (@nil a1))) = True.
Definition term138 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := @eq nat (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))).
Definition term99 := @eq nat (NUMERAL 0).
Definition term72 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : a1) (x3 : list a1) := ((fun y0 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y0)) = (@List.length a1 y0)) x3) -> (fun y0 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y0)) = (@List.length a1 y0)) (@cons a1 x2 x3).
Definition term161 (a0 : Type') (a1 : Type') (x0 : list a0) (x1 : list a1) := S (@List.length (prod a0 a1) (@ZIP a0 a1 x0 x1)).
Definition term113 (a0 : Type') (x0 : a0) (x1 : list a0) := @List.length a0 (@cons a0 x0 x1).
Definition term79 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := fun y0 : a1 => forall y1 : list a1, (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y1)) = (@List.length a1 y1)) -> ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@cons a1 y0 y1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@cons a1 y0 y1))) = (@List.length a1 (@cons a1 y0 y1)).
Definition term50 (a0 : Type') (a1 : Type') := fun y0 : a1 => forall y1 : list a1, (((@List.length a0 (@nil a0)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y1)) = (@List.length a1 y1)) -> ((@List.length a0 (@nil a0)) = (@List.length a1 (@cons a1 y0 y1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 y0 y1))) = (@List.length a1 (@cons a1 y0 y1)).
Definition term71 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : a1) (x3 : list a1) := ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@cons a1 x2 x3))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@cons a1 x2 x3))) = (@List.length a1 (@cons a1 x2 x3)).
Definition term84 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := imp (((fun y0 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y0)) = (@List.length a1 y0)) (@nil a1)) /\ (forall y0 : a1, forall y1 : list a1, ((fun y2 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y2)) = (@List.length a1 y2)) y1) -> (fun y2 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y2)) = (@List.length a1 y2)) (@cons a1 y0 y1))).
Definition term55 (a0 : Type') (a1 : Type') := imp (((fun y0 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y0)) = (@List.length a1 y0)) (@nil a1)) /\ (forall y0 : a1, forall y1 : list a1, ((fun y2 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y2)) = (@List.length a1 y2)) y1) -> (fun y2 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y2)) = (@List.length a1 y2)) (@cons a1 y0 y1))).
Definition term25 (a0 : Type') (a1 : Type') := imp (((fun y0 : list a0 => forall y1 : list a1, ((@List.length a0 y0) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y0 y1)) = (@List.length a1 y1)) (@nil a0)) /\ (forall y0 : a0, forall y1 : list a0, ((fun y2 : list a0 => forall y3 : list a1, ((@List.length a0 y2) = (@List.length a1 y3)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y2 y3)) = (@List.length a1 y3)) y1) -> (fun y2 : list a0 => forall y3 : list a1, ((@List.length a0 y2) = (@List.length a1 y3)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y2 y3)) = (@List.length a1 y3)) (@cons a0 y0 y1))).
Definition term3 (a0 : Type') (a1 : Type') := (fun y0 : list a0 => forall y1 : list a1, ((@List.length a0 y0) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y0 y1)) = (@List.length a1 y1)) (@nil a0).
Definition term5 (a0 : Type') (a1 : Type') := and ((fun y0 : list a0 => forall y1 : list a1, ((@List.length a0 y0) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y0 y1)) = (@List.length a1 y1)) (@nil a0)).
Definition term60 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := (((fun y0 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y0)) = (@List.length a1 y0)) (@nil a1)) /\ (forall y0 : a1, forall y1 : list a1, ((fun y2 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y2)) = (@List.length a1 y2)) y1) -> (fun y2 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y2)) = (@List.length a1 y2)) (@cons a1 y0 y1))) -> forall y0 : list a1, (fun y1 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y1)) = (@List.length a1 y1)) y0.
Definition term31 (a0 : Type') (a1 : Type') := (((fun y0 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y0)) = (@List.length a1 y0)) (@nil a1)) /\ (forall y0 : a1, forall y1 : list a1, ((fun y2 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y2)) = (@List.length a1 y2)) y1) -> (fun y2 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y2)) = (@List.length a1 y2)) (@cons a1 y0 y1))) -> forall y0 : list a1, (fun y1 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y1)) = (@List.length a1 y1)) y0.
Definition term1 (a0 : Type') (a1 : Type') := (((fun y0 : list a0 => forall y1 : list a1, ((@List.length a0 y0) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y0 y1)) = (@List.length a1 y1)) (@nil a0)) /\ (forall y0 : a0, forall y1 : list a0, ((fun y2 : list a0 => forall y3 : list a1, ((@List.length a0 y2) = (@List.length a1 y3)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y2 y3)) = (@List.length a1 y3)) y1) -> (fun y2 : list a0 => forall y3 : list a1, ((@List.length a0 y2) = (@List.length a1 y3)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y2 y3)) = (@List.length a1 y3)) (@cons a0 y0 y1))) -> forall y0 : list a0, (fun y1 : list a0 => forall y2 : list a1, ((@List.length a0 y1) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y1 y2)) = (@List.length a1 y2)) y0.
Definition term18 (a0 : Type') (a1 : Type') (x0 : a0) := forall y0 : list a0, (forall y1 : list a1, ((@List.length a0 y0) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y0 y1)) = (@List.length a1 y1)) -> forall y1 : list a1, ((@List.length a0 (@cons a0 x0 y0)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 y0) y1)) = (@List.length a1 y1).
Definition term0 (a0 : Type') (x0 : type1143 a0) := ((x0 (@nil a0)) /\ (forall y0 : a0, forall y1 : list a0, (x0 y1) -> x0 (@cons a0 y0 y1))) -> forall y0 : list a0, x0 y0.
Definition term29 (a0 : Type') (a1 : Type') := forall y0 : list a0, forall y1 : list a1, ((@List.length a0 y0) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y0 y1)) = (@List.length a1 y1).
Definition term97 (a0 : Type') (a1 : Type') (x0 : Prop) (x1 : Prop) := (((@List.length a0 (@nil a0)) = (@List.length a1 (@nil a1))) = x0) -> (x0 -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1))) = (@List.length a1 (@nil a1))) = x1) -> (((@List.length a0 (@nil a0)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1))) = (@List.length a1 (@nil a1))) = (x0 -> x1).
Definition term111 (a0 : Type') (x0 : a0) := forall y0 : list a0, (@List.length a0 (@cons a0 x0 y0)) = (S (@List.length a0 y0)).
Definition term143 (x0 : nat) := forall y0 : nat, ((S x0) = (S y0)) = (x0 = y0).
Definition term69 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : list a1) := imp (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 x2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) x2)) = (@List.length a1 x2)).
Definition term114 (a0 : Type') (x0 : list a0) := S (@List.length a0 x0).
Definition term67 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : list a1) := ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 x2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) x2)) = (@List.length a1 x2).
Definition term68 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : list a1) := imp ((fun y0 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y0)) = (@List.length a1 y0)) x2).
Definition term156 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : a1) (x3 : list a1) := @ZIP a0 a1 (@cons a0 x0 x1) (@cons a1 x2 x3).
Definition term146 (a0 : Type') (a1 : Type') (x0 : list a0) (x1 : list a1) := ((@List.length a0 x0) = (@List.length a1 x1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 x0 x1)) = (@List.length a1 x1).
Definition term19 (a0 : Type') (a1 : Type') := fun y0 : a0 => forall y1 : list a0, ((fun y2 : list a0 => forall y3 : list a1, ((@List.length a0 y2) = (@List.length a1 y3)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y2 y3)) = (@List.length a1 y3)) y1) -> (fun y2 : list a0 => forall y3 : list a1, ((@List.length a0 y2) = (@List.length a1 y3)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y2 y3)) = (@List.length a1 y3)) (@cons a0 y0 y1).
Definition term42 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : list a1) := ((@List.length a0 (@nil a0)) = (@List.length a1 (@cons a1 x0 x1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))) = (@List.length a1 (@cons a1 x0 x1)).
Definition term40 (a0 : Type') (a1 : Type') (x0 : list a1) := imp (((@List.length a0 (@nil a0)) = (@List.length a1 x0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) x0)) = (@List.length a1 x0)).
Definition term94 (a0 : Type') (a1 : Type') (x0 : Prop) := (fun y0 : Prop => forall y1 : Prop, (((@List.length a0 (@nil a0)) = (@List.length a1 (@nil a1))) = y0) -> (y0 -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1))) = (@List.length a1 (@nil a1))) = y1) -> (((@List.length a0 (@nil a0)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1))) = (@List.length a1 (@nil a1))) = (y0 -> y1)) x0.
Definition term116 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : list a1) := @List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1)).
Definition term166 (a0 : Type') (a1 : Type') (x0 : list a0) (x1 : list a1) := ((@List.length a0 x0) = (@List.length a1 x1)) -> True.
Definition term66 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : list a1) := (fun y0 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y0)) = (@List.length a1 y0)) x2.
Definition term65 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := and (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (@List.length a1 (@nil a1))).
Definition term36 (a0 : Type') (a1 : Type') := and (((@List.length a0 (@nil a0)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1))) = (@List.length a1 (@nil a1))).
Definition term61 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := fun y0 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y0)) = (@List.length a1 y0).
Definition term32 (a0 : Type') (a1 : Type') := fun y0 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y0)) = (@List.length a1 y0).
Definition term7 (a0 : Type') (a1 : Type') (x0 : list a0) := (fun y0 : list a0 => forall y1 : list a1, ((@List.length a0 y0) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y0 y1)) = (@List.length a1 y1)) x0.
Definition term163 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : a1) (x3 : list a1) := @eq nat (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@cons a1 x2 x3))).
Definition term124 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : list a1) := False -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))) = (@List.length a1 (@cons a1 x0 x1))) = ((@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))) = (S (@List.length a1 x1))).
Definition term83 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (@List.length a1 (@nil a1))) /\ (forall y0 : a1, forall y1 : list a1, (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y1)) = (@List.length a1 y1)) -> ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@cons a1 y0 y1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@cons a1 y0 y1))) = (@List.length a1 (@cons a1 y0 y1))).
Definition term54 (a0 : Type') (a1 : Type') := (((@List.length a0 (@nil a0)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1))) = (@List.length a1 (@nil a1))) /\ (forall y0 : a1, forall y1 : list a1, (((@List.length a0 (@nil a0)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y1)) = (@List.length a1 y1)) -> ((@List.length a0 (@nil a0)) = (@List.length a1 (@cons a1 y0 y1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 y0 y1))) = (@List.length a1 (@cons a1 y0 y1))).
Definition term34 (a0 : Type') (a1 : Type') := ((@List.length a0 (@nil a0)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1))) = (@List.length a1 (@nil a1)).
Definition term16 (a0 : Type') (a1 : Type') (x0 : a0) := fun y0 : list a0 => (forall y1 : list a1, ((@List.length a0 y0) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y0 y1)) = (@List.length a1 y1)) -> forall y1 : list a1, ((@List.length a0 (@cons a0 x0 y0)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 y0) y1)) = (@List.length a1 y1).
Definition term89 (x0 : Prop) (x1 : Prop) (x2 : Prop) (x3 : Prop) := (x0 = x2) -> (x2 -> x1 = x3) -> (x0 -> x1) = (x2 -> x3).
Definition term28 (a0 : Type') (a1 : Type') := forall y0 : list a0, (fun y1 : list a0 => forall y2 : list a1, ((@List.length a0 y1) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y1 y2)) = (@List.length a1 y2)) y0.
Definition term147 (a0 : Type') (a1 : Type') (x0 : list a0) (x1 : list a1) := @List.length (prod a0 a1) (@ZIP a0 a1 x0 x1).
Definition term104 (a0 : Type') (a1 : Type') := (True -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1))) = (@List.length a1 (@nil a1))) = True) -> (((@List.length a0 (@nil a0)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1))) = (@List.length a1 (@nil a1))) = (True -> True).
Definition term145 (a0 : Type') (a1 : Type') (x0 : list a0) (x1 : list a1) := (fun y0 : list a1 => ((@List.length a0 x0) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 x0 y0)) = (@List.length a1 y0)) x1.
Definition term149 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : a1) (x3 : list a1) := @List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@cons a1 x2 x3)).
Definition term30 (a0 : Type') (a1 : Type') := ((forall y0 : list a1, ((@List.length a0 (@nil a0)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y0)) = (@List.length a1 y0)) /\ (forall y0 : a0, forall y1 : list a0, (forall y2 : list a1, ((@List.length a0 y1) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y1 y2)) = (@List.length a1 y2)) -> forall y2 : list a1, ((@List.length a0 (@cons a0 y0 y1)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 y0 y1) y2)) = (@List.length a1 y2))) -> forall y0 : list a0, forall y1 : list a1, ((@List.length a0 y0) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y0 y1)) = (@List.length a1 y1).
Definition term12 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := forall y0 : list a1, ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y0)) = (@List.length a1 y0).
Definition term8 (a0 : Type') (a1 : Type') (x0 : list a0) := forall y0 : list a1, ((@List.length a0 x0) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 x0 y0)) = (@List.length a1 y0).
Definition term4 (a0 : Type') (a1 : Type') := forall y0 : list a1, ((@List.length a0 (@nil a0)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y0)) = (@List.length a1 y0).
Definition term26 (a0 : Type') (a1 : Type') := imp ((forall y0 : list a1, ((@List.length a0 (@nil a0)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y0)) = (@List.length a1 y0)) /\ (forall y0 : a0, forall y1 : list a0, (forall y2 : list a1, ((@List.length a0 y1) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y1 y2)) = (@List.length a1 y2)) -> forall y2 : list a1, ((@List.length a0 (@cons a0 y0 y1)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 y0 y1) y2)) = (@List.length a1 y2))).
Definition term76 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : a1) := forall y0 : list a1, ((fun y1 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y1)) = (@List.length a1 y1)) y0) -> (fun y1 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y1)) = (@List.length a1 y1)) (@cons a1 x2 y0).
Definition term47 (a0 : Type') (a1 : Type') (x0 : a1) := forall y0 : list a1, ((fun y1 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y1)) = (@List.length a1 y1)) y0) -> (fun y1 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y1)) = (@List.length a1 y1)) (@cons a1 x0 y0).
Definition term17 (a0 : Type') (a1 : Type') (x0 : a0) := forall y0 : list a0, ((fun y1 : list a0 => forall y2 : list a1, ((@List.length a0 y1) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y1 y2)) = (@List.length a1 y2)) y0) -> (fun y1 : list a0 => forall y2 : list a1, ((@List.length a0 y1) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y1 y2)) = (@List.length a1 y2)) (@cons a0 x0 y0).
Definition term165 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : a1) (x2 : list a0) (x3 : list a1) := (((@List.length a0 x2) = (@List.length a1 x3)) -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x2) (@cons a1 x1 x3))) = (@List.length a1 (@cons a1 x1 x3))) = True) -> (((@List.length a0 (@cons a0 x0 x2)) = (@List.length a1 (@cons a1 x1 x3))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x2) (@cons a1 x1 x3))) = (@List.length a1 (@cons a1 x1 x3))) = (((@List.length a0 x2) = (@List.length a1 x3)) -> True).
Definition term110 (a0 : Type') (x0 : a0) := (fun y0 : a0 => forall y1 : list a0, (@List.length a0 (@cons a0 y0 y1)) = (S (@List.length a0 y1))) x0.
Definition term27 (a0 : Type') (a1 : Type') := fun y0 : list a0 => (fun y1 : list a0 => forall y2 : list a1, ((@List.length a0 y1) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y1 y2)) = (@List.length a1 y2)) y0.
Definition term9 (a0 : Type') (a1 : Type') (x0 : list a0) := imp ((fun y0 : list a0 => forall y1 : list a1, ((@List.length a0 y0) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y0 y1)) = (@List.length a1 y1)) x0).
Definition term81 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := forall y0 : a1, forall y1 : list a1, (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y1)) = (@List.length a1 y1)) -> ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@cons a1 y0 y1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@cons a1 y0 y1))) = (@List.length a1 (@cons a1 y0 y1)).
Definition term80 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := forall y0 : a1, forall y1 : list a1, ((fun y2 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y2)) = (@List.length a1 y2)) y1) -> (fun y2 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y2)) = (@List.length a1 y2)) (@cons a1 y0 y1).
Definition term52 (a0 : Type') (a1 : Type') := forall y0 : a1, forall y1 : list a1, (((@List.length a0 (@nil a0)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y1)) = (@List.length a1 y1)) -> ((@List.length a0 (@nil a0)) = (@List.length a1 (@cons a1 y0 y1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 y0 y1))) = (@List.length a1 (@cons a1 y0 y1)).
Definition term51 (a0 : Type') (a1 : Type') := forall y0 : a1, forall y1 : list a1, ((fun y2 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y2)) = (@List.length a1 y2)) y1) -> (fun y2 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y2)) = (@List.length a1 y2)) (@cons a1 y0 y1).
Definition term132 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : Prop) (x3 : Prop) := (fun y0 : Prop => (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@nil a1))) = x2) -> (x2 -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (@List.length a1 (@nil a1))) = y0) -> (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (@List.length a1 (@nil a1))) = (x2 -> y0)) x3.
Definition term119 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : list a1) (x2 : Prop) (x3 : Prop) := (fun y0 : Prop => (((@List.length a0 (@nil a0)) = (@List.length a1 (@cons a1 x0 x1))) = x2) -> (x2 -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))) = (@List.length a1 (@cons a1 x0 x1))) = y0) -> (((@List.length a0 (@nil a0)) = (@List.length a1 (@cons a1 x0 x1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))) = (@List.length a1 (@cons a1 x0 x1))) = (x2 -> y0)) x3.
Definition term64 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := and ((fun y0 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y0)) = (@List.length a1 y0)) (@nil a1)).
Definition term35 (a0 : Type') (a1 : Type') := and ((fun y0 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y0)) = (@List.length a1 y0)) (@nil a1)).
Definition term2 (a0 : Type') (a1 : Type') := fun y0 : list a0 => forall y1 : list a1, ((@List.length a0 y0) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y0 y1)) = (@List.length a1 y1).
Definition term10 (a0 : Type') (a1 : Type') (x0 : list a0) := imp (forall y0 : list a1, ((@List.length a0 x0) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 x0 y0)) = (@List.length a1 y0)).
Definition term82 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := ((fun y0 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y0)) = (@List.length a1 y0)) (@nil a1)) /\ (forall y0 : a1, forall y1 : list a1, ((fun y2 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y2)) = (@List.length a1 y2)) y1) -> (fun y2 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y2)) = (@List.length a1 y2)) (@cons a1 y0 y1)).
Definition term53 (a0 : Type') (a1 : Type') := ((fun y0 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y0)) = (@List.length a1 y0)) (@nil a1)) /\ (forall y0 : a1, forall y1 : list a1, ((fun y2 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y2)) = (@List.length a1 y2)) y1) -> (fun y2 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y2)) = (@List.length a1 y2)) (@cons a1 y0 y1)).
Definition term77 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : a1) := forall y0 : list a1, (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y0)) = (@List.length a1 y0)) -> ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@cons a1 x2 y0))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@cons a1 x2 y0))) = (@List.length a1 (@cons a1 x2 y0)).
Definition term48 (a0 : Type') (a1 : Type') (x0 : a1) := forall y0 : list a1, (((@List.length a0 (@nil a0)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y0)) = (@List.length a1 y0)) -> ((@List.length a0 (@nil a0)) = (@List.length a1 (@cons a1 x0 y0))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 y0))) = (@List.length a1 (@cons a1 x0 y0)).
Definition term20 (a0 : Type') (a1 : Type') := fun y0 : a0 => forall y1 : list a0, (forall y2 : list a1, ((@List.length a0 y1) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y1 y2)) = (@List.length a1 y2)) -> forall y2 : list a1, ((@List.length a0 (@cons a0 y0 y1)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 y0 y1) y2)) = (@List.length a1 y2).
Definition term100 (a0 : Type') (a1 : Type') (x0 : Prop) := (((@List.length a0 (@nil a0)) = (@List.length a1 (@nil a1))) = True) -> (True -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1))) = (@List.length a1 (@nil a1))) = x0) -> (((@List.length a0 (@nil a0)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1))) = (@List.length a1 (@nil a1))) = (True -> x0).
Definition term112 (a0 : Type') (x0 : a0) (x1 : list a0) := (fun y0 : list a0 => (@List.length a0 (@cons a0 x0 y0)) = (S (@List.length a0 y0))) x1.
Definition term106 (x0 : nat) := ~ ((S x0) = (NUMERAL 0)).
Definition term155 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : a1) (x2 : list a0) (x3 : list a1) (x4 : Prop) := (((@List.length a0 x2) = (@List.length a1 x3)) -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x2) (@cons a1 x1 x3))) = (@List.length a1 (@cons a1 x1 x3))) = x4) -> (((@List.length a0 (@cons a0 x0 x2)) = (@List.length a1 (@cons a1 x1 x3))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x2) (@cons a1 x1 x3))) = (@List.length a1 (@cons a1 x1 x3))) = (((@List.length a0 x2) = (@List.length a1 x3)) -> x4).
Definition term151 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : a1) (x3 : list a1) (x4 : Prop) := forall y0 : Prop, (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@cons a1 x2 x3))) = x4) -> (x4 -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@cons a1 x2 x3))) = (@List.length a1 (@cons a1 x2 x3))) = y0) -> (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@cons a1 x2 x3))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@cons a1 x2 x3))) = (@List.length a1 (@cons a1 x2 x3))) = (x4 -> y0).
Definition term131 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : Prop) := forall y0 : Prop, (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@nil a1))) = x2) -> (x2 -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (@List.length a1 (@nil a1))) = y0) -> (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (@List.length a1 (@nil a1))) = (x2 -> y0).
Definition term118 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : list a1) (x2 : Prop) := forall y0 : Prop, (((@List.length a0 (@nil a0)) = (@List.length a1 (@cons a1 x0 x1))) = x2) -> (x2 -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))) = (@List.length a1 (@cons a1 x0 x1))) = y0) -> (((@List.length a0 (@nil a0)) = (@List.length a1 (@cons a1 x0 x1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))) = (@List.length a1 (@cons a1 x0 x1))) = (x2 -> y0).
Definition term95 (a0 : Type') (a1 : Type') (x0 : Prop) := forall y0 : Prop, (((@List.length a0 (@nil a0)) = (@List.length a1 (@nil a1))) = x0) -> (x0 -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1))) = (@List.length a1 (@nil a1))) = y0) -> (((@List.length a0 (@nil a0)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1))) = (@List.length a1 (@nil a1))) = (x0 -> y0).
Definition term90 (x0 : Prop) (x1 : Prop) (x2 : Prop) := forall y0 : Prop, (x0 = x2) -> (x2 -> x1 = y0) -> (x0 -> x1) = (x2 -> y0).
Definition term23 (a0 : Type') (a1 : Type') := ((fun y0 : list a0 => forall y1 : list a1, ((@List.length a0 y0) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y0 y1)) = (@List.length a1 y1)) (@nil a0)) /\ (forall y0 : a0, forall y1 : list a0, ((fun y2 : list a0 => forall y3 : list a1, ((@List.length a0 y2) = (@List.length a1 y3)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y2 y3)) = (@List.length a1 y3)) y1) -> (fun y2 : list a0 => forall y3 : list a1, ((@List.length a0 y2) = (@List.length a1 y3)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y2 y3)) = (@List.length a1 y3)) (@cons a0 y0 y1)).
Definition term159 (a0 : Type') (a1 : Type') (x0 : prod a0 a1) (x1 : type1640 a0 a1) := @List.length (prod a0 a1) (@cons (prod a0 a1) x0 x1).
Definition term11 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := (fun y0 : list a0 => forall y1 : list a1, ((@List.length a0 y0) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y0 y1)) = (@List.length a1 y1)) (@cons a0 x0 x1).
Definition term73 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : a1) (x3 : list a1) := (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 x3)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) x3)) = (@List.length a1 x3)) -> ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@cons a1 x2 x3))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@cons a1 x2 x3))) = (@List.length a1 (@cons a1 x2 x3)).
Definition term44 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : list a1) := (((@List.length a0 (@nil a0)) = (@List.length a1 x1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) x1)) = (@List.length a1 x1)) -> ((@List.length a0 (@nil a0)) = (@List.length a1 (@cons a1 x0 x1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))) = (@List.length a1 (@cons a1 x0 x1)).
Definition term135 (a0 : Type') (x0 : list a0) := @eq nat (S (@List.length a0 x0)).
Definition term148 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : a1) (x3 : list a1) := forall y0 : Prop, forall y1 : Prop, (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@cons a1 x2 x3))) = y0) -> (y0 -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@cons a1 x2 x3))) = (@List.length a1 (@cons a1 x2 x3))) = y1) -> (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@cons a1 x2 x3))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@cons a1 x2 x3))) = (@List.length a1 (@cons a1 x2 x3))) = (y0 -> y1).
Definition term128 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := forall y0 : Prop, forall y1 : Prop, (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@nil a1))) = y0) -> (y0 -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (@List.length a1 (@nil a1))) = y1) -> (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (@List.length a1 (@nil a1))) = (y0 -> y1).
Definition term115 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : list a1) := forall y0 : Prop, forall y1 : Prop, (((@List.length a0 (@nil a0)) = (@List.length a1 (@cons a1 x0 x1))) = y0) -> (y0 -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))) = (@List.length a1 (@cons a1 x0 x1))) = y1) -> (((@List.length a0 (@nil a0)) = (@List.length a1 (@cons a1 x0 x1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))) = (@List.length a1 (@cons a1 x0 x1))) = (y0 -> y1).
Definition term92 (a0 : Type') (a1 : Type') := forall y0 : Prop, forall y1 : Prop, (((@List.length a0 (@nil a0)) = (@List.length a1 (@nil a1))) = y0) -> (y0 -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1))) = (@List.length a1 (@nil a1))) = y1) -> (((@List.length a0 (@nil a0)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1))) = (@List.length a1 (@nil a1))) = (y0 -> y1).
Definition term91 (x0 : Prop) (x1 : Prop) := forall y0 : Prop, forall y1 : Prop, (x0 = y0) -> (y0 -> x1 = y1) -> (x0 -> x1) = (y0 -> y1).
Definition term137 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : Prop) := (False -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (@List.length a1 (@nil a1))) = x2) -> (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (@List.length a1 (@nil a1))) = (False -> x2).
Definition term122 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : list a1) (x2 : Prop) := (False -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))) = (@List.length a1 (@cons a1 x0 x1))) = x2) -> (((@List.length a0 (@nil a0)) = (@List.length a1 (@cons a1 x0 x1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))) = (@List.length a1 (@cons a1 x0 x1))) = (False -> x2).
Definition term62 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := (fun y0 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y0)) = (@List.length a1 y0)) (@nil a1).
Definition term33 (a0 : Type') (a1 : Type') := (fun y0 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y0)) = (@List.length a1 y0)) (@nil a1).
Definition term164 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : a1) (x3 : list a1) := ((@List.length a0 x1) = (@List.length a1 x3)) -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@cons a1 x2 x3))) = (@List.length a1 (@cons a1 x2 x3))) = True.
Definition term37 (a0 : Type') (a1 : Type') (x0 : list a1) := (fun y0 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y0)) = (@List.length a1 y0)) x0.
Definition term154 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : a1) (x2 : list a0) (x3 : list a1) (x4 : Prop) := (((@List.length a0 (@cons a0 x0 x2)) = (@List.length a1 (@cons a1 x1 x3))) = ((@List.length a0 x2) = (@List.length a1 x3))) -> (((@List.length a0 x2) = (@List.length a1 x3)) -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x2) (@cons a1 x1 x3))) = (@List.length a1 (@cons a1 x1 x3))) = x4) -> (((@List.length a0 (@cons a0 x0 x2)) = (@List.length a1 (@cons a1 x1 x3))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x2) (@cons a1 x1 x3))) = (@List.length a1 (@cons a1 x1 x3))) = (((@List.length a0 x2) = (@List.length a1 x3)) -> x4).
Definition term88 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := ((((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (@List.length a1 (@nil a1))) /\ (forall y0 : a1, forall y1 : list a1, (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y1)) = (@List.length a1 y1)) -> ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@cons a1 y0 y1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@cons a1 y0 y1))) = (@List.length a1 (@cons a1 y0 y1)))) -> forall y0 : list a1, ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y0)) = (@List.length a1 y0).
Definition term59 (a0 : Type') (a1 : Type') := ((((@List.length a0 (@nil a0)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1))) = (@List.length a1 (@nil a1))) /\ (forall y0 : a1, forall y1 : list a1, (((@List.length a0 (@nil a0)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y1)) = (@List.length a1 y1)) -> ((@List.length a0 (@nil a0)) = (@List.length a1 (@cons a1 y0 y1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 y0 y1))) = (@List.length a1 (@cons a1 y0 y1)))) -> forall y0 : list a1, ((@List.length a0 (@nil a0)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y0)) = (@List.length a1 y0).
Definition term160 (a0 : Type') (a1 : Type') (x0 : type1640 a0 a1) := S (@List.length (prod a0 a1) x0).
Definition term158 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : a1) (x2 : list a0) (x3 : list a1) := @List.length (prod a0 a1) (@cons (prod a0 a1) (@pair a0 a1 x0 x1) (@ZIP a0 a1 x2 x3)).
Definition term140 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := (False -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (@List.length a1 (@nil a1))) = ((@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (NUMERAL 0))) -> (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (@List.length a1 (@nil a1))) = (False -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (NUMERAL 0)).
Definition term98 (a0 : Type') := @eq nat (@List.length a0 (@nil a0)).
Definition term63 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (@List.length a1 (@nil a1)).
Definition term139 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := False -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (@List.length a1 (@nil a1))) = ((@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (NUMERAL 0)).
Definition term152 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : a1) (x3 : list a1) (x4 : Prop) (x5 : Prop) := (fun y0 : Prop => (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@cons a1 x2 x3))) = x4) -> (x4 -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@cons a1 x2 x3))) = (@List.length a1 (@cons a1 x2 x3))) = y0) -> (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@cons a1 x2 x3))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@cons a1 x2 x3))) = (@List.length a1 (@cons a1 x2 x3))) = (x4 -> y0)) x5.
Definition term41 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : list a1) := (fun y0 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y0)) = (@List.length a1 y0)) (@cons a1 x0 x1).
Definition term13 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := ((fun y0 : list a0 => forall y1 : list a1, ((@List.length a0 y0) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y0 y1)) = (@List.length a1 y1)) x1) -> (fun y0 : list a0 => forall y1 : list a1, ((@List.length a0 y0) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y0 y1)) = (@List.length a1 y1)) (@cons a0 x0 x1).
Definition term142 (x0 : nat) := (fun y0 : nat => forall y1 : nat, ((S y0) = (S y1)) = (y0 = y1)) x0.
Definition term105 (x0 : nat) := (fun y0 : nat => ~ ((S y0) = (NUMERAL 0))) x0.
Definition term70 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : a1) (x3 : list a1) := (fun y0 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y0)) = (@List.length a1 y0)) (@cons a1 x2 x3).
Definition term125 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : list a1) := (False -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))) = (@List.length a1 (@cons a1 x0 x1))) = ((@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))) = (S (@List.length a1 x1)))) -> (((@List.length a0 (@nil a0)) = (@List.length a1 (@cons a1 x0 x1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))) = (@List.length a1 (@cons a1 x0 x1))) = (False -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))) = (S (@List.length a1 x1))).
Definition term133 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : Prop) (x3 : Prop) := (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@nil a1))) = x2) -> (x2 -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (@List.length a1 (@nil a1))) = x3) -> (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (@List.length a1 (@nil a1))) = (x2 -> x3).
Definition term120 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : list a1) (x2 : Prop) (x3 : Prop) := (((@List.length a0 (@nil a0)) = (@List.length a1 (@cons a1 x0 x1))) = x2) -> (x2 -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))) = (@List.length a1 (@cons a1 x0 x1))) = x3) -> (((@List.length a0 (@nil a0)) = (@List.length a1 (@cons a1 x0 x1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))) = (@List.length a1 (@cons a1 x0 x1))) = (x2 -> x3).
Definition term126 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : list a1) := False -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))) = (S (@List.length a1 x1)).
Definition term162 (a0 : Type') (x0 : list a0) := @eq nat (@List.length a0 x0).
Definition term141 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := False -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (NUMERAL 0).
Definition term86 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := fun y0 : list a1 => (fun y1 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y1)) = (@List.length a1 y1)) y0.
Definition term57 (a0 : Type') (a1 : Type') := fun y0 : list a1 => (fun y1 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y1)) = (@List.length a1 y1)) y0.
Definition term127 (x0 : nat) := (~ ((S x0) = (NUMERAL 0))) -> ((S x0) = (NUMERAL 0)) = False.
Definition term108 (x0 : nat) := (~ ((NUMERAL 0) = (S x0))) -> ((NUMERAL 0) = (S x0)) = False.
Definition term74 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : a1) := fun y0 : list a1 => ((fun y1 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y1)) = (@List.length a1 y1)) y0) -> (fun y1 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y1)) = (@List.length a1 y1)) (@cons a1 x2 y0).
Definition term45 (a0 : Type') (a1 : Type') (x0 : a1) := fun y0 : list a1 => ((fun y1 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y1)) = (@List.length a1 y1)) y0) -> (fun y1 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y1)) = (@List.length a1 y1)) (@cons a1 x0 y0).
Definition term85 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := imp ((((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (@List.length a1 (@nil a1))) /\ (forall y0 : a1, forall y1 : list a1, (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y1)) = (@List.length a1 y1)) -> ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@cons a1 y0 y1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@cons a1 y0 y1))) = (@List.length a1 (@cons a1 y0 y1)))).
Definition term56 (a0 : Type') (a1 : Type') := imp ((((@List.length a0 (@nil a0)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1))) = (@List.length a1 (@nil a1))) /\ (forall y0 : a1, forall y1 : list a1, (((@List.length a0 (@nil a0)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y1)) = (@List.length a1 y1)) -> ((@List.length a0 (@nil a0)) = (@List.length a1 (@cons a1 y0 y1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 y0 y1))) = (@List.length a1 (@cons a1 y0 y1)))).
Definition term101 (a0 : Type') (a1 : Type') (x0 : Prop) := (True -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1))) = (@List.length a1 (@nil a1))) = x0) -> (((@List.length a0 (@nil a0)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1))) = (@List.length a1 (@nil a1))) = (True -> x0).
Definition term134 (a0 : Type') (x0 : a0) (x1 : list a0) := @eq nat (@List.length a0 (@cons a0 x0 x1)).
Definition term39 (a0 : Type') (a1 : Type') (x0 : list a1) := imp ((fun y0 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y0)) = (@List.length a1 y0)) x0).
Definition term38 (a0 : Type') (a1 : Type') (x0 : list a1) := ((@List.length a0 (@nil a0)) = (@List.length a1 x0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) x0)) = (@List.length a1 x0).
Definition term96 (a0 : Type') (a1 : Type') (x0 : Prop) (x1 : Prop) := (fun y0 : Prop => (((@List.length a0 (@nil a0)) = (@List.length a1 (@nil a1))) = x0) -> (x0 -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1))) = (@List.length a1 (@nil a1))) = y0) -> (((@List.length a0 (@nil a0)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1))) = (@List.length a1 (@nil a1))) = (x0 -> y0)) x1.
Definition term78 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := fun y0 : a1 => forall y1 : list a1, ((fun y2 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y2)) = (@List.length a1 y2)) y1) -> (fun y2 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y2)) = (@List.length a1 y2)) (@cons a1 y0 y1).
Definition term49 (a0 : Type') (a1 : Type') := fun y0 : a1 => forall y1 : list a1, ((fun y2 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y2)) = (@List.length a1 y2)) y1) -> (fun y2 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y2)) = (@List.length a1 y2)) (@cons a1 y0 y1).
Definition term129 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := @List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1)).
Definition term136 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : Prop) := (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@nil a1))) = False) -> (False -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (@List.length a1 (@nil a1))) = x2) -> (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (@List.length a1 (@nil a1))) = (False -> x2).
Definition term121 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : list a1) (x2 : Prop) := (((@List.length a0 (@nil a0)) = (@List.length a1 (@cons a1 x0 x1))) = False) -> (False -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))) = (@List.length a1 (@cons a1 x0 x1))) = x2) -> (((@List.length a0 (@nil a0)) = (@List.length a1 (@cons a1 x0 x1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))) = (@List.length a1 (@cons a1 x0 x1))) = (False -> x2).
Definition term150 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : a1) (x3 : list a1) (x4 : Prop) := (fun y0 : Prop => forall y1 : Prop, (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@cons a1 x2 x3))) = y0) -> (y0 -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@cons a1 x2 x3))) = (@List.length a1 (@cons a1 x2 x3))) = y1) -> (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@cons a1 x2 x3))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@cons a1 x2 x3))) = (@List.length a1 (@cons a1 x2 x3))) = (y0 -> y1)) x4.
Definition term144 (x0 : nat) (x1 : nat) := (fun y0 : nat => ((S x0) = (S y0)) = (x0 = y0)) x1.
Definition term87 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := forall y0 : list a1, (fun y1 : list a1 => ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y1)) = (@List.length a1 y1)) y0.
Definition term58 (a0 : Type') (a1 : Type') := forall y0 : list a1, (fun y1 : list a1 => ((@List.length a0 (@nil a0)) = (@List.length a1 y1)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y1)) = (@List.length a1 y1)) y0.
Definition term102 (a0 : Type') (a1 : Type') := @eq nat (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@nil a1))).
Definition term130 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : Prop) := (fun y0 : Prop => forall y1 : Prop, (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@nil a1))) = y0) -> (y0 -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (@List.length a1 (@nil a1))) = y1) -> (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@nil a1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@nil a1))) = (@List.length a1 (@nil a1))) = (y0 -> y1)) x2.
Definition term117 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : list a1) (x2 : Prop) := (fun y0 : Prop => forall y1 : Prop, (((@List.length a0 (@nil a0)) = (@List.length a1 (@cons a1 x0 x1))) = y0) -> (y0 -> ((@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))) = (@List.length a1 (@cons a1 x0 x1))) = y1) -> (((@List.length a0 (@nil a0)) = (@List.length a1 (@cons a1 x0 x1))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))) = (@List.length a1 (@cons a1 x0 x1))) = (y0 -> y1)) x2.
Definition term109 (a0 : Type') := forall y0 : a0, forall y1 : list a0, (@List.length a0 (@cons a0 y0 y1)) = (S (@List.length a0 y1)).
Definition term22 (a0 : Type') (a1 : Type') := forall y0 : a0, forall y1 : list a0, (forall y2 : list a1, ((@List.length a0 y1) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y1 y2)) = (@List.length a1 y2)) -> forall y2 : list a1, ((@List.length a0 (@cons a0 y0 y1)) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 y0 y1) y2)) = (@List.length a1 y2).
Definition term21 (a0 : Type') (a1 : Type') := forall y0 : a0, forall y1 : list a0, ((fun y2 : list a0 => forall y3 : list a1, ((@List.length a0 y2) = (@List.length a1 y3)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y2 y3)) = (@List.length a1 y3)) y1) -> (fun y2 : list a0 => forall y3 : list a1, ((@List.length a0 y2) = (@List.length a1 y3)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y2 y3)) = (@List.length a1 y3)) (@cons a0 y0 y1).
Definition term157 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : a1) (x2 : list a0) (x3 : list a1) := @cons (prod a0 a1) (@pair a0 a1 x0 x1) (@ZIP a0 a1 x2 x3).
Definition term6 (a0 : Type') (a1 : Type') := and (forall y0 : list a1, ((@List.length a0 (@nil a0)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y0)) = (@List.length a1 y0)).
Definition term14 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) := (forall y0 : list a1, ((@List.length a0 x1) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 x1 y0)) = (@List.length a1 y0)) -> forall y0 : list a1, ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y0)) = (@List.length a1 y0).
Definition term75 (a0 : Type') (a1 : Type') (x0 : a0) (x1 : list a0) (x2 : a1) := fun y0 : list a1 => (((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) y0)) = (@List.length a1 y0)) -> ((@List.length a0 (@cons a0 x0 x1)) = (@List.length a1 (@cons a1 x2 y0))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@cons a0 x0 x1) (@cons a1 x2 y0))) = (@List.length a1 (@cons a1 x2 y0)).
Definition term46 (a0 : Type') (a1 : Type') (x0 : a1) := fun y0 : list a1 => (((@List.length a0 (@nil a0)) = (@List.length a1 y0)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) y0)) = (@List.length a1 y0)) -> ((@List.length a0 (@nil a0)) = (@List.length a1 (@cons a1 x0 y0))) -> (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 y0))) = (@List.length a1 (@cons a1 x0 y0)).
Definition term123 (a0 : Type') (a1 : Type') (x0 : a1) (x1 : list a1) := @eq nat (@List.length (prod a0 a1) (@ZIP a0 a1 (@nil a0) (@cons a1 x0 x1))).
Definition term15 (a0 : Type') (a1 : Type') (x0 : a0) := fun y0 : list a0 => ((fun y1 : list a0 => forall y2 : list a1, ((@List.length a0 y1) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y1 y2)) = (@List.length a1 y2)) y0) -> (fun y1 : list a0 => forall y2 : list a1, ((@List.length a0 y1) = (@List.length a1 y2)) -> (@List.length (prod a0 a1) (@ZIP a0 a1 y1 y2)) = (@List.length a1 y2)) (@cons a0 x0 y0).
