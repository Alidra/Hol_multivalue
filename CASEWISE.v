Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_terms.
Require Import hol_axioms.
Require Import hol_type_abbrevs.
Require Import CASEWISE_term_abbrevs.
Require Import thm0_spec.
Require Import thm1842_spec.
Require Import thm1862_spec.
Require Import thm1863_spec.
Require Import thm48213_spec.
Require Import thm48214_spec.
Require Import thm48219_spec.
Require Import thm48220_spec.
Require Import thm8058952_spec.
Require Import thm8058953_spec.
Require Import thm8058964_spec.
Require Import thm8058965_spec.
Lemma lem8058975 {_143118 _143154 _143158 _143159 : Type'} (f : _143159) (x : _143158) : (@CASEWISE _143118 _143154 _143158 _143159 (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) f x) = (term0 _143118).
Proof. exact (EQ_MP (@lem8058953 _143118 _143154 _143158 _143159 f x) (@lem8058952 _143118 _143154 _143158 _143159 f x)). Qed.
Lemma lem8058976 {_143170 _143178 _143218 _143219 : Type'} (f : _143219) (x : _143218) : (@CASEWISE _143178 _143170 _143218 _143219 (@nil (prod (_143170 -> _143218) (_143219 -> _143170 -> _143178))) f x) = (term0 _143178).
Proof. exact (@lem8058975 _143178 _143170 _143218 _143219 f x). Qed.
Lemma lem8058977 {_143178 : Type'} : (@eq _143178) = (@eq _143178).
Proof. exact (eq_refl (@eq _143178)). Qed.
Lemma lem8058978 {_143170 _143178 _143218 _143219 : Type'} (f : _143219) (x : _143218) : (term1 _143170 _143178 _143218 _143219 f x) = (term2 _143178).
Proof. exact (MK_COMB (@lem8058977 _143178) (@lem8058976 _143170 _143178 _143218 _143219 f x)). Qed.
Lemma lem8058979 {_143178 : Type'} : (term0 _143178) = (term0 _143178).
Proof. exact (eq_refl (term0 _143178)). Qed.
Lemma lem8058980 {_143170 _143178 _143218 _143219 : Type'} (f : _143219) (x : _143218) : ((@CASEWISE _143178 _143170 _143218 _143219 (@nil (prod (_143170 -> _143218) (_143219 -> _143170 -> _143178))) f x) = (term0 _143178)) = ((term0 _143178) = (term0 _143178)).
Proof. exact (MK_COMB (@lem8058978 _143170 _143178 _143218 _143219 f x) (@lem8058979 _143178)). Qed.
Lemma lem8058982 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem1863 A x) (@lem1862 A x)). Qed.
Lemma lem8058983 {_143178 : Type'} (x : _143178) : (x = x) = True.
Proof. exact (@lem8058982 _143178 x). Qed.
Lemma lem8058984 {_143178 : Type'} : ((term0 _143178) = (term0 _143178)) = True.
Proof. exact (@lem8058983 _143178 (term0 _143178)). Qed.
Lemma lem8058985 {_143170 _143178 _143218 _143219 : Type'} (f : _143219) (x : _143218) : ((@CASEWISE _143178 _143170 _143218 _143219 (@nil (prod (_143170 -> _143218) (_143219 -> _143170 -> _143178))) f x) = (term0 _143178)) = True.
Proof. exact (TRANS (@lem8058980 _143170 _143178 _143218 _143219 f x) (@lem8058984 _143178)). Qed.
Lemma lem8058986 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8058987 {_143170 _143178 _143218 _143219 : Type'} (f : _143219) (x : _143218) : (term3 _143170 _143178 _143218 _143219 f x) = (and True).
Proof. exact (MK_COMB (@lem8058986) (@lem8058985 _143170 _143178 _143218 _143219 f x)). Qed.
Lemma lem8058991 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) (f : _143159) (x : _143158) : (term4 _143118 _143154 _143158 _143159 h t f x) = (term5 _143118 _143154 _143158 _143159 h t f x).
Proof. exact (EQ_MP (@lem8058965 _143118 _143154 _143158 _143159 h t f x) (@lem8058964 _143118 _143154 _143158 _143159 h t f x)). Qed.
Lemma lem8058992 {_143179 _143218 _143219 _143221 : Type'} (h : type1648 _143179 _143218 _143219 _143221) (t : type1639 _143179 _143218 _143219 _143221) (f : _143219) (x : _143218) : (term6 _143179 _143218 _143219 _143221 h t f x) = (term7 _143179 _143218 _143219 _143221 h t f x).
Proof. exact (@lem8058991 _143179 _143221 _143218 _143219 h t f x). Qed.
Lemma lem8058993 {_143179 _143218 _143219 _143221 : Type'} (s : _143221 -> _143218) (t : type1475 _143179 _143219 _143221) (clauses : type1639 _143179 _143218 _143219 _143221) (f : _143219) (x : _143218) : (term8 _143179 _143218 _143219 _143221 s t clauses f x) = (term9 _143179 _143218 _143219 _143221 s t clauses f x).
Proof. exact (@lem8058992 _143179 _143218 _143219 _143221 (@pair (_143221 -> _143218) (_143219 -> _143221 -> _143179) s t) clauses f x). Qed.
Lemma lem8059001 {A B : Type'} (y : B) (x : A) : (term10 A B x y) = x.
Proof. exact (EQ_MP (@lem48220 A B y x) (@lem48219 A B x y)). Qed.
Lemma lem8059002 {_143179 _143218 _143219 _143221 : Type'} (y : type1475 _143179 _143219 _143221) (x : _143221 -> _143218) : (term11 _143179 _143218 _143219 _143221 x y) = x.
Proof. exact (@lem8059001 (_143221 -> _143218) (type1475 _143179 _143219 _143221) y x). Qed.
Lemma lem8059003 {_143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) : (term11 _143179 _143218 _143219 _143221 s t) = s.
Proof. exact (@lem8059002 _143179 _143218 _143219 _143221 t s). Qed.
Lemma lem8059004 {_143221 : Type'} (y : _143221) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem8059005 {_143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) (y : _143221) : (term12 _143179 _143218 _143219 _143221 s t y) = (s y).
Proof. exact (MK_COMB (@lem8059003 _143179 _143218 _143219 _143221 t s) (@lem8059004 _143221 y)). Qed.
Lemma lem8059006 {_143218 : Type'} : (@eq _143218) = (@eq _143218).
Proof. exact (eq_refl (@eq _143218)). Qed.
Lemma lem8059007 {_143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) (y : _143221) : (term13 _143179 _143218 _143219 _143221 s t y) = (term14 _143218 _143221 s y).
Proof. exact (MK_COMB (@lem8059006 _143218) (@lem8059005 _143179 _143218 _143219 _143221 t s y)). Qed.
Lemma lem8059008 {_143218 : Type'} (x : _143218) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8059009 {_143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) (y : _143221) (x : _143218) : ((term12 _143179 _143218 _143219 _143221 s t y) = x) = ((s y) = x).
Proof. exact (MK_COMB (@lem8059007 _143179 _143218 _143219 _143221 t s y) (@lem8059008 _143218 x)). Qed.
Lemma lem8059012 {_143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) (x : _143218) : (term15 _143179 _143218 _143219 _143221 s t x) = (term16 _143218 _143221 s x).
Proof. exact (fun_ext (fun y : _143221 => @lem8059009 _143179 _143218 _143219 _143221 t s y x)). Qed.
Lemma lem8059013 {_143221 : Type'} : (@ex _143221) = (@ex _143221).
Proof. exact (eq_refl (@ex _143221)). Qed.
Lemma lem8059014 {_143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) (x : _143218) : (term17 _143179 _143218 _143219 _143221 s t x) = (term18 _143218 _143221 s x).
Proof. exact (MK_COMB (@lem8059013 _143221) (@lem8059012 _143179 _143218 _143219 _143221 t s x)). Qed.
Lemma lem8059019 {_143179 : Type'} : (@COND _143179) = (@COND _143179).
Proof. exact (eq_refl (@COND _143179)). Qed.
Lemma lem8059020 {_143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) (x : _143218) : (term19 _143179 _143218 _143219 _143221 s t x) = (term20 _143179 _143218 _143221 s x).
Proof. exact (MK_COMB (@lem8059019 _143179) (@lem8059014 _143179 _143218 _143219 _143221 t s x)). Qed.
Lemma lem8059022 {A B : Type'} (x : A) (y : B) : (term21 A B x y) = y.
Proof. exact (EQ_MP (@lem48214 A B x y) (@lem48213 A B x y)). Qed.
Lemma lem8059023 {_143179 _143218 _143219 _143221 : Type'} (x : _143221 -> _143218) (y : type1475 _143179 _143219 _143221) : (term22 _143179 _143218 _143219 _143221 x y) = y.
Proof. exact (@lem8059022 (_143221 -> _143218) (type1475 _143179 _143219 _143221) x y). Qed.
Lemma lem8059024 {_143179 _143218 _143219 _143221 : Type'} (s : _143221 -> _143218) (t : type1475 _143179 _143219 _143221) : (term22 _143179 _143218 _143219 _143221 s t) = t.
Proof. exact (@lem8059023 _143179 _143218 _143219 _143221 s t). Qed.
Lemma lem8059025 {_143219 : Type'} (f : _143219) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8059026 {_143179 _143218 _143219 _143221 : Type'} (s : _143221 -> _143218) (t : type1475 _143179 _143219 _143221) (f : _143219) : (term23 _143179 _143218 _143219 _143221 s t f) = (t f).
Proof. exact (MK_COMB (@lem8059024 _143179 _143218 _143219 _143221 s t) (@lem8059025 _143219 f)). Qed.
Lemma lem8059032 {A B : Type'} (y : B) (x : A) : (term10 A B x y) = x.
Proof. exact (EQ_MP (@lem48220 A B y x) (@lem48219 A B x y)). Qed.
Lemma lem8059033 {_143179 _143218 _143219 _143221 : Type'} (y : type1475 _143179 _143219 _143221) (x : _143221 -> _143218) : (term11 _143179 _143218 _143219 _143221 x y) = x.
Proof. exact (@lem8059032 (_143221 -> _143218) (type1475 _143179 _143219 _143221) y x). Qed.
Lemma lem8059034 {_143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) : (term11 _143179 _143218 _143219 _143221 s t) = s.
Proof. exact (@lem8059033 _143179 _143218 _143219 _143221 t s). Qed.
Lemma lem8059035 {_143221 : Type'} (y : _143221) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem8059036 {_143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) (y : _143221) : (term12 _143179 _143218 _143219 _143221 s t y) = (s y).
Proof. exact (MK_COMB (@lem8059034 _143179 _143218 _143219 _143221 t s) (@lem8059035 _143221 y)). Qed.
Lemma lem8059037 {_143218 : Type'} : (@eq _143218) = (@eq _143218).
Proof. exact (eq_refl (@eq _143218)). Qed.
Lemma lem8059038 {_143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) (y : _143221) : (term13 _143179 _143218 _143219 _143221 s t y) = (term14 _143218 _143221 s y).
Proof. exact (MK_COMB (@lem8059037 _143218) (@lem8059036 _143179 _143218 _143219 _143221 t s y)). Qed.
Lemma lem8059039 {_143218 : Type'} (x : _143218) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8059040 {_143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) (y : _143221) (x : _143218) : ((term12 _143179 _143218 _143219 _143221 s t y) = x) = ((s y) = x).
Proof. exact (MK_COMB (@lem8059038 _143179 _143218 _143219 _143221 t s y) (@lem8059039 _143218 x)). Qed.
Lemma lem8059043 {_143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) (x : _143218) : (term15 _143179 _143218 _143219 _143221 s t x) = (term16 _143218 _143221 s x).
Proof. exact (fun_ext (fun y : _143221 => @lem8059040 _143179 _143218 _143219 _143221 t s y x)). Qed.
Lemma lem8059044 {_143221 : Type'} : (@ε _143221) = (@ε _143221).
Proof. exact (eq_refl (@ε _143221)). Qed.
Lemma lem8059045 {_143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) (x : _143218) : (term24 _143179 _143218 _143219 _143221 s t x) = (term25 _143218 _143221 s x).
Proof. exact (MK_COMB (@lem8059044 _143221) (@lem8059043 _143179 _143218 _143219 _143221 t s x)). Qed.
Lemma lem8059048 {_143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (f : _143219) (s : _143221 -> _143218) (x : _143218) : (term26 _143179 _143218 _143219 _143221 f s t x) = (term27 _143179 _143218 _143219 _143221 t f s x).
Proof. exact (MK_COMB (@lem8059026 _143179 _143218 _143219 _143221 s t f) (@lem8059045 _143179 _143218 _143219 _143221 t s x)). Qed.
Lemma lem8059049 {_143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (f : _143219) (s : _143221 -> _143218) (x : _143218) : (term28 _143179 _143218 _143219 _143221 f s t x) = (term29 _143179 _143218 _143219 _143221 t f s x).
Proof. exact (MK_COMB (@lem8059020 _143179 _143218 _143219 _143221 t s x) (@lem8059048 _143179 _143218 _143219 _143221 t f s x)). Qed.
Lemma lem8059050 {_143179 _143218 _143219 _143221 : Type'} (clauses : type1639 _143179 _143218 _143219 _143221) (f : _143219) (x : _143218) : (@CASEWISE _143179 _143221 _143218 _143219 clauses f x) = (@CASEWISE _143179 _143221 _143218 _143219 clauses f x).
Proof. exact (eq_refl (@CASEWISE _143179 _143221 _143218 _143219 clauses f x)). Qed.
Lemma lem8059051 {_143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) (clauses : type1639 _143179 _143218 _143219 _143221) (f : _143219) (x : _143218) : (term9 _143179 _143218 _143219 _143221 s t clauses f x) = (term30 _143179 _143218 _143219 _143221 t s clauses f x).
Proof. exact (MK_COMB (@lem8059049 _143179 _143218 _143219 _143221 t f s x) (@lem8059050 _143179 _143218 _143219 _143221 clauses f x)). Qed.
Lemma lem8059052 {_143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) (clauses : type1639 _143179 _143218 _143219 _143221) (f : _143219) (x : _143218) : (term8 _143179 _143218 _143219 _143221 s t clauses f x) = (term30 _143179 _143218 _143219 _143221 t s clauses f x).
Proof. exact (TRANS (@lem8058993 _143179 _143218 _143219 _143221 s t clauses f x) (@lem8059051 _143179 _143218 _143219 _143221 t s clauses f x)). Qed.
Lemma lem8059053 {_143179 : Type'} : (@eq _143179) = (@eq _143179).
Proof. exact (eq_refl (@eq _143179)). Qed.
Lemma lem8059054 {_143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) (clauses : type1639 _143179 _143218 _143219 _143221) (f : _143219) (x : _143218) : (term31 _143179 _143218 _143219 _143221 s t clauses f x) = (term32 _143179 _143218 _143219 _143221 t s clauses f x).
Proof. exact (MK_COMB (@lem8059053 _143179) (@lem8059052 _143179 _143218 _143219 _143221 t s clauses f x)). Qed.
Lemma lem8059065 {_143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) (clauses : type1639 _143179 _143218 _143219 _143221) (f : _143219) (x : _143218) : (term30 _143179 _143218 _143219 _143221 t s clauses f x) = (term30 _143179 _143218 _143219 _143221 t s clauses f x).
Proof. exact (eq_refl (term30 _143179 _143218 _143219 _143221 t s clauses f x)). Qed.
Lemma lem8059066 {_143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) (clauses : type1639 _143179 _143218 _143219 _143221) (f : _143219) (x : _143218) : ((term8 _143179 _143218 _143219 _143221 s t clauses f x) = (term30 _143179 _143218 _143219 _143221 t s clauses f x)) = ((term30 _143179 _143218 _143219 _143221 t s clauses f x) = (term30 _143179 _143218 _143219 _143221 t s clauses f x)).
Proof. exact (MK_COMB (@lem8059054 _143179 _143218 _143219 _143221 t s clauses f x) (@lem8059065 _143179 _143218 _143219 _143221 t s clauses f x)). Qed.
Lemma lem8059068 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem1863 A x) (@lem1862 A x)). Qed.
Lemma lem8059069 {_143179 : Type'} (x : _143179) : (x = x) = True.
Proof. exact (@lem8059068 _143179 x). Qed.
Lemma lem8059070 {_143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) (clauses : type1639 _143179 _143218 _143219 _143221) (f : _143219) (x : _143218) : ((term30 _143179 _143218 _143219 _143221 t s clauses f x) = (term30 _143179 _143218 _143219 _143221 t s clauses f x)) = True.
Proof. exact (@lem8059069 _143179 (term30 _143179 _143218 _143219 _143221 t s clauses f x)). Qed.
Lemma lem8059071 {_143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) (clauses : type1639 _143179 _143218 _143219 _143221) (f : _143219) (x : _143218) : ((term8 _143179 _143218 _143219 _143221 s t clauses f x) = (term30 _143179 _143218 _143219 _143221 t s clauses f x)) = True.
Proof. exact (TRANS (@lem8059066 _143179 _143218 _143219 _143221 t s clauses f x) (@lem8059070 _143179 _143218 _143219 _143221 t s clauses f x)). Qed.
Lemma lem8059072 {_143170 _143178 _143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) (clauses : type1639 _143179 _143218 _143219 _143221) (f : _143219) (x : _143218) : (term33 _143170 _143178 _143179 _143218 _143219 _143221 t s clauses f x) = (True /\ True).
Proof. exact (MK_COMB (@lem8058987 _143170 _143178 _143218 _143219 f x) (@lem8059071 _143179 _143218 _143219 _143221 t s clauses f x)). Qed.
Lemma lem8059074 (t : Prop) : (True /\ t) = t.
Proof. exact (proj1 (@lem1842 t)). Qed.
Lemma lem8059075 : (True /\ True) = True.
Proof. exact (@lem8059074 True). Qed.
Lemma lem8059076 {_143170 _143178 _143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) (clauses : type1639 _143179 _143218 _143219 _143221) (f : _143219) (x : _143218) : (term33 _143170 _143178 _143179 _143218 _143219 _143221 t s clauses f x) = True.
Proof. exact (TRANS (@lem8059072 _143170 _143178 _143179 _143218 _143219 _143221 t s clauses f x) (@lem8059075)). Qed.
Lemma lem8059077 {_143170 _143178 _143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) (clauses : type1639 _143179 _143218 _143219 _143221) (f : _143219) (x : _143218) : True = (term33 _143170 _143178 _143179 _143218 _143219 _143221 t s clauses f x).
Proof. exact (SYM (@lem8059076 _143170 _143178 _143179 _143218 _143219 _143221 t s clauses f x)). Qed.
Lemma lem8059078 {_143170 _143178 _143179 _143218 _143219 _143221 : Type'} (t : type1475 _143179 _143219 _143221) (s : _143221 -> _143218) (clauses : type1639 _143179 _143218 _143219 _143221) (f : _143219) (x : _143218) : term33 _143170 _143178 _143179 _143218 _143219 _143221 t s clauses f x.
Proof. exact (EQ_MP (@lem8059077 _143170 _143178 _143179 _143218 _143219 _143221 t s clauses f x) (@lem0)). Qed.
