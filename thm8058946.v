Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_terms.
Require Import hol_axioms.
Require Import hol_type_abbrevs.
Require Import thm8058946_term_abbrevs.
Require Import thm8057570_spec.
Require Import thm8058877_spec.
Lemma lem8058878 {_143118 _143154 _143158 _143159 : Type'} : (term0 _143118 _143154 _143158 _143159) = (term1 _143118 _143154 _143158 _143159).
Proof. exact (eq_refl (term0 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8058879 {_143118 _143154 _143158 _143159 : Type'} : term1 _143118 _143154 _143158 _143159.
Proof. exact (EQ_MP (@lem8058878 _143118 _143154 _143158 _143159) (@lem8057570 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8058880 {_143118 _143154 _143158 _143159 : Type'} : term2 _143118 _143154 _143158 _143159.
Proof. exact (@lem8058879 _143118 _143154 _143158 _143159 term3). Qed.
Lemma lem8058881 {_143118 _143154 _143158 _143159 : Type'} : (term2 _143118 _143154 _143158 _143159) = (term4 _143118 _143154 _143158 _143159).
Proof. exact (eq_refl (term2 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8058882 {_143118 _143154 _143158 _143159 : Type'} : term4 _143118 _143154 _143158 _143159.
Proof. exact (EQ_MP (@lem8058881 _143118 _143154 _143158 _143159) (@lem8058880 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8058883 {_143118 _143154 _143158 _143159 : Type'} (h1 : (@CASEWISE _143118 _143154 _143158 _143159) = (term5 _143118 _143154 _143158 _143159)) : (@CASEWISE _143118 _143154 _143158 _143159) = (term5 _143118 _143154 _143158 _143159).
Proof. exact (h1). Qed.
Lemma lem8058884 {_143118 _143154 _143158 _143159 : Type'} (h1 : (@CASEWISE _143118 _143154 _143158 _143159) = (term5 _143118 _143154 _143158 _143159)) : (term5 _143118 _143154 _143158 _143159) = (@CASEWISE _143118 _143154 _143158 _143159).
Proof. exact (SYM (@lem8058883 _143118 _143154 _143158 _143159 h1)). Qed.
Lemma lem8058885 {_143118 _143154 _143158 _143159 : Type'} (h1 : (term5 _143118 _143154 _143158 _143159) = (@CASEWISE _143118 _143154 _143158 _143159)) : (term5 _143118 _143154 _143158 _143159) = (@CASEWISE _143118 _143154 _143158 _143159).
Proof. exact (h1). Qed.
Lemma lem8058886 {_143118 _143154 _143158 _143159 : Type'} (h1 : (term5 _143118 _143154 _143158 _143159) = (@CASEWISE _143118 _143154 _143158 _143159)) : (@CASEWISE _143118 _143154 _143158 _143159) = (term5 _143118 _143154 _143158 _143159).
Proof. exact (SYM (@lem8058885 _143118 _143154 _143158 _143159 h1)). Qed.
Lemma lem8058887 {_143118 _143154 _143158 _143159 : Type'} : ((@CASEWISE _143118 _143154 _143158 _143159) = (term5 _143118 _143154 _143158 _143159)) = ((term5 _143118 _143154 _143158 _143159) = (@CASEWISE _143118 _143154 _143158 _143159)).
Proof. exact (prop_ext (fun h1 : (@CASEWISE _143118 _143154 _143158 _143159) = (term5 _143118 _143154 _143158 _143159) => @lem8058884 _143118 _143154 _143158 _143159 h1) (fun h1 : (term5 _143118 _143154 _143158 _143159) = (@CASEWISE _143118 _143154 _143158 _143159) => @lem8058886 _143118 _143154 _143158 _143159 h1)). Qed.
Lemma lem8058890 {_143118 _143154 _143158 _143159 : Type'} : (term5 _143118 _143154 _143158 _143159) = (@CASEWISE _143118 _143154 _143158 _143159).
Proof. exact (EQ_MP (@lem8058887 _143118 _143154 _143158 _143159) (@lem8058877 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8058891 {_143118 _143154 _143158 _143159 : Type'} : (term5 _143118 _143154 _143158 _143159) = (@CASEWISE _143118 _143154 _143158 _143159).
Proof. exact (@lem8058890 _143118 _143154 _143158 _143159). Qed.
Lemma lem8058892 {_143118 _143154 _143158 _143159 : Type'} : (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) = (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))).
Proof. exact (eq_refl (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118)))). Qed.
Lemma lem8058893 {_143118 _143154 _143158 _143159 : Type'} : (term6 _143118 _143154 _143158 _143159) = (@CASEWISE _143118 _143154 _143158 _143159 (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118)))).
Proof. exact (MK_COMB (@lem8058891 _143118 _143154 _143158 _143159) (@lem8058892 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8058894 {_143159 : Type'} (f : _143159) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8058895 {_143118 _143154 _143158 _143159 : Type'} (f : _143159) : (term7 _143118 _143154 _143158 _143159 f) = (@CASEWISE _143118 _143154 _143158 _143159 (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) f).
Proof. exact (MK_COMB (@lem8058893 _143118 _143154 _143158 _143159) (@lem8058894 _143159 f)). Qed.
Lemma lem8058896 {_143158 : Type'} (x : _143158) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8058897 {_143118 _143154 _143158 _143159 : Type'} (f : _143159) (x : _143158) : (term8 _143118 _143154 _143158 _143159 f x) = (@CASEWISE _143118 _143154 _143158 _143159 (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) f x).
Proof. exact (MK_COMB (@lem8058895 _143118 _143154 _143158 _143159 f) (@lem8058896 _143158 x)). Qed.
Lemma lem8058898 {_143118 : Type'} : (@eq _143118) = (@eq _143118).
Proof. exact (eq_refl (@eq _143118)). Qed.
Lemma lem8058899 {_143118 _143154 _143158 _143159 : Type'} (f : _143159) (x : _143158) : (term9 _143118 _143154 _143158 _143159 f x) = (term10 _143118 _143154 _143158 _143159 f x).
Proof. exact (MK_COMB (@lem8058898 _143118) (@lem8058897 _143118 _143154 _143158 _143159 f x)). Qed.
Lemma lem8058900 {_143118 : Type'} : (term11 _143118) = (term11 _143118).
Proof. exact (eq_refl (term11 _143118)). Qed.
Lemma lem8058901 {_143118 _143154 _143158 _143159 : Type'} (f : _143159) (x : _143158) : ((term8 _143118 _143154 _143158 _143159 f x) = (term11 _143118)) = ((@CASEWISE _143118 _143154 _143158 _143159 (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) f x) = (term11 _143118)).
Proof. exact (MK_COMB (@lem8058899 _143118 _143154 _143158 _143159 f x) (@lem8058900 _143118)). Qed.
Lemma lem8058902 {_143118 _143154 _143158 _143159 : Type'} (f : _143159) : (term12 _143118 _143154 _143158 _143159 f) = (term13 _143118 _143154 _143158 _143159 f).
Proof. exact (fun_ext (fun x : _143158 => @lem8058901 _143118 _143154 _143158 _143159 f x)). Qed.
Lemma lem8058903 {_143158 : Type'} : (@all _143158) = (@all _143158).
Proof. exact (eq_refl (@all _143158)). Qed.
Lemma lem8058904 {_143118 _143154 _143158 _143159 : Type'} (f : _143159) : (term14 _143118 _143154 _143158 _143159 f) = (term15 _143118 _143154 _143158 _143159 f).
Proof. exact (MK_COMB (@lem8058903 _143158) (@lem8058902 _143118 _143154 _143158 _143159 f)). Qed.
Lemma lem8058905 {_143118 _143154 _143158 _143159 : Type'} : (term16 _143118 _143154 _143158 _143159) = (term17 _143118 _143154 _143158 _143159).
Proof. exact (fun_ext (fun f : _143159 => @lem8058904 _143118 _143154 _143158 _143159 f)). Qed.
Lemma lem8058906 {_143159 : Type'} : (@all _143159) = (@all _143159).
Proof. exact (eq_refl (@all _143159)). Qed.
Lemma lem8058907 {_143118 _143154 _143158 _143159 : Type'} : (term18 _143118 _143154 _143158 _143159) = (term19 _143118 _143154 _143158 _143159).
Proof. exact (MK_COMB (@lem8058906 _143159) (@lem8058905 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8058908 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8058909 {_143118 _143154 _143158 _143159 : Type'} : (term20 _143118 _143154 _143158 _143159) = (term21 _143118 _143154 _143158 _143159).
Proof. exact (MK_COMB (@lem8058908) (@lem8058907 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8058911 {_143118 _143154 _143158 _143159 : Type'} : (term5 _143118 _143154 _143158 _143159) = (@CASEWISE _143118 _143154 _143158 _143159).
Proof. exact (EQ_MP (@lem8058887 _143118 _143154 _143158 _143159) (@lem8058877 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8058912 {_143118 _143154 _143158 _143159 : Type'} : (term5 _143118 _143154 _143158 _143159) = (@CASEWISE _143118 _143154 _143158 _143159).
Proof. exact (@lem8058911 _143118 _143154 _143158 _143159). Qed.
Lemma lem8058913 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) : (@cons (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118)) h t) = (@cons (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118)) h t).
Proof. exact (eq_refl (@cons (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118)) h t)). Qed.
Lemma lem8058914 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) : (term22 _143118 _143154 _143158 _143159 h t) = (term23 _143118 _143154 _143158 _143159 h t).
Proof. exact (MK_COMB (@lem8058912 _143118 _143154 _143158 _143159) (@lem8058913 _143118 _143154 _143158 _143159 h t)). Qed.
Lemma lem8058915 {_143159 : Type'} (f : _143159) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8058916 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) (f : _143159) : (term24 _143118 _143154 _143158 _143159 h t f) = (term25 _143118 _143154 _143158 _143159 h t f).
Proof. exact (MK_COMB (@lem8058914 _143118 _143154 _143158 _143159 h t) (@lem8058915 _143159 f)). Qed.
Lemma lem8058917 {_143158 : Type'} (x : _143158) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8058918 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) (f : _143159) (x : _143158) : (term26 _143118 _143154 _143158 _143159 h t f x) = (term27 _143118 _143154 _143158 _143159 h t f x).
Proof. exact (MK_COMB (@lem8058916 _143118 _143154 _143158 _143159 h t f) (@lem8058917 _143158 x)). Qed.
Lemma lem8058919 {_143118 : Type'} : (@eq _143118) = (@eq _143118).
Proof. exact (eq_refl (@eq _143118)). Qed.
Lemma lem8058920 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) (f : _143159) (x : _143158) : (term28 _143118 _143154 _143158 _143159 h t f x) = (term29 _143118 _143154 _143158 _143159 h t f x).
Proof. exact (MK_COMB (@lem8058919 _143118) (@lem8058918 _143118 _143154 _143158 _143159 h t f x)). Qed.
Lemma lem8058922 {_143118 _143154 _143158 _143159 : Type'} : (term5 _143118 _143154 _143158 _143159) = (@CASEWISE _143118 _143154 _143158 _143159).
Proof. exact (EQ_MP (@lem8058887 _143118 _143154 _143158 _143159) (@lem8058877 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8058923 {_143118 _143154 _143158 _143159 : Type'} : (term5 _143118 _143154 _143158 _143159) = (@CASEWISE _143118 _143154 _143158 _143159).
Proof. exact (@lem8058922 _143118 _143154 _143158 _143159). Qed.
Lemma lem8058924 {_143118 _143154 _143158 _143159 : Type'} (t : type1633 _143118 _143154 _143158 _143159) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8058925 {_143118 _143154 _143158 _143159 : Type'} (t : type1633 _143118 _143154 _143158 _143159) : (term30 _143118 _143154 _143158 _143159 t) = (@CASEWISE _143118 _143154 _143158 _143159 t).
Proof. exact (MK_COMB (@lem8058923 _143118 _143154 _143158 _143159) (@lem8058924 _143118 _143154 _143158 _143159 t)). Qed.
Lemma lem8058926 {_143159 : Type'} (f : _143159) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8058927 {_143118 _143154 _143158 _143159 : Type'} (t : type1633 _143118 _143154 _143158 _143159) (f : _143159) : (term31 _143118 _143154 _143158 _143159 t f) = (@CASEWISE _143118 _143154 _143158 _143159 t f).
Proof. exact (MK_COMB (@lem8058925 _143118 _143154 _143158 _143159 t) (@lem8058926 _143159 f)). Qed.
Lemma lem8058928 {_143158 : Type'} (x : _143158) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8058929 {_143118 _143154 _143158 _143159 : Type'} (t : type1633 _143118 _143154 _143158 _143159) (f : _143159) (x : _143158) : (term32 _143118 _143154 _143158 _143159 t f x) = (@CASEWISE _143118 _143154 _143158 _143159 t f x).
Proof. exact (MK_COMB (@lem8058927 _143118 _143154 _143158 _143159 t f) (@lem8058928 _143158 x)). Qed.
Lemma lem8058930 {_143118 _143154 _143158 _143159 : Type'} (f : _143159) (h : type1644 _143118 _143154 _143158 _143159) (x : _143158) : (term33 _143118 _143154 _143158 _143159 f h x) = (term33 _143118 _143154 _143158 _143159 f h x).
Proof. exact (eq_refl (term33 _143118 _143154 _143158 _143159 f h x)). Qed.
Lemma lem8058931 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) (f : _143159) (x : _143158) : (term34 _143118 _143154 _143158 _143159 h t f x) = (term35 _143118 _143154 _143158 _143159 h t f x).
Proof. exact (MK_COMB (@lem8058930 _143118 _143154 _143158 _143159 f h x) (@lem8058929 _143118 _143154 _143158 _143159 t f x)). Qed.
Lemma lem8058932 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) (f : _143159) (x : _143158) : ((term26 _143118 _143154 _143158 _143159 h t f x) = (term34 _143118 _143154 _143158 _143159 h t f x)) = ((term27 _143118 _143154 _143158 _143159 h t f x) = (term35 _143118 _143154 _143158 _143159 h t f x)).
Proof. exact (MK_COMB (@lem8058920 _143118 _143154 _143158 _143159 h t f x) (@lem8058931 _143118 _143154 _143158 _143159 h t f x)). Qed.
Lemma lem8058933 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) (f : _143159) : (term36 _143118 _143154 _143158 _143159 h t f) = (term37 _143118 _143154 _143158 _143159 h t f).
Proof. exact (fun_ext (fun x : _143158 => @lem8058932 _143118 _143154 _143158 _143159 h t f x)). Qed.
Lemma lem8058934 {_143158 : Type'} : (@all _143158) = (@all _143158).
Proof. exact (eq_refl (@all _143158)). Qed.
Lemma lem8058935 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) (f : _143159) : (term38 _143118 _143154 _143158 _143159 h t f) = (term39 _143118 _143154 _143158 _143159 h t f).
Proof. exact (MK_COMB (@lem8058934 _143158) (@lem8058933 _143118 _143154 _143158 _143159 h t f)). Qed.
Lemma lem8058936 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) : (term40 _143118 _143154 _143158 _143159 h t) = (term41 _143118 _143154 _143158 _143159 h t).
Proof. exact (fun_ext (fun f : _143159 => @lem8058935 _143118 _143154 _143158 _143159 h t f)). Qed.
Lemma lem8058937 {_143159 : Type'} : (@all _143159) = (@all _143159).
Proof. exact (eq_refl (@all _143159)). Qed.
Lemma lem8058938 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) : (term42 _143118 _143154 _143158 _143159 h t) = (term43 _143118 _143154 _143158 _143159 h t).
Proof. exact (MK_COMB (@lem8058937 _143159) (@lem8058936 _143118 _143154 _143158 _143159 h t)). Qed.
Lemma lem8058939 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) : (term44 _143118 _143154 _143158 _143159 h) = (term45 _143118 _143154 _143158 _143159 h).
Proof. exact (fun_ext (fun t : type1633 _143118 _143154 _143158 _143159 => @lem8058938 _143118 _143154 _143158 _143159 h t)). Qed.
Lemma lem8058940 {_143118 _143154 _143158 _143159 : Type'} : (@all (list (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118)))) = (@all (list (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118)))).
Proof. exact (eq_refl (@all (list (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))))). Qed.
Lemma lem8058941 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) : (term46 _143118 _143154 _143158 _143159 h) = (term47 _143118 _143154 _143158 _143159 h).
Proof. exact (MK_COMB (@lem8058940 _143118 _143154 _143158 _143159) (@lem8058939 _143118 _143154 _143158 _143159 h)). Qed.
Lemma lem8058942 {_143118 _143154 _143158 _143159 : Type'} : (term48 _143118 _143154 _143158 _143159) = (term49 _143118 _143154 _143158 _143159).
Proof. exact (fun_ext (fun h : type1644 _143118 _143154 _143158 _143159 => @lem8058941 _143118 _143154 _143158 _143159 h)). Qed.
Lemma lem8058943 {_143118 _143154 _143158 _143159 : Type'} : (@all (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) = (@all (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))).
Proof. exact (eq_refl (@all (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118)))). Qed.
Lemma lem8058944 {_143118 _143154 _143158 _143159 : Type'} : (term50 _143118 _143154 _143158 _143159) = (term51 _143118 _143154 _143158 _143159).
Proof. exact (MK_COMB (@lem8058943 _143118 _143154 _143158 _143159) (@lem8058942 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8058945 {_143118 _143154 _143158 _143159 : Type'} : (term4 _143118 _143154 _143158 _143159) = (term52 _143118 _143154 _143158 _143159).
Proof. exact (MK_COMB (@lem8058909 _143118 _143154 _143158 _143159) (@lem8058944 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8058946 {_143118 _143154 _143158 _143159 : Type'} : term52 _143118 _143154 _143158 _143159.
Proof. exact (EQ_MP (@lem8058945 _143118 _143154 _143158 _143159) (@lem8058882 _143118 _143154 _143158 _143159)). Qed.
