require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_type_abbrevs;
require open hol-light.hol_terms;
symbol term0 ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (prod int int) int))) (λ y0 : El type1259, (∀ (λ y1 : El type1670, (∀ (λ y2 : El int, (∀ (λ y3 : El int, (∧ (int_le (int_of_num (NUMERAL _0)) (y0 y1 ((@̦‚ int int) y2 y3))) (∧ (int_divides (y0 y1 ((@̦‚ int int) y2 y3)) y2) (∧ (int_divides (y0 y1 ((@̦‚ int int) y2 y3)) y3) (∃ (λ y4 : El int, (∃ (λ y5 : El int, (= (y0 y1 ((@̦‚ int int) y2 y3)) (int_add (int_mul y2 y4) (int_mul y3 y5))))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))))))))));
