Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_terms.
Require Import hol_axioms.
Require Import hol_type_abbrevs.
Require Import PASTECART_EQ_term_abbrevs.
Require Import DISJ_ACI_spec.
Require Import PASTECART_FST_SND_spec.
Require Import thm0_spec.
Require Import thm10578_spec.
Require Import thm10597_spec.
Require Import thm16474_spec.
Require Import thm17045_spec.
Require Import thm17646_spec.
Require Import thm18392_spec.
Require Import thm18916_spec.
Require Import thm18917_spec.
Require Import thm18970_spec.
Require Import thm18971_spec.
Require Import thm20664_spec.
Require Import thm20665_spec.
Require Import thm20668_spec.
Require Import thm20682_spec.
Require Import thm20764_spec.
Require Import thm20780_spec.
Require Import thm20789_spec.
Require Import thm20895_spec.
Require Import thm21021_spec.
Require Import thm21114_spec.
Require Import thm21182_spec.
Require Import thm21385_spec.
Require Import thm21386_spec.
Require Import thm21394_spec.
Require Import thm21490_spec.
Require Import thm69_spec.
Lemma lem7659584 (p : Prop) : p = (term0 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem7659585 {_140423 _140433 _140434 : Type'} : (term1 _140423 _140433 _140434) = (term2 _140423 _140433 _140434).
Proof. exact (@lem7659584 (term1 _140423 _140433 _140434)). Qed.
Lemma lem7659586 {_140423 _140433 _140434 : Type'} : (term2 _140423 _140433 _140434) = (term1 _140423 _140433 _140434).
Proof. exact (SYM (@lem7659585 _140423 _140433 _140434)). Qed.
Lemma lem7659587 {_140423 _140433 _140434 : Type'} (h1 : term3 _140423 _140433 _140434) : term3 _140423 _140433 _140434.
Proof. exact (h1). Qed.
Lemma lem7659588 {_140423 _140433 _140434 : Type'} : term4 _140423 _140433 _140434.
Proof. exact (@lem7659572 _140434 _140423 _140433). Qed.
Lemma lem7659593 {_140423 _140433 _140434 : Type'} (h1 : term5 _140423 _140433 _140434) : term5 _140423 _140433 _140434.
Proof. exact (h1). Qed.
Lemma lem7659594 {_140423 _140433 _140434 : Type'} : term6 _140423 _140433 _140434.
Proof. exact (fun h0 : term5 _140423 _140433 _140434 => @lem7659593 _140423 _140433 _140434 h0). Qed.
Lemma lem7659595 {_140423 _140433 _140434 : Type'} (h1 : term6 _140423 _140433 _140434) : term6 _140423 _140433 _140434.
Proof. exact (h1). Qed.
Lemma lem7659596 {_140423 _140433 _140434 : Type'} (h1 : term5 _140423 _140433 _140434) : term5 _140423 _140433 _140434.
Proof. exact (h1). Qed.
Lemma lem7659597 {_140423 _140433 _140434 : Type'} (h1 : term5 _140423 _140433 _140434) (h2 : term6 _140423 _140433 _140434) : term5 _140423 _140433 _140434.
Proof. exact (@lem7659595 _140423 _140433 _140434 h2 (@lem7659596 _140423 _140433 _140434 h1)). Qed.
Lemma lem7659598 {_140423 _140433 _140434 : Type'} (h1 : term5 _140423 _140433 _140434) : term7 _140423 _140433 _140434.
Proof. exact (fun h0 : term6 _140423 _140433 _140434 => @lem7659597 _140423 _140433 _140434 h1 h0). Qed.
Lemma lem7659599 {_140423 _140433 _140434 : Type'} (h1 : term6 _140423 _140433 _140434) : term6 _140423 _140433 _140434.
Proof. exact (h1). Qed.
Lemma lem7659600 {_140423 _140433 _140434 : Type'} (h1 : term5 _140423 _140433 _140434) (h2 : term6 _140423 _140433 _140434) : term5 _140423 _140433 _140434.
Proof. exact (@lem7659598 _140423 _140433 _140434 h1 (@lem7659599 _140423 _140433 _140434 h2)). Qed.
Lemma lem7659601 {_140423 _140433 _140434 : Type'} (h1 : term6 _140423 _140433 _140434) : term6 _140423 _140433 _140434.
Proof. exact (fun h0 : term5 _140423 _140433 _140434 => @lem7659600 _140423 _140433 _140434 h0 h1). Qed.
Lemma lem7659602 {_140423 _140433 _140434 : Type'} : term8 _140423 _140433 _140434.
Proof. exact (fun h0 : term6 _140423 _140433 _140434 => @lem7659601 _140423 _140433 _140434 h0). Qed.
Lemma lem7659605 {_140423 _140433 _140434 : Type'} : term6 _140423 _140433 _140434.
Proof. exact (@lem7659602 _140423 _140433 _140434 (@lem7659594 _140423 _140433 _140434)). Qed.
Lemma lem7659606 {_140423 _140433 _140434 : Type'} : term6 _140423 _140433 _140434.
Proof. exact (@lem7659605 _140423 _140433 _140434). Qed.
Lemma lem7659620 (t : Prop) : (t -> False) = (~ t).
Proof. exact (proj2 (@lem16474 t)). Qed.
Lemma lem7659621 {_140423 _140433 _140434 : Type'} : (term9 _140423 _140433 _140434) = (term10 _140423 _140433 _140434).
Proof. exact (@lem7659620 (term4 _140423 _140433 _140434)). Qed.
Lemma lem7659626 {_140423 _140433 _140434 : Type'} : (term11 _140423 _140433 _140434) = (term11 _140423 _140433 _140434).
Proof. exact (eq_refl (term11 _140423 _140433 _140434)). Qed.
Lemma lem7659633 {_140423 _140433 _140434 : Type'} : (term5 _140423 _140433 _140434) = (term12 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7659626 _140423 _140433 _140434) (@lem7659621 _140423 _140433 _140434)). Qed.
Lemma lem7659634 {_140423 _140433 _140434 : Type'} (z : type3 _140423 _140433 _140434) : ((term13 _140423 _140433 _140434 z) = z) = ((term13 _140423 _140433 _140434 z) = z).
Proof. exact (eq_refl ((term13 _140423 _140433 _140434 z) = z)). Qed.
Lemma lem7659635 {_140423 _140433 _140434 : Type'} : (term14 _140423 _140433 _140434) = (term14 _140423 _140433 _140434).
Proof. exact (fun_ext (fun z : type3 _140423 _140433 _140434 => @lem7659634 _140423 _140433 _140434 z)). Qed.
Lemma lem7659636 {_140423 _140433 _140434 : Type'} : (@all (cart _140433 (finite_sum _140423 _140434))) = (@all (cart _140433 (finite_sum _140423 _140434))).
Proof. exact (eq_refl (@all (cart _140433 (finite_sum _140423 _140434)))). Qed.
Lemma lem7659637 {_140423 _140433 _140434 : Type'} : (term4 _140423 _140433 _140434) = (term4 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7659636 _140423 _140433 _140434) (@lem7659635 _140423 _140433 _140434)). Qed.
Lemma lem7659638 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem7659639 {_140423 _140433 _140434 : Type'} : (term10 _140423 _140433 _140434) = (term10 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7659638) (@lem7659637 _140423 _140433 _140434)). Qed.
Lemma lem7659648 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : ((x = y) = (term15 _140423 _140433 _140434 x y)) = ((x = y) = (term15 _140423 _140433 _140434 x y)).
Proof. exact (eq_refl ((x = y) = (term15 _140423 _140433 _140434 x y))). Qed.
Lemma lem7659649 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term16 _140423 _140433 _140434 x) = (term16 _140423 _140433 _140434 x).
Proof. exact (fun_ext (fun y : type3 _140423 _140433 _140434 => @lem7659648 _140423 _140433 _140434 x y)). Qed.
Lemma lem7659650 {_140423 _140433 _140434 : Type'} : (@all (cart _140433 (finite_sum _140423 _140434))) = (@all (cart _140433 (finite_sum _140423 _140434))).
Proof. exact (eq_refl (@all (cart _140433 (finite_sum _140423 _140434)))). Qed.
Lemma lem7659651 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term17 _140423 _140433 _140434 x) = (term17 _140423 _140433 _140434 x).
Proof. exact (MK_COMB (@lem7659650 _140423 _140433 _140434) (@lem7659649 _140423 _140433 _140434 x)). Qed.
Lemma lem7659652 {_140423 _140433 _140434 : Type'} : (term18 _140423 _140433 _140434) = (term18 _140423 _140433 _140434).
Proof. exact (fun_ext (fun x : type3 _140423 _140433 _140434 => @lem7659651 _140423 _140433 _140434 x)). Qed.
Lemma lem7659653 {_140423 _140433 _140434 : Type'} : (@all (cart _140433 (finite_sum _140423 _140434))) = (@all (cart _140433 (finite_sum _140423 _140434))).
Proof. exact (eq_refl (@all (cart _140433 (finite_sum _140423 _140434)))). Qed.
Lemma lem7659654 {_140423 _140433 _140434 : Type'} : (term1 _140423 _140433 _140434) = (term1 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7659653 _140423 _140433 _140434) (@lem7659652 _140423 _140433 _140434)). Qed.
Lemma lem7659655 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem7659656 {_140423 _140433 _140434 : Type'} : (term3 _140423 _140433 _140434) = (term3 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7659655) (@lem7659654 _140423 _140433 _140434)). Qed.
Lemma lem7659657 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem7659658 {_140423 _140433 _140434 : Type'} : (term11 _140423 _140433 _140434) = (term11 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7659657) (@lem7659656 _140423 _140433 _140434)). Qed.
Lemma lem7659659 {_140423 _140433 _140434 : Type'} : (term12 _140423 _140433 _140434) = (term12 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7659658 _140423 _140433 _140434) (@lem7659639 _140423 _140433 _140434)). Qed.
Lemma lem7659684 {_140423 _140433 _140434 : Type'} : (term5 _140423 _140433 _140434) = (term12 _140423 _140433 _140434).
Proof. exact (TRANS (@lem7659633 _140423 _140433 _140434) (@lem7659659 _140423 _140433 _140434)). Qed.
Lemma lem7659685 {_140423 _140433 _140434 : Type'} : (term12 _140423 _140433 _140434) = (term5 _140423 _140433 _140434).
Proof. exact (SYM (@lem7659684 _140423 _140433 _140434)). Qed.
Lemma lem7659686 {_140423 _140433 _140434 : Type'} (h1 : term3 _140423 _140433 _140434) : term3 _140423 _140433 _140434.
Proof. exact (h1). Qed.
Lemma lem7659687 {_140423 _140433 _140434 : Type'} (h1 : term4 _140423 _140433 _140434) : term4 _140423 _140433 _140434.
Proof. exact (h1). Qed.
Lemma lem7659698 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term19 _140423 _140433 _140434 x y) = (term20 _140423 _140433 _140434 x y).
Proof. exact (@lem17045 ((@fstcart _140433 _140423 _140434 x) = (@fstcart _140433 _140423 _140434 y)) ((@sndcart _140433 _140423 _140434 x) = (@sndcart _140433 _140423 _140434 y))). Qed.
Lemma lem7659704 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term21 _140423 _140433 _140434 x y) = (term21 _140423 _140433 _140434 x y).
Proof. exact (eq_refl (term21 _140423 _140433 _140434 x y)). Qed.
Lemma lem7659706 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term22 _140423 _140433 _140434 x y) = (term22 _140423 _140433 _140434 x y).
Proof. exact (eq_refl (term22 _140423 _140433 _140434 x y)). Qed.
Lemma lem7659707 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term23 _140423 _140433 _140434 x y) = (term24 _140423 _140433 _140434 x y).
Proof. exact (MK_COMB (@lem7659706 _140423 _140433 _140434 x y) (@lem7659698 _140423 _140433 _140434 x y)). Qed.
Lemma lem7659708 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem7659709 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term25 _140423 _140433 _140434 x y) = (term26 _140423 _140433 _140434 x y).
Proof. exact (MK_COMB (@lem7659708) (@lem7659707 _140423 _140433 _140434 x y)). Qed.
Lemma lem7659710 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term27 _140423 _140433 _140434 x y) = (term28 _140423 _140433 _140434 x y).
Proof. exact (MK_COMB (@lem7659709 _140423 _140433 _140434 x y) (@lem7659704 _140423 _140433 _140434 x y)). Qed.
Lemma lem7659711 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term29 _140423 _140433 _140434 x y) = (term27 _140423 _140433 _140434 x y).
Proof. exact (@lem17646 (x = y) (term15 _140423 _140433 _140434 x y)). Qed.
Lemma lem7659712 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term29 _140423 _140433 _140434 x y) = (term28 _140423 _140433 _140434 x y).
Proof. exact (TRANS (@lem7659711 _140423 _140433 _140434 x y) (@lem7659710 _140423 _140433 _140434 x y)). Qed.
Lemma lem7659713 {_140423 _140433 _140434 : Type'} (P : type25 _140423 _140433 _140434) : (term30 _140423 _140433 _140434 P) = (term31 _140423 _140433 _140434 P).
Proof. exact (@lem18392 (type3 _140423 _140433 _140434) P). Qed.
Lemma lem7659714 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term32 _140423 _140433 _140434 x) = (term33 _140423 _140433 _140434 x).
Proof. exact (@lem7659713 _140423 _140433 _140434 (term16 _140423 _140433 _140434 x)). Qed.
Lemma lem7659715 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term34 _140423 _140433 _140434 x y) = ((x = y) = (term15 _140423 _140433 _140434 x y)).
Proof. exact (eq_refl (term34 _140423 _140433 _140434 x y)). Qed.
Lemma lem7659716 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem7659717 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term35 _140423 _140433 _140434 x y) = (term29 _140423 _140433 _140434 x y).
Proof. exact (MK_COMB (@lem7659716) (@lem7659715 _140423 _140433 _140434 x y)). Qed.
Lemma lem7659718 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term35 _140423 _140433 _140434 x y) = (term28 _140423 _140433 _140434 x y).
Proof. exact (TRANS (@lem7659717 _140423 _140433 _140434 x y) (@lem7659712 _140423 _140433 _140434 x y)). Qed.
Lemma lem7659719 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term36 _140423 _140433 _140434 x) = (term37 _140423 _140433 _140434 x).
Proof. exact (fun_ext (fun y : type3 _140423 _140433 _140434 => @lem7659718 _140423 _140433 _140434 x y)). Qed.
Lemma lem7659720 {_140423 _140433 _140434 : Type'} : (@ex (cart _140433 (finite_sum _140423 _140434))) = (@ex (cart _140433 (finite_sum _140423 _140434))).
Proof. exact (eq_refl (@ex (cart _140433 (finite_sum _140423 _140434)))). Qed.
Lemma lem7659721 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term33 _140423 _140433 _140434 x) = (term38 _140423 _140433 _140434 x).
Proof. exact (MK_COMB (@lem7659720 _140423 _140433 _140434) (@lem7659719 _140423 _140433 _140434 x)). Qed.
Lemma lem7659722 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term32 _140423 _140433 _140434 x) = (term38 _140423 _140433 _140434 x).
Proof. exact (TRANS (@lem7659714 _140423 _140433 _140434 x) (@lem7659721 _140423 _140433 _140434 x)). Qed.
Lemma lem7659723 {_140423 _140433 _140434 : Type'} (P : type25 _140423 _140433 _140434) : (term30 _140423 _140433 _140434 P) = (term31 _140423 _140433 _140434 P).
Proof. exact (@lem18392 (type3 _140423 _140433 _140434) P). Qed.
Lemma lem7659724 {_140423 _140433 _140434 : Type'} : (term3 _140423 _140433 _140434) = (term39 _140423 _140433 _140434).
Proof. exact (@lem7659723 _140423 _140433 _140434 (term18 _140423 _140433 _140434)). Qed.
Lemma lem7659725 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term40 _140423 _140433 _140434 x) = (term17 _140423 _140433 _140434 x).
Proof. exact (eq_refl (term40 _140423 _140433 _140434 x)). Qed.
Lemma lem7659726 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem7659727 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term41 _140423 _140433 _140434 x) = (term32 _140423 _140433 _140434 x).
Proof. exact (MK_COMB (@lem7659726) (@lem7659725 _140423 _140433 _140434 x)). Qed.
Lemma lem7659728 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term41 _140423 _140433 _140434 x) = (term38 _140423 _140433 _140434 x).
Proof. exact (TRANS (@lem7659727 _140423 _140433 _140434 x) (@lem7659722 _140423 _140433 _140434 x)). Qed.
Lemma lem7659729 {_140423 _140433 _140434 : Type'} : (term42 _140423 _140433 _140434) = (term43 _140423 _140433 _140434).
Proof. exact (fun_ext (fun x : type3 _140423 _140433 _140434 => @lem7659728 _140423 _140433 _140434 x)). Qed.
Lemma lem7659730 {_140423 _140433 _140434 : Type'} : (@ex (cart _140433 (finite_sum _140423 _140434))) = (@ex (cart _140433 (finite_sum _140423 _140434))).
Proof. exact (eq_refl (@ex (cart _140433 (finite_sum _140423 _140434)))). Qed.
Lemma lem7659731 {_140423 _140433 _140434 : Type'} : (term39 _140423 _140433 _140434) = (term44 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7659730 _140423 _140433 _140434) (@lem7659729 _140423 _140433 _140434)). Qed.
Lemma lem7659732 {_140423 _140433 _140434 : Type'} : (term3 _140423 _140433 _140434) = (term44 _140423 _140433 _140434).
Proof. exact (TRANS (@lem7659724 _140423 _140433 _140434) (@lem7659731 _140423 _140433 _140434)). Qed.
Lemma lem7659738 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term45 A P Q) = (term46 A P Q).
Proof. exact (EQ_MP (@lem18971 A P Q) (@lem18970 A P Q)). Qed.
Lemma lem7659739 {_140423 _140433 _140434 : Type'} (P : type25 _140423 _140433 _140434) (Q : type25 _140423 _140433 _140434) : (term47 _140423 _140433 _140434 P Q) = (term48 _140423 _140433 _140434 P Q).
Proof. exact (@lem7659738 (type3 _140423 _140433 _140434) P Q). Qed.
Lemma lem7659740 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term49 _140423 _140433 _140434 x) = (term50 _140423 _140433 _140434 x).
Proof. exact (@lem7659739 _140423 _140433 _140434 (term51 _140423 _140433 _140434 x) (term52 _140423 _140433 _140434 x)). Qed.
Lemma lem7659741 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term53 _140423 _140433 _140434 x y) = (term24 _140423 _140433 _140434 x y).
Proof. exact (eq_refl (term53 _140423 _140433 _140434 x y)). Qed.
Lemma lem7659742 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem7659743 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term54 _140423 _140433 _140434 x y) = (term26 _140423 _140433 _140434 x y).
Proof. exact (MK_COMB (@lem7659742) (@lem7659741 _140423 _140433 _140434 x y)). Qed.
Lemma lem7659744 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term55 _140423 _140433 _140434 x y) = (term21 _140423 _140433 _140434 x y).
Proof. exact (eq_refl (term55 _140423 _140433 _140434 x y)). Qed.
Lemma lem7659745 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term56 _140423 _140433 _140434 x y) = (term28 _140423 _140433 _140434 x y).
Proof. exact (MK_COMB (@lem7659743 _140423 _140433 _140434 x y) (@lem7659744 _140423 _140433 _140434 x y)). Qed.
Lemma lem7659746 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term57 _140423 _140433 _140434 x) = (term37 _140423 _140433 _140434 x).
Proof. exact (fun_ext (fun y : type3 _140423 _140433 _140434 => @lem7659745 _140423 _140433 _140434 x y)). Qed.
Lemma lem7659747 {_140423 _140433 _140434 : Type'} : (@ex (cart _140433 (finite_sum _140423 _140434))) = (@ex (cart _140433 (finite_sum _140423 _140434))).
Proof. exact (eq_refl (@ex (cart _140433 (finite_sum _140423 _140434)))). Qed.
Lemma lem7659748 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term49 _140423 _140433 _140434 x) = (term38 _140423 _140433 _140434 x).
Proof. exact (MK_COMB (@lem7659747 _140423 _140433 _140434) (@lem7659746 _140423 _140433 _140434 x)). Qed.
Lemma lem7659749 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem7659750 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term58 _140423 _140433 _140434 x) = (term59 _140423 _140433 _140434 x).
Proof. exact (MK_COMB (@lem7659749) (@lem7659748 _140423 _140433 _140434 x)). Qed.
Lemma lem7659751 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term53 _140423 _140433 _140434 x y) = (term24 _140423 _140433 _140434 x y).
Proof. exact (eq_refl (term53 _140423 _140433 _140434 x y)). Qed.
Lemma lem7659752 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term60 _140423 _140433 _140434 x) = (term51 _140423 _140433 _140434 x).
Proof. exact (fun_ext (fun y : type3 _140423 _140433 _140434 => @lem7659751 _140423 _140433 _140434 x y)). Qed.
Lemma lem7659753 {_140423 _140433 _140434 : Type'} : (@ex (cart _140433 (finite_sum _140423 _140434))) = (@ex (cart _140433 (finite_sum _140423 _140434))).
Proof. exact (eq_refl (@ex (cart _140433 (finite_sum _140423 _140434)))). Qed.
Lemma lem7659754 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term61 _140423 _140433 _140434 x) = (term62 _140423 _140433 _140434 x).
Proof. exact (MK_COMB (@lem7659753 _140423 _140433 _140434) (@lem7659752 _140423 _140433 _140434 x)). Qed.
Lemma lem7659755 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem7659756 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term63 _140423 _140433 _140434 x) = (term64 _140423 _140433 _140434 x).
Proof. exact (MK_COMB (@lem7659755) (@lem7659754 _140423 _140433 _140434 x)). Qed.
Lemma lem7659757 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term55 _140423 _140433 _140434 x y) = (term21 _140423 _140433 _140434 x y).
Proof. exact (eq_refl (term55 _140423 _140433 _140434 x y)). Qed.
Lemma lem7659758 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term65 _140423 _140433 _140434 x) = (term52 _140423 _140433 _140434 x).
Proof. exact (fun_ext (fun y : type3 _140423 _140433 _140434 => @lem7659757 _140423 _140433 _140434 x y)). Qed.
Lemma lem7659759 {_140423 _140433 _140434 : Type'} : (@ex (cart _140433 (finite_sum _140423 _140434))) = (@ex (cart _140433 (finite_sum _140423 _140434))).
Proof. exact (eq_refl (@ex (cart _140433 (finite_sum _140423 _140434)))). Qed.
Lemma lem7659760 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term66 _140423 _140433 _140434 x) = (term67 _140423 _140433 _140434 x).
Proof. exact (MK_COMB (@lem7659759 _140423 _140433 _140434) (@lem7659758 _140423 _140433 _140434 x)). Qed.
Lemma lem7659761 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term50 _140423 _140433 _140434 x) = (term68 _140423 _140433 _140434 x).
Proof. exact (MK_COMB (@lem7659756 _140423 _140433 _140434 x) (@lem7659760 _140423 _140433 _140434 x)). Qed.
Lemma lem7659762 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : ((term49 _140423 _140433 _140434 x) = (term50 _140423 _140433 _140434 x)) = ((term38 _140423 _140433 _140434 x) = (term68 _140423 _140433 _140434 x)).
Proof. exact (MK_COMB (@lem7659750 _140423 _140433 _140434 x) (@lem7659761 _140423 _140433 _140434 x)). Qed.
Lemma lem7659763 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term38 _140423 _140433 _140434 x) = (term68 _140423 _140433 _140434 x).
Proof. exact (EQ_MP (@lem7659762 _140423 _140433 _140434 x) (@lem7659740 _140423 _140433 _140434 x)). Qed.
Lemma lem7659860 {_140423 _140433 _140434 : Type'} : (term43 _140423 _140433 _140434) = (term69 _140423 _140433 _140434).
Proof. exact (fun_ext (fun x : type3 _140423 _140433 _140434 => @lem7659763 _140423 _140433 _140434 x)). Qed.
Lemma lem7659861 {_140423 _140433 _140434 : Type'} : (@ex (cart _140433 (finite_sum _140423 _140434))) = (@ex (cart _140433 (finite_sum _140423 _140434))).
Proof. exact (eq_refl (@ex (cart _140433 (finite_sum _140423 _140434)))). Qed.
Lemma lem7659862 {_140423 _140433 _140434 : Type'} : (term44 _140423 _140433 _140434) = (term70 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7659861 _140423 _140433 _140434) (@lem7659860 _140423 _140433 _140434)). Qed.
Lemma lem7659864 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term45 A P Q) = (term46 A P Q).
Proof. exact (EQ_MP (@lem18971 A P Q) (@lem18970 A P Q)). Qed.
Lemma lem7659865 {_140423 _140433 _140434 : Type'} (P : type25 _140423 _140433 _140434) (Q : type25 _140423 _140433 _140434) : (term47 _140423 _140433 _140434 P Q) = (term48 _140423 _140433 _140434 P Q).
Proof. exact (@lem7659864 (type3 _140423 _140433 _140434) P Q). Qed.
Lemma lem7659866 {_140423 _140433 _140434 : Type'} : (term71 _140423 _140433 _140434) = (term72 _140423 _140433 _140434).
Proof. exact (@lem7659865 _140423 _140433 _140434 (term73 _140423 _140433 _140434) (term74 _140423 _140433 _140434)). Qed.
Lemma lem7659867 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term75 _140423 _140433 _140434 x) = (term62 _140423 _140433 _140434 x).
Proof. exact (eq_refl (term75 _140423 _140433 _140434 x)). Qed.
Lemma lem7659868 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem7659869 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term76 _140423 _140433 _140434 x) = (term64 _140423 _140433 _140434 x).
Proof. exact (MK_COMB (@lem7659868) (@lem7659867 _140423 _140433 _140434 x)). Qed.
Lemma lem7659870 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term77 _140423 _140433 _140434 x) = (term67 _140423 _140433 _140434 x).
Proof. exact (eq_refl (term77 _140423 _140433 _140434 x)). Qed.
Lemma lem7659871 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term78 _140423 _140433 _140434 x) = (term68 _140423 _140433 _140434 x).
Proof. exact (MK_COMB (@lem7659869 _140423 _140433 _140434 x) (@lem7659870 _140423 _140433 _140434 x)). Qed.
Lemma lem7659872 {_140423 _140433 _140434 : Type'} : (term79 _140423 _140433 _140434) = (term69 _140423 _140433 _140434).
Proof. exact (fun_ext (fun x : type3 _140423 _140433 _140434 => @lem7659871 _140423 _140433 _140434 x)). Qed.
Lemma lem7659873 {_140423 _140433 _140434 : Type'} : (@ex (cart _140433 (finite_sum _140423 _140434))) = (@ex (cart _140433 (finite_sum _140423 _140434))).
Proof. exact (eq_refl (@ex (cart _140433 (finite_sum _140423 _140434)))). Qed.
Lemma lem7659874 {_140423 _140433 _140434 : Type'} : (term71 _140423 _140433 _140434) = (term70 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7659873 _140423 _140433 _140434) (@lem7659872 _140423 _140433 _140434)). Qed.
Lemma lem7659875 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem7659876 {_140423 _140433 _140434 : Type'} : (term80 _140423 _140433 _140434) = (term81 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7659875) (@lem7659874 _140423 _140433 _140434)). Qed.
Lemma lem7659877 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term75 _140423 _140433 _140434 x) = (term62 _140423 _140433 _140434 x).
Proof. exact (eq_refl (term75 _140423 _140433 _140434 x)). Qed.
Lemma lem7659878 {_140423 _140433 _140434 : Type'} : (term82 _140423 _140433 _140434) = (term73 _140423 _140433 _140434).
Proof. exact (fun_ext (fun x : type3 _140423 _140433 _140434 => @lem7659877 _140423 _140433 _140434 x)). Qed.
Lemma lem7659879 {_140423 _140433 _140434 : Type'} : (@ex (cart _140433 (finite_sum _140423 _140434))) = (@ex (cart _140433 (finite_sum _140423 _140434))).
Proof. exact (eq_refl (@ex (cart _140433 (finite_sum _140423 _140434)))). Qed.
Lemma lem7659880 {_140423 _140433 _140434 : Type'} : (term83 _140423 _140433 _140434) = (term84 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7659879 _140423 _140433 _140434) (@lem7659878 _140423 _140433 _140434)). Qed.
Lemma lem7659881 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem7659882 {_140423 _140433 _140434 : Type'} : (term85 _140423 _140433 _140434) = (term86 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7659881) (@lem7659880 _140423 _140433 _140434)). Qed.
Lemma lem7659883 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term77 _140423 _140433 _140434 x) = (term67 _140423 _140433 _140434 x).
Proof. exact (eq_refl (term77 _140423 _140433 _140434 x)). Qed.
Lemma lem7659884 {_140423 _140433 _140434 : Type'} : (term87 _140423 _140433 _140434) = (term74 _140423 _140433 _140434).
Proof. exact (fun_ext (fun x : type3 _140423 _140433 _140434 => @lem7659883 _140423 _140433 _140434 x)). Qed.
Lemma lem7659885 {_140423 _140433 _140434 : Type'} : (@ex (cart _140433 (finite_sum _140423 _140434))) = (@ex (cart _140433 (finite_sum _140423 _140434))).
Proof. exact (eq_refl (@ex (cart _140433 (finite_sum _140423 _140434)))). Qed.
Lemma lem7659886 {_140423 _140433 _140434 : Type'} : (term88 _140423 _140433 _140434) = (term89 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7659885 _140423 _140433 _140434) (@lem7659884 _140423 _140433 _140434)). Qed.
Lemma lem7659887 {_140423 _140433 _140434 : Type'} : (term72 _140423 _140433 _140434) = (term90 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7659882 _140423 _140433 _140434) (@lem7659886 _140423 _140433 _140434)). Qed.
Lemma lem7659888 {_140423 _140433 _140434 : Type'} : ((term71 _140423 _140433 _140434) = (term72 _140423 _140433 _140434)) = ((term70 _140423 _140433 _140434) = (term90 _140423 _140433 _140434)).
Proof. exact (MK_COMB (@lem7659876 _140423 _140433 _140434) (@lem7659887 _140423 _140433 _140434)). Qed.
Lemma lem7659889 {_140423 _140433 _140434 : Type'} : (term70 _140423 _140433 _140434) = (term90 _140423 _140433 _140434).
Proof. exact (EQ_MP (@lem7659888 _140423 _140433 _140434) (@lem7659866 _140423 _140433 _140434)). Qed.
Lemma lem7659994 {_140423 _140433 _140434 : Type'} : (term44 _140423 _140433 _140434) = (term90 _140423 _140433 _140434).
Proof. exact (TRANS (@lem7659862 _140423 _140433 _140434) (@lem7659889 _140423 _140433 _140434)). Qed.
Lemma lem7659996 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term46 A P Q) = (term45 A P Q).
Proof. exact (EQ_MP (@lem18917 A P Q) (@lem18916 A P Q)). Qed.
Lemma lem7659997 {_140423 _140433 _140434 : Type'} (P : type25 _140423 _140433 _140434) (Q : type25 _140423 _140433 _140434) : (term48 _140423 _140433 _140434 P Q) = (term47 _140423 _140433 _140434 P Q).
Proof. exact (@lem7659996 (type3 _140423 _140433 _140434) P Q). Qed.
Lemma lem7659998 {_140423 _140433 _140434 : Type'} : (term72 _140423 _140433 _140434) = (term71 _140423 _140433 _140434).
Proof. exact (@lem7659997 _140423 _140433 _140434 (term73 _140423 _140433 _140434) (term74 _140423 _140433 _140434)). Qed.
Lemma lem7659999 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term75 _140423 _140433 _140434 x) = (term62 _140423 _140433 _140434 x).
Proof. exact (eq_refl (term75 _140423 _140433 _140434 x)). Qed.
Lemma lem7660000 {_140423 _140433 _140434 : Type'} : (term82 _140423 _140433 _140434) = (term73 _140423 _140433 _140434).
Proof. exact (fun_ext (fun x : type3 _140423 _140433 _140434 => @lem7659999 _140423 _140433 _140434 x)). Qed.
Lemma lem7660001 {_140423 _140433 _140434 : Type'} : (@ex (cart _140433 (finite_sum _140423 _140434))) = (@ex (cart _140433 (finite_sum _140423 _140434))).
Proof. exact (eq_refl (@ex (cart _140433 (finite_sum _140423 _140434)))). Qed.
Lemma lem7660002 {_140423 _140433 _140434 : Type'} : (term83 _140423 _140433 _140434) = (term84 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7660001 _140423 _140433 _140434) (@lem7660000 _140423 _140433 _140434)). Qed.
Lemma lem7660003 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem7660004 {_140423 _140433 _140434 : Type'} : (term85 _140423 _140433 _140434) = (term86 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7660003) (@lem7660002 _140423 _140433 _140434)). Qed.
Lemma lem7660005 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term77 _140423 _140433 _140434 x) = (term67 _140423 _140433 _140434 x).
Proof. exact (eq_refl (term77 _140423 _140433 _140434 x)). Qed.
Lemma lem7660006 {_140423 _140433 _140434 : Type'} : (term87 _140423 _140433 _140434) = (term74 _140423 _140433 _140434).
Proof. exact (fun_ext (fun x : type3 _140423 _140433 _140434 => @lem7660005 _140423 _140433 _140434 x)). Qed.
Lemma lem7660007 {_140423 _140433 _140434 : Type'} : (@ex (cart _140433 (finite_sum _140423 _140434))) = (@ex (cart _140433 (finite_sum _140423 _140434))).
Proof. exact (eq_refl (@ex (cart _140433 (finite_sum _140423 _140434)))). Qed.
Lemma lem7660008 {_140423 _140433 _140434 : Type'} : (term88 _140423 _140433 _140434) = (term89 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7660007 _140423 _140433 _140434) (@lem7660006 _140423 _140433 _140434)). Qed.
Lemma lem7660009 {_140423 _140433 _140434 : Type'} : (term72 _140423 _140433 _140434) = (term90 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7660004 _140423 _140433 _140434) (@lem7660008 _140423 _140433 _140434)). Qed.
Lemma lem7660010 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem7660011 {_140423 _140433 _140434 : Type'} : (term91 _140423 _140433 _140434) = (term92 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7660010) (@lem7660009 _140423 _140433 _140434)). Qed.
Lemma lem7660012 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term75 _140423 _140433 _140434 x) = (term62 _140423 _140433 _140434 x).
Proof. exact (eq_refl (term75 _140423 _140433 _140434 x)). Qed.
Lemma lem7660013 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem7660014 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term76 _140423 _140433 _140434 x) = (term64 _140423 _140433 _140434 x).
Proof. exact (MK_COMB (@lem7660013) (@lem7660012 _140423 _140433 _140434 x)). Qed.
Lemma lem7660015 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term77 _140423 _140433 _140434 x) = (term67 _140423 _140433 _140434 x).
Proof. exact (eq_refl (term77 _140423 _140433 _140434 x)). Qed.
Lemma lem7660016 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term78 _140423 _140433 _140434 x) = (term68 _140423 _140433 _140434 x).
Proof. exact (MK_COMB (@lem7660014 _140423 _140433 _140434 x) (@lem7660015 _140423 _140433 _140434 x)). Qed.
Lemma lem7660017 {_140423 _140433 _140434 : Type'} : (term79 _140423 _140433 _140434) = (term69 _140423 _140433 _140434).
Proof. exact (fun_ext (fun x : type3 _140423 _140433 _140434 => @lem7660016 _140423 _140433 _140434 x)). Qed.
Lemma lem7660018 {_140423 _140433 _140434 : Type'} : (@ex (cart _140433 (finite_sum _140423 _140434))) = (@ex (cart _140433 (finite_sum _140423 _140434))).
Proof. exact (eq_refl (@ex (cart _140433 (finite_sum _140423 _140434)))). Qed.
Lemma lem7660019 {_140423 _140433 _140434 : Type'} : (term71 _140423 _140433 _140434) = (term70 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7660018 _140423 _140433 _140434) (@lem7660017 _140423 _140433 _140434)). Qed.
Lemma lem7660020 {_140423 _140433 _140434 : Type'} : ((term72 _140423 _140433 _140434) = (term71 _140423 _140433 _140434)) = ((term90 _140423 _140433 _140434) = (term70 _140423 _140433 _140434)).
Proof. exact (MK_COMB (@lem7660011 _140423 _140433 _140434) (@lem7660019 _140423 _140433 _140434)). Qed.
Lemma lem7660021 {_140423 _140433 _140434 : Type'} : (term90 _140423 _140433 _140434) = (term70 _140423 _140433 _140434).
Proof. exact (EQ_MP (@lem7660020 _140423 _140433 _140434) (@lem7659998 _140423 _140433 _140434)). Qed.
Lemma lem7660023 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term46 A P Q) = (term45 A P Q).
Proof. exact (EQ_MP (@lem18917 A P Q) (@lem18916 A P Q)). Qed.
Lemma lem7660024 {_140423 _140433 _140434 : Type'} (P : type25 _140423 _140433 _140434) (Q : type25 _140423 _140433 _140434) : (term48 _140423 _140433 _140434 P Q) = (term47 _140423 _140433 _140434 P Q).
Proof. exact (@lem7660023 (type3 _140423 _140433 _140434) P Q). Qed.
Lemma lem7660025 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term50 _140423 _140433 _140434 x) = (term49 _140423 _140433 _140434 x).
Proof. exact (@lem7660024 _140423 _140433 _140434 (term51 _140423 _140433 _140434 x) (term52 _140423 _140433 _140434 x)). Qed.
Lemma lem7660026 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term53 _140423 _140433 _140434 x y) = (term24 _140423 _140433 _140434 x y).
Proof. exact (eq_refl (term53 _140423 _140433 _140434 x y)). Qed.
Lemma lem7660027 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term60 _140423 _140433 _140434 x) = (term51 _140423 _140433 _140434 x).
Proof. exact (fun_ext (fun y : type3 _140423 _140433 _140434 => @lem7660026 _140423 _140433 _140434 x y)). Qed.
Lemma lem7660028 {_140423 _140433 _140434 : Type'} : (@ex (cart _140433 (finite_sum _140423 _140434))) = (@ex (cart _140433 (finite_sum _140423 _140434))).
Proof. exact (eq_refl (@ex (cart _140433 (finite_sum _140423 _140434)))). Qed.
Lemma lem7660029 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term61 _140423 _140433 _140434 x) = (term62 _140423 _140433 _140434 x).
Proof. exact (MK_COMB (@lem7660028 _140423 _140433 _140434) (@lem7660027 _140423 _140433 _140434 x)). Qed.
Lemma lem7660030 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem7660031 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term63 _140423 _140433 _140434 x) = (term64 _140423 _140433 _140434 x).
Proof. exact (MK_COMB (@lem7660030) (@lem7660029 _140423 _140433 _140434 x)). Qed.
Lemma lem7660032 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term55 _140423 _140433 _140434 x y) = (term21 _140423 _140433 _140434 x y).
Proof. exact (eq_refl (term55 _140423 _140433 _140434 x y)). Qed.
Lemma lem7660033 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term65 _140423 _140433 _140434 x) = (term52 _140423 _140433 _140434 x).
Proof. exact (fun_ext (fun y : type3 _140423 _140433 _140434 => @lem7660032 _140423 _140433 _140434 x y)). Qed.
Lemma lem7660034 {_140423 _140433 _140434 : Type'} : (@ex (cart _140433 (finite_sum _140423 _140434))) = (@ex (cart _140433 (finite_sum _140423 _140434))).
Proof. exact (eq_refl (@ex (cart _140433 (finite_sum _140423 _140434)))). Qed.
Lemma lem7660035 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term66 _140423 _140433 _140434 x) = (term67 _140423 _140433 _140434 x).
Proof. exact (MK_COMB (@lem7660034 _140423 _140433 _140434) (@lem7660033 _140423 _140433 _140434 x)). Qed.
Lemma lem7660036 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term50 _140423 _140433 _140434 x) = (term68 _140423 _140433 _140434 x).
Proof. exact (MK_COMB (@lem7660031 _140423 _140433 _140434 x) (@lem7660035 _140423 _140433 _140434 x)). Qed.
Lemma lem7660037 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem7660038 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term93 _140423 _140433 _140434 x) = (term94 _140423 _140433 _140434 x).
Proof. exact (MK_COMB (@lem7660037) (@lem7660036 _140423 _140433 _140434 x)). Qed.
Lemma lem7660039 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term53 _140423 _140433 _140434 x y) = (term24 _140423 _140433 _140434 x y).
Proof. exact (eq_refl (term53 _140423 _140433 _140434 x y)). Qed.
Lemma lem7660040 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem7660041 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term54 _140423 _140433 _140434 x y) = (term26 _140423 _140433 _140434 x y).
Proof. exact (MK_COMB (@lem7660040) (@lem7660039 _140423 _140433 _140434 x y)). Qed.
Lemma lem7660042 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term55 _140423 _140433 _140434 x y) = (term21 _140423 _140433 _140434 x y).
Proof. exact (eq_refl (term55 _140423 _140433 _140434 x y)). Qed.
Lemma lem7660043 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term56 _140423 _140433 _140434 x y) = (term28 _140423 _140433 _140434 x y).
Proof. exact (MK_COMB (@lem7660041 _140423 _140433 _140434 x y) (@lem7660042 _140423 _140433 _140434 x y)). Qed.
Lemma lem7660044 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term57 _140423 _140433 _140434 x) = (term37 _140423 _140433 _140434 x).
Proof. exact (fun_ext (fun y : type3 _140423 _140433 _140434 => @lem7660043 _140423 _140433 _140434 x y)). Qed.
Lemma lem7660045 {_140423 _140433 _140434 : Type'} : (@ex (cart _140433 (finite_sum _140423 _140434))) = (@ex (cart _140433 (finite_sum _140423 _140434))).
Proof. exact (eq_refl (@ex (cart _140433 (finite_sum _140423 _140434)))). Qed.
Lemma lem7660046 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term49 _140423 _140433 _140434 x) = (term38 _140423 _140433 _140434 x).
Proof. exact (MK_COMB (@lem7660045 _140423 _140433 _140434) (@lem7660044 _140423 _140433 _140434 x)). Qed.
Lemma lem7660047 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : ((term50 _140423 _140433 _140434 x) = (term49 _140423 _140433 _140434 x)) = ((term68 _140423 _140433 _140434 x) = (term38 _140423 _140433 _140434 x)).
Proof. exact (MK_COMB (@lem7660038 _140423 _140433 _140434 x) (@lem7660046 _140423 _140433 _140434 x)). Qed.
Lemma lem7660048 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term68 _140423 _140433 _140434 x) = (term38 _140423 _140433 _140434 x).
Proof. exact (EQ_MP (@lem7660047 _140423 _140433 _140434 x) (@lem7660025 _140423 _140433 _140434 x)). Qed.
Lemma lem7660049 {_140423 _140433 _140434 : Type'} : (term69 _140423 _140433 _140434) = (term43 _140423 _140433 _140434).
Proof. exact (fun_ext (fun x : type3 _140423 _140433 _140434 => @lem7660048 _140423 _140433 _140434 x)). Qed.
Lemma lem7660050 {_140423 _140433 _140434 : Type'} : (@ex (cart _140433 (finite_sum _140423 _140434))) = (@ex (cart _140433 (finite_sum _140423 _140434))).
Proof. exact (eq_refl (@ex (cart _140433 (finite_sum _140423 _140434)))). Qed.
Lemma lem7660051 {_140423 _140433 _140434 : Type'} : (term70 _140423 _140433 _140434) = (term44 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7660050 _140423 _140433 _140434) (@lem7660049 _140423 _140433 _140434)). Qed.
Lemma lem7660052 {_140423 _140433 _140434 : Type'} : (term90 _140423 _140433 _140434) = (term44 _140423 _140433 _140434).
Proof. exact (TRANS (@lem7660021 _140423 _140433 _140434) (@lem7660051 _140423 _140433 _140434)). Qed.
Lemma lem7660053 {_140423 _140433 _140434 : Type'} : (term44 _140423 _140433 _140434) = (term44 _140423 _140433 _140434).
Proof. exact (TRANS (@lem7659994 _140423 _140433 _140434) (@lem7660052 _140423 _140433 _140434)). Qed.
Lemma lem7660054 {_140423 _140433 _140434 : Type'} : (term3 _140423 _140433 _140434) = (term44 _140423 _140433 _140434).
Proof. exact (TRANS (@lem7659732 _140423 _140433 _140434) (@lem7660053 _140423 _140433 _140434)). Qed.
Lemma lem7660055 {_140423 _140433 _140434 : Type'} (h1 : term3 _140423 _140433 _140434) : term44 _140423 _140433 _140434.
Proof. exact (EQ_MP (@lem7660054 _140423 _140433 _140434) (@lem7659686 _140423 _140433 _140434 h1)). Qed.
Lemma lem7660056 {_140423 _140433 _140434 : Type'} (z : type3 _140423 _140433 _140434) : ((term13 _140423 _140433 _140434 z) = z) = ((term13 _140423 _140433 _140434 z) = z).
Proof. exact (eq_refl ((term13 _140423 _140433 _140434 z) = z)). Qed.
Lemma lem7660057 {_140423 _140433 _140434 : Type'} : (term14 _140423 _140433 _140434) = (term14 _140423 _140433 _140434).
Proof. exact (fun_ext (fun z : type3 _140423 _140433 _140434 => @lem7660056 _140423 _140433 _140434 z)). Qed.
Lemma lem7660058 {_140423 _140433 _140434 : Type'} : (@all (cart _140433 (finite_sum _140423 _140434))) = (@all (cart _140433 (finite_sum _140423 _140434))).
Proof. exact (eq_refl (@all (cart _140433 (finite_sum _140423 _140434)))). Qed.
Lemma lem7660067 {_140423 _140433 _140434 : Type'} : (term4 _140423 _140433 _140434) = (term4 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7660058 _140423 _140433 _140434) (@lem7660057 _140423 _140433 _140434)). Qed.
Lemma lem7660068 {_140423 _140433 _140434 : Type'} (h1 : term4 _140423 _140433 _140434) : term4 _140423 _140433 _140434.
Proof. exact (EQ_MP (@lem7660067 _140423 _140433 _140434) (@lem7659687 _140423 _140433 _140434 h1)). Qed.
Lemma lem7660069 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (h1 : term38 _140423 _140433 _140434 x) : term38 _140423 _140433 _140434 x.
Proof. exact (h1). Qed.
Lemma lem7660083 {_140423 _140433 _140434 : Type'} (z : type3 _140423 _140433 _140434) : ((term13 _140423 _140433 _140434 z) = z) = ((term13 _140423 _140433 _140434 z) = z).
Proof. exact (eq_refl ((term13 _140423 _140433 _140434 z) = z)). Qed.
Lemma lem7660084 {_140423 _140433 _140434 : Type'} : (term14 _140423 _140433 _140434) = (term14 _140423 _140433 _140434).
Proof. exact (fun_ext (fun z : type3 _140423 _140433 _140434 => @lem7660083 _140423 _140433 _140434 z)). Qed.
Lemma lem7660085 {_140423 _140433 _140434 : Type'} : (@all (cart _140433 (finite_sum _140423 _140434))) = (@all (cart _140433 (finite_sum _140423 _140434))).
Proof. exact (eq_refl (@all (cart _140433 (finite_sum _140423 _140434)))). Qed.
Lemma lem7660086 {_140423 _140433 _140434 : Type'} : (term4 _140423 _140433 _140434) = (term4 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7660085 _140423 _140433 _140434) (@lem7660084 _140423 _140433 _140434)). Qed.
Lemma lem7660087 {_140423 _140433 _140434 : Type'} (h1 : term4 _140423 _140433 _140434) : term4 _140423 _140433 _140434.
Proof. exact (EQ_MP (@lem7660086 _140423 _140433 _140434) (@lem7660068 _140423 _140433 _140434 h1)). Qed.
Lemma lem7660155 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term28 _140423 _140433 _140434 x y) : term28 _140423 _140433 _140434 x y.
Proof. exact (h1). Qed.
Lemma lem7660156 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term24 _140423 _140433 _140434 x y) : term24 _140423 _140433 _140434 x y.
Proof. exact (h1). Qed.
Lemma lem7660157 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term21 _140423 _140433 _140434 x y) : term21 _140423 _140433 _140434 x y.
Proof. exact (h1). Qed.
Lemma lem7660158 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term24 _140423 _140433 _140434 x y) : term20 _140423 _140433 _140434 x y.
Proof. exact (proj2 (@lem7660156 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660162 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term21 _140423 _140433 _140434 x y) : term15 _140423 _140433 _140434 x y.
Proof. exact (proj2 (@lem7660157 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660180 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term95 _140423 _140433 _140434 x y) : term95 _140423 _140433 _140434 x y.
Proof. exact (h1). Qed.
Lemma lem7660195 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term96 _140423 _140433 _140434 x y) : term96 _140423 _140433 _140434 x y.
Proof. exact (h1). Qed.
Lemma lem7660197 {_140423 _140433 _140434 : Type'} (z : type3 _140423 _140433 _140434) : ((term13 _140423 _140433 _140434 z) = z) = ((term13 _140423 _140433 _140434 z) = z).
Proof. exact (eq_refl ((term13 _140423 _140433 _140434 z) = z)). Qed.
Lemma lem7660198 {_140423 _140433 _140434 : Type'} : (term14 _140423 _140433 _140434) = (term14 _140423 _140433 _140434).
Proof. exact (fun_ext (fun z : type3 _140423 _140433 _140434 => @lem7660197 _140423 _140433 _140434 z)). Qed.
Lemma lem7660199 {_140423 _140433 _140434 : Type'} : (@all (cart _140433 (finite_sum _140423 _140434))) = (@all (cart _140433 (finite_sum _140423 _140434))).
Proof. exact (eq_refl (@all (cart _140433 (finite_sum _140423 _140434)))). Qed.
Lemma lem7660201 {_140423 _140433 _140434 : Type'} : (term4 _140423 _140433 _140434) = (term4 _140423 _140433 _140434).
Proof. exact (MK_COMB (@lem7660199 _140423 _140433 _140434) (@lem7660198 _140423 _140433 _140434)). Qed.
Lemma lem7660202 {_140423 _140433 _140434 : Type'} (h1 : term4 _140423 _140433 _140434) : term4 _140423 _140433 _140434.
Proof. exact (EQ_MP (@lem7660201 _140423 _140433 _140434) (@lem7660087 _140423 _140433 _140434 h1)). Qed.
Lemma lem7660221 {_140423 _140433 _140434 : Type'} (_98554 : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) : term97 _140423 _140433 _140434 _98554.
Proof. exact (@lem7660202 _140423 _140433 _140434 h1 _98554). Qed.
Lemma lem7660222 {_140423 _140433 _140434 : Type'} (_98554 : type3 _140423 _140433 _140434) : (term97 _140423 _140433 _140434 _98554) = ((term13 _140423 _140433 _140434 _98554) = _98554).
Proof. exact (eq_refl (term97 _140423 _140433 _140434 _98554)). Qed.
Lemma lem7660227 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term24 _140423 _140433 _140434 x y) : x = y.
Proof. exact (proj1 (@lem7660156 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660229 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term95 _140423 _140433 _140434 x y) : term95 _140423 _140433 _140434 x y.
Proof. exact (h1). Qed.
Lemma lem7660233 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term24 _140423 _140433 _140434 x y) : x = y.
Proof. exact (proj1 (@lem7660156 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660235 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term96 _140423 _140433 _140434 x y) : term96 _140423 _140433 _140434 x y.
Proof. exact (h1). Qed.
Lemma lem7660239 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term21 _140423 _140433 _140434 x y) : term98 _140423 _140433 _140434 x y.
Proof. exact (proj1 (@lem7660157 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660272 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) : (term99 _140423 _140433 _140434 y) = (term99 _140423 _140433 _140434 y).
Proof. exact (eq_refl (term99 _140423 _140433 _140434 y)). Qed.
Lemma lem7660273 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term24 _140423 _140433 _140434 x y) : (term100 _140423 _140433 _140434 y x) = (term101 _140423 _140433 _140434 y).
Proof. exact (MK_COMB (@lem7660272 _140423 _140433 _140434 y) (@lem7660227 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660274 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) : (term101 _140423 _140433 _140434 y) = (term102 _140423 _140433 _140434 y).
Proof. exact (eq_refl (term101 _140423 _140433 _140434 y)). Qed.
Lemma lem7660275 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (x : type3 _140423 _140433 _140434) : (term103 _140423 _140433 _140434 y x) = (term103 _140423 _140433 _140434 y x).
Proof. exact (eq_refl (term103 _140423 _140433 _140434 y x)). Qed.
Lemma lem7660276 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : ((term100 _140423 _140433 _140434 y x) = (term101 _140423 _140433 _140434 y)) = ((term100 _140423 _140433 _140434 y x) = (term102 _140423 _140433 _140434 y)).
Proof. exact (MK_COMB (@lem7660275 _140423 _140433 _140434 y x) (@lem7660274 _140423 _140433 _140434 y)). Qed.
Lemma lem7660277 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term100 _140423 _140433 _140434 y x) = (term95 _140423 _140433 _140434 x y).
Proof. exact (eq_refl (term100 _140423 _140433 _140434 y x)). Qed.
Lemma lem7660278 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem7660279 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term103 _140423 _140433 _140434 y x) = (term104 _140423 _140433 _140434 x y).
Proof. exact (MK_COMB (@lem7660278) (@lem7660277 _140423 _140433 _140434 x y)). Qed.
Lemma lem7660280 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) : (term102 _140423 _140433 _140434 y) = (term102 _140423 _140433 _140434 y).
Proof. exact (eq_refl (term102 _140423 _140433 _140434 y)). Qed.
Lemma lem7660281 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : ((term100 _140423 _140433 _140434 y x) = (term102 _140423 _140433 _140434 y)) = ((term95 _140423 _140433 _140434 x y) = (term102 _140423 _140433 _140434 y)).
Proof. exact (MK_COMB (@lem7660279 _140423 _140433 _140434 x y) (@lem7660280 _140423 _140433 _140434 y)). Qed.
Lemma lem7660282 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : ((term100 _140423 _140433 _140434 y x) = (term101 _140423 _140433 _140434 y)) = ((term95 _140423 _140433 _140434 x y) = (term102 _140423 _140433 _140434 y)).
Proof. exact (TRANS (@lem7660276 _140423 _140433 _140434 x y) (@lem7660281 _140423 _140433 _140434 x y)). Qed.
Lemma lem7660283 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term24 _140423 _140433 _140434 x y) : (term95 _140423 _140433 _140434 x y) = (term102 _140423 _140433 _140434 y).
Proof. exact (EQ_MP (@lem7660282 _140423 _140433 _140434 x y) (@lem7660273 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660284 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term95 _140423 _140433 _140434 x y) (h2 : term24 _140423 _140433 _140434 x y) : term102 _140423 _140433 _140434 y.
Proof. exact (EQ_MP (@lem7660283 _140423 _140433 _140434 x y h2) (@lem7660229 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660313 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) : (term105 _140423 _140433 _140434 y) = (term105 _140423 _140433 _140434 y).
Proof. exact (eq_refl (term105 _140423 _140433 _140434 y)). Qed.
Lemma lem7660314 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term24 _140423 _140433 _140434 x y) : (term106 _140423 _140433 _140434 y x) = (term107 _140423 _140433 _140434 y).
Proof. exact (MK_COMB (@lem7660313 _140423 _140433 _140434 y) (@lem7660233 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660315 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) : (term107 _140423 _140433 _140434 y) = (term108 _140423 _140433 _140434 y).
Proof. exact (eq_refl (term107 _140423 _140433 _140434 y)). Qed.
Lemma lem7660316 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (x : type3 _140423 _140433 _140434) : (term109 _140423 _140433 _140434 y x) = (term109 _140423 _140433 _140434 y x).
Proof. exact (eq_refl (term109 _140423 _140433 _140434 y x)). Qed.
Lemma lem7660317 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : ((term106 _140423 _140433 _140434 y x) = (term107 _140423 _140433 _140434 y)) = ((term106 _140423 _140433 _140434 y x) = (term108 _140423 _140433 _140434 y)).
Proof. exact (MK_COMB (@lem7660316 _140423 _140433 _140434 y x) (@lem7660315 _140423 _140433 _140434 y)). Qed.
Lemma lem7660318 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term106 _140423 _140433 _140434 y x) = (term96 _140423 _140433 _140434 x y).
Proof. exact (eq_refl (term106 _140423 _140433 _140434 y x)). Qed.
Lemma lem7660319 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem7660320 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term109 _140423 _140433 _140434 y x) = (term110 _140423 _140433 _140434 x y).
Proof. exact (MK_COMB (@lem7660319) (@lem7660318 _140423 _140433 _140434 x y)). Qed.
Lemma lem7660321 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) : (term108 _140423 _140433 _140434 y) = (term108 _140423 _140433 _140434 y).
Proof. exact (eq_refl (term108 _140423 _140433 _140434 y)). Qed.
Lemma lem7660322 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : ((term106 _140423 _140433 _140434 y x) = (term108 _140423 _140433 _140434 y)) = ((term96 _140423 _140433 _140434 x y) = (term108 _140423 _140433 _140434 y)).
Proof. exact (MK_COMB (@lem7660320 _140423 _140433 _140434 x y) (@lem7660321 _140423 _140433 _140434 y)). Qed.
Lemma lem7660323 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : ((term106 _140423 _140433 _140434 y x) = (term107 _140423 _140433 _140434 y)) = ((term96 _140423 _140433 _140434 x y) = (term108 _140423 _140433 _140434 y)).
Proof. exact (TRANS (@lem7660317 _140423 _140433 _140434 x y) (@lem7660322 _140423 _140433 _140434 x y)). Qed.
Lemma lem7660324 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term24 _140423 _140433 _140434 x y) : (term96 _140423 _140433 _140434 x y) = (term108 _140423 _140433 _140434 y).
Proof. exact (EQ_MP (@lem7660323 _140423 _140433 _140434 x y) (@lem7660314 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660325 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term96 _140423 _140433 _140434 x y) (h2 : term24 _140423 _140433 _140434 x y) : term108 _140423 _140433 _140434 y.
Proof. exact (EQ_MP (@lem7660324 _140423 _140433 _140434 x y h2) (@lem7660235 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660364 {_140423 _140433 : Type'} (x : cart _140433 _140423) : x = x.
Proof. exact (@lem21386 (cart _140433 _140423) x). Qed.
Lemma lem7660365 {_140423 _140433 : Type'} (x : cart _140433 _140423) : x = x.
Proof. exact (@lem7660364 _140423 _140433 x). Qed.
Lemma lem7660366 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) : (@fstcart _140433 _140423 _140434 y) = (@fstcart _140433 _140423 _140434 y).
Proof. exact (@lem7660365 _140423 _140433 (@fstcart _140433 _140423 _140434 y)). Qed.
Lemma lem7660367 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) : term111 _140423 _140433 _140434 y.
Proof. exact (fun h0 : term102 _140423 _140433 _140434 y => @lem7660366 _140423 _140433 _140434 y). Qed.
Lemma lem7660369 (p : Prop) : (term112 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem7660370 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) : (term111 _140423 _140433 _140434 y) = ((@fstcart _140433 _140423 _140434 y) = (@fstcart _140433 _140423 _140434 y)).
Proof. exact (@lem7660369 ((@fstcart _140433 _140423 _140434 y) = (@fstcart _140433 _140423 _140434 y))). Qed.
Lemma lem7660371 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) : (@fstcart _140433 _140423 _140434 y) = (@fstcart _140433 _140423 _140434 y).
Proof. exact (EQ_MP (@lem7660370 _140423 _140433 _140434 y) (@lem7660367 _140423 _140433 _140434 y)). Qed.
Lemma lem7660374 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem7660376 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) : (term102 _140423 _140433 _140434 y) = (term113 _140423 _140433 _140434 y).
Proof. exact (@lem7660374 ((@fstcart _140433 _140423 _140434 y) = (@fstcart _140433 _140423 _140434 y))). Qed.
Lemma lem7660379 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term95 _140423 _140433 _140434 x y) (h2 : term24 _140423 _140433 _140434 x y) : term113 _140423 _140433 _140434 y.
Proof. exact (EQ_MP (@lem7660376 _140423 _140433 _140434 y) (@lem7660284 _140423 _140433 _140434 x y h1 h2)). Qed.
Lemma lem7660382 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term95 _140423 _140433 _140434 x y) (h2 : term24 _140423 _140433 _140434 x y) : False.
Proof. exact (@lem7660379 _140423 _140433 _140434 x y h1 h2 (@lem7660371 _140423 _140433 _140434 y)). Qed.
Lemma lem7660383 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term95 _140423 _140433 _140434 x y) (h2 : term24 _140423 _140433 _140434 x y) : term114.
Proof. exact (fun h0 : ~ False => @lem7660382 _140423 _140433 _140434 x y h1 h2). Qed.
Lemma lem7660385 (p : Prop) : (term112 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem7660386 : term114 = False.
Proof. exact (@lem7660385 False). Qed.
Lemma lem7660426 {_140433 _140434 : Type'} (x : cart _140433 _140434) : x = x.
Proof. exact (@lem21386 (cart _140433 _140434) x). Qed.
Lemma lem7660427 {_140433 _140434 : Type'} (x : cart _140433 _140434) : x = x.
Proof. exact (@lem7660426 _140433 _140434 x). Qed.
Lemma lem7660428 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) : (@sndcart _140433 _140423 _140434 y) = (@sndcart _140433 _140423 _140434 y).
Proof. exact (@lem7660427 _140433 _140434 (@sndcart _140433 _140423 _140434 y)). Qed.
Lemma lem7660429 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) : term115 _140423 _140433 _140434 y.
Proof. exact (fun h0 : term108 _140423 _140433 _140434 y => @lem7660428 _140423 _140433 _140434 y). Qed.
Lemma lem7660431 (p : Prop) : (term112 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem7660432 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) : (term115 _140423 _140433 _140434 y) = ((@sndcart _140433 _140423 _140434 y) = (@sndcart _140433 _140423 _140434 y)).
Proof. exact (@lem7660431 ((@sndcart _140433 _140423 _140434 y) = (@sndcart _140433 _140423 _140434 y))). Qed.
Lemma lem7660433 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) : (@sndcart _140433 _140423 _140434 y) = (@sndcart _140433 _140423 _140434 y).
Proof. exact (EQ_MP (@lem7660432 _140423 _140433 _140434 y) (@lem7660429 _140423 _140433 _140434 y)). Qed.
Lemma lem7660436 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem7660438 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) : (term108 _140423 _140433 _140434 y) = (term116 _140423 _140433 _140434 y).
Proof. exact (@lem7660436 ((@sndcart _140433 _140423 _140434 y) = (@sndcart _140433 _140423 _140434 y))). Qed.
Lemma lem7660441 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term96 _140423 _140433 _140434 x y) (h2 : term24 _140423 _140433 _140434 x y) : term116 _140423 _140433 _140434 y.
Proof. exact (EQ_MP (@lem7660438 _140423 _140433 _140434 y) (@lem7660325 _140423 _140433 _140434 x y h1 h2)). Qed.
Lemma lem7660444 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term96 _140423 _140433 _140434 x y) (h2 : term24 _140423 _140433 _140434 x y) : False.
Proof. exact (@lem7660441 _140423 _140433 _140434 x y h1 h2 (@lem7660433 _140423 _140433 _140434 y)). Qed.
Lemma lem7660445 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term96 _140423 _140433 _140434 x y) (h2 : term24 _140423 _140433 _140434 x y) : term114.
Proof. exact (fun h0 : ~ False => @lem7660444 _140423 _140433 _140434 x y h1 h2). Qed.
Lemma lem7660447 (p : Prop) : (term112 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem7660448 : term114 = False.
Proof. exact (@lem7660447 False). Qed.
Lemma lem7660466 {_140423 _140433 _140434 : Type'} : (@pastecart _140433 _140423 _140434) = (@pastecart _140433 _140423 _140434).
Proof. exact (eq_refl (@pastecart _140433 _140423 _140434)). Qed.
Lemma lem7660467 {_140423 _140433 : Type'} (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) (h1 : _98587 = _98589) : _98587 = _98589.
Proof. exact (h1). Qed.
Lemma lem7660468 {_140433 _140434 : Type'} (_98588 : cart _140433 _140434) (_98590 : cart _140433 _140434) (h1 : _98588 = _98590) : _98588 = _98590.
Proof. exact (h1). Qed.
Lemma lem7660469 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) (h1 : _98587 = _98589) : (@pastecart _140433 _140423 _140434 _98587) = (@pastecart _140433 _140423 _140434 _98589).
Proof. exact (MK_COMB (@lem7660466 _140423 _140433 _140434) (@lem7660467 _140423 _140433 _98587 _98589 h1)). Qed.
Lemma lem7660470 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98590 : cart _140433 _140434) (h1 : _98587 = _98589) (h2 : _98588 = _98590) : (@pastecart _140433 _140423 _140434 _98587 _98588) = (@pastecart _140433 _140423 _140434 _98589 _98590).
Proof. exact (MK_COMB (@lem7660469 _140423 _140433 _140434 _98587 _98589 h1) (@lem7660468 _140433 _140434 _98588 _98590 h2)). Qed.
Lemma lem7660471 {_140423 _140433 _140434 : Type'} (_98588 : cart _140433 _140434) (_98590 : cart _140433 _140434) (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) (h1 : _98587 = _98589) : term117 _140423 _140433 _140434 _98587 _98588 _98589 _98590.
Proof. exact (fun h0 : _98588 = _98590 => @lem7660470 _140423 _140433 _140434 _98587 _98589 _98588 _98590 h1 h0). Qed.
Lemma lem7660473 (a : Prop) (b : Prop) : (a -> b) = (term118 a b).
Proof. exact (EQ_MP (@lem21394 a b) (@lem21490 a b)). Qed.
Lemma lem7660474 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98589 : cart _140433 _140423) (_98590 : cart _140433 _140434) : (term117 _140423 _140433 _140434 _98587 _98588 _98589 _98590) = (term119 _140423 _140433 _140434 _98587 _98588 _98589 _98590).
Proof. exact (@lem7660473 (_98588 = _98590) ((@pastecart _140433 _140423 _140434 _98587 _98588) = (@pastecart _140433 _140423 _140434 _98589 _98590))). Qed.
Lemma lem7660475 {_140423 _140433 _140434 : Type'} (_98588 : cart _140433 _140434) (_98590 : cart _140433 _140434) (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) (h1 : _98587 = _98589) : term119 _140423 _140433 _140434 _98587 _98588 _98589 _98590.
Proof. exact (EQ_MP (@lem7660474 _140423 _140433 _140434 _98587 _98588 _98589 _98590) (@lem7660471 _140423 _140433 _140434 _98588 _98590 _98587 _98589 h1)). Qed.
Lemma lem7660476 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98589 : cart _140433 _140423) (_98590 : cart _140433 _140434) : term120 _140423 _140433 _140434 _98587 _98588 _98589 _98590.
Proof. exact (fun h0 : _98587 = _98589 => @lem7660475 _140423 _140433 _140434 _98588 _98590 _98587 _98589 h0). Qed.
Lemma lem7660478 (a : Prop) (b : Prop) : (a -> b) = (term118 a b).
Proof. exact (EQ_MP (@lem21394 a b) (@lem21490 a b)). Qed.
Lemma lem7660479 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98589 : cart _140433 _140423) (_98590 : cart _140433 _140434) : (term120 _140423 _140433 _140434 _98587 _98588 _98589 _98590) = (term121 _140423 _140433 _140434 _98587 _98588 _98589 _98590).
Proof. exact (@lem7660478 (_98587 = _98589) (term119 _140423 _140433 _140434 _98587 _98588 _98589 _98590)). Qed.
Lemma lem7660480 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98589 : cart _140433 _140423) (_98590 : cart _140433 _140434) : term121 _140423 _140433 _140434 _98587 _98588 _98589 _98590.
Proof. exact (EQ_MP (@lem7660479 _140423 _140433 _140434 _98587 _98588 _98589 _98590) (@lem7660476 _140423 _140433 _140434 _98587 _98588 _98589 _98590)). Qed.
Lemma lem7660482 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : term122 _140423 _140433 _140434 x y z.
Proof. exact (@lem21385 (type3 _140423 _140433 _140434) x y z). Qed.
Lemma lem7660488 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term21 _140423 _140433 _140434 x y) : (@fstcart _140433 _140423 _140434 x) = (@fstcart _140433 _140423 _140434 y).
Proof. exact (proj1 (@lem7660162 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660489 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term21 _140423 _140433 _140434 x y) : term123 _140423 _140433 _140434 x y.
Proof. exact (fun h0 : term95 _140423 _140433 _140434 x y => @lem7660488 _140423 _140433 _140434 x y h1). Qed.
Lemma lem7660491 (p : Prop) : (term112 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem7660492 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term123 _140423 _140433 _140434 x y) = ((@fstcart _140433 _140423 _140434 x) = (@fstcart _140433 _140423 _140434 y)).
Proof. exact (@lem7660491 ((@fstcart _140433 _140423 _140434 x) = (@fstcart _140433 _140423 _140434 y))). Qed.
Lemma lem7660493 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term21 _140423 _140433 _140434 x y) : (@fstcart _140433 _140423 _140434 x) = (@fstcart _140433 _140423 _140434 y).
Proof. exact (EQ_MP (@lem7660492 _140423 _140433 _140434 x y) (@lem7660489 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660495 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term21 _140423 _140433 _140434 x y) : (@sndcart _140433 _140423 _140434 x) = (@sndcart _140433 _140423 _140434 y).
Proof. exact (proj2 (@lem7660162 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660496 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term21 _140423 _140433 _140434 x y) : term124 _140423 _140433 _140434 x y.
Proof. exact (fun h0 : term96 _140423 _140433 _140434 x y => @lem7660495 _140423 _140433 _140434 x y h1). Qed.
Lemma lem7660498 (p : Prop) : (term112 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem7660499 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term124 _140423 _140433 _140434 x y) = ((@sndcart _140433 _140423 _140434 x) = (@sndcart _140433 _140423 _140434 y)).
Proof. exact (@lem7660498 ((@sndcart _140433 _140423 _140434 x) = (@sndcart _140433 _140423 _140434 y))). Qed.
Lemma lem7660500 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term21 _140423 _140433 _140434 x y) : (@sndcart _140433 _140423 _140434 x) = (@sndcart _140433 _140423 _140434 y).
Proof. exact (EQ_MP (@lem7660499 _140423 _140433 _140434 x y) (@lem7660496 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660518 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem7660519 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98590 : cart _140433 _140434) : (term119 _140423 _140433 _140434 _98587 _98588 _98589 _98590) = (term125 _140423 _140433 _140434 _98587 _98589 _98588 _98590).
Proof. exact (@lem7660518 ((@pastecart _140433 _140423 _140434 _98587 _98588) = (@pastecart _140433 _140423 _140434 _98589 _98590)) (term126 _140433 _140434 _98588 _98590)). Qed.
Lemma lem7660529 {_140423 _140433 : Type'} (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) : (term127 _140423 _140433 _98587 _98589) = (term127 _140423 _140433 _98587 _98589).
Proof. exact (eq_refl (term127 _140423 _140433 _98587 _98589)). Qed.
Lemma lem7660530 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98590 : cart _140433 _140434) : (term121 _140423 _140433 _140434 _98587 _98588 _98589 _98590) = (term128 _140423 _140433 _140434 _98587 _98589 _98588 _98590).
Proof. exact (MK_COMB (@lem7660529 _140423 _140433 _98587 _98589) (@lem7660519 _140423 _140433 _140434 _98587 _98589 _98588 _98590)). Qed.
Lemma lem7660534 (q : Prop) (p : Prop) (r : Prop) : (term129 p q r) = (term129 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem7660535 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98590 : cart _140433 _140434) : (term128 _140423 _140433 _140434 _98587 _98589 _98588 _98590) = (term130 _140423 _140433 _140434 _98587 _98589 _98588 _98590).
Proof. exact (@lem7660534 ((@pastecart _140433 _140423 _140434 _98587 _98588) = (@pastecart _140433 _140423 _140434 _98589 _98590)) (term131 _140423 _140433 _98587 _98589) (term126 _140433 _140434 _98588 _98590)). Qed.
Lemma lem7660557 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98590 : cart _140433 _140434) : (term121 _140423 _140433 _140434 _98587 _98588 _98589 _98590) = (term130 _140423 _140433 _140434 _98587 _98589 _98588 _98590).
Proof. exact (TRANS (@lem7660530 _140423 _140433 _140434 _98587 _98589 _98588 _98590) (@lem7660535 _140423 _140433 _140434 _98587 _98589 _98588 _98590)). Qed.
Lemma lem7660558 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem7660559 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98590 : cart _140433 _140434) : (term132 _140423 _140433 _140434 _98587 _98588 _98589 _98590) = (term133 _140423 _140433 _140434 _98587 _98589 _98588 _98590).
Proof. exact (MK_COMB (@lem7660558) (@lem7660557 _140423 _140433 _140434 _98587 _98589 _98588 _98590)). Qed.
Lemma lem7660581 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98590 : cart _140433 _140434) : (term130 _140423 _140433 _140434 _98587 _98589 _98588 _98590) = (term130 _140423 _140433 _140434 _98587 _98589 _98588 _98590).
Proof. exact (eq_refl (term130 _140423 _140433 _140434 _98587 _98589 _98588 _98590)). Qed.
Lemma lem7660582 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98590 : cart _140433 _140434) : ((term121 _140423 _140433 _140434 _98587 _98588 _98589 _98590) = (term130 _140423 _140433 _140434 _98587 _98589 _98588 _98590)) = ((term130 _140423 _140433 _140434 _98587 _98589 _98588 _98590) = (term130 _140423 _140433 _140434 _98587 _98589 _98588 _98590)).
Proof. exact (MK_COMB (@lem7660559 _140423 _140433 _140434 _98587 _98589 _98588 _98590) (@lem7660581 _140423 _140433 _140434 _98587 _98589 _98588 _98590)). Qed.
Lemma lem7660584 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem7660585 (x : Prop) : (x = x) = True.
Proof. exact (@lem7660584 Prop x). Qed.
Lemma lem7660586 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98590 : cart _140433 _140434) : ((term130 _140423 _140433 _140434 _98587 _98589 _98588 _98590) = (term130 _140423 _140433 _140434 _98587 _98589 _98588 _98590)) = True.
Proof. exact (@lem7660585 (term130 _140423 _140433 _140434 _98587 _98589 _98588 _98590)). Qed.
Lemma lem7660587 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98590 : cart _140433 _140434) : ((term121 _140423 _140433 _140434 _98587 _98588 _98589 _98590) = (term130 _140423 _140433 _140434 _98587 _98589 _98588 _98590)) = True.
Proof. exact (TRANS (@lem7660582 _140423 _140433 _140434 _98587 _98589 _98588 _98590) (@lem7660586 _140423 _140433 _140434 _98587 _98589 _98588 _98590)). Qed.
Lemma lem7660588 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98590 : cart _140433 _140434) : True = ((term121 _140423 _140433 _140434 _98587 _98588 _98589 _98590) = (term130 _140423 _140433 _140434 _98587 _98589 _98588 _98590)).
Proof. exact (SYM (@lem7660587 _140423 _140433 _140434 _98587 _98589 _98588 _98590)). Qed.
Lemma lem7660589 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98590 : cart _140433 _140434) : (term121 _140423 _140433 _140434 _98587 _98588 _98589 _98590) = (term130 _140423 _140433 _140434 _98587 _98589 _98588 _98590).
Proof. exact (EQ_MP (@lem7660588 _140423 _140433 _140434 _98587 _98589 _98588 _98590) (@lem0)). Qed.
Lemma lem7660590 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98590 : cart _140433 _140434) : term130 _140423 _140433 _140434 _98587 _98589 _98588 _98590.
Proof. exact (EQ_MP (@lem7660589 _140423 _140433 _140434 _98587 _98589 _98588 _98590) (@lem7660480 _140423 _140433 _140434 _98587 _98588 _98589 _98590)). Qed.
Lemma lem7660592 (b : Prop) (a : Prop) : (a \/ b) = (term134 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem7660593 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98589 : cart _140433 _140423) (_98590 : cart _140433 _140434) : (term130 _140423 _140433 _140434 _98587 _98589 _98588 _98590) = (term135 _140423 _140433 _140434 _98587 _98588 _98589 _98590).
Proof. exact (@lem7660592 (term136 _140423 _140433 _140434 _98587 _98589 _98588 _98590) ((@pastecart _140433 _140423 _140434 _98587 _98588) = (@pastecart _140433 _140423 _140434 _98589 _98590))). Qed.
Lemma lem7660595 (a : Prop) (b : Prop) : (term137 a b) = (term138 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem7660596 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98590 : cart _140433 _140434) : (term139 _140423 _140433 _140434 _98587 _98589 _98588 _98590) = (term140 _140423 _140433 _140434 _98587 _98589 _98588 _98590).
Proof. exact (@lem7660595 (term131 _140423 _140433 _98587 _98589) (term126 _140433 _140434 _98588 _98590)). Qed.
Lemma lem7660598 (a : Prop) : (term141 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem7660599 {_140423 _140433 : Type'} (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) : (term142 _140423 _140433 _98587 _98589) = (_98587 = _98589).
Proof. exact (@lem7660598 (_98587 = _98589)). Qed.
Lemma lem7660600 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem7660601 {_140423 _140433 : Type'} (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) : (term143 _140423 _140433 _98587 _98589) = (term144 _140423 _140433 _98587 _98589).
Proof. exact (MK_COMB (@lem7660600) (@lem7660599 _140423 _140433 _98587 _98589)). Qed.
Lemma lem7660603 (a : Prop) : (term141 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem7660604 {_140433 _140434 : Type'} (_98588 : cart _140433 _140434) (_98590 : cart _140433 _140434) : (term145 _140433 _140434 _98588 _98590) = (_98588 = _98590).
Proof. exact (@lem7660603 (_98588 = _98590)). Qed.
Lemma lem7660605 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98590 : cart _140433 _140434) : (term140 _140423 _140433 _140434 _98587 _98589 _98588 _98590) = (term146 _140423 _140433 _140434 _98587 _98589 _98588 _98590).
Proof. exact (MK_COMB (@lem7660601 _140423 _140433 _98587 _98589) (@lem7660604 _140433 _140434 _98588 _98590)). Qed.
Lemma lem7660606 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98590 : cart _140433 _140434) : (term139 _140423 _140433 _140434 _98587 _98589 _98588 _98590) = (term146 _140423 _140433 _140434 _98587 _98589 _98588 _98590).
Proof. exact (TRANS (@lem7660596 _140423 _140433 _140434 _98587 _98589 _98588 _98590) (@lem7660605 _140423 _140433 _140434 _98587 _98589 _98588 _98590)). Qed.
Lemma lem7660607 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem7660608 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98589 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98590 : cart _140433 _140434) : (term147 _140423 _140433 _140434 _98587 _98589 _98588 _98590) = (term148 _140423 _140433 _140434 _98587 _98589 _98588 _98590).
Proof. exact (MK_COMB (@lem7660607) (@lem7660606 _140423 _140433 _140434 _98587 _98589 _98588 _98590)). Qed.
Lemma lem7660609 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98589 : cart _140433 _140423) (_98590 : cart _140433 _140434) : ((@pastecart _140433 _140423 _140434 _98587 _98588) = (@pastecart _140433 _140423 _140434 _98589 _98590)) = ((@pastecart _140433 _140423 _140434 _98587 _98588) = (@pastecart _140433 _140423 _140434 _98589 _98590)).
Proof. exact (eq_refl ((@pastecart _140433 _140423 _140434 _98587 _98588) = (@pastecart _140433 _140423 _140434 _98589 _98590))). Qed.
Lemma lem7660610 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98589 : cart _140433 _140423) (_98590 : cart _140433 _140434) : (term135 _140423 _140433 _140434 _98587 _98588 _98589 _98590) = (term149 _140423 _140433 _140434 _98587 _98588 _98589 _98590).
Proof. exact (MK_COMB (@lem7660608 _140423 _140433 _140434 _98587 _98589 _98588 _98590) (@lem7660609 _140423 _140433 _140434 _98587 _98588 _98589 _98590)). Qed.
Lemma lem7660611 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98589 : cart _140433 _140423) (_98590 : cart _140433 _140434) : (term130 _140423 _140433 _140434 _98587 _98589 _98588 _98590) = (term149 _140423 _140433 _140434 _98587 _98588 _98589 _98590).
Proof. exact (TRANS (@lem7660593 _140423 _140433 _140434 _98587 _98588 _98589 _98590) (@lem7660610 _140423 _140433 _140434 _98587 _98588 _98589 _98590)). Qed.
Lemma lem7660613 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term21 _140423 _140433 _140434 x y) : term15 _140423 _140433 _140434 x y.
Proof. exact (conj (@lem7660493 _140423 _140433 _140434 x y h1) (@lem7660500 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660615 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98589 : cart _140433 _140423) (_98590 : cart _140433 _140434) : term149 _140423 _140433 _140434 _98587 _98588 _98589 _98590.
Proof. exact (EQ_MP (@lem7660611 _140423 _140433 _140434 _98587 _98588 _98589 _98590) (@lem7660590 _140423 _140433 _140434 _98587 _98589 _98588 _98590)). Qed.
Lemma lem7660616 {_140423 _140433 _140434 : Type'} (_98587 : cart _140433 _140423) (_98588 : cart _140433 _140434) (_98589 : cart _140433 _140423) (_98590 : cart _140433 _140434) : term149 _140423 _140433 _140434 _98587 _98588 _98589 _98590.
Proof. exact (@lem7660615 _140423 _140433 _140434 _98587 _98588 _98589 _98590). Qed.
Lemma lem7660617 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : term150 _140423 _140433 _140434 x y.
Proof. exact (@lem7660616 _140423 _140433 _140434 (@fstcart _140433 _140423 _140434 x) (@sndcart _140433 _140423 _140434 x) (@fstcart _140433 _140423 _140434 y) (@sndcart _140433 _140423 _140434 y)). Qed.
Lemma lem7660620 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term21 _140423 _140433 _140434 x y) : (term13 _140423 _140433 _140434 x) = (term13 _140423 _140433 _140434 y).
Proof. exact (@lem7660617 _140423 _140433 _140434 x y (@lem7660613 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660621 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term21 _140423 _140433 _140434 x y) : term151 _140423 _140433 _140434 x y.
Proof. exact (fun h0 : term152 _140423 _140433 _140434 x y => @lem7660620 _140423 _140433 _140434 x y h1). Qed.
Lemma lem7660623 (p : Prop) : (term112 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem7660624 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term151 _140423 _140433 _140434 x y) = ((term13 _140423 _140433 _140434 x) = (term13 _140423 _140433 _140434 y)).
Proof. exact (@lem7660623 ((term13 _140423 _140433 _140434 x) = (term13 _140423 _140433 _140434 y))). Qed.
Lemma lem7660625 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term21 _140423 _140433 _140434 x y) : (term13 _140423 _140433 _140434 x) = (term13 _140423 _140433 _140434 y).
Proof. exact (EQ_MP (@lem7660624 _140423 _140433 _140434 x y) (@lem7660621 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660627 {_140423 _140433 _140434 : Type'} (_98554 : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) : (term13 _140423 _140433 _140434 _98554) = _98554.
Proof. exact (EQ_MP (@lem7660222 _140423 _140433 _140434 _98554) (@lem7660221 _140423 _140433 _140434 _98554 h1)). Qed.
Lemma lem7660628 {_140423 _140433 _140434 : Type'} (_98554 : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) : (term13 _140423 _140433 _140434 _98554) = _98554.
Proof. exact (@lem7660627 _140423 _140433 _140434 _98554 h1). Qed.
Lemma lem7660629 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) : (term13 _140423 _140433 _140434 x) = x.
Proof. exact (@lem7660628 _140423 _140433 _140434 x h1). Qed.
Lemma lem7660630 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) : term153 _140423 _140433 _140434 x.
Proof. exact (fun h0 : term154 _140423 _140433 _140434 x => @lem7660629 _140423 _140433 _140434 x h1). Qed.
Lemma lem7660632 (p : Prop) : (term112 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem7660633 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) : (term153 _140423 _140433 _140434 x) = ((term13 _140423 _140433 _140434 x) = x).
Proof. exact (@lem7660632 ((term13 _140423 _140433 _140434 x) = x)). Qed.
Lemma lem7660634 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) : (term13 _140423 _140433 _140434 x) = x.
Proof. exact (EQ_MP (@lem7660633 _140423 _140433 _140434 x) (@lem7660630 _140423 _140433 _140434 x h1)). Qed.
Lemma lem7660652 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem7660653 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (x : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : (term155 _140423 _140433 _140434 x y z) = (term156 _140423 _140433 _140434 y x z).
Proof. exact (@lem7660652 (y = z) (term98 _140423 _140433 _140434 x z)). Qed.
Lemma lem7660663 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term157 _140423 _140433 _140434 x y) = (term157 _140423 _140433 _140434 x y).
Proof. exact (eq_refl (term157 _140423 _140433 _140434 x y)). Qed.
Lemma lem7660664 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (x : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : (term122 _140423 _140433 _140434 x y z) = (term158 _140423 _140433 _140434 y x z).
Proof. exact (MK_COMB (@lem7660663 _140423 _140433 _140434 x y) (@lem7660653 _140423 _140433 _140434 y x z)). Qed.
Lemma lem7660668 (q : Prop) (p : Prop) (r : Prop) : (term129 p q r) = (term129 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem7660669 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (x : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : (term158 _140423 _140433 _140434 y x z) = (term159 _140423 _140433 _140434 y x z).
Proof. exact (@lem7660668 (y = z) (term98 _140423 _140433 _140434 x y) (term98 _140423 _140433 _140434 x z)). Qed.
Lemma lem7660691 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (x : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : (term122 _140423 _140433 _140434 x y z) = (term159 _140423 _140433 _140434 y x z).
Proof. exact (TRANS (@lem7660664 _140423 _140433 _140434 y x z) (@lem7660669 _140423 _140433 _140434 y x z)). Qed.
Lemma lem7660692 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem7660693 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (x : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : (term160 _140423 _140433 _140434 x y z) = (term161 _140423 _140433 _140434 y x z).
Proof. exact (MK_COMB (@lem7660692) (@lem7660691 _140423 _140433 _140434 y x z)). Qed.
Lemma lem7660715 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (x : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : (term159 _140423 _140433 _140434 y x z) = (term159 _140423 _140433 _140434 y x z).
Proof. exact (eq_refl (term159 _140423 _140433 _140434 y x z)). Qed.
Lemma lem7660716 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (x : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : ((term122 _140423 _140433 _140434 x y z) = (term159 _140423 _140433 _140434 y x z)) = ((term159 _140423 _140433 _140434 y x z) = (term159 _140423 _140433 _140434 y x z)).
Proof. exact (MK_COMB (@lem7660693 _140423 _140433 _140434 y x z) (@lem7660715 _140423 _140433 _140434 y x z)). Qed.
Lemma lem7660718 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem7660719 (x : Prop) : (x = x) = True.
Proof. exact (@lem7660718 Prop x). Qed.
Lemma lem7660720 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (x : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : ((term159 _140423 _140433 _140434 y x z) = (term159 _140423 _140433 _140434 y x z)) = True.
Proof. exact (@lem7660719 (term159 _140423 _140433 _140434 y x z)). Qed.
Lemma lem7660721 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (x : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : ((term122 _140423 _140433 _140434 x y z) = (term159 _140423 _140433 _140434 y x z)) = True.
Proof. exact (TRANS (@lem7660716 _140423 _140433 _140434 y x z) (@lem7660720 _140423 _140433 _140434 y x z)). Qed.
Lemma lem7660722 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (x : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : True = ((term122 _140423 _140433 _140434 x y z) = (term159 _140423 _140433 _140434 y x z)).
Proof. exact (SYM (@lem7660721 _140423 _140433 _140434 y x z)). Qed.
Lemma lem7660723 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (x : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : (term122 _140423 _140433 _140434 x y z) = (term159 _140423 _140433 _140434 y x z).
Proof. exact (EQ_MP (@lem7660722 _140423 _140433 _140434 y x z) (@lem0)). Qed.
Lemma lem7660724 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (x : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : term159 _140423 _140433 _140434 y x z.
Proof. exact (EQ_MP (@lem7660723 _140423 _140433 _140434 y x z) (@lem7660482 _140423 _140433 _140434 x y z)). Qed.
Lemma lem7660726 (b : Prop) (a : Prop) : (a \/ b) = (term134 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem7660727 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : (term159 _140423 _140433 _140434 y x z) = (term162 _140423 _140433 _140434 x y z).
Proof. exact (@lem7660726 (term163 _140423 _140433 _140434 y x z) (y = z)). Qed.
Lemma lem7660729 (a : Prop) (b : Prop) : (term137 a b) = (term138 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem7660730 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (x : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : (term164 _140423 _140433 _140434 y x z) = (term165 _140423 _140433 _140434 y x z).
Proof. exact (@lem7660729 (term98 _140423 _140433 _140434 x y) (term98 _140423 _140433 _140434 x z)). Qed.
Lemma lem7660732 (a : Prop) : (term141 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem7660733 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term166 _140423 _140433 _140434 x y) = (x = y).
Proof. exact (@lem7660732 (x = y)). Qed.
Lemma lem7660734 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem7660735 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term167 _140423 _140433 _140434 x y) = (term22 _140423 _140433 _140434 x y).
Proof. exact (MK_COMB (@lem7660734) (@lem7660733 _140423 _140433 _140434 x y)). Qed.
Lemma lem7660737 (a : Prop) : (term141 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem7660738 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : (term166 _140423 _140433 _140434 x z) = (x = z).
Proof. exact (@lem7660737 (x = z)). Qed.
Lemma lem7660739 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (x : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : (term165 _140423 _140433 _140434 y x z) = (term168 _140423 _140433 _140434 y x z).
Proof. exact (MK_COMB (@lem7660735 _140423 _140433 _140434 x y) (@lem7660738 _140423 _140433 _140434 x z)). Qed.
Lemma lem7660740 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (x : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : (term164 _140423 _140433 _140434 y x z) = (term168 _140423 _140433 _140434 y x z).
Proof. exact (TRANS (@lem7660730 _140423 _140433 _140434 y x z) (@lem7660739 _140423 _140433 _140434 y x z)). Qed.
Lemma lem7660741 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem7660742 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (x : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : (term169 _140423 _140433 _140434 y x z) = (term170 _140423 _140433 _140434 y x z).
Proof. exact (MK_COMB (@lem7660741) (@lem7660740 _140423 _140433 _140434 y x z)). Qed.
Lemma lem7660743 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : (y = z) = (y = z).
Proof. exact (eq_refl (y = z)). Qed.
Lemma lem7660744 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : (term162 _140423 _140433 _140434 x y z) = (term171 _140423 _140433 _140434 x y z).
Proof. exact (MK_COMB (@lem7660742 _140423 _140433 _140434 y x z) (@lem7660743 _140423 _140433 _140434 y z)). Qed.
Lemma lem7660745 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : (term159 _140423 _140433 _140434 y x z) = (term171 _140423 _140433 _140434 x y z).
Proof. exact (TRANS (@lem7660727 _140423 _140433 _140434 x y z) (@lem7660744 _140423 _140433 _140434 x y z)). Qed.
Lemma lem7660747 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) (h2 : term21 _140423 _140433 _140434 x y) : term172 _140423 _140433 _140434 y x.
Proof. exact (conj (@lem7660625 _140423 _140433 _140434 x y h2) (@lem7660634 _140423 _140433 _140434 x h1)). Qed.
Lemma lem7660749 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : term171 _140423 _140433 _140434 x y z.
Proof. exact (EQ_MP (@lem7660745 _140423 _140433 _140434 x y z) (@lem7660724 _140423 _140433 _140434 y x z)). Qed.
Lemma lem7660750 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : term171 _140423 _140433 _140434 x y z.
Proof. exact (@lem7660749 _140423 _140433 _140434 x y z). Qed.
Lemma lem7660751 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (x : type3 _140423 _140433 _140434) : term173 _140423 _140433 _140434 y x.
Proof. exact (@lem7660750 _140423 _140433 _140434 (term13 _140423 _140433 _140434 x) (term13 _140423 _140433 _140434 y) x). Qed.
Lemma lem7660754 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) (h2 : term21 _140423 _140433 _140434 x y) : (term13 _140423 _140433 _140434 y) = x.
Proof. exact (@lem7660751 _140423 _140433 _140434 y x (@lem7660747 _140423 _140433 _140434 x y h1 h2)). Qed.
Lemma lem7660755 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) (h2 : term21 _140423 _140433 _140434 x y) : term174 _140423 _140433 _140434 y x.
Proof. exact (fun h0 : term175 _140423 _140433 _140434 y x => @lem7660754 _140423 _140433 _140434 x y h1 h2). Qed.
Lemma lem7660757 (p : Prop) : (term112 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem7660758 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (x : type3 _140423 _140433 _140434) : (term174 _140423 _140433 _140434 y x) = ((term13 _140423 _140433 _140434 y) = x).
Proof. exact (@lem7660757 ((term13 _140423 _140433 _140434 y) = x)). Qed.
Lemma lem7660759 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) (h2 : term21 _140423 _140433 _140434 x y) : (term13 _140423 _140433 _140434 y) = x.
Proof. exact (EQ_MP (@lem7660758 _140423 _140433 _140434 y x) (@lem7660755 _140423 _140433 _140434 x y h1 h2)). Qed.
Lemma lem7660761 {_140423 _140433 _140434 : Type'} (_98554 : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) : (term13 _140423 _140433 _140434 _98554) = _98554.
Proof. exact (EQ_MP (@lem7660222 _140423 _140433 _140434 _98554) (@lem7660221 _140423 _140433 _140434 _98554 h1)). Qed.
Lemma lem7660762 {_140423 _140433 _140434 : Type'} (_98554 : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) : (term13 _140423 _140433 _140434 _98554) = _98554.
Proof. exact (@lem7660761 _140423 _140433 _140434 _98554 h1). Qed.
Lemma lem7660763 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) : (term13 _140423 _140433 _140434 y) = y.
Proof. exact (@lem7660762 _140423 _140433 _140434 y h1). Qed.
Lemma lem7660764 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) : term153 _140423 _140433 _140434 y.
Proof. exact (fun h0 : term154 _140423 _140433 _140434 y => @lem7660763 _140423 _140433 _140434 y h1). Qed.
Lemma lem7660766 (p : Prop) : (term112 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem7660767 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) : (term153 _140423 _140433 _140434 y) = ((term13 _140423 _140433 _140434 y) = y).
Proof. exact (@lem7660766 ((term13 _140423 _140433 _140434 y) = y)). Qed.
Lemma lem7660768 {_140423 _140433 _140434 : Type'} (y : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) : (term13 _140423 _140433 _140434 y) = y.
Proof. exact (EQ_MP (@lem7660767 _140423 _140433 _140434 y) (@lem7660764 _140423 _140433 _140434 y h1)). Qed.
Lemma lem7660769 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) (h2 : term21 _140423 _140433 _140434 x y) : term176 _140423 _140433 _140434 x y.
Proof. exact (conj (@lem7660759 _140423 _140433 _140434 x y h1 h2) (@lem7660768 _140423 _140433 _140434 y h1)). Qed.
Lemma lem7660771 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : term171 _140423 _140433 _140434 x y z.
Proof. exact (EQ_MP (@lem7660745 _140423 _140433 _140434 x y z) (@lem7660724 _140423 _140433 _140434 y x z)). Qed.
Lemma lem7660772 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (z : type3 _140423 _140433 _140434) : term171 _140423 _140433 _140434 x y z.
Proof. exact (@lem7660771 _140423 _140433 _140434 x y z). Qed.
Lemma lem7660773 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : term177 _140423 _140433 _140434 x y.
Proof. exact (@lem7660772 _140423 _140433 _140434 (term13 _140423 _140433 _140434 y) x y). Qed.
Lemma lem7660776 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) (h2 : term21 _140423 _140433 _140434 x y) : x = y.
Proof. exact (@lem7660773 _140423 _140433 _140434 x y (@lem7660769 _140423 _140433 _140434 x y h1 h2)). Qed.
Lemma lem7660777 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) (h2 : term21 _140423 _140433 _140434 x y) : term178 _140423 _140433 _140434 x y.
Proof. exact (fun h0 : term98 _140423 _140433 _140434 x y => @lem7660776 _140423 _140433 _140434 x y h1 h2). Qed.
Lemma lem7660779 (p : Prop) : (term112 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem7660780 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term178 _140423 _140433 _140434 x y) = (x = y).
Proof. exact (@lem7660779 (x = y)). Qed.
Lemma lem7660781 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) (h2 : term21 _140423 _140433 _140434 x y) : x = y.
Proof. exact (EQ_MP (@lem7660780 _140423 _140433 _140434 x y) (@lem7660777 _140423 _140433 _140434 x y h1 h2)). Qed.
Lemma lem7660784 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem7660786 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) : (term98 _140423 _140433 _140434 x y) = (term179 _140423 _140433 _140434 x y).
Proof. exact (@lem7660784 (x = y)). Qed.
Lemma lem7660789 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term21 _140423 _140433 _140434 x y) : term179 _140423 _140433 _140434 x y.
Proof. exact (EQ_MP (@lem7660786 _140423 _140433 _140434 x y) (@lem7660239 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660792 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) (h2 : term21 _140423 _140433 _140434 x y) : False.
Proof. exact (@lem7660789 _140423 _140433 _140434 x y h2 (@lem7660781 _140423 _140433 _140434 x y h1 h2)). Qed.
Lemma lem7660793 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) (h2 : term21 _140423 _140433 _140434 x y) : term114.
Proof. exact (fun h0 : ~ False => @lem7660792 _140423 _140433 _140434 x y h1 h2). Qed.
Lemma lem7660795 (p : Prop) : (term112 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem7660796 : term114 = False.
Proof. exact (@lem7660795 False). Qed.
Lemma lem7660797 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) (h2 : term21 _140423 _140433 _140434 x y) : False.
Proof. exact (EQ_MP (@lem7660796) (@lem7660793 _140423 _140433 _140434 x y h1 h2)). Qed.
Lemma lem7660798 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term96 _140423 _140433 _140434 x y) (h2 : term24 _140423 _140433 _140434 x y) : False.
Proof. exact (EQ_MP (@lem7660448) (@lem7660445 _140423 _140433 _140434 x y h1 h2)). Qed.
Lemma lem7660799 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term95 _140423 _140433 _140434 x y) (h2 : term24 _140423 _140433 _140434 x y) : False.
Proof. exact (EQ_MP (@lem7660386) (@lem7660383 _140423 _140433 _140434 x y h1 h2)). Qed.
Lemma lem7660800 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term96 _140423 _140433 _140434 x y) (h2 : term24 _140423 _140433 _140434 x y) : (term96 _140423 _140433 _140434 x y) = False.
Proof. exact (prop_ext (fun h3 : term96 _140423 _140433 _140434 x y => @lem7660798 _140423 _140433 _140434 x y h1 h2) (fun h3 : False => @lem7660235 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660801 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term96 _140423 _140433 _140434 x y) (h2 : term24 _140423 _140433 _140434 x y) : False.
Proof. exact (EQ_MP (@lem7660800 _140423 _140433 _140434 x y h1 h2) (@lem7660235 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660802 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term95 _140423 _140433 _140434 x y) (h2 : term24 _140423 _140433 _140434 x y) : (term95 _140423 _140433 _140434 x y) = False.
Proof. exact (prop_ext (fun h3 : term95 _140423 _140433 _140434 x y => @lem7660799 _140423 _140433 _140434 x y h1 h2) (fun h3 : False => @lem7660229 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660803 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term95 _140423 _140433 _140434 x y) (h2 : term24 _140423 _140433 _140434 x y) : False.
Proof. exact (EQ_MP (@lem7660802 _140423 _140433 _140434 x y h1 h2) (@lem7660229 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660804 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term96 _140423 _140433 _140434 x y) (h2 : term24 _140423 _140433 _140434 x y) : (term96 _140423 _140433 _140434 x y) = False.
Proof. exact (prop_ext (fun h3 : term96 _140423 _140433 _140434 x y => @lem7660801 _140423 _140433 _140434 x y h1 h2) (fun h3 : False => @lem7660195 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660805 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term96 _140423 _140433 _140434 x y) (h2 : term24 _140423 _140433 _140434 x y) : False.
Proof. exact (EQ_MP (@lem7660804 _140423 _140433 _140434 x y h1 h2) (@lem7660195 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660806 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term95 _140423 _140433 _140434 x y) (h2 : term24 _140423 _140433 _140434 x y) : (term95 _140423 _140433 _140434 x y) = False.
Proof. exact (prop_ext (fun h3 : term95 _140423 _140433 _140434 x y => @lem7660803 _140423 _140433 _140434 x y h1 h2) (fun h3 : False => @lem7660180 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660807 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term95 _140423 _140433 _140434 x y) (h2 : term24 _140423 _140433 _140434 x y) : False.
Proof. exact (EQ_MP (@lem7660806 _140423 _140433 _140434 x y h1 h2) (@lem7660180 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660808 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) (h2 : term21 _140423 _140433 _140434 x y) : (term4 _140423 _140433 _140434) = False.
Proof. exact (prop_ext (fun h3 : term4 _140423 _140433 _140434 => @lem7660797 _140423 _140433 _140434 x y h1 h2) (fun h3 : False => @lem7660202 _140423 _140433 _140434 h1)). Qed.
Lemma lem7660809 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) (h2 : term21 _140423 _140433 _140434 x y) : False.
Proof. exact (EQ_MP (@lem7660808 _140423 _140433 _140434 x y h1 h2) (@lem7660202 _140423 _140433 _140434 h1)). Qed.
Lemma lem7660810 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term96 _140423 _140433 _140434 x y) (h2 : term24 _140423 _140433 _140434 x y) : (term96 _140423 _140433 _140434 x y) = False.
Proof. exact (prop_ext (fun h3 : term96 _140423 _140433 _140434 x y => @lem7660805 _140423 _140433 _140434 x y h1 h2) (fun h3 : False => @lem7660195 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660811 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term96 _140423 _140433 _140434 x y) (h2 : term24 _140423 _140433 _140434 x y) : False.
Proof. exact (EQ_MP (@lem7660810 _140423 _140433 _140434 x y h1 h2) (@lem7660195 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660812 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term95 _140423 _140433 _140434 x y) (h2 : term24 _140423 _140433 _140434 x y) : (term95 _140423 _140433 _140434 x y) = False.
Proof. exact (prop_ext (fun h3 : term95 _140423 _140433 _140434 x y => @lem7660807 _140423 _140433 _140434 x y h1 h2) (fun h3 : False => @lem7660180 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660813 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term95 _140423 _140433 _140434 x y) (h2 : term24 _140423 _140433 _140434 x y) : False.
Proof. exact (EQ_MP (@lem7660812 _140423 _140433 _140434 x y h1 h2) (@lem7660180 _140423 _140433 _140434 x y h1)). Qed.
Lemma lem7660814 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term24 _140423 _140433 _140434 x y) : False.
Proof. exact (or_elim (@lem7660158 _140423 _140433 _140434 x y h1) (fun h0 : term95 _140423 _140433 _140434 x y => @lem7660813 _140423 _140433 _140434 x y h0 h1) (fun h0 : term96 _140423 _140433 _140434 x y => @lem7660811 _140423 _140433 _140434 x y h0 h1)). Qed.
Lemma lem7660815 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) (h2 : term28 _140423 _140433 _140434 x y) : False.
Proof. exact (or_elim (@lem7660155 _140423 _140433 _140434 x y h2) (fun h0 : term24 _140423 _140433 _140434 x y => @lem7660814 _140423 _140433 _140434 x y h0) (fun h0 : term21 _140423 _140433 _140434 x y => @lem7660809 _140423 _140433 _140434 x y h1 h0)). Qed.
Lemma lem7660816 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) (h2 : term28 _140423 _140433 _140434 x y) : (term28 _140423 _140433 _140434 x y) = False.
Proof. exact (prop_ext (fun h3 : term28 _140423 _140433 _140434 x y => @lem7660815 _140423 _140433 _140434 x y h1 h2) (fun h3 : False => @lem7660155 _140423 _140433 _140434 x y h2)). Qed.
Lemma lem7660817 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) (h2 : term28 _140423 _140433 _140434 x y) : False.
Proof. exact (EQ_MP (@lem7660816 _140423 _140433 _140434 x y h1 h2) (@lem7660155 _140423 _140433 _140434 x y h2)). Qed.
Lemma lem7660818 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) (h2 : term28 _140423 _140433 _140434 x y) : (term4 _140423 _140433 _140434) = False.
Proof. exact (prop_ext (fun h3 : term4 _140423 _140433 _140434 => @lem7660817 _140423 _140433 _140434 x y h1 h2) (fun h3 : False => @lem7660087 _140423 _140433 _140434 h1)). Qed.
Lemma lem7660819 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (y : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) (h2 : term28 _140423 _140433 _140434 x y) : False.
Proof. exact (EQ_MP (@lem7660818 _140423 _140433 _140434 x y h1 h2) (@lem7660087 _140423 _140433 _140434 h1)). Qed.
Lemma lem7660820 {_140423 _140433 _140434 : Type'} (x : type3 _140423 _140433 _140434) (h1 : term4 _140423 _140433 _140434) (h2 : term38 _140423 _140433 _140434 x) : False.
Proof. exact (ex_elim (@lem7660069 _140423 _140433 _140434 x h2) (fun y : type3 _140423 _140433 _140434 => fun h0 : term37 _140423 _140433 _140434 x y => @lem7660819 _140423 _140433 _140434 x y h1 h0)). Qed.
Lemma lem7660821 {_140423 _140433 _140434 : Type'} (h1 : term4 _140423 _140433 _140434) (h2 : term3 _140423 _140433 _140434) : False.
Proof. exact (ex_elim (@lem7660055 _140423 _140433 _140434 h2) (fun x : type3 _140423 _140433 _140434 => fun h0 : term43 _140423 _140433 _140434 x => @lem7660820 _140423 _140433 _140434 x h1 h0)). Qed.
Lemma lem7660822 {_140423 _140433 _140434 : Type'} (h1 : term4 _140423 _140433 _140434) (h2 : term3 _140423 _140433 _140434) : (term4 _140423 _140433 _140434) = False.
Proof. exact (prop_ext (fun h3 : term4 _140423 _140433 _140434 => @lem7660821 _140423 _140433 _140434 h1 h2) (fun h3 : False => @lem7660068 _140423 _140433 _140434 h1)). Qed.
Lemma lem7660823 {_140423 _140433 _140434 : Type'} (h1 : term4 _140423 _140433 _140434) (h2 : term3 _140423 _140433 _140434) : False.
Proof. exact (EQ_MP (@lem7660822 _140423 _140433 _140434 h1 h2) (@lem7660068 _140423 _140433 _140434 h1)). Qed.
Lemma lem7660824 {_140423 _140433 _140434 : Type'} (h1 : term3 _140423 _140433 _140434) : term9 _140423 _140433 _140434.
Proof. exact (fun h0 : term4 _140423 _140433 _140434 => @lem7660823 _140423 _140433 _140434 h0 h1). Qed.
Lemma lem7660825 {_140423 _140433 _140434 : Type'} : (term9 _140423 _140433 _140434) = (term10 _140423 _140433 _140434).
Proof. exact (@lem69 (term4 _140423 _140433 _140434)). Qed.
Lemma lem7660826 {_140423 _140433 _140434 : Type'} (h1 : term3 _140423 _140433 _140434) : term10 _140423 _140433 _140434.
Proof. exact (EQ_MP (@lem7660825 _140423 _140433 _140434) (@lem7660824 _140423 _140433 _140434 h1)). Qed.
Lemma lem7660827 {_140423 _140433 _140434 : Type'} : term12 _140423 _140433 _140434.
Proof. exact (fun h0 : term3 _140423 _140433 _140434 => @lem7660826 _140423 _140433 _140434 h0). Qed.
Lemma lem7660828 {_140423 _140433 _140434 : Type'} : term5 _140423 _140433 _140434.
Proof. exact (EQ_MP (@lem7659685 _140423 _140433 _140434) (@lem7660827 _140423 _140433 _140434)). Qed.
Lemma lem7660830 {_140423 _140433 _140434 : Type'} : term5 _140423 _140433 _140434.
Proof. exact (@lem7659606 _140423 _140433 _140434 (@lem7660828 _140423 _140433 _140434)). Qed.
Lemma lem7660831 {_140423 _140433 _140434 : Type'} (h1 : term3 _140423 _140433 _140434) : term9 _140423 _140433 _140434.
Proof. exact (@lem7660830 _140423 _140433 _140434 (@lem7659587 _140423 _140433 _140434 h1)). Qed.
Lemma lem7660832 {_140423 _140433 _140434 : Type'} (h1 : term3 _140423 _140433 _140434) : False.
Proof. exact (@lem7660831 _140423 _140433 _140434 h1 (@lem7659588 _140423 _140433 _140434)). Qed.
Lemma lem7660833 {_140423 _140433 _140434 : Type'} (h1 : term3 _140423 _140433 _140434) : (term3 _140423 _140433 _140434) = False.
Proof. exact (prop_ext (fun h2 : term3 _140423 _140433 _140434 => @lem7660832 _140423 _140433 _140434 h1) (fun h2 : False => @lem7659587 _140423 _140433 _140434 h1)). Qed.
Lemma lem7660834 {_140423 _140433 _140434 : Type'} (h1 : term3 _140423 _140433 _140434) : False.
Proof. exact (EQ_MP (@lem7660833 _140423 _140433 _140434 h1) (@lem7659587 _140423 _140433 _140434 h1)). Qed.
Lemma lem7660835 {_140423 _140433 _140434 : Type'} : term2 _140423 _140433 _140434.
Proof. exact (fun h0 : term3 _140423 _140433 _140434 => @lem7660834 _140423 _140433 _140434 h0). Qed.
Lemma lem7660836 {_140423 _140433 _140434 : Type'} : term1 _140423 _140433 _140434.
Proof. exact (EQ_MP (@lem7659586 _140423 _140433 _140434) (@lem7660835 _140423 _140433 _140434)). Qed.
