require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_type_abbrevs;
require open hol-light.hol_terms;
symbol term21 a0 (x0: El bool) ≔ (∀ (λ y0 : El a0, x0));
symbol term15 (x0: El num) ≔ ((@= num) ((@CARD num) ((@GSPEC num) (λ y0 : El num, (∃ (λ y1 : El num, ((@SETSPEC num) y0 (<= y1 x0) y1)))))));
symbol term14 (x0: El num) ≔ ((@CARD num) ((@GSPEC num) (λ y0 : El num, (∃ (λ y1 : El num, ((@SETSPEC num) y0 (<= y1 x0) y1))))));
symbol term9 ≔ (λ y0 : El num, ((@HAS_SIZE num) ((@GSPEC num) (λ y1 : El num, (∃ (λ y2 : El num, ((@SETSPEC num) y1 (<= y2 y0) y2))))) (+ y0 (NUMERAL (BIT1 _0)))));
symbol term10 ≔ (λ y0 : El num, (∧ ((@FINITE num) ((@GSPEC num) (λ y1 : El num, (∃ (λ y2 : El num, ((@SETSPEC num) y1 (<= y2 y0) y2)))))) (= ((@CARD num) ((@GSPEC num) (λ y1 : El num, (∃ (λ y2 : El num, ((@SETSPEC num) y1 (<= y2 y0) y2)))))) (+ y0 (NUMERAL (BIT1 _0))))));
symbol term2 a0 (x0: El (fun a0 bool)) (x1: El num) ≔ ((λ y0 : El num, (= ((@HAS_SIZE a0) x0 y0) (∧ ((@FINITE a0) x0) (= ((@CARD a0) x0) y0)))) x1);
symbol term13 (x0: El num) ≔ ((λ y0 : El num, (∧ ((@FINITE num) ((@GSPEC num) (λ y1 : El num, (∃ (λ y2 : El num, ((@SETSPEC num) y1 (<= y2 y0) y2)))))) (= ((@CARD num) ((@GSPEC num) (λ y1 : El num, (∃ (λ y2 : El num, ((@SETSPEC num) y1 (<= y2 y0) y2)))))) (+ y0 (NUMERAL (BIT1 _0)))))) x0);
symbol term20 ≔ (∀ (λ y0 : El num, T));
symbol term6 (x0: El num) ≔ (∧ ((@FINITE num) ((@GSPEC num) (λ y0 : El num, (∃ (λ y1 : El num, ((@SETSPEC num) y0 (<= y1 x0) y1)))))) (= ((@CARD num) ((@GSPEC num) (λ y0 : El num, (∃ (λ y1 : El num, ((@SETSPEC num) y0 (<= y1 x0) y1)))))) (+ x0 (NUMERAL (BIT1 _0)))));
symbol term8 (x0: El num) ≔ (+ x0 (NUMERAL (BIT1 _0)));
symbol term0 a0 (x0: El (fun a0 bool)) ≔ ((λ y0 : El (fun a0 bool), (∀ (λ y1 : El num, (= ((@HAS_SIZE a0) y0 y1) (∧ ((@FINITE a0) y0) (= ((@CARD a0) y0) y1)))))) x0);
symbol term18 ≔ (λ y0 : El num, T);
symbol term4 (x0: El (fun num bool)) (x1: El num) ≔ (∧ ((@FINITE num) x0) (= ((@CARD num) x0) x1));
symbol term3 a0 (x0: El (fun a0 bool)) (x1: El num) ≔ (∧ ((@FINITE a0) x0) (= ((@CARD a0) x0) x1));
symbol term17 ≔ (λ y0 : El num, (= ((@CARD num) ((@GSPEC num) (λ y1 : El num, (∃ (λ y2 : El num, ((@SETSPEC num) y1 (<= y2 y0) y2)))))) (+ y0 (NUMERAL (BIT1 _0)))));
symbol term12 ≔ (∀ (λ y0 : El num, (∧ ((@FINITE num) ((@GSPEC num) (λ y1 : El num, (∃ (λ y2 : El num, ((@SETSPEC num) y1 (<= y2 y0) y2)))))) (= ((@CARD num) ((@GSPEC num) (λ y1 : El num, (∃ (λ y2 : El num, ((@SETSPEC num) y1 (<= y2 y0) y2)))))) (+ y0 (NUMERAL (BIT1 _0)))))));
symbol term16 (x0: El num) ≔ ((@= num) (+ x0 (NUMERAL (BIT1 _0))));
symbol term1 a0 (x0: El (fun a0 bool)) ≔ (∀ (λ y0 : El num, (= ((@HAS_SIZE a0) x0 y0) (∧ ((@FINITE a0) x0) (= ((@CARD a0) x0) y0)))));
symbol term11 ≔ (∀ (λ y0 : El num, ((@HAS_SIZE num) ((@GSPEC num) (λ y1 : El num, (∃ (λ y2 : El num, ((@SETSPEC num) y1 (<= y2 y0) y2))))) (+ y0 (NUMERAL (BIT1 _0))))));
symbol term22 (x0: El bool) ≔ (∀ (λ y0 : El num, x0));
symbol term19 ≔ (∀ (λ y0 : El num, (= ((@CARD num) ((@GSPEC num) (λ y1 : El num, (∃ (λ y2 : El num, ((@SETSPEC num) y1 (<= y2 y0) y2)))))) (+ y0 (NUMERAL (BIT1 _0))))));
symbol term5 (x0: El num) ≔ ((@HAS_SIZE num) ((@GSPEC num) (λ y0 : El num, (∃ (λ y1 : El num, ((@SETSPEC num) y0 (<= y1 x0) y1))))) (+ x0 (NUMERAL (BIT1 _0))));
symbol term7 (x0: El num) ≔ ((@GSPEC num) (λ y0 : El num, (∃ (λ y1 : El num, ((@SETSPEC num) y0 (<= y1 x0) y1)))));
