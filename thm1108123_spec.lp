require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_terms;
symbol lem1108123 [_25645 _25647 _25655] : Prf (= (@ITLIST2 _25645 _25647 _25655) ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (fun _25647 (fun _25655 (fun _25645 _25645))) (fun (list _25647) (fun (list _25655) (fun _25645 _25645)))))) (λ ITLIST2' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (fun _25647 (fun _25655 (fun _25645 _25645))) (fun (list _25647) (fun (list _25655) (fun _25645 _25645))))), (∀ (λ _18038 : El (prod num (prod num (prod num (prod num (prod num (prod num num)))))), (∧ (∀ (λ f : El (fun _25647 (fun _25655 (fun _25645 _25645))), (∀ (λ l2 : El (list _25655), (∀ (λ b : El _25645, (= (ITLIST2' _18038 f (@NIL _25647) l2 b) b))))))) (∀ (λ h1' : El _25647, (∀ (λ f : El (fun _25647 (fun _25655 (fun _25645 _25645))), (∀ (λ t1 : El (list _25647), (∀ (λ l2 : El (list _25655), (∀ (λ b : El _25645, (= (ITLIST2' _18038 f ((@CONS _25647) h1' t1) l2 b) (f h1' ((@HD _25655) l2) (ITLIST2' _18038 f t1 ((@TL _25655) l2) b))))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))))))))));
