Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_terms.
Require Import hol_axioms.
Require Import hol_type_abbrevs.
Require Import MINIMAL_BAD_SEQUENCE_term_abbrevs.
Require Import DISJ_ACI_spec.
Require Import DISJ_ASSOC_spec.
Require Import MONO_EXISTS_spec.
Require Import WF_spec.
Require Import WF_MEASURE_GEN_spec.
Require Import WF_num_spec.
Require Import thm0_spec.
Require Import thm10578_spec.
Require Import thm10597_spec.
Require Import thm16445_spec.
Require Import thm16446_spec.
Require Import thm16474_spec.
Require Import thm16506_spec.
Require Import thm16507_spec.
Require Import thm16933_spec.
Require Import thm17045_spec.
Require Import thm17160_spec.
Require Import thm17265_spec.
Require Import thm17362_spec.
Require Import thm17646_spec.
Require Import thm1809_spec.
Require Import thm1810_spec.
Require Import thm1815_spec.
Require Import thm1816_spec.
Require Import thm1820_spec.
Require Import thm1821_spec.
Require Import thm1822_spec.
Require Import thm18392_spec.
Require Import thm18394_spec.
Require Import thm1842_spec.
Require Import thm1843_spec.
Require Import thm1862_spec.
Require Import thm1863_spec.
Require Import thm18898_spec.
Require Import thm18899_spec.
Require Import thm18904_spec.
Require Import thm18905_spec.
Require Import thm18910_spec.
Require Import thm18911_spec.
Require Import thm18922_spec.
Require Import thm18923_spec.
Require Import thm18928_spec.
Require Import thm18929_spec.
Require Import thm19006_spec.
Require Import thm19007_spec.
Require Import thm19012_spec.
Require Import thm19013_spec.
Require Import thm19018_spec.
Require Import thm19019_spec.
Require Import thm19024_spec.
Require Import thm19025_spec.
Require Import thm19490_spec.
Require Import thm19699_spec.
Require Import thm20661_spec.
Require Import thm20662_spec.
Require Import thm20664_spec.
Require Import thm20665_spec.
Require Import thm20668_spec.
Require Import thm20682_spec.
Require Import thm20764_spec.
Require Import thm20780_spec.
Require Import thm20789_spec.
Require Import thm20895_spec.
Require Import thm20904_spec.
Require Import thm21007_spec.
Require Import thm21021_spec.
Require Import thm21028_spec.
Require Import thm21107_spec.
Require Import thm21114_spec.
Require Import thm21182_spec.
Require Import thm21385_spec.
Require Import thm21386_spec.
Require Import thm21394_spec.
Require Import thm21490_spec.
Require Import thm358361_spec.
Require Import thm4211_spec.
Require Import thm7_spec.
Require Import thm75622_spec.
Require Import thm75623_spec.
Require Import thm89994_spec.
Lemma lem369136 : term0.
Proof. exact (proj2 (@lem89994)). Qed.
Lemma lem369137 (m : nat) : term1 m.
Proof. exact (@lem369136 m). Qed.
Lemma lem369138 (m : nat) : (term1 m) = (term2 m).
Proof. exact (eq_refl (term1 m)). Qed.
Lemma lem369139 (m : nat) : term2 m.
Proof. exact (EQ_MP (@lem369138 m) (@lem369137 m)). Qed.
Lemma lem369140 (m : nat) (n : nat) : term3 m n.
Proof. exact (@lem369139 m n). Qed.
Lemma lem369141 (m : nat) (n : nat) : (term3 m n) = ((term4 m n) = (term5 m n)).
Proof. exact (eq_refl (term3 m n)). Qed.
Lemma lem369143 : term6.
Proof. exact (proj1 (@lem89994)). Qed.
Lemma lem369144 (m : nat) : term7 m.
Proof. exact (@lem369143 m). Qed.
Lemma lem369145 (m : nat) : (term7 m) = ((term8 m) = False).
Proof. exact (eq_refl (term7 m)). Qed.
Lemma lem369147 {A : Type'} (lt2 : type1402 A) : term9 A lt2.
Proof. exact (@lem303045 A lt2). Qed.
Lemma lem369148 {A : Type'} (lt2 : type1402 A) : (term9 A lt2) = ((@WF A lt2) = (term10 A lt2)).
Proof. exact (eq_refl (term9 A lt2)). Qed.
Lemma lem369150 {A : Type'} : term11 A.
Proof. exact (@lem361737 (nat -> A) A). Qed.
Lemma lem369151 {A : Type'} (lt2 : type1402 A) : term12 A lt2.
Proof. exact (@lem369150 A lt2). Qed.
Lemma lem369152 {A : Type'} (lt2 : type1402 A) : (term12 A lt2) = (term13 A lt2).
Proof. exact (eq_refl (term12 A lt2)). Qed.
Lemma lem369153 {A : Type'} (lt2 : type1402 A) : term13 A lt2.
Proof. exact (EQ_MP (@lem369152 A lt2) (@lem369151 A lt2)). Qed.
Lemma lem369154 {A : Type'} (lt2 : type1402 A) (n : nat) : term14 A lt2 n.
Proof. exact (@lem369153 A lt2 (term15 A n)). Qed.
Lemma lem369155 {A : Type'} (lt2 : type1402 A) (n : nat) : (term14 A lt2 n) = (term16 A lt2 n).
Proof. exact (eq_refl (term14 A lt2 n)). Qed.
Lemma lem369156 {A : Type'} (lt2 : type1402 A) (n : nat) : term16 A lt2 n.
Proof. exact (EQ_MP (@lem369155 A lt2 n) (@lem369154 A lt2 n)). Qed.
Lemma lem369157 (t1 : Prop) : term17 t1.
Proof. exact (@lem693 t1). Qed.
Lemma lem369158 (t1 : Prop) : (term17 t1) = (term18 t1).
Proof. exact (eq_refl (term17 t1)). Qed.
Lemma lem369159 (t1 : Prop) : term18 t1.
Proof. exact (EQ_MP (@lem369158 t1) (@lem369157 t1)). Qed.
Lemma lem369160 (t1 : Prop) (t2 : Prop) : term19 t1 t2.
Proof. exact (@lem369159 t1 t2). Qed.
Lemma lem369161 (t1 : Prop) (t2 : Prop) : (term19 t1 t2) = (term20 t1 t2).
Proof. exact (eq_refl (term19 t1 t2)). Qed.
Lemma lem369162 (t1 : Prop) (t2 : Prop) : term20 t1 t2.
Proof. exact (EQ_MP (@lem369161 t1 t2) (@lem369160 t1 t2)). Qed.
Lemma lem369163 (t1 : Prop) (t2 : Prop) (t3 : Prop) : term21 t1 t2 t3.
Proof. exact (@lem369162 t1 t2 t3). Qed.
Lemma lem369164 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term21 t1 t2 t3) = ((term22 t1 t2 t3) = (term23 t1 t2 t3)).
Proof. exact (eq_refl (term21 t1 t2 t3)). Qed.
Lemma lem369165 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term22 t1 t2 t3) = (term23 t1 t2 t3).
Proof. exact (EQ_MP (@lem369164 t1 t2 t3) (@lem369163 t1 t2 t3)). Qed.
Lemma lem369166 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term23 t1 t2 t3) = (term22 t1 t2 t3).
Proof. exact (SYM (@lem369165 t1 t2 t3)). Qed.
Lemma lem369168 (p : Prop) : p = (term24 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem369169 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : ((term25 _16548 _16549 _16551 P Q f A B) = (term26 _16548 _16549 _16551 P Q B f A)) = (term27 _16548 _16549 _16551 P Q B f A).
Proof. exact (@lem369168 ((term25 _16548 _16549 _16551 P Q f A B) = (term26 _16548 _16549 _16551 P Q B f A))). Qed.
Lemma lem369170 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term27 _16548 _16549 _16551 P Q B f A) = ((term25 _16548 _16549 _16551 P Q f A B) = (term26 _16548 _16549 _16551 P Q B f A)).
Proof. exact (SYM (@lem369169 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem369171 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term28 _16548 _16549 _16551 P Q B f A) : term28 _16548 _16549 _16551 P Q B f A.
Proof. exact (h1). Qed.
Lemma lem369174 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term27 _16548 _16549 _16551 P Q B f A) : term27 _16548 _16549 _16551 P Q B f A.
Proof. exact (h1). Qed.
Lemma lem369175 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : term29 _16548 _16549 _16551 P Q B f A.
Proof. exact (fun h0 : term27 _16548 _16549 _16551 P Q B f A => @lem369174 _16548 _16549 _16551 P Q B f A h0). Qed.
Lemma lem369176 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term29 _16548 _16549 _16551 P Q B f A) : term29 _16548 _16549 _16551 P Q B f A.
Proof. exact (h1). Qed.
Lemma lem369177 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term27 _16548 _16549 _16551 P Q B f A) : term27 _16548 _16549 _16551 P Q B f A.
Proof. exact (h1). Qed.
Lemma lem369178 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term27 _16548 _16549 _16551 P Q B f A) (h2 : term29 _16548 _16549 _16551 P Q B f A) : term27 _16548 _16549 _16551 P Q B f A.
Proof. exact (@lem369176 _16548 _16549 _16551 P Q B f A h2 (@lem369177 _16548 _16549 _16551 P Q B f A h1)). Qed.
Lemma lem369179 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term27 _16548 _16549 _16551 P Q B f A) : term30 _16548 _16549 _16551 P Q B f A.
Proof. exact (fun h0 : term29 _16548 _16549 _16551 P Q B f A => @lem369178 _16548 _16549 _16551 P Q B f A h1 h0). Qed.
Lemma lem369180 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term29 _16548 _16549 _16551 P Q B f A) : term29 _16548 _16549 _16551 P Q B f A.
Proof. exact (h1). Qed.
Lemma lem369181 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term27 _16548 _16549 _16551 P Q B f A) (h2 : term29 _16548 _16549 _16551 P Q B f A) : term27 _16548 _16549 _16551 P Q B f A.
Proof. exact (@lem369179 _16548 _16549 _16551 P Q B f A h1 (@lem369180 _16548 _16549 _16551 P Q B f A h2)). Qed.
Lemma lem369182 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term29 _16548 _16549 _16551 P Q B f A) : term29 _16548 _16549 _16551 P Q B f A.
Proof. exact (fun h0 : term27 _16548 _16549 _16551 P Q B f A => @lem369181 _16548 _16549 _16551 P Q B f A h0 h1). Qed.
Lemma lem369183 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : term31 _16548 _16549 _16551 P Q B f A.
Proof. exact (fun h0 : term29 _16548 _16549 _16551 P Q B f A => @lem369182 _16548 _16549 _16551 P Q B f A h0). Qed.
Lemma lem369186 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : term29 _16548 _16549 _16551 P Q B f A.
Proof. exact (@lem369183 _16548 _16549 _16551 P Q B f A (@lem369175 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem369187 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : term29 _16548 _16549 _16551 P Q B f A.
Proof. exact (@lem369186 _16548 _16549 _16551 P Q B f A). Qed.
Lemma lem369209 (t : Prop) : (t -> False) = (~ t).
Proof. exact (proj2 (@lem16474 t)). Qed.
Lemma lem369210 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term27 _16548 _16549 _16551 P Q B f A) = (term32 _16548 _16549 _16551 P Q B f A).
Proof. exact (@lem369209 (term28 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem369212 (t : Prop) : (term33 t) = t.
Proof. exact (EQ_MP (@lem16507 t) (@lem16506 t)). Qed.
Lemma lem369213 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term32 _16548 _16549 _16551 P Q B f A) = ((term25 _16548 _16549 _16551 P Q f A B) = (term26 _16548 _16549 _16551 P Q B f A)).
Proof. exact (@lem369212 ((term25 _16548 _16549 _16551 P Q f A B) = (term26 _16548 _16549 _16551 P Q B f A))). Qed.
Lemma lem369214 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term27 _16548 _16549 _16551 P Q B f A) = ((term25 _16548 _16549 _16551 P Q f A B) = (term26 _16548 _16549 _16551 P Q B f A)).
Proof. exact (TRANS (@lem369210 _16548 _16549 _16551 P Q B f A) (@lem369213 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem369361 {_16548 _16549 _16551 : Type'} (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term34 _16548 _16549 _16551 Q B f A) = (term35 _16548 _16549 _16551 Q B f A).
Proof. exact (fun_ext (fun P : _16549 -> Prop => @lem369214 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem369362 {_16549 : Type'} : (@all (_16549 -> Prop)) = (@all (_16549 -> Prop)).
Proof. exact (eq_refl (@all (_16549 -> Prop))). Qed.
Lemma lem369363 {_16548 _16549 _16551 : Type'} (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term36 _16548 _16549 _16551 Q B f A) = (term37 _16548 _16549 _16551 Q B f A).
Proof. exact (MK_COMB (@lem369362 _16549) (@lem369361 _16548 _16549 _16551 Q B f A)). Qed.
Lemma lem369368 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term38 _16548 _16549 _16551 B f A) = (term39 _16548 _16549 _16551 B f A).
Proof. exact (fun_ext (fun Q : _16549 -> Prop => @lem369363 _16548 _16549 _16551 Q B f A)). Qed.
Lemma lem369369 {_16549 : Type'} : (@all (_16549 -> Prop)) = (@all (_16549 -> Prop)).
Proof. exact (eq_refl (@all (_16549 -> Prop))). Qed.
Lemma lem369370 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term40 _16548 _16549 _16551 B f A) = (term41 _16548 _16549 _16551 B f A).
Proof. exact (MK_COMB (@lem369369 _16549) (@lem369368 _16548 _16549 _16551 B f A)). Qed.
Lemma lem369375 {_16548 _16549 _16551 : Type'} (f : _16549 -> _16548) (A : _16551 -> Prop) : (term42 _16548 _16549 _16551 f A) = (term43 _16548 _16549 _16551 f A).
Proof. exact (fun_ext (fun B : type1413 _16548 _16551 => @lem369370 _16548 _16549 _16551 B f A)). Qed.
Lemma lem369376 {_16548 _16551 : Type'} : (@all (_16548 -> _16551 -> Prop)) = (@all (_16548 -> _16551 -> Prop)).
Proof. exact (eq_refl (@all (_16548 -> _16551 -> Prop))). Qed.
Lemma lem369377 {_16548 _16549 _16551 : Type'} (f : _16549 -> _16548) (A : _16551 -> Prop) : (term44 _16548 _16549 _16551 f A) = (term45 _16548 _16549 _16551 f A).
Proof. exact (MK_COMB (@lem369376 _16548 _16551) (@lem369375 _16548 _16549 _16551 f A)). Qed.
Lemma lem369382 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) : (term46 _16548 _16549 _16551 A) = (term47 _16548 _16549 _16551 A).
Proof. exact (fun_ext (fun f : _16549 -> _16548 => @lem369377 _16548 _16549 _16551 f A)). Qed.
Lemma lem369383 {_16548 _16549 : Type'} : (@all (_16549 -> _16548)) = (@all (_16549 -> _16548)).
Proof. exact (eq_refl (@all (_16549 -> _16548))). Qed.
Lemma lem369384 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) : (term48 _16548 _16549 _16551 A) = (term49 _16548 _16549 _16551 A).
Proof. exact (MK_COMB (@lem369383 _16548 _16549) (@lem369382 _16548 _16549 _16551 A)). Qed.
Lemma lem369389 {_16548 _16549 _16551 : Type'} : (term50 _16548 _16549 _16551) = (term51 _16548 _16549 _16551).
Proof. exact (fun_ext (fun A : _16551 -> Prop => @lem369384 _16548 _16549 _16551 A)). Qed.
Lemma lem369390 {_16551 : Type'} : (@all (_16551 -> Prop)) = (@all (_16551 -> Prop)).
Proof. exact (eq_refl (@all (_16551 -> Prop))). Qed.
Lemma lem369399 {_16548 _16549 _16551 : Type'} : (term52 _16548 _16549 _16551) = (term53 _16548 _16549 _16551).
Proof. exact (MK_COMB (@lem369390 _16551) (@lem369389 _16548 _16549 _16551)). Qed.
Lemma lem369406 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) (z : _16551) : (term54 _16548 _16549 _16551 B f y A z) = (term54 _16548 _16549 _16551 B f y A z).
Proof. exact (eq_refl (term54 _16548 _16549 _16551 B f y A z)). Qed.
Lemma lem369407 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term55 _16548 _16549 _16551 B f y A) = (term55 _16548 _16549 _16551 B f y A).
Proof. exact (fun_ext (fun z : _16551 => @lem369406 _16548 _16549 _16551 B f y A z)). Qed.
Lemma lem369408 {_16551 : Type'} : (@all _16551) = (@all _16551).
Proof. exact (eq_refl (@all _16551)). Qed.
Lemma lem369409 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term56 _16548 _16549 _16551 B f y A) = (term56 _16548 _16549 _16551 B f y A).
Proof. exact (MK_COMB (@lem369408 _16551) (@lem369407 _16548 _16549 _16551 B f y A)). Qed.
Lemma lem369416 {_16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (y : _16549) : (term57 _16549 P Q y) = (term57 _16549 P Q y).
Proof. exact (eq_refl (term57 _16549 P Q y)). Qed.
Lemma lem369417 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term58 _16548 _16549 _16551 P Q B f y A) = (term58 _16548 _16549 _16551 P Q B f y A).
Proof. exact (MK_COMB (@lem369416 _16549 P Q y) (@lem369409 _16548 _16549 _16551 B f y A)). Qed.
Lemma lem369418 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term59 _16548 _16549 _16551 P Q B f A) = (term59 _16548 _16549 _16551 P Q B f A).
Proof. exact (fun_ext (fun y : _16549 => @lem369417 _16548 _16549 _16551 P Q B f y A)). Qed.
Lemma lem369419 {_16549 : Type'} : (@ex _16549) = (@ex _16549).
Proof. exact (eq_refl (@ex _16549)). Qed.
Lemma lem369420 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term26 _16548 _16549 _16551 P Q B f A) = (term26 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem369419 _16549) (@lem369418 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem369427 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) (z : _16551) : (term60 _16548 _16551 A B a z) = (term60 _16548 _16551 A B a z).
Proof. exact (eq_refl (term60 _16548 _16551 A B a z)). Qed.
Lemma lem369428 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term61 _16548 _16551 A B a) = (term61 _16548 _16551 A B a).
Proof. exact (fun_ext (fun z : _16551 => @lem369427 _16548 _16551 A B a z)). Qed.
Lemma lem369429 {_16551 : Type'} : (@all _16551) = (@all _16551).
Proof. exact (eq_refl (@all _16551)). Qed.
Lemma lem369430 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term62 _16548 _16551 A B a) = (term62 _16548 _16551 A B a).
Proof. exact (MK_COMB (@lem369429 _16551) (@lem369428 _16548 _16551 A B a)). Qed.
Lemma lem369439 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (a : _16548) : (term63 _16548 _16549 P Q f y a) = (term63 _16548 _16549 P Q f y a).
Proof. exact (eq_refl (term63 _16548 _16549 P Q f y a)). Qed.
Lemma lem369440 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (a : _16548) : (term64 _16548 _16549 P Q f a) = (term64 _16548 _16549 P Q f a).
Proof. exact (fun_ext (fun y : _16549 => @lem369439 _16548 _16549 P Q f y a)). Qed.
Lemma lem369441 {_16549 : Type'} : (@ex _16549) = (@ex _16549).
Proof. exact (eq_refl (@ex _16549)). Qed.
Lemma lem369442 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (a : _16548) : (term65 _16548 _16549 P Q f a) = (term65 _16548 _16549 P Q f a).
Proof. exact (MK_COMB (@lem369441 _16549) (@lem369440 _16548 _16549 P Q f a)). Qed.
Lemma lem369443 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem369444 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (a : _16548) : (term66 _16548 _16549 P Q f a) = (term66 _16548 _16549 P Q f a).
Proof. exact (MK_COMB (@lem369443) (@lem369442 _16548 _16549 P Q f a)). Qed.
Lemma lem369445 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term67 _16548 _16549 _16551 P Q f A B a) = (term67 _16548 _16549 _16551 P Q f A B a).
Proof. exact (MK_COMB (@lem369444 _16548 _16549 P Q f a) (@lem369430 _16548 _16551 A B a)). Qed.
Lemma lem369446 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term68 _16548 _16549 _16551 P Q f A B) = (term68 _16548 _16549 _16551 P Q f A B).
Proof. exact (fun_ext (fun a : _16548 => @lem369445 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem369447 {_16548 : Type'} : (@ex _16548) = (@ex _16548).
Proof. exact (eq_refl (@ex _16548)). Qed.
Lemma lem369448 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term25 _16548 _16549 _16551 P Q f A B) = (term25 _16548 _16549 _16551 P Q f A B).
Proof. exact (MK_COMB (@lem369447 _16548) (@lem369446 _16548 _16549 _16551 P Q f A B)). Qed.
Lemma lem369449 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem369450 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term69 _16548 _16549 _16551 P Q f A B) = (term69 _16548 _16549 _16551 P Q f A B).
Proof. exact (MK_COMB (@lem369449) (@lem369448 _16548 _16549 _16551 P Q f A B)). Qed.
Lemma lem369451 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : ((term25 _16548 _16549 _16551 P Q f A B) = (term26 _16548 _16549 _16551 P Q B f A)) = ((term25 _16548 _16549 _16551 P Q f A B) = (term26 _16548 _16549 _16551 P Q B f A)).
Proof. exact (MK_COMB (@lem369450 _16548 _16549 _16551 P Q f A B) (@lem369420 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem369452 {_16548 _16549 _16551 : Type'} (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term35 _16548 _16549 _16551 Q B f A) = (term35 _16548 _16549 _16551 Q B f A).
Proof. exact (fun_ext (fun P : _16549 -> Prop => @lem369451 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem369453 {_16549 : Type'} : (@all (_16549 -> Prop)) = (@all (_16549 -> Prop)).
Proof. exact (eq_refl (@all (_16549 -> Prop))). Qed.
Lemma lem369454 {_16548 _16549 _16551 : Type'} (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term37 _16548 _16549 _16551 Q B f A) = (term37 _16548 _16549 _16551 Q B f A).
Proof. exact (MK_COMB (@lem369453 _16549) (@lem369452 _16548 _16549 _16551 Q B f A)). Qed.
Lemma lem369455 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term39 _16548 _16549 _16551 B f A) = (term39 _16548 _16549 _16551 B f A).
Proof. exact (fun_ext (fun Q : _16549 -> Prop => @lem369454 _16548 _16549 _16551 Q B f A)). Qed.
Lemma lem369456 {_16549 : Type'} : (@all (_16549 -> Prop)) = (@all (_16549 -> Prop)).
Proof. exact (eq_refl (@all (_16549 -> Prop))). Qed.
Lemma lem369457 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term41 _16548 _16549 _16551 B f A) = (term41 _16548 _16549 _16551 B f A).
Proof. exact (MK_COMB (@lem369456 _16549) (@lem369455 _16548 _16549 _16551 B f A)). Qed.
Lemma lem369458 {_16548 _16549 _16551 : Type'} (f : _16549 -> _16548) (A : _16551 -> Prop) : (term43 _16548 _16549 _16551 f A) = (term43 _16548 _16549 _16551 f A).
Proof. exact (fun_ext (fun B : type1413 _16548 _16551 => @lem369457 _16548 _16549 _16551 B f A)). Qed.
Lemma lem369459 {_16548 _16551 : Type'} : (@all (_16548 -> _16551 -> Prop)) = (@all (_16548 -> _16551 -> Prop)).
Proof. exact (eq_refl (@all (_16548 -> _16551 -> Prop))). Qed.
Lemma lem369460 {_16548 _16549 _16551 : Type'} (f : _16549 -> _16548) (A : _16551 -> Prop) : (term45 _16548 _16549 _16551 f A) = (term45 _16548 _16549 _16551 f A).
Proof. exact (MK_COMB (@lem369459 _16548 _16551) (@lem369458 _16548 _16549 _16551 f A)). Qed.
Lemma lem369461 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) : (term47 _16548 _16549 _16551 A) = (term47 _16548 _16549 _16551 A).
Proof. exact (fun_ext (fun f : _16549 -> _16548 => @lem369460 _16548 _16549 _16551 f A)). Qed.
Lemma lem369462 {_16548 _16549 : Type'} : (@all (_16549 -> _16548)) = (@all (_16549 -> _16548)).
Proof. exact (eq_refl (@all (_16549 -> _16548))). Qed.
Lemma lem369463 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) : (term49 _16548 _16549 _16551 A) = (term49 _16548 _16549 _16551 A).
Proof. exact (MK_COMB (@lem369462 _16548 _16549) (@lem369461 _16548 _16549 _16551 A)). Qed.
Lemma lem369464 {_16548 _16549 _16551 : Type'} : (term51 _16548 _16549 _16551) = (term51 _16548 _16549 _16551).
Proof. exact (fun_ext (fun A : _16551 -> Prop => @lem369463 _16548 _16549 _16551 A)). Qed.
Lemma lem369465 {_16551 : Type'} : (@all (_16551 -> Prop)) = (@all (_16551 -> Prop)).
Proof. exact (eq_refl (@all (_16551 -> Prop))). Qed.
Lemma lem369466 {_16548 _16549 _16551 : Type'} : (term53 _16548 _16549 _16551) = (term53 _16548 _16549 _16551).
Proof. exact (MK_COMB (@lem369465 _16551) (@lem369464 _16548 _16549 _16551)). Qed.
Lemma lem369543 {_16548 _16549 _16551 : Type'} : (term52 _16548 _16549 _16551) = (term53 _16548 _16549 _16551).
Proof. exact (TRANS (@lem369399 _16548 _16549 _16551) (@lem369466 _16548 _16549 _16551)). Qed.
Lemma lem369544 {_16548 _16549 _16551 : Type'} : (term53 _16548 _16549 _16551) = (term52 _16548 _16549 _16551).
Proof. exact (SYM (@lem369543 _16548 _16549 _16551)). Qed.
Lemma lem369546 (p : Prop) : p = (term24 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem369547 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : ((term25 _16548 _16549 _16551 P Q f A B) = (term26 _16548 _16549 _16551 P Q B f A)) = (term27 _16548 _16549 _16551 P Q B f A).
Proof. exact (@lem369546 ((term25 _16548 _16549 _16551 P Q f A B) = (term26 _16548 _16549 _16551 P Q B f A))). Qed.
Lemma lem369548 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term27 _16548 _16549 _16551 P Q B f A) = ((term25 _16548 _16549 _16551 P Q f A B) = (term26 _16548 _16549 _16551 P Q B f A)).
Proof. exact (SYM (@lem369547 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem369549 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term28 _16548 _16549 _16551 P Q B f A) : term28 _16548 _16549 _16551 P Q B f A.
Proof. exact (h1). Qed.
Lemma lem369560 {_16548 _16549 : Type'} (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (a : _16548) : (term70 _16548 _16549 Q f y a) = (term71 _16548 _16549 Q f y a).
Proof. exact (@lem17045 (Q y) ((f y) = a)). Qed.
Lemma lem369565 {_16549 : Type'} (P : _16549 -> Prop) (y : _16549) : (term72 _16549 P y) = (term72 _16549 P y).
Proof. exact (eq_refl (term72 _16549 P y)). Qed.
Lemma lem369566 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (a : _16548) : (term73 _16548 _16549 P Q f y a) = (term74 _16548 _16549 P Q f y a).
Proof. exact (MK_COMB (@lem369565 _16549 P y) (@lem369560 _16548 _16549 Q f y a)). Qed.
Lemma lem369567 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (a : _16548) : (term75 _16548 _16549 P Q f y a) = (term73 _16548 _16549 P Q f y a).
Proof. exact (@lem17045 (P y) (term76 _16548 _16549 Q f y a)). Qed.
Lemma lem369568 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (a : _16548) : (term75 _16548 _16549 P Q f y a) = (term74 _16548 _16549 P Q f y a).
Proof. exact (TRANS (@lem369567 _16548 _16549 P Q f y a) (@lem369566 _16548 _16549 P Q f y a)). Qed.
Lemma lem369571 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (a : _16548) : (term63 _16548 _16549 P Q f y a) = (term63 _16548 _16549 P Q f y a).
Proof. exact (eq_refl (term63 _16548 _16549 P Q f y a)). Qed.
Lemma lem369572 {_16549 : Type'} (P : _16549 -> Prop) : (term77 _16549 P) = (term78 _16549 P).
Proof. exact (@lem18394 _16549 P). Qed.
Lemma lem369573 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (a : _16548) : (term79 _16548 _16549 P Q f a) = (term80 _16548 _16549 P Q f a).
Proof. exact (@lem369572 _16549 (term64 _16548 _16549 P Q f a)). Qed.
Lemma lem369574 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (a : _16548) : (term81 _16548 _16549 P Q f a y) = (term63 _16548 _16549 P Q f y a).
Proof. exact (eq_refl (term81 _16548 _16549 P Q f a y)). Qed.
Lemma lem369575 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem369576 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (a : _16548) : (term82 _16548 _16549 P Q f a y) = (term75 _16548 _16549 P Q f y a).
Proof. exact (MK_COMB (@lem369575) (@lem369574 _16548 _16549 P Q f y a)). Qed.
Lemma lem369577 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (a : _16548) : (term82 _16548 _16549 P Q f a y) = (term74 _16548 _16549 P Q f y a).
Proof. exact (TRANS (@lem369576 _16548 _16549 P Q f y a) (@lem369568 _16548 _16549 P Q f y a)). Qed.
Lemma lem369578 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (a : _16548) : (term83 _16548 _16549 P Q f a) = (term84 _16548 _16549 P Q f a).
Proof. exact (fun_ext (fun y : _16549 => @lem369577 _16548 _16549 P Q f y a)). Qed.
Lemma lem369579 {_16549 : Type'} : (@all _16549) = (@all _16549).
Proof. exact (eq_refl (@all _16549)). Qed.
Lemma lem369580 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (a : _16548) : (term80 _16548 _16549 P Q f a) = (term85 _16548 _16549 P Q f a).
Proof. exact (MK_COMB (@lem369579 _16549) (@lem369578 _16548 _16549 P Q f a)). Qed.
Lemma lem369581 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (a : _16548) : (term79 _16548 _16549 P Q f a) = (term85 _16548 _16549 P Q f a).
Proof. exact (TRANS (@lem369573 _16548 _16549 P Q f a) (@lem369580 _16548 _16549 P Q f a)). Qed.
Lemma lem369582 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (a : _16548) : (term64 _16548 _16549 P Q f a) = (term64 _16548 _16549 P Q f a).
Proof. exact (fun_ext (fun y : _16549 => @lem369571 _16548 _16549 P Q f y a)). Qed.
Lemma lem369583 {_16549 : Type'} : (@ex _16549) = (@ex _16549).
Proof. exact (eq_refl (@ex _16549)). Qed.
Lemma lem369584 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (a : _16548) : (term65 _16548 _16549 P Q f a) = (term65 _16548 _16549 P Q f a).
Proof. exact (MK_COMB (@lem369583 _16549) (@lem369582 _16548 _16549 P Q f a)). Qed.
Lemma lem369590 {_16548 _16551 : Type'} (B : type1413 _16548 _16551) (a : _16548) (z : _16551) : (term86 _16548 _16551 B a z) = (B a z).
Proof. exact (@lem16933 (B a z)). Qed.
Lemma lem369592 {_16551 : Type'} (A : _16551 -> Prop) (z : _16551) : (term87 _16551 A z) = (term87 _16551 A z).
Proof. exact (eq_refl (term87 _16551 A z)). Qed.
Lemma lem369593 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) (z : _16551) : (term88 _16548 _16551 A B a z) = (term89 _16548 _16551 A B a z).
Proof. exact (MK_COMB (@lem369592 _16551 A z) (@lem369590 _16548 _16551 B a z)). Qed.
Lemma lem369594 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) (z : _16551) : (term90 _16548 _16551 A B a z) = (term88 _16548 _16551 A B a z).
Proof. exact (@lem17362 (A z) (term91 _16548 _16551 B a z)). Qed.
Lemma lem369595 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) (z : _16551) : (term90 _16548 _16551 A B a z) = (term89 _16548 _16551 A B a z).
Proof. exact (TRANS (@lem369594 _16548 _16551 A B a z) (@lem369593 _16548 _16551 A B a z)). Qed.
Lemma lem369600 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) (z : _16551) : (term60 _16548 _16551 A B a z) = (term92 _16548 _16551 A B a z).
Proof. exact (@lem17265 (A z) (term91 _16548 _16551 B a z)). Qed.
Lemma lem369601 {_16551 : Type'} (P : _16551 -> Prop) : (term93 _16551 P) = (term94 _16551 P).
Proof. exact (@lem18392 _16551 P). Qed.
Lemma lem369602 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term95 _16548 _16551 A B a) = (term96 _16548 _16551 A B a).
Proof. exact (@lem369601 _16551 (term61 _16548 _16551 A B a)). Qed.
Lemma lem369603 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) (z : _16551) : (term97 _16548 _16551 A B a z) = (term60 _16548 _16551 A B a z).
Proof. exact (eq_refl (term97 _16548 _16551 A B a z)). Qed.
Lemma lem369604 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem369605 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) (z : _16551) : (term98 _16548 _16551 A B a z) = (term90 _16548 _16551 A B a z).
Proof. exact (MK_COMB (@lem369604) (@lem369603 _16548 _16551 A B a z)). Qed.
Lemma lem369606 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) (z : _16551) : (term98 _16548 _16551 A B a z) = (term89 _16548 _16551 A B a z).
Proof. exact (TRANS (@lem369605 _16548 _16551 A B a z) (@lem369595 _16548 _16551 A B a z)). Qed.
Lemma lem369607 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term99 _16548 _16551 A B a) = (term100 _16548 _16551 A B a).
Proof. exact (fun_ext (fun z : _16551 => @lem369606 _16548 _16551 A B a z)). Qed.
Lemma lem369608 {_16551 : Type'} : (@ex _16551) = (@ex _16551).
Proof. exact (eq_refl (@ex _16551)). Qed.
Lemma lem369609 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term96 _16548 _16551 A B a) = (term101 _16548 _16551 A B a).
Proof. exact (MK_COMB (@lem369608 _16551) (@lem369607 _16548 _16551 A B a)). Qed.
Lemma lem369610 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term95 _16548 _16551 A B a) = (term101 _16548 _16551 A B a).
Proof. exact (TRANS (@lem369602 _16548 _16551 A B a) (@lem369609 _16548 _16551 A B a)). Qed.
Lemma lem369611 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term61 _16548 _16551 A B a) = (term102 _16548 _16551 A B a).
Proof. exact (fun_ext (fun z : _16551 => @lem369600 _16548 _16551 A B a z)). Qed.
Lemma lem369612 {_16551 : Type'} : (@all _16551) = (@all _16551).
Proof. exact (eq_refl (@all _16551)). Qed.
Lemma lem369613 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term62 _16548 _16551 A B a) = (term103 _16548 _16551 A B a).
Proof. exact (MK_COMB (@lem369612 _16551) (@lem369611 _16548 _16551 A B a)). Qed.
Lemma lem369614 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem369615 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (a : _16548) : (term104 _16548 _16549 P Q f a) = (term105 _16548 _16549 P Q f a).
Proof. exact (MK_COMB (@lem369614) (@lem369581 _16548 _16549 P Q f a)). Qed.
Lemma lem369616 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term106 _16548 _16549 _16551 P Q f A B a) = (term107 _16548 _16549 _16551 P Q f A B a).
Proof. exact (MK_COMB (@lem369615 _16548 _16549 P Q f a) (@lem369610 _16548 _16551 A B a)). Qed.
Lemma lem369617 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term108 _16548 _16549 _16551 P Q f A B a) = (term106 _16548 _16549 _16551 P Q f A B a).
Proof. exact (@lem17045 (term65 _16548 _16549 P Q f a) (term62 _16548 _16551 A B a)). Qed.
Lemma lem369618 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term108 _16548 _16549 _16551 P Q f A B a) = (term107 _16548 _16549 _16551 P Q f A B a).
Proof. exact (TRANS (@lem369617 _16548 _16549 _16551 P Q f A B a) (@lem369616 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem369619 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem369620 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (a : _16548) : (term66 _16548 _16549 P Q f a) = (term66 _16548 _16549 P Q f a).
Proof. exact (MK_COMB (@lem369619) (@lem369584 _16548 _16549 P Q f a)). Qed.
Lemma lem369621 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term67 _16548 _16549 _16551 P Q f A B a) = (term109 _16548 _16549 _16551 P Q f A B a).
Proof. exact (MK_COMB (@lem369620 _16548 _16549 P Q f a) (@lem369613 _16548 _16551 A B a)). Qed.
Lemma lem369622 {_16548 : Type'} (P : _16548 -> Prop) : (term77 _16548 P) = (term78 _16548 P).
Proof. exact (@lem18394 _16548 P). Qed.
Lemma lem369623 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term110 _16548 _16549 _16551 P Q f A B) = (term111 _16548 _16549 _16551 P Q f A B).
Proof. exact (@lem369622 _16548 (term68 _16548 _16549 _16551 P Q f A B)). Qed.
Lemma lem369624 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term112 _16548 _16549 _16551 P Q f A B a) = (term67 _16548 _16549 _16551 P Q f A B a).
Proof. exact (eq_refl (term112 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem369625 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem369626 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term113 _16548 _16549 _16551 P Q f A B a) = (term108 _16548 _16549 _16551 P Q f A B a).
Proof. exact (MK_COMB (@lem369625) (@lem369624 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem369627 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term113 _16548 _16549 _16551 P Q f A B a) = (term107 _16548 _16549 _16551 P Q f A B a).
Proof. exact (TRANS (@lem369626 _16548 _16549 _16551 P Q f A B a) (@lem369618 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem369628 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term114 _16548 _16549 _16551 P Q f A B) = (term115 _16548 _16549 _16551 P Q f A B).
Proof. exact (fun_ext (fun a : _16548 => @lem369627 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem369629 {_16548 : Type'} : (@all _16548) = (@all _16548).
Proof. exact (eq_refl (@all _16548)). Qed.
Lemma lem369630 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term111 _16548 _16549 _16551 P Q f A B) = (term116 _16548 _16549 _16551 P Q f A B).
Proof. exact (MK_COMB (@lem369629 _16548) (@lem369628 _16548 _16549 _16551 P Q f A B)). Qed.
Lemma lem369631 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term110 _16548 _16549 _16551 P Q f A B) = (term116 _16548 _16549 _16551 P Q f A B).
Proof. exact (TRANS (@lem369623 _16548 _16549 _16551 P Q f A B) (@lem369630 _16548 _16549 _16551 P Q f A B)). Qed.
Lemma lem369632 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term68 _16548 _16549 _16551 P Q f A B) = (term117 _16548 _16549 _16551 P Q f A B).
Proof. exact (fun_ext (fun a : _16548 => @lem369621 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem369633 {_16548 : Type'} : (@ex _16548) = (@ex _16548).
Proof. exact (eq_refl (@ex _16548)). Qed.
Lemma lem369634 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term25 _16548 _16549 _16551 P Q f A B) = (term118 _16548 _16549 _16551 P Q f A B).
Proof. exact (MK_COMB (@lem369633 _16548) (@lem369632 _16548 _16549 _16551 P Q f A B)). Qed.
Lemma lem369643 {_16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (y : _16549) : (term119 _16549 P Q y) = (term120 _16549 P Q y).
Proof. exact (@lem17045 (P y) (Q y)). Qed.
Lemma lem369652 {_16551 : Type'} (A : _16551 -> Prop) (z : _16551) : (term121 _16551 A z) = (A z).
Proof. exact (@lem16933 (A z)). Qed.
Lemma lem369654 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (z : _16551) : (term122 _16548 _16549 _16551 B f y z) = (term122 _16548 _16549 _16551 B f y z).
Proof. exact (eq_refl (term122 _16548 _16549 _16551 B f y z)). Qed.
Lemma lem369655 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) (z : _16551) : (term123 _16548 _16549 _16551 B f y A z) = (term124 _16548 _16549 _16551 B f y A z).
Proof. exact (MK_COMB (@lem369654 _16548 _16549 _16551 B f y z) (@lem369652 _16551 A z)). Qed.
Lemma lem369656 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) (z : _16551) : (term125 _16548 _16549 _16551 B f y A z) = (term123 _16548 _16549 _16551 B f y A z).
Proof. exact (@lem17362 (term126 _16548 _16549 _16551 B f y z) (term127 _16551 A z)). Qed.
Lemma lem369657 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) (z : _16551) : (term125 _16548 _16549 _16551 B f y A z) = (term124 _16548 _16549 _16551 B f y A z).
Proof. exact (TRANS (@lem369656 _16548 _16549 _16551 B f y A z) (@lem369655 _16548 _16549 _16551 B f y A z)). Qed.
Lemma lem369662 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) (z : _16551) : (term54 _16548 _16549 _16551 B f y A z) = (term128 _16548 _16549 _16551 B f y A z).
Proof. exact (@lem17265 (term126 _16548 _16549 _16551 B f y z) (term127 _16551 A z)). Qed.
Lemma lem369663 {_16551 : Type'} (P : _16551 -> Prop) : (term93 _16551 P) = (term94 _16551 P).
Proof. exact (@lem18392 _16551 P). Qed.
Lemma lem369664 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term129 _16548 _16549 _16551 B f y A) = (term130 _16548 _16549 _16551 B f y A).
Proof. exact (@lem369663 _16551 (term55 _16548 _16549 _16551 B f y A)). Qed.
Lemma lem369665 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) (z : _16551) : (term131 _16548 _16549 _16551 B f y A z) = (term54 _16548 _16549 _16551 B f y A z).
Proof. exact (eq_refl (term131 _16548 _16549 _16551 B f y A z)). Qed.
Lemma lem369666 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem369667 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) (z : _16551) : (term132 _16548 _16549 _16551 B f y A z) = (term125 _16548 _16549 _16551 B f y A z).
Proof. exact (MK_COMB (@lem369666) (@lem369665 _16548 _16549 _16551 B f y A z)). Qed.
Lemma lem369668 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) (z : _16551) : (term132 _16548 _16549 _16551 B f y A z) = (term124 _16548 _16549 _16551 B f y A z).
Proof. exact (TRANS (@lem369667 _16548 _16549 _16551 B f y A z) (@lem369657 _16548 _16549 _16551 B f y A z)). Qed.
Lemma lem369669 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term133 _16548 _16549 _16551 B f y A) = (term134 _16548 _16549 _16551 B f y A).
Proof. exact (fun_ext (fun z : _16551 => @lem369668 _16548 _16549 _16551 B f y A z)). Qed.
Lemma lem369670 {_16551 : Type'} : (@ex _16551) = (@ex _16551).
Proof. exact (eq_refl (@ex _16551)). Qed.
Lemma lem369671 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term130 _16548 _16549 _16551 B f y A) = (term135 _16548 _16549 _16551 B f y A).
Proof. exact (MK_COMB (@lem369670 _16551) (@lem369669 _16548 _16549 _16551 B f y A)). Qed.
Lemma lem369672 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term129 _16548 _16549 _16551 B f y A) = (term135 _16548 _16549 _16551 B f y A).
Proof. exact (TRANS (@lem369664 _16548 _16549 _16551 B f y A) (@lem369671 _16548 _16549 _16551 B f y A)). Qed.
Lemma lem369673 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term55 _16548 _16549 _16551 B f y A) = (term136 _16548 _16549 _16551 B f y A).
Proof. exact (fun_ext (fun z : _16551 => @lem369662 _16548 _16549 _16551 B f y A z)). Qed.
Lemma lem369674 {_16551 : Type'} : (@all _16551) = (@all _16551).
Proof. exact (eq_refl (@all _16551)). Qed.
Lemma lem369675 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term56 _16548 _16549 _16551 B f y A) = (term137 _16548 _16549 _16551 B f y A).
Proof. exact (MK_COMB (@lem369674 _16551) (@lem369673 _16548 _16549 _16551 B f y A)). Qed.
Lemma lem369676 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem369677 {_16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (y : _16549) : (term138 _16549 P Q y) = (term139 _16549 P Q y).
Proof. exact (MK_COMB (@lem369676) (@lem369643 _16549 P Q y)). Qed.
Lemma lem369678 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term140 _16548 _16549 _16551 P Q B f y A) = (term141 _16548 _16549 _16551 P Q B f y A).
Proof. exact (MK_COMB (@lem369677 _16549 P Q y) (@lem369672 _16548 _16549 _16551 B f y A)). Qed.
Lemma lem369679 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term142 _16548 _16549 _16551 P Q B f y A) = (term140 _16548 _16549 _16551 P Q B f y A).
Proof. exact (@lem17045 (term143 _16549 P Q y) (term56 _16548 _16549 _16551 B f y A)). Qed.
Lemma lem369680 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term142 _16548 _16549 _16551 P Q B f y A) = (term141 _16548 _16549 _16551 P Q B f y A).
Proof. exact (TRANS (@lem369679 _16548 _16549 _16551 P Q B f y A) (@lem369678 _16548 _16549 _16551 P Q B f y A)). Qed.
Lemma lem369682 {_16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (y : _16549) : (term57 _16549 P Q y) = (term57 _16549 P Q y).
Proof. exact (eq_refl (term57 _16549 P Q y)). Qed.
Lemma lem369683 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term58 _16548 _16549 _16551 P Q B f y A) = (term144 _16548 _16549 _16551 P Q B f y A).
Proof. exact (MK_COMB (@lem369682 _16549 P Q y) (@lem369675 _16548 _16549 _16551 B f y A)). Qed.
Lemma lem369684 {_16549 : Type'} (P : _16549 -> Prop) : (term77 _16549 P) = (term78 _16549 P).
Proof. exact (@lem18394 _16549 P). Qed.
Lemma lem369685 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term145 _16548 _16549 _16551 P Q B f A) = (term146 _16548 _16549 _16551 P Q B f A).
Proof. exact (@lem369684 _16549 (term59 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem369686 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term147 _16548 _16549 _16551 P Q B f A y) = (term58 _16548 _16549 _16551 P Q B f y A).
Proof. exact (eq_refl (term147 _16548 _16549 _16551 P Q B f A y)). Qed.
Lemma lem369687 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem369688 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term148 _16548 _16549 _16551 P Q B f A y) = (term142 _16548 _16549 _16551 P Q B f y A).
Proof. exact (MK_COMB (@lem369687) (@lem369686 _16548 _16549 _16551 P Q B f y A)). Qed.
Lemma lem369689 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term148 _16548 _16549 _16551 P Q B f A y) = (term141 _16548 _16549 _16551 P Q B f y A).
Proof. exact (TRANS (@lem369688 _16548 _16549 _16551 P Q B f y A) (@lem369680 _16548 _16549 _16551 P Q B f y A)). Qed.
Lemma lem369690 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term149 _16548 _16549 _16551 P Q B f A) = (term150 _16548 _16549 _16551 P Q B f A).
Proof. exact (fun_ext (fun y : _16549 => @lem369689 _16548 _16549 _16551 P Q B f y A)). Qed.
Lemma lem369691 {_16549 : Type'} : (@all _16549) = (@all _16549).
Proof. exact (eq_refl (@all _16549)). Qed.
Lemma lem369692 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term146 _16548 _16549 _16551 P Q B f A) = (term151 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem369691 _16549) (@lem369690 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem369693 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term145 _16548 _16549 _16551 P Q B f A) = (term151 _16548 _16549 _16551 P Q B f A).
Proof. exact (TRANS (@lem369685 _16548 _16549 _16551 P Q B f A) (@lem369692 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem369694 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term59 _16548 _16549 _16551 P Q B f A) = (term152 _16548 _16549 _16551 P Q B f A).
Proof. exact (fun_ext (fun y : _16549 => @lem369683 _16548 _16549 _16551 P Q B f y A)). Qed.
Lemma lem369695 {_16549 : Type'} : (@ex _16549) = (@ex _16549).
Proof. exact (eq_refl (@ex _16549)). Qed.
Lemma lem369696 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term26 _16548 _16549 _16551 P Q B f A) = (term153 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem369695 _16549) (@lem369694 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem369697 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem369698 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term154 _16548 _16549 _16551 P Q f A B) = (term155 _16548 _16549 _16551 P Q f A B).
Proof. exact (MK_COMB (@lem369697) (@lem369631 _16548 _16549 _16551 P Q f A B)). Qed.
Lemma lem369699 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term156 _16548 _16549 _16551 P Q B f A) = (term157 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem369698 _16548 _16549 _16551 P Q f A B) (@lem369696 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem369700 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem369701 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term158 _16548 _16549 _16551 P Q f A B) = (term159 _16548 _16549 _16551 P Q f A B).
Proof. exact (MK_COMB (@lem369700) (@lem369634 _16548 _16549 _16551 P Q f A B)). Qed.
Lemma lem369702 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term160 _16548 _16549 _16551 P Q B f A) = (term161 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem369701 _16548 _16549 _16551 P Q f A B) (@lem369693 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem369703 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem369704 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term162 _16548 _16549 _16551 P Q B f A) = (term163 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem369703) (@lem369702 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem369705 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term164 _16548 _16549 _16551 P Q B f A) = (term165 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem369704 _16548 _16549 _16551 P Q B f A) (@lem369699 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem369706 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term28 _16548 _16549 _16551 P Q B f A) = (term164 _16548 _16549 _16551 P Q B f A).
Proof. exact (@lem17646 (term25 _16548 _16549 _16551 P Q f A B) (term26 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem369707 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term28 _16548 _16549 _16551 P Q B f A) = (term165 _16548 _16549 _16551 P Q B f A).
Proof. exact (TRANS (@lem369706 _16548 _16549 _16551 P Q B f A) (@lem369705 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370134 {A : Type'} (P : A -> Prop) (Q : Prop) : (term166 A P Q) = (term167 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem370135 {_16549 : Type'} (P : _16549 -> Prop) (Q : Prop) : (term166 _16549 P Q) = (term167 _16549 P Q).
Proof. exact (@lem370134 _16549 P Q). Qed.
Lemma lem370136 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term168 _16548 _16549 _16551 P Q f A B a) = (term169 _16548 _16549 _16551 P Q f A B a).
Proof. exact (@lem370135 _16549 (term64 _16548 _16549 P Q f a) (term103 _16548 _16551 A B a)). Qed.
Lemma lem370137 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (a : _16548) : (term81 _16548 _16549 P Q f a y) = (term63 _16548 _16549 P Q f y a).
Proof. exact (eq_refl (term81 _16548 _16549 P Q f a y)). Qed.
Lemma lem370138 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (a : _16548) : (term170 _16548 _16549 P Q f a) = (term64 _16548 _16549 P Q f a).
Proof. exact (fun_ext (fun y : _16549 => @lem370137 _16548 _16549 P Q f y a)). Qed.
Lemma lem370139 {_16549 : Type'} : (@ex _16549) = (@ex _16549).
Proof. exact (eq_refl (@ex _16549)). Qed.
Lemma lem370140 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (a : _16548) : (term171 _16548 _16549 P Q f a) = (term65 _16548 _16549 P Q f a).
Proof. exact (MK_COMB (@lem370139 _16549) (@lem370138 _16548 _16549 P Q f a)). Qed.
Lemma lem370141 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem370142 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (a : _16548) : (term172 _16548 _16549 P Q f a) = (term66 _16548 _16549 P Q f a).
Proof. exact (MK_COMB (@lem370141) (@lem370140 _16548 _16549 P Q f a)). Qed.
Lemma lem370143 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term103 _16548 _16551 A B a) = (term103 _16548 _16551 A B a).
Proof. exact (eq_refl (term103 _16548 _16551 A B a)). Qed.
Lemma lem370144 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term168 _16548 _16549 _16551 P Q f A B a) = (term109 _16548 _16549 _16551 P Q f A B a).
Proof. exact (MK_COMB (@lem370142 _16548 _16549 P Q f a) (@lem370143 _16548 _16551 A B a)). Qed.
Lemma lem370145 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem370146 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term173 _16548 _16549 _16551 P Q f A B a) = (term174 _16548 _16549 _16551 P Q f A B a).
Proof. exact (MK_COMB (@lem370145) (@lem370144 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem370147 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (a : _16548) : (term81 _16548 _16549 P Q f a y) = (term63 _16548 _16549 P Q f y a).
Proof. exact (eq_refl (term81 _16548 _16549 P Q f a y)). Qed.
Lemma lem370148 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem370149 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (a : _16548) : (term175 _16548 _16549 P Q f a y) = (term176 _16548 _16549 P Q f y a).
Proof. exact (MK_COMB (@lem370148) (@lem370147 _16548 _16549 P Q f y a)). Qed.
Lemma lem370150 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term103 _16548 _16551 A B a) = (term103 _16548 _16551 A B a).
Proof. exact (eq_refl (term103 _16548 _16551 A B a)). Qed.
Lemma lem370151 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term177 _16548 _16549 _16551 P Q f y A B a) = (term178 _16548 _16549 _16551 P Q f y A B a).
Proof. exact (MK_COMB (@lem370149 _16548 _16549 P Q f y a) (@lem370150 _16548 _16551 A B a)). Qed.
Lemma lem370152 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term179 _16548 _16549 _16551 P Q f A B a) = (term180 _16548 _16549 _16551 P Q f A B a).
Proof. exact (fun_ext (fun y : _16549 => @lem370151 _16548 _16549 _16551 P Q f y A B a)). Qed.
Lemma lem370153 {_16549 : Type'} : (@ex _16549) = (@ex _16549).
Proof. exact (eq_refl (@ex _16549)). Qed.
Lemma lem370154 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term169 _16548 _16549 _16551 P Q f A B a) = (term181 _16548 _16549 _16551 P Q f A B a).
Proof. exact (MK_COMB (@lem370153 _16549) (@lem370152 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem370155 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : ((term168 _16548 _16549 _16551 P Q f A B a) = (term169 _16548 _16549 _16551 P Q f A B a)) = ((term109 _16548 _16549 _16551 P Q f A B a) = (term181 _16548 _16549 _16551 P Q f A B a)).
Proof. exact (MK_COMB (@lem370146 _16548 _16549 _16551 P Q f A B a) (@lem370154 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem370156 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term109 _16548 _16549 _16551 P Q f A B a) = (term181 _16548 _16549 _16551 P Q f A B a).
Proof. exact (EQ_MP (@lem370155 _16548 _16549 _16551 P Q f A B a) (@lem370136 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem370157 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term117 _16548 _16549 _16551 P Q f A B) = (term182 _16548 _16549 _16551 P Q f A B).
Proof. exact (fun_ext (fun a : _16548 => @lem370156 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem370158 {_16548 : Type'} : (@ex _16548) = (@ex _16548).
Proof. exact (eq_refl (@ex _16548)). Qed.
Lemma lem370159 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term118 _16548 _16549 _16551 P Q f A B) = (term183 _16548 _16549 _16551 P Q f A B).
Proof. exact (MK_COMB (@lem370158 _16548) (@lem370157 _16548 _16549 _16551 P Q f A B)). Qed.
Lemma lem370160 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem370161 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term159 _16548 _16549 _16551 P Q f A B) = (term184 _16548 _16549 _16551 P Q f A B).
Proof. exact (MK_COMB (@lem370160) (@lem370159 _16548 _16549 _16551 P Q f A B)). Qed.
Lemma lem370163 {A : Type'} (P : Prop) (Q : A -> Prop) : (term185 A P Q) = (term186 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem370164 {_16551 : Type'} (P : Prop) (Q : _16551 -> Prop) : (term185 _16551 P Q) = (term186 _16551 P Q).
Proof. exact (@lem370163 _16551 P Q). Qed.
Lemma lem370165 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term187 _16548 _16549 _16551 P Q B f y A) = (term188 _16548 _16549 _16551 P Q B f y A).
Proof. exact (@lem370164 _16551 (term120 _16549 P Q y) (term134 _16548 _16549 _16551 B f y A)). Qed.
Lemma lem370166 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) (z : _16551) : (term189 _16548 _16549 _16551 B f y A z) = (term124 _16548 _16549 _16551 B f y A z).
Proof. exact (eq_refl (term189 _16548 _16549 _16551 B f y A z)). Qed.
Lemma lem370167 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term190 _16548 _16549 _16551 B f y A) = (term134 _16548 _16549 _16551 B f y A).
Proof. exact (fun_ext (fun z : _16551 => @lem370166 _16548 _16549 _16551 B f y A z)). Qed.
Lemma lem370168 {_16551 : Type'} : (@ex _16551) = (@ex _16551).
Proof. exact (eq_refl (@ex _16551)). Qed.
Lemma lem370169 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term191 _16548 _16549 _16551 B f y A) = (term135 _16548 _16549 _16551 B f y A).
Proof. exact (MK_COMB (@lem370168 _16551) (@lem370167 _16548 _16549 _16551 B f y A)). Qed.
Lemma lem370170 {_16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (y : _16549) : (term139 _16549 P Q y) = (term139 _16549 P Q y).
Proof. exact (eq_refl (term139 _16549 P Q y)). Qed.
Lemma lem370171 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term187 _16548 _16549 _16551 P Q B f y A) = (term141 _16548 _16549 _16551 P Q B f y A).
Proof. exact (MK_COMB (@lem370170 _16549 P Q y) (@lem370169 _16548 _16549 _16551 B f y A)). Qed.
Lemma lem370172 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem370173 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term192 _16548 _16549 _16551 P Q B f y A) = (term193 _16548 _16549 _16551 P Q B f y A).
Proof. exact (MK_COMB (@lem370172) (@lem370171 _16548 _16549 _16551 P Q B f y A)). Qed.
Lemma lem370174 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) (z : _16551) : (term189 _16548 _16549 _16551 B f y A z) = (term124 _16548 _16549 _16551 B f y A z).
Proof. exact (eq_refl (term189 _16548 _16549 _16551 B f y A z)). Qed.
Lemma lem370175 {_16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (y : _16549) : (term139 _16549 P Q y) = (term139 _16549 P Q y).
Proof. exact (eq_refl (term139 _16549 P Q y)). Qed.
Lemma lem370176 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) (z : _16551) : (term194 _16548 _16549 _16551 P Q B f y A z) = (term195 _16548 _16549 _16551 P Q B f y A z).
Proof. exact (MK_COMB (@lem370175 _16549 P Q y) (@lem370174 _16548 _16549 _16551 B f y A z)). Qed.
Lemma lem370177 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term196 _16548 _16549 _16551 P Q B f y A) = (term197 _16548 _16549 _16551 P Q B f y A).
Proof. exact (fun_ext (fun z : _16551 => @lem370176 _16548 _16549 _16551 P Q B f y A z)). Qed.
Lemma lem370178 {_16551 : Type'} : (@ex _16551) = (@ex _16551).
Proof. exact (eq_refl (@ex _16551)). Qed.
Lemma lem370179 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term188 _16548 _16549 _16551 P Q B f y A) = (term198 _16548 _16549 _16551 P Q B f y A).
Proof. exact (MK_COMB (@lem370178 _16551) (@lem370177 _16548 _16549 _16551 P Q B f y A)). Qed.
Lemma lem370180 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : ((term187 _16548 _16549 _16551 P Q B f y A) = (term188 _16548 _16549 _16551 P Q B f y A)) = ((term141 _16548 _16549 _16551 P Q B f y A) = (term198 _16548 _16549 _16551 P Q B f y A)).
Proof. exact (MK_COMB (@lem370173 _16548 _16549 _16551 P Q B f y A) (@lem370179 _16548 _16549 _16551 P Q B f y A)). Qed.
Lemma lem370181 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term141 _16548 _16549 _16551 P Q B f y A) = (term198 _16548 _16549 _16551 P Q B f y A).
Proof. exact (EQ_MP (@lem370180 _16548 _16549 _16551 P Q B f y A) (@lem370165 _16548 _16549 _16551 P Q B f y A)). Qed.
Lemma lem370182 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term150 _16548 _16549 _16551 P Q B f A) = (term199 _16548 _16549 _16551 P Q B f A).
Proof. exact (fun_ext (fun y : _16549 => @lem370181 _16548 _16549 _16551 P Q B f y A)). Qed.
Lemma lem370183 {_16549 : Type'} : (@all _16549) = (@all _16549).
Proof. exact (eq_refl (@all _16549)). Qed.
Lemma lem370184 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term151 _16548 _16549 _16551 P Q B f A) = (term200 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370183 _16549) (@lem370182 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370186 {A B : Type'} (P : type1413 A B) : (term201 A B P) = (term202 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem370187 {_16549 _16551 : Type'} (P : type1413 _16549 _16551) : (term201 _16549 _16551 P) = (term202 _16549 _16551 P).
Proof. exact (@lem370186 _16549 _16551 P). Qed.
Lemma lem370188 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term203 _16548 _16549 _16551 P Q B f A) = (term204 _16548 _16549 _16551 P Q B f A).
Proof. exact (@lem370187 _16549 _16551 (term205 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370189 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term206 _16548 _16549 _16551 P Q B f A y) = (term197 _16548 _16549 _16551 P Q B f y A).
Proof. exact (eq_refl (term206 _16548 _16549 _16551 P Q B f A y)). Qed.
Lemma lem370190 {_16551 : Type'} (z : _16551) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem370191 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) (z : _16551) : (term207 _16548 _16549 _16551 P Q B f A y z) = (term208 _16548 _16549 _16551 P Q B f y A z).
Proof. exact (MK_COMB (@lem370189 _16548 _16549 _16551 P Q B f y A) (@lem370190 _16551 z)). Qed.
Lemma lem370192 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) (z : _16551) : (term208 _16548 _16549 _16551 P Q B f y A z) = (term195 _16548 _16549 _16551 P Q B f y A z).
Proof. exact (eq_refl (term208 _16548 _16549 _16551 P Q B f y A z)). Qed.
Lemma lem370193 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) (z : _16551) : (term207 _16548 _16549 _16551 P Q B f A y z) = (term195 _16548 _16549 _16551 P Q B f y A z).
Proof. exact (TRANS (@lem370191 _16548 _16549 _16551 P Q B f y A z) (@lem370192 _16548 _16549 _16551 P Q B f y A z)). Qed.
Lemma lem370194 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term209 _16548 _16549 _16551 P Q B f A y) = (term197 _16548 _16549 _16551 P Q B f y A).
Proof. exact (fun_ext (fun z : _16551 => @lem370193 _16548 _16549 _16551 P Q B f y A z)). Qed.
Lemma lem370195 {_16551 : Type'} : (@ex _16551) = (@ex _16551).
Proof. exact (eq_refl (@ex _16551)). Qed.
Lemma lem370196 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term210 _16548 _16549 _16551 P Q B f A y) = (term198 _16548 _16549 _16551 P Q B f y A).
Proof. exact (MK_COMB (@lem370195 _16551) (@lem370194 _16548 _16549 _16551 P Q B f y A)). Qed.
Lemma lem370197 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term211 _16548 _16549 _16551 P Q B f A) = (term199 _16548 _16549 _16551 P Q B f A).
Proof. exact (fun_ext (fun y : _16549 => @lem370196 _16548 _16549 _16551 P Q B f y A)). Qed.
Lemma lem370198 {_16549 : Type'} : (@all _16549) = (@all _16549).
Proof. exact (eq_refl (@all _16549)). Qed.
Lemma lem370199 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term203 _16548 _16549 _16551 P Q B f A) = (term200 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370198 _16549) (@lem370197 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370200 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem370201 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term212 _16548 _16549 _16551 P Q B f A) = (term213 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370200) (@lem370199 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370202 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term206 _16548 _16549 _16551 P Q B f A y) = (term197 _16548 _16549 _16551 P Q B f y A).
Proof. exact (eq_refl (term206 _16548 _16549 _16551 P Q B f A y)). Qed.
Lemma lem370203 {_16549 _16551 : Type'} (z : _16549 -> _16551) (y : _16549) : (z y) = (z y).
Proof. exact (eq_refl (z y)). Qed.
Lemma lem370204 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (y : _16549) : (term214 _16548 _16549 _16551 P Q B f A z y) = (term215 _16548 _16549 _16551 P Q B f A z y).
Proof. exact (MK_COMB (@lem370202 _16548 _16549 _16551 P Q B f y A) (@lem370203 _16549 _16551 z y)). Qed.
Lemma lem370205 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (y : _16549) : (term215 _16548 _16549 _16551 P Q B f A z y) = (term216 _16548 _16549 _16551 P Q B f A z y).
Proof. exact (eq_refl (term215 _16548 _16549 _16551 P Q B f A z y)). Qed.
Lemma lem370206 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (y : _16549) : (term214 _16548 _16549 _16551 P Q B f A z y) = (term216 _16548 _16549 _16551 P Q B f A z y).
Proof. exact (TRANS (@lem370204 _16548 _16549 _16551 P Q B f A z y) (@lem370205 _16548 _16549 _16551 P Q B f A z y)). Qed.
Lemma lem370207 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) : (term217 _16548 _16549 _16551 P Q B f A z) = (term218 _16548 _16549 _16551 P Q B f A z).
Proof. exact (fun_ext (fun y : _16549 => @lem370206 _16548 _16549 _16551 P Q B f A z y)). Qed.
Lemma lem370208 {_16549 : Type'} : (@all _16549) = (@all _16549).
Proof. exact (eq_refl (@all _16549)). Qed.
Lemma lem370209 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) : (term219 _16548 _16549 _16551 P Q B f A z) = (term220 _16548 _16549 _16551 P Q B f A z).
Proof. exact (MK_COMB (@lem370208 _16549) (@lem370207 _16548 _16549 _16551 P Q B f A z)). Qed.
Lemma lem370210 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term221 _16548 _16549 _16551 P Q B f A) = (term222 _16548 _16549 _16551 P Q B f A).
Proof. exact (fun_ext (fun z : _16549 -> _16551 => @lem370209 _16548 _16549 _16551 P Q B f A z)). Qed.
Lemma lem370211 {_16549 _16551 : Type'} : (@ex (_16549 -> _16551)) = (@ex (_16549 -> _16551)).
Proof. exact (eq_refl (@ex (_16549 -> _16551))). Qed.
Lemma lem370212 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term204 _16548 _16549 _16551 P Q B f A) = (term223 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370211 _16549 _16551) (@lem370210 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370213 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : ((term203 _16548 _16549 _16551 P Q B f A) = (term204 _16548 _16549 _16551 P Q B f A)) = ((term200 _16548 _16549 _16551 P Q B f A) = (term223 _16548 _16549 _16551 P Q B f A)).
Proof. exact (MK_COMB (@lem370201 _16548 _16549 _16551 P Q B f A) (@lem370212 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370214 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term200 _16548 _16549 _16551 P Q B f A) = (term223 _16548 _16549 _16551 P Q B f A).
Proof. exact (EQ_MP (@lem370213 _16548 _16549 _16551 P Q B f A) (@lem370188 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370215 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term151 _16548 _16549 _16551 P Q B f A) = (term223 _16548 _16549 _16551 P Q B f A).
Proof. exact (TRANS (@lem370184 _16548 _16549 _16551 P Q B f A) (@lem370214 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370216 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term161 _16548 _16549 _16551 P Q B f A) = (term224 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370161 _16548 _16549 _16551 P Q f A B) (@lem370215 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370218 {A : Type'} (P : A -> Prop) (Q : Prop) : (term166 A P Q) = (term167 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem370219 {_16548 : Type'} (P : _16548 -> Prop) (Q : Prop) : (term166 _16548 P Q) = (term167 _16548 P Q).
Proof. exact (@lem370218 _16548 P Q). Qed.
Lemma lem370220 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term225 _16548 _16549 _16551 P Q B f A) = (term226 _16548 _16549 _16551 P Q B f A).
Proof. exact (@lem370219 _16548 (term182 _16548 _16549 _16551 P Q f A B) (term223 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370221 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term227 _16548 _16549 _16551 P Q f A B a) = (term181 _16548 _16549 _16551 P Q f A B a).
Proof. exact (eq_refl (term227 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem370222 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term228 _16548 _16549 _16551 P Q f A B) = (term182 _16548 _16549 _16551 P Q f A B).
Proof. exact (fun_ext (fun a : _16548 => @lem370221 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem370223 {_16548 : Type'} : (@ex _16548) = (@ex _16548).
Proof. exact (eq_refl (@ex _16548)). Qed.
Lemma lem370224 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term229 _16548 _16549 _16551 P Q f A B) = (term183 _16548 _16549 _16551 P Q f A B).
Proof. exact (MK_COMB (@lem370223 _16548) (@lem370222 _16548 _16549 _16551 P Q f A B)). Qed.
Lemma lem370225 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem370226 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term230 _16548 _16549 _16551 P Q f A B) = (term184 _16548 _16549 _16551 P Q f A B).
Proof. exact (MK_COMB (@lem370225) (@lem370224 _16548 _16549 _16551 P Q f A B)). Qed.
Lemma lem370227 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term223 _16548 _16549 _16551 P Q B f A) = (term223 _16548 _16549 _16551 P Q B f A).
Proof. exact (eq_refl (term223 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370228 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term225 _16548 _16549 _16551 P Q B f A) = (term224 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370226 _16548 _16549 _16551 P Q f A B) (@lem370227 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370229 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem370230 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term231 _16548 _16549 _16551 P Q B f A) = (term232 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370229) (@lem370228 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370231 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term227 _16548 _16549 _16551 P Q f A B a) = (term181 _16548 _16549 _16551 P Q f A B a).
Proof. exact (eq_refl (term227 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem370232 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem370233 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term233 _16548 _16549 _16551 P Q f A B a) = (term234 _16548 _16549 _16551 P Q f A B a).
Proof. exact (MK_COMB (@lem370232) (@lem370231 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem370234 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term223 _16548 _16549 _16551 P Q B f A) = (term223 _16548 _16549 _16551 P Q B f A).
Proof. exact (eq_refl (term223 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370235 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term235 _16548 _16549 _16551 a P Q B f A) = (term236 _16548 _16549 _16551 a P Q B f A).
Proof. exact (MK_COMB (@lem370233 _16548 _16549 _16551 P Q f A B a) (@lem370234 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370236 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term237 _16548 _16549 _16551 P Q B f A) = (term238 _16548 _16549 _16551 P Q B f A).
Proof. exact (fun_ext (fun a : _16548 => @lem370235 _16548 _16549 _16551 a P Q B f A)). Qed.
Lemma lem370237 {_16548 : Type'} : (@ex _16548) = (@ex _16548).
Proof. exact (eq_refl (@ex _16548)). Qed.
Lemma lem370238 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term226 _16548 _16549 _16551 P Q B f A) = (term239 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370237 _16548) (@lem370236 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370239 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : ((term225 _16548 _16549 _16551 P Q B f A) = (term226 _16548 _16549 _16551 P Q B f A)) = ((term224 _16548 _16549 _16551 P Q B f A) = (term239 _16548 _16549 _16551 P Q B f A)).
Proof. exact (MK_COMB (@lem370230 _16548 _16549 _16551 P Q B f A) (@lem370238 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370240 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term224 _16548 _16549 _16551 P Q B f A) = (term239 _16548 _16549 _16551 P Q B f A).
Proof. exact (EQ_MP (@lem370239 _16548 _16549 _16551 P Q B f A) (@lem370220 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370242 {A : Type'} (P : A -> Prop) (Q : Prop) : (term166 A P Q) = (term167 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem370243 {_16549 : Type'} (P : _16549 -> Prop) (Q : Prop) : (term166 _16549 P Q) = (term167 _16549 P Q).
Proof. exact (@lem370242 _16549 P Q). Qed.
Lemma lem370244 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term240 _16548 _16549 _16551 a P Q B f A) = (term241 _16548 _16549 _16551 a P Q B f A).
Proof. exact (@lem370243 _16549 (term180 _16548 _16549 _16551 P Q f A B a) (term223 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370245 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term242 _16548 _16549 _16551 P Q f A B a y) = (term178 _16548 _16549 _16551 P Q f y A B a).
Proof. exact (eq_refl (term242 _16548 _16549 _16551 P Q f A B a y)). Qed.
Lemma lem370246 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term243 _16548 _16549 _16551 P Q f A B a) = (term180 _16548 _16549 _16551 P Q f A B a).
Proof. exact (fun_ext (fun y : _16549 => @lem370245 _16548 _16549 _16551 P Q f y A B a)). Qed.
Lemma lem370247 {_16549 : Type'} : (@ex _16549) = (@ex _16549).
Proof. exact (eq_refl (@ex _16549)). Qed.
Lemma lem370248 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term244 _16548 _16549 _16551 P Q f A B a) = (term181 _16548 _16549 _16551 P Q f A B a).
Proof. exact (MK_COMB (@lem370247 _16549) (@lem370246 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem370249 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem370250 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term245 _16548 _16549 _16551 P Q f A B a) = (term234 _16548 _16549 _16551 P Q f A B a).
Proof. exact (MK_COMB (@lem370249) (@lem370248 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem370251 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term223 _16548 _16549 _16551 P Q B f A) = (term223 _16548 _16549 _16551 P Q B f A).
Proof. exact (eq_refl (term223 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370252 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term240 _16548 _16549 _16551 a P Q B f A) = (term236 _16548 _16549 _16551 a P Q B f A).
Proof. exact (MK_COMB (@lem370250 _16548 _16549 _16551 P Q f A B a) (@lem370251 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370253 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem370254 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term246 _16548 _16549 _16551 a P Q B f A) = (term247 _16548 _16549 _16551 a P Q B f A).
Proof. exact (MK_COMB (@lem370253) (@lem370252 _16548 _16549 _16551 a P Q B f A)). Qed.
Lemma lem370255 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term242 _16548 _16549 _16551 P Q f A B a y) = (term178 _16548 _16549 _16551 P Q f y A B a).
Proof. exact (eq_refl (term242 _16548 _16549 _16551 P Q f A B a y)). Qed.
Lemma lem370256 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem370257 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term248 _16548 _16549 _16551 P Q f A B a y) = (term249 _16548 _16549 _16551 P Q f y A B a).
Proof. exact (MK_COMB (@lem370256) (@lem370255 _16548 _16549 _16551 P Q f y A B a)). Qed.
Lemma lem370258 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term223 _16548 _16549 _16551 P Q B f A) = (term223 _16548 _16549 _16551 P Q B f A).
Proof. exact (eq_refl (term223 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370259 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term250 _16548 _16549 _16551 a y P Q B f A) = (term251 _16548 _16549 _16551 y a P Q B f A).
Proof. exact (MK_COMB (@lem370257 _16548 _16549 _16551 P Q f y A B a) (@lem370258 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370260 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term252 _16548 _16549 _16551 a P Q B f A) = (term253 _16548 _16549 _16551 a P Q B f A).
Proof. exact (fun_ext (fun y : _16549 => @lem370259 _16548 _16549 _16551 y a P Q B f A)). Qed.
Lemma lem370261 {_16549 : Type'} : (@ex _16549) = (@ex _16549).
Proof. exact (eq_refl (@ex _16549)). Qed.
Lemma lem370262 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term241 _16548 _16549 _16551 a P Q B f A) = (term254 _16548 _16549 _16551 a P Q B f A).
Proof. exact (MK_COMB (@lem370261 _16549) (@lem370260 _16548 _16549 _16551 a P Q B f A)). Qed.
Lemma lem370263 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : ((term240 _16548 _16549 _16551 a P Q B f A) = (term241 _16548 _16549 _16551 a P Q B f A)) = ((term236 _16548 _16549 _16551 a P Q B f A) = (term254 _16548 _16549 _16551 a P Q B f A)).
Proof. exact (MK_COMB (@lem370254 _16548 _16549 _16551 a P Q B f A) (@lem370262 _16548 _16549 _16551 a P Q B f A)). Qed.
Lemma lem370264 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term236 _16548 _16549 _16551 a P Q B f A) = (term254 _16548 _16549 _16551 a P Q B f A).
Proof. exact (EQ_MP (@lem370263 _16548 _16549 _16551 a P Q B f A) (@lem370244 _16548 _16549 _16551 a P Q B f A)). Qed.
Lemma lem370266 {A : Type'} (P : Prop) (Q : A -> Prop) : (term255 A P Q) = (term256 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem370267 {_16549 _16551 : Type'} (P : Prop) (Q : type572 _16549 _16551) : (term257 _16549 _16551 P Q) = (term258 _16549 _16551 P Q).
Proof. exact (@lem370266 (_16549 -> _16551) P Q). Qed.
Lemma lem370268 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term259 _16548 _16549 _16551 y a P Q B f A) = (term260 _16548 _16549 _16551 y a P Q B f A).
Proof. exact (@lem370267 _16549 _16551 (term178 _16548 _16549 _16551 P Q f y A B a) (term222 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370269 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) : (term261 _16548 _16549 _16551 P Q B f A z) = (term220 _16548 _16549 _16551 P Q B f A z).
Proof. exact (eq_refl (term261 _16548 _16549 _16551 P Q B f A z)). Qed.
Lemma lem370270 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term262 _16548 _16549 _16551 P Q B f A) = (term222 _16548 _16549 _16551 P Q B f A).
Proof. exact (fun_ext (fun z : _16549 -> _16551 => @lem370269 _16548 _16549 _16551 P Q B f A z)). Qed.
Lemma lem370271 {_16549 _16551 : Type'} : (@ex (_16549 -> _16551)) = (@ex (_16549 -> _16551)).
Proof. exact (eq_refl (@ex (_16549 -> _16551))). Qed.
Lemma lem370272 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term263 _16548 _16549 _16551 P Q B f A) = (term223 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370271 _16549 _16551) (@lem370270 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370273 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term249 _16548 _16549 _16551 P Q f y A B a) = (term249 _16548 _16549 _16551 P Q f y A B a).
Proof. exact (eq_refl (term249 _16548 _16549 _16551 P Q f y A B a)). Qed.
Lemma lem370274 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term259 _16548 _16549 _16551 y a P Q B f A) = (term251 _16548 _16549 _16551 y a P Q B f A).
Proof. exact (MK_COMB (@lem370273 _16548 _16549 _16551 P Q f y A B a) (@lem370272 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370275 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem370276 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term264 _16548 _16549 _16551 y a P Q B f A) = (term265 _16548 _16549 _16551 y a P Q B f A).
Proof. exact (MK_COMB (@lem370275) (@lem370274 _16548 _16549 _16551 y a P Q B f A)). Qed.
Lemma lem370277 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) : (term261 _16548 _16549 _16551 P Q B f A z) = (term220 _16548 _16549 _16551 P Q B f A z).
Proof. exact (eq_refl (term261 _16548 _16549 _16551 P Q B f A z)). Qed.
Lemma lem370278 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term249 _16548 _16549 _16551 P Q f y A B a) = (term249 _16548 _16549 _16551 P Q f y A B a).
Proof. exact (eq_refl (term249 _16548 _16549 _16551 P Q f y A B a)). Qed.
Lemma lem370279 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) : (term266 _16548 _16549 _16551 y a P Q B f A z) = (term267 _16548 _16549 _16551 y a P Q B f A z).
Proof. exact (MK_COMB (@lem370278 _16548 _16549 _16551 P Q f y A B a) (@lem370277 _16548 _16549 _16551 P Q B f A z)). Qed.
Lemma lem370280 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term268 _16548 _16549 _16551 y a P Q B f A) = (term269 _16548 _16549 _16551 y a P Q B f A).
Proof. exact (fun_ext (fun z : _16549 -> _16551 => @lem370279 _16548 _16549 _16551 y a P Q B f A z)). Qed.
Lemma lem370281 {_16549 _16551 : Type'} : (@ex (_16549 -> _16551)) = (@ex (_16549 -> _16551)).
Proof. exact (eq_refl (@ex (_16549 -> _16551))). Qed.
Lemma lem370282 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term260 _16548 _16549 _16551 y a P Q B f A) = (term270 _16548 _16549 _16551 y a P Q B f A).
Proof. exact (MK_COMB (@lem370281 _16549 _16551) (@lem370280 _16548 _16549 _16551 y a P Q B f A)). Qed.
Lemma lem370283 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : ((term259 _16548 _16549 _16551 y a P Q B f A) = (term260 _16548 _16549 _16551 y a P Q B f A)) = ((term251 _16548 _16549 _16551 y a P Q B f A) = (term270 _16548 _16549 _16551 y a P Q B f A)).
Proof. exact (MK_COMB (@lem370276 _16548 _16549 _16551 y a P Q B f A) (@lem370282 _16548 _16549 _16551 y a P Q B f A)). Qed.
Lemma lem370284 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term251 _16548 _16549 _16551 y a P Q B f A) = (term270 _16548 _16549 _16551 y a P Q B f A).
Proof. exact (EQ_MP (@lem370283 _16548 _16549 _16551 y a P Q B f A) (@lem370268 _16548 _16549 _16551 y a P Q B f A)). Qed.
Lemma lem370285 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term253 _16548 _16549 _16551 a P Q B f A) = (term271 _16548 _16549 _16551 a P Q B f A).
Proof. exact (fun_ext (fun y : _16549 => @lem370284 _16548 _16549 _16551 y a P Q B f A)). Qed.
Lemma lem370286 {_16549 : Type'} : (@ex _16549) = (@ex _16549).
Proof. exact (eq_refl (@ex _16549)). Qed.
Lemma lem370287 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term254 _16548 _16549 _16551 a P Q B f A) = (term272 _16548 _16549 _16551 a P Q B f A).
Proof. exact (MK_COMB (@lem370286 _16549) (@lem370285 _16548 _16549 _16551 a P Q B f A)). Qed.
Lemma lem370288 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term236 _16548 _16549 _16551 a P Q B f A) = (term272 _16548 _16549 _16551 a P Q B f A).
Proof. exact (TRANS (@lem370264 _16548 _16549 _16551 a P Q B f A) (@lem370287 _16548 _16549 _16551 a P Q B f A)). Qed.
Lemma lem370289 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term238 _16548 _16549 _16551 P Q B f A) = (term273 _16548 _16549 _16551 P Q B f A).
Proof. exact (fun_ext (fun a : _16548 => @lem370288 _16548 _16549 _16551 a P Q B f A)). Qed.
Lemma lem370290 {_16548 : Type'} : (@ex _16548) = (@ex _16548).
Proof. exact (eq_refl (@ex _16548)). Qed.
Lemma lem370291 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term239 _16548 _16549 _16551 P Q B f A) = (term274 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370290 _16548) (@lem370289 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370292 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term224 _16548 _16549 _16551 P Q B f A) = (term274 _16548 _16549 _16551 P Q B f A).
Proof. exact (TRANS (@lem370240 _16548 _16549 _16551 P Q B f A) (@lem370291 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370293 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term161 _16548 _16549 _16551 P Q B f A) = (term274 _16548 _16549 _16551 P Q B f A).
Proof. exact (TRANS (@lem370216 _16548 _16549 _16551 P Q B f A) (@lem370292 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370294 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem370295 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term163 _16548 _16549 _16551 P Q B f A) = (term275 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370294) (@lem370293 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370297 {A : Type'} (P : Prop) (Q : A -> Prop) : (term185 A P Q) = (term186 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem370298 {_16551 : Type'} (P : Prop) (Q : _16551 -> Prop) : (term185 _16551 P Q) = (term186 _16551 P Q).
Proof. exact (@lem370297 _16551 P Q). Qed.
Lemma lem370299 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term276 _16548 _16549 _16551 P Q f A B a) = (term277 _16548 _16549 _16551 P Q f A B a).
Proof. exact (@lem370298 _16551 (term85 _16548 _16549 P Q f a) (term100 _16548 _16551 A B a)). Qed.
Lemma lem370300 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) (z : _16551) : (term278 _16548 _16551 A B a z) = (term89 _16548 _16551 A B a z).
Proof. exact (eq_refl (term278 _16548 _16551 A B a z)). Qed.
Lemma lem370301 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term279 _16548 _16551 A B a) = (term100 _16548 _16551 A B a).
Proof. exact (fun_ext (fun z : _16551 => @lem370300 _16548 _16551 A B a z)). Qed.
Lemma lem370302 {_16551 : Type'} : (@ex _16551) = (@ex _16551).
Proof. exact (eq_refl (@ex _16551)). Qed.
Lemma lem370303 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term280 _16548 _16551 A B a) = (term101 _16548 _16551 A B a).
Proof. exact (MK_COMB (@lem370302 _16551) (@lem370301 _16548 _16551 A B a)). Qed.
Lemma lem370304 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (a : _16548) : (term105 _16548 _16549 P Q f a) = (term105 _16548 _16549 P Q f a).
Proof. exact (eq_refl (term105 _16548 _16549 P Q f a)). Qed.
Lemma lem370305 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term276 _16548 _16549 _16551 P Q f A B a) = (term107 _16548 _16549 _16551 P Q f A B a).
Proof. exact (MK_COMB (@lem370304 _16548 _16549 P Q f a) (@lem370303 _16548 _16551 A B a)). Qed.
Lemma lem370306 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem370307 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term281 _16548 _16549 _16551 P Q f A B a) = (term282 _16548 _16549 _16551 P Q f A B a).
Proof. exact (MK_COMB (@lem370306) (@lem370305 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem370308 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) (z : _16551) : (term278 _16548 _16551 A B a z) = (term89 _16548 _16551 A B a z).
Proof. exact (eq_refl (term278 _16548 _16551 A B a z)). Qed.
Lemma lem370309 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (a : _16548) : (term105 _16548 _16549 P Q f a) = (term105 _16548 _16549 P Q f a).
Proof. exact (eq_refl (term105 _16548 _16549 P Q f a)). Qed.
Lemma lem370310 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) (z : _16551) : (term283 _16548 _16549 _16551 P Q f A B a z) = (term284 _16548 _16549 _16551 P Q f A B a z).
Proof. exact (MK_COMB (@lem370309 _16548 _16549 P Q f a) (@lem370308 _16548 _16551 A B a z)). Qed.
Lemma lem370311 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term285 _16548 _16549 _16551 P Q f A B a) = (term286 _16548 _16549 _16551 P Q f A B a).
Proof. exact (fun_ext (fun z : _16551 => @lem370310 _16548 _16549 _16551 P Q f A B a z)). Qed.
Lemma lem370312 {_16551 : Type'} : (@ex _16551) = (@ex _16551).
Proof. exact (eq_refl (@ex _16551)). Qed.
Lemma lem370313 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term277 _16548 _16549 _16551 P Q f A B a) = (term287 _16548 _16549 _16551 P Q f A B a).
Proof. exact (MK_COMB (@lem370312 _16551) (@lem370311 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem370314 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : ((term276 _16548 _16549 _16551 P Q f A B a) = (term277 _16548 _16549 _16551 P Q f A B a)) = ((term107 _16548 _16549 _16551 P Q f A B a) = (term287 _16548 _16549 _16551 P Q f A B a)).
Proof. exact (MK_COMB (@lem370307 _16548 _16549 _16551 P Q f A B a) (@lem370313 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem370315 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term107 _16548 _16549 _16551 P Q f A B a) = (term287 _16548 _16549 _16551 P Q f A B a).
Proof. exact (EQ_MP (@lem370314 _16548 _16549 _16551 P Q f A B a) (@lem370299 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem370316 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term115 _16548 _16549 _16551 P Q f A B) = (term288 _16548 _16549 _16551 P Q f A B).
Proof. exact (fun_ext (fun a : _16548 => @lem370315 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem370317 {_16548 : Type'} : (@all _16548) = (@all _16548).
Proof. exact (eq_refl (@all _16548)). Qed.
Lemma lem370318 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term116 _16548 _16549 _16551 P Q f A B) = (term289 _16548 _16549 _16551 P Q f A B).
Proof. exact (MK_COMB (@lem370317 _16548) (@lem370316 _16548 _16549 _16551 P Q f A B)). Qed.
Lemma lem370320 {A B : Type'} (P : type1413 A B) : (term201 A B P) = (term202 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem370321 {_16548 _16551 : Type'} (P : type1413 _16548 _16551) : (term201 _16548 _16551 P) = (term202 _16548 _16551 P).
Proof. exact (@lem370320 _16548 _16551 P). Qed.
Lemma lem370322 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term290 _16548 _16549 _16551 P Q f A B) = (term291 _16548 _16549 _16551 P Q f A B).
Proof. exact (@lem370321 _16548 _16551 (term292 _16548 _16549 _16551 P Q f A B)). Qed.
Lemma lem370323 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term293 _16548 _16549 _16551 P Q f A B a) = (term286 _16548 _16549 _16551 P Q f A B a).
Proof. exact (eq_refl (term293 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem370324 {_16551 : Type'} (z : _16551) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem370325 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) (z : _16551) : (term294 _16548 _16549 _16551 P Q f A B a z) = (term295 _16548 _16549 _16551 P Q f A B a z).
Proof. exact (MK_COMB (@lem370323 _16548 _16549 _16551 P Q f A B a) (@lem370324 _16551 z)). Qed.
Lemma lem370326 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) (z : _16551) : (term295 _16548 _16549 _16551 P Q f A B a z) = (term284 _16548 _16549 _16551 P Q f A B a z).
Proof. exact (eq_refl (term295 _16548 _16549 _16551 P Q f A B a z)). Qed.
Lemma lem370327 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) (z : _16551) : (term294 _16548 _16549 _16551 P Q f A B a z) = (term284 _16548 _16549 _16551 P Q f A B a z).
Proof. exact (TRANS (@lem370325 _16548 _16549 _16551 P Q f A B a z) (@lem370326 _16548 _16549 _16551 P Q f A B a z)). Qed.
Lemma lem370328 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term296 _16548 _16549 _16551 P Q f A B a) = (term286 _16548 _16549 _16551 P Q f A B a).
Proof. exact (fun_ext (fun z : _16551 => @lem370327 _16548 _16549 _16551 P Q f A B a z)). Qed.
Lemma lem370329 {_16551 : Type'} : (@ex _16551) = (@ex _16551).
Proof. exact (eq_refl (@ex _16551)). Qed.
Lemma lem370330 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term297 _16548 _16549 _16551 P Q f A B a) = (term287 _16548 _16549 _16551 P Q f A B a).
Proof. exact (MK_COMB (@lem370329 _16551) (@lem370328 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem370331 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term298 _16548 _16549 _16551 P Q f A B) = (term288 _16548 _16549 _16551 P Q f A B).
Proof. exact (fun_ext (fun a : _16548 => @lem370330 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem370332 {_16548 : Type'} : (@all _16548) = (@all _16548).
Proof. exact (eq_refl (@all _16548)). Qed.
Lemma lem370333 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term290 _16548 _16549 _16551 P Q f A B) = (term289 _16548 _16549 _16551 P Q f A B).
Proof. exact (MK_COMB (@lem370332 _16548) (@lem370331 _16548 _16549 _16551 P Q f A B)). Qed.
Lemma lem370334 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem370335 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term299 _16548 _16549 _16551 P Q f A B) = (term300 _16548 _16549 _16551 P Q f A B).
Proof. exact (MK_COMB (@lem370334) (@lem370333 _16548 _16549 _16551 P Q f A B)). Qed.
Lemma lem370336 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term293 _16548 _16549 _16551 P Q f A B a) = (term286 _16548 _16549 _16551 P Q f A B a).
Proof. exact (eq_refl (term293 _16548 _16549 _16551 P Q f A B a)). Qed.
Lemma lem370337 {_16548 _16551 : Type'} (z : _16548 -> _16551) (a : _16548) : (z a) = (z a).
Proof. exact (eq_refl (z a)). Qed.
Lemma lem370338 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z : _16548 -> _16551) (a : _16548) : (term301 _16548 _16549 _16551 P Q f A B z a) = (term302 _16548 _16549 _16551 P Q f A B z a).
Proof. exact (MK_COMB (@lem370336 _16548 _16549 _16551 P Q f A B a) (@lem370337 _16548 _16551 z a)). Qed.
Lemma lem370339 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z : _16548 -> _16551) (a : _16548) : (term302 _16548 _16549 _16551 P Q f A B z a) = (term303 _16548 _16549 _16551 P Q f A B z a).
Proof. exact (eq_refl (term302 _16548 _16549 _16551 P Q f A B z a)). Qed.
Lemma lem370340 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z : _16548 -> _16551) (a : _16548) : (term301 _16548 _16549 _16551 P Q f A B z a) = (term303 _16548 _16549 _16551 P Q f A B z a).
Proof. exact (TRANS (@lem370338 _16548 _16549 _16551 P Q f A B z a) (@lem370339 _16548 _16549 _16551 P Q f A B z a)). Qed.
Lemma lem370341 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z : _16548 -> _16551) : (term304 _16548 _16549 _16551 P Q f A B z) = (term305 _16548 _16549 _16551 P Q f A B z).
Proof. exact (fun_ext (fun a : _16548 => @lem370340 _16548 _16549 _16551 P Q f A B z a)). Qed.
Lemma lem370342 {_16548 : Type'} : (@all _16548) = (@all _16548).
Proof. exact (eq_refl (@all _16548)). Qed.
Lemma lem370343 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z : _16548 -> _16551) : (term306 _16548 _16549 _16551 P Q f A B z) = (term307 _16548 _16549 _16551 P Q f A B z).
Proof. exact (MK_COMB (@lem370342 _16548) (@lem370341 _16548 _16549 _16551 P Q f A B z)). Qed.
Lemma lem370344 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term308 _16548 _16549 _16551 P Q f A B) = (term309 _16548 _16549 _16551 P Q f A B).
Proof. exact (fun_ext (fun z : _16548 -> _16551 => @lem370343 _16548 _16549 _16551 P Q f A B z)). Qed.
Lemma lem370345 {_16548 _16551 : Type'} : (@ex (_16548 -> _16551)) = (@ex (_16548 -> _16551)).
Proof. exact (eq_refl (@ex (_16548 -> _16551))). Qed.
Lemma lem370346 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term291 _16548 _16549 _16551 P Q f A B) = (term310 _16548 _16549 _16551 P Q f A B).
Proof. exact (MK_COMB (@lem370345 _16548 _16551) (@lem370344 _16548 _16549 _16551 P Q f A B)). Qed.
Lemma lem370347 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : ((term290 _16548 _16549 _16551 P Q f A B) = (term291 _16548 _16549 _16551 P Q f A B)) = ((term289 _16548 _16549 _16551 P Q f A B) = (term310 _16548 _16549 _16551 P Q f A B)).
Proof. exact (MK_COMB (@lem370335 _16548 _16549 _16551 P Q f A B) (@lem370346 _16548 _16549 _16551 P Q f A B)). Qed.
Lemma lem370348 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term289 _16548 _16549 _16551 P Q f A B) = (term310 _16548 _16549 _16551 P Q f A B).
Proof. exact (EQ_MP (@lem370347 _16548 _16549 _16551 P Q f A B) (@lem370322 _16548 _16549 _16551 P Q f A B)). Qed.
Lemma lem370349 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term116 _16548 _16549 _16551 P Q f A B) = (term310 _16548 _16549 _16551 P Q f A B).
Proof. exact (TRANS (@lem370318 _16548 _16549 _16551 P Q f A B) (@lem370348 _16548 _16549 _16551 P Q f A B)). Qed.
Lemma lem370350 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem370351 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term155 _16548 _16549 _16551 P Q f A B) = (term311 _16548 _16549 _16551 P Q f A B).
Proof. exact (MK_COMB (@lem370350) (@lem370349 _16548 _16549 _16551 P Q f A B)). Qed.
Lemma lem370352 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term153 _16548 _16549 _16551 P Q B f A) = (term153 _16548 _16549 _16551 P Q B f A).
Proof. exact (eq_refl (term153 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370353 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term157 _16548 _16549 _16551 P Q B f A) = (term312 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370351 _16548 _16549 _16551 P Q f A B) (@lem370352 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370355 {A : Type'} (P : A -> Prop) (Q : Prop) : (term166 A P Q) = (term167 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem370356 {_16548 _16551 : Type'} (P : type572 _16548 _16551) (Q : Prop) : (term313 _16548 _16551 P Q) = (term314 _16548 _16551 P Q).
Proof. exact (@lem370355 (_16548 -> _16551) P Q). Qed.
Lemma lem370357 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term315 _16548 _16549 _16551 P Q B f A) = (term316 _16548 _16549 _16551 P Q B f A).
Proof. exact (@lem370356 _16548 _16551 (term309 _16548 _16549 _16551 P Q f A B) (term153 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370358 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z : _16548 -> _16551) : (term317 _16548 _16549 _16551 P Q f A B z) = (term307 _16548 _16549 _16551 P Q f A B z).
Proof. exact (eq_refl (term317 _16548 _16549 _16551 P Q f A B z)). Qed.
Lemma lem370359 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term318 _16548 _16549 _16551 P Q f A B) = (term309 _16548 _16549 _16551 P Q f A B).
Proof. exact (fun_ext (fun z : _16548 -> _16551 => @lem370358 _16548 _16549 _16551 P Q f A B z)). Qed.
Lemma lem370360 {_16548 _16551 : Type'} : (@ex (_16548 -> _16551)) = (@ex (_16548 -> _16551)).
Proof. exact (eq_refl (@ex (_16548 -> _16551))). Qed.
Lemma lem370361 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term319 _16548 _16549 _16551 P Q f A B) = (term310 _16548 _16549 _16551 P Q f A B).
Proof. exact (MK_COMB (@lem370360 _16548 _16551) (@lem370359 _16548 _16549 _16551 P Q f A B)). Qed.
Lemma lem370362 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem370363 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : (term320 _16548 _16549 _16551 P Q f A B) = (term311 _16548 _16549 _16551 P Q f A B).
Proof. exact (MK_COMB (@lem370362) (@lem370361 _16548 _16549 _16551 P Q f A B)). Qed.
Lemma lem370364 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term153 _16548 _16549 _16551 P Q B f A) = (term153 _16548 _16549 _16551 P Q B f A).
Proof. exact (eq_refl (term153 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370365 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term315 _16548 _16549 _16551 P Q B f A) = (term312 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370363 _16548 _16549 _16551 P Q f A B) (@lem370364 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370366 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem370367 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term321 _16548 _16549 _16551 P Q B f A) = (term322 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370366) (@lem370365 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370368 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z : _16548 -> _16551) : (term317 _16548 _16549 _16551 P Q f A B z) = (term307 _16548 _16549 _16551 P Q f A B z).
Proof. exact (eq_refl (term317 _16548 _16549 _16551 P Q f A B z)). Qed.
Lemma lem370369 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem370370 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z : _16548 -> _16551) : (term323 _16548 _16549 _16551 P Q f A B z) = (term324 _16548 _16549 _16551 P Q f A B z).
Proof. exact (MK_COMB (@lem370369) (@lem370368 _16548 _16549 _16551 P Q f A B z)). Qed.
Lemma lem370371 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term153 _16548 _16549 _16551 P Q B f A) = (term153 _16548 _16549 _16551 P Q B f A).
Proof. exact (eq_refl (term153 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370372 {_16548 _16549 _16551 : Type'} (z : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term325 _16548 _16549 _16551 z P Q B f A) = (term326 _16548 _16549 _16551 z P Q B f A).
Proof. exact (MK_COMB (@lem370370 _16548 _16549 _16551 P Q f A B z) (@lem370371 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370373 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term327 _16548 _16549 _16551 P Q B f A) = (term328 _16548 _16549 _16551 P Q B f A).
Proof. exact (fun_ext (fun z : _16548 -> _16551 => @lem370372 _16548 _16549 _16551 z P Q B f A)). Qed.
Lemma lem370374 {_16548 _16551 : Type'} : (@ex (_16548 -> _16551)) = (@ex (_16548 -> _16551)).
Proof. exact (eq_refl (@ex (_16548 -> _16551))). Qed.
Lemma lem370375 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term316 _16548 _16549 _16551 P Q B f A) = (term329 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370374 _16548 _16551) (@lem370373 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370376 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : ((term315 _16548 _16549 _16551 P Q B f A) = (term316 _16548 _16549 _16551 P Q B f A)) = ((term312 _16548 _16549 _16551 P Q B f A) = (term329 _16548 _16549 _16551 P Q B f A)).
Proof. exact (MK_COMB (@lem370367 _16548 _16549 _16551 P Q B f A) (@lem370375 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370377 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term312 _16548 _16549 _16551 P Q B f A) = (term329 _16548 _16549 _16551 P Q B f A).
Proof. exact (EQ_MP (@lem370376 _16548 _16549 _16551 P Q B f A) (@lem370357 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370379 {A : Type'} (P : Prop) (Q : A -> Prop) : (term255 A P Q) = (term256 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem370380 {_16549 : Type'} (P : Prop) (Q : _16549 -> Prop) : (term255 _16549 P Q) = (term256 _16549 P Q).
Proof. exact (@lem370379 _16549 P Q). Qed.
Lemma lem370381 {_16548 _16549 _16551 : Type'} (z : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term330 _16548 _16549 _16551 z P Q B f A) = (term331 _16548 _16549 _16551 z P Q B f A).
Proof. exact (@lem370380 _16549 (term307 _16548 _16549 _16551 P Q f A B z) (term152 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370382 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term332 _16548 _16549 _16551 P Q B f A y) = (term144 _16548 _16549 _16551 P Q B f y A).
Proof. exact (eq_refl (term332 _16548 _16549 _16551 P Q B f A y)). Qed.
Lemma lem370383 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term333 _16548 _16549 _16551 P Q B f A) = (term152 _16548 _16549 _16551 P Q B f A).
Proof. exact (fun_ext (fun y : _16549 => @lem370382 _16548 _16549 _16551 P Q B f y A)). Qed.
Lemma lem370384 {_16549 : Type'} : (@ex _16549) = (@ex _16549).
Proof. exact (eq_refl (@ex _16549)). Qed.
Lemma lem370385 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term334 _16548 _16549 _16551 P Q B f A) = (term153 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370384 _16549) (@lem370383 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370386 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z : _16548 -> _16551) : (term324 _16548 _16549 _16551 P Q f A B z) = (term324 _16548 _16549 _16551 P Q f A B z).
Proof. exact (eq_refl (term324 _16548 _16549 _16551 P Q f A B z)). Qed.
Lemma lem370387 {_16548 _16549 _16551 : Type'} (z : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term330 _16548 _16549 _16551 z P Q B f A) = (term326 _16548 _16549 _16551 z P Q B f A).
Proof. exact (MK_COMB (@lem370386 _16548 _16549 _16551 P Q f A B z) (@lem370385 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370388 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem370389 {_16548 _16549 _16551 : Type'} (z : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term335 _16548 _16549 _16551 z P Q B f A) = (term336 _16548 _16549 _16551 z P Q B f A).
Proof. exact (MK_COMB (@lem370388) (@lem370387 _16548 _16549 _16551 z P Q B f A)). Qed.
Lemma lem370390 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term332 _16548 _16549 _16551 P Q B f A y) = (term144 _16548 _16549 _16551 P Q B f y A).
Proof. exact (eq_refl (term332 _16548 _16549 _16551 P Q B f A y)). Qed.
Lemma lem370391 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z : _16548 -> _16551) : (term324 _16548 _16549 _16551 P Q f A B z) = (term324 _16548 _16549 _16551 P Q f A B z).
Proof. exact (eq_refl (term324 _16548 _16549 _16551 P Q f A B z)). Qed.
Lemma lem370392 {_16548 _16549 _16551 : Type'} (z : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term337 _16548 _16549 _16551 z P Q B f A y) = (term338 _16548 _16549 _16551 z P Q B f y A).
Proof. exact (MK_COMB (@lem370391 _16548 _16549 _16551 P Q f A B z) (@lem370390 _16548 _16549 _16551 P Q B f y A)). Qed.
Lemma lem370393 {_16548 _16549 _16551 : Type'} (z : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term339 _16548 _16549 _16551 z P Q B f A) = (term340 _16548 _16549 _16551 z P Q B f A).
Proof. exact (fun_ext (fun y : _16549 => @lem370392 _16548 _16549 _16551 z P Q B f y A)). Qed.
Lemma lem370394 {_16549 : Type'} : (@ex _16549) = (@ex _16549).
Proof. exact (eq_refl (@ex _16549)). Qed.
Lemma lem370395 {_16548 _16549 _16551 : Type'} (z : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term331 _16548 _16549 _16551 z P Q B f A) = (term341 _16548 _16549 _16551 z P Q B f A).
Proof. exact (MK_COMB (@lem370394 _16549) (@lem370393 _16548 _16549 _16551 z P Q B f A)). Qed.
Lemma lem370396 {_16548 _16549 _16551 : Type'} (z : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : ((term330 _16548 _16549 _16551 z P Q B f A) = (term331 _16548 _16549 _16551 z P Q B f A)) = ((term326 _16548 _16549 _16551 z P Q B f A) = (term341 _16548 _16549 _16551 z P Q B f A)).
Proof. exact (MK_COMB (@lem370389 _16548 _16549 _16551 z P Q B f A) (@lem370395 _16548 _16549 _16551 z P Q B f A)). Qed.
Lemma lem370397 {_16548 _16549 _16551 : Type'} (z : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term326 _16548 _16549 _16551 z P Q B f A) = (term341 _16548 _16549 _16551 z P Q B f A).
Proof. exact (EQ_MP (@lem370396 _16548 _16549 _16551 z P Q B f A) (@lem370381 _16548 _16549 _16551 z P Q B f A)). Qed.
Lemma lem370398 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term328 _16548 _16549 _16551 P Q B f A) = (term342 _16548 _16549 _16551 P Q B f A).
Proof. exact (fun_ext (fun z : _16548 -> _16551 => @lem370397 _16548 _16549 _16551 z P Q B f A)). Qed.
Lemma lem370399 {_16548 _16551 : Type'} : (@ex (_16548 -> _16551)) = (@ex (_16548 -> _16551)).
Proof. exact (eq_refl (@ex (_16548 -> _16551))). Qed.
Lemma lem370400 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term329 _16548 _16549 _16551 P Q B f A) = (term343 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370399 _16548 _16551) (@lem370398 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370401 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term312 _16548 _16549 _16551 P Q B f A) = (term343 _16548 _16549 _16551 P Q B f A).
Proof. exact (TRANS (@lem370377 _16548 _16549 _16551 P Q B f A) (@lem370400 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370402 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term157 _16548 _16549 _16551 P Q B f A) = (term343 _16548 _16549 _16551 P Q B f A).
Proof. exact (TRANS (@lem370353 _16548 _16549 _16551 P Q B f A) (@lem370401 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370403 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term165 _16548 _16549 _16551 P Q B f A) = (term344 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370295 _16548 _16549 _16551 P Q B f A) (@lem370402 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370407 {A : Type'} (P : A -> Prop) (Q : Prop) : (term345 A P Q) = (term346 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem370408 {_16548 : Type'} (P : _16548 -> Prop) (Q : Prop) : (term345 _16548 P Q) = (term346 _16548 P Q).
Proof. exact (@lem370407 _16548 P Q). Qed.
Lemma lem370409 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term347 _16548 _16549 _16551 P Q B f A) = (term348 _16548 _16549 _16551 P Q B f A).
Proof. exact (@lem370408 _16548 (term273 _16548 _16549 _16551 P Q B f A) (term343 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370410 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term349 _16548 _16549 _16551 P Q B f A a) = (term272 _16548 _16549 _16551 a P Q B f A).
Proof. exact (eq_refl (term349 _16548 _16549 _16551 P Q B f A a)). Qed.
Lemma lem370411 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term350 _16548 _16549 _16551 P Q B f A) = (term273 _16548 _16549 _16551 P Q B f A).
Proof. exact (fun_ext (fun a : _16548 => @lem370410 _16548 _16549 _16551 a P Q B f A)). Qed.
Lemma lem370412 {_16548 : Type'} : (@ex _16548) = (@ex _16548).
Proof. exact (eq_refl (@ex _16548)). Qed.
Lemma lem370413 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term351 _16548 _16549 _16551 P Q B f A) = (term274 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370412 _16548) (@lem370411 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370414 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem370415 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term352 _16548 _16549 _16551 P Q B f A) = (term275 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370414) (@lem370413 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370416 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term343 _16548 _16549 _16551 P Q B f A) = (term343 _16548 _16549 _16551 P Q B f A).
Proof. exact (eq_refl (term343 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370417 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term347 _16548 _16549 _16551 P Q B f A) = (term344 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370415 _16548 _16549 _16551 P Q B f A) (@lem370416 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370418 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem370419 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term353 _16548 _16549 _16551 P Q B f A) = (term354 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370418) (@lem370417 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370420 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term349 _16548 _16549 _16551 P Q B f A a) = (term272 _16548 _16549 _16551 a P Q B f A).
Proof. exact (eq_refl (term349 _16548 _16549 _16551 P Q B f A a)). Qed.
Lemma lem370421 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem370422 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term355 _16548 _16549 _16551 P Q B f A a) = (term356 _16548 _16549 _16551 a P Q B f A).
Proof. exact (MK_COMB (@lem370421) (@lem370420 _16548 _16549 _16551 a P Q B f A)). Qed.
Lemma lem370423 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term343 _16548 _16549 _16551 P Q B f A) = (term343 _16548 _16549 _16551 P Q B f A).
Proof. exact (eq_refl (term343 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370424 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term357 _16548 _16549 _16551 a P Q B f A) = (term358 _16548 _16549 _16551 a P Q B f A).
Proof. exact (MK_COMB (@lem370422 _16548 _16549 _16551 a P Q B f A) (@lem370423 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370425 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term359 _16548 _16549 _16551 P Q B f A) = (term360 _16548 _16549 _16551 P Q B f A).
Proof. exact (fun_ext (fun a : _16548 => @lem370424 _16548 _16549 _16551 a P Q B f A)). Qed.
Lemma lem370426 {_16548 : Type'} : (@ex _16548) = (@ex _16548).
Proof. exact (eq_refl (@ex _16548)). Qed.
Lemma lem370427 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term348 _16548 _16549 _16551 P Q B f A) = (term361 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370426 _16548) (@lem370425 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370428 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : ((term347 _16548 _16549 _16551 P Q B f A) = (term348 _16548 _16549 _16551 P Q B f A)) = ((term344 _16548 _16549 _16551 P Q B f A) = (term361 _16548 _16549 _16551 P Q B f A)).
Proof. exact (MK_COMB (@lem370419 _16548 _16549 _16551 P Q B f A) (@lem370427 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370429 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term344 _16548 _16549 _16551 P Q B f A) = (term361 _16548 _16549 _16551 P Q B f A).
Proof. exact (EQ_MP (@lem370428 _16548 _16549 _16551 P Q B f A) (@lem370409 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370433 {A : Type'} (P : A -> Prop) (Q : Prop) : (term345 A P Q) = (term346 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem370434 {_16549 : Type'} (P : _16549 -> Prop) (Q : Prop) : (term345 _16549 P Q) = (term346 _16549 P Q).
Proof. exact (@lem370433 _16549 P Q). Qed.
Lemma lem370435 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term362 _16548 _16549 _16551 a P Q B f A) = (term363 _16548 _16549 _16551 a P Q B f A).
Proof. exact (@lem370434 _16549 (term271 _16548 _16549 _16551 a P Q B f A) (term343 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370436 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term364 _16548 _16549 _16551 a P Q B f A y) = (term270 _16548 _16549 _16551 y a P Q B f A).
Proof. exact (eq_refl (term364 _16548 _16549 _16551 a P Q B f A y)). Qed.
Lemma lem370437 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term365 _16548 _16549 _16551 a P Q B f A) = (term271 _16548 _16549 _16551 a P Q B f A).
Proof. exact (fun_ext (fun y : _16549 => @lem370436 _16548 _16549 _16551 y a P Q B f A)). Qed.
Lemma lem370438 {_16549 : Type'} : (@ex _16549) = (@ex _16549).
Proof. exact (eq_refl (@ex _16549)). Qed.
Lemma lem370439 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term366 _16548 _16549 _16551 a P Q B f A) = (term272 _16548 _16549 _16551 a P Q B f A).
Proof. exact (MK_COMB (@lem370438 _16549) (@lem370437 _16548 _16549 _16551 a P Q B f A)). Qed.
Lemma lem370440 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem370441 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term367 _16548 _16549 _16551 a P Q B f A) = (term356 _16548 _16549 _16551 a P Q B f A).
Proof. exact (MK_COMB (@lem370440) (@lem370439 _16548 _16549 _16551 a P Q B f A)). Qed.
Lemma lem370442 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term343 _16548 _16549 _16551 P Q B f A) = (term343 _16548 _16549 _16551 P Q B f A).
Proof. exact (eq_refl (term343 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370443 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term362 _16548 _16549 _16551 a P Q B f A) = (term358 _16548 _16549 _16551 a P Q B f A).
Proof. exact (MK_COMB (@lem370441 _16548 _16549 _16551 a P Q B f A) (@lem370442 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370444 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem370445 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term368 _16548 _16549 _16551 a P Q B f A) = (term369 _16548 _16549 _16551 a P Q B f A).
Proof. exact (MK_COMB (@lem370444) (@lem370443 _16548 _16549 _16551 a P Q B f A)). Qed.
Lemma lem370446 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term364 _16548 _16549 _16551 a P Q B f A y) = (term270 _16548 _16549 _16551 y a P Q B f A).
Proof. exact (eq_refl (term364 _16548 _16549 _16551 a P Q B f A y)). Qed.
Lemma lem370447 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem370448 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term370 _16548 _16549 _16551 a P Q B f A y) = (term371 _16548 _16549 _16551 y a P Q B f A).
Proof. exact (MK_COMB (@lem370447) (@lem370446 _16548 _16549 _16551 y a P Q B f A)). Qed.
Lemma lem370449 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term343 _16548 _16549 _16551 P Q B f A) = (term343 _16548 _16549 _16551 P Q B f A).
Proof. exact (eq_refl (term343 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370450 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term372 _16548 _16549 _16551 a y P Q B f A) = (term373 _16548 _16549 _16551 y a P Q B f A).
Proof. exact (MK_COMB (@lem370448 _16548 _16549 _16551 y a P Q B f A) (@lem370449 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370451 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term374 _16548 _16549 _16551 a P Q B f A) = (term375 _16548 _16549 _16551 a P Q B f A).
Proof. exact (fun_ext (fun y : _16549 => @lem370450 _16548 _16549 _16551 y a P Q B f A)). Qed.
Lemma lem370452 {_16549 : Type'} : (@ex _16549) = (@ex _16549).
Proof. exact (eq_refl (@ex _16549)). Qed.
Lemma lem370453 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term363 _16548 _16549 _16551 a P Q B f A) = (term376 _16548 _16549 _16551 a P Q B f A).
Proof. exact (MK_COMB (@lem370452 _16549) (@lem370451 _16548 _16549 _16551 a P Q B f A)). Qed.
Lemma lem370454 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : ((term362 _16548 _16549 _16551 a P Q B f A) = (term363 _16548 _16549 _16551 a P Q B f A)) = ((term358 _16548 _16549 _16551 a P Q B f A) = (term376 _16548 _16549 _16551 a P Q B f A)).
Proof. exact (MK_COMB (@lem370445 _16548 _16549 _16551 a P Q B f A) (@lem370453 _16548 _16549 _16551 a P Q B f A)). Qed.
Lemma lem370455 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term358 _16548 _16549 _16551 a P Q B f A) = (term376 _16548 _16549 _16551 a P Q B f A).
Proof. exact (EQ_MP (@lem370454 _16548 _16549 _16551 a P Q B f A) (@lem370435 _16548 _16549 _16551 a P Q B f A)). Qed.
Lemma lem370459 {A : Type'} (P : A -> Prop) (Q : Prop) : (term345 A P Q) = (term346 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem370460 {_16549 _16551 : Type'} (P : type572 _16549 _16551) (Q : Prop) : (term377 _16549 _16551 P Q) = (term378 _16549 _16551 P Q).
Proof. exact (@lem370459 (_16549 -> _16551) P Q). Qed.
Lemma lem370461 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term379 _16548 _16549 _16551 y a P Q B f A) = (term380 _16548 _16549 _16551 y a P Q B f A).
Proof. exact (@lem370460 _16549 _16551 (term269 _16548 _16549 _16551 y a P Q B f A) (term343 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370462 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) : (term381 _16548 _16549 _16551 y a P Q B f A z) = (term267 _16548 _16549 _16551 y a P Q B f A z).
Proof. exact (eq_refl (term381 _16548 _16549 _16551 y a P Q B f A z)). Qed.
Lemma lem370463 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term382 _16548 _16549 _16551 y a P Q B f A) = (term269 _16548 _16549 _16551 y a P Q B f A).
Proof. exact (fun_ext (fun z : _16549 -> _16551 => @lem370462 _16548 _16549 _16551 y a P Q B f A z)). Qed.
Lemma lem370464 {_16549 _16551 : Type'} : (@ex (_16549 -> _16551)) = (@ex (_16549 -> _16551)).
Proof. exact (eq_refl (@ex (_16549 -> _16551))). Qed.
Lemma lem370465 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term383 _16548 _16549 _16551 y a P Q B f A) = (term270 _16548 _16549 _16551 y a P Q B f A).
Proof. exact (MK_COMB (@lem370464 _16549 _16551) (@lem370463 _16548 _16549 _16551 y a P Q B f A)). Qed.
Lemma lem370466 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem370467 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term384 _16548 _16549 _16551 y a P Q B f A) = (term371 _16548 _16549 _16551 y a P Q B f A).
Proof. exact (MK_COMB (@lem370466) (@lem370465 _16548 _16549 _16551 y a P Q B f A)). Qed.
Lemma lem370468 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term343 _16548 _16549 _16551 P Q B f A) = (term343 _16548 _16549 _16551 P Q B f A).
Proof. exact (eq_refl (term343 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370469 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term379 _16548 _16549 _16551 y a P Q B f A) = (term373 _16548 _16549 _16551 y a P Q B f A).
Proof. exact (MK_COMB (@lem370467 _16548 _16549 _16551 y a P Q B f A) (@lem370468 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370470 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem370471 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term385 _16548 _16549 _16551 y a P Q B f A) = (term386 _16548 _16549 _16551 y a P Q B f A).
Proof. exact (MK_COMB (@lem370470) (@lem370469 _16548 _16549 _16551 y a P Q B f A)). Qed.
Lemma lem370472 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) : (term381 _16548 _16549 _16551 y a P Q B f A z) = (term267 _16548 _16549 _16551 y a P Q B f A z).
Proof. exact (eq_refl (term381 _16548 _16549 _16551 y a P Q B f A z)). Qed.
Lemma lem370473 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem370474 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) : (term387 _16548 _16549 _16551 y a P Q B f A z) = (term388 _16548 _16549 _16551 y a P Q B f A z).
Proof. exact (MK_COMB (@lem370473) (@lem370472 _16548 _16549 _16551 y a P Q B f A z)). Qed.
Lemma lem370475 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term343 _16548 _16549 _16551 P Q B f A) = (term343 _16548 _16549 _16551 P Q B f A).
Proof. exact (eq_refl (term343 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370476 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term389 _16548 _16549 _16551 y a z P Q B f A) = (term390 _16548 _16549 _16551 y a z P Q B f A).
Proof. exact (MK_COMB (@lem370474 _16548 _16549 _16551 y a P Q B f A z) (@lem370475 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370477 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term391 _16548 _16549 _16551 y a P Q B f A) = (term392 _16548 _16549 _16551 y a P Q B f A).
Proof. exact (fun_ext (fun z : _16549 -> _16551 => @lem370476 _16548 _16549 _16551 y a z P Q B f A)). Qed.
Lemma lem370478 {_16549 _16551 : Type'} : (@ex (_16549 -> _16551)) = (@ex (_16549 -> _16551)).
Proof. exact (eq_refl (@ex (_16549 -> _16551))). Qed.
Lemma lem370479 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term380 _16548 _16549 _16551 y a P Q B f A) = (term393 _16548 _16549 _16551 y a P Q B f A).
Proof. exact (MK_COMB (@lem370478 _16549 _16551) (@lem370477 _16548 _16549 _16551 y a P Q B f A)). Qed.
Lemma lem370480 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : ((term379 _16548 _16549 _16551 y a P Q B f A) = (term380 _16548 _16549 _16551 y a P Q B f A)) = ((term373 _16548 _16549 _16551 y a P Q B f A) = (term393 _16548 _16549 _16551 y a P Q B f A)).
Proof. exact (MK_COMB (@lem370471 _16548 _16549 _16551 y a P Q B f A) (@lem370479 _16548 _16549 _16551 y a P Q B f A)). Qed.
Lemma lem370481 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term373 _16548 _16549 _16551 y a P Q B f A) = (term393 _16548 _16549 _16551 y a P Q B f A).
Proof. exact (EQ_MP (@lem370480 _16548 _16549 _16551 y a P Q B f A) (@lem370461 _16548 _16549 _16551 y a P Q B f A)). Qed.
Lemma lem370483 {A : Type'} (P : Prop) (Q : A -> Prop) : (term185 A P Q) = (term186 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem370484 {_16548 _16551 : Type'} (P : Prop) (Q : type572 _16548 _16551) : (term394 _16548 _16551 P Q) = (term395 _16548 _16551 P Q).
Proof. exact (@lem370483 (_16548 -> _16551) P Q). Qed.
Lemma lem370485 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term396 _16548 _16549 _16551 y a z P Q B f A) = (term397 _16548 _16549 _16551 y a z P Q B f A).
Proof. exact (@lem370484 _16548 _16551 (term267 _16548 _16549 _16551 y a P Q B f A z) (term342 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370486 {_16548 _16549 _16551 : Type'} (z : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term398 _16548 _16549 _16551 P Q B f A z) = (term341 _16548 _16549 _16551 z P Q B f A).
Proof. exact (eq_refl (term398 _16548 _16549 _16551 P Q B f A z)). Qed.
Lemma lem370487 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term399 _16548 _16549 _16551 P Q B f A) = (term342 _16548 _16549 _16551 P Q B f A).
Proof. exact (fun_ext (fun z : _16548 -> _16551 => @lem370486 _16548 _16549 _16551 z P Q B f A)). Qed.
Lemma lem370488 {_16548 _16551 : Type'} : (@ex (_16548 -> _16551)) = (@ex (_16548 -> _16551)).
Proof. exact (eq_refl (@ex (_16548 -> _16551))). Qed.
Lemma lem370489 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term400 _16548 _16549 _16551 P Q B f A) = (term343 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370488 _16548 _16551) (@lem370487 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370490 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) : (term388 _16548 _16549 _16551 y a P Q B f A z) = (term388 _16548 _16549 _16551 y a P Q B f A z).
Proof. exact (eq_refl (term388 _16548 _16549 _16551 y a P Q B f A z)). Qed.
Lemma lem370491 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term396 _16548 _16549 _16551 y a z P Q B f A) = (term390 _16548 _16549 _16551 y a z P Q B f A).
Proof. exact (MK_COMB (@lem370490 _16548 _16549 _16551 y a P Q B f A z) (@lem370489 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370492 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem370493 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term401 _16548 _16549 _16551 y a z P Q B f A) = (term402 _16548 _16549 _16551 y a z P Q B f A).
Proof. exact (MK_COMB (@lem370492) (@lem370491 _16548 _16549 _16551 y a z P Q B f A)). Qed.
Lemma lem370494 {_16548 _16549 _16551 : Type'} (z : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term398 _16548 _16549 _16551 P Q B f A z) = (term341 _16548 _16549 _16551 z P Q B f A).
Proof. exact (eq_refl (term398 _16548 _16549 _16551 P Q B f A z)). Qed.
Lemma lem370495 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) : (term388 _16548 _16549 _16551 y a P Q B f A z) = (term388 _16548 _16549 _16551 y a P Q B f A z).
Proof. exact (eq_refl (term388 _16548 _16549 _16551 y a P Q B f A z)). Qed.
Lemma lem370496 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term403 _16548 _16549 _16551 y a z P Q B f A z') = (term404 _16548 _16549 _16551 y a z z' P Q B f A).
Proof. exact (MK_COMB (@lem370495 _16548 _16549 _16551 y a P Q B f A z) (@lem370494 _16548 _16549 _16551 z' P Q B f A)). Qed.
Lemma lem370497 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term405 _16548 _16549 _16551 y a z P Q B f A) = (term406 _16548 _16549 _16551 y a z P Q B f A).
Proof. exact (fun_ext (fun z' : _16548 -> _16551 => @lem370496 _16548 _16549 _16551 y a z z' P Q B f A)). Qed.
Lemma lem370498 {_16548 _16551 : Type'} : (@ex (_16548 -> _16551)) = (@ex (_16548 -> _16551)).
Proof. exact (eq_refl (@ex (_16548 -> _16551))). Qed.
Lemma lem370499 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term397 _16548 _16549 _16551 y a z P Q B f A) = (term407 _16548 _16549 _16551 y a z P Q B f A).
Proof. exact (MK_COMB (@lem370498 _16548 _16551) (@lem370497 _16548 _16549 _16551 y a z P Q B f A)). Qed.
Lemma lem370500 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : ((term396 _16548 _16549 _16551 y a z P Q B f A) = (term397 _16548 _16549 _16551 y a z P Q B f A)) = ((term390 _16548 _16549 _16551 y a z P Q B f A) = (term407 _16548 _16549 _16551 y a z P Q B f A)).
Proof. exact (MK_COMB (@lem370493 _16548 _16549 _16551 y a z P Q B f A) (@lem370499 _16548 _16549 _16551 y a z P Q B f A)). Qed.
Lemma lem370501 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term390 _16548 _16549 _16551 y a z P Q B f A) = (term407 _16548 _16549 _16551 y a z P Q B f A).
Proof. exact (EQ_MP (@lem370500 _16548 _16549 _16551 y a z P Q B f A) (@lem370485 _16548 _16549 _16551 y a z P Q B f A)). Qed.
Lemma lem370503 {A : Type'} (P : Prop) (Q : A -> Prop) : (term185 A P Q) = (term186 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem370504 {_16549 : Type'} (P : Prop) (Q : _16549 -> Prop) : (term185 _16549 P Q) = (term186 _16549 P Q).
Proof. exact (@lem370503 _16549 P Q). Qed.
Lemma lem370505 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term408 _16548 _16549 _16551 y a z z' P Q B f A) = (term409 _16548 _16549 _16551 y a z z' P Q B f A).
Proof. exact (@lem370504 _16549 (term267 _16548 _16549 _16551 y a P Q B f A z) (term340 _16548 _16549 _16551 z' P Q B f A)). Qed.
Lemma lem370506 {_16548 _16549 _16551 : Type'} (z : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) : (term410 _16548 _16549 _16551 z P Q B f A y) = (term338 _16548 _16549 _16551 z P Q B f y A).
Proof. exact (eq_refl (term410 _16548 _16549 _16551 z P Q B f A y)). Qed.
Lemma lem370507 {_16548 _16549 _16551 : Type'} (z : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term411 _16548 _16549 _16551 z P Q B f A) = (term340 _16548 _16549 _16551 z P Q B f A).
Proof. exact (fun_ext (fun y : _16549 => @lem370506 _16548 _16549 _16551 z P Q B f y A)). Qed.
Lemma lem370508 {_16549 : Type'} : (@ex _16549) = (@ex _16549).
Proof. exact (eq_refl (@ex _16549)). Qed.
Lemma lem370509 {_16548 _16549 _16551 : Type'} (z : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term412 _16548 _16549 _16551 z P Q B f A) = (term341 _16548 _16549 _16551 z P Q B f A).
Proof. exact (MK_COMB (@lem370508 _16549) (@lem370507 _16548 _16549 _16551 z P Q B f A)). Qed.
Lemma lem370510 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) : (term388 _16548 _16549 _16551 y a P Q B f A z) = (term388 _16548 _16549 _16551 y a P Q B f A z).
Proof. exact (eq_refl (term388 _16548 _16549 _16551 y a P Q B f A z)). Qed.
Lemma lem370511 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term408 _16548 _16549 _16551 y a z z' P Q B f A) = (term404 _16548 _16549 _16551 y a z z' P Q B f A).
Proof. exact (MK_COMB (@lem370510 _16548 _16549 _16551 y a P Q B f A z) (@lem370509 _16548 _16549 _16551 z' P Q B f A)). Qed.
Lemma lem370512 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem370513 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term413 _16548 _16549 _16551 y a z z' P Q B f A) = (term414 _16548 _16549 _16551 y a z z' P Q B f A).
Proof. exact (MK_COMB (@lem370512) (@lem370511 _16548 _16549 _16551 y a z z' P Q B f A)). Qed.
Lemma lem370514 {_16548 _16549 _16551 : Type'} (z : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) : (term410 _16548 _16549 _16551 z P Q B f A y') = (term338 _16548 _16549 _16551 z P Q B f y' A).
Proof. exact (eq_refl (term410 _16548 _16549 _16551 z P Q B f A y')). Qed.
Lemma lem370515 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) : (term388 _16548 _16549 _16551 y a P Q B f A z) = (term388 _16548 _16549 _16551 y a P Q B f A z).
Proof. exact (eq_refl (term388 _16548 _16549 _16551 y a P Q B f A z)). Qed.
Lemma lem370516 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) : (term415 _16548 _16549 _16551 y a z z' P Q B f A y') = (term416 _16548 _16549 _16551 y a z z' P Q B f y' A).
Proof. exact (MK_COMB (@lem370515 _16548 _16549 _16551 y a P Q B f A z) (@lem370514 _16548 _16549 _16551 z' P Q B f y' A)). Qed.
Lemma lem370517 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term417 _16548 _16549 _16551 y a z z' P Q B f A) = (term418 _16548 _16549 _16551 y a z z' P Q B f A).
Proof. exact (fun_ext (fun y' : _16549 => @lem370516 _16548 _16549 _16551 y a z z' P Q B f y' A)). Qed.
Lemma lem370518 {_16549 : Type'} : (@ex _16549) = (@ex _16549).
Proof. exact (eq_refl (@ex _16549)). Qed.
Lemma lem370519 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term409 _16548 _16549 _16551 y a z z' P Q B f A) = (term419 _16548 _16549 _16551 y a z z' P Q B f A).
Proof. exact (MK_COMB (@lem370518 _16549) (@lem370517 _16548 _16549 _16551 y a z z' P Q B f A)). Qed.
Lemma lem370520 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : ((term408 _16548 _16549 _16551 y a z z' P Q B f A) = (term409 _16548 _16549 _16551 y a z z' P Q B f A)) = ((term404 _16548 _16549 _16551 y a z z' P Q B f A) = (term419 _16548 _16549 _16551 y a z z' P Q B f A)).
Proof. exact (MK_COMB (@lem370513 _16548 _16549 _16551 y a z z' P Q B f A) (@lem370519 _16548 _16549 _16551 y a z z' P Q B f A)). Qed.
Lemma lem370521 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term404 _16548 _16549 _16551 y a z z' P Q B f A) = (term419 _16548 _16549 _16551 y a z z' P Q B f A).
Proof. exact (EQ_MP (@lem370520 _16548 _16549 _16551 y a z z' P Q B f A) (@lem370505 _16548 _16549 _16551 y a z z' P Q B f A)). Qed.
Lemma lem370522 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term406 _16548 _16549 _16551 y a z P Q B f A) = (term420 _16548 _16549 _16551 y a z P Q B f A).
Proof. exact (fun_ext (fun z' : _16548 -> _16551 => @lem370521 _16548 _16549 _16551 y a z z' P Q B f A)). Qed.
Lemma lem370523 {_16548 _16551 : Type'} : (@ex (_16548 -> _16551)) = (@ex (_16548 -> _16551)).
Proof. exact (eq_refl (@ex (_16548 -> _16551))). Qed.
Lemma lem370524 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term407 _16548 _16549 _16551 y a z P Q B f A) = (term421 _16548 _16549 _16551 y a z P Q B f A).
Proof. exact (MK_COMB (@lem370523 _16548 _16551) (@lem370522 _16548 _16549 _16551 y a z P Q B f A)). Qed.
Lemma lem370525 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term390 _16548 _16549 _16551 y a z P Q B f A) = (term421 _16548 _16549 _16551 y a z P Q B f A).
Proof. exact (TRANS (@lem370501 _16548 _16549 _16551 y a z P Q B f A) (@lem370524 _16548 _16549 _16551 y a z P Q B f A)). Qed.
Lemma lem370526 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term392 _16548 _16549 _16551 y a P Q B f A) = (term422 _16548 _16549 _16551 y a P Q B f A).
Proof. exact (fun_ext (fun z : _16549 -> _16551 => @lem370525 _16548 _16549 _16551 y a z P Q B f A)). Qed.
Lemma lem370527 {_16549 _16551 : Type'} : (@ex (_16549 -> _16551)) = (@ex (_16549 -> _16551)).
Proof. exact (eq_refl (@ex (_16549 -> _16551))). Qed.
Lemma lem370528 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term393 _16548 _16549 _16551 y a P Q B f A) = (term423 _16548 _16549 _16551 y a P Q B f A).
Proof. exact (MK_COMB (@lem370527 _16549 _16551) (@lem370526 _16548 _16549 _16551 y a P Q B f A)). Qed.
Lemma lem370529 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term373 _16548 _16549 _16551 y a P Q B f A) = (term423 _16548 _16549 _16551 y a P Q B f A).
Proof. exact (TRANS (@lem370481 _16548 _16549 _16551 y a P Q B f A) (@lem370528 _16548 _16549 _16551 y a P Q B f A)). Qed.
Lemma lem370530 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term375 _16548 _16549 _16551 a P Q B f A) = (term424 _16548 _16549 _16551 a P Q B f A).
Proof. exact (fun_ext (fun y : _16549 => @lem370529 _16548 _16549 _16551 y a P Q B f A)). Qed.
Lemma lem370531 {_16549 : Type'} : (@ex _16549) = (@ex _16549).
Proof. exact (eq_refl (@ex _16549)). Qed.
Lemma lem370532 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term376 _16548 _16549 _16551 a P Q B f A) = (term425 _16548 _16549 _16551 a P Q B f A).
Proof. exact (MK_COMB (@lem370531 _16549) (@lem370530 _16548 _16549 _16551 a P Q B f A)). Qed.
Lemma lem370533 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term358 _16548 _16549 _16551 a P Q B f A) = (term425 _16548 _16549 _16551 a P Q B f A).
Proof. exact (TRANS (@lem370455 _16548 _16549 _16551 a P Q B f A) (@lem370532 _16548 _16549 _16551 a P Q B f A)). Qed.
Lemma lem370534 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term360 _16548 _16549 _16551 P Q B f A) = (term426 _16548 _16549 _16551 P Q B f A).
Proof. exact (fun_ext (fun a : _16548 => @lem370533 _16548 _16549 _16551 a P Q B f A)). Qed.
Lemma lem370535 {_16548 : Type'} : (@ex _16548) = (@ex _16548).
Proof. exact (eq_refl (@ex _16548)). Qed.
Lemma lem370536 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term361 _16548 _16549 _16551 P Q B f A) = (term427 _16548 _16549 _16551 P Q B f A).
Proof. exact (MK_COMB (@lem370535 _16548) (@lem370534 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370537 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term344 _16548 _16549 _16551 P Q B f A) = (term427 _16548 _16549 _16551 P Q B f A).
Proof. exact (TRANS (@lem370429 _16548 _16549 _16551 P Q B f A) (@lem370536 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370539 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term165 _16548 _16549 _16551 P Q B f A) = (term427 _16548 _16549 _16551 P Q B f A).
Proof. exact (TRANS (@lem370403 _16548 _16549 _16551 P Q B f A) (@lem370537 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370540 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term28 _16548 _16549 _16551 P Q B f A) = (term427 _16548 _16549 _16551 P Q B f A).
Proof. exact (TRANS (@lem369707 _16548 _16549 _16551 P Q B f A) (@lem370539 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem370541 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term28 _16548 _16549 _16551 P Q B f A) : term427 _16548 _16549 _16551 P Q B f A.
Proof. exact (EQ_MP (@lem370540 _16548 _16549 _16551 P Q B f A) (@lem369549 _16548 _16549 _16551 P Q B f A h1)). Qed.
Lemma lem370542 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term425 _16548 _16549 _16551 a P Q B f A) : term425 _16548 _16549 _16551 a P Q B f A.
Proof. exact (h1). Qed.
Lemma lem370543 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term423 _16548 _16549 _16551 y a P Q B f A) : term423 _16548 _16549 _16551 y a P Q B f A.
Proof. exact (h1). Qed.
Lemma lem370544 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term421 _16548 _16549 _16551 y a z P Q B f A) : term421 _16548 _16549 _16551 y a z P Q B f A.
Proof. exact (h1). Qed.
Lemma lem370545 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term419 _16548 _16549 _16551 y a z z' P Q B f A) : term419 _16548 _16549 _16551 y a z z' P Q B f A.
Proof. exact (h1). Qed.
Lemma lem370546 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term416 _16548 _16549 _16551 y a z z' P Q B f y' A) : term416 _16548 _16549 _16551 y a z z' P Q B f y' A.
Proof. exact (h1). Qed.
Lemma lem370563 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (z : _16551) : (term128 _16548 _16549 _16551 B f y' A z) = (term128 _16548 _16549 _16551 B f y' A z).
Proof. exact (eq_refl (term128 _16548 _16549 _16551 B f y' A z)). Qed.
Lemma lem370564 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) : (term136 _16548 _16549 _16551 B f y' A) = (term136 _16548 _16549 _16551 B f y' A).
Proof. exact (fun_ext (fun z : _16551 => @lem370563 _16548 _16549 _16551 B f y' A z)). Qed.
Lemma lem370565 {_16551 : Type'} : (@all _16551) = (@all _16551).
Proof. exact (eq_refl (@all _16551)). Qed.
Lemma lem370566 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) : (term137 _16548 _16549 _16551 B f y' A) = (term137 _16548 _16549 _16551 B f y' A).
Proof. exact (MK_COMB (@lem370565 _16551) (@lem370564 _16548 _16549 _16551 B f y' A)). Qed.
Lemma lem370577 {_16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (y' : _16549) : (term57 _16549 P Q y') = (term57 _16549 P Q y').
Proof. exact (eq_refl (term57 _16549 P Q y')). Qed.
Lemma lem370578 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) : (term144 _16548 _16549 _16551 P Q B f y' A) = (term144 _16548 _16549 _16551 P Q B f y' A).
Proof. exact (MK_COMB (@lem370577 _16549 P Q y') (@lem370566 _16548 _16549 _16551 B f y' A)). Qed.
Lemma lem370593 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (a : _16548) : (term428 _16548 _16551 A B z' a) = (term428 _16548 _16551 A B z' a).
Proof. exact (eq_refl (term428 _16548 _16551 A B z' a)). Qed.
Lemma lem370618 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (a : _16548) : (term74 _16548 _16549 P Q f y a) = (term74 _16548 _16549 P Q f y a).
Proof. exact (eq_refl (term74 _16548 _16549 P Q f y a)). Qed.
Lemma lem370619 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (a : _16548) : (term84 _16548 _16549 P Q f a) = (term84 _16548 _16549 P Q f a).
Proof. exact (fun_ext (fun y : _16549 => @lem370618 _16548 _16549 P Q f y a)). Qed.
Lemma lem370620 {_16549 : Type'} : (@all _16549) = (@all _16549).
Proof. exact (eq_refl (@all _16549)). Qed.
Lemma lem370621 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (a : _16548) : (term85 _16548 _16549 P Q f a) = (term85 _16548 _16549 P Q f a).
Proof. exact (MK_COMB (@lem370620 _16549) (@lem370619 _16548 _16549 P Q f a)). Qed.
Lemma lem370622 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem370623 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (a : _16548) : (term105 _16548 _16549 P Q f a) = (term105 _16548 _16549 P Q f a).
Proof. exact (MK_COMB (@lem370622) (@lem370621 _16548 _16549 P Q f a)). Qed.
Lemma lem370624 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (a : _16548) : (term303 _16548 _16549 _16551 P Q f A B z' a) = (term303 _16548 _16549 _16551 P Q f A B z' a).
Proof. exact (MK_COMB (@lem370623 _16548 _16549 P Q f a) (@lem370593 _16548 _16551 A B z' a)). Qed.
Lemma lem370625 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) : (term305 _16548 _16549 _16551 P Q f A B z') = (term305 _16548 _16549 _16551 P Q f A B z').
Proof. exact (fun_ext (fun a : _16548 => @lem370624 _16548 _16549 _16551 P Q f A B z' a)). Qed.
Lemma lem370626 {_16548 : Type'} : (@all _16548) = (@all _16548).
Proof. exact (eq_refl (@all _16548)). Qed.
Lemma lem370627 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) : (term307 _16548 _16549 _16551 P Q f A B z') = (term307 _16548 _16549 _16551 P Q f A B z').
Proof. exact (MK_COMB (@lem370626 _16548) (@lem370625 _16548 _16549 _16551 P Q f A B z')). Qed.
Lemma lem370628 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem370629 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) : (term324 _16548 _16549 _16551 P Q f A B z') = (term324 _16548 _16549 _16551 P Q f A B z').
Proof. exact (MK_COMB (@lem370628) (@lem370627 _16548 _16549 _16551 P Q f A B z')). Qed.
Lemma lem370630 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) : (term338 _16548 _16549 _16551 z' P Q B f y' A) = (term338 _16548 _16549 _16551 z' P Q B f y' A).
Proof. exact (MK_COMB (@lem370629 _16548 _16549 _16551 P Q f A B z') (@lem370578 _16548 _16549 _16551 P Q B f y' A)). Qed.
Lemma lem370663 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (y : _16549) : (term216 _16548 _16549 _16551 P Q B f A z y) = (term216 _16548 _16549 _16551 P Q B f A z y).
Proof. exact (eq_refl (term216 _16548 _16549 _16551 P Q B f A z y)). Qed.
Lemma lem370664 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) : (term218 _16548 _16549 _16551 P Q B f A z) = (term218 _16548 _16549 _16551 P Q B f A z).
Proof. exact (fun_ext (fun y : _16549 => @lem370663 _16548 _16549 _16551 P Q B f A z y)). Qed.
Lemma lem370665 {_16549 : Type'} : (@all _16549) = (@all _16549).
Proof. exact (eq_refl (@all _16549)). Qed.
Lemma lem370666 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) : (term220 _16548 _16549 _16551 P Q B f A z) = (term220 _16548 _16549 _16551 P Q B f A z).
Proof. exact (MK_COMB (@lem370665 _16549) (@lem370664 _16548 _16549 _16551 P Q B f A z)). Qed.
Lemma lem370681 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) (z : _16551) : (term92 _16548 _16551 A B a z) = (term92 _16548 _16551 A B a z).
Proof. exact (eq_refl (term92 _16548 _16551 A B a z)). Qed.
Lemma lem370682 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term102 _16548 _16551 A B a) = (term102 _16548 _16551 A B a).
Proof. exact (fun_ext (fun z : _16551 => @lem370681 _16548 _16551 A B a z)). Qed.
Lemma lem370683 {_16551 : Type'} : (@all _16551) = (@all _16551).
Proof. exact (eq_refl (@all _16551)). Qed.
Lemma lem370684 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term103 _16548 _16551 A B a) = (term103 _16548 _16551 A B a).
Proof. exact (MK_COMB (@lem370683 _16551) (@lem370682 _16548 _16551 A B a)). Qed.
Lemma lem370705 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (a : _16548) : (term176 _16548 _16549 P Q f y a) = (term176 _16548 _16549 P Q f y a).
Proof. exact (eq_refl (term176 _16548 _16549 P Q f y a)). Qed.
Lemma lem370706 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term178 _16548 _16549 _16551 P Q f y A B a) = (term178 _16548 _16549 _16551 P Q f y A B a).
Proof. exact (MK_COMB (@lem370705 _16548 _16549 P Q f y a) (@lem370684 _16548 _16551 A B a)). Qed.
Lemma lem370707 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem370708 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term249 _16548 _16549 _16551 P Q f y A B a) = (term249 _16548 _16549 _16551 P Q f y A B a).
Proof. exact (MK_COMB (@lem370707) (@lem370706 _16548 _16549 _16551 P Q f y A B a)). Qed.
Lemma lem370709 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) : (term267 _16548 _16549 _16551 y a P Q B f A z) = (term267 _16548 _16549 _16551 y a P Q B f A z).
Proof. exact (MK_COMB (@lem370708 _16548 _16549 _16551 P Q f y A B a) (@lem370666 _16548 _16549 _16551 P Q B f A z)). Qed.
Lemma lem370710 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem370711 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) : (term388 _16548 _16549 _16551 y a P Q B f A z) = (term388 _16548 _16549 _16551 y a P Q B f A z).
Proof. exact (MK_COMB (@lem370710) (@lem370709 _16548 _16549 _16551 y a P Q B f A z)). Qed.
Lemma lem370712 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) : (term416 _16548 _16549 _16551 y a z z' P Q B f y' A) = (term416 _16548 _16549 _16551 y a z z' P Q B f y' A).
Proof. exact (MK_COMB (@lem370711 _16548 _16549 _16551 y a P Q B f A z) (@lem370630 _16548 _16549 _16551 z' P Q B f y' A)). Qed.
Lemma lem370713 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term416 _16548 _16549 _16551 y a z z' P Q B f y' A) : term416 _16548 _16549 _16551 y a z z' P Q B f y' A.
Proof. exact (EQ_MP (@lem370712 _16548 _16549 _16551 y a z z' P Q B f y' A) (@lem370546 _16548 _16549 _16551 y a z z' P Q B f y' A h1)). Qed.
Lemma lem370714 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term267 _16548 _16549 _16551 y a P Q B f A z.
Proof. exact (h1). Qed.
Lemma lem370715 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term338 _16548 _16549 _16551 z' P Q B f y' A.
Proof. exact (h1). Qed.
Lemma lem370716 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term220 _16548 _16549 _16551 P Q B f A z.
Proof. exact (proj2 (@lem370714 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem370717 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term178 _16548 _16549 _16551 P Q f y A B a.
Proof. exact (proj1 (@lem370714 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem370718 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term103 _16548 _16551 A B a.
Proof. exact (proj2 (@lem370717 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem370719 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term63 _16548 _16549 P Q f y a.
Proof. exact (proj1 (@lem370717 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem370720 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term76 _16548 _16549 Q f y a.
Proof. exact (proj2 (@lem370719 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem370724 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term144 _16548 _16549 _16551 P Q B f y' A.
Proof. exact (proj2 (@lem370715 _16548 _16549 _16551 z' P Q B f y' A h1)). Qed.
Lemma lem370725 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term307 _16548 _16549 _16551 P Q f A B z'.
Proof. exact (proj1 (@lem370715 _16548 _16549 _16551 z' P Q B f y' A h1)). Qed.
Lemma lem370726 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term137 _16548 _16549 _16551 B f y' A.
Proof. exact (proj2 (@lem370724 _16548 _16549 _16551 z' P Q B f y' A h1)). Qed.
Lemma lem370727 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term143 _16549 P Q y'.
Proof. exact (proj1 (@lem370724 _16548 _16549 _16551 z' P Q B f y' A h1)). Qed.
Lemma lem370753 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (A : _16551 -> Prop) (z : _16549 -> _16551) (y : _16549) : (term216 _16548 _16549 _16551 P Q B f A z y) = (term429 _16548 _16549 _16551 B f P Q A z y).
Proof. exact (@lem19490 (term430 _16548 _16549 _16551 B f z y) (term120 _16549 P Q y) (term431 _16549 _16551 A z y)). Qed.
Lemma lem370754 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (A : _16551 -> Prop) (z : _16549 -> _16551) : (term218 _16548 _16549 _16551 P Q B f A z) = (term432 _16548 _16549 _16551 B f P Q A z).
Proof. exact (fun_ext (fun y : _16549 => @lem370753 _16548 _16549 _16551 B f P Q A z y)). Qed.
Lemma lem370755 {_16549 : Type'} : (@all _16549) = (@all _16549).
Proof. exact (eq_refl (@all _16549)). Qed.
Lemma lem370757 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (A : _16551 -> Prop) (z : _16549 -> _16551) : (term220 _16548 _16549 _16551 P Q B f A z) = (term433 _16548 _16549 _16551 B f P Q A z).
Proof. exact (MK_COMB (@lem370755 _16549) (@lem370754 _16548 _16549 _16551 B f P Q A z)). Qed.
Lemma lem370758 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term433 _16548 _16549 _16551 B f P Q A z.
Proof. exact (EQ_MP (@lem370757 _16548 _16549 _16551 B f P Q A z) (@lem370716 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem370766 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) (z : _16551) : (term92 _16548 _16551 A B a z) = (term92 _16548 _16551 A B a z).
Proof. exact (eq_refl (term92 _16548 _16551 A B a z)). Qed.
Lemma lem370767 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term102 _16548 _16551 A B a) = (term102 _16548 _16551 A B a).
Proof. exact (fun_ext (fun z : _16551 => @lem370766 _16548 _16551 A B a z)). Qed.
Lemma lem370768 {_16551 : Type'} : (@all _16551) = (@all _16551).
Proof. exact (eq_refl (@all _16551)). Qed.
Lemma lem370770 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) : (term103 _16548 _16551 A B a) = (term103 _16548 _16551 A B a).
Proof. exact (MK_COMB (@lem370768 _16551) (@lem370767 _16548 _16551 A B a)). Qed.
Lemma lem370771 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term103 _16548 _16551 A B a.
Proof. exact (EQ_MP (@lem370770 _16548 _16551 A B a) (@lem370718 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem370785 {A : Type'} (P : A -> Prop) (Q : Prop) : (term434 A P Q) = (term435 A P Q).
Proof. exact (EQ_MP (@lem19013 A P Q) (@lem19012 A P Q)). Qed.
Lemma lem370786 {_16549 : Type'} (P : _16549 -> Prop) (Q : Prop) : (term434 _16549 P Q) = (term435 _16549 P Q).
Proof. exact (@lem370785 _16549 P Q). Qed.
Lemma lem370787 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (a : _16548) : (term436 _16548 _16549 _16551 P Q f A B z' a) = (term437 _16548 _16549 _16551 P Q f A B z' a).
Proof. exact (@lem370786 _16549 (term84 _16548 _16549 P Q f a) (term428 _16548 _16551 A B z' a)). Qed.
Lemma lem370788 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (a : _16548) : (term438 _16548 _16549 P Q f a y) = (term74 _16548 _16549 P Q f y a).
Proof. exact (eq_refl (term438 _16548 _16549 P Q f a y)). Qed.
Lemma lem370789 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (a : _16548) : (term439 _16548 _16549 P Q f a) = (term84 _16548 _16549 P Q f a).
Proof. exact (fun_ext (fun y : _16549 => @lem370788 _16548 _16549 P Q f y a)). Qed.
Lemma lem370790 {_16549 : Type'} : (@all _16549) = (@all _16549).
Proof. exact (eq_refl (@all _16549)). Qed.
Lemma lem370791 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (a : _16548) : (term440 _16548 _16549 P Q f a) = (term85 _16548 _16549 P Q f a).
Proof. exact (MK_COMB (@lem370790 _16549) (@lem370789 _16548 _16549 P Q f a)). Qed.
Lemma lem370792 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem370793 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (a : _16548) : (term441 _16548 _16549 P Q f a) = (term105 _16548 _16549 P Q f a).
Proof. exact (MK_COMB (@lem370792) (@lem370791 _16548 _16549 P Q f a)). Qed.
Lemma lem370794 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (a : _16548) : (term428 _16548 _16551 A B z' a) = (term428 _16548 _16551 A B z' a).
Proof. exact (eq_refl (term428 _16548 _16551 A B z' a)). Qed.
Lemma lem370795 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (a : _16548) : (term436 _16548 _16549 _16551 P Q f A B z' a) = (term303 _16548 _16549 _16551 P Q f A B z' a).
Proof. exact (MK_COMB (@lem370793 _16548 _16549 P Q f a) (@lem370794 _16548 _16551 A B z' a)). Qed.
Lemma lem370796 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem370797 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (a : _16548) : (term442 _16548 _16549 _16551 P Q f A B z' a) = (term443 _16548 _16549 _16551 P Q f A B z' a).
Proof. exact (MK_COMB (@lem370796) (@lem370795 _16548 _16549 _16551 P Q f A B z' a)). Qed.
Lemma lem370798 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (a : _16548) : (term438 _16548 _16549 P Q f a y) = (term74 _16548 _16549 P Q f y a).
Proof. exact (eq_refl (term438 _16548 _16549 P Q f a y)). Qed.
Lemma lem370799 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem370800 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (a : _16548) : (term444 _16548 _16549 P Q f a y) = (term445 _16548 _16549 P Q f y a).
Proof. exact (MK_COMB (@lem370799) (@lem370798 _16548 _16549 P Q f y a)). Qed.
Lemma lem370801 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (a : _16548) : (term428 _16548 _16551 A B z' a) = (term428 _16548 _16551 A B z' a).
Proof. exact (eq_refl (term428 _16548 _16551 A B z' a)). Qed.
Lemma lem370802 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (a : _16548) : (term446 _16548 _16549 _16551 P Q f y A B z' a) = (term447 _16548 _16549 _16551 P Q f y A B z' a).
Proof. exact (MK_COMB (@lem370800 _16548 _16549 P Q f y a) (@lem370801 _16548 _16551 A B z' a)). Qed.
Lemma lem370803 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (a : _16548) : (term448 _16548 _16549 _16551 P Q f A B z' a) = (term449 _16548 _16549 _16551 P Q f A B z' a).
Proof. exact (fun_ext (fun y : _16549 => @lem370802 _16548 _16549 _16551 P Q f y A B z' a)). Qed.
Lemma lem370804 {_16549 : Type'} : (@all _16549) = (@all _16549).
Proof. exact (eq_refl (@all _16549)). Qed.
Lemma lem370805 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (a : _16548) : (term437 _16548 _16549 _16551 P Q f A B z' a) = (term450 _16548 _16549 _16551 P Q f A B z' a).
Proof. exact (MK_COMB (@lem370804 _16549) (@lem370803 _16548 _16549 _16551 P Q f A B z' a)). Qed.
Lemma lem370806 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (a : _16548) : ((term436 _16548 _16549 _16551 P Q f A B z' a) = (term437 _16548 _16549 _16551 P Q f A B z' a)) = ((term303 _16548 _16549 _16551 P Q f A B z' a) = (term450 _16548 _16549 _16551 P Q f A B z' a)).
Proof. exact (MK_COMB (@lem370797 _16548 _16549 _16551 P Q f A B z' a) (@lem370805 _16548 _16549 _16551 P Q f A B z' a)). Qed.
Lemma lem370807 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (a : _16548) : (term303 _16548 _16549 _16551 P Q f A B z' a) = (term450 _16548 _16549 _16551 P Q f A B z' a).
Proof. exact (EQ_MP (@lem370806 _16548 _16549 _16551 P Q f A B z' a) (@lem370787 _16548 _16549 _16551 P Q f A B z' a)). Qed.
Lemma lem370808 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) : (term305 _16548 _16549 _16551 P Q f A B z') = (term451 _16548 _16549 _16551 P Q f A B z').
Proof. exact (fun_ext (fun a : _16548 => @lem370807 _16548 _16549 _16551 P Q f A B z' a)). Qed.
Lemma lem370809 {_16548 : Type'} : (@all _16548) = (@all _16548).
Proof. exact (eq_refl (@all _16548)). Qed.
Lemma lem370810 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) : (term307 _16548 _16549 _16551 P Q f A B z') = (term452 _16548 _16549 _16551 P Q f A B z').
Proof. exact (MK_COMB (@lem370809 _16548) (@lem370808 _16548 _16549 _16551 P Q f A B z')). Qed.
Lemma lem370839 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (y : _16549) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (a : _16548) : (term447 _16548 _16549 _16551 P Q f y A B z' a) = (term453 _16548 _16549 _16551 A P Q f y B z' a).
Proof. exact (@lem19490 (term431 _16548 _16551 A z' a) (term74 _16548 _16549 P Q f y a) (term454 _16548 _16551 B z' a)). Qed.
Lemma lem370840 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (a : _16548) : (term449 _16548 _16549 _16551 P Q f A B z' a) = (term455 _16548 _16549 _16551 A P Q f B z' a).
Proof. exact (fun_ext (fun y : _16549 => @lem370839 _16548 _16549 _16551 A P Q f y B z' a)). Qed.
Lemma lem370841 {_16549 : Type'} : (@all _16549) = (@all _16549).
Proof. exact (eq_refl (@all _16549)). Qed.
Lemma lem370842 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (a : _16548) : (term450 _16548 _16549 _16551 P Q f A B z' a) = (term456 _16548 _16549 _16551 A P Q f B z' a).
Proof. exact (MK_COMB (@lem370841 _16549) (@lem370840 _16548 _16549 _16551 A P Q f B z' a)). Qed.
Lemma lem370843 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) : (term451 _16548 _16549 _16551 P Q f A B z') = (term457 _16548 _16549 _16551 A P Q f B z').
Proof. exact (fun_ext (fun a : _16548 => @lem370842 _16548 _16549 _16551 A P Q f B z' a)). Qed.
Lemma lem370844 {_16548 : Type'} : (@all _16548) = (@all _16548).
Proof. exact (eq_refl (@all _16548)). Qed.
Lemma lem370845 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) : (term452 _16548 _16549 _16551 P Q f A B z') = (term458 _16548 _16549 _16551 A P Q f B z').
Proof. exact (MK_COMB (@lem370844 _16548) (@lem370843 _16548 _16549 _16551 A P Q f B z')). Qed.
Lemma lem370846 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) : (term307 _16548 _16549 _16551 P Q f A B z') = (term458 _16548 _16549 _16551 A P Q f B z').
Proof. exact (TRANS (@lem370810 _16548 _16549 _16551 P Q f A B z') (@lem370845 _16548 _16549 _16551 A P Q f B z')). Qed.
Lemma lem370847 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term458 _16548 _16549 _16551 A P Q f B z'.
Proof. exact (EQ_MP (@lem370846 _16548 _16549 _16551 A P Q f B z') (@lem370725 _16548 _16549 _16551 z' P Q B f y' A h1)). Qed.
Lemma lem370855 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (z : _16551) : (term128 _16548 _16549 _16551 B f y' A z) = (term128 _16548 _16549 _16551 B f y' A z).
Proof. exact (eq_refl (term128 _16548 _16549 _16551 B f y' A z)). Qed.
Lemma lem370856 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) : (term136 _16548 _16549 _16551 B f y' A) = (term136 _16548 _16549 _16551 B f y' A).
Proof. exact (fun_ext (fun z : _16551 => @lem370855 _16548 _16549 _16551 B f y' A z)). Qed.
Lemma lem370857 {_16551 : Type'} : (@all _16551) = (@all _16551).
Proof. exact (eq_refl (@all _16551)). Qed.
Lemma lem370859 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) : (term137 _16548 _16549 _16551 B f y' A) = (term137 _16548 _16549 _16551 B f y' A).
Proof. exact (MK_COMB (@lem370857 _16551) (@lem370856 _16548 _16549 _16551 B f y' A)). Qed.
Lemma lem370860 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term137 _16548 _16549 _16551 B f y' A.
Proof. exact (EQ_MP (@lem370859 _16548 _16549 _16551 B f y' A) (@lem370726 _16548 _16549 _16551 z' P Q B f y' A h1)). Qed.
Lemma lem370869 {_16548 _16549 _16551 : Type'} (_7992 : _16549) (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term459 _16548 _16549 _16551 B f P Q A z _7992.
Proof. exact (@lem370758 _16548 _16549 _16551 y a P Q B f A z h1 _7992). Qed.
Lemma lem370870 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (A : _16551 -> Prop) (z : _16549 -> _16551) (_7992 : _16549) : (term459 _16548 _16549 _16551 B f P Q A z _7992) = (term429 _16548 _16549 _16551 B f P Q A z _7992).
Proof. exact (eq_refl (term459 _16548 _16549 _16551 B f P Q A z _7992)). Qed.
Lemma lem370871 {_16548 _16549 _16551 : Type'} (_7992 : _16549) (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term429 _16548 _16549 _16551 B f P Q A z _7992.
Proof. exact (EQ_MP (@lem370870 _16548 _16549 _16551 B f P Q A z _7992) (@lem370869 _16548 _16549 _16551 _7992 y a P Q B f A z h1)). Qed.
Lemma lem370872 {_16548 _16549 _16551 : Type'} (_7993 : _16551) (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term460 _16548 _16551 A B a _7993.
Proof. exact (@lem370771 _16548 _16549 _16551 y a P Q B f A z h1 _7993). Qed.
Lemma lem370873 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) (_7993 : _16551) : (term460 _16548 _16551 A B a _7993) = (term92 _16548 _16551 A B a _7993).
Proof. exact (eq_refl (term460 _16548 _16551 A B a _7993)). Qed.
Lemma lem370875 {_16548 _16549 _16551 : Type'} (_7994 : _16548) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term461 _16548 _16549 _16551 A P Q f B z' _7994.
Proof. exact (@lem370847 _16548 _16549 _16551 z' P Q B f y' A h1 _7994). Qed.
Lemma lem370876 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (_7994 : _16548) : (term461 _16548 _16549 _16551 A P Q f B z' _7994) = (term456 _16548 _16549 _16551 A P Q f B z' _7994).
Proof. exact (eq_refl (term461 _16548 _16549 _16551 A P Q f B z' _7994)). Qed.
Lemma lem370877 {_16548 _16549 _16551 : Type'} (_7994 : _16548) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term456 _16548 _16549 _16551 A P Q f B z' _7994.
Proof. exact (EQ_MP (@lem370876 _16548 _16549 _16551 A P Q f B z' _7994) (@lem370875 _16548 _16549 _16551 _7994 z' P Q B f y' A h1)). Qed.
Lemma lem370878 {_16548 _16549 _16551 : Type'} (_7994 : _16548) (_7995 : _16549) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term462 _16548 _16549 _16551 A P Q f B z' _7994 _7995.
Proof. exact (@lem370877 _16548 _16549 _16551 _7994 z' P Q B f y' A h1 _7995). Qed.
Lemma lem370879 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (_7994 : _16548) : (term462 _16548 _16549 _16551 A P Q f B z' _7994 _7995) = (term453 _16548 _16549 _16551 A P Q f _7995 B z' _7994).
Proof. exact (eq_refl (term462 _16548 _16549 _16551 A P Q f B z' _7994 _7995)). Qed.
Lemma lem370880 {_16548 _16549 _16551 : Type'} (_7995 : _16549) (_7994 : _16548) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term453 _16548 _16549 _16551 A P Q f _7995 B z' _7994.
Proof. exact (EQ_MP (@lem370879 _16548 _16549 _16551 A P Q f _7995 B z' _7994) (@lem370878 _16548 _16549 _16551 _7994 _7995 z' P Q B f y' A h1)). Qed.
Lemma lem370881 {_16548 _16549 _16551 : Type'} (_7996 : _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term463 _16548 _16549 _16551 B f y' A _7996.
Proof. exact (@lem370860 _16548 _16549 _16551 z' P Q B f y' A h1 _7996). Qed.
Lemma lem370882 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (_7996 : _16551) : (term463 _16548 _16549 _16551 B f y' A _7996) = (term128 _16548 _16549 _16551 B f y' A _7996).
Proof. exact (eq_refl (term463 _16548 _16549 _16551 B f y' A _7996)). Qed.
Lemma lem370884 {_16548 _16549 _16551 : Type'} (_7992 : _16549) (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term464 _16549 _16551 P Q A z _7992.
Proof. exact (proj2 (@lem370871 _16548 _16549 _16551 _7992 y a P Q B f A z h1)). Qed.
Lemma lem370885 {_16548 _16549 _16551 : Type'} (_7992 : _16549) (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term465 _16548 _16549 _16551 P Q B f z _7992.
Proof. exact (proj1 (@lem370871 _16548 _16549 _16551 _7992 y a P Q B f A z h1)). Qed.
Lemma lem370886 {_16548 _16549 _16551 : Type'} (_7995 : _16549) (_7994 : _16548) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term466 _16548 _16549 _16551 P Q f _7995 B z' _7994.
Proof. exact (proj2 (@lem370880 _16548 _16549 _16551 _7995 _7994 z' P Q B f y' A h1)). Qed.
Lemma lem370887 {_16548 _16549 _16551 : Type'} (_7995 : _16549) (_7994 : _16548) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term467 _16548 _16549 _16551 P Q f _7995 A z' _7994.
Proof. exact (proj1 (@lem370880 _16548 _16549 _16551 _7995 _7994 z' P Q B f y' A h1)). Qed.
Lemma lem370893 {_16548 _16549 _16551 : Type'} (_7993 : _16551) (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term92 _16548 _16551 A B a _7993.
Proof. exact (EQ_MP (@lem370873 _16548 _16551 A B a _7993) (@lem370872 _16548 _16549 _16551 _7993 y a P Q B f A z h1)). Qed.
Lemma lem370899 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : (f y) = a.
Proof. exact (proj2 (@lem370720 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem370910 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (z : _16549 -> _16551) (_7992 : _16549) : (term465 _16548 _16549 _16551 P Q B f z _7992) = (term468 _16548 _16549 _16551 P Q B f z _7992).
Proof. exact (@lem369166 (term127 _16549 P _7992) (term127 _16549 Q _7992) (term430 _16548 _16549 _16551 B f z _7992)). Qed.
Lemma lem370922 {_16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (A : _16551 -> Prop) (z : _16549 -> _16551) (_7992 : _16549) : (term464 _16549 _16551 P Q A z _7992) = (term469 _16549 _16551 P Q A z _7992).
Proof. exact (@lem369166 (term127 _16549 P _7992) (term127 _16549 Q _7992) (term431 _16549 _16551 A z _7992)). Qed.
Lemma lem370929 {_16548 _16549 _16551 : Type'} (_7996 : _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term128 _16548 _16549 _16551 B f y' A _7996.
Proof. exact (EQ_MP (@lem370882 _16548 _16549 _16551 B f y' A _7996) (@lem370881 _16548 _16549 _16551 _7996 z' P Q B f y' A h1)). Qed.
Lemma lem370937 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (A : _16551 -> Prop) (z' : _16548 -> _16551) (_7994 : _16548) : (term467 _16548 _16549 _16551 P Q f _7995 A z' _7994) = (term470 _16548 _16549 _16551 P Q f _7995 A z' _7994).
Proof. exact (@lem369166 (term127 _16549 P _7995) (term71 _16548 _16549 Q f _7995 _7994) (term431 _16548 _16551 A z' _7994)). Qed.
Lemma lem370944 {_16548 _16549 _16551 : Type'} (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (A : _16551 -> Prop) (z' : _16548 -> _16551) (_7994 : _16548) : (term471 _16548 _16549 _16551 Q f _7995 A z' _7994) = (term472 _16548 _16549 _16551 Q f _7995 A z' _7994).
Proof. exact (@lem369166 (term127 _16549 Q _7995) (term473 _16548 _16549 f _7995 _7994) (term431 _16548 _16551 A z' _7994)). Qed.
Lemma lem370945 {_16549 : Type'} (P : _16549 -> Prop) (_7995 : _16549) : (term72 _16549 P _7995) = (term72 _16549 P _7995).
Proof. exact (eq_refl (term72 _16549 P _7995)). Qed.
Lemma lem370948 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (A : _16551 -> Prop) (z' : _16548 -> _16551) (_7994 : _16548) : (term470 _16548 _16549 _16551 P Q f _7995 A z' _7994) = (term474 _16548 _16549 _16551 P Q f _7995 A z' _7994).
Proof. exact (MK_COMB (@lem370945 _16549 P _7995) (@lem370944 _16548 _16549 _16551 Q f _7995 A z' _7994)). Qed.
Lemma lem370950 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (A : _16551 -> Prop) (z' : _16548 -> _16551) (_7994 : _16548) : (term467 _16548 _16549 _16551 P Q f _7995 A z' _7994) = (term474 _16548 _16549 _16551 P Q f _7995 A z' _7994).
Proof. exact (TRANS (@lem370937 _16548 _16549 _16551 P Q f _7995 A z' _7994) (@lem370948 _16548 _16549 _16551 P Q f _7995 A z' _7994)). Qed.
Lemma lem370951 {_16548 _16549 _16551 : Type'} (_7995 : _16549) (_7994 : _16548) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term474 _16548 _16549 _16551 P Q f _7995 A z' _7994.
Proof. exact (EQ_MP (@lem370950 _16548 _16549 _16551 P Q f _7995 A z' _7994) (@lem370887 _16548 _16549 _16551 _7995 _7994 z' P Q B f y' A h1)). Qed.
Lemma lem370955 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (_7994 : _16548) : (term466 _16548 _16549 _16551 P Q f _7995 B z' _7994) = (term475 _16548 _16549 _16551 P Q f _7995 B z' _7994).
Proof. exact (@lem369166 (term127 _16549 P _7995) (term71 _16548 _16549 Q f _7995 _7994) (term454 _16548 _16551 B z' _7994)). Qed.
Lemma lem370962 {_16548 _16549 _16551 : Type'} (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (_7994 : _16548) : (term476 _16548 _16549 _16551 Q f _7995 B z' _7994) = (term477 _16548 _16549 _16551 Q f _7995 B z' _7994).
Proof. exact (@lem369166 (term127 _16549 Q _7995) (term473 _16548 _16549 f _7995 _7994) (term454 _16548 _16551 B z' _7994)). Qed.
Lemma lem370963 {_16549 : Type'} (P : _16549 -> Prop) (_7995 : _16549) : (term72 _16549 P _7995) = (term72 _16549 P _7995).
Proof. exact (eq_refl (term72 _16549 P _7995)). Qed.
Lemma lem370966 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (_7994 : _16548) : (term475 _16548 _16549 _16551 P Q f _7995 B z' _7994) = (term478 _16548 _16549 _16551 P Q f _7995 B z' _7994).
Proof. exact (MK_COMB (@lem370963 _16549 P _7995) (@lem370962 _16548 _16549 _16551 Q f _7995 B z' _7994)). Qed.
Lemma lem370968 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (_7994 : _16548) : (term466 _16548 _16549 _16551 P Q f _7995 B z' _7994) = (term478 _16548 _16549 _16551 P Q f _7995 B z' _7994).
Proof. exact (TRANS (@lem370955 _16548 _16549 _16551 P Q f _7995 B z' _7994) (@lem370966 _16548 _16549 _16551 P Q f _7995 B z' _7994)). Qed.
Lemma lem370969 {_16548 _16549 _16551 : Type'} (_7995 : _16549) (_7994 : _16548) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term478 _16548 _16549 _16551 P Q f _7995 B z' _7994.
Proof. exact (EQ_MP (@lem370968 _16548 _16549 _16551 P Q f _7995 B z' _7994) (@lem370886 _16548 _16549 _16551 _7995 _7994 z' P Q B f y' A h1)). Qed.
Lemma lem370970 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : a = (f y).
Proof. exact (SYM (@lem370899 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem370985 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (_7993 : _16551) : (term479 _16548 _16551 A B _7993) = (term479 _16548 _16551 A B _7993).
Proof. exact (eq_refl (term479 _16548 _16551 A B _7993)). Qed.
Lemma lem370986 {_16548 _16549 _16551 : Type'} (_7993 : _16551) (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : (term480 _16548 _16551 A B _7993 a) = (term481 _16548 _16549 _16551 A B _7993 f y).
Proof. exact (MK_COMB (@lem370985 _16548 _16551 A B _7993) (@lem370970 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem370987 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (_7993 : _16551) : (term481 _16548 _16549 _16551 A B _7993 f y) = (term482 _16548 _16549 _16551 A B f y _7993).
Proof. exact (eq_refl (term481 _16548 _16549 _16551 A B _7993 f y)). Qed.
Lemma lem370988 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (_7993 : _16551) (a : _16548) : (term483 _16548 _16551 A B _7993 a) = (term483 _16548 _16551 A B _7993 a).
Proof. exact (eq_refl (term483 _16548 _16551 A B _7993 a)). Qed.
Lemma lem370989 {_16548 _16549 _16551 : Type'} (a : _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (_7993 : _16551) : ((term480 _16548 _16551 A B _7993 a) = (term481 _16548 _16549 _16551 A B _7993 f y)) = ((term480 _16548 _16551 A B _7993 a) = (term482 _16548 _16549 _16551 A B f y _7993)).
Proof. exact (MK_COMB (@lem370988 _16548 _16551 A B _7993 a) (@lem370987 _16548 _16549 _16551 A B f y _7993)). Qed.
Lemma lem370990 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) (_7993 : _16551) : (term480 _16548 _16551 A B _7993 a) = (term92 _16548 _16551 A B a _7993).
Proof. exact (eq_refl (term480 _16548 _16551 A B _7993 a)). Qed.
Lemma lem370991 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem370992 {_16548 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (a : _16548) (_7993 : _16551) : (term483 _16548 _16551 A B _7993 a) = (term484 _16548 _16551 A B a _7993).
Proof. exact (MK_COMB (@lem370991) (@lem370990 _16548 _16551 A B a _7993)). Qed.
Lemma lem370993 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (_7993 : _16551) : (term482 _16548 _16549 _16551 A B f y _7993) = (term482 _16548 _16549 _16551 A B f y _7993).
Proof. exact (eq_refl (term482 _16548 _16549 _16551 A B f y _7993)). Qed.
Lemma lem370994 {_16548 _16549 _16551 : Type'} (a : _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (_7993 : _16551) : ((term480 _16548 _16551 A B _7993 a) = (term482 _16548 _16549 _16551 A B f y _7993)) = ((term92 _16548 _16551 A B a _7993) = (term482 _16548 _16549 _16551 A B f y _7993)).
Proof. exact (MK_COMB (@lem370992 _16548 _16551 A B a _7993) (@lem370993 _16548 _16549 _16551 A B f y _7993)). Qed.
Lemma lem370995 {_16548 _16549 _16551 : Type'} (a : _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (_7993 : _16551) : ((term480 _16548 _16551 A B _7993 a) = (term481 _16548 _16549 _16551 A B _7993 f y)) = ((term92 _16548 _16551 A B a _7993) = (term482 _16548 _16549 _16551 A B f y _7993)).
Proof. exact (TRANS (@lem370989 _16548 _16549 _16551 a A B f y _7993) (@lem370994 _16548 _16549 _16551 a A B f y _7993)). Qed.
Lemma lem370996 {_16548 _16549 _16551 : Type'} (_7993 : _16551) (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : (term92 _16548 _16551 A B a _7993) = (term482 _16548 _16549 _16551 A B f y _7993).
Proof. exact (EQ_MP (@lem370995 _16548 _16549 _16551 a A B f y _7993) (@lem370986 _16548 _16549 _16551 _7993 y a P Q B f A z h1)). Qed.
Lemma lem370997 {_16548 _16549 _16551 : Type'} (_7993 : _16551) (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term482 _16548 _16549 _16551 A B f y _7993.
Proof. exact (EQ_MP (@lem370996 _16548 _16549 _16551 _7993 y a P Q B f A z h1) (@lem370893 _16548 _16549 _16551 _7993 y a P Q B f A z h1)). Qed.
Lemma lem371039 {_16548 _16549 _16551 : Type'} (_7992 : _16549) (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term468 _16548 _16549 _16551 P Q B f z _7992.
Proof. exact (EQ_MP (@lem370910 _16548 _16549 _16551 P Q B f z _7992) (@lem370885 _16548 _16549 _16551 _7992 y a P Q B f A z h1)). Qed.
Lemma lem371053 {_16548 _16549 _16551 : Type'} (_7992 : _16549) (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term469 _16549 _16551 P Q A z _7992.
Proof. exact (EQ_MP (@lem370922 _16549 _16551 P Q A z _7992) (@lem370884 _16548 _16549 _16551 _7992 y a P Q B f A z h1)). Qed.
Lemma lem371055 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : P y.
Proof. exact (proj1 (@lem370719 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem371056 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term485 _16549 P y.
Proof. exact (fun h0 : term127 _16549 P y => @lem371055 _16548 _16549 _16551 y a P Q B f A z h1). Qed.
Lemma lem371058 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem371059 {_16549 : Type'} (P : _16549 -> Prop) (y : _16549) : (term485 _16549 P y) = (P y).
Proof. exact (@lem371058 (P y)). Qed.
Lemma lem371060 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : P y.
Proof. exact (EQ_MP (@lem371059 _16549 P y) (@lem371056 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem371062 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : Q y.
Proof. exact (proj1 (@lem370720 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem371063 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term485 _16549 Q y.
Proof. exact (fun h0 : term127 _16549 Q y => @lem371062 _16548 _16549 _16551 y a P Q B f A z h1). Qed.
Lemma lem371065 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem371066 {_16549 : Type'} (Q : _16549 -> Prop) (y : _16549) : (term485 _16549 Q y) = (Q y).
Proof. exact (@lem371065 (Q y)). Qed.
Lemma lem371067 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : Q y.
Proof. exact (EQ_MP (@lem371066 _16549 Q y) (@lem371063 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem371083 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem371084 {_16549 _16551 : Type'} (A : _16551 -> Prop) (z : _16549 -> _16551) (Q : _16549 -> Prop) (_7992 : _16549) : (term487 _16549 _16551 Q A z _7992) = (term488 _16549 _16551 A z Q _7992).
Proof. exact (@lem371083 (term431 _16549 _16551 A z _7992) (term127 _16549 Q _7992)). Qed.
Lemma lem371090 {_16549 : Type'} (P : _16549 -> Prop) (_7992 : _16549) : (term72 _16549 P _7992) = (term72 _16549 P _7992).
Proof. exact (eq_refl (term72 _16549 P _7992)). Qed.
Lemma lem371091 {_16549 _16551 : Type'} (P : _16549 -> Prop) (A : _16551 -> Prop) (z : _16549 -> _16551) (Q : _16549 -> Prop) (_7992 : _16549) : (term469 _16549 _16551 P Q A z _7992) = (term489 _16549 _16551 P A z Q _7992).
Proof. exact (MK_COMB (@lem371090 _16549 P _7992) (@lem371084 _16549 _16551 A z Q _7992)). Qed.
Lemma lem371095 (q : Prop) (p : Prop) (r : Prop) : (term22 p q r) = (term22 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem371096 {_16549 _16551 : Type'} (A : _16551 -> Prop) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : (term489 _16549 _16551 P A z Q _7992) = (term490 _16549 _16551 A z P Q _7992).
Proof. exact (@lem371095 (term431 _16549 _16551 A z _7992) (term127 _16549 P _7992) (term127 _16549 Q _7992)). Qed.
Lemma lem371112 {_16549 _16551 : Type'} (A : _16551 -> Prop) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : (term469 _16549 _16551 P Q A z _7992) = (term490 _16549 _16551 A z P Q _7992).
Proof. exact (TRANS (@lem371091 _16549 _16551 P A z Q _7992) (@lem371096 _16549 _16551 A z P Q _7992)). Qed.
Lemma lem371113 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem371114 {_16549 _16551 : Type'} (A : _16551 -> Prop) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : (term491 _16549 _16551 P Q A z _7992) = (term492 _16549 _16551 A z P Q _7992).
Proof. exact (MK_COMB (@lem371113) (@lem371112 _16549 _16551 A z P Q _7992)). Qed.
Lemma lem371130 {_16549 _16551 : Type'} (A : _16551 -> Prop) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : (term490 _16549 _16551 A z P Q _7992) = (term490 _16549 _16551 A z P Q _7992).
Proof. exact (eq_refl (term490 _16549 _16551 A z P Q _7992)). Qed.
Lemma lem371131 {_16549 _16551 : Type'} (A : _16551 -> Prop) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : ((term469 _16549 _16551 P Q A z _7992) = (term490 _16549 _16551 A z P Q _7992)) = ((term490 _16549 _16551 A z P Q _7992) = (term490 _16549 _16551 A z P Q _7992)).
Proof. exact (MK_COMB (@lem371114 _16549 _16551 A z P Q _7992) (@lem371130 _16549 _16551 A z P Q _7992)). Qed.
Lemma lem371133 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem371134 (x : Prop) : (x = x) = True.
Proof. exact (@lem371133 Prop x). Qed.
Lemma lem371135 {_16549 _16551 : Type'} (A : _16551 -> Prop) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : ((term490 _16549 _16551 A z P Q _7992) = (term490 _16549 _16551 A z P Q _7992)) = True.
Proof. exact (@lem371134 (term490 _16549 _16551 A z P Q _7992)). Qed.
Lemma lem371136 {_16549 _16551 : Type'} (A : _16551 -> Prop) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : ((term469 _16549 _16551 P Q A z _7992) = (term490 _16549 _16551 A z P Q _7992)) = True.
Proof. exact (TRANS (@lem371131 _16549 _16551 A z P Q _7992) (@lem371135 _16549 _16551 A z P Q _7992)). Qed.
Lemma lem371137 {_16549 _16551 : Type'} (A : _16551 -> Prop) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : True = ((term469 _16549 _16551 P Q A z _7992) = (term490 _16549 _16551 A z P Q _7992)).
Proof. exact (SYM (@lem371136 _16549 _16551 A z P Q _7992)). Qed.
Lemma lem371138 {_16549 _16551 : Type'} (A : _16551 -> Prop) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : (term469 _16549 _16551 P Q A z _7992) = (term490 _16549 _16551 A z P Q _7992).
Proof. exact (EQ_MP (@lem371137 _16549 _16551 A z P Q _7992) (@lem0)). Qed.
Lemma lem371139 {_16548 _16549 _16551 : Type'} (_7992 : _16549) (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term490 _16549 _16551 A z P Q _7992.
Proof. exact (EQ_MP (@lem371138 _16549 _16551 A z P Q _7992) (@lem371053 _16548 _16549 _16551 _7992 y a P Q B f A z h1)). Qed.
Lemma lem371141 (b : Prop) (a : Prop) : (a \/ b) = (term493 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem371142 {_16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (A : _16551 -> Prop) (z : _16549 -> _16551) (_7992 : _16549) : (term490 _16549 _16551 A z P Q _7992) = (term494 _16549 _16551 P Q A z _7992).
Proof. exact (@lem371141 (term120 _16549 P Q _7992) (term431 _16549 _16551 A z _7992)). Qed.
Lemma lem371144 (a : Prop) (b : Prop) : (term495 a b) = (term496 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem371145 {_16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : (term497 _16549 P Q _7992) = (term498 _16549 P Q _7992).
Proof. exact (@lem371144 (term127 _16549 P _7992) (term127 _16549 Q _7992)). Qed.
Lemma lem371147 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem371148 {_16549 : Type'} (P : _16549 -> Prop) (_7992 : _16549) : (term121 _16549 P _7992) = (P _7992).
Proof. exact (@lem371147 (P _7992)). Qed.
Lemma lem371149 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem371150 {_16549 : Type'} (P : _16549 -> Prop) (_7992 : _16549) : (term499 _16549 P _7992) = (term87 _16549 P _7992).
Proof. exact (MK_COMB (@lem371149) (@lem371148 _16549 P _7992)). Qed.
Lemma lem371152 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem371153 {_16549 : Type'} (Q : _16549 -> Prop) (_7992 : _16549) : (term121 _16549 Q _7992) = (Q _7992).
Proof. exact (@lem371152 (Q _7992)). Qed.
Lemma lem371154 {_16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : (term498 _16549 P Q _7992) = (term143 _16549 P Q _7992).
Proof. exact (MK_COMB (@lem371150 _16549 P _7992) (@lem371153 _16549 Q _7992)). Qed.
Lemma lem371155 {_16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : (term497 _16549 P Q _7992) = (term143 _16549 P Q _7992).
Proof. exact (TRANS (@lem371145 _16549 P Q _7992) (@lem371154 _16549 P Q _7992)). Qed.
Lemma lem371156 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem371157 {_16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : (term500 _16549 P Q _7992) = (term501 _16549 P Q _7992).
Proof. exact (MK_COMB (@lem371156) (@lem371155 _16549 P Q _7992)). Qed.
Lemma lem371158 {_16549 _16551 : Type'} (A : _16551 -> Prop) (z : _16549 -> _16551) (_7992 : _16549) : (term431 _16549 _16551 A z _7992) = (term431 _16549 _16551 A z _7992).
Proof. exact (eq_refl (term431 _16549 _16551 A z _7992)). Qed.
Lemma lem371159 {_16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (A : _16551 -> Prop) (z : _16549 -> _16551) (_7992 : _16549) : (term494 _16549 _16551 P Q A z _7992) = (term502 _16549 _16551 P Q A z _7992).
Proof. exact (MK_COMB (@lem371157 _16549 P Q _7992) (@lem371158 _16549 _16551 A z _7992)). Qed.
Lemma lem371160 {_16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (A : _16551 -> Prop) (z : _16549 -> _16551) (_7992 : _16549) : (term490 _16549 _16551 A z P Q _7992) = (term502 _16549 _16551 P Q A z _7992).
Proof. exact (TRANS (@lem371142 _16549 _16551 P Q A z _7992) (@lem371159 _16549 _16551 P Q A z _7992)). Qed.
Lemma lem371162 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term143 _16549 P Q y.
Proof. exact (conj (@lem371060 _16548 _16549 _16551 y a P Q B f A z h1) (@lem371067 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem371164 {_16548 _16549 _16551 : Type'} (_7992 : _16549) (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term502 _16549 _16551 P Q A z _7992.
Proof. exact (EQ_MP (@lem371160 _16549 _16551 P Q A z _7992) (@lem371139 _16548 _16549 _16551 _7992 y a P Q B f A z h1)). Qed.
Lemma lem371165 {_16548 _16549 _16551 : Type'} (_7992 : _16549) (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term502 _16549 _16551 P Q A z _7992.
Proof. exact (@lem371164 _16548 _16549 _16551 _7992 y a P Q B f A z h1). Qed.
Lemma lem371166 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term502 _16549 _16551 P Q A z y.
Proof. exact (@lem371165 _16548 _16549 _16551 y y a P Q B f A z h1). Qed.
Lemma lem371169 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term431 _16549 _16551 A z y.
Proof. exact (@lem371166 _16548 _16549 _16551 y a P Q B f A z h1 (@lem371162 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem371170 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term503 _16549 _16551 A z y.
Proof. exact (fun h0 : term504 _16549 _16551 A z y => @lem371169 _16548 _16549 _16551 y a P Q B f A z h1). Qed.
Lemma lem371172 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem371173 {_16549 _16551 : Type'} (A : _16551 -> Prop) (z : _16549 -> _16551) (y : _16549) : (term503 _16549 _16551 A z y) = (term431 _16549 _16551 A z y).
Proof. exact (@lem371172 (term431 _16549 _16551 A z y)). Qed.
Lemma lem371174 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term431 _16549 _16551 A z y.
Proof. exact (EQ_MP (@lem371173 _16549 _16551 A z y) (@lem371170 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem371176 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : P y.
Proof. exact (proj1 (@lem370719 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem371177 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term485 _16549 P y.
Proof. exact (fun h0 : term127 _16549 P y => @lem371176 _16548 _16549 _16551 y a P Q B f A z h1). Qed.
Lemma lem371179 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem371180 {_16549 : Type'} (P : _16549 -> Prop) (y : _16549) : (term485 _16549 P y) = (P y).
Proof. exact (@lem371179 (P y)). Qed.
Lemma lem371181 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : P y.
Proof. exact (EQ_MP (@lem371180 _16549 P y) (@lem371177 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem371183 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : Q y.
Proof. exact (proj1 (@lem370720 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem371184 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term485 _16549 Q y.
Proof. exact (fun h0 : term127 _16549 Q y => @lem371183 _16548 _16549 _16551 y a P Q B f A z h1). Qed.
Lemma lem371186 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem371187 {_16549 : Type'} (Q : _16549 -> Prop) (y : _16549) : (term485 _16549 Q y) = (Q y).
Proof. exact (@lem371186 (Q y)). Qed.
Lemma lem371188 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : Q y.
Proof. exact (EQ_MP (@lem371187 _16549 Q y) (@lem371184 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem371204 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem371205 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (z : _16549 -> _16551) (Q : _16549 -> Prop) (_7992 : _16549) : (term505 _16548 _16549 _16551 Q B f z _7992) = (term506 _16548 _16549 _16551 B f z Q _7992).
Proof. exact (@lem371204 (term430 _16548 _16549 _16551 B f z _7992) (term127 _16549 Q _7992)). Qed.
Lemma lem371211 {_16549 : Type'} (P : _16549 -> Prop) (_7992 : _16549) : (term72 _16549 P _7992) = (term72 _16549 P _7992).
Proof. exact (eq_refl (term72 _16549 P _7992)). Qed.
Lemma lem371212 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (z : _16549 -> _16551) (Q : _16549 -> Prop) (_7992 : _16549) : (term468 _16548 _16549 _16551 P Q B f z _7992) = (term507 _16548 _16549 _16551 P B f z Q _7992).
Proof. exact (MK_COMB (@lem371211 _16549 P _7992) (@lem371205 _16548 _16549 _16551 B f z Q _7992)). Qed.
Lemma lem371216 (q : Prop) (p : Prop) (r : Prop) : (term22 p q r) = (term22 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem371217 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : (term507 _16548 _16549 _16551 P B f z Q _7992) = (term508 _16548 _16549 _16551 B f z P Q _7992).
Proof. exact (@lem371216 (term430 _16548 _16549 _16551 B f z _7992) (term127 _16549 P _7992) (term127 _16549 Q _7992)). Qed.
Lemma lem371233 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : (term468 _16548 _16549 _16551 P Q B f z _7992) = (term508 _16548 _16549 _16551 B f z P Q _7992).
Proof. exact (TRANS (@lem371212 _16548 _16549 _16551 P B f z Q _7992) (@lem371217 _16548 _16549 _16551 B f z P Q _7992)). Qed.
Lemma lem371234 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem371235 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : (term509 _16548 _16549 _16551 P Q B f z _7992) = (term510 _16548 _16549 _16551 B f z P Q _7992).
Proof. exact (MK_COMB (@lem371234) (@lem371233 _16548 _16549 _16551 B f z P Q _7992)). Qed.
Lemma lem371251 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : (term508 _16548 _16549 _16551 B f z P Q _7992) = (term508 _16548 _16549 _16551 B f z P Q _7992).
Proof. exact (eq_refl (term508 _16548 _16549 _16551 B f z P Q _7992)). Qed.
Lemma lem371252 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : ((term468 _16548 _16549 _16551 P Q B f z _7992) = (term508 _16548 _16549 _16551 B f z P Q _7992)) = ((term508 _16548 _16549 _16551 B f z P Q _7992) = (term508 _16548 _16549 _16551 B f z P Q _7992)).
Proof. exact (MK_COMB (@lem371235 _16548 _16549 _16551 B f z P Q _7992) (@lem371251 _16548 _16549 _16551 B f z P Q _7992)). Qed.
Lemma lem371254 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem371255 (x : Prop) : (x = x) = True.
Proof. exact (@lem371254 Prop x). Qed.
Lemma lem371256 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : ((term508 _16548 _16549 _16551 B f z P Q _7992) = (term508 _16548 _16549 _16551 B f z P Q _7992)) = True.
Proof. exact (@lem371255 (term508 _16548 _16549 _16551 B f z P Q _7992)). Qed.
Lemma lem371257 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : ((term468 _16548 _16549 _16551 P Q B f z _7992) = (term508 _16548 _16549 _16551 B f z P Q _7992)) = True.
Proof. exact (TRANS (@lem371252 _16548 _16549 _16551 B f z P Q _7992) (@lem371256 _16548 _16549 _16551 B f z P Q _7992)). Qed.
Lemma lem371258 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : True = ((term468 _16548 _16549 _16551 P Q B f z _7992) = (term508 _16548 _16549 _16551 B f z P Q _7992)).
Proof. exact (SYM (@lem371257 _16548 _16549 _16551 B f z P Q _7992)). Qed.
Lemma lem371259 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : (term468 _16548 _16549 _16551 P Q B f z _7992) = (term508 _16548 _16549 _16551 B f z P Q _7992).
Proof. exact (EQ_MP (@lem371258 _16548 _16549 _16551 B f z P Q _7992) (@lem0)). Qed.
Lemma lem371260 {_16548 _16549 _16551 : Type'} (_7992 : _16549) (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term508 _16548 _16549 _16551 B f z P Q _7992.
Proof. exact (EQ_MP (@lem371259 _16548 _16549 _16551 B f z P Q _7992) (@lem371039 _16548 _16549 _16551 _7992 y a P Q B f A z h1)). Qed.
Lemma lem371262 (b : Prop) (a : Prop) : (a \/ b) = (term493 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem371263 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (z : _16549 -> _16551) (_7992 : _16549) : (term508 _16548 _16549 _16551 B f z P Q _7992) = (term511 _16548 _16549 _16551 P Q B f z _7992).
Proof. exact (@lem371262 (term120 _16549 P Q _7992) (term430 _16548 _16549 _16551 B f z _7992)). Qed.
Lemma lem371265 (a : Prop) (b : Prop) : (term495 a b) = (term496 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem371266 {_16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : (term497 _16549 P Q _7992) = (term498 _16549 P Q _7992).
Proof. exact (@lem371265 (term127 _16549 P _7992) (term127 _16549 Q _7992)). Qed.
Lemma lem371268 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem371269 {_16549 : Type'} (P : _16549 -> Prop) (_7992 : _16549) : (term121 _16549 P _7992) = (P _7992).
Proof. exact (@lem371268 (P _7992)). Qed.
Lemma lem371270 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem371271 {_16549 : Type'} (P : _16549 -> Prop) (_7992 : _16549) : (term499 _16549 P _7992) = (term87 _16549 P _7992).
Proof. exact (MK_COMB (@lem371270) (@lem371269 _16549 P _7992)). Qed.
Lemma lem371273 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem371274 {_16549 : Type'} (Q : _16549 -> Prop) (_7992 : _16549) : (term121 _16549 Q _7992) = (Q _7992).
Proof. exact (@lem371273 (Q _7992)). Qed.
Lemma lem371275 {_16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : (term498 _16549 P Q _7992) = (term143 _16549 P Q _7992).
Proof. exact (MK_COMB (@lem371271 _16549 P _7992) (@lem371274 _16549 Q _7992)). Qed.
Lemma lem371276 {_16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : (term497 _16549 P Q _7992) = (term143 _16549 P Q _7992).
Proof. exact (TRANS (@lem371266 _16549 P Q _7992) (@lem371275 _16549 P Q _7992)). Qed.
Lemma lem371277 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem371278 {_16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (_7992 : _16549) : (term500 _16549 P Q _7992) = (term501 _16549 P Q _7992).
Proof. exact (MK_COMB (@lem371277) (@lem371276 _16549 P Q _7992)). Qed.
Lemma lem371279 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (z : _16549 -> _16551) (_7992 : _16549) : (term430 _16548 _16549 _16551 B f z _7992) = (term430 _16548 _16549 _16551 B f z _7992).
Proof. exact (eq_refl (term430 _16548 _16549 _16551 B f z _7992)). Qed.
Lemma lem371280 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (z : _16549 -> _16551) (_7992 : _16549) : (term511 _16548 _16549 _16551 P Q B f z _7992) = (term512 _16548 _16549 _16551 P Q B f z _7992).
Proof. exact (MK_COMB (@lem371278 _16549 P Q _7992) (@lem371279 _16548 _16549 _16551 B f z _7992)). Qed.
Lemma lem371281 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (z : _16549 -> _16551) (_7992 : _16549) : (term508 _16548 _16549 _16551 B f z P Q _7992) = (term512 _16548 _16549 _16551 P Q B f z _7992).
Proof. exact (TRANS (@lem371263 _16548 _16549 _16551 P Q B f z _7992) (@lem371280 _16548 _16549 _16551 P Q B f z _7992)). Qed.
Lemma lem371283 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term143 _16549 P Q y.
Proof. exact (conj (@lem371181 _16548 _16549 _16551 y a P Q B f A z h1) (@lem371188 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem371285 {_16548 _16549 _16551 : Type'} (_7992 : _16549) (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term512 _16548 _16549 _16551 P Q B f z _7992.
Proof. exact (EQ_MP (@lem371281 _16548 _16549 _16551 P Q B f z _7992) (@lem371260 _16548 _16549 _16551 _7992 y a P Q B f A z h1)). Qed.
Lemma lem371286 {_16548 _16549 _16551 : Type'} (_7992 : _16549) (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term512 _16548 _16549 _16551 P Q B f z _7992.
Proof. exact (@lem371285 _16548 _16549 _16551 _7992 y a P Q B f A z h1). Qed.
Lemma lem371287 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term512 _16548 _16549 _16551 P Q B f z y.
Proof. exact (@lem371286 _16548 _16549 _16551 y y a P Q B f A z h1). Qed.
Lemma lem371290 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term430 _16548 _16549 _16551 B f z y.
Proof. exact (@lem371287 _16548 _16549 _16551 y a P Q B f A z h1 (@lem371283 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem371291 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term513 _16548 _16549 _16551 B f z y.
Proof. exact (fun h0 : term514 _16548 _16549 _16551 B f z y => @lem371290 _16548 _16549 _16551 y a P Q B f A z h1). Qed.
Lemma lem371293 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem371294 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (z : _16549 -> _16551) (y : _16549) : (term513 _16548 _16549 _16551 B f z y) = (term430 _16548 _16549 _16551 B f z y).
Proof. exact (@lem371293 (term430 _16548 _16549 _16551 B f z y)). Qed.
Lemma lem371295 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term430 _16548 _16549 _16551 B f z y.
Proof. exact (EQ_MP (@lem371294 _16548 _16549 _16551 B f z y) (@lem371291 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem371297 (a : Prop) (b : Prop) : (term515 a b) = (term516 a b).
Proof. exact (EQ_MP (@lem20904 a b) (@lem21007 a b)). Qed.
Lemma lem371298 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (_7993 : _16551) : (term482 _16548 _16549 _16551 A B f y _7993) = (term517 _16548 _16549 _16551 A B f y _7993).
Proof. exact (@lem371297 (A _7993) (term126 _16548 _16549 _16551 B f y _7993)). Qed.
Lemma lem371300 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem371301 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (_7993 : _16551) : (term517 _16548 _16549 _16551 A B f y _7993) = (term518 _16548 _16549 _16551 A B f y _7993).
Proof. exact (@lem371300 (term519 _16548 _16549 _16551 A B f y _7993)). Qed.
Lemma lem371302 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y : _16549) (_7993 : _16551) : (term482 _16548 _16549 _16551 A B f y _7993) = (term518 _16548 _16549 _16551 A B f y _7993).
Proof. exact (TRANS (@lem371298 _16548 _16549 _16551 A B f y _7993) (@lem371301 _16548 _16549 _16551 A B f y _7993)). Qed.
Lemma lem371304 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term520 _16548 _16549 _16551 A B f z y.
Proof. exact (conj (@lem371174 _16548 _16549 _16551 y a P Q B f A z h1) (@lem371295 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem371306 {_16548 _16549 _16551 : Type'} (_7993 : _16551) (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term518 _16548 _16549 _16551 A B f y _7993.
Proof. exact (EQ_MP (@lem371302 _16548 _16549 _16551 A B f y _7993) (@lem370997 _16548 _16549 _16551 _7993 y a P Q B f A z h1)). Qed.
Lemma lem371307 {_16548 _16549 _16551 : Type'} (_7993 : _16551) (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term518 _16548 _16549 _16551 A B f y _7993.
Proof. exact (@lem371306 _16548 _16549 _16551 _7993 y a P Q B f A z h1). Qed.
Lemma lem371308 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term521 _16548 _16549 _16551 A B f z y.
Proof. exact (@lem371307 _16548 _16549 _16551 (z y) y a P Q B f A z h1). Qed.
Lemma lem371311 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : False.
Proof. exact (@lem371308 _16548 _16549 _16551 y a P Q B f A z h1 (@lem371304 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem371312 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : term522.
Proof. exact (fun h0 : ~ False => @lem371311 _16548 _16549 _16551 y a P Q B f A z h1). Qed.
Lemma lem371314 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem371315 : term522 = False.
Proof. exact (@lem371314 False). Qed.
Lemma lem371395 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : P y'.
Proof. exact (proj1 (@lem370727 _16548 _16549 _16551 z' P Q B f y' A h1)). Qed.
Lemma lem371396 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term485 _16549 P y'.
Proof. exact (fun h0 : term127 _16549 P y' => @lem371395 _16548 _16549 _16551 z' P Q B f y' A h1). Qed.
Lemma lem371398 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem371399 {_16549 : Type'} (P : _16549 -> Prop) (y' : _16549) : (term485 _16549 P y') = (P y').
Proof. exact (@lem371398 (P y')). Qed.
Lemma lem371400 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : P y'.
Proof. exact (EQ_MP (@lem371399 _16549 P y') (@lem371396 _16548 _16549 _16551 z' P Q B f y' A h1)). Qed.
Lemma lem371402 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : Q y'.
Proof. exact (proj2 (@lem370727 _16548 _16549 _16551 z' P Q B f y' A h1)). Qed.
Lemma lem371403 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term485 _16549 Q y'.
Proof. exact (fun h0 : term127 _16549 Q y' => @lem371402 _16548 _16549 _16551 z' P Q B f y' A h1). Qed.
Lemma lem371405 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem371406 {_16549 : Type'} (Q : _16549 -> Prop) (y' : _16549) : (term485 _16549 Q y') = (Q y').
Proof. exact (@lem371405 (Q y')). Qed.
Lemma lem371407 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : Q y'.
Proof. exact (EQ_MP (@lem371406 _16549 Q y') (@lem371403 _16548 _16549 _16551 z' P Q B f y' A h1)). Qed.
Lemma lem371409 {_16548 : Type'} (x : _16548) : x = x.
Proof. exact (@lem21386 _16548 x). Qed.
Lemma lem371410 {_16548 : Type'} (x : _16548) : x = x.
Proof. exact (@lem371409 _16548 x). Qed.
Lemma lem371411 {_16548 _16549 : Type'} (f : _16549 -> _16548) (y' : _16549) : (f y') = (f y').
Proof. exact (@lem371410 _16548 (f y')). Qed.
Lemma lem371412 {_16548 _16549 : Type'} (f : _16549 -> _16548) (y' : _16549) : term523 _16548 _16549 f y'.
Proof. exact (fun h0 : term524 _16548 _16549 f y' => @lem371411 _16548 _16549 f y'). Qed.
Lemma lem371414 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem371415 {_16548 _16549 : Type'} (f : _16549 -> _16548) (y' : _16549) : (term523 _16548 _16549 f y') = ((f y') = (f y')).
Proof. exact (@lem371414 ((f y') = (f y'))). Qed.
Lemma lem371416 {_16548 _16549 : Type'} (f : _16549 -> _16548) (y' : _16549) : (f y') = (f y').
Proof. exact (EQ_MP (@lem371415 _16548 _16549 f y') (@lem371412 _16548 _16549 f y')). Qed.
Lemma lem371442 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem371443 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term525 _16548 _16549 _16551 f _7995 B z' _7994) = (term526 _16548 _16549 _16551 B z' f _7995 _7994).
Proof. exact (@lem371442 (term454 _16548 _16551 B z' _7994) (term473 _16548 _16549 f _7995 _7994)). Qed.
Lemma lem371451 {_16549 : Type'} (Q : _16549 -> Prop) (_7995 : _16549) : (term72 _16549 Q _7995) = (term72 _16549 Q _7995).
Proof. exact (eq_refl (term72 _16549 Q _7995)). Qed.
Lemma lem371452 {_16548 _16549 _16551 : Type'} (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term477 _16548 _16549 _16551 Q f _7995 B z' _7994) = (term527 _16548 _16549 _16551 Q B z' f _7995 _7994).
Proof. exact (MK_COMB (@lem371451 _16549 Q _7995) (@lem371443 _16548 _16549 _16551 B z' f _7995 _7994)). Qed.
Lemma lem371456 (q : Prop) (p : Prop) (r : Prop) : (term22 p q r) = (term22 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem371457 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term527 _16548 _16549 _16551 Q B z' f _7995 _7994) = (term528 _16548 _16549 _16551 B z' Q f _7995 _7994).
Proof. exact (@lem371456 (term454 _16548 _16551 B z' _7994) (term127 _16549 Q _7995) (term473 _16548 _16549 f _7995 _7994)). Qed.
Lemma lem371475 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term477 _16548 _16549 _16551 Q f _7995 B z' _7994) = (term528 _16548 _16549 _16551 B z' Q f _7995 _7994).
Proof. exact (TRANS (@lem371452 _16548 _16549 _16551 Q B z' f _7995 _7994) (@lem371457 _16548 _16549 _16551 B z' Q f _7995 _7994)). Qed.
Lemma lem371476 {_16549 : Type'} (P : _16549 -> Prop) (_7995 : _16549) : (term72 _16549 P _7995) = (term72 _16549 P _7995).
Proof. exact (eq_refl (term72 _16549 P _7995)). Qed.
Lemma lem371477 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term478 _16548 _16549 _16551 P Q f _7995 B z' _7994) = (term529 _16548 _16549 _16551 P B z' Q f _7995 _7994).
Proof. exact (MK_COMB (@lem371476 _16549 P _7995) (@lem371475 _16548 _16549 _16551 B z' Q f _7995 _7994)). Qed.
Lemma lem371481 (q : Prop) (p : Prop) (r : Prop) : (term22 p q r) = (term22 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem371482 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term529 _16548 _16549 _16551 P B z' Q f _7995 _7994) = (term530 _16548 _16549 _16551 B z' P Q f _7995 _7994).
Proof. exact (@lem371481 (term454 _16548 _16551 B z' _7994) (term127 _16549 P _7995) (term71 _16548 _16549 Q f _7995 _7994)). Qed.
Lemma lem371510 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term478 _16548 _16549 _16551 P Q f _7995 B z' _7994) = (term530 _16548 _16549 _16551 B z' P Q f _7995 _7994).
Proof. exact (TRANS (@lem371477 _16548 _16549 _16551 P B z' Q f _7995 _7994) (@lem371482 _16548 _16549 _16551 B z' P Q f _7995 _7994)). Qed.
Lemma lem371511 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem371512 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term531 _16548 _16549 _16551 P Q f _7995 B z' _7994) = (term532 _16548 _16549 _16551 B z' P Q f _7995 _7994).
Proof. exact (MK_COMB (@lem371511) (@lem371510 _16548 _16549 _16551 B z' P Q f _7995 _7994)). Qed.
Lemma lem371540 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term530 _16548 _16549 _16551 B z' P Q f _7995 _7994) = (term530 _16548 _16549 _16551 B z' P Q f _7995 _7994).
Proof. exact (eq_refl (term530 _16548 _16549 _16551 B z' P Q f _7995 _7994)). Qed.
Lemma lem371541 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : ((term478 _16548 _16549 _16551 P Q f _7995 B z' _7994) = (term530 _16548 _16549 _16551 B z' P Q f _7995 _7994)) = ((term530 _16548 _16549 _16551 B z' P Q f _7995 _7994) = (term530 _16548 _16549 _16551 B z' P Q f _7995 _7994)).
Proof. exact (MK_COMB (@lem371512 _16548 _16549 _16551 B z' P Q f _7995 _7994) (@lem371540 _16548 _16549 _16551 B z' P Q f _7995 _7994)). Qed.
Lemma lem371543 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem371544 (x : Prop) : (x = x) = True.
Proof. exact (@lem371543 Prop x). Qed.
Lemma lem371545 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : ((term530 _16548 _16549 _16551 B z' P Q f _7995 _7994) = (term530 _16548 _16549 _16551 B z' P Q f _7995 _7994)) = True.
Proof. exact (@lem371544 (term530 _16548 _16549 _16551 B z' P Q f _7995 _7994)). Qed.
Lemma lem371546 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : ((term478 _16548 _16549 _16551 P Q f _7995 B z' _7994) = (term530 _16548 _16549 _16551 B z' P Q f _7995 _7994)) = True.
Proof. exact (TRANS (@lem371541 _16548 _16549 _16551 B z' P Q f _7995 _7994) (@lem371545 _16548 _16549 _16551 B z' P Q f _7995 _7994)). Qed.
Lemma lem371547 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : True = ((term478 _16548 _16549 _16551 P Q f _7995 B z' _7994) = (term530 _16548 _16549 _16551 B z' P Q f _7995 _7994)).
Proof. exact (SYM (@lem371546 _16548 _16549 _16551 B z' P Q f _7995 _7994)). Qed.
Lemma lem371548 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term478 _16548 _16549 _16551 P Q f _7995 B z' _7994) = (term530 _16548 _16549 _16551 B z' P Q f _7995 _7994).
Proof. exact (EQ_MP (@lem371547 _16548 _16549 _16551 B z' P Q f _7995 _7994) (@lem0)). Qed.
Lemma lem371549 {_16548 _16549 _16551 : Type'} (_7995 : _16549) (_7994 : _16548) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term530 _16548 _16549 _16551 B z' P Q f _7995 _7994.
Proof. exact (EQ_MP (@lem371548 _16548 _16549 _16551 B z' P Q f _7995 _7994) (@lem370969 _16548 _16549 _16551 _7995 _7994 z' P Q B f y' A h1)). Qed.
Lemma lem371551 (b : Prop) (a : Prop) : (a \/ b) = (term493 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem371552 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (_7994 : _16548) : (term530 _16548 _16549 _16551 B z' P Q f _7995 _7994) = (term533 _16548 _16549 _16551 P Q f _7995 B z' _7994).
Proof. exact (@lem371551 (term74 _16548 _16549 P Q f _7995 _7994) (term454 _16548 _16551 B z' _7994)). Qed.
Lemma lem371554 (a : Prop) (b : Prop) : (term495 a b) = (term496 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem371555 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term534 _16548 _16549 P Q f _7995 _7994) = (term535 _16548 _16549 P Q f _7995 _7994).
Proof. exact (@lem371554 (term127 _16549 P _7995) (term71 _16548 _16549 Q f _7995 _7994)). Qed.
Lemma lem371557 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem371558 {_16549 : Type'} (P : _16549 -> Prop) (_7995 : _16549) : (term121 _16549 P _7995) = (P _7995).
Proof. exact (@lem371557 (P _7995)). Qed.
Lemma lem371559 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem371560 {_16549 : Type'} (P : _16549 -> Prop) (_7995 : _16549) : (term499 _16549 P _7995) = (term87 _16549 P _7995).
Proof. exact (MK_COMB (@lem371559) (@lem371558 _16549 P _7995)). Qed.
Lemma lem371562 (a : Prop) (b : Prop) : (term495 a b) = (term496 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem371563 {_16548 _16549 : Type'} (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term536 _16548 _16549 Q f _7995 _7994) = (term537 _16548 _16549 Q f _7995 _7994).
Proof. exact (@lem371562 (term127 _16549 Q _7995) (term473 _16548 _16549 f _7995 _7994)). Qed.
Lemma lem371565 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem371566 {_16549 : Type'} (Q : _16549 -> Prop) (_7995 : _16549) : (term121 _16549 Q _7995) = (Q _7995).
Proof. exact (@lem371565 (Q _7995)). Qed.
Lemma lem371567 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem371568 {_16549 : Type'} (Q : _16549 -> Prop) (_7995 : _16549) : (term499 _16549 Q _7995) = (term87 _16549 Q _7995).
Proof. exact (MK_COMB (@lem371567) (@lem371566 _16549 Q _7995)). Qed.
Lemma lem371570 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem371571 {_16548 _16549 : Type'} (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term538 _16548 _16549 f _7995 _7994) = ((f _7995) = _7994).
Proof. exact (@lem371570 ((f _7995) = _7994)). Qed.
Lemma lem371572 {_16548 _16549 : Type'} (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term537 _16548 _16549 Q f _7995 _7994) = (term76 _16548 _16549 Q f _7995 _7994).
Proof. exact (MK_COMB (@lem371568 _16549 Q _7995) (@lem371571 _16548 _16549 f _7995 _7994)). Qed.
Lemma lem371573 {_16548 _16549 : Type'} (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term536 _16548 _16549 Q f _7995 _7994) = (term76 _16548 _16549 Q f _7995 _7994).
Proof. exact (TRANS (@lem371563 _16548 _16549 Q f _7995 _7994) (@lem371572 _16548 _16549 Q f _7995 _7994)). Qed.
Lemma lem371574 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term535 _16548 _16549 P Q f _7995 _7994) = (term63 _16548 _16549 P Q f _7995 _7994).
Proof. exact (MK_COMB (@lem371560 _16549 P _7995) (@lem371573 _16548 _16549 Q f _7995 _7994)). Qed.
Lemma lem371575 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term534 _16548 _16549 P Q f _7995 _7994) = (term63 _16548 _16549 P Q f _7995 _7994).
Proof. exact (TRANS (@lem371555 _16548 _16549 P Q f _7995 _7994) (@lem371574 _16548 _16549 P Q f _7995 _7994)). Qed.
Lemma lem371576 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem371577 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term539 _16548 _16549 P Q f _7995 _7994) = (term540 _16548 _16549 P Q f _7995 _7994).
Proof. exact (MK_COMB (@lem371576) (@lem371575 _16548 _16549 P Q f _7995 _7994)). Qed.
Lemma lem371578 {_16548 _16551 : Type'} (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (_7994 : _16548) : (term454 _16548 _16551 B z' _7994) = (term454 _16548 _16551 B z' _7994).
Proof. exact (eq_refl (term454 _16548 _16551 B z' _7994)). Qed.
Lemma lem371579 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (_7994 : _16548) : (term533 _16548 _16549 _16551 P Q f _7995 B z' _7994) = (term541 _16548 _16549 _16551 P Q f _7995 B z' _7994).
Proof. exact (MK_COMB (@lem371577 _16548 _16549 P Q f _7995 _7994) (@lem371578 _16548 _16551 B z' _7994)). Qed.
Lemma lem371580 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (_7994 : _16548) : (term530 _16548 _16549 _16551 B z' P Q f _7995 _7994) = (term541 _16548 _16549 _16551 P Q f _7995 B z' _7994).
Proof. exact (TRANS (@lem371552 _16548 _16549 _16551 P Q f _7995 B z' _7994) (@lem371579 _16548 _16549 _16551 P Q f _7995 B z' _7994)). Qed.
Lemma lem371582 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term542 _16548 _16549 Q f y'.
Proof. exact (conj (@lem371407 _16548 _16549 _16551 z' P Q B f y' A h1) (@lem371416 _16548 _16549 f y')). Qed.
Lemma lem371583 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term543 _16548 _16549 P Q f y'.
Proof. exact (conj (@lem371400 _16548 _16549 _16551 z' P Q B f y' A h1) (@lem371582 _16548 _16549 _16551 z' P Q B f y' A h1)). Qed.
Lemma lem371585 {_16548 _16549 _16551 : Type'} (_7995 : _16549) (_7994 : _16548) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term541 _16548 _16549 _16551 P Q f _7995 B z' _7994.
Proof. exact (EQ_MP (@lem371580 _16548 _16549 _16551 P Q f _7995 B z' _7994) (@lem371549 _16548 _16549 _16551 _7995 _7994 z' P Q B f y' A h1)). Qed.
Lemma lem371586 {_16548 _16549 _16551 : Type'} (_7995 : _16549) (_7994 : _16548) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term541 _16548 _16549 _16551 P Q f _7995 B z' _7994.
Proof. exact (@lem371585 _16548 _16549 _16551 _7995 _7994 z' P Q B f y' A h1). Qed.
Lemma lem371587 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term544 _16548 _16549 _16551 P Q B z' f y'.
Proof. exact (@lem371586 _16548 _16549 _16551 y' (f y') z' P Q B f y' A h1). Qed.
Lemma lem371590 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term545 _16548 _16549 _16551 B z' f y'.
Proof. exact (@lem371587 _16548 _16549 _16551 z' P Q B f y' A h1 (@lem371583 _16548 _16549 _16551 z' P Q B f y' A h1)). Qed.
Lemma lem371591 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term546 _16548 _16549 _16551 B z' f y'.
Proof. exact (fun h0 : term547 _16548 _16549 _16551 B z' f y' => @lem371590 _16548 _16549 _16551 z' P Q B f y' A h1). Qed.
Lemma lem371593 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem371594 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (z' : _16548 -> _16551) (f : _16549 -> _16548) (y' : _16549) : (term546 _16548 _16549 _16551 B z' f y') = (term545 _16548 _16549 _16551 B z' f y').
Proof. exact (@lem371593 (term545 _16548 _16549 _16551 B z' f y')). Qed.
Lemma lem371595 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term545 _16548 _16549 _16551 B z' f y'.
Proof. exact (EQ_MP (@lem371594 _16548 _16549 _16551 B z' f y') (@lem371591 _16548 _16549 _16551 z' P Q B f y' A h1)). Qed.
Lemma lem371597 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : P y'.
Proof. exact (proj1 (@lem370727 _16548 _16549 _16551 z' P Q B f y' A h1)). Qed.
Lemma lem371598 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term485 _16549 P y'.
Proof. exact (fun h0 : term127 _16549 P y' => @lem371597 _16548 _16549 _16551 z' P Q B f y' A h1). Qed.
Lemma lem371600 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem371601 {_16549 : Type'} (P : _16549 -> Prop) (y' : _16549) : (term485 _16549 P y') = (P y').
Proof. exact (@lem371600 (P y')). Qed.
Lemma lem371602 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : P y'.
Proof. exact (EQ_MP (@lem371601 _16549 P y') (@lem371598 _16548 _16549 _16551 z' P Q B f y' A h1)). Qed.
Lemma lem371604 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : Q y'.
Proof. exact (proj2 (@lem370727 _16548 _16549 _16551 z' P Q B f y' A h1)). Qed.
Lemma lem371605 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term485 _16549 Q y'.
Proof. exact (fun h0 : term127 _16549 Q y' => @lem371604 _16548 _16549 _16551 z' P Q B f y' A h1). Qed.
Lemma lem371607 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem371608 {_16549 : Type'} (Q : _16549 -> Prop) (y' : _16549) : (term485 _16549 Q y') = (Q y').
Proof. exact (@lem371607 (Q y')). Qed.
Lemma lem371609 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : Q y'.
Proof. exact (EQ_MP (@lem371608 _16549 Q y') (@lem371605 _16548 _16549 _16551 z' P Q B f y' A h1)). Qed.
Lemma lem371611 {_16548 : Type'} (x : _16548) : x = x.
Proof. exact (@lem21386 _16548 x). Qed.
Lemma lem371612 {_16548 : Type'} (x : _16548) : x = x.
Proof. exact (@lem371611 _16548 x). Qed.
Lemma lem371613 {_16548 _16549 : Type'} (f : _16549 -> _16548) (y' : _16549) : (f y') = (f y').
Proof. exact (@lem371612 _16548 (f y')). Qed.
Lemma lem371614 {_16548 _16549 : Type'} (f : _16549 -> _16548) (y' : _16549) : term523 _16548 _16549 f y'.
Proof. exact (fun h0 : term524 _16548 _16549 f y' => @lem371613 _16548 _16549 f y'). Qed.
Lemma lem371616 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem371617 {_16548 _16549 : Type'} (f : _16549 -> _16548) (y' : _16549) : (term523 _16548 _16549 f y') = ((f y') = (f y')).
Proof. exact (@lem371616 ((f y') = (f y'))). Qed.
Lemma lem371618 {_16548 _16549 : Type'} (f : _16549 -> _16548) (y' : _16549) : (f y') = (f y').
Proof. exact (EQ_MP (@lem371617 _16548 _16549 f y') (@lem371614 _16548 _16549 f y')). Qed.
Lemma lem371644 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem371645 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (z' : _16548 -> _16551) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term548 _16548 _16549 _16551 f _7995 A z' _7994) = (term549 _16548 _16549 _16551 A z' f _7995 _7994).
Proof. exact (@lem371644 (term431 _16548 _16551 A z' _7994) (term473 _16548 _16549 f _7995 _7994)). Qed.
Lemma lem371653 {_16549 : Type'} (Q : _16549 -> Prop) (_7995 : _16549) : (term72 _16549 Q _7995) = (term72 _16549 Q _7995).
Proof. exact (eq_refl (term72 _16549 Q _7995)). Qed.
Lemma lem371654 {_16548 _16549 _16551 : Type'} (Q : _16549 -> Prop) (A : _16551 -> Prop) (z' : _16548 -> _16551) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term472 _16548 _16549 _16551 Q f _7995 A z' _7994) = (term550 _16548 _16549 _16551 Q A z' f _7995 _7994).
Proof. exact (MK_COMB (@lem371653 _16549 Q _7995) (@lem371645 _16548 _16549 _16551 A z' f _7995 _7994)). Qed.
Lemma lem371658 (q : Prop) (p : Prop) (r : Prop) : (term22 p q r) = (term22 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem371659 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (z' : _16548 -> _16551) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term550 _16548 _16549 _16551 Q A z' f _7995 _7994) = (term551 _16548 _16549 _16551 A z' Q f _7995 _7994).
Proof. exact (@lem371658 (term431 _16548 _16551 A z' _7994) (term127 _16549 Q _7995) (term473 _16548 _16549 f _7995 _7994)). Qed.
Lemma lem371677 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (z' : _16548 -> _16551) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term472 _16548 _16549 _16551 Q f _7995 A z' _7994) = (term551 _16548 _16549 _16551 A z' Q f _7995 _7994).
Proof. exact (TRANS (@lem371654 _16548 _16549 _16551 Q A z' f _7995 _7994) (@lem371659 _16548 _16549 _16551 A z' Q f _7995 _7994)). Qed.
Lemma lem371678 {_16549 : Type'} (P : _16549 -> Prop) (_7995 : _16549) : (term72 _16549 P _7995) = (term72 _16549 P _7995).
Proof. exact (eq_refl (term72 _16549 P _7995)). Qed.
Lemma lem371679 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (A : _16551 -> Prop) (z' : _16548 -> _16551) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term474 _16548 _16549 _16551 P Q f _7995 A z' _7994) = (term552 _16548 _16549 _16551 P A z' Q f _7995 _7994).
Proof. exact (MK_COMB (@lem371678 _16549 P _7995) (@lem371677 _16548 _16549 _16551 A z' Q f _7995 _7994)). Qed.
Lemma lem371683 (q : Prop) (p : Prop) (r : Prop) : (term22 p q r) = (term22 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem371684 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term552 _16548 _16549 _16551 P A z' Q f _7995 _7994) = (term553 _16548 _16549 _16551 A z' P Q f _7995 _7994).
Proof. exact (@lem371683 (term431 _16548 _16551 A z' _7994) (term127 _16549 P _7995) (term71 _16548 _16549 Q f _7995 _7994)). Qed.
Lemma lem371712 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term474 _16548 _16549 _16551 P Q f _7995 A z' _7994) = (term553 _16548 _16549 _16551 A z' P Q f _7995 _7994).
Proof. exact (TRANS (@lem371679 _16548 _16549 _16551 P A z' Q f _7995 _7994) (@lem371684 _16548 _16549 _16551 A z' P Q f _7995 _7994)). Qed.
Lemma lem371713 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem371714 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term554 _16548 _16549 _16551 P Q f _7995 A z' _7994) = (term555 _16548 _16549 _16551 A z' P Q f _7995 _7994).
Proof. exact (MK_COMB (@lem371713) (@lem371712 _16548 _16549 _16551 A z' P Q f _7995 _7994)). Qed.
Lemma lem371742 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term553 _16548 _16549 _16551 A z' P Q f _7995 _7994) = (term553 _16548 _16549 _16551 A z' P Q f _7995 _7994).
Proof. exact (eq_refl (term553 _16548 _16549 _16551 A z' P Q f _7995 _7994)). Qed.
Lemma lem371743 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : ((term474 _16548 _16549 _16551 P Q f _7995 A z' _7994) = (term553 _16548 _16549 _16551 A z' P Q f _7995 _7994)) = ((term553 _16548 _16549 _16551 A z' P Q f _7995 _7994) = (term553 _16548 _16549 _16551 A z' P Q f _7995 _7994)).
Proof. exact (MK_COMB (@lem371714 _16548 _16549 _16551 A z' P Q f _7995 _7994) (@lem371742 _16548 _16549 _16551 A z' P Q f _7995 _7994)). Qed.
Lemma lem371745 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem371746 (x : Prop) : (x = x) = True.
Proof. exact (@lem371745 Prop x). Qed.
Lemma lem371747 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : ((term553 _16548 _16549 _16551 A z' P Q f _7995 _7994) = (term553 _16548 _16549 _16551 A z' P Q f _7995 _7994)) = True.
Proof. exact (@lem371746 (term553 _16548 _16549 _16551 A z' P Q f _7995 _7994)). Qed.
Lemma lem371748 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : ((term474 _16548 _16549 _16551 P Q f _7995 A z' _7994) = (term553 _16548 _16549 _16551 A z' P Q f _7995 _7994)) = True.
Proof. exact (TRANS (@lem371743 _16548 _16549 _16551 A z' P Q f _7995 _7994) (@lem371747 _16548 _16549 _16551 A z' P Q f _7995 _7994)). Qed.
Lemma lem371749 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : True = ((term474 _16548 _16549 _16551 P Q f _7995 A z' _7994) = (term553 _16548 _16549 _16551 A z' P Q f _7995 _7994)).
Proof. exact (SYM (@lem371748 _16548 _16549 _16551 A z' P Q f _7995 _7994)). Qed.
Lemma lem371750 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term474 _16548 _16549 _16551 P Q f _7995 A z' _7994) = (term553 _16548 _16549 _16551 A z' P Q f _7995 _7994).
Proof. exact (EQ_MP (@lem371749 _16548 _16549 _16551 A z' P Q f _7995 _7994) (@lem0)). Qed.
Lemma lem371751 {_16548 _16549 _16551 : Type'} (_7995 : _16549) (_7994 : _16548) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term553 _16548 _16549 _16551 A z' P Q f _7995 _7994.
Proof. exact (EQ_MP (@lem371750 _16548 _16549 _16551 A z' P Q f _7995 _7994) (@lem370951 _16548 _16549 _16551 _7995 _7994 z' P Q B f y' A h1)). Qed.
Lemma lem371753 (b : Prop) (a : Prop) : (a \/ b) = (term493 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem371754 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (A : _16551 -> Prop) (z' : _16548 -> _16551) (_7994 : _16548) : (term553 _16548 _16549 _16551 A z' P Q f _7995 _7994) = (term556 _16548 _16549 _16551 P Q f _7995 A z' _7994).
Proof. exact (@lem371753 (term74 _16548 _16549 P Q f _7995 _7994) (term431 _16548 _16551 A z' _7994)). Qed.
Lemma lem371756 (a : Prop) (b : Prop) : (term495 a b) = (term496 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem371757 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term534 _16548 _16549 P Q f _7995 _7994) = (term535 _16548 _16549 P Q f _7995 _7994).
Proof. exact (@lem371756 (term127 _16549 P _7995) (term71 _16548 _16549 Q f _7995 _7994)). Qed.
Lemma lem371759 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem371760 {_16549 : Type'} (P : _16549 -> Prop) (_7995 : _16549) : (term121 _16549 P _7995) = (P _7995).
Proof. exact (@lem371759 (P _7995)). Qed.
Lemma lem371761 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem371762 {_16549 : Type'} (P : _16549 -> Prop) (_7995 : _16549) : (term499 _16549 P _7995) = (term87 _16549 P _7995).
Proof. exact (MK_COMB (@lem371761) (@lem371760 _16549 P _7995)). Qed.
Lemma lem371764 (a : Prop) (b : Prop) : (term495 a b) = (term496 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem371765 {_16548 _16549 : Type'} (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term536 _16548 _16549 Q f _7995 _7994) = (term537 _16548 _16549 Q f _7995 _7994).
Proof. exact (@lem371764 (term127 _16549 Q _7995) (term473 _16548 _16549 f _7995 _7994)). Qed.
Lemma lem371767 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem371768 {_16549 : Type'} (Q : _16549 -> Prop) (_7995 : _16549) : (term121 _16549 Q _7995) = (Q _7995).
Proof. exact (@lem371767 (Q _7995)). Qed.
Lemma lem371769 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem371770 {_16549 : Type'} (Q : _16549 -> Prop) (_7995 : _16549) : (term499 _16549 Q _7995) = (term87 _16549 Q _7995).
Proof. exact (MK_COMB (@lem371769) (@lem371768 _16549 Q _7995)). Qed.
Lemma lem371772 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem371773 {_16548 _16549 : Type'} (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term538 _16548 _16549 f _7995 _7994) = ((f _7995) = _7994).
Proof. exact (@lem371772 ((f _7995) = _7994)). Qed.
Lemma lem371774 {_16548 _16549 : Type'} (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term537 _16548 _16549 Q f _7995 _7994) = (term76 _16548 _16549 Q f _7995 _7994).
Proof. exact (MK_COMB (@lem371770 _16549 Q _7995) (@lem371773 _16548 _16549 f _7995 _7994)). Qed.
Lemma lem371775 {_16548 _16549 : Type'} (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term536 _16548 _16549 Q f _7995 _7994) = (term76 _16548 _16549 Q f _7995 _7994).
Proof. exact (TRANS (@lem371765 _16548 _16549 Q f _7995 _7994) (@lem371774 _16548 _16549 Q f _7995 _7994)). Qed.
Lemma lem371776 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term535 _16548 _16549 P Q f _7995 _7994) = (term63 _16548 _16549 P Q f _7995 _7994).
Proof. exact (MK_COMB (@lem371762 _16549 P _7995) (@lem371775 _16548 _16549 Q f _7995 _7994)). Qed.
Lemma lem371777 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term534 _16548 _16549 P Q f _7995 _7994) = (term63 _16548 _16549 P Q f _7995 _7994).
Proof. exact (TRANS (@lem371757 _16548 _16549 P Q f _7995 _7994) (@lem371776 _16548 _16549 P Q f _7995 _7994)). Qed.
Lemma lem371778 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem371779 {_16548 _16549 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (_7994 : _16548) : (term539 _16548 _16549 P Q f _7995 _7994) = (term540 _16548 _16549 P Q f _7995 _7994).
Proof. exact (MK_COMB (@lem371778) (@lem371777 _16548 _16549 P Q f _7995 _7994)). Qed.
Lemma lem371780 {_16548 _16551 : Type'} (A : _16551 -> Prop) (z' : _16548 -> _16551) (_7994 : _16548) : (term431 _16548 _16551 A z' _7994) = (term431 _16548 _16551 A z' _7994).
Proof. exact (eq_refl (term431 _16548 _16551 A z' _7994)). Qed.
Lemma lem371781 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (A : _16551 -> Prop) (z' : _16548 -> _16551) (_7994 : _16548) : (term556 _16548 _16549 _16551 P Q f _7995 A z' _7994) = (term557 _16548 _16549 _16551 P Q f _7995 A z' _7994).
Proof. exact (MK_COMB (@lem371779 _16548 _16549 P Q f _7995 _7994) (@lem371780 _16548 _16551 A z' _7994)). Qed.
Lemma lem371782 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (f : _16549 -> _16548) (_7995 : _16549) (A : _16551 -> Prop) (z' : _16548 -> _16551) (_7994 : _16548) : (term553 _16548 _16549 _16551 A z' P Q f _7995 _7994) = (term557 _16548 _16549 _16551 P Q f _7995 A z' _7994).
Proof. exact (TRANS (@lem371754 _16548 _16549 _16551 P Q f _7995 A z' _7994) (@lem371781 _16548 _16549 _16551 P Q f _7995 A z' _7994)). Qed.
Lemma lem371784 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term542 _16548 _16549 Q f y'.
Proof. exact (conj (@lem371609 _16548 _16549 _16551 z' P Q B f y' A h1) (@lem371618 _16548 _16549 f y')). Qed.
Lemma lem371785 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term543 _16548 _16549 P Q f y'.
Proof. exact (conj (@lem371602 _16548 _16549 _16551 z' P Q B f y' A h1) (@lem371784 _16548 _16549 _16551 z' P Q B f y' A h1)). Qed.
Lemma lem371787 {_16548 _16549 _16551 : Type'} (_7995 : _16549) (_7994 : _16548) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term557 _16548 _16549 _16551 P Q f _7995 A z' _7994.
Proof. exact (EQ_MP (@lem371782 _16548 _16549 _16551 P Q f _7995 A z' _7994) (@lem371751 _16548 _16549 _16551 _7995 _7994 z' P Q B f y' A h1)). Qed.
Lemma lem371788 {_16548 _16549 _16551 : Type'} (_7995 : _16549) (_7994 : _16548) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term557 _16548 _16549 _16551 P Q f _7995 A z' _7994.
Proof. exact (@lem371787 _16548 _16549 _16551 _7995 _7994 z' P Q B f y' A h1). Qed.
Lemma lem371789 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term558 _16548 _16549 _16551 P Q A z' f y'.
Proof. exact (@lem371788 _16548 _16549 _16551 y' (f y') z' P Q B f y' A h1). Qed.
Lemma lem371792 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term559 _16548 _16549 _16551 A z' f y'.
Proof. exact (@lem371789 _16548 _16549 _16551 z' P Q B f y' A h1 (@lem371785 _16548 _16549 _16551 z' P Q B f y' A h1)). Qed.
Lemma lem371793 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term560 _16548 _16549 _16551 A z' f y'.
Proof. exact (fun h0 : term561 _16548 _16549 _16551 A z' f y' => @lem371792 _16548 _16549 _16551 z' P Q B f y' A h1). Qed.
Lemma lem371795 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem371796 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (z' : _16548 -> _16551) (f : _16549 -> _16548) (y' : _16549) : (term560 _16548 _16549 _16551 A z' f y') = (term559 _16548 _16549 _16551 A z' f y').
Proof. exact (@lem371795 (term559 _16548 _16549 _16551 A z' f y')). Qed.
Lemma lem371797 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term559 _16548 _16549 _16551 A z' f y'.
Proof. exact (EQ_MP (@lem371796 _16548 _16549 _16551 A z' f y') (@lem371793 _16548 _16549 _16551 z' P Q B f y' A h1)). Qed.
Lemma lem371799 (a : Prop) (b : Prop) : (term515 a b) = (term516 a b).
Proof. exact (EQ_MP (@lem20904 a b) (@lem21007 a b)). Qed.
Lemma lem371800 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (_7996 : _16551) : (term128 _16548 _16549 _16551 B f y' A _7996) = (term562 _16548 _16549 _16551 B f y' A _7996).
Proof. exact (@lem371799 (term126 _16548 _16549 _16551 B f y' _7996) (A _7996)). Qed.
Lemma lem371802 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem371803 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (_7996 : _16551) : (term562 _16548 _16549 _16551 B f y' A _7996) = (term563 _16548 _16549 _16551 B f y' A _7996).
Proof. exact (@lem371802 (term124 _16548 _16549 _16551 B f y' A _7996)). Qed.
Lemma lem371804 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (_7996 : _16551) : (term128 _16548 _16549 _16551 B f y' A _7996) = (term563 _16548 _16549 _16551 B f y' A _7996).
Proof. exact (TRANS (@lem371800 _16548 _16549 _16551 B f y' A _7996) (@lem371803 _16548 _16549 _16551 B f y' A _7996)). Qed.
Lemma lem371806 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term564 _16548 _16549 _16551 B A z' f y'.
Proof. exact (conj (@lem371595 _16548 _16549 _16551 z' P Q B f y' A h1) (@lem371797 _16548 _16549 _16551 z' P Q B f y' A h1)). Qed.
Lemma lem371808 {_16548 _16549 _16551 : Type'} (_7996 : _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term563 _16548 _16549 _16551 B f y' A _7996.
Proof. exact (EQ_MP (@lem371804 _16548 _16549 _16551 B f y' A _7996) (@lem370929 _16548 _16549 _16551 _7996 z' P Q B f y' A h1)). Qed.
Lemma lem371809 {_16548 _16549 _16551 : Type'} (_7996 : _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term563 _16548 _16549 _16551 B f y' A _7996.
Proof. exact (@lem371808 _16548 _16549 _16551 _7996 z' P Q B f y' A h1). Qed.
Lemma lem371810 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term565 _16548 _16549 _16551 B A z' f y'.
Proof. exact (@lem371809 _16548 _16549 _16551 (term566 _16548 _16549 _16551 z' f y') z' P Q B f y' A h1). Qed.
Lemma lem371813 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : False.
Proof. exact (@lem371810 _16548 _16549 _16551 z' P Q B f y' A h1 (@lem371806 _16548 _16549 _16551 z' P Q B f y' A h1)). Qed.
Lemma lem371814 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : term522.
Proof. exact (fun h0 : ~ False => @lem371813 _16548 _16549 _16551 z' P Q B f y' A h1). Qed.
Lemma lem371816 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem371817 : term522 = False.
Proof. exact (@lem371816 False). Qed.
Lemma lem371818 {_16548 _16549 _16551 : Type'} (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term338 _16548 _16549 _16551 z' P Q B f y' A) : False.
Proof. exact (EQ_MP (@lem371817) (@lem371814 _16548 _16549 _16551 z' P Q B f y' A h1)). Qed.
Lemma lem371819 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (z : _16549 -> _16551) (h1 : term267 _16548 _16549 _16551 y a P Q B f A z) : False.
Proof. exact (EQ_MP (@lem371315) (@lem371312 _16548 _16549 _16551 y a P Q B f A z h1)). Qed.
Lemma lem371820 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term416 _16548 _16549 _16551 y a z z' P Q B f y' A) : False.
Proof. exact (or_elim (@lem370713 _16548 _16549 _16551 y a z z' P Q B f y' A h1) (fun h0 : term267 _16548 _16549 _16551 y a P Q B f A z => @lem371819 _16548 _16549 _16551 y a P Q B f A z h0) (fun h0 : term338 _16548 _16549 _16551 z' P Q B f y' A => @lem371818 _16548 _16549 _16551 z' P Q B f y' A h0)). Qed.
Lemma lem371821 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term416 _16548 _16549 _16551 y a z z' P Q B f y' A) : (term416 _16548 _16549 _16551 y a z z' P Q B f y' A) = False.
Proof. exact (prop_ext (fun h2 : term416 _16548 _16549 _16551 y a z z' P Q B f y' A => @lem371820 _16548 _16549 _16551 y a z z' P Q B f y' A h1) (fun h2 : False => @lem370713 _16548 _16549 _16551 y a z z' P Q B f y' A h1)). Qed.
Lemma lem371822 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (y' : _16549) (A : _16551 -> Prop) (h1 : term416 _16548 _16549 _16551 y a z z' P Q B f y' A) : False.
Proof. exact (EQ_MP (@lem371821 _16548 _16549 _16551 y a z z' P Q B f y' A h1) (@lem370713 _16548 _16549 _16551 y a z z' P Q B f y' A h1)). Qed.
Lemma lem371823 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (z' : _16548 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term419 _16548 _16549 _16551 y a z z' P Q B f A) : False.
Proof. exact (ex_elim (@lem370545 _16548 _16549 _16551 y a z z' P Q B f A h1) (fun y' : _16549 => fun h0 : term418 _16548 _16549 _16551 y a z z' P Q B f A y' => @lem371822 _16548 _16549 _16551 y a z z' P Q B f y' A h0)). Qed.
Lemma lem371824 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (z : _16549 -> _16551) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term421 _16548 _16549 _16551 y a z P Q B f A) : False.
Proof. exact (ex_elim (@lem370544 _16548 _16549 _16551 y a z P Q B f A h1) (fun z' : _16548 -> _16551 => fun h0 : term420 _16548 _16549 _16551 y a z P Q B f A z' => @lem371823 _16548 _16549 _16551 y a z z' P Q B f A h0)). Qed.
Lemma lem371825 {_16548 _16549 _16551 : Type'} (y : _16549) (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term423 _16548 _16549 _16551 y a P Q B f A) : False.
Proof. exact (ex_elim (@lem370543 _16548 _16549 _16551 y a P Q B f A h1) (fun z : _16549 -> _16551 => fun h0 : term422 _16548 _16549 _16551 y a P Q B f A z => @lem371824 _16548 _16549 _16551 y a z P Q B f A h0)). Qed.
Lemma lem371826 {_16548 _16549 _16551 : Type'} (a : _16548) (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term425 _16548 _16549 _16551 a P Q B f A) : False.
Proof. exact (ex_elim (@lem370542 _16548 _16549 _16551 a P Q B f A h1) (fun y : _16549 => fun h0 : term424 _16548 _16549 _16551 a P Q B f A y => @lem371825 _16548 _16549 _16551 y a P Q B f A h0)). Qed.
Lemma lem371827 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term28 _16548 _16549 _16551 P Q B f A) : False.
Proof. exact (ex_elim (@lem370541 _16548 _16549 _16551 P Q B f A h1) (fun a : _16548 => fun h0 : term426 _16548 _16549 _16551 P Q B f A a => @lem371826 _16548 _16549 _16551 a P Q B f A h0)). Qed.
Lemma lem371828 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term28 _16548 _16549 _16551 P Q B f A) : (term28 _16548 _16549 _16551 P Q B f A) = False.
Proof. exact (prop_ext (fun h2 : term28 _16548 _16549 _16551 P Q B f A => @lem371827 _16548 _16549 _16551 P Q B f A h1) (fun h2 : False => @lem369549 _16548 _16549 _16551 P Q B f A h1)). Qed.
Lemma lem371829 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term28 _16548 _16549 _16551 P Q B f A) : False.
Proof. exact (EQ_MP (@lem371828 _16548 _16549 _16551 P Q B f A h1) (@lem369549 _16548 _16549 _16551 P Q B f A h1)). Qed.
Lemma lem371830 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : term27 _16548 _16549 _16551 P Q B f A.
Proof. exact (fun h0 : term28 _16548 _16549 _16551 P Q B f A => @lem371829 _16548 _16549 _16551 P Q B f A h0). Qed.
Lemma lem371831 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term25 _16548 _16549 _16551 P Q f A B) = (term26 _16548 _16549 _16551 P Q B f A).
Proof. exact (EQ_MP (@lem369548 _16548 _16549 _16551 P Q B f A) (@lem371830 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem371836 {_16548 _16549 _16551 : Type'} (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : term37 _16548 _16549 _16551 Q B f A.
Proof. exact (fun P : _16549 -> Prop => @lem371831 _16548 _16549 _16551 P Q B f A). Qed.
Lemma lem371841 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : term41 _16548 _16549 _16551 B f A.
Proof. exact (fun Q : _16549 -> Prop => @lem371836 _16548 _16549 _16551 Q B f A). Qed.
Lemma lem371846 {_16548 _16549 _16551 : Type'} (f : _16549 -> _16548) (A : _16551 -> Prop) : term45 _16548 _16549 _16551 f A.
Proof. exact (fun B : type1413 _16548 _16551 => @lem371841 _16548 _16549 _16551 B f A). Qed.
Lemma lem371851 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) : term49 _16548 _16549 _16551 A.
Proof. exact (fun f : _16549 -> _16548 => @lem371846 _16548 _16549 _16551 f A). Qed.
Lemma lem371856 {_16548 _16549 _16551 : Type'} : term53 _16548 _16549 _16551.
Proof. exact (fun A : _16551 -> Prop => @lem371851 _16548 _16549 _16551 A). Qed.
Lemma lem371857 {_16548 _16549 _16551 : Type'} : term52 _16548 _16549 _16551.
Proof. exact (EQ_MP (@lem369544 _16548 _16549 _16551) (@lem371856 _16548 _16549 _16551)). Qed.
Lemma lem371858 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) : term567 _16548 _16549 _16551 A.
Proof. exact (@lem371857 _16548 _16549 _16551 A). Qed.
Lemma lem371859 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) : (term567 _16548 _16549 _16551 A) = (term48 _16548 _16549 _16551 A).
Proof. exact (eq_refl (term567 _16548 _16549 _16551 A)). Qed.
Lemma lem371860 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) : term48 _16548 _16549 _16551 A.
Proof. exact (EQ_MP (@lem371859 _16548 _16549 _16551 A) (@lem371858 _16548 _16549 _16551 A)). Qed.
Lemma lem371861 {_16548 _16549 _16551 : Type'} (A : _16551 -> Prop) (f : _16549 -> _16548) : term568 _16548 _16549 _16551 A f.
Proof. exact (@lem371860 _16548 _16549 _16551 A f). Qed.
Lemma lem371862 {_16548 _16549 _16551 : Type'} (f : _16549 -> _16548) (A : _16551 -> Prop) : (term568 _16548 _16549 _16551 A f) = (term44 _16548 _16549 _16551 f A).
Proof. exact (eq_refl (term568 _16548 _16549 _16551 A f)). Qed.
Lemma lem371863 {_16548 _16549 _16551 : Type'} (f : _16549 -> _16548) (A : _16551 -> Prop) : term44 _16548 _16549 _16551 f A.
Proof. exact (EQ_MP (@lem371862 _16548 _16549 _16551 f A) (@lem371861 _16548 _16549 _16551 A f)). Qed.
Lemma lem371864 {_16548 _16549 _16551 : Type'} (f : _16549 -> _16548) (A : _16551 -> Prop) (B : type1413 _16548 _16551) : term569 _16548 _16549 _16551 f A B.
Proof. exact (@lem371863 _16548 _16549 _16551 f A B). Qed.
Lemma lem371865 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term569 _16548 _16549 _16551 f A B) = (term40 _16548 _16549 _16551 B f A).
Proof. exact (eq_refl (term569 _16548 _16549 _16551 f A B)). Qed.
Lemma lem371866 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : term40 _16548 _16549 _16551 B f A.
Proof. exact (EQ_MP (@lem371865 _16548 _16549 _16551 B f A) (@lem371864 _16548 _16549 _16551 f A B)). Qed.
Lemma lem371867 {_16548 _16549 _16551 : Type'} (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (Q : _16549 -> Prop) : term570 _16548 _16549 _16551 B f A Q.
Proof. exact (@lem371866 _16548 _16549 _16551 B f A Q). Qed.
Lemma lem371868 {_16548 _16549 _16551 : Type'} (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term570 _16548 _16549 _16551 B f A Q) = (term36 _16548 _16549 _16551 Q B f A).
Proof. exact (eq_refl (term570 _16548 _16549 _16551 B f A Q)). Qed.
Lemma lem371869 {_16548 _16549 _16551 : Type'} (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : term36 _16548 _16549 _16551 Q B f A.
Proof. exact (EQ_MP (@lem371868 _16548 _16549 _16551 Q B f A) (@lem371867 _16548 _16549 _16551 B f A Q)). Qed.
Lemma lem371870 {_16548 _16549 _16551 : Type'} (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (P : _16549 -> Prop) : term571 _16548 _16549 _16551 Q B f A P.
Proof. exact (@lem371869 _16548 _16549 _16551 Q B f A P). Qed.
Lemma lem371871 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term571 _16548 _16549 _16551 Q B f A P) = (term27 _16548 _16549 _16551 P Q B f A).
Proof. exact (eq_refl (term571 _16548 _16549 _16551 Q B f A P)). Qed.
Lemma lem371872 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : term27 _16548 _16549 _16551 P Q B f A.
Proof. exact (EQ_MP (@lem371871 _16548 _16549 _16551 P Q B f A) (@lem371870 _16548 _16549 _16551 Q B f A P)). Qed.
Lemma lem371874 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : term27 _16548 _16549 _16551 P Q B f A.
Proof. exact (@lem369187 _16548 _16549 _16551 P Q B f A (@lem371872 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem371875 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term28 _16548 _16549 _16551 P Q B f A) : False.
Proof. exact (@lem371874 _16548 _16549 _16551 P Q B f A (@lem369171 _16548 _16549 _16551 P Q B f A h1)). Qed.
Lemma lem371876 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term28 _16548 _16549 _16551 P Q B f A) : (term28 _16548 _16549 _16551 P Q B f A) = False.
Proof. exact (prop_ext (fun h2 : term28 _16548 _16549 _16551 P Q B f A => @lem371875 _16548 _16549 _16551 P Q B f A h1) (fun h2 : False => @lem369171 _16548 _16549 _16551 P Q B f A h1)). Qed.
Lemma lem371877 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) (h1 : term28 _16548 _16549 _16551 P Q B f A) : False.
Proof. exact (EQ_MP (@lem371876 _16548 _16549 _16551 P Q B f A h1) (@lem369171 _16548 _16549 _16551 P Q B f A h1)). Qed.
Lemma lem371878 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : term27 _16548 _16549 _16551 P Q B f A.
Proof. exact (fun h0 : term28 _16548 _16549 _16551 P Q B f A => @lem371877 _16548 _16549 _16551 P Q B f A h0). Qed.
Lemma lem371880 (t1 : Prop) : term17 t1.
Proof. exact (@lem693 t1). Qed.
Lemma lem371881 (t1 : Prop) : (term17 t1) = (term18 t1).
Proof. exact (eq_refl (term17 t1)). Qed.
Lemma lem371882 (t1 : Prop) : term18 t1.
Proof. exact (EQ_MP (@lem371881 t1) (@lem371880 t1)). Qed.
Lemma lem371883 (t1 : Prop) (t2 : Prop) : term19 t1 t2.
Proof. exact (@lem371882 t1 t2). Qed.
Lemma lem371884 (t1 : Prop) (t2 : Prop) : (term19 t1 t2) = (term20 t1 t2).
Proof. exact (eq_refl (term19 t1 t2)). Qed.
Lemma lem371885 (t1 : Prop) (t2 : Prop) : term20 t1 t2.
Proof. exact (EQ_MP (@lem371884 t1 t2) (@lem371883 t1 t2)). Qed.
Lemma lem371886 (t1 : Prop) (t2 : Prop) (t3 : Prop) : term21 t1 t2 t3.
Proof. exact (@lem371885 t1 t2 t3). Qed.
Lemma lem371887 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term21 t1 t2 t3) = ((term22 t1 t2 t3) = (term23 t1 t2 t3)).
Proof. exact (eq_refl (term21 t1 t2 t3)). Qed.
Lemma lem371888 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term22 t1 t2 t3) = (term23 t1 t2 t3).
Proof. exact (EQ_MP (@lem371887 t1 t2 t3) (@lem371886 t1 t2 t3)). Qed.
Lemma lem371889 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term23 t1 t2 t3) = (term22 t1 t2 t3).
Proof. exact (SYM (@lem371888 t1 t2 t3)). Qed.
Lemma lem371890 {A : Type'} (P : A -> Prop) (Q : A -> Prop) (h1 : term572 A P Q) : term572 A P Q.
Proof. exact (h1). Qed.
Lemma lem371891 {A : Type'} (P : A -> Prop) (Q : A -> Prop) (h1 : term573 A P Q) : term573 A P Q.
Proof. exact (h1). Qed.
Lemma lem371892 {A : Type'} (P : A -> Prop) (Q : A -> Prop) (h1 : term573 A P Q) (h2 : term572 A P Q) : term574 A P Q.
Proof. exact (@lem371890 A P Q h2 (@lem371891 A P Q h1)). Qed.
Lemma lem371893 {A : Type'} (P : A -> Prop) (Q : A -> Prop) (h1 : term573 A P Q) : term575 A P Q.
Proof. exact (fun h0 : term572 A P Q => @lem371892 A P Q h1 h0). Qed.
Lemma lem371894 {A : Type'} (P : A -> Prop) (Q : A -> Prop) (h1 : term572 A P Q) : term572 A P Q.
Proof. exact (h1). Qed.
Lemma lem371895 {A : Type'} (P : A -> Prop) (Q : A -> Prop) (h1 : term573 A P Q) (h2 : term572 A P Q) : term574 A P Q.
Proof. exact (@lem371893 A P Q h1 (@lem371894 A P Q h2)). Qed.
Lemma lem371896 {A : Type'} (P : A -> Prop) (Q : A -> Prop) (h1 : term572 A P Q) : term572 A P Q.
Proof. exact (fun h0 : term573 A P Q => @lem371895 A P Q h0 h1). Qed.
Lemma lem371897 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : term576 A P Q.
Proof. exact (fun h0 : term572 A P Q => @lem371896 A P Q h0). Qed.
Lemma lem371900 {A B : Type'} (lt2 : type1402 A) : term577 A B lt2.
Proof. exact (fun h0 : @WF A lt2 => @lem358361 A B lt2 h0). Qed.
Lemma lem371901 {B : Type'} (lt2 : type1605) : term578 B lt2.
Proof. exact (@lem371900 nat B lt2). Qed.
Lemma lem371902 {B : Type'} : term579 B.
Proof. exact (@lem371901 B Peano.lt). Qed.
Lemma lem371903 {B : Type'} : term580 B.
Proof. exact (@lem371902 B (@lem365140)). Qed.
Lemma lem371904 {B : Type'} (h1 : term580 B) : term580 B.
Proof. exact (h1). Qed.
Lemma lem371905 {B : Type'} (P : type970 B) (h1 : term580 B) : term581 B P.
Proof. exact (@lem371904 B h1 P). Qed.
Lemma lem371906 {B : Type'} (P : type970 B) : (term581 B P) = (term582 B P).
Proof. exact (eq_refl (term581 B P)). Qed.
Lemma lem371907 {B : Type'} (P : type970 B) (h1 : term580 B) : term582 B P.
Proof. exact (EQ_MP (@lem371906 B P) (@lem371905 B P h1)). Qed.
Lemma lem371908 {B : Type'} (P : type970 B) (h1 : term583 B P) : term583 B P.
Proof. exact (h1). Qed.
Lemma lem371909 {B : Type'} (P : type970 B) (h1 : term580 B) (h2 : term583 B P) : term584 B P.
Proof. exact (@lem371907 B P h1 (@lem371908 B P h2)). Qed.
Lemma lem371910 {B : Type'} (P : type970 B) (h1 : term583 B P) : term585 B P.
Proof. exact (fun h0 : term580 B => @lem371909 B P h0 h1). Qed.
Lemma lem371911 {B : Type'} (h1 : term580 B) : term580 B.
Proof. exact (h1). Qed.
Lemma lem371912 {B : Type'} (P : type970 B) (h1 : term580 B) (h2 : term583 B P) : term584 B P.
Proof. exact (@lem371910 B P h2 (@lem371911 B h1)). Qed.
Lemma lem371913 {B : Type'} (P : type970 B) (h1 : term580 B) : term582 B P.
Proof. exact (fun h0 : term583 B P => @lem371912 B P h1 h0). Qed.
Lemma lem371914 {B : Type'} (h1 : term580 B) : term580 B.
Proof. exact (fun P : type970 B => @lem371913 B P h1). Qed.
Lemma lem371915 {B : Type'} : term586 B.
Proof. exact (fun h0 : term580 B => @lem371914 B h0). Qed.
Lemma lem371916 {B : Type'} : term580 B.
Proof. exact (@lem371915 B (@lem371903 B)). Qed.
Lemma lem371917 {B : Type'} (P : type970 B) : term581 B P.
Proof. exact (@lem371916 B P). Qed.
Lemma lem371918 {B : Type'} (P : type970 B) : (term581 B P) = (term582 B P).
Proof. exact (eq_refl (term581 B P)). Qed.
Lemma lem371920 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : term587 A lt2 bad.
Proof. exact (h1). Qed.
Lemma lem371921 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (h1 : term588 A bad lt2) : term588 A bad lt2.
Proof. exact (h1). Qed.
Lemma lem371923 {B : Type'} (P : type970 B) : term582 B P.
Proof. exact (EQ_MP (@lem371918 B P) (@lem371917 B P)). Qed.
Lemma lem371924 {A : Type'} (P : type970 A) : term582 A P.
Proof. exact (@lem371923 A P). Qed.
Lemma lem371925 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : term589 A bad lt2.
Proof. exact (@lem371924 A (term590 A bad lt2)). Qed.
Lemma lem371926 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) : (term591 A bad lt2 x) = (term592 A bad x lt2).
Proof. exact (eq_refl (term591 A bad lt2 x)). Qed.
Lemma lem371927 (n : nat) : n = n.
Proof. exact (eq_refl n). Qed.
Lemma lem371928 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) : (term593 A bad lt2 x n) = (term594 A bad x lt2 n).
Proof. exact (MK_COMB (@lem371926 A bad x lt2) (@lem371927 n)). Qed.
Lemma lem371929 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) : (term594 A bad x lt2 n) = (term595 A bad x lt2 n).
Proof. exact (eq_refl (term594 A bad x lt2 n)). Qed.
Lemma lem371930 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) : (term593 A bad lt2 x n) = (term595 A bad x lt2 n).
Proof. exact (TRANS (@lem371928 A bad x lt2 n) (@lem371929 A bad x lt2 n)). Qed.
Lemma lem371931 {A : Type'} (y : A) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem371932 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) : (term596 A bad lt2 x n y) = (term597 A bad x lt2 n y).
Proof. exact (MK_COMB (@lem371930 A bad x lt2 n) (@lem371931 A y)). Qed.
Lemma lem371933 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) : (term597 A bad x lt2 n y) = (term598 A bad x lt2 n y).
Proof. exact (eq_refl (term597 A bad x lt2 n y)). Qed.
Lemma lem371934 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) : (term596 A bad lt2 x n y) = (term598 A bad x lt2 n y).
Proof. exact (TRANS (@lem371932 A bad x lt2 n y) (@lem371933 A bad x lt2 n y)). Qed.
Lemma lem371935 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem371936 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) : (term599 A bad lt2 x n y) = (term600 A bad x lt2 n y).
Proof. exact (MK_COMB (@lem371935) (@lem371934 A bad x lt2 n y)). Qed.
Lemma lem371937 {A : Type'} (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) : (term591 A bad lt2 g) = (term592 A bad g lt2).
Proof. exact (eq_refl (term591 A bad lt2 g)). Qed.
Lemma lem371938 (n : nat) : n = n.
Proof. exact (eq_refl n). Qed.
Lemma lem371939 {A : Type'} (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) : (term593 A bad lt2 g n) = (term594 A bad g lt2 n).
Proof. exact (MK_COMB (@lem371937 A bad g lt2) (@lem371938 n)). Qed.
Lemma lem371940 {A : Type'} (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) : (term594 A bad g lt2 n) = (term595 A bad g lt2 n).
Proof. exact (eq_refl (term594 A bad g lt2 n)). Qed.
Lemma lem371941 {A : Type'} (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) : (term593 A bad lt2 g n) = (term595 A bad g lt2 n).
Proof. exact (TRANS (@lem371939 A bad g lt2 n) (@lem371940 A bad g lt2 n)). Qed.
Lemma lem371942 {A : Type'} (y : A) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem371943 {A : Type'} (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) : (term596 A bad lt2 g n y) = (term597 A bad g lt2 n y).
Proof. exact (MK_COMB (@lem371941 A bad g lt2 n) (@lem371942 A y)). Qed.
Lemma lem371944 {A : Type'} (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) : (term597 A bad g lt2 n y) = (term598 A bad g lt2 n y).
Proof. exact (eq_refl (term597 A bad g lt2 n y)). Qed.
Lemma lem371945 {A : Type'} (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) : (term596 A bad lt2 g n y) = (term598 A bad g lt2 n y).
Proof. exact (TRANS (@lem371943 A bad g lt2 n y) (@lem371944 A bad g lt2 n y)). Qed.
Lemma lem371946 {A : Type'} (x : nat -> A) (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) : ((term596 A bad lt2 x n y) = (term596 A bad lt2 g n y)) = ((term598 A bad x lt2 n y) = (term598 A bad g lt2 n y)).
Proof. exact (MK_COMB (@lem371936 A bad x lt2 n y) (@lem371945 A bad g lt2 n y)). Qed.
Lemma lem371947 {A : Type'} (n : nat) (x : nat -> A) (g : nat -> A) : (term601 A n x g) = (term601 A n x g).
Proof. exact (eq_refl (term601 A n x g)). Qed.
Lemma lem371948 {A : Type'} (x : nat -> A) (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) : (term602 A x bad lt2 g n y) = (term603 A x bad g lt2 n y).
Proof. exact (MK_COMB (@lem371947 A n x g) (@lem371946 A x bad g lt2 n y)). Qed.
Lemma lem371949 {A : Type'} (x : nat -> A) (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) : (term604 A x bad lt2 g n) = (term605 A x bad g lt2 n).
Proof. exact (fun_ext (fun y : A => @lem371948 A x bad g lt2 n y)). Qed.
Lemma lem371950 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem371951 {A : Type'} (x : nat -> A) (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) : (term606 A x bad lt2 g n) = (term607 A x bad g lt2 n).
Proof. exact (MK_COMB (@lem371950 A) (@lem371949 A x bad g lt2 n)). Qed.
Lemma lem371952 {A : Type'} (x : nat -> A) (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) : (term608 A x bad lt2 g) = (term609 A x bad g lt2).
Proof. exact (fun_ext (fun n : nat => @lem371951 A x bad g lt2 n)). Qed.
Lemma lem371953 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem371954 {A : Type'} (x : nat -> A) (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) : (term610 A x bad lt2 g) = (term611 A x bad g lt2).
Proof. exact (MK_COMB (@lem371953) (@lem371952 A x bad g lt2)). Qed.
Lemma lem371955 {A : Type'} (x : nat -> A) (bad : type976 A) (lt2 : type1402 A) : (term612 A x bad lt2) = (term613 A x bad lt2).
Proof. exact (fun_ext (fun g : nat -> A => @lem371954 A x bad g lt2)). Qed.
Lemma lem371956 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem371957 {A : Type'} (x : nat -> A) (bad : type976 A) (lt2 : type1402 A) : (term614 A x bad lt2) = (term615 A x bad lt2).
Proof. exact (MK_COMB (@lem371956 A) (@lem371955 A x bad lt2)). Qed.
Lemma lem371958 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term616 A bad lt2) = (term617 A bad lt2).
Proof. exact (fun_ext (fun x : nat -> A => @lem371957 A x bad lt2)). Qed.
Lemma lem371959 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem371960 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term618 A bad lt2) = (term619 A bad lt2).
Proof. exact (MK_COMB (@lem371959 A) (@lem371958 A bad lt2)). Qed.
Lemma lem371961 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem371962 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term620 A bad lt2) = (term621 A bad lt2).
Proof. exact (MK_COMB (@lem371961) (@lem371960 A bad lt2)). Qed.
Lemma lem371963 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) : (term591 A bad lt2 x) = (term592 A bad x lt2).
Proof. exact (eq_refl (term591 A bad lt2 x)). Qed.
Lemma lem371964 (z : nat) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem371965 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (z : nat) : (term593 A bad lt2 x z) = (term594 A bad x lt2 z).
Proof. exact (MK_COMB (@lem371963 A bad x lt2) (@lem371964 z)). Qed.
Lemma lem371966 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (z : nat) : (term594 A bad x lt2 z) = (term595 A bad x lt2 z).
Proof. exact (eq_refl (term594 A bad x lt2 z)). Qed.
Lemma lem371967 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (z : nat) : (term593 A bad lt2 x z) = (term595 A bad x lt2 z).
Proof. exact (TRANS (@lem371965 A bad x lt2 z) (@lem371966 A bad x lt2 z)). Qed.
Lemma lem371968 {A : Type'} (x : nat -> A) (z : nat) : (x z) = (x z).
Proof. exact (eq_refl (x z)). Qed.
Lemma lem371969 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term622 A bad lt2 x z) = (term623 A bad lt2 x z).
Proof. exact (MK_COMB (@lem371967 A bad x lt2 z) (@lem371968 A x z)). Qed.
Lemma lem371970 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term623 A bad lt2 x z) = (term624 A bad lt2 x z).
Proof. exact (eq_refl (term623 A bad lt2 x z)). Qed.
Lemma lem371971 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term622 A bad lt2 x z) = (term624 A bad lt2 x z).
Proof. exact (TRANS (@lem371969 A bad lt2 x z) (@lem371970 A bad lt2 x z)). Qed.
Lemma lem371972 (z : nat) (n : nat) : (term625 z n) = (term625 z n).
Proof. exact (eq_refl (term625 z n)). Qed.
Lemma lem371973 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term626 A n bad lt2 x z) = (term627 A n bad lt2 x z).
Proof. exact (MK_COMB (@lem371972 z n) (@lem371971 A bad lt2 x z)). Qed.
Lemma lem371974 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term628 A n bad lt2 x) = (term629 A n bad lt2 x).
Proof. exact (fun_ext (fun z : nat => @lem371973 A n bad lt2 x z)). Qed.
Lemma lem371975 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem371976 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term630 A n bad lt2 x) = (term631 A n bad lt2 x).
Proof. exact (MK_COMB (@lem371975) (@lem371974 A n bad lt2 x)). Qed.
Lemma lem371977 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem371978 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term632 A n bad lt2 x) = (term633 A n bad lt2 x).
Proof. exact (MK_COMB (@lem371977) (@lem371976 A n bad lt2 x)). Qed.
Lemma lem371979 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) : (term591 A bad lt2 x) = (term592 A bad x lt2).
Proof. exact (eq_refl (term591 A bad lt2 x)). Qed.
Lemma lem371980 (n : nat) : n = n.
Proof. exact (eq_refl n). Qed.
Lemma lem371981 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) : (term593 A bad lt2 x n) = (term594 A bad x lt2 n).
Proof. exact (MK_COMB (@lem371979 A bad x lt2) (@lem371980 n)). Qed.
Lemma lem371982 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) : (term594 A bad x lt2 n) = (term595 A bad x lt2 n).
Proof. exact (eq_refl (term594 A bad x lt2 n)). Qed.
Lemma lem371983 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) : (term593 A bad lt2 x n) = (term595 A bad x lt2 n).
Proof. exact (TRANS (@lem371981 A bad x lt2 n) (@lem371982 A bad x lt2 n)). Qed.
Lemma lem371984 {A : Type'} (y : A) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem371985 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) : (term596 A bad lt2 x n y) = (term597 A bad x lt2 n y).
Proof. exact (MK_COMB (@lem371983 A bad x lt2 n) (@lem371984 A y)). Qed.
Lemma lem371986 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) : (term597 A bad x lt2 n y) = (term598 A bad x lt2 n y).
Proof. exact (eq_refl (term597 A bad x lt2 n y)). Qed.
Lemma lem371987 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) : (term596 A bad lt2 x n y) = (term598 A bad x lt2 n y).
Proof. exact (TRANS (@lem371985 A bad x lt2 n y) (@lem371986 A bad x lt2 n y)). Qed.
Lemma lem371988 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) : (term634 A bad lt2 x n) = (term595 A bad x lt2 n).
Proof. exact (fun_ext (fun y : A => @lem371987 A bad x lt2 n y)). Qed.
Lemma lem371989 {A : Type'} : (@ex A) = (@ex A).
Proof. exact (eq_refl (@ex A)). Qed.
Lemma lem371990 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) : (term635 A bad lt2 x n) = (term636 A bad x lt2 n).
Proof. exact (MK_COMB (@lem371989 A) (@lem371988 A bad x lt2 n)). Qed.
Lemma lem371991 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) : (term637 A bad lt2 x n) = (term638 A bad x lt2 n).
Proof. exact (MK_COMB (@lem371978 A n bad lt2 x) (@lem371990 A bad x lt2 n)). Qed.
Lemma lem371992 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) : (term639 A bad lt2 x) = (term640 A bad x lt2).
Proof. exact (fun_ext (fun n : nat => @lem371991 A bad x lt2 n)). Qed.
Lemma lem371993 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem371994 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) : (term641 A bad lt2 x) = (term642 A bad x lt2).
Proof. exact (MK_COMB (@lem371993) (@lem371992 A bad x lt2)). Qed.
Lemma lem371995 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term643 A bad lt2) = (term644 A bad lt2).
Proof. exact (fun_ext (fun x : nat -> A => @lem371994 A bad x lt2)). Qed.
Lemma lem371996 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem371997 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term645 A bad lt2) = (term646 A bad lt2).
Proof. exact (MK_COMB (@lem371996 A) (@lem371995 A bad lt2)). Qed.
Lemma lem371998 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term647 A bad lt2) = (term648 A bad lt2).
Proof. exact (MK_COMB (@lem371962 A bad lt2) (@lem371997 A bad lt2)). Qed.
Lemma lem371999 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem372000 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term649 A bad lt2) = (term650 A bad lt2).
Proof. exact (MK_COMB (@lem371999) (@lem371998 A bad lt2)). Qed.
Lemma lem372001 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) : (term591 A bad lt2 x) = (term592 A bad x lt2).
Proof. exact (eq_refl (term591 A bad lt2 x)). Qed.
Lemma lem372002 (n : nat) : n = n.
Proof. exact (eq_refl n). Qed.
Lemma lem372003 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) : (term593 A bad lt2 x n) = (term594 A bad x lt2 n).
Proof. exact (MK_COMB (@lem372001 A bad x lt2) (@lem372002 n)). Qed.
Lemma lem372004 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) : (term594 A bad x lt2 n) = (term595 A bad x lt2 n).
Proof. exact (eq_refl (term594 A bad x lt2 n)). Qed.
Lemma lem372005 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) : (term593 A bad lt2 x n) = (term595 A bad x lt2 n).
Proof. exact (TRANS (@lem372003 A bad x lt2 n) (@lem372004 A bad x lt2 n)). Qed.
Lemma lem372006 {A : Type'} (x : nat -> A) (n : nat) : (x n) = (x n).
Proof. exact (eq_refl (x n)). Qed.
Lemma lem372007 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (n : nat) : (term622 A bad lt2 x n) = (term623 A bad lt2 x n).
Proof. exact (MK_COMB (@lem372005 A bad x lt2 n) (@lem372006 A x n)). Qed.
Lemma lem372008 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (n : nat) : (term623 A bad lt2 x n) = (term624 A bad lt2 x n).
Proof. exact (eq_refl (term623 A bad lt2 x n)). Qed.
Lemma lem372009 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (n : nat) : (term622 A bad lt2 x n) = (term624 A bad lt2 x n).
Proof. exact (TRANS (@lem372007 A bad lt2 x n) (@lem372008 A bad lt2 x n)). Qed.
Lemma lem372010 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term651 A bad lt2 x) = (term652 A bad lt2 x).
Proof. exact (fun_ext (fun n : nat => @lem372009 A bad lt2 x n)). Qed.
Lemma lem372011 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem372012 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term653 A bad lt2 x) = (term654 A bad lt2 x).
Proof. exact (MK_COMB (@lem372011) (@lem372010 A bad lt2 x)). Qed.
Lemma lem372013 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term655 A bad lt2) = (term656 A bad lt2).
Proof. exact (fun_ext (fun x : nat -> A => @lem372012 A bad lt2 x)). Qed.
Lemma lem372014 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem372015 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term657 A bad lt2) = (term588 A bad lt2).
Proof. exact (MK_COMB (@lem372014 A) (@lem372013 A bad lt2)). Qed.
Lemma lem372016 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term589 A bad lt2) = (term658 A bad lt2).
Proof. exact (MK_COMB (@lem372000 A bad lt2) (@lem372015 A bad lt2)). Qed.
Lemma lem372017 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : term658 A bad lt2.
Proof. exact (EQ_MP (@lem372016 A bad lt2) (@lem371925 A bad lt2)). Qed.
Lemma lem372039 (p : Prop) (q : Prop) (p' : Prop) (q' : Prop) : term659 p q p' q'.
Proof. exact (fun h0 : p = p' => @lem4211 q q' p p' h0). Qed.
Lemma lem372040 (p : Prop) (q : Prop) (p' : Prop) : term660 p q p'.
Proof. exact (fun q' : Prop => @lem372039 p q p' q'). Qed.
Lemma lem372041 (p : Prop) (q : Prop) : term661 p q.
Proof. exact (fun p' : Prop => @lem372040 p q p'). Qed.
Lemma lem372042 {A : Type'} (x : nat -> A) (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) : term662 A x bad g lt2 n y.
Proof. exact (@lem372041 (term663 A n x g) ((term598 A bad x lt2 n y) = (term598 A bad g lt2 n y))). Qed.
Lemma lem372043 {A : Type'} (x : nat -> A) (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) (p' : Prop) : term664 A x bad g lt2 n y p'.
Proof. exact (@lem372042 A x bad g lt2 n y p'). Qed.
Lemma lem372044 {A : Type'} (x : nat -> A) (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) (p' : Prop) : (term664 A x bad g lt2 n y p') = (term665 A x bad g lt2 n y p').
Proof. exact (eq_refl (term664 A x bad g lt2 n y p')). Qed.
Lemma lem372045 {A : Type'} (x : nat -> A) (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) (p' : Prop) : term665 A x bad g lt2 n y p'.
Proof. exact (EQ_MP (@lem372044 A x bad g lt2 n y p') (@lem372043 A x bad g lt2 n y p')). Qed.
Lemma lem372046 {A : Type'} (x : nat -> A) (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) (p' : Prop) (q' : Prop) : term666 A x bad g lt2 n y p' q'.
Proof. exact (@lem372045 A x bad g lt2 n y p' q'). Qed.
Lemma lem372047 {A : Type'} (x : nat -> A) (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) (p' : Prop) (q' : Prop) : (term666 A x bad g lt2 n y p' q') = (term667 A x bad g lt2 n y p' q').
Proof. exact (eq_refl (term666 A x bad g lt2 n y p' q')). Qed.
Lemma lem372048 {A : Type'} (x : nat -> A) (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) (p' : Prop) (q' : Prop) : term667 A x bad g lt2 n y p' q'.
Proof. exact (EQ_MP (@lem372047 A x bad g lt2 n y p' q') (@lem372046 A x bad g lt2 n y p' q')). Qed.
Lemma lem372080 {A : Type'} (n : nat) (x : nat -> A) (g : nat -> A) : (term663 A n x g) = (term663 A n x g).
Proof. exact (eq_refl (term663 A n x g)). Qed.
Lemma lem372081 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : A) (n : nat) (x : nat -> A) (g : nat -> A) (q' : Prop) : term668 A bad lt2 y n x g q'.
Proof. exact (@lem372048 A x bad g lt2 n y (term663 A n x g) q'). Qed.
Lemma lem372082 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : A) (n : nat) (x : nat -> A) (g : nat -> A) (q' : Prop) : term669 A bad lt2 y n x g q'.
Proof. exact (@lem372081 A bad lt2 y n x g q' (@lem372080 A n x g)). Qed.
Lemma lem372083 {A : Type'} (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : term663 A n x g.
Proof. exact (h1). Qed.
Lemma lem372084 {A : Type'} (z : nat) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : term670 A n x g z.
Proof. exact (@lem372083 A n x g h1 z). Qed.
Lemma lem372085 {A : Type'} (n : nat) (x : nat -> A) (g : nat -> A) (z : nat) : (term670 A n x g z) = (term671 A n x g z).
Proof. exact (eq_refl (term670 A n x g z)). Qed.
Lemma lem372086 {A : Type'} (z : nat) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : term671 A n x g z.
Proof. exact (EQ_MP (@lem372085 A n x g z) (@lem372084 A z n x g h1)). Qed.
Lemma lem372087 (z : nat) (n : nat) (h1 : Peano.lt z n) : Peano.lt z n.
Proof. exact (h1). Qed.
Lemma lem372088 {A : Type'} (x : nat -> A) (g : nat -> A) (z : nat) (n : nat) (h1 : term663 A n x g) (h2 : Peano.lt z n) : (x z) = (g z).
Proof. exact (@lem372086 A z n x g h1 (@lem372087 z n h2)). Qed.
Lemma lem372113 (p : Prop) (q : Prop) (p' : Prop) (q' : Prop) : term659 p q p' q'.
Proof. exact (fun h0 : p = p' => @lem4211 q q' p p' h0). Qed.
Lemma lem372114 (p : Prop) (q : Prop) (p' : Prop) : term660 p q p'.
Proof. exact (fun q' : Prop => @lem372113 p q p' q'). Qed.
Lemma lem372115 (p : Prop) (q : Prop) : term661 p q.
Proof. exact (fun p' : Prop => @lem372114 p q p'). Qed.
Lemma lem372116 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : term672 A n y x k.
Proof. exact (@lem372115 (Peano.lt k n) ((y k) = (x k))). Qed.
Lemma lem372117 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) : term673 A n y x k p'.
Proof. exact (@lem372116 A n y x k p'). Qed.
Lemma lem372118 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) : (term673 A n y x k p') = (term674 A n y x k p').
Proof. exact (eq_refl (term673 A n y x k p')). Qed.
Lemma lem372119 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) : term674 A n y x k p'.
Proof. exact (EQ_MP (@lem372118 A n y x k p') (@lem372117 A n y x k p')). Qed.
Lemma lem372120 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) (q' : Prop) : term675 A n y x k p' q'.
Proof. exact (@lem372119 A n y x k p' q'). Qed.
Lemma lem372121 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) (q' : Prop) : (term675 A n y x k p' q') = (term676 A n y x k p' q').
Proof. exact (eq_refl (term675 A n y x k p' q')). Qed.
Lemma lem372122 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) (q' : Prop) : term676 A n y x k p' q'.
Proof. exact (EQ_MP (@lem372121 A n y x k p' q') (@lem372120 A n y x k p' q')). Qed.
Lemma lem372123 (k : nat) (n : nat) : (Peano.lt k n) = (Peano.lt k n).
Proof. exact (eq_refl (Peano.lt k n)). Qed.
Lemma lem372124 {A : Type'} (y : nat -> A) (x : nat -> A) (k : nat) (n : nat) (q' : Prop) : term677 A y x k n q'.
Proof. exact (@lem372122 A n y x k (Peano.lt k n) q'). Qed.
Lemma lem372125 {A : Type'} (y : nat -> A) (x : nat -> A) (k : nat) (n : nat) (q' : Prop) : term678 A y x k n q'.
Proof. exact (@lem372124 A y x k n q' (@lem372123 k n)). Qed.
Lemma lem372126 (k : nat) (n : nat) (h1 : Peano.lt k n) : Peano.lt k n.
Proof. exact (h1). Qed.
Lemma lem372127 (k : nat) (n : nat) : (Peano.lt k n) = ((Peano.lt k n) = True).
Proof. exact (@lem7 (Peano.lt k n)). Qed.
Lemma lem372132 {A : Type'} (z : nat) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : term671 A n x g z.
Proof. exact (fun h0 : Peano.lt z n => @lem372088 A x g z n h1 h0). Qed.
Lemma lem372133 {A : Type'} (k : nat) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : term671 A n x g k.
Proof. exact (@lem372132 A k n x g h1). Qed.
Lemma lem372135 (k : nat) (n : nat) (h1 : Peano.lt k n) : (Peano.lt k n) = True.
Proof. exact (EQ_MP (@lem372127 k n) (@lem372126 k n h1)). Qed.
Lemma lem372136 (k : nat) (n : nat) (h1 : Peano.lt k n) : True = (Peano.lt k n).
Proof. exact (SYM (@lem372135 k n h1)). Qed.
Lemma lem372137 (k : nat) (n : nat) (h1 : Peano.lt k n) : Peano.lt k n.
Proof. exact (EQ_MP (@lem372136 k n h1) (@lem0)). Qed.
Lemma lem372138 {A : Type'} (x : nat -> A) (g : nat -> A) (k : nat) (n : nat) (h1 : term663 A n x g) (h2 : Peano.lt k n) : (x k) = (g k).
Proof. exact (@lem372133 A k n x g h1 (@lem372137 k n h2)). Qed.
Lemma lem372139 {A : Type'} (y : nat -> A) (k : nat) : (term679 A y k) = (term679 A y k).
Proof. exact (eq_refl (term679 A y k)). Qed.
Lemma lem372140 {A : Type'} (y : nat -> A) (x : nat -> A) (g : nat -> A) (k : nat) (n : nat) (h1 : term663 A n x g) (h2 : Peano.lt k n) : ((y k) = (x k)) = ((y k) = (g k)).
Proof. exact (MK_COMB (@lem372139 A y k) (@lem372138 A x g k n h1 h2)). Qed.
Lemma lem372143 {A : Type'} (y : nat -> A) (k : nat) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : term680 A n x y g k.
Proof. exact (fun h0 : Peano.lt k n => @lem372140 A y x g k n h1 h0). Qed.
Lemma lem372144 {A : Type'} (x : nat -> A) (n : nat) (y : nat -> A) (g : nat -> A) (k : nat) : term681 A x n y g k.
Proof. exact (@lem372125 A y x k n ((y k) = (g k))). Qed.
Lemma lem372145 {A : Type'} (y : nat -> A) (k : nat) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : (term671 A n y x k) = (term671 A n y g k).
Proof. exact (@lem372144 A x n y g k (@lem372143 A y k n x g h1)). Qed.
Lemma lem372173 {A : Type'} (y : nat -> A) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : (term682 A n y x) = (term682 A n y g).
Proof. exact (fun_ext (fun k : nat => @lem372145 A y k n x g h1)). Qed.
Lemma lem372201 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem372202 {A : Type'} (y : nat -> A) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : (term663 A n y x) = (term663 A n y g).
Proof. exact (MK_COMB (@lem372201) (@lem372173 A y n x g h1)). Qed.
Lemma lem372234 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem372235 {A : Type'} (y : nat -> A) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : (term683 A n y x) = (term683 A n y g).
Proof. exact (MK_COMB (@lem372234) (@lem372202 A y n x g h1)). Qed.
Lemma lem372269 {A : Type'} (y : nat -> A) (n : nat) (y' : A) : ((y n) = y') = ((y n) = y').
Proof. exact (eq_refl ((y n) = y')). Qed.
Lemma lem372270 {A : Type'} (y : nat -> A) (y' : A) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : (term684 A x y n y') = (term684 A g y n y').
Proof. exact (MK_COMB (@lem372235 A y n x g h1) (@lem372269 A y n y')). Qed.
Lemma lem372306 {A : Type'} (bad : type976 A) (y : nat -> A) : (term685 A bad y) = (term685 A bad y).
Proof. exact (eq_refl (term685 A bad y)). Qed.
Lemma lem372307 {A : Type'} (bad : type976 A) (y : nat -> A) (y' : A) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : (term686 A bad x y n y') = (term686 A bad g y n y').
Proof. exact (MK_COMB (@lem372306 A bad y) (@lem372270 A y y' n x g h1)). Qed.
Lemma lem372345 {A : Type'} (bad : type976 A) (y : A) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : (term687 A bad x n y) = (term687 A bad g n y).
Proof. exact (fun_ext (fun y' : nat -> A => @lem372307 A bad y' y n x g h1)). Qed.
Lemma lem372383 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem372384 {A : Type'} (bad : type976 A) (y : A) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : (term688 A bad x n y) = (term688 A bad g n y).
Proof. exact (MK_COMB (@lem372383 A) (@lem372345 A bad y n x g h1)). Qed.
Lemma lem372426 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem372427 {A : Type'} (bad : type976 A) (y : A) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : (term689 A bad x n y) = (term689 A bad g n y).
Proof. exact (MK_COMB (@lem372426) (@lem372384 A bad y n x g h1)). Qed.
Lemma lem372476 (p : Prop) (q : Prop) (p' : Prop) (q' : Prop) : term659 p q p' q'.
Proof. exact (fun h0 : p = p' => @lem4211 q q' p p' h0). Qed.
Lemma lem372477 (p : Prop) (q : Prop) (p' : Prop) : term660 p q p'.
Proof. exact (fun q' : Prop => @lem372476 p q p' q'). Qed.
Lemma lem372478 (p : Prop) (q : Prop) : term661 p q.
Proof. exact (fun p' : Prop => @lem372477 p q p'). Qed.
Lemma lem372479 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (z : nat -> A) (n : nat) (y : A) : term690 A bad x lt2 z n y.
Proof. exact (@lem372478 (term691 A bad n z x) (term692 A lt2 z n y)). Qed.
Lemma lem372480 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (z : nat -> A) (n : nat) (y : A) (p' : Prop) : term693 A bad x lt2 z n y p'.
Proof. exact (@lem372479 A bad x lt2 z n y p'). Qed.
Lemma lem372481 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (z : nat -> A) (n : nat) (y : A) (p' : Prop) : (term693 A bad x lt2 z n y p') = (term694 A bad x lt2 z n y p').
Proof. exact (eq_refl (term693 A bad x lt2 z n y p')). Qed.
Lemma lem372482 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (z : nat -> A) (n : nat) (y : A) (p' : Prop) : term694 A bad x lt2 z n y p'.
Proof. exact (EQ_MP (@lem372481 A bad x lt2 z n y p') (@lem372480 A bad x lt2 z n y p')). Qed.
Lemma lem372483 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (z : nat -> A) (n : nat) (y : A) (p' : Prop) (q' : Prop) : term695 A bad x lt2 z n y p' q'.
Proof. exact (@lem372482 A bad x lt2 z n y p' q'). Qed.
Lemma lem372484 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (z : nat -> A) (n : nat) (y : A) (p' : Prop) (q' : Prop) : (term695 A bad x lt2 z n y p' q') = (term696 A bad x lt2 z n y p' q').
Proof. exact (eq_refl (term695 A bad x lt2 z n y p' q')). Qed.
Lemma lem372485 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (z : nat -> A) (n : nat) (y : A) (p' : Prop) (q' : Prop) : term696 A bad x lt2 z n y p' q'.
Proof. exact (EQ_MP (@lem372484 A bad x lt2 z n y p' q') (@lem372483 A bad x lt2 z n y p' q')). Qed.
Lemma lem372495 (p : Prop) (q : Prop) (p' : Prop) (q' : Prop) : term659 p q p' q'.
Proof. exact (fun h0 : p = p' => @lem4211 q q' p p' h0). Qed.
Lemma lem372496 (p : Prop) (q : Prop) (p' : Prop) : term660 p q p'.
Proof. exact (fun q' : Prop => @lem372495 p q p' q'). Qed.
Lemma lem372497 (p : Prop) (q : Prop) : term661 p q.
Proof. exact (fun p' : Prop => @lem372496 p q p'). Qed.
Lemma lem372498 {A : Type'} (n : nat) (z : nat -> A) (x : nat -> A) (k : nat) : term672 A n z x k.
Proof. exact (@lem372497 (Peano.lt k n) ((z k) = (x k))). Qed.
Lemma lem372499 {A : Type'} (n : nat) (z : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) : term673 A n z x k p'.
Proof. exact (@lem372498 A n z x k p'). Qed.
Lemma lem372500 {A : Type'} (n : nat) (z : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) : (term673 A n z x k p') = (term674 A n z x k p').
Proof. exact (eq_refl (term673 A n z x k p')). Qed.
Lemma lem372501 {A : Type'} (n : nat) (z : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) : term674 A n z x k p'.
Proof. exact (EQ_MP (@lem372500 A n z x k p') (@lem372499 A n z x k p')). Qed.
Lemma lem372502 {A : Type'} (n : nat) (z : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) (q' : Prop) : term675 A n z x k p' q'.
Proof. exact (@lem372501 A n z x k p' q'). Qed.
Lemma lem372503 {A : Type'} (n : nat) (z : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) (q' : Prop) : (term675 A n z x k p' q') = (term676 A n z x k p' q').
Proof. exact (eq_refl (term675 A n z x k p' q')). Qed.
Lemma lem372504 {A : Type'} (n : nat) (z : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) (q' : Prop) : term676 A n z x k p' q'.
Proof. exact (EQ_MP (@lem372503 A n z x k p' q') (@lem372502 A n z x k p' q')). Qed.
Lemma lem372505 (k : nat) (n : nat) : (Peano.lt k n) = (Peano.lt k n).
Proof. exact (eq_refl (Peano.lt k n)). Qed.
Lemma lem372506 {A : Type'} (z : nat -> A) (x : nat -> A) (k : nat) (n : nat) (q' : Prop) : term677 A z x k n q'.
Proof. exact (@lem372504 A n z x k (Peano.lt k n) q'). Qed.
Lemma lem372507 {A : Type'} (z : nat -> A) (x : nat -> A) (k : nat) (n : nat) (q' : Prop) : term678 A z x k n q'.
Proof. exact (@lem372506 A z x k n q' (@lem372505 k n)). Qed.
Lemma lem372508 (k : nat) (n : nat) (h1 : Peano.lt k n) : Peano.lt k n.
Proof. exact (h1). Qed.
Lemma lem372509 (k : nat) (n : nat) : (Peano.lt k n) = ((Peano.lt k n) = True).
Proof. exact (@lem7 (Peano.lt k n)). Qed.
Lemma lem372514 {A : Type'} (z : nat) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : term671 A n x g z.
Proof. exact (fun h0 : Peano.lt z n => @lem372088 A x g z n h1 h0). Qed.
Lemma lem372515 {A : Type'} (k : nat) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : term671 A n x g k.
Proof. exact (@lem372514 A k n x g h1). Qed.
Lemma lem372517 (k : nat) (n : nat) (h1 : Peano.lt k n) : (Peano.lt k n) = True.
Proof. exact (EQ_MP (@lem372509 k n) (@lem372508 k n h1)). Qed.
Lemma lem372518 (k : nat) (n : nat) (h1 : Peano.lt k n) : True = (Peano.lt k n).
Proof. exact (SYM (@lem372517 k n h1)). Qed.
Lemma lem372519 (k : nat) (n : nat) (h1 : Peano.lt k n) : Peano.lt k n.
Proof. exact (EQ_MP (@lem372518 k n h1) (@lem0)). Qed.
Lemma lem372520 {A : Type'} (x : nat -> A) (g : nat -> A) (k : nat) (n : nat) (h1 : term663 A n x g) (h2 : Peano.lt k n) : (x k) = (g k).
Proof. exact (@lem372515 A k n x g h1 (@lem372519 k n h2)). Qed.
Lemma lem372521 {A : Type'} (z : nat -> A) (k : nat) : (term679 A z k) = (term679 A z k).
Proof. exact (eq_refl (term679 A z k)). Qed.
Lemma lem372522 {A : Type'} (z : nat -> A) (x : nat -> A) (g : nat -> A) (k : nat) (n : nat) (h1 : term663 A n x g) (h2 : Peano.lt k n) : ((z k) = (x k)) = ((z k) = (g k)).
Proof. exact (MK_COMB (@lem372521 A z k) (@lem372520 A x g k n h1 h2)). Qed.
Lemma lem372525 {A : Type'} (z : nat -> A) (k : nat) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : term680 A n x z g k.
Proof. exact (fun h0 : Peano.lt k n => @lem372522 A z x g k n h1 h0). Qed.
Lemma lem372526 {A : Type'} (x : nat -> A) (n : nat) (z : nat -> A) (g : nat -> A) (k : nat) : term681 A x n z g k.
Proof. exact (@lem372507 A z x k n ((z k) = (g k))). Qed.
Lemma lem372527 {A : Type'} (z : nat -> A) (k : nat) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : (term671 A n z x k) = (term671 A n z g k).
Proof. exact (@lem372526 A x n z g k (@lem372525 A z k n x g h1)). Qed.
Lemma lem372555 {A : Type'} (z : nat -> A) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : (term682 A n z x) = (term682 A n z g).
Proof. exact (fun_ext (fun k : nat => @lem372527 A z k n x g h1)). Qed.
Lemma lem372583 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem372584 {A : Type'} (z : nat -> A) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : (term663 A n z x) = (term663 A n z g).
Proof. exact (MK_COMB (@lem372583) (@lem372555 A z n x g h1)). Qed.
Lemma lem372616 {A : Type'} (bad : type976 A) (z : nat -> A) : (term685 A bad z) = (term685 A bad z).
Proof. exact (eq_refl (term685 A bad z)). Qed.
Lemma lem372617 {A : Type'} (bad : type976 A) (z : nat -> A) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : (term691 A bad n z x) = (term691 A bad n z g).
Proof. exact (MK_COMB (@lem372616 A bad z) (@lem372584 A z n x g h1)). Qed.
Lemma lem372651 {A : Type'} (x : nat -> A) (lt2 : type1402 A) (y : A) (bad : type976 A) (n : nat) (z : nat -> A) (g : nat -> A) (q' : Prop) : term697 A x lt2 y bad n z g q'.
Proof. exact (@lem372485 A bad x lt2 z n y (term691 A bad n z g) q'). Qed.
Lemma lem372652 {A : Type'} (lt2 : type1402 A) (y : A) (bad : type976 A) (z : nat -> A) (q' : Prop) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : term698 A x lt2 y bad n z g q'.
Proof. exact (@lem372651 A x lt2 y bad n z g q' (@lem372617 A bad z n x g h1)). Qed.
Lemma lem372673 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (n : nat) (y : A) : (term692 A lt2 z n y) = (term692 A lt2 z n y).
Proof. exact (eq_refl (term692 A lt2 z n y)). Qed.
Lemma lem372674 {A : Type'} (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (z : nat -> A) (n : nat) (y : A) : term699 A bad g lt2 z n y.
Proof. exact (fun h0 : term691 A bad n z g => @lem372673 A lt2 z n y). Qed.
Lemma lem372675 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : A) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : term700 A x bad g lt2 z n y.
Proof. exact (@lem372652 A lt2 y bad z (term692 A lt2 z n y) n x g h1). Qed.
Lemma lem372676 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : A) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : (term701 A bad x lt2 z n y) = (term701 A bad g lt2 z n y).
Proof. exact (@lem372675 A bad lt2 z y n x g h1 (@lem372674 A bad g lt2 z n y)). Qed.
Lemma lem372783 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : A) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : (term702 A bad x lt2 n y) = (term702 A bad g lt2 n y).
Proof. exact (fun_ext (fun z : nat -> A => @lem372676 A bad lt2 z y n x g h1)). Qed.
Lemma lem372890 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem372891 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : A) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : (term703 A bad x lt2 n y) = (term703 A bad g lt2 n y).
Proof. exact (MK_COMB (@lem372890 A) (@lem372783 A bad lt2 y n x g h1)). Qed.
Lemma lem373002 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : A) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : (term598 A bad x lt2 n y) = (term598 A bad g lt2 n y).
Proof. exact (MK_COMB (@lem372427 A bad y n x g h1) (@lem372891 A bad lt2 y n x g h1)). Qed.
Lemma lem373156 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem373157 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : A) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : (term600 A bad x lt2 n y) = (term600 A bad g lt2 n y).
Proof. exact (MK_COMB (@lem373156) (@lem373002 A bad lt2 y n x g h1)). Qed.
Lemma lem373464 {A : Type'} (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) : (term598 A bad g lt2 n y) = (term598 A bad g lt2 n y).
Proof. exact (eq_refl (term598 A bad g lt2 n y)). Qed.
Lemma lem373465 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : A) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : ((term598 A bad x lt2 n y) = (term598 A bad g lt2 n y)) = ((term598 A bad g lt2 n y) = (term598 A bad g lt2 n y)).
Proof. exact (MK_COMB (@lem373157 A bad lt2 y n x g h1) (@lem373464 A bad g lt2 n y)). Qed.
Lemma lem373467 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem1863 A x) (@lem1862 A x)). Qed.
Lemma lem373468 (x : Prop) : (x = x) = True.
Proof. exact (@lem373467 Prop x). Qed.
Lemma lem373469 {A : Type'} (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) : ((term598 A bad g lt2 n y) = (term598 A bad g lt2 n y)) = True.
Proof. exact (@lem373468 (term598 A bad g lt2 n y)). Qed.
Lemma lem373470 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : A) (n : nat) (x : nat -> A) (g : nat -> A) (h1 : term663 A n x g) : ((term598 A bad x lt2 n y) = (term598 A bad g lt2 n y)) = True.
Proof. exact (TRANS (@lem373465 A bad lt2 y n x g h1) (@lem373469 A bad g lt2 n y)). Qed.
Lemma lem373471 {A : Type'} (x : nat -> A) (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) : term704 A x bad g lt2 n y.
Proof. exact (fun h0 : term663 A n x g => @lem373470 A bad lt2 y n x g h0). Qed.
Lemma lem373472 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : A) (n : nat) (x : nat -> A) (g : nat -> A) : term705 A bad lt2 y n x g.
Proof. exact (@lem372082 A bad lt2 y n x g True). Qed.
Lemma lem373473 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : A) (n : nat) (x : nat -> A) (g : nat -> A) : (term603 A x bad g lt2 n y) = (term706 A n x g).
Proof. exact (@lem373472 A bad lt2 y n x g (@lem373471 A x bad g lt2 n y)). Qed.
Lemma lem373475 (t : Prop) : (t -> True) = True.
Proof. exact (proj1 (@lem1821 t)). Qed.
Lemma lem373476 {A : Type'} (n : nat) (x : nat -> A) (g : nat -> A) : (term706 A n x g) = True.
Proof. exact (@lem373475 (term663 A n x g)). Qed.
Lemma lem373477 {A : Type'} (x : nat -> A) (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) : (term603 A x bad g lt2 n y) = True.
Proof. exact (TRANS (@lem373473 A bad lt2 y n x g) (@lem373476 A n x g)). Qed.
Lemma lem373478 {A : Type'} (x : nat -> A) (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) : (term605 A x bad g lt2 n) = (term707 A).
Proof. exact (fun_ext (fun y : A => @lem373477 A x bad g lt2 n y)). Qed.
Lemma lem373479 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem373480 {A : Type'} (x : nat -> A) (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) : (term607 A x bad g lt2 n) = (term708 A).
Proof. exact (MK_COMB (@lem373479 A) (@lem373478 A x bad g lt2 n)). Qed.
Lemma lem373482 {A : Type'} (t : Prop) : (term709 A t) = t.
Proof. exact (EQ_MP (@lem1816 A t) (@lem1815 A t)). Qed.
Lemma lem373483 {A : Type'} (t : Prop) : (term709 A t) = t.
Proof. exact (@lem373482 A t). Qed.
Lemma lem373484 {A : Type'} : (term708 A) = True.
Proof. exact (@lem373483 A True). Qed.
Lemma lem373485 {A : Type'} (x : nat -> A) (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) (n : nat) : (term607 A x bad g lt2 n) = True.
Proof. exact (TRANS (@lem373480 A x bad g lt2 n) (@lem373484 A)). Qed.
Lemma lem373486 {A : Type'} (x : nat -> A) (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) : (term609 A x bad g lt2) = term710.
Proof. exact (fun_ext (fun n : nat => @lem373485 A x bad g lt2 n)). Qed.
Lemma lem373487 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem373488 {A : Type'} (x : nat -> A) (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) : (term611 A x bad g lt2) = term711.
Proof. exact (MK_COMB (@lem373487) (@lem373486 A x bad g lt2)). Qed.
Lemma lem373490 {A : Type'} (t : Prop) : (term709 A t) = t.
Proof. exact (EQ_MP (@lem1816 A t) (@lem1815 A t)). Qed.
Lemma lem373491 (t : Prop) : (term712 t) = t.
Proof. exact (@lem373490 nat t). Qed.
Lemma lem373492 : term711 = True.
Proof. exact (@lem373491 True). Qed.
Lemma lem373493 {A : Type'} (x : nat -> A) (bad : type976 A) (g : nat -> A) (lt2 : type1402 A) : (term611 A x bad g lt2) = True.
Proof. exact (TRANS (@lem373488 A x bad g lt2) (@lem373492)). Qed.
Lemma lem373494 {A : Type'} (x : nat -> A) (bad : type976 A) (lt2 : type1402 A) : (term613 A x bad lt2) = (term713 A).
Proof. exact (fun_ext (fun g : nat -> A => @lem373493 A x bad g lt2)). Qed.
Lemma lem373495 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem373496 {A : Type'} (x : nat -> A) (bad : type976 A) (lt2 : type1402 A) : (term615 A x bad lt2) = (term714 A).
Proof. exact (MK_COMB (@lem373495 A) (@lem373494 A x bad lt2)). Qed.
Lemma lem373498 {A : Type'} (t : Prop) : (term709 A t) = t.
Proof. exact (EQ_MP (@lem1816 A t) (@lem1815 A t)). Qed.
Lemma lem373499 {A : Type'} (t : Prop) : (term715 A t) = t.
Proof. exact (@lem373498 (nat -> A) t). Qed.
Lemma lem373500 {A : Type'} : (term714 A) = True.
Proof. exact (@lem373499 A True). Qed.
Lemma lem373501 {A : Type'} (x : nat -> A) (bad : type976 A) (lt2 : type1402 A) : (term615 A x bad lt2) = True.
Proof. exact (TRANS (@lem373496 A x bad lt2) (@lem373500 A)). Qed.
Lemma lem373502 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term617 A bad lt2) = (term713 A).
Proof. exact (fun_ext (fun x : nat -> A => @lem373501 A x bad lt2)). Qed.
Lemma lem373503 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem373504 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term619 A bad lt2) = (term714 A).
Proof. exact (MK_COMB (@lem373503 A) (@lem373502 A bad lt2)). Qed.
Lemma lem373506 {A : Type'} (t : Prop) : (term709 A t) = t.
Proof. exact (EQ_MP (@lem1816 A t) (@lem1815 A t)). Qed.
Lemma lem373507 {A : Type'} (t : Prop) : (term715 A t) = t.
Proof. exact (@lem373506 (nat -> A) t). Qed.
Lemma lem373508 {A : Type'} : (term714 A) = True.
Proof. exact (@lem373507 A True). Qed.
Lemma lem373509 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term619 A bad lt2) = True.
Proof. exact (TRANS (@lem373504 A bad lt2) (@lem373508 A)). Qed.
Lemma lem373510 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem373511 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term621 A bad lt2) = (and True).
Proof. exact (MK_COMB (@lem373510) (@lem373509 A bad lt2)). Qed.
Lemma lem374552 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term646 A bad lt2) = (term646 A bad lt2).
Proof. exact (eq_refl (term646 A bad lt2)). Qed.
Lemma lem374553 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term648 A bad lt2) = (term716 A bad lt2).
Proof. exact (MK_COMB (@lem373511 A bad lt2) (@lem374552 A bad lt2)). Qed.
Lemma lem374555 (t : Prop) : (True /\ t) = t.
Proof. exact (proj1 (@lem1842 t)). Qed.
Lemma lem374556 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term716 A bad lt2) = (term646 A bad lt2).
Proof. exact (@lem374555 (term646 A bad lt2)). Qed.
Lemma lem375597 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term648 A bad lt2) = (term646 A bad lt2).
Proof. exact (TRANS (@lem374553 A bad lt2) (@lem374556 A bad lt2)). Qed.
Lemma lem375598 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term646 A bad lt2) = (term648 A bad lt2).
Proof. exact (SYM (@lem375597 A bad lt2)). Qed.
Lemma lem375600 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : term572 A P Q.
Proof. exact (@lem371897 A P Q (@lem7401 A P Q)). Qed.
Lemma lem375601 {A : Type'} (P : type976 A) (Q : type976 A) : term717 A P Q.
Proof. exact (@lem375600 (nat -> A) P Q). Qed.
Lemma lem375602 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : term718 A bad lt2.
Proof. exact (@lem375601 A (term656 A bad lt2) (term719 A bad lt2)). Qed.
Lemma lem375603 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term720 A bad lt2 y) = (term654 A bad lt2 y).
Proof. exact (eq_refl (term720 A bad lt2 y)). Qed.
Lemma lem375604 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem375605 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term721 A bad lt2 y) = (term722 A bad lt2 y).
Proof. exact (MK_COMB (@lem375604) (@lem375603 A bad lt2 y)). Qed.
Lemma lem375606 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term723 A bad lt2 y) = (term724 A bad lt2 y).
Proof. exact (eq_refl (term723 A bad lt2 y)). Qed.
Lemma lem375607 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term725 A bad lt2 y) = (term726 A bad lt2 y).
Proof. exact (MK_COMB (@lem375605 A bad lt2 y) (@lem375606 A bad lt2 y)). Qed.
Lemma lem375608 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term727 A bad lt2) = (term728 A bad lt2).
Proof. exact (fun_ext (fun y : nat -> A => @lem375607 A bad lt2 y)). Qed.
Lemma lem375609 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem375610 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term729 A bad lt2) = (term730 A bad lt2).
Proof. exact (MK_COMB (@lem375609 A) (@lem375608 A bad lt2)). Qed.
Lemma lem375611 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem375612 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term731 A bad lt2) = (term732 A bad lt2).
Proof. exact (MK_COMB (@lem375611) (@lem375610 A bad lt2)). Qed.
Lemma lem375613 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term720 A bad lt2 y) = (term654 A bad lt2 y).
Proof. exact (eq_refl (term720 A bad lt2 y)). Qed.
Lemma lem375614 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term733 A bad lt2) = (term656 A bad lt2).
Proof. exact (fun_ext (fun y : nat -> A => @lem375613 A bad lt2 y)). Qed.
Lemma lem375615 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem375616 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term734 A bad lt2) = (term588 A bad lt2).
Proof. exact (MK_COMB (@lem375615 A) (@lem375614 A bad lt2)). Qed.
Lemma lem375617 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem375618 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term735 A bad lt2) = (term736 A bad lt2).
Proof. exact (MK_COMB (@lem375617) (@lem375616 A bad lt2)). Qed.
Lemma lem375619 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term723 A bad lt2 y) = (term724 A bad lt2 y).
Proof. exact (eq_refl (term723 A bad lt2 y)). Qed.
Lemma lem375620 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term737 A bad lt2) = (term719 A bad lt2).
Proof. exact (fun_ext (fun y : nat -> A => @lem375619 A bad lt2 y)). Qed.
Lemma lem375621 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem375622 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term738 A bad lt2) = (term739 A bad lt2).
Proof. exact (MK_COMB (@lem375621 A) (@lem375620 A bad lt2)). Qed.
Lemma lem375623 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term740 A bad lt2) = (term741 A bad lt2).
Proof. exact (MK_COMB (@lem375618 A bad lt2) (@lem375622 A bad lt2)). Qed.
Lemma lem375624 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term718 A bad lt2) = (term742 A bad lt2).
Proof. exact (MK_COMB (@lem375612 A bad lt2) (@lem375623 A bad lt2)). Qed.
Lemma lem375625 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : term742 A bad lt2.
Proof. exact (EQ_MP (@lem375624 A bad lt2) (@lem375602 A bad lt2)). Qed.
Lemma lem375628 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term743 A bad lt2) = (term743 A bad lt2).
Proof. exact (eq_refl (term743 A bad lt2)). Qed.
Lemma lem375629 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term743 A bad lt2) = (term742 A bad lt2).
Proof. exact (eq_refl (term743 A bad lt2)). Qed.
Lemma lem375630 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term744 A bad lt2) = (term744 A bad lt2).
Proof. exact (eq_refl (term744 A bad lt2)). Qed.
Lemma lem375631 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : ((term743 A bad lt2) = (term743 A bad lt2)) = ((term743 A bad lt2) = (term742 A bad lt2)).
Proof. exact (MK_COMB (@lem375630 A bad lt2) (@lem375629 A bad lt2)). Qed.
Lemma lem375632 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term743 A bad lt2) = (term742 A bad lt2).
Proof. exact (eq_refl (term743 A bad lt2)). Qed.
Lemma lem375633 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem375634 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term744 A bad lt2) = (term745 A bad lt2).
Proof. exact (MK_COMB (@lem375633) (@lem375632 A bad lt2)). Qed.
Lemma lem375635 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term742 A bad lt2) = (term742 A bad lt2).
Proof. exact (eq_refl (term742 A bad lt2)). Qed.
Lemma lem375636 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : ((term743 A bad lt2) = (term742 A bad lt2)) = ((term742 A bad lt2) = (term742 A bad lt2)).
Proof. exact (MK_COMB (@lem375634 A bad lt2) (@lem375635 A bad lt2)). Qed.
Lemma lem375637 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : ((term743 A bad lt2) = (term743 A bad lt2)) = ((term742 A bad lt2) = (term742 A bad lt2)).
Proof. exact (TRANS (@lem375631 A bad lt2) (@lem375636 A bad lt2)). Qed.
Lemma lem375638 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term742 A bad lt2) = (term742 A bad lt2).
Proof. exact (EQ_MP (@lem375637 A bad lt2) (@lem375628 A bad lt2)). Qed.
Lemma lem375639 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : term742 A bad lt2.
Proof. exact (EQ_MP (@lem375638 A bad lt2) (@lem375625 A bad lt2)). Qed.
Lemma lem375641 (p : Prop) : p = (term24 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem375642 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term730 A bad lt2) = (term746 A bad lt2).
Proof. exact (@lem375641 (term730 A bad lt2)). Qed.
Lemma lem375643 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term746 A bad lt2) = (term730 A bad lt2).
Proof. exact (SYM (@lem375642 A bad lt2)). Qed.
Lemma lem375644 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (h1 : term747 A bad lt2) : term747 A bad lt2.
Proof. exact (h1). Qed.
Lemma lem375647 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (h1 : term748 A bad lt2) : term748 A bad lt2.
Proof. exact (h1). Qed.
Lemma lem375648 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : term749 A bad lt2.
Proof. exact (fun h0 : term748 A bad lt2 => @lem375647 A bad lt2 h0). Qed.
Lemma lem375649 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (h1 : term749 A bad lt2) : term749 A bad lt2.
Proof. exact (h1). Qed.
Lemma lem375650 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (h1 : term748 A bad lt2) : term748 A bad lt2.
Proof. exact (h1). Qed.
Lemma lem375651 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (h1 : term748 A bad lt2) (h2 : term749 A bad lt2) : term748 A bad lt2.
Proof. exact (@lem375649 A bad lt2 h2 (@lem375650 A bad lt2 h1)). Qed.
Lemma lem375652 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (h1 : term748 A bad lt2) : term750 A bad lt2.
Proof. exact (fun h0 : term749 A bad lt2 => @lem375651 A bad lt2 h1 h0). Qed.
Lemma lem375653 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (h1 : term749 A bad lt2) : term749 A bad lt2.
Proof. exact (h1). Qed.
Lemma lem375654 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (h1 : term748 A bad lt2) (h2 : term749 A bad lt2) : term748 A bad lt2.
Proof. exact (@lem375652 A bad lt2 h1 (@lem375653 A bad lt2 h2)). Qed.
Lemma lem375655 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (h1 : term749 A bad lt2) : term749 A bad lt2.
Proof. exact (fun h0 : term748 A bad lt2 => @lem375654 A bad lt2 h0 h1). Qed.
Lemma lem375656 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : term751 A bad lt2.
Proof. exact (fun h0 : term749 A bad lt2 => @lem375655 A bad lt2 h0). Qed.
Lemma lem375659 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : term749 A bad lt2.
Proof. exact (@lem375656 A bad lt2 (@lem375648 A bad lt2)). Qed.
Lemma lem375660 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : term749 A bad lt2.
Proof. exact (@lem375659 A bad lt2). Qed.
Lemma lem375702 (t : Prop) : (t -> False) = (~ t).
Proof. exact (proj2 (@lem16474 t)). Qed.
Lemma lem375703 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term746 A bad lt2) = (term752 A bad lt2).
Proof. exact (@lem375702 (term747 A bad lt2)). Qed.
Lemma lem375705 (t : Prop) : (term33 t) = t.
Proof. exact (EQ_MP (@lem16507 t) (@lem16506 t)). Qed.
Lemma lem375706 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term752 A bad lt2) = (term730 A bad lt2).
Proof. exact (@lem375705 (term730 A bad lt2)). Qed.
Lemma lem375711 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term746 A bad lt2) = (term730 A bad lt2).
Proof. exact (TRANS (@lem375703 A bad lt2) (@lem375706 A bad lt2)). Qed.
Lemma lem375715 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term753 A P Q) = (term754 A P Q).
Proof. exact (EQ_MP (@lem16446 A P Q) (@lem16445 A P Q)). Qed.
Lemma lem375716 (P : nat -> Prop) (Q : nat -> Prop) : (term755 P Q) = (term756 P Q).
Proof. exact (@lem375715 nat P Q). Qed.
Lemma lem375717 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term757 A bad lt2 y) = (term758 A bad lt2 y).
Proof. exact (@lem375716 (term759 A bad y) (term760 A bad lt2 y)). Qed.
Lemma lem375718 {A : Type'} (bad : type976 A) (y : nat -> A) (n : nat) : (term761 A bad y n) = (term762 A bad y n).
Proof. exact (eq_refl (term761 A bad y n)). Qed.
Lemma lem375719 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem375720 {A : Type'} (bad : type976 A) (y : nat -> A) (n : nat) : (term763 A bad y n) = (term764 A bad y n).
Proof. exact (MK_COMB (@lem375719) (@lem375718 A bad y n)). Qed.
Lemma lem375721 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term765 A bad lt2 y n) = (term766 A bad lt2 y n).
Proof. exact (eq_refl (term765 A bad lt2 y n)). Qed.
Lemma lem375722 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term767 A bad lt2 y n) = (term624 A bad lt2 y n).
Proof. exact (MK_COMB (@lem375720 A bad y n) (@lem375721 A bad lt2 y n)). Qed.
Lemma lem375723 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term768 A bad lt2 y) = (term652 A bad lt2 y).
Proof. exact (fun_ext (fun n : nat => @lem375722 A bad lt2 y n)). Qed.
Lemma lem375724 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem375725 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term757 A bad lt2 y) = (term654 A bad lt2 y).
Proof. exact (MK_COMB (@lem375724) (@lem375723 A bad lt2 y)). Qed.
Lemma lem375726 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem375727 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term769 A bad lt2 y) = (term770 A bad lt2 y).
Proof. exact (MK_COMB (@lem375726) (@lem375725 A bad lt2 y)). Qed.
Lemma lem375728 {A : Type'} (bad : type976 A) (y : nat -> A) (n : nat) : (term761 A bad y n) = (term762 A bad y n).
Proof. exact (eq_refl (term761 A bad y n)). Qed.
Lemma lem375729 {A : Type'} (bad : type976 A) (y : nat -> A) : (term771 A bad y) = (term759 A bad y).
Proof. exact (fun_ext (fun n : nat => @lem375728 A bad y n)). Qed.
Lemma lem375730 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem375731 {A : Type'} (bad : type976 A) (y : nat -> A) : (term772 A bad y) = (term773 A bad y).
Proof. exact (MK_COMB (@lem375730) (@lem375729 A bad y)). Qed.
Lemma lem375732 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem375733 {A : Type'} (bad : type976 A) (y : nat -> A) : (term774 A bad y) = (term775 A bad y).
Proof. exact (MK_COMB (@lem375732) (@lem375731 A bad y)). Qed.
Lemma lem375734 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term765 A bad lt2 y n) = (term766 A bad lt2 y n).
Proof. exact (eq_refl (term765 A bad lt2 y n)). Qed.
Lemma lem375735 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term776 A bad lt2 y) = (term760 A bad lt2 y).
Proof. exact (fun_ext (fun n : nat => @lem375734 A bad lt2 y n)). Qed.
Lemma lem375736 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem375737 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term777 A bad lt2 y) = (term778 A bad lt2 y).
Proof. exact (MK_COMB (@lem375736) (@lem375735 A bad lt2 y)). Qed.
Lemma lem375738 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term758 A bad lt2 y) = (term779 A bad lt2 y).
Proof. exact (MK_COMB (@lem375733 A bad y) (@lem375737 A bad lt2 y)). Qed.
Lemma lem375739 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : ((term757 A bad lt2 y) = (term758 A bad lt2 y)) = ((term654 A bad lt2 y) = (term779 A bad lt2 y)).
Proof. exact (MK_COMB (@lem375727 A bad lt2 y) (@lem375738 A bad lt2 y)). Qed.
Lemma lem375740 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term654 A bad lt2 y) = (term779 A bad lt2 y).
Proof. exact (EQ_MP (@lem375739 A bad lt2 y) (@lem375717 A bad lt2 y)). Qed.
Lemma lem375803 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem375804 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term722 A bad lt2 y) = (term780 A bad lt2 y).
Proof. exact (MK_COMB (@lem375803) (@lem375740 A bad lt2 y)). Qed.
Lemma lem375825 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term724 A bad lt2 y) = (term724 A bad lt2 y).
Proof. exact (eq_refl (term724 A bad lt2 y)). Qed.
Lemma lem375826 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term726 A bad lt2 y) = (term781 A bad lt2 y).
Proof. exact (MK_COMB (@lem375804 A bad lt2 y) (@lem375825 A bad lt2 y)). Qed.
Lemma lem375829 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term728 A bad lt2) = (term782 A bad lt2).
Proof. exact (fun_ext (fun y : nat -> A => @lem375826 A bad lt2 y)). Qed.
Lemma lem375830 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem375831 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term730 A bad lt2) = (term783 A bad lt2).
Proof. exact (MK_COMB (@lem375830 A) (@lem375829 A bad lt2)). Qed.
Lemma lem375836 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term746 A bad lt2) = (term783 A bad lt2).
Proof. exact (TRANS (@lem375711 A bad lt2) (@lem375831 A bad lt2)). Qed.
Lemma lem375837 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term784 A lt2 bad) = (term784 A lt2 bad).
Proof. exact (eq_refl (term784 A lt2 bad)). Qed.
Lemma lem375838 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term748 A bad lt2) = (term785 A bad lt2).
Proof. exact (MK_COMB (@lem375837 A lt2 bad) (@lem375836 A bad lt2)). Qed.
Lemma lem375841 {A : Type'} (lt2 : type1402 A) : (term786 A lt2) = (term787 A lt2).
Proof. exact (fun_ext (fun bad : type976 A => @lem375838 A bad lt2)). Qed.
Lemma lem375842 {A : Type'} : (@all ((nat -> A) -> Prop)) = (@all ((nat -> A) -> Prop)).
Proof. exact (eq_refl (@all ((nat -> A) -> Prop))). Qed.
Lemma lem375843 {A : Type'} (lt2 : type1402 A) : (term788 A lt2) = (term789 A lt2).
Proof. exact (MK_COMB (@lem375842 A) (@lem375841 A lt2)). Qed.
Lemma lem375848 {A : Type'} : (term790 A) = (term791 A).
Proof. exact (fun_ext (fun lt2 : type1402 A => @lem375843 A lt2)). Qed.
Lemma lem375849 {A : Type'} : (@all (A -> A -> Prop)) = (@all (A -> A -> Prop)).
Proof. exact (eq_refl (@all (A -> A -> Prop))). Qed.
Lemma lem375858 {A : Type'} : (term792 A) = (term793 A).
Proof. exact (MK_COMB (@lem375849 A) (@lem375848 A)). Qed.
Lemma lem375861 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term794 A lt2 z y n) = (term794 A lt2 z y n).
Proof. exact (eq_refl (term794 A lt2 z y n)). Qed.
Lemma lem375866 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) (k : nat) : (term671 A n z y k) = (term671 A n z y k).
Proof. exact (eq_refl (term671 A n z y k)). Qed.
Lemma lem375867 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) : (term682 A n z y) = (term682 A n z y).
Proof. exact (fun_ext (fun k : nat => @lem375866 A n z y k)). Qed.
Lemma lem375868 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem375869 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) : (term663 A n z y) = (term663 A n z y).
Proof. exact (MK_COMB (@lem375868) (@lem375867 A n z y)). Qed.
Lemma lem375872 {A : Type'} (bad : type976 A) (z : nat -> A) : (term685 A bad z) = (term685 A bad z).
Proof. exact (eq_refl (term685 A bad z)). Qed.
Lemma lem375873 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) : (term691 A bad n z y) = (term691 A bad n z y).
Proof. exact (MK_COMB (@lem375872 A bad z) (@lem375869 A n z y)). Qed.
Lemma lem375874 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem375875 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) : (term795 A bad n z y) = (term795 A bad n z y).
Proof. exact (MK_COMB (@lem375874) (@lem375873 A bad n z y)). Qed.
Lemma lem375876 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term796 A bad lt2 z y n) = (term796 A bad lt2 z y n).
Proof. exact (MK_COMB (@lem375875 A bad n z y) (@lem375861 A lt2 z y n)). Qed.
Lemma lem375877 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) : (term797 A bad lt2 z y) = (term797 A bad lt2 z y).
Proof. exact (fun_ext (fun n : nat => @lem375876 A bad lt2 z y n)). Qed.
Lemma lem375878 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem375879 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) : (term798 A bad lt2 z y) = (term798 A bad lt2 z y).
Proof. exact (MK_COMB (@lem375878) (@lem375877 A bad lt2 z y)). Qed.
Lemma lem375880 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term799 A bad lt2 y) = (term799 A bad lt2 y).
Proof. exact (fun_ext (fun z : nat -> A => @lem375879 A bad lt2 z y)). Qed.
Lemma lem375881 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem375882 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term800 A bad lt2 y) = (term800 A bad lt2 y).
Proof. exact (MK_COMB (@lem375881 A) (@lem375880 A bad lt2 y)). Qed.
Lemma lem375885 {A : Type'} (bad : type976 A) (y : nat -> A) : (term685 A bad y) = (term685 A bad y).
Proof. exact (eq_refl (term685 A bad y)). Qed.
Lemma lem375886 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term724 A bad lt2 y) = (term724 A bad lt2 y).
Proof. exact (MK_COMB (@lem375885 A bad y) (@lem375882 A bad lt2 y)). Qed.
Lemma lem375889 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term794 A lt2 z y n) = (term794 A lt2 z y n).
Proof. exact (eq_refl (term794 A lt2 z y n)). Qed.
Lemma lem375894 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) (k : nat) : (term671 A n z y k) = (term671 A n z y k).
Proof. exact (eq_refl (term671 A n z y k)). Qed.
Lemma lem375895 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) : (term682 A n z y) = (term682 A n z y).
Proof. exact (fun_ext (fun k : nat => @lem375894 A n z y k)). Qed.
Lemma lem375896 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem375897 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) : (term663 A n z y) = (term663 A n z y).
Proof. exact (MK_COMB (@lem375896) (@lem375895 A n z y)). Qed.
Lemma lem375900 {A : Type'} (bad : type976 A) (z : nat -> A) : (term685 A bad z) = (term685 A bad z).
Proof. exact (eq_refl (term685 A bad z)). Qed.
Lemma lem375901 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) : (term691 A bad n z y) = (term691 A bad n z y).
Proof. exact (MK_COMB (@lem375900 A bad z) (@lem375897 A n z y)). Qed.
Lemma lem375902 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem375903 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) : (term795 A bad n z y) = (term795 A bad n z y).
Proof. exact (MK_COMB (@lem375902) (@lem375901 A bad n z y)). Qed.
Lemma lem375904 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term796 A bad lt2 z y n) = (term796 A bad lt2 z y n).
Proof. exact (MK_COMB (@lem375903 A bad n z y) (@lem375889 A lt2 z y n)). Qed.
Lemma lem375905 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term801 A bad lt2 y n) = (term801 A bad lt2 y n).
Proof. exact (fun_ext (fun z : nat -> A => @lem375904 A bad lt2 z y n)). Qed.
Lemma lem375906 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem375907 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term766 A bad lt2 y n) = (term766 A bad lt2 y n).
Proof. exact (MK_COMB (@lem375906 A) (@lem375905 A bad lt2 y n)). Qed.
Lemma lem375908 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term760 A bad lt2 y) = (term760 A bad lt2 y).
Proof. exact (fun_ext (fun n : nat => @lem375907 A bad lt2 y n)). Qed.
Lemma lem375909 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem375910 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term778 A bad lt2 y) = (term778 A bad lt2 y).
Proof. exact (MK_COMB (@lem375909) (@lem375908 A bad lt2 y)). Qed.
Lemma lem375911 {A : Type'} (y' : nat -> A) (y : nat -> A) (n : nat) : ((y' n) = (y n)) = ((y' n) = (y n)).
Proof. exact (eq_refl ((y' n) = (y n))). Qed.
Lemma lem375916 {A : Type'} (n : nat) (y' : nat -> A) (y : nat -> A) (k : nat) : (term671 A n y' y k) = (term671 A n y' y k).
Proof. exact (eq_refl (term671 A n y' y k)). Qed.
Lemma lem375917 {A : Type'} (n : nat) (y' : nat -> A) (y : nat -> A) : (term682 A n y' y) = (term682 A n y' y).
Proof. exact (fun_ext (fun k : nat => @lem375916 A n y' y k)). Qed.
Lemma lem375918 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem375919 {A : Type'} (n : nat) (y' : nat -> A) (y : nat -> A) : (term663 A n y' y) = (term663 A n y' y).
Proof. exact (MK_COMB (@lem375918) (@lem375917 A n y' y)). Qed.
Lemma lem375920 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem375921 {A : Type'} (n : nat) (y' : nat -> A) (y : nat -> A) : (term683 A n y' y) = (term683 A n y' y).
Proof. exact (MK_COMB (@lem375920) (@lem375919 A n y' y)). Qed.
Lemma lem375922 {A : Type'} (y' : nat -> A) (y : nat -> A) (n : nat) : (term802 A y' y n) = (term802 A y' y n).
Proof. exact (MK_COMB (@lem375921 A n y' y) (@lem375911 A y' y n)). Qed.
Lemma lem375925 {A : Type'} (bad : type976 A) (y' : nat -> A) : (term685 A bad y') = (term685 A bad y').
Proof. exact (eq_refl (term685 A bad y')). Qed.
Lemma lem375926 {A : Type'} (bad : type976 A) (y' : nat -> A) (y : nat -> A) (n : nat) : (term803 A bad y' y n) = (term803 A bad y' y n).
Proof. exact (MK_COMB (@lem375925 A bad y') (@lem375922 A y' y n)). Qed.
Lemma lem375927 {A : Type'} (bad : type976 A) (y : nat -> A) (n : nat) : (term804 A bad y n) = (term804 A bad y n).
Proof. exact (fun_ext (fun y' : nat -> A => @lem375926 A bad y' y n)). Qed.
Lemma lem375928 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem375929 {A : Type'} (bad : type976 A) (y : nat -> A) (n : nat) : (term762 A bad y n) = (term762 A bad y n).
Proof. exact (MK_COMB (@lem375928 A) (@lem375927 A bad y n)). Qed.
Lemma lem375930 {A : Type'} (bad : type976 A) (y : nat -> A) : (term759 A bad y) = (term759 A bad y).
Proof. exact (fun_ext (fun n : nat => @lem375929 A bad y n)). Qed.
Lemma lem375931 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem375932 {A : Type'} (bad : type976 A) (y : nat -> A) : (term773 A bad y) = (term773 A bad y).
Proof. exact (MK_COMB (@lem375931) (@lem375930 A bad y)). Qed.
Lemma lem375933 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem375934 {A : Type'} (bad : type976 A) (y : nat -> A) : (term775 A bad y) = (term775 A bad y).
Proof. exact (MK_COMB (@lem375933) (@lem375932 A bad y)). Qed.
Lemma lem375935 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term779 A bad lt2 y) = (term779 A bad lt2 y).
Proof. exact (MK_COMB (@lem375934 A bad y) (@lem375910 A bad lt2 y)). Qed.
Lemma lem375936 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem375937 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term780 A bad lt2 y) = (term780 A bad lt2 y).
Proof. exact (MK_COMB (@lem375936) (@lem375935 A bad lt2 y)). Qed.
Lemma lem375938 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term781 A bad lt2 y) = (term781 A bad lt2 y).
Proof. exact (MK_COMB (@lem375937 A bad lt2 y) (@lem375886 A bad lt2 y)). Qed.
Lemma lem375939 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term782 A bad lt2) = (term782 A bad lt2).
Proof. exact (fun_ext (fun y : nat -> A => @lem375938 A bad lt2 y)). Qed.
Lemma lem375940 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem375941 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term783 A bad lt2) = (term783 A bad lt2).
Proof. exact (MK_COMB (@lem375940 A) (@lem375939 A bad lt2)). Qed.
Lemma lem375942 {A : Type'} (bad : type976 A) (x : nat -> A) : (bad x) = (bad x).
Proof. exact (eq_refl (bad x)). Qed.
Lemma lem375943 {A : Type'} (bad : type976 A) : (term805 A bad) = (term805 A bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem375942 A bad x)). Qed.
Lemma lem375944 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem375945 {A : Type'} (bad : type976 A) : (term806 A bad) = (term806 A bad).
Proof. exact (MK_COMB (@lem375944 A) (@lem375943 A bad)). Qed.
Lemma lem375948 {A : Type'} (bad : type976 A) (y : nat -> A) : (term807 A bad y) = (term807 A bad y).
Proof. exact (eq_refl (term807 A bad y)). Qed.
Lemma lem375953 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term671 A n y x k) = (term671 A n y x k).
Proof. exact (eq_refl (term671 A n y x k)). Qed.
Lemma lem375954 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term682 A n y x) = (term682 A n y x).
Proof. exact (fun_ext (fun k : nat => @lem375953 A n y x k)). Qed.
Lemma lem375955 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem375956 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term663 A n y x) = (term663 A n y x).
Proof. exact (MK_COMB (@lem375955) (@lem375954 A n y x)). Qed.
Lemma lem375957 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem375958 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term601 A n y x) = (term601 A n y x).
Proof. exact (MK_COMB (@lem375957) (@lem375956 A n y x)). Qed.
Lemma lem375959 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term808 A n x bad y) = (term808 A n x bad y).
Proof. exact (MK_COMB (@lem375958 A n y x) (@lem375948 A bad y)). Qed.
Lemma lem375960 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term809 A n x bad) = (term809 A n x bad).
Proof. exact (fun_ext (fun y : nat -> A => @lem375959 A n x bad y)). Qed.
Lemma lem375961 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem375962 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term810 A n x bad) = (term810 A n x bad).
Proof. exact (MK_COMB (@lem375961 A) (@lem375960 A n x bad)). Qed.
Lemma lem375963 {A : Type'} (x : nat -> A) (bad : type976 A) : (term811 A x bad) = (term811 A x bad).
Proof. exact (fun_ext (fun n : nat => @lem375962 A n x bad)). Qed.
Lemma lem375964 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem375965 {A : Type'} (x : nat -> A) (bad : type976 A) : (term812 A x bad) = (term812 A x bad).
Proof. exact (MK_COMB (@lem375964) (@lem375963 A x bad)). Qed.
Lemma lem375970 {A : Type'} (bad : type976 A) (x : nat -> A) : (term813 A bad x) = (term813 A bad x).
Proof. exact (eq_refl (term813 A bad x)). Qed.
Lemma lem375971 {A : Type'} (x : nat -> A) (bad : type976 A) : (term814 A x bad) = (term814 A x bad).
Proof. exact (MK_COMB (@lem375970 A bad x) (@lem375965 A x bad)). Qed.
Lemma lem375972 {A : Type'} (bad : type976 A) : (term815 A bad) = (term815 A bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem375971 A x bad)). Qed.
Lemma lem375973 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem375974 {A : Type'} (bad : type976 A) : (term816 A bad) = (term816 A bad).
Proof. exact (MK_COMB (@lem375973 A) (@lem375972 A bad)). Qed.
Lemma lem375975 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem375976 {A : Type'} (bad : type976 A) : (term817 A bad) = (term817 A bad).
Proof. exact (MK_COMB (@lem375975) (@lem375974 A bad)). Qed.
Lemma lem375977 {A : Type'} (bad : type976 A) : (term818 A bad) = (term818 A bad).
Proof. exact (MK_COMB (@lem375976 A bad) (@lem375945 A bad)). Qed.
Lemma lem375980 {A : Type'} (lt2 : type1402 A) : (term819 A lt2) = (term819 A lt2).
Proof. exact (eq_refl (term819 A lt2)). Qed.
Lemma lem375981 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term587 A lt2 bad) = (term587 A lt2 bad).
Proof. exact (MK_COMB (@lem375980 A lt2) (@lem375977 A bad)). Qed.
Lemma lem375982 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem375983 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term784 A lt2 bad) = (term784 A lt2 bad).
Proof. exact (MK_COMB (@lem375982) (@lem375981 A lt2 bad)). Qed.
Lemma lem375984 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term785 A bad lt2) = (term785 A bad lt2).
Proof. exact (MK_COMB (@lem375983 A lt2 bad) (@lem375941 A bad lt2)). Qed.
Lemma lem375985 {A : Type'} (lt2 : type1402 A) : (term787 A lt2) = (term787 A lt2).
Proof. exact (fun_ext (fun bad : type976 A => @lem375984 A bad lt2)). Qed.
Lemma lem375986 {A : Type'} : (@all ((nat -> A) -> Prop)) = (@all ((nat -> A) -> Prop)).
Proof. exact (eq_refl (@all ((nat -> A) -> Prop))). Qed.
Lemma lem375987 {A : Type'} (lt2 : type1402 A) : (term789 A lt2) = (term789 A lt2).
Proof. exact (MK_COMB (@lem375986 A) (@lem375985 A lt2)). Qed.
Lemma lem375988 {A : Type'} : (term791 A) = (term791 A).
Proof. exact (fun_ext (fun lt2 : type1402 A => @lem375987 A lt2)). Qed.
Lemma lem375989 {A : Type'} : (@all (A -> A -> Prop)) = (@all (A -> A -> Prop)).
Proof. exact (eq_refl (@all (A -> A -> Prop))). Qed.
Lemma lem375990 {A : Type'} : (term793 A) = (term793 A).
Proof. exact (MK_COMB (@lem375989 A) (@lem375988 A)). Qed.
Lemma lem376131 {A : Type'} : (term792 A) = (term793 A).
Proof. exact (TRANS (@lem375858 A) (@lem375990 A)). Qed.
Lemma lem376132 {A : Type'} : (term793 A) = (term792 A).
Proof. exact (SYM (@lem376131 A)). Qed.
Lemma lem376133 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : term587 A lt2 bad.
Proof. exact (h1). Qed.
Lemma lem376134 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term779 A bad lt2 y) : term779 A bad lt2 y.
Proof. exact (h1). Qed.
Lemma lem376136 (p : Prop) : p = (term24 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem376137 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term724 A bad lt2 y) = (term820 A bad lt2 y).
Proof. exact (@lem376136 (term724 A bad lt2 y)). Qed.
Lemma lem376138 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term820 A bad lt2 y) = (term724 A bad lt2 y).
Proof. exact (SYM (@lem376137 A bad lt2 y)). Qed.
Lemma lem376139 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term821 A bad lt2 y) : term821 A bad lt2 y.
Proof. exact (h1). Qed.
Lemma lem376143 {A : Type'} (bad : type976 A) (x : nat -> A) : (term822 A bad x) = (bad x).
Proof. exact (@lem16933 (bad x)). Qed.
Lemma lem376150 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term823 A n y x k) = (term824 A n y x k).
Proof. exact (@lem17362 (Peano.lt k n) ((y k) = (x k))). Qed.
Lemma lem376151 (P : nat -> Prop) : (term825 P) = (term826 P).
Proof. exact (@lem18392 nat P). Qed.
Lemma lem376152 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term827 A n y x) = (term828 A n y x).
Proof. exact (@lem376151 (term682 A n y x)). Qed.
Lemma lem376153 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term670 A n y x k) = (term671 A n y x k).
Proof. exact (eq_refl (term670 A n y x k)). Qed.
Lemma lem376154 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem376155 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term829 A n y x k) = (term823 A n y x k).
Proof. exact (MK_COMB (@lem376154) (@lem376153 A n y x k)). Qed.
Lemma lem376156 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term829 A n y x k) = (term824 A n y x k).
Proof. exact (TRANS (@lem376155 A n y x k) (@lem376150 A n y x k)). Qed.
Lemma lem376157 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term830 A n y x) = (term831 A n y x).
Proof. exact (fun_ext (fun k : nat => @lem376156 A n y x k)). Qed.
Lemma lem376158 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem376159 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term828 A n y x) = (term832 A n y x).
Proof. exact (MK_COMB (@lem376158) (@lem376157 A n y x)). Qed.
Lemma lem376160 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term827 A n y x) = (term832 A n y x).
Proof. exact (TRANS (@lem376152 A n y x) (@lem376159 A n y x)). Qed.
Lemma lem376161 {A : Type'} (bad : type976 A) (y : nat -> A) : (term807 A bad y) = (term807 A bad y).
Proof. exact (eq_refl (term807 A bad y)). Qed.
Lemma lem376162 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem376163 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term833 A n y x) = (term834 A n y x).
Proof. exact (MK_COMB (@lem376162) (@lem376160 A n y x)). Qed.
Lemma lem376164 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term835 A n x bad y) = (term836 A n x bad y).
Proof. exact (MK_COMB (@lem376163 A n y x) (@lem376161 A bad y)). Qed.
Lemma lem376165 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term808 A n x bad y) = (term835 A n x bad y).
Proof. exact (@lem17265 (term663 A n y x) (term807 A bad y)). Qed.
Lemma lem376166 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term808 A n x bad y) = (term836 A n x bad y).
Proof. exact (TRANS (@lem376165 A n x bad y) (@lem376164 A n x bad y)). Qed.
Lemma lem376167 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term809 A n x bad) = (term837 A n x bad).
Proof. exact (fun_ext (fun y : nat -> A => @lem376166 A n x bad y)). Qed.
Lemma lem376168 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem376169 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term810 A n x bad) = (term838 A n x bad).
Proof. exact (MK_COMB (@lem376168 A) (@lem376167 A n x bad)). Qed.
Lemma lem376170 {A : Type'} (x : nat -> A) (bad : type976 A) : (term811 A x bad) = (term839 A x bad).
Proof. exact (fun_ext (fun n : nat => @lem376169 A n x bad)). Qed.
Lemma lem376171 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem376172 {A : Type'} (x : nat -> A) (bad : type976 A) : (term812 A x bad) = (term840 A x bad).
Proof. exact (MK_COMB (@lem376171) (@lem376170 A x bad)). Qed.
Lemma lem376173 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem376174 {A : Type'} (bad : type976 A) (x : nat -> A) : (term841 A bad x) = (term842 A bad x).
Proof. exact (MK_COMB (@lem376173) (@lem376143 A bad x)). Qed.
Lemma lem376175 {A : Type'} (x : nat -> A) (bad : type976 A) : (term843 A x bad) = (term844 A x bad).
Proof. exact (MK_COMB (@lem376174 A bad x) (@lem376172 A x bad)). Qed.
Lemma lem376176 {A : Type'} (x : nat -> A) (bad : type976 A) : (term814 A x bad) = (term843 A x bad).
Proof. exact (@lem17265 (term807 A bad x) (term812 A x bad)). Qed.
Lemma lem376177 {A : Type'} (x : nat -> A) (bad : type976 A) : (term814 A x bad) = (term844 A x bad).
Proof. exact (TRANS (@lem376176 A x bad) (@lem376175 A x bad)). Qed.
Lemma lem376178 {A : Type'} (bad : type976 A) : (term815 A bad) = (term845 A bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem376177 A x bad)). Qed.
Lemma lem376179 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem376180 {A : Type'} (bad : type976 A) : (term816 A bad) = (term846 A bad).
Proof. exact (MK_COMB (@lem376179 A) (@lem376178 A bad)). Qed.
Lemma lem376181 {A : Type'} (bad : type976 A) (x : nat -> A) : (bad x) = (bad x).
Proof. exact (eq_refl (bad x)). Qed.
Lemma lem376182 {A : Type'} (bad : type976 A) : (term805 A bad) = (term805 A bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem376181 A bad x)). Qed.
Lemma lem376183 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem376184 {A : Type'} (bad : type976 A) : (term806 A bad) = (term806 A bad).
Proof. exact (MK_COMB (@lem376183 A) (@lem376182 A bad)). Qed.
Lemma lem376185 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem376186 {A : Type'} (bad : type976 A) : (term817 A bad) = (term847 A bad).
Proof. exact (MK_COMB (@lem376185) (@lem376180 A bad)). Qed.
Lemma lem376187 {A : Type'} (bad : type976 A) : (term818 A bad) = (term848 A bad).
Proof. exact (MK_COMB (@lem376186 A bad) (@lem376184 A bad)). Qed.
Lemma lem376189 {A : Type'} (lt2 : type1402 A) : (term819 A lt2) = (term819 A lt2).
Proof. exact (eq_refl (term819 A lt2)). Qed.
Lemma lem376190 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term587 A lt2 bad) = (term849 A lt2 bad).
Proof. exact (MK_COMB (@lem376189 A lt2) (@lem376187 A bad)). Qed.
Lemma lem376325 {A : Type'} (P : A -> Prop) (Q : Prop) : (term345 A P Q) = (term346 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem376326 (P : nat -> Prop) (Q : Prop) : (term850 P Q) = (term851 P Q).
Proof. exact (@lem376325 nat P Q). Qed.
Lemma lem376327 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term852 A n x bad y) = (term853 A n x bad y).
Proof. exact (@lem376326 (term831 A n y x) (term807 A bad y)). Qed.
Lemma lem376328 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term854 A n y x k) = (term824 A n y x k).
Proof. exact (eq_refl (term854 A n y x k)). Qed.
Lemma lem376329 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term855 A n y x) = (term831 A n y x).
Proof. exact (fun_ext (fun k : nat => @lem376328 A n y x k)). Qed.
Lemma lem376330 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem376331 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term856 A n y x) = (term832 A n y x).
Proof. exact (MK_COMB (@lem376330) (@lem376329 A n y x)). Qed.
Lemma lem376332 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem376333 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term857 A n y x) = (term834 A n y x).
Proof. exact (MK_COMB (@lem376332) (@lem376331 A n y x)). Qed.
Lemma lem376334 {A : Type'} (bad : type976 A) (y : nat -> A) : (term807 A bad y) = (term807 A bad y).
Proof. exact (eq_refl (term807 A bad y)). Qed.
Lemma lem376335 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term852 A n x bad y) = (term836 A n x bad y).
Proof. exact (MK_COMB (@lem376333 A n y x) (@lem376334 A bad y)). Qed.
Lemma lem376336 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem376337 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term858 A n x bad y) = (term859 A n x bad y).
Proof. exact (MK_COMB (@lem376336) (@lem376335 A n x bad y)). Qed.
Lemma lem376338 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term854 A n y x k) = (term824 A n y x k).
Proof. exact (eq_refl (term854 A n y x k)). Qed.
Lemma lem376339 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem376340 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term860 A n y x k) = (term861 A n y x k).
Proof. exact (MK_COMB (@lem376339) (@lem376338 A n y x k)). Qed.
Lemma lem376341 {A : Type'} (bad : type976 A) (y : nat -> A) : (term807 A bad y) = (term807 A bad y).
Proof. exact (eq_refl (term807 A bad y)). Qed.
Lemma lem376342 {A : Type'} (n : nat) (x : nat -> A) (k : nat) (bad : type976 A) (y : nat -> A) : (term862 A n x k bad y) = (term863 A n x k bad y).
Proof. exact (MK_COMB (@lem376340 A n y x k) (@lem376341 A bad y)). Qed.
Lemma lem376343 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term864 A n x bad y) = (term865 A n x bad y).
Proof. exact (fun_ext (fun k : nat => @lem376342 A n x k bad y)). Qed.
Lemma lem376344 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem376345 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term853 A n x bad y) = (term866 A n x bad y).
Proof. exact (MK_COMB (@lem376344) (@lem376343 A n x bad y)). Qed.
Lemma lem376346 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : ((term852 A n x bad y) = (term853 A n x bad y)) = ((term836 A n x bad y) = (term866 A n x bad y)).
Proof. exact (MK_COMB (@lem376337 A n x bad y) (@lem376345 A n x bad y)). Qed.
Lemma lem376347 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term836 A n x bad y) = (term866 A n x bad y).
Proof. exact (EQ_MP (@lem376346 A n x bad y) (@lem376327 A n x bad y)). Qed.
Lemma lem376348 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term837 A n x bad) = (term867 A n x bad).
Proof. exact (fun_ext (fun y : nat -> A => @lem376347 A n x bad y)). Qed.
Lemma lem376349 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem376350 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term838 A n x bad) = (term868 A n x bad).
Proof. exact (MK_COMB (@lem376349 A) (@lem376348 A n x bad)). Qed.
Lemma lem376352 {A B : Type'} (P : type1413 A B) : (term201 A B P) = (term202 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem376353 {A : Type'} (P : type973 A) : (term869 A P) = (term870 A P).
Proof. exact (@lem376352 (nat -> A) nat P). Qed.
Lemma lem376354 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term871 A n x bad) = (term872 A n x bad).
Proof. exact (@lem376353 A (term873 A n x bad)). Qed.
Lemma lem376355 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term874 A n x bad y) = (term865 A n x bad y).
Proof. exact (eq_refl (term874 A n x bad y)). Qed.
Lemma lem376356 (k : nat) : k = k.
Proof. exact (eq_refl k). Qed.
Lemma lem376357 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) (k : nat) : (term875 A n x bad y k) = (term876 A n x bad y k).
Proof. exact (MK_COMB (@lem376355 A n x bad y) (@lem376356 k)). Qed.
Lemma lem376358 {A : Type'} (n : nat) (x : nat -> A) (k : nat) (bad : type976 A) (y : nat -> A) : (term876 A n x bad y k) = (term863 A n x k bad y).
Proof. exact (eq_refl (term876 A n x bad y k)). Qed.
Lemma lem376359 {A : Type'} (n : nat) (x : nat -> A) (k : nat) (bad : type976 A) (y : nat -> A) : (term875 A n x bad y k) = (term863 A n x k bad y).
Proof. exact (TRANS (@lem376357 A n x bad y k) (@lem376358 A n x k bad y)). Qed.
Lemma lem376360 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term877 A n x bad y) = (term865 A n x bad y).
Proof. exact (fun_ext (fun k : nat => @lem376359 A n x k bad y)). Qed.
Lemma lem376361 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem376362 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term878 A n x bad y) = (term866 A n x bad y).
Proof. exact (MK_COMB (@lem376361) (@lem376360 A n x bad y)). Qed.
Lemma lem376363 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term879 A n x bad) = (term867 A n x bad).
Proof. exact (fun_ext (fun y : nat -> A => @lem376362 A n x bad y)). Qed.
Lemma lem376364 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem376365 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term871 A n x bad) = (term868 A n x bad).
Proof. exact (MK_COMB (@lem376364 A) (@lem376363 A n x bad)). Qed.
Lemma lem376366 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem376367 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term880 A n x bad) = (term881 A n x bad).
Proof. exact (MK_COMB (@lem376366) (@lem376365 A n x bad)). Qed.
Lemma lem376368 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term874 A n x bad y) = (term865 A n x bad y).
Proof. exact (eq_refl (term874 A n x bad y)). Qed.
Lemma lem376369 {A : Type'} (k : type977 A) (y : nat -> A) : (k y) = (k y).
Proof. exact (eq_refl (k y)). Qed.
Lemma lem376370 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (k : type977 A) (y : nat -> A) : (term882 A n x bad k y) = (term883 A n x bad k y).
Proof. exact (MK_COMB (@lem376368 A n x bad y) (@lem376369 A k y)). Qed.
Lemma lem376371 {A : Type'} (n : nat) (x : nat -> A) (k : type977 A) (bad : type976 A) (y : nat -> A) : (term883 A n x bad k y) = (term884 A n x k bad y).
Proof. exact (eq_refl (term883 A n x bad k y)). Qed.
Lemma lem376372 {A : Type'} (n : nat) (x : nat -> A) (k : type977 A) (bad : type976 A) (y : nat -> A) : (term882 A n x bad k y) = (term884 A n x k bad y).
Proof. exact (TRANS (@lem376370 A n x bad k y) (@lem376371 A n x k bad y)). Qed.
Lemma lem376373 {A : Type'} (n : nat) (x : nat -> A) (k : type977 A) (bad : type976 A) : (term885 A n x bad k) = (term886 A n x k bad).
Proof. exact (fun_ext (fun y : nat -> A => @lem376372 A n x k bad y)). Qed.
Lemma lem376374 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem376375 {A : Type'} (n : nat) (x : nat -> A) (k : type977 A) (bad : type976 A) : (term887 A n x bad k) = (term888 A n x k bad).
Proof. exact (MK_COMB (@lem376374 A) (@lem376373 A n x k bad)). Qed.
Lemma lem376376 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term889 A n x bad) = (term890 A n x bad).
Proof. exact (fun_ext (fun k : type977 A => @lem376375 A n x k bad)). Qed.
Lemma lem376377 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem376378 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term872 A n x bad) = (term891 A n x bad).
Proof. exact (MK_COMB (@lem376377 A) (@lem376376 A n x bad)). Qed.
Lemma lem376379 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : ((term871 A n x bad) = (term872 A n x bad)) = ((term868 A n x bad) = (term891 A n x bad)).
Proof. exact (MK_COMB (@lem376367 A n x bad) (@lem376378 A n x bad)). Qed.
Lemma lem376380 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term868 A n x bad) = (term891 A n x bad).
Proof. exact (EQ_MP (@lem376379 A n x bad) (@lem376354 A n x bad)). Qed.
Lemma lem376381 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term838 A n x bad) = (term891 A n x bad).
Proof. exact (TRANS (@lem376350 A n x bad) (@lem376380 A n x bad)). Qed.
Lemma lem376382 {A : Type'} (x : nat -> A) (bad : type976 A) : (term839 A x bad) = (term892 A x bad).
Proof. exact (fun_ext (fun n : nat => @lem376381 A n x bad)). Qed.
Lemma lem376383 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem376384 {A : Type'} (x : nat -> A) (bad : type976 A) : (term840 A x bad) = (term893 A x bad).
Proof. exact (MK_COMB (@lem376383) (@lem376382 A x bad)). Qed.
Lemma lem376385 {A : Type'} (bad : type976 A) (x : nat -> A) : (term842 A bad x) = (term842 A bad x).
Proof. exact (eq_refl (term842 A bad x)). Qed.
Lemma lem376386 {A : Type'} (x : nat -> A) (bad : type976 A) : (term844 A x bad) = (term894 A x bad).
Proof. exact (MK_COMB (@lem376385 A bad x) (@lem376384 A x bad)). Qed.
Lemma lem376388 {A : Type'} (P : Prop) (Q : A -> Prop) : (term185 A P Q) = (term186 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem376389 (P : Prop) (Q : nat -> Prop) : (term895 P Q) = (term896 P Q).
Proof. exact (@lem376388 nat P Q). Qed.
Lemma lem376390 {A : Type'} (x : nat -> A) (bad : type976 A) : (term897 A x bad) = (term898 A x bad).
Proof. exact (@lem376389 (bad x) (term892 A x bad)). Qed.
Lemma lem376391 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term899 A x bad n) = (term891 A n x bad).
Proof. exact (eq_refl (term899 A x bad n)). Qed.
Lemma lem376392 {A : Type'} (x : nat -> A) (bad : type976 A) : (term900 A x bad) = (term892 A x bad).
Proof. exact (fun_ext (fun n : nat => @lem376391 A n x bad)). Qed.
Lemma lem376393 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem376394 {A : Type'} (x : nat -> A) (bad : type976 A) : (term901 A x bad) = (term893 A x bad).
Proof. exact (MK_COMB (@lem376393) (@lem376392 A x bad)). Qed.
Lemma lem376395 {A : Type'} (bad : type976 A) (x : nat -> A) : (term842 A bad x) = (term842 A bad x).
Proof. exact (eq_refl (term842 A bad x)). Qed.
Lemma lem376396 {A : Type'} (x : nat -> A) (bad : type976 A) : (term897 A x bad) = (term894 A x bad).
Proof. exact (MK_COMB (@lem376395 A bad x) (@lem376394 A x bad)). Qed.
Lemma lem376397 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem376398 {A : Type'} (x : nat -> A) (bad : type976 A) : (term902 A x bad) = (term903 A x bad).
Proof. exact (MK_COMB (@lem376397) (@lem376396 A x bad)). Qed.
Lemma lem376399 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term899 A x bad n) = (term891 A n x bad).
Proof. exact (eq_refl (term899 A x bad n)). Qed.
Lemma lem376400 {A : Type'} (bad : type976 A) (x : nat -> A) : (term842 A bad x) = (term842 A bad x).
Proof. exact (eq_refl (term842 A bad x)). Qed.
Lemma lem376401 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term904 A x bad n) = (term905 A n x bad).
Proof. exact (MK_COMB (@lem376400 A bad x) (@lem376399 A n x bad)). Qed.
Lemma lem376402 {A : Type'} (x : nat -> A) (bad : type976 A) : (term906 A x bad) = (term907 A x bad).
Proof. exact (fun_ext (fun n : nat => @lem376401 A n x bad)). Qed.
Lemma lem376403 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem376404 {A : Type'} (x : nat -> A) (bad : type976 A) : (term898 A x bad) = (term908 A x bad).
Proof. exact (MK_COMB (@lem376403) (@lem376402 A x bad)). Qed.
Lemma lem376405 {A : Type'} (x : nat -> A) (bad : type976 A) : ((term897 A x bad) = (term898 A x bad)) = ((term894 A x bad) = (term908 A x bad)).
Proof. exact (MK_COMB (@lem376398 A x bad) (@lem376404 A x bad)). Qed.
Lemma lem376406 {A : Type'} (x : nat -> A) (bad : type976 A) : (term894 A x bad) = (term908 A x bad).
Proof. exact (EQ_MP (@lem376405 A x bad) (@lem376390 A x bad)). Qed.
Lemma lem376408 {A : Type'} (P : Prop) (Q : A -> Prop) : (term185 A P Q) = (term186 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem376409 {A : Type'} (P : Prop) (Q : type246 A) : (term909 A P Q) = (term910 A P Q).
Proof. exact (@lem376408 (type977 A) P Q). Qed.
Lemma lem376410 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term911 A n x bad) = (term912 A n x bad).
Proof. exact (@lem376409 A (bad x) (term890 A n x bad)). Qed.
Lemma lem376411 {A : Type'} (n : nat) (x : nat -> A) (k : type977 A) (bad : type976 A) : (term913 A n x bad k) = (term888 A n x k bad).
Proof. exact (eq_refl (term913 A n x bad k)). Qed.
Lemma lem376412 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term914 A n x bad) = (term890 A n x bad).
Proof. exact (fun_ext (fun k : type977 A => @lem376411 A n x k bad)). Qed.
Lemma lem376413 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem376414 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term915 A n x bad) = (term891 A n x bad).
Proof. exact (MK_COMB (@lem376413 A) (@lem376412 A n x bad)). Qed.
Lemma lem376415 {A : Type'} (bad : type976 A) (x : nat -> A) : (term842 A bad x) = (term842 A bad x).
Proof. exact (eq_refl (term842 A bad x)). Qed.
Lemma lem376416 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term911 A n x bad) = (term905 A n x bad).
Proof. exact (MK_COMB (@lem376415 A bad x) (@lem376414 A n x bad)). Qed.
Lemma lem376417 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem376418 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term916 A n x bad) = (term917 A n x bad).
Proof. exact (MK_COMB (@lem376417) (@lem376416 A n x bad)). Qed.
Lemma lem376419 {A : Type'} (n : nat) (x : nat -> A) (k : type977 A) (bad : type976 A) : (term913 A n x bad k) = (term888 A n x k bad).
Proof. exact (eq_refl (term913 A n x bad k)). Qed.
Lemma lem376420 {A : Type'} (bad : type976 A) (x : nat -> A) : (term842 A bad x) = (term842 A bad x).
Proof. exact (eq_refl (term842 A bad x)). Qed.
Lemma lem376421 {A : Type'} (n : nat) (x : nat -> A) (k : type977 A) (bad : type976 A) : (term918 A n x bad k) = (term919 A n x k bad).
Proof. exact (MK_COMB (@lem376420 A bad x) (@lem376419 A n x k bad)). Qed.
Lemma lem376422 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term920 A n x bad) = (term921 A n x bad).
Proof. exact (fun_ext (fun k : type977 A => @lem376421 A n x k bad)). Qed.
Lemma lem376423 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem376424 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term912 A n x bad) = (term922 A n x bad).
Proof. exact (MK_COMB (@lem376423 A) (@lem376422 A n x bad)). Qed.
Lemma lem376425 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : ((term911 A n x bad) = (term912 A n x bad)) = ((term905 A n x bad) = (term922 A n x bad)).
Proof. exact (MK_COMB (@lem376418 A n x bad) (@lem376424 A n x bad)). Qed.
Lemma lem376426 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term905 A n x bad) = (term922 A n x bad).
Proof. exact (EQ_MP (@lem376425 A n x bad) (@lem376410 A n x bad)). Qed.
Lemma lem376427 {A : Type'} (x : nat -> A) (bad : type976 A) : (term907 A x bad) = (term923 A x bad).
Proof. exact (fun_ext (fun n : nat => @lem376426 A n x bad)). Qed.
Lemma lem376428 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem376429 {A : Type'} (x : nat -> A) (bad : type976 A) : (term908 A x bad) = (term924 A x bad).
Proof. exact (MK_COMB (@lem376428) (@lem376427 A x bad)). Qed.
Lemma lem376430 {A : Type'} (x : nat -> A) (bad : type976 A) : (term894 A x bad) = (term924 A x bad).
Proof. exact (TRANS (@lem376406 A x bad) (@lem376429 A x bad)). Qed.
Lemma lem376431 {A : Type'} (x : nat -> A) (bad : type976 A) : (term844 A x bad) = (term924 A x bad).
Proof. exact (TRANS (@lem376386 A x bad) (@lem376430 A x bad)). Qed.
Lemma lem376432 {A : Type'} (bad : type976 A) : (term845 A bad) = (term925 A bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem376431 A x bad)). Qed.
Lemma lem376433 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem376434 {A : Type'} (bad : type976 A) : (term846 A bad) = (term926 A bad).
Proof. exact (MK_COMB (@lem376433 A) (@lem376432 A bad)). Qed.
Lemma lem376436 {A B : Type'} (P : type1413 A B) : (term201 A B P) = (term202 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem376437 {A : Type'} (P : type973 A) : (term869 A P) = (term870 A P).
Proof. exact (@lem376436 (nat -> A) nat P). Qed.
Lemma lem376438 {A : Type'} (bad : type976 A) : (term927 A bad) = (term928 A bad).
Proof. exact (@lem376437 A (term929 A bad)). Qed.
Lemma lem376439 {A : Type'} (x : nat -> A) (bad : type976 A) : (term930 A bad x) = (term923 A x bad).
Proof. exact (eq_refl (term930 A bad x)). Qed.
Lemma lem376440 (n : nat) : n = n.
Proof. exact (eq_refl n). Qed.
Lemma lem376441 {A : Type'} (x : nat -> A) (bad : type976 A) (n : nat) : (term931 A bad x n) = (term932 A x bad n).
Proof. exact (MK_COMB (@lem376439 A x bad) (@lem376440 n)). Qed.
Lemma lem376442 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term932 A x bad n) = (term922 A n x bad).
Proof. exact (eq_refl (term932 A x bad n)). Qed.
Lemma lem376443 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term931 A bad x n) = (term922 A n x bad).
Proof. exact (TRANS (@lem376441 A x bad n) (@lem376442 A n x bad)). Qed.
Lemma lem376444 {A : Type'} (x : nat -> A) (bad : type976 A) : (term933 A bad x) = (term923 A x bad).
Proof. exact (fun_ext (fun n : nat => @lem376443 A n x bad)). Qed.
Lemma lem376445 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem376446 {A : Type'} (x : nat -> A) (bad : type976 A) : (term934 A bad x) = (term924 A x bad).
Proof. exact (MK_COMB (@lem376445) (@lem376444 A x bad)). Qed.
Lemma lem376447 {A : Type'} (bad : type976 A) : (term935 A bad) = (term925 A bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem376446 A x bad)). Qed.
Lemma lem376448 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem376449 {A : Type'} (bad : type976 A) : (term927 A bad) = (term926 A bad).
Proof. exact (MK_COMB (@lem376448 A) (@lem376447 A bad)). Qed.
Lemma lem376450 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem376451 {A : Type'} (bad : type976 A) : (term936 A bad) = (term937 A bad).
Proof. exact (MK_COMB (@lem376450) (@lem376449 A bad)). Qed.
Lemma lem376452 {A : Type'} (x : nat -> A) (bad : type976 A) : (term930 A bad x) = (term923 A x bad).
Proof. exact (eq_refl (term930 A bad x)). Qed.
Lemma lem376453 {A : Type'} (n : type977 A) (x : nat -> A) : (n x) = (n x).
Proof. exact (eq_refl (n x)). Qed.
Lemma lem376454 {A : Type'} (bad : type976 A) (n : type977 A) (x : nat -> A) : (term938 A bad n x) = (term939 A bad n x).
Proof. exact (MK_COMB (@lem376452 A x bad) (@lem376453 A n x)). Qed.
Lemma lem376455 {A : Type'} (n : type977 A) (x : nat -> A) (bad : type976 A) : (term939 A bad n x) = (term940 A n x bad).
Proof. exact (eq_refl (term939 A bad n x)). Qed.
Lemma lem376456 {A : Type'} (n : type977 A) (x : nat -> A) (bad : type976 A) : (term938 A bad n x) = (term940 A n x bad).
Proof. exact (TRANS (@lem376454 A bad n x) (@lem376455 A n x bad)). Qed.
Lemma lem376457 {A : Type'} (n : type977 A) (bad : type976 A) : (term941 A bad n) = (term942 A n bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem376456 A n x bad)). Qed.
Lemma lem376458 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem376459 {A : Type'} (n : type977 A) (bad : type976 A) : (term943 A bad n) = (term944 A n bad).
Proof. exact (MK_COMB (@lem376458 A) (@lem376457 A n bad)). Qed.
Lemma lem376460 {A : Type'} (bad : type976 A) : (term945 A bad) = (term946 A bad).
Proof. exact (fun_ext (fun n : type977 A => @lem376459 A n bad)). Qed.
Lemma lem376461 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem376462 {A : Type'} (bad : type976 A) : (term928 A bad) = (term947 A bad).
Proof. exact (MK_COMB (@lem376461 A) (@lem376460 A bad)). Qed.
Lemma lem376463 {A : Type'} (bad : type976 A) : ((term927 A bad) = (term928 A bad)) = ((term926 A bad) = (term947 A bad)).
Proof. exact (MK_COMB (@lem376451 A bad) (@lem376462 A bad)). Qed.
Lemma lem376464 {A : Type'} (bad : type976 A) : (term926 A bad) = (term947 A bad).
Proof. exact (EQ_MP (@lem376463 A bad) (@lem376438 A bad)). Qed.
Lemma lem376466 {A B : Type'} (P : type1413 A B) : (term201 A B P) = (term202 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem376467 {A : Type'} (P : type964 A) : (term948 A P) = (term949 A P).
Proof. exact (@lem376466 (nat -> A) (type977 A) P). Qed.
Lemma lem376468 {A : Type'} (n : type977 A) (bad : type976 A) : (term950 A n bad) = (term951 A n bad).
Proof. exact (@lem376467 A (term952 A n bad)). Qed.
Lemma lem376469 {A : Type'} (n : type977 A) (x : nat -> A) (bad : type976 A) : (term953 A n bad x) = (term954 A n x bad).
Proof. exact (eq_refl (term953 A n bad x)). Qed.
Lemma lem376470 {A : Type'} (k : type977 A) : k = k.
Proof. exact (eq_refl k). Qed.
Lemma lem376471 {A : Type'} (n : type977 A) (x : nat -> A) (bad : type976 A) (k : type977 A) : (term955 A n bad x k) = (term956 A n x bad k).
Proof. exact (MK_COMB (@lem376469 A n x bad) (@lem376470 A k)). Qed.
Lemma lem376472 {A : Type'} (n : type977 A) (x : nat -> A) (k : type977 A) (bad : type976 A) : (term956 A n x bad k) = (term957 A n x k bad).
Proof. exact (eq_refl (term956 A n x bad k)). Qed.
Lemma lem376473 {A : Type'} (n : type977 A) (x : nat -> A) (k : type977 A) (bad : type976 A) : (term955 A n bad x k) = (term957 A n x k bad).
Proof. exact (TRANS (@lem376471 A n x bad k) (@lem376472 A n x k bad)). Qed.
Lemma lem376474 {A : Type'} (n : type977 A) (x : nat -> A) (bad : type976 A) : (term958 A n bad x) = (term954 A n x bad).
Proof. exact (fun_ext (fun k : type977 A => @lem376473 A n x k bad)). Qed.
Lemma lem376475 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem376476 {A : Type'} (n : type977 A) (x : nat -> A) (bad : type976 A) : (term959 A n bad x) = (term940 A n x bad).
Proof. exact (MK_COMB (@lem376475 A) (@lem376474 A n x bad)). Qed.
Lemma lem376477 {A : Type'} (n : type977 A) (bad : type976 A) : (term960 A n bad) = (term942 A n bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem376476 A n x bad)). Qed.
Lemma lem376478 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem376479 {A : Type'} (n : type977 A) (bad : type976 A) : (term950 A n bad) = (term944 A n bad).
Proof. exact (MK_COMB (@lem376478 A) (@lem376477 A n bad)). Qed.
Lemma lem376480 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem376481 {A : Type'} (n : type977 A) (bad : type976 A) : (term961 A n bad) = (term962 A n bad).
Proof. exact (MK_COMB (@lem376480) (@lem376479 A n bad)). Qed.
Lemma lem376482 {A : Type'} (n : type977 A) (x : nat -> A) (bad : type976 A) : (term953 A n bad x) = (term954 A n x bad).
Proof. exact (eq_refl (term953 A n bad x)). Qed.
Lemma lem376483 {A : Type'} (k : type967 A) (x : nat -> A) : (k x) = (k x).
Proof. exact (eq_refl (k x)). Qed.
Lemma lem376484 {A : Type'} (n : type977 A) (bad : type976 A) (k : type967 A) (x : nat -> A) : (term963 A n bad k x) = (term964 A n bad k x).
Proof. exact (MK_COMB (@lem376482 A n x bad) (@lem376483 A k x)). Qed.
Lemma lem376485 {A : Type'} (n : type977 A) (k : type967 A) (x : nat -> A) (bad : type976 A) : (term964 A n bad k x) = (term965 A n k x bad).
Proof. exact (eq_refl (term964 A n bad k x)). Qed.
Lemma lem376486 {A : Type'} (n : type977 A) (k : type967 A) (x : nat -> A) (bad : type976 A) : (term963 A n bad k x) = (term965 A n k x bad).
Proof. exact (TRANS (@lem376484 A n bad k x) (@lem376485 A n k x bad)). Qed.
Lemma lem376487 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) : (term966 A n bad k) = (term967 A n k bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem376486 A n k x bad)). Qed.
Lemma lem376488 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem376489 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) : (term968 A n bad k) = (term969 A n k bad).
Proof. exact (MK_COMB (@lem376488 A) (@lem376487 A n k bad)). Qed.
Lemma lem376490 {A : Type'} (n : type977 A) (bad : type976 A) : (term970 A n bad) = (term971 A n bad).
Proof. exact (fun_ext (fun k : type967 A => @lem376489 A n k bad)). Qed.
Lemma lem376491 {A : Type'} : (@ex ((nat -> A) -> (nat -> A) -> nat)) = (@ex ((nat -> A) -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> (nat -> A) -> nat))). Qed.
Lemma lem376492 {A : Type'} (n : type977 A) (bad : type976 A) : (term951 A n bad) = (term972 A n bad).
Proof. exact (MK_COMB (@lem376491 A) (@lem376490 A n bad)). Qed.
Lemma lem376493 {A : Type'} (n : type977 A) (bad : type976 A) : ((term950 A n bad) = (term951 A n bad)) = ((term944 A n bad) = (term972 A n bad)).
Proof. exact (MK_COMB (@lem376481 A n bad) (@lem376492 A n bad)). Qed.
Lemma lem376494 {A : Type'} (n : type977 A) (bad : type976 A) : (term944 A n bad) = (term972 A n bad).
Proof. exact (EQ_MP (@lem376493 A n bad) (@lem376468 A n bad)). Qed.
Lemma lem376495 {A : Type'} (bad : type976 A) : (term946 A bad) = (term973 A bad).
Proof. exact (fun_ext (fun n : type977 A => @lem376494 A n bad)). Qed.
Lemma lem376496 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem376497 {A : Type'} (bad : type976 A) : (term947 A bad) = (term974 A bad).
Proof. exact (MK_COMB (@lem376496 A) (@lem376495 A bad)). Qed.
Lemma lem376498 {A : Type'} (bad : type976 A) : (term926 A bad) = (term974 A bad).
Proof. exact (TRANS (@lem376464 A bad) (@lem376497 A bad)). Qed.
Lemma lem376499 {A : Type'} (bad : type976 A) : (term846 A bad) = (term974 A bad).
Proof. exact (TRANS (@lem376434 A bad) (@lem376498 A bad)). Qed.
Lemma lem376500 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem376501 {A : Type'} (bad : type976 A) : (term847 A bad) = (term975 A bad).
Proof. exact (MK_COMB (@lem376500) (@lem376499 A bad)). Qed.
Lemma lem376502 {A : Type'} (bad : type976 A) : (term806 A bad) = (term806 A bad).
Proof. exact (eq_refl (term806 A bad)). Qed.
Lemma lem376503 {A : Type'} (bad : type976 A) : (term848 A bad) = (term976 A bad).
Proof. exact (MK_COMB (@lem376501 A bad) (@lem376502 A bad)). Qed.
Lemma lem376505 {A : Type'} (P : A -> Prop) (Q : Prop) : (term166 A P Q) = (term167 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem376506 {A : Type'} (P : type246 A) (Q : Prop) : (term977 A P Q) = (term978 A P Q).
Proof. exact (@lem376505 (type977 A) P Q). Qed.
Lemma lem376507 {A : Type'} (bad : type976 A) : (term979 A bad) = (term980 A bad).
Proof. exact (@lem376506 A (term973 A bad) (term806 A bad)). Qed.
Lemma lem376508 {A : Type'} (n : type977 A) (bad : type976 A) : (term981 A bad n) = (term972 A n bad).
Proof. exact (eq_refl (term981 A bad n)). Qed.
Lemma lem376509 {A : Type'} (bad : type976 A) : (term982 A bad) = (term973 A bad).
Proof. exact (fun_ext (fun n : type977 A => @lem376508 A n bad)). Qed.
Lemma lem376510 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem376511 {A : Type'} (bad : type976 A) : (term983 A bad) = (term974 A bad).
Proof. exact (MK_COMB (@lem376510 A) (@lem376509 A bad)). Qed.
Lemma lem376512 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem376513 {A : Type'} (bad : type976 A) : (term984 A bad) = (term975 A bad).
Proof. exact (MK_COMB (@lem376512) (@lem376511 A bad)). Qed.
Lemma lem376514 {A : Type'} (bad : type976 A) : (term806 A bad) = (term806 A bad).
Proof. exact (eq_refl (term806 A bad)). Qed.
Lemma lem376515 {A : Type'} (bad : type976 A) : (term979 A bad) = (term976 A bad).
Proof. exact (MK_COMB (@lem376513 A bad) (@lem376514 A bad)). Qed.
Lemma lem376516 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem376517 {A : Type'} (bad : type976 A) : (term985 A bad) = (term986 A bad).
Proof. exact (MK_COMB (@lem376516) (@lem376515 A bad)). Qed.
Lemma lem376518 {A : Type'} (n : type977 A) (bad : type976 A) : (term981 A bad n) = (term972 A n bad).
Proof. exact (eq_refl (term981 A bad n)). Qed.
Lemma lem376519 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem376520 {A : Type'} (n : type977 A) (bad : type976 A) : (term987 A bad n) = (term988 A n bad).
Proof. exact (MK_COMB (@lem376519) (@lem376518 A n bad)). Qed.
Lemma lem376521 {A : Type'} (bad : type976 A) : (term806 A bad) = (term806 A bad).
Proof. exact (eq_refl (term806 A bad)). Qed.
Lemma lem376522 {A : Type'} (n : type977 A) (bad : type976 A) : (term989 A n bad) = (term990 A n bad).
Proof. exact (MK_COMB (@lem376520 A n bad) (@lem376521 A bad)). Qed.
Lemma lem376523 {A : Type'} (bad : type976 A) : (term991 A bad) = (term992 A bad).
Proof. exact (fun_ext (fun n : type977 A => @lem376522 A n bad)). Qed.
Lemma lem376524 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem376525 {A : Type'} (bad : type976 A) : (term980 A bad) = (term993 A bad).
Proof. exact (MK_COMB (@lem376524 A) (@lem376523 A bad)). Qed.
Lemma lem376526 {A : Type'} (bad : type976 A) : ((term979 A bad) = (term980 A bad)) = ((term976 A bad) = (term993 A bad)).
Proof. exact (MK_COMB (@lem376517 A bad) (@lem376525 A bad)). Qed.
Lemma lem376527 {A : Type'} (bad : type976 A) : (term976 A bad) = (term993 A bad).
Proof. exact (EQ_MP (@lem376526 A bad) (@lem376507 A bad)). Qed.
Lemma lem376529 {A : Type'} (P : A -> Prop) (Q : Prop) : (term166 A P Q) = (term167 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem376530 {A : Type'} (P : type244 A) (Q : Prop) : (term994 A P Q) = (term995 A P Q).
Proof. exact (@lem376529 (type967 A) P Q). Qed.
Lemma lem376531 {A : Type'} (n : type977 A) (bad : type976 A) : (term996 A n bad) = (term997 A n bad).
Proof. exact (@lem376530 A (term971 A n bad) (term806 A bad)). Qed.
Lemma lem376532 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) : (term998 A n bad k) = (term969 A n k bad).
Proof. exact (eq_refl (term998 A n bad k)). Qed.
Lemma lem376533 {A : Type'} (n : type977 A) (bad : type976 A) : (term999 A n bad) = (term971 A n bad).
Proof. exact (fun_ext (fun k : type967 A => @lem376532 A n k bad)). Qed.
Lemma lem376534 {A : Type'} : (@ex ((nat -> A) -> (nat -> A) -> nat)) = (@ex ((nat -> A) -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> (nat -> A) -> nat))). Qed.
Lemma lem376535 {A : Type'} (n : type977 A) (bad : type976 A) : (term1000 A n bad) = (term972 A n bad).
Proof. exact (MK_COMB (@lem376534 A) (@lem376533 A n bad)). Qed.
Lemma lem376536 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem376537 {A : Type'} (n : type977 A) (bad : type976 A) : (term1001 A n bad) = (term988 A n bad).
Proof. exact (MK_COMB (@lem376536) (@lem376535 A n bad)). Qed.
Lemma lem376538 {A : Type'} (bad : type976 A) : (term806 A bad) = (term806 A bad).
Proof. exact (eq_refl (term806 A bad)). Qed.
Lemma lem376539 {A : Type'} (n : type977 A) (bad : type976 A) : (term996 A n bad) = (term990 A n bad).
Proof. exact (MK_COMB (@lem376537 A n bad) (@lem376538 A bad)). Qed.
Lemma lem376540 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem376541 {A : Type'} (n : type977 A) (bad : type976 A) : (term1002 A n bad) = (term1003 A n bad).
Proof. exact (MK_COMB (@lem376540) (@lem376539 A n bad)). Qed.
Lemma lem376542 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) : (term998 A n bad k) = (term969 A n k bad).
Proof. exact (eq_refl (term998 A n bad k)). Qed.
Lemma lem376543 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem376544 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) : (term1004 A n bad k) = (term1005 A n k bad).
Proof. exact (MK_COMB (@lem376543) (@lem376542 A n k bad)). Qed.
Lemma lem376545 {A : Type'} (bad : type976 A) : (term806 A bad) = (term806 A bad).
Proof. exact (eq_refl (term806 A bad)). Qed.
Lemma lem376546 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) : (term1006 A n k bad) = (term1007 A n k bad).
Proof. exact (MK_COMB (@lem376544 A n k bad) (@lem376545 A bad)). Qed.
Lemma lem376547 {A : Type'} (n : type977 A) (bad : type976 A) : (term1008 A n bad) = (term1009 A n bad).
Proof. exact (fun_ext (fun k : type967 A => @lem376546 A n k bad)). Qed.
Lemma lem376548 {A : Type'} : (@ex ((nat -> A) -> (nat -> A) -> nat)) = (@ex ((nat -> A) -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> (nat -> A) -> nat))). Qed.
Lemma lem376549 {A : Type'} (n : type977 A) (bad : type976 A) : (term997 A n bad) = (term1010 A n bad).
Proof. exact (MK_COMB (@lem376548 A) (@lem376547 A n bad)). Qed.
Lemma lem376550 {A : Type'} (n : type977 A) (bad : type976 A) : ((term996 A n bad) = (term997 A n bad)) = ((term990 A n bad) = (term1010 A n bad)).
Proof. exact (MK_COMB (@lem376541 A n bad) (@lem376549 A n bad)). Qed.
Lemma lem376551 {A : Type'} (n : type977 A) (bad : type976 A) : (term990 A n bad) = (term1010 A n bad).
Proof. exact (EQ_MP (@lem376550 A n bad) (@lem376531 A n bad)). Qed.
Lemma lem376553 {A : Type'} (P : Prop) (Q : A -> Prop) : (term255 A P Q) = (term256 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem376554 {A : Type'} (P : Prop) (Q : type976 A) : (term1011 A P Q) = (term1012 A P Q).
Proof. exact (@lem376553 (nat -> A) P Q). Qed.
Lemma lem376555 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) : (term1007 A n k bad) = (term1013 A n k bad).
Proof. exact (@lem376554 A (term969 A n k bad) bad). Qed.
Lemma lem376556 {A : Type'} (n : type977 A) (bad : type976 A) : (term1009 A n bad) = (term1014 A n bad).
Proof. exact (fun_ext (fun k : type967 A => @lem376555 A n k bad)). Qed.
Lemma lem376557 {A : Type'} : (@ex ((nat -> A) -> (nat -> A) -> nat)) = (@ex ((nat -> A) -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> (nat -> A) -> nat))). Qed.
Lemma lem376558 {A : Type'} (n : type977 A) (bad : type976 A) : (term1010 A n bad) = (term1015 A n bad).
Proof. exact (MK_COMB (@lem376557 A) (@lem376556 A n bad)). Qed.
Lemma lem376559 {A : Type'} (n : type977 A) (bad : type976 A) : (term990 A n bad) = (term1015 A n bad).
Proof. exact (TRANS (@lem376551 A n bad) (@lem376558 A n bad)). Qed.
Lemma lem376560 {A : Type'} (bad : type976 A) : (term992 A bad) = (term1016 A bad).
Proof. exact (fun_ext (fun n : type977 A => @lem376559 A n bad)). Qed.
Lemma lem376561 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem376562 {A : Type'} (bad : type976 A) : (term993 A bad) = (term1017 A bad).
Proof. exact (MK_COMB (@lem376561 A) (@lem376560 A bad)). Qed.
Lemma lem376563 {A : Type'} (bad : type976 A) : (term976 A bad) = (term1017 A bad).
Proof. exact (TRANS (@lem376527 A bad) (@lem376562 A bad)). Qed.
Lemma lem376564 {A : Type'} (bad : type976 A) : (term848 A bad) = (term1017 A bad).
Proof. exact (TRANS (@lem376503 A bad) (@lem376563 A bad)). Qed.
Lemma lem376565 {A : Type'} (lt2 : type1402 A) : (term819 A lt2) = (term819 A lt2).
Proof. exact (eq_refl (term819 A lt2)). Qed.
Lemma lem376566 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term849 A lt2 bad) = (term1018 A lt2 bad).
Proof. exact (MK_COMB (@lem376565 A lt2) (@lem376564 A bad)). Qed.
Lemma lem376568 {A : Type'} (P : Prop) (Q : A -> Prop) : (term255 A P Q) = (term256 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem376569 {A : Type'} (P : Prop) (Q : type246 A) : (term1019 A P Q) = (term1020 A P Q).
Proof. exact (@lem376568 (type977 A) P Q). Qed.
Lemma lem376570 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1021 A lt2 bad) = (term1022 A lt2 bad).
Proof. exact (@lem376569 A (@WF A lt2) (term1016 A bad)). Qed.
Lemma lem376571 {A : Type'} (n : type977 A) (bad : type976 A) : (term1023 A bad n) = (term1015 A n bad).
Proof. exact (eq_refl (term1023 A bad n)). Qed.
Lemma lem376572 {A : Type'} (bad : type976 A) : (term1024 A bad) = (term1016 A bad).
Proof. exact (fun_ext (fun n : type977 A => @lem376571 A n bad)). Qed.
Lemma lem376573 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem376574 {A : Type'} (bad : type976 A) : (term1025 A bad) = (term1017 A bad).
Proof. exact (MK_COMB (@lem376573 A) (@lem376572 A bad)). Qed.
Lemma lem376575 {A : Type'} (lt2 : type1402 A) : (term819 A lt2) = (term819 A lt2).
Proof. exact (eq_refl (term819 A lt2)). Qed.
Lemma lem376576 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1021 A lt2 bad) = (term1018 A lt2 bad).
Proof. exact (MK_COMB (@lem376575 A lt2) (@lem376574 A bad)). Qed.
Lemma lem376577 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem376578 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1026 A lt2 bad) = (term1027 A lt2 bad).
Proof. exact (MK_COMB (@lem376577) (@lem376576 A lt2 bad)). Qed.
Lemma lem376579 {A : Type'} (n : type977 A) (bad : type976 A) : (term1023 A bad n) = (term1015 A n bad).
Proof. exact (eq_refl (term1023 A bad n)). Qed.
Lemma lem376580 {A : Type'} (lt2 : type1402 A) : (term819 A lt2) = (term819 A lt2).
Proof. exact (eq_refl (term819 A lt2)). Qed.
Lemma lem376581 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term1028 A lt2 bad n) = (term1029 A lt2 n bad).
Proof. exact (MK_COMB (@lem376580 A lt2) (@lem376579 A n bad)). Qed.
Lemma lem376582 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1030 A lt2 bad) = (term1031 A lt2 bad).
Proof. exact (fun_ext (fun n : type977 A => @lem376581 A lt2 n bad)). Qed.
Lemma lem376583 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem376584 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1022 A lt2 bad) = (term1032 A lt2 bad).
Proof. exact (MK_COMB (@lem376583 A) (@lem376582 A lt2 bad)). Qed.
Lemma lem376585 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : ((term1021 A lt2 bad) = (term1022 A lt2 bad)) = ((term1018 A lt2 bad) = (term1032 A lt2 bad)).
Proof. exact (MK_COMB (@lem376578 A lt2 bad) (@lem376584 A lt2 bad)). Qed.
Lemma lem376586 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1018 A lt2 bad) = (term1032 A lt2 bad).
Proof. exact (EQ_MP (@lem376585 A lt2 bad) (@lem376570 A lt2 bad)). Qed.
Lemma lem376588 {A : Type'} (P : Prop) (Q : A -> Prop) : (term255 A P Q) = (term256 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem376589 {A : Type'} (P : Prop) (Q : type244 A) : (term1033 A P Q) = (term1034 A P Q).
Proof. exact (@lem376588 (type967 A) P Q). Qed.
Lemma lem376590 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term1035 A lt2 n bad) = (term1036 A lt2 n bad).
Proof. exact (@lem376589 A (@WF A lt2) (term1014 A n bad)). Qed.
Lemma lem376591 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) : (term1037 A n bad k) = (term1013 A n k bad).
Proof. exact (eq_refl (term1037 A n bad k)). Qed.
Lemma lem376592 {A : Type'} (n : type977 A) (bad : type976 A) : (term1038 A n bad) = (term1014 A n bad).
Proof. exact (fun_ext (fun k : type967 A => @lem376591 A n k bad)). Qed.
Lemma lem376593 {A : Type'} : (@ex ((nat -> A) -> (nat -> A) -> nat)) = (@ex ((nat -> A) -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> (nat -> A) -> nat))). Qed.
Lemma lem376594 {A : Type'} (n : type977 A) (bad : type976 A) : (term1039 A n bad) = (term1015 A n bad).
Proof. exact (MK_COMB (@lem376593 A) (@lem376592 A n bad)). Qed.
Lemma lem376595 {A : Type'} (lt2 : type1402 A) : (term819 A lt2) = (term819 A lt2).
Proof. exact (eq_refl (term819 A lt2)). Qed.
Lemma lem376596 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term1035 A lt2 n bad) = (term1029 A lt2 n bad).
Proof. exact (MK_COMB (@lem376595 A lt2) (@lem376594 A n bad)). Qed.
Lemma lem376597 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem376598 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term1040 A lt2 n bad) = (term1041 A lt2 n bad).
Proof. exact (MK_COMB (@lem376597) (@lem376596 A lt2 n bad)). Qed.
Lemma lem376599 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) : (term1037 A n bad k) = (term1013 A n k bad).
Proof. exact (eq_refl (term1037 A n bad k)). Qed.
Lemma lem376600 {A : Type'} (lt2 : type1402 A) : (term819 A lt2) = (term819 A lt2).
Proof. exact (eq_refl (term819 A lt2)). Qed.
Lemma lem376601 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) : (term1042 A lt2 n bad k) = (term1043 A lt2 n k bad).
Proof. exact (MK_COMB (@lem376600 A lt2) (@lem376599 A n k bad)). Qed.
Lemma lem376602 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term1044 A lt2 n bad) = (term1045 A lt2 n bad).
Proof. exact (fun_ext (fun k : type967 A => @lem376601 A lt2 n k bad)). Qed.
Lemma lem376603 {A : Type'} : (@ex ((nat -> A) -> (nat -> A) -> nat)) = (@ex ((nat -> A) -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> (nat -> A) -> nat))). Qed.
Lemma lem376604 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term1036 A lt2 n bad) = (term1046 A lt2 n bad).
Proof. exact (MK_COMB (@lem376603 A) (@lem376602 A lt2 n bad)). Qed.
Lemma lem376605 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : ((term1035 A lt2 n bad) = (term1036 A lt2 n bad)) = ((term1029 A lt2 n bad) = (term1046 A lt2 n bad)).
Proof. exact (MK_COMB (@lem376598 A lt2 n bad) (@lem376604 A lt2 n bad)). Qed.
Lemma lem376606 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term1029 A lt2 n bad) = (term1046 A lt2 n bad).
Proof. exact (EQ_MP (@lem376605 A lt2 n bad) (@lem376590 A lt2 n bad)). Qed.
Lemma lem376608 {A : Type'} (P : Prop) (Q : A -> Prop) : (term255 A P Q) = (term256 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem376609 {A : Type'} (P : Prop) (Q : type976 A) : (term1011 A P Q) = (term1012 A P Q).
Proof. exact (@lem376608 (nat -> A) P Q). Qed.
Lemma lem376610 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) : (term1047 A lt2 n k bad) = (term1048 A lt2 n k bad).
Proof. exact (@lem376609 A (@WF A lt2) (term1049 A n k bad)). Qed.
Lemma lem376611 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) (x : nat -> A) : (term1050 A n k bad x) = (term1051 A n k bad x).
Proof. exact (eq_refl (term1050 A n k bad x)). Qed.
Lemma lem376612 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) : (term1052 A n k bad) = (term1049 A n k bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem376611 A n k bad x)). Qed.
Lemma lem376613 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem376614 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) : (term1053 A n k bad) = (term1013 A n k bad).
Proof. exact (MK_COMB (@lem376613 A) (@lem376612 A n k bad)). Qed.
Lemma lem376615 {A : Type'} (lt2 : type1402 A) : (term819 A lt2) = (term819 A lt2).
Proof. exact (eq_refl (term819 A lt2)). Qed.
Lemma lem376616 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) : (term1047 A lt2 n k bad) = (term1043 A lt2 n k bad).
Proof. exact (MK_COMB (@lem376615 A lt2) (@lem376614 A n k bad)). Qed.
Lemma lem376617 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem376618 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) : (term1054 A lt2 n k bad) = (term1055 A lt2 n k bad).
Proof. exact (MK_COMB (@lem376617) (@lem376616 A lt2 n k bad)). Qed.
Lemma lem376619 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) (x : nat -> A) : (term1050 A n k bad x) = (term1051 A n k bad x).
Proof. exact (eq_refl (term1050 A n k bad x)). Qed.
Lemma lem376620 {A : Type'} (lt2 : type1402 A) : (term819 A lt2) = (term819 A lt2).
Proof. exact (eq_refl (term819 A lt2)). Qed.
Lemma lem376621 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) (x : nat -> A) : (term1056 A lt2 n k bad x) = (term1057 A lt2 n k bad x).
Proof. exact (MK_COMB (@lem376620 A lt2) (@lem376619 A n k bad x)). Qed.
Lemma lem376622 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) : (term1058 A lt2 n k bad) = (term1059 A lt2 n k bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem376621 A lt2 n k bad x)). Qed.
Lemma lem376623 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem376624 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) : (term1048 A lt2 n k bad) = (term1060 A lt2 n k bad).
Proof. exact (MK_COMB (@lem376623 A) (@lem376622 A lt2 n k bad)). Qed.
Lemma lem376625 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) : ((term1047 A lt2 n k bad) = (term1048 A lt2 n k bad)) = ((term1043 A lt2 n k bad) = (term1060 A lt2 n k bad)).
Proof. exact (MK_COMB (@lem376618 A lt2 n k bad) (@lem376624 A lt2 n k bad)). Qed.
Lemma lem376626 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) : (term1043 A lt2 n k bad) = (term1060 A lt2 n k bad).
Proof. exact (EQ_MP (@lem376625 A lt2 n k bad) (@lem376610 A lt2 n k bad)). Qed.
Lemma lem376627 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term1045 A lt2 n bad) = (term1061 A lt2 n bad).
Proof. exact (fun_ext (fun k : type967 A => @lem376626 A lt2 n k bad)). Qed.
Lemma lem376628 {A : Type'} : (@ex ((nat -> A) -> (nat -> A) -> nat)) = (@ex ((nat -> A) -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> (nat -> A) -> nat))). Qed.
Lemma lem376629 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term1046 A lt2 n bad) = (term1062 A lt2 n bad).
Proof. exact (MK_COMB (@lem376628 A) (@lem376627 A lt2 n bad)). Qed.
Lemma lem376630 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term1029 A lt2 n bad) = (term1062 A lt2 n bad).
Proof. exact (TRANS (@lem376606 A lt2 n bad) (@lem376629 A lt2 n bad)). Qed.
Lemma lem376631 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1031 A lt2 bad) = (term1063 A lt2 bad).
Proof. exact (fun_ext (fun n : type977 A => @lem376630 A lt2 n bad)). Qed.
Lemma lem376632 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem376633 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1032 A lt2 bad) = (term1064 A lt2 bad).
Proof. exact (MK_COMB (@lem376632 A) (@lem376631 A lt2 bad)). Qed.
Lemma lem376634 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1018 A lt2 bad) = (term1064 A lt2 bad).
Proof. exact (TRANS (@lem376586 A lt2 bad) (@lem376633 A lt2 bad)). Qed.
Lemma lem376636 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term849 A lt2 bad) = (term1064 A lt2 bad).
Proof. exact (TRANS (@lem376566 A lt2 bad) (@lem376634 A lt2 bad)). Qed.
Lemma lem376637 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term587 A lt2 bad) = (term1064 A lt2 bad).
Proof. exact (TRANS (@lem376190 A lt2 bad) (@lem376636 A lt2 bad)). Qed.
Lemma lem376638 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : term1064 A lt2 bad.
Proof. exact (EQ_MP (@lem376637 A lt2 bad) (@lem376133 A lt2 bad h1)). Qed.
Lemma lem376646 {A : Type'} (n : nat) (y' : nat -> A) (y : nat -> A) (k : nat) : (term671 A n y' y k) = (term1065 A n y' y k).
Proof. exact (@lem17265 (Peano.lt k n) ((y' k) = (y k))). Qed.
Lemma lem376647 {A : Type'} (n : nat) (y' : nat -> A) (y : nat -> A) : (term682 A n y' y) = (term1066 A n y' y).
Proof. exact (fun_ext (fun k : nat => @lem376646 A n y' y k)). Qed.
Lemma lem376648 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem376649 {A : Type'} (n : nat) (y' : nat -> A) (y : nat -> A) : (term663 A n y' y) = (term1067 A n y' y).
Proof. exact (MK_COMB (@lem376648) (@lem376647 A n y' y)). Qed.
Lemma lem376650 {A : Type'} (y' : nat -> A) (y : nat -> A) (n : nat) : ((y' n) = (y n)) = ((y' n) = (y n)).
Proof. exact (eq_refl ((y' n) = (y n))). Qed.
Lemma lem376651 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem376652 {A : Type'} (n : nat) (y' : nat -> A) (y : nat -> A) : (term683 A n y' y) = (term1068 A n y' y).
Proof. exact (MK_COMB (@lem376651) (@lem376649 A n y' y)). Qed.
Lemma lem376653 {A : Type'} (y' : nat -> A) (y : nat -> A) (n : nat) : (term802 A y' y n) = (term1069 A y' y n).
Proof. exact (MK_COMB (@lem376652 A n y' y) (@lem376650 A y' y n)). Qed.
Lemma lem376655 {A : Type'} (bad : type976 A) (y' : nat -> A) : (term685 A bad y') = (term685 A bad y').
Proof. exact (eq_refl (term685 A bad y')). Qed.
Lemma lem376656 {A : Type'} (bad : type976 A) (y' : nat -> A) (y : nat -> A) (n : nat) : (term803 A bad y' y n) = (term1070 A bad y' y n).
Proof. exact (MK_COMB (@lem376655 A bad y') (@lem376653 A y' y n)). Qed.
Lemma lem376657 {A : Type'} (bad : type976 A) (y : nat -> A) (n : nat) : (term804 A bad y n) = (term1071 A bad y n).
Proof. exact (fun_ext (fun y' : nat -> A => @lem376656 A bad y' y n)). Qed.
Lemma lem376658 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem376659 {A : Type'} (bad : type976 A) (y : nat -> A) (n : nat) : (term762 A bad y n) = (term1072 A bad y n).
Proof. exact (MK_COMB (@lem376658 A) (@lem376657 A bad y n)). Qed.
Lemma lem376660 {A : Type'} (bad : type976 A) (y : nat -> A) : (term759 A bad y) = (term1073 A bad y).
Proof. exact (fun_ext (fun n : nat => @lem376659 A bad y n)). Qed.
Lemma lem376661 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem376662 {A : Type'} (bad : type976 A) (y : nat -> A) : (term773 A bad y) = (term1074 A bad y).
Proof. exact (MK_COMB (@lem376661) (@lem376660 A bad y)). Qed.
Lemma lem376670 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) (k : nat) : (term823 A n z y k) = (term824 A n z y k).
Proof. exact (@lem17362 (Peano.lt k n) ((z k) = (y k))). Qed.
Lemma lem376671 (P : nat -> Prop) : (term825 P) = (term826 P).
Proof. exact (@lem18392 nat P). Qed.
Lemma lem376672 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) : (term827 A n z y) = (term828 A n z y).
Proof. exact (@lem376671 (term682 A n z y)). Qed.
Lemma lem376673 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) (k : nat) : (term670 A n z y k) = (term671 A n z y k).
Proof. exact (eq_refl (term670 A n z y k)). Qed.
Lemma lem376674 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem376675 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) (k : nat) : (term829 A n z y k) = (term823 A n z y k).
Proof. exact (MK_COMB (@lem376674) (@lem376673 A n z y k)). Qed.
Lemma lem376676 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) (k : nat) : (term829 A n z y k) = (term824 A n z y k).
Proof. exact (TRANS (@lem376675 A n z y k) (@lem376670 A n z y k)). Qed.
Lemma lem376677 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) : (term830 A n z y) = (term831 A n z y).
Proof. exact (fun_ext (fun k : nat => @lem376676 A n z y k)). Qed.
Lemma lem376678 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem376679 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) : (term828 A n z y) = (term832 A n z y).
Proof. exact (MK_COMB (@lem376678) (@lem376677 A n z y)). Qed.
Lemma lem376680 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) : (term827 A n z y) = (term832 A n z y).
Proof. exact (TRANS (@lem376672 A n z y) (@lem376679 A n z y)). Qed.
Lemma lem376682 {A : Type'} (bad : type976 A) (z : nat -> A) : (term1075 A bad z) = (term1075 A bad z).
Proof. exact (eq_refl (term1075 A bad z)). Qed.
Lemma lem376683 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) : (term1076 A bad n z y) = (term1077 A bad n z y).
Proof. exact (MK_COMB (@lem376682 A bad z) (@lem376680 A n z y)). Qed.
Lemma lem376684 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) : (term1078 A bad n z y) = (term1076 A bad n z y).
Proof. exact (@lem17045 (bad z) (term663 A n z y)). Qed.
Lemma lem376685 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) : (term1078 A bad n z y) = (term1077 A bad n z y).
Proof. exact (TRANS (@lem376684 A bad n z y) (@lem376683 A bad n z y)). Qed.
Lemma lem376686 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term794 A lt2 z y n) = (term794 A lt2 z y n).
Proof. exact (eq_refl (term794 A lt2 z y n)). Qed.
Lemma lem376687 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem376688 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) : (term1079 A bad n z y) = (term1080 A bad n z y).
Proof. exact (MK_COMB (@lem376687) (@lem376685 A bad n z y)). Qed.
Lemma lem376689 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1081 A bad lt2 z y n) = (term1082 A bad lt2 z y n).
Proof. exact (MK_COMB (@lem376688 A bad n z y) (@lem376686 A lt2 z y n)). Qed.
Lemma lem376690 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term796 A bad lt2 z y n) = (term1081 A bad lt2 z y n).
Proof. exact (@lem17265 (term691 A bad n z y) (term794 A lt2 z y n)). Qed.
Lemma lem376691 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term796 A bad lt2 z y n) = (term1082 A bad lt2 z y n).
Proof. exact (TRANS (@lem376690 A bad lt2 z y n) (@lem376689 A bad lt2 z y n)). Qed.
Lemma lem376692 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term801 A bad lt2 y n) = (term1083 A bad lt2 y n).
Proof. exact (fun_ext (fun z : nat -> A => @lem376691 A bad lt2 z y n)). Qed.
Lemma lem376693 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem376694 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term766 A bad lt2 y n) = (term1084 A bad lt2 y n).
Proof. exact (MK_COMB (@lem376693 A) (@lem376692 A bad lt2 y n)). Qed.
Lemma lem376695 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term760 A bad lt2 y) = (term1085 A bad lt2 y).
Proof. exact (fun_ext (fun n : nat => @lem376694 A bad lt2 y n)). Qed.
Lemma lem376696 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem376697 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term778 A bad lt2 y) = (term1086 A bad lt2 y).
Proof. exact (MK_COMB (@lem376696) (@lem376695 A bad lt2 y)). Qed.
Lemma lem376698 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem376699 {A : Type'} (bad : type976 A) (y : nat -> A) : (term775 A bad y) = (term1087 A bad y).
Proof. exact (MK_COMB (@lem376698) (@lem376662 A bad y)). Qed.
Lemma lem376700 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term779 A bad lt2 y) = (term1088 A bad lt2 y).
Proof. exact (MK_COMB (@lem376699 A bad y) (@lem376697 A bad lt2 y)). Qed.
Lemma lem376883 {A B : Type'} (P : type1413 A B) : (term201 A B P) = (term202 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem376884 {A : Type'} (P : type1583 A) : (term1089 A P) = (term1090 A P).
Proof. exact (@lem376883 nat (nat -> A) P). Qed.
Lemma lem376885 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1091 A bad y) = (term1092 A bad y).
Proof. exact (@lem376884 A (term1093 A bad y)). Qed.
Lemma lem376886 {A : Type'} (bad : type976 A) (y : nat -> A) (n : nat) : (term1094 A bad y n) = (term1071 A bad y n).
Proof. exact (eq_refl (term1094 A bad y n)). Qed.
Lemma lem376887 {A : Type'} (y' : nat -> A) : y' = y'.
Proof. exact (eq_refl y'). Qed.
Lemma lem376888 {A : Type'} (bad : type976 A) (y : nat -> A) (n : nat) (y' : nat -> A) : (term1095 A bad y n y') = (term1096 A bad y n y').
Proof. exact (MK_COMB (@lem376886 A bad y n) (@lem376887 A y')). Qed.
Lemma lem376889 {A : Type'} (bad : type976 A) (y' : nat -> A) (y : nat -> A) (n : nat) : (term1096 A bad y n y') = (term1070 A bad y' y n).
Proof. exact (eq_refl (term1096 A bad y n y')). Qed.
Lemma lem376890 {A : Type'} (bad : type976 A) (y' : nat -> A) (y : nat -> A) (n : nat) : (term1095 A bad y n y') = (term1070 A bad y' y n).
Proof. exact (TRANS (@lem376888 A bad y n y') (@lem376889 A bad y' y n)). Qed.
Lemma lem376891 {A : Type'} (bad : type976 A) (y : nat -> A) (n : nat) : (term1097 A bad y n) = (term1071 A bad y n).
Proof. exact (fun_ext (fun y' : nat -> A => @lem376890 A bad y' y n)). Qed.
Lemma lem376892 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem376893 {A : Type'} (bad : type976 A) (y : nat -> A) (n : nat) : (term1098 A bad y n) = (term1072 A bad y n).
Proof. exact (MK_COMB (@lem376892 A) (@lem376891 A bad y n)). Qed.
Lemma lem376894 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1099 A bad y) = (term1073 A bad y).
Proof. exact (fun_ext (fun n : nat => @lem376893 A bad y n)). Qed.
Lemma lem376895 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem376896 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1091 A bad y) = (term1074 A bad y).
Proof. exact (MK_COMB (@lem376895) (@lem376894 A bad y)). Qed.
Lemma lem376897 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem376898 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1100 A bad y) = (term1101 A bad y).
Proof. exact (MK_COMB (@lem376897) (@lem376896 A bad y)). Qed.
Lemma lem376899 {A : Type'} (bad : type976 A) (y : nat -> A) (n : nat) : (term1094 A bad y n) = (term1071 A bad y n).
Proof. exact (eq_refl (term1094 A bad y n)). Qed.
Lemma lem376900 {A : Type'} (y' : type1604 A) (n : nat) : (y' n) = (y' n).
Proof. exact (eq_refl (y' n)). Qed.
Lemma lem376901 {A : Type'} (bad : type976 A) (y : nat -> A) (y' : type1604 A) (n : nat) : (term1102 A bad y y' n) = (term1103 A bad y y' n).
Proof. exact (MK_COMB (@lem376899 A bad y n) (@lem376900 A y' n)). Qed.
Lemma lem376902 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) (n : nat) : (term1103 A bad y y' n) = (term1104 A bad y' y n).
Proof. exact (eq_refl (term1103 A bad y y' n)). Qed.
Lemma lem376903 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) (n : nat) : (term1102 A bad y y' n) = (term1104 A bad y' y n).
Proof. exact (TRANS (@lem376901 A bad y y' n) (@lem376902 A bad y' y n)). Qed.
Lemma lem376904 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) : (term1105 A bad y y') = (term1106 A bad y' y).
Proof. exact (fun_ext (fun n : nat => @lem376903 A bad y' y n)). Qed.
Lemma lem376905 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem376906 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) : (term1107 A bad y y') = (term1108 A bad y' y).
Proof. exact (MK_COMB (@lem376905) (@lem376904 A bad y' y)). Qed.
Lemma lem376907 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1109 A bad y) = (term1110 A bad y).
Proof. exact (fun_ext (fun y' : type1604 A => @lem376906 A bad y' y)). Qed.
Lemma lem376908 {A : Type'} : (@ex (nat -> nat -> A)) = (@ex (nat -> nat -> A)).
Proof. exact (eq_refl (@ex (nat -> nat -> A))). Qed.
Lemma lem376909 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1092 A bad y) = (term1111 A bad y).
Proof. exact (MK_COMB (@lem376908 A) (@lem376907 A bad y)). Qed.
Lemma lem376910 {A : Type'} (bad : type976 A) (y : nat -> A) : ((term1091 A bad y) = (term1092 A bad y)) = ((term1074 A bad y) = (term1111 A bad y)).
Proof. exact (MK_COMB (@lem376898 A bad y) (@lem376909 A bad y)). Qed.
Lemma lem376911 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1074 A bad y) = (term1111 A bad y).
Proof. exact (EQ_MP (@lem376910 A bad y) (@lem376885 A bad y)). Qed.
Lemma lem376912 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem376913 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1087 A bad y) = (term1112 A bad y).
Proof. exact (MK_COMB (@lem376912) (@lem376911 A bad y)). Qed.
Lemma lem376915 {A : Type'} (P : Prop) (Q : A -> Prop) : (term185 A P Q) = (term186 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem376916 (P : Prop) (Q : nat -> Prop) : (term895 P Q) = (term896 P Q).
Proof. exact (@lem376915 nat P Q). Qed.
Lemma lem376917 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) : (term1113 A bad n z y) = (term1114 A bad n z y).
Proof. exact (@lem376916 (term807 A bad z) (term831 A n z y)). Qed.
Lemma lem376918 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) (k : nat) : (term854 A n z y k) = (term824 A n z y k).
Proof. exact (eq_refl (term854 A n z y k)). Qed.
Lemma lem376919 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) : (term855 A n z y) = (term831 A n z y).
Proof. exact (fun_ext (fun k : nat => @lem376918 A n z y k)). Qed.
Lemma lem376920 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem376921 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) : (term856 A n z y) = (term832 A n z y).
Proof. exact (MK_COMB (@lem376920) (@lem376919 A n z y)). Qed.
Lemma lem376922 {A : Type'} (bad : type976 A) (z : nat -> A) : (term1075 A bad z) = (term1075 A bad z).
Proof. exact (eq_refl (term1075 A bad z)). Qed.
Lemma lem376923 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) : (term1113 A bad n z y) = (term1077 A bad n z y).
Proof. exact (MK_COMB (@lem376922 A bad z) (@lem376921 A n z y)). Qed.
Lemma lem376924 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem376925 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) : (term1115 A bad n z y) = (term1116 A bad n z y).
Proof. exact (MK_COMB (@lem376924) (@lem376923 A bad n z y)). Qed.
Lemma lem376926 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) (k : nat) : (term854 A n z y k) = (term824 A n z y k).
Proof. exact (eq_refl (term854 A n z y k)). Qed.
Lemma lem376927 {A : Type'} (bad : type976 A) (z : nat -> A) : (term1075 A bad z) = (term1075 A bad z).
Proof. exact (eq_refl (term1075 A bad z)). Qed.
Lemma lem376928 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) (k : nat) : (term1117 A bad n z y k) = (term1118 A bad n z y k).
Proof. exact (MK_COMB (@lem376927 A bad z) (@lem376926 A n z y k)). Qed.
Lemma lem376929 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) : (term1119 A bad n z y) = (term1120 A bad n z y).
Proof. exact (fun_ext (fun k : nat => @lem376928 A bad n z y k)). Qed.
Lemma lem376930 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem376931 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) : (term1114 A bad n z y) = (term1121 A bad n z y).
Proof. exact (MK_COMB (@lem376930) (@lem376929 A bad n z y)). Qed.
Lemma lem376932 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) : ((term1113 A bad n z y) = (term1114 A bad n z y)) = ((term1077 A bad n z y) = (term1121 A bad n z y)).
Proof. exact (MK_COMB (@lem376925 A bad n z y) (@lem376931 A bad n z y)). Qed.
Lemma lem376933 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) : (term1077 A bad n z y) = (term1121 A bad n z y).
Proof. exact (EQ_MP (@lem376932 A bad n z y) (@lem376917 A bad n z y)). Qed.
Lemma lem376934 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem376935 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) : (term1080 A bad n z y) = (term1122 A bad n z y).
Proof. exact (MK_COMB (@lem376934) (@lem376933 A bad n z y)). Qed.
Lemma lem376936 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term794 A lt2 z y n) = (term794 A lt2 z y n).
Proof. exact (eq_refl (term794 A lt2 z y n)). Qed.
Lemma lem376937 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1082 A bad lt2 z y n) = (term1123 A bad lt2 z y n).
Proof. exact (MK_COMB (@lem376935 A bad n z y) (@lem376936 A lt2 z y n)). Qed.
Lemma lem376939 {A : Type'} (P : A -> Prop) (Q : Prop) : (term345 A P Q) = (term346 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem376940 (P : nat -> Prop) (Q : Prop) : (term850 P Q) = (term851 P Q).
Proof. exact (@lem376939 nat P Q). Qed.
Lemma lem376941 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1124 A bad lt2 z y n) = (term1125 A bad lt2 z y n).
Proof. exact (@lem376940 (term1120 A bad n z y) (term794 A lt2 z y n)). Qed.
Lemma lem376942 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) (k : nat) : (term1126 A bad n z y k) = (term1118 A bad n z y k).
Proof. exact (eq_refl (term1126 A bad n z y k)). Qed.
Lemma lem376943 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) : (term1127 A bad n z y) = (term1120 A bad n z y).
Proof. exact (fun_ext (fun k : nat => @lem376942 A bad n z y k)). Qed.
Lemma lem376944 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem376945 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) : (term1128 A bad n z y) = (term1121 A bad n z y).
Proof. exact (MK_COMB (@lem376944) (@lem376943 A bad n z y)). Qed.
Lemma lem376946 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem376947 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) : (term1129 A bad n z y) = (term1122 A bad n z y).
Proof. exact (MK_COMB (@lem376946) (@lem376945 A bad n z y)). Qed.
Lemma lem376948 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term794 A lt2 z y n) = (term794 A lt2 z y n).
Proof. exact (eq_refl (term794 A lt2 z y n)). Qed.
Lemma lem376949 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1124 A bad lt2 z y n) = (term1123 A bad lt2 z y n).
Proof. exact (MK_COMB (@lem376947 A bad n z y) (@lem376948 A lt2 z y n)). Qed.
Lemma lem376950 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem376951 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1130 A bad lt2 z y n) = (term1131 A bad lt2 z y n).
Proof. exact (MK_COMB (@lem376950) (@lem376949 A bad lt2 z y n)). Qed.
Lemma lem376952 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) (k : nat) : (term1126 A bad n z y k) = (term1118 A bad n z y k).
Proof. exact (eq_refl (term1126 A bad n z y k)). Qed.
Lemma lem376953 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem376954 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) (k : nat) : (term1132 A bad n z y k) = (term1133 A bad n z y k).
Proof. exact (MK_COMB (@lem376953) (@lem376952 A bad n z y k)). Qed.
Lemma lem376955 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term794 A lt2 z y n) = (term794 A lt2 z y n).
Proof. exact (eq_refl (term794 A lt2 z y n)). Qed.
Lemma lem376956 {A : Type'} (bad : type976 A) (k : nat) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1134 A bad k lt2 z y n) = (term1135 A bad k lt2 z y n).
Proof. exact (MK_COMB (@lem376954 A bad n z y k) (@lem376955 A lt2 z y n)). Qed.
Lemma lem376957 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1136 A bad lt2 z y n) = (term1137 A bad lt2 z y n).
Proof. exact (fun_ext (fun k : nat => @lem376956 A bad k lt2 z y n)). Qed.
Lemma lem376958 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem376959 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1125 A bad lt2 z y n) = (term1138 A bad lt2 z y n).
Proof. exact (MK_COMB (@lem376958) (@lem376957 A bad lt2 z y n)). Qed.
Lemma lem376960 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : ((term1124 A bad lt2 z y n) = (term1125 A bad lt2 z y n)) = ((term1123 A bad lt2 z y n) = (term1138 A bad lt2 z y n)).
Proof. exact (MK_COMB (@lem376951 A bad lt2 z y n) (@lem376959 A bad lt2 z y n)). Qed.
Lemma lem376961 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1123 A bad lt2 z y n) = (term1138 A bad lt2 z y n).
Proof. exact (EQ_MP (@lem376960 A bad lt2 z y n) (@lem376941 A bad lt2 z y n)). Qed.
Lemma lem376962 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1082 A bad lt2 z y n) = (term1138 A bad lt2 z y n).
Proof. exact (TRANS (@lem376937 A bad lt2 z y n) (@lem376961 A bad lt2 z y n)). Qed.
Lemma lem376963 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1083 A bad lt2 y n) = (term1139 A bad lt2 y n).
Proof. exact (fun_ext (fun z : nat -> A => @lem376962 A bad lt2 z y n)). Qed.
Lemma lem376964 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem376965 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1084 A bad lt2 y n) = (term1140 A bad lt2 y n).
Proof. exact (MK_COMB (@lem376964 A) (@lem376963 A bad lt2 y n)). Qed.
Lemma lem376967 {A B : Type'} (P : type1413 A B) : (term201 A B P) = (term202 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem376968 {A : Type'} (P : type973 A) : (term869 A P) = (term870 A P).
Proof. exact (@lem376967 (nat -> A) nat P). Qed.
Lemma lem376969 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1141 A bad lt2 y n) = (term1142 A bad lt2 y n).
Proof. exact (@lem376968 A (term1143 A bad lt2 y n)). Qed.
Lemma lem376970 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1144 A bad lt2 y n z) = (term1137 A bad lt2 z y n).
Proof. exact (eq_refl (term1144 A bad lt2 y n z)). Qed.
Lemma lem376971 (k : nat) : k = k.
Proof. exact (eq_refl k). Qed.
Lemma lem376972 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (k : nat) : (term1145 A bad lt2 y n z k) = (term1146 A bad lt2 z y n k).
Proof. exact (MK_COMB (@lem376970 A bad lt2 z y n) (@lem376971 k)). Qed.
Lemma lem376973 {A : Type'} (bad : type976 A) (k : nat) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1146 A bad lt2 z y n k) = (term1135 A bad k lt2 z y n).
Proof. exact (eq_refl (term1146 A bad lt2 z y n k)). Qed.
Lemma lem376974 {A : Type'} (bad : type976 A) (k : nat) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1145 A bad lt2 y n z k) = (term1135 A bad k lt2 z y n).
Proof. exact (TRANS (@lem376972 A bad lt2 z y n k) (@lem376973 A bad k lt2 z y n)). Qed.
Lemma lem376975 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1147 A bad lt2 y n z) = (term1137 A bad lt2 z y n).
Proof. exact (fun_ext (fun k : nat => @lem376974 A bad k lt2 z y n)). Qed.
Lemma lem376976 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem376977 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1148 A bad lt2 y n z) = (term1138 A bad lt2 z y n).
Proof. exact (MK_COMB (@lem376976) (@lem376975 A bad lt2 z y n)). Qed.
Lemma lem376978 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1149 A bad lt2 y n) = (term1139 A bad lt2 y n).
Proof. exact (fun_ext (fun z : nat -> A => @lem376977 A bad lt2 z y n)). Qed.
Lemma lem376979 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem376980 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1141 A bad lt2 y n) = (term1140 A bad lt2 y n).
Proof. exact (MK_COMB (@lem376979 A) (@lem376978 A bad lt2 y n)). Qed.
Lemma lem376981 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem376982 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1150 A bad lt2 y n) = (term1151 A bad lt2 y n).
Proof. exact (MK_COMB (@lem376981) (@lem376980 A bad lt2 y n)). Qed.
Lemma lem376983 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1144 A bad lt2 y n z) = (term1137 A bad lt2 z y n).
Proof. exact (eq_refl (term1144 A bad lt2 y n z)). Qed.
Lemma lem376984 {A : Type'} (k : type977 A) (z : nat -> A) : (k z) = (k z).
Proof. exact (eq_refl (k z)). Qed.
Lemma lem376985 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) (k : type977 A) (z : nat -> A) : (term1152 A bad lt2 y n k z) = (term1153 A bad lt2 y n k z).
Proof. exact (MK_COMB (@lem376983 A bad lt2 z y n) (@lem376984 A k z)). Qed.
Lemma lem376986 {A : Type'} (bad : type976 A) (k : type977 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1153 A bad lt2 y n k z) = (term1154 A bad k lt2 z y n).
Proof. exact (eq_refl (term1153 A bad lt2 y n k z)). Qed.
Lemma lem376987 {A : Type'} (bad : type976 A) (k : type977 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1152 A bad lt2 y n k z) = (term1154 A bad k lt2 z y n).
Proof. exact (TRANS (@lem376985 A bad lt2 y n k z) (@lem376986 A bad k lt2 z y n)). Qed.
Lemma lem376988 {A : Type'} (bad : type976 A) (k : type977 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1155 A bad lt2 y n k) = (term1156 A bad k lt2 y n).
Proof. exact (fun_ext (fun z : nat -> A => @lem376987 A bad k lt2 z y n)). Qed.
Lemma lem376989 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem376990 {A : Type'} (bad : type976 A) (k : type977 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1157 A bad lt2 y n k) = (term1158 A bad k lt2 y n).
Proof. exact (MK_COMB (@lem376989 A) (@lem376988 A bad k lt2 y n)). Qed.
Lemma lem376991 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1159 A bad lt2 y n) = (term1160 A bad lt2 y n).
Proof. exact (fun_ext (fun k : type977 A => @lem376990 A bad k lt2 y n)). Qed.
Lemma lem376992 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem376993 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1142 A bad lt2 y n) = (term1161 A bad lt2 y n).
Proof. exact (MK_COMB (@lem376992 A) (@lem376991 A bad lt2 y n)). Qed.
Lemma lem376994 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : ((term1141 A bad lt2 y n) = (term1142 A bad lt2 y n)) = ((term1140 A bad lt2 y n) = (term1161 A bad lt2 y n)).
Proof. exact (MK_COMB (@lem376982 A bad lt2 y n) (@lem376993 A bad lt2 y n)). Qed.
Lemma lem376995 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1140 A bad lt2 y n) = (term1161 A bad lt2 y n).
Proof. exact (EQ_MP (@lem376994 A bad lt2 y n) (@lem376969 A bad lt2 y n)). Qed.
Lemma lem376996 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1084 A bad lt2 y n) = (term1161 A bad lt2 y n).
Proof. exact (TRANS (@lem376965 A bad lt2 y n) (@lem376995 A bad lt2 y n)). Qed.
Lemma lem376997 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1085 A bad lt2 y) = (term1162 A bad lt2 y).
Proof. exact (fun_ext (fun n : nat => @lem376996 A bad lt2 y n)). Qed.
Lemma lem376998 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem376999 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1086 A bad lt2 y) = (term1163 A bad lt2 y).
Proof. exact (MK_COMB (@lem376998) (@lem376997 A bad lt2 y)). Qed.
Lemma lem377001 {A B : Type'} (P : type1413 A B) : (term201 A B P) = (term202 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem377002 {A : Type'} (P : type1568 A) : (term1164 A P) = (term1165 A P).
Proof. exact (@lem377001 nat (type977 A) P). Qed.
Lemma lem377003 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1166 A bad lt2 y) = (term1167 A bad lt2 y).
Proof. exact (@lem377002 A (term1168 A bad lt2 y)). Qed.
Lemma lem377004 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1169 A bad lt2 y n) = (term1160 A bad lt2 y n).
Proof. exact (eq_refl (term1169 A bad lt2 y n)). Qed.
Lemma lem377005 {A : Type'} (k : type977 A) : k = k.
Proof. exact (eq_refl k). Qed.
Lemma lem377006 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) (k : type977 A) : (term1170 A bad lt2 y n k) = (term1171 A bad lt2 y n k).
Proof. exact (MK_COMB (@lem377004 A bad lt2 y n) (@lem377005 A k)). Qed.
Lemma lem377007 {A : Type'} (bad : type976 A) (k : type977 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1171 A bad lt2 y n k) = (term1158 A bad k lt2 y n).
Proof. exact (eq_refl (term1171 A bad lt2 y n k)). Qed.
Lemma lem377008 {A : Type'} (bad : type976 A) (k : type977 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1170 A bad lt2 y n k) = (term1158 A bad k lt2 y n).
Proof. exact (TRANS (@lem377006 A bad lt2 y n k) (@lem377007 A bad k lt2 y n)). Qed.
Lemma lem377009 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1172 A bad lt2 y n) = (term1160 A bad lt2 y n).
Proof. exact (fun_ext (fun k : type977 A => @lem377008 A bad k lt2 y n)). Qed.
Lemma lem377010 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem377011 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1173 A bad lt2 y n) = (term1161 A bad lt2 y n).
Proof. exact (MK_COMB (@lem377010 A) (@lem377009 A bad lt2 y n)). Qed.
Lemma lem377012 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1174 A bad lt2 y) = (term1162 A bad lt2 y).
Proof. exact (fun_ext (fun n : nat => @lem377011 A bad lt2 y n)). Qed.
Lemma lem377013 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem377014 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1166 A bad lt2 y) = (term1163 A bad lt2 y).
Proof. exact (MK_COMB (@lem377013) (@lem377012 A bad lt2 y)). Qed.
Lemma lem377015 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem377016 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1175 A bad lt2 y) = (term1176 A bad lt2 y).
Proof. exact (MK_COMB (@lem377015) (@lem377014 A bad lt2 y)). Qed.
Lemma lem377017 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1169 A bad lt2 y n) = (term1160 A bad lt2 y n).
Proof. exact (eq_refl (term1169 A bad lt2 y n)). Qed.
Lemma lem377018 {A : Type'} (k : type1584 A) (n : nat) : (k n) = (k n).
Proof. exact (eq_refl (k n)). Qed.
Lemma lem377019 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (k : type1584 A) (n : nat) : (term1177 A bad lt2 y k n) = (term1178 A bad lt2 y k n).
Proof. exact (MK_COMB (@lem377017 A bad lt2 y n) (@lem377018 A k n)). Qed.
Lemma lem377020 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1178 A bad lt2 y k n) = (term1179 A bad k lt2 y n).
Proof. exact (eq_refl (term1178 A bad lt2 y k n)). Qed.
Lemma lem377021 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1177 A bad lt2 y k n) = (term1179 A bad k lt2 y n).
Proof. exact (TRANS (@lem377019 A bad lt2 y k n) (@lem377020 A bad k lt2 y n)). Qed.
Lemma lem377022 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) : (term1180 A bad lt2 y k) = (term1181 A bad k lt2 y).
Proof. exact (fun_ext (fun n : nat => @lem377021 A bad k lt2 y n)). Qed.
Lemma lem377023 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem377024 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) : (term1182 A bad lt2 y k) = (term1183 A bad k lt2 y).
Proof. exact (MK_COMB (@lem377023) (@lem377022 A bad k lt2 y)). Qed.
Lemma lem377025 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1184 A bad lt2 y) = (term1185 A bad lt2 y).
Proof. exact (fun_ext (fun k : type1584 A => @lem377024 A bad k lt2 y)). Qed.
Lemma lem377026 {A : Type'} : (@ex (nat -> (nat -> A) -> nat)) = (@ex (nat -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex (nat -> (nat -> A) -> nat))). Qed.
Lemma lem377027 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1167 A bad lt2 y) = (term1186 A bad lt2 y).
Proof. exact (MK_COMB (@lem377026 A) (@lem377025 A bad lt2 y)). Qed.
Lemma lem377028 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : ((term1166 A bad lt2 y) = (term1167 A bad lt2 y)) = ((term1163 A bad lt2 y) = (term1186 A bad lt2 y)).
Proof. exact (MK_COMB (@lem377016 A bad lt2 y) (@lem377027 A bad lt2 y)). Qed.
Lemma lem377029 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1163 A bad lt2 y) = (term1186 A bad lt2 y).
Proof. exact (EQ_MP (@lem377028 A bad lt2 y) (@lem377003 A bad lt2 y)). Qed.
Lemma lem377030 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1086 A bad lt2 y) = (term1186 A bad lt2 y).
Proof. exact (TRANS (@lem376999 A bad lt2 y) (@lem377029 A bad lt2 y)). Qed.
Lemma lem377031 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1088 A bad lt2 y) = (term1187 A bad lt2 y).
Proof. exact (MK_COMB (@lem376913 A bad y) (@lem377030 A bad lt2 y)). Qed.
Lemma lem377033 {A : Type'} (P : A -> Prop) (Q : Prop) : (term166 A P Q) = (term167 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem377034 {A : Type'} (P : type958 A) (Q : Prop) : (term1188 A P Q) = (term1189 A P Q).
Proof. exact (@lem377033 (type1604 A) P Q). Qed.
Lemma lem377035 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1190 A bad lt2 y) = (term1191 A bad lt2 y).
Proof. exact (@lem377034 A (term1110 A bad y) (term1186 A bad lt2 y)). Qed.
Lemma lem377036 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) : (term1192 A bad y y') = (term1108 A bad y' y).
Proof. exact (eq_refl (term1192 A bad y y')). Qed.
Lemma lem377037 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1193 A bad y) = (term1110 A bad y).
Proof. exact (fun_ext (fun y' : type1604 A => @lem377036 A bad y' y)). Qed.
Lemma lem377038 {A : Type'} : (@ex (nat -> nat -> A)) = (@ex (nat -> nat -> A)).
Proof. exact (eq_refl (@ex (nat -> nat -> A))). Qed.
Lemma lem377039 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1194 A bad y) = (term1111 A bad y).
Proof. exact (MK_COMB (@lem377038 A) (@lem377037 A bad y)). Qed.
Lemma lem377040 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem377041 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1195 A bad y) = (term1112 A bad y).
Proof. exact (MK_COMB (@lem377040) (@lem377039 A bad y)). Qed.
Lemma lem377042 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1186 A bad lt2 y) = (term1186 A bad lt2 y).
Proof. exact (eq_refl (term1186 A bad lt2 y)). Qed.
Lemma lem377043 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1190 A bad lt2 y) = (term1187 A bad lt2 y).
Proof. exact (MK_COMB (@lem377041 A bad y) (@lem377042 A bad lt2 y)). Qed.
Lemma lem377044 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem377045 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1196 A bad lt2 y) = (term1197 A bad lt2 y).
Proof. exact (MK_COMB (@lem377044) (@lem377043 A bad lt2 y)). Qed.
Lemma lem377046 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) : (term1192 A bad y y') = (term1108 A bad y' y).
Proof. exact (eq_refl (term1192 A bad y y')). Qed.
Lemma lem377047 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem377048 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) : (term1198 A bad y y') = (term1199 A bad y' y).
Proof. exact (MK_COMB (@lem377047) (@lem377046 A bad y' y)). Qed.
Lemma lem377049 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1186 A bad lt2 y) = (term1186 A bad lt2 y).
Proof. exact (eq_refl (term1186 A bad lt2 y)). Qed.
Lemma lem377050 {A : Type'} (y' : type1604 A) (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1200 A y' bad lt2 y) = (term1201 A y' bad lt2 y).
Proof. exact (MK_COMB (@lem377048 A bad y' y) (@lem377049 A bad lt2 y)). Qed.
Lemma lem377051 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1202 A bad lt2 y) = (term1203 A bad lt2 y).
Proof. exact (fun_ext (fun y' : type1604 A => @lem377050 A y' bad lt2 y)). Qed.
Lemma lem377052 {A : Type'} : (@ex (nat -> nat -> A)) = (@ex (nat -> nat -> A)).
Proof. exact (eq_refl (@ex (nat -> nat -> A))). Qed.
Lemma lem377053 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1191 A bad lt2 y) = (term1204 A bad lt2 y).
Proof. exact (MK_COMB (@lem377052 A) (@lem377051 A bad lt2 y)). Qed.
Lemma lem377054 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : ((term1190 A bad lt2 y) = (term1191 A bad lt2 y)) = ((term1187 A bad lt2 y) = (term1204 A bad lt2 y)).
Proof. exact (MK_COMB (@lem377045 A bad lt2 y) (@lem377053 A bad lt2 y)). Qed.
Lemma lem377055 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1187 A bad lt2 y) = (term1204 A bad lt2 y).
Proof. exact (EQ_MP (@lem377054 A bad lt2 y) (@lem377035 A bad lt2 y)). Qed.
Lemma lem377057 {A : Type'} (P : Prop) (Q : A -> Prop) : (term255 A P Q) = (term256 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem377058 {A : Type'} (P : Prop) (Q : type929 A) : (term1205 A P Q) = (term1206 A P Q).
Proof. exact (@lem377057 (type1584 A) P Q). Qed.
Lemma lem377059 {A : Type'} (y' : type1604 A) (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1207 A y' bad lt2 y) = (term1208 A y' bad lt2 y).
Proof. exact (@lem377058 A (term1108 A bad y' y) (term1185 A bad lt2 y)). Qed.
Lemma lem377060 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) : (term1209 A bad lt2 y k) = (term1183 A bad k lt2 y).
Proof. exact (eq_refl (term1209 A bad lt2 y k)). Qed.
Lemma lem377061 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1210 A bad lt2 y) = (term1185 A bad lt2 y).
Proof. exact (fun_ext (fun k : type1584 A => @lem377060 A bad k lt2 y)). Qed.
Lemma lem377062 {A : Type'} : (@ex (nat -> (nat -> A) -> nat)) = (@ex (nat -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex (nat -> (nat -> A) -> nat))). Qed.
Lemma lem377063 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1211 A bad lt2 y) = (term1186 A bad lt2 y).
Proof. exact (MK_COMB (@lem377062 A) (@lem377061 A bad lt2 y)). Qed.
Lemma lem377064 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) : (term1199 A bad y' y) = (term1199 A bad y' y).
Proof. exact (eq_refl (term1199 A bad y' y)). Qed.
Lemma lem377065 {A : Type'} (y' : type1604 A) (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1207 A y' bad lt2 y) = (term1201 A y' bad lt2 y).
Proof. exact (MK_COMB (@lem377064 A bad y' y) (@lem377063 A bad lt2 y)). Qed.
Lemma lem377066 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem377067 {A : Type'} (y' : type1604 A) (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1212 A y' bad lt2 y) = (term1213 A y' bad lt2 y).
Proof. exact (MK_COMB (@lem377066) (@lem377065 A y' bad lt2 y)). Qed.
Lemma lem377068 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) : (term1209 A bad lt2 y k) = (term1183 A bad k lt2 y).
Proof. exact (eq_refl (term1209 A bad lt2 y k)). Qed.
Lemma lem377069 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) : (term1199 A bad y' y) = (term1199 A bad y' y).
Proof. exact (eq_refl (term1199 A bad y' y)). Qed.
Lemma lem377070 {A : Type'} (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) : (term1214 A y' bad lt2 y k) = (term1215 A y' bad k lt2 y).
Proof. exact (MK_COMB (@lem377069 A bad y' y) (@lem377068 A bad k lt2 y)). Qed.
Lemma lem377071 {A : Type'} (y' : type1604 A) (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1216 A y' bad lt2 y) = (term1217 A y' bad lt2 y).
Proof. exact (fun_ext (fun k : type1584 A => @lem377070 A y' bad k lt2 y)). Qed.
Lemma lem377072 {A : Type'} : (@ex (nat -> (nat -> A) -> nat)) = (@ex (nat -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex (nat -> (nat -> A) -> nat))). Qed.
Lemma lem377073 {A : Type'} (y' : type1604 A) (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1208 A y' bad lt2 y) = (term1218 A y' bad lt2 y).
Proof. exact (MK_COMB (@lem377072 A) (@lem377071 A y' bad lt2 y)). Qed.
Lemma lem377074 {A : Type'} (y' : type1604 A) (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : ((term1207 A y' bad lt2 y) = (term1208 A y' bad lt2 y)) = ((term1201 A y' bad lt2 y) = (term1218 A y' bad lt2 y)).
Proof. exact (MK_COMB (@lem377067 A y' bad lt2 y) (@lem377073 A y' bad lt2 y)). Qed.
Lemma lem377075 {A : Type'} (y' : type1604 A) (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1201 A y' bad lt2 y) = (term1218 A y' bad lt2 y).
Proof. exact (EQ_MP (@lem377074 A y' bad lt2 y) (@lem377059 A y' bad lt2 y)). Qed.
Lemma lem377076 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1203 A bad lt2 y) = (term1219 A bad lt2 y).
Proof. exact (fun_ext (fun y' : type1604 A => @lem377075 A y' bad lt2 y)). Qed.
Lemma lem377077 {A : Type'} : (@ex (nat -> nat -> A)) = (@ex (nat -> nat -> A)).
Proof. exact (eq_refl (@ex (nat -> nat -> A))). Qed.
Lemma lem377078 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1204 A bad lt2 y) = (term1220 A bad lt2 y).
Proof. exact (MK_COMB (@lem377077 A) (@lem377076 A bad lt2 y)). Qed.
Lemma lem377079 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1187 A bad lt2 y) = (term1220 A bad lt2 y).
Proof. exact (TRANS (@lem377055 A bad lt2 y) (@lem377078 A bad lt2 y)). Qed.
Lemma lem377081 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1088 A bad lt2 y) = (term1220 A bad lt2 y).
Proof. exact (TRANS (@lem377031 A bad lt2 y) (@lem377079 A bad lt2 y)). Qed.
Lemma lem377082 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term779 A bad lt2 y) = (term1220 A bad lt2 y).
Proof. exact (TRANS (@lem376700 A bad lt2 y) (@lem377081 A bad lt2 y)). Qed.
Lemma lem377083 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term779 A bad lt2 y) : term1220 A bad lt2 y.
Proof. exact (EQ_MP (@lem377082 A bad lt2 y) (@lem376134 A bad lt2 y h1)). Qed.
Lemma lem377092 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) (k : nat) : (term671 A n z y k) = (term1065 A n z y k).
Proof. exact (@lem17265 (Peano.lt k n) ((z k) = (y k))). Qed.
Lemma lem377093 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) : (term682 A n z y) = (term1066 A n z y).
Proof. exact (fun_ext (fun k : nat => @lem377092 A n z y k)). Qed.
Lemma lem377094 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem377095 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) : (term663 A n z y) = (term1067 A n z y).
Proof. exact (MK_COMB (@lem377094) (@lem377093 A n z y)). Qed.
Lemma lem377097 {A : Type'} (bad : type976 A) (z : nat -> A) : (term685 A bad z) = (term685 A bad z).
Proof. exact (eq_refl (term685 A bad z)). Qed.
Lemma lem377098 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) : (term691 A bad n z y) = (term1221 A bad n z y).
Proof. exact (MK_COMB (@lem377097 A bad z) (@lem377095 A n z y)). Qed.
Lemma lem377101 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1222 A lt2 z y n) = (term1223 A lt2 z y n).
Proof. exact (@lem16933 (term1223 A lt2 z y n)). Qed.
Lemma lem377102 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem377103 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) : (term1224 A bad n z y) = (term1225 A bad n z y).
Proof. exact (MK_COMB (@lem377102) (@lem377098 A bad n z y)). Qed.
Lemma lem377104 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1226 A bad lt2 z y n) = (term1227 A bad lt2 z y n).
Proof. exact (MK_COMB (@lem377103 A bad n z y) (@lem377101 A lt2 z y n)). Qed.
Lemma lem377105 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1228 A bad lt2 z y n) = (term1226 A bad lt2 z y n).
Proof. exact (@lem17362 (term691 A bad n z y) (term794 A lt2 z y n)). Qed.
Lemma lem377106 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1228 A bad lt2 z y n) = (term1227 A bad lt2 z y n).
Proof. exact (TRANS (@lem377105 A bad lt2 z y n) (@lem377104 A bad lt2 z y n)). Qed.
Lemma lem377107 (P : nat -> Prop) : (term825 P) = (term826 P).
Proof. exact (@lem18392 nat P). Qed.
Lemma lem377108 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) : (term1229 A bad lt2 z y) = (term1230 A bad lt2 z y).
Proof. exact (@lem377107 (term797 A bad lt2 z y)). Qed.
Lemma lem377109 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1231 A bad lt2 z y n) = (term796 A bad lt2 z y n).
Proof. exact (eq_refl (term1231 A bad lt2 z y n)). Qed.
Lemma lem377110 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem377111 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1232 A bad lt2 z y n) = (term1228 A bad lt2 z y n).
Proof. exact (MK_COMB (@lem377110) (@lem377109 A bad lt2 z y n)). Qed.
Lemma lem377112 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1232 A bad lt2 z y n) = (term1227 A bad lt2 z y n).
Proof. exact (TRANS (@lem377111 A bad lt2 z y n) (@lem377106 A bad lt2 z y n)). Qed.
Lemma lem377113 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) : (term1233 A bad lt2 z y) = (term1234 A bad lt2 z y).
Proof. exact (fun_ext (fun n : nat => @lem377112 A bad lt2 z y n)). Qed.
Lemma lem377114 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem377115 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) : (term1230 A bad lt2 z y) = (term1235 A bad lt2 z y).
Proof. exact (MK_COMB (@lem377114) (@lem377113 A bad lt2 z y)). Qed.
Lemma lem377116 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) : (term1229 A bad lt2 z y) = (term1235 A bad lt2 z y).
Proof. exact (TRANS (@lem377108 A bad lt2 z y) (@lem377115 A bad lt2 z y)). Qed.
Lemma lem377117 {A : Type'} (P : type976 A) : (term1236 A P) = (term1237 A P).
Proof. exact (@lem18392 (nat -> A) P). Qed.
Lemma lem377118 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1238 A bad lt2 y) = (term1239 A bad lt2 y).
Proof. exact (@lem377117 A (term799 A bad lt2 y)). Qed.
Lemma lem377119 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) : (term1240 A bad lt2 y z) = (term798 A bad lt2 z y).
Proof. exact (eq_refl (term1240 A bad lt2 y z)). Qed.
Lemma lem377120 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem377121 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) : (term1241 A bad lt2 y z) = (term1229 A bad lt2 z y).
Proof. exact (MK_COMB (@lem377120) (@lem377119 A bad lt2 z y)). Qed.
Lemma lem377122 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) : (term1241 A bad lt2 y z) = (term1235 A bad lt2 z y).
Proof. exact (TRANS (@lem377121 A bad lt2 z y) (@lem377116 A bad lt2 z y)). Qed.
Lemma lem377123 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1242 A bad lt2 y) = (term1243 A bad lt2 y).
Proof. exact (fun_ext (fun z : nat -> A => @lem377122 A bad lt2 z y)). Qed.
Lemma lem377124 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem377125 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1239 A bad lt2 y) = (term1244 A bad lt2 y).
Proof. exact (MK_COMB (@lem377124 A) (@lem377123 A bad lt2 y)). Qed.
Lemma lem377126 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1238 A bad lt2 y) = (term1244 A bad lt2 y).
Proof. exact (TRANS (@lem377118 A bad lt2 y) (@lem377125 A bad lt2 y)). Qed.
Lemma lem377128 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1075 A bad y) = (term1075 A bad y).
Proof. exact (eq_refl (term1075 A bad y)). Qed.
Lemma lem377129 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1245 A bad lt2 y) = (term1246 A bad lt2 y).
Proof. exact (MK_COMB (@lem377128 A bad y) (@lem377126 A bad lt2 y)). Qed.
Lemma lem377130 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term821 A bad lt2 y) = (term1245 A bad lt2 y).
Proof. exact (@lem17045 (bad y) (term800 A bad lt2 y)). Qed.
Lemma lem377131 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term821 A bad lt2 y) = (term1246 A bad lt2 y).
Proof. exact (TRANS (@lem377130 A bad lt2 y) (@lem377129 A bad lt2 y)). Qed.
Lemma lem377234 {A : Type'} (P : Prop) (Q : A -> Prop) : (term185 A P Q) = (term186 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem377235 {A : Type'} (P : Prop) (Q : type976 A) : (term1247 A P Q) = (term1248 A P Q).
Proof. exact (@lem377234 (nat -> A) P Q). Qed.
Lemma lem377236 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1249 A bad lt2 y) = (term1250 A bad lt2 y).
Proof. exact (@lem377235 A (term807 A bad y) (term1243 A bad lt2 y)). Qed.
Lemma lem377237 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) : (term1251 A bad lt2 y z) = (term1235 A bad lt2 z y).
Proof. exact (eq_refl (term1251 A bad lt2 y z)). Qed.
Lemma lem377238 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1252 A bad lt2 y) = (term1243 A bad lt2 y).
Proof. exact (fun_ext (fun z : nat -> A => @lem377237 A bad lt2 z y)). Qed.
Lemma lem377239 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem377240 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1253 A bad lt2 y) = (term1244 A bad lt2 y).
Proof. exact (MK_COMB (@lem377239 A) (@lem377238 A bad lt2 y)). Qed.
Lemma lem377241 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1075 A bad y) = (term1075 A bad y).
Proof. exact (eq_refl (term1075 A bad y)). Qed.
Lemma lem377242 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1249 A bad lt2 y) = (term1246 A bad lt2 y).
Proof. exact (MK_COMB (@lem377241 A bad y) (@lem377240 A bad lt2 y)). Qed.
Lemma lem377243 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem377244 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1254 A bad lt2 y) = (term1255 A bad lt2 y).
Proof. exact (MK_COMB (@lem377243) (@lem377242 A bad lt2 y)). Qed.
Lemma lem377245 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) : (term1251 A bad lt2 y z) = (term1235 A bad lt2 z y).
Proof. exact (eq_refl (term1251 A bad lt2 y z)). Qed.
Lemma lem377246 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1075 A bad y) = (term1075 A bad y).
Proof. exact (eq_refl (term1075 A bad y)). Qed.
Lemma lem377247 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) : (term1256 A bad lt2 y z) = (term1257 A bad lt2 z y).
Proof. exact (MK_COMB (@lem377246 A bad y) (@lem377245 A bad lt2 z y)). Qed.
Lemma lem377248 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1258 A bad lt2 y) = (term1259 A bad lt2 y).
Proof. exact (fun_ext (fun z : nat -> A => @lem377247 A bad lt2 z y)). Qed.
Lemma lem377249 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem377250 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1250 A bad lt2 y) = (term1260 A bad lt2 y).
Proof. exact (MK_COMB (@lem377249 A) (@lem377248 A bad lt2 y)). Qed.
Lemma lem377251 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : ((term1249 A bad lt2 y) = (term1250 A bad lt2 y)) = ((term1246 A bad lt2 y) = (term1260 A bad lt2 y)).
Proof. exact (MK_COMB (@lem377244 A bad lt2 y) (@lem377250 A bad lt2 y)). Qed.
Lemma lem377252 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1246 A bad lt2 y) = (term1260 A bad lt2 y).
Proof. exact (EQ_MP (@lem377251 A bad lt2 y) (@lem377236 A bad lt2 y)). Qed.
Lemma lem377254 {A : Type'} (P : Prop) (Q : A -> Prop) : (term185 A P Q) = (term186 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem377255 (P : Prop) (Q : nat -> Prop) : (term895 P Q) = (term896 P Q).
Proof. exact (@lem377254 nat P Q). Qed.
Lemma lem377256 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) : (term1261 A bad lt2 z y) = (term1262 A bad lt2 z y).
Proof. exact (@lem377255 (term807 A bad y) (term1234 A bad lt2 z y)). Qed.
Lemma lem377257 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1263 A bad lt2 z y n) = (term1227 A bad lt2 z y n).
Proof. exact (eq_refl (term1263 A bad lt2 z y n)). Qed.
Lemma lem377258 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) : (term1264 A bad lt2 z y) = (term1234 A bad lt2 z y).
Proof. exact (fun_ext (fun n : nat => @lem377257 A bad lt2 z y n)). Qed.
Lemma lem377259 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem377260 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) : (term1265 A bad lt2 z y) = (term1235 A bad lt2 z y).
Proof. exact (MK_COMB (@lem377259) (@lem377258 A bad lt2 z y)). Qed.
Lemma lem377261 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1075 A bad y) = (term1075 A bad y).
Proof. exact (eq_refl (term1075 A bad y)). Qed.
Lemma lem377262 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) : (term1261 A bad lt2 z y) = (term1257 A bad lt2 z y).
Proof. exact (MK_COMB (@lem377261 A bad y) (@lem377260 A bad lt2 z y)). Qed.
Lemma lem377263 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem377264 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) : (term1266 A bad lt2 z y) = (term1267 A bad lt2 z y).
Proof. exact (MK_COMB (@lem377263) (@lem377262 A bad lt2 z y)). Qed.
Lemma lem377265 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1263 A bad lt2 z y n) = (term1227 A bad lt2 z y n).
Proof. exact (eq_refl (term1263 A bad lt2 z y n)). Qed.
Lemma lem377266 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1075 A bad y) = (term1075 A bad y).
Proof. exact (eq_refl (term1075 A bad y)). Qed.
Lemma lem377267 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1268 A bad lt2 z y n) = (term1269 A bad lt2 z y n).
Proof. exact (MK_COMB (@lem377266 A bad y) (@lem377265 A bad lt2 z y n)). Qed.
Lemma lem377268 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) : (term1270 A bad lt2 z y) = (term1271 A bad lt2 z y).
Proof. exact (fun_ext (fun n : nat => @lem377267 A bad lt2 z y n)). Qed.
Lemma lem377269 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem377270 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) : (term1262 A bad lt2 z y) = (term1272 A bad lt2 z y).
Proof. exact (MK_COMB (@lem377269) (@lem377268 A bad lt2 z y)). Qed.
Lemma lem377271 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) : ((term1261 A bad lt2 z y) = (term1262 A bad lt2 z y)) = ((term1257 A bad lt2 z y) = (term1272 A bad lt2 z y)).
Proof. exact (MK_COMB (@lem377264 A bad lt2 z y) (@lem377270 A bad lt2 z y)). Qed.
Lemma lem377272 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) : (term1257 A bad lt2 z y) = (term1272 A bad lt2 z y).
Proof. exact (EQ_MP (@lem377271 A bad lt2 z y) (@lem377256 A bad lt2 z y)). Qed.
Lemma lem377273 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1259 A bad lt2 y) = (term1273 A bad lt2 y).
Proof. exact (fun_ext (fun z : nat -> A => @lem377272 A bad lt2 z y)). Qed.
Lemma lem377274 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem377275 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1260 A bad lt2 y) = (term1274 A bad lt2 y).
Proof. exact (MK_COMB (@lem377274 A) (@lem377273 A bad lt2 y)). Qed.
Lemma lem377277 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term1246 A bad lt2 y) = (term1274 A bad lt2 y).
Proof. exact (TRANS (@lem377252 A bad lt2 y) (@lem377275 A bad lt2 y)). Qed.
Lemma lem377278 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) : (term821 A bad lt2 y) = (term1274 A bad lt2 y).
Proof. exact (TRANS (@lem377131 A bad lt2 y) (@lem377277 A bad lt2 y)). Qed.
Lemma lem377279 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term821 A bad lt2 y) : term1274 A bad lt2 y.
Proof. exact (EQ_MP (@lem377278 A bad lt2 y) (@lem376139 A bad lt2 y h1)). Qed.
Lemma lem377280 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (h1 : term1272 A bad lt2 z y) : term1272 A bad lt2 z y.
Proof. exact (h1). Qed.
Lemma lem377281 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1269 A bad lt2 z y n) : term1269 A bad lt2 z y n.
Proof. exact (h1). Qed.
Lemma lem377282 {A : Type'} (y' : type1604 A) (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1218 A y' bad lt2 y) : term1218 A y' bad lt2 y.
Proof. exact (h1). Qed.
Lemma lem377283 {A : Type'} (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1215 A y' bad k lt2 y.
Proof. exact (h1). Qed.
Lemma lem377284 {A : Type'} (lt2 : type1402 A) (n' : type977 A) (bad : type976 A) (h1 : term1062 A lt2 n' bad) : term1062 A lt2 n' bad.
Proof. exact (h1). Qed.
Lemma lem377285 {A : Type'} (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (h1 : term1060 A lt2 n' k' bad) : term1060 A lt2 n' k' bad.
Proof. exact (h1). Qed.
Lemma lem377286 {A : Type'} (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1057 A lt2 n' k' bad x) : term1057 A lt2 n' k' bad x.
Proof. exact (h1). Qed.
Lemma lem377287 {A : Type'} (lt2 : type1402 A) : lt2 = lt2.
Proof. exact (eq_refl lt2). Qed.
Lemma lem377292 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377293 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem377292 nat A f x). Qed.
Lemma lem377295 {A : Type'} (z : nat -> A) (n : nat) : (z n) = (@I (nat -> A) z n).
Proof. exact (@lem377293 A z n). Qed.
Lemma lem377300 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377301 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem377300 nat A f x). Qed.
Lemma lem377303 {A : Type'} (y : nat -> A) (n : nat) : (y n) = (@I (nat -> A) y n).
Proof. exact (@lem377301 A y n). Qed.
Lemma lem377304 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (n : nat) : (term1275 A lt2 z n) = (term1276 A lt2 z n).
Proof. exact (MK_COMB (@lem377287 A lt2) (@lem377295 A z n)). Qed.
Lemma lem377305 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1223 A lt2 z y n) = (term1277 A lt2 z y n).
Proof. exact (MK_COMB (@lem377304 A lt2 z n) (@lem377303 A y n)). Qed.
Lemma lem377307 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377308 {A : Type'} (f : type1402 A) (x : A) : (f x) = (@I (A -> A -> Prop) f x).
Proof. exact (@lem377307 A (A -> Prop) f x). Qed.
Lemma lem377309 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (n : nat) : (term1276 A lt2 z n) = (term1278 A lt2 z n).
Proof. exact (@lem377308 A lt2 (@I (nat -> A) z n)). Qed.
Lemma lem377310 {A : Type'} (y : nat -> A) (n : nat) : (@I (nat -> A) y n) = (@I (nat -> A) y n).
Proof. exact (eq_refl (@I (nat -> A) y n)). Qed.
Lemma lem377311 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1277 A lt2 z y n) = (term1279 A lt2 z y n).
Proof. exact (MK_COMB (@lem377309 A lt2 z n) (@lem377310 A y n)). Qed.
Lemma lem377313 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377314 {A : Type'} (f : A -> Prop) (x : A) : (f x) = (@I (A -> Prop) f x).
Proof. exact (@lem377313 A Prop f x). Qed.
Lemma lem377315 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1279 A lt2 z y n) = (term1280 A lt2 z y n).
Proof. exact (@lem377314 A (term1278 A lt2 z n) (@I (nat -> A) y n)). Qed.
Lemma lem377316 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1277 A lt2 z y n) = (term1280 A lt2 z y n).
Proof. exact (TRANS (@lem377311 A lt2 z y n) (@lem377315 A lt2 z y n)). Qed.
Lemma lem377317 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1223 A lt2 z y n) = (term1280 A lt2 z y n).
Proof. exact (TRANS (@lem377305 A lt2 z y n) (@lem377316 A lt2 z y n)). Qed.
Lemma lem377318 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem377323 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377324 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem377323 nat A f x). Qed.
Lemma lem377326 {A : Type'} (z : nat -> A) (k : nat) : (z k) = (@I (nat -> A) z k).
Proof. exact (@lem377324 A z k). Qed.
Lemma lem377331 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377332 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem377331 nat A f x). Qed.
Lemma lem377334 {A : Type'} (y : nat -> A) (k : nat) : (y k) = (@I (nat -> A) y k).
Proof. exact (@lem377332 A y k). Qed.
Lemma lem377335 {A : Type'} (z : nat -> A) (k : nat) : (term679 A z k) = (term1281 A z k).
Proof. exact (MK_COMB (@lem377318 A) (@lem377326 A z k)). Qed.
Lemma lem377336 {A : Type'} (z : nat -> A) (y : nat -> A) (k : nat) : ((z k) = (y k)) = ((@I (nat -> A) z k) = (@I (nat -> A) y k)).
Proof. exact (MK_COMB (@lem377335 A z k) (@lem377334 A y k)). Qed.
Lemma lem377337 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem377344 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377345 (f : type1605) (x : nat) : (f x) = (@I (nat -> nat -> Prop) f x).
Proof. exact (@lem377344 nat (nat -> Prop) f x). Qed.
Lemma lem377346 (k : nat) : (Peano.lt k) = (@I (nat -> nat -> Prop) Peano.lt k).
Proof. exact (@lem377345 Peano.lt k). Qed.
Lemma lem377347 (n : nat) : n = n.
Proof. exact (eq_refl n). Qed.
Lemma lem377348 (k : nat) (n : nat) : (Peano.lt k n) = (@I (nat -> nat -> Prop) Peano.lt k n).
Proof. exact (MK_COMB (@lem377346 k) (@lem377347 n)). Qed.
Lemma lem377350 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377351 (f : nat -> Prop) (x : nat) : (f x) = (@I (nat -> Prop) f x).
Proof. exact (@lem377350 nat Prop f x). Qed.
Lemma lem377352 (k : nat) (n : nat) : (@I (nat -> nat -> Prop) Peano.lt k n) = (term1282 k n).
Proof. exact (@lem377351 (@I (nat -> nat -> Prop) Peano.lt k) n). Qed.
Lemma lem377354 (k : nat) (n : nat) : (Peano.lt k n) = (term1282 k n).
Proof. exact (TRANS (@lem377348 k n) (@lem377352 k n)). Qed.
Lemma lem377355 (k : nat) (n : nat) : (term1283 k n) = (term1284 k n).
Proof. exact (MK_COMB (@lem377337) (@lem377354 k n)). Qed.
Lemma lem377356 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem377357 (k : nat) (n : nat) : (term1285 k n) = (term1286 k n).
Proof. exact (MK_COMB (@lem377356) (@lem377355 k n)). Qed.
Lemma lem377358 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) (k : nat) : (term1065 A n z y k) = (term1287 A n z y k).
Proof. exact (MK_COMB (@lem377357 k n) (@lem377336 A z y k)). Qed.
Lemma lem377359 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) : (term1066 A n z y) = (term1288 A n z y).
Proof. exact (fun_ext (fun k : nat => @lem377358 A n z y k)). Qed.
Lemma lem377360 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem377361 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) : (term1067 A n z y) = (term1289 A n z y).
Proof. exact (MK_COMB (@lem377360) (@lem377359 A n z y)). Qed.
Lemma lem377366 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377367 {A : Type'} (f : type976 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> Prop) f x).
Proof. exact (@lem377366 (nat -> A) Prop f x). Qed.
Lemma lem377369 {A : Type'} (bad : type976 A) (z : nat -> A) : (bad z) = (@I ((nat -> A) -> Prop) bad z).
Proof. exact (@lem377367 A bad z). Qed.
Lemma lem377370 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem377371 {A : Type'} (bad : type976 A) (z : nat -> A) : (term685 A bad z) = (term1290 A bad z).
Proof. exact (MK_COMB (@lem377370) (@lem377369 A bad z)). Qed.
Lemma lem377372 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) : (term1221 A bad n z y) = (term1291 A bad n z y).
Proof. exact (MK_COMB (@lem377371 A bad z) (@lem377361 A n z y)). Qed.
Lemma lem377373 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem377374 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (y : nat -> A) : (term1225 A bad n z y) = (term1292 A bad n z y).
Proof. exact (MK_COMB (@lem377373) (@lem377372 A bad n z y)). Qed.
Lemma lem377375 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1227 A bad lt2 z y n) = (term1293 A bad lt2 z y n).
Proof. exact (MK_COMB (@lem377374 A bad n z y) (@lem377317 A lt2 z y n)). Qed.
Lemma lem377376 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem377381 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377382 {A : Type'} (f : type976 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> Prop) f x).
Proof. exact (@lem377381 (nat -> A) Prop f x). Qed.
Lemma lem377384 {A : Type'} (bad : type976 A) (y : nat -> A) : (bad y) = (@I ((nat -> A) -> Prop) bad y).
Proof. exact (@lem377382 A bad y). Qed.
Lemma lem377385 {A : Type'} (bad : type976 A) (y : nat -> A) : (term807 A bad y) = (term1294 A bad y).
Proof. exact (MK_COMB (@lem377376) (@lem377384 A bad y)). Qed.
Lemma lem377386 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem377387 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1075 A bad y) = (term1295 A bad y).
Proof. exact (MK_COMB (@lem377386) (@lem377385 A bad y)). Qed.
Lemma lem377388 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1269 A bad lt2 z y n) = (term1296 A bad lt2 z y n).
Proof. exact (MK_COMB (@lem377387 A bad y) (@lem377375 A bad lt2 z y n)). Qed.
Lemma lem377389 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1269 A bad lt2 z y n) : term1296 A bad lt2 z y n.
Proof. exact (EQ_MP (@lem377388 A bad lt2 z y n) (@lem377281 A bad lt2 z y n h1)). Qed.
Lemma lem377390 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem377391 {A : Type'} (lt2 : type1402 A) : lt2 = lt2.
Proof. exact (eq_refl lt2). Qed.
Lemma lem377396 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377397 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem377396 nat A f x). Qed.
Lemma lem377399 {A : Type'} (z : nat -> A) (n : nat) : (z n) = (@I (nat -> A) z n).
Proof. exact (@lem377397 A z n). Qed.
Lemma lem377404 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377405 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem377404 nat A f x). Qed.
Lemma lem377407 {A : Type'} (y : nat -> A) (n : nat) : (y n) = (@I (nat -> A) y n).
Proof. exact (@lem377405 A y n). Qed.
Lemma lem377408 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (n : nat) : (term1275 A lt2 z n) = (term1276 A lt2 z n).
Proof. exact (MK_COMB (@lem377391 A lt2) (@lem377399 A z n)). Qed.
Lemma lem377409 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1223 A lt2 z y n) = (term1277 A lt2 z y n).
Proof. exact (MK_COMB (@lem377408 A lt2 z n) (@lem377407 A y n)). Qed.
Lemma lem377411 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377412 {A : Type'} (f : type1402 A) (x : A) : (f x) = (@I (A -> A -> Prop) f x).
Proof. exact (@lem377411 A (A -> Prop) f x). Qed.
Lemma lem377413 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (n : nat) : (term1276 A lt2 z n) = (term1278 A lt2 z n).
Proof. exact (@lem377412 A lt2 (@I (nat -> A) z n)). Qed.
Lemma lem377414 {A : Type'} (y : nat -> A) (n : nat) : (@I (nat -> A) y n) = (@I (nat -> A) y n).
Proof. exact (eq_refl (@I (nat -> A) y n)). Qed.
Lemma lem377415 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1277 A lt2 z y n) = (term1279 A lt2 z y n).
Proof. exact (MK_COMB (@lem377413 A lt2 z n) (@lem377414 A y n)). Qed.
Lemma lem377417 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377418 {A : Type'} (f : A -> Prop) (x : A) : (f x) = (@I (A -> Prop) f x).
Proof. exact (@lem377417 A Prop f x). Qed.
Lemma lem377419 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1279 A lt2 z y n) = (term1280 A lt2 z y n).
Proof. exact (@lem377418 A (term1278 A lt2 z n) (@I (nat -> A) y n)). Qed.
Lemma lem377420 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1277 A lt2 z y n) = (term1280 A lt2 z y n).
Proof. exact (TRANS (@lem377415 A lt2 z y n) (@lem377419 A lt2 z y n)). Qed.
Lemma lem377421 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1223 A lt2 z y n) = (term1280 A lt2 z y n).
Proof. exact (TRANS (@lem377409 A lt2 z y n) (@lem377420 A lt2 z y n)). Qed.
Lemma lem377422 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term794 A lt2 z y n) = (term1297 A lt2 z y n).
Proof. exact (MK_COMB (@lem377390) (@lem377421 A lt2 z y n)). Qed.
Lemma lem377423 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem377424 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem377425 {A : Type'} (z : nat -> A) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem377432 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377433 {A : Type'} (f : type1584 A) (x : nat) : (f x) = (@I (nat -> (nat -> A) -> nat) f x).
Proof. exact (@lem377432 nat (type977 A) f x). Qed.
Lemma lem377434 {A : Type'} (k : type1584 A) (n : nat) : (k n) = (@I (nat -> (nat -> A) -> nat) k n).
Proof. exact (@lem377433 A k n). Qed.
Lemma lem377435 {A : Type'} (z : nat -> A) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem377436 {A : Type'} (k : type1584 A) (n : nat) (z : nat -> A) : (k n z) = (@I (nat -> (nat -> A) -> nat) k n z).
Proof. exact (MK_COMB (@lem377434 A k n) (@lem377435 A z)). Qed.
Lemma lem377438 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377439 {A : Type'} (f : type977 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> nat) f x).
Proof. exact (@lem377438 (nat -> A) nat f x). Qed.
Lemma lem377440 {A : Type'} (k : type1584 A) (n : nat) (z : nat -> A) : (@I (nat -> (nat -> A) -> nat) k n z) = (term1298 A k n z).
Proof. exact (@lem377439 A (@I (nat -> (nat -> A) -> nat) k n) z). Qed.
Lemma lem377442 {A : Type'} (k : type1584 A) (n : nat) (z : nat -> A) : (k n z) = (term1298 A k n z).
Proof. exact (TRANS (@lem377436 A k n z) (@lem377440 A k n z)). Qed.
Lemma lem377443 {A : Type'} (k : type1584 A) (n : nat) (z : nat -> A) : (term1299 A k n z) = (term1300 A k n z).
Proof. exact (MK_COMB (@lem377425 A z) (@lem377442 A k n z)). Qed.
Lemma lem377445 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377446 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem377445 nat A f x). Qed.
Lemma lem377447 {A : Type'} (k : type1584 A) (n : nat) (z : nat -> A) : (term1300 A k n z) = (term1301 A k n z).
Proof. exact (@lem377446 A z (term1298 A k n z)). Qed.
Lemma lem377448 {A : Type'} (k : type1584 A) (n : nat) (z : nat -> A) : (term1299 A k n z) = (term1301 A k n z).
Proof. exact (TRANS (@lem377443 A k n z) (@lem377447 A k n z)). Qed.
Lemma lem377449 {A : Type'} (y : nat -> A) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem377456 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377457 {A : Type'} (f : type1584 A) (x : nat) : (f x) = (@I (nat -> (nat -> A) -> nat) f x).
Proof. exact (@lem377456 nat (type977 A) f x). Qed.
Lemma lem377458 {A : Type'} (k : type1584 A) (n : nat) : (k n) = (@I (nat -> (nat -> A) -> nat) k n).
Proof. exact (@lem377457 A k n). Qed.
Lemma lem377459 {A : Type'} (z : nat -> A) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem377460 {A : Type'} (k : type1584 A) (n : nat) (z : nat -> A) : (k n z) = (@I (nat -> (nat -> A) -> nat) k n z).
Proof. exact (MK_COMB (@lem377458 A k n) (@lem377459 A z)). Qed.
Lemma lem377462 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377463 {A : Type'} (f : type977 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> nat) f x).
Proof. exact (@lem377462 (nat -> A) nat f x). Qed.
Lemma lem377464 {A : Type'} (k : type1584 A) (n : nat) (z : nat -> A) : (@I (nat -> (nat -> A) -> nat) k n z) = (term1298 A k n z).
Proof. exact (@lem377463 A (@I (nat -> (nat -> A) -> nat) k n) z). Qed.
Lemma lem377466 {A : Type'} (k : type1584 A) (n : nat) (z : nat -> A) : (k n z) = (term1298 A k n z).
Proof. exact (TRANS (@lem377460 A k n z) (@lem377464 A k n z)). Qed.
Lemma lem377467 {A : Type'} (y : nat -> A) (k : type1584 A) (n : nat) (z : nat -> A) : (term1302 A y k n z) = (term1303 A y k n z).
Proof. exact (MK_COMB (@lem377449 A y) (@lem377466 A k n z)). Qed.
Lemma lem377469 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377470 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem377469 nat A f x). Qed.
Lemma lem377471 {A : Type'} (y : nat -> A) (k : type1584 A) (n : nat) (z : nat -> A) : (term1303 A y k n z) = (term1304 A y k n z).
Proof. exact (@lem377470 A y (term1298 A k n z)). Qed.
Lemma lem377472 {A : Type'} (y : nat -> A) (k : type1584 A) (n : nat) (z : nat -> A) : (term1302 A y k n z) = (term1304 A y k n z).
Proof. exact (TRANS (@lem377467 A y k n z) (@lem377471 A y k n z)). Qed.
Lemma lem377473 {A : Type'} (k : type1584 A) (n : nat) (z : nat -> A) : (term1305 A k n z) = (term1306 A k n z).
Proof. exact (MK_COMB (@lem377424 A) (@lem377448 A k n z)). Qed.
Lemma lem377474 {A : Type'} (y : nat -> A) (k : type1584 A) (n : nat) (z : nat -> A) : ((term1299 A k n z) = (term1302 A y k n z)) = ((term1301 A k n z) = (term1304 A y k n z)).
Proof. exact (MK_COMB (@lem377473 A k n z) (@lem377472 A y k n z)). Qed.
Lemma lem377475 {A : Type'} (y : nat -> A) (k : type1584 A) (n : nat) (z : nat -> A) : (term1307 A y k n z) = (term1308 A y k n z).
Proof. exact (MK_COMB (@lem377423) (@lem377474 A y k n z)). Qed.
Lemma lem377476 : Peano.lt = Peano.lt.
Proof. exact (eq_refl Peano.lt). Qed.
Lemma lem377483 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377484 {A : Type'} (f : type1584 A) (x : nat) : (f x) = (@I (nat -> (nat -> A) -> nat) f x).
Proof. exact (@lem377483 nat (type977 A) f x). Qed.
Lemma lem377485 {A : Type'} (k : type1584 A) (n : nat) : (k n) = (@I (nat -> (nat -> A) -> nat) k n).
Proof. exact (@lem377484 A k n). Qed.
Lemma lem377486 {A : Type'} (z : nat -> A) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem377487 {A : Type'} (k : type1584 A) (n : nat) (z : nat -> A) : (k n z) = (@I (nat -> (nat -> A) -> nat) k n z).
Proof. exact (MK_COMB (@lem377485 A k n) (@lem377486 A z)). Qed.
Lemma lem377489 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377490 {A : Type'} (f : type977 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> nat) f x).
Proof. exact (@lem377489 (nat -> A) nat f x). Qed.
Lemma lem377491 {A : Type'} (k : type1584 A) (n : nat) (z : nat -> A) : (@I (nat -> (nat -> A) -> nat) k n z) = (term1298 A k n z).
Proof. exact (@lem377490 A (@I (nat -> (nat -> A) -> nat) k n) z). Qed.
Lemma lem377493 {A : Type'} (k : type1584 A) (n : nat) (z : nat -> A) : (k n z) = (term1298 A k n z).
Proof. exact (TRANS (@lem377487 A k n z) (@lem377491 A k n z)). Qed.
Lemma lem377494 (n : nat) : n = n.
Proof. exact (eq_refl n). Qed.
Lemma lem377495 {A : Type'} (k : type1584 A) (n : nat) (z : nat -> A) : (term1309 A k n z) = (term1310 A k n z).
Proof. exact (MK_COMB (@lem377476) (@lem377493 A k n z)). Qed.
Lemma lem377496 {A : Type'} (k : type1584 A) (z : nat -> A) (n : nat) : (term1311 A k z n) = (term1312 A k z n).
Proof. exact (MK_COMB (@lem377495 A k n z) (@lem377494 n)). Qed.
Lemma lem377498 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377499 (f : type1605) (x : nat) : (f x) = (@I (nat -> nat -> Prop) f x).
Proof. exact (@lem377498 nat (nat -> Prop) f x). Qed.
Lemma lem377500 {A : Type'} (k : type1584 A) (n : nat) (z : nat -> A) : (term1310 A k n z) = (term1313 A k n z).
Proof. exact (@lem377499 Peano.lt (term1298 A k n z)). Qed.
Lemma lem377501 (n : nat) : n = n.
Proof. exact (eq_refl n). Qed.
Lemma lem377502 {A : Type'} (k : type1584 A) (z : nat -> A) (n : nat) : (term1312 A k z n) = (term1314 A k z n).
Proof. exact (MK_COMB (@lem377500 A k n z) (@lem377501 n)). Qed.
Lemma lem377504 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377505 (f : nat -> Prop) (x : nat) : (f x) = (@I (nat -> Prop) f x).
Proof. exact (@lem377504 nat Prop f x). Qed.
Lemma lem377506 {A : Type'} (k : type1584 A) (z : nat -> A) (n : nat) : (term1314 A k z n) = (term1315 A k z n).
Proof. exact (@lem377505 (term1313 A k n z) n). Qed.
Lemma lem377507 {A : Type'} (k : type1584 A) (z : nat -> A) (n : nat) : (term1312 A k z n) = (term1315 A k z n).
Proof. exact (TRANS (@lem377502 A k z n) (@lem377506 A k z n)). Qed.
Lemma lem377508 {A : Type'} (k : type1584 A) (z : nat -> A) (n : nat) : (term1311 A k z n) = (term1315 A k z n).
Proof. exact (TRANS (@lem377496 A k z n) (@lem377507 A k z n)). Qed.
Lemma lem377509 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem377510 {A : Type'} (k : type1584 A) (z : nat -> A) (n : nat) : (term1316 A k z n) = (term1317 A k z n).
Proof. exact (MK_COMB (@lem377509) (@lem377508 A k z n)). Qed.
Lemma lem377511 {A : Type'} (y : nat -> A) (k : type1584 A) (n : nat) (z : nat -> A) : (term1318 A y k n z) = (term1319 A y k n z).
Proof. exact (MK_COMB (@lem377510 A k z n) (@lem377475 A y k n z)). Qed.
Lemma lem377512 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem377517 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377518 {A : Type'} (f : type976 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> Prop) f x).
Proof. exact (@lem377517 (nat -> A) Prop f x). Qed.
Lemma lem377520 {A : Type'} (bad : type976 A) (z : nat -> A) : (bad z) = (@I ((nat -> A) -> Prop) bad z).
Proof. exact (@lem377518 A bad z). Qed.
Lemma lem377521 {A : Type'} (bad : type976 A) (z : nat -> A) : (term807 A bad z) = (term1294 A bad z).
Proof. exact (MK_COMB (@lem377512) (@lem377520 A bad z)). Qed.
Lemma lem377522 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem377523 {A : Type'} (bad : type976 A) (z : nat -> A) : (term1075 A bad z) = (term1295 A bad z).
Proof. exact (MK_COMB (@lem377522) (@lem377521 A bad z)). Qed.
Lemma lem377524 {A : Type'} (bad : type976 A) (y : nat -> A) (k : type1584 A) (n : nat) (z : nat -> A) : (term1320 A bad y k n z) = (term1321 A bad y k n z).
Proof. exact (MK_COMB (@lem377523 A bad z) (@lem377511 A y k n z)). Qed.
Lemma lem377525 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem377526 {A : Type'} (bad : type976 A) (y : nat -> A) (k : type1584 A) (n : nat) (z : nat -> A) : (term1322 A bad y k n z) = (term1323 A bad y k n z).
Proof. exact (MK_COMB (@lem377525) (@lem377524 A bad y k n z)). Qed.
Lemma lem377527 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1324 A bad k lt2 z y n) = (term1325 A bad k lt2 z y n).
Proof. exact (MK_COMB (@lem377526 A bad y k n z) (@lem377422 A lt2 z y n)). Qed.
Lemma lem377528 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1326 A bad k lt2 y n) = (term1327 A bad k lt2 y n).
Proof. exact (fun_ext (fun z : nat -> A => @lem377527 A bad k lt2 z y n)). Qed.
Lemma lem377529 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem377530 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1179 A bad k lt2 y n) = (term1328 A bad k lt2 y n).
Proof. exact (MK_COMB (@lem377529 A) (@lem377528 A bad k lt2 y n)). Qed.
Lemma lem377531 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) : (term1181 A bad k lt2 y) = (term1329 A bad k lt2 y).
Proof. exact (fun_ext (fun n : nat => @lem377530 A bad k lt2 y n)). Qed.
Lemma lem377532 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem377533 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) : (term1183 A bad k lt2 y) = (term1330 A bad k lt2 y).
Proof. exact (MK_COMB (@lem377532) (@lem377531 A bad k lt2 y)). Qed.
Lemma lem377534 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem377541 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377542 {A : Type'} (f : type1604 A) (x : nat) : (f x) = (@I (nat -> nat -> A) f x).
Proof. exact (@lem377541 nat (nat -> A) f x). Qed.
Lemma lem377543 {A : Type'} (y' : type1604 A) (n : nat) : (y' n) = (@I (nat -> nat -> A) y' n).
Proof. exact (@lem377542 A y' n). Qed.
Lemma lem377544 (n : nat) : n = n.
Proof. exact (eq_refl n). Qed.
Lemma lem377545 {A : Type'} (y' : type1604 A) (n : nat) : (y' n n) = (@I (nat -> nat -> A) y' n n).
Proof. exact (MK_COMB (@lem377543 A y' n) (@lem377544 n)). Qed.
Lemma lem377547 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377548 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem377547 nat A f x). Qed.
Lemma lem377549 {A : Type'} (y' : type1604 A) (n : nat) : (@I (nat -> nat -> A) y' n n) = (term1331 A y' n).
Proof. exact (@lem377548 A (@I (nat -> nat -> A) y' n) n). Qed.
Lemma lem377551 {A : Type'} (y' : type1604 A) (n : nat) : (y' n n) = (term1331 A y' n).
Proof. exact (TRANS (@lem377545 A y' n) (@lem377549 A y' n)). Qed.
Lemma lem377556 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377557 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem377556 nat A f x). Qed.
Lemma lem377559 {A : Type'} (y : nat -> A) (n : nat) : (y n) = (@I (nat -> A) y n).
Proof. exact (@lem377557 A y n). Qed.
Lemma lem377560 {A : Type'} (y' : type1604 A) (n : nat) : (term1332 A y' n) = (term1333 A y' n).
Proof. exact (MK_COMB (@lem377534 A) (@lem377551 A y' n)). Qed.
Lemma lem377561 {A : Type'} (y' : type1604 A) (y : nat -> A) (n : nat) : ((y' n n) = (y n)) = ((term1331 A y' n) = (@I (nat -> A) y n)).
Proof. exact (MK_COMB (@lem377560 A y' n) (@lem377559 A y n)). Qed.
Lemma lem377562 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem377569 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377570 {A : Type'} (f : type1604 A) (x : nat) : (f x) = (@I (nat -> nat -> A) f x).
Proof. exact (@lem377569 nat (nat -> A) f x). Qed.
Lemma lem377571 {A : Type'} (y' : type1604 A) (n : nat) : (y' n) = (@I (nat -> nat -> A) y' n).
Proof. exact (@lem377570 A y' n). Qed.
Lemma lem377572 (k : nat) : k = k.
Proof. exact (eq_refl k). Qed.
Lemma lem377573 {A : Type'} (y' : type1604 A) (n : nat) (k : nat) : (y' n k) = (@I (nat -> nat -> A) y' n k).
Proof. exact (MK_COMB (@lem377571 A y' n) (@lem377572 k)). Qed.
Lemma lem377575 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377576 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem377575 nat A f x). Qed.
Lemma lem377577 {A : Type'} (y' : type1604 A) (n : nat) (k : nat) : (@I (nat -> nat -> A) y' n k) = (term1334 A y' n k).
Proof. exact (@lem377576 A (@I (nat -> nat -> A) y' n) k). Qed.
Lemma lem377579 {A : Type'} (y' : type1604 A) (n : nat) (k : nat) : (y' n k) = (term1334 A y' n k).
Proof. exact (TRANS (@lem377573 A y' n k) (@lem377577 A y' n k)). Qed.
Lemma lem377584 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377585 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem377584 nat A f x). Qed.
Lemma lem377587 {A : Type'} (y : nat -> A) (k : nat) : (y k) = (@I (nat -> A) y k).
Proof. exact (@lem377585 A y k). Qed.
Lemma lem377588 {A : Type'} (y' : type1604 A) (n : nat) (k : nat) : (term1335 A y' n k) = (term1336 A y' n k).
Proof. exact (MK_COMB (@lem377562 A) (@lem377579 A y' n k)). Qed.
Lemma lem377589 {A : Type'} (y' : type1604 A) (n : nat) (y : nat -> A) (k : nat) : ((y' n k) = (y k)) = ((term1334 A y' n k) = (@I (nat -> A) y k)).
Proof. exact (MK_COMB (@lem377588 A y' n k) (@lem377587 A y k)). Qed.
Lemma lem377590 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem377597 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377598 (f : type1605) (x : nat) : (f x) = (@I (nat -> nat -> Prop) f x).
Proof. exact (@lem377597 nat (nat -> Prop) f x). Qed.
Lemma lem377599 (k : nat) : (Peano.lt k) = (@I (nat -> nat -> Prop) Peano.lt k).
Proof. exact (@lem377598 Peano.lt k). Qed.
Lemma lem377600 (n : nat) : n = n.
Proof. exact (eq_refl n). Qed.
Lemma lem377601 (k : nat) (n : nat) : (Peano.lt k n) = (@I (nat -> nat -> Prop) Peano.lt k n).
Proof. exact (MK_COMB (@lem377599 k) (@lem377600 n)). Qed.
Lemma lem377603 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377604 (f : nat -> Prop) (x : nat) : (f x) = (@I (nat -> Prop) f x).
Proof. exact (@lem377603 nat Prop f x). Qed.
Lemma lem377605 (k : nat) (n : nat) : (@I (nat -> nat -> Prop) Peano.lt k n) = (term1282 k n).
Proof. exact (@lem377604 (@I (nat -> nat -> Prop) Peano.lt k) n). Qed.
Lemma lem377607 (k : nat) (n : nat) : (Peano.lt k n) = (term1282 k n).
Proof. exact (TRANS (@lem377601 k n) (@lem377605 k n)). Qed.
Lemma lem377608 (k : nat) (n : nat) : (term1283 k n) = (term1284 k n).
Proof. exact (MK_COMB (@lem377590) (@lem377607 k n)). Qed.
Lemma lem377609 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem377610 (k : nat) (n : nat) : (term1285 k n) = (term1286 k n).
Proof. exact (MK_COMB (@lem377609) (@lem377608 k n)). Qed.
Lemma lem377611 {A : Type'} (y' : type1604 A) (n : nat) (y : nat -> A) (k : nat) : (term1337 A y' n y k) = (term1338 A y' n y k).
Proof. exact (MK_COMB (@lem377610 k n) (@lem377589 A y' n y k)). Qed.
Lemma lem377612 {A : Type'} (y' : type1604 A) (n : nat) (y : nat -> A) : (term1339 A y' n y) = (term1340 A y' n y).
Proof. exact (fun_ext (fun k : nat => @lem377611 A y' n y k)). Qed.
Lemma lem377613 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem377614 {A : Type'} (y' : type1604 A) (n : nat) (y : nat -> A) : (term1341 A y' n y) = (term1342 A y' n y).
Proof. exact (MK_COMB (@lem377613) (@lem377612 A y' n y)). Qed.
Lemma lem377615 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem377616 {A : Type'} (y' : type1604 A) (n : nat) (y : nat -> A) : (term1343 A y' n y) = (term1344 A y' n y).
Proof. exact (MK_COMB (@lem377615) (@lem377614 A y' n y)). Qed.
Lemma lem377617 {A : Type'} (y' : type1604 A) (y : nat -> A) (n : nat) : (term1345 A y' y n) = (term1346 A y' y n).
Proof. exact (MK_COMB (@lem377616 A y' n y) (@lem377561 A y' y n)). Qed.
Lemma lem377618 {A : Type'} (bad : type976 A) : bad = bad.
Proof. exact (eq_refl bad). Qed.
Lemma lem377623 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377624 {A : Type'} (f : type1604 A) (x : nat) : (f x) = (@I (nat -> nat -> A) f x).
Proof. exact (@lem377623 nat (nat -> A) f x). Qed.
Lemma lem377626 {A : Type'} (y' : type1604 A) (n : nat) : (y' n) = (@I (nat -> nat -> A) y' n).
Proof. exact (@lem377624 A y' n). Qed.
Lemma lem377627 {A : Type'} (bad : type976 A) (y' : type1604 A) (n : nat) : (term1347 A bad y' n) = (term1348 A bad y' n).
Proof. exact (MK_COMB (@lem377618 A bad) (@lem377626 A y' n)). Qed.
Lemma lem377629 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377630 {A : Type'} (f : type976 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> Prop) f x).
Proof. exact (@lem377629 (nat -> A) Prop f x). Qed.
Lemma lem377631 {A : Type'} (bad : type976 A) (y' : type1604 A) (n : nat) : (term1348 A bad y' n) = (term1349 A bad y' n).
Proof. exact (@lem377630 A bad (@I (nat -> nat -> A) y' n)). Qed.
Lemma lem377632 {A : Type'} (bad : type976 A) (y' : type1604 A) (n : nat) : (term1347 A bad y' n) = (term1349 A bad y' n).
Proof. exact (TRANS (@lem377627 A bad y' n) (@lem377631 A bad y' n)). Qed.
Lemma lem377633 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem377634 {A : Type'} (bad : type976 A) (y' : type1604 A) (n : nat) : (term1350 A bad y' n) = (term1351 A bad y' n).
Proof. exact (MK_COMB (@lem377633) (@lem377632 A bad y' n)). Qed.
Lemma lem377635 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) (n : nat) : (term1104 A bad y' y n) = (term1352 A bad y' y n).
Proof. exact (MK_COMB (@lem377634 A bad y' n) (@lem377617 A y' y n)). Qed.
Lemma lem377636 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) : (term1106 A bad y' y) = (term1353 A bad y' y).
Proof. exact (fun_ext (fun n : nat => @lem377635 A bad y' y n)). Qed.
Lemma lem377637 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem377638 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) : (term1108 A bad y' y) = (term1354 A bad y' y).
Proof. exact (MK_COMB (@lem377637) (@lem377636 A bad y' y)). Qed.
Lemma lem377639 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem377640 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) : (term1199 A bad y' y) = (term1355 A bad y' y).
Proof. exact (MK_COMB (@lem377639) (@lem377638 A bad y' y)). Qed.
Lemma lem377641 {A : Type'} (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) : (term1215 A y' bad k lt2 y) = (term1356 A y' bad k lt2 y).
Proof. exact (MK_COMB (@lem377640 A bad y' y) (@lem377533 A bad k lt2 y)). Qed.
Lemma lem377642 {A : Type'} (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1356 A y' bad k lt2 y.
Proof. exact (EQ_MP (@lem377641 A y' bad k lt2 y) (@lem377283 A y' bad k lt2 y h1)). Qed.
Lemma lem377647 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377648 {A : Type'} (f : type976 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> Prop) f x).
Proof. exact (@lem377647 (nat -> A) Prop f x). Qed.
Lemma lem377650 {A : Type'} (bad : type976 A) (x : nat -> A) : (bad x) = (@I ((nat -> A) -> Prop) bad x).
Proof. exact (@lem377648 A bad x). Qed.
Lemma lem377651 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem377656 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377657 {A : Type'} (f : type976 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> Prop) f x).
Proof. exact (@lem377656 (nat -> A) Prop f x). Qed.
Lemma lem377659 {A : Type'} (bad : type976 A) (y : nat -> A) : (bad y) = (@I ((nat -> A) -> Prop) bad y).
Proof. exact (@lem377657 A bad y). Qed.
Lemma lem377660 {A : Type'} (bad : type976 A) (y : nat -> A) : (term807 A bad y) = (term1294 A bad y).
Proof. exact (MK_COMB (@lem377651) (@lem377659 A bad y)). Qed.
Lemma lem377661 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem377662 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem377663 {A : Type'} (y : nat -> A) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem377670 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377671 {A : Type'} (f : type967 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> (nat -> A) -> nat) f x).
Proof. exact (@lem377670 (nat -> A) (type977 A) f x). Qed.
Lemma lem377672 {A : Type'} (k' : type967 A) (x : nat -> A) : (k' x) = (@I ((nat -> A) -> (nat -> A) -> nat) k' x).
Proof. exact (@lem377671 A k' x). Qed.
Lemma lem377673 {A : Type'} (y : nat -> A) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem377674 {A : Type'} (k' : type967 A) (x : nat -> A) (y : nat -> A) : (k' x y) = (@I ((nat -> A) -> (nat -> A) -> nat) k' x y).
Proof. exact (MK_COMB (@lem377672 A k' x) (@lem377673 A y)). Qed.
Lemma lem377676 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377677 {A : Type'} (f : type977 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> nat) f x).
Proof. exact (@lem377676 (nat -> A) nat f x). Qed.
Lemma lem377678 {A : Type'} (k' : type967 A) (x : nat -> A) (y : nat -> A) : (@I ((nat -> A) -> (nat -> A) -> nat) k' x y) = (term1357 A k' x y).
Proof. exact (@lem377677 A (@I ((nat -> A) -> (nat -> A) -> nat) k' x) y). Qed.
Lemma lem377680 {A : Type'} (k' : type967 A) (x : nat -> A) (y : nat -> A) : (k' x y) = (term1357 A k' x y).
Proof. exact (TRANS (@lem377674 A k' x y) (@lem377678 A k' x y)). Qed.
Lemma lem377681 {A : Type'} (k' : type967 A) (x : nat -> A) (y : nat -> A) : (term1358 A k' x y) = (term1359 A k' x y).
Proof. exact (MK_COMB (@lem377663 A y) (@lem377680 A k' x y)). Qed.
Lemma lem377683 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377684 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem377683 nat A f x). Qed.
Lemma lem377685 {A : Type'} (k' : type967 A) (x : nat -> A) (y : nat -> A) : (term1359 A k' x y) = (term1360 A k' x y).
Proof. exact (@lem377684 A y (term1357 A k' x y)). Qed.
Lemma lem377686 {A : Type'} (k' : type967 A) (x : nat -> A) (y : nat -> A) : (term1358 A k' x y) = (term1360 A k' x y).
Proof. exact (TRANS (@lem377681 A k' x y) (@lem377685 A k' x y)). Qed.
Lemma lem377687 {A : Type'} (x : nat -> A) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem377694 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377695 {A : Type'} (f : type967 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> (nat -> A) -> nat) f x).
Proof. exact (@lem377694 (nat -> A) (type977 A) f x). Qed.
Lemma lem377696 {A : Type'} (k' : type967 A) (x : nat -> A) : (k' x) = (@I ((nat -> A) -> (nat -> A) -> nat) k' x).
Proof. exact (@lem377695 A k' x). Qed.
Lemma lem377697 {A : Type'} (y : nat -> A) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem377698 {A : Type'} (k' : type967 A) (x : nat -> A) (y : nat -> A) : (k' x y) = (@I ((nat -> A) -> (nat -> A) -> nat) k' x y).
Proof. exact (MK_COMB (@lem377696 A k' x) (@lem377697 A y)). Qed.
Lemma lem377700 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377701 {A : Type'} (f : type977 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> nat) f x).
Proof. exact (@lem377700 (nat -> A) nat f x). Qed.
Lemma lem377702 {A : Type'} (k' : type967 A) (x : nat -> A) (y : nat -> A) : (@I ((nat -> A) -> (nat -> A) -> nat) k' x y) = (term1357 A k' x y).
Proof. exact (@lem377701 A (@I ((nat -> A) -> (nat -> A) -> nat) k' x) y). Qed.
Lemma lem377704 {A : Type'} (k' : type967 A) (x : nat -> A) (y : nat -> A) : (k' x y) = (term1357 A k' x y).
Proof. exact (TRANS (@lem377698 A k' x y) (@lem377702 A k' x y)). Qed.
Lemma lem377705 {A : Type'} (k' : type967 A) (x : nat -> A) (y : nat -> A) : (term1361 A k' x y) = (term1362 A k' x y).
Proof. exact (MK_COMB (@lem377687 A x) (@lem377704 A k' x y)). Qed.
Lemma lem377707 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377708 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem377707 nat A f x). Qed.
Lemma lem377709 {A : Type'} (k' : type967 A) (x : nat -> A) (y : nat -> A) : (term1362 A k' x y) = (term1363 A k' x y).
Proof. exact (@lem377708 A x (term1357 A k' x y)). Qed.
Lemma lem377710 {A : Type'} (k' : type967 A) (x : nat -> A) (y : nat -> A) : (term1361 A k' x y) = (term1363 A k' x y).
Proof. exact (TRANS (@lem377705 A k' x y) (@lem377709 A k' x y)). Qed.
Lemma lem377711 {A : Type'} (k' : type967 A) (x : nat -> A) (y : nat -> A) : (term1364 A k' x y) = (term1365 A k' x y).
Proof. exact (MK_COMB (@lem377662 A) (@lem377686 A k' x y)). Qed.
Lemma lem377712 {A : Type'} (k' : type967 A) (x : nat -> A) (y : nat -> A) : ((term1358 A k' x y) = (term1361 A k' x y)) = ((term1360 A k' x y) = (term1363 A k' x y)).
Proof. exact (MK_COMB (@lem377711 A k' x y) (@lem377710 A k' x y)). Qed.
Lemma lem377713 {A : Type'} (k' : type967 A) (x : nat -> A) (y : nat -> A) : (term1366 A k' x y) = (term1367 A k' x y).
Proof. exact (MK_COMB (@lem377661) (@lem377712 A k' x y)). Qed.
Lemma lem377714 : Peano.lt = Peano.lt.
Proof. exact (eq_refl Peano.lt). Qed.
Lemma lem377721 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377722 {A : Type'} (f : type967 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> (nat -> A) -> nat) f x).
Proof. exact (@lem377721 (nat -> A) (type977 A) f x). Qed.
Lemma lem377723 {A : Type'} (k' : type967 A) (x : nat -> A) : (k' x) = (@I ((nat -> A) -> (nat -> A) -> nat) k' x).
Proof. exact (@lem377722 A k' x). Qed.
Lemma lem377724 {A : Type'} (y : nat -> A) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem377725 {A : Type'} (k' : type967 A) (x : nat -> A) (y : nat -> A) : (k' x y) = (@I ((nat -> A) -> (nat -> A) -> nat) k' x y).
Proof. exact (MK_COMB (@lem377723 A k' x) (@lem377724 A y)). Qed.
Lemma lem377727 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377728 {A : Type'} (f : type977 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> nat) f x).
Proof. exact (@lem377727 (nat -> A) nat f x). Qed.
Lemma lem377729 {A : Type'} (k' : type967 A) (x : nat -> A) (y : nat -> A) : (@I ((nat -> A) -> (nat -> A) -> nat) k' x y) = (term1357 A k' x y).
Proof. exact (@lem377728 A (@I ((nat -> A) -> (nat -> A) -> nat) k' x) y). Qed.
Lemma lem377731 {A : Type'} (k' : type967 A) (x : nat -> A) (y : nat -> A) : (k' x y) = (term1357 A k' x y).
Proof. exact (TRANS (@lem377725 A k' x y) (@lem377729 A k' x y)). Qed.
Lemma lem377736 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377737 {A : Type'} (f : type977 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> nat) f x).
Proof. exact (@lem377736 (nat -> A) nat f x). Qed.
Lemma lem377739 {A : Type'} (n' : type977 A) (x : nat -> A) : (n' x) = (@I ((nat -> A) -> nat) n' x).
Proof. exact (@lem377737 A n' x). Qed.
Lemma lem377740 {A : Type'} (k' : type967 A) (x : nat -> A) (y : nat -> A) : (term1368 A k' x y) = (term1369 A k' x y).
Proof. exact (MK_COMB (@lem377714) (@lem377731 A k' x y)). Qed.
Lemma lem377741 {A : Type'} (k' : type967 A) (y : nat -> A) (n' : type977 A) (x : nat -> A) : (term1370 A k' y n' x) = (term1371 A k' y n' x).
Proof. exact (MK_COMB (@lem377740 A k' x y) (@lem377739 A n' x)). Qed.
Lemma lem377743 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377744 (f : type1605) (x : nat) : (f x) = (@I (nat -> nat -> Prop) f x).
Proof. exact (@lem377743 nat (nat -> Prop) f x). Qed.
Lemma lem377745 {A : Type'} (k' : type967 A) (x : nat -> A) (y : nat -> A) : (term1369 A k' x y) = (term1372 A k' x y).
Proof. exact (@lem377744 Peano.lt (term1357 A k' x y)). Qed.
Lemma lem377746 {A : Type'} (n' : type977 A) (x : nat -> A) : (@I ((nat -> A) -> nat) n' x) = (@I ((nat -> A) -> nat) n' x).
Proof. exact (eq_refl (@I ((nat -> A) -> nat) n' x)). Qed.
Lemma lem377747 {A : Type'} (k' : type967 A) (y : nat -> A) (n' : type977 A) (x : nat -> A) : (term1371 A k' y n' x) = (term1373 A k' y n' x).
Proof. exact (MK_COMB (@lem377745 A k' x y) (@lem377746 A n' x)). Qed.
Lemma lem377749 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377750 (f : nat -> Prop) (x : nat) : (f x) = (@I (nat -> Prop) f x).
Proof. exact (@lem377749 nat Prop f x). Qed.
Lemma lem377751 {A : Type'} (k' : type967 A) (y : nat -> A) (n' : type977 A) (x : nat -> A) : (term1373 A k' y n' x) = (term1374 A k' y n' x).
Proof. exact (@lem377750 (term1372 A k' x y) (@I ((nat -> A) -> nat) n' x)). Qed.
Lemma lem377752 {A : Type'} (k' : type967 A) (y : nat -> A) (n' : type977 A) (x : nat -> A) : (term1371 A k' y n' x) = (term1374 A k' y n' x).
Proof. exact (TRANS (@lem377747 A k' y n' x) (@lem377751 A k' y n' x)). Qed.
Lemma lem377753 {A : Type'} (k' : type967 A) (y : nat -> A) (n' : type977 A) (x : nat -> A) : (term1370 A k' y n' x) = (term1374 A k' y n' x).
Proof. exact (TRANS (@lem377741 A k' y n' x) (@lem377752 A k' y n' x)). Qed.
Lemma lem377754 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem377755 {A : Type'} (k' : type967 A) (y : nat -> A) (n' : type977 A) (x : nat -> A) : (term1375 A k' y n' x) = (term1376 A k' y n' x).
Proof. exact (MK_COMB (@lem377754) (@lem377753 A k' y n' x)). Qed.
Lemma lem377756 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (y : nat -> A) : (term1377 A n' k' x y) = (term1378 A n' k' x y).
Proof. exact (MK_COMB (@lem377755 A k' y n' x) (@lem377713 A k' x y)). Qed.
Lemma lem377757 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem377758 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (y : nat -> A) : (term1379 A n' k' x y) = (term1380 A n' k' x y).
Proof. exact (MK_COMB (@lem377757) (@lem377756 A n' k' x y)). Qed.
Lemma lem377759 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term1381 A n' k' x bad y) = (term1382 A n' k' x bad y).
Proof. exact (MK_COMB (@lem377758 A n' k' x y) (@lem377660 A bad y)). Qed.
Lemma lem377760 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (bad : type976 A) : (term1383 A n' k' x bad) = (term1384 A n' k' x bad).
Proof. exact (fun_ext (fun y : nat -> A => @lem377759 A n' k' x bad y)). Qed.
Lemma lem377761 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem377762 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (bad : type976 A) : (term1385 A n' k' x bad) = (term1386 A n' k' x bad).
Proof. exact (MK_COMB (@lem377761 A) (@lem377760 A n' k' x bad)). Qed.
Lemma lem377767 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377768 {A : Type'} (f : type976 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> Prop) f x).
Proof. exact (@lem377767 (nat -> A) Prop f x). Qed.
Lemma lem377770 {A : Type'} (bad : type976 A) (x : nat -> A) : (bad x) = (@I ((nat -> A) -> Prop) bad x).
Proof. exact (@lem377768 A bad x). Qed.
Lemma lem377771 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem377772 {A : Type'} (bad : type976 A) (x : nat -> A) : (term842 A bad x) = (term1387 A bad x).
Proof. exact (MK_COMB (@lem377771) (@lem377770 A bad x)). Qed.
Lemma lem377773 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (bad : type976 A) : (term965 A n' k' x bad) = (term1388 A n' k' x bad).
Proof. exact (MK_COMB (@lem377772 A bad x) (@lem377762 A n' k' x bad)). Qed.
Lemma lem377774 {A : Type'} (n' : type977 A) (k' : type967 A) (bad : type976 A) : (term967 A n' k' bad) = (term1389 A n' k' bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem377773 A n' k' x bad)). Qed.
Lemma lem377775 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem377776 {A : Type'} (n' : type977 A) (k' : type967 A) (bad : type976 A) : (term969 A n' k' bad) = (term1390 A n' k' bad).
Proof. exact (MK_COMB (@lem377775 A) (@lem377774 A n' k' bad)). Qed.
Lemma lem377777 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem377778 {A : Type'} (n' : type977 A) (k' : type967 A) (bad : type976 A) : (term1005 A n' k' bad) = (term1391 A n' k' bad).
Proof. exact (MK_COMB (@lem377777) (@lem377776 A n' k' bad)). Qed.
Lemma lem377779 {A : Type'} (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) : (term1051 A n' k' bad x) = (term1392 A n' k' bad x).
Proof. exact (MK_COMB (@lem377778 A n' k' bad) (@lem377650 A bad x)). Qed.
Lemma lem377784 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem377785 {A : Type'} (f : type421 A) (x : type1402 A) : (f x) = (@I ((A -> A -> Prop) -> Prop) f x).
Proof. exact (@lem377784 (type1402 A) Prop f x). Qed.
Lemma lem377787 {A : Type'} (lt2 : type1402 A) : (@WF A lt2) = (@I ((A -> A -> Prop) -> Prop) (@WF A) lt2).
Proof. exact (@lem377785 A (@WF A) lt2). Qed.
Lemma lem377788 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem377789 {A : Type'} (lt2 : type1402 A) : (term819 A lt2) = (term1393 A lt2).
Proof. exact (MK_COMB (@lem377788) (@lem377787 A lt2)). Qed.
Lemma lem377790 {A : Type'} (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) : (term1057 A lt2 n' k' bad x) = (term1394 A lt2 n' k' bad x).
Proof. exact (MK_COMB (@lem377789 A lt2) (@lem377779 A n' k' bad x)). Qed.
Lemma lem377791 {A : Type'} (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1057 A lt2 n' k' bad x) : term1394 A lt2 n' k' bad x.
Proof. exact (EQ_MP (@lem377790 A lt2 n' k' bad x) (@lem377286 A lt2 n' k' bad x h1)). Qed.
Lemma lem377792 {A : Type'} (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1057 A lt2 n' k' bad x) : term1392 A n' k' bad x.
Proof. exact (proj2 (@lem377791 A lt2 n' k' bad x h1)). Qed.
Lemma lem377795 {A : Type'} (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1057 A lt2 n' k' bad x) : term1390 A n' k' bad.
Proof. exact (proj1 (@lem377792 A lt2 n' k' bad x h1)). Qed.
Lemma lem377796 {A : Type'} (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1330 A bad k lt2 y.
Proof. exact (proj2 (@lem377642 A y' bad k lt2 y h1)). Qed.
Lemma lem377797 {A : Type'} (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1354 A bad y' y.
Proof. exact (proj1 (@lem377642 A y' bad k lt2 y h1)). Qed.
Lemma lem377799 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1293 A bad lt2 z y n) : term1293 A bad lt2 z y n.
Proof. exact (h1). Qed.
Lemma lem377801 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1293 A bad lt2 z y n) : term1291 A bad n z y.
Proof. exact (proj1 (@lem377799 A bad lt2 z y n h1)). Qed.
Lemma lem377802 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1293 A bad lt2 z y n) : term1289 A n z y.
Proof. exact (proj2 (@lem377801 A bad lt2 z y n h1)). Qed.
Lemma lem377809 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1395 A P Q) = (term1396 A P Q).
Proof. exact (EQ_MP (@lem19007 A P Q) (@lem19006 A P Q)). Qed.
Lemma lem377810 {A : Type'} (P : Prop) (Q : type976 A) : (term1397 A P Q) = (term1398 A P Q).
Proof. exact (@lem377809 (nat -> A) P Q). Qed.
Lemma lem377811 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (bad : type976 A) : (term1399 A n' k' x bad) = (term1400 A n' k' x bad).
Proof. exact (@lem377810 A (@I ((nat -> A) -> Prop) bad x) (term1384 A n' k' x bad)). Qed.
Lemma lem377812 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term1401 A n' k' x bad y) = (term1382 A n' k' x bad y).
Proof. exact (eq_refl (term1401 A n' k' x bad y)). Qed.
Lemma lem377813 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (bad : type976 A) : (term1402 A n' k' x bad) = (term1384 A n' k' x bad).
Proof. exact (fun_ext (fun y : nat -> A => @lem377812 A n' k' x bad y)). Qed.
Lemma lem377814 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem377815 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (bad : type976 A) : (term1403 A n' k' x bad) = (term1386 A n' k' x bad).
Proof. exact (MK_COMB (@lem377814 A) (@lem377813 A n' k' x bad)). Qed.
Lemma lem377816 {A : Type'} (bad : type976 A) (x : nat -> A) : (term1387 A bad x) = (term1387 A bad x).
Proof. exact (eq_refl (term1387 A bad x)). Qed.
Lemma lem377817 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (bad : type976 A) : (term1399 A n' k' x bad) = (term1388 A n' k' x bad).
Proof. exact (MK_COMB (@lem377816 A bad x) (@lem377815 A n' k' x bad)). Qed.
Lemma lem377818 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem377819 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (bad : type976 A) : (term1404 A n' k' x bad) = (term1405 A n' k' x bad).
Proof. exact (MK_COMB (@lem377818) (@lem377817 A n' k' x bad)). Qed.
Lemma lem377820 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term1401 A n' k' x bad y) = (term1382 A n' k' x bad y).
Proof. exact (eq_refl (term1401 A n' k' x bad y)). Qed.
Lemma lem377821 {A : Type'} (bad : type976 A) (x : nat -> A) : (term1387 A bad x) = (term1387 A bad x).
Proof. exact (eq_refl (term1387 A bad x)). Qed.
Lemma lem377822 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term1406 A n' k' x bad y) = (term1407 A n' k' x bad y).
Proof. exact (MK_COMB (@lem377821 A bad x) (@lem377820 A n' k' x bad y)). Qed.
Lemma lem377823 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (bad : type976 A) : (term1408 A n' k' x bad) = (term1409 A n' k' x bad).
Proof. exact (fun_ext (fun y : nat -> A => @lem377822 A n' k' x bad y)). Qed.
Lemma lem377824 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem377825 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (bad : type976 A) : (term1400 A n' k' x bad) = (term1410 A n' k' x bad).
Proof. exact (MK_COMB (@lem377824 A) (@lem377823 A n' k' x bad)). Qed.
Lemma lem377826 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (bad : type976 A) : ((term1399 A n' k' x bad) = (term1400 A n' k' x bad)) = ((term1388 A n' k' x bad) = (term1410 A n' k' x bad)).
Proof. exact (MK_COMB (@lem377819 A n' k' x bad) (@lem377825 A n' k' x bad)). Qed.
Lemma lem377827 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (bad : type976 A) : (term1388 A n' k' x bad) = (term1410 A n' k' x bad).
Proof. exact (EQ_MP (@lem377826 A n' k' x bad) (@lem377811 A n' k' x bad)). Qed.
Lemma lem377828 {A : Type'} (n' : type977 A) (k' : type967 A) (bad : type976 A) : (term1389 A n' k' bad) = (term1411 A n' k' bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem377827 A n' k' x bad)). Qed.
Lemma lem377829 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem377830 {A : Type'} (n' : type977 A) (k' : type967 A) (bad : type976 A) : (term1390 A n' k' bad) = (term1412 A n' k' bad).
Proof. exact (MK_COMB (@lem377829 A) (@lem377828 A n' k' bad)). Qed.
Lemma lem377847 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term1382 A n' k' x bad y) = (term1413 A n' k' x bad y).
Proof. exact (@lem19699 (term1374 A k' y n' x) (term1367 A k' x y) (term1294 A bad y)). Qed.
Lemma lem377850 {A : Type'} (bad : type976 A) (x : nat -> A) : (term1387 A bad x) = (term1387 A bad x).
Proof. exact (eq_refl (term1387 A bad x)). Qed.
Lemma lem377851 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term1407 A n' k' x bad y) = (term1414 A n' k' x bad y).
Proof. exact (MK_COMB (@lem377850 A bad x) (@lem377847 A n' k' x bad y)). Qed.
Lemma lem377858 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term1414 A n' k' x bad y) = (term1415 A n' k' x bad y).
Proof. exact (@lem19490 (term1416 A k' n' x bad y) (@I ((nat -> A) -> Prop) bad x) (term1417 A k' x bad y)). Qed.
Lemma lem377859 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term1407 A n' k' x bad y) = (term1415 A n' k' x bad y).
Proof. exact (TRANS (@lem377851 A n' k' x bad y) (@lem377858 A n' k' x bad y)). Qed.
Lemma lem377860 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (bad : type976 A) : (term1409 A n' k' x bad) = (term1418 A n' k' x bad).
Proof. exact (fun_ext (fun y : nat -> A => @lem377859 A n' k' x bad y)). Qed.
Lemma lem377861 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem377862 {A : Type'} (n' : type977 A) (k' : type967 A) (x : nat -> A) (bad : type976 A) : (term1410 A n' k' x bad) = (term1419 A n' k' x bad).
Proof. exact (MK_COMB (@lem377861 A) (@lem377860 A n' k' x bad)). Qed.
Lemma lem377863 {A : Type'} (n' : type977 A) (k' : type967 A) (bad : type976 A) : (term1411 A n' k' bad) = (term1420 A n' k' bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem377862 A n' k' x bad)). Qed.
Lemma lem377864 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem377865 {A : Type'} (n' : type977 A) (k' : type967 A) (bad : type976 A) : (term1412 A n' k' bad) = (term1421 A n' k' bad).
Proof. exact (MK_COMB (@lem377864 A) (@lem377863 A n' k' bad)). Qed.
Lemma lem377866 {A : Type'} (n' : type977 A) (k' : type967 A) (bad : type976 A) : (term1390 A n' k' bad) = (term1421 A n' k' bad).
Proof. exact (TRANS (@lem377830 A n' k' bad) (@lem377865 A n' k' bad)). Qed.
Lemma lem377867 {A : Type'} (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1057 A lt2 n' k' bad x) : term1421 A n' k' bad.
Proof. exact (EQ_MP (@lem377866 A n' k' bad) (@lem377795 A lt2 n' k' bad x h1)). Qed.
Lemma lem377873 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1422 A P Q) = (term1423 A P Q).
Proof. exact (EQ_MP (@lem19025 A P Q) (@lem19024 A P Q)). Qed.
Lemma lem377874 (P : nat -> Prop) (Q : Prop) : (term1424 P Q) = (term1425 P Q).
Proof. exact (@lem377873 nat P Q). Qed.
Lemma lem377875 {A : Type'} (y' : type1604 A) (y : nat -> A) (n : nat) : (term1426 A y' y n) = (term1427 A y' y n).
Proof. exact (@lem377874 (term1340 A y' n y) ((term1331 A y' n) = (@I (nat -> A) y n))). Qed.
Lemma lem377876 {A : Type'} (y' : type1604 A) (n : nat) (y : nat -> A) (k : nat) : (term1428 A y' n y k) = (term1338 A y' n y k).
Proof. exact (eq_refl (term1428 A y' n y k)). Qed.
Lemma lem377877 {A : Type'} (y' : type1604 A) (n : nat) (y : nat -> A) : (term1429 A y' n y) = (term1340 A y' n y).
Proof. exact (fun_ext (fun k : nat => @lem377876 A y' n y k)). Qed.
Lemma lem377878 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem377879 {A : Type'} (y' : type1604 A) (n : nat) (y : nat -> A) : (term1430 A y' n y) = (term1342 A y' n y).
Proof. exact (MK_COMB (@lem377878) (@lem377877 A y' n y)). Qed.
Lemma lem377880 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem377881 {A : Type'} (y' : type1604 A) (n : nat) (y : nat -> A) : (term1431 A y' n y) = (term1344 A y' n y).
Proof. exact (MK_COMB (@lem377880) (@lem377879 A y' n y)). Qed.
Lemma lem377882 {A : Type'} (y' : type1604 A) (y : nat -> A) (n : nat) : ((term1331 A y' n) = (@I (nat -> A) y n)) = ((term1331 A y' n) = (@I (nat -> A) y n)).
Proof. exact (eq_refl ((term1331 A y' n) = (@I (nat -> A) y n))). Qed.
Lemma lem377883 {A : Type'} (y' : type1604 A) (y : nat -> A) (n : nat) : (term1426 A y' y n) = (term1346 A y' y n).
Proof. exact (MK_COMB (@lem377881 A y' n y) (@lem377882 A y' y n)). Qed.
Lemma lem377884 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem377885 {A : Type'} (y' : type1604 A) (y : nat -> A) (n : nat) : (term1432 A y' y n) = (term1433 A y' y n).
Proof. exact (MK_COMB (@lem377884) (@lem377883 A y' y n)). Qed.
Lemma lem377886 {A : Type'} (y' : type1604 A) (n : nat) (y : nat -> A) (k : nat) : (term1428 A y' n y k) = (term1338 A y' n y k).
Proof. exact (eq_refl (term1428 A y' n y k)). Qed.
Lemma lem377887 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem377888 {A : Type'} (y' : type1604 A) (n : nat) (y : nat -> A) (k : nat) : (term1434 A y' n y k) = (term1435 A y' n y k).
Proof. exact (MK_COMB (@lem377887) (@lem377886 A y' n y k)). Qed.
Lemma lem377889 {A : Type'} (y' : type1604 A) (y : nat -> A) (n : nat) : ((term1331 A y' n) = (@I (nat -> A) y n)) = ((term1331 A y' n) = (@I (nat -> A) y n)).
Proof. exact (eq_refl ((term1331 A y' n) = (@I (nat -> A) y n))). Qed.
Lemma lem377890 {A : Type'} (k : nat) (y' : type1604 A) (y : nat -> A) (n : nat) : (term1436 A k y' y n) = (term1437 A k y' y n).
Proof. exact (MK_COMB (@lem377888 A y' n y k) (@lem377889 A y' y n)). Qed.
Lemma lem377891 {A : Type'} (y' : type1604 A) (y : nat -> A) (n : nat) : (term1438 A y' y n) = (term1439 A y' y n).
Proof. exact (fun_ext (fun k : nat => @lem377890 A k y' y n)). Qed.
Lemma lem377892 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem377893 {A : Type'} (y' : type1604 A) (y : nat -> A) (n : nat) : (term1427 A y' y n) = (term1440 A y' y n).
Proof. exact (MK_COMB (@lem377892) (@lem377891 A y' y n)). Qed.
Lemma lem377894 {A : Type'} (y' : type1604 A) (y : nat -> A) (n : nat) : ((term1426 A y' y n) = (term1427 A y' y n)) = ((term1346 A y' y n) = (term1440 A y' y n)).
Proof. exact (MK_COMB (@lem377885 A y' y n) (@lem377893 A y' y n)). Qed.
Lemma lem377895 {A : Type'} (y' : type1604 A) (y : nat -> A) (n : nat) : (term1346 A y' y n) = (term1440 A y' y n).
Proof. exact (EQ_MP (@lem377894 A y' y n) (@lem377875 A y' y n)). Qed.
Lemma lem377896 {A : Type'} (bad : type976 A) (y' : type1604 A) (n : nat) : (term1351 A bad y' n) = (term1351 A bad y' n).
Proof. exact (eq_refl (term1351 A bad y' n)). Qed.
Lemma lem377897 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) (n : nat) : (term1352 A bad y' y n) = (term1441 A bad y' y n).
Proof. exact (MK_COMB (@lem377896 A bad y' n) (@lem377895 A y' y n)). Qed.
Lemma lem377899 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1442 A P Q) = (term1443 A P Q).
Proof. exact (EQ_MP (@lem19019 A P Q) (@lem19018 A P Q)). Qed.
Lemma lem377900 (P : Prop) (Q : nat -> Prop) : (term1444 P Q) = (term1445 P Q).
Proof. exact (@lem377899 nat P Q). Qed.
Lemma lem377901 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) (n : nat) : (term1446 A bad y' y n) = (term1447 A bad y' y n).
Proof. exact (@lem377900 (term1349 A bad y' n) (term1439 A y' y n)). Qed.
Lemma lem377902 {A : Type'} (k : nat) (y' : type1604 A) (y : nat -> A) (n : nat) : (term1448 A y' y n k) = (term1437 A k y' y n).
Proof. exact (eq_refl (term1448 A y' y n k)). Qed.
Lemma lem377903 {A : Type'} (y' : type1604 A) (y : nat -> A) (n : nat) : (term1449 A y' y n) = (term1439 A y' y n).
Proof. exact (fun_ext (fun k : nat => @lem377902 A k y' y n)). Qed.
Lemma lem377904 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem377905 {A : Type'} (y' : type1604 A) (y : nat -> A) (n : nat) : (term1450 A y' y n) = (term1440 A y' y n).
Proof. exact (MK_COMB (@lem377904) (@lem377903 A y' y n)). Qed.
Lemma lem377906 {A : Type'} (bad : type976 A) (y' : type1604 A) (n : nat) : (term1351 A bad y' n) = (term1351 A bad y' n).
Proof. exact (eq_refl (term1351 A bad y' n)). Qed.
Lemma lem377907 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) (n : nat) : (term1446 A bad y' y n) = (term1441 A bad y' y n).
Proof. exact (MK_COMB (@lem377906 A bad y' n) (@lem377905 A y' y n)). Qed.
Lemma lem377908 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem377909 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) (n : nat) : (term1451 A bad y' y n) = (term1452 A bad y' y n).
Proof. exact (MK_COMB (@lem377908) (@lem377907 A bad y' y n)). Qed.
Lemma lem377910 {A : Type'} (k : nat) (y' : type1604 A) (y : nat -> A) (n : nat) : (term1448 A y' y n k) = (term1437 A k y' y n).
Proof. exact (eq_refl (term1448 A y' y n k)). Qed.
Lemma lem377911 {A : Type'} (bad : type976 A) (y' : type1604 A) (n : nat) : (term1351 A bad y' n) = (term1351 A bad y' n).
Proof. exact (eq_refl (term1351 A bad y' n)). Qed.
Lemma lem377912 {A : Type'} (bad : type976 A) (k : nat) (y' : type1604 A) (y : nat -> A) (n : nat) : (term1453 A bad y' y n k) = (term1454 A bad k y' y n).
Proof. exact (MK_COMB (@lem377911 A bad y' n) (@lem377910 A k y' y n)). Qed.
Lemma lem377913 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) (n : nat) : (term1455 A bad y' y n) = (term1456 A bad y' y n).
Proof. exact (fun_ext (fun k : nat => @lem377912 A bad k y' y n)). Qed.
Lemma lem377914 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem377915 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) (n : nat) : (term1447 A bad y' y n) = (term1457 A bad y' y n).
Proof. exact (MK_COMB (@lem377914) (@lem377913 A bad y' y n)). Qed.
Lemma lem377916 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) (n : nat) : ((term1446 A bad y' y n) = (term1447 A bad y' y n)) = ((term1441 A bad y' y n) = (term1457 A bad y' y n)).
Proof. exact (MK_COMB (@lem377909 A bad y' y n) (@lem377915 A bad y' y n)). Qed.
Lemma lem377917 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) (n : nat) : (term1441 A bad y' y n) = (term1457 A bad y' y n).
Proof. exact (EQ_MP (@lem377916 A bad y' y n) (@lem377901 A bad y' y n)). Qed.
Lemma lem377918 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) (n : nat) : (term1352 A bad y' y n) = (term1457 A bad y' y n).
Proof. exact (TRANS (@lem377897 A bad y' y n) (@lem377917 A bad y' y n)). Qed.
Lemma lem377919 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) : (term1353 A bad y' y) = (term1458 A bad y' y).
Proof. exact (fun_ext (fun n : nat => @lem377918 A bad y' y n)). Qed.
Lemma lem377920 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem377921 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) : (term1354 A bad y' y) = (term1459 A bad y' y).
Proof. exact (MK_COMB (@lem377920) (@lem377919 A bad y' y)). Qed.
Lemma lem377936 {A : Type'} (bad : type976 A) (k : nat) (y' : type1604 A) (y : nat -> A) (n : nat) : (term1454 A bad k y' y n) = (term1454 A bad k y' y n).
Proof. exact (eq_refl (term1454 A bad k y' y n)). Qed.
Lemma lem377937 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) (n : nat) : (term1456 A bad y' y n) = (term1456 A bad y' y n).
Proof. exact (fun_ext (fun k : nat => @lem377936 A bad k y' y n)). Qed.
Lemma lem377938 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem377939 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) (n : nat) : (term1457 A bad y' y n) = (term1457 A bad y' y n).
Proof. exact (MK_COMB (@lem377938) (@lem377937 A bad y' y n)). Qed.
Lemma lem377940 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) : (term1458 A bad y' y) = (term1458 A bad y' y).
Proof. exact (fun_ext (fun n : nat => @lem377939 A bad y' y n)). Qed.
Lemma lem377941 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem377942 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) : (term1459 A bad y' y) = (term1459 A bad y' y).
Proof. exact (MK_COMB (@lem377941) (@lem377940 A bad y' y)). Qed.
Lemma lem377943 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) : (term1354 A bad y' y) = (term1459 A bad y' y).
Proof. exact (TRANS (@lem377921 A bad y' y) (@lem377942 A bad y' y)). Qed.
Lemma lem377944 {A : Type'} (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1459 A bad y' y.
Proof. exact (EQ_MP (@lem377943 A bad y' y) (@lem377797 A y' bad k lt2 y h1)). Qed.
Lemma lem377986 {A : Type'} (bad : type976 A) (y : nat -> A) (h1 : term1294 A bad y) : term1294 A bad y.
Proof. exact (h1). Qed.
Lemma lem378129 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1297 A lt2 z y n) = (term1297 A lt2 z y n).
Proof. exact (eq_refl (term1297 A lt2 z y n)). Qed.
Lemma lem378146 {A : Type'} (bad : type976 A) (y : nat -> A) (k : type1584 A) (n : nat) (z : nat -> A) : (term1321 A bad y k n z) = (term1460 A bad y k n z).
Proof. exact (@lem19490 (term1315 A k z n) (term1294 A bad z) (term1308 A y k n z)). Qed.
Lemma lem378147 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem378148 {A : Type'} (bad : type976 A) (y : nat -> A) (k : type1584 A) (n : nat) (z : nat -> A) : (term1323 A bad y k n z) = (term1461 A bad y k n z).
Proof. exact (MK_COMB (@lem378147) (@lem378146 A bad y k n z)). Qed.
Lemma lem378149 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1325 A bad k lt2 z y n) = (term1462 A bad k lt2 z y n).
Proof. exact (MK_COMB (@lem378148 A bad y k n z) (@lem378129 A lt2 z y n)). Qed.
Lemma lem378156 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1462 A bad k lt2 z y n) = (term1463 A bad k lt2 z y n).
Proof. exact (@lem19699 (term1464 A bad k z n) (term1465 A bad y k n z) (term1297 A lt2 z y n)). Qed.
Lemma lem378157 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1325 A bad k lt2 z y n) = (term1463 A bad k lt2 z y n).
Proof. exact (TRANS (@lem378149 A bad k lt2 z y n) (@lem378156 A bad k lt2 z y n)). Qed.
Lemma lem378158 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1327 A bad k lt2 y n) = (term1466 A bad k lt2 y n).
Proof. exact (fun_ext (fun z : nat -> A => @lem378157 A bad k lt2 z y n)). Qed.
Lemma lem378159 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem378160 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1328 A bad k lt2 y n) = (term1467 A bad k lt2 y n).
Proof. exact (MK_COMB (@lem378159 A) (@lem378158 A bad k lt2 y n)). Qed.
Lemma lem378161 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) : (term1329 A bad k lt2 y) = (term1468 A bad k lt2 y).
Proof. exact (fun_ext (fun n : nat => @lem378160 A bad k lt2 y n)). Qed.
Lemma lem378162 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem378164 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) : (term1330 A bad k lt2 y) = (term1469 A bad k lt2 y).
Proof. exact (MK_COMB (@lem378162) (@lem378161 A bad k lt2 y)). Qed.
Lemma lem378165 {A : Type'} (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1469 A bad k lt2 y.
Proof. exact (EQ_MP (@lem378164 A bad k lt2 y) (@lem377796 A y' bad k lt2 y h1)). Qed.
Lemma lem378181 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) (k : nat) : (term1287 A n z y k) = (term1287 A n z y k).
Proof. exact (eq_refl (term1287 A n z y k)). Qed.
Lemma lem378182 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) : (term1288 A n z y) = (term1288 A n z y).
Proof. exact (fun_ext (fun k : nat => @lem378181 A n z y k)). Qed.
Lemma lem378183 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem378185 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) : (term1289 A n z y) = (term1289 A n z y).
Proof. exact (MK_COMB (@lem378183) (@lem378182 A n z y)). Qed.
Lemma lem378186 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1293 A bad lt2 z y n) : term1289 A n z y.
Proof. exact (EQ_MP (@lem378185 A n z y) (@lem377802 A bad lt2 z y n h1)). Qed.
Lemma lem378187 {A : Type'} (_8027 : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1057 A lt2 n' k' bad x) : term1470 A n' k' bad _8027.
Proof. exact (@lem377867 A lt2 n' k' bad x h1 _8027). Qed.
Lemma lem378188 {A : Type'} (n' : type977 A) (k' : type967 A) (_8027 : nat -> A) (bad : type976 A) : (term1470 A n' k' bad _8027) = (term1419 A n' k' _8027 bad).
Proof. exact (eq_refl (term1470 A n' k' bad _8027)). Qed.
Lemma lem378189 {A : Type'} (_8027 : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1057 A lt2 n' k' bad x) : term1419 A n' k' _8027 bad.
Proof. exact (EQ_MP (@lem378188 A n' k' _8027 bad) (@lem378187 A _8027 lt2 n' k' bad x h1)). Qed.
Lemma lem378190 {A : Type'} (_8027 : nat -> A) (_8028 : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1057 A lt2 n' k' bad x) : term1471 A n' k' _8027 bad _8028.
Proof. exact (@lem378189 A _8027 lt2 n' k' bad x h1 _8028). Qed.
Lemma lem378191 {A : Type'} (n' : type977 A) (k' : type967 A) (_8027 : nat -> A) (bad : type976 A) (_8028 : nat -> A) : (term1471 A n' k' _8027 bad _8028) = (term1415 A n' k' _8027 bad _8028).
Proof. exact (eq_refl (term1471 A n' k' _8027 bad _8028)). Qed.
Lemma lem378192 {A : Type'} (_8027 : nat -> A) (_8028 : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1057 A lt2 n' k' bad x) : term1415 A n' k' _8027 bad _8028.
Proof. exact (EQ_MP (@lem378191 A n' k' _8027 bad _8028) (@lem378190 A _8027 _8028 lt2 n' k' bad x h1)). Qed.
Lemma lem378193 {A : Type'} (_8029 : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1472 A bad y' y _8029.
Proof. exact (@lem377944 A y' bad k lt2 y h1 _8029). Qed.
Lemma lem378194 {A : Type'} (bad : type976 A) (y' : type1604 A) (y : nat -> A) (_8029 : nat) : (term1472 A bad y' y _8029) = (term1457 A bad y' y _8029).
Proof. exact (eq_refl (term1472 A bad y' y _8029)). Qed.
Lemma lem378195 {A : Type'} (_8029 : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1457 A bad y' y _8029.
Proof. exact (EQ_MP (@lem378194 A bad y' y _8029) (@lem378193 A _8029 y' bad k lt2 y h1)). Qed.
Lemma lem378196 {A : Type'} (_8029 : nat) (_8030 : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1473 A bad y' y _8029 _8030.
Proof. exact (@lem378195 A _8029 y' bad k lt2 y h1 _8030). Qed.
Lemma lem378197 {A : Type'} (bad : type976 A) (_8030 : nat) (y' : type1604 A) (y : nat -> A) (_8029 : nat) : (term1473 A bad y' y _8029 _8030) = (term1454 A bad _8030 y' y _8029).
Proof. exact (eq_refl (term1473 A bad y' y _8029 _8030)). Qed.
Lemma lem378198 {A : Type'} (_8030 : nat) (_8029 : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1454 A bad _8030 y' y _8029.
Proof. exact (EQ_MP (@lem378197 A bad _8030 y' y _8029) (@lem378196 A _8029 _8030 y' bad k lt2 y h1)). Qed.
Lemma lem378217 {A : Type'} (_8037 : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1474 A bad k lt2 y _8037.
Proof. exact (@lem378165 A y' bad k lt2 y h1 _8037). Qed.
Lemma lem378218 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (_8037 : nat) : (term1474 A bad k lt2 y _8037) = (term1467 A bad k lt2 y _8037).
Proof. exact (eq_refl (term1474 A bad k lt2 y _8037)). Qed.
Lemma lem378219 {A : Type'} (_8037 : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1467 A bad k lt2 y _8037.
Proof. exact (EQ_MP (@lem378218 A bad k lt2 y _8037) (@lem378217 A _8037 y' bad k lt2 y h1)). Qed.
Lemma lem378220 {A : Type'} (_8037 : nat) (_8038 : nat -> A) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1475 A bad k lt2 y _8037 _8038.
Proof. exact (@lem378219 A _8037 y' bad k lt2 y h1 _8038). Qed.
Lemma lem378221 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (_8038 : nat -> A) (y : nat -> A) (_8037 : nat) : (term1475 A bad k lt2 y _8037 _8038) = (term1463 A bad k lt2 _8038 y _8037).
Proof. exact (eq_refl (term1475 A bad k lt2 y _8037 _8038)). Qed.
Lemma lem378222 {A : Type'} (_8038 : nat -> A) (_8037 : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1463 A bad k lt2 _8038 y _8037.
Proof. exact (EQ_MP (@lem378221 A bad k lt2 _8038 y _8037) (@lem378220 A _8037 _8038 y' bad k lt2 y h1)). Qed.
Lemma lem378223 {A : Type'} (_8039 : nat) (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1293 A bad lt2 z y n) : term1476 A n z y _8039.
Proof. exact (@lem378186 A bad lt2 z y n h1 _8039). Qed.
Lemma lem378224 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) (_8039 : nat) : (term1476 A n z y _8039) = (term1287 A n z y _8039).
Proof. exact (eq_refl (term1476 A n z y _8039)). Qed.
Lemma lem378228 {A : Type'} (_8030 : nat) (_8029 : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1437 A _8030 y' y _8029.
Proof. exact (proj2 (@lem378198 A _8030 _8029 y' bad k lt2 y h1)). Qed.
Lemma lem378234 {A : Type'} (_8038 : nat -> A) (_8037 : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1477 A bad k lt2 _8038 y _8037.
Proof. exact (proj2 (@lem378222 A _8038 _8037 y' bad k lt2 y h1)). Qed.
Lemma lem378235 {A : Type'} (_8038 : nat -> A) (_8037 : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1478 A bad k lt2 _8038 y _8037.
Proof. exact (proj1 (@lem378222 A _8038 _8037 y' bad k lt2 y h1)). Qed.
Lemma lem378247 {A : Type'} (bad : type976 A) (y : nat -> A) (h1 : term1294 A bad y) : term1294 A bad y.
Proof. exact (h1). Qed.
Lemma lem378279 {A : Type'} (_8029 : nat) (_8030 : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1338 A y' _8029 y _8030.
Proof. exact (proj1 (@lem378228 A _8030 _8029 y' bad k lt2 y h1)). Qed.
Lemma lem378291 {A : Type'} (_8027 : nat -> A) (_8028 : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1057 A lt2 n' k' bad x) : term1479 A k' n' _8027 bad _8028.
Proof. exact (proj1 (@lem378192 A _8027 _8028 lt2 n' k' bad x h1)). Qed.
Lemma lem378301 {A : Type'} (_8027 : nat -> A) (_8028 : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1057 A lt2 n' k' bad x) : term1480 A k' _8027 bad _8028.
Proof. exact (proj2 (@lem378192 A _8027 _8028 lt2 n' k' bad x h1)). Qed.
Lemma lem378315 {A : Type'} (_8039 : nat) (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1293 A bad lt2 z y n) : term1287 A n z y _8039.
Proof. exact (EQ_MP (@lem378224 A n z y _8039) (@lem378223 A _8039 bad lt2 z y n h1)). Qed.
Lemma lem378326 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (_8038 : nat -> A) (y : nat -> A) (_8037 : nat) : (term1478 A bad k lt2 _8038 y _8037) = (term1481 A bad k lt2 _8038 y _8037).
Proof. exact (@lem371889 (term1294 A bad _8038) (term1315 A k _8038 _8037) (term1297 A lt2 _8038 y _8037)). Qed.
Lemma lem378327 {A : Type'} (_8038 : nat -> A) (_8037 : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1481 A bad k lt2 _8038 y _8037.
Proof. exact (EQ_MP (@lem378326 A bad k lt2 _8038 y _8037) (@lem378235 A _8038 _8037 y' bad k lt2 y h1)). Qed.
Lemma lem378338 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (_8038 : nat -> A) (y : nat -> A) (_8037 : nat) : (term1477 A bad k lt2 _8038 y _8037) = (term1482 A bad k lt2 _8038 y _8037).
Proof. exact (@lem371889 (term1294 A bad _8038) (term1308 A y k _8037 _8038) (term1297 A lt2 _8038 y _8037)). Qed.
Lemma lem378339 {A : Type'} (_8038 : nat -> A) (_8037 : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1482 A bad k lt2 _8038 y _8037.
Proof. exact (EQ_MP (@lem378338 A bad k lt2 _8038 y _8037) (@lem378234 A _8038 _8037 y' bad k lt2 y h1)). Qed.
Lemma lem378579 {A : Type'} (bad : type976 A) (y : nat -> A) (h1 : term1294 A bad y) : term1294 A bad y.
Proof. exact (h1). Qed.
Lemma lem378580 {A : Type'} (bad : type976 A) (y : nat -> A) (h1 : term1294 A bad y) : term1483 A bad y.
Proof. exact (fun h0 : @I ((nat -> A) -> Prop) bad y => @lem378579 A bad y h1). Qed.
Lemma lem378582 (p : Prop) : (term1484 p) = (~ p).
Proof. exact (EQ_MP (@lem21028 p) (@lem21107 p)). Qed.
Lemma lem378583 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1483 A bad y) = (term1294 A bad y).
Proof. exact (@lem378582 (@I ((nat -> A) -> Prop) bad y)). Qed.
Lemma lem378584 {A : Type'} (bad : type976 A) (y : nat -> A) (h1 : term1294 A bad y) : term1294 A bad y.
Proof. exact (EQ_MP (@lem378583 A bad y) (@lem378580 A bad y h1)). Qed.
Lemma lem378586 {A : Type'} (_8029 : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1349 A bad y' _8029.
Proof. exact (proj1 (@lem378198 A (@el nat) _8029 y' bad k lt2 y h1)). Qed.
Lemma lem378587 {A : Type'} (n' : type977 A) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1485 A bad y' n' y.
Proof. exact (@lem378586 A (@I ((nat -> A) -> nat) n' y) y' bad k lt2 y h1). Qed.
Lemma lem378588 {A : Type'} (n' : type977 A) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1486 A bad y' n' y.
Proof. exact (fun h0 : term1487 A bad y' n' y => @lem378587 A n' y' bad k lt2 y h1). Qed.
Lemma lem378590 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem378591 {A : Type'} (bad : type976 A) (y' : type1604 A) (n' : type977 A) (y : nat -> A) : (term1486 A bad y' n' y) = (term1485 A bad y' n' y).
Proof. exact (@lem378590 (term1485 A bad y' n' y)). Qed.
Lemma lem378592 {A : Type'} (n' : type977 A) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1485 A bad y' n' y.
Proof. exact (EQ_MP (@lem378591 A bad y' n' y) (@lem378588 A n' y' bad k lt2 y h1)). Qed.
Lemma lem378613 (q : Prop) (p : Prop) (r : Prop) : (term22 p q r) = (term22 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem378614 {A : Type'} (k' : type967 A) (n' : type977 A) (_8027 : nat -> A) (bad : type976 A) (_8028 : nat -> A) : (term1488 A k' n' _8027 bad _8028) = (term1479 A k' n' _8027 bad _8028).
Proof. exact (@lem378613 (@I ((nat -> A) -> Prop) bad _8027) (term1374 A k' _8028 n' _8027) (term1294 A bad _8028)). Qed.
Lemma lem378630 {A : Type'} (k' : type967 A) (n' : type977 A) (_8027 : nat -> A) (bad : type976 A) (_8028 : nat -> A) : (term1489 A k' n' _8027 bad _8028) = (term1489 A k' n' _8027 bad _8028).
Proof. exact (eq_refl (term1489 A k' n' _8027 bad _8028)). Qed.
Lemma lem378631 {A : Type'} (k' : type967 A) (n' : type977 A) (_8027 : nat -> A) (bad : type976 A) (_8028 : nat -> A) : ((term1479 A k' n' _8027 bad _8028) = (term1488 A k' n' _8027 bad _8028)) = ((term1479 A k' n' _8027 bad _8028) = (term1479 A k' n' _8027 bad _8028)).
Proof. exact (MK_COMB (@lem378630 A k' n' _8027 bad _8028) (@lem378614 A k' n' _8027 bad _8028)). Qed.
Lemma lem378633 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem378634 (x : Prop) : (x = x) = True.
Proof. exact (@lem378633 Prop x). Qed.
Lemma lem378635 {A : Type'} (k' : type967 A) (n' : type977 A) (_8027 : nat -> A) (bad : type976 A) (_8028 : nat -> A) : ((term1479 A k' n' _8027 bad _8028) = (term1479 A k' n' _8027 bad _8028)) = True.
Proof. exact (@lem378634 (term1479 A k' n' _8027 bad _8028)). Qed.
Lemma lem378636 {A : Type'} (k' : type967 A) (n' : type977 A) (_8027 : nat -> A) (bad : type976 A) (_8028 : nat -> A) : ((term1479 A k' n' _8027 bad _8028) = (term1488 A k' n' _8027 bad _8028)) = True.
Proof. exact (TRANS (@lem378631 A k' n' _8027 bad _8028) (@lem378635 A k' n' _8027 bad _8028)). Qed.
Lemma lem378637 {A : Type'} (k' : type967 A) (n' : type977 A) (_8027 : nat -> A) (bad : type976 A) (_8028 : nat -> A) : True = ((term1479 A k' n' _8027 bad _8028) = (term1488 A k' n' _8027 bad _8028)).
Proof. exact (SYM (@lem378636 A k' n' _8027 bad _8028)). Qed.
Lemma lem378638 {A : Type'} (k' : type967 A) (n' : type977 A) (_8027 : nat -> A) (bad : type976 A) (_8028 : nat -> A) : (term1479 A k' n' _8027 bad _8028) = (term1488 A k' n' _8027 bad _8028).
Proof. exact (EQ_MP (@lem378637 A k' n' _8027 bad _8028) (@lem0)). Qed.
Lemma lem378639 {A : Type'} (_8027 : nat -> A) (_8028 : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1057 A lt2 n' k' bad x) : term1488 A k' n' _8027 bad _8028.
Proof. exact (EQ_MP (@lem378638 A k' n' _8027 bad _8028) (@lem378291 A _8027 _8028 lt2 n' k' bad x h1)). Qed.
Lemma lem378641 (b : Prop) (a : Prop) : (a \/ b) = (term493 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem378642 {A : Type'} (bad : type976 A) (k' : type967 A) (_8028 : nat -> A) (n' : type977 A) (_8027 : nat -> A) : (term1488 A k' n' _8027 bad _8028) = (term1490 A bad k' _8028 n' _8027).
Proof. exact (@lem378641 (term1491 A _8027 bad _8028) (term1374 A k' _8028 n' _8027)). Qed.
Lemma lem378644 (a : Prop) (b : Prop) : (term495 a b) = (term496 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem378645 {A : Type'} (_8027 : nat -> A) (bad : type976 A) (_8028 : nat -> A) : (term1492 A _8027 bad _8028) = (term1493 A _8027 bad _8028).
Proof. exact (@lem378644 (@I ((nat -> A) -> Prop) bad _8027) (term1294 A bad _8028)). Qed.
Lemma lem378647 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem378648 {A : Type'} (bad : type976 A) (_8028 : nat -> A) : (term1494 A bad _8028) = (@I ((nat -> A) -> Prop) bad _8028).
Proof. exact (@lem378647 (@I ((nat -> A) -> Prop) bad _8028)). Qed.
Lemma lem378649 {A : Type'} (bad : type976 A) (_8027 : nat -> A) : (term1495 A bad _8027) = (term1495 A bad _8027).
Proof. exact (eq_refl (term1495 A bad _8027)). Qed.
Lemma lem378650 {A : Type'} (_8027 : nat -> A) (bad : type976 A) (_8028 : nat -> A) : (term1493 A _8027 bad _8028) = (term1496 A _8027 bad _8028).
Proof. exact (MK_COMB (@lem378649 A bad _8027) (@lem378648 A bad _8028)). Qed.
Lemma lem378651 {A : Type'} (_8027 : nat -> A) (bad : type976 A) (_8028 : nat -> A) : (term1492 A _8027 bad _8028) = (term1496 A _8027 bad _8028).
Proof. exact (TRANS (@lem378645 A _8027 bad _8028) (@lem378650 A _8027 bad _8028)). Qed.
Lemma lem378652 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem378653 {A : Type'} (_8027 : nat -> A) (bad : type976 A) (_8028 : nat -> A) : (term1497 A _8027 bad _8028) = (term1498 A _8027 bad _8028).
Proof. exact (MK_COMB (@lem378652) (@lem378651 A _8027 bad _8028)). Qed.
Lemma lem378654 {A : Type'} (k' : type967 A) (_8028 : nat -> A) (n' : type977 A) (_8027 : nat -> A) : (term1374 A k' _8028 n' _8027) = (term1374 A k' _8028 n' _8027).
Proof. exact (eq_refl (term1374 A k' _8028 n' _8027)). Qed.
Lemma lem378655 {A : Type'} (bad : type976 A) (k' : type967 A) (_8028 : nat -> A) (n' : type977 A) (_8027 : nat -> A) : (term1490 A bad k' _8028 n' _8027) = (term1499 A bad k' _8028 n' _8027).
Proof. exact (MK_COMB (@lem378653 A _8027 bad _8028) (@lem378654 A k' _8028 n' _8027)). Qed.
Lemma lem378656 {A : Type'} (bad : type976 A) (k' : type967 A) (_8028 : nat -> A) (n' : type977 A) (_8027 : nat -> A) : (term1488 A k' n' _8027 bad _8028) = (term1499 A bad k' _8028 n' _8027).
Proof. exact (TRANS (@lem378642 A bad k' _8028 n' _8027) (@lem378655 A bad k' _8028 n' _8027)). Qed.
Lemma lem378658 {A : Type'} (n' : type977 A) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1294 A bad y) (h2 : term1215 A y' bad k lt2 y) : term1500 A bad y' n' y.
Proof. exact (conj (@lem378584 A bad y h1) (@lem378592 A n' y' bad k lt2 y h2)). Qed.
Lemma lem378660 {A : Type'} (_8028 : nat -> A) (_8027 : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1057 A lt2 n' k' bad x) : term1499 A bad k' _8028 n' _8027.
Proof. exact (EQ_MP (@lem378656 A bad k' _8028 n' _8027) (@lem378639 A _8027 _8028 lt2 n' k' bad x h1)). Qed.
Lemma lem378661 {A : Type'} (_8028 : nat -> A) (_8027 : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1057 A lt2 n' k' bad x) : term1499 A bad k' _8028 n' _8027.
Proof. exact (@lem378660 A _8028 _8027 lt2 n' k' bad x h1). Qed.
Lemma lem378662 {A : Type'} (y' : type1604 A) (y : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1057 A lt2 n' k' bad x) : term1501 A bad k' y' n' y.
Proof. exact (@lem378661 A (term1502 A y' n' y) y lt2 n' k' bad x h1). Qed.
Lemma lem378665 {A : Type'} (y' : type1604 A) (k : type1584 A) (y : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1294 A bad y) (h2 : term1215 A y' bad k lt2 y) (h3 : term1057 A lt2 n' k' bad x) : term1503 A k' y' n' y.
Proof. exact (@lem378662 A y' y lt2 n' k' bad x h3 (@lem378658 A n' y' bad k lt2 y h1 h2)). Qed.
Lemma lem378666 {A : Type'} (y' : type1604 A) (k : type1584 A) (y : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1294 A bad y) (h2 : term1215 A y' bad k lt2 y) (h3 : term1057 A lt2 n' k' bad x) : term1504 A k' y' n' y.
Proof. exact (fun h0 : term1505 A k' y' n' y => @lem378665 A y' k y lt2 n' k' bad x h1 h2 h3). Qed.
Lemma lem378668 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem378669 {A : Type'} (k' : type967 A) (y' : type1604 A) (n' : type977 A) (y : nat -> A) : (term1504 A k' y' n' y) = (term1503 A k' y' n' y).
Proof. exact (@lem378668 (term1503 A k' y' n' y)). Qed.
Lemma lem378670 {A : Type'} (y' : type1604 A) (k : type1584 A) (y : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1294 A bad y) (h2 : term1215 A y' bad k lt2 y) (h3 : term1057 A lt2 n' k' bad x) : term1503 A k' y' n' y.
Proof. exact (EQ_MP (@lem378669 A k' y' n' y) (@lem378666 A y' k y lt2 n' k' bad x h1 h2 h3)). Qed.
Lemma lem378676 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem378677 {A : Type'} (y' : type1604 A) (y : nat -> A) (_8030 : nat) (_8029 : nat) : (term1338 A y' _8029 y _8030) = (term1506 A y' y _8030 _8029).
Proof. exact (@lem378676 ((term1334 A y' _8029 _8030) = (@I (nat -> A) y _8030)) (term1284 _8030 _8029)). Qed.
Lemma lem378685 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem378686 {A : Type'} (y' : type1604 A) (y : nat -> A) (_8030 : nat) (_8029 : nat) : (term1507 A y' _8029 y _8030) = (term1508 A y' y _8030 _8029).
Proof. exact (MK_COMB (@lem378685) (@lem378677 A y' y _8030 _8029)). Qed.
Lemma lem378694 {A : Type'} (y' : type1604 A) (y : nat -> A) (_8030 : nat) (_8029 : nat) : (term1506 A y' y _8030 _8029) = (term1506 A y' y _8030 _8029).
Proof. exact (eq_refl (term1506 A y' y _8030 _8029)). Qed.
Lemma lem378695 {A : Type'} (y' : type1604 A) (y : nat -> A) (_8030 : nat) (_8029 : nat) : ((term1338 A y' _8029 y _8030) = (term1506 A y' y _8030 _8029)) = ((term1506 A y' y _8030 _8029) = (term1506 A y' y _8030 _8029)).
Proof. exact (MK_COMB (@lem378686 A y' y _8030 _8029) (@lem378694 A y' y _8030 _8029)). Qed.
Lemma lem378697 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem378698 (x : Prop) : (x = x) = True.
Proof. exact (@lem378697 Prop x). Qed.
Lemma lem378699 {A : Type'} (y' : type1604 A) (y : nat -> A) (_8030 : nat) (_8029 : nat) : ((term1506 A y' y _8030 _8029) = (term1506 A y' y _8030 _8029)) = True.
Proof. exact (@lem378698 (term1506 A y' y _8030 _8029)). Qed.
Lemma lem378700 {A : Type'} (y' : type1604 A) (y : nat -> A) (_8030 : nat) (_8029 : nat) : ((term1338 A y' _8029 y _8030) = (term1506 A y' y _8030 _8029)) = True.
Proof. exact (TRANS (@lem378695 A y' y _8030 _8029) (@lem378699 A y' y _8030 _8029)). Qed.
Lemma lem378701 {A : Type'} (y' : type1604 A) (y : nat -> A) (_8030 : nat) (_8029 : nat) : True = ((term1338 A y' _8029 y _8030) = (term1506 A y' y _8030 _8029)).
Proof. exact (SYM (@lem378700 A y' y _8030 _8029)). Qed.
Lemma lem378702 {A : Type'} (y' : type1604 A) (y : nat -> A) (_8030 : nat) (_8029 : nat) : (term1338 A y' _8029 y _8030) = (term1506 A y' y _8030 _8029).
Proof. exact (EQ_MP (@lem378701 A y' y _8030 _8029) (@lem0)). Qed.
Lemma lem378703 {A : Type'} (_8030 : nat) (_8029 : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1506 A y' y _8030 _8029.
Proof. exact (EQ_MP (@lem378702 A y' y _8030 _8029) (@lem378279 A _8029 _8030 y' bad k lt2 y h1)). Qed.
Lemma lem378705 (b : Prop) (a : Prop) : (a \/ b) = (term493 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem378706 {A : Type'} (y' : type1604 A) (_8029 : nat) (y : nat -> A) (_8030 : nat) : (term1506 A y' y _8030 _8029) = (term1509 A y' _8029 y _8030).
Proof. exact (@lem378705 (term1284 _8030 _8029) ((term1334 A y' _8029 _8030) = (@I (nat -> A) y _8030))). Qed.
Lemma lem378708 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem378709 (_8030 : nat) (_8029 : nat) : (term1510 _8030 _8029) = (term1282 _8030 _8029).
Proof. exact (@lem378708 (term1282 _8030 _8029)). Qed.
Lemma lem378710 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem378711 (_8030 : nat) (_8029 : nat) : (term1511 _8030 _8029) = (term1512 _8030 _8029).
Proof. exact (MK_COMB (@lem378710) (@lem378709 _8030 _8029)). Qed.
Lemma lem378712 {A : Type'} (y' : type1604 A) (_8029 : nat) (y : nat -> A) (_8030 : nat) : ((term1334 A y' _8029 _8030) = (@I (nat -> A) y _8030)) = ((term1334 A y' _8029 _8030) = (@I (nat -> A) y _8030)).
Proof. exact (eq_refl ((term1334 A y' _8029 _8030) = (@I (nat -> A) y _8030))). Qed.
Lemma lem378713 {A : Type'} (y' : type1604 A) (_8029 : nat) (y : nat -> A) (_8030 : nat) : (term1509 A y' _8029 y _8030) = (term1513 A y' _8029 y _8030).
Proof. exact (MK_COMB (@lem378711 _8030 _8029) (@lem378712 A y' _8029 y _8030)). Qed.
Lemma lem378714 {A : Type'} (y' : type1604 A) (_8029 : nat) (y : nat -> A) (_8030 : nat) : (term1506 A y' y _8030 _8029) = (term1513 A y' _8029 y _8030).
Proof. exact (TRANS (@lem378706 A y' _8029 y _8030) (@lem378713 A y' _8029 y _8030)). Qed.
Lemma lem378717 {A : Type'} (_8029 : nat) (_8030 : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1513 A y' _8029 y _8030.
Proof. exact (EQ_MP (@lem378714 A y' _8029 y _8030) (@lem378703 A _8030 _8029 y' bad k lt2 y h1)). Qed.
Lemma lem378718 {A : Type'} (k' : type967 A) (n' : type977 A) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1514 A k' y' n' y.
Proof. exact (@lem378717 A (@I ((nat -> A) -> nat) n' y) (term1515 A k' y' n' y) y' bad k lt2 y h1). Qed.
Lemma lem378721 {A : Type'} (y' : type1604 A) (k : type1584 A) (y : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1294 A bad y) (h2 : term1215 A y' bad k lt2 y) (h3 : term1057 A lt2 n' k' bad x) : (term1516 A k' y' n' y) = (term1517 A k' y' n' y).
Proof. exact (@lem378718 A k' n' y' bad k lt2 y h2 (@lem378670 A y' k y lt2 n' k' bad x h1 h2 h3)). Qed.
Lemma lem378722 {A : Type'} (y' : type1604 A) (k : type1584 A) (y : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1294 A bad y) (h2 : term1215 A y' bad k lt2 y) (h3 : term1057 A lt2 n' k' bad x) : term1518 A k' y' n' y.
Proof. exact (fun h0 : term1519 A k' y' n' y => @lem378721 A y' k y lt2 n' k' bad x h1 h2 h3). Qed.
Lemma lem378724 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem378725 {A : Type'} (k' : type967 A) (y' : type1604 A) (n' : type977 A) (y : nat -> A) : (term1518 A k' y' n' y) = ((term1516 A k' y' n' y) = (term1517 A k' y' n' y)).
Proof. exact (@lem378724 ((term1516 A k' y' n' y) = (term1517 A k' y' n' y))). Qed.
Lemma lem378726 {A : Type'} (y' : type1604 A) (k : type1584 A) (y : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1294 A bad y) (h2 : term1215 A y' bad k lt2 y) (h3 : term1057 A lt2 n' k' bad x) : (term1516 A k' y' n' y) = (term1517 A k' y' n' y).
Proof. exact (EQ_MP (@lem378725 A k' y' n' y) (@lem378722 A y' k y lt2 n' k' bad x h1 h2 h3)). Qed.
Lemma lem378728 {A : Type'} (_8029 : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1349 A bad y' _8029.
Proof. exact (proj1 (@lem378198 A (@el nat) _8029 y' bad k lt2 y h1)). Qed.
Lemma lem378729 {A : Type'} (n' : type977 A) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1485 A bad y' n' y.
Proof. exact (@lem378728 A (@I ((nat -> A) -> nat) n' y) y' bad k lt2 y h1). Qed.
Lemma lem378730 {A : Type'} (n' : type977 A) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1486 A bad y' n' y.
Proof. exact (fun h0 : term1487 A bad y' n' y => @lem378729 A n' y' bad k lt2 y h1). Qed.
Lemma lem378732 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem378733 {A : Type'} (bad : type976 A) (y' : type1604 A) (n' : type977 A) (y : nat -> A) : (term1486 A bad y' n' y) = (term1485 A bad y' n' y).
Proof. exact (@lem378732 (term1485 A bad y' n' y)). Qed.
Lemma lem378734 {A : Type'} (n' : type977 A) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1485 A bad y' n' y.
Proof. exact (EQ_MP (@lem378733 A bad y' n' y) (@lem378730 A n' y' bad k lt2 y h1)). Qed.
Lemma lem378736 (b : Prop) (a : Prop) : (a \/ b) = (term493 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem378737 {A : Type'} (k' : type967 A) (_8028 : nat -> A) (bad : type976 A) (_8027 : nat -> A) : (term1480 A k' _8027 bad _8028) = (term1520 A k' _8028 bad _8027).
Proof. exact (@lem378736 (term1417 A k' _8027 bad _8028) (@I ((nat -> A) -> Prop) bad _8027)). Qed.
Lemma lem378739 (a : Prop) (b : Prop) : (term495 a b) = (term496 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem378740 {A : Type'} (k' : type967 A) (_8027 : nat -> A) (bad : type976 A) (_8028 : nat -> A) : (term1521 A k' _8027 bad _8028) = (term1522 A k' _8027 bad _8028).
Proof. exact (@lem378739 (term1367 A k' _8027 _8028) (term1294 A bad _8028)). Qed.
Lemma lem378742 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem378743 {A : Type'} (k' : type967 A) (_8027 : nat -> A) (_8028 : nat -> A) : (term1523 A k' _8027 _8028) = ((term1360 A k' _8027 _8028) = (term1363 A k' _8027 _8028)).
Proof. exact (@lem378742 ((term1360 A k' _8027 _8028) = (term1363 A k' _8027 _8028))). Qed.
Lemma lem378744 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem378745 {A : Type'} (k' : type967 A) (_8027 : nat -> A) (_8028 : nat -> A) : (term1524 A k' _8027 _8028) = (term1525 A k' _8027 _8028).
Proof. exact (MK_COMB (@lem378744) (@lem378743 A k' _8027 _8028)). Qed.
Lemma lem378747 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem378748 {A : Type'} (bad : type976 A) (_8028 : nat -> A) : (term1494 A bad _8028) = (@I ((nat -> A) -> Prop) bad _8028).
Proof. exact (@lem378747 (@I ((nat -> A) -> Prop) bad _8028)). Qed.
Lemma lem378749 {A : Type'} (k' : type967 A) (_8027 : nat -> A) (bad : type976 A) (_8028 : nat -> A) : (term1522 A k' _8027 bad _8028) = (term1526 A k' _8027 bad _8028).
Proof. exact (MK_COMB (@lem378745 A k' _8027 _8028) (@lem378748 A bad _8028)). Qed.
Lemma lem378750 {A : Type'} (k' : type967 A) (_8027 : nat -> A) (bad : type976 A) (_8028 : nat -> A) : (term1521 A k' _8027 bad _8028) = (term1526 A k' _8027 bad _8028).
Proof. exact (TRANS (@lem378740 A k' _8027 bad _8028) (@lem378749 A k' _8027 bad _8028)). Qed.
Lemma lem378751 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem378752 {A : Type'} (k' : type967 A) (_8027 : nat -> A) (bad : type976 A) (_8028 : nat -> A) : (term1527 A k' _8027 bad _8028) = (term1528 A k' _8027 bad _8028).
Proof. exact (MK_COMB (@lem378751) (@lem378750 A k' _8027 bad _8028)). Qed.
Lemma lem378753 {A : Type'} (bad : type976 A) (_8027 : nat -> A) : (@I ((nat -> A) -> Prop) bad _8027) = (@I ((nat -> A) -> Prop) bad _8027).
Proof. exact (eq_refl (@I ((nat -> A) -> Prop) bad _8027)). Qed.
Lemma lem378754 {A : Type'} (k' : type967 A) (_8028 : nat -> A) (bad : type976 A) (_8027 : nat -> A) : (term1520 A k' _8028 bad _8027) = (term1529 A k' _8028 bad _8027).
Proof. exact (MK_COMB (@lem378752 A k' _8027 bad _8028) (@lem378753 A bad _8027)). Qed.
Lemma lem378755 {A : Type'} (k' : type967 A) (_8028 : nat -> A) (bad : type976 A) (_8027 : nat -> A) : (term1480 A k' _8027 bad _8028) = (term1529 A k' _8028 bad _8027).
Proof. exact (TRANS (@lem378737 A k' _8028 bad _8027) (@lem378754 A k' _8028 bad _8027)). Qed.
Lemma lem378757 {A : Type'} (y' : type1604 A) (k : type1584 A) (y : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1294 A bad y) (h2 : term1215 A y' bad k lt2 y) (h3 : term1057 A lt2 n' k' bad x) : term1530 A k' bad y' n' y.
Proof. exact (conj (@lem378726 A y' k y lt2 n' k' bad x h1 h2 h3) (@lem378734 A n' y' bad k lt2 y h2)). Qed.
Lemma lem378759 {A : Type'} (_8028 : nat -> A) (_8027 : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1057 A lt2 n' k' bad x) : term1529 A k' _8028 bad _8027.
Proof. exact (EQ_MP (@lem378755 A k' _8028 bad _8027) (@lem378301 A _8027 _8028 lt2 n' k' bad x h1)). Qed.
Lemma lem378760 {A : Type'} (_8028 : nat -> A) (_8027 : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1057 A lt2 n' k' bad x) : term1529 A k' _8028 bad _8027.
Proof. exact (@lem378759 A _8028 _8027 lt2 n' k' bad x h1). Qed.
Lemma lem378761 {A : Type'} (y' : type1604 A) (y : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1057 A lt2 n' k' bad x) : term1531 A k' y' n' bad y.
Proof. exact (@lem378760 A (term1502 A y' n' y) y lt2 n' k' bad x h1). Qed.
Lemma lem378764 {A : Type'} (y' : type1604 A) (k : type1584 A) (y : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1294 A bad y) (h2 : term1215 A y' bad k lt2 y) (h3 : term1057 A lt2 n' k' bad x) : @I ((nat -> A) -> Prop) bad y.
Proof. exact (@lem378761 A y' y lt2 n' k' bad x h3 (@lem378757 A y' k y lt2 n' k' bad x h1 h2 h3)). Qed.
Lemma lem378765 {A : Type'} (y' : type1604 A) (k : type1584 A) (y : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1215 A y' bad k lt2 y) (h2 : term1057 A lt2 n' k' bad x) : term1532 A bad y.
Proof. exact (fun h0 : term1294 A bad y => @lem378764 A y' k y lt2 n' k' bad x h0 h1 h2). Qed.
Lemma lem378767 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem378768 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1532 A bad y) = (@I ((nat -> A) -> Prop) bad y).
Proof. exact (@lem378767 (@I ((nat -> A) -> Prop) bad y)). Qed.
Lemma lem378769 {A : Type'} (y' : type1604 A) (k : type1584 A) (y : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1215 A y' bad k lt2 y) (h2 : term1057 A lt2 n' k' bad x) : @I ((nat -> A) -> Prop) bad y.
Proof. exact (EQ_MP (@lem378768 A bad y) (@lem378765 A y' k y lt2 n' k' bad x h1 h2)). Qed.
Lemma lem378772 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem378774 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1294 A bad y) = (term1533 A bad y).
Proof. exact (@lem378772 (@I ((nat -> A) -> Prop) bad y)). Qed.
Lemma lem378777 {A : Type'} (bad : type976 A) (y : nat -> A) (h1 : term1294 A bad y) : term1533 A bad y.
Proof. exact (EQ_MP (@lem378774 A bad y) (@lem378247 A bad y h1)). Qed.
Lemma lem378780 {A : Type'} (y' : type1604 A) (k : type1584 A) (y : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1294 A bad y) (h2 : term1215 A y' bad k lt2 y) (h3 : term1057 A lt2 n' k' bad x) : False.
Proof. exact (@lem378777 A bad y h1 (@lem378769 A y' k y lt2 n' k' bad x h2 h3)). Qed.
Lemma lem378781 {A : Type'} (y' : type1604 A) (k : type1584 A) (y : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1294 A bad y) (h2 : term1215 A y' bad k lt2 y) (h3 : term1057 A lt2 n' k' bad x) : term522.
Proof. exact (fun h0 : ~ False => @lem378780 A y' k y lt2 n' k' bad x h1 h2 h3). Qed.
Lemma lem378783 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem378784 : term522 = False.
Proof. exact (@lem378783 False). Qed.
Lemma lem378785 {A : Type'} (y' : type1604 A) (k : type1584 A) (y : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1294 A bad y) (h2 : term1215 A y' bad k lt2 y) (h3 : term1057 A lt2 n' k' bad x) : False.
Proof. exact (EQ_MP (@lem378784) (@lem378781 A y' k y lt2 n' k' bad x h1 h2 h3)). Qed.
Lemma lem378994 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1293 A bad lt2 z y n) : @I ((nat -> A) -> Prop) bad z.
Proof. exact (proj1 (@lem377801 A bad lt2 z y n h1)). Qed.
Lemma lem378995 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1293 A bad lt2 z y n) : term1532 A bad z.
Proof. exact (fun h0 : term1294 A bad z => @lem378994 A bad lt2 z y n h1). Qed.
Lemma lem378997 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem378998 {A : Type'} (bad : type976 A) (z : nat -> A) : (term1532 A bad z) = (@I ((nat -> A) -> Prop) bad z).
Proof. exact (@lem378997 (@I ((nat -> A) -> Prop) bad z)). Qed.
Lemma lem378999 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1293 A bad lt2 z y n) : @I ((nat -> A) -> Prop) bad z.
Proof. exact (EQ_MP (@lem378998 A bad z) (@lem378995 A bad lt2 z y n h1)). Qed.
Lemma lem379001 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1293 A bad lt2 z y n) : @I ((nat -> A) -> Prop) bad z.
Proof. exact (proj1 (@lem377801 A bad lt2 z y n h1)). Qed.
Lemma lem379002 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1293 A bad lt2 z y n) : term1532 A bad z.
Proof. exact (fun h0 : term1294 A bad z => @lem379001 A bad lt2 z y n h1). Qed.
Lemma lem379004 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem379005 {A : Type'} (bad : type976 A) (z : nat -> A) : (term1532 A bad z) = (@I ((nat -> A) -> Prop) bad z).
Proof. exact (@lem379004 (@I ((nat -> A) -> Prop) bad z)). Qed.
Lemma lem379006 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1293 A bad lt2 z y n) : @I ((nat -> A) -> Prop) bad z.
Proof. exact (EQ_MP (@lem379005 A bad z) (@lem379002 A bad lt2 z y n h1)). Qed.
Lemma lem379008 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1293 A bad lt2 z y n) : term1280 A lt2 z y n.
Proof. exact (proj2 (@lem377799 A bad lt2 z y n h1)). Qed.
Lemma lem379009 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1293 A bad lt2 z y n) : term1534 A lt2 z y n.
Proof. exact (fun h0 : term1297 A lt2 z y n => @lem379008 A bad lt2 z y n h1). Qed.
Lemma lem379011 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem379012 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1534 A lt2 z y n) = (term1280 A lt2 z y n).
Proof. exact (@lem379011 (term1280 A lt2 z y n)). Qed.
Lemma lem379013 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1293 A bad lt2 z y n) : term1280 A lt2 z y n.
Proof. exact (EQ_MP (@lem379012 A lt2 z y n) (@lem379009 A bad lt2 z y n h1)). Qed.
Lemma lem379019 (q : Prop) (p : Prop) (r : Prop) : (term22 p q r) = (term22 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem379020 {A : Type'} (k : type1584 A) (bad : type976 A) (lt2 : type1402 A) (_8038 : nat -> A) (y : nat -> A) (_8037 : nat) : (term1481 A bad k lt2 _8038 y _8037) = (term1535 A k bad lt2 _8038 y _8037).
Proof. exact (@lem379019 (term1315 A k _8038 _8037) (term1294 A bad _8038) (term1297 A lt2 _8038 y _8037)). Qed.
Lemma lem379034 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem379035 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (_8037 : nat) (bad : type976 A) (_8038 : nat -> A) : (term1536 A bad lt2 _8038 y _8037) = (term1537 A lt2 y _8037 bad _8038).
Proof. exact (@lem379034 (term1297 A lt2 _8038 y _8037) (term1294 A bad _8038)). Qed.
Lemma lem379041 {A : Type'} (k : type1584 A) (_8038 : nat -> A) (_8037 : nat) : (term1538 A k _8038 _8037) = (term1538 A k _8038 _8037).
Proof. exact (eq_refl (term1538 A k _8038 _8037)). Qed.
Lemma lem379042 {A : Type'} (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (_8037 : nat) (bad : type976 A) (_8038 : nat -> A) : (term1535 A k bad lt2 _8038 y _8037) = (term1539 A k lt2 y _8037 bad _8038).
Proof. exact (MK_COMB (@lem379041 A k _8038 _8037) (@lem379035 A lt2 y _8037 bad _8038)). Qed.
Lemma lem379053 {A : Type'} (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (_8037 : nat) (bad : type976 A) (_8038 : nat -> A) : (term1481 A bad k lt2 _8038 y _8037) = (term1539 A k lt2 y _8037 bad _8038).
Proof. exact (TRANS (@lem379020 A k bad lt2 _8038 y _8037) (@lem379042 A k lt2 y _8037 bad _8038)). Qed.
Lemma lem379054 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem379055 {A : Type'} (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (_8037 : nat) (bad : type976 A) (_8038 : nat -> A) : (term1540 A bad k lt2 _8038 y _8037) = (term1541 A k lt2 y _8037 bad _8038).
Proof. exact (MK_COMB (@lem379054) (@lem379053 A k lt2 y _8037 bad _8038)). Qed.
Lemma lem379069 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem379070 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (_8037 : nat) (bad : type976 A) (_8038 : nat -> A) : (term1536 A bad lt2 _8038 y _8037) = (term1537 A lt2 y _8037 bad _8038).
Proof. exact (@lem379069 (term1297 A lt2 _8038 y _8037) (term1294 A bad _8038)). Qed.
Lemma lem379076 {A : Type'} (k : type1584 A) (_8038 : nat -> A) (_8037 : nat) : (term1538 A k _8038 _8037) = (term1538 A k _8038 _8037).
Proof. exact (eq_refl (term1538 A k _8038 _8037)). Qed.
Lemma lem379077 {A : Type'} (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (_8037 : nat) (bad : type976 A) (_8038 : nat -> A) : (term1535 A k bad lt2 _8038 y _8037) = (term1539 A k lt2 y _8037 bad _8038).
Proof. exact (MK_COMB (@lem379076 A k _8038 _8037) (@lem379070 A lt2 y _8037 bad _8038)). Qed.
Lemma lem379088 {A : Type'} (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (_8037 : nat) (bad : type976 A) (_8038 : nat -> A) : ((term1481 A bad k lt2 _8038 y _8037) = (term1535 A k bad lt2 _8038 y _8037)) = ((term1539 A k lt2 y _8037 bad _8038) = (term1539 A k lt2 y _8037 bad _8038)).
Proof. exact (MK_COMB (@lem379055 A k lt2 y _8037 bad _8038) (@lem379077 A k lt2 y _8037 bad _8038)). Qed.
Lemma lem379090 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem379091 (x : Prop) : (x = x) = True.
Proof. exact (@lem379090 Prop x). Qed.
Lemma lem379092 {A : Type'} (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (_8037 : nat) (bad : type976 A) (_8038 : nat -> A) : ((term1539 A k lt2 y _8037 bad _8038) = (term1539 A k lt2 y _8037 bad _8038)) = True.
Proof. exact (@lem379091 (term1539 A k lt2 y _8037 bad _8038)). Qed.
Lemma lem379093 {A : Type'} (k : type1584 A) (bad : type976 A) (lt2 : type1402 A) (_8038 : nat -> A) (y : nat -> A) (_8037 : nat) : ((term1481 A bad k lt2 _8038 y _8037) = (term1535 A k bad lt2 _8038 y _8037)) = True.
Proof. exact (TRANS (@lem379088 A k lt2 y _8037 bad _8038) (@lem379092 A k lt2 y _8037 bad _8038)). Qed.
Lemma lem379094 {A : Type'} (k : type1584 A) (bad : type976 A) (lt2 : type1402 A) (_8038 : nat -> A) (y : nat -> A) (_8037 : nat) : True = ((term1481 A bad k lt2 _8038 y _8037) = (term1535 A k bad lt2 _8038 y _8037)).
Proof. exact (SYM (@lem379093 A k bad lt2 _8038 y _8037)). Qed.
Lemma lem379095 {A : Type'} (k : type1584 A) (bad : type976 A) (lt2 : type1402 A) (_8038 : nat -> A) (y : nat -> A) (_8037 : nat) : (term1481 A bad k lt2 _8038 y _8037) = (term1535 A k bad lt2 _8038 y _8037).
Proof. exact (EQ_MP (@lem379094 A k bad lt2 _8038 y _8037) (@lem0)). Qed.
Lemma lem379096 {A : Type'} (_8038 : nat -> A) (_8037 : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1535 A k bad lt2 _8038 y _8037.
Proof. exact (EQ_MP (@lem379095 A k bad lt2 _8038 y _8037) (@lem378327 A _8038 _8037 y' bad k lt2 y h1)). Qed.
Lemma lem379098 (b : Prop) (a : Prop) : (a \/ b) = (term493 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem379099 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (k : type1584 A) (_8038 : nat -> A) (_8037 : nat) : (term1535 A k bad lt2 _8038 y _8037) = (term1542 A bad lt2 y k _8038 _8037).
Proof. exact (@lem379098 (term1536 A bad lt2 _8038 y _8037) (term1315 A k _8038 _8037)). Qed.
Lemma lem379101 (a : Prop) (b : Prop) : (term495 a b) = (term496 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem379102 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (_8038 : nat -> A) (y : nat -> A) (_8037 : nat) : (term1543 A bad lt2 _8038 y _8037) = (term1544 A bad lt2 _8038 y _8037).
Proof. exact (@lem379101 (term1294 A bad _8038) (term1297 A lt2 _8038 y _8037)). Qed.
Lemma lem379104 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem379105 {A : Type'} (bad : type976 A) (_8038 : nat -> A) : (term1494 A bad _8038) = (@I ((nat -> A) -> Prop) bad _8038).
Proof. exact (@lem379104 (@I ((nat -> A) -> Prop) bad _8038)). Qed.
Lemma lem379106 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem379107 {A : Type'} (bad : type976 A) (_8038 : nat -> A) : (term1545 A bad _8038) = (term1290 A bad _8038).
Proof. exact (MK_COMB (@lem379106) (@lem379105 A bad _8038)). Qed.
Lemma lem379109 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem379110 {A : Type'} (lt2 : type1402 A) (_8038 : nat -> A) (y : nat -> A) (_8037 : nat) : (term1546 A lt2 _8038 y _8037) = (term1280 A lt2 _8038 y _8037).
Proof. exact (@lem379109 (term1280 A lt2 _8038 y _8037)). Qed.
Lemma lem379111 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (_8038 : nat -> A) (y : nat -> A) (_8037 : nat) : (term1544 A bad lt2 _8038 y _8037) = (term1547 A bad lt2 _8038 y _8037).
Proof. exact (MK_COMB (@lem379107 A bad _8038) (@lem379110 A lt2 _8038 y _8037)). Qed.
Lemma lem379112 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (_8038 : nat -> A) (y : nat -> A) (_8037 : nat) : (term1543 A bad lt2 _8038 y _8037) = (term1547 A bad lt2 _8038 y _8037).
Proof. exact (TRANS (@lem379102 A bad lt2 _8038 y _8037) (@lem379111 A bad lt2 _8038 y _8037)). Qed.
Lemma lem379113 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem379114 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (_8038 : nat -> A) (y : nat -> A) (_8037 : nat) : (term1548 A bad lt2 _8038 y _8037) = (term1549 A bad lt2 _8038 y _8037).
Proof. exact (MK_COMB (@lem379113) (@lem379112 A bad lt2 _8038 y _8037)). Qed.
Lemma lem379115 {A : Type'} (k : type1584 A) (_8038 : nat -> A) (_8037 : nat) : (term1315 A k _8038 _8037) = (term1315 A k _8038 _8037).
Proof. exact (eq_refl (term1315 A k _8038 _8037)). Qed.
Lemma lem379116 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (k : type1584 A) (_8038 : nat -> A) (_8037 : nat) : (term1542 A bad lt2 y k _8038 _8037) = (term1550 A bad lt2 y k _8038 _8037).
Proof. exact (MK_COMB (@lem379114 A bad lt2 _8038 y _8037) (@lem379115 A k _8038 _8037)). Qed.
Lemma lem379117 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (y : nat -> A) (k : type1584 A) (_8038 : nat -> A) (_8037 : nat) : (term1535 A k bad lt2 _8038 y _8037) = (term1550 A bad lt2 y k _8038 _8037).
Proof. exact (TRANS (@lem379099 A bad lt2 y k _8038 _8037) (@lem379116 A bad lt2 y k _8038 _8037)). Qed.
Lemma lem379119 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1293 A bad lt2 z y n) : term1547 A bad lt2 z y n.
Proof. exact (conj (@lem379006 A bad lt2 z y n h1) (@lem379013 A bad lt2 z y n h1)). Qed.
Lemma lem379121 {A : Type'} (_8038 : nat -> A) (_8037 : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1550 A bad lt2 y k _8038 _8037.
Proof. exact (EQ_MP (@lem379117 A bad lt2 y k _8038 _8037) (@lem379096 A _8038 _8037 y' bad k lt2 y h1)). Qed.
Lemma lem379122 {A : Type'} (_8038 : nat -> A) (_8037 : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1550 A bad lt2 y k _8038 _8037.
Proof. exact (@lem379121 A _8038 _8037 y' bad k lt2 y h1). Qed.
Lemma lem379123 {A : Type'} (z : nat -> A) (n : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1550 A bad lt2 y k z n.
Proof. exact (@lem379122 A z n y' bad k lt2 y h1). Qed.
Lemma lem379126 {A : Type'} (y' : type1604 A) (k : type1584 A) (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1215 A y' bad k lt2 y) (h2 : term1293 A bad lt2 z y n) : term1315 A k z n.
Proof. exact (@lem379123 A z n y' bad k lt2 y h1 (@lem379119 A bad lt2 z y n h2)). Qed.
Lemma lem379127 {A : Type'} (y' : type1604 A) (k : type1584 A) (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1215 A y' bad k lt2 y) (h2 : term1293 A bad lt2 z y n) : term1551 A k z n.
Proof. exact (fun h0 : term1552 A k z n => @lem379126 A y' k bad lt2 z y n h1 h2). Qed.
Lemma lem379129 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem379130 {A : Type'} (k : type1584 A) (z : nat -> A) (n : nat) : (term1551 A k z n) = (term1315 A k z n).
Proof. exact (@lem379129 (term1315 A k z n)). Qed.
Lemma lem379131 {A : Type'} (y' : type1604 A) (k : type1584 A) (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1215 A y' bad k lt2 y) (h2 : term1293 A bad lt2 z y n) : term1315 A k z n.
Proof. exact (EQ_MP (@lem379130 A k z n) (@lem379127 A y' k bad lt2 z y n h1 h2)). Qed.
Lemma lem379137 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem379138 {A : Type'} (z : nat -> A) (y : nat -> A) (_8039 : nat) (n : nat) : (term1287 A n z y _8039) = (term1553 A z y _8039 n).
Proof. exact (@lem379137 ((@I (nat -> A) z _8039) = (@I (nat -> A) y _8039)) (term1284 _8039 n)). Qed.
Lemma lem379146 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem379147 {A : Type'} (z : nat -> A) (y : nat -> A) (_8039 : nat) (n : nat) : (term1554 A n z y _8039) = (term1555 A z y _8039 n).
Proof. exact (MK_COMB (@lem379146) (@lem379138 A z y _8039 n)). Qed.
Lemma lem379155 {A : Type'} (z : nat -> A) (y : nat -> A) (_8039 : nat) (n : nat) : (term1553 A z y _8039 n) = (term1553 A z y _8039 n).
Proof. exact (eq_refl (term1553 A z y _8039 n)). Qed.
Lemma lem379156 {A : Type'} (z : nat -> A) (y : nat -> A) (_8039 : nat) (n : nat) : ((term1287 A n z y _8039) = (term1553 A z y _8039 n)) = ((term1553 A z y _8039 n) = (term1553 A z y _8039 n)).
Proof. exact (MK_COMB (@lem379147 A z y _8039 n) (@lem379155 A z y _8039 n)). Qed.
Lemma lem379158 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem379159 (x : Prop) : (x = x) = True.
Proof. exact (@lem379158 Prop x). Qed.
Lemma lem379160 {A : Type'} (z : nat -> A) (y : nat -> A) (_8039 : nat) (n : nat) : ((term1553 A z y _8039 n) = (term1553 A z y _8039 n)) = True.
Proof. exact (@lem379159 (term1553 A z y _8039 n)). Qed.
Lemma lem379161 {A : Type'} (z : nat -> A) (y : nat -> A) (_8039 : nat) (n : nat) : ((term1287 A n z y _8039) = (term1553 A z y _8039 n)) = True.
Proof. exact (TRANS (@lem379156 A z y _8039 n) (@lem379160 A z y _8039 n)). Qed.
Lemma lem379162 {A : Type'} (z : nat -> A) (y : nat -> A) (_8039 : nat) (n : nat) : True = ((term1287 A n z y _8039) = (term1553 A z y _8039 n)).
Proof. exact (SYM (@lem379161 A z y _8039 n)). Qed.
Lemma lem379163 {A : Type'} (z : nat -> A) (y : nat -> A) (_8039 : nat) (n : nat) : (term1287 A n z y _8039) = (term1553 A z y _8039 n).
Proof. exact (EQ_MP (@lem379162 A z y _8039 n) (@lem0)). Qed.
Lemma lem379164 {A : Type'} (_8039 : nat) (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1293 A bad lt2 z y n) : term1553 A z y _8039 n.
Proof. exact (EQ_MP (@lem379163 A z y _8039 n) (@lem378315 A _8039 bad lt2 z y n h1)). Qed.
Lemma lem379166 (b : Prop) (a : Prop) : (a \/ b) = (term493 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem379167 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) (_8039 : nat) : (term1553 A z y _8039 n) = (term1556 A n z y _8039).
Proof. exact (@lem379166 (term1284 _8039 n) ((@I (nat -> A) z _8039) = (@I (nat -> A) y _8039))). Qed.
Lemma lem379169 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem379170 (_8039 : nat) (n : nat) : (term1510 _8039 n) = (term1282 _8039 n).
Proof. exact (@lem379169 (term1282 _8039 n)). Qed.
Lemma lem379171 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem379172 (_8039 : nat) (n : nat) : (term1511 _8039 n) = (term1512 _8039 n).
Proof. exact (MK_COMB (@lem379171) (@lem379170 _8039 n)). Qed.
Lemma lem379173 {A : Type'} (z : nat -> A) (y : nat -> A) (_8039 : nat) : ((@I (nat -> A) z _8039) = (@I (nat -> A) y _8039)) = ((@I (nat -> A) z _8039) = (@I (nat -> A) y _8039)).
Proof. exact (eq_refl ((@I (nat -> A) z _8039) = (@I (nat -> A) y _8039))). Qed.
Lemma lem379174 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) (_8039 : nat) : (term1556 A n z y _8039) = (term1557 A n z y _8039).
Proof. exact (MK_COMB (@lem379172 _8039 n) (@lem379173 A z y _8039)). Qed.
Lemma lem379175 {A : Type'} (n : nat) (z : nat -> A) (y : nat -> A) (_8039 : nat) : (term1553 A z y _8039 n) = (term1557 A n z y _8039).
Proof. exact (TRANS (@lem379167 A n z y _8039) (@lem379174 A n z y _8039)). Qed.
Lemma lem379178 {A : Type'} (_8039 : nat) (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1293 A bad lt2 z y n) : term1557 A n z y _8039.
Proof. exact (EQ_MP (@lem379175 A n z y _8039) (@lem379164 A _8039 bad lt2 z y n h1)). Qed.
Lemma lem379179 {A : Type'} (k : type1584 A) (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1293 A bad lt2 z y n) : term1558 A y k n z.
Proof. exact (@lem379178 A (term1298 A k n z) bad lt2 z y n h1). Qed.
Lemma lem379182 {A : Type'} (y' : type1604 A) (k : type1584 A) (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1215 A y' bad k lt2 y) (h2 : term1293 A bad lt2 z y n) : (term1301 A k n z) = (term1304 A y k n z).
Proof. exact (@lem379179 A k bad lt2 z y n h2 (@lem379131 A y' k bad lt2 z y n h1 h2)). Qed.
Lemma lem379183 {A : Type'} (y' : type1604 A) (k : type1584 A) (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1215 A y' bad k lt2 y) (h2 : term1293 A bad lt2 z y n) : term1559 A y k n z.
Proof. exact (fun h0 : term1308 A y k n z => @lem379182 A y' k bad lt2 z y n h1 h2). Qed.
Lemma lem379185 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem379186 {A : Type'} (y : nat -> A) (k : type1584 A) (n : nat) (z : nat -> A) : (term1559 A y k n z) = ((term1301 A k n z) = (term1304 A y k n z)).
Proof. exact (@lem379185 ((term1301 A k n z) = (term1304 A y k n z))). Qed.
Lemma lem379187 {A : Type'} (y' : type1604 A) (k : type1584 A) (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1215 A y' bad k lt2 y) (h2 : term1293 A bad lt2 z y n) : (term1301 A k n z) = (term1304 A y k n z).
Proof. exact (EQ_MP (@lem379186 A y k n z) (@lem379183 A y' k bad lt2 z y n h1 h2)). Qed.
Lemma lem379189 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1293 A bad lt2 z y n) : term1280 A lt2 z y n.
Proof. exact (proj2 (@lem377799 A bad lt2 z y n h1)). Qed.
Lemma lem379190 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1293 A bad lt2 z y n) : term1534 A lt2 z y n.
Proof. exact (fun h0 : term1297 A lt2 z y n => @lem379189 A bad lt2 z y n h1). Qed.
Lemma lem379192 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem379193 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1534 A lt2 z y n) = (term1280 A lt2 z y n).
Proof. exact (@lem379192 (term1280 A lt2 z y n)). Qed.
Lemma lem379194 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1293 A bad lt2 z y n) : term1280 A lt2 z y n.
Proof. exact (EQ_MP (@lem379193 A lt2 z y n) (@lem379190 A bad lt2 z y n h1)). Qed.
Lemma lem379196 (a : Prop) (b : Prop) : (term515 a b) = (term516 a b).
Proof. exact (EQ_MP (@lem20904 a b) (@lem21007 a b)). Qed.
Lemma lem379197 {A : Type'} (k : type1584 A) (lt2 : type1402 A) (_8038 : nat -> A) (y : nat -> A) (_8037 : nat) : (term1560 A k lt2 _8038 y _8037) = (term1561 A k lt2 _8038 y _8037).
Proof. exact (@lem379196 ((term1301 A k _8037 _8038) = (term1304 A y k _8037 _8038)) (term1280 A lt2 _8038 y _8037)). Qed.
Lemma lem379198 {A : Type'} (bad : type976 A) (_8038 : nat -> A) : (term1295 A bad _8038) = (term1295 A bad _8038).
Proof. exact (eq_refl (term1295 A bad _8038)). Qed.
Lemma lem379199 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (_8038 : nat -> A) (y : nat -> A) (_8037 : nat) : (term1482 A bad k lt2 _8038 y _8037) = (term1562 A bad k lt2 _8038 y _8037).
Proof. exact (MK_COMB (@lem379198 A bad _8038) (@lem379197 A k lt2 _8038 y _8037)). Qed.
Lemma lem379201 (a : Prop) (b : Prop) : (term515 a b) = (term516 a b).
Proof. exact (EQ_MP (@lem20904 a b) (@lem21007 a b)). Qed.
Lemma lem379202 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (_8038 : nat -> A) (y : nat -> A) (_8037 : nat) : (term1562 A bad k lt2 _8038 y _8037) = (term1563 A bad k lt2 _8038 y _8037).
Proof. exact (@lem379201 (@I ((nat -> A) -> Prop) bad _8038) (term1564 A k lt2 _8038 y _8037)). Qed.
Lemma lem379203 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (_8038 : nat -> A) (y : nat -> A) (_8037 : nat) : (term1482 A bad k lt2 _8038 y _8037) = (term1563 A bad k lt2 _8038 y _8037).
Proof. exact (TRANS (@lem379199 A bad k lt2 _8038 y _8037) (@lem379202 A bad k lt2 _8038 y _8037)). Qed.
Lemma lem379205 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem379206 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (_8038 : nat -> A) (y : nat -> A) (_8037 : nat) : (term1563 A bad k lt2 _8038 y _8037) = (term1565 A bad k lt2 _8038 y _8037).
Proof. exact (@lem379205 (term1566 A bad k lt2 _8038 y _8037)). Qed.
Lemma lem379207 {A : Type'} (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (_8038 : nat -> A) (y : nat -> A) (_8037 : nat) : (term1482 A bad k lt2 _8038 y _8037) = (term1565 A bad k lt2 _8038 y _8037).
Proof. exact (TRANS (@lem379203 A bad k lt2 _8038 y _8037) (@lem379206 A bad k lt2 _8038 y _8037)). Qed.
Lemma lem379209 {A : Type'} (y' : type1604 A) (k : type1584 A) (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1215 A y' bad k lt2 y) (h2 : term1293 A bad lt2 z y n) : term1564 A k lt2 z y n.
Proof. exact (conj (@lem379187 A y' k bad lt2 z y n h1 h2) (@lem379194 A bad lt2 z y n h2)). Qed.
Lemma lem379210 {A : Type'} (y' : type1604 A) (k : type1584 A) (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1215 A y' bad k lt2 y) (h2 : term1293 A bad lt2 z y n) : term1566 A bad k lt2 z y n.
Proof. exact (conj (@lem378999 A bad lt2 z y n h2) (@lem379209 A y' k bad lt2 z y n h1 h2)). Qed.
Lemma lem379212 {A : Type'} (_8038 : nat -> A) (_8037 : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1565 A bad k lt2 _8038 y _8037.
Proof. exact (EQ_MP (@lem379207 A bad k lt2 _8038 y _8037) (@lem378339 A _8038 _8037 y' bad k lt2 y h1)). Qed.
Lemma lem379213 {A : Type'} (_8038 : nat -> A) (_8037 : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1565 A bad k lt2 _8038 y _8037.
Proof. exact (@lem379212 A _8038 _8037 y' bad k lt2 y h1). Qed.
Lemma lem379214 {A : Type'} (z : nat -> A) (n : nat) (y' : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (y : nat -> A) (h1 : term1215 A y' bad k lt2 y) : term1565 A bad k lt2 z y n.
Proof. exact (@lem379213 A z n y' bad k lt2 y h1). Qed.
Lemma lem379217 {A : Type'} (y' : type1604 A) (k : type1584 A) (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1215 A y' bad k lt2 y) (h2 : term1293 A bad lt2 z y n) : False.
Proof. exact (@lem379214 A z n y' bad k lt2 y h1 (@lem379210 A y' k bad lt2 z y n h1 h2)). Qed.
Lemma lem379218 {A : Type'} (y' : type1604 A) (k : type1584 A) (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1215 A y' bad k lt2 y) (h2 : term1293 A bad lt2 z y n) : term522.
Proof. exact (fun h0 : ~ False => @lem379217 A y' k bad lt2 z y n h1 h2). Qed.
Lemma lem379220 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem379221 : term522 = False.
Proof. exact (@lem379220 False). Qed.
Lemma lem379222 {A : Type'} (y' : type1604 A) (k : type1584 A) (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1215 A y' bad k lt2 y) (h2 : term1293 A bad lt2 z y n) : False.
Proof. exact (EQ_MP (@lem379221) (@lem379218 A y' k bad lt2 z y n h1 h2)). Qed.
Lemma lem379223 {A : Type'} (y' : type1604 A) (k : type1584 A) (y : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1294 A bad y) (h2 : term1215 A y' bad k lt2 y) (h3 : term1057 A lt2 n' k' bad x) : (term1294 A bad y) = False.
Proof. exact (prop_ext (fun h4 : term1294 A bad y => @lem378785 A y' k y lt2 n' k' bad x h1 h2 h3) (fun h4 : False => @lem378247 A bad y h1)). Qed.
Lemma lem379224 {A : Type'} (y' : type1604 A) (k : type1584 A) (y : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1294 A bad y) (h2 : term1215 A y' bad k lt2 y) (h3 : term1057 A lt2 n' k' bad x) : False.
Proof. exact (EQ_MP (@lem379223 A y' k y lt2 n' k' bad x h1 h2 h3) (@lem378247 A bad y h1)). Qed.
Lemma lem379225 {A : Type'} (y' : type1604 A) (k : type1584 A) (y : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1294 A bad y) (h2 : term1215 A y' bad k lt2 y) (h3 : term1057 A lt2 n' k' bad x) : (term1294 A bad y) = False.
Proof. exact (prop_ext (fun h4 : term1294 A bad y => @lem379224 A y' k y lt2 n' k' bad x h1 h2 h3) (fun h4 : False => @lem377986 A bad y h1)). Qed.
Lemma lem379226 {A : Type'} (y' : type1604 A) (k : type1584 A) (y : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1294 A bad y) (h2 : term1215 A y' bad k lt2 y) (h3 : term1057 A lt2 n' k' bad x) : False.
Proof. exact (EQ_MP (@lem379225 A y' k y lt2 n' k' bad x h1 h2 h3) (@lem377986 A bad y h1)). Qed.
Lemma lem379227 {A : Type'} (y' : type1604 A) (k : type1584 A) (y : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1294 A bad y) (h2 : term1215 A y' bad k lt2 y) (h3 : term1057 A lt2 n' k' bad x) : (term1294 A bad y) = False.
Proof. exact (prop_ext (fun h4 : term1294 A bad y => @lem379226 A y' k y lt2 n' k' bad x h1 h2 h3) (fun h4 : False => @lem377986 A bad y h1)). Qed.
Lemma lem379228 {A : Type'} (y' : type1604 A) (k : type1584 A) (y : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x : nat -> A) (h1 : term1294 A bad y) (h2 : term1215 A y' bad k lt2 y) (h3 : term1057 A lt2 n' k' bad x) : False.
Proof. exact (EQ_MP (@lem379227 A y' k y lt2 n' k' bad x h1 h2 h3) (@lem377986 A bad y h1)). Qed.
Lemma lem379229 {A : Type'} (y' : type1604 A) (k : type1584 A) (n' : type977 A) (k' : type967 A) (x : nat -> A) (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1215 A y' bad k lt2 y) (h2 : term1057 A lt2 n' k' bad x) (h3 : term1269 A bad lt2 z y n) : False.
Proof. exact (or_elim (@lem377389 A bad lt2 z y n h3) (fun h0 : term1294 A bad y => @lem379228 A y' k y lt2 n' k' bad x h0 h1 h2) (fun h0 : term1293 A bad lt2 z y n => @lem379222 A y' k bad lt2 z y n h1 h0)). Qed.
Lemma lem379230 {A : Type'} (n' : type977 A) (k' : type967 A) (y' : type1604 A) (k : type1584 A) (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1060 A lt2 n' k' bad) (h2 : term1215 A y' bad k lt2 y) (h3 : term1269 A bad lt2 z y n) : False.
Proof. exact (ex_elim (@lem377285 A lt2 n' k' bad h1) (fun x : nat -> A => fun h0 : term1059 A lt2 n' k' bad x => @lem379229 A y' k n' k' x bad lt2 z y n h2 h0 h3)). Qed.
Lemma lem379231 {A : Type'} (n' : type977 A) (y' : type1604 A) (k : type1584 A) (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1062 A lt2 n' bad) (h2 : term1215 A y' bad k lt2 y) (h3 : term1269 A bad lt2 z y n) : False.
Proof. exact (ex_elim (@lem377284 A lt2 n' bad h1) (fun k' : type967 A => fun h0 : term1061 A lt2 n' bad k' => @lem379230 A n' k' y' k bad lt2 z y n h0 h2 h3)). Qed.
Lemma lem379232 {A : Type'} (y' : type1604 A) (k : type1584 A) (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1215 A y' bad k lt2 y) (h2 : term587 A lt2 bad) (h3 : term1269 A bad lt2 z y n) : False.
Proof. exact (ex_elim (@lem376638 A lt2 bad h2) (fun n' : type977 A => fun h0 : term1063 A lt2 bad n' => @lem379231 A n' y' k bad lt2 z y n h0 h1 h3)). Qed.
Lemma lem379233 {A : Type'} (y' : type1604 A) (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term1218 A y' bad lt2 y) (h2 : term587 A lt2 bad) (h3 : term1269 A bad lt2 z y n) : False.
Proof. exact (ex_elim (@lem377282 A y' bad lt2 y h1) (fun k : type1584 A => fun h0 : term1217 A y' bad lt2 y k => @lem379232 A y' k bad lt2 z y n h0 h2 h3)). Qed.
Lemma lem379234 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) (h1 : term779 A bad lt2 y) (h2 : term587 A lt2 bad) (h3 : term1269 A bad lt2 z y n) : False.
Proof. exact (ex_elim (@lem377083 A bad lt2 y h1) (fun y' : type1604 A => fun h0 : term1219 A bad lt2 y y' => @lem379233 A y' bad lt2 z y n h0 h2 h3)). Qed.
Lemma lem379235 {A : Type'} (z : nat -> A) (y : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term1272 A bad lt2 z y) (h2 : term779 A bad lt2 y) (h3 : term587 A lt2 bad) : False.
Proof. exact (ex_elim (@lem377280 A bad lt2 z y h1) (fun n : nat => fun h0 : term1271 A bad lt2 z y n => @lem379234 A bad lt2 z y n h2 h3 h0)). Qed.
Lemma lem379236 {A : Type'} (y : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term821 A bad lt2 y) (h2 : term779 A bad lt2 y) (h3 : term587 A lt2 bad) : False.
Proof. exact (ex_elim (@lem377279 A bad lt2 y h1) (fun z : nat -> A => fun h0 : term1273 A bad lt2 y z => @lem379235 A z y lt2 bad h0 h2 h3)). Qed.
Lemma lem379237 {A : Type'} (y : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term821 A bad lt2 y) (h2 : term779 A bad lt2 y) (h3 : term587 A lt2 bad) : (term821 A bad lt2 y) = False.
Proof. exact (prop_ext (fun h4 : term821 A bad lt2 y => @lem379236 A y lt2 bad h1 h2 h3) (fun h4 : False => @lem376139 A bad lt2 y h1)). Qed.
Lemma lem379238 {A : Type'} (y : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term821 A bad lt2 y) (h2 : term779 A bad lt2 y) (h3 : term587 A lt2 bad) : False.
Proof. exact (EQ_MP (@lem379237 A y lt2 bad h1 h2 h3) (@lem376139 A bad lt2 y h1)). Qed.
Lemma lem379239 {A : Type'} (y : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term779 A bad lt2 y) (h2 : term587 A lt2 bad) : term820 A bad lt2 y.
Proof. exact (fun h0 : term821 A bad lt2 y => @lem379238 A y lt2 bad h0 h1 h2). Qed.
Lemma lem379240 {A : Type'} (y : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term779 A bad lt2 y) (h2 : term587 A lt2 bad) : term724 A bad lt2 y.
Proof. exact (EQ_MP (@lem376138 A bad lt2 y) (@lem379239 A y lt2 bad h1 h2)). Qed.
Lemma lem379241 {A : Type'} (y : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : term781 A bad lt2 y.
Proof. exact (fun h0 : term779 A bad lt2 y => @lem379240 A y lt2 bad h0 h1). Qed.
Lemma lem379246 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : term783 A bad lt2.
Proof. exact (fun y : nat -> A => @lem379241 A y lt2 bad h1). Qed.
Lemma lem379247 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : term785 A bad lt2.
Proof. exact (fun h0 : term587 A lt2 bad => @lem379246 A lt2 bad h0). Qed.
Lemma lem379252 {A : Type'} (lt2 : type1402 A) : term789 A lt2.
Proof. exact (fun bad : type976 A => @lem379247 A bad lt2). Qed.
Lemma lem379257 {A : Type'} : term793 A.
Proof. exact (fun lt2 : type1402 A => @lem379252 A lt2). Qed.
Lemma lem379258 {A : Type'} : term792 A.
Proof. exact (EQ_MP (@lem376132 A) (@lem379257 A)). Qed.
Lemma lem379259 {A : Type'} (lt2 : type1402 A) : term1567 A lt2.
Proof. exact (@lem379258 A lt2). Qed.
Lemma lem379260 {A : Type'} (lt2 : type1402 A) : (term1567 A lt2) = (term788 A lt2).
Proof. exact (eq_refl (term1567 A lt2)). Qed.
Lemma lem379261 {A : Type'} (lt2 : type1402 A) : term788 A lt2.
Proof. exact (EQ_MP (@lem379260 A lt2) (@lem379259 A lt2)). Qed.
Lemma lem379262 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : term1568 A lt2 bad.
Proof. exact (@lem379261 A lt2 bad). Qed.
Lemma lem379263 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : (term1568 A lt2 bad) = (term748 A bad lt2).
Proof. exact (eq_refl (term1568 A lt2 bad)). Qed.
Lemma lem379264 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : term748 A bad lt2.
Proof. exact (EQ_MP (@lem379263 A bad lt2) (@lem379262 A lt2 bad)). Qed.
Lemma lem379266 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : term748 A bad lt2.
Proof. exact (@lem375660 A bad lt2 (@lem379264 A bad lt2)). Qed.
Lemma lem379267 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : term746 A bad lt2.
Proof. exact (@lem379266 A bad lt2 (@lem371920 A lt2 bad h1)). Qed.
Lemma lem379268 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term747 A bad lt2) (h2 : term587 A lt2 bad) : False.
Proof. exact (@lem379267 A lt2 bad h2 (@lem375644 A bad lt2 h1)). Qed.
Lemma lem379269 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term747 A bad lt2) (h2 : term587 A lt2 bad) : (term747 A bad lt2) = False.
Proof. exact (prop_ext (fun h3 : term747 A bad lt2 => @lem379268 A lt2 bad h1 h2) (fun h3 : False => @lem375644 A bad lt2 h1)). Qed.
Lemma lem379270 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term747 A bad lt2) (h2 : term587 A lt2 bad) : False.
Proof. exact (EQ_MP (@lem379269 A lt2 bad h1 h2) (@lem375644 A bad lt2 h1)). Qed.
Lemma lem379271 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : term746 A bad lt2.
Proof. exact (fun h0 : term747 A bad lt2 => @lem379270 A lt2 bad h0 h1). Qed.
Lemma lem379272 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : term730 A bad lt2.
Proof. exact (EQ_MP (@lem375643 A bad lt2) (@lem379271 A lt2 bad h1)). Qed.
Lemma lem379273 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : term741 A bad lt2.
Proof. exact (@lem375639 A bad lt2 (@lem379272 A lt2 bad h1)). Qed.
Lemma lem379274 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (h1 : term631 A n bad lt2 x) : term631 A n bad lt2 x.
Proof. exact (h1). Qed.
Lemma lem379276 {_16548 _16549 _16551 : Type'} (P : _16549 -> Prop) (Q : _16549 -> Prop) (B : type1413 _16548 _16551) (f : _16549 -> _16548) (A : _16551 -> Prop) : (term25 _16548 _16549 _16551 P Q f A B) = (term26 _16548 _16549 _16551 P Q B f A).
Proof. exact (EQ_MP (@lem369170 _16548 _16549 _16551 P Q B f A) (@lem371878 _16548 _16549 _16551 P Q B f A)). Qed.
Lemma lem379277 {A : Type'} (P : type976 A) (Q : type976 A) (B : type1382 A) (f : type975 A) (A' : type976 A) : (term1569 A P Q f A' B) = (term1570 A P Q B f A').
Proof. exact (@lem379276 A (nat -> A) (nat -> A) P Q B f A'). Qed.
Lemma lem379278 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1571 A bad x lt2 n) = (term1572 A lt2 bad n x).
Proof. exact (@lem379277 A bad (term1573 A n x) (term1574 A lt2 n) (term15 A n) (term1575 A bad n x)). Qed.
Lemma lem379279 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term1576 A n x y) = (term663 A n y x).
Proof. exact (eq_refl (term1576 A n x y)). Qed.
Lemma lem379280 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem379281 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term1577 A n x y) = (term683 A n y x).
Proof. exact (MK_COMB (@lem379280) (@lem379279 A n y x)). Qed.
Lemma lem379282 {A : Type'} (y : nat -> A) (n : nat) : (term1578 A n y) = (y n).
Proof. exact (eq_refl (term1578 A n y)). Qed.
Lemma lem379283 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem379284 {A : Type'} (y : nat -> A) (n : nat) : (term1579 A n y) = (term679 A y n).
Proof. exact (MK_COMB (@lem379283 A) (@lem379282 A y n)). Qed.
Lemma lem379285 {A : Type'} (y : A) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem379286 {A : Type'} (y : nat -> A) (n : nat) (y' : A) : ((term1578 A n y) = y') = ((y n) = y').
Proof. exact (MK_COMB (@lem379284 A y n) (@lem379285 A y')). Qed.
Lemma lem379287 {A : Type'} (x : nat -> A) (y : nat -> A) (n : nat) (y' : A) : (term1580 A x n y y') = (term684 A x y n y').
Proof. exact (MK_COMB (@lem379281 A n y x) (@lem379286 A y n y')). Qed.
Lemma lem379288 {A : Type'} (bad : type976 A) (y : nat -> A) : (term685 A bad y) = (term685 A bad y).
Proof. exact (eq_refl (term685 A bad y)). Qed.
Lemma lem379289 {A : Type'} (bad : type976 A) (x : nat -> A) (y : nat -> A) (n : nat) (y' : A) : (term1581 A bad x n y y') = (term686 A bad x y n y').
Proof. exact (MK_COMB (@lem379288 A bad y) (@lem379287 A x y n y')). Qed.
Lemma lem379290 {A : Type'} (bad : type976 A) (x : nat -> A) (n : nat) (y : A) : (term1582 A bad x n y) = (term687 A bad x n y).
Proof. exact (fun_ext (fun y' : nat -> A => @lem379289 A bad x y' n y)). Qed.
Lemma lem379291 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem379292 {A : Type'} (bad : type976 A) (x : nat -> A) (n : nat) (y : A) : (term1583 A bad x n y) = (term688 A bad x n y).
Proof. exact (MK_COMB (@lem379291 A) (@lem379290 A bad x n y)). Qed.
Lemma lem379293 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem379294 {A : Type'} (bad : type976 A) (x : nat -> A) (n : nat) (y : A) : (term1584 A bad x n y) = (term689 A bad x n y).
Proof. exact (MK_COMB (@lem379293) (@lem379292 A bad x n y)). Qed.
Lemma lem379295 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (x : nat -> A) : (term1585 A bad n x z) = (term691 A bad n z x).
Proof. exact (eq_refl (term1585 A bad n x z)). Qed.
Lemma lem379296 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem379297 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (x : nat -> A) : (term1586 A bad n x z) = (term795 A bad n z x).
Proof. exact (MK_COMB (@lem379296) (@lem379295 A bad n z x)). Qed.
Lemma lem379298 {A : Type'} (lt2 : type1402 A) (n : nat) (y : A) : (term1587 A lt2 n y) = (term1588 A lt2 n y).
Proof. exact (eq_refl (term1587 A lt2 n y)). Qed.
Lemma lem379299 {A : Type'} (z : nat -> A) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem379300 {A : Type'} (lt2 : type1402 A) (n : nat) (y : A) (z : nat -> A) : (term1589 A lt2 n y z) = (term1590 A lt2 n y z).
Proof. exact (MK_COMB (@lem379298 A lt2 n y) (@lem379299 A z)). Qed.
Lemma lem379301 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (n : nat) (y : A) : (term1590 A lt2 n y z) = (term1591 A lt2 z n y).
Proof. exact (eq_refl (term1590 A lt2 n y z)). Qed.
Lemma lem379302 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (n : nat) (y : A) : (term1589 A lt2 n y z) = (term1591 A lt2 z n y).
Proof. exact (TRANS (@lem379300 A lt2 n y z) (@lem379301 A lt2 z n y)). Qed.
Lemma lem379303 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem379304 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (n : nat) (y : A) : (term1592 A lt2 n y z) = (term692 A lt2 z n y).
Proof. exact (MK_COMB (@lem379303) (@lem379302 A lt2 z n y)). Qed.
Lemma lem379305 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (z : nat -> A) (n : nat) (y : A) : (term1593 A bad x lt2 n y z) = (term701 A bad x lt2 z n y).
Proof. exact (MK_COMB (@lem379297 A bad n z x) (@lem379304 A lt2 z n y)). Qed.
Lemma lem379306 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) : (term1594 A bad x lt2 n y) = (term702 A bad x lt2 n y).
Proof. exact (fun_ext (fun z : nat -> A => @lem379305 A bad x lt2 z n y)). Qed.
Lemma lem379307 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem379308 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) : (term1595 A bad x lt2 n y) = (term703 A bad x lt2 n y).
Proof. exact (MK_COMB (@lem379307 A) (@lem379306 A bad x lt2 n y)). Qed.
Lemma lem379309 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) (y : A) : (term1596 A bad x lt2 n y) = (term598 A bad x lt2 n y).
Proof. exact (MK_COMB (@lem379294 A bad x n y) (@lem379308 A bad x lt2 n y)). Qed.
Lemma lem379310 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) : (term1597 A bad x lt2 n) = (term595 A bad x lt2 n).
Proof. exact (fun_ext (fun y : A => @lem379309 A bad x lt2 n y)). Qed.
Lemma lem379311 {A : Type'} : (@ex A) = (@ex A).
Proof. exact (eq_refl (@ex A)). Qed.
Lemma lem379312 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) : (term1571 A bad x lt2 n) = (term636 A bad x lt2 n).
Proof. exact (MK_COMB (@lem379311 A) (@lem379310 A bad x lt2 n)). Qed.
Lemma lem379313 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem379314 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) : (term1598 A bad x lt2 n) = (term1599 A bad x lt2 n).
Proof. exact (MK_COMB (@lem379313) (@lem379312 A bad x lt2 n)). Qed.
Lemma lem379315 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term1576 A n x y) = (term663 A n y x).
Proof. exact (eq_refl (term1576 A n x y)). Qed.
Lemma lem379316 {A : Type'} (bad : type976 A) (y : nat -> A) : (term685 A bad y) = (term685 A bad y).
Proof. exact (eq_refl (term685 A bad y)). Qed.
Lemma lem379317 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term1600 A bad n x y) = (term691 A bad n y x).
Proof. exact (MK_COMB (@lem379316 A bad y) (@lem379315 A n y x)). Qed.
Lemma lem379318 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem379319 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term1601 A bad n x y) = (term1224 A bad n y x).
Proof. exact (MK_COMB (@lem379318) (@lem379317 A bad n y x)). Qed.
Lemma lem379320 {A : Type'} (lt2 : type1402 A) (n : nat) (y : nat -> A) : (term1602 A lt2 n y) = (term1603 A lt2 n y).
Proof. exact (eq_refl (term1602 A lt2 n y)). Qed.
Lemma lem379321 {A : Type'} (z : nat -> A) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem379322 {A : Type'} (lt2 : type1402 A) (n : nat) (y : nat -> A) (z : nat -> A) : (term1604 A lt2 n y z) = (term1605 A lt2 n y z).
Proof. exact (MK_COMB (@lem379320 A lt2 n y) (@lem379321 A z)). Qed.
Lemma lem379323 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (n : nat) (y : nat -> A) : (term1605 A lt2 n y z) = (term1606 A lt2 z n y).
Proof. exact (eq_refl (term1605 A lt2 n y z)). Qed.
Lemma lem379324 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (n : nat) (y : nat -> A) : (term1604 A lt2 n y z) = (term1606 A lt2 z n y).
Proof. exact (TRANS (@lem379322 A lt2 n y z) (@lem379323 A lt2 z n y)). Qed.
Lemma lem379325 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem379326 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (n : nat) (y : nat -> A) : (term1607 A lt2 n y z) = (term1608 A lt2 z n y).
Proof. exact (MK_COMB (@lem379325) (@lem379324 A lt2 z n y)). Qed.
Lemma lem379327 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (x : nat -> A) : (term1585 A bad n x z) = (term691 A bad n z x).
Proof. exact (eq_refl (term1585 A bad n x z)). Qed.
Lemma lem379328 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem379329 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (x : nat -> A) : (term1609 A bad n x z) = (term1078 A bad n z x).
Proof. exact (MK_COMB (@lem379328) (@lem379327 A bad n z x)). Qed.
Lemma lem379330 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (bad : type976 A) (n : nat) (z : nat -> A) (x : nat -> A) : (term1610 A lt2 y bad n x z) = (term1611 A lt2 y bad n z x).
Proof. exact (MK_COMB (@lem379326 A lt2 z n y) (@lem379329 A bad n z x)). Qed.
Lemma lem379331 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1612 A lt2 y bad n x) = (term1613 A lt2 y bad n x).
Proof. exact (fun_ext (fun z : nat -> A => @lem379330 A lt2 y bad n z x)). Qed.
Lemma lem379332 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem379333 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1614 A lt2 y bad n x) = (term1615 A lt2 y bad n x).
Proof. exact (MK_COMB (@lem379332 A) (@lem379331 A lt2 y bad n x)). Qed.
Lemma lem379334 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1616 A lt2 y bad n x) = (term1617 A lt2 y bad n x).
Proof. exact (MK_COMB (@lem379319 A bad n y x) (@lem379333 A lt2 y bad n x)). Qed.
Lemma lem379335 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1618 A lt2 bad n x) = (term1619 A lt2 bad n x).
Proof. exact (fun_ext (fun y : nat -> A => @lem379334 A lt2 y bad n x)). Qed.
Lemma lem379336 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem379337 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1572 A lt2 bad n x) = (term1620 A lt2 bad n x).
Proof. exact (MK_COMB (@lem379336 A) (@lem379335 A lt2 bad n x)). Qed.
Lemma lem379338 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : ((term1571 A bad x lt2 n) = (term1572 A lt2 bad n x)) = ((term636 A bad x lt2 n) = (term1620 A lt2 bad n x)).
Proof. exact (MK_COMB (@lem379314 A bad x lt2 n) (@lem379337 A lt2 bad n x)). Qed.
Lemma lem379339 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term636 A bad x lt2 n) = (term1620 A lt2 bad n x).
Proof. exact (EQ_MP (@lem379338 A lt2 bad n x) (@lem379278 A lt2 bad n x)). Qed.
Lemma lem379363 {A B : Type'} (f : A -> B) (y : A) : (term1621 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem379364 {A : Type'} (f : type975 A) (y : nat -> A) : (term1622 A f y) = (f y).
Proof. exact (@lem379363 (nat -> A) A f y). Qed.
Lemma lem379365 {A : Type'} (n : nat) (y : nat -> A) : (term1623 A n y) = (term1578 A n y).
Proof. exact (@lem379364 A (term15 A n) y). Qed.
Lemma lem379366 {A : Type'} (y : nat -> A) (n : nat) : (term1578 A n y) = (y n).
Proof. exact (eq_refl (term1578 A n y)). Qed.
Lemma lem379367 {A : Type'} (n : nat) : (term1624 A n) = (term15 A n).
Proof. exact (fun_ext (fun y : nat -> A => @lem379366 A y n)). Qed.
Lemma lem379368 {A : Type'} (y : nat -> A) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem379369 {A : Type'} (n : nat) (y : nat -> A) : (term1623 A n y) = (term1578 A n y).
Proof. exact (MK_COMB (@lem379367 A n) (@lem379368 A y)). Qed.
Lemma lem379370 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem379371 {A : Type'} (n : nat) (y : nat -> A) : (term1625 A n y) = (term1579 A n y).
Proof. exact (MK_COMB (@lem379370 A) (@lem379369 A n y)). Qed.
Lemma lem379372 {A : Type'} (y : nat -> A) (n : nat) : (term1578 A n y) = (y n).
Proof. exact (eq_refl (term1578 A n y)). Qed.
Lemma lem379373 {A : Type'} (y : nat -> A) (n : nat) : ((term1623 A n y) = (term1578 A n y)) = ((term1578 A n y) = (y n)).
Proof. exact (MK_COMB (@lem379371 A n y) (@lem379372 A y n)). Qed.
Lemma lem379374 {A : Type'} (y : nat -> A) (n : nat) : (term1578 A n y) = (y n).
Proof. exact (EQ_MP (@lem379373 A y n) (@lem379365 A n y)). Qed.
Lemma lem379375 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (n : nat) : (term1275 A lt2 z n) = (term1275 A lt2 z n).
Proof. exact (eq_refl (term1275 A lt2 z n)). Qed.
Lemma lem379376 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1606 A lt2 z n y) = (term1223 A lt2 z y n).
Proof. exact (MK_COMB (@lem379375 A lt2 z n) (@lem379374 A y n)). Qed.
Lemma lem379377 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem379378 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (y : nat -> A) (n : nat) : (term1608 A lt2 z n y) = (term1626 A lt2 z y n).
Proof. exact (MK_COMB (@lem379377) (@lem379376 A lt2 z y n)). Qed.
Lemma lem379389 {A : Type'} (bad : type976 A) (n : nat) (z : nat -> A) (x : nat -> A) : (term1078 A bad n z x) = (term1078 A bad n z x).
Proof. exact (eq_refl (term1078 A bad n z x)). Qed.
Lemma lem379390 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (bad : type976 A) (n : nat) (z : nat -> A) (x : nat -> A) : (term1611 A lt2 y bad n z x) = (term1627 A lt2 y bad n z x).
Proof. exact (MK_COMB (@lem379378 A lt2 z y n) (@lem379389 A bad n z x)). Qed.
Lemma lem379393 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1613 A lt2 y bad n x) = (term1628 A lt2 y bad n x).
Proof. exact (fun_ext (fun z : nat -> A => @lem379390 A lt2 y bad n z x)). Qed.
Lemma lem379394 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem379395 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1615 A lt2 y bad n x) = (term1629 A lt2 y bad n x).
Proof. exact (MK_COMB (@lem379394 A) (@lem379393 A lt2 y bad n x)). Qed.
Lemma lem379400 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term1224 A bad n y x) = (term1224 A bad n y x).
Proof. exact (eq_refl (term1224 A bad n y x)). Qed.
Lemma lem379401 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1617 A lt2 y bad n x) = (term1630 A lt2 y bad n x).
Proof. exact (MK_COMB (@lem379400 A bad n y x) (@lem379395 A lt2 y bad n x)). Qed.
Lemma lem379404 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1619 A lt2 bad n x) = (term1631 A lt2 bad n x).
Proof. exact (fun_ext (fun y : nat -> A => @lem379401 A lt2 y bad n x)). Qed.
Lemma lem379405 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem379406 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1620 A lt2 bad n x) = (term1632 A lt2 bad n x).
Proof. exact (MK_COMB (@lem379405 A) (@lem379404 A lt2 bad n x)). Qed.
Lemma lem379411 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term636 A bad x lt2 n) = (term1632 A lt2 bad n x).
Proof. exact (TRANS (@lem379339 A lt2 bad n x) (@lem379406 A lt2 bad n x)). Qed.
Lemma lem379412 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) : (term1632 A lt2 bad n x) = (term636 A bad x lt2 n).
Proof. exact (SYM (@lem379411 A lt2 bad n x)). Qed.
Lemma lem379423 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : @WF A lt2.
Proof. exact (proj1 (@lem371920 A lt2 bad h1)). Qed.
Lemma lem379424 {A : Type'} (lt2 : type1402 A) : (@WF A lt2) = ((@WF A lt2) = True).
Proof. exact (@lem7 (@WF A lt2)). Qed.
Lemma lem379436 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : (@WF A lt2) = True.
Proof. exact (EQ_MP (@lem379424 A lt2) (@lem379423 A lt2 bad h1)). Qed.
Lemma lem379437 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem379438 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : (term1633 A lt2) = (imp True).
Proof. exact (MK_COMB (@lem379437) (@lem379436 A lt2 bad h1)). Qed.
Lemma lem379440 {A B : Type'} (f : A -> B) (y : A) : (term1621 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem379441 {A : Type'} (f : type975 A) (y : nat -> A) : (term1622 A f y) = (f y).
Proof. exact (@lem379440 (nat -> A) A f y). Qed.
Lemma lem379442 {A : Type'} (n : nat) (x : nat -> A) : (term1623 A n x) = (term1578 A n x).
Proof. exact (@lem379441 A (term15 A n) x). Qed.
Lemma lem379443 {A : Type'} (x : nat -> A) (n : nat) : (term1578 A n x) = (x n).
Proof. exact (eq_refl (term1578 A n x)). Qed.
Lemma lem379444 {A : Type'} (n : nat) : (term1624 A n) = (term15 A n).
Proof. exact (fun_ext (fun x : nat -> A => @lem379443 A x n)). Qed.
Lemma lem379445 {A : Type'} (x : nat -> A) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem379446 {A : Type'} (n : nat) (x : nat -> A) : (term1623 A n x) = (term1578 A n x).
Proof. exact (MK_COMB (@lem379444 A n) (@lem379445 A x)). Qed.
Lemma lem379447 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem379448 {A : Type'} (n : nat) (x : nat -> A) : (term1625 A n x) = (term1579 A n x).
Proof. exact (MK_COMB (@lem379447 A) (@lem379446 A n x)). Qed.
Lemma lem379449 {A : Type'} (x : nat -> A) (n : nat) : (term1578 A n x) = (x n).
Proof. exact (eq_refl (term1578 A n x)). Qed.
Lemma lem379450 {A : Type'} (x : nat -> A) (n : nat) : ((term1623 A n x) = (term1578 A n x)) = ((term1578 A n x) = (x n)).
Proof. exact (MK_COMB (@lem379448 A n x) (@lem379449 A x n)). Qed.
Lemma lem379451 {A : Type'} (x : nat -> A) (n : nat) : (term1578 A n x) = (x n).
Proof. exact (EQ_MP (@lem379450 A x n) (@lem379442 A n x)). Qed.
Lemma lem379452 {A : Type'} (lt2 : type1402 A) : lt2 = lt2.
Proof. exact (eq_refl lt2). Qed.
Lemma lem379453 {A : Type'} (lt2 : type1402 A) (x : nat -> A) (n : nat) : (term1634 A lt2 n x) = (term1275 A lt2 x n).
Proof. exact (MK_COMB (@lem379452 A lt2) (@lem379451 A x n)). Qed.
Lemma lem379455 {A B : Type'} (f : A -> B) (y : A) : (term1621 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem379456 {A : Type'} (f : type975 A) (y : nat -> A) : (term1622 A f y) = (f y).
Proof. exact (@lem379455 (nat -> A) A f y). Qed.
Lemma lem379457 {A : Type'} (n : nat) (x' : nat -> A) : (term1623 A n x') = (term1578 A n x').
Proof. exact (@lem379456 A (term15 A n) x'). Qed.
Lemma lem379458 {A : Type'} (x : nat -> A) (n : nat) : (term1578 A n x) = (x n).
Proof. exact (eq_refl (term1578 A n x)). Qed.
Lemma lem379459 {A : Type'} (n : nat) : (term1624 A n) = (term15 A n).
Proof. exact (fun_ext (fun x : nat -> A => @lem379458 A x n)). Qed.
Lemma lem379460 {A : Type'} (x' : nat -> A) : x' = x'.
Proof. exact (eq_refl x'). Qed.
Lemma lem379461 {A : Type'} (n : nat) (x' : nat -> A) : (term1623 A n x') = (term1578 A n x').
Proof. exact (MK_COMB (@lem379459 A n) (@lem379460 A x')). Qed.
Lemma lem379462 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem379463 {A : Type'} (n : nat) (x' : nat -> A) : (term1625 A n x') = (term1579 A n x').
Proof. exact (MK_COMB (@lem379462 A) (@lem379461 A n x')). Qed.
Lemma lem379464 {A : Type'} (x' : nat -> A) (n : nat) : (term1578 A n x') = (x' n).
Proof. exact (eq_refl (term1578 A n x')). Qed.
Lemma lem379465 {A : Type'} (x' : nat -> A) (n : nat) : ((term1623 A n x') = (term1578 A n x')) = ((term1578 A n x') = (x' n)).
Proof. exact (MK_COMB (@lem379463 A n x') (@lem379464 A x' n)). Qed.
Lemma lem379466 {A : Type'} (x' : nat -> A) (n : nat) : (term1578 A n x') = (x' n).
Proof. exact (EQ_MP (@lem379465 A x' n) (@lem379457 A n x')). Qed.
Lemma lem379467 {A : Type'} (lt2 : type1402 A) (x : nat -> A) (x' : nat -> A) (n : nat) : (term1635 A lt2 x n x') = (term1223 A lt2 x x' n).
Proof. exact (MK_COMB (@lem379453 A lt2 x n) (@lem379466 A x' n)). Qed.
Lemma lem379468 {A : Type'} (lt2 : type1402 A) (x : nat -> A) (n : nat) : (term1636 A lt2 x n) = (term1637 A lt2 x n).
Proof. exact (fun_ext (fun x' : nat -> A => @lem379467 A lt2 x x' n)). Qed.
Lemma lem379469 {A : Type'} (lt2 : type1402 A) (n : nat) : (term1638 A lt2 n) = (term1639 A lt2 n).
Proof. exact (fun_ext (fun x : nat -> A => @lem379468 A lt2 x n)). Qed.
Lemma lem379470 {A : Type'} : (@WF (nat -> A)) = (@WF (nat -> A)).
Proof. exact (eq_refl (@WF (nat -> A))). Qed.
Lemma lem379471 {A : Type'} (lt2 : type1402 A) (n : nat) : (term1640 A lt2 n) = (term1641 A lt2 n).
Proof. exact (MK_COMB (@lem379470 A) (@lem379469 A lt2 n)). Qed.
Lemma lem379472 {A : Type'} (n : nat) (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : (term16 A lt2 n) = (term1642 A lt2 n).
Proof. exact (MK_COMB (@lem379438 A lt2 bad h1) (@lem379471 A lt2 n)). Qed.
Lemma lem379474 (t : Prop) : (True -> t) = t.
Proof. exact (proj1 (@lem1820 t)). Qed.
Lemma lem379475 {A : Type'} (lt2 : type1402 A) (n : nat) : (term1642 A lt2 n) = (term1641 A lt2 n).
Proof. exact (@lem379474 (term1641 A lt2 n)). Qed.
Lemma lem379476 {A : Type'} (n : nat) (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : (term16 A lt2 n) = (term1641 A lt2 n).
Proof. exact (TRANS (@lem379472 A n lt2 bad h1) (@lem379475 A lt2 n)). Qed.
Lemma lem379477 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem379478 {A : Type'} (n : nat) (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : (term1643 A lt2 n) = (term1644 A lt2 n).
Proof. exact (MK_COMB (@lem379477) (@lem379476 A n lt2 bad h1)). Qed.
Lemma lem379511 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1632 A lt2 bad n x) = (term1632 A lt2 bad n x).
Proof. exact (eq_refl (term1632 A lt2 bad n x)). Qed.
Lemma lem379512 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : (term1645 A lt2 bad n x) = (term1646 A lt2 bad n x).
Proof. exact (MK_COMB (@lem379478 A n lt2 bad h1) (@lem379511 A lt2 bad n x)). Qed.
Lemma lem379515 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : (term1646 A lt2 bad n x) = (term1645 A lt2 bad n x).
Proof. exact (SYM (@lem379512 A n x lt2 bad h1)). Qed.
Lemma lem379519 {A : Type'} (lt2 : type1402 A) : (@WF A lt2) = (term10 A lt2).
Proof. exact (EQ_MP (@lem369148 A lt2) (@lem369147 A lt2)). Qed.
Lemma lem379520 {A : Type'} (lt2 : type966 A) : (@WF (nat -> A) lt2) = (term1647 A lt2).
Proof. exact (@lem379519 (nat -> A) lt2). Qed.
Lemma lem379521 {A : Type'} (lt2 : type1402 A) (n : nat) : (term1641 A lt2 n) = (term1648 A lt2 n).
Proof. exact (@lem379520 A (term1639 A lt2 n)). Qed.
Lemma lem379545 {A B : Type'} (f : A -> B) (y : A) : (term1621 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem379546 {A : Type'} (f : type966 A) (y : nat -> A) : (term1649 A f y) = (f y).
Proof. exact (@lem379545 (nat -> A) (type976 A) f y). Qed.
Lemma lem379547 {A : Type'} (lt2 : type1402 A) (n : nat) (y : nat -> A) : (term1650 A lt2 n y) = (term1651 A lt2 n y).
Proof. exact (@lem379546 A (term1639 A lt2 n) y). Qed.
Lemma lem379548 {A : Type'} (lt2 : type1402 A) (x : nat -> A) (n : nat) : (term1651 A lt2 n x) = (term1637 A lt2 x n).
Proof. exact (eq_refl (term1651 A lt2 n x)). Qed.
Lemma lem379549 {A : Type'} (lt2 : type1402 A) (n : nat) : (term1652 A lt2 n) = (term1639 A lt2 n).
Proof. exact (fun_ext (fun x : nat -> A => @lem379548 A lt2 x n)). Qed.
Lemma lem379550 {A : Type'} (y : nat -> A) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem379551 {A : Type'} (lt2 : type1402 A) (n : nat) (y : nat -> A) : (term1650 A lt2 n y) = (term1651 A lt2 n y).
Proof. exact (MK_COMB (@lem379549 A lt2 n) (@lem379550 A y)). Qed.
Lemma lem379552 {A : Type'} : (@eq ((nat -> A) -> Prop)) = (@eq ((nat -> A) -> Prop)).
Proof. exact (eq_refl (@eq ((nat -> A) -> Prop))). Qed.
Lemma lem379553 {A : Type'} (lt2 : type1402 A) (n : nat) (y : nat -> A) : (term1653 A lt2 n y) = (term1654 A lt2 n y).
Proof. exact (MK_COMB (@lem379552 A) (@lem379551 A lt2 n y)). Qed.
Lemma lem379554 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1651 A lt2 n y) = (term1637 A lt2 y n).
Proof. exact (eq_refl (term1651 A lt2 n y)). Qed.
Lemma lem379555 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (n : nat) : ((term1650 A lt2 n y) = (term1651 A lt2 n y)) = ((term1651 A lt2 n y) = (term1637 A lt2 y n)).
Proof. exact (MK_COMB (@lem379553 A lt2 n y) (@lem379554 A lt2 y n)). Qed.
Lemma lem379556 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1651 A lt2 n y) = (term1637 A lt2 y n).
Proof. exact (EQ_MP (@lem379555 A lt2 y n) (@lem379547 A lt2 n y)). Qed.
Lemma lem379557 {A : Type'} (x : nat -> A) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem379558 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (n : nat) (x : nat -> A) : (term1655 A lt2 n y x) = (term1656 A lt2 y n x).
Proof. exact (MK_COMB (@lem379556 A lt2 y n) (@lem379557 A x)). Qed.
Lemma lem379560 {A B : Type'} (f : A -> B) (y : A) : (term1621 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem379561 {A : Type'} (f : type976 A) (y : nat -> A) : (term1657 A f y) = (f y).
Proof. exact (@lem379560 (nat -> A) Prop f y). Qed.
Lemma lem379562 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (n : nat) (x : nat -> A) : (term1658 A lt2 y n x) = (term1656 A lt2 y n x).
Proof. exact (@lem379561 A (term1637 A lt2 y n) x). Qed.
Lemma lem379563 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (x' : nat -> A) (n : nat) : (term1656 A lt2 y n x') = (term1223 A lt2 y x' n).
Proof. exact (eq_refl (term1656 A lt2 y n x')). Qed.
Lemma lem379564 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (n : nat) : (term1659 A lt2 y n) = (term1637 A lt2 y n).
Proof. exact (fun_ext (fun x' : nat -> A => @lem379563 A lt2 y x' n)). Qed.
Lemma lem379565 {A : Type'} (x : nat -> A) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem379566 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (n : nat) (x : nat -> A) : (term1658 A lt2 y n x) = (term1656 A lt2 y n x).
Proof. exact (MK_COMB (@lem379564 A lt2 y n) (@lem379565 A x)). Qed.
Lemma lem379567 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem379568 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (n : nat) (x : nat -> A) : (term1660 A lt2 y n x) = (term1661 A lt2 y n x).
Proof. exact (MK_COMB (@lem379567) (@lem379566 A lt2 y n x)). Qed.
Lemma lem379569 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (x : nat -> A) (n : nat) : (term1656 A lt2 y n x) = (term1223 A lt2 y x n).
Proof. exact (eq_refl (term1656 A lt2 y n x)). Qed.
Lemma lem379570 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (x : nat -> A) (n : nat) : ((term1658 A lt2 y n x) = (term1656 A lt2 y n x)) = ((term1656 A lt2 y n x) = (term1223 A lt2 y x n)).
Proof. exact (MK_COMB (@lem379568 A lt2 y n x) (@lem379569 A lt2 y x n)). Qed.
Lemma lem379571 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (x : nat -> A) (n : nat) : (term1656 A lt2 y n x) = (term1223 A lt2 y x n).
Proof. exact (EQ_MP (@lem379570 A lt2 y x n) (@lem379562 A lt2 y n x)). Qed.
Lemma lem379572 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (x : nat -> A) (n : nat) : (term1655 A lt2 n y x) = (term1223 A lt2 y x n).
Proof. exact (TRANS (@lem379558 A lt2 y n x) (@lem379571 A lt2 y x n)). Qed.
Lemma lem379573 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem379574 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (x : nat -> A) (n : nat) : (term1662 A lt2 n y x) = (term1626 A lt2 y x n).
Proof. exact (MK_COMB (@lem379573) (@lem379572 A lt2 y x n)). Qed.
Lemma lem379575 {A : Type'} (P : type976 A) (y : nat -> A) : (term807 A P y) = (term807 A P y).
Proof. exact (eq_refl (term807 A P y)). Qed.
Lemma lem379576 {A : Type'} (lt2 : type1402 A) (x : nat -> A) (n : nat) (P : type976 A) (y : nat -> A) : (term1663 A lt2 n x P y) = (term1664 A lt2 x n P y).
Proof. exact (MK_COMB (@lem379574 A lt2 y x n) (@lem379575 A P y)). Qed.
Lemma lem379579 {A : Type'} (lt2 : type1402 A) (x : nat -> A) (n : nat) (P : type976 A) : (term1665 A lt2 n x P) = (term1666 A lt2 x n P).
Proof. exact (fun_ext (fun y : nat -> A => @lem379576 A lt2 x n P y)). Qed.
Lemma lem379580 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem379581 {A : Type'} (lt2 : type1402 A) (x : nat -> A) (n : nat) (P : type976 A) : (term1667 A lt2 n x P) = (term1668 A lt2 x n P).
Proof. exact (MK_COMB (@lem379580 A) (@lem379579 A lt2 x n P)). Qed.
Lemma lem379586 {A : Type'} (P : type976 A) (x : nat -> A) : (term685 A P x) = (term685 A P x).
Proof. exact (eq_refl (term685 A P x)). Qed.
Lemma lem379587 {A : Type'} (lt2 : type1402 A) (x : nat -> A) (n : nat) (P : type976 A) : (term1669 A lt2 n x P) = (term1670 A lt2 x n P).
Proof. exact (MK_COMB (@lem379586 A P x) (@lem379581 A lt2 x n P)). Qed.
Lemma lem379590 {A : Type'} (lt2 : type1402 A) (n : nat) (P : type976 A) : (term1671 A lt2 n P) = (term1672 A lt2 n P).
Proof. exact (fun_ext (fun x : nat -> A => @lem379587 A lt2 x n P)). Qed.
Lemma lem379591 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem379592 {A : Type'} (lt2 : type1402 A) (n : nat) (P : type976 A) : (term1673 A lt2 n P) = (term1674 A lt2 n P).
Proof. exact (MK_COMB (@lem379591 A) (@lem379590 A lt2 n P)). Qed.
Lemma lem379597 {A : Type'} (P : type976 A) : (term1675 A P) = (term1675 A P).
Proof. exact (eq_refl (term1675 A P)). Qed.
Lemma lem379598 {A : Type'} (lt2 : type1402 A) (n : nat) (P : type976 A) : (term1676 A lt2 n P) = (term1677 A lt2 n P).
Proof. exact (MK_COMB (@lem379597 A P) (@lem379592 A lt2 n P)). Qed.
Lemma lem379601 {A : Type'} (lt2 : type1402 A) (n : nat) : (term1678 A lt2 n) = (term1679 A lt2 n).
Proof. exact (fun_ext (fun P : type976 A => @lem379598 A lt2 n P)). Qed.
Lemma lem379602 {A : Type'} : (@all ((nat -> A) -> Prop)) = (@all ((nat -> A) -> Prop)).
Proof. exact (eq_refl (@all ((nat -> A) -> Prop))). Qed.
Lemma lem379603 {A : Type'} (lt2 : type1402 A) (n : nat) : (term1648 A lt2 n) = (term1680 A lt2 n).
Proof. exact (MK_COMB (@lem379602 A) (@lem379601 A lt2 n)). Qed.
Lemma lem379608 {A : Type'} (lt2 : type1402 A) (n : nat) : (term1641 A lt2 n) = (term1680 A lt2 n).
Proof. exact (TRANS (@lem379521 A lt2 n) (@lem379603 A lt2 n)). Qed.
Lemma lem379609 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem379610 {A : Type'} (lt2 : type1402 A) (n : nat) : (term1644 A lt2 n) = (term1681 A lt2 n).
Proof. exact (MK_COMB (@lem379609) (@lem379608 A lt2 n)). Qed.
Lemma lem379643 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1632 A lt2 bad n x) = (term1632 A lt2 bad n x).
Proof. exact (eq_refl (term1632 A lt2 bad n x)). Qed.
Lemma lem379644 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1646 A lt2 bad n x) = (term1682 A lt2 bad n x).
Proof. exact (MK_COMB (@lem379610 A lt2 n) (@lem379643 A lt2 bad n x)). Qed.
Lemma lem379647 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1682 A lt2 bad n x) = (term1646 A lt2 bad n x).
Proof. exact (SYM (@lem379644 A lt2 bad n x)). Qed.
Lemma lem379648 {A : Type'} (lt2 : type1402 A) (n : nat) (h1 : term1680 A lt2 n) : term1680 A lt2 n.
Proof. exact (h1). Qed.
Lemma lem379649 {A : Type'} (lt2 : type1402 A) (n : nat) (h1 : term1680 A lt2 n) : term1680 A lt2 n.
Proof. exact (h1). Qed.
Lemma lem379650 {A : Type'} (P : type976 A) (lt2 : type1402 A) (n : nat) (h1 : term1680 A lt2 n) : term1683 A lt2 n P.
Proof. exact (@lem379649 A lt2 n h1 P). Qed.
Lemma lem379651 {A : Type'} (lt2 : type1402 A) (n : nat) (P : type976 A) : (term1683 A lt2 n P) = (term1677 A lt2 n P).
Proof. exact (eq_refl (term1683 A lt2 n P)). Qed.
Lemma lem379652 {A : Type'} (P : type976 A) (lt2 : type1402 A) (n : nat) (h1 : term1680 A lt2 n) : term1677 A lt2 n P.
Proof. exact (EQ_MP (@lem379651 A lt2 n P) (@lem379650 A P lt2 n h1)). Qed.
Lemma lem379653 {A : Type'} (P : type976 A) (h1 : term806 A P) : term806 A P.
Proof. exact (h1). Qed.
Lemma lem379654 {A : Type'} (lt2 : type1402 A) (n : nat) (P : type976 A) (h1 : term1680 A lt2 n) (h2 : term806 A P) : term1674 A lt2 n P.
Proof. exact (@lem379652 A P lt2 n h1 (@lem379653 A P h2)). Qed.
Lemma lem379655 {A : Type'} (lt2 : type1402 A) (n : nat) (P : type976 A) (h1 : term806 A P) : term1684 A lt2 n P.
Proof. exact (fun h0 : term1680 A lt2 n => @lem379654 A lt2 n P h0 h1). Qed.
Lemma lem379656 {A : Type'} (lt2 : type1402 A) (n : nat) (h1 : term1680 A lt2 n) : term1680 A lt2 n.
Proof. exact (h1). Qed.
Lemma lem379657 {A : Type'} (lt2 : type1402 A) (n : nat) (P : type976 A) (h1 : term1680 A lt2 n) (h2 : term806 A P) : term1674 A lt2 n P.
Proof. exact (@lem379655 A lt2 n P h2 (@lem379656 A lt2 n h1)). Qed.
Lemma lem379658 {A : Type'} (P : type976 A) (lt2 : type1402 A) (n : nat) (h1 : term1680 A lt2 n) : term1677 A lt2 n P.
Proof. exact (fun h0 : term806 A P => @lem379657 A lt2 n P h1 h0). Qed.
Lemma lem379659 {A : Type'} (lt2 : type1402 A) (n : nat) (h1 : term1680 A lt2 n) : term1680 A lt2 n.
Proof. exact (fun P : type976 A => @lem379658 A P lt2 n h1). Qed.
Lemma lem379660 {A : Type'} (lt2 : type1402 A) (n : nat) : term1685 A lt2 n.
Proof. exact (fun h0 : term1680 A lt2 n => @lem379659 A lt2 n h0). Qed.
Lemma lem379661 {A : Type'} (lt2 : type1402 A) (n : nat) (h1 : term1680 A lt2 n) : term1680 A lt2 n.
Proof. exact (@lem379660 A lt2 n (@lem379648 A lt2 n h1)). Qed.
Lemma lem379662 {A : Type'} (P : type976 A) (lt2 : type1402 A) (n : nat) (h1 : term1680 A lt2 n) : term1683 A lt2 n P.
Proof. exact (@lem379661 A lt2 n h1 P). Qed.
Lemma lem379663 {A : Type'} (lt2 : type1402 A) (n : nat) (P : type976 A) : (term1683 A lt2 n P) = (term1677 A lt2 n P).
Proof. exact (eq_refl (term1683 A lt2 n P)). Qed.
Lemma lem379666 {A : Type'} (P : type976 A) (lt2 : type1402 A) (n : nat) (h1 : term1680 A lt2 n) : term1677 A lt2 n P.
Proof. exact (EQ_MP (@lem379663 A lt2 n P) (@lem379662 A P lt2 n h1)). Qed.
Lemma lem379667 {A : Type'} (P : type976 A) (lt2 : type1402 A) (n : nat) (h1 : term1680 A lt2 n) : term1677 A lt2 n P.
Proof. exact (@lem379666 A P lt2 n h1). Qed.
Lemma lem379668 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) (h1 : term1680 A lt2 n) : term1686 A lt2 bad n x.
Proof. exact (@lem379667 A (term1575 A bad n x) lt2 n h1). Qed.
Lemma lem379669 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term1585 A bad n x y) = (term691 A bad n y x).
Proof. exact (eq_refl (term1585 A bad n x y)). Qed.
Lemma lem379670 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term1687 A bad n x) = (term1575 A bad n x).
Proof. exact (fun_ext (fun y : nat -> A => @lem379669 A bad n y x)). Qed.
Lemma lem379671 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem379672 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term1688 A bad n x) = (term1689 A bad n x).
Proof. exact (MK_COMB (@lem379671 A) (@lem379670 A bad n x)). Qed.
Lemma lem379673 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem379674 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term1690 A bad n x) = (term1691 A bad n x).
Proof. exact (MK_COMB (@lem379673) (@lem379672 A bad n x)). Qed.
Lemma lem379675 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term1585 A bad n x y) = (term691 A bad n y x).
Proof. exact (eq_refl (term1585 A bad n x y)). Qed.
Lemma lem379676 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem379677 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term1692 A bad n x y) = (term1224 A bad n y x).
Proof. exact (MK_COMB (@lem379676) (@lem379675 A bad n y x)). Qed.
Lemma lem379678 {A : Type'} (bad : type976 A) (n : nat) (y' : nat -> A) (x : nat -> A) : (term1585 A bad n x y') = (term691 A bad n y' x).
Proof. exact (eq_refl (term1585 A bad n x y')). Qed.
Lemma lem379679 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem379680 {A : Type'} (bad : type976 A) (n : nat) (y' : nat -> A) (x : nat -> A) : (term1609 A bad n x y') = (term1078 A bad n y' x).
Proof. exact (MK_COMB (@lem379679) (@lem379678 A bad n y' x)). Qed.
Lemma lem379681 {A : Type'} (lt2 : type1402 A) (y' : nat -> A) (y : nat -> A) (n : nat) : (term1626 A lt2 y' y n) = (term1626 A lt2 y' y n).
Proof. exact (eq_refl (term1626 A lt2 y' y n)). Qed.
Lemma lem379682 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (bad : type976 A) (n : nat) (y' : nat -> A) (x : nat -> A) : (term1693 A lt2 y bad n x y') = (term1627 A lt2 y bad n y' x).
Proof. exact (MK_COMB (@lem379681 A lt2 y' y n) (@lem379680 A bad n y' x)). Qed.
Lemma lem379683 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1694 A lt2 y bad n x) = (term1628 A lt2 y bad n x).
Proof. exact (fun_ext (fun y' : nat -> A => @lem379682 A lt2 y bad n y' x)). Qed.
Lemma lem379684 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem379685 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1695 A lt2 y bad n x) = (term1629 A lt2 y bad n x).
Proof. exact (MK_COMB (@lem379684 A) (@lem379683 A lt2 y bad n x)). Qed.
Lemma lem379686 {A : Type'} (lt2 : type1402 A) (y : nat -> A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1696 A lt2 y bad n x) = (term1630 A lt2 y bad n x).
Proof. exact (MK_COMB (@lem379677 A bad n y x) (@lem379685 A lt2 y bad n x)). Qed.
Lemma lem379687 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1697 A lt2 bad n x) = (term1631 A lt2 bad n x).
Proof. exact (fun_ext (fun y : nat -> A => @lem379686 A lt2 y bad n x)). Qed.
Lemma lem379688 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem379689 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1698 A lt2 bad n x) = (term1632 A lt2 bad n x).
Proof. exact (MK_COMB (@lem379688 A) (@lem379687 A lt2 bad n x)). Qed.
Lemma lem379690 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1686 A lt2 bad n x) = (term1699 A lt2 bad n x).
Proof. exact (MK_COMB (@lem379674 A bad n x) (@lem379689 A lt2 bad n x)). Qed.
Lemma lem379691 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) (h1 : term1680 A lt2 n) : term1699 A lt2 bad n x.
Proof. exact (EQ_MP (@lem379690 A lt2 bad n x) (@lem379668 A bad x lt2 n h1)). Qed.
Lemma lem379694 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1700 A lt2 bad n x) = (term1700 A lt2 bad n x).
Proof. exact (eq_refl (term1700 A lt2 bad n x)). Qed.
Lemma lem379695 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1700 A lt2 bad n x) = (term1699 A lt2 bad n x).
Proof. exact (eq_refl (term1700 A lt2 bad n x)). Qed.
Lemma lem379696 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1701 A lt2 bad n x) = (term1701 A lt2 bad n x).
Proof. exact (eq_refl (term1701 A lt2 bad n x)). Qed.
Lemma lem379697 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : ((term1700 A lt2 bad n x) = (term1700 A lt2 bad n x)) = ((term1700 A lt2 bad n x) = (term1699 A lt2 bad n x)).
Proof. exact (MK_COMB (@lem379696 A lt2 bad n x) (@lem379695 A lt2 bad n x)). Qed.
Lemma lem379698 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1700 A lt2 bad n x) = (term1699 A lt2 bad n x).
Proof. exact (eq_refl (term1700 A lt2 bad n x)). Qed.
Lemma lem379699 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem379700 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1701 A lt2 bad n x) = (term1702 A lt2 bad n x).
Proof. exact (MK_COMB (@lem379699) (@lem379698 A lt2 bad n x)). Qed.
Lemma lem379701 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1699 A lt2 bad n x) = (term1699 A lt2 bad n x).
Proof. exact (eq_refl (term1699 A lt2 bad n x)). Qed.
Lemma lem379702 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : ((term1700 A lt2 bad n x) = (term1699 A lt2 bad n x)) = ((term1699 A lt2 bad n x) = (term1699 A lt2 bad n x)).
Proof. exact (MK_COMB (@lem379700 A lt2 bad n x) (@lem379701 A lt2 bad n x)). Qed.
Lemma lem379703 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : ((term1700 A lt2 bad n x) = (term1700 A lt2 bad n x)) = ((term1699 A lt2 bad n x) = (term1699 A lt2 bad n x)).
Proof. exact (TRANS (@lem379697 A lt2 bad n x) (@lem379702 A lt2 bad n x)). Qed.
Lemma lem379704 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1699 A lt2 bad n x) = (term1699 A lt2 bad n x).
Proof. exact (EQ_MP (@lem379703 A lt2 bad n x) (@lem379694 A lt2 bad n x)). Qed.
Lemma lem379705 {A : Type'} (bad : type976 A) (x : nat -> A) (lt2 : type1402 A) (n : nat) (h1 : term1680 A lt2 n) : term1699 A lt2 bad n x.
Proof. exact (EQ_MP (@lem379704 A lt2 bad n x) (@lem379691 A bad x lt2 n h1)). Qed.
Lemma lem379706 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term631 A n bad lt2 x) (h2 : term587 A lt2 bad) : term1703 A n x lt2 bad.
Proof. exact (conj (@lem379274 A n bad lt2 x h1) (@lem371920 A lt2 bad h2)). Qed.
Lemma lem379708 (P : nat -> Prop) : term1704 P.
Proof. exact (EQ_MP (@lem75623 P) (@lem75622 P)). Qed.
Lemma lem379709 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) : term1705 A lt2 bad x.
Proof. exact (@lem379708 (term1706 A lt2 bad x)). Qed.
Lemma lem379710 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) : (term1707 A lt2 bad x) = (term1708 A lt2 bad x).
Proof. exact (eq_refl (term1707 A lt2 bad x)). Qed.
Lemma lem379711 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem379712 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) : (term1709 A lt2 bad x) = (term1710 A lt2 bad x).
Proof. exact (MK_COMB (@lem379711) (@lem379710 A lt2 bad x)). Qed.
Lemma lem379713 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1711 A lt2 bad x n) = (term1712 A lt2 bad n x).
Proof. exact (eq_refl (term1711 A lt2 bad x n)). Qed.
Lemma lem379714 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem379715 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1713 A lt2 bad x n) = (term1714 A lt2 bad n x).
Proof. exact (MK_COMB (@lem379714) (@lem379713 A lt2 bad n x)). Qed.
Lemma lem379716 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1715 A lt2 bad x n) = (term1716 A lt2 bad n x).
Proof. exact (eq_refl (term1715 A lt2 bad x n)). Qed.
Lemma lem379717 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1717 A lt2 bad x n) = (term1718 A lt2 bad n x).
Proof. exact (MK_COMB (@lem379715 A lt2 bad n x) (@lem379716 A lt2 bad n x)). Qed.
Lemma lem379718 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) : (term1719 A lt2 bad x) = (term1720 A lt2 bad x).
Proof. exact (fun_ext (fun n : nat => @lem379717 A lt2 bad n x)). Qed.
Lemma lem379719 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem379720 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) : (term1721 A lt2 bad x) = (term1722 A lt2 bad x).
Proof. exact (MK_COMB (@lem379719) (@lem379718 A lt2 bad x)). Qed.
Lemma lem379721 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) : (term1723 A lt2 bad x) = (term1724 A lt2 bad x).
Proof. exact (MK_COMB (@lem379712 A lt2 bad x) (@lem379720 A lt2 bad x)). Qed.
Lemma lem379722 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem379723 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) : (term1725 A lt2 bad x) = (term1726 A lt2 bad x).
Proof. exact (MK_COMB (@lem379722) (@lem379721 A lt2 bad x)). Qed.
Lemma lem379724 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1711 A lt2 bad x n) = (term1712 A lt2 bad n x).
Proof. exact (eq_refl (term1711 A lt2 bad x n)). Qed.
Lemma lem379725 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) : (term1727 A lt2 bad x) = (term1706 A lt2 bad x).
Proof. exact (fun_ext (fun n : nat => @lem379724 A lt2 bad n x)). Qed.
Lemma lem379726 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem379727 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) : (term1728 A lt2 bad x) = (term1729 A lt2 bad x).
Proof. exact (MK_COMB (@lem379726) (@lem379725 A lt2 bad x)). Qed.
Lemma lem379728 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) : (term1705 A lt2 bad x) = (term1730 A lt2 bad x).
Proof. exact (MK_COMB (@lem379723 A lt2 bad x) (@lem379727 A lt2 bad x)). Qed.
Lemma lem379729 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) : term1730 A lt2 bad x.
Proof. exact (EQ_MP (@lem379728 A lt2 bad x) (@lem379709 A lt2 bad x)). Qed.
Lemma lem379734 (p : Prop) (q : Prop) (p' : Prop) (q' : Prop) : term659 p q p' q'.
Proof. exact (fun h0 : p = p' => @lem4211 q q' p p' h0). Qed.
Lemma lem379735 (p : Prop) (q : Prop) (p' : Prop) : term660 p q p'.
Proof. exact (fun q' : Prop => @lem379734 p q p' q'). Qed.
Lemma lem379736 (p : Prop) (q : Prop) : term661 p q.
Proof. exact (fun p' : Prop => @lem379735 p q p'). Qed.
Lemma lem379737 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) : term1731 A lt2 bad x.
Proof. exact (@lem379736 (term1732 A x lt2 bad) (term1733 A bad x)). Qed.
Lemma lem379738 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) (p' : Prop) : term1734 A lt2 bad x p'.
Proof. exact (@lem379737 A lt2 bad x p'). Qed.
Lemma lem379739 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) (p' : Prop) : (term1734 A lt2 bad x p') = (term1735 A lt2 bad x p').
Proof. exact (eq_refl (term1734 A lt2 bad x p')). Qed.
Lemma lem379740 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) (p' : Prop) : term1735 A lt2 bad x p'.
Proof. exact (EQ_MP (@lem379739 A lt2 bad x p') (@lem379738 A lt2 bad x p')). Qed.
Lemma lem379741 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) (p' : Prop) (q' : Prop) : term1736 A lt2 bad x p' q'.
Proof. exact (@lem379740 A lt2 bad x p' q'). Qed.
Lemma lem379742 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) (p' : Prop) (q' : Prop) : (term1736 A lt2 bad x p' q') = (term1737 A lt2 bad x p' q').
Proof. exact (eq_refl (term1736 A lt2 bad x p' q')). Qed.
Lemma lem379743 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) (p' : Prop) (q' : Prop) : term1737 A lt2 bad x p' q'.
Proof. exact (EQ_MP (@lem379742 A lt2 bad x p' q') (@lem379741 A lt2 bad x p' q')). Qed.
Lemma lem379753 (p : Prop) (q : Prop) (p' : Prop) (q' : Prop) : term659 p q p' q'.
Proof. exact (fun h0 : p = p' => @lem4211 q q' p p' h0). Qed.
Lemma lem379754 (p : Prop) (q : Prop) (p' : Prop) : term660 p q p'.
Proof. exact (fun q' : Prop => @lem379753 p q p' q'). Qed.
Lemma lem379755 (p : Prop) (q : Prop) : term661 p q.
Proof. exact (fun p' : Prop => @lem379754 p q p'). Qed.
Lemma lem379756 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : term1738 A bad lt2 x z.
Proof. exact (@lem379755 (term8 z) (term624 A bad lt2 x z)). Qed.
Lemma lem379757 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) (p' : Prop) : term1739 A bad lt2 x z p'.
Proof. exact (@lem379756 A bad lt2 x z p'). Qed.
Lemma lem379758 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) (p' : Prop) : (term1739 A bad lt2 x z p') = (term1740 A bad lt2 x z p').
Proof. exact (eq_refl (term1739 A bad lt2 x z p')). Qed.
Lemma lem379759 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) (p' : Prop) : term1740 A bad lt2 x z p'.
Proof. exact (EQ_MP (@lem379758 A bad lt2 x z p') (@lem379757 A bad lt2 x z p')). Qed.
Lemma lem379760 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) (p' : Prop) (q' : Prop) : term1741 A bad lt2 x z p' q'.
Proof. exact (@lem379759 A bad lt2 x z p' q'). Qed.
Lemma lem379761 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) (p' : Prop) (q' : Prop) : (term1741 A bad lt2 x z p' q') = (term1742 A bad lt2 x z p' q').
Proof. exact (eq_refl (term1741 A bad lt2 x z p' q')). Qed.
Lemma lem379762 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) (p' : Prop) (q' : Prop) : term1742 A bad lt2 x z p' q'.
Proof. exact (EQ_MP (@lem379761 A bad lt2 x z p' q') (@lem379760 A bad lt2 x z p' q')). Qed.
Lemma lem379764 (m : nat) : (term8 m) = False.
Proof. exact (EQ_MP (@lem369145 m) (@lem369144 m)). Qed.
Lemma lem379765 (z : nat) : (term8 z) = False.
Proof. exact (@lem379764 z). Qed.
Lemma lem379766 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) (q' : Prop) : term1743 A bad lt2 x z q'.
Proof. exact (@lem379762 A bad lt2 x z False q'). Qed.
Lemma lem379767 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) (q' : Prop) : term1744 A bad lt2 x z q'.
Proof. exact (@lem379766 A bad lt2 x z q' (@lem379765 z)). Qed.
Lemma lem379924 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term624 A bad lt2 x z) = (term624 A bad lt2 x z).
Proof. exact (eq_refl (term624 A bad lt2 x z)). Qed.
Lemma lem379925 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : term1745 A bad lt2 x z.
Proof. exact (fun h0 : False => @lem379924 A bad lt2 x z). Qed.
Lemma lem379926 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : term1746 A bad lt2 x z.
Proof. exact (@lem379767 A bad lt2 x z (term624 A bad lt2 x z)). Qed.
Lemma lem379927 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1747 A bad lt2 x z) = (term1748 A bad lt2 x z).
Proof. exact (@lem379926 A bad lt2 x z (@lem379925 A bad lt2 x z)). Qed.
Lemma lem379929 (t : Prop) : (False -> t) = True.
Proof. exact (proj1 (@lem1822 t)). Qed.
Lemma lem379930 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1748 A bad lt2 x z) = True.
Proof. exact (@lem379929 (term624 A bad lt2 x z)). Qed.
Lemma lem379931 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1747 A bad lt2 x z) = True.
Proof. exact (TRANS (@lem379927 A bad lt2 x z) (@lem379930 A bad lt2 x z)). Qed.
Lemma lem379932 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1749 A bad lt2 x) = term710.
Proof. exact (fun_ext (fun z : nat => @lem379931 A bad lt2 x z)). Qed.
Lemma lem379933 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem379934 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1750 A bad lt2 x) = term711.
Proof. exact (MK_COMB (@lem379933) (@lem379932 A bad lt2 x)). Qed.
Lemma lem379936 {A : Type'} (t : Prop) : (term709 A t) = t.
Proof. exact (EQ_MP (@lem1816 A t) (@lem1815 A t)). Qed.
Lemma lem379937 (t : Prop) : (term712 t) = t.
Proof. exact (@lem379936 nat t). Qed.
Lemma lem379938 : term711 = True.
Proof. exact (@lem379937 True). Qed.
Lemma lem379939 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1750 A bad lt2 x) = True.
Proof. exact (TRANS (@lem379934 A bad lt2 x) (@lem379938)). Qed.
Lemma lem379940 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem379941 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1751 A bad lt2 x) = (and True).
Proof. exact (MK_COMB (@lem379940) (@lem379939 A bad lt2 x)). Qed.
Lemma lem380179 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term587 A lt2 bad) = (term587 A lt2 bad).
Proof. exact (eq_refl (term587 A lt2 bad)). Qed.
Lemma lem380180 {A : Type'} (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1732 A x lt2 bad) = (term1752 A lt2 bad).
Proof. exact (MK_COMB (@lem379941 A bad lt2 x) (@lem380179 A lt2 bad)). Qed.
Lemma lem380182 (t : Prop) : (True /\ t) = t.
Proof. exact (proj1 (@lem1842 t)). Qed.
Lemma lem380183 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1752 A lt2 bad) = (term587 A lt2 bad).
Proof. exact (@lem380182 (term587 A lt2 bad)). Qed.
Lemma lem380421 {A : Type'} (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1732 A x lt2 bad) = (term587 A lt2 bad).
Proof. exact (TRANS (@lem380180 A x lt2 bad) (@lem380183 A lt2 bad)). Qed.
Lemma lem380422 {A : Type'} (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (q' : Prop) : term1753 A x lt2 bad q'.
Proof. exact (@lem379743 A lt2 bad x (term587 A lt2 bad) q'). Qed.
Lemma lem380423 {A : Type'} (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (q' : Prop) : term1754 A x lt2 bad q'.
Proof. exact (@lem380422 A x lt2 bad q' (@lem380421 A x lt2 bad)). Qed.
Lemma lem380424 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : term587 A lt2 bad.
Proof. exact (h1). Qed.
Lemma lem380425 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : term818 A bad.
Proof. exact (proj2 (@lem380424 A lt2 bad h1)). Qed.
Lemma lem380426 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : term806 A bad.
Proof. exact (proj2 (@lem380425 A lt2 bad h1)). Qed.
Lemma lem380427 {A : Type'} (bad : type976 A) : (term806 A bad) = ((term806 A bad) = True).
Proof. exact (@lem7 (term806 A bad)). Qed.
Lemma lem380458 (p : Prop) (q : Prop) (p' : Prop) (q' : Prop) : term659 p q p' q'.
Proof. exact (fun h0 : p = p' => @lem4211 q q' p p' h0). Qed.
Lemma lem380459 (p : Prop) (q : Prop) (p' : Prop) : term660 p q p'.
Proof. exact (fun q' : Prop => @lem380458 p q p' q'). Qed.
Lemma lem380460 (p : Prop) (q : Prop) : term661 p q.
Proof. exact (fun p' : Prop => @lem380459 p q p'). Qed.
Lemma lem380461 {A : Type'} (y : nat -> A) (x : nat -> A) (k : nat) : term1755 A y x k.
Proof. exact (@lem380460 (term8 k) ((y k) = (x k))). Qed.
Lemma lem380462 {A : Type'} (y : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) : term1756 A y x k p'.
Proof. exact (@lem380461 A y x k p'). Qed.
Lemma lem380463 {A : Type'} (y : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) : (term1756 A y x k p') = (term1757 A y x k p').
Proof. exact (eq_refl (term1756 A y x k p')). Qed.
Lemma lem380464 {A : Type'} (y : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) : term1757 A y x k p'.
Proof. exact (EQ_MP (@lem380463 A y x k p') (@lem380462 A y x k p')). Qed.
Lemma lem380465 {A : Type'} (y : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) (q' : Prop) : term1758 A y x k p' q'.
Proof. exact (@lem380464 A y x k p' q'). Qed.
Lemma lem380466 {A : Type'} (y : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) (q' : Prop) : (term1758 A y x k p' q') = (term1759 A y x k p' q').
Proof. exact (eq_refl (term1758 A y x k p' q')). Qed.
Lemma lem380467 {A : Type'} (y : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) (q' : Prop) : term1759 A y x k p' q'.
Proof. exact (EQ_MP (@lem380466 A y x k p' q') (@lem380465 A y x k p' q')). Qed.
Lemma lem380469 (m : nat) : (term8 m) = False.
Proof. exact (EQ_MP (@lem369145 m) (@lem369144 m)). Qed.
Lemma lem380470 (k : nat) : (term8 k) = False.
Proof. exact (@lem380469 k). Qed.
Lemma lem380471 {A : Type'} (y : nat -> A) (x : nat -> A) (k : nat) (q' : Prop) : term1760 A y x k q'.
Proof. exact (@lem380467 A y x k False q'). Qed.
Lemma lem380472 {A : Type'} (y : nat -> A) (x : nat -> A) (k : nat) (q' : Prop) : term1761 A y x k q'.
Proof. exact (@lem380471 A y x k q' (@lem380470 k)). Qed.
Lemma lem380478 {A : Type'} (y : nat -> A) (x : nat -> A) (k : nat) : ((y k) = (x k)) = ((y k) = (x k)).
Proof. exact (eq_refl ((y k) = (x k))). Qed.
Lemma lem380479 {A : Type'} (y : nat -> A) (x : nat -> A) (k : nat) : term1762 A y x k.
Proof. exact (fun h0 : False => @lem380478 A y x k). Qed.
Lemma lem380480 {A : Type'} (y : nat -> A) (x : nat -> A) (k : nat) : term1763 A y x k.
Proof. exact (@lem380472 A y x k ((y k) = (x k))). Qed.
Lemma lem380481 {A : Type'} (y : nat -> A) (x : nat -> A) (k : nat) : (term1764 A y x k) = (term1765 A y x k).
Proof. exact (@lem380480 A y x k (@lem380479 A y x k)). Qed.
Lemma lem380483 (t : Prop) : (False -> t) = True.
Proof. exact (proj1 (@lem1822 t)). Qed.
Lemma lem380484 {A : Type'} (y : nat -> A) (x : nat -> A) (k : nat) : (term1765 A y x k) = True.
Proof. exact (@lem380483 ((y k) = (x k))). Qed.
Lemma lem380485 {A : Type'} (y : nat -> A) (x : nat -> A) (k : nat) : (term1764 A y x k) = True.
Proof. exact (TRANS (@lem380481 A y x k) (@lem380484 A y x k)). Qed.
Lemma lem380486 {A : Type'} (y : nat -> A) (x : nat -> A) : (term1766 A y x) = term710.
Proof. exact (fun_ext (fun k : nat => @lem380485 A y x k)). Qed.
Lemma lem380487 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem380488 {A : Type'} (y : nat -> A) (x : nat -> A) : (term1767 A y x) = term711.
Proof. exact (MK_COMB (@lem380487) (@lem380486 A y x)). Qed.
Lemma lem380490 {A : Type'} (t : Prop) : (term709 A t) = t.
Proof. exact (EQ_MP (@lem1816 A t) (@lem1815 A t)). Qed.
Lemma lem380491 (t : Prop) : (term712 t) = t.
Proof. exact (@lem380490 nat t). Qed.
Lemma lem380492 : term711 = True.
Proof. exact (@lem380491 True). Qed.
Lemma lem380493 {A : Type'} (y : nat -> A) (x : nat -> A) : (term1767 A y x) = True.
Proof. exact (TRANS (@lem380488 A y x) (@lem380492)). Qed.
Lemma lem380494 {A : Type'} (bad : type976 A) (y : nat -> A) : (term685 A bad y) = (term685 A bad y).
Proof. exact (eq_refl (term685 A bad y)). Qed.
Lemma lem380495 {A : Type'} (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term1768 A bad y x) = (term1769 A bad y).
Proof. exact (MK_COMB (@lem380494 A bad y) (@lem380493 A y x)). Qed.
Lemma lem380497 (t : Prop) : (t /\ True) = t.
Proof. exact (proj1 (@lem1843 t)). Qed.
Lemma lem380498 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1769 A bad y) = (bad y).
Proof. exact (@lem380497 (bad y)). Qed.
Lemma lem380499 {A : Type'} (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term1768 A bad y x) = (bad y).
Proof. exact (TRANS (@lem380495 A x bad y) (@lem380498 A bad y)). Qed.
Lemma lem380500 {A : Type'} (x : nat -> A) (bad : type976 A) : (term1770 A bad x) = (term805 A bad).
Proof. exact (fun_ext (fun y : nat -> A => @lem380499 A x bad y)). Qed.
Lemma lem380501 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem380502 {A : Type'} (x : nat -> A) (bad : type976 A) : (term1733 A bad x) = (term806 A bad).
Proof. exact (MK_COMB (@lem380501 A) (@lem380500 A x bad)). Qed.
Lemma lem380504 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : (term806 A bad) = True.
Proof. exact (EQ_MP (@lem380427 A bad) (@lem380426 A lt2 bad h1)). Qed.
Lemma lem380505 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : (term806 A bad) = True.
Proof. exact (@lem380504 A lt2 bad h1). Qed.
Lemma lem380506 {A : Type'} (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : (term1733 A bad x) = True.
Proof. exact (TRANS (@lem380502 A x bad) (@lem380505 A lt2 bad h1)). Qed.
Lemma lem380507 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) : term1771 A lt2 bad x.
Proof. exact (fun h0 : term587 A lt2 bad => @lem380506 A x lt2 bad h0). Qed.
Lemma lem380508 {A : Type'} (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : term1772 A x lt2 bad.
Proof. exact (@lem380423 A x lt2 bad True). Qed.
Lemma lem380509 {A : Type'} (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1708 A lt2 bad x) = (term1773 A lt2 bad).
Proof. exact (@lem380508 A x lt2 bad (@lem380507 A lt2 bad x)). Qed.
Lemma lem380511 (t : Prop) : (t -> True) = True.
Proof. exact (proj1 (@lem1821 t)). Qed.
Lemma lem380512 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1773 A lt2 bad) = True.
Proof. exact (@lem380511 (term587 A lt2 bad)). Qed.
Lemma lem380513 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) : (term1708 A lt2 bad x) = True.
Proof. exact (TRANS (@lem380509 A x lt2 bad) (@lem380512 A lt2 bad)). Qed.
Lemma lem380514 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) : True = (term1708 A lt2 bad x).
Proof. exact (SYM (@lem380513 A lt2 bad x)). Qed.
Lemma lem380515 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) : term1708 A lt2 bad x.
Proof. exact (EQ_MP (@lem380514 A lt2 bad x) (@lem0)). Qed.
Lemma lem380519 (p : Prop) (q : Prop) (p' : Prop) (q' : Prop) : term659 p q p' q'.
Proof. exact (fun h0 : p = p' => @lem4211 q q' p p' h0). Qed.
Lemma lem380520 (p : Prop) (q : Prop) (p' : Prop) : term660 p q p'.
Proof. exact (fun q' : Prop => @lem380519 p q p' q'). Qed.
Lemma lem380521 (p : Prop) (q : Prop) : term661 p q.
Proof. exact (fun p' : Prop => @lem380520 p q p'). Qed.
Lemma lem380522 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : term1774 A lt2 bad n x.
Proof. exact (@lem380521 (term1775 A n x lt2 bad) (term1776 A bad n x)). Qed.
Lemma lem380523 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) (p' : Prop) : term1777 A lt2 bad n x p'.
Proof. exact (@lem380522 A lt2 bad n x p'). Qed.
Lemma lem380524 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) (p' : Prop) : (term1777 A lt2 bad n x p') = (term1778 A lt2 bad n x p').
Proof. exact (eq_refl (term1777 A lt2 bad n x p')). Qed.
Lemma lem380525 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) (p' : Prop) : term1778 A lt2 bad n x p'.
Proof. exact (EQ_MP (@lem380524 A lt2 bad n x p') (@lem380523 A lt2 bad n x p')). Qed.
Lemma lem380526 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) (p' : Prop) (q' : Prop) : term1779 A lt2 bad n x p' q'.
Proof. exact (@lem380525 A lt2 bad n x p' q'). Qed.
Lemma lem380527 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) (p' : Prop) (q' : Prop) : (term1779 A lt2 bad n x p' q') = (term1780 A lt2 bad n x p' q').
Proof. exact (eq_refl (term1779 A lt2 bad n x p' q')). Qed.
Lemma lem380528 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) (p' : Prop) (q' : Prop) : term1780 A lt2 bad n x p' q'.
Proof. exact (EQ_MP (@lem380527 A lt2 bad n x p' q') (@lem380526 A lt2 bad n x p' q')). Qed.
Lemma lem380538 (p : Prop) (q : Prop) (p' : Prop) (q' : Prop) : term659 p q p' q'.
Proof. exact (fun h0 : p = p' => @lem4211 q q' p p' h0). Qed.
Lemma lem380539 (p : Prop) (q : Prop) (p' : Prop) : term660 p q p'.
Proof. exact (fun q' : Prop => @lem380538 p q p' q'). Qed.
Lemma lem380540 (p : Prop) (q : Prop) : term661 p q.
Proof. exact (fun p' : Prop => @lem380539 p q p'). Qed.
Lemma lem380541 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : term1781 A n bad lt2 x z.
Proof. exact (@lem380540 (term4 z n) (term624 A bad lt2 x z)). Qed.
Lemma lem380542 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) (p' : Prop) : term1782 A n bad lt2 x z p'.
Proof. exact (@lem380541 A n bad lt2 x z p'). Qed.
Lemma lem380543 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) (p' : Prop) : (term1782 A n bad lt2 x z p') = (term1783 A n bad lt2 x z p').
Proof. exact (eq_refl (term1782 A n bad lt2 x z p')). Qed.
Lemma lem380544 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) (p' : Prop) : term1783 A n bad lt2 x z p'.
Proof. exact (EQ_MP (@lem380543 A n bad lt2 x z p') (@lem380542 A n bad lt2 x z p')). Qed.
Lemma lem380545 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) (p' : Prop) (q' : Prop) : term1784 A n bad lt2 x z p' q'.
Proof. exact (@lem380544 A n bad lt2 x z p' q'). Qed.
Lemma lem380546 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) (p' : Prop) (q' : Prop) : (term1784 A n bad lt2 x z p' q') = (term1785 A n bad lt2 x z p' q').
Proof. exact (eq_refl (term1784 A n bad lt2 x z p' q')). Qed.
Lemma lem380547 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) (p' : Prop) (q' : Prop) : term1785 A n bad lt2 x z p' q'.
Proof. exact (EQ_MP (@lem380546 A n bad lt2 x z p' q') (@lem380545 A n bad lt2 x z p' q')). Qed.
Lemma lem380549 (m : nat) (n : nat) : (term4 m n) = (term5 m n).
Proof. exact (EQ_MP (@lem369141 m n) (@lem369140 m n)). Qed.
Lemma lem380550 (z : nat) (n : nat) : (term4 z n) = (term5 z n).
Proof. exact (@lem380549 z n). Qed.
Lemma lem380555 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) (n : nat) (q' : Prop) : term1786 A bad lt2 x z n q'.
Proof. exact (@lem380547 A n bad lt2 x z (term5 z n) q'). Qed.
Lemma lem380556 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) (n : nat) (q' : Prop) : term1787 A bad lt2 x z n q'.
Proof. exact (@lem380555 A bad lt2 x z n q' (@lem380550 z n)). Qed.
Lemma lem380713 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term624 A bad lt2 x z) = (term624 A bad lt2 x z).
Proof. exact (eq_refl (term624 A bad lt2 x z)). Qed.
Lemma lem380714 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : term1788 A n bad lt2 x z.
Proof. exact (fun h0 : term5 z n => @lem380713 A bad lt2 x z). Qed.
Lemma lem380715 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : term1789 A n bad lt2 x z.
Proof. exact (@lem380556 A bad lt2 x z n (term624 A bad lt2 x z)). Qed.
Lemma lem380716 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1790 A n bad lt2 x z) = (term1791 A n bad lt2 x z).
Proof. exact (@lem380715 A n bad lt2 x z (@lem380714 A n bad lt2 x z)). Qed.
Lemma lem381054 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1792 A n bad lt2 x) = (term1793 A n bad lt2 x).
Proof. exact (fun_ext (fun z : nat => @lem380716 A n bad lt2 x z)). Qed.
Lemma lem381392 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem381393 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1794 A n bad lt2 x) = (term1795 A n bad lt2 x).
Proof. exact (MK_COMB (@lem381392) (@lem381054 A n bad lt2 x)). Qed.
Lemma lem381735 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem381736 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1796 A n bad lt2 x) = (term1797 A n bad lt2 x).
Proof. exact (MK_COMB (@lem381735) (@lem381393 A n bad lt2 x)). Qed.
Lemma lem382315 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term587 A lt2 bad) = (term587 A lt2 bad).
Proof. exact (eq_refl (term587 A lt2 bad)). Qed.
Lemma lem382316 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1775 A n x lt2 bad) = (term1798 A n x lt2 bad).
Proof. exact (MK_COMB (@lem381736 A n bad lt2 x) (@lem382315 A lt2 bad)). Qed.
Lemma lem382897 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (q' : Prop) : term1799 A n x lt2 bad q'.
Proof. exact (@lem380528 A lt2 bad n x (term1798 A n x lt2 bad) q'). Qed.
Lemma lem382898 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (q' : Prop) : term1800 A n x lt2 bad q'.
Proof. exact (@lem382897 A n x lt2 bad q' (@lem382316 A n x lt2 bad)). Qed.
Lemma lem382966 (p : Prop) (q : Prop) (p' : Prop) (q' : Prop) : term659 p q p' q'.
Proof. exact (fun h0 : p = p' => @lem4211 q q' p p' h0). Qed.
Lemma lem382967 (p : Prop) (q : Prop) (p' : Prop) : term660 p q p'.
Proof. exact (fun q' : Prop => @lem382966 p q p' q'). Qed.
Lemma lem382968 (p : Prop) (q : Prop) : term661 p q.
Proof. exact (fun p' : Prop => @lem382967 p q p'). Qed.
Lemma lem382969 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : term1801 A n y x k.
Proof. exact (@lem382968 (term4 k n) ((y k) = (x k))). Qed.
Lemma lem382970 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) : term1802 A n y x k p'.
Proof. exact (@lem382969 A n y x k p'). Qed.
Lemma lem382971 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) : (term1802 A n y x k p') = (term1803 A n y x k p').
Proof. exact (eq_refl (term1802 A n y x k p')). Qed.
Lemma lem382972 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) : term1803 A n y x k p'.
Proof. exact (EQ_MP (@lem382971 A n y x k p') (@lem382970 A n y x k p')). Qed.
Lemma lem382973 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) (q' : Prop) : term1804 A n y x k p' q'.
Proof. exact (@lem382972 A n y x k p' q'). Qed.
Lemma lem382974 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) (q' : Prop) : (term1804 A n y x k p' q') = (term1805 A n y x k p' q').
Proof. exact (eq_refl (term1804 A n y x k p' q')). Qed.
Lemma lem382975 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) (p' : Prop) (q' : Prop) : term1805 A n y x k p' q'.
Proof. exact (EQ_MP (@lem382974 A n y x k p' q') (@lem382973 A n y x k p' q')). Qed.
Lemma lem382977 (m : nat) (n : nat) : (term4 m n) = (term5 m n).
Proof. exact (EQ_MP (@lem369141 m n) (@lem369140 m n)). Qed.
Lemma lem382978 (k : nat) (n : nat) : (term4 k n) = (term5 k n).
Proof. exact (@lem382977 k n). Qed.
Lemma lem382983 {A : Type'} (y : nat -> A) (x : nat -> A) (k : nat) (n : nat) (q' : Prop) : term1806 A y x k n q'.
Proof. exact (@lem382975 A n y x k (term5 k n) q'). Qed.
Lemma lem382984 {A : Type'} (y : nat -> A) (x : nat -> A) (k : nat) (n : nat) (q' : Prop) : term1807 A y x k n q'.
Proof. exact (@lem382983 A y x k n q' (@lem382978 k n)). Qed.
Lemma lem382990 {A : Type'} (y : nat -> A) (x : nat -> A) (k : nat) : ((y k) = (x k)) = ((y k) = (x k)).
Proof. exact (eq_refl ((y k) = (x k))). Qed.
Lemma lem382991 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : term1808 A n y x k.
Proof. exact (fun h0 : term5 k n => @lem382990 A y x k). Qed.
Lemma lem382992 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : term1809 A n y x k.
Proof. exact (@lem382984 A y x k n ((y k) = (x k))). Qed.
Lemma lem382993 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term1810 A n y x k) = (term1811 A n y x k).
Proof. exact (@lem382992 A n y x k (@lem382991 A n y x k)). Qed.
Lemma lem383029 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term1812 A n y x) = (term1813 A n y x).
Proof. exact (fun_ext (fun k : nat => @lem382993 A n y x k)). Qed.
Lemma lem383065 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem383066 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term1814 A n y x) = (term1815 A n y x).
Proof. exact (MK_COMB (@lem383065) (@lem383029 A n y x)). Qed.
Lemma lem383106 {A : Type'} (bad : type976 A) (y : nat -> A) : (term685 A bad y) = (term685 A bad y).
Proof. exact (eq_refl (term685 A bad y)). Qed.
Lemma lem383107 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term1816 A bad n y x) = (term1817 A bad n y x).
Proof. exact (MK_COMB (@lem383106 A bad y) (@lem383066 A n y x)). Qed.
Lemma lem383149 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term1818 A bad n x) = (term1819 A bad n x).
Proof. exact (fun_ext (fun y : nat -> A => @lem383107 A bad n y x)). Qed.
Lemma lem383191 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem383192 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term1776 A bad n x) = (term1820 A bad n x).
Proof. exact (MK_COMB (@lem383191 A) (@lem383149 A bad n x)). Qed.
Lemma lem383238 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : term1821 A lt2 bad n x.
Proof. exact (fun h0 : term1798 A n x lt2 bad => @lem383192 A bad n x). Qed.
Lemma lem383239 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : term1822 A lt2 bad n x.
Proof. exact (@lem382898 A n x lt2 bad (term1820 A bad n x)). Qed.
Lemma lem383240 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1716 A lt2 bad n x) = (term1823 A lt2 bad n x).
Proof. exact (@lem383239 A lt2 bad n x (@lem383238 A lt2 bad n x)). Qed.
Lemma lem384565 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1823 A lt2 bad n x) = (term1716 A lt2 bad n x).
Proof. exact (SYM (@lem383240 A lt2 bad n x)). Qed.
Lemma lem384567 (p : Prop) : p = (term24 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem384568 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1823 A lt2 bad n x) = (term1824 A lt2 bad n x).
Proof. exact (@lem384567 (term1823 A lt2 bad n x)). Qed.
Lemma lem384569 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1824 A lt2 bad n x) = (term1823 A lt2 bad n x).
Proof. exact (SYM (@lem384568 A lt2 bad n x)). Qed.
Lemma lem384570 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) (h1 : term1825 A lt2 bad n x) : term1825 A lt2 bad n x.
Proof. exact (h1). Qed.
Lemma lem384573 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) (h1 : term1824 A lt2 bad n x) : term1824 A lt2 bad n x.
Proof. exact (h1). Qed.
Lemma lem384574 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : term1826 A lt2 bad n x.
Proof. exact (fun h0 : term1824 A lt2 bad n x => @lem384573 A lt2 bad n x h0). Qed.
Lemma lem384575 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) (h1 : term1826 A lt2 bad n x) : term1826 A lt2 bad n x.
Proof. exact (h1). Qed.
Lemma lem384576 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) (h1 : term1824 A lt2 bad n x) : term1824 A lt2 bad n x.
Proof. exact (h1). Qed.
Lemma lem384577 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) (h1 : term1824 A lt2 bad n x) (h2 : term1826 A lt2 bad n x) : term1824 A lt2 bad n x.
Proof. exact (@lem384575 A lt2 bad n x h2 (@lem384576 A lt2 bad n x h1)). Qed.
Lemma lem384578 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) (h1 : term1824 A lt2 bad n x) : term1827 A lt2 bad n x.
Proof. exact (fun h0 : term1826 A lt2 bad n x => @lem384577 A lt2 bad n x h1 h0). Qed.
Lemma lem384579 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) (h1 : term1826 A lt2 bad n x) : term1826 A lt2 bad n x.
Proof. exact (h1). Qed.
Lemma lem384580 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) (h1 : term1824 A lt2 bad n x) (h2 : term1826 A lt2 bad n x) : term1824 A lt2 bad n x.
Proof. exact (@lem384578 A lt2 bad n x h1 (@lem384579 A lt2 bad n x h2)). Qed.
Lemma lem384581 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) (h1 : term1826 A lt2 bad n x) : term1826 A lt2 bad n x.
Proof. exact (fun h0 : term1824 A lt2 bad n x => @lem384580 A lt2 bad n x h0 h1). Qed.
Lemma lem384582 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : term1828 A lt2 bad n x.
Proof. exact (fun h0 : term1826 A lt2 bad n x => @lem384581 A lt2 bad n x h0). Qed.
Lemma lem384585 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : term1826 A lt2 bad n x.
Proof. exact (@lem384582 A lt2 bad n x (@lem384574 A lt2 bad n x)). Qed.
Lemma lem384586 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : term1826 A lt2 bad n x.
Proof. exact (@lem384585 A lt2 bad n x). Qed.
Lemma lem384604 (t : Prop) : (t -> False) = (~ t).
Proof. exact (proj2 (@lem16474 t)). Qed.
Lemma lem384605 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1824 A lt2 bad n x) = (term1829 A lt2 bad n x).
Proof. exact (@lem384604 (term1825 A lt2 bad n x)). Qed.
Lemma lem384607 (t : Prop) : (term33 t) = t.
Proof. exact (EQ_MP (@lem16507 t) (@lem16506 t)). Qed.
Lemma lem384608 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1829 A lt2 bad n x) = (term1823 A lt2 bad n x).
Proof. exact (@lem384607 (term1823 A lt2 bad n x)). Qed.
Lemma lem384611 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1824 A lt2 bad n x) = (term1823 A lt2 bad n x).
Proof. exact (TRANS (@lem384605 A lt2 bad n x) (@lem384608 A lt2 bad n x)). Qed.
Lemma lem384744 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term1830 A bad n x) = (term1831 A bad n x).
Proof. exact (fun_ext (fun lt2 : type1402 A => @lem384611 A lt2 bad n x)). Qed.
Lemma lem384745 {A : Type'} : (@all (A -> A -> Prop)) = (@all (A -> A -> Prop)).
Proof. exact (eq_refl (@all (A -> A -> Prop))). Qed.
Lemma lem384746 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term1832 A bad n x) = (term1833 A bad n x).
Proof. exact (MK_COMB (@lem384745 A) (@lem384744 A bad n x)). Qed.
Lemma lem384751 {A : Type'} (n : nat) (x : nat -> A) : (term1834 A n x) = (term1835 A n x).
Proof. exact (fun_ext (fun bad : type976 A => @lem384746 A bad n x)). Qed.
Lemma lem384752 {A : Type'} : (@all ((nat -> A) -> Prop)) = (@all ((nat -> A) -> Prop)).
Proof. exact (eq_refl (@all ((nat -> A) -> Prop))). Qed.
Lemma lem384753 {A : Type'} (n : nat) (x : nat -> A) : (term1836 A n x) = (term1837 A n x).
Proof. exact (MK_COMB (@lem384752 A) (@lem384751 A n x)). Qed.
Lemma lem384758 {A : Type'} (x : nat -> A) : (term1838 A x) = (term1839 A x).
Proof. exact (fun_ext (fun n : nat => @lem384753 A n x)). Qed.
Lemma lem384759 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem384760 {A : Type'} (x : nat -> A) : (term1840 A x) = (term1841 A x).
Proof. exact (MK_COMB (@lem384759) (@lem384758 A x)). Qed.
Lemma lem384765 {A : Type'} : (term1842 A) = (term1843 A).
Proof. exact (fun_ext (fun x : nat -> A => @lem384760 A x)). Qed.
Lemma lem384766 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem384775 {A : Type'} : (term1844 A) = (term1845 A).
Proof. exact (MK_COMB (@lem384766 A) (@lem384765 A)). Qed.
Lemma lem384784 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term1811 A n y x k) = (term1811 A n y x k).
Proof. exact (eq_refl (term1811 A n y x k)). Qed.
Lemma lem384785 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term1813 A n y x) = (term1813 A n y x).
Proof. exact (fun_ext (fun k : nat => @lem384784 A n y x k)). Qed.
Lemma lem384786 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem384787 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term1815 A n y x) = (term1815 A n y x).
Proof. exact (MK_COMB (@lem384786) (@lem384785 A n y x)). Qed.
Lemma lem384790 {A : Type'} (bad : type976 A) (y : nat -> A) : (term685 A bad y) = (term685 A bad y).
Proof. exact (eq_refl (term685 A bad y)). Qed.
Lemma lem384791 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term1817 A bad n y x) = (term1817 A bad n y x).
Proof. exact (MK_COMB (@lem384790 A bad y) (@lem384787 A n y x)). Qed.
Lemma lem384792 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term1819 A bad n x) = (term1819 A bad n x).
Proof. exact (fun_ext (fun y : nat -> A => @lem384791 A bad n y x)). Qed.
Lemma lem384793 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem384794 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term1820 A bad n x) = (term1820 A bad n x).
Proof. exact (MK_COMB (@lem384793 A) (@lem384792 A bad n x)). Qed.
Lemma lem384795 {A : Type'} (bad : type976 A) (x : nat -> A) : (bad x) = (bad x).
Proof. exact (eq_refl (bad x)). Qed.
Lemma lem384796 {A : Type'} (bad : type976 A) : (term805 A bad) = (term805 A bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem384795 A bad x)). Qed.
Lemma lem384797 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem384798 {A : Type'} (bad : type976 A) : (term806 A bad) = (term806 A bad).
Proof. exact (MK_COMB (@lem384797 A) (@lem384796 A bad)). Qed.
Lemma lem384801 {A : Type'} (bad : type976 A) (y : nat -> A) : (term807 A bad y) = (term807 A bad y).
Proof. exact (eq_refl (term807 A bad y)). Qed.
Lemma lem384806 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term671 A n y x k) = (term671 A n y x k).
Proof. exact (eq_refl (term671 A n y x k)). Qed.
Lemma lem384807 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term682 A n y x) = (term682 A n y x).
Proof. exact (fun_ext (fun k : nat => @lem384806 A n y x k)). Qed.
Lemma lem384808 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem384809 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term663 A n y x) = (term663 A n y x).
Proof. exact (MK_COMB (@lem384808) (@lem384807 A n y x)). Qed.
Lemma lem384810 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem384811 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term601 A n y x) = (term601 A n y x).
Proof. exact (MK_COMB (@lem384810) (@lem384809 A n y x)). Qed.
Lemma lem384812 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term808 A n x bad y) = (term808 A n x bad y).
Proof. exact (MK_COMB (@lem384811 A n y x) (@lem384801 A bad y)). Qed.
Lemma lem384813 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term809 A n x bad) = (term809 A n x bad).
Proof. exact (fun_ext (fun y : nat -> A => @lem384812 A n x bad y)). Qed.
Lemma lem384814 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem384815 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term810 A n x bad) = (term810 A n x bad).
Proof. exact (MK_COMB (@lem384814 A) (@lem384813 A n x bad)). Qed.
Lemma lem384816 {A : Type'} (x : nat -> A) (bad : type976 A) : (term811 A x bad) = (term811 A x bad).
Proof. exact (fun_ext (fun n : nat => @lem384815 A n x bad)). Qed.
Lemma lem384817 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem384818 {A : Type'} (x : nat -> A) (bad : type976 A) : (term812 A x bad) = (term812 A x bad).
Proof. exact (MK_COMB (@lem384817) (@lem384816 A x bad)). Qed.
Lemma lem384823 {A : Type'} (bad : type976 A) (x : nat -> A) : (term813 A bad x) = (term813 A bad x).
Proof. exact (eq_refl (term813 A bad x)). Qed.
Lemma lem384824 {A : Type'} (x : nat -> A) (bad : type976 A) : (term814 A x bad) = (term814 A x bad).
Proof. exact (MK_COMB (@lem384823 A bad x) (@lem384818 A x bad)). Qed.
Lemma lem384825 {A : Type'} (bad : type976 A) : (term815 A bad) = (term815 A bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem384824 A x bad)). Qed.
Lemma lem384826 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem384827 {A : Type'} (bad : type976 A) : (term816 A bad) = (term816 A bad).
Proof. exact (MK_COMB (@lem384826 A) (@lem384825 A bad)). Qed.
Lemma lem384828 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem384829 {A : Type'} (bad : type976 A) : (term817 A bad) = (term817 A bad).
Proof. exact (MK_COMB (@lem384828) (@lem384827 A bad)). Qed.
Lemma lem384830 {A : Type'} (bad : type976 A) : (term818 A bad) = (term818 A bad).
Proof. exact (MK_COMB (@lem384829 A bad) (@lem384798 A bad)). Qed.
Lemma lem384833 {A : Type'} (lt2 : type1402 A) : (term819 A lt2) = (term819 A lt2).
Proof. exact (eq_refl (term819 A lt2)). Qed.
Lemma lem384834 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term587 A lt2 bad) = (term587 A lt2 bad).
Proof. exact (MK_COMB (@lem384833 A lt2) (@lem384830 A bad)). Qed.
Lemma lem384837 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term794 A lt2 z x z') = (term794 A lt2 z x z').
Proof. exact (eq_refl (term794 A lt2 z x z')). Qed.
Lemma lem384842 {A : Type'} (z : nat) (z' : nat -> A) (x : nat -> A) (k : nat) : (term671 A z z' x k) = (term671 A z z' x k).
Proof. exact (eq_refl (term671 A z z' x k)). Qed.
Lemma lem384843 {A : Type'} (z : nat) (z' : nat -> A) (x : nat -> A) : (term682 A z z' x) = (term682 A z z' x).
Proof. exact (fun_ext (fun k : nat => @lem384842 A z z' x k)). Qed.
Lemma lem384844 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem384845 {A : Type'} (z : nat) (z' : nat -> A) (x : nat -> A) : (term663 A z z' x) = (term663 A z z' x).
Proof. exact (MK_COMB (@lem384844) (@lem384843 A z z' x)). Qed.
Lemma lem384848 {A : Type'} (bad : type976 A) (z : nat -> A) : (term685 A bad z) = (term685 A bad z).
Proof. exact (eq_refl (term685 A bad z)). Qed.
Lemma lem384849 {A : Type'} (bad : type976 A) (z : nat) (z' : nat -> A) (x : nat -> A) : (term691 A bad z z' x) = (term691 A bad z z' x).
Proof. exact (MK_COMB (@lem384848 A bad z') (@lem384845 A z z' x)). Qed.
Lemma lem384850 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem384851 {A : Type'} (bad : type976 A) (z : nat) (z' : nat -> A) (x : nat -> A) : (term795 A bad z z' x) = (term795 A bad z z' x).
Proof. exact (MK_COMB (@lem384850) (@lem384849 A bad z z' x)). Qed.
Lemma lem384852 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term796 A bad lt2 z x z') = (term796 A bad lt2 z x z').
Proof. exact (MK_COMB (@lem384851 A bad z' z x) (@lem384837 A lt2 z x z')). Qed.
Lemma lem384853 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term801 A bad lt2 x z) = (term801 A bad lt2 x z).
Proof. exact (fun_ext (fun z' : nat -> A => @lem384852 A bad lt2 z' x z)). Qed.
Lemma lem384854 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem384855 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term766 A bad lt2 x z) = (term766 A bad lt2 x z).
Proof. exact (MK_COMB (@lem384854 A) (@lem384853 A bad lt2 x z)). Qed.
Lemma lem384856 {A : Type'} (y : nat -> A) (x : nat -> A) (z : nat) : ((y z) = (x z)) = ((y z) = (x z)).
Proof. exact (eq_refl ((y z) = (x z))). Qed.
Lemma lem384861 {A : Type'} (z : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term671 A z y x k) = (term671 A z y x k).
Proof. exact (eq_refl (term671 A z y x k)). Qed.
Lemma lem384862 {A : Type'} (z : nat) (y : nat -> A) (x : nat -> A) : (term682 A z y x) = (term682 A z y x).
Proof. exact (fun_ext (fun k : nat => @lem384861 A z y x k)). Qed.
Lemma lem384863 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem384864 {A : Type'} (z : nat) (y : nat -> A) (x : nat -> A) : (term663 A z y x) = (term663 A z y x).
Proof. exact (MK_COMB (@lem384863) (@lem384862 A z y x)). Qed.
Lemma lem384865 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem384866 {A : Type'} (z : nat) (y : nat -> A) (x : nat -> A) : (term683 A z y x) = (term683 A z y x).
Proof. exact (MK_COMB (@lem384865) (@lem384864 A z y x)). Qed.
Lemma lem384867 {A : Type'} (y : nat -> A) (x : nat -> A) (z : nat) : (term802 A y x z) = (term802 A y x z).
Proof. exact (MK_COMB (@lem384866 A z y x) (@lem384856 A y x z)). Qed.
Lemma lem384870 {A : Type'} (bad : type976 A) (y : nat -> A) : (term685 A bad y) = (term685 A bad y).
Proof. exact (eq_refl (term685 A bad y)). Qed.
Lemma lem384871 {A : Type'} (bad : type976 A) (y : nat -> A) (x : nat -> A) (z : nat) : (term803 A bad y x z) = (term803 A bad y x z).
Proof. exact (MK_COMB (@lem384870 A bad y) (@lem384867 A y x z)). Qed.
Lemma lem384872 {A : Type'} (bad : type976 A) (x : nat -> A) (z : nat) : (term804 A bad x z) = (term804 A bad x z).
Proof. exact (fun_ext (fun y : nat -> A => @lem384871 A bad y x z)). Qed.
Lemma lem384873 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem384874 {A : Type'} (bad : type976 A) (x : nat -> A) (z : nat) : (term762 A bad x z) = (term762 A bad x z).
Proof. exact (MK_COMB (@lem384873 A) (@lem384872 A bad x z)). Qed.
Lemma lem384875 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem384876 {A : Type'} (bad : type976 A) (x : nat -> A) (z : nat) : (term764 A bad x z) = (term764 A bad x z).
Proof. exact (MK_COMB (@lem384875) (@lem384874 A bad x z)). Qed.
Lemma lem384877 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term624 A bad lt2 x z) = (term624 A bad lt2 x z).
Proof. exact (MK_COMB (@lem384876 A bad x z) (@lem384855 A bad lt2 x z)). Qed.
Lemma lem384884 (z : nat) (n : nat) : (term1846 z n) = (term1846 z n).
Proof. exact (eq_refl (term1846 z n)). Qed.
Lemma lem384885 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1791 A n bad lt2 x z) = (term1791 A n bad lt2 x z).
Proof. exact (MK_COMB (@lem384884 z n) (@lem384877 A bad lt2 x z)). Qed.
Lemma lem384886 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1793 A n bad lt2 x) = (term1793 A n bad lt2 x).
Proof. exact (fun_ext (fun z : nat => @lem384885 A n bad lt2 x z)). Qed.
Lemma lem384887 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem384888 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1795 A n bad lt2 x) = (term1795 A n bad lt2 x).
Proof. exact (MK_COMB (@lem384887) (@lem384886 A n bad lt2 x)). Qed.
Lemma lem384889 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem384890 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1797 A n bad lt2 x) = (term1797 A n bad lt2 x).
Proof. exact (MK_COMB (@lem384889) (@lem384888 A n bad lt2 x)). Qed.
Lemma lem384891 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1798 A n x lt2 bad) = (term1798 A n x lt2 bad).
Proof. exact (MK_COMB (@lem384890 A n bad lt2 x) (@lem384834 A lt2 bad)). Qed.
Lemma lem384892 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem384893 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1847 A n x lt2 bad) = (term1847 A n x lt2 bad).
Proof. exact (MK_COMB (@lem384892) (@lem384891 A n x lt2 bad)). Qed.
Lemma lem384894 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1823 A lt2 bad n x) = (term1823 A lt2 bad n x).
Proof. exact (MK_COMB (@lem384893 A n x lt2 bad) (@lem384794 A bad n x)). Qed.
Lemma lem384895 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term1831 A bad n x) = (term1831 A bad n x).
Proof. exact (fun_ext (fun lt2 : type1402 A => @lem384894 A lt2 bad n x)). Qed.
Lemma lem384896 {A : Type'} : (@all (A -> A -> Prop)) = (@all (A -> A -> Prop)).
Proof. exact (eq_refl (@all (A -> A -> Prop))). Qed.
Lemma lem384897 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term1833 A bad n x) = (term1833 A bad n x).
Proof. exact (MK_COMB (@lem384896 A) (@lem384895 A bad n x)). Qed.
Lemma lem384898 {A : Type'} (n : nat) (x : nat -> A) : (term1835 A n x) = (term1835 A n x).
Proof. exact (fun_ext (fun bad : type976 A => @lem384897 A bad n x)). Qed.
Lemma lem384899 {A : Type'} : (@all ((nat -> A) -> Prop)) = (@all ((nat -> A) -> Prop)).
Proof. exact (eq_refl (@all ((nat -> A) -> Prop))). Qed.
Lemma lem384900 {A : Type'} (n : nat) (x : nat -> A) : (term1837 A n x) = (term1837 A n x).
Proof. exact (MK_COMB (@lem384899 A) (@lem384898 A n x)). Qed.
Lemma lem384901 {A : Type'} (x : nat -> A) : (term1839 A x) = (term1839 A x).
Proof. exact (fun_ext (fun n : nat => @lem384900 A n x)). Qed.
Lemma lem384902 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem384903 {A : Type'} (x : nat -> A) : (term1841 A x) = (term1841 A x).
Proof. exact (MK_COMB (@lem384902) (@lem384901 A x)). Qed.
Lemma lem384904 {A : Type'} : (term1843 A) = (term1843 A).
Proof. exact (fun_ext (fun x : nat -> A => @lem384903 A x)). Qed.
Lemma lem384905 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem384906 {A : Type'} : (term1845 A) = (term1845 A).
Proof. exact (MK_COMB (@lem384905 A) (@lem384904 A)). Qed.
Lemma lem385043 {A : Type'} : (term1844 A) = (term1845 A).
Proof. exact (TRANS (@lem384775 A) (@lem384906 A)). Qed.
Lemma lem385044 {A : Type'} : (term1845 A) = (term1844 A).
Proof. exact (SYM (@lem385043 A)). Qed.
Lemma lem385045 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term1798 A n x lt2 bad) : term1798 A n x lt2 bad.
Proof. exact (h1). Qed.
Lemma lem385047 (p : Prop) : p = (term24 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem385048 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term1820 A bad n x) = (term1848 A bad n x).
Proof. exact (@lem385047 (term1820 A bad n x)). Qed.
Lemma lem385049 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term1848 A bad n x) = (term1820 A bad n x).
Proof. exact (SYM (@lem385048 A bad n x)). Qed.
Lemma lem385050 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) (h1 : term1849 A bad n x) : term1849 A bad n x.
Proof. exact (h1). Qed.
Lemma lem385057 (z : nat) (n : nat) : (term1850 z n) = (term1851 z n).
Proof. exact (@lem17160 (z = n) (Peano.lt z n)). Qed.
Lemma lem385065 {A : Type'} (z : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term671 A z y x k) = (term1065 A z y x k).
Proof. exact (@lem17265 (Peano.lt k z) ((y k) = (x k))). Qed.
Lemma lem385066 {A : Type'} (z : nat) (y : nat -> A) (x : nat -> A) : (term682 A z y x) = (term1066 A z y x).
Proof. exact (fun_ext (fun k : nat => @lem385065 A z y x k)). Qed.
Lemma lem385067 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem385068 {A : Type'} (z : nat) (y : nat -> A) (x : nat -> A) : (term663 A z y x) = (term1067 A z y x).
Proof. exact (MK_COMB (@lem385067) (@lem385066 A z y x)). Qed.
Lemma lem385069 {A : Type'} (y : nat -> A) (x : nat -> A) (z : nat) : ((y z) = (x z)) = ((y z) = (x z)).
Proof. exact (eq_refl ((y z) = (x z))). Qed.
Lemma lem385070 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem385071 {A : Type'} (z : nat) (y : nat -> A) (x : nat -> A) : (term683 A z y x) = (term1068 A z y x).
Proof. exact (MK_COMB (@lem385070) (@lem385068 A z y x)). Qed.
Lemma lem385072 {A : Type'} (y : nat -> A) (x : nat -> A) (z : nat) : (term802 A y x z) = (term1069 A y x z).
Proof. exact (MK_COMB (@lem385071 A z y x) (@lem385069 A y x z)). Qed.
Lemma lem385074 {A : Type'} (bad : type976 A) (y : nat -> A) : (term685 A bad y) = (term685 A bad y).
Proof. exact (eq_refl (term685 A bad y)). Qed.
Lemma lem385075 {A : Type'} (bad : type976 A) (y : nat -> A) (x : nat -> A) (z : nat) : (term803 A bad y x z) = (term1070 A bad y x z).
Proof. exact (MK_COMB (@lem385074 A bad y) (@lem385072 A y x z)). Qed.
Lemma lem385076 {A : Type'} (bad : type976 A) (x : nat -> A) (z : nat) : (term804 A bad x z) = (term1071 A bad x z).
Proof. exact (fun_ext (fun y : nat -> A => @lem385075 A bad y x z)). Qed.
Lemma lem385077 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem385078 {A : Type'} (bad : type976 A) (x : nat -> A) (z : nat) : (term762 A bad x z) = (term1072 A bad x z).
Proof. exact (MK_COMB (@lem385077 A) (@lem385076 A bad x z)). Qed.
Lemma lem385086 {A : Type'} (z : nat) (z' : nat -> A) (x : nat -> A) (k : nat) : (term823 A z z' x k) = (term824 A z z' x k).
Proof. exact (@lem17362 (Peano.lt k z) ((z' k) = (x k))). Qed.
Lemma lem385087 (P : nat -> Prop) : (term825 P) = (term826 P).
Proof. exact (@lem18392 nat P). Qed.
Lemma lem385088 {A : Type'} (z : nat) (z' : nat -> A) (x : nat -> A) : (term827 A z z' x) = (term828 A z z' x).
Proof. exact (@lem385087 (term682 A z z' x)). Qed.
Lemma lem385089 {A : Type'} (z : nat) (z' : nat -> A) (x : nat -> A) (k : nat) : (term670 A z z' x k) = (term671 A z z' x k).
Proof. exact (eq_refl (term670 A z z' x k)). Qed.
Lemma lem385090 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem385091 {A : Type'} (z : nat) (z' : nat -> A) (x : nat -> A) (k : nat) : (term829 A z z' x k) = (term823 A z z' x k).
Proof. exact (MK_COMB (@lem385090) (@lem385089 A z z' x k)). Qed.
Lemma lem385092 {A : Type'} (z : nat) (z' : nat -> A) (x : nat -> A) (k : nat) : (term829 A z z' x k) = (term824 A z z' x k).
Proof. exact (TRANS (@lem385091 A z z' x k) (@lem385086 A z z' x k)). Qed.
Lemma lem385093 {A : Type'} (z : nat) (z' : nat -> A) (x : nat -> A) : (term830 A z z' x) = (term831 A z z' x).
Proof. exact (fun_ext (fun k : nat => @lem385092 A z z' x k)). Qed.
Lemma lem385094 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem385095 {A : Type'} (z : nat) (z' : nat -> A) (x : nat -> A) : (term828 A z z' x) = (term832 A z z' x).
Proof. exact (MK_COMB (@lem385094) (@lem385093 A z z' x)). Qed.
Lemma lem385096 {A : Type'} (z : nat) (z' : nat -> A) (x : nat -> A) : (term827 A z z' x) = (term832 A z z' x).
Proof. exact (TRANS (@lem385088 A z z' x) (@lem385095 A z z' x)). Qed.
Lemma lem385098 {A : Type'} (bad : type976 A) (z : nat -> A) : (term1075 A bad z) = (term1075 A bad z).
Proof. exact (eq_refl (term1075 A bad z)). Qed.
Lemma lem385099 {A : Type'} (bad : type976 A) (z : nat) (z' : nat -> A) (x : nat -> A) : (term1076 A bad z z' x) = (term1077 A bad z z' x).
Proof. exact (MK_COMB (@lem385098 A bad z') (@lem385096 A z z' x)). Qed.
Lemma lem385100 {A : Type'} (bad : type976 A) (z : nat) (z' : nat -> A) (x : nat -> A) : (term1078 A bad z z' x) = (term1076 A bad z z' x).
Proof. exact (@lem17045 (bad z') (term663 A z z' x)). Qed.
Lemma lem385101 {A : Type'} (bad : type976 A) (z : nat) (z' : nat -> A) (x : nat -> A) : (term1078 A bad z z' x) = (term1077 A bad z z' x).
Proof. exact (TRANS (@lem385100 A bad z z' x) (@lem385099 A bad z z' x)). Qed.
Lemma lem385102 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term794 A lt2 z x z') = (term794 A lt2 z x z').
Proof. exact (eq_refl (term794 A lt2 z x z')). Qed.
Lemma lem385103 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem385104 {A : Type'} (bad : type976 A) (z : nat) (z' : nat -> A) (x : nat -> A) : (term1079 A bad z z' x) = (term1080 A bad z z' x).
Proof. exact (MK_COMB (@lem385103) (@lem385101 A bad z z' x)). Qed.
Lemma lem385105 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1081 A bad lt2 z x z') = (term1082 A bad lt2 z x z').
Proof. exact (MK_COMB (@lem385104 A bad z' z x) (@lem385102 A lt2 z x z')). Qed.
Lemma lem385106 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term796 A bad lt2 z x z') = (term1081 A bad lt2 z x z').
Proof. exact (@lem17265 (term691 A bad z' z x) (term794 A lt2 z x z')). Qed.
Lemma lem385107 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term796 A bad lt2 z x z') = (term1082 A bad lt2 z x z').
Proof. exact (TRANS (@lem385106 A bad lt2 z x z') (@lem385105 A bad lt2 z x z')). Qed.
Lemma lem385108 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term801 A bad lt2 x z) = (term1083 A bad lt2 x z).
Proof. exact (fun_ext (fun z' : nat -> A => @lem385107 A bad lt2 z' x z)). Qed.
Lemma lem385109 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem385110 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term766 A bad lt2 x z) = (term1084 A bad lt2 x z).
Proof. exact (MK_COMB (@lem385109 A) (@lem385108 A bad lt2 x z)). Qed.
Lemma lem385111 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem385112 {A : Type'} (bad : type976 A) (x : nat -> A) (z : nat) : (term764 A bad x z) = (term1852 A bad x z).
Proof. exact (MK_COMB (@lem385111) (@lem385078 A bad x z)). Qed.
Lemma lem385113 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term624 A bad lt2 x z) = (term1853 A bad lt2 x z).
Proof. exact (MK_COMB (@lem385112 A bad x z) (@lem385110 A bad lt2 x z)). Qed.
Lemma lem385114 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem385115 (z : nat) (n : nat) : (term1854 z n) = (term1855 z n).
Proof. exact (MK_COMB (@lem385114) (@lem385057 z n)). Qed.
Lemma lem385116 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1856 A n bad lt2 x z) = (term1857 A n bad lt2 x z).
Proof. exact (MK_COMB (@lem385115 z n) (@lem385113 A bad lt2 x z)). Qed.
Lemma lem385117 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1791 A n bad lt2 x z) = (term1856 A n bad lt2 x z).
Proof. exact (@lem17265 (term5 z n) (term624 A bad lt2 x z)). Qed.
Lemma lem385118 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1791 A n bad lt2 x z) = (term1857 A n bad lt2 x z).
Proof. exact (TRANS (@lem385117 A n bad lt2 x z) (@lem385116 A n bad lt2 x z)). Qed.
Lemma lem385119 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1793 A n bad lt2 x) = (term1858 A n bad lt2 x).
Proof. exact (fun_ext (fun z : nat => @lem385118 A n bad lt2 x z)). Qed.
Lemma lem385120 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem385121 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1795 A n bad lt2 x) = (term1859 A n bad lt2 x).
Proof. exact (MK_COMB (@lem385120) (@lem385119 A n bad lt2 x)). Qed.
Lemma lem385125 {A : Type'} (bad : type976 A) (x : nat -> A) : (term822 A bad x) = (bad x).
Proof. exact (@lem16933 (bad x)). Qed.
Lemma lem385132 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term823 A n y x k) = (term824 A n y x k).
Proof. exact (@lem17362 (Peano.lt k n) ((y k) = (x k))). Qed.
Lemma lem385133 (P : nat -> Prop) : (term825 P) = (term826 P).
Proof. exact (@lem18392 nat P). Qed.
Lemma lem385134 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term827 A n y x) = (term828 A n y x).
Proof. exact (@lem385133 (term682 A n y x)). Qed.
Lemma lem385135 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term670 A n y x k) = (term671 A n y x k).
Proof. exact (eq_refl (term670 A n y x k)). Qed.
Lemma lem385136 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem385137 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term829 A n y x k) = (term823 A n y x k).
Proof. exact (MK_COMB (@lem385136) (@lem385135 A n y x k)). Qed.
Lemma lem385138 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term829 A n y x k) = (term824 A n y x k).
Proof. exact (TRANS (@lem385137 A n y x k) (@lem385132 A n y x k)). Qed.
Lemma lem385139 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term830 A n y x) = (term831 A n y x).
Proof. exact (fun_ext (fun k : nat => @lem385138 A n y x k)). Qed.
Lemma lem385140 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem385141 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term828 A n y x) = (term832 A n y x).
Proof. exact (MK_COMB (@lem385140) (@lem385139 A n y x)). Qed.
Lemma lem385142 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term827 A n y x) = (term832 A n y x).
Proof. exact (TRANS (@lem385134 A n y x) (@lem385141 A n y x)). Qed.
Lemma lem385143 {A : Type'} (bad : type976 A) (y : nat -> A) : (term807 A bad y) = (term807 A bad y).
Proof. exact (eq_refl (term807 A bad y)). Qed.
Lemma lem385144 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem385145 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term833 A n y x) = (term834 A n y x).
Proof. exact (MK_COMB (@lem385144) (@lem385142 A n y x)). Qed.
Lemma lem385146 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term835 A n x bad y) = (term836 A n x bad y).
Proof. exact (MK_COMB (@lem385145 A n y x) (@lem385143 A bad y)). Qed.
Lemma lem385147 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term808 A n x bad y) = (term835 A n x bad y).
Proof. exact (@lem17265 (term663 A n y x) (term807 A bad y)). Qed.
Lemma lem385148 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term808 A n x bad y) = (term836 A n x bad y).
Proof. exact (TRANS (@lem385147 A n x bad y) (@lem385146 A n x bad y)). Qed.
Lemma lem385149 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term809 A n x bad) = (term837 A n x bad).
Proof. exact (fun_ext (fun y : nat -> A => @lem385148 A n x bad y)). Qed.
Lemma lem385150 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem385151 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term810 A n x bad) = (term838 A n x bad).
Proof. exact (MK_COMB (@lem385150 A) (@lem385149 A n x bad)). Qed.
Lemma lem385152 {A : Type'} (x : nat -> A) (bad : type976 A) : (term811 A x bad) = (term839 A x bad).
Proof. exact (fun_ext (fun n : nat => @lem385151 A n x bad)). Qed.
Lemma lem385153 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem385154 {A : Type'} (x : nat -> A) (bad : type976 A) : (term812 A x bad) = (term840 A x bad).
Proof. exact (MK_COMB (@lem385153) (@lem385152 A x bad)). Qed.
Lemma lem385155 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem385156 {A : Type'} (bad : type976 A) (x : nat -> A) : (term841 A bad x) = (term842 A bad x).
Proof. exact (MK_COMB (@lem385155) (@lem385125 A bad x)). Qed.
Lemma lem385157 {A : Type'} (x : nat -> A) (bad : type976 A) : (term843 A x bad) = (term844 A x bad).
Proof. exact (MK_COMB (@lem385156 A bad x) (@lem385154 A x bad)). Qed.
Lemma lem385158 {A : Type'} (x : nat -> A) (bad : type976 A) : (term814 A x bad) = (term843 A x bad).
Proof. exact (@lem17265 (term807 A bad x) (term812 A x bad)). Qed.
Lemma lem385159 {A : Type'} (x : nat -> A) (bad : type976 A) : (term814 A x bad) = (term844 A x bad).
Proof. exact (TRANS (@lem385158 A x bad) (@lem385157 A x bad)). Qed.
Lemma lem385160 {A : Type'} (bad : type976 A) : (term815 A bad) = (term845 A bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem385159 A x bad)). Qed.
Lemma lem385161 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem385162 {A : Type'} (bad : type976 A) : (term816 A bad) = (term846 A bad).
Proof. exact (MK_COMB (@lem385161 A) (@lem385160 A bad)). Qed.
Lemma lem385163 {A : Type'} (bad : type976 A) (x : nat -> A) : (bad x) = (bad x).
Proof. exact (eq_refl (bad x)). Qed.
Lemma lem385164 {A : Type'} (bad : type976 A) : (term805 A bad) = (term805 A bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem385163 A bad x)). Qed.
Lemma lem385165 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem385166 {A : Type'} (bad : type976 A) : (term806 A bad) = (term806 A bad).
Proof. exact (MK_COMB (@lem385165 A) (@lem385164 A bad)). Qed.
Lemma lem385167 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem385168 {A : Type'} (bad : type976 A) : (term817 A bad) = (term847 A bad).
Proof. exact (MK_COMB (@lem385167) (@lem385162 A bad)). Qed.
Lemma lem385169 {A : Type'} (bad : type976 A) : (term818 A bad) = (term848 A bad).
Proof. exact (MK_COMB (@lem385168 A bad) (@lem385166 A bad)). Qed.
Lemma lem385171 {A : Type'} (lt2 : type1402 A) : (term819 A lt2) = (term819 A lt2).
Proof. exact (eq_refl (term819 A lt2)). Qed.
Lemma lem385172 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term587 A lt2 bad) = (term849 A lt2 bad).
Proof. exact (MK_COMB (@lem385171 A lt2) (@lem385169 A bad)). Qed.
Lemma lem385173 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem385174 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1797 A n bad lt2 x) = (term1860 A n bad lt2 x).
Proof. exact (MK_COMB (@lem385173) (@lem385121 A n bad lt2 x)). Qed.
Lemma lem385175 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1798 A n x lt2 bad) = (term1861 A n x lt2 bad).
Proof. exact (MK_COMB (@lem385174 A n bad lt2 x) (@lem385172 A lt2 bad)). Qed.
Lemma lem385530 {A : Type'} (P : Prop) (Q : A -> Prop) : (term185 A P Q) = (term186 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem385531 (P : Prop) (Q : nat -> Prop) : (term895 P Q) = (term896 P Q).
Proof. exact (@lem385530 nat P Q). Qed.
Lemma lem385532 {A : Type'} (bad : type976 A) (z : nat) (z' : nat -> A) (x : nat -> A) : (term1113 A bad z z' x) = (term1114 A bad z z' x).
Proof. exact (@lem385531 (term807 A bad z') (term831 A z z' x)). Qed.
Lemma lem385533 {A : Type'} (z : nat) (z' : nat -> A) (x : nat -> A) (k : nat) : (term854 A z z' x k) = (term824 A z z' x k).
Proof. exact (eq_refl (term854 A z z' x k)). Qed.
Lemma lem385534 {A : Type'} (z : nat) (z' : nat -> A) (x : nat -> A) : (term855 A z z' x) = (term831 A z z' x).
Proof. exact (fun_ext (fun k : nat => @lem385533 A z z' x k)). Qed.
Lemma lem385535 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem385536 {A : Type'} (z : nat) (z' : nat -> A) (x : nat -> A) : (term856 A z z' x) = (term832 A z z' x).
Proof. exact (MK_COMB (@lem385535) (@lem385534 A z z' x)). Qed.
Lemma lem385537 {A : Type'} (bad : type976 A) (z : nat -> A) : (term1075 A bad z) = (term1075 A bad z).
Proof. exact (eq_refl (term1075 A bad z)). Qed.
Lemma lem385538 {A : Type'} (bad : type976 A) (z : nat) (z' : nat -> A) (x : nat -> A) : (term1113 A bad z z' x) = (term1077 A bad z z' x).
Proof. exact (MK_COMB (@lem385537 A bad z') (@lem385536 A z z' x)). Qed.
Lemma lem385539 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem385540 {A : Type'} (bad : type976 A) (z : nat) (z' : nat -> A) (x : nat -> A) : (term1115 A bad z z' x) = (term1116 A bad z z' x).
Proof. exact (MK_COMB (@lem385539) (@lem385538 A bad z z' x)). Qed.
Lemma lem385541 {A : Type'} (z : nat) (z' : nat -> A) (x : nat -> A) (k : nat) : (term854 A z z' x k) = (term824 A z z' x k).
Proof. exact (eq_refl (term854 A z z' x k)). Qed.
Lemma lem385542 {A : Type'} (bad : type976 A) (z : nat -> A) : (term1075 A bad z) = (term1075 A bad z).
Proof. exact (eq_refl (term1075 A bad z)). Qed.
Lemma lem385543 {A : Type'} (bad : type976 A) (z : nat) (z' : nat -> A) (x : nat -> A) (k : nat) : (term1117 A bad z z' x k) = (term1118 A bad z z' x k).
Proof. exact (MK_COMB (@lem385542 A bad z') (@lem385541 A z z' x k)). Qed.
Lemma lem385544 {A : Type'} (bad : type976 A) (z : nat) (z' : nat -> A) (x : nat -> A) : (term1119 A bad z z' x) = (term1120 A bad z z' x).
Proof. exact (fun_ext (fun k : nat => @lem385543 A bad z z' x k)). Qed.
Lemma lem385545 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem385546 {A : Type'} (bad : type976 A) (z : nat) (z' : nat -> A) (x : nat -> A) : (term1114 A bad z z' x) = (term1121 A bad z z' x).
Proof. exact (MK_COMB (@lem385545) (@lem385544 A bad z z' x)). Qed.
Lemma lem385547 {A : Type'} (bad : type976 A) (z : nat) (z' : nat -> A) (x : nat -> A) : ((term1113 A bad z z' x) = (term1114 A bad z z' x)) = ((term1077 A bad z z' x) = (term1121 A bad z z' x)).
Proof. exact (MK_COMB (@lem385540 A bad z z' x) (@lem385546 A bad z z' x)). Qed.
Lemma lem385548 {A : Type'} (bad : type976 A) (z : nat) (z' : nat -> A) (x : nat -> A) : (term1077 A bad z z' x) = (term1121 A bad z z' x).
Proof. exact (EQ_MP (@lem385547 A bad z z' x) (@lem385532 A bad z z' x)). Qed.
Lemma lem385549 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem385550 {A : Type'} (bad : type976 A) (z : nat) (z' : nat -> A) (x : nat -> A) : (term1080 A bad z z' x) = (term1122 A bad z z' x).
Proof. exact (MK_COMB (@lem385549) (@lem385548 A bad z z' x)). Qed.
Lemma lem385551 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term794 A lt2 z x z') = (term794 A lt2 z x z').
Proof. exact (eq_refl (term794 A lt2 z x z')). Qed.
Lemma lem385552 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1082 A bad lt2 z x z') = (term1123 A bad lt2 z x z').
Proof. exact (MK_COMB (@lem385550 A bad z' z x) (@lem385551 A lt2 z x z')). Qed.
Lemma lem385554 {A : Type'} (P : A -> Prop) (Q : Prop) : (term345 A P Q) = (term346 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem385555 (P : nat -> Prop) (Q : Prop) : (term850 P Q) = (term851 P Q).
Proof. exact (@lem385554 nat P Q). Qed.
Lemma lem385556 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1124 A bad lt2 z x z') = (term1125 A bad lt2 z x z').
Proof. exact (@lem385555 (term1120 A bad z' z x) (term794 A lt2 z x z')). Qed.
Lemma lem385557 {A : Type'} (bad : type976 A) (z : nat) (z' : nat -> A) (x : nat -> A) (k : nat) : (term1126 A bad z z' x k) = (term1118 A bad z z' x k).
Proof. exact (eq_refl (term1126 A bad z z' x k)). Qed.
Lemma lem385558 {A : Type'} (bad : type976 A) (z : nat) (z' : nat -> A) (x : nat -> A) : (term1127 A bad z z' x) = (term1120 A bad z z' x).
Proof. exact (fun_ext (fun k : nat => @lem385557 A bad z z' x k)). Qed.
Lemma lem385559 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem385560 {A : Type'} (bad : type976 A) (z : nat) (z' : nat -> A) (x : nat -> A) : (term1128 A bad z z' x) = (term1121 A bad z z' x).
Proof. exact (MK_COMB (@lem385559) (@lem385558 A bad z z' x)). Qed.
Lemma lem385561 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem385562 {A : Type'} (bad : type976 A) (z : nat) (z' : nat -> A) (x : nat -> A) : (term1129 A bad z z' x) = (term1122 A bad z z' x).
Proof. exact (MK_COMB (@lem385561) (@lem385560 A bad z z' x)). Qed.
Lemma lem385563 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term794 A lt2 z x z') = (term794 A lt2 z x z').
Proof. exact (eq_refl (term794 A lt2 z x z')). Qed.
Lemma lem385564 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1124 A bad lt2 z x z') = (term1123 A bad lt2 z x z').
Proof. exact (MK_COMB (@lem385562 A bad z' z x) (@lem385563 A lt2 z x z')). Qed.
Lemma lem385565 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem385566 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1130 A bad lt2 z x z') = (term1131 A bad lt2 z x z').
Proof. exact (MK_COMB (@lem385565) (@lem385564 A bad lt2 z x z')). Qed.
Lemma lem385567 {A : Type'} (bad : type976 A) (z : nat) (z' : nat -> A) (x : nat -> A) (k : nat) : (term1126 A bad z z' x k) = (term1118 A bad z z' x k).
Proof. exact (eq_refl (term1126 A bad z z' x k)). Qed.
Lemma lem385568 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem385569 {A : Type'} (bad : type976 A) (z : nat) (z' : nat -> A) (x : nat -> A) (k : nat) : (term1132 A bad z z' x k) = (term1133 A bad z z' x k).
Proof. exact (MK_COMB (@lem385568) (@lem385567 A bad z z' x k)). Qed.
Lemma lem385570 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term794 A lt2 z x z') = (term794 A lt2 z x z').
Proof. exact (eq_refl (term794 A lt2 z x z')). Qed.
Lemma lem385571 {A : Type'} (bad : type976 A) (k : nat) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1134 A bad k lt2 z x z') = (term1135 A bad k lt2 z x z').
Proof. exact (MK_COMB (@lem385569 A bad z' z x k) (@lem385570 A lt2 z x z')). Qed.
Lemma lem385572 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1136 A bad lt2 z x z') = (term1137 A bad lt2 z x z').
Proof. exact (fun_ext (fun k : nat => @lem385571 A bad k lt2 z x z')). Qed.
Lemma lem385573 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem385574 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1125 A bad lt2 z x z') = (term1138 A bad lt2 z x z').
Proof. exact (MK_COMB (@lem385573) (@lem385572 A bad lt2 z x z')). Qed.
Lemma lem385575 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : ((term1124 A bad lt2 z x z') = (term1125 A bad lt2 z x z')) = ((term1123 A bad lt2 z x z') = (term1138 A bad lt2 z x z')).
Proof. exact (MK_COMB (@lem385566 A bad lt2 z x z') (@lem385574 A bad lt2 z x z')). Qed.
Lemma lem385576 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1123 A bad lt2 z x z') = (term1138 A bad lt2 z x z').
Proof. exact (EQ_MP (@lem385575 A bad lt2 z x z') (@lem385556 A bad lt2 z x z')). Qed.
Lemma lem385577 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1082 A bad lt2 z x z') = (term1138 A bad lt2 z x z').
Proof. exact (TRANS (@lem385552 A bad lt2 z x z') (@lem385576 A bad lt2 z x z')). Qed.
Lemma lem385578 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1083 A bad lt2 x z) = (term1139 A bad lt2 x z).
Proof. exact (fun_ext (fun z' : nat -> A => @lem385577 A bad lt2 z' x z)). Qed.
Lemma lem385579 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem385580 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1084 A bad lt2 x z) = (term1140 A bad lt2 x z).
Proof. exact (MK_COMB (@lem385579 A) (@lem385578 A bad lt2 x z)). Qed.
Lemma lem385582 {A B : Type'} (P : type1413 A B) : (term201 A B P) = (term202 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem385583 {A : Type'} (P : type973 A) : (term869 A P) = (term870 A P).
Proof. exact (@lem385582 (nat -> A) nat P). Qed.
Lemma lem385584 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1141 A bad lt2 x z) = (term1142 A bad lt2 x z).
Proof. exact (@lem385583 A (term1143 A bad lt2 x z)). Qed.
Lemma lem385585 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1144 A bad lt2 x z' z) = (term1137 A bad lt2 z x z').
Proof. exact (eq_refl (term1144 A bad lt2 x z' z)). Qed.
Lemma lem385586 (k : nat) : k = k.
Proof. exact (eq_refl k). Qed.
Lemma lem385587 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) (k : nat) : (term1145 A bad lt2 x z' z k) = (term1146 A bad lt2 z x z' k).
Proof. exact (MK_COMB (@lem385585 A bad lt2 z x z') (@lem385586 k)). Qed.
Lemma lem385588 {A : Type'} (bad : type976 A) (k : nat) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1146 A bad lt2 z x z' k) = (term1135 A bad k lt2 z x z').
Proof. exact (eq_refl (term1146 A bad lt2 z x z' k)). Qed.
Lemma lem385589 {A : Type'} (bad : type976 A) (k : nat) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1145 A bad lt2 x z' z k) = (term1135 A bad k lt2 z x z').
Proof. exact (TRANS (@lem385587 A bad lt2 z x z' k) (@lem385588 A bad k lt2 z x z')). Qed.
Lemma lem385590 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1147 A bad lt2 x z' z) = (term1137 A bad lt2 z x z').
Proof. exact (fun_ext (fun k : nat => @lem385589 A bad k lt2 z x z')). Qed.
Lemma lem385591 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem385592 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1148 A bad lt2 x z' z) = (term1138 A bad lt2 z x z').
Proof. exact (MK_COMB (@lem385591) (@lem385590 A bad lt2 z x z')). Qed.
Lemma lem385593 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1149 A bad lt2 x z) = (term1139 A bad lt2 x z).
Proof. exact (fun_ext (fun z' : nat -> A => @lem385592 A bad lt2 z' x z)). Qed.
Lemma lem385594 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem385595 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1141 A bad lt2 x z) = (term1140 A bad lt2 x z).
Proof. exact (MK_COMB (@lem385594 A) (@lem385593 A bad lt2 x z)). Qed.
Lemma lem385596 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem385597 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1150 A bad lt2 x z) = (term1151 A bad lt2 x z).
Proof. exact (MK_COMB (@lem385596) (@lem385595 A bad lt2 x z)). Qed.
Lemma lem385598 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1144 A bad lt2 x z' z) = (term1137 A bad lt2 z x z').
Proof. exact (eq_refl (term1144 A bad lt2 x z' z)). Qed.
Lemma lem385599 {A : Type'} (k : type977 A) (z : nat -> A) : (k z) = (k z).
Proof. exact (eq_refl (k z)). Qed.
Lemma lem385600 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) (k : type977 A) (z' : nat -> A) : (term1152 A bad lt2 x z k z') = (term1153 A bad lt2 x z k z').
Proof. exact (MK_COMB (@lem385598 A bad lt2 z' x z) (@lem385599 A k z')). Qed.
Lemma lem385601 {A : Type'} (bad : type976 A) (k : type977 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1153 A bad lt2 x z' k z) = (term1154 A bad k lt2 z x z').
Proof. exact (eq_refl (term1153 A bad lt2 x z' k z)). Qed.
Lemma lem385602 {A : Type'} (bad : type976 A) (k : type977 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1152 A bad lt2 x z' k z) = (term1154 A bad k lt2 z x z').
Proof. exact (TRANS (@lem385600 A bad lt2 x z' k z) (@lem385601 A bad k lt2 z x z')). Qed.
Lemma lem385603 {A : Type'} (bad : type976 A) (k : type977 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1155 A bad lt2 x z k) = (term1156 A bad k lt2 x z).
Proof. exact (fun_ext (fun z' : nat -> A => @lem385602 A bad k lt2 z' x z)). Qed.
Lemma lem385604 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem385605 {A : Type'} (bad : type976 A) (k : type977 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1157 A bad lt2 x z k) = (term1158 A bad k lt2 x z).
Proof. exact (MK_COMB (@lem385604 A) (@lem385603 A bad k lt2 x z)). Qed.
Lemma lem385606 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1159 A bad lt2 x z) = (term1160 A bad lt2 x z).
Proof. exact (fun_ext (fun k : type977 A => @lem385605 A bad k lt2 x z)). Qed.
Lemma lem385607 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem385608 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1142 A bad lt2 x z) = (term1161 A bad lt2 x z).
Proof. exact (MK_COMB (@lem385607 A) (@lem385606 A bad lt2 x z)). Qed.
Lemma lem385609 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : ((term1141 A bad lt2 x z) = (term1142 A bad lt2 x z)) = ((term1140 A bad lt2 x z) = (term1161 A bad lt2 x z)).
Proof. exact (MK_COMB (@lem385597 A bad lt2 x z) (@lem385608 A bad lt2 x z)). Qed.
Lemma lem385610 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1140 A bad lt2 x z) = (term1161 A bad lt2 x z).
Proof. exact (EQ_MP (@lem385609 A bad lt2 x z) (@lem385584 A bad lt2 x z)). Qed.
Lemma lem385611 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1084 A bad lt2 x z) = (term1161 A bad lt2 x z).
Proof. exact (TRANS (@lem385580 A bad lt2 x z) (@lem385610 A bad lt2 x z)). Qed.
Lemma lem385612 {A : Type'} (bad : type976 A) (x : nat -> A) (z : nat) : (term1852 A bad x z) = (term1852 A bad x z).
Proof. exact (eq_refl (term1852 A bad x z)). Qed.
Lemma lem385613 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1853 A bad lt2 x z) = (term1862 A bad lt2 x z).
Proof. exact (MK_COMB (@lem385612 A bad x z) (@lem385611 A bad lt2 x z)). Qed.
Lemma lem385615 {A : Type'} (P : A -> Prop) (Q : Prop) : (term166 A P Q) = (term167 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem385616 {A : Type'} (P : type976 A) (Q : Prop) : (term1863 A P Q) = (term1864 A P Q).
Proof. exact (@lem385615 (nat -> A) P Q). Qed.
Lemma lem385617 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1865 A bad lt2 x z) = (term1866 A bad lt2 x z).
Proof. exact (@lem385616 A (term1071 A bad x z) (term1161 A bad lt2 x z)). Qed.
Lemma lem385618 {A : Type'} (bad : type976 A) (y : nat -> A) (x : nat -> A) (z : nat) : (term1096 A bad x z y) = (term1070 A bad y x z).
Proof. exact (eq_refl (term1096 A bad x z y)). Qed.
Lemma lem385619 {A : Type'} (bad : type976 A) (x : nat -> A) (z : nat) : (term1867 A bad x z) = (term1071 A bad x z).
Proof. exact (fun_ext (fun y : nat -> A => @lem385618 A bad y x z)). Qed.
Lemma lem385620 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem385621 {A : Type'} (bad : type976 A) (x : nat -> A) (z : nat) : (term1868 A bad x z) = (term1072 A bad x z).
Proof. exact (MK_COMB (@lem385620 A) (@lem385619 A bad x z)). Qed.
Lemma lem385622 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem385623 {A : Type'} (bad : type976 A) (x : nat -> A) (z : nat) : (term1869 A bad x z) = (term1852 A bad x z).
Proof. exact (MK_COMB (@lem385622) (@lem385621 A bad x z)). Qed.
Lemma lem385624 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1161 A bad lt2 x z) = (term1161 A bad lt2 x z).
Proof. exact (eq_refl (term1161 A bad lt2 x z)). Qed.
Lemma lem385625 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1865 A bad lt2 x z) = (term1862 A bad lt2 x z).
Proof. exact (MK_COMB (@lem385623 A bad x z) (@lem385624 A bad lt2 x z)). Qed.
Lemma lem385626 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem385627 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1870 A bad lt2 x z) = (term1871 A bad lt2 x z).
Proof. exact (MK_COMB (@lem385626) (@lem385625 A bad lt2 x z)). Qed.
Lemma lem385628 {A : Type'} (bad : type976 A) (y : nat -> A) (x : nat -> A) (z : nat) : (term1096 A bad x z y) = (term1070 A bad y x z).
Proof. exact (eq_refl (term1096 A bad x z y)). Qed.
Lemma lem385629 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem385630 {A : Type'} (bad : type976 A) (y : nat -> A) (x : nat -> A) (z : nat) : (term1872 A bad x z y) = (term1873 A bad y x z).
Proof. exact (MK_COMB (@lem385629) (@lem385628 A bad y x z)). Qed.
Lemma lem385631 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1161 A bad lt2 x z) = (term1161 A bad lt2 x z).
Proof. exact (eq_refl (term1161 A bad lt2 x z)). Qed.
Lemma lem385632 {A : Type'} (y : nat -> A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1874 A y bad lt2 x z) = (term1875 A y bad lt2 x z).
Proof. exact (MK_COMB (@lem385630 A bad y x z) (@lem385631 A bad lt2 x z)). Qed.
Lemma lem385633 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1876 A bad lt2 x z) = (term1877 A bad lt2 x z).
Proof. exact (fun_ext (fun y : nat -> A => @lem385632 A y bad lt2 x z)). Qed.
Lemma lem385634 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem385635 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1866 A bad lt2 x z) = (term1878 A bad lt2 x z).
Proof. exact (MK_COMB (@lem385634 A) (@lem385633 A bad lt2 x z)). Qed.
Lemma lem385636 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : ((term1865 A bad lt2 x z) = (term1866 A bad lt2 x z)) = ((term1862 A bad lt2 x z) = (term1878 A bad lt2 x z)).
Proof. exact (MK_COMB (@lem385627 A bad lt2 x z) (@lem385635 A bad lt2 x z)). Qed.
Lemma lem385637 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1862 A bad lt2 x z) = (term1878 A bad lt2 x z).
Proof. exact (EQ_MP (@lem385636 A bad lt2 x z) (@lem385617 A bad lt2 x z)). Qed.
Lemma lem385639 {A : Type'} (P : Prop) (Q : A -> Prop) : (term255 A P Q) = (term256 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem385640 {A : Type'} (P : Prop) (Q : type246 A) : (term1019 A P Q) = (term1020 A P Q).
Proof. exact (@lem385639 (type977 A) P Q). Qed.
Lemma lem385641 {A : Type'} (y : nat -> A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1879 A y bad lt2 x z) = (term1880 A y bad lt2 x z).
Proof. exact (@lem385640 A (term1070 A bad y x z) (term1160 A bad lt2 x z)). Qed.
Lemma lem385642 {A : Type'} (bad : type976 A) (k : type977 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1171 A bad lt2 x z k) = (term1158 A bad k lt2 x z).
Proof. exact (eq_refl (term1171 A bad lt2 x z k)). Qed.
Lemma lem385643 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1881 A bad lt2 x z) = (term1160 A bad lt2 x z).
Proof. exact (fun_ext (fun k : type977 A => @lem385642 A bad k lt2 x z)). Qed.
Lemma lem385644 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem385645 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1882 A bad lt2 x z) = (term1161 A bad lt2 x z).
Proof. exact (MK_COMB (@lem385644 A) (@lem385643 A bad lt2 x z)). Qed.
Lemma lem385646 {A : Type'} (bad : type976 A) (y : nat -> A) (x : nat -> A) (z : nat) : (term1873 A bad y x z) = (term1873 A bad y x z).
Proof. exact (eq_refl (term1873 A bad y x z)). Qed.
Lemma lem385647 {A : Type'} (y : nat -> A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1879 A y bad lt2 x z) = (term1875 A y bad lt2 x z).
Proof. exact (MK_COMB (@lem385646 A bad y x z) (@lem385645 A bad lt2 x z)). Qed.
Lemma lem385648 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem385649 {A : Type'} (y : nat -> A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1883 A y bad lt2 x z) = (term1884 A y bad lt2 x z).
Proof. exact (MK_COMB (@lem385648) (@lem385647 A y bad lt2 x z)). Qed.
Lemma lem385650 {A : Type'} (bad : type976 A) (k : type977 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1171 A bad lt2 x z k) = (term1158 A bad k lt2 x z).
Proof. exact (eq_refl (term1171 A bad lt2 x z k)). Qed.
Lemma lem385651 {A : Type'} (bad : type976 A) (y : nat -> A) (x : nat -> A) (z : nat) : (term1873 A bad y x z) = (term1873 A bad y x z).
Proof. exact (eq_refl (term1873 A bad y x z)). Qed.
Lemma lem385652 {A : Type'} (y : nat -> A) (bad : type976 A) (k : type977 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1885 A y bad lt2 x z k) = (term1886 A y bad k lt2 x z).
Proof. exact (MK_COMB (@lem385651 A bad y x z) (@lem385650 A bad k lt2 x z)). Qed.
Lemma lem385653 {A : Type'} (y : nat -> A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1887 A y bad lt2 x z) = (term1888 A y bad lt2 x z).
Proof. exact (fun_ext (fun k : type977 A => @lem385652 A y bad k lt2 x z)). Qed.
Lemma lem385654 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem385655 {A : Type'} (y : nat -> A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1880 A y bad lt2 x z) = (term1889 A y bad lt2 x z).
Proof. exact (MK_COMB (@lem385654 A) (@lem385653 A y bad lt2 x z)). Qed.
Lemma lem385656 {A : Type'} (y : nat -> A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : ((term1879 A y bad lt2 x z) = (term1880 A y bad lt2 x z)) = ((term1875 A y bad lt2 x z) = (term1889 A y bad lt2 x z)).
Proof. exact (MK_COMB (@lem385649 A y bad lt2 x z) (@lem385655 A y bad lt2 x z)). Qed.
Lemma lem385657 {A : Type'} (y : nat -> A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1875 A y bad lt2 x z) = (term1889 A y bad lt2 x z).
Proof. exact (EQ_MP (@lem385656 A y bad lt2 x z) (@lem385641 A y bad lt2 x z)). Qed.
Lemma lem385658 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1877 A bad lt2 x z) = (term1890 A bad lt2 x z).
Proof. exact (fun_ext (fun y : nat -> A => @lem385657 A y bad lt2 x z)). Qed.
Lemma lem385659 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem385660 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1878 A bad lt2 x z) = (term1891 A bad lt2 x z).
Proof. exact (MK_COMB (@lem385659 A) (@lem385658 A bad lt2 x z)). Qed.
Lemma lem385661 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1862 A bad lt2 x z) = (term1891 A bad lt2 x z).
Proof. exact (TRANS (@lem385637 A bad lt2 x z) (@lem385660 A bad lt2 x z)). Qed.
Lemma lem385662 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1853 A bad lt2 x z) = (term1891 A bad lt2 x z).
Proof. exact (TRANS (@lem385613 A bad lt2 x z) (@lem385661 A bad lt2 x z)). Qed.
Lemma lem385663 (z : nat) (n : nat) : (term1855 z n) = (term1855 z n).
Proof. exact (eq_refl (term1855 z n)). Qed.
Lemma lem385664 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1857 A n bad lt2 x z) = (term1892 A n bad lt2 x z).
Proof. exact (MK_COMB (@lem385663 z n) (@lem385662 A bad lt2 x z)). Qed.
Lemma lem385666 {A : Type'} (P : Prop) (Q : A -> Prop) : (term185 A P Q) = (term186 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem385667 {A : Type'} (P : Prop) (Q : type976 A) : (term1247 A P Q) = (term1248 A P Q).
Proof. exact (@lem385666 (nat -> A) P Q). Qed.
Lemma lem385668 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1893 A n bad lt2 x z) = (term1894 A n bad lt2 x z).
Proof. exact (@lem385667 A (term1851 z n) (term1890 A bad lt2 x z)). Qed.
Lemma lem385669 {A : Type'} (y : nat -> A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1895 A bad lt2 x z y) = (term1889 A y bad lt2 x z).
Proof. exact (eq_refl (term1895 A bad lt2 x z y)). Qed.
Lemma lem385670 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1896 A bad lt2 x z) = (term1890 A bad lt2 x z).
Proof. exact (fun_ext (fun y : nat -> A => @lem385669 A y bad lt2 x z)). Qed.
Lemma lem385671 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem385672 {A : Type'} (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1897 A bad lt2 x z) = (term1891 A bad lt2 x z).
Proof. exact (MK_COMB (@lem385671 A) (@lem385670 A bad lt2 x z)). Qed.
Lemma lem385673 (z : nat) (n : nat) : (term1855 z n) = (term1855 z n).
Proof. exact (eq_refl (term1855 z n)). Qed.
Lemma lem385674 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1893 A n bad lt2 x z) = (term1892 A n bad lt2 x z).
Proof. exact (MK_COMB (@lem385673 z n) (@lem385672 A bad lt2 x z)). Qed.
Lemma lem385675 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem385676 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1898 A n bad lt2 x z) = (term1899 A n bad lt2 x z).
Proof. exact (MK_COMB (@lem385675) (@lem385674 A n bad lt2 x z)). Qed.
Lemma lem385677 {A : Type'} (y : nat -> A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1895 A bad lt2 x z y) = (term1889 A y bad lt2 x z).
Proof. exact (eq_refl (term1895 A bad lt2 x z y)). Qed.
Lemma lem385678 (z : nat) (n : nat) : (term1855 z n) = (term1855 z n).
Proof. exact (eq_refl (term1855 z n)). Qed.
Lemma lem385679 {A : Type'} (n : nat) (y : nat -> A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1900 A n bad lt2 x z y) = (term1901 A n y bad lt2 x z).
Proof. exact (MK_COMB (@lem385678 z n) (@lem385677 A y bad lt2 x z)). Qed.
Lemma lem385680 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1902 A n bad lt2 x z) = (term1903 A n bad lt2 x z).
Proof. exact (fun_ext (fun y : nat -> A => @lem385679 A n y bad lt2 x z)). Qed.
Lemma lem385681 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem385682 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1894 A n bad lt2 x z) = (term1904 A n bad lt2 x z).
Proof. exact (MK_COMB (@lem385681 A) (@lem385680 A n bad lt2 x z)). Qed.
Lemma lem385683 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : ((term1893 A n bad lt2 x z) = (term1894 A n bad lt2 x z)) = ((term1892 A n bad lt2 x z) = (term1904 A n bad lt2 x z)).
Proof. exact (MK_COMB (@lem385676 A n bad lt2 x z) (@lem385682 A n bad lt2 x z)). Qed.
Lemma lem385684 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1892 A n bad lt2 x z) = (term1904 A n bad lt2 x z).
Proof. exact (EQ_MP (@lem385683 A n bad lt2 x z) (@lem385668 A n bad lt2 x z)). Qed.
Lemma lem385686 {A : Type'} (P : Prop) (Q : A -> Prop) : (term185 A P Q) = (term186 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem385687 {A : Type'} (P : Prop) (Q : type246 A) : (term909 A P Q) = (term910 A P Q).
Proof. exact (@lem385686 (type977 A) P Q). Qed.
Lemma lem385688 {A : Type'} (n : nat) (y : nat -> A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1905 A n y bad lt2 x z) = (term1906 A n y bad lt2 x z).
Proof. exact (@lem385687 A (term1851 z n) (term1888 A y bad lt2 x z)). Qed.
Lemma lem385689 {A : Type'} (y : nat -> A) (bad : type976 A) (k : type977 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1907 A y bad lt2 x z k) = (term1886 A y bad k lt2 x z).
Proof. exact (eq_refl (term1907 A y bad lt2 x z k)). Qed.
Lemma lem385690 {A : Type'} (y : nat -> A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1908 A y bad lt2 x z) = (term1888 A y bad lt2 x z).
Proof. exact (fun_ext (fun k : type977 A => @lem385689 A y bad k lt2 x z)). Qed.
Lemma lem385691 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem385692 {A : Type'} (y : nat -> A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1909 A y bad lt2 x z) = (term1889 A y bad lt2 x z).
Proof. exact (MK_COMB (@lem385691 A) (@lem385690 A y bad lt2 x z)). Qed.
Lemma lem385693 (z : nat) (n : nat) : (term1855 z n) = (term1855 z n).
Proof. exact (eq_refl (term1855 z n)). Qed.
Lemma lem385694 {A : Type'} (n : nat) (y : nat -> A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1905 A n y bad lt2 x z) = (term1901 A n y bad lt2 x z).
Proof. exact (MK_COMB (@lem385693 z n) (@lem385692 A y bad lt2 x z)). Qed.
Lemma lem385695 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem385696 {A : Type'} (n : nat) (y : nat -> A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1910 A n y bad lt2 x z) = (term1911 A n y bad lt2 x z).
Proof. exact (MK_COMB (@lem385695) (@lem385694 A n y bad lt2 x z)). Qed.
Lemma lem385697 {A : Type'} (y : nat -> A) (bad : type976 A) (k : type977 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1907 A y bad lt2 x z k) = (term1886 A y bad k lt2 x z).
Proof. exact (eq_refl (term1907 A y bad lt2 x z k)). Qed.
Lemma lem385698 (z : nat) (n : nat) : (term1855 z n) = (term1855 z n).
Proof. exact (eq_refl (term1855 z n)). Qed.
Lemma lem385699 {A : Type'} (n : nat) (y : nat -> A) (bad : type976 A) (k : type977 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1912 A n y bad lt2 x z k) = (term1913 A n y bad k lt2 x z).
Proof. exact (MK_COMB (@lem385698 z n) (@lem385697 A y bad k lt2 x z)). Qed.
Lemma lem385700 {A : Type'} (n : nat) (y : nat -> A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1914 A n y bad lt2 x z) = (term1915 A n y bad lt2 x z).
Proof. exact (fun_ext (fun k : type977 A => @lem385699 A n y bad k lt2 x z)). Qed.
Lemma lem385701 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem385702 {A : Type'} (n : nat) (y : nat -> A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1906 A n y bad lt2 x z) = (term1916 A n y bad lt2 x z).
Proof. exact (MK_COMB (@lem385701 A) (@lem385700 A n y bad lt2 x z)). Qed.
Lemma lem385703 {A : Type'} (n : nat) (y : nat -> A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : ((term1905 A n y bad lt2 x z) = (term1906 A n y bad lt2 x z)) = ((term1901 A n y bad lt2 x z) = (term1916 A n y bad lt2 x z)).
Proof. exact (MK_COMB (@lem385696 A n y bad lt2 x z) (@lem385702 A n y bad lt2 x z)). Qed.
Lemma lem385704 {A : Type'} (n : nat) (y : nat -> A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1901 A n y bad lt2 x z) = (term1916 A n y bad lt2 x z).
Proof. exact (EQ_MP (@lem385703 A n y bad lt2 x z) (@lem385688 A n y bad lt2 x z)). Qed.
Lemma lem385705 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1903 A n bad lt2 x z) = (term1917 A n bad lt2 x z).
Proof. exact (fun_ext (fun y : nat -> A => @lem385704 A n y bad lt2 x z)). Qed.
Lemma lem385706 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem385707 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1904 A n bad lt2 x z) = (term1918 A n bad lt2 x z).
Proof. exact (MK_COMB (@lem385706 A) (@lem385705 A n bad lt2 x z)). Qed.
Lemma lem385708 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1892 A n bad lt2 x z) = (term1918 A n bad lt2 x z).
Proof. exact (TRANS (@lem385684 A n bad lt2 x z) (@lem385707 A n bad lt2 x z)). Qed.
Lemma lem385709 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1857 A n bad lt2 x z) = (term1918 A n bad lt2 x z).
Proof. exact (TRANS (@lem385664 A n bad lt2 x z) (@lem385708 A n bad lt2 x z)). Qed.
Lemma lem385710 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1858 A n bad lt2 x) = (term1919 A n bad lt2 x).
Proof. exact (fun_ext (fun z : nat => @lem385709 A n bad lt2 x z)). Qed.
Lemma lem385711 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem385712 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1859 A n bad lt2 x) = (term1920 A n bad lt2 x).
Proof. exact (MK_COMB (@lem385711) (@lem385710 A n bad lt2 x)). Qed.
Lemma lem385714 {A B : Type'} (P : type1413 A B) : (term201 A B P) = (term202 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem385715 {A : Type'} (P : type1583 A) : (term1089 A P) = (term1090 A P).
Proof. exact (@lem385714 nat (nat -> A) P). Qed.
Lemma lem385716 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1921 A n bad lt2 x) = (term1922 A n bad lt2 x).
Proof. exact (@lem385715 A (term1923 A n bad lt2 x)). Qed.
Lemma lem385717 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1924 A n bad lt2 x z) = (term1917 A n bad lt2 x z).
Proof. exact (eq_refl (term1924 A n bad lt2 x z)). Qed.
Lemma lem385718 {A : Type'} (y : nat -> A) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem385719 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) (y : nat -> A) : (term1925 A n bad lt2 x z y) = (term1926 A n bad lt2 x z y).
Proof. exact (MK_COMB (@lem385717 A n bad lt2 x z) (@lem385718 A y)). Qed.
Lemma lem385720 {A : Type'} (n : nat) (y : nat -> A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1926 A n bad lt2 x z y) = (term1916 A n y bad lt2 x z).
Proof. exact (eq_refl (term1926 A n bad lt2 x z y)). Qed.
Lemma lem385721 {A : Type'} (n : nat) (y : nat -> A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1925 A n bad lt2 x z y) = (term1916 A n y bad lt2 x z).
Proof. exact (TRANS (@lem385719 A n bad lt2 x z y) (@lem385720 A n y bad lt2 x z)). Qed.
Lemma lem385722 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1927 A n bad lt2 x z) = (term1917 A n bad lt2 x z).
Proof. exact (fun_ext (fun y : nat -> A => @lem385721 A n y bad lt2 x z)). Qed.
Lemma lem385723 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem385724 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1928 A n bad lt2 x z) = (term1918 A n bad lt2 x z).
Proof. exact (MK_COMB (@lem385723 A) (@lem385722 A n bad lt2 x z)). Qed.
Lemma lem385725 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1929 A n bad lt2 x) = (term1919 A n bad lt2 x).
Proof. exact (fun_ext (fun z : nat => @lem385724 A n bad lt2 x z)). Qed.
Lemma lem385726 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem385727 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1921 A n bad lt2 x) = (term1920 A n bad lt2 x).
Proof. exact (MK_COMB (@lem385726) (@lem385725 A n bad lt2 x)). Qed.
Lemma lem385728 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem385729 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1930 A n bad lt2 x) = (term1931 A n bad lt2 x).
Proof. exact (MK_COMB (@lem385728) (@lem385727 A n bad lt2 x)). Qed.
Lemma lem385730 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1924 A n bad lt2 x z) = (term1917 A n bad lt2 x z).
Proof. exact (eq_refl (term1924 A n bad lt2 x z)). Qed.
Lemma lem385731 {A : Type'} (y : type1604 A) (z : nat) : (y z) = (y z).
Proof. exact (eq_refl (y z)). Qed.
Lemma lem385732 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (y : type1604 A) (z : nat) : (term1932 A n bad lt2 x y z) = (term1933 A n bad lt2 x y z).
Proof. exact (MK_COMB (@lem385730 A n bad lt2 x z) (@lem385731 A y z)). Qed.
Lemma lem385733 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1933 A n bad lt2 x y z) = (term1934 A n y bad lt2 x z).
Proof. exact (eq_refl (term1933 A n bad lt2 x y z)). Qed.
Lemma lem385734 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1932 A n bad lt2 x y z) = (term1934 A n y bad lt2 x z).
Proof. exact (TRANS (@lem385732 A n bad lt2 x y z) (@lem385733 A n y bad lt2 x z)). Qed.
Lemma lem385735 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1935 A n bad lt2 x y) = (term1936 A n y bad lt2 x).
Proof. exact (fun_ext (fun z : nat => @lem385734 A n y bad lt2 x z)). Qed.
Lemma lem385736 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem385737 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1937 A n bad lt2 x y) = (term1938 A n y bad lt2 x).
Proof. exact (MK_COMB (@lem385736) (@lem385735 A n y bad lt2 x)). Qed.
Lemma lem385738 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1939 A n bad lt2 x) = (term1940 A n bad lt2 x).
Proof. exact (fun_ext (fun y : type1604 A => @lem385737 A n y bad lt2 x)). Qed.
Lemma lem385739 {A : Type'} : (@ex (nat -> nat -> A)) = (@ex (nat -> nat -> A)).
Proof. exact (eq_refl (@ex (nat -> nat -> A))). Qed.
Lemma lem385740 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1922 A n bad lt2 x) = (term1941 A n bad lt2 x).
Proof. exact (MK_COMB (@lem385739 A) (@lem385738 A n bad lt2 x)). Qed.
Lemma lem385741 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : ((term1921 A n bad lt2 x) = (term1922 A n bad lt2 x)) = ((term1920 A n bad lt2 x) = (term1941 A n bad lt2 x)).
Proof. exact (MK_COMB (@lem385729 A n bad lt2 x) (@lem385740 A n bad lt2 x)). Qed.
Lemma lem385742 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1920 A n bad lt2 x) = (term1941 A n bad lt2 x).
Proof. exact (EQ_MP (@lem385741 A n bad lt2 x) (@lem385716 A n bad lt2 x)). Qed.
Lemma lem385744 {A B : Type'} (P : type1413 A B) : (term201 A B P) = (term202 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem385745 {A : Type'} (P : type1568 A) : (term1164 A P) = (term1165 A P).
Proof. exact (@lem385744 nat (type977 A) P). Qed.
Lemma lem385746 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1942 A n y bad lt2 x) = (term1943 A n y bad lt2 x).
Proof. exact (@lem385745 A (term1944 A n y bad lt2 x)). Qed.
Lemma lem385747 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1945 A n y bad lt2 x z) = (term1946 A n y bad lt2 x z).
Proof. exact (eq_refl (term1945 A n y bad lt2 x z)). Qed.
Lemma lem385748 {A : Type'} (k : type977 A) : k = k.
Proof. exact (eq_refl k). Qed.
Lemma lem385749 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) (k : type977 A) : (term1947 A n y bad lt2 x z k) = (term1948 A n y bad lt2 x z k).
Proof. exact (MK_COMB (@lem385747 A n y bad lt2 x z) (@lem385748 A k)). Qed.
Lemma lem385750 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k : type977 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1948 A n y bad lt2 x z k) = (term1949 A n y bad k lt2 x z).
Proof. exact (eq_refl (term1948 A n y bad lt2 x z k)). Qed.
Lemma lem385751 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k : type977 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1947 A n y bad lt2 x z k) = (term1949 A n y bad k lt2 x z).
Proof. exact (TRANS (@lem385749 A n y bad lt2 x z k) (@lem385750 A n y bad k lt2 x z)). Qed.
Lemma lem385752 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1950 A n y bad lt2 x z) = (term1946 A n y bad lt2 x z).
Proof. exact (fun_ext (fun k : type977 A => @lem385751 A n y bad k lt2 x z)). Qed.
Lemma lem385753 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem385754 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1951 A n y bad lt2 x z) = (term1934 A n y bad lt2 x z).
Proof. exact (MK_COMB (@lem385753 A) (@lem385752 A n y bad lt2 x z)). Qed.
Lemma lem385755 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1952 A n y bad lt2 x) = (term1936 A n y bad lt2 x).
Proof. exact (fun_ext (fun z : nat => @lem385754 A n y bad lt2 x z)). Qed.
Lemma lem385756 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem385757 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1942 A n y bad lt2 x) = (term1938 A n y bad lt2 x).
Proof. exact (MK_COMB (@lem385756) (@lem385755 A n y bad lt2 x)). Qed.
Lemma lem385758 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem385759 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1953 A n y bad lt2 x) = (term1954 A n y bad lt2 x).
Proof. exact (MK_COMB (@lem385758) (@lem385757 A n y bad lt2 x)). Qed.
Lemma lem385760 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1945 A n y bad lt2 x z) = (term1946 A n y bad lt2 x z).
Proof. exact (eq_refl (term1945 A n y bad lt2 x z)). Qed.
Lemma lem385761 {A : Type'} (k : type1584 A) (z : nat) : (k z) = (k z).
Proof. exact (eq_refl (k z)). Qed.
Lemma lem385762 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) (k : type1584 A) (z : nat) : (term1955 A n y bad lt2 x k z) = (term1956 A n y bad lt2 x k z).
Proof. exact (MK_COMB (@lem385760 A n y bad lt2 x z) (@lem385761 A k z)). Qed.
Lemma lem385763 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1956 A n y bad lt2 x k z) = (term1957 A n y bad k lt2 x z).
Proof. exact (eq_refl (term1956 A n y bad lt2 x k z)). Qed.
Lemma lem385764 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1955 A n y bad lt2 x k z) = (term1957 A n y bad k lt2 x z).
Proof. exact (TRANS (@lem385762 A n y bad lt2 x k z) (@lem385763 A n y bad k lt2 x z)). Qed.
Lemma lem385765 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (x : nat -> A) : (term1958 A n y bad lt2 x k) = (term1959 A n y bad k lt2 x).
Proof. exact (fun_ext (fun z : nat => @lem385764 A n y bad k lt2 x z)). Qed.
Lemma lem385766 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem385767 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (x : nat -> A) : (term1960 A n y bad lt2 x k) = (term1961 A n y bad k lt2 x).
Proof. exact (MK_COMB (@lem385766) (@lem385765 A n y bad k lt2 x)). Qed.
Lemma lem385768 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1962 A n y bad lt2 x) = (term1963 A n y bad lt2 x).
Proof. exact (fun_ext (fun k : type1584 A => @lem385767 A n y bad k lt2 x)). Qed.
Lemma lem385769 {A : Type'} : (@ex (nat -> (nat -> A) -> nat)) = (@ex (nat -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex (nat -> (nat -> A) -> nat))). Qed.
Lemma lem385770 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1943 A n y bad lt2 x) = (term1964 A n y bad lt2 x).
Proof. exact (MK_COMB (@lem385769 A) (@lem385768 A n y bad lt2 x)). Qed.
Lemma lem385771 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : ((term1942 A n y bad lt2 x) = (term1943 A n y bad lt2 x)) = ((term1938 A n y bad lt2 x) = (term1964 A n y bad lt2 x)).
Proof. exact (MK_COMB (@lem385759 A n y bad lt2 x) (@lem385770 A n y bad lt2 x)). Qed.
Lemma lem385772 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1938 A n y bad lt2 x) = (term1964 A n y bad lt2 x).
Proof. exact (EQ_MP (@lem385771 A n y bad lt2 x) (@lem385746 A n y bad lt2 x)). Qed.
Lemma lem385773 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1940 A n bad lt2 x) = (term1965 A n bad lt2 x).
Proof. exact (fun_ext (fun y : type1604 A => @lem385772 A n y bad lt2 x)). Qed.
Lemma lem385774 {A : Type'} : (@ex (nat -> nat -> A)) = (@ex (nat -> nat -> A)).
Proof. exact (eq_refl (@ex (nat -> nat -> A))). Qed.
Lemma lem385775 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1941 A n bad lt2 x) = (term1966 A n bad lt2 x).
Proof. exact (MK_COMB (@lem385774 A) (@lem385773 A n bad lt2 x)). Qed.
Lemma lem385776 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1920 A n bad lt2 x) = (term1966 A n bad lt2 x).
Proof. exact (TRANS (@lem385742 A n bad lt2 x) (@lem385775 A n bad lt2 x)). Qed.
Lemma lem385777 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1859 A n bad lt2 x) = (term1966 A n bad lt2 x).
Proof. exact (TRANS (@lem385712 A n bad lt2 x) (@lem385776 A n bad lt2 x)). Qed.
Lemma lem385778 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem385779 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1860 A n bad lt2 x) = (term1967 A n bad lt2 x).
Proof. exact (MK_COMB (@lem385778) (@lem385777 A n bad lt2 x)). Qed.
Lemma lem385781 {A : Type'} (P : A -> Prop) (Q : Prop) : (term345 A P Q) = (term346 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem385782 (P : nat -> Prop) (Q : Prop) : (term850 P Q) = (term851 P Q).
Proof. exact (@lem385781 nat P Q). Qed.
Lemma lem385783 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term852 A n x bad y) = (term853 A n x bad y).
Proof. exact (@lem385782 (term831 A n y x) (term807 A bad y)). Qed.
Lemma lem385784 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term854 A n y x k) = (term824 A n y x k).
Proof. exact (eq_refl (term854 A n y x k)). Qed.
Lemma lem385785 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term855 A n y x) = (term831 A n y x).
Proof. exact (fun_ext (fun k : nat => @lem385784 A n y x k)). Qed.
Lemma lem385786 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem385787 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term856 A n y x) = (term832 A n y x).
Proof. exact (MK_COMB (@lem385786) (@lem385785 A n y x)). Qed.
Lemma lem385788 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem385789 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term857 A n y x) = (term834 A n y x).
Proof. exact (MK_COMB (@lem385788) (@lem385787 A n y x)). Qed.
Lemma lem385790 {A : Type'} (bad : type976 A) (y : nat -> A) : (term807 A bad y) = (term807 A bad y).
Proof. exact (eq_refl (term807 A bad y)). Qed.
Lemma lem385791 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term852 A n x bad y) = (term836 A n x bad y).
Proof. exact (MK_COMB (@lem385789 A n y x) (@lem385790 A bad y)). Qed.
Lemma lem385792 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem385793 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term858 A n x bad y) = (term859 A n x bad y).
Proof. exact (MK_COMB (@lem385792) (@lem385791 A n x bad y)). Qed.
Lemma lem385794 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term854 A n y x k) = (term824 A n y x k).
Proof. exact (eq_refl (term854 A n y x k)). Qed.
Lemma lem385795 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem385796 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term860 A n y x k) = (term861 A n y x k).
Proof. exact (MK_COMB (@lem385795) (@lem385794 A n y x k)). Qed.
Lemma lem385797 {A : Type'} (bad : type976 A) (y : nat -> A) : (term807 A bad y) = (term807 A bad y).
Proof. exact (eq_refl (term807 A bad y)). Qed.
Lemma lem385798 {A : Type'} (n : nat) (x : nat -> A) (k : nat) (bad : type976 A) (y : nat -> A) : (term862 A n x k bad y) = (term863 A n x k bad y).
Proof. exact (MK_COMB (@lem385796 A n y x k) (@lem385797 A bad y)). Qed.
Lemma lem385799 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term864 A n x bad y) = (term865 A n x bad y).
Proof. exact (fun_ext (fun k : nat => @lem385798 A n x k bad y)). Qed.
Lemma lem385800 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem385801 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term853 A n x bad y) = (term866 A n x bad y).
Proof. exact (MK_COMB (@lem385800) (@lem385799 A n x bad y)). Qed.
Lemma lem385802 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : ((term852 A n x bad y) = (term853 A n x bad y)) = ((term836 A n x bad y) = (term866 A n x bad y)).
Proof. exact (MK_COMB (@lem385793 A n x bad y) (@lem385801 A n x bad y)). Qed.
Lemma lem385803 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term836 A n x bad y) = (term866 A n x bad y).
Proof. exact (EQ_MP (@lem385802 A n x bad y) (@lem385783 A n x bad y)). Qed.
Lemma lem385804 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term837 A n x bad) = (term867 A n x bad).
Proof. exact (fun_ext (fun y : nat -> A => @lem385803 A n x bad y)). Qed.
Lemma lem385805 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem385806 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term838 A n x bad) = (term868 A n x bad).
Proof. exact (MK_COMB (@lem385805 A) (@lem385804 A n x bad)). Qed.
Lemma lem385808 {A B : Type'} (P : type1413 A B) : (term201 A B P) = (term202 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem385809 {A : Type'} (P : type973 A) : (term869 A P) = (term870 A P).
Proof. exact (@lem385808 (nat -> A) nat P). Qed.
Lemma lem385810 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term871 A n x bad) = (term872 A n x bad).
Proof. exact (@lem385809 A (term873 A n x bad)). Qed.
Lemma lem385811 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term874 A n x bad y) = (term865 A n x bad y).
Proof. exact (eq_refl (term874 A n x bad y)). Qed.
Lemma lem385812 (k : nat) : k = k.
Proof. exact (eq_refl k). Qed.
Lemma lem385813 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) (k : nat) : (term875 A n x bad y k) = (term876 A n x bad y k).
Proof. exact (MK_COMB (@lem385811 A n x bad y) (@lem385812 k)). Qed.
Lemma lem385814 {A : Type'} (n : nat) (x : nat -> A) (k : nat) (bad : type976 A) (y : nat -> A) : (term876 A n x bad y k) = (term863 A n x k bad y).
Proof. exact (eq_refl (term876 A n x bad y k)). Qed.
Lemma lem385815 {A : Type'} (n : nat) (x : nat -> A) (k : nat) (bad : type976 A) (y : nat -> A) : (term875 A n x bad y k) = (term863 A n x k bad y).
Proof. exact (TRANS (@lem385813 A n x bad y k) (@lem385814 A n x k bad y)). Qed.
Lemma lem385816 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term877 A n x bad y) = (term865 A n x bad y).
Proof. exact (fun_ext (fun k : nat => @lem385815 A n x k bad y)). Qed.
Lemma lem385817 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem385818 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term878 A n x bad y) = (term866 A n x bad y).
Proof. exact (MK_COMB (@lem385817) (@lem385816 A n x bad y)). Qed.
Lemma lem385819 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term879 A n x bad) = (term867 A n x bad).
Proof. exact (fun_ext (fun y : nat -> A => @lem385818 A n x bad y)). Qed.
Lemma lem385820 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem385821 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term871 A n x bad) = (term868 A n x bad).
Proof. exact (MK_COMB (@lem385820 A) (@lem385819 A n x bad)). Qed.
Lemma lem385822 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem385823 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term880 A n x bad) = (term881 A n x bad).
Proof. exact (MK_COMB (@lem385822) (@lem385821 A n x bad)). Qed.
Lemma lem385824 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term874 A n x bad y) = (term865 A n x bad y).
Proof. exact (eq_refl (term874 A n x bad y)). Qed.
Lemma lem385825 {A : Type'} (k : type977 A) (y : nat -> A) : (k y) = (k y).
Proof. exact (eq_refl (k y)). Qed.
Lemma lem385826 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) (k : type977 A) (y : nat -> A) : (term882 A n x bad k y) = (term883 A n x bad k y).
Proof. exact (MK_COMB (@lem385824 A n x bad y) (@lem385825 A k y)). Qed.
Lemma lem385827 {A : Type'} (n : nat) (x : nat -> A) (k : type977 A) (bad : type976 A) (y : nat -> A) : (term883 A n x bad k y) = (term884 A n x k bad y).
Proof. exact (eq_refl (term883 A n x bad k y)). Qed.
Lemma lem385828 {A : Type'} (n : nat) (x : nat -> A) (k : type977 A) (bad : type976 A) (y : nat -> A) : (term882 A n x bad k y) = (term884 A n x k bad y).
Proof. exact (TRANS (@lem385826 A n x bad k y) (@lem385827 A n x k bad y)). Qed.
Lemma lem385829 {A : Type'} (n : nat) (x : nat -> A) (k : type977 A) (bad : type976 A) : (term885 A n x bad k) = (term886 A n x k bad).
Proof. exact (fun_ext (fun y : nat -> A => @lem385828 A n x k bad y)). Qed.
Lemma lem385830 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem385831 {A : Type'} (n : nat) (x : nat -> A) (k : type977 A) (bad : type976 A) : (term887 A n x bad k) = (term888 A n x k bad).
Proof. exact (MK_COMB (@lem385830 A) (@lem385829 A n x k bad)). Qed.
Lemma lem385832 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term889 A n x bad) = (term890 A n x bad).
Proof. exact (fun_ext (fun k : type977 A => @lem385831 A n x k bad)). Qed.
Lemma lem385833 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem385834 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term872 A n x bad) = (term891 A n x bad).
Proof. exact (MK_COMB (@lem385833 A) (@lem385832 A n x bad)). Qed.
Lemma lem385835 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : ((term871 A n x bad) = (term872 A n x bad)) = ((term868 A n x bad) = (term891 A n x bad)).
Proof. exact (MK_COMB (@lem385823 A n x bad) (@lem385834 A n x bad)). Qed.
Lemma lem385836 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term868 A n x bad) = (term891 A n x bad).
Proof. exact (EQ_MP (@lem385835 A n x bad) (@lem385810 A n x bad)). Qed.
Lemma lem385837 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term838 A n x bad) = (term891 A n x bad).
Proof. exact (TRANS (@lem385806 A n x bad) (@lem385836 A n x bad)). Qed.
Lemma lem385838 {A : Type'} (x : nat -> A) (bad : type976 A) : (term839 A x bad) = (term892 A x bad).
Proof. exact (fun_ext (fun n : nat => @lem385837 A n x bad)). Qed.
Lemma lem385839 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem385840 {A : Type'} (x : nat -> A) (bad : type976 A) : (term840 A x bad) = (term893 A x bad).
Proof. exact (MK_COMB (@lem385839) (@lem385838 A x bad)). Qed.
Lemma lem385841 {A : Type'} (bad : type976 A) (x : nat -> A) : (term842 A bad x) = (term842 A bad x).
Proof. exact (eq_refl (term842 A bad x)). Qed.
Lemma lem385842 {A : Type'} (x : nat -> A) (bad : type976 A) : (term844 A x bad) = (term894 A x bad).
Proof. exact (MK_COMB (@lem385841 A bad x) (@lem385840 A x bad)). Qed.
Lemma lem385844 {A : Type'} (P : Prop) (Q : A -> Prop) : (term185 A P Q) = (term186 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem385845 (P : Prop) (Q : nat -> Prop) : (term895 P Q) = (term896 P Q).
Proof. exact (@lem385844 nat P Q). Qed.
Lemma lem385846 {A : Type'} (x : nat -> A) (bad : type976 A) : (term897 A x bad) = (term898 A x bad).
Proof. exact (@lem385845 (bad x) (term892 A x bad)). Qed.
Lemma lem385847 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term899 A x bad n) = (term891 A n x bad).
Proof. exact (eq_refl (term899 A x bad n)). Qed.
Lemma lem385848 {A : Type'} (x : nat -> A) (bad : type976 A) : (term900 A x bad) = (term892 A x bad).
Proof. exact (fun_ext (fun n : nat => @lem385847 A n x bad)). Qed.
Lemma lem385849 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem385850 {A : Type'} (x : nat -> A) (bad : type976 A) : (term901 A x bad) = (term893 A x bad).
Proof. exact (MK_COMB (@lem385849) (@lem385848 A x bad)). Qed.
Lemma lem385851 {A : Type'} (bad : type976 A) (x : nat -> A) : (term842 A bad x) = (term842 A bad x).
Proof. exact (eq_refl (term842 A bad x)). Qed.
Lemma lem385852 {A : Type'} (x : nat -> A) (bad : type976 A) : (term897 A x bad) = (term894 A x bad).
Proof. exact (MK_COMB (@lem385851 A bad x) (@lem385850 A x bad)). Qed.
Lemma lem385853 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem385854 {A : Type'} (x : nat -> A) (bad : type976 A) : (term902 A x bad) = (term903 A x bad).
Proof. exact (MK_COMB (@lem385853) (@lem385852 A x bad)). Qed.
Lemma lem385855 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term899 A x bad n) = (term891 A n x bad).
Proof. exact (eq_refl (term899 A x bad n)). Qed.
Lemma lem385856 {A : Type'} (bad : type976 A) (x : nat -> A) : (term842 A bad x) = (term842 A bad x).
Proof. exact (eq_refl (term842 A bad x)). Qed.
Lemma lem385857 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term904 A x bad n) = (term905 A n x bad).
Proof. exact (MK_COMB (@lem385856 A bad x) (@lem385855 A n x bad)). Qed.
Lemma lem385858 {A : Type'} (x : nat -> A) (bad : type976 A) : (term906 A x bad) = (term907 A x bad).
Proof. exact (fun_ext (fun n : nat => @lem385857 A n x bad)). Qed.
Lemma lem385859 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem385860 {A : Type'} (x : nat -> A) (bad : type976 A) : (term898 A x bad) = (term908 A x bad).
Proof. exact (MK_COMB (@lem385859) (@lem385858 A x bad)). Qed.
Lemma lem385861 {A : Type'} (x : nat -> A) (bad : type976 A) : ((term897 A x bad) = (term898 A x bad)) = ((term894 A x bad) = (term908 A x bad)).
Proof. exact (MK_COMB (@lem385854 A x bad) (@lem385860 A x bad)). Qed.
Lemma lem385862 {A : Type'} (x : nat -> A) (bad : type976 A) : (term894 A x bad) = (term908 A x bad).
Proof. exact (EQ_MP (@lem385861 A x bad) (@lem385846 A x bad)). Qed.
Lemma lem385864 {A : Type'} (P : Prop) (Q : A -> Prop) : (term185 A P Q) = (term186 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem385865 {A : Type'} (P : Prop) (Q : type246 A) : (term909 A P Q) = (term910 A P Q).
Proof. exact (@lem385864 (type977 A) P Q). Qed.
Lemma lem385866 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term911 A n x bad) = (term912 A n x bad).
Proof. exact (@lem385865 A (bad x) (term890 A n x bad)). Qed.
Lemma lem385867 {A : Type'} (n : nat) (x : nat -> A) (k : type977 A) (bad : type976 A) : (term913 A n x bad k) = (term888 A n x k bad).
Proof. exact (eq_refl (term913 A n x bad k)). Qed.
Lemma lem385868 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term914 A n x bad) = (term890 A n x bad).
Proof. exact (fun_ext (fun k : type977 A => @lem385867 A n x k bad)). Qed.
Lemma lem385869 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem385870 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term915 A n x bad) = (term891 A n x bad).
Proof. exact (MK_COMB (@lem385869 A) (@lem385868 A n x bad)). Qed.
Lemma lem385871 {A : Type'} (bad : type976 A) (x : nat -> A) : (term842 A bad x) = (term842 A bad x).
Proof. exact (eq_refl (term842 A bad x)). Qed.
Lemma lem385872 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term911 A n x bad) = (term905 A n x bad).
Proof. exact (MK_COMB (@lem385871 A bad x) (@lem385870 A n x bad)). Qed.
Lemma lem385873 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem385874 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term916 A n x bad) = (term917 A n x bad).
Proof. exact (MK_COMB (@lem385873) (@lem385872 A n x bad)). Qed.
Lemma lem385875 {A : Type'} (n : nat) (x : nat -> A) (k : type977 A) (bad : type976 A) : (term913 A n x bad k) = (term888 A n x k bad).
Proof. exact (eq_refl (term913 A n x bad k)). Qed.
Lemma lem385876 {A : Type'} (bad : type976 A) (x : nat -> A) : (term842 A bad x) = (term842 A bad x).
Proof. exact (eq_refl (term842 A bad x)). Qed.
Lemma lem385877 {A : Type'} (n : nat) (x : nat -> A) (k : type977 A) (bad : type976 A) : (term918 A n x bad k) = (term919 A n x k bad).
Proof. exact (MK_COMB (@lem385876 A bad x) (@lem385875 A n x k bad)). Qed.
Lemma lem385878 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term920 A n x bad) = (term921 A n x bad).
Proof. exact (fun_ext (fun k : type977 A => @lem385877 A n x k bad)). Qed.
Lemma lem385879 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem385880 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term912 A n x bad) = (term922 A n x bad).
Proof. exact (MK_COMB (@lem385879 A) (@lem385878 A n x bad)). Qed.
Lemma lem385881 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : ((term911 A n x bad) = (term912 A n x bad)) = ((term905 A n x bad) = (term922 A n x bad)).
Proof. exact (MK_COMB (@lem385874 A n x bad) (@lem385880 A n x bad)). Qed.
Lemma lem385882 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term905 A n x bad) = (term922 A n x bad).
Proof. exact (EQ_MP (@lem385881 A n x bad) (@lem385866 A n x bad)). Qed.
Lemma lem385883 {A : Type'} (x : nat -> A) (bad : type976 A) : (term907 A x bad) = (term923 A x bad).
Proof. exact (fun_ext (fun n : nat => @lem385882 A n x bad)). Qed.
Lemma lem385884 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem385885 {A : Type'} (x : nat -> A) (bad : type976 A) : (term908 A x bad) = (term924 A x bad).
Proof. exact (MK_COMB (@lem385884) (@lem385883 A x bad)). Qed.
Lemma lem385886 {A : Type'} (x : nat -> A) (bad : type976 A) : (term894 A x bad) = (term924 A x bad).
Proof. exact (TRANS (@lem385862 A x bad) (@lem385885 A x bad)). Qed.
Lemma lem385887 {A : Type'} (x : nat -> A) (bad : type976 A) : (term844 A x bad) = (term924 A x bad).
Proof. exact (TRANS (@lem385842 A x bad) (@lem385886 A x bad)). Qed.
Lemma lem385888 {A : Type'} (bad : type976 A) : (term845 A bad) = (term925 A bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem385887 A x bad)). Qed.
Lemma lem385889 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem385890 {A : Type'} (bad : type976 A) : (term846 A bad) = (term926 A bad).
Proof. exact (MK_COMB (@lem385889 A) (@lem385888 A bad)). Qed.
Lemma lem385892 {A B : Type'} (P : type1413 A B) : (term201 A B P) = (term202 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem385893 {A : Type'} (P : type973 A) : (term869 A P) = (term870 A P).
Proof. exact (@lem385892 (nat -> A) nat P). Qed.
Lemma lem385894 {A : Type'} (bad : type976 A) : (term927 A bad) = (term928 A bad).
Proof. exact (@lem385893 A (term929 A bad)). Qed.
Lemma lem385895 {A : Type'} (x : nat -> A) (bad : type976 A) : (term930 A bad x) = (term923 A x bad).
Proof. exact (eq_refl (term930 A bad x)). Qed.
Lemma lem385896 (n : nat) : n = n.
Proof. exact (eq_refl n). Qed.
Lemma lem385897 {A : Type'} (x : nat -> A) (bad : type976 A) (n : nat) : (term931 A bad x n) = (term932 A x bad n).
Proof. exact (MK_COMB (@lem385895 A x bad) (@lem385896 n)). Qed.
Lemma lem385898 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term932 A x bad n) = (term922 A n x bad).
Proof. exact (eq_refl (term932 A x bad n)). Qed.
Lemma lem385899 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : (term931 A bad x n) = (term922 A n x bad).
Proof. exact (TRANS (@lem385897 A x bad n) (@lem385898 A n x bad)). Qed.
Lemma lem385900 {A : Type'} (x : nat -> A) (bad : type976 A) : (term933 A bad x) = (term923 A x bad).
Proof. exact (fun_ext (fun n : nat => @lem385899 A n x bad)). Qed.
Lemma lem385901 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem385902 {A : Type'} (x : nat -> A) (bad : type976 A) : (term934 A bad x) = (term924 A x bad).
Proof. exact (MK_COMB (@lem385901) (@lem385900 A x bad)). Qed.
Lemma lem385903 {A : Type'} (bad : type976 A) : (term935 A bad) = (term925 A bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem385902 A x bad)). Qed.
Lemma lem385904 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem385905 {A : Type'} (bad : type976 A) : (term927 A bad) = (term926 A bad).
Proof. exact (MK_COMB (@lem385904 A) (@lem385903 A bad)). Qed.
Lemma lem385906 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem385907 {A : Type'} (bad : type976 A) : (term936 A bad) = (term937 A bad).
Proof. exact (MK_COMB (@lem385906) (@lem385905 A bad)). Qed.
Lemma lem385908 {A : Type'} (x : nat -> A) (bad : type976 A) : (term930 A bad x) = (term923 A x bad).
Proof. exact (eq_refl (term930 A bad x)). Qed.
Lemma lem385909 {A : Type'} (n : type977 A) (x : nat -> A) : (n x) = (n x).
Proof. exact (eq_refl (n x)). Qed.
Lemma lem385910 {A : Type'} (bad : type976 A) (n : type977 A) (x : nat -> A) : (term938 A bad n x) = (term939 A bad n x).
Proof. exact (MK_COMB (@lem385908 A x bad) (@lem385909 A n x)). Qed.
Lemma lem385911 {A : Type'} (n : type977 A) (x : nat -> A) (bad : type976 A) : (term939 A bad n x) = (term940 A n x bad).
Proof. exact (eq_refl (term939 A bad n x)). Qed.
Lemma lem385912 {A : Type'} (n : type977 A) (x : nat -> A) (bad : type976 A) : (term938 A bad n x) = (term940 A n x bad).
Proof. exact (TRANS (@lem385910 A bad n x) (@lem385911 A n x bad)). Qed.
Lemma lem385913 {A : Type'} (n : type977 A) (bad : type976 A) : (term941 A bad n) = (term942 A n bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem385912 A n x bad)). Qed.
Lemma lem385914 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem385915 {A : Type'} (n : type977 A) (bad : type976 A) : (term943 A bad n) = (term944 A n bad).
Proof. exact (MK_COMB (@lem385914 A) (@lem385913 A n bad)). Qed.
Lemma lem385916 {A : Type'} (bad : type976 A) : (term945 A bad) = (term946 A bad).
Proof. exact (fun_ext (fun n : type977 A => @lem385915 A n bad)). Qed.
Lemma lem385917 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem385918 {A : Type'} (bad : type976 A) : (term928 A bad) = (term947 A bad).
Proof. exact (MK_COMB (@lem385917 A) (@lem385916 A bad)). Qed.
Lemma lem385919 {A : Type'} (bad : type976 A) : ((term927 A bad) = (term928 A bad)) = ((term926 A bad) = (term947 A bad)).
Proof. exact (MK_COMB (@lem385907 A bad) (@lem385918 A bad)). Qed.
Lemma lem385920 {A : Type'} (bad : type976 A) : (term926 A bad) = (term947 A bad).
Proof. exact (EQ_MP (@lem385919 A bad) (@lem385894 A bad)). Qed.
Lemma lem385922 {A B : Type'} (P : type1413 A B) : (term201 A B P) = (term202 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem385923 {A : Type'} (P : type964 A) : (term948 A P) = (term949 A P).
Proof. exact (@lem385922 (nat -> A) (type977 A) P). Qed.
Lemma lem385924 {A : Type'} (n : type977 A) (bad : type976 A) : (term950 A n bad) = (term951 A n bad).
Proof. exact (@lem385923 A (term952 A n bad)). Qed.
Lemma lem385925 {A : Type'} (n : type977 A) (x : nat -> A) (bad : type976 A) : (term953 A n bad x) = (term954 A n x bad).
Proof. exact (eq_refl (term953 A n bad x)). Qed.
Lemma lem385926 {A : Type'} (k : type977 A) : k = k.
Proof. exact (eq_refl k). Qed.
Lemma lem385927 {A : Type'} (n : type977 A) (x : nat -> A) (bad : type976 A) (k : type977 A) : (term955 A n bad x k) = (term956 A n x bad k).
Proof. exact (MK_COMB (@lem385925 A n x bad) (@lem385926 A k)). Qed.
Lemma lem385928 {A : Type'} (n : type977 A) (x : nat -> A) (k : type977 A) (bad : type976 A) : (term956 A n x bad k) = (term957 A n x k bad).
Proof. exact (eq_refl (term956 A n x bad k)). Qed.
Lemma lem385929 {A : Type'} (n : type977 A) (x : nat -> A) (k : type977 A) (bad : type976 A) : (term955 A n bad x k) = (term957 A n x k bad).
Proof. exact (TRANS (@lem385927 A n x bad k) (@lem385928 A n x k bad)). Qed.
Lemma lem385930 {A : Type'} (n : type977 A) (x : nat -> A) (bad : type976 A) : (term958 A n bad x) = (term954 A n x bad).
Proof. exact (fun_ext (fun k : type977 A => @lem385929 A n x k bad)). Qed.
Lemma lem385931 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem385932 {A : Type'} (n : type977 A) (x : nat -> A) (bad : type976 A) : (term959 A n bad x) = (term940 A n x bad).
Proof. exact (MK_COMB (@lem385931 A) (@lem385930 A n x bad)). Qed.
Lemma lem385933 {A : Type'} (n : type977 A) (bad : type976 A) : (term960 A n bad) = (term942 A n bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem385932 A n x bad)). Qed.
Lemma lem385934 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem385935 {A : Type'} (n : type977 A) (bad : type976 A) : (term950 A n bad) = (term944 A n bad).
Proof. exact (MK_COMB (@lem385934 A) (@lem385933 A n bad)). Qed.
Lemma lem385936 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem385937 {A : Type'} (n : type977 A) (bad : type976 A) : (term961 A n bad) = (term962 A n bad).
Proof. exact (MK_COMB (@lem385936) (@lem385935 A n bad)). Qed.
Lemma lem385938 {A : Type'} (n : type977 A) (x : nat -> A) (bad : type976 A) : (term953 A n bad x) = (term954 A n x bad).
Proof. exact (eq_refl (term953 A n bad x)). Qed.
Lemma lem385939 {A : Type'} (k : type967 A) (x : nat -> A) : (k x) = (k x).
Proof. exact (eq_refl (k x)). Qed.
Lemma lem385940 {A : Type'} (n : type977 A) (bad : type976 A) (k : type967 A) (x : nat -> A) : (term963 A n bad k x) = (term964 A n bad k x).
Proof. exact (MK_COMB (@lem385938 A n x bad) (@lem385939 A k x)). Qed.
Lemma lem385941 {A : Type'} (n : type977 A) (k : type967 A) (x : nat -> A) (bad : type976 A) : (term964 A n bad k x) = (term965 A n k x bad).
Proof. exact (eq_refl (term964 A n bad k x)). Qed.
Lemma lem385942 {A : Type'} (n : type977 A) (k : type967 A) (x : nat -> A) (bad : type976 A) : (term963 A n bad k x) = (term965 A n k x bad).
Proof. exact (TRANS (@lem385940 A n bad k x) (@lem385941 A n k x bad)). Qed.
Lemma lem385943 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) : (term966 A n bad k) = (term967 A n k bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem385942 A n k x bad)). Qed.
Lemma lem385944 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem385945 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) : (term968 A n bad k) = (term969 A n k bad).
Proof. exact (MK_COMB (@lem385944 A) (@lem385943 A n k bad)). Qed.
Lemma lem385946 {A : Type'} (n : type977 A) (bad : type976 A) : (term970 A n bad) = (term971 A n bad).
Proof. exact (fun_ext (fun k : type967 A => @lem385945 A n k bad)). Qed.
Lemma lem385947 {A : Type'} : (@ex ((nat -> A) -> (nat -> A) -> nat)) = (@ex ((nat -> A) -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> (nat -> A) -> nat))). Qed.
Lemma lem385948 {A : Type'} (n : type977 A) (bad : type976 A) : (term951 A n bad) = (term972 A n bad).
Proof. exact (MK_COMB (@lem385947 A) (@lem385946 A n bad)). Qed.
Lemma lem385949 {A : Type'} (n : type977 A) (bad : type976 A) : ((term950 A n bad) = (term951 A n bad)) = ((term944 A n bad) = (term972 A n bad)).
Proof. exact (MK_COMB (@lem385937 A n bad) (@lem385948 A n bad)). Qed.
Lemma lem385950 {A : Type'} (n : type977 A) (bad : type976 A) : (term944 A n bad) = (term972 A n bad).
Proof. exact (EQ_MP (@lem385949 A n bad) (@lem385924 A n bad)). Qed.
Lemma lem385951 {A : Type'} (bad : type976 A) : (term946 A bad) = (term973 A bad).
Proof. exact (fun_ext (fun n : type977 A => @lem385950 A n bad)). Qed.
Lemma lem385952 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem385953 {A : Type'} (bad : type976 A) : (term947 A bad) = (term974 A bad).
Proof. exact (MK_COMB (@lem385952 A) (@lem385951 A bad)). Qed.
Lemma lem385954 {A : Type'} (bad : type976 A) : (term926 A bad) = (term974 A bad).
Proof. exact (TRANS (@lem385920 A bad) (@lem385953 A bad)). Qed.
Lemma lem385955 {A : Type'} (bad : type976 A) : (term846 A bad) = (term974 A bad).
Proof. exact (TRANS (@lem385890 A bad) (@lem385954 A bad)). Qed.
Lemma lem385956 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem385957 {A : Type'} (bad : type976 A) : (term847 A bad) = (term975 A bad).
Proof. exact (MK_COMB (@lem385956) (@lem385955 A bad)). Qed.
Lemma lem385958 {A : Type'} (bad : type976 A) : (term806 A bad) = (term806 A bad).
Proof. exact (eq_refl (term806 A bad)). Qed.
Lemma lem385959 {A : Type'} (bad : type976 A) : (term848 A bad) = (term976 A bad).
Proof. exact (MK_COMB (@lem385957 A bad) (@lem385958 A bad)). Qed.
Lemma lem385961 {A : Type'} (P : A -> Prop) (Q : Prop) : (term166 A P Q) = (term167 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem385962 {A : Type'} (P : type246 A) (Q : Prop) : (term977 A P Q) = (term978 A P Q).
Proof. exact (@lem385961 (type977 A) P Q). Qed.
Lemma lem385963 {A : Type'} (bad : type976 A) : (term979 A bad) = (term980 A bad).
Proof. exact (@lem385962 A (term973 A bad) (term806 A bad)). Qed.
Lemma lem385964 {A : Type'} (n : type977 A) (bad : type976 A) : (term981 A bad n) = (term972 A n bad).
Proof. exact (eq_refl (term981 A bad n)). Qed.
Lemma lem385965 {A : Type'} (bad : type976 A) : (term982 A bad) = (term973 A bad).
Proof. exact (fun_ext (fun n : type977 A => @lem385964 A n bad)). Qed.
Lemma lem385966 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem385967 {A : Type'} (bad : type976 A) : (term983 A bad) = (term974 A bad).
Proof. exact (MK_COMB (@lem385966 A) (@lem385965 A bad)). Qed.
Lemma lem385968 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem385969 {A : Type'} (bad : type976 A) : (term984 A bad) = (term975 A bad).
Proof. exact (MK_COMB (@lem385968) (@lem385967 A bad)). Qed.
Lemma lem385970 {A : Type'} (bad : type976 A) : (term806 A bad) = (term806 A bad).
Proof. exact (eq_refl (term806 A bad)). Qed.
Lemma lem385971 {A : Type'} (bad : type976 A) : (term979 A bad) = (term976 A bad).
Proof. exact (MK_COMB (@lem385969 A bad) (@lem385970 A bad)). Qed.
Lemma lem385972 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem385973 {A : Type'} (bad : type976 A) : (term985 A bad) = (term986 A bad).
Proof. exact (MK_COMB (@lem385972) (@lem385971 A bad)). Qed.
Lemma lem385974 {A : Type'} (n : type977 A) (bad : type976 A) : (term981 A bad n) = (term972 A n bad).
Proof. exact (eq_refl (term981 A bad n)). Qed.
Lemma lem385975 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem385976 {A : Type'} (n : type977 A) (bad : type976 A) : (term987 A bad n) = (term988 A n bad).
Proof. exact (MK_COMB (@lem385975) (@lem385974 A n bad)). Qed.
Lemma lem385977 {A : Type'} (bad : type976 A) : (term806 A bad) = (term806 A bad).
Proof. exact (eq_refl (term806 A bad)). Qed.
Lemma lem385978 {A : Type'} (n : type977 A) (bad : type976 A) : (term989 A n bad) = (term990 A n bad).
Proof. exact (MK_COMB (@lem385976 A n bad) (@lem385977 A bad)). Qed.
Lemma lem385979 {A : Type'} (bad : type976 A) : (term991 A bad) = (term992 A bad).
Proof. exact (fun_ext (fun n : type977 A => @lem385978 A n bad)). Qed.
Lemma lem385980 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem385981 {A : Type'} (bad : type976 A) : (term980 A bad) = (term993 A bad).
Proof. exact (MK_COMB (@lem385980 A) (@lem385979 A bad)). Qed.
Lemma lem385982 {A : Type'} (bad : type976 A) : ((term979 A bad) = (term980 A bad)) = ((term976 A bad) = (term993 A bad)).
Proof. exact (MK_COMB (@lem385973 A bad) (@lem385981 A bad)). Qed.
Lemma lem385983 {A : Type'} (bad : type976 A) : (term976 A bad) = (term993 A bad).
Proof. exact (EQ_MP (@lem385982 A bad) (@lem385963 A bad)). Qed.
Lemma lem385985 {A : Type'} (P : A -> Prop) (Q : Prop) : (term166 A P Q) = (term167 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem385986 {A : Type'} (P : type244 A) (Q : Prop) : (term994 A P Q) = (term995 A P Q).
Proof. exact (@lem385985 (type967 A) P Q). Qed.
Lemma lem385987 {A : Type'} (n : type977 A) (bad : type976 A) : (term996 A n bad) = (term997 A n bad).
Proof. exact (@lem385986 A (term971 A n bad) (term806 A bad)). Qed.
Lemma lem385988 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) : (term998 A n bad k) = (term969 A n k bad).
Proof. exact (eq_refl (term998 A n bad k)). Qed.
Lemma lem385989 {A : Type'} (n : type977 A) (bad : type976 A) : (term999 A n bad) = (term971 A n bad).
Proof. exact (fun_ext (fun k : type967 A => @lem385988 A n k bad)). Qed.
Lemma lem385990 {A : Type'} : (@ex ((nat -> A) -> (nat -> A) -> nat)) = (@ex ((nat -> A) -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> (nat -> A) -> nat))). Qed.
Lemma lem385991 {A : Type'} (n : type977 A) (bad : type976 A) : (term1000 A n bad) = (term972 A n bad).
Proof. exact (MK_COMB (@lem385990 A) (@lem385989 A n bad)). Qed.
Lemma lem385992 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem385993 {A : Type'} (n : type977 A) (bad : type976 A) : (term1001 A n bad) = (term988 A n bad).
Proof. exact (MK_COMB (@lem385992) (@lem385991 A n bad)). Qed.
Lemma lem385994 {A : Type'} (bad : type976 A) : (term806 A bad) = (term806 A bad).
Proof. exact (eq_refl (term806 A bad)). Qed.
Lemma lem385995 {A : Type'} (n : type977 A) (bad : type976 A) : (term996 A n bad) = (term990 A n bad).
Proof. exact (MK_COMB (@lem385993 A n bad) (@lem385994 A bad)). Qed.
Lemma lem385996 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem385997 {A : Type'} (n : type977 A) (bad : type976 A) : (term1002 A n bad) = (term1003 A n bad).
Proof. exact (MK_COMB (@lem385996) (@lem385995 A n bad)). Qed.
Lemma lem385998 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) : (term998 A n bad k) = (term969 A n k bad).
Proof. exact (eq_refl (term998 A n bad k)). Qed.
Lemma lem385999 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem386000 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) : (term1004 A n bad k) = (term1005 A n k bad).
Proof. exact (MK_COMB (@lem385999) (@lem385998 A n k bad)). Qed.
Lemma lem386001 {A : Type'} (bad : type976 A) : (term806 A bad) = (term806 A bad).
Proof. exact (eq_refl (term806 A bad)). Qed.
Lemma lem386002 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) : (term1006 A n k bad) = (term1007 A n k bad).
Proof. exact (MK_COMB (@lem386000 A n k bad) (@lem386001 A bad)). Qed.
Lemma lem386003 {A : Type'} (n : type977 A) (bad : type976 A) : (term1008 A n bad) = (term1009 A n bad).
Proof. exact (fun_ext (fun k : type967 A => @lem386002 A n k bad)). Qed.
Lemma lem386004 {A : Type'} : (@ex ((nat -> A) -> (nat -> A) -> nat)) = (@ex ((nat -> A) -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> (nat -> A) -> nat))). Qed.
Lemma lem386005 {A : Type'} (n : type977 A) (bad : type976 A) : (term997 A n bad) = (term1010 A n bad).
Proof. exact (MK_COMB (@lem386004 A) (@lem386003 A n bad)). Qed.
Lemma lem386006 {A : Type'} (n : type977 A) (bad : type976 A) : ((term996 A n bad) = (term997 A n bad)) = ((term990 A n bad) = (term1010 A n bad)).
Proof. exact (MK_COMB (@lem385997 A n bad) (@lem386005 A n bad)). Qed.
Lemma lem386007 {A : Type'} (n : type977 A) (bad : type976 A) : (term990 A n bad) = (term1010 A n bad).
Proof. exact (EQ_MP (@lem386006 A n bad) (@lem385987 A n bad)). Qed.
Lemma lem386009 {A : Type'} (P : Prop) (Q : A -> Prop) : (term255 A P Q) = (term256 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem386010 {A : Type'} (P : Prop) (Q : type976 A) : (term1011 A P Q) = (term1012 A P Q).
Proof. exact (@lem386009 (nat -> A) P Q). Qed.
Lemma lem386011 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) : (term1007 A n k bad) = (term1013 A n k bad).
Proof. exact (@lem386010 A (term969 A n k bad) bad). Qed.
Lemma lem386012 {A : Type'} (n : type977 A) (bad : type976 A) : (term1009 A n bad) = (term1014 A n bad).
Proof. exact (fun_ext (fun k : type967 A => @lem386011 A n k bad)). Qed.
Lemma lem386013 {A : Type'} : (@ex ((nat -> A) -> (nat -> A) -> nat)) = (@ex ((nat -> A) -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> (nat -> A) -> nat))). Qed.
Lemma lem386014 {A : Type'} (n : type977 A) (bad : type976 A) : (term1010 A n bad) = (term1015 A n bad).
Proof. exact (MK_COMB (@lem386013 A) (@lem386012 A n bad)). Qed.
Lemma lem386015 {A : Type'} (n : type977 A) (bad : type976 A) : (term990 A n bad) = (term1015 A n bad).
Proof. exact (TRANS (@lem386007 A n bad) (@lem386014 A n bad)). Qed.
Lemma lem386016 {A : Type'} (bad : type976 A) : (term992 A bad) = (term1016 A bad).
Proof. exact (fun_ext (fun n : type977 A => @lem386015 A n bad)). Qed.
Lemma lem386017 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem386018 {A : Type'} (bad : type976 A) : (term993 A bad) = (term1017 A bad).
Proof. exact (MK_COMB (@lem386017 A) (@lem386016 A bad)). Qed.
Lemma lem386019 {A : Type'} (bad : type976 A) : (term976 A bad) = (term1017 A bad).
Proof. exact (TRANS (@lem385983 A bad) (@lem386018 A bad)). Qed.
Lemma lem386020 {A : Type'} (bad : type976 A) : (term848 A bad) = (term1017 A bad).
Proof. exact (TRANS (@lem385959 A bad) (@lem386019 A bad)). Qed.
Lemma lem386021 {A : Type'} (lt2 : type1402 A) : (term819 A lt2) = (term819 A lt2).
Proof. exact (eq_refl (term819 A lt2)). Qed.
Lemma lem386022 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term849 A lt2 bad) = (term1018 A lt2 bad).
Proof. exact (MK_COMB (@lem386021 A lt2) (@lem386020 A bad)). Qed.
Lemma lem386024 {A : Type'} (P : Prop) (Q : A -> Prop) : (term255 A P Q) = (term256 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem386025 {A : Type'} (P : Prop) (Q : type246 A) : (term1019 A P Q) = (term1020 A P Q).
Proof. exact (@lem386024 (type977 A) P Q). Qed.
Lemma lem386026 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1021 A lt2 bad) = (term1022 A lt2 bad).
Proof. exact (@lem386025 A (@WF A lt2) (term1016 A bad)). Qed.
Lemma lem386027 {A : Type'} (n : type977 A) (bad : type976 A) : (term1023 A bad n) = (term1015 A n bad).
Proof. exact (eq_refl (term1023 A bad n)). Qed.
Lemma lem386028 {A : Type'} (bad : type976 A) : (term1024 A bad) = (term1016 A bad).
Proof. exact (fun_ext (fun n : type977 A => @lem386027 A n bad)). Qed.
Lemma lem386029 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem386030 {A : Type'} (bad : type976 A) : (term1025 A bad) = (term1017 A bad).
Proof. exact (MK_COMB (@lem386029 A) (@lem386028 A bad)). Qed.
Lemma lem386031 {A : Type'} (lt2 : type1402 A) : (term819 A lt2) = (term819 A lt2).
Proof. exact (eq_refl (term819 A lt2)). Qed.
Lemma lem386032 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1021 A lt2 bad) = (term1018 A lt2 bad).
Proof. exact (MK_COMB (@lem386031 A lt2) (@lem386030 A bad)). Qed.
Lemma lem386033 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem386034 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1026 A lt2 bad) = (term1027 A lt2 bad).
Proof. exact (MK_COMB (@lem386033) (@lem386032 A lt2 bad)). Qed.
Lemma lem386035 {A : Type'} (n : type977 A) (bad : type976 A) : (term1023 A bad n) = (term1015 A n bad).
Proof. exact (eq_refl (term1023 A bad n)). Qed.
Lemma lem386036 {A : Type'} (lt2 : type1402 A) : (term819 A lt2) = (term819 A lt2).
Proof. exact (eq_refl (term819 A lt2)). Qed.
Lemma lem386037 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term1028 A lt2 bad n) = (term1029 A lt2 n bad).
Proof. exact (MK_COMB (@lem386036 A lt2) (@lem386035 A n bad)). Qed.
Lemma lem386038 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1030 A lt2 bad) = (term1031 A lt2 bad).
Proof. exact (fun_ext (fun n : type977 A => @lem386037 A lt2 n bad)). Qed.
Lemma lem386039 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem386040 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1022 A lt2 bad) = (term1032 A lt2 bad).
Proof. exact (MK_COMB (@lem386039 A) (@lem386038 A lt2 bad)). Qed.
Lemma lem386041 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : ((term1021 A lt2 bad) = (term1022 A lt2 bad)) = ((term1018 A lt2 bad) = (term1032 A lt2 bad)).
Proof. exact (MK_COMB (@lem386034 A lt2 bad) (@lem386040 A lt2 bad)). Qed.
Lemma lem386042 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1018 A lt2 bad) = (term1032 A lt2 bad).
Proof. exact (EQ_MP (@lem386041 A lt2 bad) (@lem386026 A lt2 bad)). Qed.
Lemma lem386044 {A : Type'} (P : Prop) (Q : A -> Prop) : (term255 A P Q) = (term256 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem386045 {A : Type'} (P : Prop) (Q : type244 A) : (term1033 A P Q) = (term1034 A P Q).
Proof. exact (@lem386044 (type967 A) P Q). Qed.
Lemma lem386046 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term1035 A lt2 n bad) = (term1036 A lt2 n bad).
Proof. exact (@lem386045 A (@WF A lt2) (term1014 A n bad)). Qed.
Lemma lem386047 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) : (term1037 A n bad k) = (term1013 A n k bad).
Proof. exact (eq_refl (term1037 A n bad k)). Qed.
Lemma lem386048 {A : Type'} (n : type977 A) (bad : type976 A) : (term1038 A n bad) = (term1014 A n bad).
Proof. exact (fun_ext (fun k : type967 A => @lem386047 A n k bad)). Qed.
Lemma lem386049 {A : Type'} : (@ex ((nat -> A) -> (nat -> A) -> nat)) = (@ex ((nat -> A) -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> (nat -> A) -> nat))). Qed.
Lemma lem386050 {A : Type'} (n : type977 A) (bad : type976 A) : (term1039 A n bad) = (term1015 A n bad).
Proof. exact (MK_COMB (@lem386049 A) (@lem386048 A n bad)). Qed.
Lemma lem386051 {A : Type'} (lt2 : type1402 A) : (term819 A lt2) = (term819 A lt2).
Proof. exact (eq_refl (term819 A lt2)). Qed.
Lemma lem386052 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term1035 A lt2 n bad) = (term1029 A lt2 n bad).
Proof. exact (MK_COMB (@lem386051 A lt2) (@lem386050 A n bad)). Qed.
Lemma lem386053 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem386054 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term1040 A lt2 n bad) = (term1041 A lt2 n bad).
Proof. exact (MK_COMB (@lem386053) (@lem386052 A lt2 n bad)). Qed.
Lemma lem386055 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) : (term1037 A n bad k) = (term1013 A n k bad).
Proof. exact (eq_refl (term1037 A n bad k)). Qed.
Lemma lem386056 {A : Type'} (lt2 : type1402 A) : (term819 A lt2) = (term819 A lt2).
Proof. exact (eq_refl (term819 A lt2)). Qed.
Lemma lem386057 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) : (term1042 A lt2 n bad k) = (term1043 A lt2 n k bad).
Proof. exact (MK_COMB (@lem386056 A lt2) (@lem386055 A n k bad)). Qed.
Lemma lem386058 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term1044 A lt2 n bad) = (term1045 A lt2 n bad).
Proof. exact (fun_ext (fun k : type967 A => @lem386057 A lt2 n k bad)). Qed.
Lemma lem386059 {A : Type'} : (@ex ((nat -> A) -> (nat -> A) -> nat)) = (@ex ((nat -> A) -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> (nat -> A) -> nat))). Qed.
Lemma lem386060 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term1036 A lt2 n bad) = (term1046 A lt2 n bad).
Proof. exact (MK_COMB (@lem386059 A) (@lem386058 A lt2 n bad)). Qed.
Lemma lem386061 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : ((term1035 A lt2 n bad) = (term1036 A lt2 n bad)) = ((term1029 A lt2 n bad) = (term1046 A lt2 n bad)).
Proof. exact (MK_COMB (@lem386054 A lt2 n bad) (@lem386060 A lt2 n bad)). Qed.
Lemma lem386062 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term1029 A lt2 n bad) = (term1046 A lt2 n bad).
Proof. exact (EQ_MP (@lem386061 A lt2 n bad) (@lem386046 A lt2 n bad)). Qed.
Lemma lem386064 {A : Type'} (P : Prop) (Q : A -> Prop) : (term255 A P Q) = (term256 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem386065 {A : Type'} (P : Prop) (Q : type976 A) : (term1011 A P Q) = (term1012 A P Q).
Proof. exact (@lem386064 (nat -> A) P Q). Qed.
Lemma lem386066 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) : (term1047 A lt2 n k bad) = (term1048 A lt2 n k bad).
Proof. exact (@lem386065 A (@WF A lt2) (term1049 A n k bad)). Qed.
Lemma lem386067 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) (x : nat -> A) : (term1050 A n k bad x) = (term1051 A n k bad x).
Proof. exact (eq_refl (term1050 A n k bad x)). Qed.
Lemma lem386068 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) : (term1052 A n k bad) = (term1049 A n k bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem386067 A n k bad x)). Qed.
Lemma lem386069 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem386070 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) : (term1053 A n k bad) = (term1013 A n k bad).
Proof. exact (MK_COMB (@lem386069 A) (@lem386068 A n k bad)). Qed.
Lemma lem386071 {A : Type'} (lt2 : type1402 A) : (term819 A lt2) = (term819 A lt2).
Proof. exact (eq_refl (term819 A lt2)). Qed.
Lemma lem386072 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) : (term1047 A lt2 n k bad) = (term1043 A lt2 n k bad).
Proof. exact (MK_COMB (@lem386071 A lt2) (@lem386070 A n k bad)). Qed.
Lemma lem386073 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem386074 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) : (term1054 A lt2 n k bad) = (term1055 A lt2 n k bad).
Proof. exact (MK_COMB (@lem386073) (@lem386072 A lt2 n k bad)). Qed.
Lemma lem386075 {A : Type'} (n : type977 A) (k : type967 A) (bad : type976 A) (x : nat -> A) : (term1050 A n k bad x) = (term1051 A n k bad x).
Proof. exact (eq_refl (term1050 A n k bad x)). Qed.
Lemma lem386076 {A : Type'} (lt2 : type1402 A) : (term819 A lt2) = (term819 A lt2).
Proof. exact (eq_refl (term819 A lt2)). Qed.
Lemma lem386077 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) (x : nat -> A) : (term1056 A lt2 n k bad x) = (term1057 A lt2 n k bad x).
Proof. exact (MK_COMB (@lem386076 A lt2) (@lem386075 A n k bad x)). Qed.
Lemma lem386078 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) : (term1058 A lt2 n k bad) = (term1059 A lt2 n k bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem386077 A lt2 n k bad x)). Qed.
Lemma lem386079 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem386080 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) : (term1048 A lt2 n k bad) = (term1060 A lt2 n k bad).
Proof. exact (MK_COMB (@lem386079 A) (@lem386078 A lt2 n k bad)). Qed.
Lemma lem386081 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) : ((term1047 A lt2 n k bad) = (term1048 A lt2 n k bad)) = ((term1043 A lt2 n k bad) = (term1060 A lt2 n k bad)).
Proof. exact (MK_COMB (@lem386074 A lt2 n k bad) (@lem386080 A lt2 n k bad)). Qed.
Lemma lem386082 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) : (term1043 A lt2 n k bad) = (term1060 A lt2 n k bad).
Proof. exact (EQ_MP (@lem386081 A lt2 n k bad) (@lem386066 A lt2 n k bad)). Qed.
Lemma lem386083 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term1045 A lt2 n bad) = (term1061 A lt2 n bad).
Proof. exact (fun_ext (fun k : type967 A => @lem386082 A lt2 n k bad)). Qed.
Lemma lem386084 {A : Type'} : (@ex ((nat -> A) -> (nat -> A) -> nat)) = (@ex ((nat -> A) -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> (nat -> A) -> nat))). Qed.
Lemma lem386085 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term1046 A lt2 n bad) = (term1062 A lt2 n bad).
Proof. exact (MK_COMB (@lem386084 A) (@lem386083 A lt2 n bad)). Qed.
Lemma lem386086 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term1029 A lt2 n bad) = (term1062 A lt2 n bad).
Proof. exact (TRANS (@lem386062 A lt2 n bad) (@lem386085 A lt2 n bad)). Qed.
Lemma lem386087 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1031 A lt2 bad) = (term1063 A lt2 bad).
Proof. exact (fun_ext (fun n : type977 A => @lem386086 A lt2 n bad)). Qed.
Lemma lem386088 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem386089 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1032 A lt2 bad) = (term1064 A lt2 bad).
Proof. exact (MK_COMB (@lem386088 A) (@lem386087 A lt2 bad)). Qed.
Lemma lem386090 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1018 A lt2 bad) = (term1064 A lt2 bad).
Proof. exact (TRANS (@lem386042 A lt2 bad) (@lem386089 A lt2 bad)). Qed.
Lemma lem386091 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term849 A lt2 bad) = (term1064 A lt2 bad).
Proof. exact (TRANS (@lem386022 A lt2 bad) (@lem386090 A lt2 bad)). Qed.
Lemma lem386092 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1861 A n x lt2 bad) = (term1968 A n x lt2 bad).
Proof. exact (MK_COMB (@lem385779 A n bad lt2 x) (@lem386091 A lt2 bad)). Qed.
Lemma lem386094 {A : Type'} (P : A -> Prop) (Q : Prop) : (term166 A P Q) = (term167 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem386095 {A : Type'} (P : type958 A) (Q : Prop) : (term1188 A P Q) = (term1189 A P Q).
Proof. exact (@lem386094 (type1604 A) P Q). Qed.
Lemma lem386096 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1969 A n x lt2 bad) = (term1970 A n x lt2 bad).
Proof. exact (@lem386095 A (term1965 A n bad lt2 x) (term1064 A lt2 bad)). Qed.
Lemma lem386097 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1971 A n bad lt2 x y) = (term1964 A n y bad lt2 x).
Proof. exact (eq_refl (term1971 A n bad lt2 x y)). Qed.
Lemma lem386098 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1972 A n bad lt2 x) = (term1965 A n bad lt2 x).
Proof. exact (fun_ext (fun y : type1604 A => @lem386097 A n y bad lt2 x)). Qed.
Lemma lem386099 {A : Type'} : (@ex (nat -> nat -> A)) = (@ex (nat -> nat -> A)).
Proof. exact (eq_refl (@ex (nat -> nat -> A))). Qed.
Lemma lem386100 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1973 A n bad lt2 x) = (term1966 A n bad lt2 x).
Proof. exact (MK_COMB (@lem386099 A) (@lem386098 A n bad lt2 x)). Qed.
Lemma lem386101 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem386102 {A : Type'} (n : nat) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1974 A n bad lt2 x) = (term1967 A n bad lt2 x).
Proof. exact (MK_COMB (@lem386101) (@lem386100 A n bad lt2 x)). Qed.
Lemma lem386103 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1064 A lt2 bad) = (term1064 A lt2 bad).
Proof. exact (eq_refl (term1064 A lt2 bad)). Qed.
Lemma lem386104 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1969 A n x lt2 bad) = (term1968 A n x lt2 bad).
Proof. exact (MK_COMB (@lem386102 A n bad lt2 x) (@lem386103 A lt2 bad)). Qed.
Lemma lem386105 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem386106 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1975 A n x lt2 bad) = (term1976 A n x lt2 bad).
Proof. exact (MK_COMB (@lem386105) (@lem386104 A n x lt2 bad)). Qed.
Lemma lem386107 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1971 A n bad lt2 x y) = (term1964 A n y bad lt2 x).
Proof. exact (eq_refl (term1971 A n bad lt2 x y)). Qed.
Lemma lem386108 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem386109 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1977 A n bad lt2 x y) = (term1978 A n y bad lt2 x).
Proof. exact (MK_COMB (@lem386108) (@lem386107 A n y bad lt2 x)). Qed.
Lemma lem386110 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1064 A lt2 bad) = (term1064 A lt2 bad).
Proof. exact (eq_refl (term1064 A lt2 bad)). Qed.
Lemma lem386111 {A : Type'} (n : nat) (y : type1604 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1979 A n x y lt2 bad) = (term1980 A n y x lt2 bad).
Proof. exact (MK_COMB (@lem386109 A n y bad lt2 x) (@lem386110 A lt2 bad)). Qed.
Lemma lem386112 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1981 A n x lt2 bad) = (term1982 A n x lt2 bad).
Proof. exact (fun_ext (fun y : type1604 A => @lem386111 A n y x lt2 bad)). Qed.
Lemma lem386113 {A : Type'} : (@ex (nat -> nat -> A)) = (@ex (nat -> nat -> A)).
Proof. exact (eq_refl (@ex (nat -> nat -> A))). Qed.
Lemma lem386114 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1970 A n x lt2 bad) = (term1983 A n x lt2 bad).
Proof. exact (MK_COMB (@lem386113 A) (@lem386112 A n x lt2 bad)). Qed.
Lemma lem386115 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : ((term1969 A n x lt2 bad) = (term1970 A n x lt2 bad)) = ((term1968 A n x lt2 bad) = (term1983 A n x lt2 bad)).
Proof. exact (MK_COMB (@lem386106 A n x lt2 bad) (@lem386114 A n x lt2 bad)). Qed.
Lemma lem386116 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1968 A n x lt2 bad) = (term1983 A n x lt2 bad).
Proof. exact (EQ_MP (@lem386115 A n x lt2 bad) (@lem386096 A n x lt2 bad)). Qed.
Lemma lem386118 {A : Type'} (P : A -> Prop) (Q : Prop) : (term166 A P Q) = (term167 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem386119 {A : Type'} (P : type929 A) (Q : Prop) : (term1984 A P Q) = (term1985 A P Q).
Proof. exact (@lem386118 (type1584 A) P Q). Qed.
Lemma lem386120 {A : Type'} (n : nat) (y : type1604 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1986 A n y x lt2 bad) = (term1987 A n y x lt2 bad).
Proof. exact (@lem386119 A (term1963 A n y bad lt2 x) (term1064 A lt2 bad)). Qed.
Lemma lem386121 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (x : nat -> A) : (term1988 A n y bad lt2 x k) = (term1961 A n y bad k lt2 x).
Proof. exact (eq_refl (term1988 A n y bad lt2 x k)). Qed.
Lemma lem386122 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1989 A n y bad lt2 x) = (term1963 A n y bad lt2 x).
Proof. exact (fun_ext (fun k : type1584 A => @lem386121 A n y bad k lt2 x)). Qed.
Lemma lem386123 {A : Type'} : (@ex (nat -> (nat -> A) -> nat)) = (@ex (nat -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex (nat -> (nat -> A) -> nat))). Qed.
Lemma lem386124 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1990 A n y bad lt2 x) = (term1964 A n y bad lt2 x).
Proof. exact (MK_COMB (@lem386123 A) (@lem386122 A n y bad lt2 x)). Qed.
Lemma lem386125 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem386126 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (lt2 : type1402 A) (x : nat -> A) : (term1991 A n y bad lt2 x) = (term1978 A n y bad lt2 x).
Proof. exact (MK_COMB (@lem386125) (@lem386124 A n y bad lt2 x)). Qed.
Lemma lem386127 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1064 A lt2 bad) = (term1064 A lt2 bad).
Proof. exact (eq_refl (term1064 A lt2 bad)). Qed.
Lemma lem386128 {A : Type'} (n : nat) (y : type1604 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1986 A n y x lt2 bad) = (term1980 A n y x lt2 bad).
Proof. exact (MK_COMB (@lem386126 A n y bad lt2 x) (@lem386127 A lt2 bad)). Qed.
Lemma lem386129 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem386130 {A : Type'} (n : nat) (y : type1604 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1992 A n y x lt2 bad) = (term1993 A n y x lt2 bad).
Proof. exact (MK_COMB (@lem386129) (@lem386128 A n y x lt2 bad)). Qed.
Lemma lem386131 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (x : nat -> A) : (term1988 A n y bad lt2 x k) = (term1961 A n y bad k lt2 x).
Proof. exact (eq_refl (term1988 A n y bad lt2 x k)). Qed.
Lemma lem386132 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem386133 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (x : nat -> A) : (term1994 A n y bad lt2 x k) = (term1995 A n y bad k lt2 x).
Proof. exact (MK_COMB (@lem386132) (@lem386131 A n y bad k lt2 x)). Qed.
Lemma lem386134 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term1064 A lt2 bad) = (term1064 A lt2 bad).
Proof. exact (eq_refl (term1064 A lt2 bad)). Qed.
Lemma lem386135 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1996 A n y x k lt2 bad) = (term1997 A n y k x lt2 bad).
Proof. exact (MK_COMB (@lem386133 A n y bad k lt2 x) (@lem386134 A lt2 bad)). Qed.
Lemma lem386136 {A : Type'} (n : nat) (y : type1604 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1998 A n y x lt2 bad) = (term1999 A n y x lt2 bad).
Proof. exact (fun_ext (fun k : type1584 A => @lem386135 A n y k x lt2 bad)). Qed.
Lemma lem386137 {A : Type'} : (@ex (nat -> (nat -> A) -> nat)) = (@ex (nat -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex (nat -> (nat -> A) -> nat))). Qed.
Lemma lem386138 {A : Type'} (n : nat) (y : type1604 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1987 A n y x lt2 bad) = (term2000 A n y x lt2 bad).
Proof. exact (MK_COMB (@lem386137 A) (@lem386136 A n y x lt2 bad)). Qed.
Lemma lem386139 {A : Type'} (n : nat) (y : type1604 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : ((term1986 A n y x lt2 bad) = (term1987 A n y x lt2 bad)) = ((term1980 A n y x lt2 bad) = (term2000 A n y x lt2 bad)).
Proof. exact (MK_COMB (@lem386130 A n y x lt2 bad) (@lem386138 A n y x lt2 bad)). Qed.
Lemma lem386140 {A : Type'} (n : nat) (y : type1604 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1980 A n y x lt2 bad) = (term2000 A n y x lt2 bad).
Proof. exact (EQ_MP (@lem386139 A n y x lt2 bad) (@lem386120 A n y x lt2 bad)). Qed.
Lemma lem386142 {A : Type'} (P : Prop) (Q : A -> Prop) : (term255 A P Q) = (term256 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem386143 {A : Type'} (P : Prop) (Q : type246 A) : (term1019 A P Q) = (term1020 A P Q).
Proof. exact (@lem386142 (type977 A) P Q). Qed.
Lemma lem386144 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term2001 A n y k x lt2 bad) = (term2002 A n y k x lt2 bad).
Proof. exact (@lem386143 A (term1961 A n y bad k lt2 x) (term1063 A lt2 bad)). Qed.
Lemma lem386145 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term2003 A lt2 bad n) = (term1062 A lt2 n bad).
Proof. exact (eq_refl (term2003 A lt2 bad n)). Qed.
Lemma lem386146 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term2004 A lt2 bad) = (term1063 A lt2 bad).
Proof. exact (fun_ext (fun n : type977 A => @lem386145 A lt2 n bad)). Qed.
Lemma lem386147 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem386148 {A : Type'} (lt2 : type1402 A) (bad : type976 A) : (term2005 A lt2 bad) = (term1064 A lt2 bad).
Proof. exact (MK_COMB (@lem386147 A) (@lem386146 A lt2 bad)). Qed.
Lemma lem386149 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (x : nat -> A) : (term1995 A n y bad k lt2 x) = (term1995 A n y bad k lt2 x).
Proof. exact (eq_refl (term1995 A n y bad k lt2 x)). Qed.
Lemma lem386150 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term2001 A n y k x lt2 bad) = (term1997 A n y k x lt2 bad).
Proof. exact (MK_COMB (@lem386149 A n y bad k lt2 x) (@lem386148 A lt2 bad)). Qed.
Lemma lem386151 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem386152 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term2006 A n y k x lt2 bad) = (term2007 A n y k x lt2 bad).
Proof. exact (MK_COMB (@lem386151) (@lem386150 A n y k x lt2 bad)). Qed.
Lemma lem386153 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term2003 A lt2 bad n) = (term1062 A lt2 n bad).
Proof. exact (eq_refl (term2003 A lt2 bad n)). Qed.
Lemma lem386154 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (x : nat -> A) : (term1995 A n y bad k lt2 x) = (term1995 A n y bad k lt2 x).
Proof. exact (eq_refl (term1995 A n y bad k lt2 x)). Qed.
Lemma lem386155 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (bad : type976 A) : (term2008 A n y k x lt2 bad n') = (term2009 A n y k x lt2 n' bad).
Proof. exact (MK_COMB (@lem386154 A n y bad k lt2 x) (@lem386153 A lt2 n' bad)). Qed.
Lemma lem386156 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term2010 A n y k x lt2 bad) = (term2011 A n y k x lt2 bad).
Proof. exact (fun_ext (fun n' : type977 A => @lem386155 A n y k x lt2 n' bad)). Qed.
Lemma lem386157 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem386158 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term2002 A n y k x lt2 bad) = (term2012 A n y k x lt2 bad).
Proof. exact (MK_COMB (@lem386157 A) (@lem386156 A n y k x lt2 bad)). Qed.
Lemma lem386159 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : ((term2001 A n y k x lt2 bad) = (term2002 A n y k x lt2 bad)) = ((term1997 A n y k x lt2 bad) = (term2012 A n y k x lt2 bad)).
Proof. exact (MK_COMB (@lem386152 A n y k x lt2 bad) (@lem386158 A n y k x lt2 bad)). Qed.
Lemma lem386160 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1997 A n y k x lt2 bad) = (term2012 A n y k x lt2 bad).
Proof. exact (EQ_MP (@lem386159 A n y k x lt2 bad) (@lem386144 A n y k x lt2 bad)). Qed.
Lemma lem386162 {A : Type'} (P : Prop) (Q : A -> Prop) : (term255 A P Q) = (term256 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem386163 {A : Type'} (P : Prop) (Q : type244 A) : (term1033 A P Q) = (term1034 A P Q).
Proof. exact (@lem386162 (type967 A) P Q). Qed.
Lemma lem386164 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (bad : type976 A) : (term2013 A n y k x lt2 n' bad) = (term2014 A n y k x lt2 n' bad).
Proof. exact (@lem386163 A (term1961 A n y bad k lt2 x) (term1061 A lt2 n' bad)). Qed.
Lemma lem386165 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) : (term2015 A lt2 n bad k) = (term1060 A lt2 n k bad).
Proof. exact (eq_refl (term2015 A lt2 n bad k)). Qed.
Lemma lem386166 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term2016 A lt2 n bad) = (term1061 A lt2 n bad).
Proof. exact (fun_ext (fun k : type967 A => @lem386165 A lt2 n k bad)). Qed.
Lemma lem386167 {A : Type'} : (@ex ((nat -> A) -> (nat -> A) -> nat)) = (@ex ((nat -> A) -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> (nat -> A) -> nat))). Qed.
Lemma lem386168 {A : Type'} (lt2 : type1402 A) (n : type977 A) (bad : type976 A) : (term2017 A lt2 n bad) = (term1062 A lt2 n bad).
Proof. exact (MK_COMB (@lem386167 A) (@lem386166 A lt2 n bad)). Qed.
Lemma lem386169 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (x : nat -> A) : (term1995 A n y bad k lt2 x) = (term1995 A n y bad k lt2 x).
Proof. exact (eq_refl (term1995 A n y bad k lt2 x)). Qed.
Lemma lem386170 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (bad : type976 A) : (term2013 A n y k x lt2 n' bad) = (term2009 A n y k x lt2 n' bad).
Proof. exact (MK_COMB (@lem386169 A n y bad k lt2 x) (@lem386168 A lt2 n' bad)). Qed.
Lemma lem386171 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem386172 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (bad : type976 A) : (term2018 A n y k x lt2 n' bad) = (term2019 A n y k x lt2 n' bad).
Proof. exact (MK_COMB (@lem386171) (@lem386170 A n y k x lt2 n' bad)). Qed.
Lemma lem386173 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) : (term2015 A lt2 n bad k) = (term1060 A lt2 n k bad).
Proof. exact (eq_refl (term2015 A lt2 n bad k)). Qed.
Lemma lem386174 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (x : nat -> A) : (term1995 A n y bad k lt2 x) = (term1995 A n y bad k lt2 x).
Proof. exact (eq_refl (term1995 A n y bad k lt2 x)). Qed.
Lemma lem386175 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) : (term2020 A n y k x lt2 n' bad k') = (term2021 A n y k x lt2 n' k' bad).
Proof. exact (MK_COMB (@lem386174 A n y bad k lt2 x) (@lem386173 A lt2 n' k' bad)). Qed.
Lemma lem386176 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (bad : type976 A) : (term2022 A n y k x lt2 n' bad) = (term2023 A n y k x lt2 n' bad).
Proof. exact (fun_ext (fun k' : type967 A => @lem386175 A n y k x lt2 n' k' bad)). Qed.
Lemma lem386177 {A : Type'} : (@ex ((nat -> A) -> (nat -> A) -> nat)) = (@ex ((nat -> A) -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> (nat -> A) -> nat))). Qed.
Lemma lem386178 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (bad : type976 A) : (term2014 A n y k x lt2 n' bad) = (term2024 A n y k x lt2 n' bad).
Proof. exact (MK_COMB (@lem386177 A) (@lem386176 A n y k x lt2 n' bad)). Qed.
Lemma lem386179 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (bad : type976 A) : ((term2013 A n y k x lt2 n' bad) = (term2014 A n y k x lt2 n' bad)) = ((term2009 A n y k x lt2 n' bad) = (term2024 A n y k x lt2 n' bad)).
Proof. exact (MK_COMB (@lem386172 A n y k x lt2 n' bad) (@lem386178 A n y k x lt2 n' bad)). Qed.
Lemma lem386180 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (bad : type976 A) : (term2009 A n y k x lt2 n' bad) = (term2024 A n y k x lt2 n' bad).
Proof. exact (EQ_MP (@lem386179 A n y k x lt2 n' bad) (@lem386164 A n y k x lt2 n' bad)). Qed.
Lemma lem386182 {A : Type'} (P : Prop) (Q : A -> Prop) : (term255 A P Q) = (term256 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem386183 {A : Type'} (P : Prop) (Q : type976 A) : (term1011 A P Q) = (term1012 A P Q).
Proof. exact (@lem386182 (nat -> A) P Q). Qed.
Lemma lem386184 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) : (term2025 A n y k x lt2 n' k' bad) = (term2026 A n y k x lt2 n' k' bad).
Proof. exact (@lem386183 A (term1961 A n y bad k lt2 x) (term1059 A lt2 n' k' bad)). Qed.
Lemma lem386185 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) (x : nat -> A) : (term2027 A lt2 n k bad x) = (term1057 A lt2 n k bad x).
Proof. exact (eq_refl (term2027 A lt2 n k bad x)). Qed.
Lemma lem386186 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) : (term2028 A lt2 n k bad) = (term1059 A lt2 n k bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem386185 A lt2 n k bad x)). Qed.
Lemma lem386187 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem386188 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) : (term2029 A lt2 n k bad) = (term1060 A lt2 n k bad).
Proof. exact (MK_COMB (@lem386187 A) (@lem386186 A lt2 n k bad)). Qed.
Lemma lem386189 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (x : nat -> A) : (term1995 A n y bad k lt2 x) = (term1995 A n y bad k lt2 x).
Proof. exact (eq_refl (term1995 A n y bad k lt2 x)). Qed.
Lemma lem386190 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) : (term2025 A n y k x lt2 n' k' bad) = (term2021 A n y k x lt2 n' k' bad).
Proof. exact (MK_COMB (@lem386189 A n y bad k lt2 x) (@lem386188 A lt2 n' k' bad)). Qed.
Lemma lem386191 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem386192 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) : (term2030 A n y k x lt2 n' k' bad) = (term2031 A n y k x lt2 n' k' bad).
Proof. exact (MK_COMB (@lem386191) (@lem386190 A n y k x lt2 n' k' bad)). Qed.
Lemma lem386193 {A : Type'} (lt2 : type1402 A) (n : type977 A) (k : type967 A) (bad : type976 A) (x' : nat -> A) : (term2027 A lt2 n k bad x') = (term1057 A lt2 n k bad x').
Proof. exact (eq_refl (term2027 A lt2 n k bad x')). Qed.
Lemma lem386194 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k : type1584 A) (lt2 : type1402 A) (x : nat -> A) : (term1995 A n y bad k lt2 x) = (term1995 A n y bad k lt2 x).
Proof. exact (eq_refl (term1995 A n y bad k lt2 x)). Qed.
Lemma lem386195 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) (x' : nat -> A) : (term2032 A n y k x lt2 n' k' bad x') = (term2033 A n y k x lt2 n' k' bad x').
Proof. exact (MK_COMB (@lem386194 A n y bad k lt2 x) (@lem386193 A lt2 n' k' bad x')). Qed.
Lemma lem386196 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) : (term2034 A n y k x lt2 n' k' bad) = (term2035 A n y k x lt2 n' k' bad).
Proof. exact (fun_ext (fun x' : nat -> A => @lem386195 A n y k x lt2 n' k' bad x')). Qed.
Lemma lem386197 {A : Type'} : (@ex (nat -> A)) = (@ex (nat -> A)).
Proof. exact (eq_refl (@ex (nat -> A))). Qed.
Lemma lem386198 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) : (term2026 A n y k x lt2 n' k' bad) = (term2036 A n y k x lt2 n' k' bad).
Proof. exact (MK_COMB (@lem386197 A) (@lem386196 A n y k x lt2 n' k' bad)). Qed.
Lemma lem386199 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) : ((term2025 A n y k x lt2 n' k' bad) = (term2026 A n y k x lt2 n' k' bad)) = ((term2021 A n y k x lt2 n' k' bad) = (term2036 A n y k x lt2 n' k' bad)).
Proof. exact (MK_COMB (@lem386192 A n y k x lt2 n' k' bad) (@lem386198 A n y k x lt2 n' k' bad)). Qed.
Lemma lem386200 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k' : type967 A) (bad : type976 A) : (term2021 A n y k x lt2 n' k' bad) = (term2036 A n y k x lt2 n' k' bad).
Proof. exact (EQ_MP (@lem386199 A n y k x lt2 n' k' bad) (@lem386184 A n y k x lt2 n' k' bad)). Qed.
Lemma lem386201 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (bad : type976 A) : (term2023 A n y k x lt2 n' bad) = (term2037 A n y k x lt2 n' bad).
Proof. exact (fun_ext (fun k' : type967 A => @lem386200 A n y k x lt2 n' k' bad)). Qed.
Lemma lem386202 {A : Type'} : (@ex ((nat -> A) -> (nat -> A) -> nat)) = (@ex ((nat -> A) -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> (nat -> A) -> nat))). Qed.
Lemma lem386203 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (bad : type976 A) : (term2024 A n y k x lt2 n' bad) = (term2038 A n y k x lt2 n' bad).
Proof. exact (MK_COMB (@lem386202 A) (@lem386201 A n y k x lt2 n' bad)). Qed.
Lemma lem386204 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (bad : type976 A) : (term2009 A n y k x lt2 n' bad) = (term2038 A n y k x lt2 n' bad).
Proof. exact (TRANS (@lem386180 A n y k x lt2 n' bad) (@lem386203 A n y k x lt2 n' bad)). Qed.
Lemma lem386205 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term2011 A n y k x lt2 bad) = (term2039 A n y k x lt2 bad).
Proof. exact (fun_ext (fun n' : type977 A => @lem386204 A n y k x lt2 n' bad)). Qed.
Lemma lem386206 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem386207 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term2012 A n y k x lt2 bad) = (term2040 A n y k x lt2 bad).
Proof. exact (MK_COMB (@lem386206 A) (@lem386205 A n y k x lt2 bad)). Qed.
Lemma lem386208 {A : Type'} (n : nat) (y : type1604 A) (k : type1584 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1997 A n y k x lt2 bad) = (term2040 A n y k x lt2 bad).
Proof. exact (TRANS (@lem386160 A n y k x lt2 bad) (@lem386207 A n y k x lt2 bad)). Qed.
Lemma lem386209 {A : Type'} (n : nat) (y : type1604 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1999 A n y x lt2 bad) = (term2041 A n y x lt2 bad).
Proof. exact (fun_ext (fun k : type1584 A => @lem386208 A n y k x lt2 bad)). Qed.
Lemma lem386210 {A : Type'} : (@ex (nat -> (nat -> A) -> nat)) = (@ex (nat -> (nat -> A) -> nat)).
Proof. exact (eq_refl (@ex (nat -> (nat -> A) -> nat))). Qed.
Lemma lem386211 {A : Type'} (n : nat) (y : type1604 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term2000 A n y x lt2 bad) = (term2042 A n y x lt2 bad).
Proof. exact (MK_COMB (@lem386210 A) (@lem386209 A n y x lt2 bad)). Qed.
Lemma lem386212 {A : Type'} (n : nat) (y : type1604 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1980 A n y x lt2 bad) = (term2042 A n y x lt2 bad).
Proof. exact (TRANS (@lem386140 A n y x lt2 bad) (@lem386211 A n y x lt2 bad)). Qed.
Lemma lem386213 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1982 A n x lt2 bad) = (term2043 A n x lt2 bad).
Proof. exact (fun_ext (fun y : type1604 A => @lem386212 A n y x lt2 bad)). Qed.
Lemma lem386214 {A : Type'} : (@ex (nat -> nat -> A)) = (@ex (nat -> nat -> A)).
Proof. exact (eq_refl (@ex (nat -> nat -> A))). Qed.
Lemma lem386215 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1983 A n x lt2 bad) = (term2044 A n x lt2 bad).
Proof. exact (MK_COMB (@lem386214 A) (@lem386213 A n x lt2 bad)). Qed.
Lemma lem386216 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1968 A n x lt2 bad) = (term2044 A n x lt2 bad).
Proof. exact (TRANS (@lem386116 A n x lt2 bad) (@lem386215 A n x lt2 bad)). Qed.
Lemma lem386218 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1861 A n x lt2 bad) = (term2044 A n x lt2 bad).
Proof. exact (TRANS (@lem386092 A n x lt2 bad) (@lem386216 A n x lt2 bad)). Qed.
Lemma lem386219 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) : (term1798 A n x lt2 bad) = (term2044 A n x lt2 bad).
Proof. exact (TRANS (@lem385175 A n x lt2 bad) (@lem386218 A n x lt2 bad)). Qed.
Lemma lem386220 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term1798 A n x lt2 bad) : term2044 A n x lt2 bad.
Proof. exact (EQ_MP (@lem386219 A n x lt2 bad) (@lem385045 A n x lt2 bad h1)). Qed.
Lemma lem386232 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term2045 A n y x k) = (term2046 A n y x k).
Proof. exact (@lem17362 (term5 k n) ((y k) = (x k))). Qed.
Lemma lem386233 (P : nat -> Prop) : (term825 P) = (term826 P).
Proof. exact (@lem18392 nat P). Qed.
Lemma lem386234 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term2047 A n y x) = (term2048 A n y x).
Proof. exact (@lem386233 (term1813 A n y x)). Qed.
Lemma lem386235 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term2049 A n y x k) = (term1811 A n y x k).
Proof. exact (eq_refl (term2049 A n y x k)). Qed.
Lemma lem386236 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem386237 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term2050 A n y x k) = (term2045 A n y x k).
Proof. exact (MK_COMB (@lem386236) (@lem386235 A n y x k)). Qed.
Lemma lem386238 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term2050 A n y x k) = (term2046 A n y x k).
Proof. exact (TRANS (@lem386237 A n y x k) (@lem386232 A n y x k)). Qed.
Lemma lem386239 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term2051 A n y x) = (term2052 A n y x).
Proof. exact (fun_ext (fun k : nat => @lem386238 A n y x k)). Qed.
Lemma lem386240 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem386241 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term2048 A n y x) = (term2053 A n y x).
Proof. exact (MK_COMB (@lem386240) (@lem386239 A n y x)). Qed.
Lemma lem386242 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term2047 A n y x) = (term2053 A n y x).
Proof. exact (TRANS (@lem386234 A n y x) (@lem386241 A n y x)). Qed.
Lemma lem386244 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1075 A bad y) = (term1075 A bad y).
Proof. exact (eq_refl (term1075 A bad y)). Qed.
Lemma lem386245 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term2054 A bad n y x) = (term2055 A bad n y x).
Proof. exact (MK_COMB (@lem386244 A bad y) (@lem386242 A n y x)). Qed.
Lemma lem386246 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term2056 A bad n y x) = (term2054 A bad n y x).
Proof. exact (@lem17045 (bad y) (term1815 A n y x)). Qed.
Lemma lem386247 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term2056 A bad n y x) = (term2055 A bad n y x).
Proof. exact (TRANS (@lem386246 A bad n y x) (@lem386245 A bad n y x)). Qed.
Lemma lem386248 {A : Type'} (P : type976 A) : (term2057 A P) = (term2058 A P).
Proof. exact (@lem18394 (nat -> A) P). Qed.
Lemma lem386249 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term1849 A bad n x) = (term2059 A bad n x).
Proof. exact (@lem386248 A (term1819 A bad n x)). Qed.
Lemma lem386250 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term2060 A bad n x y) = (term1817 A bad n y x).
Proof. exact (eq_refl (term2060 A bad n x y)). Qed.
Lemma lem386251 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem386252 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term2061 A bad n x y) = (term2056 A bad n y x).
Proof. exact (MK_COMB (@lem386251) (@lem386250 A bad n y x)). Qed.
Lemma lem386253 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term2061 A bad n x y) = (term2055 A bad n y x).
Proof. exact (TRANS (@lem386252 A bad n y x) (@lem386247 A bad n y x)). Qed.
Lemma lem386254 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term2062 A bad n x) = (term2063 A bad n x).
Proof. exact (fun_ext (fun y : nat -> A => @lem386253 A bad n y x)). Qed.
Lemma lem386255 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem386256 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term2059 A bad n x) = (term2064 A bad n x).
Proof. exact (MK_COMB (@lem386255 A) (@lem386254 A bad n x)). Qed.
Lemma lem386257 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term1849 A bad n x) = (term2064 A bad n x).
Proof. exact (TRANS (@lem386249 A bad n x) (@lem386256 A bad n x)). Qed.
Lemma lem386356 {A : Type'} (P : Prop) (Q : A -> Prop) : (term185 A P Q) = (term186 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem386357 (P : Prop) (Q : nat -> Prop) : (term895 P Q) = (term896 P Q).
Proof. exact (@lem386356 nat P Q). Qed.
Lemma lem386358 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term2065 A bad n y x) = (term2066 A bad n y x).
Proof. exact (@lem386357 (term807 A bad y) (term2052 A n y x)). Qed.
Lemma lem386359 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term2067 A n y x k) = (term2046 A n y x k).
Proof. exact (eq_refl (term2067 A n y x k)). Qed.
Lemma lem386360 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term2068 A n y x) = (term2052 A n y x).
Proof. exact (fun_ext (fun k : nat => @lem386359 A n y x k)). Qed.
Lemma lem386361 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem386362 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) : (term2069 A n y x) = (term2053 A n y x).
Proof. exact (MK_COMB (@lem386361) (@lem386360 A n y x)). Qed.
Lemma lem386363 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1075 A bad y) = (term1075 A bad y).
Proof. exact (eq_refl (term1075 A bad y)). Qed.
Lemma lem386364 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term2065 A bad n y x) = (term2055 A bad n y x).
Proof. exact (MK_COMB (@lem386363 A bad y) (@lem386362 A n y x)). Qed.
Lemma lem386365 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem386366 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term2070 A bad n y x) = (term2071 A bad n y x).
Proof. exact (MK_COMB (@lem386365) (@lem386364 A bad n y x)). Qed.
Lemma lem386367 {A : Type'} (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term2067 A n y x k) = (term2046 A n y x k).
Proof. exact (eq_refl (term2067 A n y x k)). Qed.
Lemma lem386368 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1075 A bad y) = (term1075 A bad y).
Proof. exact (eq_refl (term1075 A bad y)). Qed.
Lemma lem386369 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term2072 A bad n y x k) = (term2073 A bad n y x k).
Proof. exact (MK_COMB (@lem386368 A bad y) (@lem386367 A n y x k)). Qed.
Lemma lem386370 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term2074 A bad n y x) = (term2075 A bad n y x).
Proof. exact (fun_ext (fun k : nat => @lem386369 A bad n y x k)). Qed.
Lemma lem386371 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem386372 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term2066 A bad n y x) = (term2076 A bad n y x).
Proof. exact (MK_COMB (@lem386371) (@lem386370 A bad n y x)). Qed.
Lemma lem386373 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : ((term2065 A bad n y x) = (term2066 A bad n y x)) = ((term2055 A bad n y x) = (term2076 A bad n y x)).
Proof. exact (MK_COMB (@lem386366 A bad n y x) (@lem386372 A bad n y x)). Qed.
Lemma lem386374 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term2055 A bad n y x) = (term2076 A bad n y x).
Proof. exact (EQ_MP (@lem386373 A bad n y x) (@lem386358 A bad n y x)). Qed.
Lemma lem386375 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term2063 A bad n x) = (term2077 A bad n x).
Proof. exact (fun_ext (fun y : nat -> A => @lem386374 A bad n y x)). Qed.
Lemma lem386376 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem386377 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term2064 A bad n x) = (term2078 A bad n x).
Proof. exact (MK_COMB (@lem386376 A) (@lem386375 A bad n x)). Qed.
Lemma lem386379 {A B : Type'} (P : type1413 A B) : (term201 A B P) = (term202 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem386380 {A : Type'} (P : type973 A) : (term869 A P) = (term870 A P).
Proof. exact (@lem386379 (nat -> A) nat P). Qed.
Lemma lem386381 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term2079 A bad n x) = (term2080 A bad n x).
Proof. exact (@lem386380 A (term2081 A bad n x)). Qed.
Lemma lem386382 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term2082 A bad n x y) = (term2075 A bad n y x).
Proof. exact (eq_refl (term2082 A bad n x y)). Qed.
Lemma lem386383 (k : nat) : k = k.
Proof. exact (eq_refl k). Qed.
Lemma lem386384 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term2083 A bad n x y k) = (term2084 A bad n y x k).
Proof. exact (MK_COMB (@lem386382 A bad n y x) (@lem386383 k)). Qed.
Lemma lem386385 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term2084 A bad n y x k) = (term2073 A bad n y x k).
Proof. exact (eq_refl (term2084 A bad n y x k)). Qed.
Lemma lem386386 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) (k : nat) : (term2083 A bad n x y k) = (term2073 A bad n y x k).
Proof. exact (TRANS (@lem386384 A bad n y x k) (@lem386385 A bad n y x k)). Qed.
Lemma lem386387 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term2085 A bad n x y) = (term2075 A bad n y x).
Proof. exact (fun_ext (fun k : nat => @lem386386 A bad n y x k)). Qed.
Lemma lem386388 : (@ex nat) = (@ex nat).
Proof. exact (eq_refl (@ex nat)). Qed.
Lemma lem386389 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term2086 A bad n x y) = (term2076 A bad n y x).
Proof. exact (MK_COMB (@lem386388) (@lem386387 A bad n y x)). Qed.
Lemma lem386390 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term2087 A bad n x) = (term2077 A bad n x).
Proof. exact (fun_ext (fun y : nat -> A => @lem386389 A bad n y x)). Qed.
Lemma lem386391 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem386392 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term2079 A bad n x) = (term2078 A bad n x).
Proof. exact (MK_COMB (@lem386391 A) (@lem386390 A bad n x)). Qed.
Lemma lem386393 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem386394 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term2088 A bad n x) = (term2089 A bad n x).
Proof. exact (MK_COMB (@lem386393) (@lem386392 A bad n x)). Qed.
Lemma lem386395 {A : Type'} (bad : type976 A) (n : nat) (y : nat -> A) (x : nat -> A) : (term2082 A bad n x y) = (term2075 A bad n y x).
Proof. exact (eq_refl (term2082 A bad n x y)). Qed.
Lemma lem386396 {A : Type'} (k : type977 A) (y : nat -> A) : (k y) = (k y).
Proof. exact (eq_refl (k y)). Qed.
Lemma lem386397 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) (y : nat -> A) : (term2090 A bad n x k y) = (term2091 A bad n x k y).
Proof. exact (MK_COMB (@lem386395 A bad n y x) (@lem386396 A k y)). Qed.
Lemma lem386398 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) (y : nat -> A) : (term2091 A bad n x k y) = (term2092 A bad n x k y).
Proof. exact (eq_refl (term2091 A bad n x k y)). Qed.
Lemma lem386399 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) (y : nat -> A) : (term2090 A bad n x k y) = (term2092 A bad n x k y).
Proof. exact (TRANS (@lem386397 A bad n x k y) (@lem386398 A bad n x k y)). Qed.
Lemma lem386400 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) : (term2093 A bad n x k) = (term2094 A bad n x k).
Proof. exact (fun_ext (fun y : nat -> A => @lem386399 A bad n x k y)). Qed.
Lemma lem386401 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem386402 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) : (term2095 A bad n x k) = (term2096 A bad n x k).
Proof. exact (MK_COMB (@lem386401 A) (@lem386400 A bad n x k)). Qed.
Lemma lem386403 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term2097 A bad n x) = (term2098 A bad n x).
Proof. exact (fun_ext (fun k : type977 A => @lem386402 A bad n x k)). Qed.
Lemma lem386404 {A : Type'} : (@ex ((nat -> A) -> nat)) = (@ex ((nat -> A) -> nat)).
Proof. exact (eq_refl (@ex ((nat -> A) -> nat))). Qed.
Lemma lem386405 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term2080 A bad n x) = (term2099 A bad n x).
Proof. exact (MK_COMB (@lem386404 A) (@lem386403 A bad n x)). Qed.
Lemma lem386406 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : ((term2079 A bad n x) = (term2080 A bad n x)) = ((term2078 A bad n x) = (term2099 A bad n x)).
Proof. exact (MK_COMB (@lem386394 A bad n x) (@lem386405 A bad n x)). Qed.
Lemma lem386407 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term2078 A bad n x) = (term2099 A bad n x).
Proof. exact (EQ_MP (@lem386406 A bad n x) (@lem386381 A bad n x)). Qed.
Lemma lem386409 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term2064 A bad n x) = (term2099 A bad n x).
Proof. exact (TRANS (@lem386377 A bad n x) (@lem386407 A bad n x)). Qed.
Lemma lem386410 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term1849 A bad n x) = (term2099 A bad n x).
Proof. exact (TRANS (@lem386257 A bad n x) (@lem386409 A bad n x)). Qed.
Lemma lem386411 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) (h1 : term1849 A bad n x) : term2099 A bad n x.
Proof. exact (EQ_MP (@lem386410 A bad n x) (@lem385050 A bad n x h1)). Qed.
Lemma lem386412 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) (h1 : term2096 A bad n x k) : term2096 A bad n x k.
Proof. exact (h1). Qed.
Lemma lem386413 {A : Type'} (n : nat) (y : type1604 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term2042 A n y x lt2 bad) : term2042 A n y x lt2 bad.
Proof. exact (h1). Qed.
Lemma lem386414 {A : Type'} (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term2040 A n y k' x lt2 bad) : term2040 A n y k' x lt2 bad.
Proof. exact (h1). Qed.
Lemma lem386415 {A : Type'} (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (bad : type976 A) (h1 : term2038 A n y k' x lt2 n' bad) : term2038 A n y k' x lt2 n' bad.
Proof. exact (h1). Qed.
Lemma lem386416 {A : Type'} (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (h1 : term2036 A n y k' x lt2 n' k'' bad) : term2036 A n y k' x lt2 n' k'' bad.
Proof. exact (h1). Qed.
Lemma lem386417 {A : Type'} (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2033 A n y k' x lt2 n' k'' bad x'.
Proof. exact (h1). Qed.
Lemma lem386418 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem386419 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem386420 {A : Type'} (y : nat -> A) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem386425 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386426 {A : Type'} (f : type977 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> nat) f x).
Proof. exact (@lem386425 (nat -> A) nat f x). Qed.
Lemma lem386428 {A : Type'} (k : type977 A) (y : nat -> A) : (k y) = (@I ((nat -> A) -> nat) k y).
Proof. exact (@lem386426 A k y). Qed.
Lemma lem386429 {A : Type'} (k : type977 A) (y : nat -> A) : (term2100 A k y) = (term2101 A k y).
Proof. exact (MK_COMB (@lem386420 A y) (@lem386428 A k y)). Qed.
Lemma lem386431 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386432 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem386431 nat A f x). Qed.
Lemma lem386433 {A : Type'} (k : type977 A) (y : nat -> A) : (term2101 A k y) = (term2102 A k y).
Proof. exact (@lem386432 A y (@I ((nat -> A) -> nat) k y)). Qed.
Lemma lem386434 {A : Type'} (k : type977 A) (y : nat -> A) : (term2100 A k y) = (term2102 A k y).
Proof. exact (TRANS (@lem386429 A k y) (@lem386433 A k y)). Qed.
Lemma lem386435 {A : Type'} (x : nat -> A) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem386440 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386441 {A : Type'} (f : type977 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> nat) f x).
Proof. exact (@lem386440 (nat -> A) nat f x). Qed.
Lemma lem386443 {A : Type'} (k : type977 A) (y : nat -> A) : (k y) = (@I ((nat -> A) -> nat) k y).
Proof. exact (@lem386441 A k y). Qed.
Lemma lem386444 {A : Type'} (x : nat -> A) (k : type977 A) (y : nat -> A) : (term2103 A x k y) = (term2104 A x k y).
Proof. exact (MK_COMB (@lem386435 A x) (@lem386443 A k y)). Qed.
Lemma lem386446 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386447 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem386446 nat A f x). Qed.
Lemma lem386448 {A : Type'} (x : nat -> A) (k : type977 A) (y : nat -> A) : (term2104 A x k y) = (term2105 A x k y).
Proof. exact (@lem386447 A x (@I ((nat -> A) -> nat) k y)). Qed.
Lemma lem386449 {A : Type'} (x : nat -> A) (k : type977 A) (y : nat -> A) : (term2103 A x k y) = (term2105 A x k y).
Proof. exact (TRANS (@lem386444 A x k y) (@lem386448 A x k y)). Qed.
Lemma lem386450 {A : Type'} (k : type977 A) (y : nat -> A) : (term2106 A k y) = (term2107 A k y).
Proof. exact (MK_COMB (@lem386419 A) (@lem386434 A k y)). Qed.
Lemma lem386451 {A : Type'} (x : nat -> A) (k : type977 A) (y : nat -> A) : ((term2100 A k y) = (term2103 A x k y)) = ((term2102 A k y) = (term2105 A x k y)).
Proof. exact (MK_COMB (@lem386450 A k y) (@lem386449 A x k y)). Qed.
Lemma lem386452 {A : Type'} (x : nat -> A) (k : type977 A) (y : nat -> A) : (term2108 A x k y) = (term2109 A x k y).
Proof. exact (MK_COMB (@lem386418) (@lem386451 A x k y)). Qed.
Lemma lem386453 : Peano.lt = Peano.lt.
Proof. exact (eq_refl Peano.lt). Qed.
Lemma lem386458 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386459 {A : Type'} (f : type977 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> nat) f x).
Proof. exact (@lem386458 (nat -> A) nat f x). Qed.
Lemma lem386461 {A : Type'} (k : type977 A) (y : nat -> A) : (k y) = (@I ((nat -> A) -> nat) k y).
Proof. exact (@lem386459 A k y). Qed.
Lemma lem386462 (n : nat) : n = n.
Proof. exact (eq_refl n). Qed.
Lemma lem386463 {A : Type'} (k : type977 A) (y : nat -> A) : (term2110 A k y) = (term2111 A k y).
Proof. exact (MK_COMB (@lem386453) (@lem386461 A k y)). Qed.
Lemma lem386464 {A : Type'} (k : type977 A) (y : nat -> A) (n : nat) : (term2112 A k y n) = (term2113 A k y n).
Proof. exact (MK_COMB (@lem386463 A k y) (@lem386462 n)). Qed.
Lemma lem386466 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386467 (f : type1605) (x : nat) : (f x) = (@I (nat -> nat -> Prop) f x).
Proof. exact (@lem386466 nat (nat -> Prop) f x). Qed.
Lemma lem386468 {A : Type'} (k : type977 A) (y : nat -> A) : (term2111 A k y) = (term2114 A k y).
Proof. exact (@lem386467 Peano.lt (@I ((nat -> A) -> nat) k y)). Qed.
Lemma lem386469 (n : nat) : n = n.
Proof. exact (eq_refl n). Qed.
Lemma lem386470 {A : Type'} (k : type977 A) (y : nat -> A) (n : nat) : (term2113 A k y n) = (term2115 A k y n).
Proof. exact (MK_COMB (@lem386468 A k y) (@lem386469 n)). Qed.
Lemma lem386472 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386473 (f : nat -> Prop) (x : nat) : (f x) = (@I (nat -> Prop) f x).
Proof. exact (@lem386472 nat Prop f x). Qed.
Lemma lem386474 {A : Type'} (k : type977 A) (y : nat -> A) (n : nat) : (term2115 A k y n) = (term2116 A k y n).
Proof. exact (@lem386473 (term2114 A k y) n). Qed.
Lemma lem386475 {A : Type'} (k : type977 A) (y : nat -> A) (n : nat) : (term2113 A k y n) = (term2116 A k y n).
Proof. exact (TRANS (@lem386470 A k y n) (@lem386474 A k y n)). Qed.
Lemma lem386476 {A : Type'} (k : type977 A) (y : nat -> A) (n : nat) : (term2112 A k y n) = (term2116 A k y n).
Proof. exact (TRANS (@lem386464 A k y n) (@lem386475 A k y n)). Qed.
Lemma lem386477 : (@eq nat) = (@eq nat).
Proof. exact (eq_refl (@eq nat)). Qed.
Lemma lem386482 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386483 {A : Type'} (f : type977 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> nat) f x).
Proof. exact (@lem386482 (nat -> A) nat f x). Qed.
Lemma lem386485 {A : Type'} (k : type977 A) (y : nat -> A) : (k y) = (@I ((nat -> A) -> nat) k y).
Proof. exact (@lem386483 A k y). Qed.
Lemma lem386486 (n : nat) : n = n.
Proof. exact (eq_refl n). Qed.
Lemma lem386487 {A : Type'} (k : type977 A) (y : nat -> A) : (term2117 A k y) = (term2118 A k y).
Proof. exact (MK_COMB (@lem386477) (@lem386485 A k y)). Qed.
Lemma lem386488 {A : Type'} (k : type977 A) (y : nat -> A) (n : nat) : ((k y) = n) = ((@I ((nat -> A) -> nat) k y) = n).
Proof. exact (MK_COMB (@lem386487 A k y) (@lem386486 n)). Qed.
Lemma lem386489 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem386490 {A : Type'} (k : type977 A) (y : nat -> A) (n : nat) : (term2119 A k y n) = (term2120 A k y n).
Proof. exact (MK_COMB (@lem386489) (@lem386488 A k y n)). Qed.
Lemma lem386491 {A : Type'} (k : type977 A) (y : nat -> A) (n : nat) : (term2121 A k y n) = (term2122 A k y n).
Proof. exact (MK_COMB (@lem386490 A k y n) (@lem386476 A k y n)). Qed.
Lemma lem386492 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem386493 {A : Type'} (k : type977 A) (y : nat -> A) (n : nat) : (term2123 A k y n) = (term2124 A k y n).
Proof. exact (MK_COMB (@lem386492) (@lem386491 A k y n)). Qed.
Lemma lem386494 {A : Type'} (n : nat) (x : nat -> A) (k : type977 A) (y : nat -> A) : (term2125 A n x k y) = (term2126 A n x k y).
Proof. exact (MK_COMB (@lem386493 A k y n) (@lem386452 A x k y)). Qed.
Lemma lem386495 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem386500 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386501 {A : Type'} (f : type976 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> Prop) f x).
Proof. exact (@lem386500 (nat -> A) Prop f x). Qed.
Lemma lem386503 {A : Type'} (bad : type976 A) (y : nat -> A) : (bad y) = (@I ((nat -> A) -> Prop) bad y).
Proof. exact (@lem386501 A bad y). Qed.
Lemma lem386504 {A : Type'} (bad : type976 A) (y : nat -> A) : (term807 A bad y) = (term1294 A bad y).
Proof. exact (MK_COMB (@lem386495) (@lem386503 A bad y)). Qed.
Lemma lem386505 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem386506 {A : Type'} (bad : type976 A) (y : nat -> A) : (term1075 A bad y) = (term1295 A bad y).
Proof. exact (MK_COMB (@lem386505) (@lem386504 A bad y)). Qed.
Lemma lem386507 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) (y : nat -> A) : (term2092 A bad n x k y) = (term2127 A bad n x k y).
Proof. exact (MK_COMB (@lem386506 A bad y) (@lem386494 A n x k y)). Qed.
Lemma lem386508 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) : (term2094 A bad n x k) = (term2128 A bad n x k).
Proof. exact (fun_ext (fun y : nat -> A => @lem386507 A bad n x k y)). Qed.
Lemma lem386509 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem386510 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) : (term2096 A bad n x k) = (term2129 A bad n x k).
Proof. exact (MK_COMB (@lem386509 A) (@lem386508 A bad n x k)). Qed.
Lemma lem386511 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) (h1 : term2096 A bad n x k) : term2129 A bad n x k.
Proof. exact (EQ_MP (@lem386510 A bad n x k) (@lem386412 A bad n x k h1)). Qed.
Lemma lem386516 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386517 {A : Type'} (f : type976 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> Prop) f x).
Proof. exact (@lem386516 (nat -> A) Prop f x). Qed.
Lemma lem386519 {A : Type'} (bad : type976 A) (x' : nat -> A) : (bad x') = (@I ((nat -> A) -> Prop) bad x').
Proof. exact (@lem386517 A bad x'). Qed.
Lemma lem386520 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem386525 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386526 {A : Type'} (f : type976 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> Prop) f x).
Proof. exact (@lem386525 (nat -> A) Prop f x). Qed.
Lemma lem386528 {A : Type'} (bad : type976 A) (y : nat -> A) : (bad y) = (@I ((nat -> A) -> Prop) bad y).
Proof. exact (@lem386526 A bad y). Qed.
Lemma lem386529 {A : Type'} (bad : type976 A) (y : nat -> A) : (term807 A bad y) = (term1294 A bad y).
Proof. exact (MK_COMB (@lem386520) (@lem386528 A bad y)). Qed.
Lemma lem386530 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem386531 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem386532 {A : Type'} (y : nat -> A) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem386539 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386540 {A : Type'} (f : type967 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> (nat -> A) -> nat) f x).
Proof. exact (@lem386539 (nat -> A) (type977 A) f x). Qed.
Lemma lem386541 {A : Type'} (k'' : type967 A) (x : nat -> A) : (k'' x) = (@I ((nat -> A) -> (nat -> A) -> nat) k'' x).
Proof. exact (@lem386540 A k'' x). Qed.
Lemma lem386542 {A : Type'} (y : nat -> A) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem386543 {A : Type'} (k'' : type967 A) (x : nat -> A) (y : nat -> A) : (k'' x y) = (@I ((nat -> A) -> (nat -> A) -> nat) k'' x y).
Proof. exact (MK_COMB (@lem386541 A k'' x) (@lem386542 A y)). Qed.
Lemma lem386545 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386546 {A : Type'} (f : type977 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> nat) f x).
Proof. exact (@lem386545 (nat -> A) nat f x). Qed.
Lemma lem386547 {A : Type'} (k'' : type967 A) (x : nat -> A) (y : nat -> A) : (@I ((nat -> A) -> (nat -> A) -> nat) k'' x y) = (term1357 A k'' x y).
Proof. exact (@lem386546 A (@I ((nat -> A) -> (nat -> A) -> nat) k'' x) y). Qed.
Lemma lem386549 {A : Type'} (k'' : type967 A) (x : nat -> A) (y : nat -> A) : (k'' x y) = (term1357 A k'' x y).
Proof. exact (TRANS (@lem386543 A k'' x y) (@lem386547 A k'' x y)). Qed.
Lemma lem386550 {A : Type'} (k'' : type967 A) (x : nat -> A) (y : nat -> A) : (term1358 A k'' x y) = (term1359 A k'' x y).
Proof. exact (MK_COMB (@lem386532 A y) (@lem386549 A k'' x y)). Qed.
Lemma lem386552 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386553 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem386552 nat A f x). Qed.
Lemma lem386554 {A : Type'} (k'' : type967 A) (x : nat -> A) (y : nat -> A) : (term1359 A k'' x y) = (term1360 A k'' x y).
Proof. exact (@lem386553 A y (term1357 A k'' x y)). Qed.
Lemma lem386555 {A : Type'} (k'' : type967 A) (x : nat -> A) (y : nat -> A) : (term1358 A k'' x y) = (term1360 A k'' x y).
Proof. exact (TRANS (@lem386550 A k'' x y) (@lem386554 A k'' x y)). Qed.
Lemma lem386556 {A : Type'} (x : nat -> A) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem386563 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386564 {A : Type'} (f : type967 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> (nat -> A) -> nat) f x).
Proof. exact (@lem386563 (nat -> A) (type977 A) f x). Qed.
Lemma lem386565 {A : Type'} (k'' : type967 A) (x : nat -> A) : (k'' x) = (@I ((nat -> A) -> (nat -> A) -> nat) k'' x).
Proof. exact (@lem386564 A k'' x). Qed.
Lemma lem386566 {A : Type'} (y : nat -> A) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem386567 {A : Type'} (k'' : type967 A) (x : nat -> A) (y : nat -> A) : (k'' x y) = (@I ((nat -> A) -> (nat -> A) -> nat) k'' x y).
Proof. exact (MK_COMB (@lem386565 A k'' x) (@lem386566 A y)). Qed.
Lemma lem386569 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386570 {A : Type'} (f : type977 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> nat) f x).
Proof. exact (@lem386569 (nat -> A) nat f x). Qed.
Lemma lem386571 {A : Type'} (k'' : type967 A) (x : nat -> A) (y : nat -> A) : (@I ((nat -> A) -> (nat -> A) -> nat) k'' x y) = (term1357 A k'' x y).
Proof. exact (@lem386570 A (@I ((nat -> A) -> (nat -> A) -> nat) k'' x) y). Qed.
Lemma lem386573 {A : Type'} (k'' : type967 A) (x : nat -> A) (y : nat -> A) : (k'' x y) = (term1357 A k'' x y).
Proof. exact (TRANS (@lem386567 A k'' x y) (@lem386571 A k'' x y)). Qed.
Lemma lem386574 {A : Type'} (k'' : type967 A) (x : nat -> A) (y : nat -> A) : (term1361 A k'' x y) = (term1362 A k'' x y).
Proof. exact (MK_COMB (@lem386556 A x) (@lem386573 A k'' x y)). Qed.
Lemma lem386576 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386577 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem386576 nat A f x). Qed.
Lemma lem386578 {A : Type'} (k'' : type967 A) (x : nat -> A) (y : nat -> A) : (term1362 A k'' x y) = (term1363 A k'' x y).
Proof. exact (@lem386577 A x (term1357 A k'' x y)). Qed.
Lemma lem386579 {A : Type'} (k'' : type967 A) (x : nat -> A) (y : nat -> A) : (term1361 A k'' x y) = (term1363 A k'' x y).
Proof. exact (TRANS (@lem386574 A k'' x y) (@lem386578 A k'' x y)). Qed.
Lemma lem386580 {A : Type'} (k'' : type967 A) (x : nat -> A) (y : nat -> A) : (term1364 A k'' x y) = (term1365 A k'' x y).
Proof. exact (MK_COMB (@lem386531 A) (@lem386555 A k'' x y)). Qed.
Lemma lem386581 {A : Type'} (k'' : type967 A) (x : nat -> A) (y : nat -> A) : ((term1358 A k'' x y) = (term1361 A k'' x y)) = ((term1360 A k'' x y) = (term1363 A k'' x y)).
Proof. exact (MK_COMB (@lem386580 A k'' x y) (@lem386579 A k'' x y)). Qed.
Lemma lem386582 {A : Type'} (k'' : type967 A) (x : nat -> A) (y : nat -> A) : (term1366 A k'' x y) = (term1367 A k'' x y).
Proof. exact (MK_COMB (@lem386530) (@lem386581 A k'' x y)). Qed.
Lemma lem386583 : Peano.lt = Peano.lt.
Proof. exact (eq_refl Peano.lt). Qed.
Lemma lem386590 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386591 {A : Type'} (f : type967 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> (nat -> A) -> nat) f x).
Proof. exact (@lem386590 (nat -> A) (type977 A) f x). Qed.
Lemma lem386592 {A : Type'} (k'' : type967 A) (x : nat -> A) : (k'' x) = (@I ((nat -> A) -> (nat -> A) -> nat) k'' x).
Proof. exact (@lem386591 A k'' x). Qed.
Lemma lem386593 {A : Type'} (y : nat -> A) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem386594 {A : Type'} (k'' : type967 A) (x : nat -> A) (y : nat -> A) : (k'' x y) = (@I ((nat -> A) -> (nat -> A) -> nat) k'' x y).
Proof. exact (MK_COMB (@lem386592 A k'' x) (@lem386593 A y)). Qed.
Lemma lem386596 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386597 {A : Type'} (f : type977 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> nat) f x).
Proof. exact (@lem386596 (nat -> A) nat f x). Qed.
Lemma lem386598 {A : Type'} (k'' : type967 A) (x : nat -> A) (y : nat -> A) : (@I ((nat -> A) -> (nat -> A) -> nat) k'' x y) = (term1357 A k'' x y).
Proof. exact (@lem386597 A (@I ((nat -> A) -> (nat -> A) -> nat) k'' x) y). Qed.
Lemma lem386600 {A : Type'} (k'' : type967 A) (x : nat -> A) (y : nat -> A) : (k'' x y) = (term1357 A k'' x y).
Proof. exact (TRANS (@lem386594 A k'' x y) (@lem386598 A k'' x y)). Qed.
Lemma lem386605 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386606 {A : Type'} (f : type977 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> nat) f x).
Proof. exact (@lem386605 (nat -> A) nat f x). Qed.
Lemma lem386608 {A : Type'} (n' : type977 A) (x : nat -> A) : (n' x) = (@I ((nat -> A) -> nat) n' x).
Proof. exact (@lem386606 A n' x). Qed.
Lemma lem386609 {A : Type'} (k'' : type967 A) (x : nat -> A) (y : nat -> A) : (term1368 A k'' x y) = (term1369 A k'' x y).
Proof. exact (MK_COMB (@lem386583) (@lem386600 A k'' x y)). Qed.
Lemma lem386610 {A : Type'} (k'' : type967 A) (y : nat -> A) (n' : type977 A) (x : nat -> A) : (term1370 A k'' y n' x) = (term1371 A k'' y n' x).
Proof. exact (MK_COMB (@lem386609 A k'' x y) (@lem386608 A n' x)). Qed.
Lemma lem386612 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386613 (f : type1605) (x : nat) : (f x) = (@I (nat -> nat -> Prop) f x).
Proof. exact (@lem386612 nat (nat -> Prop) f x). Qed.
Lemma lem386614 {A : Type'} (k'' : type967 A) (x : nat -> A) (y : nat -> A) : (term1369 A k'' x y) = (term1372 A k'' x y).
Proof. exact (@lem386613 Peano.lt (term1357 A k'' x y)). Qed.
Lemma lem386615 {A : Type'} (n' : type977 A) (x : nat -> A) : (@I ((nat -> A) -> nat) n' x) = (@I ((nat -> A) -> nat) n' x).
Proof. exact (eq_refl (@I ((nat -> A) -> nat) n' x)). Qed.
Lemma lem386616 {A : Type'} (k'' : type967 A) (y : nat -> A) (n' : type977 A) (x : nat -> A) : (term1371 A k'' y n' x) = (term1373 A k'' y n' x).
Proof. exact (MK_COMB (@lem386614 A k'' x y) (@lem386615 A n' x)). Qed.
Lemma lem386618 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386619 (f : nat -> Prop) (x : nat) : (f x) = (@I (nat -> Prop) f x).
Proof. exact (@lem386618 nat Prop f x). Qed.
Lemma lem386620 {A : Type'} (k'' : type967 A) (y : nat -> A) (n' : type977 A) (x : nat -> A) : (term1373 A k'' y n' x) = (term1374 A k'' y n' x).
Proof. exact (@lem386619 (term1372 A k'' x y) (@I ((nat -> A) -> nat) n' x)). Qed.
Lemma lem386621 {A : Type'} (k'' : type967 A) (y : nat -> A) (n' : type977 A) (x : nat -> A) : (term1371 A k'' y n' x) = (term1374 A k'' y n' x).
Proof. exact (TRANS (@lem386616 A k'' y n' x) (@lem386620 A k'' y n' x)). Qed.
Lemma lem386622 {A : Type'} (k'' : type967 A) (y : nat -> A) (n' : type977 A) (x : nat -> A) : (term1370 A k'' y n' x) = (term1374 A k'' y n' x).
Proof. exact (TRANS (@lem386610 A k'' y n' x) (@lem386621 A k'' y n' x)). Qed.
Lemma lem386623 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem386624 {A : Type'} (k'' : type967 A) (y : nat -> A) (n' : type977 A) (x : nat -> A) : (term1375 A k'' y n' x) = (term1376 A k'' y n' x).
Proof. exact (MK_COMB (@lem386623) (@lem386622 A k'' y n' x)). Qed.
Lemma lem386625 {A : Type'} (n' : type977 A) (k'' : type967 A) (x : nat -> A) (y : nat -> A) : (term1377 A n' k'' x y) = (term1378 A n' k'' x y).
Proof. exact (MK_COMB (@lem386624 A k'' y n' x) (@lem386582 A k'' x y)). Qed.
Lemma lem386626 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem386627 {A : Type'} (n' : type977 A) (k'' : type967 A) (x : nat -> A) (y : nat -> A) : (term1379 A n' k'' x y) = (term1380 A n' k'' x y).
Proof. exact (MK_COMB (@lem386626) (@lem386625 A n' k'' x y)). Qed.
Lemma lem386628 {A : Type'} (n' : type977 A) (k'' : type967 A) (x : nat -> A) (bad : type976 A) (y : nat -> A) : (term1381 A n' k'' x bad y) = (term1382 A n' k'' x bad y).
Proof. exact (MK_COMB (@lem386627 A n' k'' x y) (@lem386529 A bad y)). Qed.
Lemma lem386629 {A : Type'} (n' : type977 A) (k'' : type967 A) (x : nat -> A) (bad : type976 A) : (term1383 A n' k'' x bad) = (term1384 A n' k'' x bad).
Proof. exact (fun_ext (fun y : nat -> A => @lem386628 A n' k'' x bad y)). Qed.
Lemma lem386630 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem386631 {A : Type'} (n' : type977 A) (k'' : type967 A) (x : nat -> A) (bad : type976 A) : (term1385 A n' k'' x bad) = (term1386 A n' k'' x bad).
Proof. exact (MK_COMB (@lem386630 A) (@lem386629 A n' k'' x bad)). Qed.
Lemma lem386636 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386637 {A : Type'} (f : type976 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> Prop) f x).
Proof. exact (@lem386636 (nat -> A) Prop f x). Qed.
Lemma lem386639 {A : Type'} (bad : type976 A) (x : nat -> A) : (bad x) = (@I ((nat -> A) -> Prop) bad x).
Proof. exact (@lem386637 A bad x). Qed.
Lemma lem386640 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem386641 {A : Type'} (bad : type976 A) (x : nat -> A) : (term842 A bad x) = (term1387 A bad x).
Proof. exact (MK_COMB (@lem386640) (@lem386639 A bad x)). Qed.
Lemma lem386642 {A : Type'} (n' : type977 A) (k'' : type967 A) (x : nat -> A) (bad : type976 A) : (term965 A n' k'' x bad) = (term1388 A n' k'' x bad).
Proof. exact (MK_COMB (@lem386641 A bad x) (@lem386631 A n' k'' x bad)). Qed.
Lemma lem386643 {A : Type'} (n' : type977 A) (k'' : type967 A) (bad : type976 A) : (term967 A n' k'' bad) = (term1389 A n' k'' bad).
Proof. exact (fun_ext (fun x : nat -> A => @lem386642 A n' k'' x bad)). Qed.
Lemma lem386644 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem386645 {A : Type'} (n' : type977 A) (k'' : type967 A) (bad : type976 A) : (term969 A n' k'' bad) = (term1390 A n' k'' bad).
Proof. exact (MK_COMB (@lem386644 A) (@lem386643 A n' k'' bad)). Qed.
Lemma lem386646 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem386647 {A : Type'} (n' : type977 A) (k'' : type967 A) (bad : type976 A) : (term1005 A n' k'' bad) = (term1391 A n' k'' bad).
Proof. exact (MK_COMB (@lem386646) (@lem386645 A n' k'' bad)). Qed.
Lemma lem386648 {A : Type'} (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) : (term1051 A n' k'' bad x') = (term1392 A n' k'' bad x').
Proof. exact (MK_COMB (@lem386647 A n' k'' bad) (@lem386519 A bad x')). Qed.
Lemma lem386653 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386654 {A : Type'} (f : type421 A) (x : type1402 A) : (f x) = (@I ((A -> A -> Prop) -> Prop) f x).
Proof. exact (@lem386653 (type1402 A) Prop f x). Qed.
Lemma lem386656 {A : Type'} (lt2 : type1402 A) : (@WF A lt2) = (@I ((A -> A -> Prop) -> Prop) (@WF A) lt2).
Proof. exact (@lem386654 A (@WF A) lt2). Qed.
Lemma lem386657 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem386658 {A : Type'} (lt2 : type1402 A) : (term819 A lt2) = (term1393 A lt2).
Proof. exact (MK_COMB (@lem386657) (@lem386656 A lt2)). Qed.
Lemma lem386659 {A : Type'} (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) : (term1057 A lt2 n' k'' bad x') = (term1394 A lt2 n' k'' bad x').
Proof. exact (MK_COMB (@lem386658 A lt2) (@lem386648 A n' k'' bad x')). Qed.
Lemma lem386660 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem386661 {A : Type'} (lt2 : type1402 A) : lt2 = lt2.
Proof. exact (eq_refl lt2). Qed.
Lemma lem386666 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386667 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem386666 nat A f x). Qed.
Lemma lem386669 {A : Type'} (z : nat -> A) (z' : nat) : (z z') = (@I (nat -> A) z z').
Proof. exact (@lem386667 A z z'). Qed.
Lemma lem386674 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386675 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem386674 nat A f x). Qed.
Lemma lem386677 {A : Type'} (x : nat -> A) (z : nat) : (x z) = (@I (nat -> A) x z).
Proof. exact (@lem386675 A x z). Qed.
Lemma lem386678 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (z' : nat) : (term1275 A lt2 z z') = (term1276 A lt2 z z').
Proof. exact (MK_COMB (@lem386661 A lt2) (@lem386669 A z z')). Qed.
Lemma lem386679 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1223 A lt2 z x z') = (term1277 A lt2 z x z').
Proof. exact (MK_COMB (@lem386678 A lt2 z z') (@lem386677 A x z')). Qed.
Lemma lem386681 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386682 {A : Type'} (f : type1402 A) (x : A) : (f x) = (@I (A -> A -> Prop) f x).
Proof. exact (@lem386681 A (A -> Prop) f x). Qed.
Lemma lem386683 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (z' : nat) : (term1276 A lt2 z z') = (term1278 A lt2 z z').
Proof. exact (@lem386682 A lt2 (@I (nat -> A) z z')). Qed.
Lemma lem386684 {A : Type'} (x : nat -> A) (z : nat) : (@I (nat -> A) x z) = (@I (nat -> A) x z).
Proof. exact (eq_refl (@I (nat -> A) x z)). Qed.
Lemma lem386685 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1277 A lt2 z x z') = (term1279 A lt2 z x z').
Proof. exact (MK_COMB (@lem386683 A lt2 z z') (@lem386684 A x z')). Qed.
Lemma lem386687 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386688 {A : Type'} (f : A -> Prop) (x : A) : (f x) = (@I (A -> Prop) f x).
Proof. exact (@lem386687 A Prop f x). Qed.
Lemma lem386689 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1279 A lt2 z x z') = (term1280 A lt2 z x z').
Proof. exact (@lem386688 A (term1278 A lt2 z z') (@I (nat -> A) x z')). Qed.
Lemma lem386690 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1277 A lt2 z x z') = (term1280 A lt2 z x z').
Proof. exact (TRANS (@lem386685 A lt2 z x z') (@lem386689 A lt2 z x z')). Qed.
Lemma lem386691 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1223 A lt2 z x z') = (term1280 A lt2 z x z').
Proof. exact (TRANS (@lem386679 A lt2 z x z') (@lem386690 A lt2 z x z')). Qed.
Lemma lem386692 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term794 A lt2 z x z') = (term1297 A lt2 z x z').
Proof. exact (MK_COMB (@lem386660) (@lem386691 A lt2 z x z')). Qed.
Lemma lem386693 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem386694 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem386695 {A : Type'} (z : nat -> A) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem386702 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386703 {A : Type'} (f : type1584 A) (x : nat) : (f x) = (@I (nat -> (nat -> A) -> nat) f x).
Proof. exact (@lem386702 nat (type977 A) f x). Qed.
Lemma lem386704 {A : Type'} (k' : type1584 A) (z : nat) : (k' z) = (@I (nat -> (nat -> A) -> nat) k' z).
Proof. exact (@lem386703 A k' z). Qed.
Lemma lem386705 {A : Type'} (z : nat -> A) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem386706 {A : Type'} (k' : type1584 A) (z : nat) (z' : nat -> A) : (k' z z') = (@I (nat -> (nat -> A) -> nat) k' z z').
Proof. exact (MK_COMB (@lem386704 A k' z) (@lem386705 A z')). Qed.
Lemma lem386708 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386709 {A : Type'} (f : type977 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> nat) f x).
Proof. exact (@lem386708 (nat -> A) nat f x). Qed.
Lemma lem386710 {A : Type'} (k' : type1584 A) (z : nat) (z' : nat -> A) : (@I (nat -> (nat -> A) -> nat) k' z z') = (term1298 A k' z z').
Proof. exact (@lem386709 A (@I (nat -> (nat -> A) -> nat) k' z) z'). Qed.
Lemma lem386712 {A : Type'} (k' : type1584 A) (z : nat) (z' : nat -> A) : (k' z z') = (term1298 A k' z z').
Proof. exact (TRANS (@lem386706 A k' z z') (@lem386710 A k' z z')). Qed.
Lemma lem386713 {A : Type'} (k' : type1584 A) (z : nat) (z' : nat -> A) : (term1299 A k' z z') = (term1300 A k' z z').
Proof. exact (MK_COMB (@lem386695 A z') (@lem386712 A k' z z')). Qed.
Lemma lem386715 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386716 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem386715 nat A f x). Qed.
Lemma lem386717 {A : Type'} (k' : type1584 A) (z : nat) (z' : nat -> A) : (term1300 A k' z z') = (term1301 A k' z z').
Proof. exact (@lem386716 A z' (term1298 A k' z z')). Qed.
Lemma lem386718 {A : Type'} (k' : type1584 A) (z : nat) (z' : nat -> A) : (term1299 A k' z z') = (term1301 A k' z z').
Proof. exact (TRANS (@lem386713 A k' z z') (@lem386717 A k' z z')). Qed.
Lemma lem386719 {A : Type'} (x : nat -> A) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem386726 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386727 {A : Type'} (f : type1584 A) (x : nat) : (f x) = (@I (nat -> (nat -> A) -> nat) f x).
Proof. exact (@lem386726 nat (type977 A) f x). Qed.
Lemma lem386728 {A : Type'} (k' : type1584 A) (z : nat) : (k' z) = (@I (nat -> (nat -> A) -> nat) k' z).
Proof. exact (@lem386727 A k' z). Qed.
Lemma lem386729 {A : Type'} (z : nat -> A) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem386730 {A : Type'} (k' : type1584 A) (z : nat) (z' : nat -> A) : (k' z z') = (@I (nat -> (nat -> A) -> nat) k' z z').
Proof. exact (MK_COMB (@lem386728 A k' z) (@lem386729 A z')). Qed.
Lemma lem386732 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386733 {A : Type'} (f : type977 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> nat) f x).
Proof. exact (@lem386732 (nat -> A) nat f x). Qed.
Lemma lem386734 {A : Type'} (k' : type1584 A) (z : nat) (z' : nat -> A) : (@I (nat -> (nat -> A) -> nat) k' z z') = (term1298 A k' z z').
Proof. exact (@lem386733 A (@I (nat -> (nat -> A) -> nat) k' z) z'). Qed.
Lemma lem386736 {A : Type'} (k' : type1584 A) (z : nat) (z' : nat -> A) : (k' z z') = (term1298 A k' z z').
Proof. exact (TRANS (@lem386730 A k' z z') (@lem386734 A k' z z')). Qed.
Lemma lem386737 {A : Type'} (x : nat -> A) (k' : type1584 A) (z : nat) (z' : nat -> A) : (term1302 A x k' z z') = (term1303 A x k' z z').
Proof. exact (MK_COMB (@lem386719 A x) (@lem386736 A k' z z')). Qed.
Lemma lem386739 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386740 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem386739 nat A f x). Qed.
Lemma lem386741 {A : Type'} (x : nat -> A) (k' : type1584 A) (z : nat) (z' : nat -> A) : (term1303 A x k' z z') = (term1304 A x k' z z').
Proof. exact (@lem386740 A x (term1298 A k' z z')). Qed.
Lemma lem386742 {A : Type'} (x : nat -> A) (k' : type1584 A) (z : nat) (z' : nat -> A) : (term1302 A x k' z z') = (term1304 A x k' z z').
Proof. exact (TRANS (@lem386737 A x k' z z') (@lem386741 A x k' z z')). Qed.
Lemma lem386743 {A : Type'} (k' : type1584 A) (z : nat) (z' : nat -> A) : (term1305 A k' z z') = (term1306 A k' z z').
Proof. exact (MK_COMB (@lem386694 A) (@lem386718 A k' z z')). Qed.
Lemma lem386744 {A : Type'} (x : nat -> A) (k' : type1584 A) (z : nat) (z' : nat -> A) : ((term1299 A k' z z') = (term1302 A x k' z z')) = ((term1301 A k' z z') = (term1304 A x k' z z')).
Proof. exact (MK_COMB (@lem386743 A k' z z') (@lem386742 A x k' z z')). Qed.
Lemma lem386745 {A : Type'} (x : nat -> A) (k' : type1584 A) (z : nat) (z' : nat -> A) : (term1307 A x k' z z') = (term1308 A x k' z z').
Proof. exact (MK_COMB (@lem386693) (@lem386744 A x k' z z')). Qed.
Lemma lem386746 : Peano.lt = Peano.lt.
Proof. exact (eq_refl Peano.lt). Qed.
Lemma lem386753 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386754 {A : Type'} (f : type1584 A) (x : nat) : (f x) = (@I (nat -> (nat -> A) -> nat) f x).
Proof. exact (@lem386753 nat (type977 A) f x). Qed.
Lemma lem386755 {A : Type'} (k' : type1584 A) (z : nat) : (k' z) = (@I (nat -> (nat -> A) -> nat) k' z).
Proof. exact (@lem386754 A k' z). Qed.
Lemma lem386756 {A : Type'} (z : nat -> A) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem386757 {A : Type'} (k' : type1584 A) (z : nat) (z' : nat -> A) : (k' z z') = (@I (nat -> (nat -> A) -> nat) k' z z').
Proof. exact (MK_COMB (@lem386755 A k' z) (@lem386756 A z')). Qed.
Lemma lem386759 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386760 {A : Type'} (f : type977 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> nat) f x).
Proof. exact (@lem386759 (nat -> A) nat f x). Qed.
Lemma lem386761 {A : Type'} (k' : type1584 A) (z : nat) (z' : nat -> A) : (@I (nat -> (nat -> A) -> nat) k' z z') = (term1298 A k' z z').
Proof. exact (@lem386760 A (@I (nat -> (nat -> A) -> nat) k' z) z'). Qed.
Lemma lem386763 {A : Type'} (k' : type1584 A) (z : nat) (z' : nat -> A) : (k' z z') = (term1298 A k' z z').
Proof. exact (TRANS (@lem386757 A k' z z') (@lem386761 A k' z z')). Qed.
Lemma lem386764 (z : nat) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem386765 {A : Type'} (k' : type1584 A) (z : nat) (z' : nat -> A) : (term1309 A k' z z') = (term1310 A k' z z').
Proof. exact (MK_COMB (@lem386746) (@lem386763 A k' z z')). Qed.
Lemma lem386766 {A : Type'} (k' : type1584 A) (z : nat -> A) (z' : nat) : (term1311 A k' z z') = (term1312 A k' z z').
Proof. exact (MK_COMB (@lem386765 A k' z' z) (@lem386764 z')). Qed.
Lemma lem386768 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386769 (f : type1605) (x : nat) : (f x) = (@I (nat -> nat -> Prop) f x).
Proof. exact (@lem386768 nat (nat -> Prop) f x). Qed.
Lemma lem386770 {A : Type'} (k' : type1584 A) (z : nat) (z' : nat -> A) : (term1310 A k' z z') = (term1313 A k' z z').
Proof. exact (@lem386769 Peano.lt (term1298 A k' z z')). Qed.
Lemma lem386771 (z : nat) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem386772 {A : Type'} (k' : type1584 A) (z : nat -> A) (z' : nat) : (term1312 A k' z z') = (term1314 A k' z z').
Proof. exact (MK_COMB (@lem386770 A k' z' z) (@lem386771 z')). Qed.
Lemma lem386774 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386775 (f : nat -> Prop) (x : nat) : (f x) = (@I (nat -> Prop) f x).
Proof. exact (@lem386774 nat Prop f x). Qed.
Lemma lem386776 {A : Type'} (k' : type1584 A) (z : nat -> A) (z' : nat) : (term1314 A k' z z') = (term1315 A k' z z').
Proof. exact (@lem386775 (term1313 A k' z' z) z'). Qed.
Lemma lem386777 {A : Type'} (k' : type1584 A) (z : nat -> A) (z' : nat) : (term1312 A k' z z') = (term1315 A k' z z').
Proof. exact (TRANS (@lem386772 A k' z z') (@lem386776 A k' z z')). Qed.
Lemma lem386778 {A : Type'} (k' : type1584 A) (z : nat -> A) (z' : nat) : (term1311 A k' z z') = (term1315 A k' z z').
Proof. exact (TRANS (@lem386766 A k' z z') (@lem386777 A k' z z')). Qed.
Lemma lem386779 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem386780 {A : Type'} (k' : type1584 A) (z : nat -> A) (z' : nat) : (term1316 A k' z z') = (term1317 A k' z z').
Proof. exact (MK_COMB (@lem386779) (@lem386778 A k' z z')). Qed.
Lemma lem386781 {A : Type'} (x : nat -> A) (k' : type1584 A) (z : nat) (z' : nat -> A) : (term1318 A x k' z z') = (term1319 A x k' z z').
Proof. exact (MK_COMB (@lem386780 A k' z' z) (@lem386745 A x k' z z')). Qed.
Lemma lem386782 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem386787 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386788 {A : Type'} (f : type976 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> Prop) f x).
Proof. exact (@lem386787 (nat -> A) Prop f x). Qed.
Lemma lem386790 {A : Type'} (bad : type976 A) (z : nat -> A) : (bad z) = (@I ((nat -> A) -> Prop) bad z).
Proof. exact (@lem386788 A bad z). Qed.
Lemma lem386791 {A : Type'} (bad : type976 A) (z : nat -> A) : (term807 A bad z) = (term1294 A bad z).
Proof. exact (MK_COMB (@lem386782) (@lem386790 A bad z)). Qed.
Lemma lem386792 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem386793 {A : Type'} (bad : type976 A) (z : nat -> A) : (term1075 A bad z) = (term1295 A bad z).
Proof. exact (MK_COMB (@lem386792) (@lem386791 A bad z)). Qed.
Lemma lem386794 {A : Type'} (bad : type976 A) (x : nat -> A) (k' : type1584 A) (z : nat) (z' : nat -> A) : (term1320 A bad x k' z z') = (term1321 A bad x k' z z').
Proof. exact (MK_COMB (@lem386793 A bad z') (@lem386781 A x k' z z')). Qed.
Lemma lem386795 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem386796 {A : Type'} (bad : type976 A) (x : nat -> A) (k' : type1584 A) (z : nat) (z' : nat -> A) : (term1322 A bad x k' z z') = (term1323 A bad x k' z z').
Proof. exact (MK_COMB (@lem386795) (@lem386794 A bad x k' z z')). Qed.
Lemma lem386797 {A : Type'} (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1324 A bad k' lt2 z x z') = (term1325 A bad k' lt2 z x z').
Proof. exact (MK_COMB (@lem386796 A bad x k' z' z) (@lem386692 A lt2 z x z')). Qed.
Lemma lem386798 {A : Type'} (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1326 A bad k' lt2 x z) = (term1327 A bad k' lt2 x z).
Proof. exact (fun_ext (fun z' : nat -> A => @lem386797 A bad k' lt2 z' x z)). Qed.
Lemma lem386799 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem386800 {A : Type'} (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1179 A bad k' lt2 x z) = (term1328 A bad k' lt2 x z).
Proof. exact (MK_COMB (@lem386799 A) (@lem386798 A bad k' lt2 x z)). Qed.
Lemma lem386801 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem386808 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386809 {A : Type'} (f : type1604 A) (x : nat) : (f x) = (@I (nat -> nat -> A) f x).
Proof. exact (@lem386808 nat (nat -> A) f x). Qed.
Lemma lem386810 {A : Type'} (y : type1604 A) (z : nat) : (y z) = (@I (nat -> nat -> A) y z).
Proof. exact (@lem386809 A y z). Qed.
Lemma lem386811 (z : nat) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem386812 {A : Type'} (y : type1604 A) (z : nat) : (y z z) = (@I (nat -> nat -> A) y z z).
Proof. exact (MK_COMB (@lem386810 A y z) (@lem386811 z)). Qed.
Lemma lem386814 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386815 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem386814 nat A f x). Qed.
Lemma lem386816 {A : Type'} (y : type1604 A) (z : nat) : (@I (nat -> nat -> A) y z z) = (term1331 A y z).
Proof. exact (@lem386815 A (@I (nat -> nat -> A) y z) z). Qed.
Lemma lem386818 {A : Type'} (y : type1604 A) (z : nat) : (y z z) = (term1331 A y z).
Proof. exact (TRANS (@lem386812 A y z) (@lem386816 A y z)). Qed.
Lemma lem386823 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386824 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem386823 nat A f x). Qed.
Lemma lem386826 {A : Type'} (x : nat -> A) (z : nat) : (x z) = (@I (nat -> A) x z).
Proof. exact (@lem386824 A x z). Qed.
Lemma lem386827 {A : Type'} (y : type1604 A) (z : nat) : (term1332 A y z) = (term1333 A y z).
Proof. exact (MK_COMB (@lem386801 A) (@lem386818 A y z)). Qed.
Lemma lem386828 {A : Type'} (y : type1604 A) (x : nat -> A) (z : nat) : ((y z z) = (x z)) = ((term1331 A y z) = (@I (nat -> A) x z)).
Proof. exact (MK_COMB (@lem386827 A y z) (@lem386826 A x z)). Qed.
Lemma lem386829 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem386836 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386837 {A : Type'} (f : type1604 A) (x : nat) : (f x) = (@I (nat -> nat -> A) f x).
Proof. exact (@lem386836 nat (nat -> A) f x). Qed.
Lemma lem386838 {A : Type'} (y : type1604 A) (z : nat) : (y z) = (@I (nat -> nat -> A) y z).
Proof. exact (@lem386837 A y z). Qed.
Lemma lem386839 (k : nat) : k = k.
Proof. exact (eq_refl k). Qed.
Lemma lem386840 {A : Type'} (y : type1604 A) (z : nat) (k : nat) : (y z k) = (@I (nat -> nat -> A) y z k).
Proof. exact (MK_COMB (@lem386838 A y z) (@lem386839 k)). Qed.
Lemma lem386842 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386843 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem386842 nat A f x). Qed.
Lemma lem386844 {A : Type'} (y : type1604 A) (z : nat) (k : nat) : (@I (nat -> nat -> A) y z k) = (term1334 A y z k).
Proof. exact (@lem386843 A (@I (nat -> nat -> A) y z) k). Qed.
Lemma lem386846 {A : Type'} (y : type1604 A) (z : nat) (k : nat) : (y z k) = (term1334 A y z k).
Proof. exact (TRANS (@lem386840 A y z k) (@lem386844 A y z k)). Qed.
Lemma lem386851 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386852 {A : Type'} (f : nat -> A) (x : nat) : (f x) = (@I (nat -> A) f x).
Proof. exact (@lem386851 nat A f x). Qed.
Lemma lem386854 {A : Type'} (x : nat -> A) (k : nat) : (x k) = (@I (nat -> A) x k).
Proof. exact (@lem386852 A x k). Qed.
Lemma lem386855 {A : Type'} (y : type1604 A) (z : nat) (k : nat) : (term1335 A y z k) = (term1336 A y z k).
Proof. exact (MK_COMB (@lem386829 A) (@lem386846 A y z k)). Qed.
Lemma lem386856 {A : Type'} (y : type1604 A) (z : nat) (x : nat -> A) (k : nat) : ((y z k) = (x k)) = ((term1334 A y z k) = (@I (nat -> A) x k)).
Proof. exact (MK_COMB (@lem386855 A y z k) (@lem386854 A x k)). Qed.
Lemma lem386857 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem386864 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386865 (f : type1605) (x : nat) : (f x) = (@I (nat -> nat -> Prop) f x).
Proof. exact (@lem386864 nat (nat -> Prop) f x). Qed.
Lemma lem386866 (k : nat) : (Peano.lt k) = (@I (nat -> nat -> Prop) Peano.lt k).
Proof. exact (@lem386865 Peano.lt k). Qed.
Lemma lem386867 (z : nat) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem386868 (k : nat) (z : nat) : (Peano.lt k z) = (@I (nat -> nat -> Prop) Peano.lt k z).
Proof. exact (MK_COMB (@lem386866 k) (@lem386867 z)). Qed.
Lemma lem386870 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386871 (f : nat -> Prop) (x : nat) : (f x) = (@I (nat -> Prop) f x).
Proof. exact (@lem386870 nat Prop f x). Qed.
Lemma lem386872 (k : nat) (z : nat) : (@I (nat -> nat -> Prop) Peano.lt k z) = (term1282 k z).
Proof. exact (@lem386871 (@I (nat -> nat -> Prop) Peano.lt k) z). Qed.
Lemma lem386874 (k : nat) (z : nat) : (Peano.lt k z) = (term1282 k z).
Proof. exact (TRANS (@lem386868 k z) (@lem386872 k z)). Qed.
Lemma lem386875 (k : nat) (z : nat) : (term1283 k z) = (term1284 k z).
Proof. exact (MK_COMB (@lem386857) (@lem386874 k z)). Qed.
Lemma lem386876 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem386877 (k : nat) (z : nat) : (term1285 k z) = (term1286 k z).
Proof. exact (MK_COMB (@lem386876) (@lem386875 k z)). Qed.
Lemma lem386878 {A : Type'} (y : type1604 A) (z : nat) (x : nat -> A) (k : nat) : (term1337 A y z x k) = (term1338 A y z x k).
Proof. exact (MK_COMB (@lem386877 k z) (@lem386856 A y z x k)). Qed.
Lemma lem386879 {A : Type'} (y : type1604 A) (z : nat) (x : nat -> A) : (term1339 A y z x) = (term1340 A y z x).
Proof. exact (fun_ext (fun k : nat => @lem386878 A y z x k)). Qed.
Lemma lem386880 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem386881 {A : Type'} (y : type1604 A) (z : nat) (x : nat -> A) : (term1341 A y z x) = (term1342 A y z x).
Proof. exact (MK_COMB (@lem386880) (@lem386879 A y z x)). Qed.
Lemma lem386882 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem386883 {A : Type'} (y : type1604 A) (z : nat) (x : nat -> A) : (term1343 A y z x) = (term1344 A y z x).
Proof. exact (MK_COMB (@lem386882) (@lem386881 A y z x)). Qed.
Lemma lem386884 {A : Type'} (y : type1604 A) (x : nat -> A) (z : nat) : (term1345 A y x z) = (term1346 A y x z).
Proof. exact (MK_COMB (@lem386883 A y z x) (@lem386828 A y x z)). Qed.
Lemma lem386885 {A : Type'} (bad : type976 A) : bad = bad.
Proof. exact (eq_refl bad). Qed.
Lemma lem386890 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386891 {A : Type'} (f : type1604 A) (x : nat) : (f x) = (@I (nat -> nat -> A) f x).
Proof. exact (@lem386890 nat (nat -> A) f x). Qed.
Lemma lem386893 {A : Type'} (y : type1604 A) (z : nat) : (y z) = (@I (nat -> nat -> A) y z).
Proof. exact (@lem386891 A y z). Qed.
Lemma lem386894 {A : Type'} (bad : type976 A) (y : type1604 A) (z : nat) : (term1347 A bad y z) = (term1348 A bad y z).
Proof. exact (MK_COMB (@lem386885 A bad) (@lem386893 A y z)). Qed.
Lemma lem386896 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386897 {A : Type'} (f : type976 A) (x : nat -> A) : (f x) = (@I ((nat -> A) -> Prop) f x).
Proof. exact (@lem386896 (nat -> A) Prop f x). Qed.
Lemma lem386898 {A : Type'} (bad : type976 A) (y : type1604 A) (z : nat) : (term1348 A bad y z) = (term1349 A bad y z).
Proof. exact (@lem386897 A bad (@I (nat -> nat -> A) y z)). Qed.
Lemma lem386899 {A : Type'} (bad : type976 A) (y : type1604 A) (z : nat) : (term1347 A bad y z) = (term1349 A bad y z).
Proof. exact (TRANS (@lem386894 A bad y z) (@lem386898 A bad y z)). Qed.
Lemma lem386900 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem386901 {A : Type'} (bad : type976 A) (y : type1604 A) (z : nat) : (term1350 A bad y z) = (term1351 A bad y z).
Proof. exact (MK_COMB (@lem386900) (@lem386899 A bad y z)). Qed.
Lemma lem386902 {A : Type'} (bad : type976 A) (y : type1604 A) (x : nat -> A) (z : nat) : (term1104 A bad y x z) = (term1352 A bad y x z).
Proof. exact (MK_COMB (@lem386901 A bad y z) (@lem386884 A y x z)). Qed.
Lemma lem386903 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem386904 {A : Type'} (bad : type976 A) (y : type1604 A) (x : nat -> A) (z : nat) : (term2130 A bad y x z) = (term2131 A bad y x z).
Proof. exact (MK_COMB (@lem386903) (@lem386902 A bad y x z)). Qed.
Lemma lem386905 {A : Type'} (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2132 A y bad k' lt2 x z) = (term2133 A y bad k' lt2 x z).
Proof. exact (MK_COMB (@lem386904 A bad y x z) (@lem386800 A bad k' lt2 x z)). Qed.
Lemma lem386906 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem386913 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386914 (f : type1605) (x : nat) : (f x) = (@I (nat -> nat -> Prop) f x).
Proof. exact (@lem386913 nat (nat -> Prop) f x). Qed.
Lemma lem386915 (z : nat) : (Peano.lt z) = (@I (nat -> nat -> Prop) Peano.lt z).
Proof. exact (@lem386914 Peano.lt z). Qed.
Lemma lem386916 (n : nat) : n = n.
Proof. exact (eq_refl n). Qed.
Lemma lem386917 (z : nat) (n : nat) : (Peano.lt z n) = (@I (nat -> nat -> Prop) Peano.lt z n).
Proof. exact (MK_COMB (@lem386915 z) (@lem386916 n)). Qed.
Lemma lem386919 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem386920 (f : nat -> Prop) (x : nat) : (f x) = (@I (nat -> Prop) f x).
Proof. exact (@lem386919 nat Prop f x). Qed.
Lemma lem386921 (z : nat) (n : nat) : (@I (nat -> nat -> Prop) Peano.lt z n) = (term1282 z n).
Proof. exact (@lem386920 (@I (nat -> nat -> Prop) Peano.lt z) n). Qed.
Lemma lem386923 (z : nat) (n : nat) : (Peano.lt z n) = (term1282 z n).
Proof. exact (TRANS (@lem386917 z n) (@lem386921 z n)). Qed.
Lemma lem386924 (z : nat) (n : nat) : (term1283 z n) = (term1284 z n).
Proof. exact (MK_COMB (@lem386906) (@lem386923 z n)). Qed.
Lemma lem386933 (z : nat) (n : nat) : (term2134 z n) = (term2134 z n).
Proof. exact (eq_refl (term2134 z n)). Qed.
Lemma lem386934 (z : nat) (n : nat) : (term1851 z n) = (term2135 z n).
Proof. exact (MK_COMB (@lem386933 z n) (@lem386924 z n)). Qed.
Lemma lem386935 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem386936 (z : nat) (n : nat) : (term1855 z n) = (term2136 z n).
Proof. exact (MK_COMB (@lem386935) (@lem386934 z n)). Qed.
Lemma lem386937 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1957 A n y bad k' lt2 x z) = (term2137 A n y bad k' lt2 x z).
Proof. exact (MK_COMB (@lem386936 z n) (@lem386905 A y bad k' lt2 x z)). Qed.
Lemma lem386938 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) : (term1959 A n y bad k' lt2 x) = (term2138 A n y bad k' lt2 x).
Proof. exact (fun_ext (fun z : nat => @lem386937 A n y bad k' lt2 x z)). Qed.
Lemma lem386939 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem386940 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) : (term1961 A n y bad k' lt2 x) = (term2139 A n y bad k' lt2 x).
Proof. exact (MK_COMB (@lem386939) (@lem386938 A n y bad k' lt2 x)). Qed.
Lemma lem386941 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem386942 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) : (term1995 A n y bad k' lt2 x) = (term2140 A n y bad k' lt2 x).
Proof. exact (MK_COMB (@lem386941) (@lem386940 A n y bad k' lt2 x)). Qed.
Lemma lem386943 {A : Type'} (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) : (term2033 A n y k' x lt2 n' k'' bad x') = (term2141 A n y k' x lt2 n' k'' bad x').
Proof. exact (MK_COMB (@lem386942 A n y bad k' lt2 x) (@lem386659 A lt2 n' k'' bad x')). Qed.
Lemma lem386944 {A : Type'} (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2141 A n y k' x lt2 n' k'' bad x'.
Proof. exact (EQ_MP (@lem386943 A n y k' x lt2 n' k'' bad x') (@lem386417 A n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem386946 {A : Type'} (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2139 A n y bad k' lt2 x.
Proof. exact (proj1 (@lem386944 A n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem386974 {A : Type'} (n : nat) (bad : type976 A) (x : nat -> A) (k : type977 A) (y : nat -> A) : (term2127 A bad n x k y) = (term2142 A n bad x k y).
Proof. exact (@lem19490 (term2122 A k y n) (term1294 A bad y) (term2109 A x k y)). Qed.
Lemma lem386975 {A : Type'} (n : nat) (bad : type976 A) (x : nat -> A) (k : type977 A) : (term2128 A bad n x k) = (term2143 A n bad x k).
Proof. exact (fun_ext (fun y : nat -> A => @lem386974 A n bad x k y)). Qed.
Lemma lem386976 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem386978 {A : Type'} (n : nat) (bad : type976 A) (x : nat -> A) (k : type977 A) : (term2129 A bad n x k) = (term2144 A n bad x k).
Proof. exact (MK_COMB (@lem386976 A) (@lem386975 A n bad x k)). Qed.
Lemma lem386979 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) (h1 : term2096 A bad n x k) : term2144 A n bad x k.
Proof. exact (EQ_MP (@lem386978 A n bad x k) (@lem386511 A bad n x k h1)). Qed.
Lemma lem386981 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1422 A P Q) = (term1423 A P Q).
Proof. exact (EQ_MP (@lem19025 A P Q) (@lem19024 A P Q)). Qed.
Lemma lem386982 (P : nat -> Prop) (Q : Prop) : (term1424 P Q) = (term1425 P Q).
Proof. exact (@lem386981 nat P Q). Qed.
Lemma lem386983 {A : Type'} (y : type1604 A) (x : nat -> A) (z : nat) : (term1426 A y x z) = (term1427 A y x z).
Proof. exact (@lem386982 (term1340 A y z x) ((term1331 A y z) = (@I (nat -> A) x z))). Qed.
Lemma lem386984 {A : Type'} (y : type1604 A) (z : nat) (x : nat -> A) (k : nat) : (term1428 A y z x k) = (term1338 A y z x k).
Proof. exact (eq_refl (term1428 A y z x k)). Qed.
Lemma lem386985 {A : Type'} (y : type1604 A) (z : nat) (x : nat -> A) : (term1429 A y z x) = (term1340 A y z x).
Proof. exact (fun_ext (fun k : nat => @lem386984 A y z x k)). Qed.
Lemma lem386986 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem386987 {A : Type'} (y : type1604 A) (z : nat) (x : nat -> A) : (term1430 A y z x) = (term1342 A y z x).
Proof. exact (MK_COMB (@lem386986) (@lem386985 A y z x)). Qed.
Lemma lem386988 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem386989 {A : Type'} (y : type1604 A) (z : nat) (x : nat -> A) : (term1431 A y z x) = (term1344 A y z x).
Proof. exact (MK_COMB (@lem386988) (@lem386987 A y z x)). Qed.
Lemma lem386990 {A : Type'} (y : type1604 A) (x : nat -> A) (z : nat) : ((term1331 A y z) = (@I (nat -> A) x z)) = ((term1331 A y z) = (@I (nat -> A) x z)).
Proof. exact (eq_refl ((term1331 A y z) = (@I (nat -> A) x z))). Qed.
Lemma lem386991 {A : Type'} (y : type1604 A) (x : nat -> A) (z : nat) : (term1426 A y x z) = (term1346 A y x z).
Proof. exact (MK_COMB (@lem386989 A y z x) (@lem386990 A y x z)). Qed.
Lemma lem386992 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem386993 {A : Type'} (y : type1604 A) (x : nat -> A) (z : nat) : (term1432 A y x z) = (term1433 A y x z).
Proof. exact (MK_COMB (@lem386992) (@lem386991 A y x z)). Qed.
Lemma lem386994 {A : Type'} (y : type1604 A) (z : nat) (x : nat -> A) (k : nat) : (term1428 A y z x k) = (term1338 A y z x k).
Proof. exact (eq_refl (term1428 A y z x k)). Qed.
Lemma lem386995 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem386996 {A : Type'} (y : type1604 A) (z : nat) (x : nat -> A) (k : nat) : (term1434 A y z x k) = (term1435 A y z x k).
Proof. exact (MK_COMB (@lem386995) (@lem386994 A y z x k)). Qed.
Lemma lem386997 {A : Type'} (y : type1604 A) (x : nat -> A) (z : nat) : ((term1331 A y z) = (@I (nat -> A) x z)) = ((term1331 A y z) = (@I (nat -> A) x z)).
Proof. exact (eq_refl ((term1331 A y z) = (@I (nat -> A) x z))). Qed.
Lemma lem386998 {A : Type'} (k : nat) (y : type1604 A) (x : nat -> A) (z : nat) : (term1436 A k y x z) = (term1437 A k y x z).
Proof. exact (MK_COMB (@lem386996 A y z x k) (@lem386997 A y x z)). Qed.
Lemma lem386999 {A : Type'} (y : type1604 A) (x : nat -> A) (z : nat) : (term1438 A y x z) = (term1439 A y x z).
Proof. exact (fun_ext (fun k : nat => @lem386998 A k y x z)). Qed.
Lemma lem387000 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem387001 {A : Type'} (y : type1604 A) (x : nat -> A) (z : nat) : (term1427 A y x z) = (term1440 A y x z).
Proof. exact (MK_COMB (@lem387000) (@lem386999 A y x z)). Qed.
Lemma lem387002 {A : Type'} (y : type1604 A) (x : nat -> A) (z : nat) : ((term1426 A y x z) = (term1427 A y x z)) = ((term1346 A y x z) = (term1440 A y x z)).
Proof. exact (MK_COMB (@lem386993 A y x z) (@lem387001 A y x z)). Qed.
Lemma lem387003 {A : Type'} (y : type1604 A) (x : nat -> A) (z : nat) : (term1346 A y x z) = (term1440 A y x z).
Proof. exact (EQ_MP (@lem387002 A y x z) (@lem386983 A y x z)). Qed.
Lemma lem387004 {A : Type'} (bad : type976 A) (y : type1604 A) (z : nat) : (term1351 A bad y z) = (term1351 A bad y z).
Proof. exact (eq_refl (term1351 A bad y z)). Qed.
Lemma lem387005 {A : Type'} (bad : type976 A) (y : type1604 A) (x : nat -> A) (z : nat) : (term1352 A bad y x z) = (term1441 A bad y x z).
Proof. exact (MK_COMB (@lem387004 A bad y z) (@lem387003 A y x z)). Qed.
Lemma lem387007 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1442 A P Q) = (term1443 A P Q).
Proof. exact (EQ_MP (@lem19019 A P Q) (@lem19018 A P Q)). Qed.
Lemma lem387008 (P : Prop) (Q : nat -> Prop) : (term1444 P Q) = (term1445 P Q).
Proof. exact (@lem387007 nat P Q). Qed.
Lemma lem387009 {A : Type'} (bad : type976 A) (y : type1604 A) (x : nat -> A) (z : nat) : (term1446 A bad y x z) = (term1447 A bad y x z).
Proof. exact (@lem387008 (term1349 A bad y z) (term1439 A y x z)). Qed.
Lemma lem387010 {A : Type'} (k : nat) (y : type1604 A) (x : nat -> A) (z : nat) : (term1448 A y x z k) = (term1437 A k y x z).
Proof. exact (eq_refl (term1448 A y x z k)). Qed.
Lemma lem387011 {A : Type'} (y : type1604 A) (x : nat -> A) (z : nat) : (term1449 A y x z) = (term1439 A y x z).
Proof. exact (fun_ext (fun k : nat => @lem387010 A k y x z)). Qed.
Lemma lem387012 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem387013 {A : Type'} (y : type1604 A) (x : nat -> A) (z : nat) : (term1450 A y x z) = (term1440 A y x z).
Proof. exact (MK_COMB (@lem387012) (@lem387011 A y x z)). Qed.
Lemma lem387014 {A : Type'} (bad : type976 A) (y : type1604 A) (z : nat) : (term1351 A bad y z) = (term1351 A bad y z).
Proof. exact (eq_refl (term1351 A bad y z)). Qed.
Lemma lem387015 {A : Type'} (bad : type976 A) (y : type1604 A) (x : nat -> A) (z : nat) : (term1446 A bad y x z) = (term1441 A bad y x z).
Proof. exact (MK_COMB (@lem387014 A bad y z) (@lem387013 A y x z)). Qed.
Lemma lem387016 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem387017 {A : Type'} (bad : type976 A) (y : type1604 A) (x : nat -> A) (z : nat) : (term1451 A bad y x z) = (term1452 A bad y x z).
Proof. exact (MK_COMB (@lem387016) (@lem387015 A bad y x z)). Qed.
Lemma lem387018 {A : Type'} (k : nat) (y : type1604 A) (x : nat -> A) (z : nat) : (term1448 A y x z k) = (term1437 A k y x z).
Proof. exact (eq_refl (term1448 A y x z k)). Qed.
Lemma lem387019 {A : Type'} (bad : type976 A) (y : type1604 A) (z : nat) : (term1351 A bad y z) = (term1351 A bad y z).
Proof. exact (eq_refl (term1351 A bad y z)). Qed.
Lemma lem387020 {A : Type'} (bad : type976 A) (k : nat) (y : type1604 A) (x : nat -> A) (z : nat) : (term1453 A bad y x z k) = (term1454 A bad k y x z).
Proof. exact (MK_COMB (@lem387019 A bad y z) (@lem387018 A k y x z)). Qed.
Lemma lem387021 {A : Type'} (bad : type976 A) (y : type1604 A) (x : nat -> A) (z : nat) : (term1455 A bad y x z) = (term1456 A bad y x z).
Proof. exact (fun_ext (fun k : nat => @lem387020 A bad k y x z)). Qed.
Lemma lem387022 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem387023 {A : Type'} (bad : type976 A) (y : type1604 A) (x : nat -> A) (z : nat) : (term1447 A bad y x z) = (term1457 A bad y x z).
Proof. exact (MK_COMB (@lem387022) (@lem387021 A bad y x z)). Qed.
Lemma lem387024 {A : Type'} (bad : type976 A) (y : type1604 A) (x : nat -> A) (z : nat) : ((term1446 A bad y x z) = (term1447 A bad y x z)) = ((term1441 A bad y x z) = (term1457 A bad y x z)).
Proof. exact (MK_COMB (@lem387017 A bad y x z) (@lem387023 A bad y x z)). Qed.
Lemma lem387025 {A : Type'} (bad : type976 A) (y : type1604 A) (x : nat -> A) (z : nat) : (term1441 A bad y x z) = (term1457 A bad y x z).
Proof. exact (EQ_MP (@lem387024 A bad y x z) (@lem387009 A bad y x z)). Qed.
Lemma lem387026 {A : Type'} (bad : type976 A) (y : type1604 A) (x : nat -> A) (z : nat) : (term1352 A bad y x z) = (term1457 A bad y x z).
Proof. exact (TRANS (@lem387005 A bad y x z) (@lem387025 A bad y x z)). Qed.
Lemma lem387027 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem387028 {A : Type'} (bad : type976 A) (y : type1604 A) (x : nat -> A) (z : nat) : (term2131 A bad y x z) = (term2145 A bad y x z).
Proof. exact (MK_COMB (@lem387027) (@lem387026 A bad y x z)). Qed.
Lemma lem387029 {A : Type'} (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1328 A bad k' lt2 x z) = (term1328 A bad k' lt2 x z).
Proof. exact (eq_refl (term1328 A bad k' lt2 x z)). Qed.
Lemma lem387030 {A : Type'} (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2133 A y bad k' lt2 x z) = (term2146 A y bad k' lt2 x z).
Proof. exact (MK_COMB (@lem387028 A bad y x z) (@lem387029 A bad k' lt2 x z)). Qed.
Lemma lem387034 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1422 A P Q) = (term1423 A P Q).
Proof. exact (EQ_MP (@lem19025 A P Q) (@lem19024 A P Q)). Qed.
Lemma lem387035 (P : nat -> Prop) (Q : Prop) : (term1424 P Q) = (term1425 P Q).
Proof. exact (@lem387034 nat P Q). Qed.
Lemma lem387036 {A : Type'} (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2147 A y bad k' lt2 x z) = (term2148 A y bad k' lt2 x z).
Proof. exact (@lem387035 (term1456 A bad y x z) (term1328 A bad k' lt2 x z)). Qed.
Lemma lem387037 {A : Type'} (bad : type976 A) (k : nat) (y : type1604 A) (x : nat -> A) (z : nat) : (term1473 A bad y x z k) = (term1454 A bad k y x z).
Proof. exact (eq_refl (term1473 A bad y x z k)). Qed.
Lemma lem387038 {A : Type'} (bad : type976 A) (y : type1604 A) (x : nat -> A) (z : nat) : (term2149 A bad y x z) = (term1456 A bad y x z).
Proof. exact (fun_ext (fun k : nat => @lem387037 A bad k y x z)). Qed.
Lemma lem387039 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem387040 {A : Type'} (bad : type976 A) (y : type1604 A) (x : nat -> A) (z : nat) : (term2150 A bad y x z) = (term1457 A bad y x z).
Proof. exact (MK_COMB (@lem387039) (@lem387038 A bad y x z)). Qed.
Lemma lem387041 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem387042 {A : Type'} (bad : type976 A) (y : type1604 A) (x : nat -> A) (z : nat) : (term2151 A bad y x z) = (term2145 A bad y x z).
Proof. exact (MK_COMB (@lem387041) (@lem387040 A bad y x z)). Qed.
Lemma lem387043 {A : Type'} (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1328 A bad k' lt2 x z) = (term1328 A bad k' lt2 x z).
Proof. exact (eq_refl (term1328 A bad k' lt2 x z)). Qed.
Lemma lem387044 {A : Type'} (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2147 A y bad k' lt2 x z) = (term2146 A y bad k' lt2 x z).
Proof. exact (MK_COMB (@lem387042 A bad y x z) (@lem387043 A bad k' lt2 x z)). Qed.
Lemma lem387045 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem387046 {A : Type'} (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2152 A y bad k' lt2 x z) = (term2153 A y bad k' lt2 x z).
Proof. exact (MK_COMB (@lem387045) (@lem387044 A y bad k' lt2 x z)). Qed.
Lemma lem387047 {A : Type'} (bad : type976 A) (k : nat) (y : type1604 A) (x : nat -> A) (z : nat) : (term1473 A bad y x z k) = (term1454 A bad k y x z).
Proof. exact (eq_refl (term1473 A bad y x z k)). Qed.
Lemma lem387048 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem387049 {A : Type'} (bad : type976 A) (k : nat) (y : type1604 A) (x : nat -> A) (z : nat) : (term2154 A bad y x z k) = (term2155 A bad k y x z).
Proof. exact (MK_COMB (@lem387048) (@lem387047 A bad k y x z)). Qed.
Lemma lem387050 {A : Type'} (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term1328 A bad k' lt2 x z) = (term1328 A bad k' lt2 x z).
Proof. exact (eq_refl (term1328 A bad k' lt2 x z)). Qed.
Lemma lem387051 {A : Type'} (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2156 A y k bad k' lt2 x z) = (term2157 A k y bad k' lt2 x z).
Proof. exact (MK_COMB (@lem387049 A bad k y x z) (@lem387050 A bad k' lt2 x z)). Qed.
Lemma lem387052 {A : Type'} (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2158 A y bad k' lt2 x z) = (term2159 A y bad k' lt2 x z).
Proof. exact (fun_ext (fun k : nat => @lem387051 A k y bad k' lt2 x z)). Qed.
Lemma lem387053 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem387054 {A : Type'} (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2148 A y bad k' lt2 x z) = (term2160 A y bad k' lt2 x z).
Proof. exact (MK_COMB (@lem387053) (@lem387052 A y bad k' lt2 x z)). Qed.
Lemma lem387055 {A : Type'} (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : ((term2147 A y bad k' lt2 x z) = (term2148 A y bad k' lt2 x z)) = ((term2146 A y bad k' lt2 x z) = (term2160 A y bad k' lt2 x z)).
Proof. exact (MK_COMB (@lem387046 A y bad k' lt2 x z) (@lem387054 A y bad k' lt2 x z)). Qed.
Lemma lem387056 {A : Type'} (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2146 A y bad k' lt2 x z) = (term2160 A y bad k' lt2 x z).
Proof. exact (EQ_MP (@lem387055 A y bad k' lt2 x z) (@lem387036 A y bad k' lt2 x z)). Qed.
Lemma lem387058 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1442 A P Q) = (term1443 A P Q).
Proof. exact (EQ_MP (@lem19019 A P Q) (@lem19018 A P Q)). Qed.
Lemma lem387059 {A : Type'} (P : Prop) (Q : type976 A) : (term2161 A P Q) = (term2162 A P Q).
Proof. exact (@lem387058 (nat -> A) P Q). Qed.
Lemma lem387060 {A : Type'} (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2163 A k y bad k' lt2 x z) = (term2164 A k y bad k' lt2 x z).
Proof. exact (@lem387059 A (term1454 A bad k y x z) (term1327 A bad k' lt2 x z)). Qed.
Lemma lem387061 {A : Type'} (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term2165 A bad k' lt2 x z' z) = (term1325 A bad k' lt2 z x z').
Proof. exact (eq_refl (term2165 A bad k' lt2 x z' z)). Qed.
Lemma lem387062 {A : Type'} (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2166 A bad k' lt2 x z) = (term1327 A bad k' lt2 x z).
Proof. exact (fun_ext (fun z' : nat -> A => @lem387061 A bad k' lt2 z' x z)). Qed.
Lemma lem387063 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem387064 {A : Type'} (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2167 A bad k' lt2 x z) = (term1328 A bad k' lt2 x z).
Proof. exact (MK_COMB (@lem387063 A) (@lem387062 A bad k' lt2 x z)). Qed.
Lemma lem387065 {A : Type'} (bad : type976 A) (k : nat) (y : type1604 A) (x : nat -> A) (z : nat) : (term2155 A bad k y x z) = (term2155 A bad k y x z).
Proof. exact (eq_refl (term2155 A bad k y x z)). Qed.
Lemma lem387066 {A : Type'} (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2163 A k y bad k' lt2 x z) = (term2157 A k y bad k' lt2 x z).
Proof. exact (MK_COMB (@lem387065 A bad k y x z) (@lem387064 A bad k' lt2 x z)). Qed.
Lemma lem387067 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem387068 {A : Type'} (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2168 A k y bad k' lt2 x z) = (term2169 A k y bad k' lt2 x z).
Proof. exact (MK_COMB (@lem387067) (@lem387066 A k y bad k' lt2 x z)). Qed.
Lemma lem387069 {A : Type'} (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term2165 A bad k' lt2 x z' z) = (term1325 A bad k' lt2 z x z').
Proof. exact (eq_refl (term2165 A bad k' lt2 x z' z)). Qed.
Lemma lem387070 {A : Type'} (bad : type976 A) (k : nat) (y : type1604 A) (x : nat -> A) (z : nat) : (term2155 A bad k y x z) = (term2155 A bad k y x z).
Proof. exact (eq_refl (term2155 A bad k y x z)). Qed.
Lemma lem387071 {A : Type'} (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term2170 A k y bad k' lt2 x z' z) = (term2171 A k y bad k' lt2 z x z').
Proof. exact (MK_COMB (@lem387070 A bad k y x z') (@lem387069 A bad k' lt2 z x z')). Qed.
Lemma lem387072 {A : Type'} (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2172 A k y bad k' lt2 x z) = (term2173 A k y bad k' lt2 x z).
Proof. exact (fun_ext (fun z' : nat -> A => @lem387071 A k y bad k' lt2 z' x z)). Qed.
Lemma lem387073 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem387074 {A : Type'} (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2164 A k y bad k' lt2 x z) = (term2174 A k y bad k' lt2 x z).
Proof. exact (MK_COMB (@lem387073 A) (@lem387072 A k y bad k' lt2 x z)). Qed.
Lemma lem387075 {A : Type'} (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : ((term2163 A k y bad k' lt2 x z) = (term2164 A k y bad k' lt2 x z)) = ((term2157 A k y bad k' lt2 x z) = (term2174 A k y bad k' lt2 x z)).
Proof. exact (MK_COMB (@lem387068 A k y bad k' lt2 x z) (@lem387074 A k y bad k' lt2 x z)). Qed.
Lemma lem387076 {A : Type'} (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2157 A k y bad k' lt2 x z) = (term2174 A k y bad k' lt2 x z).
Proof. exact (EQ_MP (@lem387075 A k y bad k' lt2 x z) (@lem387060 A k y bad k' lt2 x z)). Qed.
Lemma lem387077 {A : Type'} (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2159 A y bad k' lt2 x z) = (term2175 A y bad k' lt2 x z).
Proof. exact (fun_ext (fun k : nat => @lem387076 A k y bad k' lt2 x z)). Qed.
Lemma lem387078 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem387079 {A : Type'} (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2160 A y bad k' lt2 x z) = (term2176 A y bad k' lt2 x z).
Proof. exact (MK_COMB (@lem387078) (@lem387077 A y bad k' lt2 x z)). Qed.
Lemma lem387080 {A : Type'} (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2146 A y bad k' lt2 x z) = (term2176 A y bad k' lt2 x z).
Proof. exact (TRANS (@lem387056 A y bad k' lt2 x z) (@lem387079 A y bad k' lt2 x z)). Qed.
Lemma lem387081 {A : Type'} (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2133 A y bad k' lt2 x z) = (term2176 A y bad k' lt2 x z).
Proof. exact (TRANS (@lem387030 A y bad k' lt2 x z) (@lem387080 A y bad k' lt2 x z)). Qed.
Lemma lem387082 (z : nat) (n : nat) : (term2136 z n) = (term2136 z n).
Proof. exact (eq_refl (term2136 z n)). Qed.
Lemma lem387083 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2137 A n y bad k' lt2 x z) = (term2177 A n y bad k' lt2 x z).
Proof. exact (MK_COMB (@lem387082 z n) (@lem387081 A y bad k' lt2 x z)). Qed.
Lemma lem387085 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1395 A P Q) = (term1396 A P Q).
Proof. exact (EQ_MP (@lem19007 A P Q) (@lem19006 A P Q)). Qed.
Lemma lem387086 (P : Prop) (Q : nat -> Prop) : (term2178 P Q) = (term2179 P Q).
Proof. exact (@lem387085 nat P Q). Qed.
Lemma lem387087 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2180 A n y bad k' lt2 x z) = (term2181 A n y bad k' lt2 x z).
Proof. exact (@lem387086 (term2135 z n) (term2175 A y bad k' lt2 x z)). Qed.
Lemma lem387088 {A : Type'} (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2182 A y bad k' lt2 x z k) = (term2174 A k y bad k' lt2 x z).
Proof. exact (eq_refl (term2182 A y bad k' lt2 x z k)). Qed.
Lemma lem387089 {A : Type'} (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2183 A y bad k' lt2 x z) = (term2175 A y bad k' lt2 x z).
Proof. exact (fun_ext (fun k : nat => @lem387088 A k y bad k' lt2 x z)). Qed.
Lemma lem387090 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem387091 {A : Type'} (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2184 A y bad k' lt2 x z) = (term2176 A y bad k' lt2 x z).
Proof. exact (MK_COMB (@lem387090) (@lem387089 A y bad k' lt2 x z)). Qed.
Lemma lem387092 (z : nat) (n : nat) : (term2136 z n) = (term2136 z n).
Proof. exact (eq_refl (term2136 z n)). Qed.
Lemma lem387093 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2180 A n y bad k' lt2 x z) = (term2177 A n y bad k' lt2 x z).
Proof. exact (MK_COMB (@lem387092 z n) (@lem387091 A y bad k' lt2 x z)). Qed.
Lemma lem387094 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem387095 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2185 A n y bad k' lt2 x z) = (term2186 A n y bad k' lt2 x z).
Proof. exact (MK_COMB (@lem387094) (@lem387093 A n y bad k' lt2 x z)). Qed.
Lemma lem387096 {A : Type'} (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2182 A y bad k' lt2 x z k) = (term2174 A k y bad k' lt2 x z).
Proof. exact (eq_refl (term2182 A y bad k' lt2 x z k)). Qed.
Lemma lem387097 (z : nat) (n : nat) : (term2136 z n) = (term2136 z n).
Proof. exact (eq_refl (term2136 z n)). Qed.
Lemma lem387098 {A : Type'} (n : nat) (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2187 A n y bad k' lt2 x z k) = (term2188 A n k y bad k' lt2 x z).
Proof. exact (MK_COMB (@lem387097 z n) (@lem387096 A k y bad k' lt2 x z)). Qed.
Lemma lem387099 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2189 A n y bad k' lt2 x z) = (term2190 A n y bad k' lt2 x z).
Proof. exact (fun_ext (fun k : nat => @lem387098 A n k y bad k' lt2 x z)). Qed.
Lemma lem387100 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem387101 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2181 A n y bad k' lt2 x z) = (term2191 A n y bad k' lt2 x z).
Proof. exact (MK_COMB (@lem387100) (@lem387099 A n y bad k' lt2 x z)). Qed.
Lemma lem387102 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : ((term2180 A n y bad k' lt2 x z) = (term2181 A n y bad k' lt2 x z)) = ((term2177 A n y bad k' lt2 x z) = (term2191 A n y bad k' lt2 x z)).
Proof. exact (MK_COMB (@lem387095 A n y bad k' lt2 x z) (@lem387101 A n y bad k' lt2 x z)). Qed.
Lemma lem387103 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2177 A n y bad k' lt2 x z) = (term2191 A n y bad k' lt2 x z).
Proof. exact (EQ_MP (@lem387102 A n y bad k' lt2 x z) (@lem387087 A n y bad k' lt2 x z)). Qed.
Lemma lem387105 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1395 A P Q) = (term1396 A P Q).
Proof. exact (EQ_MP (@lem19007 A P Q) (@lem19006 A P Q)). Qed.
Lemma lem387106 {A : Type'} (P : Prop) (Q : type976 A) : (term1397 A P Q) = (term1398 A P Q).
Proof. exact (@lem387105 (nat -> A) P Q). Qed.
Lemma lem387107 {A : Type'} (n : nat) (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2192 A n k y bad k' lt2 x z) = (term2193 A n k y bad k' lt2 x z).
Proof. exact (@lem387106 A (term2135 z n) (term2173 A k y bad k' lt2 x z)). Qed.
Lemma lem387108 {A : Type'} (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term2194 A k y bad k' lt2 x z' z) = (term2171 A k y bad k' lt2 z x z').
Proof. exact (eq_refl (term2194 A k y bad k' lt2 x z' z)). Qed.
Lemma lem387109 {A : Type'} (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2195 A k y bad k' lt2 x z) = (term2173 A k y bad k' lt2 x z).
Proof. exact (fun_ext (fun z' : nat -> A => @lem387108 A k y bad k' lt2 z' x z)). Qed.
Lemma lem387110 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem387111 {A : Type'} (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2196 A k y bad k' lt2 x z) = (term2174 A k y bad k' lt2 x z).
Proof. exact (MK_COMB (@lem387110 A) (@lem387109 A k y bad k' lt2 x z)). Qed.
Lemma lem387112 (z : nat) (n : nat) : (term2136 z n) = (term2136 z n).
Proof. exact (eq_refl (term2136 z n)). Qed.
Lemma lem387113 {A : Type'} (n : nat) (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2192 A n k y bad k' lt2 x z) = (term2188 A n k y bad k' lt2 x z).
Proof. exact (MK_COMB (@lem387112 z n) (@lem387111 A k y bad k' lt2 x z)). Qed.
Lemma lem387114 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem387115 {A : Type'} (n : nat) (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2197 A n k y bad k' lt2 x z) = (term2198 A n k y bad k' lt2 x z).
Proof. exact (MK_COMB (@lem387114) (@lem387113 A n k y bad k' lt2 x z)). Qed.
Lemma lem387116 {A : Type'} (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term2194 A k y bad k' lt2 x z' z) = (term2171 A k y bad k' lt2 z x z').
Proof. exact (eq_refl (term2194 A k y bad k' lt2 x z' z)). Qed.
Lemma lem387117 (z : nat) (n : nat) : (term2136 z n) = (term2136 z n).
Proof. exact (eq_refl (term2136 z n)). Qed.
Lemma lem387118 {A : Type'} (n : nat) (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term2199 A n k y bad k' lt2 x z' z) = (term2200 A n k y bad k' lt2 z x z').
Proof. exact (MK_COMB (@lem387117 z' n) (@lem387116 A k y bad k' lt2 z x z')). Qed.
Lemma lem387119 {A : Type'} (n : nat) (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2201 A n k y bad k' lt2 x z) = (term2202 A n k y bad k' lt2 x z).
Proof. exact (fun_ext (fun z' : nat -> A => @lem387118 A n k y bad k' lt2 z' x z)). Qed.
Lemma lem387120 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem387121 {A : Type'} (n : nat) (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2193 A n k y bad k' lt2 x z) = (term2203 A n k y bad k' lt2 x z).
Proof. exact (MK_COMB (@lem387120 A) (@lem387119 A n k y bad k' lt2 x z)). Qed.
Lemma lem387122 {A : Type'} (n : nat) (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : ((term2192 A n k y bad k' lt2 x z) = (term2193 A n k y bad k' lt2 x z)) = ((term2188 A n k y bad k' lt2 x z) = (term2203 A n k y bad k' lt2 x z)).
Proof. exact (MK_COMB (@lem387115 A n k y bad k' lt2 x z) (@lem387121 A n k y bad k' lt2 x z)). Qed.
Lemma lem387123 {A : Type'} (n : nat) (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2188 A n k y bad k' lt2 x z) = (term2203 A n k y bad k' lt2 x z).
Proof. exact (EQ_MP (@lem387122 A n k y bad k' lt2 x z) (@lem387107 A n k y bad k' lt2 x z)). Qed.
Lemma lem387124 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2190 A n y bad k' lt2 x z) = (term2204 A n y bad k' lt2 x z).
Proof. exact (fun_ext (fun k : nat => @lem387123 A n k y bad k' lt2 x z)). Qed.
Lemma lem387125 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem387126 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2191 A n y bad k' lt2 x z) = (term2205 A n y bad k' lt2 x z).
Proof. exact (MK_COMB (@lem387125) (@lem387124 A n y bad k' lt2 x z)). Qed.
Lemma lem387127 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2177 A n y bad k' lt2 x z) = (term2205 A n y bad k' lt2 x z).
Proof. exact (TRANS (@lem387103 A n y bad k' lt2 x z) (@lem387126 A n y bad k' lt2 x z)). Qed.
Lemma lem387128 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2137 A n y bad k' lt2 x z) = (term2205 A n y bad k' lt2 x z).
Proof. exact (TRANS (@lem387083 A n y bad k' lt2 x z) (@lem387127 A n y bad k' lt2 x z)). Qed.
Lemma lem387129 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) : (term2138 A n y bad k' lt2 x) = (term2206 A n y bad k' lt2 x).
Proof. exact (fun_ext (fun z : nat => @lem387128 A n y bad k' lt2 x z)). Qed.
Lemma lem387130 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem387131 {A : Type'} (n : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) : (term2139 A n y bad k' lt2 x) = (term2207 A n y bad k' lt2 x).
Proof. exact (MK_COMB (@lem387130) (@lem387129 A n y bad k' lt2 x)). Qed.
Lemma lem387132 {A : Type'} (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1297 A lt2 z x z') = (term1297 A lt2 z x z').
Proof. exact (eq_refl (term1297 A lt2 z x z')). Qed.
Lemma lem387149 {A : Type'} (bad : type976 A) (x : nat -> A) (k' : type1584 A) (z : nat) (z' : nat -> A) : (term1321 A bad x k' z z') = (term1460 A bad x k' z z').
Proof. exact (@lem19490 (term1315 A k' z' z) (term1294 A bad z') (term1308 A x k' z z')). Qed.
Lemma lem387150 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem387151 {A : Type'} (bad : type976 A) (x : nat -> A) (k' : type1584 A) (z : nat) (z' : nat -> A) : (term1323 A bad x k' z z') = (term1461 A bad x k' z z').
Proof. exact (MK_COMB (@lem387150) (@lem387149 A bad x k' z z')). Qed.
Lemma lem387152 {A : Type'} (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1325 A bad k' lt2 z x z') = (term1462 A bad k' lt2 z x z').
Proof. exact (MK_COMB (@lem387151 A bad x k' z' z) (@lem387132 A lt2 z x z')). Qed.
Lemma lem387159 {A : Type'} (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1462 A bad k' lt2 z x z') = (term1463 A bad k' lt2 z x z').
Proof. exact (@lem19699 (term1464 A bad k' z z') (term1465 A bad x k' z' z) (term1297 A lt2 z x z')). Qed.
Lemma lem387160 {A : Type'} (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term1325 A bad k' lt2 z x z') = (term1463 A bad k' lt2 z x z').
Proof. exact (TRANS (@lem387152 A bad k' lt2 z x z') (@lem387159 A bad k' lt2 z x z')). Qed.
Lemma lem387177 {A : Type'} (bad : type976 A) (k : nat) (y : type1604 A) (x : nat -> A) (z : nat) : (term2155 A bad k y x z) = (term2155 A bad k y x z).
Proof. exact (eq_refl (term2155 A bad k y x z)). Qed.
Lemma lem387178 {A : Type'} (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term2171 A k y bad k' lt2 z x z') = (term2208 A k y bad k' lt2 z x z').
Proof. exact (MK_COMB (@lem387177 A bad k y x z') (@lem387160 A bad k' lt2 z x z')). Qed.
Lemma lem387185 (z : nat) (n : nat) : (term2136 z n) = (term2136 z n).
Proof. exact (eq_refl (term2136 z n)). Qed.
Lemma lem387186 {A : Type'} (n : nat) (k : nat) (y : type1604 A) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term2200 A n k y bad k' lt2 z x z') = (term2209 A n k y bad k' lt2 z x z').
Proof. exact (MK_COMB (@lem387185 z' n) (@lem387178 A k y bad k' lt2 z x z')). Qed.
Lemma lem387187 {A : Type'} (k : nat) (y : type1604 A) (n : nat) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term2209 A n k y bad k' lt2 z x z') = (term2210 A k y n bad k' lt2 z x z').
Proof. exact (@lem19490 (term1454 A bad k y x z') (term2135 z' n) (term1463 A bad k' lt2 z x z')). Qed.
Lemma lem387188 {A : Type'} (n : nat) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term2211 A n bad k' lt2 z x z') = (term2212 A n bad k' lt2 z x z').
Proof. exact (@lem19490 (term1478 A bad k' lt2 z x z') (term2135 z' n) (term1477 A bad k' lt2 z x z')). Qed.
Lemma lem387195 {A : Type'} (n : nat) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term2213 A n bad k' lt2 z x z') = (term2214 A n bad k' lt2 z x z').
Proof. exact (@lem19699 (term2215 z' n) (term1284 z' n) (term1477 A bad k' lt2 z x z')). Qed.
Lemma lem387202 {A : Type'} (n : nat) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term2216 A n bad k' lt2 z x z') = (term2217 A n bad k' lt2 z x z').
Proof. exact (@lem19699 (term2215 z' n) (term1284 z' n) (term1478 A bad k' lt2 z x z')). Qed.
Lemma lem387203 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem387204 {A : Type'} (n : nat) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term2218 A n bad k' lt2 z x z') = (term2219 A n bad k' lt2 z x z').
Proof. exact (MK_COMB (@lem387203) (@lem387202 A n bad k' lt2 z x z')). Qed.
Lemma lem387205 {A : Type'} (n : nat) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term2212 A n bad k' lt2 z x z') = (term2220 A n bad k' lt2 z x z').
Proof. exact (MK_COMB (@lem387204 A n bad k' lt2 z x z') (@lem387195 A n bad k' lt2 z x z')). Qed.
Lemma lem387206 {A : Type'} (n : nat) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term2211 A n bad k' lt2 z x z') = (term2220 A n bad k' lt2 z x z').
Proof. exact (TRANS (@lem387188 A n bad k' lt2 z x z') (@lem387205 A n bad k' lt2 z x z')). Qed.
Lemma lem387207 {A : Type'} (bad : type976 A) (n : nat) (k : nat) (y : type1604 A) (x : nat -> A) (z : nat) : (term2221 A n bad k y x z) = (term2222 A bad n k y x z).
Proof. exact (@lem19490 (term1349 A bad y z) (term2135 z n) (term1437 A k y x z)). Qed.
Lemma lem387208 {A : Type'} (k : nat) (n : nat) (y : type1604 A) (x : nat -> A) (z : nat) : (term2223 A n k y x z) = (term2224 A k n y x z).
Proof. exact (@lem19490 (term1338 A y z x k) (term2135 z n) ((term1331 A y z) = (@I (nat -> A) x z))). Qed.
Lemma lem387215 {A : Type'} (n : nat) (y : type1604 A) (x : nat -> A) (z : nat) : (term2225 A n y x z) = (term2226 A n y x z).
Proof. exact (@lem19699 (term2215 z n) (term1284 z n) ((term1331 A y z) = (@I (nat -> A) x z))). Qed.
Lemma lem387222 {A : Type'} (n : nat) (y : type1604 A) (z : nat) (x : nat -> A) (k : nat) : (term2227 A n y z x k) = (term2228 A n y z x k).
Proof. exact (@lem19699 (term2215 z n) (term1284 z n) (term1338 A y z x k)). Qed.
Lemma lem387223 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem387224 {A : Type'} (n : nat) (y : type1604 A) (z : nat) (x : nat -> A) (k : nat) : (term2229 A n y z x k) = (term2230 A n y z x k).
Proof. exact (MK_COMB (@lem387223) (@lem387222 A n y z x k)). Qed.
Lemma lem387225 {A : Type'} (k : nat) (n : nat) (y : type1604 A) (x : nat -> A) (z : nat) : (term2224 A k n y x z) = (term2231 A k n y x z).
Proof. exact (MK_COMB (@lem387224 A n y z x k) (@lem387215 A n y x z)). Qed.
Lemma lem387226 {A : Type'} (k : nat) (n : nat) (y : type1604 A) (x : nat -> A) (z : nat) : (term2223 A n k y x z) = (term2231 A k n y x z).
Proof. exact (TRANS (@lem387208 A k n y x z) (@lem387225 A k n y x z)). Qed.
Lemma lem387233 {A : Type'} (n : nat) (bad : type976 A) (y : type1604 A) (z : nat) : (term2232 A n bad y z) = (term2233 A n bad y z).
Proof. exact (@lem19699 (term2215 z n) (term1284 z n) (term1349 A bad y z)). Qed.
Lemma lem387234 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem387235 {A : Type'} (n : nat) (bad : type976 A) (y : type1604 A) (z : nat) : (term2234 A n bad y z) = (term2235 A n bad y z).
Proof. exact (MK_COMB (@lem387234) (@lem387233 A n bad y z)). Qed.
Lemma lem387236 {A : Type'} (bad : type976 A) (k : nat) (n : nat) (y : type1604 A) (x : nat -> A) (z : nat) : (term2222 A bad n k y x z) = (term2236 A bad k n y x z).
Proof. exact (MK_COMB (@lem387235 A n bad y z) (@lem387226 A k n y x z)). Qed.
Lemma lem387237 {A : Type'} (bad : type976 A) (k : nat) (n : nat) (y : type1604 A) (x : nat -> A) (z : nat) : (term2221 A n bad k y x z) = (term2236 A bad k n y x z).
Proof. exact (TRANS (@lem387207 A bad n k y x z) (@lem387236 A bad k n y x z)). Qed.
Lemma lem387238 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem387239 {A : Type'} (bad : type976 A) (k : nat) (n : nat) (y : type1604 A) (x : nat -> A) (z : nat) : (term2237 A n bad k y x z) = (term2238 A bad k n y x z).
Proof. exact (MK_COMB (@lem387238) (@lem387237 A bad k n y x z)). Qed.
Lemma lem387240 {A : Type'} (k : nat) (y : type1604 A) (n : nat) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term2210 A k y n bad k' lt2 z x z') = (term2239 A k y n bad k' lt2 z x z').
Proof. exact (MK_COMB (@lem387239 A bad k n y x z') (@lem387206 A n bad k' lt2 z x z')). Qed.
Lemma lem387241 {A : Type'} (k : nat) (y : type1604 A) (n : nat) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term2209 A n k y bad k' lt2 z x z') = (term2239 A k y n bad k' lt2 z x z').
Proof. exact (TRANS (@lem387187 A k y n bad k' lt2 z x z') (@lem387240 A k y n bad k' lt2 z x z')). Qed.
Lemma lem387242 {A : Type'} (k : nat) (y : type1604 A) (n : nat) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (z : nat -> A) (x : nat -> A) (z' : nat) : (term2200 A n k y bad k' lt2 z x z') = (term2239 A k y n bad k' lt2 z x z').
Proof. exact (TRANS (@lem387186 A n k y bad k' lt2 z x z') (@lem387241 A k y n bad k' lt2 z x z')). Qed.
Lemma lem387243 {A : Type'} (k : nat) (y : type1604 A) (n : nat) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2202 A n k y bad k' lt2 x z) = (term2240 A k y n bad k' lt2 x z).
Proof. exact (fun_ext (fun z' : nat -> A => @lem387242 A k y n bad k' lt2 z' x z)). Qed.
Lemma lem387244 {A : Type'} : (@all (nat -> A)) = (@all (nat -> A)).
Proof. exact (eq_refl (@all (nat -> A))). Qed.
Lemma lem387245 {A : Type'} (k : nat) (y : type1604 A) (n : nat) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2203 A n k y bad k' lt2 x z) = (term2241 A k y n bad k' lt2 x z).
Proof. exact (MK_COMB (@lem387244 A) (@lem387243 A k y n bad k' lt2 x z)). Qed.
Lemma lem387246 {A : Type'} (y : type1604 A) (n : nat) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2204 A n y bad k' lt2 x z) = (term2242 A y n bad k' lt2 x z).
Proof. exact (fun_ext (fun k : nat => @lem387245 A k y n bad k' lt2 x z)). Qed.
Lemma lem387247 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem387248 {A : Type'} (y : type1604 A) (n : nat) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (z : nat) : (term2205 A n y bad k' lt2 x z) = (term2243 A y n bad k' lt2 x z).
Proof. exact (MK_COMB (@lem387247) (@lem387246 A y n bad k' lt2 x z)). Qed.
Lemma lem387249 {A : Type'} (y : type1604 A) (n : nat) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) : (term2206 A n y bad k' lt2 x) = (term2244 A y n bad k' lt2 x).
Proof. exact (fun_ext (fun z : nat => @lem387248 A y n bad k' lt2 x z)). Qed.
Lemma lem387250 : (@all nat) = (@all nat).
Proof. exact (eq_refl (@all nat)). Qed.
Lemma lem387251 {A : Type'} (y : type1604 A) (n : nat) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) : (term2207 A n y bad k' lt2 x) = (term2245 A y n bad k' lt2 x).
Proof. exact (MK_COMB (@lem387250) (@lem387249 A y n bad k' lt2 x)). Qed.
Lemma lem387252 {A : Type'} (y : type1604 A) (n : nat) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) : (term2139 A n y bad k' lt2 x) = (term2245 A y n bad k' lt2 x).
Proof. exact (TRANS (@lem387131 A n y bad k' lt2 x) (@lem387251 A y n bad k' lt2 x)). Qed.
Lemma lem387253 {A : Type'} (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2245 A y n bad k' lt2 x.
Proof. exact (EQ_MP (@lem387252 A y n bad k' lt2 x) (@lem386946 A n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem387322 {A : Type'} (_8134 : nat -> A) (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) (h1 : term2096 A bad n x k) : term2246 A n bad x k _8134.
Proof. exact (@lem386979 A bad n x k h1 _8134). Qed.
Lemma lem387323 {A : Type'} (n : nat) (bad : type976 A) (x : nat -> A) (k : type977 A) (_8134 : nat -> A) : (term2246 A n bad x k _8134) = (term2142 A n bad x k _8134).
Proof. exact (eq_refl (term2246 A n bad x k _8134)). Qed.
Lemma lem387324 {A : Type'} (_8134 : nat -> A) (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) (h1 : term2096 A bad n x k) : term2142 A n bad x k _8134.
Proof. exact (EQ_MP (@lem387323 A n bad x k _8134) (@lem387322 A _8134 bad n x k h1)). Qed.
Lemma lem387325 {A : Type'} (_8135 : nat) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2247 A y n bad k' lt2 x _8135.
Proof. exact (@lem387253 A n y k' x lt2 n' k'' bad x' h1 _8135). Qed.
Lemma lem387326 {A : Type'} (y : type1604 A) (n : nat) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (_8135 : nat) : (term2247 A y n bad k' lt2 x _8135) = (term2243 A y n bad k' lt2 x _8135).
Proof. exact (eq_refl (term2247 A y n bad k' lt2 x _8135)). Qed.
Lemma lem387327 {A : Type'} (_8135 : nat) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2243 A y n bad k' lt2 x _8135.
Proof. exact (EQ_MP (@lem387326 A y n bad k' lt2 x _8135) (@lem387325 A _8135 n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem387328 {A : Type'} (_8135 : nat) (_8136 : nat) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2248 A y n bad k' lt2 x _8135 _8136.
Proof. exact (@lem387327 A _8135 n y k' x lt2 n' k'' bad x' h1 _8136). Qed.
Lemma lem387329 {A : Type'} (_8136 : nat) (y : type1604 A) (n : nat) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (x : nat -> A) (_8135 : nat) : (term2248 A y n bad k' lt2 x _8135 _8136) = (term2241 A _8136 y n bad k' lt2 x _8135).
Proof. exact (eq_refl (term2248 A y n bad k' lt2 x _8135 _8136)). Qed.
Lemma lem387330 {A : Type'} (_8136 : nat) (_8135 : nat) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2241 A _8136 y n bad k' lt2 x _8135.
Proof. exact (EQ_MP (@lem387329 A _8136 y n bad k' lt2 x _8135) (@lem387328 A _8135 _8136 n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem387331 {A : Type'} (_8136 : nat) (_8135 : nat) (_8137 : nat -> A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2249 A _8136 y n bad k' lt2 x _8135 _8137.
Proof. exact (@lem387330 A _8136 _8135 n y k' x lt2 n' k'' bad x' h1 _8137). Qed.
Lemma lem387332 {A : Type'} (_8136 : nat) (y : type1604 A) (n : nat) (bad : type976 A) (k' : type1584 A) (lt2 : type1402 A) (_8137 : nat -> A) (x : nat -> A) (_8135 : nat) : (term2249 A _8136 y n bad k' lt2 x _8135 _8137) = (term2239 A _8136 y n bad k' lt2 _8137 x _8135).
Proof. exact (eq_refl (term2249 A _8136 y n bad k' lt2 x _8135 _8137)). Qed.
Lemma lem387333 {A : Type'} (_8136 : nat) (_8137 : nat -> A) (_8135 : nat) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2239 A _8136 y n bad k' lt2 _8137 x _8135.
Proof. exact (EQ_MP (@lem387332 A _8136 y n bad k' lt2 _8137 x _8135) (@lem387331 A _8136 _8135 _8137 n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem387343 {A : Type'} (_8136 : nat) (_8135 : nat) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2236 A bad _8136 n y x _8135.
Proof. exact (proj1 (@lem387333 A _8136 (@el (nat -> A)) _8135 n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem387350 {A : Type'} (_8136 : nat) (_8135 : nat) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2231 A _8136 n y x _8135.
Proof. exact (proj2 (@lem387343 A _8136 _8135 n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem387351 {A : Type'} (_8135 : nat) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2233 A n bad y _8135.
Proof. exact (proj1 (@lem387343 A (@el nat) _8135 n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem387352 {A : Type'} (_8135 : nat) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2226 A n y x _8135.
Proof. exact (proj2 (@lem387350 A (@el nat) _8135 n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem387353 {A : Type'} (_8135 : nat) (_8136 : nat) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2228 A n y _8135 x _8136.
Proof. exact (proj1 (@lem387350 A _8136 _8135 n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem387455 {A : Type'} (_8135 : nat) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2250 A n y x _8135.
Proof. exact (proj1 (@lem387352 A _8135 n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem387471 {A : Type'} (_8135 : nat) (_8136 : nat) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2251 A n y _8135 x _8136.
Proof. exact (proj1 (@lem387353 A _8135 _8136 n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem387487 {A : Type'} (_8135 : nat) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2252 A n bad y _8135.
Proof. exact (proj1 (@lem387351 A _8135 n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem387503 {A : Type'} (_8134 : nat -> A) (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) (h1 : term2096 A bad n x k) : term2253 A bad k _8134 n.
Proof. exact (proj1 (@lem387324 A _8134 bad n x k h1)). Qed.
Lemma lem387509 {A : Type'} (_8134 : nat -> A) (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) (h1 : term2096 A bad n x k) : term2254 A bad x k _8134.
Proof. exact (proj2 (@lem387324 A _8134 bad n x k h1)). Qed.
Lemma lem387586 {A : Type'} : (@I (nat -> nat -> A)) = (@I (nat -> nat -> A)).
Proof. exact (eq_refl (@I (nat -> nat -> A))). Qed.
Lemma lem387587 {A : Type'} (_8156 : type1604 A) (_8158 : type1604 A) (h1 : _8156 = _8158) : _8156 = _8158.
Proof. exact (h1). Qed.
Lemma lem387588 (_8157 : nat) (_8159 : nat) (h1 : _8157 = _8159) : _8157 = _8159.
Proof. exact (h1). Qed.
Lemma lem387589 {A : Type'} (_8156 : type1604 A) (_8158 : type1604 A) (h1 : _8156 = _8158) : (@I (nat -> nat -> A) _8156) = (@I (nat -> nat -> A) _8158).
Proof. exact (MK_COMB (@lem387586 A) (@lem387587 A _8156 _8158 h1)). Qed.
Lemma lem387590 {A : Type'} (_8156 : type1604 A) (_8158 : type1604 A) (_8157 : nat) (_8159 : nat) (h1 : _8156 = _8158) (h2 : _8157 = _8159) : (@I (nat -> nat -> A) _8156 _8157) = (@I (nat -> nat -> A) _8158 _8159).
Proof. exact (MK_COMB (@lem387589 A _8156 _8158 h1) (@lem387588 _8157 _8159 h2)). Qed.
Lemma lem387591 {A : Type'} (_8157 : nat) (_8159 : nat) (_8156 : type1604 A) (_8158 : type1604 A) (h1 : _8156 = _8158) : term2255 A _8156 _8157 _8158 _8159.
Proof. exact (fun h0 : _8157 = _8159 => @lem387590 A _8156 _8158 _8157 _8159 h1 h0). Qed.
Lemma lem387593 (a : Prop) (b : Prop) : (a -> b) = (term2256 a b).
Proof. exact (EQ_MP (@lem21394 a b) (@lem21490 a b)). Qed.
Lemma lem387594 {A : Type'} (_8156 : type1604 A) (_8157 : nat) (_8158 : type1604 A) (_8159 : nat) : (term2255 A _8156 _8157 _8158 _8159) = (term2257 A _8156 _8157 _8158 _8159).
Proof. exact (@lem387593 (_8157 = _8159) ((@I (nat -> nat -> A) _8156 _8157) = (@I (nat -> nat -> A) _8158 _8159))). Qed.
Lemma lem387595 {A : Type'} (_8157 : nat) (_8159 : nat) (_8156 : type1604 A) (_8158 : type1604 A) (h1 : _8156 = _8158) : term2257 A _8156 _8157 _8158 _8159.
Proof. exact (EQ_MP (@lem387594 A _8156 _8157 _8158 _8159) (@lem387591 A _8157 _8159 _8156 _8158 h1)). Qed.
Lemma lem387596 {A : Type'} (_8156 : type1604 A) (_8157 : nat) (_8158 : type1604 A) (_8159 : nat) : term2258 A _8156 _8157 _8158 _8159.
Proof. exact (fun h0 : _8156 = _8158 => @lem387595 A _8157 _8159 _8156 _8158 h0). Qed.
Lemma lem387598 (a : Prop) (b : Prop) : (a -> b) = (term2256 a b).
Proof. exact (EQ_MP (@lem21394 a b) (@lem21490 a b)). Qed.
Lemma lem387599 {A : Type'} (_8156 : type1604 A) (_8157 : nat) (_8158 : type1604 A) (_8159 : nat) : (term2258 A _8156 _8157 _8158 _8159) = (term2259 A _8156 _8157 _8158 _8159).
Proof. exact (@lem387598 (_8156 = _8158) (term2257 A _8156 _8157 _8158 _8159)). Qed.
Lemma lem387600 {A : Type'} (_8156 : type1604 A) (_8157 : nat) (_8158 : type1604 A) (_8159 : nat) : term2259 A _8156 _8157 _8158 _8159.
Proof. exact (EQ_MP (@lem387599 A _8156 _8157 _8158 _8159) (@lem387596 A _8156 _8157 _8158 _8159)). Qed.
Lemma lem387631 {A : Type'} : (@I (nat -> A)) = (@I (nat -> A)).
Proof. exact (eq_refl (@I (nat -> A))). Qed.
Lemma lem387632 {A : Type'} (_8168 : nat -> A) (_8170 : nat -> A) (h1 : _8168 = _8170) : _8168 = _8170.
Proof. exact (h1). Qed.
Lemma lem387633 (_8169 : nat) (_8171 : nat) (h1 : _8169 = _8171) : _8169 = _8171.
Proof. exact (h1). Qed.
Lemma lem387634 {A : Type'} (_8168 : nat -> A) (_8170 : nat -> A) (h1 : _8168 = _8170) : (@I (nat -> A) _8168) = (@I (nat -> A) _8170).
Proof. exact (MK_COMB (@lem387631 A) (@lem387632 A _8168 _8170 h1)). Qed.
Lemma lem387635 {A : Type'} (_8168 : nat -> A) (_8170 : nat -> A) (_8169 : nat) (_8171 : nat) (h1 : _8168 = _8170) (h2 : _8169 = _8171) : (@I (nat -> A) _8168 _8169) = (@I (nat -> A) _8170 _8171).
Proof. exact (MK_COMB (@lem387634 A _8168 _8170 h1) (@lem387633 _8169 _8171 h2)). Qed.
Lemma lem387636 {A : Type'} (_8169 : nat) (_8171 : nat) (_8168 : nat -> A) (_8170 : nat -> A) (h1 : _8168 = _8170) : term2260 A _8168 _8169 _8170 _8171.
Proof. exact (fun h0 : _8169 = _8171 => @lem387635 A _8168 _8170 _8169 _8171 h1 h0). Qed.
Lemma lem387638 (a : Prop) (b : Prop) : (a -> b) = (term2256 a b).
Proof. exact (EQ_MP (@lem21394 a b) (@lem21490 a b)). Qed.
Lemma lem387639 {A : Type'} (_8168 : nat -> A) (_8169 : nat) (_8170 : nat -> A) (_8171 : nat) : (term2260 A _8168 _8169 _8170 _8171) = (term2261 A _8168 _8169 _8170 _8171).
Proof. exact (@lem387638 (_8169 = _8171) ((@I (nat -> A) _8168 _8169) = (@I (nat -> A) _8170 _8171))). Qed.
Lemma lem387640 {A : Type'} (_8169 : nat) (_8171 : nat) (_8168 : nat -> A) (_8170 : nat -> A) (h1 : _8168 = _8170) : term2261 A _8168 _8169 _8170 _8171.
Proof. exact (EQ_MP (@lem387639 A _8168 _8169 _8170 _8171) (@lem387636 A _8169 _8171 _8168 _8170 h1)). Qed.
Lemma lem387641 {A : Type'} (_8168 : nat -> A) (_8169 : nat) (_8170 : nat -> A) (_8171 : nat) : term2262 A _8168 _8169 _8170 _8171.
Proof. exact (fun h0 : _8168 = _8170 => @lem387640 A _8169 _8171 _8168 _8170 h0). Qed.
Lemma lem387643 (a : Prop) (b : Prop) : (a -> b) = (term2256 a b).
Proof. exact (EQ_MP (@lem21394 a b) (@lem21490 a b)). Qed.
Lemma lem387644 {A : Type'} (_8168 : nat -> A) (_8169 : nat) (_8170 : nat -> A) (_8171 : nat) : (term2262 A _8168 _8169 _8170 _8171) = (term2263 A _8168 _8169 _8170 _8171).
Proof. exact (@lem387643 (_8168 = _8170) (term2261 A _8168 _8169 _8170 _8171)). Qed.
Lemma lem387645 {A : Type'} (_8168 : nat -> A) (_8169 : nat) (_8170 : nat -> A) (_8171 : nat) : term2263 A _8168 _8169 _8170 _8171.
Proof. exact (EQ_MP (@lem387644 A _8168 _8169 _8170 _8171) (@lem387641 A _8168 _8169 _8170 _8171)). Qed.
Lemma lem387704 {A : Type'} (x : A) (y : A) (z : A) : term2264 A x y z.
Proof. exact (@lem21385 A x y z). Qed.
Lemma lem387718 (x : nat) : x = x.
Proof. exact (@lem21386 nat x). Qed.
Lemma lem387719 (n : nat) : n = n.
Proof. exact (@lem387718 n). Qed.
Lemma lem387720 (n : nat) : term2265 n.
Proof. exact (fun h0 : term2266 n => @lem387719 n). Qed.
Lemma lem387722 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem387723 (n : nat) : (term2265 n) = (n = n).
Proof. exact (@lem387722 (n = n)). Qed.
Lemma lem387724 (n : nat) : n = n.
Proof. exact (EQ_MP (@lem387723 n) (@lem387720 n)). Qed.
Lemma lem387730 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem387731 {A : Type'} (bad : type976 A) (y : type1604 A) (_8135 : nat) (n : nat) : (term2252 A n bad y _8135) = (term2267 A bad y _8135 n).
Proof. exact (@lem387730 (term1349 A bad y _8135) (term2215 _8135 n)). Qed.
Lemma lem387739 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem387740 {A : Type'} (bad : type976 A) (y : type1604 A) (_8135 : nat) (n : nat) : (term2268 A n bad y _8135) = (term2269 A bad y _8135 n).
Proof. exact (MK_COMB (@lem387739) (@lem387731 A bad y _8135 n)). Qed.
Lemma lem387748 {A : Type'} (bad : type976 A) (y : type1604 A) (_8135 : nat) (n : nat) : (term2267 A bad y _8135 n) = (term2267 A bad y _8135 n).
Proof. exact (eq_refl (term2267 A bad y _8135 n)). Qed.
Lemma lem387749 {A : Type'} (bad : type976 A) (y : type1604 A) (_8135 : nat) (n : nat) : ((term2252 A n bad y _8135) = (term2267 A bad y _8135 n)) = ((term2267 A bad y _8135 n) = (term2267 A bad y _8135 n)).
Proof. exact (MK_COMB (@lem387740 A bad y _8135 n) (@lem387748 A bad y _8135 n)). Qed.
Lemma lem387751 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem387752 (x : Prop) : (x = x) = True.
Proof. exact (@lem387751 Prop x). Qed.
Lemma lem387753 {A : Type'} (bad : type976 A) (y : type1604 A) (_8135 : nat) (n : nat) : ((term2267 A bad y _8135 n) = (term2267 A bad y _8135 n)) = True.
Proof. exact (@lem387752 (term2267 A bad y _8135 n)). Qed.
Lemma lem387754 {A : Type'} (bad : type976 A) (y : type1604 A) (_8135 : nat) (n : nat) : ((term2252 A n bad y _8135) = (term2267 A bad y _8135 n)) = True.
Proof. exact (TRANS (@lem387749 A bad y _8135 n) (@lem387753 A bad y _8135 n)). Qed.
Lemma lem387755 {A : Type'} (bad : type976 A) (y : type1604 A) (_8135 : nat) (n : nat) : True = ((term2252 A n bad y _8135) = (term2267 A bad y _8135 n)).
Proof. exact (SYM (@lem387754 A bad y _8135 n)). Qed.
Lemma lem387756 {A : Type'} (bad : type976 A) (y : type1604 A) (_8135 : nat) (n : nat) : (term2252 A n bad y _8135) = (term2267 A bad y _8135 n).
Proof. exact (EQ_MP (@lem387755 A bad y _8135 n) (@lem0)). Qed.
Lemma lem387757 {A : Type'} (_8135 : nat) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2267 A bad y _8135 n.
Proof. exact (EQ_MP (@lem387756 A bad y _8135 n) (@lem387487 A _8135 n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem387759 (b : Prop) (a : Prop) : (a \/ b) = (term493 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem387760 {A : Type'} (n : nat) (bad : type976 A) (y : type1604 A) (_8135 : nat) : (term2267 A bad y _8135 n) = (term2270 A n bad y _8135).
Proof. exact (@lem387759 (term2215 _8135 n) (term1349 A bad y _8135)). Qed.
Lemma lem387762 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem387763 (_8135 : nat) (n : nat) : (term2271 _8135 n) = (_8135 = n).
Proof. exact (@lem387762 (_8135 = n)). Qed.
Lemma lem387764 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem387765 (_8135 : nat) (n : nat) : (term2272 _8135 n) = (term2273 _8135 n).
Proof. exact (MK_COMB (@lem387764) (@lem387763 _8135 n)). Qed.
Lemma lem387766 {A : Type'} (bad : type976 A) (y : type1604 A) (_8135 : nat) : (term1349 A bad y _8135) = (term1349 A bad y _8135).
Proof. exact (eq_refl (term1349 A bad y _8135)). Qed.
Lemma lem387767 {A : Type'} (n : nat) (bad : type976 A) (y : type1604 A) (_8135 : nat) : (term2270 A n bad y _8135) = (term2274 A n bad y _8135).
Proof. exact (MK_COMB (@lem387765 _8135 n) (@lem387766 A bad y _8135)). Qed.
Lemma lem387768 {A : Type'} (n : nat) (bad : type976 A) (y : type1604 A) (_8135 : nat) : (term2267 A bad y _8135 n) = (term2274 A n bad y _8135).
Proof. exact (TRANS (@lem387760 A n bad y _8135) (@lem387767 A n bad y _8135)). Qed.
Lemma lem387771 {A : Type'} (_8135 : nat) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2274 A n bad y _8135.
Proof. exact (EQ_MP (@lem387768 A n bad y _8135) (@lem387757 A _8135 n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem387772 {A : Type'} (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2275 A bad y n.
Proof. exact (@lem387771 A n n y k' x lt2 n' k'' bad x' h1). Qed.
Lemma lem387775 {A : Type'} (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term1349 A bad y n.
Proof. exact (@lem387772 A n y k' x lt2 n' k'' bad x' h1 (@lem387724 n)). Qed.
Lemma lem387776 {A : Type'} (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2276 A bad y n.
Proof. exact (fun h0 : term2277 A bad y n => @lem387775 A n y k' x lt2 n' k'' bad x' h1). Qed.
Lemma lem387778 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem387779 {A : Type'} (bad : type976 A) (y : type1604 A) (n : nat) : (term2276 A bad y n) = (term1349 A bad y n).
Proof. exact (@lem387778 (term1349 A bad y n)). Qed.
Lemma lem387780 {A : Type'} (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term1349 A bad y n.
Proof. exact (EQ_MP (@lem387779 A bad y n) (@lem387776 A n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem387782 (x : nat) : x = x.
Proof. exact (@lem21386 nat x). Qed.
Lemma lem387783 (n : nat) : n = n.
Proof. exact (@lem387782 n). Qed.
Lemma lem387784 (n : nat) : term2265 n.
Proof. exact (fun h0 : term2266 n => @lem387783 n). Qed.
Lemma lem387786 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem387787 (n : nat) : (term2265 n) = (n = n).
Proof. exact (@lem387786 (n = n)). Qed.
Lemma lem387788 (n : nat) : n = n.
Proof. exact (EQ_MP (@lem387787 n) (@lem387784 n)). Qed.
Lemma lem387790 (x : nat) : x = x.
Proof. exact (@lem21386 nat x). Qed.
Lemma lem387791 (n : nat) : n = n.
Proof. exact (@lem387790 n). Qed.
Lemma lem387792 (n : nat) : term2265 n.
Proof. exact (fun h0 : term2266 n => @lem387791 n). Qed.
Lemma lem387794 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem387795 (n : nat) : (term2265 n) = (n = n).
Proof. exact (@lem387794 (n = n)). Qed.
Lemma lem387796 (n : nat) : n = n.
Proof. exact (EQ_MP (@lem387795 n) (@lem387792 n)). Qed.
Lemma lem387798 {A : Type'} (_8135 : nat) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2274 A n bad y _8135.
Proof. exact (EQ_MP (@lem387768 A n bad y _8135) (@lem387757 A _8135 n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem387799 {A : Type'} (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2275 A bad y n.
Proof. exact (@lem387798 A n n y k' x lt2 n' k'' bad x' h1). Qed.
Lemma lem387802 {A : Type'} (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term1349 A bad y n.
Proof. exact (@lem387799 A n y k' x lt2 n' k'' bad x' h1 (@lem387796 n)). Qed.
Lemma lem387803 {A : Type'} (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2276 A bad y n.
Proof. exact (fun h0 : term2277 A bad y n => @lem387802 A n y k' x lt2 n' k'' bad x' h1). Qed.
Lemma lem387805 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem387806 {A : Type'} (bad : type976 A) (y : type1604 A) (n : nat) : (term2276 A bad y n) = (term1349 A bad y n).
Proof. exact (@lem387805 (term1349 A bad y n)). Qed.
Lemma lem387807 {A : Type'} (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term1349 A bad y n.
Proof. exact (EQ_MP (@lem387806 A bad y n) (@lem387803 A n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem387809 {A : Type'} (x : type1604 A) : x = x.
Proof. exact (@lem21386 (type1604 A) x). Qed.
Lemma lem387810 {A : Type'} (x : type1604 A) : x = x.
Proof. exact (@lem387809 A x). Qed.
Lemma lem387811 {A : Type'} (y : type1604 A) : y = y.
Proof. exact (@lem387810 A y). Qed.
Lemma lem387812 {A : Type'} (y : type1604 A) : term2278 A y.
Proof. exact (fun h0 : term2279 A y => @lem387811 A y). Qed.
Lemma lem387814 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem387815 {A : Type'} (y : type1604 A) : (term2278 A y) = (y = y).
Proof. exact (@lem387814 (y = y)). Qed.
Lemma lem387816 {A : Type'} (y : type1604 A) : y = y.
Proof. exact (EQ_MP (@lem387815 A y) (@lem387812 A y)). Qed.
Lemma lem387818 (x : nat) : x = x.
Proof. exact (@lem21386 nat x). Qed.
Lemma lem387819 (n : nat) : n = n.
Proof. exact (@lem387818 n). Qed.
Lemma lem387820 (n : nat) : term2265 n.
Proof. exact (fun h0 : term2266 n => @lem387819 n). Qed.
Lemma lem387822 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem387823 (n : nat) : (term2265 n) = (n = n).
Proof. exact (@lem387822 (n = n)). Qed.
Lemma lem387824 (n : nat) : n = n.
Proof. exact (EQ_MP (@lem387823 n) (@lem387820 n)). Qed.
Lemma lem387826 {A : Type'} (_8135 : nat) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2274 A n bad y _8135.
Proof. exact (EQ_MP (@lem387768 A n bad y _8135) (@lem387757 A _8135 n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem387827 {A : Type'} (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2275 A bad y n.
Proof. exact (@lem387826 A n n y k' x lt2 n' k'' bad x' h1). Qed.
Lemma lem387830 {A : Type'} (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term1349 A bad y n.
Proof. exact (@lem387827 A n y k' x lt2 n' k'' bad x' h1 (@lem387824 n)). Qed.
Lemma lem387831 {A : Type'} (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2276 A bad y n.
Proof. exact (fun h0 : term2277 A bad y n => @lem387830 A n y k' x lt2 n' k'' bad x' h1). Qed.
Lemma lem387833 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem387834 {A : Type'} (bad : type976 A) (y : type1604 A) (n : nat) : (term2276 A bad y n) = (term1349 A bad y n).
Proof. exact (@lem387833 (term1349 A bad y n)). Qed.
Lemma lem387835 {A : Type'} (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term1349 A bad y n.
Proof. exact (EQ_MP (@lem387834 A bad y n) (@lem387831 A n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem387838 {A : Type'} (k : type977 A) (y : type1604 A) (n : nat) (h1 : term2280 A k y n) : term2280 A k y n.
Proof. exact (h1). Qed.
Lemma lem387839 {A : Type'} (k : type977 A) (y : type1604 A) (n : nat) (h1 : term2280 A k y n) : term2281 A k y n.
Proof. exact (fun h0 : term2282 A k y n => @lem387838 A k y n h1). Qed.
Lemma lem387841 (p : Prop) : (term1484 p) = (~ p).
Proof. exact (EQ_MP (@lem21028 p) (@lem21107 p)). Qed.
Lemma lem387842 {A : Type'} (k : type977 A) (y : type1604 A) (n : nat) : (term2281 A k y n) = (term2280 A k y n).
Proof. exact (@lem387841 (term2282 A k y n)). Qed.
Lemma lem387843 {A : Type'} (k : type977 A) (y : type1604 A) (n : nat) (h1 : term2280 A k y n) : term2280 A k y n.
Proof. exact (EQ_MP (@lem387842 A k y n) (@lem387839 A k y n h1)). Qed.
Lemma lem387849 (q : Prop) (p : Prop) (r : Prop) : (term22 p q r) = (term22 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem387850 {A : Type'} (bad : type976 A) (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2253 A bad k _8134 n) = (term2283 A bad k _8134 n).
Proof. exact (@lem387849 ((@I ((nat -> A) -> nat) k _8134) = n) (term1294 A bad _8134) (term2116 A k _8134 n)). Qed.
Lemma lem387866 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem387867 {A : Type'} (k : type977 A) (n : nat) (bad : type976 A) (_8134 : nat -> A) : (term2284 A bad k _8134 n) = (term2285 A k n bad _8134).
Proof. exact (@lem387866 (term2116 A k _8134 n) (term1294 A bad _8134)). Qed.
Lemma lem387873 {A : Type'} (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2120 A k _8134 n) = (term2120 A k _8134 n).
Proof. exact (eq_refl (term2120 A k _8134 n)). Qed.
Lemma lem387874 {A : Type'} (k : type977 A) (n : nat) (bad : type976 A) (_8134 : nat -> A) : (term2283 A bad k _8134 n) = (term2286 A k n bad _8134).
Proof. exact (MK_COMB (@lem387873 A k _8134 n) (@lem387867 A k n bad _8134)). Qed.
Lemma lem387885 {A : Type'} (k : type977 A) (n : nat) (bad : type976 A) (_8134 : nat -> A) : (term2253 A bad k _8134 n) = (term2286 A k n bad _8134).
Proof. exact (TRANS (@lem387850 A bad k _8134 n) (@lem387874 A k n bad _8134)). Qed.
Lemma lem387886 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem387887 {A : Type'} (k : type977 A) (n : nat) (bad : type976 A) (_8134 : nat -> A) : (term2287 A bad k _8134 n) = (term2288 A k n bad _8134).
Proof. exact (MK_COMB (@lem387886) (@lem387885 A k n bad _8134)). Qed.
Lemma lem387903 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem387904 {A : Type'} (k : type977 A) (n : nat) (bad : type976 A) (_8134 : nat -> A) : (term2284 A bad k _8134 n) = (term2285 A k n bad _8134).
Proof. exact (@lem387903 (term2116 A k _8134 n) (term1294 A bad _8134)). Qed.
Lemma lem387910 {A : Type'} (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2120 A k _8134 n) = (term2120 A k _8134 n).
Proof. exact (eq_refl (term2120 A k _8134 n)). Qed.
Lemma lem387911 {A : Type'} (k : type977 A) (n : nat) (bad : type976 A) (_8134 : nat -> A) : (term2283 A bad k _8134 n) = (term2286 A k n bad _8134).
Proof. exact (MK_COMB (@lem387910 A k _8134 n) (@lem387904 A k n bad _8134)). Qed.
Lemma lem387922 {A : Type'} (k : type977 A) (n : nat) (bad : type976 A) (_8134 : nat -> A) : ((term2253 A bad k _8134 n) = (term2283 A bad k _8134 n)) = ((term2286 A k n bad _8134) = (term2286 A k n bad _8134)).
Proof. exact (MK_COMB (@lem387887 A k n bad _8134) (@lem387911 A k n bad _8134)). Qed.
Lemma lem387924 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem387925 (x : Prop) : (x = x) = True.
Proof. exact (@lem387924 Prop x). Qed.
Lemma lem387926 {A : Type'} (k : type977 A) (n : nat) (bad : type976 A) (_8134 : nat -> A) : ((term2286 A k n bad _8134) = (term2286 A k n bad _8134)) = True.
Proof. exact (@lem387925 (term2286 A k n bad _8134)). Qed.
Lemma lem387927 {A : Type'} (bad : type976 A) (k : type977 A) (_8134 : nat -> A) (n : nat) : ((term2253 A bad k _8134 n) = (term2283 A bad k _8134 n)) = True.
Proof. exact (TRANS (@lem387922 A k n bad _8134) (@lem387926 A k n bad _8134)). Qed.
Lemma lem387928 {A : Type'} (bad : type976 A) (k : type977 A) (_8134 : nat -> A) (n : nat) : True = ((term2253 A bad k _8134 n) = (term2283 A bad k _8134 n)).
Proof. exact (SYM (@lem387927 A bad k _8134 n)). Qed.
Lemma lem387929 {A : Type'} (bad : type976 A) (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2253 A bad k _8134 n) = (term2283 A bad k _8134 n).
Proof. exact (EQ_MP (@lem387928 A bad k _8134 n) (@lem0)). Qed.
Lemma lem387930 {A : Type'} (_8134 : nat -> A) (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) (h1 : term2096 A bad n x k) : term2283 A bad k _8134 n.
Proof. exact (EQ_MP (@lem387929 A bad k _8134 n) (@lem387503 A _8134 bad n x k h1)). Qed.
Lemma lem387932 (b : Prop) (a : Prop) : (a \/ b) = (term493 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem387933 {A : Type'} (bad : type976 A) (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2283 A bad k _8134 n) = (term2289 A bad k _8134 n).
Proof. exact (@lem387932 (term2284 A bad k _8134 n) ((@I ((nat -> A) -> nat) k _8134) = n)). Qed.
Lemma lem387935 (a : Prop) (b : Prop) : (term495 a b) = (term496 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem387936 {A : Type'} (bad : type976 A) (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2290 A bad k _8134 n) = (term2291 A bad k _8134 n).
Proof. exact (@lem387935 (term1294 A bad _8134) (term2116 A k _8134 n)). Qed.
Lemma lem387938 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem387939 {A : Type'} (bad : type976 A) (_8134 : nat -> A) : (term1494 A bad _8134) = (@I ((nat -> A) -> Prop) bad _8134).
Proof. exact (@lem387938 (@I ((nat -> A) -> Prop) bad _8134)). Qed.
Lemma lem387940 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem387941 {A : Type'} (bad : type976 A) (_8134 : nat -> A) : (term1545 A bad _8134) = (term1290 A bad _8134).
Proof. exact (MK_COMB (@lem387940) (@lem387939 A bad _8134)). Qed.
Lemma lem387942 {A : Type'} (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2292 A k _8134 n) = (term2292 A k _8134 n).
Proof. exact (eq_refl (term2292 A k _8134 n)). Qed.
Lemma lem387943 {A : Type'} (bad : type976 A) (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2291 A bad k _8134 n) = (term2293 A bad k _8134 n).
Proof. exact (MK_COMB (@lem387941 A bad _8134) (@lem387942 A k _8134 n)). Qed.
Lemma lem387944 {A : Type'} (bad : type976 A) (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2290 A bad k _8134 n) = (term2293 A bad k _8134 n).
Proof. exact (TRANS (@lem387936 A bad k _8134 n) (@lem387943 A bad k _8134 n)). Qed.
Lemma lem387945 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem387946 {A : Type'} (bad : type976 A) (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2294 A bad k _8134 n) = (term2295 A bad k _8134 n).
Proof. exact (MK_COMB (@lem387945) (@lem387944 A bad k _8134 n)). Qed.
Lemma lem387947 {A : Type'} (k : type977 A) (_8134 : nat -> A) (n : nat) : ((@I ((nat -> A) -> nat) k _8134) = n) = ((@I ((nat -> A) -> nat) k _8134) = n).
Proof. exact (eq_refl ((@I ((nat -> A) -> nat) k _8134) = n)). Qed.
Lemma lem387948 {A : Type'} (bad : type976 A) (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2289 A bad k _8134 n) = (term2296 A bad k _8134 n).
Proof. exact (MK_COMB (@lem387946 A bad k _8134 n) (@lem387947 A k _8134 n)). Qed.
Lemma lem387949 {A : Type'} (bad : type976 A) (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2283 A bad k _8134 n) = (term2296 A bad k _8134 n).
Proof. exact (TRANS (@lem387933 A bad k _8134 n) (@lem387948 A bad k _8134 n)). Qed.
Lemma lem387951 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2280 A k y n) (h2 : term2033 A n y k' x lt2 n' k'' bad x') : term2297 A bad k y n.
Proof. exact (conj (@lem387835 A n y k' x lt2 n' k'' bad x' h2) (@lem387843 A k y n h1)). Qed.
Lemma lem387953 {A : Type'} (_8134 : nat -> A) (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) (h1 : term2096 A bad n x k) : term2296 A bad k _8134 n.
Proof. exact (EQ_MP (@lem387949 A bad k _8134 n) (@lem387930 A _8134 bad n x k h1)). Qed.
Lemma lem387954 {A : Type'} (_8134 : nat -> A) (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) (h1 : term2096 A bad n x k) : term2296 A bad k _8134 n.
Proof. exact (@lem387953 A _8134 bad n x k h1). Qed.
Lemma lem387955 {A : Type'} (y : type1604 A) (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) (h1 : term2096 A bad n x k) : term2298 A bad k y n.
Proof. exact (@lem387954 A (@I (nat -> nat -> A) y n) bad n x k h1). Qed.
Lemma lem387958 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2280 A k y n) (h3 : term2033 A n y k' x lt2 n' k'' bad x') : (term2299 A k y n) = n.
Proof. exact (@lem387955 A y bad n x k h1 (@lem387951 A k n y k' x lt2 n' k'' bad x' h2 h3)). Qed.
Lemma lem387959 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2280 A k y n) (h3 : term2033 A n y k' x lt2 n' k'' bad x') : term2300 A k y n.
Proof. exact (fun h0 : term2301 A k y n => @lem387958 A k n y k' x lt2 n' k'' bad x' h1 h2 h3). Qed.
Lemma lem387961 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem387962 {A : Type'} (k : type977 A) (y : type1604 A) (n : nat) : (term2300 A k y n) = ((term2299 A k y n) = n).
Proof. exact (@lem387961 ((term2299 A k y n) = n)). Qed.
Lemma lem387963 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2280 A k y n) (h3 : term2033 A n y k' x lt2 n' k'' bad x') : (term2299 A k y n) = n.
Proof. exact (EQ_MP (@lem387962 A k y n) (@lem387959 A k n y k' x lt2 n' k'' bad x' h1 h2 h3)). Qed.
Lemma lem387981 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem387982 {A : Type'} (_8156 : type1604 A) (_8158 : type1604 A) (_8157 : nat) (_8159 : nat) : (term2257 A _8156 _8157 _8158 _8159) = (term2302 A _8156 _8158 _8157 _8159).
Proof. exact (@lem387981 ((@I (nat -> nat -> A) _8156 _8157) = (@I (nat -> nat -> A) _8158 _8159)) (term2215 _8157 _8159)). Qed.
Lemma lem387992 {A : Type'} (_8156 : type1604 A) (_8158 : type1604 A) : (term2303 A _8156 _8158) = (term2303 A _8156 _8158).
Proof. exact (eq_refl (term2303 A _8156 _8158)). Qed.
Lemma lem387993 {A : Type'} (_8156 : type1604 A) (_8158 : type1604 A) (_8157 : nat) (_8159 : nat) : (term2259 A _8156 _8157 _8158 _8159) = (term2304 A _8156 _8158 _8157 _8159).
Proof. exact (MK_COMB (@lem387992 A _8156 _8158) (@lem387982 A _8156 _8158 _8157 _8159)). Qed.
Lemma lem387997 (q : Prop) (p : Prop) (r : Prop) : (term22 p q r) = (term22 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem387998 {A : Type'} (_8156 : type1604 A) (_8158 : type1604 A) (_8157 : nat) (_8159 : nat) : (term2304 A _8156 _8158 _8157 _8159) = (term2305 A _8156 _8158 _8157 _8159).
Proof. exact (@lem387997 ((@I (nat -> nat -> A) _8156 _8157) = (@I (nat -> nat -> A) _8158 _8159)) (term2306 A _8156 _8158) (term2215 _8157 _8159)). Qed.
Lemma lem388020 {A : Type'} (_8156 : type1604 A) (_8158 : type1604 A) (_8157 : nat) (_8159 : nat) : (term2259 A _8156 _8157 _8158 _8159) = (term2305 A _8156 _8158 _8157 _8159).
Proof. exact (TRANS (@lem387993 A _8156 _8158 _8157 _8159) (@lem387998 A _8156 _8158 _8157 _8159)). Qed.
Lemma lem388021 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem388022 {A : Type'} (_8156 : type1604 A) (_8158 : type1604 A) (_8157 : nat) (_8159 : nat) : (term2307 A _8156 _8157 _8158 _8159) = (term2308 A _8156 _8158 _8157 _8159).
Proof. exact (MK_COMB (@lem388021) (@lem388020 A _8156 _8158 _8157 _8159)). Qed.
Lemma lem388044 {A : Type'} (_8156 : type1604 A) (_8158 : type1604 A) (_8157 : nat) (_8159 : nat) : (term2305 A _8156 _8158 _8157 _8159) = (term2305 A _8156 _8158 _8157 _8159).
Proof. exact (eq_refl (term2305 A _8156 _8158 _8157 _8159)). Qed.
Lemma lem388045 {A : Type'} (_8156 : type1604 A) (_8158 : type1604 A) (_8157 : nat) (_8159 : nat) : ((term2259 A _8156 _8157 _8158 _8159) = (term2305 A _8156 _8158 _8157 _8159)) = ((term2305 A _8156 _8158 _8157 _8159) = (term2305 A _8156 _8158 _8157 _8159)).
Proof. exact (MK_COMB (@lem388022 A _8156 _8158 _8157 _8159) (@lem388044 A _8156 _8158 _8157 _8159)). Qed.
Lemma lem388047 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem388048 (x : Prop) : (x = x) = True.
Proof. exact (@lem388047 Prop x). Qed.
Lemma lem388049 {A : Type'} (_8156 : type1604 A) (_8158 : type1604 A) (_8157 : nat) (_8159 : nat) : ((term2305 A _8156 _8158 _8157 _8159) = (term2305 A _8156 _8158 _8157 _8159)) = True.
Proof. exact (@lem388048 (term2305 A _8156 _8158 _8157 _8159)). Qed.
Lemma lem388050 {A : Type'} (_8156 : type1604 A) (_8158 : type1604 A) (_8157 : nat) (_8159 : nat) : ((term2259 A _8156 _8157 _8158 _8159) = (term2305 A _8156 _8158 _8157 _8159)) = True.
Proof. exact (TRANS (@lem388045 A _8156 _8158 _8157 _8159) (@lem388049 A _8156 _8158 _8157 _8159)). Qed.
Lemma lem388051 {A : Type'} (_8156 : type1604 A) (_8158 : type1604 A) (_8157 : nat) (_8159 : nat) : True = ((term2259 A _8156 _8157 _8158 _8159) = (term2305 A _8156 _8158 _8157 _8159)).
Proof. exact (SYM (@lem388050 A _8156 _8158 _8157 _8159)). Qed.
Lemma lem388052 {A : Type'} (_8156 : type1604 A) (_8158 : type1604 A) (_8157 : nat) (_8159 : nat) : (term2259 A _8156 _8157 _8158 _8159) = (term2305 A _8156 _8158 _8157 _8159).
Proof. exact (EQ_MP (@lem388051 A _8156 _8158 _8157 _8159) (@lem0)). Qed.
Lemma lem388053 {A : Type'} (_8156 : type1604 A) (_8158 : type1604 A) (_8157 : nat) (_8159 : nat) : term2305 A _8156 _8158 _8157 _8159.
Proof. exact (EQ_MP (@lem388052 A _8156 _8158 _8157 _8159) (@lem387600 A _8156 _8157 _8158 _8159)). Qed.
Lemma lem388055 (b : Prop) (a : Prop) : (a \/ b) = (term493 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem388056 {A : Type'} (_8156 : type1604 A) (_8157 : nat) (_8158 : type1604 A) (_8159 : nat) : (term2305 A _8156 _8158 _8157 _8159) = (term2309 A _8156 _8157 _8158 _8159).
Proof. exact (@lem388055 (term2310 A _8156 _8158 _8157 _8159) ((@I (nat -> nat -> A) _8156 _8157) = (@I (nat -> nat -> A) _8158 _8159))). Qed.
Lemma lem388058 (a : Prop) (b : Prop) : (term495 a b) = (term496 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem388059 {A : Type'} (_8156 : type1604 A) (_8158 : type1604 A) (_8157 : nat) (_8159 : nat) : (term2311 A _8156 _8158 _8157 _8159) = (term2312 A _8156 _8158 _8157 _8159).
Proof. exact (@lem388058 (term2306 A _8156 _8158) (term2215 _8157 _8159)). Qed.
Lemma lem388061 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem388062 {A : Type'} (_8156 : type1604 A) (_8158 : type1604 A) : (term2313 A _8156 _8158) = (_8156 = _8158).
Proof. exact (@lem388061 (_8156 = _8158)). Qed.
Lemma lem388063 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem388064 {A : Type'} (_8156 : type1604 A) (_8158 : type1604 A) : (term2314 A _8156 _8158) = (term2315 A _8156 _8158).
Proof. exact (MK_COMB (@lem388063) (@lem388062 A _8156 _8158)). Qed.
Lemma lem388066 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem388067 (_8157 : nat) (_8159 : nat) : (term2271 _8157 _8159) = (_8157 = _8159).
Proof. exact (@lem388066 (_8157 = _8159)). Qed.
Lemma lem388068 {A : Type'} (_8156 : type1604 A) (_8158 : type1604 A) (_8157 : nat) (_8159 : nat) : (term2312 A _8156 _8158 _8157 _8159) = (term2316 A _8156 _8158 _8157 _8159).
Proof. exact (MK_COMB (@lem388064 A _8156 _8158) (@lem388067 _8157 _8159)). Qed.
Lemma lem388069 {A : Type'} (_8156 : type1604 A) (_8158 : type1604 A) (_8157 : nat) (_8159 : nat) : (term2311 A _8156 _8158 _8157 _8159) = (term2316 A _8156 _8158 _8157 _8159).
Proof. exact (TRANS (@lem388059 A _8156 _8158 _8157 _8159) (@lem388068 A _8156 _8158 _8157 _8159)). Qed.
Lemma lem388070 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem388071 {A : Type'} (_8156 : type1604 A) (_8158 : type1604 A) (_8157 : nat) (_8159 : nat) : (term2317 A _8156 _8158 _8157 _8159) = (term2318 A _8156 _8158 _8157 _8159).
Proof. exact (MK_COMB (@lem388070) (@lem388069 A _8156 _8158 _8157 _8159)). Qed.
Lemma lem388072 {A : Type'} (_8156 : type1604 A) (_8157 : nat) (_8158 : type1604 A) (_8159 : nat) : ((@I (nat -> nat -> A) _8156 _8157) = (@I (nat -> nat -> A) _8158 _8159)) = ((@I (nat -> nat -> A) _8156 _8157) = (@I (nat -> nat -> A) _8158 _8159)).
Proof. exact (eq_refl ((@I (nat -> nat -> A) _8156 _8157) = (@I (nat -> nat -> A) _8158 _8159))). Qed.
Lemma lem388073 {A : Type'} (_8156 : type1604 A) (_8157 : nat) (_8158 : type1604 A) (_8159 : nat) : (term2309 A _8156 _8157 _8158 _8159) = (term2319 A _8156 _8157 _8158 _8159).
Proof. exact (MK_COMB (@lem388071 A _8156 _8158 _8157 _8159) (@lem388072 A _8156 _8157 _8158 _8159)). Qed.
Lemma lem388074 {A : Type'} (_8156 : type1604 A) (_8157 : nat) (_8158 : type1604 A) (_8159 : nat) : (term2305 A _8156 _8158 _8157 _8159) = (term2319 A _8156 _8157 _8158 _8159).
Proof. exact (TRANS (@lem388056 A _8156 _8157 _8158 _8159) (@lem388073 A _8156 _8157 _8158 _8159)). Qed.
Lemma lem388076 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2280 A k y n) (h3 : term2033 A n y k' x lt2 n' k'' bad x') : term2320 A k y n.
Proof. exact (conj (@lem387816 A y) (@lem387963 A k n y k' x lt2 n' k'' bad x' h1 h2 h3)). Qed.
Lemma lem388078 {A : Type'} (_8156 : type1604 A) (_8157 : nat) (_8158 : type1604 A) (_8159 : nat) : term2319 A _8156 _8157 _8158 _8159.
Proof. exact (EQ_MP (@lem388074 A _8156 _8157 _8158 _8159) (@lem388053 A _8156 _8158 _8157 _8159)). Qed.
Lemma lem388079 {A : Type'} (_8156 : type1604 A) (_8157 : nat) (_8158 : type1604 A) (_8159 : nat) : term2319 A _8156 _8157 _8158 _8159.
Proof. exact (@lem388078 A _8156 _8157 _8158 _8159). Qed.
Lemma lem388080 {A : Type'} (k : type977 A) (y : type1604 A) (n : nat) : term2321 A k y n.
Proof. exact (@lem388079 A y (term2299 A k y n) y n). Qed.
Lemma lem388083 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2280 A k y n) (h3 : term2033 A n y k' x lt2 n' k'' bad x') : (term2322 A k y n) = (@I (nat -> nat -> A) y n).
Proof. exact (@lem388080 A k y n (@lem388076 A k n y k' x lt2 n' k'' bad x' h1 h2 h3)). Qed.
Lemma lem388084 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2280 A k y n) (h3 : term2033 A n y k' x lt2 n' k'' bad x') : term2323 A k y n.
Proof. exact (fun h0 : term2324 A k y n => @lem388083 A k n y k' x lt2 n' k'' bad x' h1 h2 h3). Qed.
Lemma lem388086 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem388087 {A : Type'} (k : type977 A) (y : type1604 A) (n : nat) : (term2323 A k y n) = ((term2322 A k y n) = (@I (nat -> nat -> A) y n)).
Proof. exact (@lem388086 ((term2322 A k y n) = (@I (nat -> nat -> A) y n))). Qed.
Lemma lem388088 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2280 A k y n) (h3 : term2033 A n y k' x lt2 n' k'' bad x') : (term2322 A k y n) = (@I (nat -> nat -> A) y n).
Proof. exact (EQ_MP (@lem388087 A k y n) (@lem388084 A k n y k' x lt2 n' k'' bad x' h1 h2 h3)). Qed.
Lemma lem388090 (x : nat) : x = x.
Proof. exact (@lem21386 nat x). Qed.
Lemma lem388091 {A : Type'} (k : type977 A) (y : type1604 A) (n : nat) : (term2299 A k y n) = (term2299 A k y n).
Proof. exact (@lem388090 (term2299 A k y n)). Qed.
Lemma lem388092 {A : Type'} (k : type977 A) (y : type1604 A) (n : nat) : term2325 A k y n.
Proof. exact (fun h0 : term2326 A k y n => @lem388091 A k y n). Qed.
Lemma lem388094 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem388095 {A : Type'} (k : type977 A) (y : type1604 A) (n : nat) : (term2325 A k y n) = ((term2299 A k y n) = (term2299 A k y n)).
Proof. exact (@lem388094 ((term2299 A k y n) = (term2299 A k y n))). Qed.
Lemma lem388096 {A : Type'} (k : type977 A) (y : type1604 A) (n : nat) : (term2299 A k y n) = (term2299 A k y n).
Proof. exact (EQ_MP (@lem388095 A k y n) (@lem388092 A k y n)). Qed.
Lemma lem388114 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem388115 {A : Type'} (_8168 : nat -> A) (_8170 : nat -> A) (_8169 : nat) (_8171 : nat) : (term2261 A _8168 _8169 _8170 _8171) = (term2327 A _8168 _8170 _8169 _8171).
Proof. exact (@lem388114 ((@I (nat -> A) _8168 _8169) = (@I (nat -> A) _8170 _8171)) (term2215 _8169 _8171)). Qed.
Lemma lem388125 {A : Type'} (_8168 : nat -> A) (_8170 : nat -> A) : (term2328 A _8168 _8170) = (term2328 A _8168 _8170).
Proof. exact (eq_refl (term2328 A _8168 _8170)). Qed.
Lemma lem388126 {A : Type'} (_8168 : nat -> A) (_8170 : nat -> A) (_8169 : nat) (_8171 : nat) : (term2263 A _8168 _8169 _8170 _8171) = (term2329 A _8168 _8170 _8169 _8171).
Proof. exact (MK_COMB (@lem388125 A _8168 _8170) (@lem388115 A _8168 _8170 _8169 _8171)). Qed.
Lemma lem388130 (q : Prop) (p : Prop) (r : Prop) : (term22 p q r) = (term22 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem388131 {A : Type'} (_8168 : nat -> A) (_8170 : nat -> A) (_8169 : nat) (_8171 : nat) : (term2329 A _8168 _8170 _8169 _8171) = (term2330 A _8168 _8170 _8169 _8171).
Proof. exact (@lem388130 ((@I (nat -> A) _8168 _8169) = (@I (nat -> A) _8170 _8171)) (term2331 A _8168 _8170) (term2215 _8169 _8171)). Qed.
Lemma lem388153 {A : Type'} (_8168 : nat -> A) (_8170 : nat -> A) (_8169 : nat) (_8171 : nat) : (term2263 A _8168 _8169 _8170 _8171) = (term2330 A _8168 _8170 _8169 _8171).
Proof. exact (TRANS (@lem388126 A _8168 _8170 _8169 _8171) (@lem388131 A _8168 _8170 _8169 _8171)). Qed.
Lemma lem388154 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem388155 {A : Type'} (_8168 : nat -> A) (_8170 : nat -> A) (_8169 : nat) (_8171 : nat) : (term2332 A _8168 _8169 _8170 _8171) = (term2333 A _8168 _8170 _8169 _8171).
Proof. exact (MK_COMB (@lem388154) (@lem388153 A _8168 _8170 _8169 _8171)). Qed.
Lemma lem388177 {A : Type'} (_8168 : nat -> A) (_8170 : nat -> A) (_8169 : nat) (_8171 : nat) : (term2330 A _8168 _8170 _8169 _8171) = (term2330 A _8168 _8170 _8169 _8171).
Proof. exact (eq_refl (term2330 A _8168 _8170 _8169 _8171)). Qed.
Lemma lem388178 {A : Type'} (_8168 : nat -> A) (_8170 : nat -> A) (_8169 : nat) (_8171 : nat) : ((term2263 A _8168 _8169 _8170 _8171) = (term2330 A _8168 _8170 _8169 _8171)) = ((term2330 A _8168 _8170 _8169 _8171) = (term2330 A _8168 _8170 _8169 _8171)).
Proof. exact (MK_COMB (@lem388155 A _8168 _8170 _8169 _8171) (@lem388177 A _8168 _8170 _8169 _8171)). Qed.
Lemma lem388180 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem388181 (x : Prop) : (x = x) = True.
Proof. exact (@lem388180 Prop x). Qed.
Lemma lem388182 {A : Type'} (_8168 : nat -> A) (_8170 : nat -> A) (_8169 : nat) (_8171 : nat) : ((term2330 A _8168 _8170 _8169 _8171) = (term2330 A _8168 _8170 _8169 _8171)) = True.
Proof. exact (@lem388181 (term2330 A _8168 _8170 _8169 _8171)). Qed.
Lemma lem388183 {A : Type'} (_8168 : nat -> A) (_8170 : nat -> A) (_8169 : nat) (_8171 : nat) : ((term2263 A _8168 _8169 _8170 _8171) = (term2330 A _8168 _8170 _8169 _8171)) = True.
Proof. exact (TRANS (@lem388178 A _8168 _8170 _8169 _8171) (@lem388182 A _8168 _8170 _8169 _8171)). Qed.
Lemma lem388184 {A : Type'} (_8168 : nat -> A) (_8170 : nat -> A) (_8169 : nat) (_8171 : nat) : True = ((term2263 A _8168 _8169 _8170 _8171) = (term2330 A _8168 _8170 _8169 _8171)).
Proof. exact (SYM (@lem388183 A _8168 _8170 _8169 _8171)). Qed.
Lemma lem388185 {A : Type'} (_8168 : nat -> A) (_8170 : nat -> A) (_8169 : nat) (_8171 : nat) : (term2263 A _8168 _8169 _8170 _8171) = (term2330 A _8168 _8170 _8169 _8171).
Proof. exact (EQ_MP (@lem388184 A _8168 _8170 _8169 _8171) (@lem0)). Qed.
Lemma lem388186 {A : Type'} (_8168 : nat -> A) (_8170 : nat -> A) (_8169 : nat) (_8171 : nat) : term2330 A _8168 _8170 _8169 _8171.
Proof. exact (EQ_MP (@lem388185 A _8168 _8170 _8169 _8171) (@lem387645 A _8168 _8169 _8170 _8171)). Qed.
Lemma lem388188 (b : Prop) (a : Prop) : (a \/ b) = (term493 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem388189 {A : Type'} (_8168 : nat -> A) (_8169 : nat) (_8170 : nat -> A) (_8171 : nat) : (term2330 A _8168 _8170 _8169 _8171) = (term2334 A _8168 _8169 _8170 _8171).
Proof. exact (@lem388188 (term2335 A _8168 _8170 _8169 _8171) ((@I (nat -> A) _8168 _8169) = (@I (nat -> A) _8170 _8171))). Qed.
Lemma lem388191 (a : Prop) (b : Prop) : (term495 a b) = (term496 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem388192 {A : Type'} (_8168 : nat -> A) (_8170 : nat -> A) (_8169 : nat) (_8171 : nat) : (term2336 A _8168 _8170 _8169 _8171) = (term2337 A _8168 _8170 _8169 _8171).
Proof. exact (@lem388191 (term2331 A _8168 _8170) (term2215 _8169 _8171)). Qed.
Lemma lem388194 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem388195 {A : Type'} (_8168 : nat -> A) (_8170 : nat -> A) : (term2338 A _8168 _8170) = (_8168 = _8170).
Proof. exact (@lem388194 (_8168 = _8170)). Qed.
Lemma lem388196 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem388197 {A : Type'} (_8168 : nat -> A) (_8170 : nat -> A) : (term2339 A _8168 _8170) = (term2340 A _8168 _8170).
Proof. exact (MK_COMB (@lem388196) (@lem388195 A _8168 _8170)). Qed.
Lemma lem388199 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem388200 (_8169 : nat) (_8171 : nat) : (term2271 _8169 _8171) = (_8169 = _8171).
Proof. exact (@lem388199 (_8169 = _8171)). Qed.
Lemma lem388201 {A : Type'} (_8168 : nat -> A) (_8170 : nat -> A) (_8169 : nat) (_8171 : nat) : (term2337 A _8168 _8170 _8169 _8171) = (term2341 A _8168 _8170 _8169 _8171).
Proof. exact (MK_COMB (@lem388197 A _8168 _8170) (@lem388200 _8169 _8171)). Qed.
Lemma lem388202 {A : Type'} (_8168 : nat -> A) (_8170 : nat -> A) (_8169 : nat) (_8171 : nat) : (term2336 A _8168 _8170 _8169 _8171) = (term2341 A _8168 _8170 _8169 _8171).
Proof. exact (TRANS (@lem388192 A _8168 _8170 _8169 _8171) (@lem388201 A _8168 _8170 _8169 _8171)). Qed.
Lemma lem388203 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem388204 {A : Type'} (_8168 : nat -> A) (_8170 : nat -> A) (_8169 : nat) (_8171 : nat) : (term2342 A _8168 _8170 _8169 _8171) = (term2343 A _8168 _8170 _8169 _8171).
Proof. exact (MK_COMB (@lem388203) (@lem388202 A _8168 _8170 _8169 _8171)). Qed.
Lemma lem388205 {A : Type'} (_8168 : nat -> A) (_8169 : nat) (_8170 : nat -> A) (_8171 : nat) : ((@I (nat -> A) _8168 _8169) = (@I (nat -> A) _8170 _8171)) = ((@I (nat -> A) _8168 _8169) = (@I (nat -> A) _8170 _8171)).
Proof. exact (eq_refl ((@I (nat -> A) _8168 _8169) = (@I (nat -> A) _8170 _8171))). Qed.
Lemma lem388206 {A : Type'} (_8168 : nat -> A) (_8169 : nat) (_8170 : nat -> A) (_8171 : nat) : (term2334 A _8168 _8169 _8170 _8171) = (term2344 A _8168 _8169 _8170 _8171).
Proof. exact (MK_COMB (@lem388204 A _8168 _8170 _8169 _8171) (@lem388205 A _8168 _8169 _8170 _8171)). Qed.
Lemma lem388207 {A : Type'} (_8168 : nat -> A) (_8169 : nat) (_8170 : nat -> A) (_8171 : nat) : (term2330 A _8168 _8170 _8169 _8171) = (term2344 A _8168 _8169 _8170 _8171).
Proof. exact (TRANS (@lem388189 A _8168 _8169 _8170 _8171) (@lem388206 A _8168 _8169 _8170 _8171)). Qed.
Lemma lem388209 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2280 A k y n) (h3 : term2033 A n y k' x lt2 n' k'' bad x') : term2345 A k y n.
Proof. exact (conj (@lem388088 A k n y k' x lt2 n' k'' bad x' h1 h2 h3) (@lem388096 A k y n)). Qed.
Lemma lem388211 {A : Type'} (_8168 : nat -> A) (_8169 : nat) (_8170 : nat -> A) (_8171 : nat) : term2344 A _8168 _8169 _8170 _8171.
Proof. exact (EQ_MP (@lem388207 A _8168 _8169 _8170 _8171) (@lem388186 A _8168 _8170 _8169 _8171)). Qed.
Lemma lem388212 {A : Type'} (_8168 : nat -> A) (_8169 : nat) (_8170 : nat -> A) (_8171 : nat) : term2344 A _8168 _8169 _8170 _8171.
Proof. exact (@lem388211 A _8168 _8169 _8170 _8171). Qed.
Lemma lem388213 {A : Type'} (k : type977 A) (y : type1604 A) (n : nat) : term2346 A k y n.
Proof. exact (@lem388212 A (term2322 A k y n) (term2299 A k y n) (@I (nat -> nat -> A) y n) (term2299 A k y n)). Qed.
Lemma lem388216 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2280 A k y n) (h3 : term2033 A n y k' x lt2 n' k'' bad x') : (term2347 A k y n) = (term2348 A k y n).
Proof. exact (@lem388213 A k y n (@lem388209 A k n y k' x lt2 n' k'' bad x' h1 h2 h3)). Qed.
Lemma lem388217 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2280 A k y n) (h3 : term2033 A n y k' x lt2 n' k'' bad x') : term2349 A k y n.
Proof. exact (fun h0 : term2350 A k y n => @lem388216 A k n y k' x lt2 n' k'' bad x' h1 h2 h3). Qed.
Lemma lem388219 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem388220 {A : Type'} (k : type977 A) (y : type1604 A) (n : nat) : (term2349 A k y n) = ((term2347 A k y n) = (term2348 A k y n)).
Proof. exact (@lem388219 ((term2347 A k y n) = (term2348 A k y n))). Qed.
Lemma lem388221 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2280 A k y n) (h3 : term2033 A n y k' x lt2 n' k'' bad x') : (term2347 A k y n) = (term2348 A k y n).
Proof. exact (EQ_MP (@lem388220 A k y n) (@lem388217 A k n y k' x lt2 n' k'' bad x' h1 h2 h3)). Qed.
Lemma lem388224 {A : Type'} (x : nat -> A) (k : type977 A) (y : type1604 A) (n : nat) (h1 : term2351 A x k y n) : term2351 A x k y n.
Proof. exact (h1). Qed.
Lemma lem388225 {A : Type'} (x : nat -> A) (k : type977 A) (y : type1604 A) (n : nat) (h1 : term2351 A x k y n) : term2352 A x k y n.
Proof. exact (fun h0 : (term2348 A k y n) = (term2353 A x k y n) => @lem388224 A x k y n h1). Qed.
Lemma lem388227 (p : Prop) : (term1484 p) = (~ p).
Proof. exact (EQ_MP (@lem21028 p) (@lem21107 p)). Qed.
Lemma lem388228 {A : Type'} (x : nat -> A) (k : type977 A) (y : type1604 A) (n : nat) : (term2352 A x k y n) = (term2351 A x k y n).
Proof. exact (@lem388227 ((term2348 A k y n) = (term2353 A x k y n))). Qed.
Lemma lem388229 {A : Type'} (x : nat -> A) (k : type977 A) (y : type1604 A) (n : nat) (h1 : term2351 A x k y n) : term2351 A x k y n.
Proof. exact (EQ_MP (@lem388228 A x k y n) (@lem388225 A x k y n h1)). Qed.
Lemma lem388247 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem388248 {A : Type'} (y : A) (x : A) (z : A) : (term2354 A x y z) = (term2355 A y x z).
Proof. exact (@lem388247 (y = z) (term2356 A x z)). Qed.
Lemma lem388258 {A : Type'} (x : A) (y : A) : (term2357 A x y) = (term2357 A x y).
Proof. exact (eq_refl (term2357 A x y)). Qed.
Lemma lem388259 {A : Type'} (y : A) (x : A) (z : A) : (term2264 A x y z) = (term2358 A y x z).
Proof. exact (MK_COMB (@lem388258 A x y) (@lem388248 A y x z)). Qed.
Lemma lem388263 (q : Prop) (p : Prop) (r : Prop) : (term22 p q r) = (term22 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem388264 {A : Type'} (y : A) (x : A) (z : A) : (term2358 A y x z) = (term2359 A y x z).
Proof. exact (@lem388263 (y = z) (term2356 A x y) (term2356 A x z)). Qed.
Lemma lem388286 {A : Type'} (y : A) (x : A) (z : A) : (term2264 A x y z) = (term2359 A y x z).
Proof. exact (TRANS (@lem388259 A y x z) (@lem388264 A y x z)). Qed.
Lemma lem388287 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem388288 {A : Type'} (y : A) (x : A) (z : A) : (term2360 A x y z) = (term2361 A y x z).
Proof. exact (MK_COMB (@lem388287) (@lem388286 A y x z)). Qed.
Lemma lem388292 (q : Prop) (p : Prop) (r : Prop) : (term22 p q r) = (term22 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem388293 {A : Type'} (x : A) (y : A) (z : A) : (term2362 A x y z) = (term2264 A x y z).
Proof. exact (@lem388292 (term2356 A x y) (term2356 A x z) (y = z)). Qed.
Lemma lem388309 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem388310 {A : Type'} (y : A) (x : A) (z : A) : (term2354 A x y z) = (term2355 A y x z).
Proof. exact (@lem388309 (y = z) (term2356 A x z)). Qed.
Lemma lem388320 {A : Type'} (x : A) (y : A) : (term2357 A x y) = (term2357 A x y).
Proof. exact (eq_refl (term2357 A x y)). Qed.
Lemma lem388321 {A : Type'} (y : A) (x : A) (z : A) : (term2264 A x y z) = (term2358 A y x z).
Proof. exact (MK_COMB (@lem388320 A x y) (@lem388310 A y x z)). Qed.
Lemma lem388325 (q : Prop) (p : Prop) (r : Prop) : (term22 p q r) = (term22 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem388326 {A : Type'} (y : A) (x : A) (z : A) : (term2358 A y x z) = (term2359 A y x z).
Proof. exact (@lem388325 (y = z) (term2356 A x y) (term2356 A x z)). Qed.
Lemma lem388348 {A : Type'} (y : A) (x : A) (z : A) : (term2264 A x y z) = (term2359 A y x z).
Proof. exact (TRANS (@lem388321 A y x z) (@lem388326 A y x z)). Qed.
Lemma lem388349 {A : Type'} (y : A) (x : A) (z : A) : (term2362 A x y z) = (term2359 A y x z).
Proof. exact (TRANS (@lem388293 A x y z) (@lem388348 A y x z)). Qed.
Lemma lem388350 {A : Type'} (y : A) (x : A) (z : A) : ((term2264 A x y z) = (term2362 A x y z)) = ((term2359 A y x z) = (term2359 A y x z)).
Proof. exact (MK_COMB (@lem388288 A y x z) (@lem388349 A y x z)). Qed.
Lemma lem388352 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem388353 (x : Prop) : (x = x) = True.
Proof. exact (@lem388352 Prop x). Qed.
Lemma lem388354 {A : Type'} (y : A) (x : A) (z : A) : ((term2359 A y x z) = (term2359 A y x z)) = True.
Proof. exact (@lem388353 (term2359 A y x z)). Qed.
Lemma lem388355 {A : Type'} (x : A) (y : A) (z : A) : ((term2264 A x y z) = (term2362 A x y z)) = True.
Proof. exact (TRANS (@lem388350 A y x z) (@lem388354 A y x z)). Qed.
Lemma lem388356 {A : Type'} (x : A) (y : A) (z : A) : True = ((term2264 A x y z) = (term2362 A x y z)).
Proof. exact (SYM (@lem388355 A x y z)). Qed.
Lemma lem388357 {A : Type'} (x : A) (y : A) (z : A) : (term2264 A x y z) = (term2362 A x y z).
Proof. exact (EQ_MP (@lem388356 A x y z) (@lem0)). Qed.
Lemma lem388358 {A : Type'} (x : A) (y : A) (z : A) : term2362 A x y z.
Proof. exact (EQ_MP (@lem388357 A x y z) (@lem387704 A x y z)). Qed.
Lemma lem388360 (b : Prop) (a : Prop) : (a \/ b) = (term493 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem388361 {A : Type'} (y : A) (x : A) (z : A) : (term2362 A x y z) = (term2363 A y x z).
Proof. exact (@lem388360 (term2364 A x y z) (term2356 A x z)). Qed.
Lemma lem388363 (a : Prop) (b : Prop) : (term495 a b) = (term496 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem388364 {A : Type'} (x : A) (y : A) (z : A) : (term2365 A x y z) = (term2366 A x y z).
Proof. exact (@lem388363 (term2356 A x y) (y = z)). Qed.
Lemma lem388366 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem388367 {A : Type'} (x : A) (y : A) : (term2367 A x y) = (x = y).
Proof. exact (@lem388366 (x = y)). Qed.
Lemma lem388368 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem388369 {A : Type'} (x : A) (y : A) : (term2368 A x y) = (term2369 A x y).
Proof. exact (MK_COMB (@lem388368) (@lem388367 A x y)). Qed.
Lemma lem388370 {A : Type'} (y : A) (z : A) : (term2356 A y z) = (term2356 A y z).
Proof. exact (eq_refl (term2356 A y z)). Qed.
Lemma lem388371 {A : Type'} (x : A) (y : A) (z : A) : (term2366 A x y z) = (term2370 A x y z).
Proof. exact (MK_COMB (@lem388369 A x y) (@lem388370 A y z)). Qed.
Lemma lem388372 {A : Type'} (x : A) (y : A) (z : A) : (term2365 A x y z) = (term2370 A x y z).
Proof. exact (TRANS (@lem388364 A x y z) (@lem388371 A x y z)). Qed.
Lemma lem388373 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem388374 {A : Type'} (x : A) (y : A) (z : A) : (term2371 A x y z) = (term2372 A x y z).
Proof. exact (MK_COMB (@lem388373) (@lem388372 A x y z)). Qed.
Lemma lem388375 {A : Type'} (x : A) (z : A) : (term2356 A x z) = (term2356 A x z).
Proof. exact (eq_refl (term2356 A x z)). Qed.
Lemma lem388376 {A : Type'} (y : A) (x : A) (z : A) : (term2363 A y x z) = (term2373 A y x z).
Proof. exact (MK_COMB (@lem388374 A x y z) (@lem388375 A x z)). Qed.
Lemma lem388377 {A : Type'} (y : A) (x : A) (z : A) : (term2362 A x y z) = (term2373 A y x z).
Proof. exact (TRANS (@lem388361 A y x z) (@lem388376 A y x z)). Qed.
Lemma lem388379 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2351 A x k y n) (h3 : term2280 A k y n) (h4 : term2033 A n y k' x lt2 n' k'' bad x') : term2374 A x k y n.
Proof. exact (conj (@lem388221 A k n y k' x lt2 n' k'' bad x' h1 h3 h4) (@lem388229 A x k y n h2)). Qed.
Lemma lem388381 {A : Type'} (y : A) (x : A) (z : A) : term2373 A y x z.
Proof. exact (EQ_MP (@lem388377 A y x z) (@lem388358 A x y z)). Qed.
Lemma lem388382 {A : Type'} (y : A) (x : A) (z : A) : term2373 A y x z.
Proof. exact (@lem388381 A y x z). Qed.
Lemma lem388383 {A : Type'} (x : nat -> A) (k : type977 A) (y : type1604 A) (n : nat) : term2375 A x k y n.
Proof. exact (@lem388382 A (term2348 A k y n) (term2347 A k y n) (term2353 A x k y n)). Qed.
Lemma lem388386 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2351 A x k y n) (h3 : term2280 A k y n) (h4 : term2033 A n y k' x lt2 n' k'' bad x') : term2376 A x k y n.
Proof. exact (@lem388383 A x k y n (@lem388379 A k n y k' x lt2 n' k'' bad x' h1 h2 h3 h4)). Qed.
Lemma lem388387 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2351 A x k y n) (h3 : term2280 A k y n) (h4 : term2033 A n y k' x lt2 n' k'' bad x') : term2377 A x k y n.
Proof. exact (fun h0 : (term2347 A k y n) = (term2353 A x k y n) => @lem388386 A k n y k' x lt2 n' k'' bad x' h1 h2 h3 h4). Qed.
Lemma lem388389 (p : Prop) : (term1484 p) = (~ p).
Proof. exact (EQ_MP (@lem21028 p) (@lem21107 p)). Qed.
Lemma lem388390 {A : Type'} (x : nat -> A) (k : type977 A) (y : type1604 A) (n : nat) : (term2377 A x k y n) = (term2376 A x k y n).
Proof. exact (@lem388389 ((term2347 A k y n) = (term2353 A x k y n))). Qed.
Lemma lem388391 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2351 A x k y n) (h3 : term2280 A k y n) (h4 : term2033 A n y k' x lt2 n' k'' bad x') : term2376 A x k y n.
Proof. exact (EQ_MP (@lem388390 A x k y n) (@lem388387 A k n y k' x lt2 n' k'' bad x' h1 h2 h3 h4)). Qed.
Lemma lem388393 (b : Prop) (a : Prop) : (a \/ b) = (term493 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem388396 {A : Type'} (y : type1604 A) (x : nat -> A) (_8135 : nat) (n : nat) : (term2250 A n y x _8135) = (term2378 A y x _8135 n).
Proof. exact (@lem388393 ((term1331 A y _8135) = (@I (nat -> A) x _8135)) (term2215 _8135 n)). Qed.
Lemma lem388399 {A : Type'} (_8135 : nat) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2378 A y x _8135 n.
Proof. exact (EQ_MP (@lem388396 A y x _8135 n) (@lem387455 A _8135 n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem388400 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2379 A x k y n.
Proof. exact (@lem388399 A (term2299 A k y n) n y k' x lt2 n' k'' bad x' h1). Qed.
Lemma lem388403 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2351 A x k y n) (h3 : term2280 A k y n) (h4 : term2033 A n y k' x lt2 n' k'' bad x') : term2301 A k y n.
Proof. exact (@lem388400 A k n y k' x lt2 n' k'' bad x' h4 (@lem388391 A k n y k' x lt2 n' k'' bad x' h1 h2 h3 h4)). Qed.
Lemma lem388404 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2351 A x k y n) (h3 : term2280 A k y n) (h4 : term2033 A n y k' x lt2 n' k'' bad x') : term2380 A k y n.
Proof. exact (fun h0 : (term2299 A k y n) = n => @lem388403 A k n y k' x lt2 n' k'' bad x' h1 h2 h3 h4). Qed.
Lemma lem388406 (p : Prop) : (term1484 p) = (~ p).
Proof. exact (EQ_MP (@lem21028 p) (@lem21107 p)). Qed.
Lemma lem388407 {A : Type'} (k : type977 A) (y : type1604 A) (n : nat) : (term2380 A k y n) = (term2301 A k y n).
Proof. exact (@lem388406 ((term2299 A k y n) = n)). Qed.
Lemma lem388408 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2351 A x k y n) (h3 : term2280 A k y n) (h4 : term2033 A n y k' x lt2 n' k'' bad x') : term2301 A k y n.
Proof. exact (EQ_MP (@lem388407 A k y n) (@lem388404 A k n y k' x lt2 n' k'' bad x' h1 h2 h3 h4)). Qed.
Lemma lem388414 (q : Prop) (p : Prop) (r : Prop) : (term22 p q r) = (term22 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem388415 {A : Type'} (bad : type976 A) (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2253 A bad k _8134 n) = (term2283 A bad k _8134 n).
Proof. exact (@lem388414 ((@I ((nat -> A) -> nat) k _8134) = n) (term1294 A bad _8134) (term2116 A k _8134 n)). Qed.
Lemma lem388431 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem388432 {A : Type'} (k : type977 A) (n : nat) (bad : type976 A) (_8134 : nat -> A) : (term2284 A bad k _8134 n) = (term2285 A k n bad _8134).
Proof. exact (@lem388431 (term2116 A k _8134 n) (term1294 A bad _8134)). Qed.
Lemma lem388438 {A : Type'} (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2120 A k _8134 n) = (term2120 A k _8134 n).
Proof. exact (eq_refl (term2120 A k _8134 n)). Qed.
Lemma lem388439 {A : Type'} (k : type977 A) (n : nat) (bad : type976 A) (_8134 : nat -> A) : (term2283 A bad k _8134 n) = (term2286 A k n bad _8134).
Proof. exact (MK_COMB (@lem388438 A k _8134 n) (@lem388432 A k n bad _8134)). Qed.
Lemma lem388450 {A : Type'} (k : type977 A) (n : nat) (bad : type976 A) (_8134 : nat -> A) : (term2253 A bad k _8134 n) = (term2286 A k n bad _8134).
Proof. exact (TRANS (@lem388415 A bad k _8134 n) (@lem388439 A k n bad _8134)). Qed.
Lemma lem388451 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem388452 {A : Type'} (k : type977 A) (n : nat) (bad : type976 A) (_8134 : nat -> A) : (term2287 A bad k _8134 n) = (term2288 A k n bad _8134).
Proof. exact (MK_COMB (@lem388451) (@lem388450 A k n bad _8134)). Qed.
Lemma lem388466 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem388467 {A : Type'} (k : type977 A) (n : nat) (bad : type976 A) (_8134 : nat -> A) : (term2381 A bad k _8134 n) = (term2382 A k n bad _8134).
Proof. exact (@lem388466 ((@I ((nat -> A) -> nat) k _8134) = n) (term1294 A bad _8134)). Qed.
Lemma lem388475 {A : Type'} (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2383 A k _8134 n) = (term2383 A k _8134 n).
Proof. exact (eq_refl (term2383 A k _8134 n)). Qed.
Lemma lem388476 {A : Type'} (k : type977 A) (n : nat) (bad : type976 A) (_8134 : nat -> A) : (term2384 A bad k _8134 n) = (term2385 A k n bad _8134).
Proof. exact (MK_COMB (@lem388475 A k _8134 n) (@lem388467 A k n bad _8134)). Qed.
Lemma lem388480 (q : Prop) (p : Prop) (r : Prop) : (term22 p q r) = (term22 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem388481 {A : Type'} (k : type977 A) (n : nat) (bad : type976 A) (_8134 : nat -> A) : (term2385 A k n bad _8134) = (term2286 A k n bad _8134).
Proof. exact (@lem388480 ((@I ((nat -> A) -> nat) k _8134) = n) (term2116 A k _8134 n) (term1294 A bad _8134)). Qed.
Lemma lem388499 {A : Type'} (k : type977 A) (n : nat) (bad : type976 A) (_8134 : nat -> A) : (term2384 A bad k _8134 n) = (term2286 A k n bad _8134).
Proof. exact (TRANS (@lem388476 A k n bad _8134) (@lem388481 A k n bad _8134)). Qed.
Lemma lem388500 {A : Type'} (k : type977 A) (n : nat) (bad : type976 A) (_8134 : nat -> A) : ((term2253 A bad k _8134 n) = (term2384 A bad k _8134 n)) = ((term2286 A k n bad _8134) = (term2286 A k n bad _8134)).
Proof. exact (MK_COMB (@lem388452 A k n bad _8134) (@lem388499 A k n bad _8134)). Qed.
Lemma lem388502 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem388503 (x : Prop) : (x = x) = True.
Proof. exact (@lem388502 Prop x). Qed.
Lemma lem388504 {A : Type'} (k : type977 A) (n : nat) (bad : type976 A) (_8134 : nat -> A) : ((term2286 A k n bad _8134) = (term2286 A k n bad _8134)) = True.
Proof. exact (@lem388503 (term2286 A k n bad _8134)). Qed.
Lemma lem388505 {A : Type'} (bad : type976 A) (k : type977 A) (_8134 : nat -> A) (n : nat) : ((term2253 A bad k _8134 n) = (term2384 A bad k _8134 n)) = True.
Proof. exact (TRANS (@lem388500 A k n bad _8134) (@lem388504 A k n bad _8134)). Qed.
Lemma lem388506 {A : Type'} (bad : type976 A) (k : type977 A) (_8134 : nat -> A) (n : nat) : True = ((term2253 A bad k _8134 n) = (term2384 A bad k _8134 n)).
Proof. exact (SYM (@lem388505 A bad k _8134 n)). Qed.
Lemma lem388507 {A : Type'} (bad : type976 A) (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2253 A bad k _8134 n) = (term2384 A bad k _8134 n).
Proof. exact (EQ_MP (@lem388506 A bad k _8134 n) (@lem0)). Qed.
Lemma lem388508 {A : Type'} (_8134 : nat -> A) (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) (h1 : term2096 A bad n x k) : term2384 A bad k _8134 n.
Proof. exact (EQ_MP (@lem388507 A bad k _8134 n) (@lem387503 A _8134 bad n x k h1)). Qed.
Lemma lem388510 (b : Prop) (a : Prop) : (a \/ b) = (term493 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem388511 {A : Type'} (bad : type976 A) (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2384 A bad k _8134 n) = (term2386 A bad k _8134 n).
Proof. exact (@lem388510 (term2381 A bad k _8134 n) (term2116 A k _8134 n)). Qed.
Lemma lem388513 (a : Prop) (b : Prop) : (term495 a b) = (term496 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem388514 {A : Type'} (bad : type976 A) (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2387 A bad k _8134 n) = (term2388 A bad k _8134 n).
Proof. exact (@lem388513 (term1294 A bad _8134) ((@I ((nat -> A) -> nat) k _8134) = n)). Qed.
Lemma lem388516 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem388517 {A : Type'} (bad : type976 A) (_8134 : nat -> A) : (term1494 A bad _8134) = (@I ((nat -> A) -> Prop) bad _8134).
Proof. exact (@lem388516 (@I ((nat -> A) -> Prop) bad _8134)). Qed.
Lemma lem388518 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem388519 {A : Type'} (bad : type976 A) (_8134 : nat -> A) : (term1545 A bad _8134) = (term1290 A bad _8134).
Proof. exact (MK_COMB (@lem388518) (@lem388517 A bad _8134)). Qed.
Lemma lem388520 {A : Type'} (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2389 A k _8134 n) = (term2389 A k _8134 n).
Proof. exact (eq_refl (term2389 A k _8134 n)). Qed.
Lemma lem388521 {A : Type'} (bad : type976 A) (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2388 A bad k _8134 n) = (term2390 A bad k _8134 n).
Proof. exact (MK_COMB (@lem388519 A bad _8134) (@lem388520 A k _8134 n)). Qed.
Lemma lem388522 {A : Type'} (bad : type976 A) (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2387 A bad k _8134 n) = (term2390 A bad k _8134 n).
Proof. exact (TRANS (@lem388514 A bad k _8134 n) (@lem388521 A bad k _8134 n)). Qed.
Lemma lem388523 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem388524 {A : Type'} (bad : type976 A) (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2391 A bad k _8134 n) = (term2392 A bad k _8134 n).
Proof. exact (MK_COMB (@lem388523) (@lem388522 A bad k _8134 n)). Qed.
Lemma lem388525 {A : Type'} (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2116 A k _8134 n) = (term2116 A k _8134 n).
Proof. exact (eq_refl (term2116 A k _8134 n)). Qed.
Lemma lem388526 {A : Type'} (bad : type976 A) (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2386 A bad k _8134 n) = (term2393 A bad k _8134 n).
Proof. exact (MK_COMB (@lem388524 A bad k _8134 n) (@lem388525 A k _8134 n)). Qed.
Lemma lem388527 {A : Type'} (bad : type976 A) (k : type977 A) (_8134 : nat -> A) (n : nat) : (term2384 A bad k _8134 n) = (term2393 A bad k _8134 n).
Proof. exact (TRANS (@lem388511 A bad k _8134 n) (@lem388526 A bad k _8134 n)). Qed.
Lemma lem388529 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2351 A x k y n) (h3 : term2280 A k y n) (h4 : term2033 A n y k' x lt2 n' k'' bad x') : term2394 A bad k y n.
Proof. exact (conj (@lem387807 A n y k' x lt2 n' k'' bad x' h4) (@lem388408 A k n y k' x lt2 n' k'' bad x' h1 h2 h3 h4)). Qed.
Lemma lem388531 {A : Type'} (_8134 : nat -> A) (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) (h1 : term2096 A bad n x k) : term2393 A bad k _8134 n.
Proof. exact (EQ_MP (@lem388527 A bad k _8134 n) (@lem388508 A _8134 bad n x k h1)). Qed.
Lemma lem388532 {A : Type'} (_8134 : nat -> A) (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) (h1 : term2096 A bad n x k) : term2393 A bad k _8134 n.
Proof. exact (@lem388531 A _8134 bad n x k h1). Qed.
Lemma lem388533 {A : Type'} (y : type1604 A) (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) (h1 : term2096 A bad n x k) : term2395 A bad k y n.
Proof. exact (@lem388532 A (@I (nat -> nat -> A) y n) bad n x k h1). Qed.
Lemma lem388536 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2351 A x k y n) (h3 : term2280 A k y n) (h4 : term2033 A n y k' x lt2 n' k'' bad x') : term2282 A k y n.
Proof. exact (@lem388533 A y bad n x k h1 (@lem388529 A k n y k' x lt2 n' k'' bad x' h1 h2 h3 h4)). Qed.
Lemma lem388537 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2351 A x k y n) (h3 : term2033 A n y k' x lt2 n' k'' bad x') : term2396 A k y n.
Proof. exact (fun h0 : term2280 A k y n => @lem388536 A k n y k' x lt2 n' k'' bad x' h1 h2 h0 h3). Qed.
Lemma lem388539 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem388540 {A : Type'} (k : type977 A) (y : type1604 A) (n : nat) : (term2396 A k y n) = (term2282 A k y n).
Proof. exact (@lem388539 (term2282 A k y n)). Qed.
Lemma lem388541 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2351 A x k y n) (h3 : term2033 A n y k' x lt2 n' k'' bad x') : term2282 A k y n.
Proof. exact (EQ_MP (@lem388540 A k y n) (@lem388537 A k n y k' x lt2 n' k'' bad x' h1 h2 h3)). Qed.
Lemma lem388559 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem388560 {A : Type'} (y : type1604 A) (x : nat -> A) (_8136 : nat) (_8135 : nat) : (term1338 A y _8135 x _8136) = (term1506 A y x _8136 _8135).
Proof. exact (@lem388559 ((term1334 A y _8135 _8136) = (@I (nat -> A) x _8136)) (term1284 _8136 _8135)). Qed.
Lemma lem388568 (_8135 : nat) (n : nat) : (term2397 _8135 n) = (term2397 _8135 n).
Proof. exact (eq_refl (term2397 _8135 n)). Qed.
Lemma lem388569 {A : Type'} (n : nat) (y : type1604 A) (x : nat -> A) (_8136 : nat) (_8135 : nat) : (term2251 A n y _8135 x _8136) = (term2398 A n y x _8136 _8135).
Proof. exact (MK_COMB (@lem388568 _8135 n) (@lem388560 A y x _8136 _8135)). Qed.
Lemma lem388573 (q : Prop) (p : Prop) (r : Prop) : (term22 p q r) = (term22 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem388574 {A : Type'} (y : type1604 A) (x : nat -> A) (n : nat) (_8136 : nat) (_8135 : nat) : (term2398 A n y x _8136 _8135) = (term2399 A y x n _8136 _8135).
Proof. exact (@lem388573 ((term1334 A y _8135 _8136) = (@I (nat -> A) x _8136)) (term2215 _8135 n) (term1284 _8136 _8135)). Qed.
Lemma lem388594 {A : Type'} (y : type1604 A) (x : nat -> A) (n : nat) (_8136 : nat) (_8135 : nat) : (term2251 A n y _8135 x _8136) = (term2399 A y x n _8136 _8135).
Proof. exact (TRANS (@lem388569 A n y x _8136 _8135) (@lem388574 A y x n _8136 _8135)). Qed.
Lemma lem388595 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem388596 {A : Type'} (y : type1604 A) (x : nat -> A) (n : nat) (_8136 : nat) (_8135 : nat) : (term2400 A n y _8135 x _8136) = (term2401 A y x n _8136 _8135).
Proof. exact (MK_COMB (@lem388595) (@lem388594 A y x n _8136 _8135)). Qed.
Lemma lem388616 {A : Type'} (y : type1604 A) (x : nat -> A) (n : nat) (_8136 : nat) (_8135 : nat) : (term2399 A y x n _8136 _8135) = (term2399 A y x n _8136 _8135).
Proof. exact (eq_refl (term2399 A y x n _8136 _8135)). Qed.
Lemma lem388617 {A : Type'} (y : type1604 A) (x : nat -> A) (n : nat) (_8136 : nat) (_8135 : nat) : ((term2251 A n y _8135 x _8136) = (term2399 A y x n _8136 _8135)) = ((term2399 A y x n _8136 _8135) = (term2399 A y x n _8136 _8135)).
Proof. exact (MK_COMB (@lem388596 A y x n _8136 _8135) (@lem388616 A y x n _8136 _8135)). Qed.
Lemma lem388619 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem388620 (x : Prop) : (x = x) = True.
Proof. exact (@lem388619 Prop x). Qed.
Lemma lem388621 {A : Type'} (y : type1604 A) (x : nat -> A) (n : nat) (_8136 : nat) (_8135 : nat) : ((term2399 A y x n _8136 _8135) = (term2399 A y x n _8136 _8135)) = True.
Proof. exact (@lem388620 (term2399 A y x n _8136 _8135)). Qed.
Lemma lem388622 {A : Type'} (y : type1604 A) (x : nat -> A) (n : nat) (_8136 : nat) (_8135 : nat) : ((term2251 A n y _8135 x _8136) = (term2399 A y x n _8136 _8135)) = True.
Proof. exact (TRANS (@lem388617 A y x n _8136 _8135) (@lem388621 A y x n _8136 _8135)). Qed.
Lemma lem388623 {A : Type'} (y : type1604 A) (x : nat -> A) (n : nat) (_8136 : nat) (_8135 : nat) : True = ((term2251 A n y _8135 x _8136) = (term2399 A y x n _8136 _8135)).
Proof. exact (SYM (@lem388622 A y x n _8136 _8135)). Qed.
Lemma lem388624 {A : Type'} (y : type1604 A) (x : nat -> A) (n : nat) (_8136 : nat) (_8135 : nat) : (term2251 A n y _8135 x _8136) = (term2399 A y x n _8136 _8135).
Proof. exact (EQ_MP (@lem388623 A y x n _8136 _8135) (@lem0)). Qed.
Lemma lem388625 {A : Type'} (_8136 : nat) (_8135 : nat) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2399 A y x n _8136 _8135.
Proof. exact (EQ_MP (@lem388624 A y x n _8136 _8135) (@lem387471 A _8135 _8136 n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem388627 (b : Prop) (a : Prop) : (a \/ b) = (term493 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem388628 {A : Type'} (n : nat) (y : type1604 A) (_8135 : nat) (x : nat -> A) (_8136 : nat) : (term2399 A y x n _8136 _8135) = (term2402 A n y _8135 x _8136).
Proof. exact (@lem388627 (term2403 n _8136 _8135) ((term1334 A y _8135 _8136) = (@I (nat -> A) x _8136))). Qed.
Lemma lem388630 (a : Prop) (b : Prop) : (term495 a b) = (term496 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem388631 (n : nat) (_8136 : nat) (_8135 : nat) : (term2404 n _8136 _8135) = (term2405 n _8136 _8135).
Proof. exact (@lem388630 (term2215 _8135 n) (term1284 _8136 _8135)). Qed.
Lemma lem388633 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem388634 (_8135 : nat) (n : nat) : (term2271 _8135 n) = (_8135 = n).
Proof. exact (@lem388633 (_8135 = n)). Qed.
Lemma lem388635 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem388636 (_8135 : nat) (n : nat) : (term2406 _8135 n) = (term2407 _8135 n).
Proof. exact (MK_COMB (@lem388635) (@lem388634 _8135 n)). Qed.
Lemma lem388638 (a : Prop) : (term33 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem388639 (_8136 : nat) (_8135 : nat) : (term1510 _8136 _8135) = (term1282 _8136 _8135).
Proof. exact (@lem388638 (term1282 _8136 _8135)). Qed.
Lemma lem388640 (n : nat) (_8136 : nat) (_8135 : nat) : (term2405 n _8136 _8135) = (term2408 n _8136 _8135).
Proof. exact (MK_COMB (@lem388636 _8135 n) (@lem388639 _8136 _8135)). Qed.
Lemma lem388641 (n : nat) (_8136 : nat) (_8135 : nat) : (term2404 n _8136 _8135) = (term2408 n _8136 _8135).
Proof. exact (TRANS (@lem388631 n _8136 _8135) (@lem388640 n _8136 _8135)). Qed.
Lemma lem388642 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem388643 (n : nat) (_8136 : nat) (_8135 : nat) : (term2409 n _8136 _8135) = (term2410 n _8136 _8135).
Proof. exact (MK_COMB (@lem388642) (@lem388641 n _8136 _8135)). Qed.
Lemma lem388644 {A : Type'} (y : type1604 A) (_8135 : nat) (x : nat -> A) (_8136 : nat) : ((term1334 A y _8135 _8136) = (@I (nat -> A) x _8136)) = ((term1334 A y _8135 _8136) = (@I (nat -> A) x _8136)).
Proof. exact (eq_refl ((term1334 A y _8135 _8136) = (@I (nat -> A) x _8136))). Qed.
Lemma lem388645 {A : Type'} (n : nat) (y : type1604 A) (_8135 : nat) (x : nat -> A) (_8136 : nat) : (term2402 A n y _8135 x _8136) = (term2411 A n y _8135 x _8136).
Proof. exact (MK_COMB (@lem388643 n _8136 _8135) (@lem388644 A y _8135 x _8136)). Qed.
Lemma lem388646 {A : Type'} (n : nat) (y : type1604 A) (_8135 : nat) (x : nat -> A) (_8136 : nat) : (term2399 A y x n _8136 _8135) = (term2411 A n y _8135 x _8136).
Proof. exact (TRANS (@lem388628 A n y _8135 x _8136) (@lem388645 A n y _8135 x _8136)). Qed.
Lemma lem388648 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2351 A x k y n) (h3 : term2033 A n y k' x lt2 n' k'' bad x') : term2412 A k y n.
Proof. exact (conj (@lem387788 n) (@lem388541 A k n y k' x lt2 n' k'' bad x' h1 h2 h3)). Qed.
Lemma lem388650 {A : Type'} (_8135 : nat) (_8136 : nat) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2411 A n y _8135 x _8136.
Proof. exact (EQ_MP (@lem388646 A n y _8135 x _8136) (@lem388625 A _8136 _8135 n y k' x lt2 n' k'' bad x' h1)). Qed.
Lemma lem388651 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2033 A n y k' x lt2 n' k'' bad x') : term2413 A x k y n.
Proof. exact (@lem388650 A n (term2299 A k y n) n y k' x lt2 n' k'' bad x' h1). Qed.
Lemma lem388654 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2351 A x k y n) (h3 : term2033 A n y k' x lt2 n' k'' bad x') : (term2348 A k y n) = (term2353 A x k y n).
Proof. exact (@lem388651 A k n y k' x lt2 n' k'' bad x' h3 (@lem388648 A k n y k' x lt2 n' k'' bad x' h1 h2 h3)). Qed.
Lemma lem388655 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2033 A n y k' x lt2 n' k'' bad x') : term2414 A x k y n.
Proof. exact (fun h0 : term2351 A x k y n => @lem388654 A k n y k' x lt2 n' k'' bad x' h1 h0 h2). Qed.
Lemma lem388657 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem388658 {A : Type'} (x : nat -> A) (k : type977 A) (y : type1604 A) (n : nat) : (term2414 A x k y n) = ((term2348 A k y n) = (term2353 A x k y n)).
Proof. exact (@lem388657 ((term2348 A k y n) = (term2353 A x k y n))). Qed.
Lemma lem388659 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2033 A n y k' x lt2 n' k'' bad x') : (term2348 A k y n) = (term2353 A x k y n).
Proof. exact (EQ_MP (@lem388658 A x k y n) (@lem388655 A k n y k' x lt2 n' k'' bad x' h1 h2)). Qed.
Lemma lem388661 (a : Prop) (b : Prop) : (term515 a b) = (term516 a b).
Proof. exact (EQ_MP (@lem20904 a b) (@lem21007 a b)). Qed.
Lemma lem388662 {A : Type'} (bad : type976 A) (x : nat -> A) (k : type977 A) (_8134 : nat -> A) : (term2254 A bad x k _8134) = (term2415 A bad x k _8134).
Proof. exact (@lem388661 (@I ((nat -> A) -> Prop) bad _8134) ((term2102 A k _8134) = (term2105 A x k _8134))). Qed.
Lemma lem388664 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem388665 {A : Type'} (bad : type976 A) (x : nat -> A) (k : type977 A) (_8134 : nat -> A) : (term2415 A bad x k _8134) = (term2416 A bad x k _8134).
Proof. exact (@lem388664 (term2417 A bad x k _8134)). Qed.
Lemma lem388666 {A : Type'} (bad : type976 A) (x : nat -> A) (k : type977 A) (_8134 : nat -> A) : (term2254 A bad x k _8134) = (term2416 A bad x k _8134).
Proof. exact (TRANS (@lem388662 A bad x k _8134) (@lem388665 A bad x k _8134)). Qed.
Lemma lem388668 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2033 A n y k' x lt2 n' k'' bad x') : term2418 A bad x k y n.
Proof. exact (conj (@lem387780 A n y k' x lt2 n' k'' bad x' h2) (@lem388659 A k n y k' x lt2 n' k'' bad x' h1 h2)). Qed.
Lemma lem388670 {A : Type'} (_8134 : nat -> A) (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) (h1 : term2096 A bad n x k) : term2416 A bad x k _8134.
Proof. exact (EQ_MP (@lem388666 A bad x k _8134) (@lem387509 A _8134 bad n x k h1)). Qed.
Lemma lem388671 {A : Type'} (_8134 : nat -> A) (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) (h1 : term2096 A bad n x k) : term2416 A bad x k _8134.
Proof. exact (@lem388670 A _8134 bad n x k h1). Qed.
Lemma lem388672 {A : Type'} (y : type1604 A) (bad : type976 A) (n : nat) (x : nat -> A) (k : type977 A) (h1 : term2096 A bad n x k) : term2419 A bad x k y n.
Proof. exact (@lem388671 A (@I (nat -> nat -> A) y n) bad n x k h1). Qed.
Lemma lem388675 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2033 A n y k' x lt2 n' k'' bad x') : False.
Proof. exact (@lem388672 A y bad n x k h1 (@lem388668 A k n y k' x lt2 n' k'' bad x' h1 h2)). Qed.
Lemma lem388676 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2033 A n y k' x lt2 n' k'' bad x') : term522.
Proof. exact (fun h0 : ~ False => @lem388675 A k n y k' x lt2 n' k'' bad x' h1 h2). Qed.
Lemma lem388678 (p : Prop) : (term486 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem388679 : term522 = False.
Proof. exact (@lem388678 False). Qed.
Lemma lem388680 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (x' : nat -> A) (h1 : term2096 A bad n x k) (h2 : term2033 A n y k' x lt2 n' k'' bad x') : False.
Proof. exact (EQ_MP (@lem388679) (@lem388676 A k n y k' x lt2 n' k'' bad x' h1 h2)). Qed.
Lemma lem388681 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (k'' : type967 A) (bad : type976 A) (h1 : term2096 A bad n x k) (h2 : term2036 A n y k' x lt2 n' k'' bad) : False.
Proof. exact (ex_elim (@lem386416 A n y k' x lt2 n' k'' bad h2) (fun x' : nat -> A => fun h0 : term2035 A n y k' x lt2 n' k'' bad x' => @lem388680 A k n y k' x lt2 n' k'' bad x' h1 h0)). Qed.
Lemma lem388682 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (n' : type977 A) (bad : type976 A) (h1 : term2096 A bad n x k) (h2 : term2038 A n y k' x lt2 n' bad) : False.
Proof. exact (ex_elim (@lem386415 A n y k' x lt2 n' bad h2) (fun k'' : type967 A => fun h0 : term2037 A n y k' x lt2 n' bad k'' => @lem388681 A k n y k' x lt2 n' k'' bad h1 h0)). Qed.
Lemma lem388683 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (k' : type1584 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term2096 A bad n x k) (h2 : term2040 A n y k' x lt2 bad) : False.
Proof. exact (ex_elim (@lem386414 A n y k' x lt2 bad h2) (fun n' : type977 A => fun h0 : term2039 A n y k' x lt2 bad n' => @lem388682 A k n y k' x lt2 n' bad h1 h0)). Qed.
Lemma lem388684 {A : Type'} (k : type977 A) (n : nat) (y : type1604 A) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term2096 A bad n x k) (h2 : term2042 A n y x lt2 bad) : False.
Proof. exact (ex_elim (@lem386413 A n y x lt2 bad h2) (fun k' : type1584 A => fun h0 : term2041 A n y x lt2 bad k' => @lem388683 A k n y k' x lt2 bad h1 h0)). Qed.
Lemma lem388685 {A : Type'} (k : type977 A) (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term2096 A bad n x k) (h2 : term1798 A n x lt2 bad) : False.
Proof. exact (ex_elim (@lem386220 A n x lt2 bad h2) (fun y : type1604 A => fun h0 : term2043 A n x lt2 bad y => @lem388684 A k n y x lt2 bad h1 h0)). Qed.
Lemma lem388686 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term1849 A bad n x) (h2 : term1798 A n x lt2 bad) : False.
Proof. exact (ex_elim (@lem386411 A bad n x h1) (fun k : type977 A => fun h0 : term2098 A bad n x k => @lem388685 A k n x lt2 bad h0 h2)). Qed.
Lemma lem388687 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term1849 A bad n x) (h2 : term1798 A n x lt2 bad) : (term1849 A bad n x) = False.
Proof. exact (prop_ext (fun h3 : term1849 A bad n x => @lem388686 A n x lt2 bad h1 h2) (fun h3 : False => @lem385050 A bad n x h1)). Qed.
Lemma lem388688 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term1849 A bad n x) (h2 : term1798 A n x lt2 bad) : False.
Proof. exact (EQ_MP (@lem388687 A n x lt2 bad h1 h2) (@lem385050 A bad n x h1)). Qed.
Lemma lem388689 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term1798 A n x lt2 bad) : term1848 A bad n x.
Proof. exact (fun h0 : term1849 A bad n x => @lem388688 A n x lt2 bad h0 h1). Qed.
Lemma lem388690 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term1798 A n x lt2 bad) : term1820 A bad n x.
Proof. exact (EQ_MP (@lem385049 A bad n x) (@lem388689 A n x lt2 bad h1)). Qed.
Lemma lem388691 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : term1823 A lt2 bad n x.
Proof. exact (fun h0 : term1798 A n x lt2 bad => @lem388690 A n x lt2 bad h0). Qed.
Lemma lem388696 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : term1833 A bad n x.
Proof. exact (fun lt2 : type1402 A => @lem388691 A lt2 bad n x). Qed.
Lemma lem388701 {A : Type'} (n : nat) (x : nat -> A) : term1837 A n x.
Proof. exact (fun bad : type976 A => @lem388696 A bad n x). Qed.
Lemma lem388706 {A : Type'} (x : nat -> A) : term1841 A x.
Proof. exact (fun n : nat => @lem388701 A n x). Qed.
Lemma lem388711 {A : Type'} : term1845 A.
Proof. exact (fun x : nat -> A => @lem388706 A x). Qed.
Lemma lem388712 {A : Type'} : term1844 A.
Proof. exact (EQ_MP (@lem385044 A) (@lem388711 A)). Qed.
Lemma lem388713 {A : Type'} (x : nat -> A) : term2420 A x.
Proof. exact (@lem388712 A x). Qed.
Lemma lem388714 {A : Type'} (x : nat -> A) : (term2420 A x) = (term1840 A x).
Proof. exact (eq_refl (term2420 A x)). Qed.
Lemma lem388715 {A : Type'} (x : nat -> A) : term1840 A x.
Proof. exact (EQ_MP (@lem388714 A x) (@lem388713 A x)). Qed.
Lemma lem388716 {A : Type'} (x : nat -> A) (n : nat) : term2421 A x n.
Proof. exact (@lem388715 A x n). Qed.
Lemma lem388717 {A : Type'} (n : nat) (x : nat -> A) : (term2421 A x n) = (term1836 A n x).
Proof. exact (eq_refl (term2421 A x n)). Qed.
Lemma lem388718 {A : Type'} (n : nat) (x : nat -> A) : term1836 A n x.
Proof. exact (EQ_MP (@lem388717 A n x) (@lem388716 A x n)). Qed.
Lemma lem388719 {A : Type'} (n : nat) (x : nat -> A) (bad : type976 A) : term2422 A n x bad.
Proof. exact (@lem388718 A n x bad). Qed.
Lemma lem388720 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : (term2422 A n x bad) = (term1832 A bad n x).
Proof. exact (eq_refl (term2422 A n x bad)). Qed.
Lemma lem388721 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) : term1832 A bad n x.
Proof. exact (EQ_MP (@lem388720 A bad n x) (@lem388719 A n x bad)). Qed.
Lemma lem388722 {A : Type'} (bad : type976 A) (n : nat) (x : nat -> A) (lt2 : type1402 A) : term2423 A bad n x lt2.
Proof. exact (@lem388721 A bad n x lt2). Qed.
Lemma lem388723 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term2423 A bad n x lt2) = (term1824 A lt2 bad n x).
Proof. exact (eq_refl (term2423 A bad n x lt2)). Qed.
Lemma lem388724 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : term1824 A lt2 bad n x.
Proof. exact (EQ_MP (@lem388723 A lt2 bad n x) (@lem388722 A bad n x lt2)). Qed.
Lemma lem388726 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : term1824 A lt2 bad n x.
Proof. exact (@lem384586 A lt2 bad n x (@lem388724 A lt2 bad n x)). Qed.
Lemma lem388727 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) (h1 : term1825 A lt2 bad n x) : False.
Proof. exact (@lem388726 A lt2 bad n x (@lem384570 A lt2 bad n x h1)). Qed.
Lemma lem388728 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) (h1 : term1825 A lt2 bad n x) : (term1825 A lt2 bad n x) = False.
Proof. exact (prop_ext (fun h2 : term1825 A lt2 bad n x => @lem388727 A lt2 bad n x h1) (fun h2 : False => @lem384570 A lt2 bad n x h1)). Qed.
Lemma lem388729 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) (h1 : term1825 A lt2 bad n x) : False.
Proof. exact (EQ_MP (@lem388728 A lt2 bad n x h1) (@lem384570 A lt2 bad n x h1)). Qed.
Lemma lem388730 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : term1824 A lt2 bad n x.
Proof. exact (fun h0 : term1825 A lt2 bad n x => @lem388729 A lt2 bad n x h0). Qed.
Lemma lem388731 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : term1823 A lt2 bad n x.
Proof. exact (EQ_MP (@lem384569 A lt2 bad n x) (@lem388730 A lt2 bad n x)). Qed.
Lemma lem388732 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : term1716 A lt2 bad n x.
Proof. exact (EQ_MP (@lem384565 A lt2 bad n x) (@lem388731 A lt2 bad n x)). Qed.
Lemma lem388733 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : term1718 A lt2 bad n x.
Proof. exact (fun h0 : term1712 A lt2 bad n x => @lem388732 A lt2 bad n x). Qed.
Lemma lem388738 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) : term1722 A lt2 bad x.
Proof. exact (fun n : nat => @lem388733 A lt2 bad n x). Qed.
Lemma lem388739 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) : term1724 A lt2 bad x.
Proof. exact (conj (@lem380515 A lt2 bad x) (@lem388738 A lt2 bad x)). Qed.
Lemma lem388740 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) : term1729 A lt2 bad x.
Proof. exact (@lem379729 A lt2 bad x (@lem388739 A lt2 bad x)). Qed.
Lemma lem388741 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (x : nat -> A) (n : nat) : term1711 A lt2 bad x n.
Proof. exact (@lem388740 A lt2 bad x n). Qed.
Lemma lem388742 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : (term1711 A lt2 bad x n) = (term1712 A lt2 bad n x).
Proof. exact (eq_refl (term1711 A lt2 bad x n)). Qed.
Lemma lem388743 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (n : nat) (x : nat -> A) : term1712 A lt2 bad n x.
Proof. exact (EQ_MP (@lem388742 A lt2 bad n x) (@lem388741 A lt2 bad x n)). Qed.
Lemma lem388744 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term631 A n bad lt2 x) (h2 : term587 A lt2 bad) : term1689 A bad n x.
Proof. exact (@lem388743 A lt2 bad n x (@lem379706 A n x lt2 bad h1 h2)). Qed.
Lemma lem388745 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term1680 A lt2 n) (h2 : term631 A n bad lt2 x) (h3 : term587 A lt2 bad) : term1632 A lt2 bad n x.
Proof. exact (@lem379705 A bad x lt2 n h1 (@lem388744 A n x lt2 bad h2 h3)). Qed.
Lemma lem388746 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term631 A n bad lt2 x) (h2 : term587 A lt2 bad) : term1682 A lt2 bad n x.
Proof. exact (fun h0 : term1680 A lt2 n => @lem388745 A n x lt2 bad h0 h1 h2). Qed.
Lemma lem388747 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term631 A n bad lt2 x) (h2 : term587 A lt2 bad) : term1646 A lt2 bad n x.
Proof. exact (EQ_MP (@lem379647 A lt2 bad n x) (@lem388746 A n x lt2 bad h1 h2)). Qed.
Lemma lem388748 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term631 A n bad lt2 x) (h2 : term587 A lt2 bad) : term1645 A lt2 bad n x.
Proof. exact (EQ_MP (@lem379515 A n x lt2 bad h2) (@lem388747 A n x lt2 bad h1 h2)). Qed.
Lemma lem388749 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term631 A n bad lt2 x) (h2 : term587 A lt2 bad) : term1632 A lt2 bad n x.
Proof. exact (@lem388748 A n x lt2 bad h1 h2 (@lem369156 A lt2 n)). Qed.
Lemma lem388750 {A : Type'} (n : nat) (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term631 A n bad lt2 x) (h2 : term587 A lt2 bad) : term636 A bad x lt2 n.
Proof. exact (EQ_MP (@lem379412 A bad x lt2 n) (@lem388749 A n x lt2 bad h1 h2)). Qed.
Lemma lem388751 {A : Type'} (x : nat -> A) (n : nat) (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : term638 A bad x lt2 n.
Proof. exact (fun h0 : term631 A n bad lt2 x => @lem388750 A n x lt2 bad h0 h1). Qed.
Lemma lem388756 {A : Type'} (x : nat -> A) (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : term642 A bad x lt2.
Proof. exact (fun n : nat => @lem388751 A x n lt2 bad h1). Qed.
Lemma lem388761 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : term646 A bad lt2.
Proof. exact (fun x : nat -> A => @lem388756 A x lt2 bad h1). Qed.
Lemma lem388762 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : term648 A bad lt2.
Proof. exact (EQ_MP (@lem375598 A bad lt2) (@lem388761 A lt2 bad h1)). Qed.
Lemma lem388763 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : term588 A bad lt2.
Proof. exact (@lem372017 A bad lt2 (@lem388762 A lt2 bad h1)). Qed.
Lemma lem388764 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term588 A bad lt2) (h2 : term587 A lt2 bad) : term739 A bad lt2.
Proof. exact (@lem379273 A lt2 bad h2 (@lem371921 A bad lt2 h1)). Qed.
Lemma lem388765 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : (term588 A bad lt2) = (term739 A bad lt2).
Proof. exact (prop_ext (fun h2 : term588 A bad lt2 => @lem388764 A lt2 bad h2 h1) (fun h2 : term739 A bad lt2 => @lem388763 A lt2 bad h1)). Qed.
Lemma lem388766 {A : Type'} (lt2 : type1402 A) (bad : type976 A) (h1 : term587 A lt2 bad) : term739 A bad lt2.
Proof. exact (EQ_MP (@lem388765 A lt2 bad h1) (@lem388763 A lt2 bad h1)). Qed.
Lemma lem388767 {A : Type'} (bad : type976 A) (lt2 : type1402 A) : term2424 A bad lt2.
Proof. exact (fun h0 : term587 A lt2 bad => @lem388766 A lt2 bad h0). Qed.
Lemma lem388772 {A : Type'} (lt2 : type1402 A) : term2425 A lt2.
Proof. exact (fun bad : type976 A => @lem388767 A bad lt2). Qed.
Lemma lem388777 {A : Type'} : term2426 A.
Proof. exact (fun lt2 : type1402 A => @lem388772 A lt2). Qed.
