require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_terms;
symbol lem1031360 [A] (m : El A) (ly : El A) (rx : El A) (lx : El A) (ry : El A) (b : El A) (a : El A) (c : El A) (d : El A) (p : El num) (y : El A) (z : El A) (x : El A) (q : El num) (r0 : El A) (add : El (fun A (fun A A))) (r1 : El A) (mul : El (fun A (fun A A))) (pwr : El (fun A (fun num A))) (h1 : Prf (∧ (∀ (λ x' : El A, (∀ (λ y' : El A, (∀ (λ z' : El A, (= (add x' (add y' z')) (add (add x' y') z')))))))) (∧ (∀ (λ x' : El A, (∀ (λ y' : El A, (= (add x' y') (add y' x')))))) (∧ (∀ (λ x' : El A, (= (add r0 x') x'))) (∧ (∀ (λ x' : El A, (∀ (λ y' : El A, (∀ (λ z' : El A, (= (mul x' (mul y' z')) (mul (mul x' y') z')))))))) (∧ (∀ (λ x' : El A, (∀ (λ y' : El A, (= (mul x' y') (mul y' x')))))) (∧ (∀ (λ x' : El A, (= (mul r1 x') x'))) (∧ (∀ (λ x' : El A, (= (mul r0 x') r0))) (∧ (∀ (λ x' : El A, (∀ (λ y' : El A, (∀ (λ z' : El A, (= (mul x' (add y' z')) (add (mul x' y') (mul x' z'))))))))) (∧ (∀ (λ x' : El A, (= (pwr x' (NUMERAL _0)) r1))) (∀ (λ x' : El A, (∀ (λ n : El num, (= (pwr x' (SUC n)) (mul x' (pwr x' n))))))))))))))))) : Prf (∧ (= (mul r1 x) x) (∧ (= (add (mul a m) (mul b m)) (mul (add a b) m)) (∧ (= (add (mul a m) m) (mul (add a r1) m)) (∧ (= (add m (mul a m)) (mul (add a r1) m)) (∧ (= (add m m) (mul (add r1 r1) m)) (∧ (= (mul r0 m) r0) (∧ (= (add r0 a) a) (∧ (= (add a r0) a) (∧ (= (mul a b) (mul b a)) (∧ (= (mul (add a b) c) (add (mul a c) (mul b c))) (∧ (= (mul r0 a) r0) (∧ (= (mul a r0) r0) (∧ (= (mul r1 a) a) (∧ (= (mul a r1) a) (∧ (= (mul (mul lx ly) (mul rx ry)) (mul (mul lx rx) (mul ly ry))) (∧ (= (mul (mul lx ly) (mul rx ry)) (mul lx (mul ly (mul rx ry)))) (∧ (= (mul (mul lx ly) (mul rx ry)) (mul rx (mul (mul lx ly) ry))) (∧ (= (mul (mul lx ly) rx) (mul (mul lx rx) ly)) (∧ (= (mul (mul lx ly) rx) (mul lx (mul ly rx))) (∧ (= (mul lx rx) (mul rx lx)) (∧ (= (mul lx (mul rx ry)) (mul (mul lx rx) ry)) (∧ (= (mul lx (mul rx ry)) (mul rx (mul lx ry))) (∧ (= (add (add a b) (add c d)) (add (add a c) (add b d))) (∧ (= (add (add a b) c) (add a (add b c))) (∧ (= (add a (add c d)) (add c (add a d))) (∧ (= (add (add a b) c) (add (add a c) b)) (∧ (= (add a c) (add c a)) (∧ (= (add a (add c d)) (add (add a c) d)) (∧ (= (mul (pwr x p) (pwr x q)) (pwr x (+ p q))) (∧ (= (mul x (pwr x q)) (pwr x (SUC q))) (∧ (= (mul (pwr x q) x) (pwr x (SUC q))) (∧ (= (mul x x) (pwr x (NUMERAL (BIT0 (BIT1 _0))))) (∧ (= (pwr (mul x y) q) (mul (pwr x q) (pwr y q))) (∧ (= (pwr (pwr x p) q) (pwr x (* p q))) (∧ (= (pwr x (NUMERAL _0)) r1) (∧ (= (pwr x (NUMERAL (BIT1 _0))) x) (∧ (= (mul x (add y z)) (add (mul x y) (mul x z))) (= (pwr x (SUC q)) (mul x (pwr x q))))))))))))))))))))))))))))))))))))))));
