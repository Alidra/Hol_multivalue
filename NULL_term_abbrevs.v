Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_type_abbrevs.
Require Import hol_terms.
Definition term26 (a0 : Type') (x0 : a0) (x1 : list a0) := ((@NULL a0 (@nil a0)) = True) /\ ((@NULL a0 (@cons a0 x0 x1)) = False).
Definition term7 (a0 : Type') := @eq Prop (@ε ((prod nat (prod nat (prod nat nat))) -> (list a0) -> Prop) (fun y0 : type1290 a0 => forall y1 : type1673, ((y0 y1 (@nil a0)) = True) /\ (forall y2 : a0, forall y3 : list a0, (y0 y1 (@cons a0 y2 y3)) = False)) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0))))))))))) (@nil a0)).
Definition term5 (a0 : Type') := @ε ((prod nat (prod nat (prod nat nat))) -> (list a0) -> Prop) (fun y0 : type1290 a0 => forall y1 : type1673, ((y0 y1 (@nil a0)) = True) /\ (forall y2 : a0, forall y3 : list a0, (y0 y1 (@cons a0 y2 y3)) = False)) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0))))))))))).
Definition term4 (a0 : Type') := ((@ε ((prod nat (prod nat (prod nat nat))) -> (list a0) -> Prop) (fun y0 : type1290 a0 => forall y1 : type1673, ((y0 y1 (@nil a0)) = True) /\ (forall y2 : a0, forall y3 : list a0, (y0 y1 (@cons a0 y2 y3)) = False)) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0))))))))))) (@nil a0)) = True) /\ (forall y0 : a0, forall y1 : list a0, (@ε ((prod nat (prod nat (prod nat nat))) -> (list a0) -> Prop) (fun y2 : type1290 a0 => forall y3 : type1673, ((y2 y3 (@nil a0)) = True) /\ (forall y4 : a0, forall y5 : list a0, (y2 y3 (@cons a0 y4 y5)) = False)) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0))))))))))) (@cons a0 y0 y1)) = False).
Definition term0 (a0 : Type') := (fun y0 : type1290 a0 => forall y1 : type1673, ((y0 y1 (@nil a0)) = True) /\ (forall y2 : a0, forall y3 : list a0, (y0 y1 (@cons a0 y2 y3)) = False)) (@ε ((prod nat (prod nat (prod nat nat))) -> (list a0) -> Prop) (fun y0 : type1290 a0 => forall y1 : type1673, ((y0 y1 (@nil a0)) = True) /\ (forall y2 : a0, forall y3 : list a0, (y0 y1 (@cons a0 y2 y3)) = False))).
Definition term12 (a0 : Type') (x0 : a0) (x1 : list a0) := @NULL a0 (@cons a0 x0 x1).
Definition term17 (a0 : Type') (x0 : a0) := forall y0 : list a0, (@ε ((prod nat (prod nat (prod nat nat))) -> (list a0) -> Prop) (fun y1 : type1290 a0 => forall y2 : type1673, ((y1 y2 (@nil a0)) = True) /\ (forall y3 : a0, forall y4 : list a0, (y1 y2 (@cons a0 y3 y4)) = False)) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0))))))))))) (@cons a0 x0 y0)) = False.
Definition term25 (a0 : Type') (x0 : a0) (x1 : list a0) := (fun y0 : list a0 => (@NULL a0 (@cons a0 x0 y0)) = False) x1.
Definition term20 (a0 : Type') := fun y0 : a0 => forall y1 : list a0, (@NULL a0 (@cons a0 y0 y1)) = False.
Definition term19 (a0 : Type') := fun y0 : a0 => forall y1 : list a0, (@ε ((prod nat (prod nat (prod nat nat))) -> (list a0) -> Prop) (fun y2 : type1290 a0 => forall y3 : type1673, ((y2 y3 (@nil a0)) = True) /\ (forall y4 : a0, forall y5 : list a0, (y2 y3 (@cons a0 y4 y5)) = False)) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0))))))))))) (@cons a0 y0 y1)) = False.
Definition term1 (a0 : Type') := forall y0 : type1673, ((@ε ((prod nat (prod nat (prod nat nat))) -> (list a0) -> Prop) (fun y1 : type1290 a0 => forall y2 : type1673, ((y1 y2 (@nil a0)) = True) /\ (forall y3 : a0, forall y4 : list a0, (y1 y2 (@cons a0 y3 y4)) = False)) y0 (@nil a0)) = True) /\ (forall y1 : a0, forall y2 : list a0, (@ε ((prod nat (prod nat (prod nat nat))) -> (list a0) -> Prop) (fun y3 : type1290 a0 => forall y4 : type1673, ((y3 y4 (@nil a0)) = True) /\ (forall y5 : a0, forall y6 : list a0, (y3 y4 (@cons a0 y5 y6)) = False)) y0 (@cons a0 y1 y2)) = False).
Definition term3 := @pair nat (prod nat (prod nat nat)) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))))).
Definition term11 (a0 : Type') (x0 : a0) (x1 : list a0) := @ε ((prod nat (prod nat (prod nat nat))) -> (list a0) -> Prop) (fun y0 : type1290 a0 => forall y1 : type1673, ((y0 y1 (@nil a0)) = True) /\ (forall y2 : a0, forall y3 : list a0, (y0 y1 (@cons a0 y2 y3)) = False)) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0))))))))))) (@cons a0 x0 x1).
Definition term14 (a0 : Type') (x0 : a0) (x1 : list a0) := @eq Prop (@NULL a0 (@cons a0 x0 x1)).
Definition term8 (a0 : Type') := @eq Prop (@NULL a0 (@nil a0)).
Definition term10 (a0 : Type') := and ((@NULL a0 (@nil a0)) = True).
Definition term13 (a0 : Type') (x0 : a0) (x1 : list a0) := @eq Prop (@ε ((prod nat (prod nat (prod nat nat))) -> (list a0) -> Prop) (fun y0 : type1290 a0 => forall y1 : type1673, ((y0 y1 (@nil a0)) = True) /\ (forall y2 : a0, forall y3 : list a0, (y0 y1 (@cons a0 y2 y3)) = False)) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0))))))))))) (@cons a0 x0 x1)).
Definition term9 (a0 : Type') := and ((@ε ((prod nat (prod nat (prod nat nat))) -> (list a0) -> Prop) (fun y0 : type1290 a0 => forall y1 : type1673, ((y0 y1 (@nil a0)) = True) /\ (forall y2 : a0, forall y3 : list a0, (y0 y1 (@cons a0 y2 y3)) = False)) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0))))))))))) (@nil a0)) = True).
Definition term18 (a0 : Type') (x0 : a0) := forall y0 : list a0, (@NULL a0 (@cons a0 x0 y0)) = False.
Definition term16 (a0 : Type') (x0 : a0) := fun y0 : list a0 => (@NULL a0 (@cons a0 x0 y0)) = False.
Definition term24 (a0 : Type') (x0 : a0) := (fun y0 : a0 => forall y1 : list a0, (@NULL a0 (@cons a0 y0 y1)) = False) x0.
Definition term22 (a0 : Type') := forall y0 : a0, forall y1 : list a0, (@NULL a0 (@cons a0 y0 y1)) = False.
Definition term21 (a0 : Type') := forall y0 : a0, forall y1 : list a0, (@ε ((prod nat (prod nat (prod nat nat))) -> (list a0) -> Prop) (fun y2 : type1290 a0 => forall y3 : type1673, ((y2 y3 (@nil a0)) = True) /\ (forall y4 : a0, forall y5 : list a0, (y2 y3 (@cons a0 y4 y5)) = False)) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0))))))))))) (@cons a0 y0 y1)) = False.
Definition term15 (a0 : Type') (x0 : a0) := fun y0 : list a0 => (@ε ((prod nat (prod nat (prod nat nat))) -> (list a0) -> Prop) (fun y1 : type1290 a0 => forall y2 : type1673, ((y1 y2 (@nil a0)) = True) /\ (forall y3 : a0, forall y4 : list a0, (y1 y2 (@cons a0 y3 y4)) = False)) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0))))))))))) (@cons a0 x0 y0)) = False.
Definition term2 (a0 : Type') := (fun y0 : type1673 => ((@ε ((prod nat (prod nat (prod nat nat))) -> (list a0) -> Prop) (fun y1 : type1290 a0 => forall y2 : type1673, ((y1 y2 (@nil a0)) = True) /\ (forall y3 : a0, forall y4 : list a0, (y1 y2 (@cons a0 y3 y4)) = False)) y0 (@nil a0)) = True) /\ (forall y1 : a0, forall y2 : list a0, (@ε ((prod nat (prod nat (prod nat nat))) -> (list a0) -> Prop) (fun y3 : type1290 a0 => forall y4 : type1673, ((y3 y4 (@nil a0)) = True) /\ (forall y5 : a0, forall y6 : list a0, (y3 y4 (@cons a0 y5 y6)) = False)) y0 (@cons a0 y1 y2)) = False)) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0))))))))))).
Definition term6 (a0 : Type') := @ε ((prod nat (prod nat (prod nat nat))) -> (list a0) -> Prop) (fun y0 : type1290 a0 => forall y1 : type1673, ((y0 y1 (@nil a0)) = True) /\ (forall y2 : a0, forall y3 : list a0, (y0 y1 (@cons a0 y2 y3)) = False)) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 0))))))))))) (@nil a0).
Definition term23 (a0 : Type') := ((@NULL a0 (@nil a0)) = True) /\ (forall y0 : a0, forall y1 : list a0, (@NULL a0 (@cons a0 y0 y1)) = False).
