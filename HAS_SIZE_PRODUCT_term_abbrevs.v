Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_type_abbrevs.
Require Import hol_terms.
Definition term10 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) := @CARD (prod a0 a1) (@GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x1)) (@pair a0 a1 y1 y2))).
Definition term25 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) (x2 : nat) (x3 : nat) (x4 : Prop) (x5 : Prop) := (((@HAS_SIZE a0 x0 x2) /\ (@HAS_SIZE a1 x1 x3)) = x4) -> (x4 -> (@HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x1)) (@pair a0 a1 y1 y2))) (Nat.mul x2 x3)) = x5) -> (((@HAS_SIZE a0 x0 x2) /\ (@HAS_SIZE a1 x1 x3)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x1)) (@pair a0 a1 y1 y2))) (Nat.mul x2 x3)) = (x4 -> x5).
Definition term20 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : nat) (x2 : a1 -> Prop) (x3 : nat) := (@HAS_SIZE a0 x0 x1) /\ (@HAS_SIZE a1 x2 x3).
Definition term1 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) := forall y0 : a1 -> Prop, ((@FINITE a0 x0) /\ (@FINITE a1 y0)) -> @FINITE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y1 : prod a0 a1 => exists y2 : a0, exists y3 : a1, @SETSPEC (prod a0 a1) y1 ((@IN a0 y2 x0) /\ (@IN a1 y3 y0)) (@pair a0 a1 y2 y3))).
Definition term48 (a0 : Type') (x0 : Prop) := forall y0 : a0, x0.
Definition term38 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) := @eq nat (@CARD (prod a0 a1) (@GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x1)) (@pair a0 a1 y1 y2)))).
Definition term44 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) (x2 : nat) := fun y0 : nat => ((@HAS_SIZE a0 x0 x2) /\ (@HAS_SIZE a1 x1 y0)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y1 : prod a0 a1 => exists y2 : a0, exists y3 : a1, @SETSPEC (prod a0 a1) y1 ((@IN a0 y2 x0) /\ (@IN a1 y3 x1)) (@pair a0 a1 y2 y3))) (Nat.mul x2 y0).
Definition term58 (a0 : Type') (a1 : Type') := forall y0 : a0 -> Prop, forall y1 : nat, forall y2 : a1 -> Prop, forall y3 : nat, ((@HAS_SIZE a0 y0 y1) /\ (@HAS_SIZE a1 y2 y3)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y4 : prod a0 a1 => exists y5 : a0, exists y6 : a1, @SETSPEC (prod a0 a1) y4 ((@IN a0 y5 y0) /\ (@IN a1 y6 y2)) (@pair a0 a1 y5 y6))) (Nat.mul y1 y3).
Definition term9 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) := ((@FINITE a0 x0) /\ (@FINITE a1 x1)) -> (@CARD (prod a0 a1) (@GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x1)) (@pair a0 a1 y1 y2)))) = (Nat.mul (@CARD a0 x0) (@CARD a1 x1)).
Definition term54 (a0 : Type') (x0 : Prop) := forall y0 : a0 -> Prop, x0.
Definition term4 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) := (@FINITE a0 x0) /\ (@FINITE a1 x1).
Definition term34 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) := ((@FINITE a0 x0) /\ (@FINITE a1 x1)) -> (@FINITE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x1)) (@pair a0 a1 y1 y2)))) = True.
Definition term57 (a0 : Type') (a1 : Type') := fun y0 : a0 -> Prop => forall y1 : nat, forall y2 : a1 -> Prop, forall y3 : nat, ((@HAS_SIZE a0 y0 y1) /\ (@HAS_SIZE a1 y2 y3)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y4 : prod a0 a1 => exists y5 : a0, exists y6 : a1, @SETSPEC (prod a0 a1) y4 ((@IN a0 y5 y0) /\ (@IN a1 y6 y2)) (@pair a0 a1 y5 y6))) (Nat.mul y1 y3).
Definition term27 (a0 : Type') (x0 : a0 -> Prop) (x1 : nat) := and ((@FINITE a0 x0) /\ ((@CARD a0 x0) = x1)).
Definition term28 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : nat) (x2 : a1 -> Prop) (x3 : nat) := ((@FINITE a0 x0) /\ ((@CARD a0 x0) = x1)) /\ ((@FINITE a1 x2) /\ ((@CARD a1 x2) = x3)).
Definition term26 (a0 : Type') (x0 : a0 -> Prop) (x1 : nat) := and (@HAS_SIZE a0 x0 x1).
Definition term37 (a0 : Type') (x0 : a0 -> Prop) := Nat.mul (@CARD a0 x0).
Definition term32 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) (x2 : nat) (x3 : nat) := (@FINITE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x1)) (@pair a0 a1 y1 y2)))) /\ ((@CARD (prod a0 a1) (@GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x1)) (@pair a0 a1 y1 y2)))) = (Nat.mul x2 x3)).
Definition term55 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) := fun y0 : nat => forall y1 : a1 -> Prop, forall y2 : nat, ((@HAS_SIZE a0 x0 y0) /\ (@HAS_SIZE a1 y1 y2)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y3 : prod a0 a1 => exists y4 : a0, exists y5 : a1, @SETSPEC (prod a0 a1) y3 ((@IN a0 y4 x0) /\ (@IN a1 y5 y1)) (@pair a0 a1 y4 y5))) (Nat.mul y0 y2).
Definition term35 (a0 : Type') (x0 : a0 -> Prop) := and (@FINITE a0 x0).
Definition term16 (x0 : Prop) (x1 : Prop) (x2 : Prop) (x3 : Prop) := (x0 = x2) -> (x2 -> x1 = x3) -> (x0 -> x1) = (x2 -> x3).
Definition term42 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) (x2 : nat) (x3 : nat) := ((@HAS_SIZE a0 x0 x2) /\ (@HAS_SIZE a1 x1 x3)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x1)) (@pair a0 a1 y1 y2))) (Nat.mul x2 x3).
Definition term14 (a0 : Type') (x0 : a0 -> Prop) (x1 : nat) := (fun y0 : nat => (@HAS_SIZE a0 x0 y0) = ((@FINITE a0 x0) /\ ((@CARD a0 x0) = y0))) x1.
Definition term11 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) := Nat.mul (@CARD a0 x0) (@CARD a1 x1).
Definition term41 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : nat) (x2 : a1 -> Prop) (x3 : nat) := ((((@FINITE a0 x0) /\ ((@CARD a0 x0) = x1)) /\ ((@FINITE a1 x2) /\ ((@CARD a1 x2) = x3))) -> (@HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x2)) (@pair a0 a1 y1 y2))) (Nat.mul x1 x3)) = True) -> (((@HAS_SIZE a0 x0 x1) /\ (@HAS_SIZE a1 x2 x3)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x2)) (@pair a0 a1 y1 y2))) (Nat.mul x1 x3)) = ((((@FINITE a0 x0) /\ ((@CARD a0 x0) = x1)) /\ ((@FINITE a1 x2) /\ ((@CARD a1 x2) = x3))) -> True).
Definition term56 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) := forall y0 : nat, forall y1 : a1 -> Prop, forall y2 : nat, ((@HAS_SIZE a0 x0 y0) /\ (@HAS_SIZE a1 y1 y2)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y3 : prod a0 a1 => exists y4 : a0, exists y5 : a1, @SETSPEC (prod a0 a1) y3 ((@IN a0 y4 x0) /\ (@IN a1 y5 y1)) (@pair a0 a1 y4 y5))) (Nat.mul y0 y2).
Definition term47 := forall y0 : nat, True.
Definition term12 (a0 : Type') (x0 : a0 -> Prop) := (fun y0 : a0 -> Prop => forall y1 : nat, (@HAS_SIZE a0 y0 y1) = ((@FINITE a0 y0) /\ ((@CARD a0 y0) = y1))) x0.
Definition term6 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) := (fun y0 : a0 -> Prop => forall y1 : a1 -> Prop, ((@FINITE a0 y0) /\ (@FINITE a1 y1)) -> (@CARD (prod a0 a1) (@GSPEC (prod a0 a1) (fun y2 : prod a0 a1 => exists y3 : a0, exists y4 : a1, @SETSPEC (prod a0 a1) y2 ((@IN a0 y3 y0) /\ (@IN a1 y4 y1)) (@pair a0 a1 y3 y4)))) = (Nat.mul (@CARD a0 y0) (@CARD a1 y1))) x0.
Definition term0 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) := (fun y0 : a0 -> Prop => forall y1 : a1 -> Prop, ((@FINITE a0 y0) /\ (@FINITE a1 y1)) -> @FINITE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y2 : prod a0 a1 => exists y3 : a0, exists y4 : a1, @SETSPEC (prod a0 a1) y2 ((@IN a0 y3 y0) /\ (@IN a1 y4 y1)) (@pair a0 a1 y3 y4)))) x0.
Definition term45 := fun y0 : nat => True.
Definition term50 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : nat) := fun y0 : a1 -> Prop => forall y1 : nat, ((@HAS_SIZE a0 x0 x1) /\ (@HAS_SIZE a1 y0 y1)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y2 : prod a0 a1 => exists y3 : a0, exists y4 : a1, @SETSPEC (prod a0 a1) y2 ((@IN a0 y3 x0) /\ (@IN a1 y4 y0)) (@pair a0 a1 y3 y4))) (Nat.mul x1 y1).
Definition term30 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : nat) (x2 : a1 -> Prop) (x3 : nat) (x4 : Prop) := ((((@FINITE a0 x0) /\ ((@CARD a0 x0) = x1)) /\ ((@FINITE a1 x2) /\ ((@CARD a1 x2) = x3))) -> (@HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x2)) (@pair a0 a1 y1 y2))) (Nat.mul x1 x3)) = x4) -> (((@HAS_SIZE a0 x0 x1) /\ (@HAS_SIZE a1 x2 x3)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x2)) (@pair a0 a1 y1 y2))) (Nat.mul x1 x3)) = ((((@FINITE a0 x0) /\ ((@CARD a0 x0) = x1)) /\ ((@FINITE a1 x2) /\ ((@CARD a1 x2) = x3))) -> x4).
Definition term23 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) (x2 : nat) (x3 : nat) (x4 : Prop) := forall y0 : Prop, (((@HAS_SIZE a0 x0 x2) /\ (@HAS_SIZE a1 x1 x3)) = x4) -> (x4 -> (@HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y1 : prod a0 a1 => exists y2 : a0, exists y3 : a1, @SETSPEC (prod a0 a1) y1 ((@IN a0 y2 x0) /\ (@IN a1 y3 x1)) (@pair a0 a1 y2 y3))) (Nat.mul x2 x3)) = y0) -> (((@HAS_SIZE a0 x0 x2) /\ (@HAS_SIZE a1 x1 x3)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y1 : prod a0 a1 => exists y2 : a0, exists y3 : a1, @SETSPEC (prod a0 a1) y1 ((@IN a0 y2 x0) /\ (@IN a1 y3 x1)) (@pair a0 a1 y2 y3))) (Nat.mul x2 x3)) = (x4 -> y0).
Definition term17 (x0 : Prop) (x1 : Prop) (x2 : Prop) := forall y0 : Prop, (x0 = x2) -> (x2 -> x1 = y0) -> (x0 -> x1) = (x2 -> y0).
Definition term51 (a0 : Type') := fun y0 : a0 -> Prop => True.
Definition term21 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) (x2 : nat) (x3 : nat) := @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x1)) (@pair a0 a1 y1 y2))) (Nat.mul x2 x3).
Definition term31 (a0 : Type') (a1 : Type') (x0 : type1210 a0 a1) (x1 : nat) := (@FINITE (prod a0 a1) x0) /\ ((@CARD (prod a0 a1) x0) = x1).
Definition term15 (a0 : Type') (x0 : a0 -> Prop) (x1 : nat) := (@FINITE a0 x0) /\ ((@CARD a0 x0) = x1).
Definition term19 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) (x2 : nat) (x3 : nat) := forall y0 : Prop, forall y1 : Prop, (((@HAS_SIZE a0 x0 x2) /\ (@HAS_SIZE a1 x1 x3)) = y0) -> (y0 -> (@HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y2 : prod a0 a1 => exists y3 : a0, exists y4 : a1, @SETSPEC (prod a0 a1) y2 ((@IN a0 y3 x0) /\ (@IN a1 y4 x1)) (@pair a0 a1 y3 y4))) (Nat.mul x2 x3)) = y1) -> (((@HAS_SIZE a0 x0 x2) /\ (@HAS_SIZE a1 x1 x3)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y2 : prod a0 a1 => exists y3 : a0, exists y4 : a1, @SETSPEC (prod a0 a1) y2 ((@IN a0 y3 x0) /\ (@IN a1 y4 x1)) (@pair a0 a1 y3 y4))) (Nat.mul x2 x3)) = (y0 -> y1).
Definition term18 (x0 : Prop) (x1 : Prop) := forall y0 : Prop, forall y1 : Prop, (x0 = y0) -> (y0 -> x1 = y1) -> (x0 -> x1) = (y0 -> y1).
Definition term52 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : nat) := forall y0 : a1 -> Prop, forall y1 : nat, ((@HAS_SIZE a0 x0 x1) /\ (@HAS_SIZE a1 y0 y1)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y2 : prod a0 a1 => exists y3 : a0, exists y4 : a1, @SETSPEC (prod a0 a1) y2 ((@IN a0 y3 x0) /\ (@IN a1 y4 y0)) (@pair a0 a1 y3 y4))) (Nat.mul x1 y1).
Definition term24 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) (x2 : nat) (x3 : nat) (x4 : Prop) (x5 : Prop) := (fun y0 : Prop => (((@HAS_SIZE a0 x0 x2) /\ (@HAS_SIZE a1 x1 x3)) = x4) -> (x4 -> (@HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y1 : prod a0 a1 => exists y2 : a0, exists y3 : a1, @SETSPEC (prod a0 a1) y1 ((@IN a0 y2 x0) /\ (@IN a1 y3 x1)) (@pair a0 a1 y2 y3))) (Nat.mul x2 x3)) = y0) -> (((@HAS_SIZE a0 x0 x2) /\ (@HAS_SIZE a1 x1 x3)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y1 : prod a0 a1 => exists y2 : a0, exists y3 : a1, @SETSPEC (prod a0 a1) y1 ((@IN a0 y2 x0) /\ (@IN a1 y3 x1)) (@pair a0 a1 y2 y3))) (Nat.mul x2 x3)) = (x4 -> y0)) x5.
Definition term2 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) := (fun y0 : a1 -> Prop => ((@FINITE a0 x0) /\ (@FINITE a1 y0)) -> @FINITE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y1 : prod a0 a1 => exists y2 : a0, exists y3 : a1, @SETSPEC (prod a0 a1) y1 ((@IN a0 y2 x0) /\ (@IN a1 y3 y0)) (@pair a0 a1 y2 y3)))) x1.
Definition term8 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) := (fun y0 : a1 -> Prop => ((@FINITE a0 x0) /\ (@FINITE a1 y0)) -> (@CARD (prod a0 a1) (@GSPEC (prod a0 a1) (fun y1 : prod a0 a1 => exists y2 : a0, exists y3 : a1, @SETSPEC (prod a0 a1) y1 ((@IN a0 y2 x0) /\ (@IN a1 y3 y0)) (@pair a0 a1 y2 y3)))) = (Nat.mul (@CARD a0 x0) (@CARD a1 y0))) x1.
Definition term46 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) (x2 : nat) := forall y0 : nat, ((@HAS_SIZE a0 x0 x2) /\ (@HAS_SIZE a1 x1 y0)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y1 : prod a0 a1 => exists y2 : a0, exists y3 : a1, @SETSPEC (prod a0 a1) y1 ((@IN a0 y2 x0) /\ (@IN a1 y3 x1)) (@pair a0 a1 y2 y3))) (Nat.mul x2 y0).
Definition term33 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) := @GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x1)) (@pair a0 a1 y1 y2)).
Definition term29 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : nat) (x2 : a1 -> Prop) (x3 : nat) (x4 : Prop) := (((@HAS_SIZE a0 x0 x1) /\ (@HAS_SIZE a1 x2 x3)) = (((@FINITE a0 x0) /\ ((@CARD a0 x0) = x1)) /\ ((@FINITE a1 x2) /\ ((@CARD a1 x2) = x3)))) -> ((((@FINITE a0 x0) /\ ((@CARD a0 x0) = x1)) /\ ((@FINITE a1 x2) /\ ((@CARD a1 x2) = x3))) -> (@HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x2)) (@pair a0 a1 y1 y2))) (Nat.mul x1 x3)) = x4) -> (((@HAS_SIZE a0 x0 x1) /\ (@HAS_SIZE a1 x2 x3)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x2)) (@pair a0 a1 y1 y2))) (Nat.mul x1 x3)) = ((((@FINITE a0 x0) /\ ((@CARD a0 x0) = x1)) /\ ((@FINITE a1 x2) /\ ((@CARD a1 x2) = x3))) -> x4).
Definition term13 (a0 : Type') (x0 : a0 -> Prop) := forall y0 : nat, (@HAS_SIZE a0 x0 y0) = ((@FINITE a0 x0) /\ ((@CARD a0 x0) = y0)).
Definition term7 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) := forall y0 : a1 -> Prop, ((@FINITE a0 x0) /\ (@FINITE a1 y0)) -> (@CARD (prod a0 a1) (@GSPEC (prod a0 a1) (fun y1 : prod a0 a1 => exists y2 : a0, exists y3 : a1, @SETSPEC (prod a0 a1) y1 ((@IN a0 y2 x0) /\ (@IN a1 y3 y0)) (@pair a0 a1 y2 y3)))) = (Nat.mul (@CARD a0 x0) (@CARD a1 y0)).
Definition term39 (x0 : nat) (x1 : nat) := @eq nat (Nat.mul x0 x1).
Definition term49 (x0 : Prop) := forall y0 : nat, x0.
Definition term40 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) (x2 : nat) (x3 : nat) := (((@FINITE a0 x0) /\ ((@CARD a0 x0) = x2)) /\ ((@FINITE a1 x1) /\ ((@CARD a1 x1) = x3))) -> (@HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x1)) (@pair a0 a1 y1 y2))) (Nat.mul x2 x3)) = True.
Definition term3 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) := ((@FINITE a0 x0) /\ (@FINITE a1 x1)) -> @FINITE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x1)) (@pair a0 a1 y1 y2))).
Definition term22 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) (x2 : nat) (x3 : nat) (x4 : Prop) := (fun y0 : Prop => forall y1 : Prop, (((@HAS_SIZE a0 x0 x2) /\ (@HAS_SIZE a1 x1 x3)) = y0) -> (y0 -> (@HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y2 : prod a0 a1 => exists y3 : a0, exists y4 : a1, @SETSPEC (prod a0 a1) y2 ((@IN a0 y3 x0) /\ (@IN a1 y4 x1)) (@pair a0 a1 y3 y4))) (Nat.mul x2 x3)) = y1) -> (((@HAS_SIZE a0 x0 x2) /\ (@HAS_SIZE a1 x1 x3)) -> @HAS_SIZE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y2 : prod a0 a1 => exists y3 : a0, exists y4 : a1, @SETSPEC (prod a0 a1) y2 ((@IN a0 y3 x0) /\ (@IN a1 y4 x1)) (@pair a0 a1 y3 y4))) (Nat.mul x2 x3)) = (y0 -> y1)) x4.
Definition term36 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) := and (@FINITE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x1)) (@pair a0 a1 y1 y2)))).
Definition term5 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a1 -> Prop) := @FINITE (prod a0 a1) (@GSPEC (prod a0 a1) (fun y0 : prod a0 a1 => exists y1 : a0, exists y2 : a1, @SETSPEC (prod a0 a1) y0 ((@IN a0 y1 x0) /\ (@IN a1 y2 x1)) (@pair a0 a1 y1 y2))).
Definition term43 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : nat) (x2 : a1 -> Prop) (x3 : nat) := (((@FINITE a0 x0) /\ ((@CARD a0 x0) = x1)) /\ ((@FINITE a1 x2) /\ ((@CARD a1 x2) = x3))) -> True.
Definition term53 (a0 : Type') := forall y0 : a0 -> Prop, True.
