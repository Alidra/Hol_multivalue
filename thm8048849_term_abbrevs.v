Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_type_abbrevs.
Require Import hol_terms.
Definition term16 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type56 a0 a1) (x1 : type56 a0 a2) := (x0 = (@EMPTY ((cart a0 a1) -> Prop))) -> (fun y0 : type16 a0 a1 a2 => (@PCROSS a0 a1 a2 (@INTERS (cart a0 a1) x0) (@INTERS (cart a0 a2) x1)) = y0) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a2, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 (@IN ((cart a0 a2) -> Prop) y1 x1) (@PCROSS a0 a1 a2 (@UNIV (cart a0 a1)) y1)))).
Definition term23 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type56 a0 a1) (x1 : type56 a0 a2) := @eq Prop ((@PCROSS a0 a1 a2 (@INTERS (cart a0 a1) x0) (@INTERS (cart a0 a2) x1)) = (@COND ((cart a0 (finite_sum a1 a2)) -> Prop) (x0 = (@EMPTY ((cart a0 a1) -> Prop))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a2, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 (@IN ((cart a0 a2) -> Prop) y1 x1) (@PCROSS a0 a1 a2 (@UNIV (cart a0 a1)) y1)))) (@COND ((cart a0 (finite_sum a1 a2)) -> Prop) (x1 = (@EMPTY ((cart a0 a2) -> Prop))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a1, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 (@IN ((cart a0 a1) -> Prop) y1 x0) (@PCROSS a0 a1 a2 y1 (@UNIV (cart a0 a2)))))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a1, exists y2 : type24 a0 a2, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 ((@IN ((cart a0 a1) -> Prop) y1 x0) /\ (@IN ((cart a0 a2) -> Prop) y2 x1)) (@PCROSS a0 a1 a2 y1 y2))))))).
Definition term13 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type56 a0 a1) (x1 : type56 a0 a2) := (~ (x0 = (@EMPTY ((cart a0 a1) -> Prop)))) -> (@PCROSS a0 a1 a2 (@INTERS (cart a0 a1) x0) (@INTERS (cart a0 a2) x1)) = (@COND ((cart a0 (finite_sum a1 a2)) -> Prop) (x1 = (@EMPTY ((cart a0 a2) -> Prop))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a1, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 (@IN ((cart a0 a1) -> Prop) y1 x0) (@PCROSS a0 a1 a2 y1 (@UNIV (cart a0 a2)))))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a1, exists y2 : type24 a0 a2, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 ((@IN ((cart a0 a1) -> Prop) y1 x0) /\ (@IN ((cart a0 a2) -> Prop) y2 x1)) (@PCROSS a0 a1 a2 y1 y2))))).
Definition term4 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type56 a0 a1) (x1 : type56 a0 a2) := fun y0 : type16 a0 a1 a2 => (@PCROSS a0 a1 a2 (@INTERS (cart a0 a1) x0) (@INTERS (cart a0 a2) x1)) = y0.
Definition term10 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type56 a0 a1) (x1 : type56 a0 a2) := @PCROSS a0 a1 a2 (@INTERS (cart a0 a1) x0) (@INTERS (cart a0 a2) x1).
Definition term12 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type56 a0 a1) (x1 : type56 a0 a2) := (~ (x0 = (@EMPTY ((cart a0 a1) -> Prop)))) -> (fun y0 : type16 a0 a1 a2 => (@PCROSS a0 a1 a2 (@INTERS (cart a0 a1) x0) (@INTERS (cart a0 a2) x1)) = y0) (@COND ((cart a0 (finite_sum a1 a2)) -> Prop) (x1 = (@EMPTY ((cart a0 a2) -> Prop))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a1, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 (@IN ((cart a0 a1) -> Prop) y1 x0) (@PCROSS a0 a1 a2 y1 (@UNIV (cart a0 a2)))))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a1, exists y2 : type24 a0 a2, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 ((@IN ((cart a0 a1) -> Prop) y1 x0) /\ (@IN ((cart a0 a2) -> Prop) y2 x1)) (@PCROSS a0 a1 a2 y1 y2))))).
Definition term11 (a0 : Type') (a1 : Type') (x0 : type56 a0 a1) := imp (~ (x0 = (@EMPTY ((cart a0 a1) -> Prop)))).
Definition term6 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type56 a0 a1) (x1 : type56 a0 a2) := ((x0 = (@EMPTY ((cart a0 a1) -> Prop))) -> (fun y0 : type16 a0 a1 a2 => (@PCROSS a0 a1 a2 (@INTERS (cart a0 a1) x0) (@INTERS (cart a0 a2) x1)) = y0) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a2, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 (@IN ((cart a0 a2) -> Prop) y1 x1) (@PCROSS a0 a1 a2 (@UNIV (cart a0 a1)) y1))))) /\ ((~ (x0 = (@EMPTY ((cart a0 a1) -> Prop)))) -> (fun y0 : type16 a0 a1 a2 => (@PCROSS a0 a1 a2 (@INTERS (cart a0 a1) x0) (@INTERS (cart a0 a2) x1)) = y0) (@COND ((cart a0 (finite_sum a1 a2)) -> Prop) (x1 = (@EMPTY ((cart a0 a2) -> Prop))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a1, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 (@IN ((cart a0 a1) -> Prop) y1 x0) (@PCROSS a0 a1 a2 y1 (@UNIV (cart a0 a2)))))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a1, exists y2 : type24 a0 a2, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 ((@IN ((cart a0 a1) -> Prop) y1 x0) /\ (@IN ((cart a0 a2) -> Prop) y2 x1)) (@PCROSS a0 a1 a2 y1 y2)))))).
Definition term1 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type16 a0 a1 a2) (x1 : Prop) (x2 : type51 a0 a1 a2) (x3 : type16 a0 a1 a2) := (x1 -> x2 x0) /\ ((~ x1) -> x2 x3).
Definition term7 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type56 a0 a2) := @INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a2, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 (@IN ((cart a0 a2) -> Prop) y1 x0) (@PCROSS a0 a1 a2 (@UNIV (cart a0 a1)) y1))).
Definition term17 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type56 a0 a1) (x1 : type56 a0 a2) := (x0 = (@EMPTY ((cart a0 a1) -> Prop))) -> (@PCROSS a0 a1 a2 (@INTERS (cart a0 a1) x0) (@INTERS (cart a0 a2) x1)) = (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a2, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 (@IN ((cart a0 a2) -> Prop) y1 x1) (@PCROSS a0 a1 a2 (@UNIV (cart a0 a1)) y1)))).
Definition term22 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type56 a0 a1) (x1 : type56 a0 a2) := @eq Prop ((fun y0 : type16 a0 a1 a2 => (@PCROSS a0 a1 a2 (@INTERS (cart a0 a1) x0) (@INTERS (cart a0 a2) x1)) = y0) (@COND ((cart a0 (finite_sum a1 a2)) -> Prop) (x0 = (@EMPTY ((cart a0 a1) -> Prop))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a2, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 (@IN ((cart a0 a2) -> Prop) y1 x1) (@PCROSS a0 a1 a2 (@UNIV (cart a0 a1)) y1)))) (@COND ((cart a0 (finite_sum a1 a2)) -> Prop) (x1 = (@EMPTY ((cart a0 a2) -> Prop))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a1, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 (@IN ((cart a0 a1) -> Prop) y1 x0) (@PCROSS a0 a1 a2 y1 (@UNIV (cart a0 a2)))))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a1, exists y2 : type24 a0 a2, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 ((@IN ((cart a0 a1) -> Prop) y1 x0) /\ (@IN ((cart a0 a2) -> Prop) y2 x1)) (@PCROSS a0 a1 a2 y1 y2))))))).
Definition term18 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type56 a0 a1) (x1 : type56 a0 a2) := and ((x0 = (@EMPTY ((cart a0 a1) -> Prop))) -> (fun y0 : type16 a0 a1 a2 => (@PCROSS a0 a1 a2 (@INTERS (cart a0 a1) x0) (@INTERS (cart a0 a2) x1)) = y0) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a2, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 (@IN ((cart a0 a2) -> Prop) y1 x1) (@PCROSS a0 a1 a2 (@UNIV (cart a0 a1)) y1))))).
Definition term2 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type56 a0 a1) (x1 : type56 a0 a2) (x2 : Prop) (x3 : type16 a0 a1 a2) (x4 : type16 a0 a1 a2) := (fun y0 : type16 a0 a1 a2 => (@PCROSS a0 a1 a2 (@INTERS (cart a0 a1) x0) (@INTERS (cart a0 a2) x1)) = y0) (@COND ((cart a0 (finite_sum a1 a2)) -> Prop) x2 x3 x4).
Definition term5 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type56 a0 a1) (x1 : type56 a0 a2) := (fun y0 : type16 a0 a1 a2 => (@PCROSS a0 a1 a2 (@INTERS (cart a0 a1) x0) (@INTERS (cart a0 a2) x1)) = y0) (@COND ((cart a0 (finite_sum a1 a2)) -> Prop) (x0 = (@EMPTY ((cart a0 a1) -> Prop))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a2, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 (@IN ((cart a0 a2) -> Prop) y1 x1) (@PCROSS a0 a1 a2 (@UNIV (cart a0 a1)) y1)))) (@COND ((cart a0 (finite_sum a1 a2)) -> Prop) (x1 = (@EMPTY ((cart a0 a2) -> Prop))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a1, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 (@IN ((cart a0 a1) -> Prop) y1 x0) (@PCROSS a0 a1 a2 y1 (@UNIV (cart a0 a2)))))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a1, exists y2 : type24 a0 a2, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 ((@IN ((cart a0 a1) -> Prop) y1 x0) /\ (@IN ((cart a0 a2) -> Prop) y2 x1)) (@PCROSS a0 a1 a2 y1 y2)))))).
Definition term3 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type16 a0 a1 a2) (x1 : Prop) (x2 : type56 a0 a1) (x3 : type56 a0 a2) (x4 : type16 a0 a1 a2) := (x1 -> (fun y0 : type16 a0 a1 a2 => (@PCROSS a0 a1 a2 (@INTERS (cart a0 a1) x2) (@INTERS (cart a0 a2) x3)) = y0) x0) /\ ((~ x1) -> (fun y0 : type16 a0 a1 a2 => (@PCROSS a0 a1 a2 (@INTERS (cart a0 a1) x2) (@INTERS (cart a0 a2) x3)) = y0) x4).
Definition term9 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type56 a0 a1) (x1 : type56 a0 a2) := (fun y0 : type16 a0 a1 a2 => (@PCROSS a0 a1 a2 (@INTERS (cart a0 a1) x0) (@INTERS (cart a0 a2) x1)) = y0) (@COND ((cart a0 (finite_sum a1 a2)) -> Prop) (x1 = (@EMPTY ((cart a0 a2) -> Prop))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a1, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 (@IN ((cart a0 a1) -> Prop) y1 x0) (@PCROSS a0 a1 a2 y1 (@UNIV (cart a0 a2)))))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a1, exists y2 : type24 a0 a2, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 ((@IN ((cart a0 a1) -> Prop) y1 x0) /\ (@IN ((cart a0 a2) -> Prop) y2 x1)) (@PCROSS a0 a1 a2 y1 y2))))).
Definition term0 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type51 a0 a1 a2) (x1 : Prop) (x2 : type16 a0 a1 a2) (x3 : type16 a0 a1 a2) := x0 (@COND ((cart a0 (finite_sum a1 a2)) -> Prop) x1 x2 x3).
Definition term14 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type56 a0 a1) (x1 : type56 a0 a2) := (fun y0 : type16 a0 a1 a2 => (@PCROSS a0 a1 a2 (@INTERS (cart a0 a1) x0) (@INTERS (cart a0 a2) x1)) = y0) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a2, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 (@IN ((cart a0 a2) -> Prop) y1 x1) (@PCROSS a0 a1 a2 (@UNIV (cart a0 a1)) y1)))).
Definition term21 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type56 a0 a1) (x1 : type56 a0 a2) := @COND ((cart a0 (finite_sum a1 a2)) -> Prop) (x0 = (@EMPTY ((cart a0 a1) -> Prop))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a2, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 (@IN ((cart a0 a2) -> Prop) y1 x1) (@PCROSS a0 a1 a2 (@UNIV (cart a0 a1)) y1)))) (@COND ((cart a0 (finite_sum a1 a2)) -> Prop) (x1 = (@EMPTY ((cart a0 a2) -> Prop))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a1, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 (@IN ((cart a0 a1) -> Prop) y1 x0) (@PCROSS a0 a1 a2 y1 (@UNIV (cart a0 a2)))))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a1, exists y2 : type24 a0 a2, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 ((@IN ((cart a0 a1) -> Prop) y1 x0) /\ (@IN ((cart a0 a2) -> Prop) y2 x1)) (@PCROSS a0 a1 a2 y1 y2))))).
Definition term8 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type56 a0 a1) (x1 : type56 a0 a2) := @COND ((cart a0 (finite_sum a1 a2)) -> Prop) (x1 = (@EMPTY ((cart a0 a2) -> Prop))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a1, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 (@IN ((cart a0 a1) -> Prop) y1 x0) (@PCROSS a0 a1 a2 y1 (@UNIV (cart a0 a2)))))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a1, exists y2 : type24 a0 a2, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 ((@IN ((cart a0 a1) -> Prop) y1 x0) /\ (@IN ((cart a0 a2) -> Prop) y2 x1)) (@PCROSS a0 a1 a2 y1 y2)))).
Definition term20 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type56 a0 a1) (x1 : type56 a0 a2) := ((x0 = (@EMPTY ((cart a0 a1) -> Prop))) -> (@PCROSS a0 a1 a2 (@INTERS (cart a0 a1) x0) (@INTERS (cart a0 a2) x1)) = (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a2, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 (@IN ((cart a0 a2) -> Prop) y1 x1) (@PCROSS a0 a1 a2 (@UNIV (cart a0 a1)) y1))))) /\ ((~ (x0 = (@EMPTY ((cart a0 a1) -> Prop)))) -> (@PCROSS a0 a1 a2 (@INTERS (cart a0 a1) x0) (@INTERS (cart a0 a2) x1)) = (@COND ((cart a0 (finite_sum a1 a2)) -> Prop) (x1 = (@EMPTY ((cart a0 a2) -> Prop))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a1, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 (@IN ((cart a0 a1) -> Prop) y1 x0) (@PCROSS a0 a1 a2 y1 (@UNIV (cart a0 a2)))))) (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a1, exists y2 : type24 a0 a2, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 ((@IN ((cart a0 a1) -> Prop) y1 x0) /\ (@IN ((cart a0 a2) -> Prop) y2 x1)) (@PCROSS a0 a1 a2 y1 y2)))))).
Definition term15 (a0 : Type') (a1 : Type') (x0 : type56 a0 a1) := imp (x0 = (@EMPTY ((cart a0 a1) -> Prop))).
Definition term19 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type56 a0 a1) (x1 : type56 a0 a2) := and ((x0 = (@EMPTY ((cart a0 a1) -> Prop))) -> (@PCROSS a0 a1 a2 (@INTERS (cart a0 a1) x0) (@INTERS (cart a0 a2) x1)) = (@INTERS (cart a0 (finite_sum a1 a2)) (@GSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) (fun y0 : type16 a0 a1 a2 => exists y1 : type24 a0 a2, @SETSPEC ((cart a0 (finite_sum a1 a2)) -> Prop) y0 (@IN ((cart a0 a2) -> Prop) y1 x1) (@PCROSS a0 a1 a2 (@UNIV (cart a0 a1)) y1))))).
