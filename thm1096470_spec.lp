require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_terms;
symbol lem1096470 [A] : Prf (= (@REVERSE A) ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (list A) (list A)))) (λ REVERSE' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (list A) (list A))), (∀ (λ _17939 : El (prod num (prod num (prod num (prod num (prod num (prod num num)))))), (∧ (= (REVERSE' _17939 (@NIL A)) (@NIL A)) (∀ (λ l : El (list A), (∀ (λ x : El A, (= (REVERSE' _17939 ((@CONS A) x l)) ((@APPEND A) (REVERSE' _17939 l) ((@CONS A) x (@NIL A)))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0))))))))))))))));
