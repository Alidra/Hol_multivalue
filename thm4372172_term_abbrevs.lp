require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_type_abbrevs;
require open hol-light.hol_terms;
symbol term5 a0 a1 (x0: El (type686 a0)) (x1: El (type686 a1)) ≔ ((λ y0 : El (type1210 a0 a1), (= ((@CROSS a1 a0) ((@INTERS a0) x0) ((@INTERS a1) x1)) y0)) ((@COND (fun (prod a0 a1) bool)) (= x0 (@EMPTY (fun a0 bool))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a1 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 ((@IN (fun a1 bool)) y1 x1) ((@CROSS a1 a0) (@UNIV a0) y1))))))) ((@COND (fun (prod a0 a1) bool)) (= x1 (@EMPTY (fun a1 bool))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a0 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 ((@IN (fun a0 bool)) y1 x0) ((@CROSS a1 a0) y1 (@UNIV a1)))))))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a0 bool), (∃ (λ y2 : El (fun a1 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 (∧ ((@IN (fun a0 bool)) y1 x0) ((@IN (fun a1 bool)) y2 x1)) ((@CROSS a1 a0) y1 y2))))))))))));
symbol term16 a0 a1 (x0: El (type686 a0)) (x1: El (type686 a1)) ≔ (⇒ (= x0 (@EMPTY (fun a0 bool))) ((λ y0 : El (type1210 a0 a1), (= ((@CROSS a1 a0) ((@INTERS a0) x0) ((@INTERS a1) x1)) y0)) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a1 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 ((@IN (fun a1 bool)) y1 x1) ((@CROSS a1 a0) (@UNIV a0) y1)))))))));
symbol term13 a0 a1 (x0: El (type686 a0)) (x1: El (type686 a1)) ≔ (⇒ (¬ (= x0 (@EMPTY (fun a0 bool)))) (= ((@CROSS a1 a0) ((@INTERS a0) x0) ((@INTERS a1) x1)) ((@COND (fun (prod a0 a1) bool)) (= x1 (@EMPTY (fun a1 bool))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a0 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 ((@IN (fun a0 bool)) y1 x0) ((@CROSS a1 a0) y1 (@UNIV a1)))))))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a0 bool), (∃ (λ y2 : El (fun a1 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 (∧ ((@IN (fun a0 bool)) y1 x0) ((@IN (fun a1 bool)) y2 x1)) ((@CROSS a1 a0) y1 y2))))))))))));
symbol term12 a0 a1 (x0: El (type686 a0)) (x1: El (type686 a1)) ≔ (⇒ (¬ (= x0 (@EMPTY (fun a0 bool)))) ((λ y0 : El (type1210 a0 a1), (= ((@CROSS a1 a0) ((@INTERS a0) x0) ((@INTERS a1) x1)) y0)) ((@COND (fun (prod a0 a1) bool)) (= x1 (@EMPTY (fun a1 bool))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a0 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 ((@IN (fun a0 bool)) y1 x0) ((@CROSS a1 a0) y1 (@UNIV a1)))))))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a0 bool), (∃ (λ y2 : El (fun a1 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 (∧ ((@IN (fun a0 bool)) y1 x0) ((@IN (fun a1 bool)) y2 x1)) ((@CROSS a1 a0) y1 y2))))))))))));
symbol term11 a0 (x0: El (type686 a0)) ≔ (⇒ (¬ (= x0 (@EMPTY (fun a0 bool)))));
symbol term6 a0 a1 (x0: El (type686 a0)) (x1: El (type686 a1)) ≔ (∧ (⇒ (= x0 (@EMPTY (fun a0 bool))) ((λ y0 : El (type1210 a0 a1), (= ((@CROSS a1 a0) ((@INTERS a0) x0) ((@INTERS a1) x1)) y0)) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a1 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 ((@IN (fun a1 bool)) y1 x1) ((@CROSS a1 a0) (@UNIV a0) y1))))))))) (⇒ (¬ (= x0 (@EMPTY (fun a0 bool)))) ((λ y0 : El (type1210 a0 a1), (= ((@CROSS a1 a0) ((@INTERS a0) x0) ((@INTERS a1) x1)) y0)) ((@COND (fun (prod a0 a1) bool)) (= x1 (@EMPTY (fun a1 bool))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a0 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 ((@IN (fun a0 bool)) y1 x0) ((@CROSS a1 a0) y1 (@UNIV a1)))))))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a0 bool), (∃ (λ y2 : El (fun a1 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 (∧ ((@IN (fun a0 bool)) y1 x0) ((@IN (fun a1 bool)) y2 x1)) ((@CROSS a1 a0) y1 y2)))))))))))));
symbol term1 a0 a1 (x0: El (type1210 a0 a1)) (x1: El bool) (x2: El (type324 a0 a1)) (x3: El (type1210 a0 a1)) ≔ (∧ (⇒ x1 (x2 x0)) (⇒ (¬ x1) (x2 x3)));
symbol term7 a0 a1 (x0: El (type686 a1)) ≔ ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a1 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 ((@IN (fun a1 bool)) y1 x0) ((@CROSS a1 a0) (@UNIV a0) y1)))))));
symbol term17 a0 a1 (x0: El (type686 a0)) (x1: El (type686 a1)) ≔ (⇒ (= x0 (@EMPTY (fun a0 bool))) (= ((@CROSS a1 a0) ((@INTERS a0) x0) ((@INTERS a1) x1)) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a1 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 ((@IN (fun a1 bool)) y1 x1) ((@CROSS a1 a0) (@UNIV a0) y1)))))))));
symbol term22 a0 a1 (x0: El (type686 a0)) (x1: El (type686 a1)) ≔ ((@= bool) ((λ y0 : El (type1210 a0 a1), (= ((@CROSS a1 a0) ((@INTERS a0) x0) ((@INTERS a1) x1)) y0)) ((@COND (fun (prod a0 a1) bool)) (= x0 (@EMPTY (fun a0 bool))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a1 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 ((@IN (fun a1 bool)) y1 x1) ((@CROSS a1 a0) (@UNIV a0) y1))))))) ((@COND (fun (prod a0 a1) bool)) (= x1 (@EMPTY (fun a1 bool))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a0 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 ((@IN (fun a0 bool)) y1 x0) ((@CROSS a1 a0) y1 (@UNIV a1)))))))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a0 bool), (∃ (λ y2 : El (fun a1 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 (∧ ((@IN (fun a0 bool)) y1 x0) ((@IN (fun a1 bool)) y2 x1)) ((@CROSS a1 a0) y1 y2)))))))))))));
symbol term18 a0 a1 (x0: El (type686 a0)) (x1: El (type686 a1)) ≔ (∧ (⇒ (= x0 (@EMPTY (fun a0 bool))) ((λ y0 : El (type1210 a0 a1), (= ((@CROSS a1 a0) ((@INTERS a0) x0) ((@INTERS a1) x1)) y0)) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a1 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 ((@IN (fun a1 bool)) y1 x1) ((@CROSS a1 a0) (@UNIV a0) y1))))))))));
symbol term4 a0 a1 (x0: El (type686 a0)) (x1: El (type686 a1)) ≔ (λ y0 : El (type1210 a0 a1), (= ((@CROSS a1 a0) ((@INTERS a0) x0) ((@INTERS a1) x1)) y0));
symbol term2 a0 a1 (x0: El (type686 a0)) (x1: El (type686 a1)) (x2: El bool) (x3: El (type1210 a0 a1)) (x4: El (type1210 a0 a1)) ≔ ((λ y0 : El (type1210 a0 a1), (= ((@CROSS a1 a0) ((@INTERS a0) x0) ((@INTERS a1) x1)) y0)) ((@COND (fun (prod a0 a1) bool)) x2 x3 x4));
symbol term10 a0 a1 (x0: El (type686 a0)) (x1: El (type686 a1)) ≔ ((@CROSS a1 a0) ((@INTERS a0) x0) ((@INTERS a1) x1));
symbol term3 a0 a1 (x0: El (type1210 a0 a1)) (x1: El bool) (x2: El (type686 a0)) (x3: El (type686 a1)) (x4: El (type1210 a0 a1)) ≔ (∧ (⇒ x1 ((λ y0 : El (type1210 a0 a1), (= ((@CROSS a1 a0) ((@INTERS a0) x2) ((@INTERS a1) x3)) y0)) x0)) (⇒ (¬ x1) ((λ y0 : El (type1210 a0 a1), (= ((@CROSS a1 a0) ((@INTERS a0) x2) ((@INTERS a1) x3)) y0)) x4)));
symbol term23 a0 a1 (x0: El (type686 a0)) (x1: El (type686 a1)) ≔ ((@= bool) (= ((@CROSS a1 a0) ((@INTERS a0) x0) ((@INTERS a1) x1)) ((@COND (fun (prod a0 a1) bool)) (= x0 (@EMPTY (fun a0 bool))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a1 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 ((@IN (fun a1 bool)) y1 x1) ((@CROSS a1 a0) (@UNIV a0) y1))))))) ((@COND (fun (prod a0 a1) bool)) (= x1 (@EMPTY (fun a1 bool))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a0 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 ((@IN (fun a0 bool)) y1 x0) ((@CROSS a1 a0) y1 (@UNIV a1)))))))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a0 bool), (∃ (λ y2 : El (fun a1 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 (∧ ((@IN (fun a0 bool)) y1 x0) ((@IN (fun a1 bool)) y2 x1)) ((@CROSS a1 a0) y1 y2)))))))))))));
symbol term9 a0 a1 (x0: El (type686 a0)) (x1: El (type686 a1)) ≔ ((λ y0 : El (type1210 a0 a1), (= ((@CROSS a1 a0) ((@INTERS a0) x0) ((@INTERS a1) x1)) y0)) ((@COND (fun (prod a0 a1) bool)) (= x1 (@EMPTY (fun a1 bool))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a0 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 ((@IN (fun a0 bool)) y1 x0) ((@CROSS a1 a0) y1 (@UNIV a1)))))))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a0 bool), (∃ (λ y2 : El (fun a1 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 (∧ ((@IN (fun a0 bool)) y1 x0) ((@IN (fun a1 bool)) y2 x1)) ((@CROSS a1 a0) y1 y2)))))))))));
symbol term0 a0 a1 (x0: El (type324 a0 a1)) (x1: El bool) (x2: El (type1210 a0 a1)) (x3: El (type1210 a0 a1)) ≔ (x0 ((@COND (fun (prod a0 a1) bool)) x1 x2 x3));
symbol term14 a0 a1 (x0: El (type686 a0)) (x1: El (type686 a1)) ≔ ((λ y0 : El (type1210 a0 a1), (= ((@CROSS a1 a0) ((@INTERS a0) x0) ((@INTERS a1) x1)) y0)) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a1 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 ((@IN (fun a1 bool)) y1 x1) ((@CROSS a1 a0) (@UNIV a0) y1))))))));
symbol term21 a0 a1 (x0: El (type686 a0)) (x1: El (type686 a1)) ≔ ((@COND (fun (prod a0 a1) bool)) (= x0 (@EMPTY (fun a0 bool))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a1 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 ((@IN (fun a1 bool)) y1 x1) ((@CROSS a1 a0) (@UNIV a0) y1))))))) ((@COND (fun (prod a0 a1) bool)) (= x1 (@EMPTY (fun a1 bool))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a0 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 ((@IN (fun a0 bool)) y1 x0) ((@CROSS a1 a0) y1 (@UNIV a1)))))))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a0 bool), (∃ (λ y2 : El (fun a1 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 (∧ ((@IN (fun a0 bool)) y1 x0) ((@IN (fun a1 bool)) y2 x1)) ((@CROSS a1 a0) y1 y2)))))))))));
symbol term8 a0 a1 (x0: El (type686 a0)) (x1: El (type686 a1)) ≔ ((@COND (fun (prod a0 a1) bool)) (= x1 (@EMPTY (fun a1 bool))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a0 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 ((@IN (fun a0 bool)) y1 x0) ((@CROSS a1 a0) y1 (@UNIV a1)))))))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a0 bool), (∃ (λ y2 : El (fun a1 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 (∧ ((@IN (fun a0 bool)) y1 x0) ((@IN (fun a1 bool)) y2 x1)) ((@CROSS a1 a0) y1 y2))))))))));
symbol term20 a0 a1 (x0: El (type686 a0)) (x1: El (type686 a1)) ≔ (∧ (⇒ (= x0 (@EMPTY (fun a0 bool))) (= ((@CROSS a1 a0) ((@INTERS a0) x0) ((@INTERS a1) x1)) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a1 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 ((@IN (fun a1 bool)) y1 x1) ((@CROSS a1 a0) (@UNIV a0) y1))))))))) (⇒ (¬ (= x0 (@EMPTY (fun a0 bool)))) (= ((@CROSS a1 a0) ((@INTERS a0) x0) ((@INTERS a1) x1)) ((@COND (fun (prod a0 a1) bool)) (= x1 (@EMPTY (fun a1 bool))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a0 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 ((@IN (fun a0 bool)) y1 x0) ((@CROSS a1 a0) y1 (@UNIV a1)))))))) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a0 bool), (∃ (λ y2 : El (fun a1 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 (∧ ((@IN (fun a0 bool)) y1 x0) ((@IN (fun a1 bool)) y2 x1)) ((@CROSS a1 a0) y1 y2)))))))))))));
symbol term15 a0 (x0: El (type686 a0)) ≔ (⇒ (= x0 (@EMPTY (fun a0 bool))));
symbol term19 a0 a1 (x0: El (type686 a0)) (x1: El (type686 a1)) ≔ (∧ (⇒ (= x0 (@EMPTY (fun a0 bool))) (= ((@CROSS a1 a0) ((@INTERS a0) x0) ((@INTERS a1) x1)) ((@INTERS (prod a0 a1)) ((@GSPEC (fun (prod a0 a1) bool)) (λ y0 : El (type1210 a0 a1), (∃ (λ y1 : El (fun a1 bool), ((@SETSPEC (fun (prod a0 a1) bool)) y0 ((@IN (fun a1 bool)) y1 x1) ((@CROSS a1 a0) (@UNIV a0) y1))))))))));
