Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_type_abbrevs.
Require Import hol_terms.
Definition term1 (a0 : Type') (a1 : Type') := fun y0 : type1431 a0 a1 => fun y1 : type1479 a0 a1 => fun y2 : type1677 a0 a1 => forall y3 : type1333 a0 a1, (forall y4 : type1677 a0 a1, ((exists y5 : a0, y4 = (y0 y5)) \/ (exists y5 : a1, y4 = (y1 y5))) -> y3 y4) -> y3 y2.
Definition term7 (a0 : Type') (a1 : Type') (x0 : type1431 a0 a1) := fun y0 : type1479 a0 a1 => fun y1 : type1677 a0 a1 => forall y2 : type1333 a0 a1, (forall y3 : type1677 a0 a1, ((exists y4 : a0, y3 = (x0 y4)) \/ (exists y4 : a1, y3 = (y0 y4))) -> y2 y3) -> y2 y1.
Definition term5 (a0 : Type') (a1 : Type') := fun y0 : type1479 a0 a1 => fun y1 : type1677 a0 a1 => forall y2 : type1333 a0 a1, (forall y3 : type1677 a0 a1, ((exists y4 : a0, y3 = ((fun y5 : a0 => @CONSTR (prod a0 a1) (NUMERAL 0) (@pair a0 a1 y5 (@ε a1 (fun y6 : a1 => True))) (fun y6 : nat => @BOTTOM (prod a0 a1))) y4)) \/ (exists y4 : a1, y3 = (y0 y4))) -> y2 y3) -> y2 y1.
Definition term6 (a0 : Type') (a1 : Type') (x0 : type1431 a0 a1) := @eq ((a1 -> recspace (prod a0 a1)) -> (recspace (prod a0 a1)) -> Prop) ((fun y0 : type1431 a0 a1 => fun y1 : type1479 a0 a1 => fun y2 : type1677 a0 a1 => forall y3 : type1333 a0 a1, (forall y4 : type1677 a0 a1, ((exists y5 : a0, y4 = (y0 y5)) \/ (exists y5 : a1, y4 = (y1 y5))) -> y3 y4) -> y3 y2) x0).
Definition term10 (a0 : Type') (a1 : Type') (x0 : type1431 a0 a1) (x1 : type1479 a0 a1) := (fun y0 : type1479 a0 a1 => fun y1 : type1677 a0 a1 => forall y2 : type1333 a0 a1, (forall y3 : type1677 a0 a1, ((exists y4 : a0, y3 = (x0 y4)) \/ (exists y4 : a1, y3 = (y0 y4))) -> y2 y3) -> y2 y1) x1.
Definition term13 (a0 : Type') (a1 : Type') (x0 : type1431 a0 a1) (x1 : type1479 a0 a1) := @eq ((recspace (prod a0 a1)) -> Prop) ((fun y0 : type1479 a0 a1 => fun y1 : type1677 a0 a1 => forall y2 : type1333 a0 a1, (forall y3 : type1677 a0 a1, ((exists y4 : a0, y3 = (x0 y4)) \/ (exists y4 : a1, y3 = (y0 y4))) -> y2 y3) -> y2 y1) x1).
Definition term8 (a0 : Type') (a1 : Type') (x0 : type1431 a0 a1) := @eq ((a1 -> recspace (prod a0 a1)) -> (recspace (prod a0 a1)) -> Prop) (fun y0 : type1479 a0 a1 => fun y1 : type1677 a0 a1 => forall y2 : type1333 a0 a1, (forall y3 : type1677 a0 a1, ((exists y4 : a0, y3 = (x0 y4)) \/ (exists y4 : a1, y3 = (y0 y4))) -> y2 y3) -> y2 y1).
Definition term4 (a0 : Type') (a1 : Type') := (fun y0 : type1431 a0 a1 => fun y1 : type1479 a0 a1 => fun y2 : type1677 a0 a1 => forall y3 : type1333 a0 a1, (forall y4 : type1677 a0 a1, ((exists y5 : a0, y4 = (y0 y5)) \/ (exists y5 : a1, y4 = (y1 y5))) -> y3 y4) -> y3 y2) (fun y0 : a0 => @CONSTR (prod a0 a1) (NUMERAL 0) (@pair a0 a1 y0 (@ε a1 (fun y1 : a1 => True))) (fun y1 : nat => @BOTTOM (prod a0 a1))).
Definition term2 (a0 : Type') (a1 : Type') := fun y0 : a0 => @CONSTR (prod a0 a1) (NUMERAL 0) (@pair a0 a1 y0 (@ε a1 (fun y1 : a1 => True))) (fun y1 : nat => @BOTTOM (prod a0 a1)).
Definition term14 (a0 : Type') (a1 : Type') (x0 : type1431 a0 a1) (x1 : type1479 a0 a1) := @eq ((recspace (prod a0 a1)) -> Prop) (fun y0 : type1677 a0 a1 => forall y1 : type1333 a0 a1, (forall y2 : type1677 a0 a1, ((exists y3 : a0, y2 = (x0 y3)) \/ (exists y3 : a1, y2 = (x1 y3))) -> y1 y2) -> y1 y0).
Definition term11 (a0 : Type') (a1 : Type') := (fun y0 : type1479 a0 a1 => fun y1 : type1677 a0 a1 => forall y2 : type1333 a0 a1, (forall y3 : type1677 a0 a1, ((exists y4 : a0, y3 = ((fun y5 : a0 => @CONSTR (prod a0 a1) (NUMERAL 0) (@pair a0 a1 y5 (@ε a1 (fun y6 : a1 => True))) (fun y6 : nat => @BOTTOM (prod a0 a1))) y4)) \/ (exists y4 : a1, y3 = (y0 y4))) -> y2 y3) -> y2 y1) (fun y0 : a1 => @CONSTR (prod a0 a1) (S (NUMERAL 0)) (@pair a0 a1 (@ε a0 (fun y1 : a0 => True)) y0) (fun y1 : nat => @BOTTOM (prod a0 a1))).
Definition term12 (a0 : Type') (a1 : Type') := fun y0 : type1677 a0 a1 => forall y1 : type1333 a0 a1, (forall y2 : type1677 a0 a1, ((exists y3 : a0, y2 = ((fun y4 : a0 => @CONSTR (prod a0 a1) (NUMERAL 0) (@pair a0 a1 y4 (@ε a1 (fun y5 : a1 => True))) (fun y5 : nat => @BOTTOM (prod a0 a1))) y3)) \/ (exists y3 : a1, y2 = ((fun y4 : a1 => @CONSTR (prod a0 a1) (S (NUMERAL 0)) (@pair a0 a1 (@ε a0 (fun y5 : a0 => True)) y4) (fun y5 : nat => @BOTTOM (prod a0 a1))) y3))) -> y1 y2) -> y1 y0.
Definition term0 (a0 : Type') (a1 : Type') (x0 : type1431 a0 a1) (x1 : type1479 a0 a1) := fun y0 : type1677 a0 a1 => forall y1 : type1333 a0 a1, (forall y2 : type1677 a0 a1, ((exists y3 : a0, y2 = (x0 y3)) \/ (exists y3 : a1, y2 = (x1 y3))) -> y1 y2) -> y1 y0.
Definition term9 (a0 : Type') (a1 : Type') := fun y0 : a1 => @CONSTR (prod a0 a1) (S (NUMERAL 0)) (@pair a0 a1 (@ε a0 (fun y1 : a0 => True)) y0) (fun y1 : nat => @BOTTOM (prod a0 a1)).
Definition term3 (a0 : Type') (a1 : Type') (x0 : type1431 a0 a1) := (fun y0 : type1431 a0 a1 => fun y1 : type1479 a0 a1 => fun y2 : type1677 a0 a1 => forall y3 : type1333 a0 a1, (forall y4 : type1677 a0 a1, ((exists y5 : a0, y4 = (y0 y5)) \/ (exists y5 : a1, y4 = (y1 y5))) -> y3 y4) -> y3 y2) x0.
