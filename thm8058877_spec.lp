require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_terms;
symbol lem8058877 [_143118 _143154 _143158 _143159] : Prf (= (@CASEWISE _143118 _143154 _143158 _143159) ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun (list (prod (fun _143154 _143158) (fun _143159 (fun _143154 _143118)))) (fun _143159 (fun _143158 _143118))))) (λ CASEWISE' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun (list (prod (fun _143154 _143158) (fun _143159 (fun _143154 _143118)))) (fun _143159 (fun _143158 _143118)))), (∀ (λ _106222 : El (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))), (∧ (∀ (λ f : El _143159, (∀ (λ x : El _143158, (= (CASEWISE' _106222 (@NIL (prod (fun _143154 _143158) (fun _143159 (fun _143154 _143118)))) f x) ((@ε _143118) (λ y : El _143118, T))))))) (∀ (λ h : El (prod (fun _143154 _143158) (fun _143159 (fun _143154 _143118))), (∀ (λ t : El (list (prod (fun _143154 _143158) (fun _143159 (fun _143154 _143118)))), (∀ (λ f : El _143159, (∀ (λ x : El _143158, (= (CASEWISE' _106222 ((@CONS (prod (fun _143154 _143158) (fun _143159 (fun _143154 _143118)))) h t) f x) ((@COND _143118) (∃ (λ y : El _143154, (= ((@FST (fun _143154 _143158) (fun _143159 (fun _143154 _143118))) h y) x))) ((@SND (fun _143154 _143158) (fun _143159 (fun _143154 _143118))) h f ((@ε _143154) (λ y : El _143154, (= ((@FST (fun _143154 _143158) (fun _143159 (fun _143154 _143118))) h y) x)))) (CASEWISE' _106222 t f x))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))))))))))));
