Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_terms.
Require Import hol_axioms.
Require Import hol_type_abbrevs.
Require Import CASEWISE_WORKS_term_abbrevs.
Require Import ALL_MEM_spec.
Require Import CASEWISE_CASES_spec.
Require Import DISJ_ACI_spec.
Require Import DISJ_ASSOC_spec.
Require Import FORALL_PAIR_THM_spec.
Require Import thm0_spec.
Require Import thm10578_spec.
Require Import thm10597_spec.
Require Import thm16433_spec.
Require Import thm16434_spec.
Require Import thm16439_spec.
Require Import thm16440_spec.
Require Import thm16457_spec.
Require Import thm16458_spec.
Require Import thm16471_spec.
Require Import thm16474_spec.
Require Import thm17045_spec.
Require Import thm17265_spec.
Require Import thm17362_spec.
Require Import thm18392_spec.
Require Import thm18394_spec.
Require Import thm18898_spec.
Require Import thm18899_spec.
Require Import thm18904_spec.
Require Import thm18905_spec.
Require Import thm18928_spec.
Require Import thm18929_spec.
Require Import thm19006_spec.
Require Import thm19007_spec.
Require Import thm19012_spec.
Require Import thm19013_spec.
Require Import thm19024_spec.
Require Import thm19025_spec.
Require Import thm19490_spec.
Require Import thm19699_spec.
Require Import thm19732_spec.
Require Import thm20661_spec.
Require Import thm20662_spec.
Require Import thm20664_spec.
Require Import thm20665_spec.
Require Import thm20668_spec.
Require Import thm20682_spec.
Require Import thm20764_spec.
Require Import thm20780_spec.
Require Import thm20789_spec.
Require Import thm20895_spec.
Require Import thm21021_spec.
Require Import thm21114_spec.
Require Import thm21182_spec.
Require Import thm21385_spec.
Require Import thm21386_spec.
Require Import thm48805_spec.
Require Import thm48806_spec.
Require Import thm48811_spec.
Require Import thm48812_spec.
Require Import thm48920_spec.
Require Import thm51_spec.
Require Import thm51128_spec.
Require Import thm51159_spec.
Require Import thm69_spec.
Lemma lem8074573 (t1 : Prop) : term0 t1.
Proof. exact (@lem693 t1). Qed.
Lemma lem8074574 (t1 : Prop) : (term0 t1) = (term1 t1).
Proof. exact (eq_refl (term0 t1)). Qed.
Lemma lem8074575 (t1 : Prop) : term1 t1.
Proof. exact (EQ_MP (@lem8074574 t1) (@lem8074573 t1)). Qed.
Lemma lem8074576 (t1 : Prop) (t2 : Prop) : term2 t1 t2.
Proof. exact (@lem8074575 t1 t2). Qed.
Lemma lem8074577 (t1 : Prop) (t2 : Prop) : (term2 t1 t2) = (term3 t1 t2).
Proof. exact (eq_refl (term2 t1 t2)). Qed.
Lemma lem8074578 (t1 : Prop) (t2 : Prop) : term3 t1 t2.
Proof. exact (EQ_MP (@lem8074577 t1 t2) (@lem8074576 t1 t2)). Qed.
Lemma lem8074579 (t1 : Prop) (t2 : Prop) (t3 : Prop) : term4 t1 t2 t3.
Proof. exact (@lem8074578 t1 t2 t3). Qed.
Lemma lem8074580 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term4 t1 t2 t3) = ((term5 t1 t2 t3) = (term6 t1 t2 t3)).
Proof. exact (eq_refl (term4 t1 t2 t3)). Qed.
Lemma lem8074581 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term5 t1 t2 t3) = (term6 t1 t2 t3).
Proof. exact (EQ_MP (@lem8074580 t1 t2 t3) (@lem8074579 t1 t2 t3)). Qed.
Lemma lem8074582 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term6 t1 t2 t3) = (term5 t1 t2 t3).
Proof. exact (SYM (@lem8074581 t1 t2 t3)). Qed.
Lemma lem8074585 {_26777 : Type'} (P : _26777 -> Prop) (l : list _26777) (h1 : (term7 _26777 l P) = (@List.Forall _26777 P l)) : (term7 _26777 l P) = (@List.Forall _26777 P l).
Proof. exact (h1). Qed.
Lemma lem8074586 {_26777 : Type'} (P : _26777 -> Prop) (l : list _26777) (h1 : (term7 _26777 l P) = (@List.Forall _26777 P l)) : (@List.Forall _26777 P l) = (term7 _26777 l P).
Proof. exact (SYM (@lem8074585 _26777 P l h1)). Qed.
Lemma lem8074587 {_26777 : Type'} (l : list _26777) (P : _26777 -> Prop) (h1 : (@List.Forall _26777 P l) = (term7 _26777 l P)) : (@List.Forall _26777 P l) = (term7 _26777 l P).
Proof. exact (h1). Qed.
Lemma lem8074588 {_26777 : Type'} (l : list _26777) (P : _26777 -> Prop) (h1 : (@List.Forall _26777 P l) = (term7 _26777 l P)) : (term7 _26777 l P) = (@List.Forall _26777 P l).
Proof. exact (SYM (@lem8074587 _26777 l P h1)). Qed.
Lemma lem8074589 {_26777 : Type'} (l : list _26777) (P : _26777 -> Prop) : ((term7 _26777 l P) = (@List.Forall _26777 P l)) = ((@List.Forall _26777 P l) = (term7 _26777 l P)).
Proof. exact (prop_ext (fun h1 : (term7 _26777 l P) = (@List.Forall _26777 P l) => @lem8074586 _26777 P l h1) (fun h1 : (@List.Forall _26777 P l) = (term7 _26777 l P) => @lem8074588 _26777 l P h1)). Qed.
Lemma lem8074590 {_26777 : Type'} (P : _26777 -> Prop) : (term8 _26777 P) = (term9 _26777 P).
Proof. exact (fun_ext (fun l : list _26777 => @lem8074589 _26777 l P)). Qed.
Lemma lem8074591 {_26777 : Type'} : (@all (list _26777)) = (@all (list _26777)).
Proof. exact (eq_refl (@all (list _26777))). Qed.
Lemma lem8074592 {_26777 : Type'} (P : _26777 -> Prop) : (term10 _26777 P) = (term11 _26777 P).
Proof. exact (MK_COMB (@lem8074591 _26777) (@lem8074590 _26777 P)). Qed.
Lemma lem8074593 {_26777 : Type'} : (term12 _26777) = (term13 _26777).
Proof. exact (fun_ext (fun P : _26777 -> Prop => @lem8074592 _26777 P)). Qed.
Lemma lem8074594 {_26777 : Type'} : (@all (_26777 -> Prop)) = (@all (_26777 -> Prop)).
Proof. exact (eq_refl (@all (_26777 -> Prop))). Qed.
Lemma lem8074595 {_26777 : Type'} : (term14 _26777) = (term15 _26777).
Proof. exact (MK_COMB (@lem8074594 _26777) (@lem8074593 _26777)). Qed.
Lemma lem8074596 {_26777 : Type'} : term15 _26777.
Proof. exact (EQ_MP (@lem8074595 _26777) (@lem1138070 _26777)). Qed.
Lemma lem8074597 {_5106 _5107 : Type'} (P : type1223 _5106 _5107) : term16 _5106 _5107 P.
Proof. exact (@lem49909 _5106 _5107 P). Qed.
Lemma lem8074598 {_5106 _5107 : Type'} (P : type1223 _5106 _5107) : (term16 _5106 _5107 P) = ((term17 _5106 _5107 P) = (term18 _5106 _5107 P)).
Proof. exact (eq_refl (term16 _5106 _5107 P)). Qed.
Lemma lem8074600 {_26777 : Type'} (P : _26777 -> Prop) : term19 _26777 P.
Proof. exact (@lem8074596 _26777 P). Qed.
Lemma lem8074601 {_26777 : Type'} (P : _26777 -> Prop) : (term19 _26777 P) = (term11 _26777 P).
Proof. exact (eq_refl (term19 _26777 P)). Qed.
Lemma lem8074602 {_26777 : Type'} (P : _26777 -> Prop) : term11 _26777 P.
Proof. exact (EQ_MP (@lem8074601 _26777 P) (@lem8074600 _26777 P)). Qed.
Lemma lem8074603 {_26777 : Type'} (P : _26777 -> Prop) (l : list _26777) : term20 _26777 P l.
Proof. exact (@lem8074602 _26777 P l). Qed.
Lemma lem8074604 {_26777 : Type'} (l : list _26777) (P : _26777 -> Prop) : (term20 _26777 P l) = ((@List.Forall _26777 P l) = (term7 _26777 l P)).
Proof. exact (eq_refl (term20 _26777 P l)). Qed.
Lemma lem8074667 {_26777 : Type'} (l : list _26777) (P : _26777 -> Prop) : (@List.Forall _26777 P l) = (term7 _26777 l P).
Proof. exact (EQ_MP (@lem8074604 _26777 l P) (@lem8074603 _26777 P l)). Qed.
Lemma lem8074668 {A B C P : Type'} (l : type1638 A B C P) (P' : type1185 A B C P) : (@List.Forall (prod (P -> A) (C -> P -> B)) P' l) = (term21 A B C P l P').
Proof. exact (@lem8074667 (type1647 A B C P) l P'). Qed.
Lemma lem8074669 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term22 A B C P c clauses) = (term23 A B C P clauses c).
Proof. exact (@lem8074668 A B C P clauses (term24 A B C P clauses c)). Qed.
Lemma lem8074675 {_5106 _5107 : Type'} (P : type1223 _5106 _5107) : (term17 _5106 _5107 P) = (term18 _5106 _5107 P).
Proof. exact (EQ_MP (@lem8074598 _5106 _5107 P) (@lem8074597 _5106 _5107 P)). Qed.
Lemma lem8074676 {A B C P : Type'} (P' : type1185 A B C P) : (term25 A B C P P') = (term26 A B C P P').
Proof. exact (@lem8074675 (type1475 B C P) (P -> A) P'). Qed.
Lemma lem8074677 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term27 A B C P clauses c) = (term28 A B C P clauses c).
Proof. exact (@lem8074676 A B C P (term29 A B C P clauses c)). Qed.
Lemma lem8074678 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : type1647 A B C P) : (term30 A B C P clauses c x) = (term31 A B C P clauses c x).
Proof. exact (eq_refl (term30 A B C P clauses c x)). Qed.
Lemma lem8074679 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term32 A B C P clauses c) = (term29 A B C P clauses c).
Proof. exact (fun_ext (fun x : type1647 A B C P => @lem8074678 A B C P clauses c x)). Qed.
Lemma lem8074680 {A B C P : Type'} : (@all (prod (P -> A) (C -> P -> B))) = (@all (prod (P -> A) (C -> P -> B))).
Proof. exact (eq_refl (@all (prod (P -> A) (C -> P -> B)))). Qed.
Lemma lem8074681 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term27 A B C P clauses c) = (term23 A B C P clauses c).
Proof. exact (MK_COMB (@lem8074680 A B C P) (@lem8074679 A B C P clauses c)). Qed.
Lemma lem8074682 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8074683 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term33 A B C P clauses c) = (term34 A B C P clauses c).
Proof. exact (MK_COMB (@lem8074682) (@lem8074681 A B C P clauses c)). Qed.
Lemma lem8074684 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (p1 : P -> A) (p2 : type1475 B C P) : (term35 A B C P clauses c p1 p2) = (term36 A B C P clauses c p1 p2).
Proof. exact (eq_refl (term35 A B C P clauses c p1 p2)). Qed.
Lemma lem8074685 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (p1 : P -> A) : (term37 A B C P clauses c p1) = (term38 A B C P clauses c p1).
Proof. exact (fun_ext (fun p2 : type1475 B C P => @lem8074684 A B C P clauses c p1 p2)). Qed.
Lemma lem8074686 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8074687 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (p1 : P -> A) : (term39 A B C P clauses c p1) = (term40 A B C P clauses c p1).
Proof. exact (MK_COMB (@lem8074686 B C P) (@lem8074685 A B C P clauses c p1)). Qed.
Lemma lem8074688 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term41 A B C P clauses c) = (term42 A B C P clauses c).
Proof. exact (fun_ext (fun p1 : P -> A => @lem8074687 A B C P clauses c p1)). Qed.
Lemma lem8074689 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8074690 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term28 A B C P clauses c) = (term43 A B C P clauses c).
Proof. exact (MK_COMB (@lem8074689 A P) (@lem8074688 A B C P clauses c)). Qed.
Lemma lem8074691 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : ((term27 A B C P clauses c) = (term28 A B C P clauses c)) = ((term23 A B C P clauses c) = (term43 A B C P clauses c)).
Proof. exact (MK_COMB (@lem8074683 A B C P clauses c) (@lem8074690 A B C P clauses c)). Qed.
Lemma lem8074692 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term23 A B C P clauses c) = (term43 A B C P clauses c).
Proof. exact (EQ_MP (@lem8074691 A B C P clauses c) (@lem8074677 A B C P clauses c)). Qed.
Lemma lem8074699 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term22 A B C P c clauses) = (term43 A B C P clauses c).
Proof. exact (TRANS (@lem8074669 A B C P clauses c) (@lem8074692 A B C P clauses c)). Qed.
Lemma lem8074708 {A B C P : Type'} (a0 : P -> A) (a1 : type1475 B C P) : a0 = (term44 A B C P a0 a1).
Proof. exact (@lem51128 (P -> A) (type1475 B C P) a0 a1). Qed.
Lemma lem8074709 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : s = (term44 A B C P s t).
Proof. exact (@lem8074708 A B C P s t). Qed.
Lemma lem8074710 {A B C P : Type'} (a0 : P -> A) (a1 : type1475 B C P) : a1 = (term45 A B C P a0 a1).
Proof. exact (@lem51159 (P -> A) (type1475 B C P) a0 a1). Qed.
Lemma lem8074711 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : t = (term45 A B C P s t).
Proof. exact (@lem8074710 A B C P s t). Qed.
Lemma lem8074712 {A P : Type'} (s : P -> A) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8074713 {A P : Type'} : (term46 A P) = (term46 A P).
Proof. exact (eq_refl (term46 A P)). Qed.
Lemma lem8074714 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : (term47 A P s) = (term48 A B C P s t).
Proof. exact (MK_COMB (@lem8074713 A P) (@lem8074709 A B C P s t)). Qed.
Lemma lem8074715 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : (term48 A B C P s t) = (term44 A B C P s t).
Proof. exact (eq_refl (term48 A B C P s t)). Qed.
Lemma lem8074716 {A P : Type'} (s : P -> A) : (term49 A P s) = (term49 A P s).
Proof. exact (eq_refl (term49 A P s)). Qed.
Lemma lem8074717 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : ((term47 A P s) = (term48 A B C P s t)) = ((term47 A P s) = (term44 A B C P s t)).
Proof. exact (MK_COMB (@lem8074716 A P s) (@lem8074715 A B C P s t)). Qed.
Lemma lem8074718 {A P : Type'} (s : P -> A) : (term47 A P s) = s.
Proof. exact (eq_refl (term47 A P s)). Qed.
Lemma lem8074719 {A P : Type'} : (@eq (P -> A)) = (@eq (P -> A)).
Proof. exact (eq_refl (@eq (P -> A))). Qed.
Lemma lem8074720 {A P : Type'} (s : P -> A) : (term49 A P s) = (@eq (P -> A) s).
Proof. exact (MK_COMB (@lem8074719 A P) (@lem8074718 A P s)). Qed.
Lemma lem8074721 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : (term44 A B C P s t) = (term44 A B C P s t).
Proof. exact (eq_refl (term44 A B C P s t)). Qed.
Lemma lem8074722 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : ((term47 A P s) = (term44 A B C P s t)) = (s = (term44 A B C P s t)).
Proof. exact (MK_COMB (@lem8074720 A P s) (@lem8074721 A B C P s t)). Qed.
Lemma lem8074723 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : ((term47 A P s) = (term48 A B C P s t)) = (s = (term44 A B C P s t)).
Proof. exact (TRANS (@lem8074717 A B C P s t) (@lem8074722 A B C P s t)). Qed.
Lemma lem8074724 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : s = (term44 A B C P s t).
Proof. exact (EQ_MP (@lem8074723 A B C P s t) (@lem8074714 A B C P s t)). Qed.
Lemma lem8074725 {A P : Type'} (s : P -> A) : (@eq (P -> A) s) = (@eq (P -> A) s).
Proof. exact (eq_refl (@eq (P -> A) s)). Qed.
Lemma lem8074726 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : (s = s) = (s = (term44 A B C P s t)).
Proof. exact (MK_COMB (@lem8074725 A P s) (@lem8074724 A B C P s t)). Qed.
Lemma lem8074727 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : s = (term44 A B C P s t).
Proof. exact (EQ_MP (@lem8074726 A B C P s t) (@lem8074712 A P s)). Qed.
Lemma lem8074728 {B C P : Type'} (t : type1475 B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8074729 {B C P : Type'} : (term50 B C P) = (term50 B C P).
Proof. exact (eq_refl (term50 B C P)). Qed.
Lemma lem8074730 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : (term51 B C P t) = (term52 A B C P s t).
Proof. exact (MK_COMB (@lem8074729 B C P) (@lem8074711 A B C P s t)). Qed.
Lemma lem8074731 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : (term52 A B C P s t) = (term45 A B C P s t).
Proof. exact (eq_refl (term52 A B C P s t)). Qed.
Lemma lem8074732 {B C P : Type'} (t : type1475 B C P) : (term53 B C P t) = (term53 B C P t).
Proof. exact (eq_refl (term53 B C P t)). Qed.
Lemma lem8074733 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : ((term51 B C P t) = (term52 A B C P s t)) = ((term51 B C P t) = (term45 A B C P s t)).
Proof. exact (MK_COMB (@lem8074732 B C P t) (@lem8074731 A B C P s t)). Qed.
Lemma lem8074734 {B C P : Type'} (t : type1475 B C P) : (term51 B C P t) = t.
Proof. exact (eq_refl (term51 B C P t)). Qed.
Lemma lem8074735 {B C P : Type'} : (@eq (C -> P -> B)) = (@eq (C -> P -> B)).
Proof. exact (eq_refl (@eq (C -> P -> B))). Qed.
Lemma lem8074736 {B C P : Type'} (t : type1475 B C P) : (term53 B C P t) = (@eq (C -> P -> B) t).
Proof. exact (MK_COMB (@lem8074735 B C P) (@lem8074734 B C P t)). Qed.
Lemma lem8074737 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : (term45 A B C P s t) = (term45 A B C P s t).
Proof. exact (eq_refl (term45 A B C P s t)). Qed.
Lemma lem8074738 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : ((term51 B C P t) = (term45 A B C P s t)) = (t = (term45 A B C P s t)).
Proof. exact (MK_COMB (@lem8074736 B C P t) (@lem8074737 A B C P s t)). Qed.
Lemma lem8074739 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : ((term51 B C P t) = (term52 A B C P s t)) = (t = (term45 A B C P s t)).
Proof. exact (TRANS (@lem8074733 A B C P s t) (@lem8074738 A B C P s t)). Qed.
Lemma lem8074740 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : t = (term45 A B C P s t).
Proof. exact (EQ_MP (@lem8074739 A B C P s t) (@lem8074730 A B C P s t)). Qed.
Lemma lem8074741 {B C P : Type'} (t : type1475 B C P) : (@eq (C -> P -> B) t) = (@eq (C -> P -> B) t).
Proof. exact (eq_refl (@eq (C -> P -> B) t)). Qed.
Lemma lem8074742 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : (t = t) = (t = (term45 A B C P s t)).
Proof. exact (MK_COMB (@lem8074741 B C P t) (@lem8074740 A B C P s t)). Qed.
Lemma lem8074743 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : t = (term45 A B C P s t).
Proof. exact (EQ_MP (@lem8074742 A B C P s t) (@lem8074728 B C P t)). Qed.
Lemma lem8074744 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term54 A B C P clauses c) = (term54 A B C P clauses c).
Proof. exact (eq_refl (term54 A B C P clauses c)). Qed.
Lemma lem8074745 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (s : P -> A) (t : type1475 B C P) : (term55 A B C P clauses c s) = (term56 A B C P clauses c s t).
Proof. exact (MK_COMB (@lem8074744 A B C P clauses c) (@lem8074727 A B C P s t)). Qed.
Lemma lem8074746 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term56 A B C P clauses c s t) = (term57 A B C P clauses s t c).
Proof. exact (eq_refl (term56 A B C P clauses c s t)). Qed.
Lemma lem8074747 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (s : P -> A) : (term58 A B C P clauses c s) = (term58 A B C P clauses c s).
Proof. exact (eq_refl (term58 A B C P clauses c s)). Qed.
Lemma lem8074748 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : ((term55 A B C P clauses c s) = (term56 A B C P clauses c s t)) = ((term55 A B C P clauses c s) = (term57 A B C P clauses s t c)).
Proof. exact (MK_COMB (@lem8074747 A B C P clauses c s) (@lem8074746 A B C P clauses s t c)). Qed.
Lemma lem8074749 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term55 A B C P clauses c s) = (term59 A B C P clauses s c).
Proof. exact (eq_refl (term55 A B C P clauses c s)). Qed.
Lemma lem8074750 {B C P : Type'} : (@eq ((C -> P -> B) -> Prop)) = (@eq ((C -> P -> B) -> Prop)).
Proof. exact (eq_refl (@eq ((C -> P -> B) -> Prop))). Qed.
Lemma lem8074751 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term58 A B C P clauses c s) = (term60 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8074750 B C P) (@lem8074749 A B C P clauses s c)). Qed.
Lemma lem8074752 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term57 A B C P clauses s t c) = (term57 A B C P clauses s t c).
Proof. exact (eq_refl (term57 A B C P clauses s t c)). Qed.
Lemma lem8074753 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : ((term55 A B C P clauses c s) = (term57 A B C P clauses s t c)) = ((term59 A B C P clauses s c) = (term57 A B C P clauses s t c)).
Proof. exact (MK_COMB (@lem8074751 A B C P clauses s c) (@lem8074752 A B C P clauses s t c)). Qed.
Lemma lem8074754 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : ((term55 A B C P clauses c s) = (term56 A B C P clauses c s t)) = ((term59 A B C P clauses s c) = (term57 A B C P clauses s t c)).
Proof. exact (TRANS (@lem8074748 A B C P clauses s t c) (@lem8074753 A B C P clauses s t c)). Qed.
Lemma lem8074755 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term59 A B C P clauses s c) = (term57 A B C P clauses s t c).
Proof. exact (EQ_MP (@lem8074754 A B C P clauses s t c) (@lem8074745 A B C P clauses c s t)). Qed.
Lemma lem8074756 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (s : P -> A) (t : type1475 B C P) : (term61 A B C P clauses s c t) = (term62 A B C P clauses c s t).
Proof. exact (MK_COMB (@lem8074755 A B C P clauses s t c) (@lem8074743 A B C P s t)). Qed.
Lemma lem8074757 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term62 A B C P clauses c s t) = (term63 A B C P clauses s t c).
Proof. exact (eq_refl (term62 A B C P clauses c s t)). Qed.
Lemma lem8074758 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) (t : type1475 B C P) : (term64 A B C P clauses s c t) = (term64 A B C P clauses s c t).
Proof. exact (eq_refl (term64 A B C P clauses s c t)). Qed.
Lemma lem8074759 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : ((term61 A B C P clauses s c t) = (term62 A B C P clauses c s t)) = ((term61 A B C P clauses s c t) = (term63 A B C P clauses s t c)).
Proof. exact (MK_COMB (@lem8074758 A B C P clauses s c t) (@lem8074757 A B C P clauses s t c)). Qed.
Lemma lem8074760 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term61 A B C P clauses s c t) = (term65 A B C P clauses s t c).
Proof. exact (eq_refl (term61 A B C P clauses s c t)). Qed.
Lemma lem8074761 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8074762 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term64 A B C P clauses s c t) = (term66 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8074761) (@lem8074760 A B C P clauses s t c)). Qed.
Lemma lem8074763 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term63 A B C P clauses s t c) = (term63 A B C P clauses s t c).
Proof. exact (eq_refl (term63 A B C P clauses s t c)). Qed.
Lemma lem8074764 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : ((term61 A B C P clauses s c t) = (term63 A B C P clauses s t c)) = ((term65 A B C P clauses s t c) = (term63 A B C P clauses s t c)).
Proof. exact (MK_COMB (@lem8074762 A B C P clauses s t c) (@lem8074763 A B C P clauses s t c)). Qed.
Lemma lem8074765 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : ((term61 A B C P clauses s c t) = (term62 A B C P clauses c s t)) = ((term65 A B C P clauses s t c) = (term63 A B C P clauses s t c)).
Proof. exact (TRANS (@lem8074759 A B C P clauses s t c) (@lem8074764 A B C P clauses s t c)). Qed.
Lemma lem8074766 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term65 A B C P clauses s t c) = (term63 A B C P clauses s t c).
Proof. exact (EQ_MP (@lem8074765 A B C P clauses s t c) (@lem8074756 A B C P clauses c s t)). Qed.
Lemma lem8074767 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term63 A B C P clauses s t c) = (term65 A B C P clauses s t c).
Proof. exact (SYM (@lem8074766 A B C P clauses s t c)). Qed.
Lemma lem8074768 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term67 A B C P clauses c s t) = (term63 A B C P clauses s t c).
Proof. exact (eq_refl (term67 A B C P clauses c s t)). Qed.
Lemma lem8074769 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term67 A B C P clauses c s t) = (term65 A B C P clauses s t c).
Proof. exact (TRANS (@lem8074768 A B C P clauses s t c) (@lem8074767 A B C P clauses s t c)). Qed.
Lemma lem8074770 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : term68 A B C P clauses s c.
Proof. exact (fun t : type1475 B C P => @lem8074769 A B C P clauses s t c). Qed.
Lemma lem8074771 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : term69 A B C P clauses c.
Proof. exact (fun s : P -> A => @lem8074770 A B C P clauses s c). Qed.
Lemma lem8074772 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : term70 A B C P clauses c.
Proof. exact (ex_intro (term71 A B C P clauses c) (term72 A B C P clauses c) (@lem8074771 A B C P clauses c)). Qed.
Lemma lem8074774 {A : Type'} (a : A) (b : A) : (a = b) = (@GEQ A a b).
Proof. exact (EQ_MP (@lem48806 A a b) (@lem48805 A a b)). Qed.
Lemma lem8074775 (a : Prop) (b : Prop) : (a = b) = (@GEQ Prop a b).
Proof. exact (@lem8074774 Prop a b). Qed.
Lemma lem8074776 {A B C P : Type'} (_106904 : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : ((term73 A B C P _106904 s t) = (term65 A B C P clauses s t c)) = (term74 A B C P _106904 clauses s t c).
Proof. exact (@lem8074775 (term73 A B C P _106904 s t) (term65 A B C P clauses s t c)). Qed.
Lemma lem8074777 {A B C P : Type'} (_106904 : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term75 A B C P _106904 clauses s c) = (term76 A B C P _106904 clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8074776 A B C P _106904 clauses s t c)). Qed.
Lemma lem8074778 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8074779 {A B C P : Type'} (_106904 : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term77 A B C P _106904 clauses s c) = (term78 A B C P _106904 clauses s c).
Proof. exact (MK_COMB (@lem8074778 B C P) (@lem8074777 A B C P _106904 clauses s c)). Qed.
Lemma lem8074780 {A B C P : Type'} (_106904 : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term79 A B C P _106904 clauses c) = (term80 A B C P _106904 clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8074779 A B C P _106904 clauses s c)). Qed.
Lemma lem8074781 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8074782 {A B C P : Type'} (_106904 : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term81 A B C P _106904 clauses c) = (term82 A B C P _106904 clauses c).
Proof. exact (MK_COMB (@lem8074781 A P) (@lem8074780 A B C P _106904 clauses c)). Qed.
Lemma lem8074783 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term71 A B C P clauses c) = (term83 A B C P clauses c).
Proof. exact (fun_ext (fun _106904 : type1185 A B C P => @lem8074782 A B C P _106904 clauses c)). Qed.
Lemma lem8074784 {A B C P : Type'} : (@ex ((prod (P -> A) (C -> P -> B)) -> Prop)) = (@ex ((prod (P -> A) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@ex ((prod (P -> A) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8074785 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term70 A B C P clauses c) = (term84 A B C P clauses c).
Proof. exact (MK_COMB (@lem8074784 A B C P) (@lem8074783 A B C P clauses c)). Qed.
Lemma lem8074786 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : term84 A B C P clauses c.
Proof. exact (EQ_MP (@lem8074785 A B C P clauses c) (@lem8074772 A B C P clauses c)). Qed.
Lemma lem8074788 {_5076 : Type'} (P : _5076 -> Prop) : term85 _5076 P.
Proof. exact (EQ_MP (@lem48920 _5076 P) (@lem0)). Qed.
Lemma lem8074789 {A B C P : Type'} (P' : type312 A B C P) : term86 A B C P P'.
Proof. exact (@lem8074788 (type1185 A B C P) P'). Qed.
Lemma lem8074790 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : term87 A B C P clauses c.
Proof. exact (@lem8074789 A B C P (term83 A B C P clauses c)). Qed.
Lemma lem8074791 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : term88 A B C P clauses c.
Proof. exact (@lem8074790 A B C P clauses c (@lem8074786 A B C P clauses c)). Qed.
Lemma lem8074792 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term88 A B C P clauses c) = (term89 A B C P clauses c).
Proof. exact (eq_refl (term88 A B C P clauses c)). Qed.
Lemma lem8074793 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : term89 A B C P clauses c.
Proof. exact (EQ_MP (@lem8074792 A B C P clauses c) (@lem8074791 A B C P clauses c)). Qed.
Lemma lem8074794 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (s : P -> A) : term90 A B C P clauses c s.
Proof. exact (@lem8074793 A B C P clauses c s). Qed.
Lemma lem8074795 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term90 A B C P clauses c s) = (term91 A B C P clauses s c).
Proof. exact (eq_refl (term90 A B C P clauses c s)). Qed.
Lemma lem8074796 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : term91 A B C P clauses s c.
Proof. exact (EQ_MP (@lem8074795 A B C P clauses s c) (@lem8074794 A B C P clauses c s)). Qed.
Lemma lem8074797 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) (t : type1475 B C P) : term92 A B C P clauses s c t.
Proof. exact (@lem8074796 A B C P clauses s c t). Qed.
Lemma lem8074798 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term92 A B C P clauses s c t) = (term93 A B C P clauses s t c).
Proof. exact (eq_refl (term92 A B C P clauses s c t)). Qed.
Lemma lem8074799 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : term93 A B C P clauses s t c.
Proof. exact (EQ_MP (@lem8074798 A B C P clauses s t c) (@lem8074797 A B C P clauses s c t)). Qed.
Lemma lem8074801 {A : Type'} (a : A) (b : A) : (@GEQ A a b) = (a = b).
Proof. exact (EQ_MP (@lem48812 A a b) (@lem48811 A a b)). Qed.
Lemma lem8074802 (a : Prop) (b : Prop) : (@GEQ Prop a b) = (a = b).
Proof. exact (@lem8074801 Prop a b). Qed.
Lemma lem8074803 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term93 A B C P clauses s t c) = ((term94 A B C P clauses c s t) = (term65 A B C P clauses s t c)).
Proof. exact (@lem8074802 (term94 A B C P clauses c s t) (term65 A B C P clauses s t c)). Qed.
Lemma lem8074804 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term94 A B C P clauses c s t) = (term65 A B C P clauses s t c).
Proof. exact (EQ_MP (@lem8074803 A B C P clauses s t c) (@lem8074799 A B C P clauses s t c)). Qed.
Lemma lem8074805 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term94 A B C P clauses c s t) = (term65 A B C P clauses s t c).
Proof. exact (@lem8074804 A B C P clauses s t c). Qed.
Lemma lem8074806 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term94 A B C P clauses c p1 p2) = (term65 A B C P clauses p1 p2 c).
Proof. exact (@lem8074805 A B C P clauses p1 p2 c). Qed.
Lemma lem8074815 {A B C P : Type'} (p1 : P -> A) (p2 : type1475 B C P) (clauses : type1638 A B C P) : (term95 A B C P p1 p2 clauses) = (term95 A B C P p1 p2 clauses).
Proof. exact (eq_refl (term95 A B C P p1 p2 clauses)). Qed.
Lemma lem8074816 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term36 A B C P clauses c p1 p2) = (term96 A B C P clauses p1 p2 c).
Proof. exact (MK_COMB (@lem8074815 A B C P p1 p2 clauses) (@lem8074806 A B C P clauses p1 p2 c)). Qed.
Lemma lem8074819 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term38 A B C P clauses c p1) = (term97 A B C P clauses p1 c).
Proof. exact (fun_ext (fun p2 : type1475 B C P => @lem8074816 A B C P clauses p1 p2 c)). Qed.
Lemma lem8074820 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8074821 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term40 A B C P clauses c p1) = (term98 A B C P clauses p1 c).
Proof. exact (MK_COMB (@lem8074820 B C P) (@lem8074819 A B C P clauses p1 c)). Qed.
Lemma lem8074828 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term42 A B C P clauses c) = (term99 A B C P clauses c).
Proof. exact (fun_ext (fun p1 : P -> A => @lem8074821 A B C P clauses p1 c)). Qed.
Lemma lem8074829 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8074830 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term43 A B C P clauses c) = (term100 A B C P clauses c).
Proof. exact (MK_COMB (@lem8074829 A P) (@lem8074828 A B C P clauses c)). Qed.
Lemma lem8074837 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term22 A B C P c clauses) = (term100 A B C P clauses c).
Proof. exact (TRANS (@lem8074699 A B C P clauses c) (@lem8074830 A B C P clauses c)). Qed.
Lemma lem8074838 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term101 A B C P clauses c) = (term101 A B C P clauses c).
Proof. exact (eq_refl (term101 A B C P clauses c)). Qed.
Lemma lem8074839 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term102 A B C P c clauses) = (term103 A B C P clauses c).
Proof. exact (MK_COMB (@lem8074838 A B C P clauses c) (@lem8074837 A B C P clauses c)). Qed.
Lemma lem8074842 {A B C P : Type'} (clauses : type1638 A B C P) : (term104 A B C P clauses) = (term105 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8074839 A B C P clauses c)). Qed.
Lemma lem8074843 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8074844 {A B C P : Type'} (clauses : type1638 A B C P) : (term106 A B C P clauses) = (term107 A B C P clauses).
Proof. exact (MK_COMB (@lem8074843 C) (@lem8074842 A B C P clauses)). Qed.
Lemma lem8074851 {A B C P : Type'} : (term108 A B C P) = (term109 A B C P).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8074844 A B C P clauses)). Qed.
Lemma lem8074852 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8074853 {A B C P : Type'} : (term110 A B C P) = (term111 A B C P).
Proof. exact (MK_COMB (@lem8074852 A B C P) (@lem8074851 A B C P)). Qed.
Lemma lem8074860 {A B C P : Type'} : (term111 A B C P) = (term110 A B C P).
Proof. exact (SYM (@lem8074853 A B C P)). Qed.
Lemma lem8074862 (p : Prop) : p = (term112 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem8074863 {A B C P : Type'} : (term111 A B C P) = (term113 A B C P).
Proof. exact (@lem8074862 (term111 A B C P)). Qed.
Lemma lem8074864 {A B C P : Type'} : (term113 A B C P) = (term111 A B C P).
Proof. exact (SYM (@lem8074863 A B C P)). Qed.
Lemma lem8074865 {A B C P : Type'} (h1 : term114 A B C P) : term114 A B C P.
Proof. exact (h1). Qed.
Lemma lem8074866 {A B C P : Type'} : term115 A B C P.
Proof. exact (@lem8074572 A C P B). Qed.
Lemma lem8074868 {_143311 _143313 _143320 A : Type'} : term116 _143311 _143313 _143320 A.
Proof. exact (@lem8074572 A _143311 _143313 _143320). Qed.
Lemma lem8074869 {_143311 _143313 _143320 B : Type'} : term116 _143311 _143313 _143320 B.
Proof. exact (@lem8074572 B _143311 _143313 _143320). Qed.
Lemma lem8074870 {_143310 _143311 _143313 A : Type'} : term117 _143310 _143311 _143313 A.
Proof. exact (@lem8074572 _143310 _143311 _143313 A). Qed.
Lemma lem8074871 {_143310 _143311 _143313 B : Type'} : term117 _143310 _143311 _143313 B.
Proof. exact (@lem8074572 _143310 _143311 _143313 B). Qed.
Lemma lem8074935 {A : Type'} (P : A -> Prop) : term118 A P.
Proof. exact (@lem19732 A P). Qed.
Lemma lem8074936 {A : Type'} : term119 A.
Proof. exact (@lem8074935 A (term120 A)). Qed.
Lemma lem8074937 {A : Type'} : (term121 A) = True.
Proof. exact (eq_refl (term121 A)). Qed.
Lemma lem8074938 {A : Type'} (x : A) : (term122 A x) = True.
Proof. exact (eq_refl (term122 A x)). Qed.
Lemma lem8074939 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8074940 {A : Type'} (x : A) : (term123 A x) = (imp True).
Proof. exact (MK_COMB (@lem8074939) (@lem8074938 A x)). Qed.
Lemma lem8074941 {A : Type'} (x : A) : (term124 A x) = (True -> True).
Proof. exact (MK_COMB (@lem8074940 A x) (@lem8074937 A)). Qed.
Lemma lem8074942 {A : Type'} : (term125 A) = (term126 A).
Proof. exact (fun_ext (fun x : A => @lem8074941 A x)). Qed.
Lemma lem8074943 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8074944 {A : Type'} : (term119 A) = (term127 A).
Proof. exact (MK_COMB (@lem8074943 A) (@lem8074942 A)). Qed.
Lemma lem8074945 {A : Type'} : term127 A.
Proof. exact (EQ_MP (@lem8074944 A) (@lem8074936 A)). Qed.
Lemma lem8074946 {_143310 _143311 _143313 _143320 A B C P : Type'} (h1 : term128 _143310 _143311 _143313 _143320 A B C P) : term128 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (h1). Qed.
Lemma lem8074947 {_143310 _143311 _143313 _143320 A B C P : Type'} (h1 : term128 _143310 _143311 _143313 _143320 A B C P) : term129 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8074946 _143310 _143311 _143313 _143320 A B C P h1 (@lem8074945 A)). Qed.
Lemma lem8074948 {_143310 _143311 _143313 _143320 A B C P : Type'} : term130 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (fun h0 : term128 _143310 _143311 _143313 _143320 A B C P => @lem8074947 _143310 _143311 _143313 _143320 A B C P h0). Qed.
Lemma lem8074949 {A : Type'} (_106906 : A) (h1 : _106906 = (term131 A)) : _106906 = (term131 A).
Proof. exact (h1). Qed.
Lemma lem8074952 {A : Type'} (_106906 : A) (h1 : _106906 = (term131 A)) : (term131 A) = _106906.
Proof. exact (SYM (@lem8074949 A _106906 h1)). Qed.
Lemma lem8074953 {A : Type'} (_106906 : A) (h1 : _106906 = (term131 A)) : (term131 A) = _106906.
Proof. exact (@lem8074952 A _106906 h1). Qed.
Lemma lem8074954 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) : (term132 _143310 _143311 _143313 A clauses c x) = (term132 _143310 _143311 _143313 A clauses c x).
Proof. exact (eq_refl (term132 _143310 _143311 _143313 A clauses c x)). Qed.
Lemma lem8074955 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) (h1 : _106906 = (term131 A)) : ((@CASEWISE A _143313 _143310 _143311 clauses c x) = (term131 A)) = ((@CASEWISE A _143313 _143310 _143311 clauses c x) = _106906).
Proof. exact (MK_COMB (@lem8074954 _143310 _143311 _143313 A clauses c x) (@lem8074953 A _106906 h1)). Qed.
Lemma lem8074956 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) : (term133 _143310 _143311 _143313 A clauses x) = (term133 _143310 _143311 _143313 A clauses x).
Proof. exact (eq_refl (term133 _143310 _143311 _143313 A clauses x)). Qed.
Lemma lem8074957 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) (h1 : _106906 = (term131 A)) : (term134 _143310 _143311 _143313 A clauses c x) = (term135 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (MK_COMB (@lem8074956 _143310 _143311 _143313 A clauses x) (@lem8074955 _143310 _143311 _143313 A clauses c x _106906 h1)). Qed.
Lemma lem8074958 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term136 _143310 _143311 _143313 A clauses x c) = (term136 _143310 _143311 _143313 A clauses x c).
Proof. exact (eq_refl (term136 _143310 _143311 _143313 A clauses x c)). Qed.
Lemma lem8074959 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) (h1 : _106906 = (term131 A)) : (term137 _143310 _143311 _143313 A clauses c x) = (term138 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (MK_COMB (@lem8074958 _143310 _143311 _143313 A clauses x c) (@lem8074957 _143310 _143311 _143313 A clauses c x _106906 h1)). Qed.
Lemma lem8074960 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) (h1 : _106906 = (term131 A)) : (term139 _143310 _143311 _143313 A clauses c) = (term140 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (fun_ext (fun x : _143310 => @lem8074959 _143310 _143311 _143313 A clauses c x _106906 h1)). Qed.
Lemma lem8074961 {_143310 : Type'} : (@all _143310) = (@all _143310).
Proof. exact (eq_refl (@all _143310)). Qed.
Lemma lem8074962 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) (h1 : _106906 = (term131 A)) : (term141 _143310 _143311 _143313 A clauses c) = (term142 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (MK_COMB (@lem8074961 _143310) (@lem8074960 _143310 _143311 _143313 A clauses c _106906 h1)). Qed.
Lemma lem8074963 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) (h1 : _106906 = (term131 A)) : (term143 _143310 _143311 _143313 A clauses) = (term144 _143310 _143311 _143313 A clauses _106906).
Proof. exact (fun_ext (fun c : _143311 => @lem8074962 _143310 _143311 _143313 A clauses c _106906 h1)). Qed.
Lemma lem8074964 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8074965 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) (h1 : _106906 = (term131 A)) : (term145 _143310 _143311 _143313 A clauses) = (term146 _143310 _143311 _143313 A clauses _106906).
Proof. exact (MK_COMB (@lem8074964 _143311) (@lem8074963 _143310 _143311 _143313 A clauses _106906 h1)). Qed.
Lemma lem8074966 {_143310 _143311 _143313 A : Type'} (_106906 : A) (h1 : _106906 = (term131 A)) : (term147 _143310 _143311 _143313 A) = (term148 _143310 _143311 _143313 A _106906).
Proof. exact (fun_ext (fun clauses : type1637 _143310 _143311 _143313 A => @lem8074965 _143310 _143311 _143313 A clauses _106906 h1)). Qed.
Lemma lem8074967 {_143310 _143311 _143313 A : Type'} : (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A)))) = (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))))). Qed.
Lemma lem8074968 {_143310 _143311 _143313 A : Type'} (_106906 : A) (h1 : _106906 = (term131 A)) : (term117 _143310 _143311 _143313 A) = (term149 _143310 _143311 _143313 A _106906).
Proof. exact (MK_COMB (@lem8074967 _143310 _143311 _143313 A) (@lem8074966 _143310 _143311 _143313 A _106906 h1)). Qed.
Lemma lem8074969 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8074970 {_143310 _143311 _143313 A : Type'} (_106906 : A) (h1 : _106906 = (term131 A)) : (term150 _143310 _143311 _143313 A) = (term151 _143310 _143311 _143313 A _106906).
Proof. exact (MK_COMB (@lem8074969) (@lem8074968 _143310 _143311 _143313 A _106906 h1)). Qed.
Lemma lem8074983 {_143310 _143311 _143313 _143320 A B C P : Type'} : (term152 _143310 _143311 _143313 _143320 A B C P) = (term152 _143310 _143311 _143313 _143320 A B C P).
Proof. exact (eq_refl (term152 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8074984 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (h1 : _106906 = (term131 A)) : (term153 _143310 _143311 _143313 _143320 A B C P) = (term154 _143310 _143311 _143313 _143320 A B C P _106906).
Proof. exact (MK_COMB (@lem8074970 _143310 _143311 _143313 A _106906 h1) (@lem8074983 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8074985 {A B C P : Type'} : (term155 A B C P) = (term155 A B C P).
Proof. exact (eq_refl (term155 A B C P)). Qed.
Lemma lem8074986 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (h1 : _106906 = (term131 A)) : (term129 _143310 _143311 _143313 _143320 A B C P) = (term156 _143310 _143311 _143313 _143320 A B C P _106906).
Proof. exact (MK_COMB (@lem8074985 A B C P) (@lem8074984 _143310 _143311 _143313 _143320 A B C P _106906 h1)). Qed.
Lemma lem8074987 {A : Type'} : (term157 A) = (term157 A).
Proof. exact (eq_refl (term157 A)). Qed.
Lemma lem8074988 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (h1 : _106906 = (term131 A)) : (term128 _143310 _143311 _143313 _143320 A B C P) = (term158 _143310 _143311 _143313 _143320 A B C P _106906).
Proof. exact (MK_COMB (@lem8074987 A) (@lem8074986 _143310 _143311 _143313 _143320 A B C P _106906 h1)). Qed.
Lemma lem8074989 {_143310 _143311 _143313 _143320 A B C P : Type'} (h1 : term159 _143310 _143311 _143313 _143320 A B C P) : term159 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (h1). Qed.
Lemma lem8074990 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (h1 : term159 _143310 _143311 _143313 _143320 A B C P) : term160 _143310 _143311 _143313 _143320 A B C P _106906.
Proof. exact (@lem8074989 _143310 _143311 _143313 _143320 A B C P h1 _106906). Qed.
Lemma lem8074991 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) : (term160 _143310 _143311 _143313 _143320 A B C P _106906) = (term158 _143310 _143311 _143313 _143320 A B C P _106906).
Proof. exact (eq_refl (term160 _143310 _143311 _143313 _143320 A B C P _106906)). Qed.
Lemma lem8074992 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (h1 : term159 _143310 _143311 _143313 _143320 A B C P) : term158 _143310 _143311 _143313 _143320 A B C P _106906.
Proof. exact (EQ_MP (@lem8074991 _143310 _143311 _143313 _143320 A B C P _106906) (@lem8074990 _143310 _143311 _143313 _143320 A B C P _106906 h1)). Qed.
Lemma lem8074993 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (h1 : _106906 = (term131 A)) : (term158 _143310 _143311 _143313 _143320 A B C P _106906) = (term128 _143310 _143311 _143313 _143320 A B C P).
Proof. exact (SYM (@lem8074988 _143310 _143311 _143313 _143320 A B C P _106906 h1)). Qed.
Lemma lem8074994 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (h1 : term159 _143310 _143311 _143313 _143320 A B C P) (h2 : _106906 = (term131 A)) : term128 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (EQ_MP (@lem8074993 _143310 _143311 _143313 _143320 A B C P _106906 h2) (@lem8074992 _143310 _143311 _143313 _143320 A B C P _106906 h1)). Qed.
Lemma lem8074995 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (h1 : _106906 = (term131 A)) : term161 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (fun h0 : term159 _143310 _143311 _143313 _143320 A B C P => @lem8074994 _143310 _143311 _143313 _143320 A B C P _106906 h0 h1). Qed.
Lemma lem8074996 {_143310 _143311 _143313 _143320 A B C P : Type'} : term162 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem51 (term128 _143310 _143311 _143313 _143320 A B C P) (term159 _143310 _143311 _143313 _143320 A B C P) (term129 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8074997 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (h1 : _106906 = (term131 A)) : term163 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8074996 _143310 _143311 _143313 _143320 A B C P (@lem8074995 _143310 _143311 _143313 _143320 A B C P _106906 h1)). Qed.
Lemma lem8074998 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (h1 : _106906 = (term131 A)) : term164 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8074997 _143310 _143311 _143313 _143320 A B C P _106906 h1 (@lem8074948 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8074999 {A : Type'} : (term131 A) = (term131 A).
Proof. exact (eq_refl (term131 A)). Qed.
Lemma lem8075000 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) : term165 _143310 _143311 _143313 _143320 A B C P _106906.
Proof. exact (fun h0 : _106906 = (term131 A) => @lem8074998 _143310 _143311 _143313 _143320 A B C P _106906 h0). Qed.
Lemma lem8075001 {_143310 _143311 _143313 _143320 A B C P : Type'} : term166 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8075000 _143310 _143311 _143313 _143320 A B C P (term131 A)). Qed.
Lemma lem8075002 {_143310 _143311 _143313 _143320 A B C P : Type'} : term164 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8075001 _143310 _143311 _143313 _143320 A B C P (@lem8074999 A)). Qed.
Lemma lem8075003 {B : Type'} (P : B -> Prop) : term118 B P.
Proof. exact (@lem19732 B P). Qed.
Lemma lem8075004 {B : Type'} : term119 B.
Proof. exact (@lem8075003 B (term120 B)). Qed.
Lemma lem8075005 {B : Type'} : (term121 B) = True.
Proof. exact (eq_refl (term121 B)). Qed.
Lemma lem8075006 {B : Type'} (x : B) : (term122 B x) = True.
Proof. exact (eq_refl (term122 B x)). Qed.
Lemma lem8075007 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8075008 {B : Type'} (x : B) : (term123 B x) = (imp True).
Proof. exact (MK_COMB (@lem8075007) (@lem8075006 B x)). Qed.
Lemma lem8075009 {B : Type'} (x : B) : (term124 B x) = (True -> True).
Proof. exact (MK_COMB (@lem8075008 B x) (@lem8075005 B)). Qed.
Lemma lem8075010 {B : Type'} : (term125 B) = (term126 B).
Proof. exact (fun_ext (fun x : B => @lem8075009 B x)). Qed.
Lemma lem8075011 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8075012 {B : Type'} : (term119 B) = (term127 B).
Proof. exact (MK_COMB (@lem8075011 B) (@lem8075010 B)). Qed.
Lemma lem8075013 {B : Type'} : term127 B.
Proof. exact (EQ_MP (@lem8075012 B) (@lem8075004 B)). Qed.
Lemma lem8075014 {_143310 _143311 _143313 _143320 A B C P : Type'} (h1 : term167 _143310 _143311 _143313 _143320 A B C P) : term167 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (h1). Qed.
Lemma lem8075015 {_143310 _143311 _143313 _143320 A B C P : Type'} (h1 : term167 _143310 _143311 _143313 _143320 A B C P) : term159 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8075014 _143310 _143311 _143313 _143320 A B C P h1 (@lem8075013 B)). Qed.
Lemma lem8075016 {_143310 _143311 _143313 _143320 A B C P : Type'} : term168 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (fun h0 : term167 _143310 _143311 _143313 _143320 A B C P => @lem8075015 _143310 _143311 _143313 _143320 A B C P h0). Qed.
Lemma lem8075017 {B : Type'} (_106907 : B) (h1 : _106907 = (term131 B)) : _106907 = (term131 B).
Proof. exact (h1). Qed.
Lemma lem8075020 {B : Type'} (_106907 : B) (h1 : _106907 = (term131 B)) : (term131 B) = _106907.
Proof. exact (SYM (@lem8075017 B _106907 h1)). Qed.
Lemma lem8075021 {B : Type'} (_106907 : B) (h1 : _106907 = (term131 B)) : (term131 B) = _106907.
Proof. exact (@lem8075020 B _106907 h1). Qed.
Lemma lem8075022 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) : (term132 _143310 _143311 _143313 B clauses c x) = (term132 _143310 _143311 _143313 B clauses c x).
Proof. exact (eq_refl (term132 _143310 _143311 _143313 B clauses c x)). Qed.
Lemma lem8075023 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) (h1 : _106907 = (term131 B)) : ((@CASEWISE B _143313 _143310 _143311 clauses c x) = (term131 B)) = ((@CASEWISE B _143313 _143310 _143311 clauses c x) = _106907).
Proof. exact (MK_COMB (@lem8075022 _143310 _143311 _143313 B clauses c x) (@lem8075021 B _106907 h1)). Qed.
Lemma lem8075024 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) : (term133 _143310 _143311 _143313 B clauses x) = (term133 _143310 _143311 _143313 B clauses x).
Proof. exact (eq_refl (term133 _143310 _143311 _143313 B clauses x)). Qed.
Lemma lem8075025 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) (h1 : _106907 = (term131 B)) : (term134 _143310 _143311 _143313 B clauses c x) = (term135 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (MK_COMB (@lem8075024 _143310 _143311 _143313 B clauses x) (@lem8075023 _143310 _143311 _143313 B clauses c x _106907 h1)). Qed.
Lemma lem8075026 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term136 _143310 _143311 _143313 B clauses x c) = (term136 _143310 _143311 _143313 B clauses x c).
Proof. exact (eq_refl (term136 _143310 _143311 _143313 B clauses x c)). Qed.
Lemma lem8075027 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) (h1 : _106907 = (term131 B)) : (term137 _143310 _143311 _143313 B clauses c x) = (term138 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (MK_COMB (@lem8075026 _143310 _143311 _143313 B clauses x c) (@lem8075025 _143310 _143311 _143313 B clauses c x _106907 h1)). Qed.
Lemma lem8075028 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) (h1 : _106907 = (term131 B)) : (term139 _143310 _143311 _143313 B clauses c) = (term140 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (fun_ext (fun x : _143310 => @lem8075027 _143310 _143311 _143313 B clauses c x _106907 h1)). Qed.
Lemma lem8075029 {_143310 : Type'} : (@all _143310) = (@all _143310).
Proof. exact (eq_refl (@all _143310)). Qed.
Lemma lem8075030 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) (h1 : _106907 = (term131 B)) : (term141 _143310 _143311 _143313 B clauses c) = (term142 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (MK_COMB (@lem8075029 _143310) (@lem8075028 _143310 _143311 _143313 B clauses c _106907 h1)). Qed.
Lemma lem8075031 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) (h1 : _106907 = (term131 B)) : (term143 _143310 _143311 _143313 B clauses) = (term144 _143310 _143311 _143313 B clauses _106907).
Proof. exact (fun_ext (fun c : _143311 => @lem8075030 _143310 _143311 _143313 B clauses c _106907 h1)). Qed.
Lemma lem8075032 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8075033 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) (h1 : _106907 = (term131 B)) : (term145 _143310 _143311 _143313 B clauses) = (term146 _143310 _143311 _143313 B clauses _106907).
Proof. exact (MK_COMB (@lem8075032 _143311) (@lem8075031 _143310 _143311 _143313 B clauses _106907 h1)). Qed.
Lemma lem8075034 {_143310 _143311 _143313 B : Type'} (_106907 : B) (h1 : _106907 = (term131 B)) : (term147 _143310 _143311 _143313 B) = (term148 _143310 _143311 _143313 B _106907).
Proof. exact (fun_ext (fun clauses : type1637 _143310 _143311 _143313 B => @lem8075033 _143310 _143311 _143313 B clauses _106907 h1)). Qed.
Lemma lem8075035 {_143310 _143311 _143313 B : Type'} : (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B)))) = (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))))). Qed.
Lemma lem8075036 {_143310 _143311 _143313 B : Type'} (_106907 : B) (h1 : _106907 = (term131 B)) : (term117 _143310 _143311 _143313 B) = (term149 _143310 _143311 _143313 B _106907).
Proof. exact (MK_COMB (@lem8075035 _143310 _143311 _143313 B) (@lem8075034 _143310 _143311 _143313 B _106907 h1)). Qed.
Lemma lem8075037 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8075038 {_143310 _143311 _143313 B : Type'} (_106907 : B) (h1 : _106907 = (term131 B)) : (term150 _143310 _143311 _143313 B) = (term151 _143310 _143311 _143313 B _106907).
Proof. exact (MK_COMB (@lem8075037) (@lem8075036 _143310 _143311 _143313 B _106907 h1)). Qed.
Lemma lem8075046 {B : Type'} (_106907 : B) (h1 : _106907 = (term131 B)) : (term131 B) = _106907.
Proof. exact (SYM (@lem8075017 B _106907 h1)). Qed.
Lemma lem8075047 {B : Type'} (_106907 : B) (h1 : _106907 = (term131 B)) : (term131 B) = _106907.
Proof. exact (@lem8075046 B _106907 h1). Qed.
Lemma lem8075048 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) : (term169 A B C P clauses c x) = (term169 A B C P clauses c x).
Proof. exact (eq_refl (term169 A B C P clauses c x)). Qed.
Lemma lem8075049 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) (h1 : _106907 = (term131 B)) : ((@CASEWISE B P A C clauses c x) = (term131 B)) = ((@CASEWISE B P A C clauses c x) = _106907).
Proof. exact (MK_COMB (@lem8075048 A B C P clauses c x) (@lem8075047 B _106907 h1)). Qed.
Lemma lem8075050 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) : (term170 A B C P clauses x) = (term170 A B C P clauses x).
Proof. exact (eq_refl (term170 A B C P clauses x)). Qed.
Lemma lem8075051 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) (h1 : _106907 = (term131 B)) : (term171 A B C P clauses c x) = (term172 A B C P clauses c x _106907).
Proof. exact (MK_COMB (@lem8075050 A B C P clauses x) (@lem8075049 A B C P clauses c x _106907 h1)). Qed.
Lemma lem8075052 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) (c : C) : (term173 A B C P clauses x c) = (term173 A B C P clauses x c).
Proof. exact (eq_refl (term173 A B C P clauses x c)). Qed.
Lemma lem8075053 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) (h1 : _106907 = (term131 B)) : (term174 A B C P clauses c x) = (term175 A B C P clauses c x _106907).
Proof. exact (MK_COMB (@lem8075052 A B C P clauses x c) (@lem8075051 A B C P clauses c x _106907 h1)). Qed.
Lemma lem8075054 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) (h1 : _106907 = (term131 B)) : (term176 A B C P clauses c) = (term177 A B C P clauses c _106907).
Proof. exact (fun_ext (fun x : A => @lem8075053 A B C P clauses c x _106907 h1)). Qed.
Lemma lem8075055 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8075056 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) (h1 : _106907 = (term131 B)) : (term178 A B C P clauses c) = (term179 A B C P clauses c _106907).
Proof. exact (MK_COMB (@lem8075055 A) (@lem8075054 A B C P clauses c _106907 h1)). Qed.
Lemma lem8075057 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) (h1 : _106907 = (term131 B)) : (term180 A B C P clauses) = (term181 A B C P clauses _106907).
Proof. exact (fun_ext (fun c : C => @lem8075056 A B C P clauses c _106907 h1)). Qed.
Lemma lem8075058 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8075059 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) (h1 : _106907 = (term131 B)) : (term182 A B C P clauses) = (term183 A B C P clauses _106907).
Proof. exact (MK_COMB (@lem8075058 C) (@lem8075057 A B C P clauses _106907 h1)). Qed.
Lemma lem8075060 {A B C P : Type'} (_106907 : B) (h1 : _106907 = (term131 B)) : (term184 A B C P) = (term185 A B C P _106907).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8075059 A B C P clauses _106907 h1)). Qed.
Lemma lem8075061 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8075062 {A B C P : Type'} (_106907 : B) (h1 : _106907 = (term131 B)) : (term115 A B C P) = (term186 A B C P _106907).
Proof. exact (MK_COMB (@lem8075061 A B C P) (@lem8075060 A B C P _106907 h1)). Qed.
Lemma lem8075063 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8075064 {A B C P : Type'} (_106907 : B) (h1 : _106907 = (term131 B)) : (term187 A B C P) = (term188 A B C P _106907).
Proof. exact (MK_COMB (@lem8075063) (@lem8075062 A B C P _106907 h1)). Qed.
Lemma lem8075065 : False = False.
Proof. exact (eq_refl False). Qed.
Lemma lem8075066 {A B C P : Type'} (_106907 : B) (h1 : _106907 = (term131 B)) : (term189 A B C P) = (term190 A B C P _106907).
Proof. exact (MK_COMB (@lem8075064 A B C P _106907 h1) (@lem8075065)). Qed.
Lemma lem8075067 {_143311 _143313 _143320 B : Type'} : (term191 _143311 _143313 _143320 B) = (term191 _143311 _143313 _143320 B).
Proof. exact (eq_refl (term191 _143311 _143313 _143320 B)). Qed.
Lemma lem8075068 {_143311 _143313 _143320 A B C P : Type'} (_106907 : B) (h1 : _106907 = (term131 B)) : (term192 _143311 _143313 _143320 A B C P) = (term193 _143311 _143313 _143320 A B C P _106907).
Proof. exact (MK_COMB (@lem8075067 _143311 _143313 _143320 B) (@lem8075066 A B C P _106907 h1)). Qed.
Lemma lem8075069 {_143311 _143313 _143320 A : Type'} : (term191 _143311 _143313 _143320 A) = (term191 _143311 _143313 _143320 A).
Proof. exact (eq_refl (term191 _143311 _143313 _143320 A)). Qed.
Lemma lem8075070 {_143311 _143313 _143320 A B C P : Type'} (_106907 : B) (h1 : _106907 = (term131 B)) : (term194 _143311 _143313 _143320 A B C P) = (term195 _143311 _143313 _143320 A B C P _106907).
Proof. exact (MK_COMB (@lem8075069 _143311 _143313 _143320 A) (@lem8075068 _143311 _143313 _143320 A B C P _106907 h1)). Qed.
Lemma lem8075071 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106907 : B) (h1 : _106907 = (term131 B)) : (term152 _143310 _143311 _143313 _143320 A B C P) = (term196 _143310 _143311 _143313 _143320 A B C P _106907).
Proof. exact (MK_COMB (@lem8075038 _143310 _143311 _143313 B _106907 h1) (@lem8075070 _143311 _143313 _143320 A B C P _106907 h1)). Qed.
Lemma lem8075072 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term151 _143310 _143311 _143313 A _106906) = (term151 _143310 _143311 _143313 A _106906).
Proof. exact (eq_refl (term151 _143310 _143311 _143313 A _106906)). Qed.
Lemma lem8075073 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (_106907 : B) (h1 : _106907 = (term131 B)) : (term154 _143310 _143311 _143313 _143320 A B C P _106906) = (term197 _143310 _143311 _143313 _143320 A B C P _106906 _106907).
Proof. exact (MK_COMB (@lem8075072 _143310 _143311 _143313 A _106906) (@lem8075071 _143310 _143311 _143313 _143320 A B C P _106907 h1)). Qed.
Lemma lem8075074 {A B C P : Type'} : (term155 A B C P) = (term155 A B C P).
Proof. exact (eq_refl (term155 A B C P)). Qed.
Lemma lem8075075 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (_106907 : B) (h1 : _106907 = (term131 B)) : (term156 _143310 _143311 _143313 _143320 A B C P _106906) = (term198 _143310 _143311 _143313 _143320 A B C P _106906 _106907).
Proof. exact (MK_COMB (@lem8075074 A B C P) (@lem8075073 _143310 _143311 _143313 _143320 A B C P _106906 _106907 h1)). Qed.
Lemma lem8075076 {A : Type'} : (term157 A) = (term157 A).
Proof. exact (eq_refl (term157 A)). Qed.
Lemma lem8075077 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (_106907 : B) (h1 : _106907 = (term131 B)) : (term158 _143310 _143311 _143313 _143320 A B C P _106906) = (term199 _143310 _143311 _143313 _143320 A B C P _106906 _106907).
Proof. exact (MK_COMB (@lem8075076 A) (@lem8075075 _143310 _143311 _143313 _143320 A B C P _106906 _106907 h1)). Qed.
Lemma lem8075078 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106907 : B) (h1 : _106907 = (term131 B)) : (term200 _143310 _143311 _143313 _143320 A B C P) = (term201 _143310 _143311 _143313 _143320 A B C P _106907).
Proof. exact (fun_ext (fun _106906 : A => @lem8075077 _143310 _143311 _143313 _143320 A B C P _106906 _106907 h1)). Qed.
Lemma lem8075079 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8075080 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106907 : B) (h1 : _106907 = (term131 B)) : (term159 _143310 _143311 _143313 _143320 A B C P) = (term202 _143310 _143311 _143313 _143320 A B C P _106907).
Proof. exact (MK_COMB (@lem8075079 A) (@lem8075078 _143310 _143311 _143313 _143320 A B C P _106907 h1)). Qed.
Lemma lem8075081 {B : Type'} : (term157 B) = (term157 B).
Proof. exact (eq_refl (term157 B)). Qed.
Lemma lem8075082 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106907 : B) (h1 : _106907 = (term131 B)) : (term167 _143310 _143311 _143313 _143320 A B C P) = (term203 _143310 _143311 _143313 _143320 A B C P _106907).
Proof. exact (MK_COMB (@lem8075081 B) (@lem8075080 _143310 _143311 _143313 _143320 A B C P _106907 h1)). Qed.
Lemma lem8075083 {_143310 _143311 _143313 _143320 A B C P : Type'} (h1 : term204 _143310 _143311 _143313 _143320 A B C P) : term204 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (h1). Qed.
Lemma lem8075084 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106907 : B) (h1 : term204 _143310 _143311 _143313 _143320 A B C P) : term205 _143310 _143311 _143313 _143320 A B C P _106907.
Proof. exact (@lem8075083 _143310 _143311 _143313 _143320 A B C P h1 _106907). Qed.
Lemma lem8075085 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106907 : B) : (term205 _143310 _143311 _143313 _143320 A B C P _106907) = (term203 _143310 _143311 _143313 _143320 A B C P _106907).
Proof. exact (eq_refl (term205 _143310 _143311 _143313 _143320 A B C P _106907)). Qed.
Lemma lem8075086 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106907 : B) (h1 : term204 _143310 _143311 _143313 _143320 A B C P) : term203 _143310 _143311 _143313 _143320 A B C P _106907.
Proof. exact (EQ_MP (@lem8075085 _143310 _143311 _143313 _143320 A B C P _106907) (@lem8075084 _143310 _143311 _143313 _143320 A B C P _106907 h1)). Qed.
Lemma lem8075087 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106907 : B) (h1 : _106907 = (term131 B)) : (term203 _143310 _143311 _143313 _143320 A B C P _106907) = (term167 _143310 _143311 _143313 _143320 A B C P).
Proof. exact (SYM (@lem8075082 _143310 _143311 _143313 _143320 A B C P _106907 h1)). Qed.
Lemma lem8075088 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106907 : B) (h1 : term204 _143310 _143311 _143313 _143320 A B C P) (h2 : _106907 = (term131 B)) : term167 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (EQ_MP (@lem8075087 _143310 _143311 _143313 _143320 A B C P _106907 h2) (@lem8075086 _143310 _143311 _143313 _143320 A B C P _106907 h1)). Qed.
Lemma lem8075089 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106907 : B) (h1 : _106907 = (term131 B)) : term206 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (fun h0 : term204 _143310 _143311 _143313 _143320 A B C P => @lem8075088 _143310 _143311 _143313 _143320 A B C P _106907 h0 h1). Qed.
Lemma lem8075090 {_143310 _143311 _143313 _143320 A B C P : Type'} : term207 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem51 (term167 _143310 _143311 _143313 _143320 A B C P) (term204 _143310 _143311 _143313 _143320 A B C P) (term159 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8075091 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106907 : B) (h1 : _106907 = (term131 B)) : term208 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8075090 _143310 _143311 _143313 _143320 A B C P (@lem8075089 _143310 _143311 _143313 _143320 A B C P _106907 h1)). Qed.
Lemma lem8075092 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106907 : B) (h1 : _106907 = (term131 B)) : term209 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8075091 _143310 _143311 _143313 _143320 A B C P _106907 h1 (@lem8075016 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8075093 {B : Type'} : (term131 B) = (term131 B).
Proof. exact (eq_refl (term131 B)). Qed.
Lemma lem8075094 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106907 : B) : term210 _143310 _143311 _143313 _143320 A B C P _106907.
Proof. exact (fun h0 : _106907 = (term131 B) => @lem8075092 _143310 _143311 _143313 _143320 A B C P _106907 h0). Qed.
Lemma lem8075095 {_143310 _143311 _143313 _143320 A B C P : Type'} : term211 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8075094 _143310 _143311 _143313 _143320 A B C P (term131 B)). Qed.
Lemma lem8075096 {_143310 _143311 _143313 _143320 A B C P : Type'} : term209 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8075095 _143310 _143311 _143313 _143320 A B C P (@lem8075093 B)). Qed.
Lemma lem8075097 {_143320 : Type'} (P : _143320 -> Prop) : term118 _143320 P.
Proof. exact (@lem19732 _143320 P). Qed.
Lemma lem8075098 {_143320 : Type'} : term119 _143320.
Proof. exact (@lem8075097 _143320 (term120 _143320)). Qed.
Lemma lem8075099 {_143320 : Type'} : (term121 _143320) = True.
Proof. exact (eq_refl (term121 _143320)). Qed.
Lemma lem8075100 {_143320 : Type'} (x : _143320) : (term122 _143320 x) = True.
Proof. exact (eq_refl (term122 _143320 x)). Qed.
Lemma lem8075101 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8075102 {_143320 : Type'} (x : _143320) : (term123 _143320 x) = (imp True).
Proof. exact (MK_COMB (@lem8075101) (@lem8075100 _143320 x)). Qed.
Lemma lem8075103 {_143320 : Type'} (x : _143320) : (term124 _143320 x) = (True -> True).
Proof. exact (MK_COMB (@lem8075102 _143320 x) (@lem8075099 _143320)). Qed.
Lemma lem8075104 {_143320 : Type'} : (term125 _143320) = (term126 _143320).
Proof. exact (fun_ext (fun x : _143320 => @lem8075103 _143320 x)). Qed.
Lemma lem8075105 {_143320 : Type'} : (@all _143320) = (@all _143320).
Proof. exact (eq_refl (@all _143320)). Qed.
Lemma lem8075106 {_143320 : Type'} : (term119 _143320) = (term127 _143320).
Proof. exact (MK_COMB (@lem8075105 _143320) (@lem8075104 _143320)). Qed.
Lemma lem8075107 {_143320 : Type'} : term127 _143320.
Proof. exact (EQ_MP (@lem8075106 _143320) (@lem8075098 _143320)). Qed.
Lemma lem8075108 {_143310 _143311 _143313 _143320 A B C P : Type'} (h1 : term212 _143310 _143311 _143313 _143320 A B C P) : term212 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (h1). Qed.
Lemma lem8075109 {_143310 _143311 _143313 _143320 A B C P : Type'} (h1 : term212 _143310 _143311 _143313 _143320 A B C P) : term204 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8075108 _143310 _143311 _143313 _143320 A B C P h1 (@lem8075107 _143320)). Qed.
Lemma lem8075110 {_143310 _143311 _143313 _143320 A B C P : Type'} : term213 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (fun h0 : term212 _143310 _143311 _143313 _143320 A B C P => @lem8075109 _143310 _143311 _143313 _143320 A B C P h0). Qed.
Lemma lem8075111 {_143320 : Type'} (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : _106908 = (term131 _143320).
Proof. exact (h1). Qed.
Lemma lem8075114 {_143320 : Type'} (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term131 _143320) = _106908.
Proof. exact (SYM (@lem8075111 _143320 _106908 h1)). Qed.
Lemma lem8075115 {_143320 : Type'} (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term131 _143320) = _106908.
Proof. exact (@lem8075114 _143320 _106908 h1). Qed.
Lemma lem8075116 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) : (term214 _143311 _143313 _143320 A clauses c x) = (term214 _143311 _143313 _143320 A clauses c x).
Proof. exact (eq_refl (term214 _143311 _143313 _143320 A clauses c x)). Qed.
Lemma lem8075117 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : ((@CASEWISE _143320 _143313 A _143311 clauses c x) = (term131 _143320)) = ((@CASEWISE _143320 _143313 A _143311 clauses c x) = _106908).
Proof. exact (MK_COMB (@lem8075116 _143311 _143313 _143320 A clauses c x) (@lem8075115 _143320 _106908 h1)). Qed.
Lemma lem8075118 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) : (term215 _143311 _143313 _143320 A clauses x) = (term215 _143311 _143313 _143320 A clauses x).
Proof. exact (eq_refl (term215 _143311 _143313 _143320 A clauses x)). Qed.
Lemma lem8075119 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term216 _143311 _143313 _143320 A clauses c x) = (term217 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (MK_COMB (@lem8075118 _143311 _143313 _143320 A clauses x) (@lem8075117 _143311 _143313 _143320 A clauses c x _106908 h1)). Qed.
Lemma lem8075120 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term218 _143311 _143313 _143320 A clauses x c) = (term218 _143311 _143313 _143320 A clauses x c).
Proof. exact (eq_refl (term218 _143311 _143313 _143320 A clauses x c)). Qed.
Lemma lem8075121 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term219 _143311 _143313 _143320 A clauses c x) = (term220 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (MK_COMB (@lem8075120 _143311 _143313 _143320 A clauses x c) (@lem8075119 _143311 _143313 _143320 A clauses c x _106908 h1)). Qed.
Lemma lem8075122 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term221 _143311 _143313 _143320 A clauses c) = (term222 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (fun_ext (fun x : A => @lem8075121 _143311 _143313 _143320 A clauses c x _106908 h1)). Qed.
Lemma lem8075123 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8075124 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term223 _143311 _143313 _143320 A clauses c) = (term224 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (MK_COMB (@lem8075123 A) (@lem8075122 _143311 _143313 _143320 A clauses c _106908 h1)). Qed.
Lemma lem8075125 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term225 _143311 _143313 _143320 A clauses) = (term226 _143311 _143313 _143320 A clauses _106908).
Proof. exact (fun_ext (fun c : _143311 => @lem8075124 _143311 _143313 _143320 A clauses c _106908 h1)). Qed.
Lemma lem8075126 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8075127 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term227 _143311 _143313 _143320 A clauses) = (term228 _143311 _143313 _143320 A clauses _106908).
Proof. exact (MK_COMB (@lem8075126 _143311) (@lem8075125 _143311 _143313 _143320 A clauses _106908 h1)). Qed.
Lemma lem8075128 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term229 _143311 _143313 _143320 A) = (term230 _143311 _143313 _143320 A _106908).
Proof. exact (fun_ext (fun clauses : type1634 _143311 _143313 _143320 A => @lem8075127 _143311 _143313 _143320 A clauses _106908 h1)). Qed.
Lemma lem8075129 {_143311 _143313 _143320 A : Type'} : (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320)))) = (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))))). Qed.
Lemma lem8075130 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term116 _143311 _143313 _143320 A) = (term231 _143311 _143313 _143320 A _106908).
Proof. exact (MK_COMB (@lem8075129 _143311 _143313 _143320 A) (@lem8075128 _143311 _143313 _143320 A _106908 h1)). Qed.
Lemma lem8075131 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8075132 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term191 _143311 _143313 _143320 A) = (term232 _143311 _143313 _143320 A _106908).
Proof. exact (MK_COMB (@lem8075131) (@lem8075130 _143311 _143313 _143320 A _106908 h1)). Qed.
Lemma lem8075134 {_143320 : Type'} (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term131 _143320) = _106908.
Proof. exact (SYM (@lem8075111 _143320 _106908 h1)). Qed.
Lemma lem8075135 {_143320 : Type'} (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term131 _143320) = _106908.
Proof. exact (@lem8075134 _143320 _106908 h1). Qed.
Lemma lem8075136 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) : (term214 _143311 _143313 _143320 B clauses c x) = (term214 _143311 _143313 _143320 B clauses c x).
Proof. exact (eq_refl (term214 _143311 _143313 _143320 B clauses c x)). Qed.
Lemma lem8075137 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : ((@CASEWISE _143320 _143313 B _143311 clauses c x) = (term131 _143320)) = ((@CASEWISE _143320 _143313 B _143311 clauses c x) = _106908).
Proof. exact (MK_COMB (@lem8075136 _143311 _143313 _143320 B clauses c x) (@lem8075135 _143320 _106908 h1)). Qed.
Lemma lem8075138 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) : (term215 _143311 _143313 _143320 B clauses x) = (term215 _143311 _143313 _143320 B clauses x).
Proof. exact (eq_refl (term215 _143311 _143313 _143320 B clauses x)). Qed.
Lemma lem8075139 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term216 _143311 _143313 _143320 B clauses c x) = (term217 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (MK_COMB (@lem8075138 _143311 _143313 _143320 B clauses x) (@lem8075137 _143311 _143313 _143320 B clauses c x _106908 h1)). Qed.
Lemma lem8075140 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term218 _143311 _143313 _143320 B clauses x c) = (term218 _143311 _143313 _143320 B clauses x c).
Proof. exact (eq_refl (term218 _143311 _143313 _143320 B clauses x c)). Qed.
Lemma lem8075141 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term219 _143311 _143313 _143320 B clauses c x) = (term220 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (MK_COMB (@lem8075140 _143311 _143313 _143320 B clauses x c) (@lem8075139 _143311 _143313 _143320 B clauses c x _106908 h1)). Qed.
Lemma lem8075142 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term221 _143311 _143313 _143320 B clauses c) = (term222 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (fun_ext (fun x : B => @lem8075141 _143311 _143313 _143320 B clauses c x _106908 h1)). Qed.
Lemma lem8075143 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8075144 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term223 _143311 _143313 _143320 B clauses c) = (term224 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (MK_COMB (@lem8075143 B) (@lem8075142 _143311 _143313 _143320 B clauses c _106908 h1)). Qed.
Lemma lem8075145 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term225 _143311 _143313 _143320 B clauses) = (term226 _143311 _143313 _143320 B clauses _106908).
Proof. exact (fun_ext (fun c : _143311 => @lem8075144 _143311 _143313 _143320 B clauses c _106908 h1)). Qed.
Lemma lem8075146 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8075147 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term227 _143311 _143313 _143320 B clauses) = (term228 _143311 _143313 _143320 B clauses _106908).
Proof. exact (MK_COMB (@lem8075146 _143311) (@lem8075145 _143311 _143313 _143320 B clauses _106908 h1)). Qed.
Lemma lem8075148 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term229 _143311 _143313 _143320 B) = (term230 _143311 _143313 _143320 B _106908).
Proof. exact (fun_ext (fun clauses : type1634 _143311 _143313 _143320 B => @lem8075147 _143311 _143313 _143320 B clauses _106908 h1)). Qed.
Lemma lem8075149 {_143311 _143313 _143320 B : Type'} : (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320)))) = (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))))). Qed.
Lemma lem8075150 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term116 _143311 _143313 _143320 B) = (term231 _143311 _143313 _143320 B _106908).
Proof. exact (MK_COMB (@lem8075149 _143311 _143313 _143320 B) (@lem8075148 _143311 _143313 _143320 B _106908 h1)). Qed.
Lemma lem8075151 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8075152 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term191 _143311 _143313 _143320 B) = (term232 _143311 _143313 _143320 B _106908).
Proof. exact (MK_COMB (@lem8075151) (@lem8075150 _143311 _143313 _143320 B _106908 h1)). Qed.
Lemma lem8075153 {A B C P : Type'} (_106907 : B) : (term190 A B C P _106907) = (term190 A B C P _106907).
Proof. exact (eq_refl (term190 A B C P _106907)). Qed.
Lemma lem8075154 {_143311 _143313 _143320 A B C P : Type'} (_106907 : B) (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term193 _143311 _143313 _143320 A B C P _106907) = (term233 _143311 _143313 _143320 A B C P _106908 _106907).
Proof. exact (MK_COMB (@lem8075152 _143311 _143313 _143320 B _106908 h1) (@lem8075153 A B C P _106907)). Qed.
Lemma lem8075155 {_143311 _143313 _143320 A B C P : Type'} (_106907 : B) (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term195 _143311 _143313 _143320 A B C P _106907) = (term234 _143311 _143313 _143320 A B C P _106908 _106907).
Proof. exact (MK_COMB (@lem8075132 _143311 _143313 _143320 A _106908 h1) (@lem8075154 _143311 _143313 _143320 A B C P _106907 _106908 h1)). Qed.
Lemma lem8075156 {_143310 _143311 _143313 B : Type'} (_106907 : B) : (term151 _143310 _143311 _143313 B _106907) = (term151 _143310 _143311 _143313 B _106907).
Proof. exact (eq_refl (term151 _143310 _143311 _143313 B _106907)). Qed.
Lemma lem8075157 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106907 : B) (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term196 _143310 _143311 _143313 _143320 A B C P _106907) = (term235 _143310 _143311 _143313 _143320 A B C P _106908 _106907).
Proof. exact (MK_COMB (@lem8075156 _143310 _143311 _143313 B _106907) (@lem8075155 _143311 _143313 _143320 A B C P _106907 _106908 h1)). Qed.
Lemma lem8075158 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term151 _143310 _143311 _143313 A _106906) = (term151 _143310 _143311 _143313 A _106906).
Proof. exact (eq_refl (term151 _143310 _143311 _143313 A _106906)). Qed.
Lemma lem8075159 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (_106907 : B) (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term197 _143310 _143311 _143313 _143320 A B C P _106906 _106907) = (term236 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907).
Proof. exact (MK_COMB (@lem8075158 _143310 _143311 _143313 A _106906) (@lem8075157 _143310 _143311 _143313 _143320 A B C P _106907 _106908 h1)). Qed.
Lemma lem8075160 {A B C P : Type'} : (term155 A B C P) = (term155 A B C P).
Proof. exact (eq_refl (term155 A B C P)). Qed.
Lemma lem8075161 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (_106907 : B) (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term198 _143310 _143311 _143313 _143320 A B C P _106906 _106907) = (term237 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907).
Proof. exact (MK_COMB (@lem8075160 A B C P) (@lem8075159 _143310 _143311 _143313 _143320 A B C P _106906 _106907 _106908 h1)). Qed.
Lemma lem8075162 {A : Type'} : (term157 A) = (term157 A).
Proof. exact (eq_refl (term157 A)). Qed.
Lemma lem8075163 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (_106907 : B) (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term199 _143310 _143311 _143313 _143320 A B C P _106906 _106907) = (term238 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907).
Proof. exact (MK_COMB (@lem8075162 A) (@lem8075161 _143310 _143311 _143313 _143320 A B C P _106906 _106907 _106908 h1)). Qed.
Lemma lem8075164 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106907 : B) (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term201 _143310 _143311 _143313 _143320 A B C P _106907) = (term239 _143310 _143311 _143313 _143320 A B C P _106908 _106907).
Proof. exact (fun_ext (fun _106906 : A => @lem8075163 _143310 _143311 _143313 _143320 A B C P _106906 _106907 _106908 h1)). Qed.
Lemma lem8075165 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8075166 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106907 : B) (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term202 _143310 _143311 _143313 _143320 A B C P _106907) = (term240 _143310 _143311 _143313 _143320 A B C P _106908 _106907).
Proof. exact (MK_COMB (@lem8075165 A) (@lem8075164 _143310 _143311 _143313 _143320 A B C P _106907 _106908 h1)). Qed.
Lemma lem8075167 {B : Type'} : (term157 B) = (term157 B).
Proof. exact (eq_refl (term157 B)). Qed.
Lemma lem8075168 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106907 : B) (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term203 _143310 _143311 _143313 _143320 A B C P _106907) = (term241 _143310 _143311 _143313 _143320 A B C P _106908 _106907).
Proof. exact (MK_COMB (@lem8075167 B) (@lem8075166 _143310 _143311 _143313 _143320 A B C P _106907 _106908 h1)). Qed.
Lemma lem8075169 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term242 _143310 _143311 _143313 _143320 A B C P) = (term243 _143310 _143311 _143313 _143320 A B C P _106908).
Proof. exact (fun_ext (fun _106907 : B => @lem8075168 _143310 _143311 _143313 _143320 A B C P _106907 _106908 h1)). Qed.
Lemma lem8075170 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8075171 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term204 _143310 _143311 _143313 _143320 A B C P) = (term244 _143310 _143311 _143313 _143320 A B C P _106908).
Proof. exact (MK_COMB (@lem8075170 B) (@lem8075169 _143310 _143311 _143313 _143320 A B C P _106908 h1)). Qed.
Lemma lem8075172 {_143320 : Type'} : (term157 _143320) = (term157 _143320).
Proof. exact (eq_refl (term157 _143320)). Qed.
Lemma lem8075173 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term212 _143310 _143311 _143313 _143320 A B C P) = (term245 _143310 _143311 _143313 _143320 A B C P _106908).
Proof. exact (MK_COMB (@lem8075172 _143320) (@lem8075171 _143310 _143311 _143313 _143320 A B C P _106908 h1)). Qed.
Lemma lem8075174 {_143310 _143311 _143313 _143320 A B C P : Type'} (h1 : term246 _143310 _143311 _143313 _143320 A B C P) : term246 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (h1). Qed.
Lemma lem8075175 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (h1 : term246 _143310 _143311 _143313 _143320 A B C P) : term247 _143310 _143311 _143313 _143320 A B C P _106908.
Proof. exact (@lem8075174 _143310 _143311 _143313 _143320 A B C P h1 _106908). Qed.
Lemma lem8075176 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) : (term247 _143310 _143311 _143313 _143320 A B C P _106908) = (term245 _143310 _143311 _143313 _143320 A B C P _106908).
Proof. exact (eq_refl (term247 _143310 _143311 _143313 _143320 A B C P _106908)). Qed.
Lemma lem8075177 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (h1 : term246 _143310 _143311 _143313 _143320 A B C P) : term245 _143310 _143311 _143313 _143320 A B C P _106908.
Proof. exact (EQ_MP (@lem8075176 _143310 _143311 _143313 _143320 A B C P _106908) (@lem8075175 _143310 _143311 _143313 _143320 A B C P _106908 h1)). Qed.
Lemma lem8075178 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : (term245 _143310 _143311 _143313 _143320 A B C P _106908) = (term212 _143310 _143311 _143313 _143320 A B C P).
Proof. exact (SYM (@lem8075173 _143310 _143311 _143313 _143320 A B C P _106908 h1)). Qed.
Lemma lem8075179 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (h1 : term246 _143310 _143311 _143313 _143320 A B C P) (h2 : _106908 = (term131 _143320)) : term212 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (EQ_MP (@lem8075178 _143310 _143311 _143313 _143320 A B C P _106908 h2) (@lem8075177 _143310 _143311 _143313 _143320 A B C P _106908 h1)). Qed.
Lemma lem8075180 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : term248 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (fun h0 : term246 _143310 _143311 _143313 _143320 A B C P => @lem8075179 _143310 _143311 _143313 _143320 A B C P _106908 h0 h1). Qed.
Lemma lem8075181 {_143310 _143311 _143313 _143320 A B C P : Type'} : term249 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem51 (term212 _143310 _143311 _143313 _143320 A B C P) (term246 _143310 _143311 _143313 _143320 A B C P) (term204 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8075182 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : term250 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8075181 _143310 _143311 _143313 _143320 A B C P (@lem8075180 _143310 _143311 _143313 _143320 A B C P _106908 h1)). Qed.
Lemma lem8075183 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (h1 : _106908 = (term131 _143320)) : term251 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8075182 _143310 _143311 _143313 _143320 A B C P _106908 h1 (@lem8075110 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8075184 {_143320 : Type'} : (term131 _143320) = (term131 _143320).
Proof. exact (eq_refl (term131 _143320)). Qed.
Lemma lem8075185 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) : term252 _143310 _143311 _143313 _143320 A B C P _106908.
Proof. exact (fun h0 : _106908 = (term131 _143320) => @lem8075183 _143310 _143311 _143313 _143320 A B C P _106908 h0). Qed.
Lemma lem8075186 {_143310 _143311 _143313 _143320 A B C P : Type'} : term253 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8075185 _143310 _143311 _143313 _143320 A B C P (term131 _143320)). Qed.
Lemma lem8075187 {_143310 _143311 _143313 _143320 A B C P : Type'} : term251 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8075186 _143310 _143311 _143313 _143320 A B C P (@lem8075184 _143320)). Qed.
Lemma lem8075188 {_143310 _143311 _143313 _143320 A B C P : Type'} (h1 : term246 _143310 _143311 _143313 _143320 A B C P) : term246 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (h1). Qed.
Lemma lem8075189 {_143310 _143311 _143313 _143320 A B C P : Type'} : term254 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (fun h0 : term246 _143310 _143311 _143313 _143320 A B C P => @lem8075188 _143310 _143311 _143313 _143320 A B C P h0). Qed.
Lemma lem8075190 {_143310 _143311 _143313 _143320 A B C P : Type'} : term255 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem51 (term246 _143310 _143311 _143313 _143320 A B C P) (term246 _143310 _143311 _143313 _143320 A B C P) (term204 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8075191 {_143310 _143311 _143313 _143320 A B C P : Type'} : term256 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8075190 _143310 _143311 _143313 _143320 A B C P (@lem8075189 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8075192 {_143310 _143311 _143313 _143320 A B C P : Type'} : term251 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8075191 _143310 _143311 _143313 _143320 A B C P (@lem8075187 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8075193 {_143310 _143311 _143313 _143320 A B C P : Type'} : term257 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem51 (term204 _143310 _143311 _143313 _143320 A B C P) (term246 _143310 _143311 _143313 _143320 A B C P) (term159 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8075194 {_143310 _143311 _143313 _143320 A B C P : Type'} : term258 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8075193 _143310 _143311 _143313 _143320 A B C P (@lem8075192 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8075195 {_143310 _143311 _143313 _143320 A B C P : Type'} : term259 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8075194 _143310 _143311 _143313 _143320 A B C P (@lem8075096 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8075196 {_143310 _143311 _143313 _143320 A B C P : Type'} : term260 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem51 (term159 _143310 _143311 _143313 _143320 A B C P) (term246 _143310 _143311 _143313 _143320 A B C P) (term129 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8075197 {_143310 _143311 _143313 _143320 A B C P : Type'} : term261 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8075196 _143310 _143311 _143313 _143320 A B C P (@lem8075195 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8075198 {_143310 _143311 _143313 _143320 A B C P : Type'} : term262 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8075197 _143310 _143311 _143313 _143320 A B C P (@lem8075002 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8075199 {_143310 _143311 _143313 _143320 A B C P : Type'} (h1 : term262 _143310 _143311 _143313 _143320 A B C P) : term262 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (h1). Qed.
Lemma lem8075200 {_143310 _143311 _143313 _143320 A B C P : Type'} (h1 : term246 _143310 _143311 _143313 _143320 A B C P) : term246 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (h1). Qed.
Lemma lem8075201 {_143310 _143311 _143313 _143320 A B C P : Type'} (h1 : term246 _143310 _143311 _143313 _143320 A B C P) (h2 : term262 _143310 _143311 _143313 _143320 A B C P) : term129 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8075199 _143310 _143311 _143313 _143320 A B C P h2 (@lem8075200 _143310 _143311 _143313 _143320 A B C P h1)). Qed.
Lemma lem8075202 {_143310 _143311 _143313 _143320 A B C P : Type'} (h1 : term246 _143310 _143311 _143313 _143320 A B C P) : term263 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (fun h0 : term262 _143310 _143311 _143313 _143320 A B C P => @lem8075201 _143310 _143311 _143313 _143320 A B C P h1 h0). Qed.
Lemma lem8075203 {_143310 _143311 _143313 _143320 A B C P : Type'} (h1 : term262 _143310 _143311 _143313 _143320 A B C P) : term262 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (h1). Qed.
Lemma lem8075204 {_143310 _143311 _143313 _143320 A B C P : Type'} (h1 : term246 _143310 _143311 _143313 _143320 A B C P) (h2 : term262 _143310 _143311 _143313 _143320 A B C P) : term129 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8075202 _143310 _143311 _143313 _143320 A B C P h1 (@lem8075203 _143310 _143311 _143313 _143320 A B C P h2)). Qed.
Lemma lem8075205 {_143310 _143311 _143313 _143320 A B C P : Type'} (h1 : term262 _143310 _143311 _143313 _143320 A B C P) : term262 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (fun h0 : term246 _143310 _143311 _143313 _143320 A B C P => @lem8075204 _143310 _143311 _143313 _143320 A B C P h0 h1). Qed.
Lemma lem8075206 {_143310 _143311 _143313 _143320 A B C P : Type'} : term264 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (fun h0 : term262 _143310 _143311 _143313 _143320 A B C P => @lem8075205 _143310 _143311 _143313 _143320 A B C P h0). Qed.
Lemma lem8075209 {_143310 _143311 _143313 _143320 A B C P : Type'} : term262 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8075206 _143310 _143311 _143313 _143320 A B C P (@lem8075198 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8075210 {_143310 _143311 _143313 _143320 A B C P : Type'} : term262 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8075209 _143310 _143311 _143313 _143320 A B C P). Qed.
Lemma lem8075218 {A : Type'} (t : Prop) : (term265 A t) = t.
Proof. exact (EQ_MP (@lem16458 A t) (@lem16457 A t)). Qed.
Lemma lem8075219 {_143320 : Type'} (t : Prop) : (term265 _143320 t) = t.
Proof. exact (@lem8075218 _143320 t). Qed.
Lemma lem8075220 {_143320 : Type'} : (term127 _143320) = (True -> True).
Proof. exact (@lem8075219 _143320 (True -> True)). Qed.
Lemma lem8075222 (t : Prop) : (True -> t) = t.
Proof. exact (proj1 (@lem16471 t)). Qed.
Lemma lem8075223 : (True -> True) = True.
Proof. exact (@lem8075222 True). Qed.
Lemma lem8075224 {_143320 : Type'} : (term127 _143320) = True.
Proof. exact (TRANS (@lem8075220 _143320) (@lem8075223)). Qed.
Lemma lem8075225 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8075226 {_143320 : Type'} : (term157 _143320) = (imp True).
Proof. exact (MK_COMB (@lem8075225) (@lem8075224 _143320)). Qed.
Lemma lem8075234 {A : Type'} (t : Prop) : (term265 A t) = t.
Proof. exact (EQ_MP (@lem16458 A t) (@lem16457 A t)). Qed.
Lemma lem8075235 {B : Type'} (t : Prop) : (term265 B t) = t.
Proof. exact (@lem8075234 B t). Qed.
Lemma lem8075236 {B : Type'} : (term127 B) = (True -> True).
Proof. exact (@lem8075235 B (True -> True)). Qed.
Lemma lem8075238 (t : Prop) : (True -> t) = t.
Proof. exact (proj1 (@lem16471 t)). Qed.
Lemma lem8075239 : (True -> True) = True.
Proof. exact (@lem8075238 True). Qed.
Lemma lem8075240 {B : Type'} : (term127 B) = True.
Proof. exact (TRANS (@lem8075236 B) (@lem8075239)). Qed.
Lemma lem8075241 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8075242 {B : Type'} : (term157 B) = (imp True).
Proof. exact (MK_COMB (@lem8075241) (@lem8075240 B)). Qed.
Lemma lem8075250 {A : Type'} (t : Prop) : (term265 A t) = t.
Proof. exact (EQ_MP (@lem16458 A t) (@lem16457 A t)). Qed.
Lemma lem8075251 {A : Type'} (t : Prop) : (term265 A t) = t.
Proof. exact (@lem8075250 A t). Qed.
Lemma lem8075252 {A : Type'} : (term127 A) = (True -> True).
Proof. exact (@lem8075251 A (True -> True)). Qed.
Lemma lem8075254 (t : Prop) : (True -> t) = t.
Proof. exact (proj1 (@lem16471 t)). Qed.
Lemma lem8075255 : (True -> True) = True.
Proof. exact (@lem8075254 True). Qed.
Lemma lem8075256 {A : Type'} : (term127 A) = True.
Proof. exact (TRANS (@lem8075252 A) (@lem8075255)). Qed.
Lemma lem8075257 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8075258 {A : Type'} : (term157 A) = (imp True).
Proof. exact (MK_COMB (@lem8075257) (@lem8075256 A)). Qed.
Lemma lem8075384 {A : Type'} (P : Prop) (Q : A -> Prop) : (term266 A P Q) = (term267 A P Q).
Proof. exact (EQ_MP (@lem16434 A P Q) (@lem16433 A P Q)). Qed.
Lemma lem8075385 {_143313 : Type'} (P : Prop) (Q : _143313 -> Prop) : (term266 _143313 P Q) = (term267 _143313 P Q).
Proof. exact (@lem8075384 _143313 P Q). Qed.
Lemma lem8075386 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term268 _143310 _143311 _143313 A s clauses x t c) = (term269 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (@lem8075385 _143313 (term270 _143310 _143311 _143313 A s t clauses) (term271 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8075387 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) (a : _143313) : (term272 _143310 _143311 _143313 A s clauses x t c a) = (term273 _143310 _143311 _143313 A s clauses x t c a).
Proof. exact (eq_refl (term272 _143310 _143311 _143313 A s clauses x t c a)). Qed.
Lemma lem8075388 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) : (term274 _143310 _143311 _143313 A s t clauses) = (term274 _143310 _143311 _143313 A s t clauses).
Proof. exact (eq_refl (term274 _143310 _143311 _143313 A s t clauses)). Qed.
Lemma lem8075389 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) (a : _143313) : (term275 _143310 _143311 _143313 A s clauses x t c a) = (term276 _143310 _143311 _143313 A s clauses x t c a).
Proof. exact (MK_COMB (@lem8075388 _143310 _143311 _143313 A s t clauses) (@lem8075387 _143310 _143311 _143313 A s clauses x t c a)). Qed.
Lemma lem8075390 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term277 _143310 _143311 _143313 A s clauses x t c) = (term278 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8075389 _143310 _143311 _143313 A s clauses x t c a)). Qed.
Lemma lem8075391 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8075392 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term268 _143310 _143311 _143313 A s clauses x t c) = (term279 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (MK_COMB (@lem8075391 _143313) (@lem8075390 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8075393 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8075394 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term280 _143310 _143311 _143313 A s clauses x t c) = (term281 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (MK_COMB (@lem8075393) (@lem8075392 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8075395 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) (a : _143313) : (term272 _143310 _143311 _143313 A s clauses x t c a) = (term273 _143310 _143311 _143313 A s clauses x t c a).
Proof. exact (eq_refl (term272 _143310 _143311 _143313 A s clauses x t c a)). Qed.
Lemma lem8075396 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term282 _143310 _143311 _143313 A s clauses x t c) = (term271 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8075395 _143310 _143311 _143313 A s clauses x t c a)). Qed.
Lemma lem8075397 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8075398 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term283 _143310 _143311 _143313 A s clauses x t c) = (term284 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (MK_COMB (@lem8075397 _143313) (@lem8075396 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8075399 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) : (term274 _143310 _143311 _143313 A s t clauses) = (term274 _143310 _143311 _143313 A s t clauses).
Proof. exact (eq_refl (term274 _143310 _143311 _143313 A s t clauses)). Qed.
Lemma lem8075400 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term269 _143310 _143311 _143313 A s clauses x t c) = (term285 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (MK_COMB (@lem8075399 _143310 _143311 _143313 A s t clauses) (@lem8075398 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8075401 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : ((term268 _143310 _143311 _143313 A s clauses x t c) = (term269 _143310 _143311 _143313 A s clauses x t c)) = ((term279 _143310 _143311 _143313 A s clauses x t c) = (term285 _143310 _143311 _143313 A s clauses x t c)).
Proof. exact (MK_COMB (@lem8075394 _143310 _143311 _143313 A s clauses x t c) (@lem8075400 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8075402 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term279 _143310 _143311 _143313 A s clauses x t c) = (term285 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (EQ_MP (@lem8075401 _143310 _143311 _143313 A s clauses x t c) (@lem8075386 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8075455 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term286 _143310 _143311 _143313 A s clauses x c) = (term287 _143310 _143311 _143313 A s clauses x c).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 A => @lem8075402 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8075456 {_143311 _143313 A : Type'} : (@ex (_143311 -> _143313 -> A)) = (@ex (_143311 -> _143313 -> A)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> A))). Qed.
Lemma lem8075457 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term288 _143310 _143311 _143313 A s clauses x c) = (term289 _143310 _143311 _143313 A s clauses x c).
Proof. exact (MK_COMB (@lem8075456 _143311 _143313 A) (@lem8075455 _143310 _143311 _143313 A s clauses x c)). Qed.
Lemma lem8075506 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term290 _143310 _143311 _143313 A clauses x c) = (term291 _143310 _143311 _143313 A clauses x c).
Proof. exact (fun_ext (fun s : _143313 -> _143310 => @lem8075457 _143310 _143311 _143313 A s clauses x c)). Qed.
Lemma lem8075507 {_143310 _143313 : Type'} : (@ex (_143313 -> _143310)) = (@ex (_143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143313 -> _143310))). Qed.
Lemma lem8075508 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term292 _143310 _143311 _143313 A clauses x c) = (term293 _143310 _143311 _143313 A clauses x c).
Proof. exact (MK_COMB (@lem8075507 _143310 _143313) (@lem8075506 _143310 _143311 _143313 A clauses x c)). Qed.
Lemma lem8075513 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8075514 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term136 _143310 _143311 _143313 A clauses x c) = (term294 _143310 _143311 _143313 A clauses x c).
Proof. exact (MK_COMB (@lem8075513) (@lem8075508 _143310 _143311 _143313 A clauses x c)). Qed.
Lemma lem8075526 {A : Type'} (P : Prop) (Q : A -> Prop) : (term266 A P Q) = (term267 A P Q).
Proof. exact (EQ_MP (@lem16434 A P Q) (@lem16433 A P Q)). Qed.
Lemma lem8075527 {_143313 : Type'} (P : Prop) (Q : _143313 -> Prop) : (term266 _143313 P Q) = (term267 _143313 P Q).
Proof. exact (@lem8075526 _143313 P Q). Qed.
Lemma lem8075528 {_143310 _143311 _143313 A : Type'} (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : (term295 _143310 _143311 _143313 A t clauses s x) = (term296 _143310 _143311 _143313 A t clauses s x).
Proof. exact (@lem8075527 _143313 (term270 _143310 _143311 _143313 A s t clauses) (term297 _143310 _143313 s x)). Qed.
Lemma lem8075529 {_143310 _143313 : Type'} (s : _143313 -> _143310) (a : _143313) (x : _143310) : (term298 _143310 _143313 s x a) = ((s a) = x).
Proof. exact (eq_refl (term298 _143310 _143313 s x a)). Qed.
Lemma lem8075530 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) : (term274 _143310 _143311 _143313 A s t clauses) = (term274 _143310 _143311 _143313 A s t clauses).
Proof. exact (eq_refl (term274 _143310 _143311 _143313 A s t clauses)). Qed.
Lemma lem8075531 {_143310 _143311 _143313 A : Type'} (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (a : _143313) (x : _143310) : (term299 _143310 _143311 _143313 A t clauses s x a) = (term300 _143310 _143311 _143313 A t clauses s a x).
Proof. exact (MK_COMB (@lem8075530 _143310 _143311 _143313 A s t clauses) (@lem8075529 _143310 _143313 s a x)). Qed.
Lemma lem8075532 {_143310 _143311 _143313 A : Type'} (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : (term301 _143310 _143311 _143313 A t clauses s x) = (term302 _143310 _143311 _143313 A t clauses s x).
Proof. exact (fun_ext (fun a : _143313 => @lem8075531 _143310 _143311 _143313 A t clauses s a x)). Qed.
Lemma lem8075533 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8075534 {_143310 _143311 _143313 A : Type'} (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : (term295 _143310 _143311 _143313 A t clauses s x) = (term303 _143310 _143311 _143313 A t clauses s x).
Proof. exact (MK_COMB (@lem8075533 _143313) (@lem8075532 _143310 _143311 _143313 A t clauses s x)). Qed.
Lemma lem8075535 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8075536 {_143310 _143311 _143313 A : Type'} (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : (term304 _143310 _143311 _143313 A t clauses s x) = (term305 _143310 _143311 _143313 A t clauses s x).
Proof. exact (MK_COMB (@lem8075535) (@lem8075534 _143310 _143311 _143313 A t clauses s x)). Qed.
Lemma lem8075537 {_143310 _143313 : Type'} (s : _143313 -> _143310) (a : _143313) (x : _143310) : (term298 _143310 _143313 s x a) = ((s a) = x).
Proof. exact (eq_refl (term298 _143310 _143313 s x a)). Qed.
Lemma lem8075538 {_143310 _143313 : Type'} (s : _143313 -> _143310) (x : _143310) : (term306 _143310 _143313 s x) = (term297 _143310 _143313 s x).
Proof. exact (fun_ext (fun a : _143313 => @lem8075537 _143310 _143313 s a x)). Qed.
Lemma lem8075539 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8075540 {_143310 _143313 : Type'} (s : _143313 -> _143310) (x : _143310) : (term307 _143310 _143313 s x) = (term308 _143310 _143313 s x).
Proof. exact (MK_COMB (@lem8075539 _143313) (@lem8075538 _143310 _143313 s x)). Qed.
Lemma lem8075541 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) : (term274 _143310 _143311 _143313 A s t clauses) = (term274 _143310 _143311 _143313 A s t clauses).
Proof. exact (eq_refl (term274 _143310 _143311 _143313 A s t clauses)). Qed.
Lemma lem8075542 {_143310 _143311 _143313 A : Type'} (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : (term296 _143310 _143311 _143313 A t clauses s x) = (term309 _143310 _143311 _143313 A t clauses s x).
Proof. exact (MK_COMB (@lem8075541 _143310 _143311 _143313 A s t clauses) (@lem8075540 _143310 _143313 s x)). Qed.
Lemma lem8075543 {_143310 _143311 _143313 A : Type'} (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : ((term295 _143310 _143311 _143313 A t clauses s x) = (term296 _143310 _143311 _143313 A t clauses s x)) = ((term303 _143310 _143311 _143313 A t clauses s x) = (term309 _143310 _143311 _143313 A t clauses s x)).
Proof. exact (MK_COMB (@lem8075536 _143310 _143311 _143313 A t clauses s x) (@lem8075542 _143310 _143311 _143313 A t clauses s x)). Qed.
Lemma lem8075544 {_143310 _143311 _143313 A : Type'} (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : (term303 _143310 _143311 _143313 A t clauses s x) = (term309 _143310 _143311 _143313 A t clauses s x).
Proof. exact (EQ_MP (@lem8075543 _143310 _143311 _143313 A t clauses s x) (@lem8075528 _143310 _143311 _143313 A t clauses s x)). Qed.
Lemma lem8075551 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : (term310 _143310 _143311 _143313 A clauses s x) = (term311 _143310 _143311 _143313 A clauses s x).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 A => @lem8075544 _143310 _143311 _143313 A t clauses s x)). Qed.
Lemma lem8075552 {_143311 _143313 A : Type'} : (@ex (_143311 -> _143313 -> A)) = (@ex (_143311 -> _143313 -> A)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> A))). Qed.
Lemma lem8075553 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : (term312 _143310 _143311 _143313 A clauses s x) = (term313 _143310 _143311 _143313 A clauses s x).
Proof. exact (MK_COMB (@lem8075552 _143311 _143313 A) (@lem8075551 _143310 _143311 _143313 A clauses s x)). Qed.
Lemma lem8075575 {A : Type'} (P : A -> Prop) (Q : Prop) : (term314 A P Q) = (term315 A P Q).
Proof. exact (EQ_MP (@lem16440 A P Q) (@lem16439 A P Q)). Qed.
Lemma lem8075576 {_143311 _143313 A : Type'} (P : type443 _143311 _143313 A) (Q : Prop) : (term316 _143311 _143313 A P Q) = (term317 _143311 _143313 A P Q).
Proof. exact (@lem8075575 (type1412 _143311 _143313 A) P Q). Qed.
Lemma lem8075577 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : (term318 _143310 _143311 _143313 A clauses s x) = (term319 _143310 _143311 _143313 A clauses s x).
Proof. exact (@lem8075576 _143311 _143313 A (term320 _143310 _143311 _143313 A s clauses) (term308 _143310 _143313 s x)). Qed.
Lemma lem8075578 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) : (term321 _143310 _143311 _143313 A s clauses t) = (term270 _143310 _143311 _143313 A s t clauses).
Proof. exact (eq_refl (term321 _143310 _143311 _143313 A s clauses t)). Qed.
Lemma lem8075579 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8075580 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) : (term322 _143310 _143311 _143313 A s clauses t) = (term274 _143310 _143311 _143313 A s t clauses).
Proof. exact (MK_COMB (@lem8075579) (@lem8075578 _143310 _143311 _143313 A s t clauses)). Qed.
Lemma lem8075581 {_143310 _143313 : Type'} (s : _143313 -> _143310) (x : _143310) : (term308 _143310 _143313 s x) = (term308 _143310 _143313 s x).
Proof. exact (eq_refl (term308 _143310 _143313 s x)). Qed.
Lemma lem8075582 {_143310 _143311 _143313 A : Type'} (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : (term323 _143310 _143311 _143313 A clauses t s x) = (term309 _143310 _143311 _143313 A t clauses s x).
Proof. exact (MK_COMB (@lem8075580 _143310 _143311 _143313 A s t clauses) (@lem8075581 _143310 _143313 s x)). Qed.
Lemma lem8075583 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : (term324 _143310 _143311 _143313 A clauses s x) = (term311 _143310 _143311 _143313 A clauses s x).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 A => @lem8075582 _143310 _143311 _143313 A t clauses s x)). Qed.
Lemma lem8075584 {_143311 _143313 A : Type'} : (@ex (_143311 -> _143313 -> A)) = (@ex (_143311 -> _143313 -> A)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> A))). Qed.
Lemma lem8075585 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : (term318 _143310 _143311 _143313 A clauses s x) = (term313 _143310 _143311 _143313 A clauses s x).
Proof. exact (MK_COMB (@lem8075584 _143311 _143313 A) (@lem8075583 _143310 _143311 _143313 A clauses s x)). Qed.
Lemma lem8075586 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8075587 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : (term325 _143310 _143311 _143313 A clauses s x) = (term326 _143310 _143311 _143313 A clauses s x).
Proof. exact (MK_COMB (@lem8075586) (@lem8075585 _143310 _143311 _143313 A clauses s x)). Qed.
Lemma lem8075588 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) : (term321 _143310 _143311 _143313 A s clauses t) = (term270 _143310 _143311 _143313 A s t clauses).
Proof. exact (eq_refl (term321 _143310 _143311 _143313 A s clauses t)). Qed.
Lemma lem8075589 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) : (term327 _143310 _143311 _143313 A s clauses) = (term320 _143310 _143311 _143313 A s clauses).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 A => @lem8075588 _143310 _143311 _143313 A s t clauses)). Qed.
Lemma lem8075590 {_143311 _143313 A : Type'} : (@ex (_143311 -> _143313 -> A)) = (@ex (_143311 -> _143313 -> A)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> A))). Qed.
Lemma lem8075591 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) : (term328 _143310 _143311 _143313 A s clauses) = (term329 _143310 _143311 _143313 A s clauses).
Proof. exact (MK_COMB (@lem8075590 _143311 _143313 A) (@lem8075589 _143310 _143311 _143313 A s clauses)). Qed.
Lemma lem8075592 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8075593 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) : (term330 _143310 _143311 _143313 A s clauses) = (term331 _143310 _143311 _143313 A s clauses).
Proof. exact (MK_COMB (@lem8075592) (@lem8075591 _143310 _143311 _143313 A s clauses)). Qed.
Lemma lem8075594 {_143310 _143313 : Type'} (s : _143313 -> _143310) (x : _143310) : (term308 _143310 _143313 s x) = (term308 _143310 _143313 s x).
Proof. exact (eq_refl (term308 _143310 _143313 s x)). Qed.
Lemma lem8075595 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : (term319 _143310 _143311 _143313 A clauses s x) = (term332 _143310 _143311 _143313 A clauses s x).
Proof. exact (MK_COMB (@lem8075593 _143310 _143311 _143313 A s clauses) (@lem8075594 _143310 _143313 s x)). Qed.
Lemma lem8075596 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : ((term318 _143310 _143311 _143313 A clauses s x) = (term319 _143310 _143311 _143313 A clauses s x)) = ((term313 _143310 _143311 _143313 A clauses s x) = (term332 _143310 _143311 _143313 A clauses s x)).
Proof. exact (MK_COMB (@lem8075587 _143310 _143311 _143313 A clauses s x) (@lem8075595 _143310 _143311 _143313 A clauses s x)). Qed.
Lemma lem8075597 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : (term313 _143310 _143311 _143313 A clauses s x) = (term332 _143310 _143311 _143313 A clauses s x).
Proof. exact (EQ_MP (@lem8075596 _143310 _143311 _143313 A clauses s x) (@lem8075577 _143310 _143311 _143313 A clauses s x)). Qed.
Lemma lem8075608 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : (term312 _143310 _143311 _143313 A clauses s x) = (term332 _143310 _143311 _143313 A clauses s x).
Proof. exact (TRANS (@lem8075553 _143310 _143311 _143313 A clauses s x) (@lem8075597 _143310 _143311 _143313 A clauses s x)). Qed.
Lemma lem8075609 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) : (term333 _143310 _143311 _143313 A clauses x) = (term334 _143310 _143311 _143313 A clauses x).
Proof. exact (fun_ext (fun s : _143313 -> _143310 => @lem8075608 _143310 _143311 _143313 A clauses s x)). Qed.
Lemma lem8075610 {_143310 _143313 : Type'} : (@ex (_143313 -> _143310)) = (@ex (_143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143313 -> _143310))). Qed.
Lemma lem8075611 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) : (term335 _143310 _143311 _143313 A clauses x) = (term336 _143310 _143311 _143313 A clauses x).
Proof. exact (MK_COMB (@lem8075610 _143310 _143313) (@lem8075609 _143310 _143311 _143313 A clauses x)). Qed.
Lemma lem8075660 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8075661 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) : (term337 _143310 _143311 _143313 A clauses x) = (term338 _143310 _143311 _143313 A clauses x).
Proof. exact (MK_COMB (@lem8075660) (@lem8075611 _143310 _143311 _143313 A clauses x)). Qed.
Lemma lem8075662 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8075663 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) : (term133 _143310 _143311 _143313 A clauses x) = (term339 _143310 _143311 _143313 A clauses x).
Proof. exact (MK_COMB (@lem8075662) (@lem8075661 _143310 _143311 _143313 A clauses x)). Qed.
Lemma lem8075664 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : ((@CASEWISE A _143313 _143310 _143311 clauses c x) = _106906) = ((@CASEWISE A _143313 _143310 _143311 clauses c x) = _106906).
Proof. exact (eq_refl ((@CASEWISE A _143313 _143310 _143311 clauses c x) = _106906)). Qed.
Lemma lem8075665 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term135 _143310 _143311 _143313 A clauses c x _106906) = (term340 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (MK_COMB (@lem8075663 _143310 _143311 _143313 A clauses x) (@lem8075664 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8075668 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term138 _143310 _143311 _143313 A clauses c x _106906) = (term341 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (MK_COMB (@lem8075514 _143310 _143311 _143313 A clauses x c) (@lem8075665 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8075671 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term140 _143310 _143311 _143313 A clauses c _106906) = (term342 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (fun_ext (fun x : _143310 => @lem8075668 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8075672 {_143310 : Type'} : (@all _143310) = (@all _143310).
Proof. exact (eq_refl (@all _143310)). Qed.
Lemma lem8075673 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term142 _143310 _143311 _143313 A clauses c _106906) = (term343 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (MK_COMB (@lem8075672 _143310) (@lem8075671 _143310 _143311 _143313 A clauses c _106906)). Qed.
Lemma lem8075722 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term144 _143310 _143311 _143313 A clauses _106906) = (term344 _143310 _143311 _143313 A clauses _106906).
Proof. exact (fun_ext (fun c : _143311 => @lem8075673 _143310 _143311 _143313 A clauses c _106906)). Qed.
Lemma lem8075723 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8075724 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term146 _143310 _143311 _143313 A clauses _106906) = (term345 _143310 _143311 _143313 A clauses _106906).
Proof. exact (MK_COMB (@lem8075723 _143311) (@lem8075722 _143310 _143311 _143313 A clauses _106906)). Qed.
Lemma lem8075729 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term148 _143310 _143311 _143313 A _106906) = (term346 _143310 _143311 _143313 A _106906).
Proof. exact (fun_ext (fun clauses : type1637 _143310 _143311 _143313 A => @lem8075724 _143310 _143311 _143313 A clauses _106906)). Qed.
Lemma lem8075730 {_143310 _143311 _143313 A : Type'} : (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A)))) = (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))))). Qed.
Lemma lem8075731 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term149 _143310 _143311 _143313 A _106906) = (term347 _143310 _143311 _143313 A _106906).
Proof. exact (MK_COMB (@lem8075730 _143310 _143311 _143313 A) (@lem8075729 _143310 _143311 _143313 A _106906)). Qed.
Lemma lem8075736 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8075737 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term151 _143310 _143311 _143313 A _106906) = (term348 _143310 _143311 _143313 A _106906).
Proof. exact (MK_COMB (@lem8075736) (@lem8075731 _143310 _143311 _143313 A _106906)). Qed.
Lemma lem8075807 {A : Type'} (P : Prop) (Q : A -> Prop) : (term266 A P Q) = (term267 A P Q).
Proof. exact (EQ_MP (@lem16434 A P Q) (@lem16433 A P Q)). Qed.
Lemma lem8075808 {_143313 : Type'} (P : Prop) (Q : _143313 -> Prop) : (term266 _143313 P Q) = (term267 _143313 P Q).
Proof. exact (@lem8075807 _143313 P Q). Qed.
Lemma lem8075809 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term268 _143310 _143311 _143313 B s clauses x t c) = (term269 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (@lem8075808 _143313 (term270 _143310 _143311 _143313 B s t clauses) (term271 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8075810 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) (a : _143313) : (term272 _143310 _143311 _143313 B s clauses x t c a) = (term273 _143310 _143311 _143313 B s clauses x t c a).
Proof. exact (eq_refl (term272 _143310 _143311 _143313 B s clauses x t c a)). Qed.
Lemma lem8075811 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) : (term274 _143310 _143311 _143313 B s t clauses) = (term274 _143310 _143311 _143313 B s t clauses).
Proof. exact (eq_refl (term274 _143310 _143311 _143313 B s t clauses)). Qed.
Lemma lem8075812 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) (a : _143313) : (term275 _143310 _143311 _143313 B s clauses x t c a) = (term276 _143310 _143311 _143313 B s clauses x t c a).
Proof. exact (MK_COMB (@lem8075811 _143310 _143311 _143313 B s t clauses) (@lem8075810 _143310 _143311 _143313 B s clauses x t c a)). Qed.
Lemma lem8075813 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term277 _143310 _143311 _143313 B s clauses x t c) = (term278 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8075812 _143310 _143311 _143313 B s clauses x t c a)). Qed.
Lemma lem8075814 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8075815 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term268 _143310 _143311 _143313 B s clauses x t c) = (term279 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (MK_COMB (@lem8075814 _143313) (@lem8075813 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8075816 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8075817 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term280 _143310 _143311 _143313 B s clauses x t c) = (term281 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (MK_COMB (@lem8075816) (@lem8075815 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8075818 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) (a : _143313) : (term272 _143310 _143311 _143313 B s clauses x t c a) = (term273 _143310 _143311 _143313 B s clauses x t c a).
Proof. exact (eq_refl (term272 _143310 _143311 _143313 B s clauses x t c a)). Qed.
Lemma lem8075819 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term282 _143310 _143311 _143313 B s clauses x t c) = (term271 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8075818 _143310 _143311 _143313 B s clauses x t c a)). Qed.
Lemma lem8075820 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8075821 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term283 _143310 _143311 _143313 B s clauses x t c) = (term284 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (MK_COMB (@lem8075820 _143313) (@lem8075819 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8075822 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) : (term274 _143310 _143311 _143313 B s t clauses) = (term274 _143310 _143311 _143313 B s t clauses).
Proof. exact (eq_refl (term274 _143310 _143311 _143313 B s t clauses)). Qed.
Lemma lem8075823 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term269 _143310 _143311 _143313 B s clauses x t c) = (term285 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (MK_COMB (@lem8075822 _143310 _143311 _143313 B s t clauses) (@lem8075821 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8075824 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : ((term268 _143310 _143311 _143313 B s clauses x t c) = (term269 _143310 _143311 _143313 B s clauses x t c)) = ((term279 _143310 _143311 _143313 B s clauses x t c) = (term285 _143310 _143311 _143313 B s clauses x t c)).
Proof. exact (MK_COMB (@lem8075817 _143310 _143311 _143313 B s clauses x t c) (@lem8075823 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8075825 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term279 _143310 _143311 _143313 B s clauses x t c) = (term285 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (EQ_MP (@lem8075824 _143310 _143311 _143313 B s clauses x t c) (@lem8075809 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8075878 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term286 _143310 _143311 _143313 B s clauses x c) = (term287 _143310 _143311 _143313 B s clauses x c).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 B => @lem8075825 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8075879 {_143311 _143313 B : Type'} : (@ex (_143311 -> _143313 -> B)) = (@ex (_143311 -> _143313 -> B)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> B))). Qed.
Lemma lem8075880 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term288 _143310 _143311 _143313 B s clauses x c) = (term289 _143310 _143311 _143313 B s clauses x c).
Proof. exact (MK_COMB (@lem8075879 _143311 _143313 B) (@lem8075878 _143310 _143311 _143313 B s clauses x c)). Qed.
Lemma lem8075929 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term290 _143310 _143311 _143313 B clauses x c) = (term291 _143310 _143311 _143313 B clauses x c).
Proof. exact (fun_ext (fun s : _143313 -> _143310 => @lem8075880 _143310 _143311 _143313 B s clauses x c)). Qed.
Lemma lem8075930 {_143310 _143313 : Type'} : (@ex (_143313 -> _143310)) = (@ex (_143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143313 -> _143310))). Qed.
Lemma lem8075931 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term292 _143310 _143311 _143313 B clauses x c) = (term293 _143310 _143311 _143313 B clauses x c).
Proof. exact (MK_COMB (@lem8075930 _143310 _143313) (@lem8075929 _143310 _143311 _143313 B clauses x c)). Qed.
Lemma lem8075936 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8075937 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term136 _143310 _143311 _143313 B clauses x c) = (term294 _143310 _143311 _143313 B clauses x c).
Proof. exact (MK_COMB (@lem8075936) (@lem8075931 _143310 _143311 _143313 B clauses x c)). Qed.
Lemma lem8075949 {A : Type'} (P : Prop) (Q : A -> Prop) : (term266 A P Q) = (term267 A P Q).
Proof. exact (EQ_MP (@lem16434 A P Q) (@lem16433 A P Q)). Qed.
Lemma lem8075950 {_143313 : Type'} (P : Prop) (Q : _143313 -> Prop) : (term266 _143313 P Q) = (term267 _143313 P Q).
Proof. exact (@lem8075949 _143313 P Q). Qed.
Lemma lem8075951 {_143310 _143311 _143313 B : Type'} (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : (term295 _143310 _143311 _143313 B t clauses s x) = (term296 _143310 _143311 _143313 B t clauses s x).
Proof. exact (@lem8075950 _143313 (term270 _143310 _143311 _143313 B s t clauses) (term297 _143310 _143313 s x)). Qed.
Lemma lem8075952 {_143310 _143313 : Type'} (s : _143313 -> _143310) (a : _143313) (x : _143310) : (term298 _143310 _143313 s x a) = ((s a) = x).
Proof. exact (eq_refl (term298 _143310 _143313 s x a)). Qed.
Lemma lem8075953 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) : (term274 _143310 _143311 _143313 B s t clauses) = (term274 _143310 _143311 _143313 B s t clauses).
Proof. exact (eq_refl (term274 _143310 _143311 _143313 B s t clauses)). Qed.
Lemma lem8075954 {_143310 _143311 _143313 B : Type'} (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (a : _143313) (x : _143310) : (term299 _143310 _143311 _143313 B t clauses s x a) = (term300 _143310 _143311 _143313 B t clauses s a x).
Proof. exact (MK_COMB (@lem8075953 _143310 _143311 _143313 B s t clauses) (@lem8075952 _143310 _143313 s a x)). Qed.
Lemma lem8075955 {_143310 _143311 _143313 B : Type'} (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : (term301 _143310 _143311 _143313 B t clauses s x) = (term302 _143310 _143311 _143313 B t clauses s x).
Proof. exact (fun_ext (fun a : _143313 => @lem8075954 _143310 _143311 _143313 B t clauses s a x)). Qed.
Lemma lem8075956 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8075957 {_143310 _143311 _143313 B : Type'} (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : (term295 _143310 _143311 _143313 B t clauses s x) = (term303 _143310 _143311 _143313 B t clauses s x).
Proof. exact (MK_COMB (@lem8075956 _143313) (@lem8075955 _143310 _143311 _143313 B t clauses s x)). Qed.
Lemma lem8075958 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8075959 {_143310 _143311 _143313 B : Type'} (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : (term304 _143310 _143311 _143313 B t clauses s x) = (term305 _143310 _143311 _143313 B t clauses s x).
Proof. exact (MK_COMB (@lem8075958) (@lem8075957 _143310 _143311 _143313 B t clauses s x)). Qed.
Lemma lem8075960 {_143310 _143313 : Type'} (s : _143313 -> _143310) (a : _143313) (x : _143310) : (term298 _143310 _143313 s x a) = ((s a) = x).
Proof. exact (eq_refl (term298 _143310 _143313 s x a)). Qed.
Lemma lem8075961 {_143310 _143313 : Type'} (s : _143313 -> _143310) (x : _143310) : (term306 _143310 _143313 s x) = (term297 _143310 _143313 s x).
Proof. exact (fun_ext (fun a : _143313 => @lem8075960 _143310 _143313 s a x)). Qed.
Lemma lem8075962 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8075963 {_143310 _143313 : Type'} (s : _143313 -> _143310) (x : _143310) : (term307 _143310 _143313 s x) = (term308 _143310 _143313 s x).
Proof. exact (MK_COMB (@lem8075962 _143313) (@lem8075961 _143310 _143313 s x)). Qed.
Lemma lem8075964 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) : (term274 _143310 _143311 _143313 B s t clauses) = (term274 _143310 _143311 _143313 B s t clauses).
Proof. exact (eq_refl (term274 _143310 _143311 _143313 B s t clauses)). Qed.
Lemma lem8075965 {_143310 _143311 _143313 B : Type'} (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : (term296 _143310 _143311 _143313 B t clauses s x) = (term309 _143310 _143311 _143313 B t clauses s x).
Proof. exact (MK_COMB (@lem8075964 _143310 _143311 _143313 B s t clauses) (@lem8075963 _143310 _143313 s x)). Qed.
Lemma lem8075966 {_143310 _143311 _143313 B : Type'} (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : ((term295 _143310 _143311 _143313 B t clauses s x) = (term296 _143310 _143311 _143313 B t clauses s x)) = ((term303 _143310 _143311 _143313 B t clauses s x) = (term309 _143310 _143311 _143313 B t clauses s x)).
Proof. exact (MK_COMB (@lem8075959 _143310 _143311 _143313 B t clauses s x) (@lem8075965 _143310 _143311 _143313 B t clauses s x)). Qed.
Lemma lem8075967 {_143310 _143311 _143313 B : Type'} (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : (term303 _143310 _143311 _143313 B t clauses s x) = (term309 _143310 _143311 _143313 B t clauses s x).
Proof. exact (EQ_MP (@lem8075966 _143310 _143311 _143313 B t clauses s x) (@lem8075951 _143310 _143311 _143313 B t clauses s x)). Qed.
Lemma lem8075974 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : (term310 _143310 _143311 _143313 B clauses s x) = (term311 _143310 _143311 _143313 B clauses s x).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 B => @lem8075967 _143310 _143311 _143313 B t clauses s x)). Qed.
Lemma lem8075975 {_143311 _143313 B : Type'} : (@ex (_143311 -> _143313 -> B)) = (@ex (_143311 -> _143313 -> B)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> B))). Qed.
Lemma lem8075976 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : (term312 _143310 _143311 _143313 B clauses s x) = (term313 _143310 _143311 _143313 B clauses s x).
Proof. exact (MK_COMB (@lem8075975 _143311 _143313 B) (@lem8075974 _143310 _143311 _143313 B clauses s x)). Qed.
Lemma lem8075998 {A : Type'} (P : A -> Prop) (Q : Prop) : (term314 A P Q) = (term315 A P Q).
Proof. exact (EQ_MP (@lem16440 A P Q) (@lem16439 A P Q)). Qed.
Lemma lem8075999 {_143311 _143313 B : Type'} (P : type443 _143311 _143313 B) (Q : Prop) : (term316 _143311 _143313 B P Q) = (term317 _143311 _143313 B P Q).
Proof. exact (@lem8075998 (type1412 _143311 _143313 B) P Q). Qed.
Lemma lem8076000 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : (term318 _143310 _143311 _143313 B clauses s x) = (term319 _143310 _143311 _143313 B clauses s x).
Proof. exact (@lem8075999 _143311 _143313 B (term320 _143310 _143311 _143313 B s clauses) (term308 _143310 _143313 s x)). Qed.
Lemma lem8076001 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) : (term321 _143310 _143311 _143313 B s clauses t) = (term270 _143310 _143311 _143313 B s t clauses).
Proof. exact (eq_refl (term321 _143310 _143311 _143313 B s clauses t)). Qed.
Lemma lem8076002 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8076003 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) : (term322 _143310 _143311 _143313 B s clauses t) = (term274 _143310 _143311 _143313 B s t clauses).
Proof. exact (MK_COMB (@lem8076002) (@lem8076001 _143310 _143311 _143313 B s t clauses)). Qed.
Lemma lem8076004 {_143310 _143313 : Type'} (s : _143313 -> _143310) (x : _143310) : (term308 _143310 _143313 s x) = (term308 _143310 _143313 s x).
Proof. exact (eq_refl (term308 _143310 _143313 s x)). Qed.
Lemma lem8076005 {_143310 _143311 _143313 B : Type'} (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : (term323 _143310 _143311 _143313 B clauses t s x) = (term309 _143310 _143311 _143313 B t clauses s x).
Proof. exact (MK_COMB (@lem8076003 _143310 _143311 _143313 B s t clauses) (@lem8076004 _143310 _143313 s x)). Qed.
Lemma lem8076006 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : (term324 _143310 _143311 _143313 B clauses s x) = (term311 _143310 _143311 _143313 B clauses s x).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 B => @lem8076005 _143310 _143311 _143313 B t clauses s x)). Qed.
Lemma lem8076007 {_143311 _143313 B : Type'} : (@ex (_143311 -> _143313 -> B)) = (@ex (_143311 -> _143313 -> B)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> B))). Qed.
Lemma lem8076008 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : (term318 _143310 _143311 _143313 B clauses s x) = (term313 _143310 _143311 _143313 B clauses s x).
Proof. exact (MK_COMB (@lem8076007 _143311 _143313 B) (@lem8076006 _143310 _143311 _143313 B clauses s x)). Qed.
Lemma lem8076009 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8076010 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : (term325 _143310 _143311 _143313 B clauses s x) = (term326 _143310 _143311 _143313 B clauses s x).
Proof. exact (MK_COMB (@lem8076009) (@lem8076008 _143310 _143311 _143313 B clauses s x)). Qed.
Lemma lem8076011 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) : (term321 _143310 _143311 _143313 B s clauses t) = (term270 _143310 _143311 _143313 B s t clauses).
Proof. exact (eq_refl (term321 _143310 _143311 _143313 B s clauses t)). Qed.
Lemma lem8076012 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) : (term327 _143310 _143311 _143313 B s clauses) = (term320 _143310 _143311 _143313 B s clauses).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 B => @lem8076011 _143310 _143311 _143313 B s t clauses)). Qed.
Lemma lem8076013 {_143311 _143313 B : Type'} : (@ex (_143311 -> _143313 -> B)) = (@ex (_143311 -> _143313 -> B)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> B))). Qed.
Lemma lem8076014 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) : (term328 _143310 _143311 _143313 B s clauses) = (term329 _143310 _143311 _143313 B s clauses).
Proof. exact (MK_COMB (@lem8076013 _143311 _143313 B) (@lem8076012 _143310 _143311 _143313 B s clauses)). Qed.
Lemma lem8076015 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8076016 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) : (term330 _143310 _143311 _143313 B s clauses) = (term331 _143310 _143311 _143313 B s clauses).
Proof. exact (MK_COMB (@lem8076015) (@lem8076014 _143310 _143311 _143313 B s clauses)). Qed.
Lemma lem8076017 {_143310 _143313 : Type'} (s : _143313 -> _143310) (x : _143310) : (term308 _143310 _143313 s x) = (term308 _143310 _143313 s x).
Proof. exact (eq_refl (term308 _143310 _143313 s x)). Qed.
Lemma lem8076018 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : (term319 _143310 _143311 _143313 B clauses s x) = (term332 _143310 _143311 _143313 B clauses s x).
Proof. exact (MK_COMB (@lem8076016 _143310 _143311 _143313 B s clauses) (@lem8076017 _143310 _143313 s x)). Qed.
Lemma lem8076019 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : ((term318 _143310 _143311 _143313 B clauses s x) = (term319 _143310 _143311 _143313 B clauses s x)) = ((term313 _143310 _143311 _143313 B clauses s x) = (term332 _143310 _143311 _143313 B clauses s x)).
Proof. exact (MK_COMB (@lem8076010 _143310 _143311 _143313 B clauses s x) (@lem8076018 _143310 _143311 _143313 B clauses s x)). Qed.
Lemma lem8076020 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : (term313 _143310 _143311 _143313 B clauses s x) = (term332 _143310 _143311 _143313 B clauses s x).
Proof. exact (EQ_MP (@lem8076019 _143310 _143311 _143313 B clauses s x) (@lem8076000 _143310 _143311 _143313 B clauses s x)). Qed.
Lemma lem8076031 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : (term312 _143310 _143311 _143313 B clauses s x) = (term332 _143310 _143311 _143313 B clauses s x).
Proof. exact (TRANS (@lem8075976 _143310 _143311 _143313 B clauses s x) (@lem8076020 _143310 _143311 _143313 B clauses s x)). Qed.
Lemma lem8076032 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) : (term333 _143310 _143311 _143313 B clauses x) = (term334 _143310 _143311 _143313 B clauses x).
Proof. exact (fun_ext (fun s : _143313 -> _143310 => @lem8076031 _143310 _143311 _143313 B clauses s x)). Qed.
Lemma lem8076033 {_143310 _143313 : Type'} : (@ex (_143313 -> _143310)) = (@ex (_143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143313 -> _143310))). Qed.
Lemma lem8076034 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) : (term335 _143310 _143311 _143313 B clauses x) = (term336 _143310 _143311 _143313 B clauses x).
Proof. exact (MK_COMB (@lem8076033 _143310 _143313) (@lem8076032 _143310 _143311 _143313 B clauses x)). Qed.
Lemma lem8076083 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8076084 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) : (term337 _143310 _143311 _143313 B clauses x) = (term338 _143310 _143311 _143313 B clauses x).
Proof. exact (MK_COMB (@lem8076083) (@lem8076034 _143310 _143311 _143313 B clauses x)). Qed.
Lemma lem8076085 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8076086 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) : (term133 _143310 _143311 _143313 B clauses x) = (term339 _143310 _143311 _143313 B clauses x).
Proof. exact (MK_COMB (@lem8076085) (@lem8076084 _143310 _143311 _143313 B clauses x)). Qed.
Lemma lem8076087 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : ((@CASEWISE B _143313 _143310 _143311 clauses c x) = _106907) = ((@CASEWISE B _143313 _143310 _143311 clauses c x) = _106907).
Proof. exact (eq_refl ((@CASEWISE B _143313 _143310 _143311 clauses c x) = _106907)). Qed.
Lemma lem8076088 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term135 _143310 _143311 _143313 B clauses c x _106907) = (term340 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (MK_COMB (@lem8076086 _143310 _143311 _143313 B clauses x) (@lem8076087 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8076091 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term138 _143310 _143311 _143313 B clauses c x _106907) = (term341 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (MK_COMB (@lem8075937 _143310 _143311 _143313 B clauses x c) (@lem8076088 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8076094 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term140 _143310 _143311 _143313 B clauses c _106907) = (term342 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (fun_ext (fun x : _143310 => @lem8076091 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8076095 {_143310 : Type'} : (@all _143310) = (@all _143310).
Proof. exact (eq_refl (@all _143310)). Qed.
Lemma lem8076096 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term142 _143310 _143311 _143313 B clauses c _106907) = (term343 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (MK_COMB (@lem8076095 _143310) (@lem8076094 _143310 _143311 _143313 B clauses c _106907)). Qed.
Lemma lem8076145 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term144 _143310 _143311 _143313 B clauses _106907) = (term344 _143310 _143311 _143313 B clauses _106907).
Proof. exact (fun_ext (fun c : _143311 => @lem8076096 _143310 _143311 _143313 B clauses c _106907)). Qed.
Lemma lem8076146 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8076147 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term146 _143310 _143311 _143313 B clauses _106907) = (term345 _143310 _143311 _143313 B clauses _106907).
Proof. exact (MK_COMB (@lem8076146 _143311) (@lem8076145 _143310 _143311 _143313 B clauses _106907)). Qed.
Lemma lem8076152 {_143310 _143311 _143313 B : Type'} (_106907 : B) : (term148 _143310 _143311 _143313 B _106907) = (term346 _143310 _143311 _143313 B _106907).
Proof. exact (fun_ext (fun clauses : type1637 _143310 _143311 _143313 B => @lem8076147 _143310 _143311 _143313 B clauses _106907)). Qed.
Lemma lem8076153 {_143310 _143311 _143313 B : Type'} : (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B)))) = (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))))). Qed.
Lemma lem8076154 {_143310 _143311 _143313 B : Type'} (_106907 : B) : (term149 _143310 _143311 _143313 B _106907) = (term347 _143310 _143311 _143313 B _106907).
Proof. exact (MK_COMB (@lem8076153 _143310 _143311 _143313 B) (@lem8076152 _143310 _143311 _143313 B _106907)). Qed.
Lemma lem8076159 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8076160 {_143310 _143311 _143313 B : Type'} (_106907 : B) : (term151 _143310 _143311 _143313 B _106907) = (term348 _143310 _143311 _143313 B _106907).
Proof. exact (MK_COMB (@lem8076159) (@lem8076154 _143310 _143311 _143313 B _106907)). Qed.
Lemma lem8076230 {A : Type'} (P : Prop) (Q : A -> Prop) : (term266 A P Q) = (term267 A P Q).
Proof. exact (EQ_MP (@lem16434 A P Q) (@lem16433 A P Q)). Qed.
Lemma lem8076231 {_143313 : Type'} (P : Prop) (Q : _143313 -> Prop) : (term266 _143313 P Q) = (term267 _143313 P Q).
Proof. exact (@lem8076230 _143313 P Q). Qed.
Lemma lem8076232 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term349 _143311 _143313 _143320 A s clauses x t c) = (term350 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (@lem8076231 _143313 (term351 _143311 _143313 _143320 A s t clauses) (term352 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8076233 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) (a : _143313) : (term353 _143311 _143313 _143320 A s clauses x t c a) = (term354 _143311 _143313 _143320 A s clauses x t c a).
Proof. exact (eq_refl (term353 _143311 _143313 _143320 A s clauses x t c a)). Qed.
Lemma lem8076234 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) : (term355 _143311 _143313 _143320 A s t clauses) = (term355 _143311 _143313 _143320 A s t clauses).
Proof. exact (eq_refl (term355 _143311 _143313 _143320 A s t clauses)). Qed.
Lemma lem8076235 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) (a : _143313) : (term356 _143311 _143313 _143320 A s clauses x t c a) = (term357 _143311 _143313 _143320 A s clauses x t c a).
Proof. exact (MK_COMB (@lem8076234 _143311 _143313 _143320 A s t clauses) (@lem8076233 _143311 _143313 _143320 A s clauses x t c a)). Qed.
Lemma lem8076236 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term358 _143311 _143313 _143320 A s clauses x t c) = (term359 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8076235 _143311 _143313 _143320 A s clauses x t c a)). Qed.
Lemma lem8076237 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8076238 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term349 _143311 _143313 _143320 A s clauses x t c) = (term360 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (MK_COMB (@lem8076237 _143313) (@lem8076236 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8076239 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8076240 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term361 _143311 _143313 _143320 A s clauses x t c) = (term362 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (MK_COMB (@lem8076239) (@lem8076238 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8076241 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) (a : _143313) : (term353 _143311 _143313 _143320 A s clauses x t c a) = (term354 _143311 _143313 _143320 A s clauses x t c a).
Proof. exact (eq_refl (term353 _143311 _143313 _143320 A s clauses x t c a)). Qed.
Lemma lem8076242 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term363 _143311 _143313 _143320 A s clauses x t c) = (term352 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8076241 _143311 _143313 _143320 A s clauses x t c a)). Qed.
Lemma lem8076243 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8076244 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term364 _143311 _143313 _143320 A s clauses x t c) = (term365 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (MK_COMB (@lem8076243 _143313) (@lem8076242 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8076245 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) : (term355 _143311 _143313 _143320 A s t clauses) = (term355 _143311 _143313 _143320 A s t clauses).
Proof. exact (eq_refl (term355 _143311 _143313 _143320 A s t clauses)). Qed.
Lemma lem8076246 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term350 _143311 _143313 _143320 A s clauses x t c) = (term366 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (MK_COMB (@lem8076245 _143311 _143313 _143320 A s t clauses) (@lem8076244 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8076247 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : ((term349 _143311 _143313 _143320 A s clauses x t c) = (term350 _143311 _143313 _143320 A s clauses x t c)) = ((term360 _143311 _143313 _143320 A s clauses x t c) = (term366 _143311 _143313 _143320 A s clauses x t c)).
Proof. exact (MK_COMB (@lem8076240 _143311 _143313 _143320 A s clauses x t c) (@lem8076246 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8076248 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term360 _143311 _143313 _143320 A s clauses x t c) = (term366 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (EQ_MP (@lem8076247 _143311 _143313 _143320 A s clauses x t c) (@lem8076232 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8076301 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term367 _143311 _143313 _143320 A s clauses x c) = (term368 _143311 _143313 _143320 A s clauses x c).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8076248 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8076302 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8076303 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term369 _143311 _143313 _143320 A s clauses x c) = (term370 _143311 _143313 _143320 A s clauses x c).
Proof. exact (MK_COMB (@lem8076302 _143311 _143313 _143320) (@lem8076301 _143311 _143313 _143320 A s clauses x c)). Qed.
Lemma lem8076352 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term371 _143311 _143313 _143320 A clauses x c) = (term372 _143311 _143313 _143320 A clauses x c).
Proof. exact (fun_ext (fun s : _143313 -> A => @lem8076303 _143311 _143313 _143320 A s clauses x c)). Qed.
Lemma lem8076353 {_143313 A : Type'} : (@ex (_143313 -> A)) = (@ex (_143313 -> A)).
Proof. exact (eq_refl (@ex (_143313 -> A))). Qed.
Lemma lem8076354 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term373 _143311 _143313 _143320 A clauses x c) = (term374 _143311 _143313 _143320 A clauses x c).
Proof. exact (MK_COMB (@lem8076353 _143313 A) (@lem8076352 _143311 _143313 _143320 A clauses x c)). Qed.
Lemma lem8076359 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8076360 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term218 _143311 _143313 _143320 A clauses x c) = (term375 _143311 _143313 _143320 A clauses x c).
Proof. exact (MK_COMB (@lem8076359) (@lem8076354 _143311 _143313 _143320 A clauses x c)). Qed.
Lemma lem8076372 {A : Type'} (P : Prop) (Q : A -> Prop) : (term266 A P Q) = (term267 A P Q).
Proof. exact (EQ_MP (@lem16434 A P Q) (@lem16433 A P Q)). Qed.
Lemma lem8076373 {_143313 : Type'} (P : Prop) (Q : _143313 -> Prop) : (term266 _143313 P Q) = (term267 _143313 P Q).
Proof. exact (@lem8076372 _143313 P Q). Qed.
Lemma lem8076374 {_143311 _143313 _143320 A : Type'} (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : (term376 _143311 _143313 _143320 A t clauses s x) = (term377 _143311 _143313 _143320 A t clauses s x).
Proof. exact (@lem8076373 _143313 (term351 _143311 _143313 _143320 A s t clauses) (term378 _143313 A s x)). Qed.
Lemma lem8076375 {_143313 A : Type'} (s : _143313 -> A) (a : _143313) (x : A) : (term379 _143313 A s x a) = ((s a) = x).
Proof. exact (eq_refl (term379 _143313 A s x a)). Qed.
Lemma lem8076376 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) : (term355 _143311 _143313 _143320 A s t clauses) = (term355 _143311 _143313 _143320 A s t clauses).
Proof. exact (eq_refl (term355 _143311 _143313 _143320 A s t clauses)). Qed.
Lemma lem8076377 {_143311 _143313 _143320 A : Type'} (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (a : _143313) (x : A) : (term380 _143311 _143313 _143320 A t clauses s x a) = (term381 _143311 _143313 _143320 A t clauses s a x).
Proof. exact (MK_COMB (@lem8076376 _143311 _143313 _143320 A s t clauses) (@lem8076375 _143313 A s a x)). Qed.
Lemma lem8076378 {_143311 _143313 _143320 A : Type'} (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : (term382 _143311 _143313 _143320 A t clauses s x) = (term383 _143311 _143313 _143320 A t clauses s x).
Proof. exact (fun_ext (fun a : _143313 => @lem8076377 _143311 _143313 _143320 A t clauses s a x)). Qed.
Lemma lem8076379 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8076380 {_143311 _143313 _143320 A : Type'} (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : (term376 _143311 _143313 _143320 A t clauses s x) = (term384 _143311 _143313 _143320 A t clauses s x).
Proof. exact (MK_COMB (@lem8076379 _143313) (@lem8076378 _143311 _143313 _143320 A t clauses s x)). Qed.
Lemma lem8076381 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8076382 {_143311 _143313 _143320 A : Type'} (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : (term385 _143311 _143313 _143320 A t clauses s x) = (term386 _143311 _143313 _143320 A t clauses s x).
Proof. exact (MK_COMB (@lem8076381) (@lem8076380 _143311 _143313 _143320 A t clauses s x)). Qed.
Lemma lem8076383 {_143313 A : Type'} (s : _143313 -> A) (a : _143313) (x : A) : (term379 _143313 A s x a) = ((s a) = x).
Proof. exact (eq_refl (term379 _143313 A s x a)). Qed.
Lemma lem8076384 {_143313 A : Type'} (s : _143313 -> A) (x : A) : (term387 _143313 A s x) = (term378 _143313 A s x).
Proof. exact (fun_ext (fun a : _143313 => @lem8076383 _143313 A s a x)). Qed.
Lemma lem8076385 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8076386 {_143313 A : Type'} (s : _143313 -> A) (x : A) : (term388 _143313 A s x) = (term389 _143313 A s x).
Proof. exact (MK_COMB (@lem8076385 _143313) (@lem8076384 _143313 A s x)). Qed.
Lemma lem8076387 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) : (term355 _143311 _143313 _143320 A s t clauses) = (term355 _143311 _143313 _143320 A s t clauses).
Proof. exact (eq_refl (term355 _143311 _143313 _143320 A s t clauses)). Qed.
Lemma lem8076388 {_143311 _143313 _143320 A : Type'} (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : (term377 _143311 _143313 _143320 A t clauses s x) = (term390 _143311 _143313 _143320 A t clauses s x).
Proof. exact (MK_COMB (@lem8076387 _143311 _143313 _143320 A s t clauses) (@lem8076386 _143313 A s x)). Qed.
Lemma lem8076389 {_143311 _143313 _143320 A : Type'} (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : ((term376 _143311 _143313 _143320 A t clauses s x) = (term377 _143311 _143313 _143320 A t clauses s x)) = ((term384 _143311 _143313 _143320 A t clauses s x) = (term390 _143311 _143313 _143320 A t clauses s x)).
Proof. exact (MK_COMB (@lem8076382 _143311 _143313 _143320 A t clauses s x) (@lem8076388 _143311 _143313 _143320 A t clauses s x)). Qed.
Lemma lem8076390 {_143311 _143313 _143320 A : Type'} (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : (term384 _143311 _143313 _143320 A t clauses s x) = (term390 _143311 _143313 _143320 A t clauses s x).
Proof. exact (EQ_MP (@lem8076389 _143311 _143313 _143320 A t clauses s x) (@lem8076374 _143311 _143313 _143320 A t clauses s x)). Qed.
Lemma lem8076397 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : (term391 _143311 _143313 _143320 A clauses s x) = (term392 _143311 _143313 _143320 A clauses s x).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8076390 _143311 _143313 _143320 A t clauses s x)). Qed.
Lemma lem8076398 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8076399 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : (term393 _143311 _143313 _143320 A clauses s x) = (term394 _143311 _143313 _143320 A clauses s x).
Proof. exact (MK_COMB (@lem8076398 _143311 _143313 _143320) (@lem8076397 _143311 _143313 _143320 A clauses s x)). Qed.
Lemma lem8076421 {A : Type'} (P : A -> Prop) (Q : Prop) : (term314 A P Q) = (term315 A P Q).
Proof. exact (EQ_MP (@lem16440 A P Q) (@lem16439 A P Q)). Qed.
Lemma lem8076422 {_143311 _143313 _143320 : Type'} (P : type443 _143311 _143313 _143320) (Q : Prop) : (term316 _143311 _143313 _143320 P Q) = (term317 _143311 _143313 _143320 P Q).
Proof. exact (@lem8076421 (type1412 _143311 _143313 _143320) P Q). Qed.
Lemma lem8076423 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : (term395 _143311 _143313 _143320 A clauses s x) = (term396 _143311 _143313 _143320 A clauses s x).
Proof. exact (@lem8076422 _143311 _143313 _143320 (term397 _143311 _143313 _143320 A s clauses) (term389 _143313 A s x)). Qed.
Lemma lem8076424 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) : (term398 _143311 _143313 _143320 A s clauses t) = (term351 _143311 _143313 _143320 A s t clauses).
Proof. exact (eq_refl (term398 _143311 _143313 _143320 A s clauses t)). Qed.
Lemma lem8076425 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8076426 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) : (term399 _143311 _143313 _143320 A s clauses t) = (term355 _143311 _143313 _143320 A s t clauses).
Proof. exact (MK_COMB (@lem8076425) (@lem8076424 _143311 _143313 _143320 A s t clauses)). Qed.
Lemma lem8076427 {_143313 A : Type'} (s : _143313 -> A) (x : A) : (term389 _143313 A s x) = (term389 _143313 A s x).
Proof. exact (eq_refl (term389 _143313 A s x)). Qed.
Lemma lem8076428 {_143311 _143313 _143320 A : Type'} (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : (term400 _143311 _143313 _143320 A clauses t s x) = (term390 _143311 _143313 _143320 A t clauses s x).
Proof. exact (MK_COMB (@lem8076426 _143311 _143313 _143320 A s t clauses) (@lem8076427 _143313 A s x)). Qed.
Lemma lem8076429 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : (term401 _143311 _143313 _143320 A clauses s x) = (term392 _143311 _143313 _143320 A clauses s x).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8076428 _143311 _143313 _143320 A t clauses s x)). Qed.
Lemma lem8076430 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8076431 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : (term395 _143311 _143313 _143320 A clauses s x) = (term394 _143311 _143313 _143320 A clauses s x).
Proof. exact (MK_COMB (@lem8076430 _143311 _143313 _143320) (@lem8076429 _143311 _143313 _143320 A clauses s x)). Qed.
Lemma lem8076432 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8076433 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : (term402 _143311 _143313 _143320 A clauses s x) = (term403 _143311 _143313 _143320 A clauses s x).
Proof. exact (MK_COMB (@lem8076432) (@lem8076431 _143311 _143313 _143320 A clauses s x)). Qed.
Lemma lem8076434 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) : (term398 _143311 _143313 _143320 A s clauses t) = (term351 _143311 _143313 _143320 A s t clauses).
Proof. exact (eq_refl (term398 _143311 _143313 _143320 A s clauses t)). Qed.
Lemma lem8076435 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) : (term404 _143311 _143313 _143320 A s clauses) = (term397 _143311 _143313 _143320 A s clauses).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8076434 _143311 _143313 _143320 A s t clauses)). Qed.
Lemma lem8076436 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8076437 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) : (term405 _143311 _143313 _143320 A s clauses) = (term406 _143311 _143313 _143320 A s clauses).
Proof. exact (MK_COMB (@lem8076436 _143311 _143313 _143320) (@lem8076435 _143311 _143313 _143320 A s clauses)). Qed.
Lemma lem8076438 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8076439 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) : (term407 _143311 _143313 _143320 A s clauses) = (term408 _143311 _143313 _143320 A s clauses).
Proof. exact (MK_COMB (@lem8076438) (@lem8076437 _143311 _143313 _143320 A s clauses)). Qed.
Lemma lem8076440 {_143313 A : Type'} (s : _143313 -> A) (x : A) : (term389 _143313 A s x) = (term389 _143313 A s x).
Proof. exact (eq_refl (term389 _143313 A s x)). Qed.
Lemma lem8076441 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : (term396 _143311 _143313 _143320 A clauses s x) = (term409 _143311 _143313 _143320 A clauses s x).
Proof. exact (MK_COMB (@lem8076439 _143311 _143313 _143320 A s clauses) (@lem8076440 _143313 A s x)). Qed.
Lemma lem8076442 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : ((term395 _143311 _143313 _143320 A clauses s x) = (term396 _143311 _143313 _143320 A clauses s x)) = ((term394 _143311 _143313 _143320 A clauses s x) = (term409 _143311 _143313 _143320 A clauses s x)).
Proof. exact (MK_COMB (@lem8076433 _143311 _143313 _143320 A clauses s x) (@lem8076441 _143311 _143313 _143320 A clauses s x)). Qed.
Lemma lem8076443 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : (term394 _143311 _143313 _143320 A clauses s x) = (term409 _143311 _143313 _143320 A clauses s x).
Proof. exact (EQ_MP (@lem8076442 _143311 _143313 _143320 A clauses s x) (@lem8076423 _143311 _143313 _143320 A clauses s x)). Qed.
Lemma lem8076454 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : (term393 _143311 _143313 _143320 A clauses s x) = (term409 _143311 _143313 _143320 A clauses s x).
Proof. exact (TRANS (@lem8076399 _143311 _143313 _143320 A clauses s x) (@lem8076443 _143311 _143313 _143320 A clauses s x)). Qed.
Lemma lem8076455 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) : (term410 _143311 _143313 _143320 A clauses x) = (term411 _143311 _143313 _143320 A clauses x).
Proof. exact (fun_ext (fun s : _143313 -> A => @lem8076454 _143311 _143313 _143320 A clauses s x)). Qed.
Lemma lem8076456 {_143313 A : Type'} : (@ex (_143313 -> A)) = (@ex (_143313 -> A)).
Proof. exact (eq_refl (@ex (_143313 -> A))). Qed.
Lemma lem8076457 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) : (term412 _143311 _143313 _143320 A clauses x) = (term413 _143311 _143313 _143320 A clauses x).
Proof. exact (MK_COMB (@lem8076456 _143313 A) (@lem8076455 _143311 _143313 _143320 A clauses x)). Qed.
Lemma lem8076506 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8076507 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) : (term414 _143311 _143313 _143320 A clauses x) = (term415 _143311 _143313 _143320 A clauses x).
Proof. exact (MK_COMB (@lem8076506) (@lem8076457 _143311 _143313 _143320 A clauses x)). Qed.
Lemma lem8076508 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8076509 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) : (term215 _143311 _143313 _143320 A clauses x) = (term416 _143311 _143313 _143320 A clauses x).
Proof. exact (MK_COMB (@lem8076508) (@lem8076507 _143311 _143313 _143320 A clauses x)). Qed.
Lemma lem8076510 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : ((@CASEWISE _143320 _143313 A _143311 clauses c x) = _106908) = ((@CASEWISE _143320 _143313 A _143311 clauses c x) = _106908).
Proof. exact (eq_refl ((@CASEWISE _143320 _143313 A _143311 clauses c x) = _106908)). Qed.
Lemma lem8076511 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term217 _143311 _143313 _143320 A clauses c x _106908) = (term417 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (MK_COMB (@lem8076509 _143311 _143313 _143320 A clauses x) (@lem8076510 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8076514 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term220 _143311 _143313 _143320 A clauses c x _106908) = (term418 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (MK_COMB (@lem8076360 _143311 _143313 _143320 A clauses x c) (@lem8076511 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8076517 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term222 _143311 _143313 _143320 A clauses c _106908) = (term419 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (fun_ext (fun x : A => @lem8076514 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8076518 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8076519 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term224 _143311 _143313 _143320 A clauses c _106908) = (term420 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (MK_COMB (@lem8076518 A) (@lem8076517 _143311 _143313 _143320 A clauses c _106908)). Qed.
Lemma lem8076568 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term226 _143311 _143313 _143320 A clauses _106908) = (term421 _143311 _143313 _143320 A clauses _106908).
Proof. exact (fun_ext (fun c : _143311 => @lem8076519 _143311 _143313 _143320 A clauses c _106908)). Qed.
Lemma lem8076569 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8076570 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term228 _143311 _143313 _143320 A clauses _106908) = (term422 _143311 _143313 _143320 A clauses _106908).
Proof. exact (MK_COMB (@lem8076569 _143311) (@lem8076568 _143311 _143313 _143320 A clauses _106908)). Qed.
Lemma lem8076575 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) : (term230 _143311 _143313 _143320 A _106908) = (term423 _143311 _143313 _143320 A _106908).
Proof. exact (fun_ext (fun clauses : type1634 _143311 _143313 _143320 A => @lem8076570 _143311 _143313 _143320 A clauses _106908)). Qed.
Lemma lem8076576 {_143311 _143313 _143320 A : Type'} : (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320)))) = (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))))). Qed.
Lemma lem8076577 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) : (term231 _143311 _143313 _143320 A _106908) = (term424 _143311 _143313 _143320 A _106908).
Proof. exact (MK_COMB (@lem8076576 _143311 _143313 _143320 A) (@lem8076575 _143311 _143313 _143320 A _106908)). Qed.
Lemma lem8076582 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8076583 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) : (term232 _143311 _143313 _143320 A _106908) = (term425 _143311 _143313 _143320 A _106908).
Proof. exact (MK_COMB (@lem8076582) (@lem8076577 _143311 _143313 _143320 A _106908)). Qed.
Lemma lem8076653 {A : Type'} (P : Prop) (Q : A -> Prop) : (term266 A P Q) = (term267 A P Q).
Proof. exact (EQ_MP (@lem16434 A P Q) (@lem16433 A P Q)). Qed.
Lemma lem8076654 {_143313 : Type'} (P : Prop) (Q : _143313 -> Prop) : (term266 _143313 P Q) = (term267 _143313 P Q).
Proof. exact (@lem8076653 _143313 P Q). Qed.
Lemma lem8076655 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term349 _143311 _143313 _143320 B s clauses x t c) = (term350 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (@lem8076654 _143313 (term351 _143311 _143313 _143320 B s t clauses) (term352 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8076656 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) (a : _143313) : (term353 _143311 _143313 _143320 B s clauses x t c a) = (term354 _143311 _143313 _143320 B s clauses x t c a).
Proof. exact (eq_refl (term353 _143311 _143313 _143320 B s clauses x t c a)). Qed.
Lemma lem8076657 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) : (term355 _143311 _143313 _143320 B s t clauses) = (term355 _143311 _143313 _143320 B s t clauses).
Proof. exact (eq_refl (term355 _143311 _143313 _143320 B s t clauses)). Qed.
Lemma lem8076658 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) (a : _143313) : (term356 _143311 _143313 _143320 B s clauses x t c a) = (term357 _143311 _143313 _143320 B s clauses x t c a).
Proof. exact (MK_COMB (@lem8076657 _143311 _143313 _143320 B s t clauses) (@lem8076656 _143311 _143313 _143320 B s clauses x t c a)). Qed.
Lemma lem8076659 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term358 _143311 _143313 _143320 B s clauses x t c) = (term359 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8076658 _143311 _143313 _143320 B s clauses x t c a)). Qed.
Lemma lem8076660 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8076661 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term349 _143311 _143313 _143320 B s clauses x t c) = (term360 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (MK_COMB (@lem8076660 _143313) (@lem8076659 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8076662 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8076663 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term361 _143311 _143313 _143320 B s clauses x t c) = (term362 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (MK_COMB (@lem8076662) (@lem8076661 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8076664 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) (a : _143313) : (term353 _143311 _143313 _143320 B s clauses x t c a) = (term354 _143311 _143313 _143320 B s clauses x t c a).
Proof. exact (eq_refl (term353 _143311 _143313 _143320 B s clauses x t c a)). Qed.
Lemma lem8076665 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term363 _143311 _143313 _143320 B s clauses x t c) = (term352 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8076664 _143311 _143313 _143320 B s clauses x t c a)). Qed.
Lemma lem8076666 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8076667 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term364 _143311 _143313 _143320 B s clauses x t c) = (term365 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (MK_COMB (@lem8076666 _143313) (@lem8076665 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8076668 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) : (term355 _143311 _143313 _143320 B s t clauses) = (term355 _143311 _143313 _143320 B s t clauses).
Proof. exact (eq_refl (term355 _143311 _143313 _143320 B s t clauses)). Qed.
Lemma lem8076669 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term350 _143311 _143313 _143320 B s clauses x t c) = (term366 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (MK_COMB (@lem8076668 _143311 _143313 _143320 B s t clauses) (@lem8076667 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8076670 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : ((term349 _143311 _143313 _143320 B s clauses x t c) = (term350 _143311 _143313 _143320 B s clauses x t c)) = ((term360 _143311 _143313 _143320 B s clauses x t c) = (term366 _143311 _143313 _143320 B s clauses x t c)).
Proof. exact (MK_COMB (@lem8076663 _143311 _143313 _143320 B s clauses x t c) (@lem8076669 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8076671 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term360 _143311 _143313 _143320 B s clauses x t c) = (term366 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (EQ_MP (@lem8076670 _143311 _143313 _143320 B s clauses x t c) (@lem8076655 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8076724 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term367 _143311 _143313 _143320 B s clauses x c) = (term368 _143311 _143313 _143320 B s clauses x c).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8076671 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8076725 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8076726 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term369 _143311 _143313 _143320 B s clauses x c) = (term370 _143311 _143313 _143320 B s clauses x c).
Proof. exact (MK_COMB (@lem8076725 _143311 _143313 _143320) (@lem8076724 _143311 _143313 _143320 B s clauses x c)). Qed.
Lemma lem8076775 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term371 _143311 _143313 _143320 B clauses x c) = (term372 _143311 _143313 _143320 B clauses x c).
Proof. exact (fun_ext (fun s : _143313 -> B => @lem8076726 _143311 _143313 _143320 B s clauses x c)). Qed.
Lemma lem8076776 {_143313 B : Type'} : (@ex (_143313 -> B)) = (@ex (_143313 -> B)).
Proof. exact (eq_refl (@ex (_143313 -> B))). Qed.
Lemma lem8076777 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term373 _143311 _143313 _143320 B clauses x c) = (term374 _143311 _143313 _143320 B clauses x c).
Proof. exact (MK_COMB (@lem8076776 _143313 B) (@lem8076775 _143311 _143313 _143320 B clauses x c)). Qed.
Lemma lem8076782 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8076783 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term218 _143311 _143313 _143320 B clauses x c) = (term375 _143311 _143313 _143320 B clauses x c).
Proof. exact (MK_COMB (@lem8076782) (@lem8076777 _143311 _143313 _143320 B clauses x c)). Qed.
Lemma lem8076795 {A : Type'} (P : Prop) (Q : A -> Prop) : (term266 A P Q) = (term267 A P Q).
Proof. exact (EQ_MP (@lem16434 A P Q) (@lem16433 A P Q)). Qed.
Lemma lem8076796 {_143313 : Type'} (P : Prop) (Q : _143313 -> Prop) : (term266 _143313 P Q) = (term267 _143313 P Q).
Proof. exact (@lem8076795 _143313 P Q). Qed.
Lemma lem8076797 {_143311 _143313 _143320 B : Type'} (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : (term376 _143311 _143313 _143320 B t clauses s x) = (term377 _143311 _143313 _143320 B t clauses s x).
Proof. exact (@lem8076796 _143313 (term351 _143311 _143313 _143320 B s t clauses) (term378 _143313 B s x)). Qed.
Lemma lem8076798 {_143313 B : Type'} (s : _143313 -> B) (a : _143313) (x : B) : (term379 _143313 B s x a) = ((s a) = x).
Proof. exact (eq_refl (term379 _143313 B s x a)). Qed.
Lemma lem8076799 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) : (term355 _143311 _143313 _143320 B s t clauses) = (term355 _143311 _143313 _143320 B s t clauses).
Proof. exact (eq_refl (term355 _143311 _143313 _143320 B s t clauses)). Qed.
Lemma lem8076800 {_143311 _143313 _143320 B : Type'} (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (a : _143313) (x : B) : (term380 _143311 _143313 _143320 B t clauses s x a) = (term381 _143311 _143313 _143320 B t clauses s a x).
Proof. exact (MK_COMB (@lem8076799 _143311 _143313 _143320 B s t clauses) (@lem8076798 _143313 B s a x)). Qed.
Lemma lem8076801 {_143311 _143313 _143320 B : Type'} (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : (term382 _143311 _143313 _143320 B t clauses s x) = (term383 _143311 _143313 _143320 B t clauses s x).
Proof. exact (fun_ext (fun a : _143313 => @lem8076800 _143311 _143313 _143320 B t clauses s a x)). Qed.
Lemma lem8076802 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8076803 {_143311 _143313 _143320 B : Type'} (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : (term376 _143311 _143313 _143320 B t clauses s x) = (term384 _143311 _143313 _143320 B t clauses s x).
Proof. exact (MK_COMB (@lem8076802 _143313) (@lem8076801 _143311 _143313 _143320 B t clauses s x)). Qed.
Lemma lem8076804 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8076805 {_143311 _143313 _143320 B : Type'} (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : (term385 _143311 _143313 _143320 B t clauses s x) = (term386 _143311 _143313 _143320 B t clauses s x).
Proof. exact (MK_COMB (@lem8076804) (@lem8076803 _143311 _143313 _143320 B t clauses s x)). Qed.
Lemma lem8076806 {_143313 B : Type'} (s : _143313 -> B) (a : _143313) (x : B) : (term379 _143313 B s x a) = ((s a) = x).
Proof. exact (eq_refl (term379 _143313 B s x a)). Qed.
Lemma lem8076807 {_143313 B : Type'} (s : _143313 -> B) (x : B) : (term387 _143313 B s x) = (term378 _143313 B s x).
Proof. exact (fun_ext (fun a : _143313 => @lem8076806 _143313 B s a x)). Qed.
Lemma lem8076808 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8076809 {_143313 B : Type'} (s : _143313 -> B) (x : B) : (term388 _143313 B s x) = (term389 _143313 B s x).
Proof. exact (MK_COMB (@lem8076808 _143313) (@lem8076807 _143313 B s x)). Qed.
Lemma lem8076810 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) : (term355 _143311 _143313 _143320 B s t clauses) = (term355 _143311 _143313 _143320 B s t clauses).
Proof. exact (eq_refl (term355 _143311 _143313 _143320 B s t clauses)). Qed.
Lemma lem8076811 {_143311 _143313 _143320 B : Type'} (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : (term377 _143311 _143313 _143320 B t clauses s x) = (term390 _143311 _143313 _143320 B t clauses s x).
Proof. exact (MK_COMB (@lem8076810 _143311 _143313 _143320 B s t clauses) (@lem8076809 _143313 B s x)). Qed.
Lemma lem8076812 {_143311 _143313 _143320 B : Type'} (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : ((term376 _143311 _143313 _143320 B t clauses s x) = (term377 _143311 _143313 _143320 B t clauses s x)) = ((term384 _143311 _143313 _143320 B t clauses s x) = (term390 _143311 _143313 _143320 B t clauses s x)).
Proof. exact (MK_COMB (@lem8076805 _143311 _143313 _143320 B t clauses s x) (@lem8076811 _143311 _143313 _143320 B t clauses s x)). Qed.
Lemma lem8076813 {_143311 _143313 _143320 B : Type'} (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : (term384 _143311 _143313 _143320 B t clauses s x) = (term390 _143311 _143313 _143320 B t clauses s x).
Proof. exact (EQ_MP (@lem8076812 _143311 _143313 _143320 B t clauses s x) (@lem8076797 _143311 _143313 _143320 B t clauses s x)). Qed.
Lemma lem8076820 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : (term391 _143311 _143313 _143320 B clauses s x) = (term392 _143311 _143313 _143320 B clauses s x).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8076813 _143311 _143313 _143320 B t clauses s x)). Qed.
Lemma lem8076821 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8076822 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : (term393 _143311 _143313 _143320 B clauses s x) = (term394 _143311 _143313 _143320 B clauses s x).
Proof. exact (MK_COMB (@lem8076821 _143311 _143313 _143320) (@lem8076820 _143311 _143313 _143320 B clauses s x)). Qed.
Lemma lem8076844 {A : Type'} (P : A -> Prop) (Q : Prop) : (term314 A P Q) = (term315 A P Q).
Proof. exact (EQ_MP (@lem16440 A P Q) (@lem16439 A P Q)). Qed.
Lemma lem8076845 {_143311 _143313 _143320 : Type'} (P : type443 _143311 _143313 _143320) (Q : Prop) : (term316 _143311 _143313 _143320 P Q) = (term317 _143311 _143313 _143320 P Q).
Proof. exact (@lem8076844 (type1412 _143311 _143313 _143320) P Q). Qed.
Lemma lem8076846 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : (term395 _143311 _143313 _143320 B clauses s x) = (term396 _143311 _143313 _143320 B clauses s x).
Proof. exact (@lem8076845 _143311 _143313 _143320 (term397 _143311 _143313 _143320 B s clauses) (term389 _143313 B s x)). Qed.
Lemma lem8076847 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) : (term398 _143311 _143313 _143320 B s clauses t) = (term351 _143311 _143313 _143320 B s t clauses).
Proof. exact (eq_refl (term398 _143311 _143313 _143320 B s clauses t)). Qed.
Lemma lem8076848 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8076849 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) : (term399 _143311 _143313 _143320 B s clauses t) = (term355 _143311 _143313 _143320 B s t clauses).
Proof. exact (MK_COMB (@lem8076848) (@lem8076847 _143311 _143313 _143320 B s t clauses)). Qed.
Lemma lem8076850 {_143313 B : Type'} (s : _143313 -> B) (x : B) : (term389 _143313 B s x) = (term389 _143313 B s x).
Proof. exact (eq_refl (term389 _143313 B s x)). Qed.
Lemma lem8076851 {_143311 _143313 _143320 B : Type'} (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : (term400 _143311 _143313 _143320 B clauses t s x) = (term390 _143311 _143313 _143320 B t clauses s x).
Proof. exact (MK_COMB (@lem8076849 _143311 _143313 _143320 B s t clauses) (@lem8076850 _143313 B s x)). Qed.
Lemma lem8076852 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : (term401 _143311 _143313 _143320 B clauses s x) = (term392 _143311 _143313 _143320 B clauses s x).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8076851 _143311 _143313 _143320 B t clauses s x)). Qed.
Lemma lem8076853 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8076854 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : (term395 _143311 _143313 _143320 B clauses s x) = (term394 _143311 _143313 _143320 B clauses s x).
Proof. exact (MK_COMB (@lem8076853 _143311 _143313 _143320) (@lem8076852 _143311 _143313 _143320 B clauses s x)). Qed.
Lemma lem8076855 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8076856 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : (term402 _143311 _143313 _143320 B clauses s x) = (term403 _143311 _143313 _143320 B clauses s x).
Proof. exact (MK_COMB (@lem8076855) (@lem8076854 _143311 _143313 _143320 B clauses s x)). Qed.
Lemma lem8076857 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) : (term398 _143311 _143313 _143320 B s clauses t) = (term351 _143311 _143313 _143320 B s t clauses).
Proof. exact (eq_refl (term398 _143311 _143313 _143320 B s clauses t)). Qed.
Lemma lem8076858 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) : (term404 _143311 _143313 _143320 B s clauses) = (term397 _143311 _143313 _143320 B s clauses).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8076857 _143311 _143313 _143320 B s t clauses)). Qed.
Lemma lem8076859 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8076860 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) : (term405 _143311 _143313 _143320 B s clauses) = (term406 _143311 _143313 _143320 B s clauses).
Proof. exact (MK_COMB (@lem8076859 _143311 _143313 _143320) (@lem8076858 _143311 _143313 _143320 B s clauses)). Qed.
Lemma lem8076861 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8076862 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) : (term407 _143311 _143313 _143320 B s clauses) = (term408 _143311 _143313 _143320 B s clauses).
Proof. exact (MK_COMB (@lem8076861) (@lem8076860 _143311 _143313 _143320 B s clauses)). Qed.
Lemma lem8076863 {_143313 B : Type'} (s : _143313 -> B) (x : B) : (term389 _143313 B s x) = (term389 _143313 B s x).
Proof. exact (eq_refl (term389 _143313 B s x)). Qed.
Lemma lem8076864 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : (term396 _143311 _143313 _143320 B clauses s x) = (term409 _143311 _143313 _143320 B clauses s x).
Proof. exact (MK_COMB (@lem8076862 _143311 _143313 _143320 B s clauses) (@lem8076863 _143313 B s x)). Qed.
Lemma lem8076865 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : ((term395 _143311 _143313 _143320 B clauses s x) = (term396 _143311 _143313 _143320 B clauses s x)) = ((term394 _143311 _143313 _143320 B clauses s x) = (term409 _143311 _143313 _143320 B clauses s x)).
Proof. exact (MK_COMB (@lem8076856 _143311 _143313 _143320 B clauses s x) (@lem8076864 _143311 _143313 _143320 B clauses s x)). Qed.
Lemma lem8076866 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : (term394 _143311 _143313 _143320 B clauses s x) = (term409 _143311 _143313 _143320 B clauses s x).
Proof. exact (EQ_MP (@lem8076865 _143311 _143313 _143320 B clauses s x) (@lem8076846 _143311 _143313 _143320 B clauses s x)). Qed.
Lemma lem8076877 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : (term393 _143311 _143313 _143320 B clauses s x) = (term409 _143311 _143313 _143320 B clauses s x).
Proof. exact (TRANS (@lem8076822 _143311 _143313 _143320 B clauses s x) (@lem8076866 _143311 _143313 _143320 B clauses s x)). Qed.
Lemma lem8076878 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) : (term410 _143311 _143313 _143320 B clauses x) = (term411 _143311 _143313 _143320 B clauses x).
Proof. exact (fun_ext (fun s : _143313 -> B => @lem8076877 _143311 _143313 _143320 B clauses s x)). Qed.
Lemma lem8076879 {_143313 B : Type'} : (@ex (_143313 -> B)) = (@ex (_143313 -> B)).
Proof. exact (eq_refl (@ex (_143313 -> B))). Qed.
Lemma lem8076880 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) : (term412 _143311 _143313 _143320 B clauses x) = (term413 _143311 _143313 _143320 B clauses x).
Proof. exact (MK_COMB (@lem8076879 _143313 B) (@lem8076878 _143311 _143313 _143320 B clauses x)). Qed.
Lemma lem8076929 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8076930 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) : (term414 _143311 _143313 _143320 B clauses x) = (term415 _143311 _143313 _143320 B clauses x).
Proof. exact (MK_COMB (@lem8076929) (@lem8076880 _143311 _143313 _143320 B clauses x)). Qed.
Lemma lem8076931 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8076932 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) : (term215 _143311 _143313 _143320 B clauses x) = (term416 _143311 _143313 _143320 B clauses x).
Proof. exact (MK_COMB (@lem8076931) (@lem8076930 _143311 _143313 _143320 B clauses x)). Qed.
Lemma lem8076933 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : ((@CASEWISE _143320 _143313 B _143311 clauses c x) = _106908) = ((@CASEWISE _143320 _143313 B _143311 clauses c x) = _106908).
Proof. exact (eq_refl ((@CASEWISE _143320 _143313 B _143311 clauses c x) = _106908)). Qed.
Lemma lem8076934 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term217 _143311 _143313 _143320 B clauses c x _106908) = (term417 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (MK_COMB (@lem8076932 _143311 _143313 _143320 B clauses x) (@lem8076933 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8076937 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term220 _143311 _143313 _143320 B clauses c x _106908) = (term418 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (MK_COMB (@lem8076783 _143311 _143313 _143320 B clauses x c) (@lem8076934 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8076940 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term222 _143311 _143313 _143320 B clauses c _106908) = (term419 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (fun_ext (fun x : B => @lem8076937 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8076941 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8076942 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term224 _143311 _143313 _143320 B clauses c _106908) = (term420 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (MK_COMB (@lem8076941 B) (@lem8076940 _143311 _143313 _143320 B clauses c _106908)). Qed.
Lemma lem8076991 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term226 _143311 _143313 _143320 B clauses _106908) = (term421 _143311 _143313 _143320 B clauses _106908).
Proof. exact (fun_ext (fun c : _143311 => @lem8076942 _143311 _143313 _143320 B clauses c _106908)). Qed.
Lemma lem8076992 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8076993 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term228 _143311 _143313 _143320 B clauses _106908) = (term422 _143311 _143313 _143320 B clauses _106908).
Proof. exact (MK_COMB (@lem8076992 _143311) (@lem8076991 _143311 _143313 _143320 B clauses _106908)). Qed.
Lemma lem8076998 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) : (term230 _143311 _143313 _143320 B _106908) = (term423 _143311 _143313 _143320 B _106908).
Proof. exact (fun_ext (fun clauses : type1634 _143311 _143313 _143320 B => @lem8076993 _143311 _143313 _143320 B clauses _106908)). Qed.
Lemma lem8076999 {_143311 _143313 _143320 B : Type'} : (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320)))) = (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))))). Qed.
Lemma lem8077000 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) : (term231 _143311 _143313 _143320 B _106908) = (term424 _143311 _143313 _143320 B _106908).
Proof. exact (MK_COMB (@lem8076999 _143311 _143313 _143320 B) (@lem8076998 _143311 _143313 _143320 B _106908)). Qed.
Lemma lem8077005 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8077006 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) : (term232 _143311 _143313 _143320 B _106908) = (term425 _143311 _143313 _143320 B _106908).
Proof. exact (MK_COMB (@lem8077005) (@lem8077000 _143311 _143313 _143320 B _106908)). Qed.
Lemma lem8077008 (t : Prop) : (t -> False) = (~ t).
Proof. exact (proj2 (@lem16474 t)). Qed.
Lemma lem8077009 {A B C P : Type'} (_106907 : B) : (term190 A B C P _106907) = (term426 A B C P _106907).
Proof. exact (@lem8077008 (term186 A B C P _106907)). Qed.
Lemma lem8077077 {A : Type'} (P : Prop) (Q : A -> Prop) : (term266 A P Q) = (term267 A P Q).
Proof. exact (EQ_MP (@lem16434 A P Q) (@lem16433 A P Q)). Qed.
Lemma lem8077078 {P : Type'} (P' : Prop) (Q : P -> Prop) : (term266 P P' Q) = (term267 P P' Q).
Proof. exact (@lem8077077 P P' Q). Qed.
Lemma lem8077079 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term427 A B C P s clauses x t c) = (term428 A B C P s clauses x t c).
Proof. exact (@lem8077078 P (term429 A B C P s t clauses) (term430 A B C P s clauses x t c)). Qed.
Lemma lem8077080 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) (a : P) : (term431 A B C P s clauses x t c a) = (term432 A B C P s clauses x t c a).
Proof. exact (eq_refl (term431 A B C P s clauses x t c a)). Qed.
Lemma lem8077081 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term433 A B C P s t clauses) = (term433 A B C P s t clauses).
Proof. exact (eq_refl (term433 A B C P s t clauses)). Qed.
Lemma lem8077082 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) (a : P) : (term434 A B C P s clauses x t c a) = (term435 A B C P s clauses x t c a).
Proof. exact (MK_COMB (@lem8077081 A B C P s t clauses) (@lem8077080 A B C P s clauses x t c a)). Qed.
Lemma lem8077083 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term436 A B C P s clauses x t c) = (term437 A B C P s clauses x t c).
Proof. exact (fun_ext (fun a : P => @lem8077082 A B C P s clauses x t c a)). Qed.
Lemma lem8077084 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8077085 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term427 A B C P s clauses x t c) = (term438 A B C P s clauses x t c).
Proof. exact (MK_COMB (@lem8077084 P) (@lem8077083 A B C P s clauses x t c)). Qed.
Lemma lem8077086 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8077087 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term439 A B C P s clauses x t c) = (term440 A B C P s clauses x t c).
Proof. exact (MK_COMB (@lem8077086) (@lem8077085 A B C P s clauses x t c)). Qed.
Lemma lem8077088 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) (a : P) : (term431 A B C P s clauses x t c a) = (term432 A B C P s clauses x t c a).
Proof. exact (eq_refl (term431 A B C P s clauses x t c a)). Qed.
Lemma lem8077089 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term441 A B C P s clauses x t c) = (term430 A B C P s clauses x t c).
Proof. exact (fun_ext (fun a : P => @lem8077088 A B C P s clauses x t c a)). Qed.
Lemma lem8077090 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8077091 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term442 A B C P s clauses x t c) = (term443 A B C P s clauses x t c).
Proof. exact (MK_COMB (@lem8077090 P) (@lem8077089 A B C P s clauses x t c)). Qed.
Lemma lem8077092 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term433 A B C P s t clauses) = (term433 A B C P s t clauses).
Proof. exact (eq_refl (term433 A B C P s t clauses)). Qed.
Lemma lem8077093 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term428 A B C P s clauses x t c) = (term444 A B C P s clauses x t c).
Proof. exact (MK_COMB (@lem8077092 A B C P s t clauses) (@lem8077091 A B C P s clauses x t c)). Qed.
Lemma lem8077094 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : ((term427 A B C P s clauses x t c) = (term428 A B C P s clauses x t c)) = ((term438 A B C P s clauses x t c) = (term444 A B C P s clauses x t c)).
Proof. exact (MK_COMB (@lem8077087 A B C P s clauses x t c) (@lem8077093 A B C P s clauses x t c)). Qed.
Lemma lem8077095 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term438 A B C P s clauses x t c) = (term444 A B C P s clauses x t c).
Proof. exact (EQ_MP (@lem8077094 A B C P s clauses x t c) (@lem8077079 A B C P s clauses x t c)). Qed.
Lemma lem8077148 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (c : C) : (term445 A B C P s clauses x c) = (term446 A B C P s clauses x c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8077095 A B C P s clauses x t c)). Qed.
Lemma lem8077149 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8077150 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (c : C) : (term447 A B C P s clauses x c) = (term448 A B C P s clauses x c).
Proof. exact (MK_COMB (@lem8077149 B C P) (@lem8077148 A B C P s clauses x c)). Qed.
Lemma lem8077199 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) (c : C) : (term449 A B C P clauses x c) = (term450 A B C P clauses x c).
Proof. exact (fun_ext (fun s : P -> A => @lem8077150 A B C P s clauses x c)). Qed.
Lemma lem8077200 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8077201 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) (c : C) : (term451 A B C P clauses x c) = (term452 A B C P clauses x c).
Proof. exact (MK_COMB (@lem8077200 A P) (@lem8077199 A B C P clauses x c)). Qed.
Lemma lem8077206 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8077207 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) (c : C) : (term173 A B C P clauses x c) = (term453 A B C P clauses x c).
Proof. exact (MK_COMB (@lem8077206) (@lem8077201 A B C P clauses x c)). Qed.
Lemma lem8077219 {A : Type'} (P : Prop) (Q : A -> Prop) : (term266 A P Q) = (term267 A P Q).
Proof. exact (EQ_MP (@lem16434 A P Q) (@lem16433 A P Q)). Qed.
Lemma lem8077220 {P : Type'} (P' : Prop) (Q : P -> Prop) : (term266 P P' Q) = (term267 P P' Q).
Proof. exact (@lem8077219 P P' Q). Qed.
Lemma lem8077221 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term454 A B C P t clauses s x) = (term455 A B C P t clauses s x).
Proof. exact (@lem8077220 P (term429 A B C P s t clauses) (term297 A P s x)). Qed.
Lemma lem8077222 {A P : Type'} (s : P -> A) (a : P) (x : A) : (term298 A P s x a) = ((s a) = x).
Proof. exact (eq_refl (term298 A P s x a)). Qed.
Lemma lem8077223 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term433 A B C P s t clauses) = (term433 A B C P s t clauses).
Proof. exact (eq_refl (term433 A B C P s t clauses)). Qed.
Lemma lem8077224 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (a : P) (x : A) : (term456 A B C P t clauses s x a) = (term457 A B C P t clauses s a x).
Proof. exact (MK_COMB (@lem8077223 A B C P s t clauses) (@lem8077222 A P s a x)). Qed.
Lemma lem8077225 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term458 A B C P t clauses s x) = (term459 A B C P t clauses s x).
Proof. exact (fun_ext (fun a : P => @lem8077224 A B C P t clauses s a x)). Qed.
Lemma lem8077226 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8077227 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term454 A B C P t clauses s x) = (term460 A B C P t clauses s x).
Proof. exact (MK_COMB (@lem8077226 P) (@lem8077225 A B C P t clauses s x)). Qed.
Lemma lem8077228 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8077229 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term461 A B C P t clauses s x) = (term462 A B C P t clauses s x).
Proof. exact (MK_COMB (@lem8077228) (@lem8077227 A B C P t clauses s x)). Qed.
Lemma lem8077230 {A P : Type'} (s : P -> A) (a : P) (x : A) : (term298 A P s x a) = ((s a) = x).
Proof. exact (eq_refl (term298 A P s x a)). Qed.
Lemma lem8077231 {A P : Type'} (s : P -> A) (x : A) : (term306 A P s x) = (term297 A P s x).
Proof. exact (fun_ext (fun a : P => @lem8077230 A P s a x)). Qed.
Lemma lem8077232 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8077233 {A P : Type'} (s : P -> A) (x : A) : (term307 A P s x) = (term308 A P s x).
Proof. exact (MK_COMB (@lem8077232 P) (@lem8077231 A P s x)). Qed.
Lemma lem8077234 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term433 A B C P s t clauses) = (term433 A B C P s t clauses).
Proof. exact (eq_refl (term433 A B C P s t clauses)). Qed.
Lemma lem8077235 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term455 A B C P t clauses s x) = (term463 A B C P t clauses s x).
Proof. exact (MK_COMB (@lem8077234 A B C P s t clauses) (@lem8077233 A P s x)). Qed.
Lemma lem8077236 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : A) : ((term454 A B C P t clauses s x) = (term455 A B C P t clauses s x)) = ((term460 A B C P t clauses s x) = (term463 A B C P t clauses s x)).
Proof. exact (MK_COMB (@lem8077229 A B C P t clauses s x) (@lem8077235 A B C P t clauses s x)). Qed.
Lemma lem8077237 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term460 A B C P t clauses s x) = (term463 A B C P t clauses s x).
Proof. exact (EQ_MP (@lem8077236 A B C P t clauses s x) (@lem8077221 A B C P t clauses s x)). Qed.
Lemma lem8077244 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term464 A B C P clauses s x) = (term465 A B C P clauses s x).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8077237 A B C P t clauses s x)). Qed.
Lemma lem8077245 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8077246 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term466 A B C P clauses s x) = (term467 A B C P clauses s x).
Proof. exact (MK_COMB (@lem8077245 B C P) (@lem8077244 A B C P clauses s x)). Qed.
Lemma lem8077268 {A : Type'} (P : A -> Prop) (Q : Prop) : (term314 A P Q) = (term315 A P Q).
Proof. exact (EQ_MP (@lem16440 A P Q) (@lem16439 A P Q)). Qed.
Lemma lem8077269 {B C P : Type'} (P' : type766 B C P) (Q : Prop) : (term468 B C P P' Q) = (term469 B C P P' Q).
Proof. exact (@lem8077268 (type1475 B C P) P' Q). Qed.
Lemma lem8077270 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term470 A B C P clauses s x) = (term471 A B C P clauses s x).
Proof. exact (@lem8077269 B C P (term472 A B C P s clauses) (term308 A P s x)). Qed.
Lemma lem8077271 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term473 A B C P s clauses t) = (term429 A B C P s t clauses).
Proof. exact (eq_refl (term473 A B C P s clauses t)). Qed.
Lemma lem8077272 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8077273 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term474 A B C P s clauses t) = (term433 A B C P s t clauses).
Proof. exact (MK_COMB (@lem8077272) (@lem8077271 A B C P s t clauses)). Qed.
Lemma lem8077274 {A P : Type'} (s : P -> A) (x : A) : (term308 A P s x) = (term308 A P s x).
Proof. exact (eq_refl (term308 A P s x)). Qed.
Lemma lem8077275 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term475 A B C P clauses t s x) = (term463 A B C P t clauses s x).
Proof. exact (MK_COMB (@lem8077273 A B C P s t clauses) (@lem8077274 A P s x)). Qed.
Lemma lem8077276 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term476 A B C P clauses s x) = (term465 A B C P clauses s x).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8077275 A B C P t clauses s x)). Qed.
Lemma lem8077277 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8077278 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term470 A B C P clauses s x) = (term467 A B C P clauses s x).
Proof. exact (MK_COMB (@lem8077277 B C P) (@lem8077276 A B C P clauses s x)). Qed.
Lemma lem8077279 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8077280 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term477 A B C P clauses s x) = (term478 A B C P clauses s x).
Proof. exact (MK_COMB (@lem8077279) (@lem8077278 A B C P clauses s x)). Qed.
Lemma lem8077281 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term473 A B C P s clauses t) = (term429 A B C P s t clauses).
Proof. exact (eq_refl (term473 A B C P s clauses t)). Qed.
Lemma lem8077282 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) : (term479 A B C P s clauses) = (term472 A B C P s clauses).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8077281 A B C P s t clauses)). Qed.
Lemma lem8077283 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8077284 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) : (term480 A B C P s clauses) = (term481 A B C P s clauses).
Proof. exact (MK_COMB (@lem8077283 B C P) (@lem8077282 A B C P s clauses)). Qed.
Lemma lem8077285 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8077286 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) : (term482 A B C P s clauses) = (term483 A B C P s clauses).
Proof. exact (MK_COMB (@lem8077285) (@lem8077284 A B C P s clauses)). Qed.
Lemma lem8077287 {A P : Type'} (s : P -> A) (x : A) : (term308 A P s x) = (term308 A P s x).
Proof. exact (eq_refl (term308 A P s x)). Qed.
Lemma lem8077288 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term471 A B C P clauses s x) = (term484 A B C P clauses s x).
Proof. exact (MK_COMB (@lem8077286 A B C P s clauses) (@lem8077287 A P s x)). Qed.
Lemma lem8077289 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : ((term470 A B C P clauses s x) = (term471 A B C P clauses s x)) = ((term467 A B C P clauses s x) = (term484 A B C P clauses s x)).
Proof. exact (MK_COMB (@lem8077280 A B C P clauses s x) (@lem8077288 A B C P clauses s x)). Qed.
Lemma lem8077290 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term467 A B C P clauses s x) = (term484 A B C P clauses s x).
Proof. exact (EQ_MP (@lem8077289 A B C P clauses s x) (@lem8077270 A B C P clauses s x)). Qed.
Lemma lem8077301 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term466 A B C P clauses s x) = (term484 A B C P clauses s x).
Proof. exact (TRANS (@lem8077246 A B C P clauses s x) (@lem8077290 A B C P clauses s x)). Qed.
Lemma lem8077302 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) : (term485 A B C P clauses x) = (term486 A B C P clauses x).
Proof. exact (fun_ext (fun s : P -> A => @lem8077301 A B C P clauses s x)). Qed.
Lemma lem8077303 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8077304 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) : (term487 A B C P clauses x) = (term488 A B C P clauses x).
Proof. exact (MK_COMB (@lem8077303 A P) (@lem8077302 A B C P clauses x)). Qed.
Lemma lem8077353 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8077354 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) : (term489 A B C P clauses x) = (term490 A B C P clauses x).
Proof. exact (MK_COMB (@lem8077353) (@lem8077304 A B C P clauses x)). Qed.
Lemma lem8077355 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8077356 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) : (term170 A B C P clauses x) = (term491 A B C P clauses x).
Proof. exact (MK_COMB (@lem8077355) (@lem8077354 A B C P clauses x)). Qed.
Lemma lem8077357 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : ((@CASEWISE B P A C clauses c x) = _106907) = ((@CASEWISE B P A C clauses c x) = _106907).
Proof. exact (eq_refl ((@CASEWISE B P A C clauses c x) = _106907)). Qed.
Lemma lem8077358 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term172 A B C P clauses c x _106907) = (term492 A B C P clauses c x _106907).
Proof. exact (MK_COMB (@lem8077356 A B C P clauses x) (@lem8077357 A B C P clauses c x _106907)). Qed.
Lemma lem8077361 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term175 A B C P clauses c x _106907) = (term493 A B C P clauses c x _106907).
Proof. exact (MK_COMB (@lem8077207 A B C P clauses x c) (@lem8077358 A B C P clauses c x _106907)). Qed.
Lemma lem8077364 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term177 A B C P clauses c _106907) = (term494 A B C P clauses c _106907).
Proof. exact (fun_ext (fun x : A => @lem8077361 A B C P clauses c x _106907)). Qed.
Lemma lem8077365 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8077366 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term179 A B C P clauses c _106907) = (term495 A B C P clauses c _106907).
Proof. exact (MK_COMB (@lem8077365 A) (@lem8077364 A B C P clauses c _106907)). Qed.
Lemma lem8077415 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : (term181 A B C P clauses _106907) = (term496 A B C P clauses _106907).
Proof. exact (fun_ext (fun c : C => @lem8077366 A B C P clauses c _106907)). Qed.
Lemma lem8077416 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8077417 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : (term183 A B C P clauses _106907) = (term497 A B C P clauses _106907).
Proof. exact (MK_COMB (@lem8077416 C) (@lem8077415 A B C P clauses _106907)). Qed.
Lemma lem8077422 {A B C P : Type'} (_106907 : B) : (term185 A B C P _106907) = (term498 A B C P _106907).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8077417 A B C P clauses _106907)). Qed.
Lemma lem8077423 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8077424 {A B C P : Type'} (_106907 : B) : (term186 A B C P _106907) = (term499 A B C P _106907).
Proof. exact (MK_COMB (@lem8077423 A B C P) (@lem8077422 A B C P _106907)). Qed.
Lemma lem8077429 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8077430 {A B C P : Type'} (_106907 : B) : (term426 A B C P _106907) = (term500 A B C P _106907).
Proof. exact (MK_COMB (@lem8077429) (@lem8077424 A B C P _106907)). Qed.
Lemma lem8077431 {A B C P : Type'} (_106907 : B) : (term190 A B C P _106907) = (term500 A B C P _106907).
Proof. exact (TRANS (@lem8077009 A B C P _106907) (@lem8077430 A B C P _106907)). Qed.
Lemma lem8077432 {_143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (_106907 : B) : (term233 _143311 _143313 _143320 A B C P _106908 _106907) = (term501 _143311 _143313 _143320 A B C P _106908 _106907).
Proof. exact (MK_COMB (@lem8077006 _143311 _143313 _143320 B _106908) (@lem8077431 A B C P _106907)). Qed.
Lemma lem8077435 {_143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (_106907 : B) : (term234 _143311 _143313 _143320 A B C P _106908 _106907) = (term502 _143311 _143313 _143320 A B C P _106908 _106907).
Proof. exact (MK_COMB (@lem8076583 _143311 _143313 _143320 A _106908) (@lem8077432 _143311 _143313 _143320 A B C P _106908 _106907)). Qed.
Lemma lem8077438 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (_106907 : B) : (term235 _143310 _143311 _143313 _143320 A B C P _106908 _106907) = (term503 _143310 _143311 _143313 _143320 A B C P _106908 _106907).
Proof. exact (MK_COMB (@lem8076160 _143310 _143311 _143313 B _106907) (@lem8077435 _143311 _143313 _143320 A B C P _106908 _106907)). Qed.
Lemma lem8077441 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (_106908 : _143320) (_106907 : B) : (term236 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907) = (term504 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907).
Proof. exact (MK_COMB (@lem8075737 _143310 _143311 _143313 A _106906) (@lem8077438 _143310 _143311 _143313 _143320 A B C P _106908 _106907)). Qed.
Lemma lem8077444 {A B C P : Type'} : (term155 A B C P) = (term155 A B C P).
Proof. exact (eq_refl (term155 A B C P)). Qed.
Lemma lem8077445 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (_106908 : _143320) (_106907 : B) : (term237 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907) = (term505 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907).
Proof. exact (MK_COMB (@lem8077444 A B C P) (@lem8077441 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907)). Qed.
Lemma lem8077448 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (_106908 : _143320) (_106907 : B) : (term238 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907) = (term506 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907).
Proof. exact (MK_COMB (@lem8075258 A) (@lem8077445 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907)). Qed.
Lemma lem8077450 (t : Prop) : (True -> t) = t.
Proof. exact (proj1 (@lem16471 t)). Qed.
Lemma lem8077451 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (_106908 : _143320) (_106907 : B) : (term506 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907) = (term505 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907).
Proof. exact (@lem8077450 (term505 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907)). Qed.
Lemma lem8078626 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (_106908 : _143320) (_106907 : B) : (term238 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907) = (term505 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907).
Proof. exact (TRANS (@lem8077448 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907) (@lem8077451 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907)). Qed.
Lemma lem8078627 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (_106907 : B) : (term239 _143310 _143311 _143313 _143320 A B C P _106908 _106907) = (term507 _143310 _143311 _143313 _143320 A B C P _106908 _106907).
Proof. exact (fun_ext (fun _106906 : A => @lem8078626 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907)). Qed.
Lemma lem8078628 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8078629 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (_106907 : B) : (term240 _143310 _143311 _143313 _143320 A B C P _106908 _106907) = (term508 _143310 _143311 _143313 _143320 A B C P _106908 _106907).
Proof. exact (MK_COMB (@lem8078628 A) (@lem8078627 _143310 _143311 _143313 _143320 A B C P _106908 _106907)). Qed.
Lemma lem8078634 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (_106907 : B) : (term241 _143310 _143311 _143313 _143320 A B C P _106908 _106907) = (term509 _143310 _143311 _143313 _143320 A B C P _106908 _106907).
Proof. exact (MK_COMB (@lem8075242 B) (@lem8078629 _143310 _143311 _143313 _143320 A B C P _106908 _106907)). Qed.
Lemma lem8078636 (t : Prop) : (True -> t) = t.
Proof. exact (proj1 (@lem16471 t)). Qed.
Lemma lem8078637 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (_106907 : B) : (term509 _143310 _143311 _143313 _143320 A B C P _106908 _106907) = (term508 _143310 _143311 _143313 _143320 A B C P _106908 _106907).
Proof. exact (@lem8078636 (term508 _143310 _143311 _143313 _143320 A B C P _106908 _106907)). Qed.
Lemma lem8079816 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (_106907 : B) : (term241 _143310 _143311 _143313 _143320 A B C P _106908 _106907) = (term508 _143310 _143311 _143313 _143320 A B C P _106908 _106907).
Proof. exact (TRANS (@lem8078634 _143310 _143311 _143313 _143320 A B C P _106908 _106907) (@lem8078637 _143310 _143311 _143313 _143320 A B C P _106908 _106907)). Qed.
Lemma lem8079817 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) : (term243 _143310 _143311 _143313 _143320 A B C P _106908) = (term510 _143310 _143311 _143313 _143320 A B C P _106908).
Proof. exact (fun_ext (fun _106907 : B => @lem8079816 _143310 _143311 _143313 _143320 A B C P _106908 _106907)). Qed.
Lemma lem8079818 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8079819 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) : (term244 _143310 _143311 _143313 _143320 A B C P _106908) = (term511 _143310 _143311 _143313 _143320 A B C P _106908).
Proof. exact (MK_COMB (@lem8079818 B) (@lem8079817 _143310 _143311 _143313 _143320 A B C P _106908)). Qed.
Lemma lem8079824 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) : (term245 _143310 _143311 _143313 _143320 A B C P _106908) = (term512 _143310 _143311 _143313 _143320 A B C P _106908).
Proof. exact (MK_COMB (@lem8075226 _143320) (@lem8079819 _143310 _143311 _143313 _143320 A B C P _106908)). Qed.
Lemma lem8079826 (t : Prop) : (True -> t) = t.
Proof. exact (proj1 (@lem16471 t)). Qed.
Lemma lem8079827 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) : (term512 _143310 _143311 _143313 _143320 A B C P _106908) = (term511 _143310 _143311 _143313 _143320 A B C P _106908).
Proof. exact (@lem8079826 (term511 _143310 _143311 _143313 _143320 A B C P _106908)). Qed.
Lemma lem8081010 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) : (term245 _143310 _143311 _143313 _143320 A B C P _106908) = (term511 _143310 _143311 _143313 _143320 A B C P _106908).
Proof. exact (TRANS (@lem8079824 _143310 _143311 _143313 _143320 A B C P _106908) (@lem8079827 _143310 _143311 _143313 _143320 A B C P _106908)). Qed.
Lemma lem8081011 {_143310 _143311 _143313 _143320 A B C P : Type'} : (term513 _143310 _143311 _143313 _143320 A B C P) = (term514 _143310 _143311 _143313 _143320 A B C P).
Proof. exact (fun_ext (fun _106908 : _143320 => @lem8081010 _143310 _143311 _143313 _143320 A B C P _106908)). Qed.
Lemma lem8081012 {_143320 : Type'} : (@all _143320) = (@all _143320).
Proof. exact (eq_refl (@all _143320)). Qed.
Lemma lem8081021 {_143310 _143311 _143313 _143320 A B C P : Type'} : (term246 _143310 _143311 _143313 _143320 A B C P) = (term515 _143310 _143311 _143313 _143320 A B C P).
Proof. exact (MK_COMB (@lem8081012 _143320) (@lem8081011 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8081022 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : ((@CASEWISE B P A C clauses c x) = _106907) = ((@CASEWISE B P A C clauses c x) = _106907).
Proof. exact (eq_refl ((@CASEWISE B P A C clauses c x) = _106907)). Qed.
Lemma lem8081023 {A P : Type'} (s : P -> A) (a : P) (x : A) : ((s a) = x) = ((s a) = x).
Proof. exact (eq_refl ((s a) = x)). Qed.
Lemma lem8081024 {A P : Type'} (s : P -> A) (x : A) : (term297 A P s x) = (term297 A P s x).
Proof. exact (fun_ext (fun a : P => @lem8081023 A P s a x)). Qed.
Lemma lem8081025 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8081026 {A P : Type'} (s : P -> A) (x : A) : (term308 A P s x) = (term308 A P s x).
Proof. exact (MK_COMB (@lem8081025 P) (@lem8081024 A P s x)). Qed.
Lemma lem8081027 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term429 A B C P s t clauses) = (term429 A B C P s t clauses).
Proof. exact (eq_refl (term429 A B C P s t clauses)). Qed.
Lemma lem8081028 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) : (term472 A B C P s clauses) = (term472 A B C P s clauses).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8081027 A B C P s t clauses)). Qed.
Lemma lem8081029 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8081030 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) : (term481 A B C P s clauses) = (term481 A B C P s clauses).
Proof. exact (MK_COMB (@lem8081029 B C P) (@lem8081028 A B C P s clauses)). Qed.
Lemma lem8081031 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8081032 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) : (term483 A B C P s clauses) = (term483 A B C P s clauses).
Proof. exact (MK_COMB (@lem8081031) (@lem8081030 A B C P s clauses)). Qed.
Lemma lem8081033 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term484 A B C P clauses s x) = (term484 A B C P clauses s x).
Proof. exact (MK_COMB (@lem8081032 A B C P s clauses) (@lem8081026 A P s x)). Qed.
Lemma lem8081034 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) : (term486 A B C P clauses x) = (term486 A B C P clauses x).
Proof. exact (fun_ext (fun s : P -> A => @lem8081033 A B C P clauses s x)). Qed.
Lemma lem8081035 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8081036 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) : (term488 A B C P clauses x) = (term488 A B C P clauses x).
Proof. exact (MK_COMB (@lem8081035 A P) (@lem8081034 A B C P clauses x)). Qed.
Lemma lem8081037 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8081038 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) : (term490 A B C P clauses x) = (term490 A B C P clauses x).
Proof. exact (MK_COMB (@lem8081037) (@lem8081036 A B C P clauses x)). Qed.
Lemma lem8081039 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8081040 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) : (term491 A B C P clauses x) = (term491 A B C P clauses x).
Proof. exact (MK_COMB (@lem8081039) (@lem8081038 A B C P clauses x)). Qed.
Lemma lem8081041 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term492 A B C P clauses c x _106907) = (term492 A B C P clauses c x _106907).
Proof. exact (MK_COMB (@lem8081040 A B C P clauses x) (@lem8081022 A B C P clauses c x _106907)). Qed.
Lemma lem8081046 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) (a : P) : (term432 A B C P s clauses x t c a) = (term432 A B C P s clauses x t c a).
Proof. exact (eq_refl (term432 A B C P s clauses x t c a)). Qed.
Lemma lem8081047 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term430 A B C P s clauses x t c) = (term430 A B C P s clauses x t c).
Proof. exact (fun_ext (fun a : P => @lem8081046 A B C P s clauses x t c a)). Qed.
Lemma lem8081048 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8081049 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term443 A B C P s clauses x t c) = (term443 A B C P s clauses x t c).
Proof. exact (MK_COMB (@lem8081048 P) (@lem8081047 A B C P s clauses x t c)). Qed.
Lemma lem8081052 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term433 A B C P s t clauses) = (term433 A B C P s t clauses).
Proof. exact (eq_refl (term433 A B C P s t clauses)). Qed.
Lemma lem8081053 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term444 A B C P s clauses x t c) = (term444 A B C P s clauses x t c).
Proof. exact (MK_COMB (@lem8081052 A B C P s t clauses) (@lem8081049 A B C P s clauses x t c)). Qed.
Lemma lem8081054 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (c : C) : (term446 A B C P s clauses x c) = (term446 A B C P s clauses x c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8081053 A B C P s clauses x t c)). Qed.
Lemma lem8081055 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8081056 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (c : C) : (term448 A B C P s clauses x c) = (term448 A B C P s clauses x c).
Proof. exact (MK_COMB (@lem8081055 B C P) (@lem8081054 A B C P s clauses x c)). Qed.
Lemma lem8081057 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) (c : C) : (term450 A B C P clauses x c) = (term450 A B C P clauses x c).
Proof. exact (fun_ext (fun s : P -> A => @lem8081056 A B C P s clauses x c)). Qed.
Lemma lem8081058 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8081059 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) (c : C) : (term452 A B C P clauses x c) = (term452 A B C P clauses x c).
Proof. exact (MK_COMB (@lem8081058 A P) (@lem8081057 A B C P clauses x c)). Qed.
Lemma lem8081060 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8081061 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) (c : C) : (term453 A B C P clauses x c) = (term453 A B C P clauses x c).
Proof. exact (MK_COMB (@lem8081060) (@lem8081059 A B C P clauses x c)). Qed.
Lemma lem8081062 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term493 A B C P clauses c x _106907) = (term493 A B C P clauses c x _106907).
Proof. exact (MK_COMB (@lem8081061 A B C P clauses x c) (@lem8081041 A B C P clauses c x _106907)). Qed.
Lemma lem8081063 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term494 A B C P clauses c _106907) = (term494 A B C P clauses c _106907).
Proof. exact (fun_ext (fun x : A => @lem8081062 A B C P clauses c x _106907)). Qed.
Lemma lem8081064 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8081065 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term495 A B C P clauses c _106907) = (term495 A B C P clauses c _106907).
Proof. exact (MK_COMB (@lem8081064 A) (@lem8081063 A B C P clauses c _106907)). Qed.
Lemma lem8081066 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : (term496 A B C P clauses _106907) = (term496 A B C P clauses _106907).
Proof. exact (fun_ext (fun c : C => @lem8081065 A B C P clauses c _106907)). Qed.
Lemma lem8081067 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8081068 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : (term497 A B C P clauses _106907) = (term497 A B C P clauses _106907).
Proof. exact (MK_COMB (@lem8081067 C) (@lem8081066 A B C P clauses _106907)). Qed.
Lemma lem8081069 {A B C P : Type'} (_106907 : B) : (term498 A B C P _106907) = (term498 A B C P _106907).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8081068 A B C P clauses _106907)). Qed.
Lemma lem8081070 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8081071 {A B C P : Type'} (_106907 : B) : (term499 A B C P _106907) = (term499 A B C P _106907).
Proof. exact (MK_COMB (@lem8081070 A B C P) (@lem8081069 A B C P _106907)). Qed.
Lemma lem8081072 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8081073 {A B C P : Type'} (_106907 : B) : (term500 A B C P _106907) = (term500 A B C P _106907).
Proof. exact (MK_COMB (@lem8081072) (@lem8081071 A B C P _106907)). Qed.
Lemma lem8081074 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : ((@CASEWISE _143320 _143313 B _143311 clauses c x) = _106908) = ((@CASEWISE _143320 _143313 B _143311 clauses c x) = _106908).
Proof. exact (eq_refl ((@CASEWISE _143320 _143313 B _143311 clauses c x) = _106908)). Qed.
Lemma lem8081075 {_143313 B : Type'} (s : _143313 -> B) (a : _143313) (x : B) : ((s a) = x) = ((s a) = x).
Proof. exact (eq_refl ((s a) = x)). Qed.
Lemma lem8081076 {_143313 B : Type'} (s : _143313 -> B) (x : B) : (term378 _143313 B s x) = (term378 _143313 B s x).
Proof. exact (fun_ext (fun a : _143313 => @lem8081075 _143313 B s a x)). Qed.
Lemma lem8081077 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8081078 {_143313 B : Type'} (s : _143313 -> B) (x : B) : (term389 _143313 B s x) = (term389 _143313 B s x).
Proof. exact (MK_COMB (@lem8081077 _143313) (@lem8081076 _143313 B s x)). Qed.
Lemma lem8081079 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) : (term351 _143311 _143313 _143320 B s t clauses) = (term351 _143311 _143313 _143320 B s t clauses).
Proof. exact (eq_refl (term351 _143311 _143313 _143320 B s t clauses)). Qed.
Lemma lem8081080 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) : (term397 _143311 _143313 _143320 B s clauses) = (term397 _143311 _143313 _143320 B s clauses).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8081079 _143311 _143313 _143320 B s t clauses)). Qed.
Lemma lem8081081 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8081082 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) : (term406 _143311 _143313 _143320 B s clauses) = (term406 _143311 _143313 _143320 B s clauses).
Proof. exact (MK_COMB (@lem8081081 _143311 _143313 _143320) (@lem8081080 _143311 _143313 _143320 B s clauses)). Qed.
Lemma lem8081083 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8081084 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) : (term408 _143311 _143313 _143320 B s clauses) = (term408 _143311 _143313 _143320 B s clauses).
Proof. exact (MK_COMB (@lem8081083) (@lem8081082 _143311 _143313 _143320 B s clauses)). Qed.
Lemma lem8081085 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : (term409 _143311 _143313 _143320 B clauses s x) = (term409 _143311 _143313 _143320 B clauses s x).
Proof. exact (MK_COMB (@lem8081084 _143311 _143313 _143320 B s clauses) (@lem8081078 _143313 B s x)). Qed.
Lemma lem8081086 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) : (term411 _143311 _143313 _143320 B clauses x) = (term411 _143311 _143313 _143320 B clauses x).
Proof. exact (fun_ext (fun s : _143313 -> B => @lem8081085 _143311 _143313 _143320 B clauses s x)). Qed.
Lemma lem8081087 {_143313 B : Type'} : (@ex (_143313 -> B)) = (@ex (_143313 -> B)).
Proof. exact (eq_refl (@ex (_143313 -> B))). Qed.
Lemma lem8081088 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) : (term413 _143311 _143313 _143320 B clauses x) = (term413 _143311 _143313 _143320 B clauses x).
Proof. exact (MK_COMB (@lem8081087 _143313 B) (@lem8081086 _143311 _143313 _143320 B clauses x)). Qed.
Lemma lem8081089 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8081090 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) : (term415 _143311 _143313 _143320 B clauses x) = (term415 _143311 _143313 _143320 B clauses x).
Proof. exact (MK_COMB (@lem8081089) (@lem8081088 _143311 _143313 _143320 B clauses x)). Qed.
Lemma lem8081091 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8081092 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) : (term416 _143311 _143313 _143320 B clauses x) = (term416 _143311 _143313 _143320 B clauses x).
Proof. exact (MK_COMB (@lem8081091) (@lem8081090 _143311 _143313 _143320 B clauses x)). Qed.
Lemma lem8081093 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term417 _143311 _143313 _143320 B clauses c x _106908) = (term417 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (MK_COMB (@lem8081092 _143311 _143313 _143320 B clauses x) (@lem8081074 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8081098 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) (a : _143313) : (term354 _143311 _143313 _143320 B s clauses x t c a) = (term354 _143311 _143313 _143320 B s clauses x t c a).
Proof. exact (eq_refl (term354 _143311 _143313 _143320 B s clauses x t c a)). Qed.
Lemma lem8081099 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term352 _143311 _143313 _143320 B s clauses x t c) = (term352 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8081098 _143311 _143313 _143320 B s clauses x t c a)). Qed.
Lemma lem8081100 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8081101 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term365 _143311 _143313 _143320 B s clauses x t c) = (term365 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (MK_COMB (@lem8081100 _143313) (@lem8081099 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8081104 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) : (term355 _143311 _143313 _143320 B s t clauses) = (term355 _143311 _143313 _143320 B s t clauses).
Proof. exact (eq_refl (term355 _143311 _143313 _143320 B s t clauses)). Qed.
Lemma lem8081105 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term366 _143311 _143313 _143320 B s clauses x t c) = (term366 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (MK_COMB (@lem8081104 _143311 _143313 _143320 B s t clauses) (@lem8081101 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8081106 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term368 _143311 _143313 _143320 B s clauses x c) = (term368 _143311 _143313 _143320 B s clauses x c).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8081105 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8081107 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8081108 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term370 _143311 _143313 _143320 B s clauses x c) = (term370 _143311 _143313 _143320 B s clauses x c).
Proof. exact (MK_COMB (@lem8081107 _143311 _143313 _143320) (@lem8081106 _143311 _143313 _143320 B s clauses x c)). Qed.
Lemma lem8081109 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term372 _143311 _143313 _143320 B clauses x c) = (term372 _143311 _143313 _143320 B clauses x c).
Proof. exact (fun_ext (fun s : _143313 -> B => @lem8081108 _143311 _143313 _143320 B s clauses x c)). Qed.
Lemma lem8081110 {_143313 B : Type'} : (@ex (_143313 -> B)) = (@ex (_143313 -> B)).
Proof. exact (eq_refl (@ex (_143313 -> B))). Qed.
Lemma lem8081111 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term374 _143311 _143313 _143320 B clauses x c) = (term374 _143311 _143313 _143320 B clauses x c).
Proof. exact (MK_COMB (@lem8081110 _143313 B) (@lem8081109 _143311 _143313 _143320 B clauses x c)). Qed.
Lemma lem8081112 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8081113 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term375 _143311 _143313 _143320 B clauses x c) = (term375 _143311 _143313 _143320 B clauses x c).
Proof. exact (MK_COMB (@lem8081112) (@lem8081111 _143311 _143313 _143320 B clauses x c)). Qed.
Lemma lem8081114 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term418 _143311 _143313 _143320 B clauses c x _106908) = (term418 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (MK_COMB (@lem8081113 _143311 _143313 _143320 B clauses x c) (@lem8081093 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8081115 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term419 _143311 _143313 _143320 B clauses c _106908) = (term419 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (fun_ext (fun x : B => @lem8081114 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8081116 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8081117 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term420 _143311 _143313 _143320 B clauses c _106908) = (term420 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (MK_COMB (@lem8081116 B) (@lem8081115 _143311 _143313 _143320 B clauses c _106908)). Qed.
Lemma lem8081118 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term421 _143311 _143313 _143320 B clauses _106908) = (term421 _143311 _143313 _143320 B clauses _106908).
Proof. exact (fun_ext (fun c : _143311 => @lem8081117 _143311 _143313 _143320 B clauses c _106908)). Qed.
Lemma lem8081119 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8081120 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term422 _143311 _143313 _143320 B clauses _106908) = (term422 _143311 _143313 _143320 B clauses _106908).
Proof. exact (MK_COMB (@lem8081119 _143311) (@lem8081118 _143311 _143313 _143320 B clauses _106908)). Qed.
Lemma lem8081121 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) : (term423 _143311 _143313 _143320 B _106908) = (term423 _143311 _143313 _143320 B _106908).
Proof. exact (fun_ext (fun clauses : type1634 _143311 _143313 _143320 B => @lem8081120 _143311 _143313 _143320 B clauses _106908)). Qed.
Lemma lem8081122 {_143311 _143313 _143320 B : Type'} : (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320)))) = (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))))). Qed.
Lemma lem8081123 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) : (term424 _143311 _143313 _143320 B _106908) = (term424 _143311 _143313 _143320 B _106908).
Proof. exact (MK_COMB (@lem8081122 _143311 _143313 _143320 B) (@lem8081121 _143311 _143313 _143320 B _106908)). Qed.
Lemma lem8081124 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8081125 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) : (term425 _143311 _143313 _143320 B _106908) = (term425 _143311 _143313 _143320 B _106908).
Proof. exact (MK_COMB (@lem8081124) (@lem8081123 _143311 _143313 _143320 B _106908)). Qed.
Lemma lem8081126 {_143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (_106907 : B) : (term501 _143311 _143313 _143320 A B C P _106908 _106907) = (term501 _143311 _143313 _143320 A B C P _106908 _106907).
Proof. exact (MK_COMB (@lem8081125 _143311 _143313 _143320 B _106908) (@lem8081073 A B C P _106907)). Qed.
Lemma lem8081127 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : ((@CASEWISE _143320 _143313 A _143311 clauses c x) = _106908) = ((@CASEWISE _143320 _143313 A _143311 clauses c x) = _106908).
Proof. exact (eq_refl ((@CASEWISE _143320 _143313 A _143311 clauses c x) = _106908)). Qed.
Lemma lem8081128 {_143313 A : Type'} (s : _143313 -> A) (a : _143313) (x : A) : ((s a) = x) = ((s a) = x).
Proof. exact (eq_refl ((s a) = x)). Qed.
Lemma lem8081129 {_143313 A : Type'} (s : _143313 -> A) (x : A) : (term378 _143313 A s x) = (term378 _143313 A s x).
Proof. exact (fun_ext (fun a : _143313 => @lem8081128 _143313 A s a x)). Qed.
Lemma lem8081130 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8081131 {_143313 A : Type'} (s : _143313 -> A) (x : A) : (term389 _143313 A s x) = (term389 _143313 A s x).
Proof. exact (MK_COMB (@lem8081130 _143313) (@lem8081129 _143313 A s x)). Qed.
Lemma lem8081132 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) : (term351 _143311 _143313 _143320 A s t clauses) = (term351 _143311 _143313 _143320 A s t clauses).
Proof. exact (eq_refl (term351 _143311 _143313 _143320 A s t clauses)). Qed.
Lemma lem8081133 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) : (term397 _143311 _143313 _143320 A s clauses) = (term397 _143311 _143313 _143320 A s clauses).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8081132 _143311 _143313 _143320 A s t clauses)). Qed.
Lemma lem8081134 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8081135 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) : (term406 _143311 _143313 _143320 A s clauses) = (term406 _143311 _143313 _143320 A s clauses).
Proof. exact (MK_COMB (@lem8081134 _143311 _143313 _143320) (@lem8081133 _143311 _143313 _143320 A s clauses)). Qed.
Lemma lem8081136 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8081137 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) : (term408 _143311 _143313 _143320 A s clauses) = (term408 _143311 _143313 _143320 A s clauses).
Proof. exact (MK_COMB (@lem8081136) (@lem8081135 _143311 _143313 _143320 A s clauses)). Qed.
Lemma lem8081138 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : (term409 _143311 _143313 _143320 A clauses s x) = (term409 _143311 _143313 _143320 A clauses s x).
Proof. exact (MK_COMB (@lem8081137 _143311 _143313 _143320 A s clauses) (@lem8081131 _143313 A s x)). Qed.
Lemma lem8081139 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) : (term411 _143311 _143313 _143320 A clauses x) = (term411 _143311 _143313 _143320 A clauses x).
Proof. exact (fun_ext (fun s : _143313 -> A => @lem8081138 _143311 _143313 _143320 A clauses s x)). Qed.
Lemma lem8081140 {_143313 A : Type'} : (@ex (_143313 -> A)) = (@ex (_143313 -> A)).
Proof. exact (eq_refl (@ex (_143313 -> A))). Qed.
Lemma lem8081141 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) : (term413 _143311 _143313 _143320 A clauses x) = (term413 _143311 _143313 _143320 A clauses x).
Proof. exact (MK_COMB (@lem8081140 _143313 A) (@lem8081139 _143311 _143313 _143320 A clauses x)). Qed.
Lemma lem8081142 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8081143 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) : (term415 _143311 _143313 _143320 A clauses x) = (term415 _143311 _143313 _143320 A clauses x).
Proof. exact (MK_COMB (@lem8081142) (@lem8081141 _143311 _143313 _143320 A clauses x)). Qed.
Lemma lem8081144 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8081145 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) : (term416 _143311 _143313 _143320 A clauses x) = (term416 _143311 _143313 _143320 A clauses x).
Proof. exact (MK_COMB (@lem8081144) (@lem8081143 _143311 _143313 _143320 A clauses x)). Qed.
Lemma lem8081146 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term417 _143311 _143313 _143320 A clauses c x _106908) = (term417 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (MK_COMB (@lem8081145 _143311 _143313 _143320 A clauses x) (@lem8081127 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8081151 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) (a : _143313) : (term354 _143311 _143313 _143320 A s clauses x t c a) = (term354 _143311 _143313 _143320 A s clauses x t c a).
Proof. exact (eq_refl (term354 _143311 _143313 _143320 A s clauses x t c a)). Qed.
Lemma lem8081152 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term352 _143311 _143313 _143320 A s clauses x t c) = (term352 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8081151 _143311 _143313 _143320 A s clauses x t c a)). Qed.
Lemma lem8081153 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8081154 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term365 _143311 _143313 _143320 A s clauses x t c) = (term365 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (MK_COMB (@lem8081153 _143313) (@lem8081152 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8081157 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) : (term355 _143311 _143313 _143320 A s t clauses) = (term355 _143311 _143313 _143320 A s t clauses).
Proof. exact (eq_refl (term355 _143311 _143313 _143320 A s t clauses)). Qed.
Lemma lem8081158 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term366 _143311 _143313 _143320 A s clauses x t c) = (term366 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (MK_COMB (@lem8081157 _143311 _143313 _143320 A s t clauses) (@lem8081154 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8081159 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term368 _143311 _143313 _143320 A s clauses x c) = (term368 _143311 _143313 _143320 A s clauses x c).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8081158 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8081160 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8081161 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term370 _143311 _143313 _143320 A s clauses x c) = (term370 _143311 _143313 _143320 A s clauses x c).
Proof. exact (MK_COMB (@lem8081160 _143311 _143313 _143320) (@lem8081159 _143311 _143313 _143320 A s clauses x c)). Qed.
Lemma lem8081162 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term372 _143311 _143313 _143320 A clauses x c) = (term372 _143311 _143313 _143320 A clauses x c).
Proof. exact (fun_ext (fun s : _143313 -> A => @lem8081161 _143311 _143313 _143320 A s clauses x c)). Qed.
Lemma lem8081163 {_143313 A : Type'} : (@ex (_143313 -> A)) = (@ex (_143313 -> A)).
Proof. exact (eq_refl (@ex (_143313 -> A))). Qed.
Lemma lem8081164 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term374 _143311 _143313 _143320 A clauses x c) = (term374 _143311 _143313 _143320 A clauses x c).
Proof. exact (MK_COMB (@lem8081163 _143313 A) (@lem8081162 _143311 _143313 _143320 A clauses x c)). Qed.
Lemma lem8081165 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8081166 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term375 _143311 _143313 _143320 A clauses x c) = (term375 _143311 _143313 _143320 A clauses x c).
Proof. exact (MK_COMB (@lem8081165) (@lem8081164 _143311 _143313 _143320 A clauses x c)). Qed.
Lemma lem8081167 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term418 _143311 _143313 _143320 A clauses c x _106908) = (term418 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (MK_COMB (@lem8081166 _143311 _143313 _143320 A clauses x c) (@lem8081146 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8081168 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term419 _143311 _143313 _143320 A clauses c _106908) = (term419 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (fun_ext (fun x : A => @lem8081167 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8081169 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8081170 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term420 _143311 _143313 _143320 A clauses c _106908) = (term420 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (MK_COMB (@lem8081169 A) (@lem8081168 _143311 _143313 _143320 A clauses c _106908)). Qed.
Lemma lem8081171 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term421 _143311 _143313 _143320 A clauses _106908) = (term421 _143311 _143313 _143320 A clauses _106908).
Proof. exact (fun_ext (fun c : _143311 => @lem8081170 _143311 _143313 _143320 A clauses c _106908)). Qed.
Lemma lem8081172 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8081173 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term422 _143311 _143313 _143320 A clauses _106908) = (term422 _143311 _143313 _143320 A clauses _106908).
Proof. exact (MK_COMB (@lem8081172 _143311) (@lem8081171 _143311 _143313 _143320 A clauses _106908)). Qed.
Lemma lem8081174 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) : (term423 _143311 _143313 _143320 A _106908) = (term423 _143311 _143313 _143320 A _106908).
Proof. exact (fun_ext (fun clauses : type1634 _143311 _143313 _143320 A => @lem8081173 _143311 _143313 _143320 A clauses _106908)). Qed.
Lemma lem8081175 {_143311 _143313 _143320 A : Type'} : (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320)))) = (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))))). Qed.
Lemma lem8081176 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) : (term424 _143311 _143313 _143320 A _106908) = (term424 _143311 _143313 _143320 A _106908).
Proof. exact (MK_COMB (@lem8081175 _143311 _143313 _143320 A) (@lem8081174 _143311 _143313 _143320 A _106908)). Qed.
Lemma lem8081177 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8081178 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) : (term425 _143311 _143313 _143320 A _106908) = (term425 _143311 _143313 _143320 A _106908).
Proof. exact (MK_COMB (@lem8081177) (@lem8081176 _143311 _143313 _143320 A _106908)). Qed.
Lemma lem8081179 {_143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (_106907 : B) : (term502 _143311 _143313 _143320 A B C P _106908 _106907) = (term502 _143311 _143313 _143320 A B C P _106908 _106907).
Proof. exact (MK_COMB (@lem8081178 _143311 _143313 _143320 A _106908) (@lem8081126 _143311 _143313 _143320 A B C P _106908 _106907)). Qed.
Lemma lem8081180 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : ((@CASEWISE B _143313 _143310 _143311 clauses c x) = _106907) = ((@CASEWISE B _143313 _143310 _143311 clauses c x) = _106907).
Proof. exact (eq_refl ((@CASEWISE B _143313 _143310 _143311 clauses c x) = _106907)). Qed.
Lemma lem8081181 {_143310 _143313 : Type'} (s : _143313 -> _143310) (a : _143313) (x : _143310) : ((s a) = x) = ((s a) = x).
Proof. exact (eq_refl ((s a) = x)). Qed.
Lemma lem8081182 {_143310 _143313 : Type'} (s : _143313 -> _143310) (x : _143310) : (term297 _143310 _143313 s x) = (term297 _143310 _143313 s x).
Proof. exact (fun_ext (fun a : _143313 => @lem8081181 _143310 _143313 s a x)). Qed.
Lemma lem8081183 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8081184 {_143310 _143313 : Type'} (s : _143313 -> _143310) (x : _143310) : (term308 _143310 _143313 s x) = (term308 _143310 _143313 s x).
Proof. exact (MK_COMB (@lem8081183 _143313) (@lem8081182 _143310 _143313 s x)). Qed.
Lemma lem8081185 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) : (term270 _143310 _143311 _143313 B s t clauses) = (term270 _143310 _143311 _143313 B s t clauses).
Proof. exact (eq_refl (term270 _143310 _143311 _143313 B s t clauses)). Qed.
Lemma lem8081186 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) : (term320 _143310 _143311 _143313 B s clauses) = (term320 _143310 _143311 _143313 B s clauses).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 B => @lem8081185 _143310 _143311 _143313 B s t clauses)). Qed.
Lemma lem8081187 {_143311 _143313 B : Type'} : (@ex (_143311 -> _143313 -> B)) = (@ex (_143311 -> _143313 -> B)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> B))). Qed.
Lemma lem8081188 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) : (term329 _143310 _143311 _143313 B s clauses) = (term329 _143310 _143311 _143313 B s clauses).
Proof. exact (MK_COMB (@lem8081187 _143311 _143313 B) (@lem8081186 _143310 _143311 _143313 B s clauses)). Qed.
Lemma lem8081189 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8081190 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) : (term331 _143310 _143311 _143313 B s clauses) = (term331 _143310 _143311 _143313 B s clauses).
Proof. exact (MK_COMB (@lem8081189) (@lem8081188 _143310 _143311 _143313 B s clauses)). Qed.
Lemma lem8081191 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : (term332 _143310 _143311 _143313 B clauses s x) = (term332 _143310 _143311 _143313 B clauses s x).
Proof. exact (MK_COMB (@lem8081190 _143310 _143311 _143313 B s clauses) (@lem8081184 _143310 _143313 s x)). Qed.
Lemma lem8081192 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) : (term334 _143310 _143311 _143313 B clauses x) = (term334 _143310 _143311 _143313 B clauses x).
Proof. exact (fun_ext (fun s : _143313 -> _143310 => @lem8081191 _143310 _143311 _143313 B clauses s x)). Qed.
Lemma lem8081193 {_143310 _143313 : Type'} : (@ex (_143313 -> _143310)) = (@ex (_143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143313 -> _143310))). Qed.
Lemma lem8081194 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) : (term336 _143310 _143311 _143313 B clauses x) = (term336 _143310 _143311 _143313 B clauses x).
Proof. exact (MK_COMB (@lem8081193 _143310 _143313) (@lem8081192 _143310 _143311 _143313 B clauses x)). Qed.
Lemma lem8081195 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8081196 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) : (term338 _143310 _143311 _143313 B clauses x) = (term338 _143310 _143311 _143313 B clauses x).
Proof. exact (MK_COMB (@lem8081195) (@lem8081194 _143310 _143311 _143313 B clauses x)). Qed.
Lemma lem8081197 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8081198 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) : (term339 _143310 _143311 _143313 B clauses x) = (term339 _143310 _143311 _143313 B clauses x).
Proof. exact (MK_COMB (@lem8081197) (@lem8081196 _143310 _143311 _143313 B clauses x)). Qed.
Lemma lem8081199 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term340 _143310 _143311 _143313 B clauses c x _106907) = (term340 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (MK_COMB (@lem8081198 _143310 _143311 _143313 B clauses x) (@lem8081180 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8081204 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) (a : _143313) : (term273 _143310 _143311 _143313 B s clauses x t c a) = (term273 _143310 _143311 _143313 B s clauses x t c a).
Proof. exact (eq_refl (term273 _143310 _143311 _143313 B s clauses x t c a)). Qed.
Lemma lem8081205 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term271 _143310 _143311 _143313 B s clauses x t c) = (term271 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8081204 _143310 _143311 _143313 B s clauses x t c a)). Qed.
Lemma lem8081206 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8081207 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term284 _143310 _143311 _143313 B s clauses x t c) = (term284 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (MK_COMB (@lem8081206 _143313) (@lem8081205 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8081210 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) : (term274 _143310 _143311 _143313 B s t clauses) = (term274 _143310 _143311 _143313 B s t clauses).
Proof. exact (eq_refl (term274 _143310 _143311 _143313 B s t clauses)). Qed.
Lemma lem8081211 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term285 _143310 _143311 _143313 B s clauses x t c) = (term285 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (MK_COMB (@lem8081210 _143310 _143311 _143313 B s t clauses) (@lem8081207 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8081212 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term287 _143310 _143311 _143313 B s clauses x c) = (term287 _143310 _143311 _143313 B s clauses x c).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 B => @lem8081211 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8081213 {_143311 _143313 B : Type'} : (@ex (_143311 -> _143313 -> B)) = (@ex (_143311 -> _143313 -> B)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> B))). Qed.
Lemma lem8081214 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term289 _143310 _143311 _143313 B s clauses x c) = (term289 _143310 _143311 _143313 B s clauses x c).
Proof. exact (MK_COMB (@lem8081213 _143311 _143313 B) (@lem8081212 _143310 _143311 _143313 B s clauses x c)). Qed.
Lemma lem8081215 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term291 _143310 _143311 _143313 B clauses x c) = (term291 _143310 _143311 _143313 B clauses x c).
Proof. exact (fun_ext (fun s : _143313 -> _143310 => @lem8081214 _143310 _143311 _143313 B s clauses x c)). Qed.
Lemma lem8081216 {_143310 _143313 : Type'} : (@ex (_143313 -> _143310)) = (@ex (_143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143313 -> _143310))). Qed.
Lemma lem8081217 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term293 _143310 _143311 _143313 B clauses x c) = (term293 _143310 _143311 _143313 B clauses x c).
Proof. exact (MK_COMB (@lem8081216 _143310 _143313) (@lem8081215 _143310 _143311 _143313 B clauses x c)). Qed.
Lemma lem8081218 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8081219 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term294 _143310 _143311 _143313 B clauses x c) = (term294 _143310 _143311 _143313 B clauses x c).
Proof. exact (MK_COMB (@lem8081218) (@lem8081217 _143310 _143311 _143313 B clauses x c)). Qed.
Lemma lem8081220 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term341 _143310 _143311 _143313 B clauses c x _106907) = (term341 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (MK_COMB (@lem8081219 _143310 _143311 _143313 B clauses x c) (@lem8081199 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8081221 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term342 _143310 _143311 _143313 B clauses c _106907) = (term342 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (fun_ext (fun x : _143310 => @lem8081220 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8081222 {_143310 : Type'} : (@all _143310) = (@all _143310).
Proof. exact (eq_refl (@all _143310)). Qed.
Lemma lem8081223 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term343 _143310 _143311 _143313 B clauses c _106907) = (term343 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (MK_COMB (@lem8081222 _143310) (@lem8081221 _143310 _143311 _143313 B clauses c _106907)). Qed.
Lemma lem8081224 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term344 _143310 _143311 _143313 B clauses _106907) = (term344 _143310 _143311 _143313 B clauses _106907).
Proof. exact (fun_ext (fun c : _143311 => @lem8081223 _143310 _143311 _143313 B clauses c _106907)). Qed.
Lemma lem8081225 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8081226 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term345 _143310 _143311 _143313 B clauses _106907) = (term345 _143310 _143311 _143313 B clauses _106907).
Proof. exact (MK_COMB (@lem8081225 _143311) (@lem8081224 _143310 _143311 _143313 B clauses _106907)). Qed.
Lemma lem8081227 {_143310 _143311 _143313 B : Type'} (_106907 : B) : (term346 _143310 _143311 _143313 B _106907) = (term346 _143310 _143311 _143313 B _106907).
Proof. exact (fun_ext (fun clauses : type1637 _143310 _143311 _143313 B => @lem8081226 _143310 _143311 _143313 B clauses _106907)). Qed.
Lemma lem8081228 {_143310 _143311 _143313 B : Type'} : (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B)))) = (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))))). Qed.
Lemma lem8081229 {_143310 _143311 _143313 B : Type'} (_106907 : B) : (term347 _143310 _143311 _143313 B _106907) = (term347 _143310 _143311 _143313 B _106907).
Proof. exact (MK_COMB (@lem8081228 _143310 _143311 _143313 B) (@lem8081227 _143310 _143311 _143313 B _106907)). Qed.
Lemma lem8081230 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8081231 {_143310 _143311 _143313 B : Type'} (_106907 : B) : (term348 _143310 _143311 _143313 B _106907) = (term348 _143310 _143311 _143313 B _106907).
Proof. exact (MK_COMB (@lem8081230) (@lem8081229 _143310 _143311 _143313 B _106907)). Qed.
Lemma lem8081232 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (_106907 : B) : (term503 _143310 _143311 _143313 _143320 A B C P _106908 _106907) = (term503 _143310 _143311 _143313 _143320 A B C P _106908 _106907).
Proof. exact (MK_COMB (@lem8081231 _143310 _143311 _143313 B _106907) (@lem8081179 _143311 _143313 _143320 A B C P _106908 _106907)). Qed.
Lemma lem8081233 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : ((@CASEWISE A _143313 _143310 _143311 clauses c x) = _106906) = ((@CASEWISE A _143313 _143310 _143311 clauses c x) = _106906).
Proof. exact (eq_refl ((@CASEWISE A _143313 _143310 _143311 clauses c x) = _106906)). Qed.
Lemma lem8081234 {_143310 _143313 : Type'} (s : _143313 -> _143310) (a : _143313) (x : _143310) : ((s a) = x) = ((s a) = x).
Proof. exact (eq_refl ((s a) = x)). Qed.
Lemma lem8081235 {_143310 _143313 : Type'} (s : _143313 -> _143310) (x : _143310) : (term297 _143310 _143313 s x) = (term297 _143310 _143313 s x).
Proof. exact (fun_ext (fun a : _143313 => @lem8081234 _143310 _143313 s a x)). Qed.
Lemma lem8081236 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8081237 {_143310 _143313 : Type'} (s : _143313 -> _143310) (x : _143310) : (term308 _143310 _143313 s x) = (term308 _143310 _143313 s x).
Proof. exact (MK_COMB (@lem8081236 _143313) (@lem8081235 _143310 _143313 s x)). Qed.
Lemma lem8081238 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) : (term270 _143310 _143311 _143313 A s t clauses) = (term270 _143310 _143311 _143313 A s t clauses).
Proof. exact (eq_refl (term270 _143310 _143311 _143313 A s t clauses)). Qed.
Lemma lem8081239 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) : (term320 _143310 _143311 _143313 A s clauses) = (term320 _143310 _143311 _143313 A s clauses).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 A => @lem8081238 _143310 _143311 _143313 A s t clauses)). Qed.
Lemma lem8081240 {_143311 _143313 A : Type'} : (@ex (_143311 -> _143313 -> A)) = (@ex (_143311 -> _143313 -> A)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> A))). Qed.
Lemma lem8081241 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) : (term329 _143310 _143311 _143313 A s clauses) = (term329 _143310 _143311 _143313 A s clauses).
Proof. exact (MK_COMB (@lem8081240 _143311 _143313 A) (@lem8081239 _143310 _143311 _143313 A s clauses)). Qed.
Lemma lem8081242 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8081243 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) : (term331 _143310 _143311 _143313 A s clauses) = (term331 _143310 _143311 _143313 A s clauses).
Proof. exact (MK_COMB (@lem8081242) (@lem8081241 _143310 _143311 _143313 A s clauses)). Qed.
Lemma lem8081244 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : (term332 _143310 _143311 _143313 A clauses s x) = (term332 _143310 _143311 _143313 A clauses s x).
Proof. exact (MK_COMB (@lem8081243 _143310 _143311 _143313 A s clauses) (@lem8081237 _143310 _143313 s x)). Qed.
Lemma lem8081245 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) : (term334 _143310 _143311 _143313 A clauses x) = (term334 _143310 _143311 _143313 A clauses x).
Proof. exact (fun_ext (fun s : _143313 -> _143310 => @lem8081244 _143310 _143311 _143313 A clauses s x)). Qed.
Lemma lem8081246 {_143310 _143313 : Type'} : (@ex (_143313 -> _143310)) = (@ex (_143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143313 -> _143310))). Qed.
Lemma lem8081247 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) : (term336 _143310 _143311 _143313 A clauses x) = (term336 _143310 _143311 _143313 A clauses x).
Proof. exact (MK_COMB (@lem8081246 _143310 _143313) (@lem8081245 _143310 _143311 _143313 A clauses x)). Qed.
Lemma lem8081248 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8081249 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) : (term338 _143310 _143311 _143313 A clauses x) = (term338 _143310 _143311 _143313 A clauses x).
Proof. exact (MK_COMB (@lem8081248) (@lem8081247 _143310 _143311 _143313 A clauses x)). Qed.
Lemma lem8081250 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8081251 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) : (term339 _143310 _143311 _143313 A clauses x) = (term339 _143310 _143311 _143313 A clauses x).
Proof. exact (MK_COMB (@lem8081250) (@lem8081249 _143310 _143311 _143313 A clauses x)). Qed.
Lemma lem8081252 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term340 _143310 _143311 _143313 A clauses c x _106906) = (term340 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (MK_COMB (@lem8081251 _143310 _143311 _143313 A clauses x) (@lem8081233 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8081257 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) (a : _143313) : (term273 _143310 _143311 _143313 A s clauses x t c a) = (term273 _143310 _143311 _143313 A s clauses x t c a).
Proof. exact (eq_refl (term273 _143310 _143311 _143313 A s clauses x t c a)). Qed.
Lemma lem8081258 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term271 _143310 _143311 _143313 A s clauses x t c) = (term271 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8081257 _143310 _143311 _143313 A s clauses x t c a)). Qed.
Lemma lem8081259 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8081260 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term284 _143310 _143311 _143313 A s clauses x t c) = (term284 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (MK_COMB (@lem8081259 _143313) (@lem8081258 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8081263 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) : (term274 _143310 _143311 _143313 A s t clauses) = (term274 _143310 _143311 _143313 A s t clauses).
Proof. exact (eq_refl (term274 _143310 _143311 _143313 A s t clauses)). Qed.
Lemma lem8081264 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term285 _143310 _143311 _143313 A s clauses x t c) = (term285 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (MK_COMB (@lem8081263 _143310 _143311 _143313 A s t clauses) (@lem8081260 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8081265 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term287 _143310 _143311 _143313 A s clauses x c) = (term287 _143310 _143311 _143313 A s clauses x c).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 A => @lem8081264 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8081266 {_143311 _143313 A : Type'} : (@ex (_143311 -> _143313 -> A)) = (@ex (_143311 -> _143313 -> A)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> A))). Qed.
Lemma lem8081267 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term289 _143310 _143311 _143313 A s clauses x c) = (term289 _143310 _143311 _143313 A s clauses x c).
Proof. exact (MK_COMB (@lem8081266 _143311 _143313 A) (@lem8081265 _143310 _143311 _143313 A s clauses x c)). Qed.
Lemma lem8081268 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term291 _143310 _143311 _143313 A clauses x c) = (term291 _143310 _143311 _143313 A clauses x c).
Proof. exact (fun_ext (fun s : _143313 -> _143310 => @lem8081267 _143310 _143311 _143313 A s clauses x c)). Qed.
Lemma lem8081269 {_143310 _143313 : Type'} : (@ex (_143313 -> _143310)) = (@ex (_143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143313 -> _143310))). Qed.
Lemma lem8081270 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term293 _143310 _143311 _143313 A clauses x c) = (term293 _143310 _143311 _143313 A clauses x c).
Proof. exact (MK_COMB (@lem8081269 _143310 _143313) (@lem8081268 _143310 _143311 _143313 A clauses x c)). Qed.
Lemma lem8081271 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8081272 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term294 _143310 _143311 _143313 A clauses x c) = (term294 _143310 _143311 _143313 A clauses x c).
Proof. exact (MK_COMB (@lem8081271) (@lem8081270 _143310 _143311 _143313 A clauses x c)). Qed.
Lemma lem8081273 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term341 _143310 _143311 _143313 A clauses c x _106906) = (term341 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (MK_COMB (@lem8081272 _143310 _143311 _143313 A clauses x c) (@lem8081252 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8081274 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term342 _143310 _143311 _143313 A clauses c _106906) = (term342 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (fun_ext (fun x : _143310 => @lem8081273 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8081275 {_143310 : Type'} : (@all _143310) = (@all _143310).
Proof. exact (eq_refl (@all _143310)). Qed.
Lemma lem8081276 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term343 _143310 _143311 _143313 A clauses c _106906) = (term343 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (MK_COMB (@lem8081275 _143310) (@lem8081274 _143310 _143311 _143313 A clauses c _106906)). Qed.
Lemma lem8081277 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term344 _143310 _143311 _143313 A clauses _106906) = (term344 _143310 _143311 _143313 A clauses _106906).
Proof. exact (fun_ext (fun c : _143311 => @lem8081276 _143310 _143311 _143313 A clauses c _106906)). Qed.
Lemma lem8081278 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8081279 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term345 _143310 _143311 _143313 A clauses _106906) = (term345 _143310 _143311 _143313 A clauses _106906).
Proof. exact (MK_COMB (@lem8081278 _143311) (@lem8081277 _143310 _143311 _143313 A clauses _106906)). Qed.
Lemma lem8081280 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term346 _143310 _143311 _143313 A _106906) = (term346 _143310 _143311 _143313 A _106906).
Proof. exact (fun_ext (fun clauses : type1637 _143310 _143311 _143313 A => @lem8081279 _143310 _143311 _143313 A clauses _106906)). Qed.
Lemma lem8081281 {_143310 _143311 _143313 A : Type'} : (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A)))) = (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))))). Qed.
Lemma lem8081282 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term347 _143310 _143311 _143313 A _106906) = (term347 _143310 _143311 _143313 A _106906).
Proof. exact (MK_COMB (@lem8081281 _143310 _143311 _143313 A) (@lem8081280 _143310 _143311 _143313 A _106906)). Qed.
Lemma lem8081283 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8081284 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term348 _143310 _143311 _143313 A _106906) = (term348 _143310 _143311 _143313 A _106906).
Proof. exact (MK_COMB (@lem8081283) (@lem8081282 _143310 _143311 _143313 A _106906)). Qed.
Lemma lem8081285 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (_106908 : _143320) (_106907 : B) : (term504 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907) = (term504 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907).
Proof. exact (MK_COMB (@lem8081284 _143310 _143311 _143313 A _106906) (@lem8081232 _143310 _143311 _143313 _143320 A B C P _106908 _106907)). Qed.
Lemma lem8081286 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) : ((term516 A B C P clauses c p1 x) = (p2 c x)) = ((term516 A B C P clauses c p1 x) = (p2 c x)).
Proof. exact (eq_refl ((term516 A B C P clauses c p1 x) = (p2 c x))). Qed.
Lemma lem8081287 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term517 A B C P clauses p1 p2 c) = (term517 A B C P clauses p1 p2 c).
Proof. exact (fun_ext (fun x : P => @lem8081286 A B C P clauses p1 p2 c x)). Qed.
Lemma lem8081288 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8081289 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term65 A B C P clauses p1 p2 c) = (term65 A B C P clauses p1 p2 c).
Proof. exact (MK_COMB (@lem8081288 P) (@lem8081287 A B C P clauses p1 p2 c)). Qed.
Lemma lem8081292 {A B C P : Type'} (p1 : P -> A) (p2 : type1475 B C P) (clauses : type1638 A B C P) : (term95 A B C P p1 p2 clauses) = (term95 A B C P p1 p2 clauses).
Proof. exact (eq_refl (term95 A B C P p1 p2 clauses)). Qed.
Lemma lem8081293 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term96 A B C P clauses p1 p2 c) = (term96 A B C P clauses p1 p2 c).
Proof. exact (MK_COMB (@lem8081292 A B C P p1 p2 clauses) (@lem8081289 A B C P clauses p1 p2 c)). Qed.
Lemma lem8081294 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term97 A B C P clauses p1 c) = (term97 A B C P clauses p1 c).
Proof. exact (fun_ext (fun p2 : type1475 B C P => @lem8081293 A B C P clauses p1 p2 c)). Qed.
Lemma lem8081295 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8081296 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term98 A B C P clauses p1 c) = (term98 A B C P clauses p1 c).
Proof. exact (MK_COMB (@lem8081295 B C P) (@lem8081294 A B C P clauses p1 c)). Qed.
Lemma lem8081297 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term99 A B C P clauses c) = (term99 A B C P clauses c).
Proof. exact (fun_ext (fun p1 : P -> A => @lem8081296 A B C P clauses p1 c)). Qed.
Lemma lem8081298 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8081299 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term100 A B C P clauses c) = (term100 A B C P clauses c).
Proof. exact (MK_COMB (@lem8081298 A P) (@lem8081297 A B C P clauses c)). Qed.
Lemma lem8081312 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term518 A B C P clauses s s' t x t' c y) = (term518 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term518 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8081313 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term519 A B C P clauses s s' t x t' c) = (term519 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8081312 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8081314 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8081315 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term520 A B C P clauses s s' t x t' c) = (term520 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8081314 P) (@lem8081313 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8081316 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term521 A B C P clauses s s' t t' c) = (term521 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8081315 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8081317 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8081318 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term522 A B C P clauses s s' t t' c) = (term522 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8081317 P) (@lem8081316 A B C P clauses s s' t t' c)). Qed.
Lemma lem8081319 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term523 A B C P clauses s s' t c) = (term523 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8081318 A B C P clauses s s' t t' c)). Qed.
Lemma lem8081320 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8081321 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term524 A B C P clauses s s' t c) = (term524 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8081320 B C P) (@lem8081319 A B C P clauses s s' t c)). Qed.
Lemma lem8081322 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term525 A B C P clauses s t c) = (term525 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8081321 A B C P clauses s s' t c)). Qed.
Lemma lem8081323 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8081324 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term526 A B C P clauses s t c) = (term526 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8081323 A P) (@lem8081322 A B C P clauses s t c)). Qed.
Lemma lem8081325 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term527 A B C P clauses s c) = (term527 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8081324 A B C P clauses s t c)). Qed.
Lemma lem8081326 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8081327 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term528 A B C P clauses s c) = (term528 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8081326 B C P) (@lem8081325 A B C P clauses s c)). Qed.
Lemma lem8081328 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term529 A B C P clauses c) = (term529 A B C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8081327 A B C P clauses s c)). Qed.
Lemma lem8081329 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8081330 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term530 A B C P clauses c) = (term530 A B C P clauses c).
Proof. exact (MK_COMB (@lem8081329 A P) (@lem8081328 A B C P clauses c)). Qed.
Lemma lem8081331 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8081332 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term101 A B C P clauses c) = (term101 A B C P clauses c).
Proof. exact (MK_COMB (@lem8081331) (@lem8081330 A B C P clauses c)). Qed.
Lemma lem8081333 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term103 A B C P clauses c) = (term103 A B C P clauses c).
Proof. exact (MK_COMB (@lem8081332 A B C P clauses c) (@lem8081299 A B C P clauses c)). Qed.
Lemma lem8081334 {A B C P : Type'} (clauses : type1638 A B C P) : (term105 A B C P clauses) = (term105 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8081333 A B C P clauses c)). Qed.
Lemma lem8081335 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8081336 {A B C P : Type'} (clauses : type1638 A B C P) : (term107 A B C P clauses) = (term107 A B C P clauses).
Proof. exact (MK_COMB (@lem8081335 C) (@lem8081334 A B C P clauses)). Qed.
Lemma lem8081337 {A B C P : Type'} : (term109 A B C P) = (term109 A B C P).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8081336 A B C P clauses)). Qed.
Lemma lem8081338 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8081339 {A B C P : Type'} : (term111 A B C P) = (term111 A B C P).
Proof. exact (MK_COMB (@lem8081338 A B C P) (@lem8081337 A B C P)). Qed.
Lemma lem8081340 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8081341 {A B C P : Type'} : (term114 A B C P) = (term114 A B C P).
Proof. exact (MK_COMB (@lem8081340) (@lem8081339 A B C P)). Qed.
Lemma lem8081342 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8081343 {A B C P : Type'} : (term155 A B C P) = (term155 A B C P).
Proof. exact (MK_COMB (@lem8081342) (@lem8081341 A B C P)). Qed.
Lemma lem8081344 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (_106908 : _143320) (_106907 : B) : (term505 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907) = (term505 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907).
Proof. exact (MK_COMB (@lem8081343 A B C P) (@lem8081285 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907)). Qed.
Lemma lem8081345 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (_106907 : B) : (term507 _143310 _143311 _143313 _143320 A B C P _106908 _106907) = (term507 _143310 _143311 _143313 _143320 A B C P _106908 _106907).
Proof. exact (fun_ext (fun _106906 : A => @lem8081344 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907)). Qed.
Lemma lem8081346 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8081347 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (_106907 : B) : (term508 _143310 _143311 _143313 _143320 A B C P _106908 _106907) = (term508 _143310 _143311 _143313 _143320 A B C P _106908 _106907).
Proof. exact (MK_COMB (@lem8081346 A) (@lem8081345 _143310 _143311 _143313 _143320 A B C P _106908 _106907)). Qed.
Lemma lem8081348 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) : (term510 _143310 _143311 _143313 _143320 A B C P _106908) = (term510 _143310 _143311 _143313 _143320 A B C P _106908).
Proof. exact (fun_ext (fun _106907 : B => @lem8081347 _143310 _143311 _143313 _143320 A B C P _106908 _106907)). Qed.
Lemma lem8081349 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8081350 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) : (term511 _143310 _143311 _143313 _143320 A B C P _106908) = (term511 _143310 _143311 _143313 _143320 A B C P _106908).
Proof. exact (MK_COMB (@lem8081349 B) (@lem8081348 _143310 _143311 _143313 _143320 A B C P _106908)). Qed.
Lemma lem8081351 {_143310 _143311 _143313 _143320 A B C P : Type'} : (term514 _143310 _143311 _143313 _143320 A B C P) = (term514 _143310 _143311 _143313 _143320 A B C P).
Proof. exact (fun_ext (fun _106908 : _143320 => @lem8081350 _143310 _143311 _143313 _143320 A B C P _106908)). Qed.
Lemma lem8081352 {_143320 : Type'} : (@all _143320) = (@all _143320).
Proof. exact (eq_refl (@all _143320)). Qed.
Lemma lem8081353 {_143310 _143311 _143313 _143320 A B C P : Type'} : (term515 _143310 _143311 _143313 _143320 A B C P) = (term515 _143310 _143311 _143313 _143320 A B C P).
Proof. exact (MK_COMB (@lem8081352 _143320) (@lem8081351 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8081780 {_143310 _143311 _143313 _143320 A B C P : Type'} : (term246 _143310 _143311 _143313 _143320 A B C P) = (term515 _143310 _143311 _143313 _143320 A B C P).
Proof. exact (TRANS (@lem8081021 _143310 _143311 _143313 _143320 A B C P) (@lem8081353 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8081781 {_143310 _143311 _143313 _143320 A B C P : Type'} : (term515 _143310 _143311 _143313 _143320 A B C P) = (term246 _143310 _143311 _143313 _143320 A B C P).
Proof. exact (SYM (@lem8081780 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8081782 {A B C P : Type'} (h1 : term114 A B C P) : term114 A B C P.
Proof. exact (h1). Qed.
Lemma lem8081783 {_143310 _143311 _143313 A : Type'} (_106906 : A) (h1 : term347 _143310 _143311 _143313 A _106906) : term347 _143310 _143311 _143313 A _106906.
Proof. exact (h1). Qed.
Lemma lem8081784 {_143310 _143311 _143313 B : Type'} (_106907 : B) (h1 : term347 _143310 _143311 _143313 B _106907) : term347 _143310 _143311 _143313 B _106907.
Proof. exact (h1). Qed.
Lemma lem8081785 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) (h1 : term424 _143311 _143313 _143320 A _106908) : term424 _143311 _143313 _143320 A _106908.
Proof. exact (h1). Qed.
Lemma lem8081786 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) (h1 : term424 _143311 _143313 _143320 B _106908) : term424 _143311 _143313 _143320 B _106908.
Proof. exact (h1). Qed.
Lemma lem8081787 {A B C P : Type'} (_106907 : B) (h1 : term499 A B C P _106907) : term499 A B C P _106907.
Proof. exact (h1). Qed.
Lemma lem8081795 {A B C P : Type'} (t' : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : P) (s' : P -> A) (y : P) : (term531 A B C P t' clauses s x s' y) = (term532 A B C P t' clauses s x s' y).
Proof. exact (@lem17045 (term429 A B C P s' t' clauses) ((s x) = (s' y))). Qed.
Lemma lem8081797 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term533 A B C P s t clauses) = (term533 A B C P s t clauses).
Proof. exact (eq_refl (term533 A B C P s t clauses)). Qed.
Lemma lem8081798 {A B C P : Type'} (t : type1475 B C P) (t' : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : P) (s' : P -> A) (y : P) : (term534 A B C P t t' clauses s x s' y) = (term535 A B C P t t' clauses s x s' y).
Proof. exact (MK_COMB (@lem8081797 A B C P s t clauses) (@lem8081795 A B C P t' clauses s x s' y)). Qed.
Lemma lem8081799 {A B C P : Type'} (t : type1475 B C P) (t' : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : P) (s' : P -> A) (y : P) : (term536 A B C P t t' clauses s x s' y) = (term534 A B C P t t' clauses s x s' y).
Proof. exact (@lem17045 (term429 A B C P s t clauses) (term537 A B C P t' clauses s x s' y)). Qed.
Lemma lem8081800 {A B C P : Type'} (t : type1475 B C P) (t' : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : P) (s' : P -> A) (y : P) : (term536 A B C P t t' clauses s x s' y) = (term535 A B C P t t' clauses s x s' y).
Proof. exact (TRANS (@lem8081799 A B C P t t' clauses s x s' y) (@lem8081798 A B C P t t' clauses s x s' y)). Qed.
Lemma lem8081801 {B C P : Type'} (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : ((t c x) = (t' c y)) = ((t c x) = (t' c y)).
Proof. exact (eq_refl ((t c x) = (t' c y))). Qed.
Lemma lem8081802 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8081803 {A B C P : Type'} (t : type1475 B C P) (t' : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : P) (s' : P -> A) (y : P) : (term538 A B C P t t' clauses s x s' y) = (term539 A B C P t t' clauses s x s' y).
Proof. exact (MK_COMB (@lem8081802) (@lem8081800 A B C P t t' clauses s x s' y)). Qed.
Lemma lem8081804 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term540 A B C P clauses s s' t x t' c y) = (term541 A B C P clauses s s' t x t' c y).
Proof. exact (MK_COMB (@lem8081803 A B C P t t' clauses s x s' y) (@lem8081801 B C P t x t' c y)). Qed.
Lemma lem8081805 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term518 A B C P clauses s s' t x t' c y) = (term540 A B C P clauses s s' t x t' c y).
Proof. exact (@lem17265 (term542 A B C P t t' clauses s x s' y) ((t c x) = (t' c y))). Qed.
Lemma lem8081806 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term518 A B C P clauses s s' t x t' c y) = (term541 A B C P clauses s s' t x t' c y).
Proof. exact (TRANS (@lem8081805 A B C P clauses s s' t x t' c y) (@lem8081804 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8081807 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term519 A B C P clauses s s' t x t' c) = (term543 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8081806 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8081808 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8081809 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term520 A B C P clauses s s' t x t' c) = (term544 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8081808 P) (@lem8081807 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8081810 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term521 A B C P clauses s s' t t' c) = (term545 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8081809 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8081811 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8081812 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term522 A B C P clauses s s' t t' c) = (term546 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8081811 P) (@lem8081810 A B C P clauses s s' t t' c)). Qed.
Lemma lem8081813 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term523 A B C P clauses s s' t c) = (term547 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8081812 A B C P clauses s s' t t' c)). Qed.
Lemma lem8081814 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8081815 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term524 A B C P clauses s s' t c) = (term548 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8081814 B C P) (@lem8081813 A B C P clauses s s' t c)). Qed.
Lemma lem8081816 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term525 A B C P clauses s t c) = (term549 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8081815 A B C P clauses s s' t c)). Qed.
Lemma lem8081817 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8081818 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term526 A B C P clauses s t c) = (term550 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8081817 A P) (@lem8081816 A B C P clauses s t c)). Qed.
Lemma lem8081819 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term527 A B C P clauses s c) = (term551 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8081818 A B C P clauses s t c)). Qed.
Lemma lem8081820 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8081821 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term528 A B C P clauses s c) = (term552 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8081820 B C P) (@lem8081819 A B C P clauses s c)). Qed.
Lemma lem8081822 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term529 A B C P clauses c) = (term553 A B C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8081821 A B C P clauses s c)). Qed.
Lemma lem8081823 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8081824 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term530 A B C P clauses c) = (term554 A B C P clauses c).
Proof. exact (MK_COMB (@lem8081823 A P) (@lem8081822 A B C P clauses c)). Qed.
Lemma lem8081827 {P : Type'} (P' : P -> Prop) : (term555 P P') = (term556 P P').
Proof. exact (@lem18392 P P'). Qed.
Lemma lem8081828 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term557 A B C P clauses p1 p2 c) = (term558 A B C P clauses p1 p2 c).
Proof. exact (@lem8081827 P (term517 A B C P clauses p1 p2 c)). Qed.
Lemma lem8081829 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) : (term559 A B C P clauses p1 p2 c x) = ((term516 A B C P clauses c p1 x) = (p2 c x)).
Proof. exact (eq_refl (term559 A B C P clauses p1 p2 c x)). Qed.
Lemma lem8081830 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8081832 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) : (term560 A B C P clauses p1 p2 c x) = (term561 A B C P clauses p1 p2 c x).
Proof. exact (MK_COMB (@lem8081830) (@lem8081829 A B C P clauses p1 p2 c x)). Qed.
Lemma lem8081833 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term562 A B C P clauses p1 p2 c) = (term563 A B C P clauses p1 p2 c).
Proof. exact (fun_ext (fun x : P => @lem8081832 A B C P clauses p1 p2 c x)). Qed.
Lemma lem8081834 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8081835 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term558 A B C P clauses p1 p2 c) = (term564 A B C P clauses p1 p2 c).
Proof. exact (MK_COMB (@lem8081834 P) (@lem8081833 A B C P clauses p1 p2 c)). Qed.
Lemma lem8081836 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term557 A B C P clauses p1 p2 c) = (term564 A B C P clauses p1 p2 c).
Proof. exact (TRANS (@lem8081828 A B C P clauses p1 p2 c) (@lem8081835 A B C P clauses p1 p2 c)). Qed.
Lemma lem8081838 {A B C P : Type'} (p1 : P -> A) (p2 : type1475 B C P) (clauses : type1638 A B C P) : (term433 A B C P p1 p2 clauses) = (term433 A B C P p1 p2 clauses).
Proof. exact (eq_refl (term433 A B C P p1 p2 clauses)). Qed.
Lemma lem8081839 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term565 A B C P clauses p1 p2 c) = (term566 A B C P clauses p1 p2 c).
Proof. exact (MK_COMB (@lem8081838 A B C P p1 p2 clauses) (@lem8081836 A B C P clauses p1 p2 c)). Qed.
Lemma lem8081840 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term567 A B C P clauses p1 p2 c) = (term565 A B C P clauses p1 p2 c).
Proof. exact (@lem17362 (term429 A B C P p1 p2 clauses) (term65 A B C P clauses p1 p2 c)). Qed.
Lemma lem8081841 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term567 A B C P clauses p1 p2 c) = (term566 A B C P clauses p1 p2 c).
Proof. exact (TRANS (@lem8081840 A B C P clauses p1 p2 c) (@lem8081839 A B C P clauses p1 p2 c)). Qed.
Lemma lem8081842 {B C P : Type'} (P' : type766 B C P) : (term568 B C P P') = (term569 B C P P').
Proof. exact (@lem18392 (type1475 B C P) P'). Qed.
Lemma lem8081843 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term570 A B C P clauses p1 c) = (term571 A B C P clauses p1 c).
Proof. exact (@lem8081842 B C P (term97 A B C P clauses p1 c)). Qed.
Lemma lem8081844 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term572 A B C P clauses p1 c p2) = (term96 A B C P clauses p1 p2 c).
Proof. exact (eq_refl (term572 A B C P clauses p1 c p2)). Qed.
Lemma lem8081845 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8081846 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term573 A B C P clauses p1 c p2) = (term567 A B C P clauses p1 p2 c).
Proof. exact (MK_COMB (@lem8081845) (@lem8081844 A B C P clauses p1 p2 c)). Qed.
Lemma lem8081847 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term573 A B C P clauses p1 c p2) = (term566 A B C P clauses p1 p2 c).
Proof. exact (TRANS (@lem8081846 A B C P clauses p1 p2 c) (@lem8081841 A B C P clauses p1 p2 c)). Qed.
Lemma lem8081848 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term574 A B C P clauses p1 c) = (term575 A B C P clauses p1 c).
Proof. exact (fun_ext (fun p2 : type1475 B C P => @lem8081847 A B C P clauses p1 p2 c)). Qed.
Lemma lem8081849 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8081850 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term571 A B C P clauses p1 c) = (term576 A B C P clauses p1 c).
Proof. exact (MK_COMB (@lem8081849 B C P) (@lem8081848 A B C P clauses p1 c)). Qed.
Lemma lem8081851 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term570 A B C P clauses p1 c) = (term576 A B C P clauses p1 c).
Proof. exact (TRANS (@lem8081843 A B C P clauses p1 c) (@lem8081850 A B C P clauses p1 c)). Qed.
Lemma lem8081852 {A P : Type'} (P' : type805 A P) : (term577 A P P') = (term578 A P P').
Proof. exact (@lem18392 (P -> A) P'). Qed.
Lemma lem8081853 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term579 A B C P clauses c) = (term580 A B C P clauses c).
Proof. exact (@lem8081852 A P (term99 A B C P clauses c)). Qed.
Lemma lem8081854 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term581 A B C P clauses c p1) = (term98 A B C P clauses p1 c).
Proof. exact (eq_refl (term581 A B C P clauses c p1)). Qed.
Lemma lem8081855 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8081856 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term582 A B C P clauses c p1) = (term570 A B C P clauses p1 c).
Proof. exact (MK_COMB (@lem8081855) (@lem8081854 A B C P clauses p1 c)). Qed.
Lemma lem8081857 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term582 A B C P clauses c p1) = (term576 A B C P clauses p1 c).
Proof. exact (TRANS (@lem8081856 A B C P clauses p1 c) (@lem8081851 A B C P clauses p1 c)). Qed.
Lemma lem8081858 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term583 A B C P clauses c) = (term584 A B C P clauses c).
Proof. exact (fun_ext (fun p1 : P -> A => @lem8081857 A B C P clauses p1 c)). Qed.
Lemma lem8081859 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8081860 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term580 A B C P clauses c) = (term585 A B C P clauses c).
Proof. exact (MK_COMB (@lem8081859 A P) (@lem8081858 A B C P clauses c)). Qed.
Lemma lem8081861 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term579 A B C P clauses c) = (term585 A B C P clauses c).
Proof. exact (TRANS (@lem8081853 A B C P clauses c) (@lem8081860 A B C P clauses c)). Qed.
Lemma lem8081862 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8081863 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term586 A B C P clauses c) = (term587 A B C P clauses c).
Proof. exact (MK_COMB (@lem8081862) (@lem8081824 A B C P clauses c)). Qed.
Lemma lem8081864 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term588 A B C P clauses c) = (term589 A B C P clauses c).
Proof. exact (MK_COMB (@lem8081863 A B C P clauses c) (@lem8081861 A B C P clauses c)). Qed.
Lemma lem8081865 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term590 A B C P clauses c) = (term588 A B C P clauses c).
Proof. exact (@lem17362 (term530 A B C P clauses c) (term100 A B C P clauses c)). Qed.
Lemma lem8081866 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term590 A B C P clauses c) = (term589 A B C P clauses c).
Proof. exact (TRANS (@lem8081865 A B C P clauses c) (@lem8081864 A B C P clauses c)). Qed.
Lemma lem8081867 {C : Type'} (P : C -> Prop) : (term555 C P) = (term556 C P).
Proof. exact (@lem18392 C P). Qed.
Lemma lem8081868 {A B C P : Type'} (clauses : type1638 A B C P) : (term591 A B C P clauses) = (term592 A B C P clauses).
Proof. exact (@lem8081867 C (term105 A B C P clauses)). Qed.
Lemma lem8081869 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term593 A B C P clauses c) = (term103 A B C P clauses c).
Proof. exact (eq_refl (term593 A B C P clauses c)). Qed.
Lemma lem8081870 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8081871 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term594 A B C P clauses c) = (term590 A B C P clauses c).
Proof. exact (MK_COMB (@lem8081870) (@lem8081869 A B C P clauses c)). Qed.
Lemma lem8081872 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term594 A B C P clauses c) = (term589 A B C P clauses c).
Proof. exact (TRANS (@lem8081871 A B C P clauses c) (@lem8081866 A B C P clauses c)). Qed.
Lemma lem8081873 {A B C P : Type'} (clauses : type1638 A B C P) : (term595 A B C P clauses) = (term596 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8081872 A B C P clauses c)). Qed.
Lemma lem8081874 {C : Type'} : (@ex C) = (@ex C).
Proof. exact (eq_refl (@ex C)). Qed.
Lemma lem8081875 {A B C P : Type'} (clauses : type1638 A B C P) : (term592 A B C P clauses) = (term597 A B C P clauses).
Proof. exact (MK_COMB (@lem8081874 C) (@lem8081873 A B C P clauses)). Qed.
Lemma lem8081876 {A B C P : Type'} (clauses : type1638 A B C P) : (term591 A B C P clauses) = (term597 A B C P clauses).
Proof. exact (TRANS (@lem8081868 A B C P clauses) (@lem8081875 A B C P clauses)). Qed.
Lemma lem8081877 {A B C P : Type'} (P' : type1123 A B C P) : (term598 A B C P P') = (term599 A B C P P').
Proof. exact (@lem18392 (type1638 A B C P) P'). Qed.
Lemma lem8081878 {A B C P : Type'} : (term114 A B C P) = (term600 A B C P).
Proof. exact (@lem8081877 A B C P (term109 A B C P)). Qed.
Lemma lem8081879 {A B C P : Type'} (clauses : type1638 A B C P) : (term601 A B C P clauses) = (term107 A B C P clauses).
Proof. exact (eq_refl (term601 A B C P clauses)). Qed.
Lemma lem8081880 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8081881 {A B C P : Type'} (clauses : type1638 A B C P) : (term602 A B C P clauses) = (term591 A B C P clauses).
Proof. exact (MK_COMB (@lem8081880) (@lem8081879 A B C P clauses)). Qed.
Lemma lem8081882 {A B C P : Type'} (clauses : type1638 A B C P) : (term602 A B C P clauses) = (term597 A B C P clauses).
Proof. exact (TRANS (@lem8081881 A B C P clauses) (@lem8081876 A B C P clauses)). Qed.
Lemma lem8081883 {A B C P : Type'} : (term603 A B C P) = (term604 A B C P).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8081882 A B C P clauses)). Qed.
Lemma lem8081884 {A B C P : Type'} : (@ex (list (prod (P -> A) (C -> P -> B)))) = (@ex (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@ex (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8081885 {A B C P : Type'} : (term600 A B C P) = (term605 A B C P).
Proof. exact (MK_COMB (@lem8081884 A B C P) (@lem8081883 A B C P)). Qed.
Lemma lem8081886 {A B C P : Type'} : (term114 A B C P) = (term605 A B C P).
Proof. exact (TRANS (@lem8081878 A B C P) (@lem8081885 A B C P)). Qed.
Lemma lem8082065 {A : Type'} (P : Prop) (Q : A -> Prop) : (term267 A P Q) = (term266 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem8082066 {P : Type'} (P' : Prop) (Q : P -> Prop) : (term267 P P' Q) = (term266 P P' Q).
Proof. exact (@lem8082065 P P' Q). Qed.
Lemma lem8082067 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term606 A B C P clauses p1 p2 c) = (term607 A B C P clauses p1 p2 c).
Proof. exact (@lem8082066 P (term429 A B C P p1 p2 clauses) (term563 A B C P clauses p1 p2 c)). Qed.
Lemma lem8082068 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) : (term608 A B C P clauses p1 p2 c x) = (term561 A B C P clauses p1 p2 c x).
Proof. exact (eq_refl (term608 A B C P clauses p1 p2 c x)). Qed.
Lemma lem8082069 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term609 A B C P clauses p1 p2 c) = (term563 A B C P clauses p1 p2 c).
Proof. exact (fun_ext (fun x : P => @lem8082068 A B C P clauses p1 p2 c x)). Qed.
Lemma lem8082070 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8082071 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term610 A B C P clauses p1 p2 c) = (term564 A B C P clauses p1 p2 c).
Proof. exact (MK_COMB (@lem8082070 P) (@lem8082069 A B C P clauses p1 p2 c)). Qed.
Lemma lem8082072 {A B C P : Type'} (p1 : P -> A) (p2 : type1475 B C P) (clauses : type1638 A B C P) : (term433 A B C P p1 p2 clauses) = (term433 A B C P p1 p2 clauses).
Proof. exact (eq_refl (term433 A B C P p1 p2 clauses)). Qed.
Lemma lem8082073 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term606 A B C P clauses p1 p2 c) = (term566 A B C P clauses p1 p2 c).
Proof. exact (MK_COMB (@lem8082072 A B C P p1 p2 clauses) (@lem8082071 A B C P clauses p1 p2 c)). Qed.
Lemma lem8082074 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8082075 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term611 A B C P clauses p1 p2 c) = (term612 A B C P clauses p1 p2 c).
Proof. exact (MK_COMB (@lem8082074) (@lem8082073 A B C P clauses p1 p2 c)). Qed.
Lemma lem8082076 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) : (term608 A B C P clauses p1 p2 c x) = (term561 A B C P clauses p1 p2 c x).
Proof. exact (eq_refl (term608 A B C P clauses p1 p2 c x)). Qed.
Lemma lem8082077 {A B C P : Type'} (p1 : P -> A) (p2 : type1475 B C P) (clauses : type1638 A B C P) : (term433 A B C P p1 p2 clauses) = (term433 A B C P p1 p2 clauses).
Proof. exact (eq_refl (term433 A B C P p1 p2 clauses)). Qed.
Lemma lem8082078 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) : (term613 A B C P clauses p1 p2 c x) = (term614 A B C P clauses p1 p2 c x).
Proof. exact (MK_COMB (@lem8082077 A B C P p1 p2 clauses) (@lem8082076 A B C P clauses p1 p2 c x)). Qed.
Lemma lem8082079 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term615 A B C P clauses p1 p2 c) = (term616 A B C P clauses p1 p2 c).
Proof. exact (fun_ext (fun x : P => @lem8082078 A B C P clauses p1 p2 c x)). Qed.
Lemma lem8082080 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8082081 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term607 A B C P clauses p1 p2 c) = (term617 A B C P clauses p1 p2 c).
Proof. exact (MK_COMB (@lem8082080 P) (@lem8082079 A B C P clauses p1 p2 c)). Qed.
Lemma lem8082082 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : ((term606 A B C P clauses p1 p2 c) = (term607 A B C P clauses p1 p2 c)) = ((term566 A B C P clauses p1 p2 c) = (term617 A B C P clauses p1 p2 c)).
Proof. exact (MK_COMB (@lem8082075 A B C P clauses p1 p2 c) (@lem8082081 A B C P clauses p1 p2 c)). Qed.
Lemma lem8082083 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term566 A B C P clauses p1 p2 c) = (term617 A B C P clauses p1 p2 c).
Proof. exact (EQ_MP (@lem8082082 A B C P clauses p1 p2 c) (@lem8082067 A B C P clauses p1 p2 c)). Qed.
Lemma lem8082084 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term575 A B C P clauses p1 c) = (term618 A B C P clauses p1 c).
Proof. exact (fun_ext (fun p2 : type1475 B C P => @lem8082083 A B C P clauses p1 p2 c)). Qed.
Lemma lem8082085 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8082086 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term576 A B C P clauses p1 c) = (term619 A B C P clauses p1 c).
Proof. exact (MK_COMB (@lem8082085 B C P) (@lem8082084 A B C P clauses p1 c)). Qed.
Lemma lem8082087 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term584 A B C P clauses c) = (term620 A B C P clauses c).
Proof. exact (fun_ext (fun p1 : P -> A => @lem8082086 A B C P clauses p1 c)). Qed.
Lemma lem8082088 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8082089 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term585 A B C P clauses c) = (term621 A B C P clauses c).
Proof. exact (MK_COMB (@lem8082088 A P) (@lem8082087 A B C P clauses c)). Qed.
Lemma lem8082090 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term587 A B C P clauses c) = (term587 A B C P clauses c).
Proof. exact (eq_refl (term587 A B C P clauses c)). Qed.
Lemma lem8082091 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term589 A B C P clauses c) = (term622 A B C P clauses c).
Proof. exact (MK_COMB (@lem8082090 A B C P clauses c) (@lem8082089 A B C P clauses c)). Qed.
Lemma lem8082093 {A : Type'} (P : Prop) (Q : A -> Prop) : (term267 A P Q) = (term266 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem8082094 {A P : Type'} (P' : Prop) (Q : type805 A P) : (term623 A P P' Q) = (term624 A P P' Q).
Proof. exact (@lem8082093 (P -> A) P' Q). Qed.
Lemma lem8082095 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term625 A B C P clauses c) = (term626 A B C P clauses c).
Proof. exact (@lem8082094 A P (term554 A B C P clauses c) (term620 A B C P clauses c)). Qed.
Lemma lem8082096 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term627 A B C P clauses c p1) = (term619 A B C P clauses p1 c).
Proof. exact (eq_refl (term627 A B C P clauses c p1)). Qed.
Lemma lem8082097 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term628 A B C P clauses c) = (term620 A B C P clauses c).
Proof. exact (fun_ext (fun p1 : P -> A => @lem8082096 A B C P clauses p1 c)). Qed.
Lemma lem8082098 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8082099 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term629 A B C P clauses c) = (term621 A B C P clauses c).
Proof. exact (MK_COMB (@lem8082098 A P) (@lem8082097 A B C P clauses c)). Qed.
Lemma lem8082100 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term587 A B C P clauses c) = (term587 A B C P clauses c).
Proof. exact (eq_refl (term587 A B C P clauses c)). Qed.
Lemma lem8082101 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term625 A B C P clauses c) = (term622 A B C P clauses c).
Proof. exact (MK_COMB (@lem8082100 A B C P clauses c) (@lem8082099 A B C P clauses c)). Qed.
Lemma lem8082102 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8082103 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term630 A B C P clauses c) = (term631 A B C P clauses c).
Proof. exact (MK_COMB (@lem8082102) (@lem8082101 A B C P clauses c)). Qed.
Lemma lem8082104 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term627 A B C P clauses c p1) = (term619 A B C P clauses p1 c).
Proof. exact (eq_refl (term627 A B C P clauses c p1)). Qed.
Lemma lem8082105 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term587 A B C P clauses c) = (term587 A B C P clauses c).
Proof. exact (eq_refl (term587 A B C P clauses c)). Qed.
Lemma lem8082106 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term632 A B C P clauses c p1) = (term633 A B C P clauses p1 c).
Proof. exact (MK_COMB (@lem8082105 A B C P clauses c) (@lem8082104 A B C P clauses p1 c)). Qed.
Lemma lem8082107 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term634 A B C P clauses c) = (term635 A B C P clauses c).
Proof. exact (fun_ext (fun p1 : P -> A => @lem8082106 A B C P clauses p1 c)). Qed.
Lemma lem8082108 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8082109 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term626 A B C P clauses c) = (term636 A B C P clauses c).
Proof. exact (MK_COMB (@lem8082108 A P) (@lem8082107 A B C P clauses c)). Qed.
Lemma lem8082110 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : ((term625 A B C P clauses c) = (term626 A B C P clauses c)) = ((term622 A B C P clauses c) = (term636 A B C P clauses c)).
Proof. exact (MK_COMB (@lem8082103 A B C P clauses c) (@lem8082109 A B C P clauses c)). Qed.
Lemma lem8082111 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term622 A B C P clauses c) = (term636 A B C P clauses c).
Proof. exact (EQ_MP (@lem8082110 A B C P clauses c) (@lem8082095 A B C P clauses c)). Qed.
Lemma lem8082113 {A : Type'} (P : Prop) (Q : A -> Prop) : (term267 A P Q) = (term266 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem8082114 {B C P : Type'} (P' : Prop) (Q : type766 B C P) : (term637 B C P P' Q) = (term638 B C P P' Q).
Proof. exact (@lem8082113 (type1475 B C P) P' Q). Qed.
Lemma lem8082115 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term639 A B C P clauses p1 c) = (term640 A B C P clauses p1 c).
Proof. exact (@lem8082114 B C P (term554 A B C P clauses c) (term618 A B C P clauses p1 c)). Qed.
Lemma lem8082116 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term641 A B C P clauses p1 c p2) = (term617 A B C P clauses p1 p2 c).
Proof. exact (eq_refl (term641 A B C P clauses p1 c p2)). Qed.
Lemma lem8082117 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term642 A B C P clauses p1 c) = (term618 A B C P clauses p1 c).
Proof. exact (fun_ext (fun p2 : type1475 B C P => @lem8082116 A B C P clauses p1 p2 c)). Qed.
Lemma lem8082118 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8082119 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term643 A B C P clauses p1 c) = (term619 A B C P clauses p1 c).
Proof. exact (MK_COMB (@lem8082118 B C P) (@lem8082117 A B C P clauses p1 c)). Qed.
Lemma lem8082120 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term587 A B C P clauses c) = (term587 A B C P clauses c).
Proof. exact (eq_refl (term587 A B C P clauses c)). Qed.
Lemma lem8082121 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term639 A B C P clauses p1 c) = (term633 A B C P clauses p1 c).
Proof. exact (MK_COMB (@lem8082120 A B C P clauses c) (@lem8082119 A B C P clauses p1 c)). Qed.
Lemma lem8082122 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8082123 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term644 A B C P clauses p1 c) = (term645 A B C P clauses p1 c).
Proof. exact (MK_COMB (@lem8082122) (@lem8082121 A B C P clauses p1 c)). Qed.
Lemma lem8082124 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term641 A B C P clauses p1 c p2) = (term617 A B C P clauses p1 p2 c).
Proof. exact (eq_refl (term641 A B C P clauses p1 c p2)). Qed.
Lemma lem8082125 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term587 A B C P clauses c) = (term587 A B C P clauses c).
Proof. exact (eq_refl (term587 A B C P clauses c)). Qed.
Lemma lem8082126 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term646 A B C P clauses p1 c p2) = (term647 A B C P clauses p1 p2 c).
Proof. exact (MK_COMB (@lem8082125 A B C P clauses c) (@lem8082124 A B C P clauses p1 p2 c)). Qed.
Lemma lem8082127 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term648 A B C P clauses p1 c) = (term649 A B C P clauses p1 c).
Proof. exact (fun_ext (fun p2 : type1475 B C P => @lem8082126 A B C P clauses p1 p2 c)). Qed.
Lemma lem8082128 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8082129 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term640 A B C P clauses p1 c) = (term650 A B C P clauses p1 c).
Proof. exact (MK_COMB (@lem8082128 B C P) (@lem8082127 A B C P clauses p1 c)). Qed.
Lemma lem8082130 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : ((term639 A B C P clauses p1 c) = (term640 A B C P clauses p1 c)) = ((term633 A B C P clauses p1 c) = (term650 A B C P clauses p1 c)).
Proof. exact (MK_COMB (@lem8082123 A B C P clauses p1 c) (@lem8082129 A B C P clauses p1 c)). Qed.
Lemma lem8082131 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term633 A B C P clauses p1 c) = (term650 A B C P clauses p1 c).
Proof. exact (EQ_MP (@lem8082130 A B C P clauses p1 c) (@lem8082115 A B C P clauses p1 c)). Qed.
Lemma lem8082133 {A : Type'} (P : Prop) (Q : A -> Prop) : (term267 A P Q) = (term266 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem8082134 {P : Type'} (P' : Prop) (Q : P -> Prop) : (term267 P P' Q) = (term266 P P' Q).
Proof. exact (@lem8082133 P P' Q). Qed.
Lemma lem8082135 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term651 A B C P clauses p1 p2 c) = (term652 A B C P clauses p1 p2 c).
Proof. exact (@lem8082134 P (term554 A B C P clauses c) (term616 A B C P clauses p1 p2 c)). Qed.
Lemma lem8082136 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) : (term653 A B C P clauses p1 p2 c x) = (term614 A B C P clauses p1 p2 c x).
Proof. exact (eq_refl (term653 A B C P clauses p1 p2 c x)). Qed.
Lemma lem8082137 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term654 A B C P clauses p1 p2 c) = (term616 A B C P clauses p1 p2 c).
Proof. exact (fun_ext (fun x : P => @lem8082136 A B C P clauses p1 p2 c x)). Qed.
Lemma lem8082138 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8082139 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term655 A B C P clauses p1 p2 c) = (term617 A B C P clauses p1 p2 c).
Proof. exact (MK_COMB (@lem8082138 P) (@lem8082137 A B C P clauses p1 p2 c)). Qed.
Lemma lem8082140 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term587 A B C P clauses c) = (term587 A B C P clauses c).
Proof. exact (eq_refl (term587 A B C P clauses c)). Qed.
Lemma lem8082141 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term651 A B C P clauses p1 p2 c) = (term647 A B C P clauses p1 p2 c).
Proof. exact (MK_COMB (@lem8082140 A B C P clauses c) (@lem8082139 A B C P clauses p1 p2 c)). Qed.
Lemma lem8082142 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8082143 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term656 A B C P clauses p1 p2 c) = (term657 A B C P clauses p1 p2 c).
Proof. exact (MK_COMB (@lem8082142) (@lem8082141 A B C P clauses p1 p2 c)). Qed.
Lemma lem8082144 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) : (term653 A B C P clauses p1 p2 c x) = (term614 A B C P clauses p1 p2 c x).
Proof. exact (eq_refl (term653 A B C P clauses p1 p2 c x)). Qed.
Lemma lem8082145 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term587 A B C P clauses c) = (term587 A B C P clauses c).
Proof. exact (eq_refl (term587 A B C P clauses c)). Qed.
Lemma lem8082146 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) : (term658 A B C P clauses p1 p2 c x) = (term659 A B C P clauses p1 p2 c x).
Proof. exact (MK_COMB (@lem8082145 A B C P clauses c) (@lem8082144 A B C P clauses p1 p2 c x)). Qed.
Lemma lem8082147 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term660 A B C P clauses p1 p2 c) = (term661 A B C P clauses p1 p2 c).
Proof. exact (fun_ext (fun x : P => @lem8082146 A B C P clauses p1 p2 c x)). Qed.
Lemma lem8082148 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8082149 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term652 A B C P clauses p1 p2 c) = (term662 A B C P clauses p1 p2 c).
Proof. exact (MK_COMB (@lem8082148 P) (@lem8082147 A B C P clauses p1 p2 c)). Qed.
Lemma lem8082150 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : ((term651 A B C P clauses p1 p2 c) = (term652 A B C P clauses p1 p2 c)) = ((term647 A B C P clauses p1 p2 c) = (term662 A B C P clauses p1 p2 c)).
Proof. exact (MK_COMB (@lem8082143 A B C P clauses p1 p2 c) (@lem8082149 A B C P clauses p1 p2 c)). Qed.
Lemma lem8082151 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) : (term647 A B C P clauses p1 p2 c) = (term662 A B C P clauses p1 p2 c).
Proof. exact (EQ_MP (@lem8082150 A B C P clauses p1 p2 c) (@lem8082135 A B C P clauses p1 p2 c)). Qed.
Lemma lem8082152 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term649 A B C P clauses p1 c) = (term663 A B C P clauses p1 c).
Proof. exact (fun_ext (fun p2 : type1475 B C P => @lem8082151 A B C P clauses p1 p2 c)). Qed.
Lemma lem8082153 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8082154 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term650 A B C P clauses p1 c) = (term664 A B C P clauses p1 c).
Proof. exact (MK_COMB (@lem8082153 B C P) (@lem8082152 A B C P clauses p1 c)). Qed.
Lemma lem8082155 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) : (term633 A B C P clauses p1 c) = (term664 A B C P clauses p1 c).
Proof. exact (TRANS (@lem8082131 A B C P clauses p1 c) (@lem8082154 A B C P clauses p1 c)). Qed.
Lemma lem8082156 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term635 A B C P clauses c) = (term665 A B C P clauses c).
Proof. exact (fun_ext (fun p1 : P -> A => @lem8082155 A B C P clauses p1 c)). Qed.
Lemma lem8082157 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8082158 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term636 A B C P clauses c) = (term666 A B C P clauses c).
Proof. exact (MK_COMB (@lem8082157 A P) (@lem8082156 A B C P clauses c)). Qed.
Lemma lem8082159 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term622 A B C P clauses c) = (term666 A B C P clauses c).
Proof. exact (TRANS (@lem8082111 A B C P clauses c) (@lem8082158 A B C P clauses c)). Qed.
Lemma lem8082160 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term589 A B C P clauses c) = (term666 A B C P clauses c).
Proof. exact (TRANS (@lem8082091 A B C P clauses c) (@lem8082159 A B C P clauses c)). Qed.
Lemma lem8082161 {A B C P : Type'} (clauses : type1638 A B C P) : (term596 A B C P clauses) = (term667 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8082160 A B C P clauses c)). Qed.
Lemma lem8082162 {C : Type'} : (@ex C) = (@ex C).
Proof. exact (eq_refl (@ex C)). Qed.
Lemma lem8082163 {A B C P : Type'} (clauses : type1638 A B C P) : (term597 A B C P clauses) = (term668 A B C P clauses).
Proof. exact (MK_COMB (@lem8082162 C) (@lem8082161 A B C P clauses)). Qed.
Lemma lem8082164 {A B C P : Type'} : (term604 A B C P) = (term669 A B C P).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8082163 A B C P clauses)). Qed.
Lemma lem8082165 {A B C P : Type'} : (@ex (list (prod (P -> A) (C -> P -> B)))) = (@ex (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@ex (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8082167 {A B C P : Type'} : (term605 A B C P) = (term670 A B C P).
Proof. exact (MK_COMB (@lem8082165 A B C P) (@lem8082164 A B C P)). Qed.
Lemma lem8082168 {A B C P : Type'} : (term114 A B C P) = (term670 A B C P).
Proof. exact (TRANS (@lem8081886 A B C P) (@lem8082167 A B C P)). Qed.
Lemma lem8082169 {A B C P : Type'} (h1 : term114 A B C P) : term670 A B C P.
Proof. exact (EQ_MP (@lem8082168 A B C P) (@lem8081782 A B C P h1)). Qed.
Lemma lem8082175 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) (a : _143313) : (term273 _143310 _143311 _143313 A s clauses x t c a) = (term273 _143310 _143311 _143313 A s clauses x t c a).
Proof. exact (eq_refl (term273 _143310 _143311 _143313 A s clauses x t c a)). Qed.
Lemma lem8082176 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term271 _143310 _143311 _143313 A s clauses x t c) = (term271 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8082175 _143310 _143311 _143313 A s clauses x t c a)). Qed.
Lemma lem8082177 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8082178 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term284 _143310 _143311 _143313 A s clauses x t c) = (term284 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (MK_COMB (@lem8082177 _143313) (@lem8082176 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8082180 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) : (term274 _143310 _143311 _143313 A s t clauses) = (term274 _143310 _143311 _143313 A s t clauses).
Proof. exact (eq_refl (term274 _143310 _143311 _143313 A s t clauses)). Qed.
Lemma lem8082181 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term285 _143310 _143311 _143313 A s clauses x t c) = (term285 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (MK_COMB (@lem8082180 _143310 _143311 _143313 A s t clauses) (@lem8082178 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8082182 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term287 _143310 _143311 _143313 A s clauses x c) = (term287 _143310 _143311 _143313 A s clauses x c).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 A => @lem8082181 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8082183 {_143311 _143313 A : Type'} : (@ex (_143311 -> _143313 -> A)) = (@ex (_143311 -> _143313 -> A)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> A))). Qed.
Lemma lem8082184 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term289 _143310 _143311 _143313 A s clauses x c) = (term289 _143310 _143311 _143313 A s clauses x c).
Proof. exact (MK_COMB (@lem8082183 _143311 _143313 A) (@lem8082182 _143310 _143311 _143313 A s clauses x c)). Qed.
Lemma lem8082185 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term291 _143310 _143311 _143313 A clauses x c) = (term291 _143310 _143311 _143313 A clauses x c).
Proof. exact (fun_ext (fun s : _143313 -> _143310 => @lem8082184 _143310 _143311 _143313 A s clauses x c)). Qed.
Lemma lem8082186 {_143310 _143313 : Type'} : (@ex (_143313 -> _143310)) = (@ex (_143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143313 -> _143310))). Qed.
Lemma lem8082187 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term293 _143310 _143311 _143313 A clauses x c) = (term293 _143310 _143311 _143313 A clauses x c).
Proof. exact (MK_COMB (@lem8082186 _143310 _143313) (@lem8082185 _143310 _143311 _143313 A clauses x c)). Qed.
Lemma lem8082189 {_143311 _143313 A : Type'} (P : type443 _143311 _143313 A) : (term671 _143311 _143313 A P) = (term672 _143311 _143313 A P).
Proof. exact (@lem18394 (type1412 _143311 _143313 A) P). Qed.
Lemma lem8082190 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) : (term673 _143310 _143311 _143313 A s clauses) = (term674 _143310 _143311 _143313 A s clauses).
Proof. exact (@lem8082189 _143311 _143313 A (term320 _143310 _143311 _143313 A s clauses)). Qed.
Lemma lem8082191 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) : (term321 _143310 _143311 _143313 A s clauses t) = (term270 _143310 _143311 _143313 A s t clauses).
Proof. exact (eq_refl (term321 _143310 _143311 _143313 A s clauses t)). Qed.
Lemma lem8082192 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8082194 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) : (term675 _143310 _143311 _143313 A s clauses t) = (term676 _143310 _143311 _143313 A s t clauses).
Proof. exact (MK_COMB (@lem8082192) (@lem8082191 _143310 _143311 _143313 A s t clauses)). Qed.
Lemma lem8082195 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) : (term677 _143310 _143311 _143313 A s clauses) = (term678 _143310 _143311 _143313 A s clauses).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 A => @lem8082194 _143310 _143311 _143313 A s t clauses)). Qed.
Lemma lem8082196 {_143311 _143313 A : Type'} : (@all (_143311 -> _143313 -> A)) = (@all (_143311 -> _143313 -> A)).
Proof. exact (eq_refl (@all (_143311 -> _143313 -> A))). Qed.
Lemma lem8082197 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) : (term674 _143310 _143311 _143313 A s clauses) = (term679 _143310 _143311 _143313 A s clauses).
Proof. exact (MK_COMB (@lem8082196 _143311 _143313 A) (@lem8082195 _143310 _143311 _143313 A s clauses)). Qed.
Lemma lem8082198 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) : (term673 _143310 _143311 _143313 A s clauses) = (term679 _143310 _143311 _143313 A s clauses).
Proof. exact (TRANS (@lem8082190 _143310 _143311 _143313 A s clauses) (@lem8082197 _143310 _143311 _143313 A s clauses)). Qed.
Lemma lem8082200 {_143313 : Type'} (P : _143313 -> Prop) : (term680 _143313 P) = (term681 _143313 P).
Proof. exact (@lem18394 _143313 P). Qed.
Lemma lem8082201 {_143310 _143313 : Type'} (s : _143313 -> _143310) (x : _143310) : (term682 _143310 _143313 s x) = (term683 _143310 _143313 s x).
Proof. exact (@lem8082200 _143313 (term297 _143310 _143313 s x)). Qed.
Lemma lem8082202 {_143310 _143313 : Type'} (s : _143313 -> _143310) (a : _143313) (x : _143310) : (term298 _143310 _143313 s x a) = ((s a) = x).
Proof. exact (eq_refl (term298 _143310 _143313 s x a)). Qed.
Lemma lem8082203 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8082205 {_143310 _143313 : Type'} (s : _143313 -> _143310) (a : _143313) (x : _143310) : (term684 _143310 _143313 s x a) = (term685 _143310 _143313 s a x).
Proof. exact (MK_COMB (@lem8082203) (@lem8082202 _143310 _143313 s a x)). Qed.
Lemma lem8082206 {_143310 _143313 : Type'} (s : _143313 -> _143310) (x : _143310) : (term686 _143310 _143313 s x) = (term687 _143310 _143313 s x).
Proof. exact (fun_ext (fun a : _143313 => @lem8082205 _143310 _143313 s a x)). Qed.
Lemma lem8082207 {_143313 : Type'} : (@all _143313) = (@all _143313).
Proof. exact (eq_refl (@all _143313)). Qed.
Lemma lem8082208 {_143310 _143313 : Type'} (s : _143313 -> _143310) (x : _143310) : (term683 _143310 _143313 s x) = (term688 _143310 _143313 s x).
Proof. exact (MK_COMB (@lem8082207 _143313) (@lem8082206 _143310 _143313 s x)). Qed.
Lemma lem8082209 {_143310 _143313 : Type'} (s : _143313 -> _143310) (x : _143310) : (term682 _143310 _143313 s x) = (term688 _143310 _143313 s x).
Proof. exact (TRANS (@lem8082201 _143310 _143313 s x) (@lem8082208 _143310 _143313 s x)). Qed.
Lemma lem8082210 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8082211 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) : (term689 _143310 _143311 _143313 A s clauses) = (term690 _143310 _143311 _143313 A s clauses).
Proof. exact (MK_COMB (@lem8082210) (@lem8082198 _143310 _143311 _143313 A s clauses)). Qed.
Lemma lem8082212 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : (term691 _143310 _143311 _143313 A clauses s x) = (term692 _143310 _143311 _143313 A clauses s x).
Proof. exact (MK_COMB (@lem8082211 _143310 _143311 _143313 A s clauses) (@lem8082209 _143310 _143313 s x)). Qed.
Lemma lem8082213 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : (term693 _143310 _143311 _143313 A clauses s x) = (term691 _143310 _143311 _143313 A clauses s x).
Proof. exact (@lem17045 (term329 _143310 _143311 _143313 A s clauses) (term308 _143310 _143313 s x)). Qed.
Lemma lem8082214 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : (term693 _143310 _143311 _143313 A clauses s x) = (term692 _143310 _143311 _143313 A clauses s x).
Proof. exact (TRANS (@lem8082213 _143310 _143311 _143313 A clauses s x) (@lem8082212 _143310 _143311 _143313 A clauses s x)). Qed.
Lemma lem8082215 {_143310 _143313 : Type'} (P : type805 _143310 _143313) : (term694 _143310 _143313 P) = (term695 _143310 _143313 P).
Proof. exact (@lem18394 (_143313 -> _143310) P). Qed.
Lemma lem8082216 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) : (term338 _143310 _143311 _143313 A clauses x) = (term696 _143310 _143311 _143313 A clauses x).
Proof. exact (@lem8082215 _143310 _143313 (term334 _143310 _143311 _143313 A clauses x)). Qed.
Lemma lem8082217 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : (term697 _143310 _143311 _143313 A clauses x s) = (term332 _143310 _143311 _143313 A clauses s x).
Proof. exact (eq_refl (term697 _143310 _143311 _143313 A clauses x s)). Qed.
Lemma lem8082218 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8082219 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : (term698 _143310 _143311 _143313 A clauses x s) = (term693 _143310 _143311 _143313 A clauses s x).
Proof. exact (MK_COMB (@lem8082218) (@lem8082217 _143310 _143311 _143313 A clauses s x)). Qed.
Lemma lem8082220 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (s : _143313 -> _143310) (x : _143310) : (term698 _143310 _143311 _143313 A clauses x s) = (term692 _143310 _143311 _143313 A clauses s x).
Proof. exact (TRANS (@lem8082219 _143310 _143311 _143313 A clauses s x) (@lem8082214 _143310 _143311 _143313 A clauses s x)). Qed.
Lemma lem8082221 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) : (term699 _143310 _143311 _143313 A clauses x) = (term700 _143310 _143311 _143313 A clauses x).
Proof. exact (fun_ext (fun s : _143313 -> _143310 => @lem8082220 _143310 _143311 _143313 A clauses s x)). Qed.
Lemma lem8082222 {_143310 _143313 : Type'} : (@all (_143313 -> _143310)) = (@all (_143313 -> _143310)).
Proof. exact (eq_refl (@all (_143313 -> _143310))). Qed.
Lemma lem8082223 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) : (term696 _143310 _143311 _143313 A clauses x) = (term701 _143310 _143311 _143313 A clauses x).
Proof. exact (MK_COMB (@lem8082222 _143310 _143313) (@lem8082221 _143310 _143311 _143313 A clauses x)). Qed.
Lemma lem8082224 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) : (term338 _143310 _143311 _143313 A clauses x) = (term701 _143310 _143311 _143313 A clauses x).
Proof. exact (TRANS (@lem8082216 _143310 _143311 _143313 A clauses x) (@lem8082223 _143310 _143311 _143313 A clauses x)). Qed.
Lemma lem8082225 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : ((@CASEWISE A _143313 _143310 _143311 clauses c x) = _106906) = ((@CASEWISE A _143313 _143310 _143311 clauses c x) = _106906).
Proof. exact (eq_refl ((@CASEWISE A _143313 _143310 _143311 clauses c x) = _106906)). Qed.
Lemma lem8082226 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8082227 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) : (term339 _143310 _143311 _143313 A clauses x) = (term702 _143310 _143311 _143313 A clauses x).
Proof. exact (MK_COMB (@lem8082226) (@lem8082224 _143310 _143311 _143313 A clauses x)). Qed.
Lemma lem8082228 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term340 _143310 _143311 _143313 A clauses c x _106906) = (term703 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (MK_COMB (@lem8082227 _143310 _143311 _143313 A clauses x) (@lem8082225 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082229 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8082230 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term294 _143310 _143311 _143313 A clauses x c) = (term294 _143310 _143311 _143313 A clauses x c).
Proof. exact (MK_COMB (@lem8082229) (@lem8082187 _143310 _143311 _143313 A clauses x c)). Qed.
Lemma lem8082231 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term341 _143310 _143311 _143313 A clauses c x _106906) = (term704 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (MK_COMB (@lem8082230 _143310 _143311 _143313 A clauses x c) (@lem8082228 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082232 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term342 _143310 _143311 _143313 A clauses c _106906) = (term705 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (fun_ext (fun x : _143310 => @lem8082231 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082233 {_143310 : Type'} : (@all _143310) = (@all _143310).
Proof. exact (eq_refl (@all _143310)). Qed.
Lemma lem8082234 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term343 _143310 _143311 _143313 A clauses c _106906) = (term706 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (MK_COMB (@lem8082233 _143310) (@lem8082232 _143310 _143311 _143313 A clauses c _106906)). Qed.
Lemma lem8082235 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term344 _143310 _143311 _143313 A clauses _106906) = (term707 _143310 _143311 _143313 A clauses _106906).
Proof. exact (fun_ext (fun c : _143311 => @lem8082234 _143310 _143311 _143313 A clauses c _106906)). Qed.
Lemma lem8082236 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8082237 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term345 _143310 _143311 _143313 A clauses _106906) = (term708 _143310 _143311 _143313 A clauses _106906).
Proof. exact (MK_COMB (@lem8082236 _143311) (@lem8082235 _143310 _143311 _143313 A clauses _106906)). Qed.
Lemma lem8082238 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term346 _143310 _143311 _143313 A _106906) = (term709 _143310 _143311 _143313 A _106906).
Proof. exact (fun_ext (fun clauses : type1637 _143310 _143311 _143313 A => @lem8082237 _143310 _143311 _143313 A clauses _106906)). Qed.
Lemma lem8082239 {_143310 _143311 _143313 A : Type'} : (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A)))) = (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))))). Qed.
Lemma lem8082240 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term347 _143310 _143311 _143313 A _106906) = (term710 _143310 _143311 _143313 A _106906).
Proof. exact (MK_COMB (@lem8082239 _143310 _143311 _143313 A) (@lem8082238 _143310 _143311 _143313 A _106906)). Qed.
Lemma lem8082455 {A : Type'} (P : Prop) (Q : A -> Prop) : (term267 A P Q) = (term266 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem8082456 {_143313 : Type'} (P : Prop) (Q : _143313 -> Prop) : (term267 _143313 P Q) = (term266 _143313 P Q).
Proof. exact (@lem8082455 _143313 P Q). Qed.
Lemma lem8082457 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term269 _143310 _143311 _143313 A s clauses x t c) = (term268 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (@lem8082456 _143313 (term270 _143310 _143311 _143313 A s t clauses) (term271 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8082458 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) (a : _143313) : (term272 _143310 _143311 _143313 A s clauses x t c a) = (term273 _143310 _143311 _143313 A s clauses x t c a).
Proof. exact (eq_refl (term272 _143310 _143311 _143313 A s clauses x t c a)). Qed.
Lemma lem8082459 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term282 _143310 _143311 _143313 A s clauses x t c) = (term271 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8082458 _143310 _143311 _143313 A s clauses x t c a)). Qed.
Lemma lem8082460 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8082461 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term283 _143310 _143311 _143313 A s clauses x t c) = (term284 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (MK_COMB (@lem8082460 _143313) (@lem8082459 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8082462 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) : (term274 _143310 _143311 _143313 A s t clauses) = (term274 _143310 _143311 _143313 A s t clauses).
Proof. exact (eq_refl (term274 _143310 _143311 _143313 A s t clauses)). Qed.
Lemma lem8082463 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term269 _143310 _143311 _143313 A s clauses x t c) = (term285 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (MK_COMB (@lem8082462 _143310 _143311 _143313 A s t clauses) (@lem8082461 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8082464 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8082465 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term711 _143310 _143311 _143313 A s clauses x t c) = (term712 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (MK_COMB (@lem8082464) (@lem8082463 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8082466 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) (a : _143313) : (term272 _143310 _143311 _143313 A s clauses x t c a) = (term273 _143310 _143311 _143313 A s clauses x t c a).
Proof. exact (eq_refl (term272 _143310 _143311 _143313 A s clauses x t c a)). Qed.
Lemma lem8082467 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) : (term274 _143310 _143311 _143313 A s t clauses) = (term274 _143310 _143311 _143313 A s t clauses).
Proof. exact (eq_refl (term274 _143310 _143311 _143313 A s t clauses)). Qed.
Lemma lem8082468 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) (a : _143313) : (term275 _143310 _143311 _143313 A s clauses x t c a) = (term276 _143310 _143311 _143313 A s clauses x t c a).
Proof. exact (MK_COMB (@lem8082467 _143310 _143311 _143313 A s t clauses) (@lem8082466 _143310 _143311 _143313 A s clauses x t c a)). Qed.
Lemma lem8082469 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term277 _143310 _143311 _143313 A s clauses x t c) = (term278 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8082468 _143310 _143311 _143313 A s clauses x t c a)). Qed.
Lemma lem8082470 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8082471 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term268 _143310 _143311 _143313 A s clauses x t c) = (term279 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (MK_COMB (@lem8082470 _143313) (@lem8082469 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8082472 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : ((term269 _143310 _143311 _143313 A s clauses x t c) = (term268 _143310 _143311 _143313 A s clauses x t c)) = ((term285 _143310 _143311 _143313 A s clauses x t c) = (term279 _143310 _143311 _143313 A s clauses x t c)).
Proof. exact (MK_COMB (@lem8082465 _143310 _143311 _143313 A s clauses x t c) (@lem8082471 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8082473 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term285 _143310 _143311 _143313 A s clauses x t c) = (term279 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (EQ_MP (@lem8082472 _143310 _143311 _143313 A s clauses x t c) (@lem8082457 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8082474 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term287 _143310 _143311 _143313 A s clauses x c) = (term286 _143310 _143311 _143313 A s clauses x c).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 A => @lem8082473 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8082475 {_143311 _143313 A : Type'} : (@ex (_143311 -> _143313 -> A)) = (@ex (_143311 -> _143313 -> A)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> A))). Qed.
Lemma lem8082476 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term289 _143310 _143311 _143313 A s clauses x c) = (term288 _143310 _143311 _143313 A s clauses x c).
Proof. exact (MK_COMB (@lem8082475 _143311 _143313 A) (@lem8082474 _143310 _143311 _143313 A s clauses x c)). Qed.
Lemma lem8082477 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term291 _143310 _143311 _143313 A clauses x c) = (term290 _143310 _143311 _143313 A clauses x c).
Proof. exact (fun_ext (fun s : _143313 -> _143310 => @lem8082476 _143310 _143311 _143313 A s clauses x c)). Qed.
Lemma lem8082478 {_143310 _143313 : Type'} : (@ex (_143313 -> _143310)) = (@ex (_143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143313 -> _143310))). Qed.
Lemma lem8082479 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term293 _143310 _143311 _143313 A clauses x c) = (term292 _143310 _143311 _143313 A clauses x c).
Proof. exact (MK_COMB (@lem8082478 _143310 _143313) (@lem8082477 _143310 _143311 _143313 A clauses x c)). Qed.
Lemma lem8082480 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8082481 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term294 _143310 _143311 _143313 A clauses x c) = (term136 _143310 _143311 _143313 A clauses x c).
Proof. exact (MK_COMB (@lem8082480) (@lem8082479 _143310 _143311 _143313 A clauses x c)). Qed.
Lemma lem8082482 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term703 _143310 _143311 _143313 A clauses c x _106906) = (term703 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (eq_refl (term703 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082483 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term704 _143310 _143311 _143313 A clauses c x _106906) = (term713 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (MK_COMB (@lem8082481 _143310 _143311 _143313 A clauses x c) (@lem8082482 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082485 {A : Type'} (P : A -> Prop) (Q : Prop) : (term714 A P Q) = (term715 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8082486 {_143310 _143313 : Type'} (P : type805 _143310 _143313) (Q : Prop) : (term716 _143310 _143313 P Q) = (term717 _143310 _143313 P Q).
Proof. exact (@lem8082485 (_143313 -> _143310) P Q). Qed.
Lemma lem8082487 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term718 _143310 _143311 _143313 A clauses c x _106906) = (term719 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (@lem8082486 _143310 _143313 (term290 _143310 _143311 _143313 A clauses x c) (term703 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082488 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term720 _143310 _143311 _143313 A clauses x c s) = (term288 _143310 _143311 _143313 A s clauses x c).
Proof. exact (eq_refl (term720 _143310 _143311 _143313 A clauses x c s)). Qed.
Lemma lem8082489 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term721 _143310 _143311 _143313 A clauses x c) = (term290 _143310 _143311 _143313 A clauses x c).
Proof. exact (fun_ext (fun s : _143313 -> _143310 => @lem8082488 _143310 _143311 _143313 A s clauses x c)). Qed.
Lemma lem8082490 {_143310 _143313 : Type'} : (@ex (_143313 -> _143310)) = (@ex (_143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143313 -> _143310))). Qed.
Lemma lem8082491 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term722 _143310 _143311 _143313 A clauses x c) = (term292 _143310 _143311 _143313 A clauses x c).
Proof. exact (MK_COMB (@lem8082490 _143310 _143313) (@lem8082489 _143310 _143311 _143313 A clauses x c)). Qed.
Lemma lem8082492 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8082493 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term723 _143310 _143311 _143313 A clauses x c) = (term136 _143310 _143311 _143313 A clauses x c).
Proof. exact (MK_COMB (@lem8082492) (@lem8082491 _143310 _143311 _143313 A clauses x c)). Qed.
Lemma lem8082494 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term703 _143310 _143311 _143313 A clauses c x _106906) = (term703 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (eq_refl (term703 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082495 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term718 _143310 _143311 _143313 A clauses c x _106906) = (term713 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (MK_COMB (@lem8082493 _143310 _143311 _143313 A clauses x c) (@lem8082494 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082496 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8082497 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term724 _143310 _143311 _143313 A clauses c x _106906) = (term725 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (MK_COMB (@lem8082496) (@lem8082495 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082498 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term720 _143310 _143311 _143313 A clauses x c s) = (term288 _143310 _143311 _143313 A s clauses x c).
Proof. exact (eq_refl (term720 _143310 _143311 _143313 A clauses x c s)). Qed.
Lemma lem8082499 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8082500 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term726 _143310 _143311 _143313 A clauses x c s) = (term727 _143310 _143311 _143313 A s clauses x c).
Proof. exact (MK_COMB (@lem8082499) (@lem8082498 _143310 _143311 _143313 A s clauses x c)). Qed.
Lemma lem8082501 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term703 _143310 _143311 _143313 A clauses c x _106906) = (term703 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (eq_refl (term703 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082502 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term728 _143310 _143311 _143313 A s clauses c x _106906) = (term729 _143310 _143311 _143313 A s clauses c x _106906).
Proof. exact (MK_COMB (@lem8082500 _143310 _143311 _143313 A s clauses x c) (@lem8082501 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082503 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term730 _143310 _143311 _143313 A clauses c x _106906) = (term731 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (fun_ext (fun s : _143313 -> _143310 => @lem8082502 _143310 _143311 _143313 A s clauses c x _106906)). Qed.
Lemma lem8082504 {_143310 _143313 : Type'} : (@ex (_143313 -> _143310)) = (@ex (_143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143313 -> _143310))). Qed.
Lemma lem8082505 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term719 _143310 _143311 _143313 A clauses c x _106906) = (term732 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (MK_COMB (@lem8082504 _143310 _143313) (@lem8082503 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082506 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : ((term718 _143310 _143311 _143313 A clauses c x _106906) = (term719 _143310 _143311 _143313 A clauses c x _106906)) = ((term713 _143310 _143311 _143313 A clauses c x _106906) = (term732 _143310 _143311 _143313 A clauses c x _106906)).
Proof. exact (MK_COMB (@lem8082497 _143310 _143311 _143313 A clauses c x _106906) (@lem8082505 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082507 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term713 _143310 _143311 _143313 A clauses c x _106906) = (term732 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (EQ_MP (@lem8082506 _143310 _143311 _143313 A clauses c x _106906) (@lem8082487 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082509 {A : Type'} (P : A -> Prop) (Q : Prop) : (term714 A P Q) = (term715 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8082510 {_143311 _143313 A : Type'} (P : type443 _143311 _143313 A) (Q : Prop) : (term733 _143311 _143313 A P Q) = (term734 _143311 _143313 A P Q).
Proof. exact (@lem8082509 (type1412 _143311 _143313 A) P Q). Qed.
Lemma lem8082511 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term735 _143310 _143311 _143313 A s clauses c x _106906) = (term736 _143310 _143311 _143313 A s clauses c x _106906).
Proof. exact (@lem8082510 _143311 _143313 A (term286 _143310 _143311 _143313 A s clauses x c) (term703 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082512 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term737 _143310 _143311 _143313 A s clauses x c t) = (term279 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (eq_refl (term737 _143310 _143311 _143313 A s clauses x c t)). Qed.
Lemma lem8082513 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term738 _143310 _143311 _143313 A s clauses x c) = (term286 _143310 _143311 _143313 A s clauses x c).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 A => @lem8082512 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8082514 {_143311 _143313 A : Type'} : (@ex (_143311 -> _143313 -> A)) = (@ex (_143311 -> _143313 -> A)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> A))). Qed.
Lemma lem8082515 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term739 _143310 _143311 _143313 A s clauses x c) = (term288 _143310 _143311 _143313 A s clauses x c).
Proof. exact (MK_COMB (@lem8082514 _143311 _143313 A) (@lem8082513 _143310 _143311 _143313 A s clauses x c)). Qed.
Lemma lem8082516 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8082517 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (c : _143311) : (term740 _143310 _143311 _143313 A s clauses x c) = (term727 _143310 _143311 _143313 A s clauses x c).
Proof. exact (MK_COMB (@lem8082516) (@lem8082515 _143310 _143311 _143313 A s clauses x c)). Qed.
Lemma lem8082518 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term703 _143310 _143311 _143313 A clauses c x _106906) = (term703 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (eq_refl (term703 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082519 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term735 _143310 _143311 _143313 A s clauses c x _106906) = (term729 _143310 _143311 _143313 A s clauses c x _106906).
Proof. exact (MK_COMB (@lem8082517 _143310 _143311 _143313 A s clauses x c) (@lem8082518 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082520 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8082521 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term741 _143310 _143311 _143313 A s clauses c x _106906) = (term742 _143310 _143311 _143313 A s clauses c x _106906).
Proof. exact (MK_COMB (@lem8082520) (@lem8082519 _143310 _143311 _143313 A s clauses c x _106906)). Qed.
Lemma lem8082522 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term737 _143310 _143311 _143313 A s clauses x c t) = (term279 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (eq_refl (term737 _143310 _143311 _143313 A s clauses x c t)). Qed.
Lemma lem8082523 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8082524 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term743 _143310 _143311 _143313 A s clauses x c t) = (term744 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (MK_COMB (@lem8082523) (@lem8082522 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8082525 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term703 _143310 _143311 _143313 A clauses c x _106906) = (term703 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (eq_refl (term703 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082526 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term745 _143310 _143311 _143313 A s t clauses c x _106906) = (term746 _143310 _143311 _143313 A s t clauses c x _106906).
Proof. exact (MK_COMB (@lem8082524 _143310 _143311 _143313 A s clauses x t c) (@lem8082525 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082527 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term747 _143310 _143311 _143313 A s clauses c x _106906) = (term748 _143310 _143311 _143313 A s clauses c x _106906).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 A => @lem8082526 _143310 _143311 _143313 A s t clauses c x _106906)). Qed.
Lemma lem8082528 {_143311 _143313 A : Type'} : (@ex (_143311 -> _143313 -> A)) = (@ex (_143311 -> _143313 -> A)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> A))). Qed.
Lemma lem8082529 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term736 _143310 _143311 _143313 A s clauses c x _106906) = (term749 _143310 _143311 _143313 A s clauses c x _106906).
Proof. exact (MK_COMB (@lem8082528 _143311 _143313 A) (@lem8082527 _143310 _143311 _143313 A s clauses c x _106906)). Qed.
Lemma lem8082530 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : ((term735 _143310 _143311 _143313 A s clauses c x _106906) = (term736 _143310 _143311 _143313 A s clauses c x _106906)) = ((term729 _143310 _143311 _143313 A s clauses c x _106906) = (term749 _143310 _143311 _143313 A s clauses c x _106906)).
Proof. exact (MK_COMB (@lem8082521 _143310 _143311 _143313 A s clauses c x _106906) (@lem8082529 _143310 _143311 _143313 A s clauses c x _106906)). Qed.
Lemma lem8082531 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term729 _143310 _143311 _143313 A s clauses c x _106906) = (term749 _143310 _143311 _143313 A s clauses c x _106906).
Proof. exact (EQ_MP (@lem8082530 _143310 _143311 _143313 A s clauses c x _106906) (@lem8082511 _143310 _143311 _143313 A s clauses c x _106906)). Qed.
Lemma lem8082533 {A : Type'} (P : A -> Prop) (Q : Prop) : (term714 A P Q) = (term715 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8082534 {_143313 : Type'} (P : _143313 -> Prop) (Q : Prop) : (term714 _143313 P Q) = (term715 _143313 P Q).
Proof. exact (@lem8082533 _143313 P Q). Qed.
Lemma lem8082535 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term750 _143310 _143311 _143313 A s t clauses c x _106906) = (term751 _143310 _143311 _143313 A s t clauses c x _106906).
Proof. exact (@lem8082534 _143313 (term278 _143310 _143311 _143313 A s clauses x t c) (term703 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082536 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) (a : _143313) : (term752 _143310 _143311 _143313 A s clauses x t c a) = (term276 _143310 _143311 _143313 A s clauses x t c a).
Proof. exact (eq_refl (term752 _143310 _143311 _143313 A s clauses x t c a)). Qed.
Lemma lem8082537 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term753 _143310 _143311 _143313 A s clauses x t c) = (term278 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8082536 _143310 _143311 _143313 A s clauses x t c a)). Qed.
Lemma lem8082538 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8082539 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term754 _143310 _143311 _143313 A s clauses x t c) = (term279 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (MK_COMB (@lem8082538 _143313) (@lem8082537 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8082540 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8082541 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) : (term755 _143310 _143311 _143313 A s clauses x t c) = (term744 _143310 _143311 _143313 A s clauses x t c).
Proof. exact (MK_COMB (@lem8082540) (@lem8082539 _143310 _143311 _143313 A s clauses x t c)). Qed.
Lemma lem8082542 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term703 _143310 _143311 _143313 A clauses c x _106906) = (term703 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (eq_refl (term703 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082543 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term750 _143310 _143311 _143313 A s t clauses c x _106906) = (term746 _143310 _143311 _143313 A s t clauses c x _106906).
Proof. exact (MK_COMB (@lem8082541 _143310 _143311 _143313 A s clauses x t c) (@lem8082542 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082544 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8082545 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term756 _143310 _143311 _143313 A s t clauses c x _106906) = (term757 _143310 _143311 _143313 A s t clauses c x _106906).
Proof. exact (MK_COMB (@lem8082544) (@lem8082543 _143310 _143311 _143313 A s t clauses c x _106906)). Qed.
Lemma lem8082546 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) (a : _143313) : (term752 _143310 _143311 _143313 A s clauses x t c a) = (term276 _143310 _143311 _143313 A s clauses x t c a).
Proof. exact (eq_refl (term752 _143310 _143311 _143313 A s clauses x t c a)). Qed.
Lemma lem8082547 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8082548 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (x : _143310) (t : type1412 _143311 _143313 A) (c : _143311) (a : _143313) : (term758 _143310 _143311 _143313 A s clauses x t c a) = (term759 _143310 _143311 _143313 A s clauses x t c a).
Proof. exact (MK_COMB (@lem8082547) (@lem8082546 _143310 _143311 _143313 A s clauses x t c a)). Qed.
Lemma lem8082549 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term703 _143310 _143311 _143313 A clauses c x _106906) = (term703 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (eq_refl (term703 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082550 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 A) (a : _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term760 _143310 _143311 _143313 A s t a clauses c x _106906) = (term761 _143310 _143311 _143313 A s t a clauses c x _106906).
Proof. exact (MK_COMB (@lem8082548 _143310 _143311 _143313 A s clauses x t c a) (@lem8082549 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082551 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term762 _143310 _143311 _143313 A s t clauses c x _106906) = (term763 _143310 _143311 _143313 A s t clauses c x _106906).
Proof. exact (fun_ext (fun a : _143313 => @lem8082550 _143310 _143311 _143313 A s t a clauses c x _106906)). Qed.
Lemma lem8082552 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8082553 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term751 _143310 _143311 _143313 A s t clauses c x _106906) = (term764 _143310 _143311 _143313 A s t clauses c x _106906).
Proof. exact (MK_COMB (@lem8082552 _143313) (@lem8082551 _143310 _143311 _143313 A s t clauses c x _106906)). Qed.
Lemma lem8082554 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : ((term750 _143310 _143311 _143313 A s t clauses c x _106906) = (term751 _143310 _143311 _143313 A s t clauses c x _106906)) = ((term746 _143310 _143311 _143313 A s t clauses c x _106906) = (term764 _143310 _143311 _143313 A s t clauses c x _106906)).
Proof. exact (MK_COMB (@lem8082545 _143310 _143311 _143313 A s t clauses c x _106906) (@lem8082553 _143310 _143311 _143313 A s t clauses c x _106906)). Qed.
Lemma lem8082555 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term746 _143310 _143311 _143313 A s t clauses c x _106906) = (term764 _143310 _143311 _143313 A s t clauses c x _106906).
Proof. exact (EQ_MP (@lem8082554 _143310 _143311 _143313 A s t clauses c x _106906) (@lem8082535 _143310 _143311 _143313 A s t clauses c x _106906)). Qed.
Lemma lem8082556 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term748 _143310 _143311 _143313 A s clauses c x _106906) = (term765 _143310 _143311 _143313 A s clauses c x _106906).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 A => @lem8082555 _143310 _143311 _143313 A s t clauses c x _106906)). Qed.
Lemma lem8082557 {_143311 _143313 A : Type'} : (@ex (_143311 -> _143313 -> A)) = (@ex (_143311 -> _143313 -> A)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> A))). Qed.
Lemma lem8082558 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term749 _143310 _143311 _143313 A s clauses c x _106906) = (term766 _143310 _143311 _143313 A s clauses c x _106906).
Proof. exact (MK_COMB (@lem8082557 _143311 _143313 A) (@lem8082556 _143310 _143311 _143313 A s clauses c x _106906)). Qed.
Lemma lem8082559 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term729 _143310 _143311 _143313 A s clauses c x _106906) = (term766 _143310 _143311 _143313 A s clauses c x _106906).
Proof. exact (TRANS (@lem8082531 _143310 _143311 _143313 A s clauses c x _106906) (@lem8082558 _143310 _143311 _143313 A s clauses c x _106906)). Qed.
Lemma lem8082560 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term731 _143310 _143311 _143313 A clauses c x _106906) = (term767 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (fun_ext (fun s : _143313 -> _143310 => @lem8082559 _143310 _143311 _143313 A s clauses c x _106906)). Qed.
Lemma lem8082561 {_143310 _143313 : Type'} : (@ex (_143313 -> _143310)) = (@ex (_143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143313 -> _143310))). Qed.
Lemma lem8082562 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term732 _143310 _143311 _143313 A clauses c x _106906) = (term768 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (MK_COMB (@lem8082561 _143310 _143313) (@lem8082560 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082563 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term713 _143310 _143311 _143313 A clauses c x _106906) = (term768 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (TRANS (@lem8082507 _143310 _143311 _143313 A clauses c x _106906) (@lem8082562 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082564 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term704 _143310 _143311 _143313 A clauses c x _106906) = (term768 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (TRANS (@lem8082483 _143310 _143311 _143313 A clauses c x _106906) (@lem8082563 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082565 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term705 _143310 _143311 _143313 A clauses c _106906) = (term769 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (fun_ext (fun x : _143310 => @lem8082564 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082566 {_143310 : Type'} : (@all _143310) = (@all _143310).
Proof. exact (eq_refl (@all _143310)). Qed.
Lemma lem8082567 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term706 _143310 _143311 _143313 A clauses c _106906) = (term770 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (MK_COMB (@lem8082566 _143310) (@lem8082565 _143310 _143311 _143313 A clauses c _106906)). Qed.
Lemma lem8082569 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8082570 {_143310 _143313 : Type'} (P : type1372 _143310 _143313) : (term773 _143310 _143313 P) = (term774 _143310 _143313 P).
Proof. exact (@lem8082569 _143310 (_143313 -> _143310) P). Qed.
Lemma lem8082571 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term775 _143310 _143311 _143313 A clauses c _106906) = (term776 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (@lem8082570 _143310 _143313 (term777 _143310 _143311 _143313 A clauses c _106906)). Qed.
Lemma lem8082572 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term778 _143310 _143311 _143313 A clauses c _106906 x) = (term767 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (eq_refl (term778 _143310 _143311 _143313 A clauses c _106906 x)). Qed.
Lemma lem8082573 {_143310 _143313 : Type'} (s : _143313 -> _143310) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8082574 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) (s : _143313 -> _143310) : (term779 _143310 _143311 _143313 A clauses c _106906 x s) = (term780 _143310 _143311 _143313 A clauses c x _106906 s).
Proof. exact (MK_COMB (@lem8082572 _143310 _143311 _143313 A clauses c x _106906) (@lem8082573 _143310 _143313 s)). Qed.
Lemma lem8082575 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term780 _143310 _143311 _143313 A clauses c x _106906 s) = (term766 _143310 _143311 _143313 A s clauses c x _106906).
Proof. exact (eq_refl (term780 _143310 _143311 _143313 A clauses c x _106906 s)). Qed.
Lemma lem8082576 {_143310 _143311 _143313 A : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term779 _143310 _143311 _143313 A clauses c _106906 x s) = (term766 _143310 _143311 _143313 A s clauses c x _106906).
Proof. exact (TRANS (@lem8082574 _143310 _143311 _143313 A clauses c x _106906 s) (@lem8082575 _143310 _143311 _143313 A s clauses c x _106906)). Qed.
Lemma lem8082577 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term781 _143310 _143311 _143313 A clauses c _106906 x) = (term767 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (fun_ext (fun s : _143313 -> _143310 => @lem8082576 _143310 _143311 _143313 A s clauses c x _106906)). Qed.
Lemma lem8082578 {_143310 _143313 : Type'} : (@ex (_143313 -> _143310)) = (@ex (_143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143313 -> _143310))). Qed.
Lemma lem8082579 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term782 _143310 _143311 _143313 A clauses c _106906 x) = (term768 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (MK_COMB (@lem8082578 _143310 _143313) (@lem8082577 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082580 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term783 _143310 _143311 _143313 A clauses c _106906) = (term769 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (fun_ext (fun x : _143310 => @lem8082579 _143310 _143311 _143313 A clauses c x _106906)). Qed.
Lemma lem8082581 {_143310 : Type'} : (@all _143310) = (@all _143310).
Proof. exact (eq_refl (@all _143310)). Qed.
Lemma lem8082582 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term775 _143310 _143311 _143313 A clauses c _106906) = (term770 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (MK_COMB (@lem8082581 _143310) (@lem8082580 _143310 _143311 _143313 A clauses c _106906)). Qed.
Lemma lem8082583 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8082584 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term784 _143310 _143311 _143313 A clauses c _106906) = (term785 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (MK_COMB (@lem8082583) (@lem8082582 _143310 _143311 _143313 A clauses c _106906)). Qed.
Lemma lem8082585 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term778 _143310 _143311 _143313 A clauses c _106906 x) = (term767 _143310 _143311 _143313 A clauses c x _106906).
Proof. exact (eq_refl (term778 _143310 _143311 _143313 A clauses c _106906 x)). Qed.
Lemma lem8082586 {_143310 _143313 : Type'} (s : type1410 _143310 _143313) (x : _143310) : (s x) = (s x).
Proof. exact (eq_refl (s x)). Qed.
Lemma lem8082587 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) (s : type1410 _143310 _143313) (x : _143310) : (term786 _143310 _143311 _143313 A clauses c _106906 s x) = (term787 _143310 _143311 _143313 A clauses c _106906 s x).
Proof. exact (MK_COMB (@lem8082585 _143310 _143311 _143313 A clauses c x _106906) (@lem8082586 _143310 _143313 s x)). Qed.
Lemma lem8082588 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term787 _143310 _143311 _143313 A clauses c _106906 s x) = (term788 _143310 _143311 _143313 A s clauses c x _106906).
Proof. exact (eq_refl (term787 _143310 _143311 _143313 A clauses c _106906 s x)). Qed.
Lemma lem8082589 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term786 _143310 _143311 _143313 A clauses c _106906 s x) = (term788 _143310 _143311 _143313 A s clauses c x _106906).
Proof. exact (TRANS (@lem8082587 _143310 _143311 _143313 A clauses c _106906 s x) (@lem8082588 _143310 _143311 _143313 A s clauses c x _106906)). Qed.
Lemma lem8082590 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term789 _143310 _143311 _143313 A clauses c _106906 s) = (term790 _143310 _143311 _143313 A s clauses c _106906).
Proof. exact (fun_ext (fun x : _143310 => @lem8082589 _143310 _143311 _143313 A s clauses c x _106906)). Qed.
Lemma lem8082591 {_143310 : Type'} : (@all _143310) = (@all _143310).
Proof. exact (eq_refl (@all _143310)). Qed.
Lemma lem8082592 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term791 _143310 _143311 _143313 A clauses c _106906 s) = (term792 _143310 _143311 _143313 A s clauses c _106906).
Proof. exact (MK_COMB (@lem8082591 _143310) (@lem8082590 _143310 _143311 _143313 A s clauses c _106906)). Qed.
Lemma lem8082593 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term793 _143310 _143311 _143313 A clauses c _106906) = (term794 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (fun_ext (fun s : type1410 _143310 _143313 => @lem8082592 _143310 _143311 _143313 A s clauses c _106906)). Qed.
Lemma lem8082594 {_143310 _143313 : Type'} : (@ex (_143310 -> _143313 -> _143310)) = (@ex (_143310 -> _143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143310 -> _143313 -> _143310))). Qed.
Lemma lem8082595 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term776 _143310 _143311 _143313 A clauses c _106906) = (term795 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (MK_COMB (@lem8082594 _143310 _143313) (@lem8082593 _143310 _143311 _143313 A clauses c _106906)). Qed.
Lemma lem8082596 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : ((term775 _143310 _143311 _143313 A clauses c _106906) = (term776 _143310 _143311 _143313 A clauses c _106906)) = ((term770 _143310 _143311 _143313 A clauses c _106906) = (term795 _143310 _143311 _143313 A clauses c _106906)).
Proof. exact (MK_COMB (@lem8082584 _143310 _143311 _143313 A clauses c _106906) (@lem8082595 _143310 _143311 _143313 A clauses c _106906)). Qed.
Lemma lem8082597 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term770 _143310 _143311 _143313 A clauses c _106906) = (term795 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (EQ_MP (@lem8082596 _143310 _143311 _143313 A clauses c _106906) (@lem8082571 _143310 _143311 _143313 A clauses c _106906)). Qed.
Lemma lem8082599 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8082600 {_143310 _143311 _143313 A : Type'} (P : type1370 _143310 _143311 _143313 A) : (term796 _143310 _143311 _143313 A P) = (term797 _143310 _143311 _143313 A P).
Proof. exact (@lem8082599 _143310 (type1412 _143311 _143313 A) P). Qed.
Lemma lem8082601 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term798 _143310 _143311 _143313 A s clauses c _106906) = (term799 _143310 _143311 _143313 A s clauses c _106906).
Proof. exact (@lem8082600 _143310 _143311 _143313 A (term800 _143310 _143311 _143313 A s clauses c _106906)). Qed.
Lemma lem8082602 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term801 _143310 _143311 _143313 A s clauses c _106906 x) = (term802 _143310 _143311 _143313 A s clauses c x _106906).
Proof. exact (eq_refl (term801 _143310 _143311 _143313 A s clauses c _106906 x)). Qed.
Lemma lem8082603 {_143311 _143313 A : Type'} (t : type1412 _143311 _143313 A) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8082604 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) (t : type1412 _143311 _143313 A) : (term803 _143310 _143311 _143313 A s clauses c _106906 x t) = (term804 _143310 _143311 _143313 A s clauses c x _106906 t).
Proof. exact (MK_COMB (@lem8082602 _143310 _143311 _143313 A s clauses c x _106906) (@lem8082603 _143311 _143313 A t)). Qed.
Lemma lem8082605 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term804 _143310 _143311 _143313 A s clauses c x _106906 t) = (term805 _143310 _143311 _143313 A s t clauses c x _106906).
Proof. exact (eq_refl (term804 _143310 _143311 _143313 A s clauses c x _106906 t)). Qed.
Lemma lem8082606 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1412 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term803 _143310 _143311 _143313 A s clauses c _106906 x t) = (term805 _143310 _143311 _143313 A s t clauses c x _106906).
Proof. exact (TRANS (@lem8082604 _143310 _143311 _143313 A s clauses c x _106906 t) (@lem8082605 _143310 _143311 _143313 A s t clauses c x _106906)). Qed.
Lemma lem8082607 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term806 _143310 _143311 _143313 A s clauses c _106906 x) = (term802 _143310 _143311 _143313 A s clauses c x _106906).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 A => @lem8082606 _143310 _143311 _143313 A s t clauses c x _106906)). Qed.
Lemma lem8082608 {_143311 _143313 A : Type'} : (@ex (_143311 -> _143313 -> A)) = (@ex (_143311 -> _143313 -> A)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> A))). Qed.
Lemma lem8082609 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term807 _143310 _143311 _143313 A s clauses c _106906 x) = (term788 _143310 _143311 _143313 A s clauses c x _106906).
Proof. exact (MK_COMB (@lem8082608 _143311 _143313 A) (@lem8082607 _143310 _143311 _143313 A s clauses c x _106906)). Qed.
Lemma lem8082610 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term808 _143310 _143311 _143313 A s clauses c _106906) = (term790 _143310 _143311 _143313 A s clauses c _106906).
Proof. exact (fun_ext (fun x : _143310 => @lem8082609 _143310 _143311 _143313 A s clauses c x _106906)). Qed.
Lemma lem8082611 {_143310 : Type'} : (@all _143310) = (@all _143310).
Proof. exact (eq_refl (@all _143310)). Qed.
Lemma lem8082612 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term798 _143310 _143311 _143313 A s clauses c _106906) = (term792 _143310 _143311 _143313 A s clauses c _106906).
Proof. exact (MK_COMB (@lem8082611 _143310) (@lem8082610 _143310 _143311 _143313 A s clauses c _106906)). Qed.
Lemma lem8082613 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8082614 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term809 _143310 _143311 _143313 A s clauses c _106906) = (term810 _143310 _143311 _143313 A s clauses c _106906).
Proof. exact (MK_COMB (@lem8082613) (@lem8082612 _143310 _143311 _143313 A s clauses c _106906)). Qed.
Lemma lem8082615 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term801 _143310 _143311 _143313 A s clauses c _106906 x) = (term802 _143310 _143311 _143313 A s clauses c x _106906).
Proof. exact (eq_refl (term801 _143310 _143311 _143313 A s clauses c _106906 x)). Qed.
Lemma lem8082616 {_143310 _143311 _143313 A : Type'} (t : type1407 _143310 _143311 _143313 A) (x : _143310) : (t x) = (t x).
Proof. exact (eq_refl (t x)). Qed.
Lemma lem8082617 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) (t : type1407 _143310 _143311 _143313 A) (x : _143310) : (term811 _143310 _143311 _143313 A s clauses c _106906 t x) = (term812 _143310 _143311 _143313 A s clauses c _106906 t x).
Proof. exact (MK_COMB (@lem8082615 _143310 _143311 _143313 A s clauses c x _106906) (@lem8082616 _143310 _143311 _143313 A t x)). Qed.
Lemma lem8082618 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term812 _143310 _143311 _143313 A s clauses c _106906 t x) = (term813 _143310 _143311 _143313 A s t clauses c x _106906).
Proof. exact (eq_refl (term812 _143310 _143311 _143313 A s clauses c _106906 t x)). Qed.
Lemma lem8082619 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term811 _143310 _143311 _143313 A s clauses c _106906 t x) = (term813 _143310 _143311 _143313 A s t clauses c x _106906).
Proof. exact (TRANS (@lem8082617 _143310 _143311 _143313 A s clauses c _106906 t x) (@lem8082618 _143310 _143311 _143313 A s t clauses c x _106906)). Qed.
Lemma lem8082620 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term814 _143310 _143311 _143313 A s clauses c _106906 t) = (term815 _143310 _143311 _143313 A s t clauses c _106906).
Proof. exact (fun_ext (fun x : _143310 => @lem8082619 _143310 _143311 _143313 A s t clauses c x _106906)). Qed.
Lemma lem8082621 {_143310 : Type'} : (@all _143310) = (@all _143310).
Proof. exact (eq_refl (@all _143310)). Qed.
Lemma lem8082622 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term816 _143310 _143311 _143313 A s clauses c _106906 t) = (term817 _143310 _143311 _143313 A s t clauses c _106906).
Proof. exact (MK_COMB (@lem8082621 _143310) (@lem8082620 _143310 _143311 _143313 A s t clauses c _106906)). Qed.
Lemma lem8082623 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term818 _143310 _143311 _143313 A s clauses c _106906) = (term819 _143310 _143311 _143313 A s clauses c _106906).
Proof. exact (fun_ext (fun t : type1407 _143310 _143311 _143313 A => @lem8082622 _143310 _143311 _143313 A s t clauses c _106906)). Qed.
Lemma lem8082624 {_143310 _143311 _143313 A : Type'} : (@ex (_143310 -> _143311 -> _143313 -> A)) = (@ex (_143310 -> _143311 -> _143313 -> A)).
Proof. exact (eq_refl (@ex (_143310 -> _143311 -> _143313 -> A))). Qed.
Lemma lem8082625 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term799 _143310 _143311 _143313 A s clauses c _106906) = (term820 _143310 _143311 _143313 A s clauses c _106906).
Proof. exact (MK_COMB (@lem8082624 _143310 _143311 _143313 A) (@lem8082623 _143310 _143311 _143313 A s clauses c _106906)). Qed.
Lemma lem8082626 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : ((term798 _143310 _143311 _143313 A s clauses c _106906) = (term799 _143310 _143311 _143313 A s clauses c _106906)) = ((term792 _143310 _143311 _143313 A s clauses c _106906) = (term820 _143310 _143311 _143313 A s clauses c _106906)).
Proof. exact (MK_COMB (@lem8082614 _143310 _143311 _143313 A s clauses c _106906) (@lem8082625 _143310 _143311 _143313 A s clauses c _106906)). Qed.
Lemma lem8082627 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term792 _143310 _143311 _143313 A s clauses c _106906) = (term820 _143310 _143311 _143313 A s clauses c _106906).
Proof. exact (EQ_MP (@lem8082626 _143310 _143311 _143313 A s clauses c _106906) (@lem8082601 _143310 _143311 _143313 A s clauses c _106906)). Qed.
Lemma lem8082629 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8082630 {_143310 _143313 : Type'} (P : type1413 _143310 _143313) : (term771 _143310 _143313 P) = (term772 _143310 _143313 P).
Proof. exact (@lem8082629 _143310 _143313 P). Qed.
Lemma lem8082631 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term821 _143310 _143311 _143313 A s t clauses c _106906) = (term822 _143310 _143311 _143313 A s t clauses c _106906).
Proof. exact (@lem8082630 _143310 _143313 (term823 _143310 _143311 _143313 A s t clauses c _106906)). Qed.
Lemma lem8082632 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term824 _143310 _143311 _143313 A s t clauses c _106906 x) = (term825 _143310 _143311 _143313 A s t clauses c x _106906).
Proof. exact (eq_refl (term824 _143310 _143311 _143313 A s t clauses c _106906 x)). Qed.
Lemma lem8082633 {_143313 : Type'} (a : _143313) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8082634 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) (a : _143313) : (term826 _143310 _143311 _143313 A s t clauses c _106906 x a) = (term827 _143310 _143311 _143313 A s t clauses c x _106906 a).
Proof. exact (MK_COMB (@lem8082632 _143310 _143311 _143313 A s t clauses c x _106906) (@lem8082633 _143313 a)). Qed.
Lemma lem8082635 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (a : _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term827 _143310 _143311 _143313 A s t clauses c x _106906 a) = (term828 _143310 _143311 _143313 A s t a clauses c x _106906).
Proof. exact (eq_refl (term827 _143310 _143311 _143313 A s t clauses c x _106906 a)). Qed.
Lemma lem8082636 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (a : _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term826 _143310 _143311 _143313 A s t clauses c _106906 x a) = (term828 _143310 _143311 _143313 A s t a clauses c x _106906).
Proof. exact (TRANS (@lem8082634 _143310 _143311 _143313 A s t clauses c x _106906 a) (@lem8082635 _143310 _143311 _143313 A s t a clauses c x _106906)). Qed.
Lemma lem8082637 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term829 _143310 _143311 _143313 A s t clauses c _106906 x) = (term825 _143310 _143311 _143313 A s t clauses c x _106906).
Proof. exact (fun_ext (fun a : _143313 => @lem8082636 _143310 _143311 _143313 A s t a clauses c x _106906)). Qed.
Lemma lem8082638 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8082639 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term830 _143310 _143311 _143313 A s t clauses c _106906 x) = (term813 _143310 _143311 _143313 A s t clauses c x _106906).
Proof. exact (MK_COMB (@lem8082638 _143313) (@lem8082637 _143310 _143311 _143313 A s t clauses c x _106906)). Qed.
Lemma lem8082640 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term831 _143310 _143311 _143313 A s t clauses c _106906) = (term815 _143310 _143311 _143313 A s t clauses c _106906).
Proof. exact (fun_ext (fun x : _143310 => @lem8082639 _143310 _143311 _143313 A s t clauses c x _106906)). Qed.
Lemma lem8082641 {_143310 : Type'} : (@all _143310) = (@all _143310).
Proof. exact (eq_refl (@all _143310)). Qed.
Lemma lem8082642 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term821 _143310 _143311 _143313 A s t clauses c _106906) = (term817 _143310 _143311 _143313 A s t clauses c _106906).
Proof. exact (MK_COMB (@lem8082641 _143310) (@lem8082640 _143310 _143311 _143313 A s t clauses c _106906)). Qed.
Lemma lem8082643 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8082644 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term832 _143310 _143311 _143313 A s t clauses c _106906) = (term833 _143310 _143311 _143313 A s t clauses c _106906).
Proof. exact (MK_COMB (@lem8082643) (@lem8082642 _143310 _143311 _143313 A s t clauses c _106906)). Qed.
Lemma lem8082645 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term824 _143310 _143311 _143313 A s t clauses c _106906 x) = (term825 _143310 _143311 _143313 A s t clauses c x _106906).
Proof. exact (eq_refl (term824 _143310 _143311 _143313 A s t clauses c _106906 x)). Qed.
Lemma lem8082646 {_143310 _143313 : Type'} (a : _143310 -> _143313) (x : _143310) : (a x) = (a x).
Proof. exact (eq_refl (a x)). Qed.
Lemma lem8082647 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) (a : _143310 -> _143313) (x : _143310) : (term834 _143310 _143311 _143313 A s t clauses c _106906 a x) = (term835 _143310 _143311 _143313 A s t clauses c _106906 a x).
Proof. exact (MK_COMB (@lem8082645 _143310 _143311 _143313 A s t clauses c x _106906) (@lem8082646 _143310 _143313 a x)). Qed.
Lemma lem8082648 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (a : _143310 -> _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term835 _143310 _143311 _143313 A s t clauses c _106906 a x) = (term836 _143310 _143311 _143313 A s t a clauses c x _106906).
Proof. exact (eq_refl (term835 _143310 _143311 _143313 A s t clauses c _106906 a x)). Qed.
Lemma lem8082649 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (a : _143310 -> _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (x : _143310) (_106906 : A) : (term834 _143310 _143311 _143313 A s t clauses c _106906 a x) = (term836 _143310 _143311 _143313 A s t a clauses c x _106906).
Proof. exact (TRANS (@lem8082647 _143310 _143311 _143313 A s t clauses c _106906 a x) (@lem8082648 _143310 _143311 _143313 A s t a clauses c x _106906)). Qed.
Lemma lem8082650 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (a : _143310 -> _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term837 _143310 _143311 _143313 A s t clauses c _106906 a) = (term838 _143310 _143311 _143313 A s t a clauses c _106906).
Proof. exact (fun_ext (fun x : _143310 => @lem8082649 _143310 _143311 _143313 A s t a clauses c x _106906)). Qed.
Lemma lem8082651 {_143310 : Type'} : (@all _143310) = (@all _143310).
Proof. exact (eq_refl (@all _143310)). Qed.
Lemma lem8082652 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (a : _143310 -> _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term839 _143310 _143311 _143313 A s t clauses c _106906 a) = (term840 _143310 _143311 _143313 A s t a clauses c _106906).
Proof. exact (MK_COMB (@lem8082651 _143310) (@lem8082650 _143310 _143311 _143313 A s t a clauses c _106906)). Qed.
Lemma lem8082653 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term841 _143310 _143311 _143313 A s t clauses c _106906) = (term842 _143310 _143311 _143313 A s t clauses c _106906).
Proof. exact (fun_ext (fun a : _143310 -> _143313 => @lem8082652 _143310 _143311 _143313 A s t a clauses c _106906)). Qed.
Lemma lem8082654 {_143310 _143313 : Type'} : (@ex (_143310 -> _143313)) = (@ex (_143310 -> _143313)).
Proof. exact (eq_refl (@ex (_143310 -> _143313))). Qed.
Lemma lem8082655 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term822 _143310 _143311 _143313 A s t clauses c _106906) = (term843 _143310 _143311 _143313 A s t clauses c _106906).
Proof. exact (MK_COMB (@lem8082654 _143310 _143313) (@lem8082653 _143310 _143311 _143313 A s t clauses c _106906)). Qed.
Lemma lem8082656 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : ((term821 _143310 _143311 _143313 A s t clauses c _106906) = (term822 _143310 _143311 _143313 A s t clauses c _106906)) = ((term817 _143310 _143311 _143313 A s t clauses c _106906) = (term843 _143310 _143311 _143313 A s t clauses c _106906)).
Proof. exact (MK_COMB (@lem8082644 _143310 _143311 _143313 A s t clauses c _106906) (@lem8082655 _143310 _143311 _143313 A s t clauses c _106906)). Qed.
Lemma lem8082657 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term817 _143310 _143311 _143313 A s t clauses c _106906) = (term843 _143310 _143311 _143313 A s t clauses c _106906).
Proof. exact (EQ_MP (@lem8082656 _143310 _143311 _143313 A s t clauses c _106906) (@lem8082631 _143310 _143311 _143313 A s t clauses c _106906)). Qed.
Lemma lem8082658 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term819 _143310 _143311 _143313 A s clauses c _106906) = (term844 _143310 _143311 _143313 A s clauses c _106906).
Proof. exact (fun_ext (fun t : type1407 _143310 _143311 _143313 A => @lem8082657 _143310 _143311 _143313 A s t clauses c _106906)). Qed.
Lemma lem8082659 {_143310 _143311 _143313 A : Type'} : (@ex (_143310 -> _143311 -> _143313 -> A)) = (@ex (_143310 -> _143311 -> _143313 -> A)).
Proof. exact (eq_refl (@ex (_143310 -> _143311 -> _143313 -> A))). Qed.
Lemma lem8082660 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term820 _143310 _143311 _143313 A s clauses c _106906) = (term845 _143310 _143311 _143313 A s clauses c _106906).
Proof. exact (MK_COMB (@lem8082659 _143310 _143311 _143313 A) (@lem8082658 _143310 _143311 _143313 A s clauses c _106906)). Qed.
Lemma lem8082661 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term792 _143310 _143311 _143313 A s clauses c _106906) = (term845 _143310 _143311 _143313 A s clauses c _106906).
Proof. exact (TRANS (@lem8082627 _143310 _143311 _143313 A s clauses c _106906) (@lem8082660 _143310 _143311 _143313 A s clauses c _106906)). Qed.
Lemma lem8082662 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term794 _143310 _143311 _143313 A clauses c _106906) = (term846 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (fun_ext (fun s : type1410 _143310 _143313 => @lem8082661 _143310 _143311 _143313 A s clauses c _106906)). Qed.
Lemma lem8082663 {_143310 _143313 : Type'} : (@ex (_143310 -> _143313 -> _143310)) = (@ex (_143310 -> _143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143310 -> _143313 -> _143310))). Qed.
Lemma lem8082664 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term795 _143310 _143311 _143313 A clauses c _106906) = (term847 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (MK_COMB (@lem8082663 _143310 _143313) (@lem8082662 _143310 _143311 _143313 A clauses c _106906)). Qed.
Lemma lem8082665 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term770 _143310 _143311 _143313 A clauses c _106906) = (term847 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (TRANS (@lem8082597 _143310 _143311 _143313 A clauses c _106906) (@lem8082664 _143310 _143311 _143313 A clauses c _106906)). Qed.
Lemma lem8082666 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term706 _143310 _143311 _143313 A clauses c _106906) = (term847 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (TRANS (@lem8082567 _143310 _143311 _143313 A clauses c _106906) (@lem8082665 _143310 _143311 _143313 A clauses c _106906)). Qed.
Lemma lem8082667 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term707 _143310 _143311 _143313 A clauses _106906) = (term848 _143310 _143311 _143313 A clauses _106906).
Proof. exact (fun_ext (fun c : _143311 => @lem8082666 _143310 _143311 _143313 A clauses c _106906)). Qed.
Lemma lem8082668 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8082669 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term708 _143310 _143311 _143313 A clauses _106906) = (term849 _143310 _143311 _143313 A clauses _106906).
Proof. exact (MK_COMB (@lem8082668 _143311) (@lem8082667 _143310 _143311 _143313 A clauses _106906)). Qed.
Lemma lem8082671 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8082672 {_143310 _143311 _143313 : Type'} (P : type1443 _143310 _143311 _143313) : (term850 _143310 _143311 _143313 P) = (term851 _143310 _143311 _143313 P).
Proof. exact (@lem8082671 _143311 (type1410 _143310 _143313) P). Qed.
Lemma lem8082673 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term852 _143310 _143311 _143313 A clauses _106906) = (term853 _143310 _143311 _143313 A clauses _106906).
Proof. exact (@lem8082672 _143310 _143311 _143313 (term854 _143310 _143311 _143313 A clauses _106906)). Qed.
Lemma lem8082674 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term855 _143310 _143311 _143313 A clauses _106906 c) = (term846 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (eq_refl (term855 _143310 _143311 _143313 A clauses _106906 c)). Qed.
Lemma lem8082675 {_143310 _143313 : Type'} (s : type1410 _143310 _143313) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8082676 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) (s : type1410 _143310 _143313) : (term856 _143310 _143311 _143313 A clauses _106906 c s) = (term857 _143310 _143311 _143313 A clauses c _106906 s).
Proof. exact (MK_COMB (@lem8082674 _143310 _143311 _143313 A clauses c _106906) (@lem8082675 _143310 _143313 s)). Qed.
Lemma lem8082677 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term857 _143310 _143311 _143313 A clauses c _106906 s) = (term845 _143310 _143311 _143313 A s clauses c _106906).
Proof. exact (eq_refl (term857 _143310 _143311 _143313 A clauses c _106906 s)). Qed.
Lemma lem8082678 {_143310 _143311 _143313 A : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term856 _143310 _143311 _143313 A clauses _106906 c s) = (term845 _143310 _143311 _143313 A s clauses c _106906).
Proof. exact (TRANS (@lem8082676 _143310 _143311 _143313 A clauses c _106906 s) (@lem8082677 _143310 _143311 _143313 A s clauses c _106906)). Qed.
Lemma lem8082679 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term858 _143310 _143311 _143313 A clauses _106906 c) = (term846 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (fun_ext (fun s : type1410 _143310 _143313 => @lem8082678 _143310 _143311 _143313 A s clauses c _106906)). Qed.
Lemma lem8082680 {_143310 _143313 : Type'} : (@ex (_143310 -> _143313 -> _143310)) = (@ex (_143310 -> _143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143310 -> _143313 -> _143310))). Qed.
Lemma lem8082681 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term859 _143310 _143311 _143313 A clauses _106906 c) = (term847 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (MK_COMB (@lem8082680 _143310 _143313) (@lem8082679 _143310 _143311 _143313 A clauses c _106906)). Qed.
Lemma lem8082682 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term860 _143310 _143311 _143313 A clauses _106906) = (term848 _143310 _143311 _143313 A clauses _106906).
Proof. exact (fun_ext (fun c : _143311 => @lem8082681 _143310 _143311 _143313 A clauses c _106906)). Qed.
Lemma lem8082683 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8082684 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term852 _143310 _143311 _143313 A clauses _106906) = (term849 _143310 _143311 _143313 A clauses _106906).
Proof. exact (MK_COMB (@lem8082683 _143311) (@lem8082682 _143310 _143311 _143313 A clauses _106906)). Qed.
Lemma lem8082685 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8082686 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term861 _143310 _143311 _143313 A clauses _106906) = (term862 _143310 _143311 _143313 A clauses _106906).
Proof. exact (MK_COMB (@lem8082685) (@lem8082684 _143310 _143311 _143313 A clauses _106906)). Qed.
Lemma lem8082687 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term855 _143310 _143311 _143313 A clauses _106906 c) = (term846 _143310 _143311 _143313 A clauses c _106906).
Proof. exact (eq_refl (term855 _143310 _143311 _143313 A clauses _106906 c)). Qed.
Lemma lem8082688 {_143310 _143311 _143313 : Type'} (s : type1464 _143310 _143311 _143313) (c : _143311) : (s c) = (s c).
Proof. exact (eq_refl (s c)). Qed.
Lemma lem8082689 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) (s : type1464 _143310 _143311 _143313) (c : _143311) : (term863 _143310 _143311 _143313 A clauses _106906 s c) = (term864 _143310 _143311 _143313 A clauses _106906 s c).
Proof. exact (MK_COMB (@lem8082687 _143310 _143311 _143313 A clauses c _106906) (@lem8082688 _143310 _143311 _143313 s c)). Qed.
Lemma lem8082690 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term864 _143310 _143311 _143313 A clauses _106906 s c) = (term865 _143310 _143311 _143313 A s clauses c _106906).
Proof. exact (eq_refl (term864 _143310 _143311 _143313 A clauses _106906 s c)). Qed.
Lemma lem8082691 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term863 _143310 _143311 _143313 A clauses _106906 s c) = (term865 _143310 _143311 _143313 A s clauses c _106906).
Proof. exact (TRANS (@lem8082689 _143310 _143311 _143313 A clauses _106906 s c) (@lem8082690 _143310 _143311 _143313 A s clauses c _106906)). Qed.
Lemma lem8082692 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term866 _143310 _143311 _143313 A clauses _106906 s) = (term867 _143310 _143311 _143313 A s clauses _106906).
Proof. exact (fun_ext (fun c : _143311 => @lem8082691 _143310 _143311 _143313 A s clauses c _106906)). Qed.
Lemma lem8082693 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8082694 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term868 _143310 _143311 _143313 A clauses _106906 s) = (term869 _143310 _143311 _143313 A s clauses _106906).
Proof. exact (MK_COMB (@lem8082693 _143311) (@lem8082692 _143310 _143311 _143313 A s clauses _106906)). Qed.
Lemma lem8082695 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term870 _143310 _143311 _143313 A clauses _106906) = (term871 _143310 _143311 _143313 A clauses _106906).
Proof. exact (fun_ext (fun s : type1464 _143310 _143311 _143313 => @lem8082694 _143310 _143311 _143313 A s clauses _106906)). Qed.
Lemma lem8082696 {_143310 _143311 _143313 : Type'} : (@ex (_143311 -> _143310 -> _143313 -> _143310)) = (@ex (_143311 -> _143310 -> _143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143311 -> _143310 -> _143313 -> _143310))). Qed.
Lemma lem8082697 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term853 _143310 _143311 _143313 A clauses _106906) = (term872 _143310 _143311 _143313 A clauses _106906).
Proof. exact (MK_COMB (@lem8082696 _143310 _143311 _143313) (@lem8082695 _143310 _143311 _143313 A clauses _106906)). Qed.
Lemma lem8082698 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : ((term852 _143310 _143311 _143313 A clauses _106906) = (term853 _143310 _143311 _143313 A clauses _106906)) = ((term849 _143310 _143311 _143313 A clauses _106906) = (term872 _143310 _143311 _143313 A clauses _106906)).
Proof. exact (MK_COMB (@lem8082686 _143310 _143311 _143313 A clauses _106906) (@lem8082697 _143310 _143311 _143313 A clauses _106906)). Qed.
Lemma lem8082699 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term849 _143310 _143311 _143313 A clauses _106906) = (term872 _143310 _143311 _143313 A clauses _106906).
Proof. exact (EQ_MP (@lem8082698 _143310 _143311 _143313 A clauses _106906) (@lem8082673 _143310 _143311 _143313 A clauses _106906)). Qed.
Lemma lem8082701 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8082702 {_143310 _143311 _143313 A : Type'} (P : type1442 _143310 _143311 _143313 A) : (term873 _143310 _143311 _143313 A P) = (term874 _143310 _143311 _143313 A P).
Proof. exact (@lem8082701 _143311 (type1407 _143310 _143311 _143313 A) P). Qed.
Lemma lem8082703 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term875 _143310 _143311 _143313 A s clauses _106906) = (term876 _143310 _143311 _143313 A s clauses _106906).
Proof. exact (@lem8082702 _143310 _143311 _143313 A (term877 _143310 _143311 _143313 A s clauses _106906)). Qed.
Lemma lem8082704 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term878 _143310 _143311 _143313 A s clauses _106906 c) = (term879 _143310 _143311 _143313 A s clauses c _106906).
Proof. exact (eq_refl (term878 _143310 _143311 _143313 A s clauses _106906 c)). Qed.
Lemma lem8082705 {_143310 _143311 _143313 A : Type'} (t : type1407 _143310 _143311 _143313 A) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8082706 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) (t : type1407 _143310 _143311 _143313 A) : (term880 _143310 _143311 _143313 A s clauses _106906 c t) = (term881 _143310 _143311 _143313 A s clauses c _106906 t).
Proof. exact (MK_COMB (@lem8082704 _143310 _143311 _143313 A s clauses c _106906) (@lem8082705 _143310 _143311 _143313 A t)). Qed.
Lemma lem8082707 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1407 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term881 _143310 _143311 _143313 A s clauses c _106906 t) = (term882 _143310 _143311 _143313 A s t clauses c _106906).
Proof. exact (eq_refl (term881 _143310 _143311 _143313 A s clauses c _106906 t)). Qed.
Lemma lem8082708 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1407 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term880 _143310 _143311 _143313 A s clauses _106906 c t) = (term882 _143310 _143311 _143313 A s t clauses c _106906).
Proof. exact (TRANS (@lem8082706 _143310 _143311 _143313 A s clauses c _106906 t) (@lem8082707 _143310 _143311 _143313 A s t clauses c _106906)). Qed.
Lemma lem8082709 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term883 _143310 _143311 _143313 A s clauses _106906 c) = (term879 _143310 _143311 _143313 A s clauses c _106906).
Proof. exact (fun_ext (fun t : type1407 _143310 _143311 _143313 A => @lem8082708 _143310 _143311 _143313 A s t clauses c _106906)). Qed.
Lemma lem8082710 {_143310 _143311 _143313 A : Type'} : (@ex (_143310 -> _143311 -> _143313 -> A)) = (@ex (_143310 -> _143311 -> _143313 -> A)).
Proof. exact (eq_refl (@ex (_143310 -> _143311 -> _143313 -> A))). Qed.
Lemma lem8082711 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term884 _143310 _143311 _143313 A s clauses _106906 c) = (term865 _143310 _143311 _143313 A s clauses c _106906).
Proof. exact (MK_COMB (@lem8082710 _143310 _143311 _143313 A) (@lem8082709 _143310 _143311 _143313 A s clauses c _106906)). Qed.
Lemma lem8082712 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term885 _143310 _143311 _143313 A s clauses _106906) = (term867 _143310 _143311 _143313 A s clauses _106906).
Proof. exact (fun_ext (fun c : _143311 => @lem8082711 _143310 _143311 _143313 A s clauses c _106906)). Qed.
Lemma lem8082713 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8082714 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term875 _143310 _143311 _143313 A s clauses _106906) = (term869 _143310 _143311 _143313 A s clauses _106906).
Proof. exact (MK_COMB (@lem8082713 _143311) (@lem8082712 _143310 _143311 _143313 A s clauses _106906)). Qed.
Lemma lem8082715 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8082716 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term886 _143310 _143311 _143313 A s clauses _106906) = (term887 _143310 _143311 _143313 A s clauses _106906).
Proof. exact (MK_COMB (@lem8082715) (@lem8082714 _143310 _143311 _143313 A s clauses _106906)). Qed.
Lemma lem8082717 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term878 _143310 _143311 _143313 A s clauses _106906 c) = (term879 _143310 _143311 _143313 A s clauses c _106906).
Proof. exact (eq_refl (term878 _143310 _143311 _143313 A s clauses _106906 c)). Qed.
Lemma lem8082718 {_143310 _143311 _143313 A : Type'} (t : type1463 _143310 _143311 _143313 A) (c : _143311) : (t c) = (t c).
Proof. exact (eq_refl (t c)). Qed.
Lemma lem8082719 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) (t : type1463 _143310 _143311 _143313 A) (c : _143311) : (term888 _143310 _143311 _143313 A s clauses _106906 t c) = (term889 _143310 _143311 _143313 A s clauses _106906 t c).
Proof. exact (MK_COMB (@lem8082717 _143310 _143311 _143313 A s clauses c _106906) (@lem8082718 _143310 _143311 _143313 A t c)). Qed.
Lemma lem8082720 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term889 _143310 _143311 _143313 A s clauses _106906 t c) = (term890 _143310 _143311 _143313 A s t clauses c _106906).
Proof. exact (eq_refl (term889 _143310 _143311 _143313 A s clauses _106906 t c)). Qed.
Lemma lem8082721 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term888 _143310 _143311 _143313 A s clauses _106906 t c) = (term890 _143310 _143311 _143313 A s t clauses c _106906).
Proof. exact (TRANS (@lem8082719 _143310 _143311 _143313 A s clauses _106906 t c) (@lem8082720 _143310 _143311 _143313 A s t clauses c _106906)). Qed.
Lemma lem8082722 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term891 _143310 _143311 _143313 A s clauses _106906 t) = (term892 _143310 _143311 _143313 A s t clauses _106906).
Proof. exact (fun_ext (fun c : _143311 => @lem8082721 _143310 _143311 _143313 A s t clauses c _106906)). Qed.
Lemma lem8082723 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8082724 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term893 _143310 _143311 _143313 A s clauses _106906 t) = (term894 _143310 _143311 _143313 A s t clauses _106906).
Proof. exact (MK_COMB (@lem8082723 _143311) (@lem8082722 _143310 _143311 _143313 A s t clauses _106906)). Qed.
Lemma lem8082725 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term895 _143310 _143311 _143313 A s clauses _106906) = (term896 _143310 _143311 _143313 A s clauses _106906).
Proof. exact (fun_ext (fun t : type1463 _143310 _143311 _143313 A => @lem8082724 _143310 _143311 _143313 A s t clauses _106906)). Qed.
Lemma lem8082726 {_143310 _143311 _143313 A : Type'} : (@ex (_143311 -> _143310 -> _143311 -> _143313 -> A)) = (@ex (_143311 -> _143310 -> _143311 -> _143313 -> A)).
Proof. exact (eq_refl (@ex (_143311 -> _143310 -> _143311 -> _143313 -> A))). Qed.
Lemma lem8082727 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term876 _143310 _143311 _143313 A s clauses _106906) = (term897 _143310 _143311 _143313 A s clauses _106906).
Proof. exact (MK_COMB (@lem8082726 _143310 _143311 _143313 A) (@lem8082725 _143310 _143311 _143313 A s clauses _106906)). Qed.
Lemma lem8082728 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : ((term875 _143310 _143311 _143313 A s clauses _106906) = (term876 _143310 _143311 _143313 A s clauses _106906)) = ((term869 _143310 _143311 _143313 A s clauses _106906) = (term897 _143310 _143311 _143313 A s clauses _106906)).
Proof. exact (MK_COMB (@lem8082716 _143310 _143311 _143313 A s clauses _106906) (@lem8082727 _143310 _143311 _143313 A s clauses _106906)). Qed.
Lemma lem8082729 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term869 _143310 _143311 _143313 A s clauses _106906) = (term897 _143310 _143311 _143313 A s clauses _106906).
Proof. exact (EQ_MP (@lem8082728 _143310 _143311 _143313 A s clauses _106906) (@lem8082703 _143310 _143311 _143313 A s clauses _106906)). Qed.
Lemma lem8082731 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8082732 {_143310 _143311 _143313 : Type'} (P : type1447 _143310 _143311 _143313) : (term898 _143310 _143311 _143313 P) = (term899 _143310 _143311 _143313 P).
Proof. exact (@lem8082731 _143311 (_143310 -> _143313) P). Qed.
Lemma lem8082733 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term900 _143310 _143311 _143313 A s t clauses _106906) = (term901 _143310 _143311 _143313 A s t clauses _106906).
Proof. exact (@lem8082732 _143310 _143311 _143313 (term902 _143310 _143311 _143313 A s t clauses _106906)). Qed.
Lemma lem8082734 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term903 _143310 _143311 _143313 A s t clauses _106906 c) = (term904 _143310 _143311 _143313 A s t clauses c _106906).
Proof. exact (eq_refl (term903 _143310 _143311 _143313 A s t clauses _106906 c)). Qed.
Lemma lem8082735 {_143310 _143313 : Type'} (a : _143310 -> _143313) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8082736 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) (a : _143310 -> _143313) : (term905 _143310 _143311 _143313 A s t clauses _106906 c a) = (term906 _143310 _143311 _143313 A s t clauses c _106906 a).
Proof. exact (MK_COMB (@lem8082734 _143310 _143311 _143313 A s t clauses c _106906) (@lem8082735 _143310 _143313 a)). Qed.
Lemma lem8082737 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (a : _143310 -> _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term906 _143310 _143311 _143313 A s t clauses c _106906 a) = (term907 _143310 _143311 _143313 A s t a clauses c _106906).
Proof. exact (eq_refl (term906 _143310 _143311 _143313 A s t clauses c _106906 a)). Qed.
Lemma lem8082738 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (a : _143310 -> _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term905 _143310 _143311 _143313 A s t clauses _106906 c a) = (term907 _143310 _143311 _143313 A s t a clauses c _106906).
Proof. exact (TRANS (@lem8082736 _143310 _143311 _143313 A s t clauses c _106906 a) (@lem8082737 _143310 _143311 _143313 A s t a clauses c _106906)). Qed.
Lemma lem8082739 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term908 _143310 _143311 _143313 A s t clauses _106906 c) = (term904 _143310 _143311 _143313 A s t clauses c _106906).
Proof. exact (fun_ext (fun a : _143310 -> _143313 => @lem8082738 _143310 _143311 _143313 A s t a clauses c _106906)). Qed.
Lemma lem8082740 {_143310 _143313 : Type'} : (@ex (_143310 -> _143313)) = (@ex (_143310 -> _143313)).
Proof. exact (eq_refl (@ex (_143310 -> _143313))). Qed.
Lemma lem8082741 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term909 _143310 _143311 _143313 A s t clauses _106906 c) = (term890 _143310 _143311 _143313 A s t clauses c _106906).
Proof. exact (MK_COMB (@lem8082740 _143310 _143313) (@lem8082739 _143310 _143311 _143313 A s t clauses c _106906)). Qed.
Lemma lem8082742 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term910 _143310 _143311 _143313 A s t clauses _106906) = (term892 _143310 _143311 _143313 A s t clauses _106906).
Proof. exact (fun_ext (fun c : _143311 => @lem8082741 _143310 _143311 _143313 A s t clauses c _106906)). Qed.
Lemma lem8082743 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8082744 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term900 _143310 _143311 _143313 A s t clauses _106906) = (term894 _143310 _143311 _143313 A s t clauses _106906).
Proof. exact (MK_COMB (@lem8082743 _143311) (@lem8082742 _143310 _143311 _143313 A s t clauses _106906)). Qed.
Lemma lem8082745 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8082746 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term911 _143310 _143311 _143313 A s t clauses _106906) = (term912 _143310 _143311 _143313 A s t clauses _106906).
Proof. exact (MK_COMB (@lem8082745) (@lem8082744 _143310 _143311 _143313 A s t clauses _106906)). Qed.
Lemma lem8082747 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term903 _143310 _143311 _143313 A s t clauses _106906 c) = (term904 _143310 _143311 _143313 A s t clauses c _106906).
Proof. exact (eq_refl (term903 _143310 _143311 _143313 A s t clauses _106906 c)). Qed.
Lemma lem8082748 {_143310 _143311 _143313 : Type'} (a : type1469 _143310 _143311 _143313) (c : _143311) : (a c) = (a c).
Proof. exact (eq_refl (a c)). Qed.
Lemma lem8082749 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) (a : type1469 _143310 _143311 _143313) (c : _143311) : (term913 _143310 _143311 _143313 A s t clauses _106906 a c) = (term914 _143310 _143311 _143313 A s t clauses _106906 a c).
Proof. exact (MK_COMB (@lem8082747 _143310 _143311 _143313 A s t clauses c _106906) (@lem8082748 _143310 _143311 _143313 a c)). Qed.
Lemma lem8082750 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (a : type1469 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term914 _143310 _143311 _143313 A s t clauses _106906 a c) = (term915 _143310 _143311 _143313 A s t a clauses c _106906).
Proof. exact (eq_refl (term914 _143310 _143311 _143313 A s t clauses _106906 a c)). Qed.
Lemma lem8082751 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (a : type1469 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (c : _143311) (_106906 : A) : (term913 _143310 _143311 _143313 A s t clauses _106906 a c) = (term915 _143310 _143311 _143313 A s t a clauses c _106906).
Proof. exact (TRANS (@lem8082749 _143310 _143311 _143313 A s t clauses _106906 a c) (@lem8082750 _143310 _143311 _143313 A s t a clauses c _106906)). Qed.
Lemma lem8082752 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (a : type1469 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term916 _143310 _143311 _143313 A s t clauses _106906 a) = (term917 _143310 _143311 _143313 A s t a clauses _106906).
Proof. exact (fun_ext (fun c : _143311 => @lem8082751 _143310 _143311 _143313 A s t a clauses c _106906)). Qed.
Lemma lem8082753 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8082754 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (a : type1469 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term918 _143310 _143311 _143313 A s t clauses _106906 a) = (term919 _143310 _143311 _143313 A s t a clauses _106906).
Proof. exact (MK_COMB (@lem8082753 _143311) (@lem8082752 _143310 _143311 _143313 A s t a clauses _106906)). Qed.
Lemma lem8082755 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term920 _143310 _143311 _143313 A s t clauses _106906) = (term921 _143310 _143311 _143313 A s t clauses _106906).
Proof. exact (fun_ext (fun a : type1469 _143310 _143311 _143313 => @lem8082754 _143310 _143311 _143313 A s t a clauses _106906)). Qed.
Lemma lem8082756 {_143310 _143311 _143313 : Type'} : (@ex (_143311 -> _143310 -> _143313)) = (@ex (_143311 -> _143310 -> _143313)).
Proof. exact (eq_refl (@ex (_143311 -> _143310 -> _143313))). Qed.
Lemma lem8082757 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term901 _143310 _143311 _143313 A s t clauses _106906) = (term922 _143310 _143311 _143313 A s t clauses _106906).
Proof. exact (MK_COMB (@lem8082756 _143310 _143311 _143313) (@lem8082755 _143310 _143311 _143313 A s t clauses _106906)). Qed.
Lemma lem8082758 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : ((term900 _143310 _143311 _143313 A s t clauses _106906) = (term901 _143310 _143311 _143313 A s t clauses _106906)) = ((term894 _143310 _143311 _143313 A s t clauses _106906) = (term922 _143310 _143311 _143313 A s t clauses _106906)).
Proof. exact (MK_COMB (@lem8082746 _143310 _143311 _143313 A s t clauses _106906) (@lem8082757 _143310 _143311 _143313 A s t clauses _106906)). Qed.
Lemma lem8082759 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term894 _143310 _143311 _143313 A s t clauses _106906) = (term922 _143310 _143311 _143313 A s t clauses _106906).
Proof. exact (EQ_MP (@lem8082758 _143310 _143311 _143313 A s t clauses _106906) (@lem8082733 _143310 _143311 _143313 A s t clauses _106906)). Qed.
Lemma lem8082760 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term896 _143310 _143311 _143313 A s clauses _106906) = (term923 _143310 _143311 _143313 A s clauses _106906).
Proof. exact (fun_ext (fun t : type1463 _143310 _143311 _143313 A => @lem8082759 _143310 _143311 _143313 A s t clauses _106906)). Qed.
Lemma lem8082761 {_143310 _143311 _143313 A : Type'} : (@ex (_143311 -> _143310 -> _143311 -> _143313 -> A)) = (@ex (_143311 -> _143310 -> _143311 -> _143313 -> A)).
Proof. exact (eq_refl (@ex (_143311 -> _143310 -> _143311 -> _143313 -> A))). Qed.
Lemma lem8082762 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term897 _143310 _143311 _143313 A s clauses _106906) = (term924 _143310 _143311 _143313 A s clauses _106906).
Proof. exact (MK_COMB (@lem8082761 _143310 _143311 _143313 A) (@lem8082760 _143310 _143311 _143313 A s clauses _106906)). Qed.
Lemma lem8082763 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term869 _143310 _143311 _143313 A s clauses _106906) = (term924 _143310 _143311 _143313 A s clauses _106906).
Proof. exact (TRANS (@lem8082729 _143310 _143311 _143313 A s clauses _106906) (@lem8082762 _143310 _143311 _143313 A s clauses _106906)). Qed.
Lemma lem8082764 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term871 _143310 _143311 _143313 A clauses _106906) = (term925 _143310 _143311 _143313 A clauses _106906).
Proof. exact (fun_ext (fun s : type1464 _143310 _143311 _143313 => @lem8082763 _143310 _143311 _143313 A s clauses _106906)). Qed.
Lemma lem8082765 {_143310 _143311 _143313 : Type'} : (@ex (_143311 -> _143310 -> _143313 -> _143310)) = (@ex (_143311 -> _143310 -> _143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143311 -> _143310 -> _143313 -> _143310))). Qed.
Lemma lem8082766 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term872 _143310 _143311 _143313 A clauses _106906) = (term926 _143310 _143311 _143313 A clauses _106906).
Proof. exact (MK_COMB (@lem8082765 _143310 _143311 _143313) (@lem8082764 _143310 _143311 _143313 A clauses _106906)). Qed.
Lemma lem8082767 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term849 _143310 _143311 _143313 A clauses _106906) = (term926 _143310 _143311 _143313 A clauses _106906).
Proof. exact (TRANS (@lem8082699 _143310 _143311 _143313 A clauses _106906) (@lem8082766 _143310 _143311 _143313 A clauses _106906)). Qed.
Lemma lem8082768 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term708 _143310 _143311 _143313 A clauses _106906) = (term926 _143310 _143311 _143313 A clauses _106906).
Proof. exact (TRANS (@lem8082669 _143310 _143311 _143313 A clauses _106906) (@lem8082767 _143310 _143311 _143313 A clauses _106906)). Qed.
Lemma lem8082769 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term709 _143310 _143311 _143313 A _106906) = (term927 _143310 _143311 _143313 A _106906).
Proof. exact (fun_ext (fun clauses : type1637 _143310 _143311 _143313 A => @lem8082768 _143310 _143311 _143313 A clauses _106906)). Qed.
Lemma lem8082770 {_143310 _143311 _143313 A : Type'} : (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A)))) = (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))))). Qed.
Lemma lem8082771 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term710 _143310 _143311 _143313 A _106906) = (term928 _143310 _143311 _143313 A _106906).
Proof. exact (MK_COMB (@lem8082770 _143310 _143311 _143313 A) (@lem8082769 _143310 _143311 _143313 A _106906)). Qed.
Lemma lem8082773 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8082774 {_143310 _143311 _143313 A : Type'} (P : type1098 _143310 _143311 _143313 A) : (term929 _143310 _143311 _143313 A P) = (term930 _143310 _143311 _143313 A P).
Proof. exact (@lem8082773 (type1637 _143310 _143311 _143313 A) (type1464 _143310 _143311 _143313) P). Qed.
Lemma lem8082775 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term931 _143310 _143311 _143313 A _106906) = (term932 _143310 _143311 _143313 A _106906).
Proof. exact (@lem8082774 _143310 _143311 _143313 A (term933 _143310 _143311 _143313 A _106906)). Qed.
Lemma lem8082776 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term934 _143310 _143311 _143313 A _106906 clauses) = (term925 _143310 _143311 _143313 A clauses _106906).
Proof. exact (eq_refl (term934 _143310 _143311 _143313 A _106906 clauses)). Qed.
Lemma lem8082777 {_143310 _143311 _143313 : Type'} (s : type1464 _143310 _143311 _143313) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8082778 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) (s : type1464 _143310 _143311 _143313) : (term935 _143310 _143311 _143313 A _106906 clauses s) = (term936 _143310 _143311 _143313 A clauses _106906 s).
Proof. exact (MK_COMB (@lem8082776 _143310 _143311 _143313 A clauses _106906) (@lem8082777 _143310 _143311 _143313 s)). Qed.
Lemma lem8082779 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term936 _143310 _143311 _143313 A clauses _106906 s) = (term924 _143310 _143311 _143313 A s clauses _106906).
Proof. exact (eq_refl (term936 _143310 _143311 _143313 A clauses _106906 s)). Qed.
Lemma lem8082780 {_143310 _143311 _143313 A : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term935 _143310 _143311 _143313 A _106906 clauses s) = (term924 _143310 _143311 _143313 A s clauses _106906).
Proof. exact (TRANS (@lem8082778 _143310 _143311 _143313 A clauses _106906 s) (@lem8082779 _143310 _143311 _143313 A s clauses _106906)). Qed.
Lemma lem8082781 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term937 _143310 _143311 _143313 A _106906 clauses) = (term925 _143310 _143311 _143313 A clauses _106906).
Proof. exact (fun_ext (fun s : type1464 _143310 _143311 _143313 => @lem8082780 _143310 _143311 _143313 A s clauses _106906)). Qed.
Lemma lem8082782 {_143310 _143311 _143313 : Type'} : (@ex (_143311 -> _143310 -> _143313 -> _143310)) = (@ex (_143311 -> _143310 -> _143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143311 -> _143310 -> _143313 -> _143310))). Qed.
Lemma lem8082783 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term938 _143310 _143311 _143313 A _106906 clauses) = (term926 _143310 _143311 _143313 A clauses _106906).
Proof. exact (MK_COMB (@lem8082782 _143310 _143311 _143313) (@lem8082781 _143310 _143311 _143313 A clauses _106906)). Qed.
Lemma lem8082784 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term939 _143310 _143311 _143313 A _106906) = (term927 _143310 _143311 _143313 A _106906).
Proof. exact (fun_ext (fun clauses : type1637 _143310 _143311 _143313 A => @lem8082783 _143310 _143311 _143313 A clauses _106906)). Qed.
Lemma lem8082785 {_143310 _143311 _143313 A : Type'} : (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A)))) = (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))))). Qed.
Lemma lem8082786 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term931 _143310 _143311 _143313 A _106906) = (term928 _143310 _143311 _143313 A _106906).
Proof. exact (MK_COMB (@lem8082785 _143310 _143311 _143313 A) (@lem8082784 _143310 _143311 _143313 A _106906)). Qed.
Lemma lem8082787 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8082788 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term940 _143310 _143311 _143313 A _106906) = (term941 _143310 _143311 _143313 A _106906).
Proof. exact (MK_COMB (@lem8082787) (@lem8082786 _143310 _143311 _143313 A _106906)). Qed.
Lemma lem8082789 {_143310 _143311 _143313 A : Type'} (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term934 _143310 _143311 _143313 A _106906 clauses) = (term925 _143310 _143311 _143313 A clauses _106906).
Proof. exact (eq_refl (term934 _143310 _143311 _143313 A _106906 clauses)). Qed.
Lemma lem8082790 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) : (s clauses) = (s clauses).
Proof. exact (eq_refl (s clauses)). Qed.
Lemma lem8082791 {_143310 _143311 _143313 A : Type'} (_106906 : A) (s : type1101 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) : (term942 _143310 _143311 _143313 A _106906 s clauses) = (term943 _143310 _143311 _143313 A _106906 s clauses).
Proof. exact (MK_COMB (@lem8082789 _143310 _143311 _143313 A clauses _106906) (@lem8082790 _143310 _143311 _143313 A s clauses)). Qed.
Lemma lem8082792 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term943 _143310 _143311 _143313 A _106906 s clauses) = (term944 _143310 _143311 _143313 A s clauses _106906).
Proof. exact (eq_refl (term943 _143310 _143311 _143313 A _106906 s clauses)). Qed.
Lemma lem8082793 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term942 _143310 _143311 _143313 A _106906 s clauses) = (term944 _143310 _143311 _143313 A s clauses _106906).
Proof. exact (TRANS (@lem8082791 _143310 _143311 _143313 A _106906 s clauses) (@lem8082792 _143310 _143311 _143313 A s clauses _106906)). Qed.
Lemma lem8082794 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (_106906 : A) : (term945 _143310 _143311 _143313 A _106906 s) = (term946 _143310 _143311 _143313 A s _106906).
Proof. exact (fun_ext (fun clauses : type1637 _143310 _143311 _143313 A => @lem8082793 _143310 _143311 _143313 A s clauses _106906)). Qed.
Lemma lem8082795 {_143310 _143311 _143313 A : Type'} : (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A)))) = (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))))). Qed.
Lemma lem8082796 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (_106906 : A) : (term947 _143310 _143311 _143313 A _106906 s) = (term948 _143310 _143311 _143313 A s _106906).
Proof. exact (MK_COMB (@lem8082795 _143310 _143311 _143313 A) (@lem8082794 _143310 _143311 _143313 A s _106906)). Qed.
Lemma lem8082797 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term949 _143310 _143311 _143313 A _106906) = (term950 _143310 _143311 _143313 A _106906).
Proof. exact (fun_ext (fun s : type1101 _143310 _143311 _143313 A => @lem8082796 _143310 _143311 _143313 A s _106906)). Qed.
Lemma lem8082798 {_143310 _143311 _143313 A : Type'} : (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))) -> _143311 -> _143310 -> _143313 -> _143310)) = (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))) -> _143311 -> _143310 -> _143313 -> _143310)).
Proof. exact (eq_refl (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))) -> _143311 -> _143310 -> _143313 -> _143310))). Qed.
Lemma lem8082799 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term932 _143310 _143311 _143313 A _106906) = (term951 _143310 _143311 _143313 A _106906).
Proof. exact (MK_COMB (@lem8082798 _143310 _143311 _143313 A) (@lem8082797 _143310 _143311 _143313 A _106906)). Qed.
Lemma lem8082800 {_143310 _143311 _143313 A : Type'} (_106906 : A) : ((term931 _143310 _143311 _143313 A _106906) = (term932 _143310 _143311 _143313 A _106906)) = ((term928 _143310 _143311 _143313 A _106906) = (term951 _143310 _143311 _143313 A _106906)).
Proof. exact (MK_COMB (@lem8082788 _143310 _143311 _143313 A _106906) (@lem8082799 _143310 _143311 _143313 A _106906)). Qed.
Lemma lem8082801 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term928 _143310 _143311 _143313 A _106906) = (term951 _143310 _143311 _143313 A _106906).
Proof. exact (EQ_MP (@lem8082800 _143310 _143311 _143313 A _106906) (@lem8082775 _143310 _143311 _143313 A _106906)). Qed.
Lemma lem8082803 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8082804 {_143310 _143311 _143313 A : Type'} (P : type1097 _143310 _143311 _143313 A) : (term952 _143310 _143311 _143313 A P) = (term953 _143310 _143311 _143313 A P).
Proof. exact (@lem8082803 (type1637 _143310 _143311 _143313 A) (type1463 _143310 _143311 _143313 A) P). Qed.
Lemma lem8082805 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (_106906 : A) : (term954 _143310 _143311 _143313 A s _106906) = (term955 _143310 _143311 _143313 A s _106906).
Proof. exact (@lem8082804 _143310 _143311 _143313 A (term956 _143310 _143311 _143313 A s _106906)). Qed.
Lemma lem8082806 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term957 _143310 _143311 _143313 A s _106906 clauses) = (term958 _143310 _143311 _143313 A s clauses _106906).
Proof. exact (eq_refl (term957 _143310 _143311 _143313 A s _106906 clauses)). Qed.
Lemma lem8082807 {_143310 _143311 _143313 A : Type'} (t : type1463 _143310 _143311 _143313 A) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8082808 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) (t : type1463 _143310 _143311 _143313 A) : (term959 _143310 _143311 _143313 A s _106906 clauses t) = (term960 _143310 _143311 _143313 A s clauses _106906 t).
Proof. exact (MK_COMB (@lem8082806 _143310 _143311 _143313 A s clauses _106906) (@lem8082807 _143310 _143311 _143313 A t)). Qed.
Lemma lem8082809 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1463 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term960 _143310 _143311 _143313 A s clauses _106906 t) = (term961 _143310 _143311 _143313 A s t clauses _106906).
Proof. exact (eq_refl (term960 _143310 _143311 _143313 A s clauses _106906 t)). Qed.
Lemma lem8082810 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1463 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term959 _143310 _143311 _143313 A s _106906 clauses t) = (term961 _143310 _143311 _143313 A s t clauses _106906).
Proof. exact (TRANS (@lem8082808 _143310 _143311 _143313 A s clauses _106906 t) (@lem8082809 _143310 _143311 _143313 A s t clauses _106906)). Qed.
Lemma lem8082811 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term962 _143310 _143311 _143313 A s _106906 clauses) = (term958 _143310 _143311 _143313 A s clauses _106906).
Proof. exact (fun_ext (fun t : type1463 _143310 _143311 _143313 A => @lem8082810 _143310 _143311 _143313 A s t clauses _106906)). Qed.
Lemma lem8082812 {_143310 _143311 _143313 A : Type'} : (@ex (_143311 -> _143310 -> _143311 -> _143313 -> A)) = (@ex (_143311 -> _143310 -> _143311 -> _143313 -> A)).
Proof. exact (eq_refl (@ex (_143311 -> _143310 -> _143311 -> _143313 -> A))). Qed.
Lemma lem8082813 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term963 _143310 _143311 _143313 A s _106906 clauses) = (term944 _143310 _143311 _143313 A s clauses _106906).
Proof. exact (MK_COMB (@lem8082812 _143310 _143311 _143313 A) (@lem8082811 _143310 _143311 _143313 A s clauses _106906)). Qed.
Lemma lem8082814 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (_106906 : A) : (term964 _143310 _143311 _143313 A s _106906) = (term946 _143310 _143311 _143313 A s _106906).
Proof. exact (fun_ext (fun clauses : type1637 _143310 _143311 _143313 A => @lem8082813 _143310 _143311 _143313 A s clauses _106906)). Qed.
Lemma lem8082815 {_143310 _143311 _143313 A : Type'} : (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A)))) = (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))))). Qed.
Lemma lem8082816 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (_106906 : A) : (term954 _143310 _143311 _143313 A s _106906) = (term948 _143310 _143311 _143313 A s _106906).
Proof. exact (MK_COMB (@lem8082815 _143310 _143311 _143313 A) (@lem8082814 _143310 _143311 _143313 A s _106906)). Qed.
Lemma lem8082817 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8082818 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (_106906 : A) : (term965 _143310 _143311 _143313 A s _106906) = (term966 _143310 _143311 _143313 A s _106906).
Proof. exact (MK_COMB (@lem8082817) (@lem8082816 _143310 _143311 _143313 A s _106906)). Qed.
Lemma lem8082819 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term957 _143310 _143311 _143313 A s _106906 clauses) = (term958 _143310 _143311 _143313 A s clauses _106906).
Proof. exact (eq_refl (term957 _143310 _143311 _143313 A s _106906 clauses)). Qed.
Lemma lem8082820 {_143310 _143311 _143313 A : Type'} (t : type1100 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) : (t clauses) = (t clauses).
Proof. exact (eq_refl (t clauses)). Qed.
Lemma lem8082821 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (_106906 : A) (t : type1100 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) : (term967 _143310 _143311 _143313 A s _106906 t clauses) = (term968 _143310 _143311 _143313 A s _106906 t clauses).
Proof. exact (MK_COMB (@lem8082819 _143310 _143311 _143313 A s clauses _106906) (@lem8082820 _143310 _143311 _143313 A t clauses)). Qed.
Lemma lem8082822 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term968 _143310 _143311 _143313 A s _106906 t clauses) = (term969 _143310 _143311 _143313 A s t clauses _106906).
Proof. exact (eq_refl (term968 _143310 _143311 _143313 A s _106906 t clauses)). Qed.
Lemma lem8082823 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term967 _143310 _143311 _143313 A s _106906 t clauses) = (term969 _143310 _143311 _143313 A s t clauses _106906).
Proof. exact (TRANS (@lem8082821 _143310 _143311 _143313 A s _106906 t clauses) (@lem8082822 _143310 _143311 _143313 A s t clauses _106906)). Qed.
Lemma lem8082824 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (_106906 : A) : (term970 _143310 _143311 _143313 A s _106906 t) = (term971 _143310 _143311 _143313 A s t _106906).
Proof. exact (fun_ext (fun clauses : type1637 _143310 _143311 _143313 A => @lem8082823 _143310 _143311 _143313 A s t clauses _106906)). Qed.
Lemma lem8082825 {_143310 _143311 _143313 A : Type'} : (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A)))) = (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))))). Qed.
Lemma lem8082826 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (_106906 : A) : (term972 _143310 _143311 _143313 A s _106906 t) = (term973 _143310 _143311 _143313 A s t _106906).
Proof. exact (MK_COMB (@lem8082825 _143310 _143311 _143313 A) (@lem8082824 _143310 _143311 _143313 A s t _106906)). Qed.
Lemma lem8082827 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (_106906 : A) : (term974 _143310 _143311 _143313 A s _106906) = (term975 _143310 _143311 _143313 A s _106906).
Proof. exact (fun_ext (fun t : type1100 _143310 _143311 _143313 A => @lem8082826 _143310 _143311 _143313 A s t _106906)). Qed.
Lemma lem8082828 {_143310 _143311 _143313 A : Type'} : (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))) -> _143311 -> _143310 -> _143311 -> _143313 -> A)) = (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))) -> _143311 -> _143310 -> _143311 -> _143313 -> A)).
Proof. exact (eq_refl (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))) -> _143311 -> _143310 -> _143311 -> _143313 -> A))). Qed.
Lemma lem8082829 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (_106906 : A) : (term955 _143310 _143311 _143313 A s _106906) = (term976 _143310 _143311 _143313 A s _106906).
Proof. exact (MK_COMB (@lem8082828 _143310 _143311 _143313 A) (@lem8082827 _143310 _143311 _143313 A s _106906)). Qed.
Lemma lem8082830 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (_106906 : A) : ((term954 _143310 _143311 _143313 A s _106906) = (term955 _143310 _143311 _143313 A s _106906)) = ((term948 _143310 _143311 _143313 A s _106906) = (term976 _143310 _143311 _143313 A s _106906)).
Proof. exact (MK_COMB (@lem8082818 _143310 _143311 _143313 A s _106906) (@lem8082829 _143310 _143311 _143313 A s _106906)). Qed.
Lemma lem8082831 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (_106906 : A) : (term948 _143310 _143311 _143313 A s _106906) = (term976 _143310 _143311 _143313 A s _106906).
Proof. exact (EQ_MP (@lem8082830 _143310 _143311 _143313 A s _106906) (@lem8082805 _143310 _143311 _143313 A s _106906)). Qed.
Lemma lem8082833 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8082834 {_143310 _143311 _143313 A : Type'} (P : type1099 _143310 _143311 _143313 A) : (term977 _143310 _143311 _143313 A P) = (term978 _143310 _143311 _143313 A P).
Proof. exact (@lem8082833 (type1637 _143310 _143311 _143313 A) (type1469 _143310 _143311 _143313) P). Qed.
Lemma lem8082835 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (_106906 : A) : (term979 _143310 _143311 _143313 A s t _106906) = (term980 _143310 _143311 _143313 A s t _106906).
Proof. exact (@lem8082834 _143310 _143311 _143313 A (term981 _143310 _143311 _143313 A s t _106906)). Qed.
Lemma lem8082836 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term982 _143310 _143311 _143313 A s t _106906 clauses) = (term983 _143310 _143311 _143313 A s t clauses _106906).
Proof. exact (eq_refl (term982 _143310 _143311 _143313 A s t _106906 clauses)). Qed.
Lemma lem8082837 {_143310 _143311 _143313 : Type'} (a : type1469 _143310 _143311 _143313) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8082838 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) (a : type1469 _143310 _143311 _143313) : (term984 _143310 _143311 _143313 A s t _106906 clauses a) = (term985 _143310 _143311 _143313 A s t clauses _106906 a).
Proof. exact (MK_COMB (@lem8082836 _143310 _143311 _143313 A s t clauses _106906) (@lem8082837 _143310 _143311 _143313 a)). Qed.
Lemma lem8082839 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (a : type1469 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term985 _143310 _143311 _143313 A s t clauses _106906 a) = (term986 _143310 _143311 _143313 A s t a clauses _106906).
Proof. exact (eq_refl (term985 _143310 _143311 _143313 A s t clauses _106906 a)). Qed.
Lemma lem8082840 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (a : type1469 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term984 _143310 _143311 _143313 A s t _106906 clauses a) = (term986 _143310 _143311 _143313 A s t a clauses _106906).
Proof. exact (TRANS (@lem8082838 _143310 _143311 _143313 A s t clauses _106906 a) (@lem8082839 _143310 _143311 _143313 A s t a clauses _106906)). Qed.
Lemma lem8082841 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term987 _143310 _143311 _143313 A s t _106906 clauses) = (term983 _143310 _143311 _143313 A s t clauses _106906).
Proof. exact (fun_ext (fun a : type1469 _143310 _143311 _143313 => @lem8082840 _143310 _143311 _143313 A s t a clauses _106906)). Qed.
Lemma lem8082842 {_143310 _143311 _143313 : Type'} : (@ex (_143311 -> _143310 -> _143313)) = (@ex (_143311 -> _143310 -> _143313)).
Proof. exact (eq_refl (@ex (_143311 -> _143310 -> _143313))). Qed.
Lemma lem8082843 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term988 _143310 _143311 _143313 A s t _106906 clauses) = (term969 _143310 _143311 _143313 A s t clauses _106906).
Proof. exact (MK_COMB (@lem8082842 _143310 _143311 _143313) (@lem8082841 _143310 _143311 _143313 A s t clauses _106906)). Qed.
Lemma lem8082844 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (_106906 : A) : (term989 _143310 _143311 _143313 A s t _106906) = (term971 _143310 _143311 _143313 A s t _106906).
Proof. exact (fun_ext (fun clauses : type1637 _143310 _143311 _143313 A => @lem8082843 _143310 _143311 _143313 A s t clauses _106906)). Qed.
Lemma lem8082845 {_143310 _143311 _143313 A : Type'} : (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A)))) = (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))))). Qed.
Lemma lem8082846 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (_106906 : A) : (term979 _143310 _143311 _143313 A s t _106906) = (term973 _143310 _143311 _143313 A s t _106906).
Proof. exact (MK_COMB (@lem8082845 _143310 _143311 _143313 A) (@lem8082844 _143310 _143311 _143313 A s t _106906)). Qed.
Lemma lem8082847 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8082848 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (_106906 : A) : (term990 _143310 _143311 _143313 A s t _106906) = (term991 _143310 _143311 _143313 A s t _106906).
Proof. exact (MK_COMB (@lem8082847) (@lem8082846 _143310 _143311 _143313 A s t _106906)). Qed.
Lemma lem8082849 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term982 _143310 _143311 _143313 A s t _106906 clauses) = (term983 _143310 _143311 _143313 A s t clauses _106906).
Proof. exact (eq_refl (term982 _143310 _143311 _143313 A s t _106906 clauses)). Qed.
Lemma lem8082850 {_143310 _143311 _143313 A : Type'} (a : type1102 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) : (a clauses) = (a clauses).
Proof. exact (eq_refl (a clauses)). Qed.
Lemma lem8082851 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (_106906 : A) (a : type1102 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) : (term992 _143310 _143311 _143313 A s t _106906 a clauses) = (term993 _143310 _143311 _143313 A s t _106906 a clauses).
Proof. exact (MK_COMB (@lem8082849 _143310 _143311 _143313 A s t clauses _106906) (@lem8082850 _143310 _143311 _143313 A a clauses)). Qed.
Lemma lem8082852 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (a : type1102 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term993 _143310 _143311 _143313 A s t _106906 a clauses) = (term994 _143310 _143311 _143313 A s t a clauses _106906).
Proof. exact (eq_refl (term993 _143310 _143311 _143313 A s t _106906 a clauses)). Qed.
Lemma lem8082853 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (a : type1102 _143310 _143311 _143313 A) (clauses : type1637 _143310 _143311 _143313 A) (_106906 : A) : (term992 _143310 _143311 _143313 A s t _106906 a clauses) = (term994 _143310 _143311 _143313 A s t a clauses _106906).
Proof. exact (TRANS (@lem8082851 _143310 _143311 _143313 A s t _106906 a clauses) (@lem8082852 _143310 _143311 _143313 A s t a clauses _106906)). Qed.
Lemma lem8082854 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (a : type1102 _143310 _143311 _143313 A) (_106906 : A) : (term995 _143310 _143311 _143313 A s t _106906 a) = (term996 _143310 _143311 _143313 A s t a _106906).
Proof. exact (fun_ext (fun clauses : type1637 _143310 _143311 _143313 A => @lem8082853 _143310 _143311 _143313 A s t a clauses _106906)). Qed.
Lemma lem8082855 {_143310 _143311 _143313 A : Type'} : (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A)))) = (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))))). Qed.
Lemma lem8082856 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (a : type1102 _143310 _143311 _143313 A) (_106906 : A) : (term997 _143310 _143311 _143313 A s t _106906 a) = (term998 _143310 _143311 _143313 A s t a _106906).
Proof. exact (MK_COMB (@lem8082855 _143310 _143311 _143313 A) (@lem8082854 _143310 _143311 _143313 A s t a _106906)). Qed.
Lemma lem8082857 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (_106906 : A) : (term999 _143310 _143311 _143313 A s t _106906) = (term1000 _143310 _143311 _143313 A s t _106906).
Proof. exact (fun_ext (fun a : type1102 _143310 _143311 _143313 A => @lem8082856 _143310 _143311 _143313 A s t a _106906)). Qed.
Lemma lem8082858 {_143310 _143311 _143313 A : Type'} : (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))) -> _143311 -> _143310 -> _143313)) = (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))) -> _143311 -> _143310 -> _143313)).
Proof. exact (eq_refl (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))) -> _143311 -> _143310 -> _143313))). Qed.
Lemma lem8082859 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (_106906 : A) : (term980 _143310 _143311 _143313 A s t _106906) = (term1001 _143310 _143311 _143313 A s t _106906).
Proof. exact (MK_COMB (@lem8082858 _143310 _143311 _143313 A) (@lem8082857 _143310 _143311 _143313 A s t _106906)). Qed.
Lemma lem8082860 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (_106906 : A) : ((term979 _143310 _143311 _143313 A s t _106906) = (term980 _143310 _143311 _143313 A s t _106906)) = ((term973 _143310 _143311 _143313 A s t _106906) = (term1001 _143310 _143311 _143313 A s t _106906)).
Proof. exact (MK_COMB (@lem8082848 _143310 _143311 _143313 A s t _106906) (@lem8082859 _143310 _143311 _143313 A s t _106906)). Qed.
Lemma lem8082861 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (t : type1100 _143310 _143311 _143313 A) (_106906 : A) : (term973 _143310 _143311 _143313 A s t _106906) = (term1001 _143310 _143311 _143313 A s t _106906).
Proof. exact (EQ_MP (@lem8082860 _143310 _143311 _143313 A s t _106906) (@lem8082835 _143310 _143311 _143313 A s t _106906)). Qed.
Lemma lem8082862 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (_106906 : A) : (term975 _143310 _143311 _143313 A s _106906) = (term1002 _143310 _143311 _143313 A s _106906).
Proof. exact (fun_ext (fun t : type1100 _143310 _143311 _143313 A => @lem8082861 _143310 _143311 _143313 A s t _106906)). Qed.
Lemma lem8082863 {_143310 _143311 _143313 A : Type'} : (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))) -> _143311 -> _143310 -> _143311 -> _143313 -> A)) = (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))) -> _143311 -> _143310 -> _143311 -> _143313 -> A)).
Proof. exact (eq_refl (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))) -> _143311 -> _143310 -> _143311 -> _143313 -> A))). Qed.
Lemma lem8082864 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (_106906 : A) : (term976 _143310 _143311 _143313 A s _106906) = (term1003 _143310 _143311 _143313 A s _106906).
Proof. exact (MK_COMB (@lem8082863 _143310 _143311 _143313 A) (@lem8082862 _143310 _143311 _143313 A s _106906)). Qed.
Lemma lem8082865 {_143310 _143311 _143313 A : Type'} (s : type1101 _143310 _143311 _143313 A) (_106906 : A) : (term948 _143310 _143311 _143313 A s _106906) = (term1003 _143310 _143311 _143313 A s _106906).
Proof. exact (TRANS (@lem8082831 _143310 _143311 _143313 A s _106906) (@lem8082864 _143310 _143311 _143313 A s _106906)). Qed.
Lemma lem8082866 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term950 _143310 _143311 _143313 A _106906) = (term1004 _143310 _143311 _143313 A _106906).
Proof. exact (fun_ext (fun s : type1101 _143310 _143311 _143313 A => @lem8082865 _143310 _143311 _143313 A s _106906)). Qed.
Lemma lem8082867 {_143310 _143311 _143313 A : Type'} : (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))) -> _143311 -> _143310 -> _143313 -> _143310)) = (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))) -> _143311 -> _143310 -> _143313 -> _143310)).
Proof. exact (eq_refl (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> A))) -> _143311 -> _143310 -> _143313 -> _143310))). Qed.
Lemma lem8082868 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term951 _143310 _143311 _143313 A _106906) = (term1005 _143310 _143311 _143313 A _106906).
Proof. exact (MK_COMB (@lem8082867 _143310 _143311 _143313 A) (@lem8082866 _143310 _143311 _143313 A _106906)). Qed.
Lemma lem8082869 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term928 _143310 _143311 _143313 A _106906) = (term1005 _143310 _143311 _143313 A _106906).
Proof. exact (TRANS (@lem8082801 _143310 _143311 _143313 A _106906) (@lem8082868 _143310 _143311 _143313 A _106906)). Qed.
Lemma lem8082871 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term710 _143310 _143311 _143313 A _106906) = (term1005 _143310 _143311 _143313 A _106906).
Proof. exact (TRANS (@lem8082771 _143310 _143311 _143313 A _106906) (@lem8082869 _143310 _143311 _143313 A _106906)). Qed.
Lemma lem8082872 {_143310 _143311 _143313 A : Type'} (_106906 : A) : (term347 _143310 _143311 _143313 A _106906) = (term1005 _143310 _143311 _143313 A _106906).
Proof. exact (TRANS (@lem8082240 _143310 _143311 _143313 A _106906) (@lem8082871 _143310 _143311 _143313 A _106906)). Qed.
Lemma lem8082873 {_143310 _143311 _143313 A : Type'} (_106906 : A) (h1 : term347 _143310 _143311 _143313 A _106906) : term1005 _143310 _143311 _143313 A _106906.
Proof. exact (EQ_MP (@lem8082872 _143310 _143311 _143313 A _106906) (@lem8081783 _143310 _143311 _143313 A _106906 h1)). Qed.
Lemma lem8082879 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) (a : _143313) : (term273 _143310 _143311 _143313 B s clauses x t c a) = (term273 _143310 _143311 _143313 B s clauses x t c a).
Proof. exact (eq_refl (term273 _143310 _143311 _143313 B s clauses x t c a)). Qed.
Lemma lem8082880 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term271 _143310 _143311 _143313 B s clauses x t c) = (term271 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8082879 _143310 _143311 _143313 B s clauses x t c a)). Qed.
Lemma lem8082881 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8082882 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term284 _143310 _143311 _143313 B s clauses x t c) = (term284 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (MK_COMB (@lem8082881 _143313) (@lem8082880 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8082884 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) : (term274 _143310 _143311 _143313 B s t clauses) = (term274 _143310 _143311 _143313 B s t clauses).
Proof. exact (eq_refl (term274 _143310 _143311 _143313 B s t clauses)). Qed.
Lemma lem8082885 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term285 _143310 _143311 _143313 B s clauses x t c) = (term285 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (MK_COMB (@lem8082884 _143310 _143311 _143313 B s t clauses) (@lem8082882 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8082886 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term287 _143310 _143311 _143313 B s clauses x c) = (term287 _143310 _143311 _143313 B s clauses x c).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 B => @lem8082885 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8082887 {_143311 _143313 B : Type'} : (@ex (_143311 -> _143313 -> B)) = (@ex (_143311 -> _143313 -> B)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> B))). Qed.
Lemma lem8082888 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term289 _143310 _143311 _143313 B s clauses x c) = (term289 _143310 _143311 _143313 B s clauses x c).
Proof. exact (MK_COMB (@lem8082887 _143311 _143313 B) (@lem8082886 _143310 _143311 _143313 B s clauses x c)). Qed.
Lemma lem8082889 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term291 _143310 _143311 _143313 B clauses x c) = (term291 _143310 _143311 _143313 B clauses x c).
Proof. exact (fun_ext (fun s : _143313 -> _143310 => @lem8082888 _143310 _143311 _143313 B s clauses x c)). Qed.
Lemma lem8082890 {_143310 _143313 : Type'} : (@ex (_143313 -> _143310)) = (@ex (_143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143313 -> _143310))). Qed.
Lemma lem8082891 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term293 _143310 _143311 _143313 B clauses x c) = (term293 _143310 _143311 _143313 B clauses x c).
Proof. exact (MK_COMB (@lem8082890 _143310 _143313) (@lem8082889 _143310 _143311 _143313 B clauses x c)). Qed.
Lemma lem8082893 {_143311 _143313 B : Type'} (P : type443 _143311 _143313 B) : (term671 _143311 _143313 B P) = (term672 _143311 _143313 B P).
Proof. exact (@lem18394 (type1412 _143311 _143313 B) P). Qed.
Lemma lem8082894 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) : (term673 _143310 _143311 _143313 B s clauses) = (term674 _143310 _143311 _143313 B s clauses).
Proof. exact (@lem8082893 _143311 _143313 B (term320 _143310 _143311 _143313 B s clauses)). Qed.
Lemma lem8082895 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) : (term321 _143310 _143311 _143313 B s clauses t) = (term270 _143310 _143311 _143313 B s t clauses).
Proof. exact (eq_refl (term321 _143310 _143311 _143313 B s clauses t)). Qed.
Lemma lem8082896 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8082898 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) : (term675 _143310 _143311 _143313 B s clauses t) = (term676 _143310 _143311 _143313 B s t clauses).
Proof. exact (MK_COMB (@lem8082896) (@lem8082895 _143310 _143311 _143313 B s t clauses)). Qed.
Lemma lem8082899 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) : (term677 _143310 _143311 _143313 B s clauses) = (term678 _143310 _143311 _143313 B s clauses).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 B => @lem8082898 _143310 _143311 _143313 B s t clauses)). Qed.
Lemma lem8082900 {_143311 _143313 B : Type'} : (@all (_143311 -> _143313 -> B)) = (@all (_143311 -> _143313 -> B)).
Proof. exact (eq_refl (@all (_143311 -> _143313 -> B))). Qed.
Lemma lem8082901 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) : (term674 _143310 _143311 _143313 B s clauses) = (term679 _143310 _143311 _143313 B s clauses).
Proof. exact (MK_COMB (@lem8082900 _143311 _143313 B) (@lem8082899 _143310 _143311 _143313 B s clauses)). Qed.
Lemma lem8082902 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) : (term673 _143310 _143311 _143313 B s clauses) = (term679 _143310 _143311 _143313 B s clauses).
Proof. exact (TRANS (@lem8082894 _143310 _143311 _143313 B s clauses) (@lem8082901 _143310 _143311 _143313 B s clauses)). Qed.
Lemma lem8082904 {_143313 : Type'} (P : _143313 -> Prop) : (term680 _143313 P) = (term681 _143313 P).
Proof. exact (@lem18394 _143313 P). Qed.
Lemma lem8082905 {_143310 _143313 : Type'} (s : _143313 -> _143310) (x : _143310) : (term682 _143310 _143313 s x) = (term683 _143310 _143313 s x).
Proof. exact (@lem8082904 _143313 (term297 _143310 _143313 s x)). Qed.
Lemma lem8082906 {_143310 _143313 : Type'} (s : _143313 -> _143310) (a : _143313) (x : _143310) : (term298 _143310 _143313 s x a) = ((s a) = x).
Proof. exact (eq_refl (term298 _143310 _143313 s x a)). Qed.
Lemma lem8082907 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8082909 {_143310 _143313 : Type'} (s : _143313 -> _143310) (a : _143313) (x : _143310) : (term684 _143310 _143313 s x a) = (term685 _143310 _143313 s a x).
Proof. exact (MK_COMB (@lem8082907) (@lem8082906 _143310 _143313 s a x)). Qed.
Lemma lem8082910 {_143310 _143313 : Type'} (s : _143313 -> _143310) (x : _143310) : (term686 _143310 _143313 s x) = (term687 _143310 _143313 s x).
Proof. exact (fun_ext (fun a : _143313 => @lem8082909 _143310 _143313 s a x)). Qed.
Lemma lem8082911 {_143313 : Type'} : (@all _143313) = (@all _143313).
Proof. exact (eq_refl (@all _143313)). Qed.
Lemma lem8082912 {_143310 _143313 : Type'} (s : _143313 -> _143310) (x : _143310) : (term683 _143310 _143313 s x) = (term688 _143310 _143313 s x).
Proof. exact (MK_COMB (@lem8082911 _143313) (@lem8082910 _143310 _143313 s x)). Qed.
Lemma lem8082913 {_143310 _143313 : Type'} (s : _143313 -> _143310) (x : _143310) : (term682 _143310 _143313 s x) = (term688 _143310 _143313 s x).
Proof. exact (TRANS (@lem8082905 _143310 _143313 s x) (@lem8082912 _143310 _143313 s x)). Qed.
Lemma lem8082914 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8082915 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) : (term689 _143310 _143311 _143313 B s clauses) = (term690 _143310 _143311 _143313 B s clauses).
Proof. exact (MK_COMB (@lem8082914) (@lem8082902 _143310 _143311 _143313 B s clauses)). Qed.
Lemma lem8082916 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : (term691 _143310 _143311 _143313 B clauses s x) = (term692 _143310 _143311 _143313 B clauses s x).
Proof. exact (MK_COMB (@lem8082915 _143310 _143311 _143313 B s clauses) (@lem8082913 _143310 _143313 s x)). Qed.
Lemma lem8082917 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : (term693 _143310 _143311 _143313 B clauses s x) = (term691 _143310 _143311 _143313 B clauses s x).
Proof. exact (@lem17045 (term329 _143310 _143311 _143313 B s clauses) (term308 _143310 _143313 s x)). Qed.
Lemma lem8082918 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : (term693 _143310 _143311 _143313 B clauses s x) = (term692 _143310 _143311 _143313 B clauses s x).
Proof. exact (TRANS (@lem8082917 _143310 _143311 _143313 B clauses s x) (@lem8082916 _143310 _143311 _143313 B clauses s x)). Qed.
Lemma lem8082919 {_143310 _143313 : Type'} (P : type805 _143310 _143313) : (term694 _143310 _143313 P) = (term695 _143310 _143313 P).
Proof. exact (@lem18394 (_143313 -> _143310) P). Qed.
Lemma lem8082920 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) : (term338 _143310 _143311 _143313 B clauses x) = (term696 _143310 _143311 _143313 B clauses x).
Proof. exact (@lem8082919 _143310 _143313 (term334 _143310 _143311 _143313 B clauses x)). Qed.
Lemma lem8082921 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : (term697 _143310 _143311 _143313 B clauses x s) = (term332 _143310 _143311 _143313 B clauses s x).
Proof. exact (eq_refl (term697 _143310 _143311 _143313 B clauses x s)). Qed.
Lemma lem8082922 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8082923 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : (term698 _143310 _143311 _143313 B clauses x s) = (term693 _143310 _143311 _143313 B clauses s x).
Proof. exact (MK_COMB (@lem8082922) (@lem8082921 _143310 _143311 _143313 B clauses s x)). Qed.
Lemma lem8082924 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (s : _143313 -> _143310) (x : _143310) : (term698 _143310 _143311 _143313 B clauses x s) = (term692 _143310 _143311 _143313 B clauses s x).
Proof. exact (TRANS (@lem8082923 _143310 _143311 _143313 B clauses s x) (@lem8082918 _143310 _143311 _143313 B clauses s x)). Qed.
Lemma lem8082925 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) : (term699 _143310 _143311 _143313 B clauses x) = (term700 _143310 _143311 _143313 B clauses x).
Proof. exact (fun_ext (fun s : _143313 -> _143310 => @lem8082924 _143310 _143311 _143313 B clauses s x)). Qed.
Lemma lem8082926 {_143310 _143313 : Type'} : (@all (_143313 -> _143310)) = (@all (_143313 -> _143310)).
Proof. exact (eq_refl (@all (_143313 -> _143310))). Qed.
Lemma lem8082927 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) : (term696 _143310 _143311 _143313 B clauses x) = (term701 _143310 _143311 _143313 B clauses x).
Proof. exact (MK_COMB (@lem8082926 _143310 _143313) (@lem8082925 _143310 _143311 _143313 B clauses x)). Qed.
Lemma lem8082928 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) : (term338 _143310 _143311 _143313 B clauses x) = (term701 _143310 _143311 _143313 B clauses x).
Proof. exact (TRANS (@lem8082920 _143310 _143311 _143313 B clauses x) (@lem8082927 _143310 _143311 _143313 B clauses x)). Qed.
Lemma lem8082929 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : ((@CASEWISE B _143313 _143310 _143311 clauses c x) = _106907) = ((@CASEWISE B _143313 _143310 _143311 clauses c x) = _106907).
Proof. exact (eq_refl ((@CASEWISE B _143313 _143310 _143311 clauses c x) = _106907)). Qed.
Lemma lem8082930 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8082931 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) : (term339 _143310 _143311 _143313 B clauses x) = (term702 _143310 _143311 _143313 B clauses x).
Proof. exact (MK_COMB (@lem8082930) (@lem8082928 _143310 _143311 _143313 B clauses x)). Qed.
Lemma lem8082932 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term340 _143310 _143311 _143313 B clauses c x _106907) = (term703 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (MK_COMB (@lem8082931 _143310 _143311 _143313 B clauses x) (@lem8082929 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8082933 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8082934 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term294 _143310 _143311 _143313 B clauses x c) = (term294 _143310 _143311 _143313 B clauses x c).
Proof. exact (MK_COMB (@lem8082933) (@lem8082891 _143310 _143311 _143313 B clauses x c)). Qed.
Lemma lem8082935 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term341 _143310 _143311 _143313 B clauses c x _106907) = (term704 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (MK_COMB (@lem8082934 _143310 _143311 _143313 B clauses x c) (@lem8082932 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8082936 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term342 _143310 _143311 _143313 B clauses c _106907) = (term705 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (fun_ext (fun x : _143310 => @lem8082935 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8082937 {_143310 : Type'} : (@all _143310) = (@all _143310).
Proof. exact (eq_refl (@all _143310)). Qed.
Lemma lem8082938 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term343 _143310 _143311 _143313 B clauses c _106907) = (term706 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (MK_COMB (@lem8082937 _143310) (@lem8082936 _143310 _143311 _143313 B clauses c _106907)). Qed.
Lemma lem8082939 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term344 _143310 _143311 _143313 B clauses _106907) = (term707 _143310 _143311 _143313 B clauses _106907).
Proof. exact (fun_ext (fun c : _143311 => @lem8082938 _143310 _143311 _143313 B clauses c _106907)). Qed.
Lemma lem8082940 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8082941 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term345 _143310 _143311 _143313 B clauses _106907) = (term708 _143310 _143311 _143313 B clauses _106907).
Proof. exact (MK_COMB (@lem8082940 _143311) (@lem8082939 _143310 _143311 _143313 B clauses _106907)). Qed.
Lemma lem8082942 {_143310 _143311 _143313 B : Type'} (_106907 : B) : (term346 _143310 _143311 _143313 B _106907) = (term709 _143310 _143311 _143313 B _106907).
Proof. exact (fun_ext (fun clauses : type1637 _143310 _143311 _143313 B => @lem8082941 _143310 _143311 _143313 B clauses _106907)). Qed.
Lemma lem8082943 {_143310 _143311 _143313 B : Type'} : (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B)))) = (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))))). Qed.
Lemma lem8082944 {_143310 _143311 _143313 B : Type'} (_106907 : B) : (term347 _143310 _143311 _143313 B _106907) = (term710 _143310 _143311 _143313 B _106907).
Proof. exact (MK_COMB (@lem8082943 _143310 _143311 _143313 B) (@lem8082942 _143310 _143311 _143313 B _106907)). Qed.
Lemma lem8083159 {A : Type'} (P : Prop) (Q : A -> Prop) : (term267 A P Q) = (term266 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem8083160 {_143313 : Type'} (P : Prop) (Q : _143313 -> Prop) : (term267 _143313 P Q) = (term266 _143313 P Q).
Proof. exact (@lem8083159 _143313 P Q). Qed.
Lemma lem8083161 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term269 _143310 _143311 _143313 B s clauses x t c) = (term268 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (@lem8083160 _143313 (term270 _143310 _143311 _143313 B s t clauses) (term271 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8083162 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) (a : _143313) : (term272 _143310 _143311 _143313 B s clauses x t c a) = (term273 _143310 _143311 _143313 B s clauses x t c a).
Proof. exact (eq_refl (term272 _143310 _143311 _143313 B s clauses x t c a)). Qed.
Lemma lem8083163 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term282 _143310 _143311 _143313 B s clauses x t c) = (term271 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8083162 _143310 _143311 _143313 B s clauses x t c a)). Qed.
Lemma lem8083164 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8083165 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term283 _143310 _143311 _143313 B s clauses x t c) = (term284 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (MK_COMB (@lem8083164 _143313) (@lem8083163 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8083166 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) : (term274 _143310 _143311 _143313 B s t clauses) = (term274 _143310 _143311 _143313 B s t clauses).
Proof. exact (eq_refl (term274 _143310 _143311 _143313 B s t clauses)). Qed.
Lemma lem8083167 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term269 _143310 _143311 _143313 B s clauses x t c) = (term285 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (MK_COMB (@lem8083166 _143310 _143311 _143313 B s t clauses) (@lem8083165 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8083168 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8083169 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term711 _143310 _143311 _143313 B s clauses x t c) = (term712 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (MK_COMB (@lem8083168) (@lem8083167 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8083170 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) (a : _143313) : (term272 _143310 _143311 _143313 B s clauses x t c a) = (term273 _143310 _143311 _143313 B s clauses x t c a).
Proof. exact (eq_refl (term272 _143310 _143311 _143313 B s clauses x t c a)). Qed.
Lemma lem8083171 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) : (term274 _143310 _143311 _143313 B s t clauses) = (term274 _143310 _143311 _143313 B s t clauses).
Proof. exact (eq_refl (term274 _143310 _143311 _143313 B s t clauses)). Qed.
Lemma lem8083172 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) (a : _143313) : (term275 _143310 _143311 _143313 B s clauses x t c a) = (term276 _143310 _143311 _143313 B s clauses x t c a).
Proof. exact (MK_COMB (@lem8083171 _143310 _143311 _143313 B s t clauses) (@lem8083170 _143310 _143311 _143313 B s clauses x t c a)). Qed.
Lemma lem8083173 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term277 _143310 _143311 _143313 B s clauses x t c) = (term278 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8083172 _143310 _143311 _143313 B s clauses x t c a)). Qed.
Lemma lem8083174 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8083175 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term268 _143310 _143311 _143313 B s clauses x t c) = (term279 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (MK_COMB (@lem8083174 _143313) (@lem8083173 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8083176 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : ((term269 _143310 _143311 _143313 B s clauses x t c) = (term268 _143310 _143311 _143313 B s clauses x t c)) = ((term285 _143310 _143311 _143313 B s clauses x t c) = (term279 _143310 _143311 _143313 B s clauses x t c)).
Proof. exact (MK_COMB (@lem8083169 _143310 _143311 _143313 B s clauses x t c) (@lem8083175 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8083177 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term285 _143310 _143311 _143313 B s clauses x t c) = (term279 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (EQ_MP (@lem8083176 _143310 _143311 _143313 B s clauses x t c) (@lem8083161 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8083178 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term287 _143310 _143311 _143313 B s clauses x c) = (term286 _143310 _143311 _143313 B s clauses x c).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 B => @lem8083177 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8083179 {_143311 _143313 B : Type'} : (@ex (_143311 -> _143313 -> B)) = (@ex (_143311 -> _143313 -> B)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> B))). Qed.
Lemma lem8083180 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term289 _143310 _143311 _143313 B s clauses x c) = (term288 _143310 _143311 _143313 B s clauses x c).
Proof. exact (MK_COMB (@lem8083179 _143311 _143313 B) (@lem8083178 _143310 _143311 _143313 B s clauses x c)). Qed.
Lemma lem8083181 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term291 _143310 _143311 _143313 B clauses x c) = (term290 _143310 _143311 _143313 B clauses x c).
Proof. exact (fun_ext (fun s : _143313 -> _143310 => @lem8083180 _143310 _143311 _143313 B s clauses x c)). Qed.
Lemma lem8083182 {_143310 _143313 : Type'} : (@ex (_143313 -> _143310)) = (@ex (_143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143313 -> _143310))). Qed.
Lemma lem8083183 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term293 _143310 _143311 _143313 B clauses x c) = (term292 _143310 _143311 _143313 B clauses x c).
Proof. exact (MK_COMB (@lem8083182 _143310 _143313) (@lem8083181 _143310 _143311 _143313 B clauses x c)). Qed.
Lemma lem8083184 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8083185 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term294 _143310 _143311 _143313 B clauses x c) = (term136 _143310 _143311 _143313 B clauses x c).
Proof. exact (MK_COMB (@lem8083184) (@lem8083183 _143310 _143311 _143313 B clauses x c)). Qed.
Lemma lem8083186 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term703 _143310 _143311 _143313 B clauses c x _106907) = (term703 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (eq_refl (term703 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083187 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term704 _143310 _143311 _143313 B clauses c x _106907) = (term713 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (MK_COMB (@lem8083185 _143310 _143311 _143313 B clauses x c) (@lem8083186 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083189 {A : Type'} (P : A -> Prop) (Q : Prop) : (term714 A P Q) = (term715 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8083190 {_143310 _143313 : Type'} (P : type805 _143310 _143313) (Q : Prop) : (term716 _143310 _143313 P Q) = (term717 _143310 _143313 P Q).
Proof. exact (@lem8083189 (_143313 -> _143310) P Q). Qed.
Lemma lem8083191 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term718 _143310 _143311 _143313 B clauses c x _106907) = (term719 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (@lem8083190 _143310 _143313 (term290 _143310 _143311 _143313 B clauses x c) (term703 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083192 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term720 _143310 _143311 _143313 B clauses x c s) = (term288 _143310 _143311 _143313 B s clauses x c).
Proof. exact (eq_refl (term720 _143310 _143311 _143313 B clauses x c s)). Qed.
Lemma lem8083193 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term721 _143310 _143311 _143313 B clauses x c) = (term290 _143310 _143311 _143313 B clauses x c).
Proof. exact (fun_ext (fun s : _143313 -> _143310 => @lem8083192 _143310 _143311 _143313 B s clauses x c)). Qed.
Lemma lem8083194 {_143310 _143313 : Type'} : (@ex (_143313 -> _143310)) = (@ex (_143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143313 -> _143310))). Qed.
Lemma lem8083195 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term722 _143310 _143311 _143313 B clauses x c) = (term292 _143310 _143311 _143313 B clauses x c).
Proof. exact (MK_COMB (@lem8083194 _143310 _143313) (@lem8083193 _143310 _143311 _143313 B clauses x c)). Qed.
Lemma lem8083196 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8083197 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term723 _143310 _143311 _143313 B clauses x c) = (term136 _143310 _143311 _143313 B clauses x c).
Proof. exact (MK_COMB (@lem8083196) (@lem8083195 _143310 _143311 _143313 B clauses x c)). Qed.
Lemma lem8083198 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term703 _143310 _143311 _143313 B clauses c x _106907) = (term703 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (eq_refl (term703 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083199 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term718 _143310 _143311 _143313 B clauses c x _106907) = (term713 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (MK_COMB (@lem8083197 _143310 _143311 _143313 B clauses x c) (@lem8083198 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083200 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8083201 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term724 _143310 _143311 _143313 B clauses c x _106907) = (term725 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (MK_COMB (@lem8083200) (@lem8083199 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083202 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term720 _143310 _143311 _143313 B clauses x c s) = (term288 _143310 _143311 _143313 B s clauses x c).
Proof. exact (eq_refl (term720 _143310 _143311 _143313 B clauses x c s)). Qed.
Lemma lem8083203 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8083204 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term726 _143310 _143311 _143313 B clauses x c s) = (term727 _143310 _143311 _143313 B s clauses x c).
Proof. exact (MK_COMB (@lem8083203) (@lem8083202 _143310 _143311 _143313 B s clauses x c)). Qed.
Lemma lem8083205 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term703 _143310 _143311 _143313 B clauses c x _106907) = (term703 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (eq_refl (term703 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083206 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term728 _143310 _143311 _143313 B s clauses c x _106907) = (term729 _143310 _143311 _143313 B s clauses c x _106907).
Proof. exact (MK_COMB (@lem8083204 _143310 _143311 _143313 B s clauses x c) (@lem8083205 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083207 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term730 _143310 _143311 _143313 B clauses c x _106907) = (term731 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (fun_ext (fun s : _143313 -> _143310 => @lem8083206 _143310 _143311 _143313 B s clauses c x _106907)). Qed.
Lemma lem8083208 {_143310 _143313 : Type'} : (@ex (_143313 -> _143310)) = (@ex (_143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143313 -> _143310))). Qed.
Lemma lem8083209 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term719 _143310 _143311 _143313 B clauses c x _106907) = (term732 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (MK_COMB (@lem8083208 _143310 _143313) (@lem8083207 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083210 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : ((term718 _143310 _143311 _143313 B clauses c x _106907) = (term719 _143310 _143311 _143313 B clauses c x _106907)) = ((term713 _143310 _143311 _143313 B clauses c x _106907) = (term732 _143310 _143311 _143313 B clauses c x _106907)).
Proof. exact (MK_COMB (@lem8083201 _143310 _143311 _143313 B clauses c x _106907) (@lem8083209 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083211 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term713 _143310 _143311 _143313 B clauses c x _106907) = (term732 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (EQ_MP (@lem8083210 _143310 _143311 _143313 B clauses c x _106907) (@lem8083191 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083213 {A : Type'} (P : A -> Prop) (Q : Prop) : (term714 A P Q) = (term715 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8083214 {_143311 _143313 B : Type'} (P : type443 _143311 _143313 B) (Q : Prop) : (term733 _143311 _143313 B P Q) = (term734 _143311 _143313 B P Q).
Proof. exact (@lem8083213 (type1412 _143311 _143313 B) P Q). Qed.
Lemma lem8083215 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term735 _143310 _143311 _143313 B s clauses c x _106907) = (term736 _143310 _143311 _143313 B s clauses c x _106907).
Proof. exact (@lem8083214 _143311 _143313 B (term286 _143310 _143311 _143313 B s clauses x c) (term703 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083216 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term737 _143310 _143311 _143313 B s clauses x c t) = (term279 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (eq_refl (term737 _143310 _143311 _143313 B s clauses x c t)). Qed.
Lemma lem8083217 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term738 _143310 _143311 _143313 B s clauses x c) = (term286 _143310 _143311 _143313 B s clauses x c).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 B => @lem8083216 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8083218 {_143311 _143313 B : Type'} : (@ex (_143311 -> _143313 -> B)) = (@ex (_143311 -> _143313 -> B)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> B))). Qed.
Lemma lem8083219 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term739 _143310 _143311 _143313 B s clauses x c) = (term288 _143310 _143311 _143313 B s clauses x c).
Proof. exact (MK_COMB (@lem8083218 _143311 _143313 B) (@lem8083217 _143310 _143311 _143313 B s clauses x c)). Qed.
Lemma lem8083220 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8083221 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (c : _143311) : (term740 _143310 _143311 _143313 B s clauses x c) = (term727 _143310 _143311 _143313 B s clauses x c).
Proof. exact (MK_COMB (@lem8083220) (@lem8083219 _143310 _143311 _143313 B s clauses x c)). Qed.
Lemma lem8083222 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term703 _143310 _143311 _143313 B clauses c x _106907) = (term703 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (eq_refl (term703 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083223 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term735 _143310 _143311 _143313 B s clauses c x _106907) = (term729 _143310 _143311 _143313 B s clauses c x _106907).
Proof. exact (MK_COMB (@lem8083221 _143310 _143311 _143313 B s clauses x c) (@lem8083222 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083224 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8083225 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term741 _143310 _143311 _143313 B s clauses c x _106907) = (term742 _143310 _143311 _143313 B s clauses c x _106907).
Proof. exact (MK_COMB (@lem8083224) (@lem8083223 _143310 _143311 _143313 B s clauses c x _106907)). Qed.
Lemma lem8083226 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term737 _143310 _143311 _143313 B s clauses x c t) = (term279 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (eq_refl (term737 _143310 _143311 _143313 B s clauses x c t)). Qed.
Lemma lem8083227 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8083228 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term743 _143310 _143311 _143313 B s clauses x c t) = (term744 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (MK_COMB (@lem8083227) (@lem8083226 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8083229 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term703 _143310 _143311 _143313 B clauses c x _106907) = (term703 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (eq_refl (term703 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083230 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term745 _143310 _143311 _143313 B s t clauses c x _106907) = (term746 _143310 _143311 _143313 B s t clauses c x _106907).
Proof. exact (MK_COMB (@lem8083228 _143310 _143311 _143313 B s clauses x t c) (@lem8083229 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083231 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term747 _143310 _143311 _143313 B s clauses c x _106907) = (term748 _143310 _143311 _143313 B s clauses c x _106907).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 B => @lem8083230 _143310 _143311 _143313 B s t clauses c x _106907)). Qed.
Lemma lem8083232 {_143311 _143313 B : Type'} : (@ex (_143311 -> _143313 -> B)) = (@ex (_143311 -> _143313 -> B)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> B))). Qed.
Lemma lem8083233 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term736 _143310 _143311 _143313 B s clauses c x _106907) = (term749 _143310 _143311 _143313 B s clauses c x _106907).
Proof. exact (MK_COMB (@lem8083232 _143311 _143313 B) (@lem8083231 _143310 _143311 _143313 B s clauses c x _106907)). Qed.
Lemma lem8083234 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : ((term735 _143310 _143311 _143313 B s clauses c x _106907) = (term736 _143310 _143311 _143313 B s clauses c x _106907)) = ((term729 _143310 _143311 _143313 B s clauses c x _106907) = (term749 _143310 _143311 _143313 B s clauses c x _106907)).
Proof. exact (MK_COMB (@lem8083225 _143310 _143311 _143313 B s clauses c x _106907) (@lem8083233 _143310 _143311 _143313 B s clauses c x _106907)). Qed.
Lemma lem8083235 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term729 _143310 _143311 _143313 B s clauses c x _106907) = (term749 _143310 _143311 _143313 B s clauses c x _106907).
Proof. exact (EQ_MP (@lem8083234 _143310 _143311 _143313 B s clauses c x _106907) (@lem8083215 _143310 _143311 _143313 B s clauses c x _106907)). Qed.
Lemma lem8083237 {A : Type'} (P : A -> Prop) (Q : Prop) : (term714 A P Q) = (term715 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8083238 {_143313 : Type'} (P : _143313 -> Prop) (Q : Prop) : (term714 _143313 P Q) = (term715 _143313 P Q).
Proof. exact (@lem8083237 _143313 P Q). Qed.
Lemma lem8083239 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term750 _143310 _143311 _143313 B s t clauses c x _106907) = (term751 _143310 _143311 _143313 B s t clauses c x _106907).
Proof. exact (@lem8083238 _143313 (term278 _143310 _143311 _143313 B s clauses x t c) (term703 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083240 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) (a : _143313) : (term752 _143310 _143311 _143313 B s clauses x t c a) = (term276 _143310 _143311 _143313 B s clauses x t c a).
Proof. exact (eq_refl (term752 _143310 _143311 _143313 B s clauses x t c a)). Qed.
Lemma lem8083241 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term753 _143310 _143311 _143313 B s clauses x t c) = (term278 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8083240 _143310 _143311 _143313 B s clauses x t c a)). Qed.
Lemma lem8083242 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8083243 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term754 _143310 _143311 _143313 B s clauses x t c) = (term279 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (MK_COMB (@lem8083242 _143313) (@lem8083241 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8083244 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8083245 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) : (term755 _143310 _143311 _143313 B s clauses x t c) = (term744 _143310 _143311 _143313 B s clauses x t c).
Proof. exact (MK_COMB (@lem8083244) (@lem8083243 _143310 _143311 _143313 B s clauses x t c)). Qed.
Lemma lem8083246 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term703 _143310 _143311 _143313 B clauses c x _106907) = (term703 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (eq_refl (term703 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083247 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term750 _143310 _143311 _143313 B s t clauses c x _106907) = (term746 _143310 _143311 _143313 B s t clauses c x _106907).
Proof. exact (MK_COMB (@lem8083245 _143310 _143311 _143313 B s clauses x t c) (@lem8083246 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083248 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8083249 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term756 _143310 _143311 _143313 B s t clauses c x _106907) = (term757 _143310 _143311 _143313 B s t clauses c x _106907).
Proof. exact (MK_COMB (@lem8083248) (@lem8083247 _143310 _143311 _143313 B s t clauses c x _106907)). Qed.
Lemma lem8083250 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) (a : _143313) : (term752 _143310 _143311 _143313 B s clauses x t c a) = (term276 _143310 _143311 _143313 B s clauses x t c a).
Proof. exact (eq_refl (term752 _143310 _143311 _143313 B s clauses x t c a)). Qed.
Lemma lem8083251 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8083252 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (x : _143310) (t : type1412 _143311 _143313 B) (c : _143311) (a : _143313) : (term758 _143310 _143311 _143313 B s clauses x t c a) = (term759 _143310 _143311 _143313 B s clauses x t c a).
Proof. exact (MK_COMB (@lem8083251) (@lem8083250 _143310 _143311 _143313 B s clauses x t c a)). Qed.
Lemma lem8083253 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term703 _143310 _143311 _143313 B clauses c x _106907) = (term703 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (eq_refl (term703 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083254 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 B) (a : _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term760 _143310 _143311 _143313 B s t a clauses c x _106907) = (term761 _143310 _143311 _143313 B s t a clauses c x _106907).
Proof. exact (MK_COMB (@lem8083252 _143310 _143311 _143313 B s clauses x t c a) (@lem8083253 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083255 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term762 _143310 _143311 _143313 B s t clauses c x _106907) = (term763 _143310 _143311 _143313 B s t clauses c x _106907).
Proof. exact (fun_ext (fun a : _143313 => @lem8083254 _143310 _143311 _143313 B s t a clauses c x _106907)). Qed.
Lemma lem8083256 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8083257 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term751 _143310 _143311 _143313 B s t clauses c x _106907) = (term764 _143310 _143311 _143313 B s t clauses c x _106907).
Proof. exact (MK_COMB (@lem8083256 _143313) (@lem8083255 _143310 _143311 _143313 B s t clauses c x _106907)). Qed.
Lemma lem8083258 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : ((term750 _143310 _143311 _143313 B s t clauses c x _106907) = (term751 _143310 _143311 _143313 B s t clauses c x _106907)) = ((term746 _143310 _143311 _143313 B s t clauses c x _106907) = (term764 _143310 _143311 _143313 B s t clauses c x _106907)).
Proof. exact (MK_COMB (@lem8083249 _143310 _143311 _143313 B s t clauses c x _106907) (@lem8083257 _143310 _143311 _143313 B s t clauses c x _106907)). Qed.
Lemma lem8083259 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term746 _143310 _143311 _143313 B s t clauses c x _106907) = (term764 _143310 _143311 _143313 B s t clauses c x _106907).
Proof. exact (EQ_MP (@lem8083258 _143310 _143311 _143313 B s t clauses c x _106907) (@lem8083239 _143310 _143311 _143313 B s t clauses c x _106907)). Qed.
Lemma lem8083260 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term748 _143310 _143311 _143313 B s clauses c x _106907) = (term765 _143310 _143311 _143313 B s clauses c x _106907).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 B => @lem8083259 _143310 _143311 _143313 B s t clauses c x _106907)). Qed.
Lemma lem8083261 {_143311 _143313 B : Type'} : (@ex (_143311 -> _143313 -> B)) = (@ex (_143311 -> _143313 -> B)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> B))). Qed.
Lemma lem8083262 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term749 _143310 _143311 _143313 B s clauses c x _106907) = (term766 _143310 _143311 _143313 B s clauses c x _106907).
Proof. exact (MK_COMB (@lem8083261 _143311 _143313 B) (@lem8083260 _143310 _143311 _143313 B s clauses c x _106907)). Qed.
Lemma lem8083263 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term729 _143310 _143311 _143313 B s clauses c x _106907) = (term766 _143310 _143311 _143313 B s clauses c x _106907).
Proof. exact (TRANS (@lem8083235 _143310 _143311 _143313 B s clauses c x _106907) (@lem8083262 _143310 _143311 _143313 B s clauses c x _106907)). Qed.
Lemma lem8083264 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term731 _143310 _143311 _143313 B clauses c x _106907) = (term767 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (fun_ext (fun s : _143313 -> _143310 => @lem8083263 _143310 _143311 _143313 B s clauses c x _106907)). Qed.
Lemma lem8083265 {_143310 _143313 : Type'} : (@ex (_143313 -> _143310)) = (@ex (_143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143313 -> _143310))). Qed.
Lemma lem8083266 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term732 _143310 _143311 _143313 B clauses c x _106907) = (term768 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (MK_COMB (@lem8083265 _143310 _143313) (@lem8083264 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083267 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term713 _143310 _143311 _143313 B clauses c x _106907) = (term768 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (TRANS (@lem8083211 _143310 _143311 _143313 B clauses c x _106907) (@lem8083266 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083268 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term704 _143310 _143311 _143313 B clauses c x _106907) = (term768 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (TRANS (@lem8083187 _143310 _143311 _143313 B clauses c x _106907) (@lem8083267 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083269 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term705 _143310 _143311 _143313 B clauses c _106907) = (term769 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (fun_ext (fun x : _143310 => @lem8083268 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083270 {_143310 : Type'} : (@all _143310) = (@all _143310).
Proof. exact (eq_refl (@all _143310)). Qed.
Lemma lem8083271 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term706 _143310 _143311 _143313 B clauses c _106907) = (term770 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (MK_COMB (@lem8083270 _143310) (@lem8083269 _143310 _143311 _143313 B clauses c _106907)). Qed.
Lemma lem8083273 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8083274 {_143310 _143313 : Type'} (P : type1372 _143310 _143313) : (term773 _143310 _143313 P) = (term774 _143310 _143313 P).
Proof. exact (@lem8083273 _143310 (_143313 -> _143310) P). Qed.
Lemma lem8083275 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term775 _143310 _143311 _143313 B clauses c _106907) = (term776 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (@lem8083274 _143310 _143313 (term777 _143310 _143311 _143313 B clauses c _106907)). Qed.
Lemma lem8083276 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term778 _143310 _143311 _143313 B clauses c _106907 x) = (term767 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (eq_refl (term778 _143310 _143311 _143313 B clauses c _106907 x)). Qed.
Lemma lem8083277 {_143310 _143313 : Type'} (s : _143313 -> _143310) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8083278 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) (s : _143313 -> _143310) : (term779 _143310 _143311 _143313 B clauses c _106907 x s) = (term780 _143310 _143311 _143313 B clauses c x _106907 s).
Proof. exact (MK_COMB (@lem8083276 _143310 _143311 _143313 B clauses c x _106907) (@lem8083277 _143310 _143313 s)). Qed.
Lemma lem8083279 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term780 _143310 _143311 _143313 B clauses c x _106907 s) = (term766 _143310 _143311 _143313 B s clauses c x _106907).
Proof. exact (eq_refl (term780 _143310 _143311 _143313 B clauses c x _106907 s)). Qed.
Lemma lem8083280 {_143310 _143311 _143313 B : Type'} (s : _143313 -> _143310) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term779 _143310 _143311 _143313 B clauses c _106907 x s) = (term766 _143310 _143311 _143313 B s clauses c x _106907).
Proof. exact (TRANS (@lem8083278 _143310 _143311 _143313 B clauses c x _106907 s) (@lem8083279 _143310 _143311 _143313 B s clauses c x _106907)). Qed.
Lemma lem8083281 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term781 _143310 _143311 _143313 B clauses c _106907 x) = (term767 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (fun_ext (fun s : _143313 -> _143310 => @lem8083280 _143310 _143311 _143313 B s clauses c x _106907)). Qed.
Lemma lem8083282 {_143310 _143313 : Type'} : (@ex (_143313 -> _143310)) = (@ex (_143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143313 -> _143310))). Qed.
Lemma lem8083283 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term782 _143310 _143311 _143313 B clauses c _106907 x) = (term768 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (MK_COMB (@lem8083282 _143310 _143313) (@lem8083281 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083284 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term783 _143310 _143311 _143313 B clauses c _106907) = (term769 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (fun_ext (fun x : _143310 => @lem8083283 _143310 _143311 _143313 B clauses c x _106907)). Qed.
Lemma lem8083285 {_143310 : Type'} : (@all _143310) = (@all _143310).
Proof. exact (eq_refl (@all _143310)). Qed.
Lemma lem8083286 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term775 _143310 _143311 _143313 B clauses c _106907) = (term770 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (MK_COMB (@lem8083285 _143310) (@lem8083284 _143310 _143311 _143313 B clauses c _106907)). Qed.
Lemma lem8083287 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8083288 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term784 _143310 _143311 _143313 B clauses c _106907) = (term785 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (MK_COMB (@lem8083287) (@lem8083286 _143310 _143311 _143313 B clauses c _106907)). Qed.
Lemma lem8083289 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term778 _143310 _143311 _143313 B clauses c _106907 x) = (term767 _143310 _143311 _143313 B clauses c x _106907).
Proof. exact (eq_refl (term778 _143310 _143311 _143313 B clauses c _106907 x)). Qed.
Lemma lem8083290 {_143310 _143313 : Type'} (s : type1410 _143310 _143313) (x : _143310) : (s x) = (s x).
Proof. exact (eq_refl (s x)). Qed.
Lemma lem8083291 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) (s : type1410 _143310 _143313) (x : _143310) : (term786 _143310 _143311 _143313 B clauses c _106907 s x) = (term787 _143310 _143311 _143313 B clauses c _106907 s x).
Proof. exact (MK_COMB (@lem8083289 _143310 _143311 _143313 B clauses c x _106907) (@lem8083290 _143310 _143313 s x)). Qed.
Lemma lem8083292 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term787 _143310 _143311 _143313 B clauses c _106907 s x) = (term788 _143310 _143311 _143313 B s clauses c x _106907).
Proof. exact (eq_refl (term787 _143310 _143311 _143313 B clauses c _106907 s x)). Qed.
Lemma lem8083293 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term786 _143310 _143311 _143313 B clauses c _106907 s x) = (term788 _143310 _143311 _143313 B s clauses c x _106907).
Proof. exact (TRANS (@lem8083291 _143310 _143311 _143313 B clauses c _106907 s x) (@lem8083292 _143310 _143311 _143313 B s clauses c x _106907)). Qed.
Lemma lem8083294 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term789 _143310 _143311 _143313 B clauses c _106907 s) = (term790 _143310 _143311 _143313 B s clauses c _106907).
Proof. exact (fun_ext (fun x : _143310 => @lem8083293 _143310 _143311 _143313 B s clauses c x _106907)). Qed.
Lemma lem8083295 {_143310 : Type'} : (@all _143310) = (@all _143310).
Proof. exact (eq_refl (@all _143310)). Qed.
Lemma lem8083296 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term791 _143310 _143311 _143313 B clauses c _106907 s) = (term792 _143310 _143311 _143313 B s clauses c _106907).
Proof. exact (MK_COMB (@lem8083295 _143310) (@lem8083294 _143310 _143311 _143313 B s clauses c _106907)). Qed.
Lemma lem8083297 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term793 _143310 _143311 _143313 B clauses c _106907) = (term794 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (fun_ext (fun s : type1410 _143310 _143313 => @lem8083296 _143310 _143311 _143313 B s clauses c _106907)). Qed.
Lemma lem8083298 {_143310 _143313 : Type'} : (@ex (_143310 -> _143313 -> _143310)) = (@ex (_143310 -> _143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143310 -> _143313 -> _143310))). Qed.
Lemma lem8083299 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term776 _143310 _143311 _143313 B clauses c _106907) = (term795 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (MK_COMB (@lem8083298 _143310 _143313) (@lem8083297 _143310 _143311 _143313 B clauses c _106907)). Qed.
Lemma lem8083300 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : ((term775 _143310 _143311 _143313 B clauses c _106907) = (term776 _143310 _143311 _143313 B clauses c _106907)) = ((term770 _143310 _143311 _143313 B clauses c _106907) = (term795 _143310 _143311 _143313 B clauses c _106907)).
Proof. exact (MK_COMB (@lem8083288 _143310 _143311 _143313 B clauses c _106907) (@lem8083299 _143310 _143311 _143313 B clauses c _106907)). Qed.
Lemma lem8083301 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term770 _143310 _143311 _143313 B clauses c _106907) = (term795 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (EQ_MP (@lem8083300 _143310 _143311 _143313 B clauses c _106907) (@lem8083275 _143310 _143311 _143313 B clauses c _106907)). Qed.
Lemma lem8083303 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8083304 {_143310 _143311 _143313 B : Type'} (P : type1370 _143310 _143311 _143313 B) : (term796 _143310 _143311 _143313 B P) = (term797 _143310 _143311 _143313 B P).
Proof. exact (@lem8083303 _143310 (type1412 _143311 _143313 B) P). Qed.
Lemma lem8083305 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term798 _143310 _143311 _143313 B s clauses c _106907) = (term799 _143310 _143311 _143313 B s clauses c _106907).
Proof. exact (@lem8083304 _143310 _143311 _143313 B (term800 _143310 _143311 _143313 B s clauses c _106907)). Qed.
Lemma lem8083306 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term801 _143310 _143311 _143313 B s clauses c _106907 x) = (term802 _143310 _143311 _143313 B s clauses c x _106907).
Proof. exact (eq_refl (term801 _143310 _143311 _143313 B s clauses c _106907 x)). Qed.
Lemma lem8083307 {_143311 _143313 B : Type'} (t : type1412 _143311 _143313 B) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8083308 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) (t : type1412 _143311 _143313 B) : (term803 _143310 _143311 _143313 B s clauses c _106907 x t) = (term804 _143310 _143311 _143313 B s clauses c x _106907 t).
Proof. exact (MK_COMB (@lem8083306 _143310 _143311 _143313 B s clauses c x _106907) (@lem8083307 _143311 _143313 B t)). Qed.
Lemma lem8083309 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term804 _143310 _143311 _143313 B s clauses c x _106907 t) = (term805 _143310 _143311 _143313 B s t clauses c x _106907).
Proof. exact (eq_refl (term804 _143310 _143311 _143313 B s clauses c x _106907 t)). Qed.
Lemma lem8083310 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1412 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term803 _143310 _143311 _143313 B s clauses c _106907 x t) = (term805 _143310 _143311 _143313 B s t clauses c x _106907).
Proof. exact (TRANS (@lem8083308 _143310 _143311 _143313 B s clauses c x _106907 t) (@lem8083309 _143310 _143311 _143313 B s t clauses c x _106907)). Qed.
Lemma lem8083311 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term806 _143310 _143311 _143313 B s clauses c _106907 x) = (term802 _143310 _143311 _143313 B s clauses c x _106907).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 B => @lem8083310 _143310 _143311 _143313 B s t clauses c x _106907)). Qed.
Lemma lem8083312 {_143311 _143313 B : Type'} : (@ex (_143311 -> _143313 -> B)) = (@ex (_143311 -> _143313 -> B)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> B))). Qed.
Lemma lem8083313 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term807 _143310 _143311 _143313 B s clauses c _106907 x) = (term788 _143310 _143311 _143313 B s clauses c x _106907).
Proof. exact (MK_COMB (@lem8083312 _143311 _143313 B) (@lem8083311 _143310 _143311 _143313 B s clauses c x _106907)). Qed.
Lemma lem8083314 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term808 _143310 _143311 _143313 B s clauses c _106907) = (term790 _143310 _143311 _143313 B s clauses c _106907).
Proof. exact (fun_ext (fun x : _143310 => @lem8083313 _143310 _143311 _143313 B s clauses c x _106907)). Qed.
Lemma lem8083315 {_143310 : Type'} : (@all _143310) = (@all _143310).
Proof. exact (eq_refl (@all _143310)). Qed.
Lemma lem8083316 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term798 _143310 _143311 _143313 B s clauses c _106907) = (term792 _143310 _143311 _143313 B s clauses c _106907).
Proof. exact (MK_COMB (@lem8083315 _143310) (@lem8083314 _143310 _143311 _143313 B s clauses c _106907)). Qed.
Lemma lem8083317 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8083318 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term809 _143310 _143311 _143313 B s clauses c _106907) = (term810 _143310 _143311 _143313 B s clauses c _106907).
Proof. exact (MK_COMB (@lem8083317) (@lem8083316 _143310 _143311 _143313 B s clauses c _106907)). Qed.
Lemma lem8083319 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term801 _143310 _143311 _143313 B s clauses c _106907 x) = (term802 _143310 _143311 _143313 B s clauses c x _106907).
Proof. exact (eq_refl (term801 _143310 _143311 _143313 B s clauses c _106907 x)). Qed.
Lemma lem8083320 {_143310 _143311 _143313 B : Type'} (t : type1407 _143310 _143311 _143313 B) (x : _143310) : (t x) = (t x).
Proof. exact (eq_refl (t x)). Qed.
Lemma lem8083321 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) (t : type1407 _143310 _143311 _143313 B) (x : _143310) : (term811 _143310 _143311 _143313 B s clauses c _106907 t x) = (term812 _143310 _143311 _143313 B s clauses c _106907 t x).
Proof. exact (MK_COMB (@lem8083319 _143310 _143311 _143313 B s clauses c x _106907) (@lem8083320 _143310 _143311 _143313 B t x)). Qed.
Lemma lem8083322 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term812 _143310 _143311 _143313 B s clauses c _106907 t x) = (term813 _143310 _143311 _143313 B s t clauses c x _106907).
Proof. exact (eq_refl (term812 _143310 _143311 _143313 B s clauses c _106907 t x)). Qed.
Lemma lem8083323 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term811 _143310 _143311 _143313 B s clauses c _106907 t x) = (term813 _143310 _143311 _143313 B s t clauses c x _106907).
Proof. exact (TRANS (@lem8083321 _143310 _143311 _143313 B s clauses c _106907 t x) (@lem8083322 _143310 _143311 _143313 B s t clauses c x _106907)). Qed.
Lemma lem8083324 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term814 _143310 _143311 _143313 B s clauses c _106907 t) = (term815 _143310 _143311 _143313 B s t clauses c _106907).
Proof. exact (fun_ext (fun x : _143310 => @lem8083323 _143310 _143311 _143313 B s t clauses c x _106907)). Qed.
Lemma lem8083325 {_143310 : Type'} : (@all _143310) = (@all _143310).
Proof. exact (eq_refl (@all _143310)). Qed.
Lemma lem8083326 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term816 _143310 _143311 _143313 B s clauses c _106907 t) = (term817 _143310 _143311 _143313 B s t clauses c _106907).
Proof. exact (MK_COMB (@lem8083325 _143310) (@lem8083324 _143310 _143311 _143313 B s t clauses c _106907)). Qed.
Lemma lem8083327 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term818 _143310 _143311 _143313 B s clauses c _106907) = (term819 _143310 _143311 _143313 B s clauses c _106907).
Proof. exact (fun_ext (fun t : type1407 _143310 _143311 _143313 B => @lem8083326 _143310 _143311 _143313 B s t clauses c _106907)). Qed.
Lemma lem8083328 {_143310 _143311 _143313 B : Type'} : (@ex (_143310 -> _143311 -> _143313 -> B)) = (@ex (_143310 -> _143311 -> _143313 -> B)).
Proof. exact (eq_refl (@ex (_143310 -> _143311 -> _143313 -> B))). Qed.
Lemma lem8083329 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term799 _143310 _143311 _143313 B s clauses c _106907) = (term820 _143310 _143311 _143313 B s clauses c _106907).
Proof. exact (MK_COMB (@lem8083328 _143310 _143311 _143313 B) (@lem8083327 _143310 _143311 _143313 B s clauses c _106907)). Qed.
Lemma lem8083330 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : ((term798 _143310 _143311 _143313 B s clauses c _106907) = (term799 _143310 _143311 _143313 B s clauses c _106907)) = ((term792 _143310 _143311 _143313 B s clauses c _106907) = (term820 _143310 _143311 _143313 B s clauses c _106907)).
Proof. exact (MK_COMB (@lem8083318 _143310 _143311 _143313 B s clauses c _106907) (@lem8083329 _143310 _143311 _143313 B s clauses c _106907)). Qed.
Lemma lem8083331 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term792 _143310 _143311 _143313 B s clauses c _106907) = (term820 _143310 _143311 _143313 B s clauses c _106907).
Proof. exact (EQ_MP (@lem8083330 _143310 _143311 _143313 B s clauses c _106907) (@lem8083305 _143310 _143311 _143313 B s clauses c _106907)). Qed.
Lemma lem8083333 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8083334 {_143310 _143313 : Type'} (P : type1413 _143310 _143313) : (term771 _143310 _143313 P) = (term772 _143310 _143313 P).
Proof. exact (@lem8083333 _143310 _143313 P). Qed.
Lemma lem8083335 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term821 _143310 _143311 _143313 B s t clauses c _106907) = (term822 _143310 _143311 _143313 B s t clauses c _106907).
Proof. exact (@lem8083334 _143310 _143313 (term823 _143310 _143311 _143313 B s t clauses c _106907)). Qed.
Lemma lem8083336 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term824 _143310 _143311 _143313 B s t clauses c _106907 x) = (term825 _143310 _143311 _143313 B s t clauses c x _106907).
Proof. exact (eq_refl (term824 _143310 _143311 _143313 B s t clauses c _106907 x)). Qed.
Lemma lem8083337 {_143313 : Type'} (a : _143313) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8083338 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) (a : _143313) : (term826 _143310 _143311 _143313 B s t clauses c _106907 x a) = (term827 _143310 _143311 _143313 B s t clauses c x _106907 a).
Proof. exact (MK_COMB (@lem8083336 _143310 _143311 _143313 B s t clauses c x _106907) (@lem8083337 _143313 a)). Qed.
Lemma lem8083339 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (a : _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term827 _143310 _143311 _143313 B s t clauses c x _106907 a) = (term828 _143310 _143311 _143313 B s t a clauses c x _106907).
Proof. exact (eq_refl (term827 _143310 _143311 _143313 B s t clauses c x _106907 a)). Qed.
Lemma lem8083340 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (a : _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term826 _143310 _143311 _143313 B s t clauses c _106907 x a) = (term828 _143310 _143311 _143313 B s t a clauses c x _106907).
Proof. exact (TRANS (@lem8083338 _143310 _143311 _143313 B s t clauses c x _106907 a) (@lem8083339 _143310 _143311 _143313 B s t a clauses c x _106907)). Qed.
Lemma lem8083341 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term829 _143310 _143311 _143313 B s t clauses c _106907 x) = (term825 _143310 _143311 _143313 B s t clauses c x _106907).
Proof. exact (fun_ext (fun a : _143313 => @lem8083340 _143310 _143311 _143313 B s t a clauses c x _106907)). Qed.
Lemma lem8083342 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8083343 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term830 _143310 _143311 _143313 B s t clauses c _106907 x) = (term813 _143310 _143311 _143313 B s t clauses c x _106907).
Proof. exact (MK_COMB (@lem8083342 _143313) (@lem8083341 _143310 _143311 _143313 B s t clauses c x _106907)). Qed.
Lemma lem8083344 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term831 _143310 _143311 _143313 B s t clauses c _106907) = (term815 _143310 _143311 _143313 B s t clauses c _106907).
Proof. exact (fun_ext (fun x : _143310 => @lem8083343 _143310 _143311 _143313 B s t clauses c x _106907)). Qed.
Lemma lem8083345 {_143310 : Type'} : (@all _143310) = (@all _143310).
Proof. exact (eq_refl (@all _143310)). Qed.
Lemma lem8083346 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term821 _143310 _143311 _143313 B s t clauses c _106907) = (term817 _143310 _143311 _143313 B s t clauses c _106907).
Proof. exact (MK_COMB (@lem8083345 _143310) (@lem8083344 _143310 _143311 _143313 B s t clauses c _106907)). Qed.
Lemma lem8083347 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8083348 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term832 _143310 _143311 _143313 B s t clauses c _106907) = (term833 _143310 _143311 _143313 B s t clauses c _106907).
Proof. exact (MK_COMB (@lem8083347) (@lem8083346 _143310 _143311 _143313 B s t clauses c _106907)). Qed.
Lemma lem8083349 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term824 _143310 _143311 _143313 B s t clauses c _106907 x) = (term825 _143310 _143311 _143313 B s t clauses c x _106907).
Proof. exact (eq_refl (term824 _143310 _143311 _143313 B s t clauses c _106907 x)). Qed.
Lemma lem8083350 {_143310 _143313 : Type'} (a : _143310 -> _143313) (x : _143310) : (a x) = (a x).
Proof. exact (eq_refl (a x)). Qed.
Lemma lem8083351 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) (a : _143310 -> _143313) (x : _143310) : (term834 _143310 _143311 _143313 B s t clauses c _106907 a x) = (term835 _143310 _143311 _143313 B s t clauses c _106907 a x).
Proof. exact (MK_COMB (@lem8083349 _143310 _143311 _143313 B s t clauses c x _106907) (@lem8083350 _143310 _143313 a x)). Qed.
Lemma lem8083352 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (a : _143310 -> _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term835 _143310 _143311 _143313 B s t clauses c _106907 a x) = (term836 _143310 _143311 _143313 B s t a clauses c x _106907).
Proof. exact (eq_refl (term835 _143310 _143311 _143313 B s t clauses c _106907 a x)). Qed.
Lemma lem8083353 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (a : _143310 -> _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (x : _143310) (_106907 : B) : (term834 _143310 _143311 _143313 B s t clauses c _106907 a x) = (term836 _143310 _143311 _143313 B s t a clauses c x _106907).
Proof. exact (TRANS (@lem8083351 _143310 _143311 _143313 B s t clauses c _106907 a x) (@lem8083352 _143310 _143311 _143313 B s t a clauses c x _106907)). Qed.
Lemma lem8083354 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (a : _143310 -> _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term837 _143310 _143311 _143313 B s t clauses c _106907 a) = (term838 _143310 _143311 _143313 B s t a clauses c _106907).
Proof. exact (fun_ext (fun x : _143310 => @lem8083353 _143310 _143311 _143313 B s t a clauses c x _106907)). Qed.
Lemma lem8083355 {_143310 : Type'} : (@all _143310) = (@all _143310).
Proof. exact (eq_refl (@all _143310)). Qed.
Lemma lem8083356 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (a : _143310 -> _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term839 _143310 _143311 _143313 B s t clauses c _106907 a) = (term840 _143310 _143311 _143313 B s t a clauses c _106907).
Proof. exact (MK_COMB (@lem8083355 _143310) (@lem8083354 _143310 _143311 _143313 B s t a clauses c _106907)). Qed.
Lemma lem8083357 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term841 _143310 _143311 _143313 B s t clauses c _106907) = (term842 _143310 _143311 _143313 B s t clauses c _106907).
Proof. exact (fun_ext (fun a : _143310 -> _143313 => @lem8083356 _143310 _143311 _143313 B s t a clauses c _106907)). Qed.
Lemma lem8083358 {_143310 _143313 : Type'} : (@ex (_143310 -> _143313)) = (@ex (_143310 -> _143313)).
Proof. exact (eq_refl (@ex (_143310 -> _143313))). Qed.
Lemma lem8083359 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term822 _143310 _143311 _143313 B s t clauses c _106907) = (term843 _143310 _143311 _143313 B s t clauses c _106907).
Proof. exact (MK_COMB (@lem8083358 _143310 _143313) (@lem8083357 _143310 _143311 _143313 B s t clauses c _106907)). Qed.
Lemma lem8083360 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : ((term821 _143310 _143311 _143313 B s t clauses c _106907) = (term822 _143310 _143311 _143313 B s t clauses c _106907)) = ((term817 _143310 _143311 _143313 B s t clauses c _106907) = (term843 _143310 _143311 _143313 B s t clauses c _106907)).
Proof. exact (MK_COMB (@lem8083348 _143310 _143311 _143313 B s t clauses c _106907) (@lem8083359 _143310 _143311 _143313 B s t clauses c _106907)). Qed.
Lemma lem8083361 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (t : type1407 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term817 _143310 _143311 _143313 B s t clauses c _106907) = (term843 _143310 _143311 _143313 B s t clauses c _106907).
Proof. exact (EQ_MP (@lem8083360 _143310 _143311 _143313 B s t clauses c _106907) (@lem8083335 _143310 _143311 _143313 B s t clauses c _106907)). Qed.
Lemma lem8083362 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term819 _143310 _143311 _143313 B s clauses c _106907) = (term844 _143310 _143311 _143313 B s clauses c _106907).
Proof. exact (fun_ext (fun t : type1407 _143310 _143311 _143313 B => @lem8083361 _143310 _143311 _143313 B s t clauses c _106907)). Qed.
Lemma lem8083363 {_143310 _143311 _143313 B : Type'} : (@ex (_143310 -> _143311 -> _143313 -> B)) = (@ex (_143310 -> _143311 -> _143313 -> B)).
Proof. exact (eq_refl (@ex (_143310 -> _143311 -> _143313 -> B))). Qed.
Lemma lem8083364 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term820 _143310 _143311 _143313 B s clauses c _106907) = (term845 _143310 _143311 _143313 B s clauses c _106907).
Proof. exact (MK_COMB (@lem8083363 _143310 _143311 _143313 B) (@lem8083362 _143310 _143311 _143313 B s clauses c _106907)). Qed.
Lemma lem8083365 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term792 _143310 _143311 _143313 B s clauses c _106907) = (term845 _143310 _143311 _143313 B s clauses c _106907).
Proof. exact (TRANS (@lem8083331 _143310 _143311 _143313 B s clauses c _106907) (@lem8083364 _143310 _143311 _143313 B s clauses c _106907)). Qed.
Lemma lem8083366 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term794 _143310 _143311 _143313 B clauses c _106907) = (term846 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (fun_ext (fun s : type1410 _143310 _143313 => @lem8083365 _143310 _143311 _143313 B s clauses c _106907)). Qed.
Lemma lem8083367 {_143310 _143313 : Type'} : (@ex (_143310 -> _143313 -> _143310)) = (@ex (_143310 -> _143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143310 -> _143313 -> _143310))). Qed.
Lemma lem8083368 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term795 _143310 _143311 _143313 B clauses c _106907) = (term847 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (MK_COMB (@lem8083367 _143310 _143313) (@lem8083366 _143310 _143311 _143313 B clauses c _106907)). Qed.
Lemma lem8083369 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term770 _143310 _143311 _143313 B clauses c _106907) = (term847 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (TRANS (@lem8083301 _143310 _143311 _143313 B clauses c _106907) (@lem8083368 _143310 _143311 _143313 B clauses c _106907)). Qed.
Lemma lem8083370 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term706 _143310 _143311 _143313 B clauses c _106907) = (term847 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (TRANS (@lem8083271 _143310 _143311 _143313 B clauses c _106907) (@lem8083369 _143310 _143311 _143313 B clauses c _106907)). Qed.
Lemma lem8083371 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term707 _143310 _143311 _143313 B clauses _106907) = (term848 _143310 _143311 _143313 B clauses _106907).
Proof. exact (fun_ext (fun c : _143311 => @lem8083370 _143310 _143311 _143313 B clauses c _106907)). Qed.
Lemma lem8083372 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8083373 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term708 _143310 _143311 _143313 B clauses _106907) = (term849 _143310 _143311 _143313 B clauses _106907).
Proof. exact (MK_COMB (@lem8083372 _143311) (@lem8083371 _143310 _143311 _143313 B clauses _106907)). Qed.
Lemma lem8083375 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8083376 {_143310 _143311 _143313 : Type'} (P : type1443 _143310 _143311 _143313) : (term850 _143310 _143311 _143313 P) = (term851 _143310 _143311 _143313 P).
Proof. exact (@lem8083375 _143311 (type1410 _143310 _143313) P). Qed.
Lemma lem8083377 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term852 _143310 _143311 _143313 B clauses _106907) = (term853 _143310 _143311 _143313 B clauses _106907).
Proof. exact (@lem8083376 _143310 _143311 _143313 (term854 _143310 _143311 _143313 B clauses _106907)). Qed.
Lemma lem8083378 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term855 _143310 _143311 _143313 B clauses _106907 c) = (term846 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (eq_refl (term855 _143310 _143311 _143313 B clauses _106907 c)). Qed.
Lemma lem8083379 {_143310 _143313 : Type'} (s : type1410 _143310 _143313) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8083380 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) (s : type1410 _143310 _143313) : (term856 _143310 _143311 _143313 B clauses _106907 c s) = (term857 _143310 _143311 _143313 B clauses c _106907 s).
Proof. exact (MK_COMB (@lem8083378 _143310 _143311 _143313 B clauses c _106907) (@lem8083379 _143310 _143313 s)). Qed.
Lemma lem8083381 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term857 _143310 _143311 _143313 B clauses c _106907 s) = (term845 _143310 _143311 _143313 B s clauses c _106907).
Proof. exact (eq_refl (term857 _143310 _143311 _143313 B clauses c _106907 s)). Qed.
Lemma lem8083382 {_143310 _143311 _143313 B : Type'} (s : type1410 _143310 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term856 _143310 _143311 _143313 B clauses _106907 c s) = (term845 _143310 _143311 _143313 B s clauses c _106907).
Proof. exact (TRANS (@lem8083380 _143310 _143311 _143313 B clauses c _106907 s) (@lem8083381 _143310 _143311 _143313 B s clauses c _106907)). Qed.
Lemma lem8083383 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term858 _143310 _143311 _143313 B clauses _106907 c) = (term846 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (fun_ext (fun s : type1410 _143310 _143313 => @lem8083382 _143310 _143311 _143313 B s clauses c _106907)). Qed.
Lemma lem8083384 {_143310 _143313 : Type'} : (@ex (_143310 -> _143313 -> _143310)) = (@ex (_143310 -> _143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143310 -> _143313 -> _143310))). Qed.
Lemma lem8083385 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term859 _143310 _143311 _143313 B clauses _106907 c) = (term847 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (MK_COMB (@lem8083384 _143310 _143313) (@lem8083383 _143310 _143311 _143313 B clauses c _106907)). Qed.
Lemma lem8083386 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term860 _143310 _143311 _143313 B clauses _106907) = (term848 _143310 _143311 _143313 B clauses _106907).
Proof. exact (fun_ext (fun c : _143311 => @lem8083385 _143310 _143311 _143313 B clauses c _106907)). Qed.
Lemma lem8083387 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8083388 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term852 _143310 _143311 _143313 B clauses _106907) = (term849 _143310 _143311 _143313 B clauses _106907).
Proof. exact (MK_COMB (@lem8083387 _143311) (@lem8083386 _143310 _143311 _143313 B clauses _106907)). Qed.
Lemma lem8083389 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8083390 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term861 _143310 _143311 _143313 B clauses _106907) = (term862 _143310 _143311 _143313 B clauses _106907).
Proof. exact (MK_COMB (@lem8083389) (@lem8083388 _143310 _143311 _143313 B clauses _106907)). Qed.
Lemma lem8083391 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term855 _143310 _143311 _143313 B clauses _106907 c) = (term846 _143310 _143311 _143313 B clauses c _106907).
Proof. exact (eq_refl (term855 _143310 _143311 _143313 B clauses _106907 c)). Qed.
Lemma lem8083392 {_143310 _143311 _143313 : Type'} (s : type1464 _143310 _143311 _143313) (c : _143311) : (s c) = (s c).
Proof. exact (eq_refl (s c)). Qed.
Lemma lem8083393 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) (s : type1464 _143310 _143311 _143313) (c : _143311) : (term863 _143310 _143311 _143313 B clauses _106907 s c) = (term864 _143310 _143311 _143313 B clauses _106907 s c).
Proof. exact (MK_COMB (@lem8083391 _143310 _143311 _143313 B clauses c _106907) (@lem8083392 _143310 _143311 _143313 s c)). Qed.
Lemma lem8083394 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term864 _143310 _143311 _143313 B clauses _106907 s c) = (term865 _143310 _143311 _143313 B s clauses c _106907).
Proof. exact (eq_refl (term864 _143310 _143311 _143313 B clauses _106907 s c)). Qed.
Lemma lem8083395 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term863 _143310 _143311 _143313 B clauses _106907 s c) = (term865 _143310 _143311 _143313 B s clauses c _106907).
Proof. exact (TRANS (@lem8083393 _143310 _143311 _143313 B clauses _106907 s c) (@lem8083394 _143310 _143311 _143313 B s clauses c _106907)). Qed.
Lemma lem8083396 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term866 _143310 _143311 _143313 B clauses _106907 s) = (term867 _143310 _143311 _143313 B s clauses _106907).
Proof. exact (fun_ext (fun c : _143311 => @lem8083395 _143310 _143311 _143313 B s clauses c _106907)). Qed.
Lemma lem8083397 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8083398 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term868 _143310 _143311 _143313 B clauses _106907 s) = (term869 _143310 _143311 _143313 B s clauses _106907).
Proof. exact (MK_COMB (@lem8083397 _143311) (@lem8083396 _143310 _143311 _143313 B s clauses _106907)). Qed.
Lemma lem8083399 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term870 _143310 _143311 _143313 B clauses _106907) = (term871 _143310 _143311 _143313 B clauses _106907).
Proof. exact (fun_ext (fun s : type1464 _143310 _143311 _143313 => @lem8083398 _143310 _143311 _143313 B s clauses _106907)). Qed.
Lemma lem8083400 {_143310 _143311 _143313 : Type'} : (@ex (_143311 -> _143310 -> _143313 -> _143310)) = (@ex (_143311 -> _143310 -> _143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143311 -> _143310 -> _143313 -> _143310))). Qed.
Lemma lem8083401 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term853 _143310 _143311 _143313 B clauses _106907) = (term872 _143310 _143311 _143313 B clauses _106907).
Proof. exact (MK_COMB (@lem8083400 _143310 _143311 _143313) (@lem8083399 _143310 _143311 _143313 B clauses _106907)). Qed.
Lemma lem8083402 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : ((term852 _143310 _143311 _143313 B clauses _106907) = (term853 _143310 _143311 _143313 B clauses _106907)) = ((term849 _143310 _143311 _143313 B clauses _106907) = (term872 _143310 _143311 _143313 B clauses _106907)).
Proof. exact (MK_COMB (@lem8083390 _143310 _143311 _143313 B clauses _106907) (@lem8083401 _143310 _143311 _143313 B clauses _106907)). Qed.
Lemma lem8083403 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term849 _143310 _143311 _143313 B clauses _106907) = (term872 _143310 _143311 _143313 B clauses _106907).
Proof. exact (EQ_MP (@lem8083402 _143310 _143311 _143313 B clauses _106907) (@lem8083377 _143310 _143311 _143313 B clauses _106907)). Qed.
Lemma lem8083405 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8083406 {_143310 _143311 _143313 B : Type'} (P : type1442 _143310 _143311 _143313 B) : (term873 _143310 _143311 _143313 B P) = (term874 _143310 _143311 _143313 B P).
Proof. exact (@lem8083405 _143311 (type1407 _143310 _143311 _143313 B) P). Qed.
Lemma lem8083407 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term875 _143310 _143311 _143313 B s clauses _106907) = (term876 _143310 _143311 _143313 B s clauses _106907).
Proof. exact (@lem8083406 _143310 _143311 _143313 B (term877 _143310 _143311 _143313 B s clauses _106907)). Qed.
Lemma lem8083408 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term878 _143310 _143311 _143313 B s clauses _106907 c) = (term879 _143310 _143311 _143313 B s clauses c _106907).
Proof. exact (eq_refl (term878 _143310 _143311 _143313 B s clauses _106907 c)). Qed.
Lemma lem8083409 {_143310 _143311 _143313 B : Type'} (t : type1407 _143310 _143311 _143313 B) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8083410 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) (t : type1407 _143310 _143311 _143313 B) : (term880 _143310 _143311 _143313 B s clauses _106907 c t) = (term881 _143310 _143311 _143313 B s clauses c _106907 t).
Proof. exact (MK_COMB (@lem8083408 _143310 _143311 _143313 B s clauses c _106907) (@lem8083409 _143310 _143311 _143313 B t)). Qed.
Lemma lem8083411 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1407 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term881 _143310 _143311 _143313 B s clauses c _106907 t) = (term882 _143310 _143311 _143313 B s t clauses c _106907).
Proof. exact (eq_refl (term881 _143310 _143311 _143313 B s clauses c _106907 t)). Qed.
Lemma lem8083412 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1407 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term880 _143310 _143311 _143313 B s clauses _106907 c t) = (term882 _143310 _143311 _143313 B s t clauses c _106907).
Proof. exact (TRANS (@lem8083410 _143310 _143311 _143313 B s clauses c _106907 t) (@lem8083411 _143310 _143311 _143313 B s t clauses c _106907)). Qed.
Lemma lem8083413 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term883 _143310 _143311 _143313 B s clauses _106907 c) = (term879 _143310 _143311 _143313 B s clauses c _106907).
Proof. exact (fun_ext (fun t : type1407 _143310 _143311 _143313 B => @lem8083412 _143310 _143311 _143313 B s t clauses c _106907)). Qed.
Lemma lem8083414 {_143310 _143311 _143313 B : Type'} : (@ex (_143310 -> _143311 -> _143313 -> B)) = (@ex (_143310 -> _143311 -> _143313 -> B)).
Proof. exact (eq_refl (@ex (_143310 -> _143311 -> _143313 -> B))). Qed.
Lemma lem8083415 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term884 _143310 _143311 _143313 B s clauses _106907 c) = (term865 _143310 _143311 _143313 B s clauses c _106907).
Proof. exact (MK_COMB (@lem8083414 _143310 _143311 _143313 B) (@lem8083413 _143310 _143311 _143313 B s clauses c _106907)). Qed.
Lemma lem8083416 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term885 _143310 _143311 _143313 B s clauses _106907) = (term867 _143310 _143311 _143313 B s clauses _106907).
Proof. exact (fun_ext (fun c : _143311 => @lem8083415 _143310 _143311 _143313 B s clauses c _106907)). Qed.
Lemma lem8083417 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8083418 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term875 _143310 _143311 _143313 B s clauses _106907) = (term869 _143310 _143311 _143313 B s clauses _106907).
Proof. exact (MK_COMB (@lem8083417 _143311) (@lem8083416 _143310 _143311 _143313 B s clauses _106907)). Qed.
Lemma lem8083419 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8083420 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term886 _143310 _143311 _143313 B s clauses _106907) = (term887 _143310 _143311 _143313 B s clauses _106907).
Proof. exact (MK_COMB (@lem8083419) (@lem8083418 _143310 _143311 _143313 B s clauses _106907)). Qed.
Lemma lem8083421 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term878 _143310 _143311 _143313 B s clauses _106907 c) = (term879 _143310 _143311 _143313 B s clauses c _106907).
Proof. exact (eq_refl (term878 _143310 _143311 _143313 B s clauses _106907 c)). Qed.
Lemma lem8083422 {_143310 _143311 _143313 B : Type'} (t : type1463 _143310 _143311 _143313 B) (c : _143311) : (t c) = (t c).
Proof. exact (eq_refl (t c)). Qed.
Lemma lem8083423 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) (t : type1463 _143310 _143311 _143313 B) (c : _143311) : (term888 _143310 _143311 _143313 B s clauses _106907 t c) = (term889 _143310 _143311 _143313 B s clauses _106907 t c).
Proof. exact (MK_COMB (@lem8083421 _143310 _143311 _143313 B s clauses c _106907) (@lem8083422 _143310 _143311 _143313 B t c)). Qed.
Lemma lem8083424 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term889 _143310 _143311 _143313 B s clauses _106907 t c) = (term890 _143310 _143311 _143313 B s t clauses c _106907).
Proof. exact (eq_refl (term889 _143310 _143311 _143313 B s clauses _106907 t c)). Qed.
Lemma lem8083425 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term888 _143310 _143311 _143313 B s clauses _106907 t c) = (term890 _143310 _143311 _143313 B s t clauses c _106907).
Proof. exact (TRANS (@lem8083423 _143310 _143311 _143313 B s clauses _106907 t c) (@lem8083424 _143310 _143311 _143313 B s t clauses c _106907)). Qed.
Lemma lem8083426 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term891 _143310 _143311 _143313 B s clauses _106907 t) = (term892 _143310 _143311 _143313 B s t clauses _106907).
Proof. exact (fun_ext (fun c : _143311 => @lem8083425 _143310 _143311 _143313 B s t clauses c _106907)). Qed.
Lemma lem8083427 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8083428 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term893 _143310 _143311 _143313 B s clauses _106907 t) = (term894 _143310 _143311 _143313 B s t clauses _106907).
Proof. exact (MK_COMB (@lem8083427 _143311) (@lem8083426 _143310 _143311 _143313 B s t clauses _106907)). Qed.
Lemma lem8083429 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term895 _143310 _143311 _143313 B s clauses _106907) = (term896 _143310 _143311 _143313 B s clauses _106907).
Proof. exact (fun_ext (fun t : type1463 _143310 _143311 _143313 B => @lem8083428 _143310 _143311 _143313 B s t clauses _106907)). Qed.
Lemma lem8083430 {_143310 _143311 _143313 B : Type'} : (@ex (_143311 -> _143310 -> _143311 -> _143313 -> B)) = (@ex (_143311 -> _143310 -> _143311 -> _143313 -> B)).
Proof. exact (eq_refl (@ex (_143311 -> _143310 -> _143311 -> _143313 -> B))). Qed.
Lemma lem8083431 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term876 _143310 _143311 _143313 B s clauses _106907) = (term897 _143310 _143311 _143313 B s clauses _106907).
Proof. exact (MK_COMB (@lem8083430 _143310 _143311 _143313 B) (@lem8083429 _143310 _143311 _143313 B s clauses _106907)). Qed.
Lemma lem8083432 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : ((term875 _143310 _143311 _143313 B s clauses _106907) = (term876 _143310 _143311 _143313 B s clauses _106907)) = ((term869 _143310 _143311 _143313 B s clauses _106907) = (term897 _143310 _143311 _143313 B s clauses _106907)).
Proof. exact (MK_COMB (@lem8083420 _143310 _143311 _143313 B s clauses _106907) (@lem8083431 _143310 _143311 _143313 B s clauses _106907)). Qed.
Lemma lem8083433 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term869 _143310 _143311 _143313 B s clauses _106907) = (term897 _143310 _143311 _143313 B s clauses _106907).
Proof. exact (EQ_MP (@lem8083432 _143310 _143311 _143313 B s clauses _106907) (@lem8083407 _143310 _143311 _143313 B s clauses _106907)). Qed.
Lemma lem8083435 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8083436 {_143310 _143311 _143313 : Type'} (P : type1447 _143310 _143311 _143313) : (term898 _143310 _143311 _143313 P) = (term899 _143310 _143311 _143313 P).
Proof. exact (@lem8083435 _143311 (_143310 -> _143313) P). Qed.
Lemma lem8083437 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term900 _143310 _143311 _143313 B s t clauses _106907) = (term901 _143310 _143311 _143313 B s t clauses _106907).
Proof. exact (@lem8083436 _143310 _143311 _143313 (term902 _143310 _143311 _143313 B s t clauses _106907)). Qed.
Lemma lem8083438 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term903 _143310 _143311 _143313 B s t clauses _106907 c) = (term904 _143310 _143311 _143313 B s t clauses c _106907).
Proof. exact (eq_refl (term903 _143310 _143311 _143313 B s t clauses _106907 c)). Qed.
Lemma lem8083439 {_143310 _143313 : Type'} (a : _143310 -> _143313) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8083440 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) (a : _143310 -> _143313) : (term905 _143310 _143311 _143313 B s t clauses _106907 c a) = (term906 _143310 _143311 _143313 B s t clauses c _106907 a).
Proof. exact (MK_COMB (@lem8083438 _143310 _143311 _143313 B s t clauses c _106907) (@lem8083439 _143310 _143313 a)). Qed.
Lemma lem8083441 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (a : _143310 -> _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term906 _143310 _143311 _143313 B s t clauses c _106907 a) = (term907 _143310 _143311 _143313 B s t a clauses c _106907).
Proof. exact (eq_refl (term906 _143310 _143311 _143313 B s t clauses c _106907 a)). Qed.
Lemma lem8083442 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (a : _143310 -> _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term905 _143310 _143311 _143313 B s t clauses _106907 c a) = (term907 _143310 _143311 _143313 B s t a clauses c _106907).
Proof. exact (TRANS (@lem8083440 _143310 _143311 _143313 B s t clauses c _106907 a) (@lem8083441 _143310 _143311 _143313 B s t a clauses c _106907)). Qed.
Lemma lem8083443 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term908 _143310 _143311 _143313 B s t clauses _106907 c) = (term904 _143310 _143311 _143313 B s t clauses c _106907).
Proof. exact (fun_ext (fun a : _143310 -> _143313 => @lem8083442 _143310 _143311 _143313 B s t a clauses c _106907)). Qed.
Lemma lem8083444 {_143310 _143313 : Type'} : (@ex (_143310 -> _143313)) = (@ex (_143310 -> _143313)).
Proof. exact (eq_refl (@ex (_143310 -> _143313))). Qed.
Lemma lem8083445 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term909 _143310 _143311 _143313 B s t clauses _106907 c) = (term890 _143310 _143311 _143313 B s t clauses c _106907).
Proof. exact (MK_COMB (@lem8083444 _143310 _143313) (@lem8083443 _143310 _143311 _143313 B s t clauses c _106907)). Qed.
Lemma lem8083446 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term910 _143310 _143311 _143313 B s t clauses _106907) = (term892 _143310 _143311 _143313 B s t clauses _106907).
Proof. exact (fun_ext (fun c : _143311 => @lem8083445 _143310 _143311 _143313 B s t clauses c _106907)). Qed.
Lemma lem8083447 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8083448 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term900 _143310 _143311 _143313 B s t clauses _106907) = (term894 _143310 _143311 _143313 B s t clauses _106907).
Proof. exact (MK_COMB (@lem8083447 _143311) (@lem8083446 _143310 _143311 _143313 B s t clauses _106907)). Qed.
Lemma lem8083449 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8083450 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term911 _143310 _143311 _143313 B s t clauses _106907) = (term912 _143310 _143311 _143313 B s t clauses _106907).
Proof. exact (MK_COMB (@lem8083449) (@lem8083448 _143310 _143311 _143313 B s t clauses _106907)). Qed.
Lemma lem8083451 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term903 _143310 _143311 _143313 B s t clauses _106907 c) = (term904 _143310 _143311 _143313 B s t clauses c _106907).
Proof. exact (eq_refl (term903 _143310 _143311 _143313 B s t clauses _106907 c)). Qed.
Lemma lem8083452 {_143310 _143311 _143313 : Type'} (a : type1469 _143310 _143311 _143313) (c : _143311) : (a c) = (a c).
Proof. exact (eq_refl (a c)). Qed.
Lemma lem8083453 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) (a : type1469 _143310 _143311 _143313) (c : _143311) : (term913 _143310 _143311 _143313 B s t clauses _106907 a c) = (term914 _143310 _143311 _143313 B s t clauses _106907 a c).
Proof. exact (MK_COMB (@lem8083451 _143310 _143311 _143313 B s t clauses c _106907) (@lem8083452 _143310 _143311 _143313 a c)). Qed.
Lemma lem8083454 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (a : type1469 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term914 _143310 _143311 _143313 B s t clauses _106907 a c) = (term915 _143310 _143311 _143313 B s t a clauses c _106907).
Proof. exact (eq_refl (term914 _143310 _143311 _143313 B s t clauses _106907 a c)). Qed.
Lemma lem8083455 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (a : type1469 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (c : _143311) (_106907 : B) : (term913 _143310 _143311 _143313 B s t clauses _106907 a c) = (term915 _143310 _143311 _143313 B s t a clauses c _106907).
Proof. exact (TRANS (@lem8083453 _143310 _143311 _143313 B s t clauses _106907 a c) (@lem8083454 _143310 _143311 _143313 B s t a clauses c _106907)). Qed.
Lemma lem8083456 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (a : type1469 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term916 _143310 _143311 _143313 B s t clauses _106907 a) = (term917 _143310 _143311 _143313 B s t a clauses _106907).
Proof. exact (fun_ext (fun c : _143311 => @lem8083455 _143310 _143311 _143313 B s t a clauses c _106907)). Qed.
Lemma lem8083457 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8083458 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (a : type1469 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term918 _143310 _143311 _143313 B s t clauses _106907 a) = (term919 _143310 _143311 _143313 B s t a clauses _106907).
Proof. exact (MK_COMB (@lem8083457 _143311) (@lem8083456 _143310 _143311 _143313 B s t a clauses _106907)). Qed.
Lemma lem8083459 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term920 _143310 _143311 _143313 B s t clauses _106907) = (term921 _143310 _143311 _143313 B s t clauses _106907).
Proof. exact (fun_ext (fun a : type1469 _143310 _143311 _143313 => @lem8083458 _143310 _143311 _143313 B s t a clauses _106907)). Qed.
Lemma lem8083460 {_143310 _143311 _143313 : Type'} : (@ex (_143311 -> _143310 -> _143313)) = (@ex (_143311 -> _143310 -> _143313)).
Proof. exact (eq_refl (@ex (_143311 -> _143310 -> _143313))). Qed.
Lemma lem8083461 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term901 _143310 _143311 _143313 B s t clauses _106907) = (term922 _143310 _143311 _143313 B s t clauses _106907).
Proof. exact (MK_COMB (@lem8083460 _143310 _143311 _143313) (@lem8083459 _143310 _143311 _143313 B s t clauses _106907)). Qed.
Lemma lem8083462 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : ((term900 _143310 _143311 _143313 B s t clauses _106907) = (term901 _143310 _143311 _143313 B s t clauses _106907)) = ((term894 _143310 _143311 _143313 B s t clauses _106907) = (term922 _143310 _143311 _143313 B s t clauses _106907)).
Proof. exact (MK_COMB (@lem8083450 _143310 _143311 _143313 B s t clauses _106907) (@lem8083461 _143310 _143311 _143313 B s t clauses _106907)). Qed.
Lemma lem8083463 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (t : type1463 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term894 _143310 _143311 _143313 B s t clauses _106907) = (term922 _143310 _143311 _143313 B s t clauses _106907).
Proof. exact (EQ_MP (@lem8083462 _143310 _143311 _143313 B s t clauses _106907) (@lem8083437 _143310 _143311 _143313 B s t clauses _106907)). Qed.
Lemma lem8083464 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term896 _143310 _143311 _143313 B s clauses _106907) = (term923 _143310 _143311 _143313 B s clauses _106907).
Proof. exact (fun_ext (fun t : type1463 _143310 _143311 _143313 B => @lem8083463 _143310 _143311 _143313 B s t clauses _106907)). Qed.
Lemma lem8083465 {_143310 _143311 _143313 B : Type'} : (@ex (_143311 -> _143310 -> _143311 -> _143313 -> B)) = (@ex (_143311 -> _143310 -> _143311 -> _143313 -> B)).
Proof. exact (eq_refl (@ex (_143311 -> _143310 -> _143311 -> _143313 -> B))). Qed.
Lemma lem8083466 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term897 _143310 _143311 _143313 B s clauses _106907) = (term924 _143310 _143311 _143313 B s clauses _106907).
Proof. exact (MK_COMB (@lem8083465 _143310 _143311 _143313 B) (@lem8083464 _143310 _143311 _143313 B s clauses _106907)). Qed.
Lemma lem8083467 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term869 _143310 _143311 _143313 B s clauses _106907) = (term924 _143310 _143311 _143313 B s clauses _106907).
Proof. exact (TRANS (@lem8083433 _143310 _143311 _143313 B s clauses _106907) (@lem8083466 _143310 _143311 _143313 B s clauses _106907)). Qed.
Lemma lem8083468 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term871 _143310 _143311 _143313 B clauses _106907) = (term925 _143310 _143311 _143313 B clauses _106907).
Proof. exact (fun_ext (fun s : type1464 _143310 _143311 _143313 => @lem8083467 _143310 _143311 _143313 B s clauses _106907)). Qed.
Lemma lem8083469 {_143310 _143311 _143313 : Type'} : (@ex (_143311 -> _143310 -> _143313 -> _143310)) = (@ex (_143311 -> _143310 -> _143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143311 -> _143310 -> _143313 -> _143310))). Qed.
Lemma lem8083470 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term872 _143310 _143311 _143313 B clauses _106907) = (term926 _143310 _143311 _143313 B clauses _106907).
Proof. exact (MK_COMB (@lem8083469 _143310 _143311 _143313) (@lem8083468 _143310 _143311 _143313 B clauses _106907)). Qed.
Lemma lem8083471 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term849 _143310 _143311 _143313 B clauses _106907) = (term926 _143310 _143311 _143313 B clauses _106907).
Proof. exact (TRANS (@lem8083403 _143310 _143311 _143313 B clauses _106907) (@lem8083470 _143310 _143311 _143313 B clauses _106907)). Qed.
Lemma lem8083472 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term708 _143310 _143311 _143313 B clauses _106907) = (term926 _143310 _143311 _143313 B clauses _106907).
Proof. exact (TRANS (@lem8083373 _143310 _143311 _143313 B clauses _106907) (@lem8083471 _143310 _143311 _143313 B clauses _106907)). Qed.
Lemma lem8083473 {_143310 _143311 _143313 B : Type'} (_106907 : B) : (term709 _143310 _143311 _143313 B _106907) = (term927 _143310 _143311 _143313 B _106907).
Proof. exact (fun_ext (fun clauses : type1637 _143310 _143311 _143313 B => @lem8083472 _143310 _143311 _143313 B clauses _106907)). Qed.
Lemma lem8083474 {_143310 _143311 _143313 B : Type'} : (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B)))) = (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))))). Qed.
Lemma lem8083475 {_143310 _143311 _143313 B : Type'} (_106907 : B) : (term710 _143310 _143311 _143313 B _106907) = (term928 _143310 _143311 _143313 B _106907).
Proof. exact (MK_COMB (@lem8083474 _143310 _143311 _143313 B) (@lem8083473 _143310 _143311 _143313 B _106907)). Qed.
Lemma lem8083477 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8083478 {_143310 _143311 _143313 B : Type'} (P : type1098 _143310 _143311 _143313 B) : (term929 _143310 _143311 _143313 B P) = (term930 _143310 _143311 _143313 B P).
Proof. exact (@lem8083477 (type1637 _143310 _143311 _143313 B) (type1464 _143310 _143311 _143313) P). Qed.
Lemma lem8083479 {_143310 _143311 _143313 B : Type'} (_106907 : B) : (term931 _143310 _143311 _143313 B _106907) = (term932 _143310 _143311 _143313 B _106907).
Proof. exact (@lem8083478 _143310 _143311 _143313 B (term933 _143310 _143311 _143313 B _106907)). Qed.
Lemma lem8083480 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term934 _143310 _143311 _143313 B _106907 clauses) = (term925 _143310 _143311 _143313 B clauses _106907).
Proof. exact (eq_refl (term934 _143310 _143311 _143313 B _106907 clauses)). Qed.
Lemma lem8083481 {_143310 _143311 _143313 : Type'} (s : type1464 _143310 _143311 _143313) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8083482 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) (s : type1464 _143310 _143311 _143313) : (term935 _143310 _143311 _143313 B _106907 clauses s) = (term936 _143310 _143311 _143313 B clauses _106907 s).
Proof. exact (MK_COMB (@lem8083480 _143310 _143311 _143313 B clauses _106907) (@lem8083481 _143310 _143311 _143313 s)). Qed.
Lemma lem8083483 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term936 _143310 _143311 _143313 B clauses _106907 s) = (term924 _143310 _143311 _143313 B s clauses _106907).
Proof. exact (eq_refl (term936 _143310 _143311 _143313 B clauses _106907 s)). Qed.
Lemma lem8083484 {_143310 _143311 _143313 B : Type'} (s : type1464 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term935 _143310 _143311 _143313 B _106907 clauses s) = (term924 _143310 _143311 _143313 B s clauses _106907).
Proof. exact (TRANS (@lem8083482 _143310 _143311 _143313 B clauses _106907 s) (@lem8083483 _143310 _143311 _143313 B s clauses _106907)). Qed.
Lemma lem8083485 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term937 _143310 _143311 _143313 B _106907 clauses) = (term925 _143310 _143311 _143313 B clauses _106907).
Proof. exact (fun_ext (fun s : type1464 _143310 _143311 _143313 => @lem8083484 _143310 _143311 _143313 B s clauses _106907)). Qed.
Lemma lem8083486 {_143310 _143311 _143313 : Type'} : (@ex (_143311 -> _143310 -> _143313 -> _143310)) = (@ex (_143311 -> _143310 -> _143313 -> _143310)).
Proof. exact (eq_refl (@ex (_143311 -> _143310 -> _143313 -> _143310))). Qed.
Lemma lem8083487 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term938 _143310 _143311 _143313 B _106907 clauses) = (term926 _143310 _143311 _143313 B clauses _106907).
Proof. exact (MK_COMB (@lem8083486 _143310 _143311 _143313) (@lem8083485 _143310 _143311 _143313 B clauses _106907)). Qed.
Lemma lem8083488 {_143310 _143311 _143313 B : Type'} (_106907 : B) : (term939 _143310 _143311 _143313 B _106907) = (term927 _143310 _143311 _143313 B _106907).
Proof. exact (fun_ext (fun clauses : type1637 _143310 _143311 _143313 B => @lem8083487 _143310 _143311 _143313 B clauses _106907)). Qed.
Lemma lem8083489 {_143310 _143311 _143313 B : Type'} : (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B)))) = (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))))). Qed.
Lemma lem8083490 {_143310 _143311 _143313 B : Type'} (_106907 : B) : (term931 _143310 _143311 _143313 B _106907) = (term928 _143310 _143311 _143313 B _106907).
Proof. exact (MK_COMB (@lem8083489 _143310 _143311 _143313 B) (@lem8083488 _143310 _143311 _143313 B _106907)). Qed.
Lemma lem8083491 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8083492 {_143310 _143311 _143313 B : Type'} (_106907 : B) : (term940 _143310 _143311 _143313 B _106907) = (term941 _143310 _143311 _143313 B _106907).
Proof. exact (MK_COMB (@lem8083491) (@lem8083490 _143310 _143311 _143313 B _106907)). Qed.
Lemma lem8083493 {_143310 _143311 _143313 B : Type'} (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term934 _143310 _143311 _143313 B _106907 clauses) = (term925 _143310 _143311 _143313 B clauses _106907).
Proof. exact (eq_refl (term934 _143310 _143311 _143313 B _106907 clauses)). Qed.
Lemma lem8083494 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) : (s clauses) = (s clauses).
Proof. exact (eq_refl (s clauses)). Qed.
Lemma lem8083495 {_143310 _143311 _143313 B : Type'} (_106907 : B) (s : type1101 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) : (term942 _143310 _143311 _143313 B _106907 s clauses) = (term943 _143310 _143311 _143313 B _106907 s clauses).
Proof. exact (MK_COMB (@lem8083493 _143310 _143311 _143313 B clauses _106907) (@lem8083494 _143310 _143311 _143313 B s clauses)). Qed.
Lemma lem8083496 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term943 _143310 _143311 _143313 B _106907 s clauses) = (term944 _143310 _143311 _143313 B s clauses _106907).
Proof. exact (eq_refl (term943 _143310 _143311 _143313 B _106907 s clauses)). Qed.
Lemma lem8083497 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term942 _143310 _143311 _143313 B _106907 s clauses) = (term944 _143310 _143311 _143313 B s clauses _106907).
Proof. exact (TRANS (@lem8083495 _143310 _143311 _143313 B _106907 s clauses) (@lem8083496 _143310 _143311 _143313 B s clauses _106907)). Qed.
Lemma lem8083498 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (_106907 : B) : (term945 _143310 _143311 _143313 B _106907 s) = (term946 _143310 _143311 _143313 B s _106907).
Proof. exact (fun_ext (fun clauses : type1637 _143310 _143311 _143313 B => @lem8083497 _143310 _143311 _143313 B s clauses _106907)). Qed.
Lemma lem8083499 {_143310 _143311 _143313 B : Type'} : (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B)))) = (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))))). Qed.
Lemma lem8083500 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (_106907 : B) : (term947 _143310 _143311 _143313 B _106907 s) = (term948 _143310 _143311 _143313 B s _106907).
Proof. exact (MK_COMB (@lem8083499 _143310 _143311 _143313 B) (@lem8083498 _143310 _143311 _143313 B s _106907)). Qed.
Lemma lem8083501 {_143310 _143311 _143313 B : Type'} (_106907 : B) : (term949 _143310 _143311 _143313 B _106907) = (term950 _143310 _143311 _143313 B _106907).
Proof. exact (fun_ext (fun s : type1101 _143310 _143311 _143313 B => @lem8083500 _143310 _143311 _143313 B s _106907)). Qed.
Lemma lem8083502 {_143310 _143311 _143313 B : Type'} : (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))) -> _143311 -> _143310 -> _143313 -> _143310)) = (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))) -> _143311 -> _143310 -> _143313 -> _143310)).
Proof. exact (eq_refl (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))) -> _143311 -> _143310 -> _143313 -> _143310))). Qed.
Lemma lem8083503 {_143310 _143311 _143313 B : Type'} (_106907 : B) : (term932 _143310 _143311 _143313 B _106907) = (term951 _143310 _143311 _143313 B _106907).
Proof. exact (MK_COMB (@lem8083502 _143310 _143311 _143313 B) (@lem8083501 _143310 _143311 _143313 B _106907)). Qed.
Lemma lem8083504 {_143310 _143311 _143313 B : Type'} (_106907 : B) : ((term931 _143310 _143311 _143313 B _106907) = (term932 _143310 _143311 _143313 B _106907)) = ((term928 _143310 _143311 _143313 B _106907) = (term951 _143310 _143311 _143313 B _106907)).
Proof. exact (MK_COMB (@lem8083492 _143310 _143311 _143313 B _106907) (@lem8083503 _143310 _143311 _143313 B _106907)). Qed.
Lemma lem8083505 {_143310 _143311 _143313 B : Type'} (_106907 : B) : (term928 _143310 _143311 _143313 B _106907) = (term951 _143310 _143311 _143313 B _106907).
Proof. exact (EQ_MP (@lem8083504 _143310 _143311 _143313 B _106907) (@lem8083479 _143310 _143311 _143313 B _106907)). Qed.
Lemma lem8083507 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8083508 {_143310 _143311 _143313 B : Type'} (P : type1097 _143310 _143311 _143313 B) : (term952 _143310 _143311 _143313 B P) = (term953 _143310 _143311 _143313 B P).
Proof. exact (@lem8083507 (type1637 _143310 _143311 _143313 B) (type1463 _143310 _143311 _143313 B) P). Qed.
Lemma lem8083509 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (_106907 : B) : (term954 _143310 _143311 _143313 B s _106907) = (term955 _143310 _143311 _143313 B s _106907).
Proof. exact (@lem8083508 _143310 _143311 _143313 B (term956 _143310 _143311 _143313 B s _106907)). Qed.
Lemma lem8083510 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term957 _143310 _143311 _143313 B s _106907 clauses) = (term958 _143310 _143311 _143313 B s clauses _106907).
Proof. exact (eq_refl (term957 _143310 _143311 _143313 B s _106907 clauses)). Qed.
Lemma lem8083511 {_143310 _143311 _143313 B : Type'} (t : type1463 _143310 _143311 _143313 B) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8083512 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) (t : type1463 _143310 _143311 _143313 B) : (term959 _143310 _143311 _143313 B s _106907 clauses t) = (term960 _143310 _143311 _143313 B s clauses _106907 t).
Proof. exact (MK_COMB (@lem8083510 _143310 _143311 _143313 B s clauses _106907) (@lem8083511 _143310 _143311 _143313 B t)). Qed.
Lemma lem8083513 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1463 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term960 _143310 _143311 _143313 B s clauses _106907 t) = (term961 _143310 _143311 _143313 B s t clauses _106907).
Proof. exact (eq_refl (term960 _143310 _143311 _143313 B s clauses _106907 t)). Qed.
Lemma lem8083514 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1463 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term959 _143310 _143311 _143313 B s _106907 clauses t) = (term961 _143310 _143311 _143313 B s t clauses _106907).
Proof. exact (TRANS (@lem8083512 _143310 _143311 _143313 B s clauses _106907 t) (@lem8083513 _143310 _143311 _143313 B s t clauses _106907)). Qed.
Lemma lem8083515 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term962 _143310 _143311 _143313 B s _106907 clauses) = (term958 _143310 _143311 _143313 B s clauses _106907).
Proof. exact (fun_ext (fun t : type1463 _143310 _143311 _143313 B => @lem8083514 _143310 _143311 _143313 B s t clauses _106907)). Qed.
Lemma lem8083516 {_143310 _143311 _143313 B : Type'} : (@ex (_143311 -> _143310 -> _143311 -> _143313 -> B)) = (@ex (_143311 -> _143310 -> _143311 -> _143313 -> B)).
Proof. exact (eq_refl (@ex (_143311 -> _143310 -> _143311 -> _143313 -> B))). Qed.
Lemma lem8083517 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term963 _143310 _143311 _143313 B s _106907 clauses) = (term944 _143310 _143311 _143313 B s clauses _106907).
Proof. exact (MK_COMB (@lem8083516 _143310 _143311 _143313 B) (@lem8083515 _143310 _143311 _143313 B s clauses _106907)). Qed.
Lemma lem8083518 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (_106907 : B) : (term964 _143310 _143311 _143313 B s _106907) = (term946 _143310 _143311 _143313 B s _106907).
Proof. exact (fun_ext (fun clauses : type1637 _143310 _143311 _143313 B => @lem8083517 _143310 _143311 _143313 B s clauses _106907)). Qed.
Lemma lem8083519 {_143310 _143311 _143313 B : Type'} : (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B)))) = (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))))). Qed.
Lemma lem8083520 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (_106907 : B) : (term954 _143310 _143311 _143313 B s _106907) = (term948 _143310 _143311 _143313 B s _106907).
Proof. exact (MK_COMB (@lem8083519 _143310 _143311 _143313 B) (@lem8083518 _143310 _143311 _143313 B s _106907)). Qed.
Lemma lem8083521 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8083522 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (_106907 : B) : (term965 _143310 _143311 _143313 B s _106907) = (term966 _143310 _143311 _143313 B s _106907).
Proof. exact (MK_COMB (@lem8083521) (@lem8083520 _143310 _143311 _143313 B s _106907)). Qed.
Lemma lem8083523 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term957 _143310 _143311 _143313 B s _106907 clauses) = (term958 _143310 _143311 _143313 B s clauses _106907).
Proof. exact (eq_refl (term957 _143310 _143311 _143313 B s _106907 clauses)). Qed.
Lemma lem8083524 {_143310 _143311 _143313 B : Type'} (t : type1100 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) : (t clauses) = (t clauses).
Proof. exact (eq_refl (t clauses)). Qed.
Lemma lem8083525 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (_106907 : B) (t : type1100 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) : (term967 _143310 _143311 _143313 B s _106907 t clauses) = (term968 _143310 _143311 _143313 B s _106907 t clauses).
Proof. exact (MK_COMB (@lem8083523 _143310 _143311 _143313 B s clauses _106907) (@lem8083524 _143310 _143311 _143313 B t clauses)). Qed.
Lemma lem8083526 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term968 _143310 _143311 _143313 B s _106907 t clauses) = (term969 _143310 _143311 _143313 B s t clauses _106907).
Proof. exact (eq_refl (term968 _143310 _143311 _143313 B s _106907 t clauses)). Qed.
Lemma lem8083527 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term967 _143310 _143311 _143313 B s _106907 t clauses) = (term969 _143310 _143311 _143313 B s t clauses _106907).
Proof. exact (TRANS (@lem8083525 _143310 _143311 _143313 B s _106907 t clauses) (@lem8083526 _143310 _143311 _143313 B s t clauses _106907)). Qed.
Lemma lem8083528 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (_106907 : B) : (term970 _143310 _143311 _143313 B s _106907 t) = (term971 _143310 _143311 _143313 B s t _106907).
Proof. exact (fun_ext (fun clauses : type1637 _143310 _143311 _143313 B => @lem8083527 _143310 _143311 _143313 B s t clauses _106907)). Qed.
Lemma lem8083529 {_143310 _143311 _143313 B : Type'} : (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B)))) = (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))))). Qed.
Lemma lem8083530 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (_106907 : B) : (term972 _143310 _143311 _143313 B s _106907 t) = (term973 _143310 _143311 _143313 B s t _106907).
Proof. exact (MK_COMB (@lem8083529 _143310 _143311 _143313 B) (@lem8083528 _143310 _143311 _143313 B s t _106907)). Qed.
Lemma lem8083531 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (_106907 : B) : (term974 _143310 _143311 _143313 B s _106907) = (term975 _143310 _143311 _143313 B s _106907).
Proof. exact (fun_ext (fun t : type1100 _143310 _143311 _143313 B => @lem8083530 _143310 _143311 _143313 B s t _106907)). Qed.
Lemma lem8083532 {_143310 _143311 _143313 B : Type'} : (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))) -> _143311 -> _143310 -> _143311 -> _143313 -> B)) = (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))) -> _143311 -> _143310 -> _143311 -> _143313 -> B)).
Proof. exact (eq_refl (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))) -> _143311 -> _143310 -> _143311 -> _143313 -> B))). Qed.
Lemma lem8083533 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (_106907 : B) : (term955 _143310 _143311 _143313 B s _106907) = (term976 _143310 _143311 _143313 B s _106907).
Proof. exact (MK_COMB (@lem8083532 _143310 _143311 _143313 B) (@lem8083531 _143310 _143311 _143313 B s _106907)). Qed.
Lemma lem8083534 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (_106907 : B) : ((term954 _143310 _143311 _143313 B s _106907) = (term955 _143310 _143311 _143313 B s _106907)) = ((term948 _143310 _143311 _143313 B s _106907) = (term976 _143310 _143311 _143313 B s _106907)).
Proof. exact (MK_COMB (@lem8083522 _143310 _143311 _143313 B s _106907) (@lem8083533 _143310 _143311 _143313 B s _106907)). Qed.
Lemma lem8083535 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (_106907 : B) : (term948 _143310 _143311 _143313 B s _106907) = (term976 _143310 _143311 _143313 B s _106907).
Proof. exact (EQ_MP (@lem8083534 _143310 _143311 _143313 B s _106907) (@lem8083509 _143310 _143311 _143313 B s _106907)). Qed.
Lemma lem8083537 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8083538 {_143310 _143311 _143313 B : Type'} (P : type1099 _143310 _143311 _143313 B) : (term977 _143310 _143311 _143313 B P) = (term978 _143310 _143311 _143313 B P).
Proof. exact (@lem8083537 (type1637 _143310 _143311 _143313 B) (type1469 _143310 _143311 _143313) P). Qed.
Lemma lem8083539 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (_106907 : B) : (term979 _143310 _143311 _143313 B s t _106907) = (term980 _143310 _143311 _143313 B s t _106907).
Proof. exact (@lem8083538 _143310 _143311 _143313 B (term981 _143310 _143311 _143313 B s t _106907)). Qed.
Lemma lem8083540 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term982 _143310 _143311 _143313 B s t _106907 clauses) = (term983 _143310 _143311 _143313 B s t clauses _106907).
Proof. exact (eq_refl (term982 _143310 _143311 _143313 B s t _106907 clauses)). Qed.
Lemma lem8083541 {_143310 _143311 _143313 : Type'} (a : type1469 _143310 _143311 _143313) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8083542 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) (a : type1469 _143310 _143311 _143313) : (term984 _143310 _143311 _143313 B s t _106907 clauses a) = (term985 _143310 _143311 _143313 B s t clauses _106907 a).
Proof. exact (MK_COMB (@lem8083540 _143310 _143311 _143313 B s t clauses _106907) (@lem8083541 _143310 _143311 _143313 a)). Qed.
Lemma lem8083543 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (a : type1469 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term985 _143310 _143311 _143313 B s t clauses _106907 a) = (term986 _143310 _143311 _143313 B s t a clauses _106907).
Proof. exact (eq_refl (term985 _143310 _143311 _143313 B s t clauses _106907 a)). Qed.
Lemma lem8083544 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (a : type1469 _143310 _143311 _143313) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term984 _143310 _143311 _143313 B s t _106907 clauses a) = (term986 _143310 _143311 _143313 B s t a clauses _106907).
Proof. exact (TRANS (@lem8083542 _143310 _143311 _143313 B s t clauses _106907 a) (@lem8083543 _143310 _143311 _143313 B s t a clauses _106907)). Qed.
Lemma lem8083545 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term987 _143310 _143311 _143313 B s t _106907 clauses) = (term983 _143310 _143311 _143313 B s t clauses _106907).
Proof. exact (fun_ext (fun a : type1469 _143310 _143311 _143313 => @lem8083544 _143310 _143311 _143313 B s t a clauses _106907)). Qed.
Lemma lem8083546 {_143310 _143311 _143313 : Type'} : (@ex (_143311 -> _143310 -> _143313)) = (@ex (_143311 -> _143310 -> _143313)).
Proof. exact (eq_refl (@ex (_143311 -> _143310 -> _143313))). Qed.
Lemma lem8083547 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term988 _143310 _143311 _143313 B s t _106907 clauses) = (term969 _143310 _143311 _143313 B s t clauses _106907).
Proof. exact (MK_COMB (@lem8083546 _143310 _143311 _143313) (@lem8083545 _143310 _143311 _143313 B s t clauses _106907)). Qed.
Lemma lem8083548 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (_106907 : B) : (term989 _143310 _143311 _143313 B s t _106907) = (term971 _143310 _143311 _143313 B s t _106907).
Proof. exact (fun_ext (fun clauses : type1637 _143310 _143311 _143313 B => @lem8083547 _143310 _143311 _143313 B s t clauses _106907)). Qed.
Lemma lem8083549 {_143310 _143311 _143313 B : Type'} : (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B)))) = (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))))). Qed.
Lemma lem8083550 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (_106907 : B) : (term979 _143310 _143311 _143313 B s t _106907) = (term973 _143310 _143311 _143313 B s t _106907).
Proof. exact (MK_COMB (@lem8083549 _143310 _143311 _143313 B) (@lem8083548 _143310 _143311 _143313 B s t _106907)). Qed.
Lemma lem8083551 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8083552 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (_106907 : B) : (term990 _143310 _143311 _143313 B s t _106907) = (term991 _143310 _143311 _143313 B s t _106907).
Proof. exact (MK_COMB (@lem8083551) (@lem8083550 _143310 _143311 _143313 B s t _106907)). Qed.
Lemma lem8083553 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term982 _143310 _143311 _143313 B s t _106907 clauses) = (term983 _143310 _143311 _143313 B s t clauses _106907).
Proof. exact (eq_refl (term982 _143310 _143311 _143313 B s t _106907 clauses)). Qed.
Lemma lem8083554 {_143310 _143311 _143313 B : Type'} (a : type1102 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) : (a clauses) = (a clauses).
Proof. exact (eq_refl (a clauses)). Qed.
Lemma lem8083555 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (_106907 : B) (a : type1102 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) : (term992 _143310 _143311 _143313 B s t _106907 a clauses) = (term993 _143310 _143311 _143313 B s t _106907 a clauses).
Proof. exact (MK_COMB (@lem8083553 _143310 _143311 _143313 B s t clauses _106907) (@lem8083554 _143310 _143311 _143313 B a clauses)). Qed.
Lemma lem8083556 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (a : type1102 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term993 _143310 _143311 _143313 B s t _106907 a clauses) = (term994 _143310 _143311 _143313 B s t a clauses _106907).
Proof. exact (eq_refl (term993 _143310 _143311 _143313 B s t _106907 a clauses)). Qed.
Lemma lem8083557 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (a : type1102 _143310 _143311 _143313 B) (clauses : type1637 _143310 _143311 _143313 B) (_106907 : B) : (term992 _143310 _143311 _143313 B s t _106907 a clauses) = (term994 _143310 _143311 _143313 B s t a clauses _106907).
Proof. exact (TRANS (@lem8083555 _143310 _143311 _143313 B s t _106907 a clauses) (@lem8083556 _143310 _143311 _143313 B s t a clauses _106907)). Qed.
Lemma lem8083558 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (a : type1102 _143310 _143311 _143313 B) (_106907 : B) : (term995 _143310 _143311 _143313 B s t _106907 a) = (term996 _143310 _143311 _143313 B s t a _106907).
Proof. exact (fun_ext (fun clauses : type1637 _143310 _143311 _143313 B => @lem8083557 _143310 _143311 _143313 B s t a clauses _106907)). Qed.
Lemma lem8083559 {_143310 _143311 _143313 B : Type'} : (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B)))) = (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))))). Qed.
Lemma lem8083560 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (a : type1102 _143310 _143311 _143313 B) (_106907 : B) : (term997 _143310 _143311 _143313 B s t _106907 a) = (term998 _143310 _143311 _143313 B s t a _106907).
Proof. exact (MK_COMB (@lem8083559 _143310 _143311 _143313 B) (@lem8083558 _143310 _143311 _143313 B s t a _106907)). Qed.
Lemma lem8083561 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (_106907 : B) : (term999 _143310 _143311 _143313 B s t _106907) = (term1000 _143310 _143311 _143313 B s t _106907).
Proof. exact (fun_ext (fun a : type1102 _143310 _143311 _143313 B => @lem8083560 _143310 _143311 _143313 B s t a _106907)). Qed.
Lemma lem8083562 {_143310 _143311 _143313 B : Type'} : (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))) -> _143311 -> _143310 -> _143313)) = (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))) -> _143311 -> _143310 -> _143313)).
Proof. exact (eq_refl (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))) -> _143311 -> _143310 -> _143313))). Qed.
Lemma lem8083563 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (_106907 : B) : (term980 _143310 _143311 _143313 B s t _106907) = (term1001 _143310 _143311 _143313 B s t _106907).
Proof. exact (MK_COMB (@lem8083562 _143310 _143311 _143313 B) (@lem8083561 _143310 _143311 _143313 B s t _106907)). Qed.
Lemma lem8083564 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (_106907 : B) : ((term979 _143310 _143311 _143313 B s t _106907) = (term980 _143310 _143311 _143313 B s t _106907)) = ((term973 _143310 _143311 _143313 B s t _106907) = (term1001 _143310 _143311 _143313 B s t _106907)).
Proof. exact (MK_COMB (@lem8083552 _143310 _143311 _143313 B s t _106907) (@lem8083563 _143310 _143311 _143313 B s t _106907)). Qed.
Lemma lem8083565 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (t : type1100 _143310 _143311 _143313 B) (_106907 : B) : (term973 _143310 _143311 _143313 B s t _106907) = (term1001 _143310 _143311 _143313 B s t _106907).
Proof. exact (EQ_MP (@lem8083564 _143310 _143311 _143313 B s t _106907) (@lem8083539 _143310 _143311 _143313 B s t _106907)). Qed.
Lemma lem8083566 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (_106907 : B) : (term975 _143310 _143311 _143313 B s _106907) = (term1002 _143310 _143311 _143313 B s _106907).
Proof. exact (fun_ext (fun t : type1100 _143310 _143311 _143313 B => @lem8083565 _143310 _143311 _143313 B s t _106907)). Qed.
Lemma lem8083567 {_143310 _143311 _143313 B : Type'} : (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))) -> _143311 -> _143310 -> _143311 -> _143313 -> B)) = (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))) -> _143311 -> _143310 -> _143311 -> _143313 -> B)).
Proof. exact (eq_refl (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))) -> _143311 -> _143310 -> _143311 -> _143313 -> B))). Qed.
Lemma lem8083568 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (_106907 : B) : (term976 _143310 _143311 _143313 B s _106907) = (term1003 _143310 _143311 _143313 B s _106907).
Proof. exact (MK_COMB (@lem8083567 _143310 _143311 _143313 B) (@lem8083566 _143310 _143311 _143313 B s _106907)). Qed.
Lemma lem8083569 {_143310 _143311 _143313 B : Type'} (s : type1101 _143310 _143311 _143313 B) (_106907 : B) : (term948 _143310 _143311 _143313 B s _106907) = (term1003 _143310 _143311 _143313 B s _106907).
Proof. exact (TRANS (@lem8083535 _143310 _143311 _143313 B s _106907) (@lem8083568 _143310 _143311 _143313 B s _106907)). Qed.
Lemma lem8083570 {_143310 _143311 _143313 B : Type'} (_106907 : B) : (term950 _143310 _143311 _143313 B _106907) = (term1004 _143310 _143311 _143313 B _106907).
Proof. exact (fun_ext (fun s : type1101 _143310 _143311 _143313 B => @lem8083569 _143310 _143311 _143313 B s _106907)). Qed.
Lemma lem8083571 {_143310 _143311 _143313 B : Type'} : (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))) -> _143311 -> _143310 -> _143313 -> _143310)) = (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))) -> _143311 -> _143310 -> _143313 -> _143310)).
Proof. exact (eq_refl (@ex ((list (prod (_143313 -> _143310) (_143311 -> _143313 -> B))) -> _143311 -> _143310 -> _143313 -> _143310))). Qed.
Lemma lem8083572 {_143310 _143311 _143313 B : Type'} (_106907 : B) : (term951 _143310 _143311 _143313 B _106907) = (term1005 _143310 _143311 _143313 B _106907).
Proof. exact (MK_COMB (@lem8083571 _143310 _143311 _143313 B) (@lem8083570 _143310 _143311 _143313 B _106907)). Qed.
Lemma lem8083573 {_143310 _143311 _143313 B : Type'} (_106907 : B) : (term928 _143310 _143311 _143313 B _106907) = (term1005 _143310 _143311 _143313 B _106907).
Proof. exact (TRANS (@lem8083505 _143310 _143311 _143313 B _106907) (@lem8083572 _143310 _143311 _143313 B _106907)). Qed.
Lemma lem8083575 {_143310 _143311 _143313 B : Type'} (_106907 : B) : (term710 _143310 _143311 _143313 B _106907) = (term1005 _143310 _143311 _143313 B _106907).
Proof. exact (TRANS (@lem8083475 _143310 _143311 _143313 B _106907) (@lem8083573 _143310 _143311 _143313 B _106907)). Qed.
Lemma lem8083576 {_143310 _143311 _143313 B : Type'} (_106907 : B) : (term347 _143310 _143311 _143313 B _106907) = (term1005 _143310 _143311 _143313 B _106907).
Proof. exact (TRANS (@lem8082944 _143310 _143311 _143313 B _106907) (@lem8083575 _143310 _143311 _143313 B _106907)). Qed.
Lemma lem8083577 {_143310 _143311 _143313 B : Type'} (_106907 : B) (h1 : term347 _143310 _143311 _143313 B _106907) : term1005 _143310 _143311 _143313 B _106907.
Proof. exact (EQ_MP (@lem8083576 _143310 _143311 _143313 B _106907) (@lem8081784 _143310 _143311 _143313 B _106907 h1)). Qed.
Lemma lem8083583 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) (a : _143313) : (term354 _143311 _143313 _143320 A s clauses x t c a) = (term354 _143311 _143313 _143320 A s clauses x t c a).
Proof. exact (eq_refl (term354 _143311 _143313 _143320 A s clauses x t c a)). Qed.
Lemma lem8083584 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term352 _143311 _143313 _143320 A s clauses x t c) = (term352 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8083583 _143311 _143313 _143320 A s clauses x t c a)). Qed.
Lemma lem8083585 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8083586 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term365 _143311 _143313 _143320 A s clauses x t c) = (term365 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (MK_COMB (@lem8083585 _143313) (@lem8083584 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8083588 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) : (term355 _143311 _143313 _143320 A s t clauses) = (term355 _143311 _143313 _143320 A s t clauses).
Proof. exact (eq_refl (term355 _143311 _143313 _143320 A s t clauses)). Qed.
Lemma lem8083589 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term366 _143311 _143313 _143320 A s clauses x t c) = (term366 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (MK_COMB (@lem8083588 _143311 _143313 _143320 A s t clauses) (@lem8083586 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8083590 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term368 _143311 _143313 _143320 A s clauses x c) = (term368 _143311 _143313 _143320 A s clauses x c).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8083589 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8083591 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8083592 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term370 _143311 _143313 _143320 A s clauses x c) = (term370 _143311 _143313 _143320 A s clauses x c).
Proof. exact (MK_COMB (@lem8083591 _143311 _143313 _143320) (@lem8083590 _143311 _143313 _143320 A s clauses x c)). Qed.
Lemma lem8083593 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term372 _143311 _143313 _143320 A clauses x c) = (term372 _143311 _143313 _143320 A clauses x c).
Proof. exact (fun_ext (fun s : _143313 -> A => @lem8083592 _143311 _143313 _143320 A s clauses x c)). Qed.
Lemma lem8083594 {_143313 A : Type'} : (@ex (_143313 -> A)) = (@ex (_143313 -> A)).
Proof. exact (eq_refl (@ex (_143313 -> A))). Qed.
Lemma lem8083595 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term374 _143311 _143313 _143320 A clauses x c) = (term374 _143311 _143313 _143320 A clauses x c).
Proof. exact (MK_COMB (@lem8083594 _143313 A) (@lem8083593 _143311 _143313 _143320 A clauses x c)). Qed.
Lemma lem8083597 {_143311 _143313 _143320 : Type'} (P : type443 _143311 _143313 _143320) : (term671 _143311 _143313 _143320 P) = (term672 _143311 _143313 _143320 P).
Proof. exact (@lem18394 (type1412 _143311 _143313 _143320) P). Qed.
Lemma lem8083598 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) : (term1006 _143311 _143313 _143320 A s clauses) = (term1007 _143311 _143313 _143320 A s clauses).
Proof. exact (@lem8083597 _143311 _143313 _143320 (term397 _143311 _143313 _143320 A s clauses)). Qed.
Lemma lem8083599 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) : (term398 _143311 _143313 _143320 A s clauses t) = (term351 _143311 _143313 _143320 A s t clauses).
Proof. exact (eq_refl (term398 _143311 _143313 _143320 A s clauses t)). Qed.
Lemma lem8083600 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8083602 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) : (term1008 _143311 _143313 _143320 A s clauses t) = (term1009 _143311 _143313 _143320 A s t clauses).
Proof. exact (MK_COMB (@lem8083600) (@lem8083599 _143311 _143313 _143320 A s t clauses)). Qed.
Lemma lem8083603 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) : (term1010 _143311 _143313 _143320 A s clauses) = (term1011 _143311 _143313 _143320 A s clauses).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8083602 _143311 _143313 _143320 A s t clauses)). Qed.
Lemma lem8083604 {_143311 _143313 _143320 : Type'} : (@all (_143311 -> _143313 -> _143320)) = (@all (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@all (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8083605 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) : (term1007 _143311 _143313 _143320 A s clauses) = (term1012 _143311 _143313 _143320 A s clauses).
Proof. exact (MK_COMB (@lem8083604 _143311 _143313 _143320) (@lem8083603 _143311 _143313 _143320 A s clauses)). Qed.
Lemma lem8083606 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) : (term1006 _143311 _143313 _143320 A s clauses) = (term1012 _143311 _143313 _143320 A s clauses).
Proof. exact (TRANS (@lem8083598 _143311 _143313 _143320 A s clauses) (@lem8083605 _143311 _143313 _143320 A s clauses)). Qed.
Lemma lem8083608 {_143313 : Type'} (P : _143313 -> Prop) : (term680 _143313 P) = (term681 _143313 P).
Proof. exact (@lem18394 _143313 P). Qed.
Lemma lem8083609 {_143313 A : Type'} (s : _143313 -> A) (x : A) : (term1013 _143313 A s x) = (term1014 _143313 A s x).
Proof. exact (@lem8083608 _143313 (term378 _143313 A s x)). Qed.
Lemma lem8083610 {_143313 A : Type'} (s : _143313 -> A) (a : _143313) (x : A) : (term379 _143313 A s x a) = ((s a) = x).
Proof. exact (eq_refl (term379 _143313 A s x a)). Qed.
Lemma lem8083611 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8083613 {_143313 A : Type'} (s : _143313 -> A) (a : _143313) (x : A) : (term1015 _143313 A s x a) = (term1016 _143313 A s a x).
Proof. exact (MK_COMB (@lem8083611) (@lem8083610 _143313 A s a x)). Qed.
Lemma lem8083614 {_143313 A : Type'} (s : _143313 -> A) (x : A) : (term1017 _143313 A s x) = (term1018 _143313 A s x).
Proof. exact (fun_ext (fun a : _143313 => @lem8083613 _143313 A s a x)). Qed.
Lemma lem8083615 {_143313 : Type'} : (@all _143313) = (@all _143313).
Proof. exact (eq_refl (@all _143313)). Qed.
Lemma lem8083616 {_143313 A : Type'} (s : _143313 -> A) (x : A) : (term1014 _143313 A s x) = (term1019 _143313 A s x).
Proof. exact (MK_COMB (@lem8083615 _143313) (@lem8083614 _143313 A s x)). Qed.
Lemma lem8083617 {_143313 A : Type'} (s : _143313 -> A) (x : A) : (term1013 _143313 A s x) = (term1019 _143313 A s x).
Proof. exact (TRANS (@lem8083609 _143313 A s x) (@lem8083616 _143313 A s x)). Qed.
Lemma lem8083618 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8083619 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) : (term1020 _143311 _143313 _143320 A s clauses) = (term1021 _143311 _143313 _143320 A s clauses).
Proof. exact (MK_COMB (@lem8083618) (@lem8083606 _143311 _143313 _143320 A s clauses)). Qed.
Lemma lem8083620 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : (term1022 _143311 _143313 _143320 A clauses s x) = (term1023 _143311 _143313 _143320 A clauses s x).
Proof. exact (MK_COMB (@lem8083619 _143311 _143313 _143320 A s clauses) (@lem8083617 _143313 A s x)). Qed.
Lemma lem8083621 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : (term1024 _143311 _143313 _143320 A clauses s x) = (term1022 _143311 _143313 _143320 A clauses s x).
Proof. exact (@lem17045 (term406 _143311 _143313 _143320 A s clauses) (term389 _143313 A s x)). Qed.
Lemma lem8083622 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : (term1024 _143311 _143313 _143320 A clauses s x) = (term1023 _143311 _143313 _143320 A clauses s x).
Proof. exact (TRANS (@lem8083621 _143311 _143313 _143320 A clauses s x) (@lem8083620 _143311 _143313 _143320 A clauses s x)). Qed.
Lemma lem8083623 {_143313 A : Type'} (P : type572 _143313 A) : (term1025 _143313 A P) = (term1026 _143313 A P).
Proof. exact (@lem18394 (_143313 -> A) P). Qed.
Lemma lem8083624 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) : (term415 _143311 _143313 _143320 A clauses x) = (term1027 _143311 _143313 _143320 A clauses x).
Proof. exact (@lem8083623 _143313 A (term411 _143311 _143313 _143320 A clauses x)). Qed.
Lemma lem8083625 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : (term1028 _143311 _143313 _143320 A clauses x s) = (term409 _143311 _143313 _143320 A clauses s x).
Proof. exact (eq_refl (term1028 _143311 _143313 _143320 A clauses x s)). Qed.
Lemma lem8083626 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8083627 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : (term1029 _143311 _143313 _143320 A clauses x s) = (term1024 _143311 _143313 _143320 A clauses s x).
Proof. exact (MK_COMB (@lem8083626) (@lem8083625 _143311 _143313 _143320 A clauses s x)). Qed.
Lemma lem8083628 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (s : _143313 -> A) (x : A) : (term1029 _143311 _143313 _143320 A clauses x s) = (term1023 _143311 _143313 _143320 A clauses s x).
Proof. exact (TRANS (@lem8083627 _143311 _143313 _143320 A clauses s x) (@lem8083622 _143311 _143313 _143320 A clauses s x)). Qed.
Lemma lem8083629 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) : (term1030 _143311 _143313 _143320 A clauses x) = (term1031 _143311 _143313 _143320 A clauses x).
Proof. exact (fun_ext (fun s : _143313 -> A => @lem8083628 _143311 _143313 _143320 A clauses s x)). Qed.
Lemma lem8083630 {_143313 A : Type'} : (@all (_143313 -> A)) = (@all (_143313 -> A)).
Proof. exact (eq_refl (@all (_143313 -> A))). Qed.
Lemma lem8083631 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) : (term1027 _143311 _143313 _143320 A clauses x) = (term1032 _143311 _143313 _143320 A clauses x).
Proof. exact (MK_COMB (@lem8083630 _143313 A) (@lem8083629 _143311 _143313 _143320 A clauses x)). Qed.
Lemma lem8083632 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) : (term415 _143311 _143313 _143320 A clauses x) = (term1032 _143311 _143313 _143320 A clauses x).
Proof. exact (TRANS (@lem8083624 _143311 _143313 _143320 A clauses x) (@lem8083631 _143311 _143313 _143320 A clauses x)). Qed.
Lemma lem8083633 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : ((@CASEWISE _143320 _143313 A _143311 clauses c x) = _106908) = ((@CASEWISE _143320 _143313 A _143311 clauses c x) = _106908).
Proof. exact (eq_refl ((@CASEWISE _143320 _143313 A _143311 clauses c x) = _106908)). Qed.
Lemma lem8083634 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8083635 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) : (term416 _143311 _143313 _143320 A clauses x) = (term1033 _143311 _143313 _143320 A clauses x).
Proof. exact (MK_COMB (@lem8083634) (@lem8083632 _143311 _143313 _143320 A clauses x)). Qed.
Lemma lem8083636 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term417 _143311 _143313 _143320 A clauses c x _106908) = (term1034 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (MK_COMB (@lem8083635 _143311 _143313 _143320 A clauses x) (@lem8083633 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083637 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8083638 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term375 _143311 _143313 _143320 A clauses x c) = (term375 _143311 _143313 _143320 A clauses x c).
Proof. exact (MK_COMB (@lem8083637) (@lem8083595 _143311 _143313 _143320 A clauses x c)). Qed.
Lemma lem8083639 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term418 _143311 _143313 _143320 A clauses c x _106908) = (term1035 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (MK_COMB (@lem8083638 _143311 _143313 _143320 A clauses x c) (@lem8083636 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083640 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term419 _143311 _143313 _143320 A clauses c _106908) = (term1036 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (fun_ext (fun x : A => @lem8083639 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083641 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8083642 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term420 _143311 _143313 _143320 A clauses c _106908) = (term1037 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (MK_COMB (@lem8083641 A) (@lem8083640 _143311 _143313 _143320 A clauses c _106908)). Qed.
Lemma lem8083643 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term421 _143311 _143313 _143320 A clauses _106908) = (term1038 _143311 _143313 _143320 A clauses _106908).
Proof. exact (fun_ext (fun c : _143311 => @lem8083642 _143311 _143313 _143320 A clauses c _106908)). Qed.
Lemma lem8083644 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8083645 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term422 _143311 _143313 _143320 A clauses _106908) = (term1039 _143311 _143313 _143320 A clauses _106908).
Proof. exact (MK_COMB (@lem8083644 _143311) (@lem8083643 _143311 _143313 _143320 A clauses _106908)). Qed.
Lemma lem8083646 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) : (term423 _143311 _143313 _143320 A _106908) = (term1040 _143311 _143313 _143320 A _106908).
Proof. exact (fun_ext (fun clauses : type1634 _143311 _143313 _143320 A => @lem8083645 _143311 _143313 _143320 A clauses _106908)). Qed.
Lemma lem8083647 {_143311 _143313 _143320 A : Type'} : (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320)))) = (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))))). Qed.
Lemma lem8083648 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) : (term424 _143311 _143313 _143320 A _106908) = (term1041 _143311 _143313 _143320 A _106908).
Proof. exact (MK_COMB (@lem8083647 _143311 _143313 _143320 A) (@lem8083646 _143311 _143313 _143320 A _106908)). Qed.
Lemma lem8083863 {A : Type'} (P : Prop) (Q : A -> Prop) : (term267 A P Q) = (term266 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem8083864 {_143313 : Type'} (P : Prop) (Q : _143313 -> Prop) : (term267 _143313 P Q) = (term266 _143313 P Q).
Proof. exact (@lem8083863 _143313 P Q). Qed.
Lemma lem8083865 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term350 _143311 _143313 _143320 A s clauses x t c) = (term349 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (@lem8083864 _143313 (term351 _143311 _143313 _143320 A s t clauses) (term352 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8083866 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) (a : _143313) : (term353 _143311 _143313 _143320 A s clauses x t c a) = (term354 _143311 _143313 _143320 A s clauses x t c a).
Proof. exact (eq_refl (term353 _143311 _143313 _143320 A s clauses x t c a)). Qed.
Lemma lem8083867 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term363 _143311 _143313 _143320 A s clauses x t c) = (term352 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8083866 _143311 _143313 _143320 A s clauses x t c a)). Qed.
Lemma lem8083868 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8083869 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term364 _143311 _143313 _143320 A s clauses x t c) = (term365 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (MK_COMB (@lem8083868 _143313) (@lem8083867 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8083870 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) : (term355 _143311 _143313 _143320 A s t clauses) = (term355 _143311 _143313 _143320 A s t clauses).
Proof. exact (eq_refl (term355 _143311 _143313 _143320 A s t clauses)). Qed.
Lemma lem8083871 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term350 _143311 _143313 _143320 A s clauses x t c) = (term366 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (MK_COMB (@lem8083870 _143311 _143313 _143320 A s t clauses) (@lem8083869 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8083872 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8083873 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term1042 _143311 _143313 _143320 A s clauses x t c) = (term1043 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (MK_COMB (@lem8083872) (@lem8083871 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8083874 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) (a : _143313) : (term353 _143311 _143313 _143320 A s clauses x t c a) = (term354 _143311 _143313 _143320 A s clauses x t c a).
Proof. exact (eq_refl (term353 _143311 _143313 _143320 A s clauses x t c a)). Qed.
Lemma lem8083875 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) : (term355 _143311 _143313 _143320 A s t clauses) = (term355 _143311 _143313 _143320 A s t clauses).
Proof. exact (eq_refl (term355 _143311 _143313 _143320 A s t clauses)). Qed.
Lemma lem8083876 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) (a : _143313) : (term356 _143311 _143313 _143320 A s clauses x t c a) = (term357 _143311 _143313 _143320 A s clauses x t c a).
Proof. exact (MK_COMB (@lem8083875 _143311 _143313 _143320 A s t clauses) (@lem8083874 _143311 _143313 _143320 A s clauses x t c a)). Qed.
Lemma lem8083877 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term358 _143311 _143313 _143320 A s clauses x t c) = (term359 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8083876 _143311 _143313 _143320 A s clauses x t c a)). Qed.
Lemma lem8083878 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8083879 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term349 _143311 _143313 _143320 A s clauses x t c) = (term360 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (MK_COMB (@lem8083878 _143313) (@lem8083877 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8083880 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : ((term350 _143311 _143313 _143320 A s clauses x t c) = (term349 _143311 _143313 _143320 A s clauses x t c)) = ((term366 _143311 _143313 _143320 A s clauses x t c) = (term360 _143311 _143313 _143320 A s clauses x t c)).
Proof. exact (MK_COMB (@lem8083873 _143311 _143313 _143320 A s clauses x t c) (@lem8083879 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8083881 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term366 _143311 _143313 _143320 A s clauses x t c) = (term360 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (EQ_MP (@lem8083880 _143311 _143313 _143320 A s clauses x t c) (@lem8083865 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8083882 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term368 _143311 _143313 _143320 A s clauses x c) = (term367 _143311 _143313 _143320 A s clauses x c).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8083881 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8083883 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8083884 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term370 _143311 _143313 _143320 A s clauses x c) = (term369 _143311 _143313 _143320 A s clauses x c).
Proof. exact (MK_COMB (@lem8083883 _143311 _143313 _143320) (@lem8083882 _143311 _143313 _143320 A s clauses x c)). Qed.
Lemma lem8083885 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term372 _143311 _143313 _143320 A clauses x c) = (term371 _143311 _143313 _143320 A clauses x c).
Proof. exact (fun_ext (fun s : _143313 -> A => @lem8083884 _143311 _143313 _143320 A s clauses x c)). Qed.
Lemma lem8083886 {_143313 A : Type'} : (@ex (_143313 -> A)) = (@ex (_143313 -> A)).
Proof. exact (eq_refl (@ex (_143313 -> A))). Qed.
Lemma lem8083887 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term374 _143311 _143313 _143320 A clauses x c) = (term373 _143311 _143313 _143320 A clauses x c).
Proof. exact (MK_COMB (@lem8083886 _143313 A) (@lem8083885 _143311 _143313 _143320 A clauses x c)). Qed.
Lemma lem8083888 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8083889 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term375 _143311 _143313 _143320 A clauses x c) = (term218 _143311 _143313 _143320 A clauses x c).
Proof. exact (MK_COMB (@lem8083888) (@lem8083887 _143311 _143313 _143320 A clauses x c)). Qed.
Lemma lem8083890 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1034 _143311 _143313 _143320 A clauses c x _106908) = (term1034 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (eq_refl (term1034 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083891 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1035 _143311 _143313 _143320 A clauses c x _106908) = (term1044 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (MK_COMB (@lem8083889 _143311 _143313 _143320 A clauses x c) (@lem8083890 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083893 {A : Type'} (P : A -> Prop) (Q : Prop) : (term714 A P Q) = (term715 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8083894 {_143313 A : Type'} (P : type572 _143313 A) (Q : Prop) : (term1045 _143313 A P Q) = (term1046 _143313 A P Q).
Proof. exact (@lem8083893 (_143313 -> A) P Q). Qed.
Lemma lem8083895 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1047 _143311 _143313 _143320 A clauses c x _106908) = (term1048 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (@lem8083894 _143313 A (term371 _143311 _143313 _143320 A clauses x c) (term1034 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083896 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term1049 _143311 _143313 _143320 A clauses x c s) = (term369 _143311 _143313 _143320 A s clauses x c).
Proof. exact (eq_refl (term1049 _143311 _143313 _143320 A clauses x c s)). Qed.
Lemma lem8083897 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term1050 _143311 _143313 _143320 A clauses x c) = (term371 _143311 _143313 _143320 A clauses x c).
Proof. exact (fun_ext (fun s : _143313 -> A => @lem8083896 _143311 _143313 _143320 A s clauses x c)). Qed.
Lemma lem8083898 {_143313 A : Type'} : (@ex (_143313 -> A)) = (@ex (_143313 -> A)).
Proof. exact (eq_refl (@ex (_143313 -> A))). Qed.
Lemma lem8083899 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term1051 _143311 _143313 _143320 A clauses x c) = (term373 _143311 _143313 _143320 A clauses x c).
Proof. exact (MK_COMB (@lem8083898 _143313 A) (@lem8083897 _143311 _143313 _143320 A clauses x c)). Qed.
Lemma lem8083900 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8083901 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term1052 _143311 _143313 _143320 A clauses x c) = (term218 _143311 _143313 _143320 A clauses x c).
Proof. exact (MK_COMB (@lem8083900) (@lem8083899 _143311 _143313 _143320 A clauses x c)). Qed.
Lemma lem8083902 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1034 _143311 _143313 _143320 A clauses c x _106908) = (term1034 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (eq_refl (term1034 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083903 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1047 _143311 _143313 _143320 A clauses c x _106908) = (term1044 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (MK_COMB (@lem8083901 _143311 _143313 _143320 A clauses x c) (@lem8083902 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083904 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8083905 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1053 _143311 _143313 _143320 A clauses c x _106908) = (term1054 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (MK_COMB (@lem8083904) (@lem8083903 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083906 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term1049 _143311 _143313 _143320 A clauses x c s) = (term369 _143311 _143313 _143320 A s clauses x c).
Proof. exact (eq_refl (term1049 _143311 _143313 _143320 A clauses x c s)). Qed.
Lemma lem8083907 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8083908 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term1055 _143311 _143313 _143320 A clauses x c s) = (term1056 _143311 _143313 _143320 A s clauses x c).
Proof. exact (MK_COMB (@lem8083907) (@lem8083906 _143311 _143313 _143320 A s clauses x c)). Qed.
Lemma lem8083909 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1034 _143311 _143313 _143320 A clauses c x _106908) = (term1034 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (eq_refl (term1034 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083910 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1057 _143311 _143313 _143320 A s clauses c x _106908) = (term1058 _143311 _143313 _143320 A s clauses c x _106908).
Proof. exact (MK_COMB (@lem8083908 _143311 _143313 _143320 A s clauses x c) (@lem8083909 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083911 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1059 _143311 _143313 _143320 A clauses c x _106908) = (term1060 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (fun_ext (fun s : _143313 -> A => @lem8083910 _143311 _143313 _143320 A s clauses c x _106908)). Qed.
Lemma lem8083912 {_143313 A : Type'} : (@ex (_143313 -> A)) = (@ex (_143313 -> A)).
Proof. exact (eq_refl (@ex (_143313 -> A))). Qed.
Lemma lem8083913 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1048 _143311 _143313 _143320 A clauses c x _106908) = (term1061 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (MK_COMB (@lem8083912 _143313 A) (@lem8083911 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083914 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : ((term1047 _143311 _143313 _143320 A clauses c x _106908) = (term1048 _143311 _143313 _143320 A clauses c x _106908)) = ((term1044 _143311 _143313 _143320 A clauses c x _106908) = (term1061 _143311 _143313 _143320 A clauses c x _106908)).
Proof. exact (MK_COMB (@lem8083905 _143311 _143313 _143320 A clauses c x _106908) (@lem8083913 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083915 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1044 _143311 _143313 _143320 A clauses c x _106908) = (term1061 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (EQ_MP (@lem8083914 _143311 _143313 _143320 A clauses c x _106908) (@lem8083895 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083917 {A : Type'} (P : A -> Prop) (Q : Prop) : (term714 A P Q) = (term715 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8083918 {_143311 _143313 _143320 : Type'} (P : type443 _143311 _143313 _143320) (Q : Prop) : (term733 _143311 _143313 _143320 P Q) = (term734 _143311 _143313 _143320 P Q).
Proof. exact (@lem8083917 (type1412 _143311 _143313 _143320) P Q). Qed.
Lemma lem8083919 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1062 _143311 _143313 _143320 A s clauses c x _106908) = (term1063 _143311 _143313 _143320 A s clauses c x _106908).
Proof. exact (@lem8083918 _143311 _143313 _143320 (term367 _143311 _143313 _143320 A s clauses x c) (term1034 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083920 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term1064 _143311 _143313 _143320 A s clauses x c t) = (term360 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (eq_refl (term1064 _143311 _143313 _143320 A s clauses x c t)). Qed.
Lemma lem8083921 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term1065 _143311 _143313 _143320 A s clauses x c) = (term367 _143311 _143313 _143320 A s clauses x c).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8083920 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8083922 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8083923 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term1066 _143311 _143313 _143320 A s clauses x c) = (term369 _143311 _143313 _143320 A s clauses x c).
Proof. exact (MK_COMB (@lem8083922 _143311 _143313 _143320) (@lem8083921 _143311 _143313 _143320 A s clauses x c)). Qed.
Lemma lem8083924 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8083925 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (c : _143311) : (term1067 _143311 _143313 _143320 A s clauses x c) = (term1056 _143311 _143313 _143320 A s clauses x c).
Proof. exact (MK_COMB (@lem8083924) (@lem8083923 _143311 _143313 _143320 A s clauses x c)). Qed.
Lemma lem8083926 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1034 _143311 _143313 _143320 A clauses c x _106908) = (term1034 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (eq_refl (term1034 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083927 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1062 _143311 _143313 _143320 A s clauses c x _106908) = (term1058 _143311 _143313 _143320 A s clauses c x _106908).
Proof. exact (MK_COMB (@lem8083925 _143311 _143313 _143320 A s clauses x c) (@lem8083926 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083928 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8083929 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1068 _143311 _143313 _143320 A s clauses c x _106908) = (term1069 _143311 _143313 _143320 A s clauses c x _106908).
Proof. exact (MK_COMB (@lem8083928) (@lem8083927 _143311 _143313 _143320 A s clauses c x _106908)). Qed.
Lemma lem8083930 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term1064 _143311 _143313 _143320 A s clauses x c t) = (term360 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (eq_refl (term1064 _143311 _143313 _143320 A s clauses x c t)). Qed.
Lemma lem8083931 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8083932 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term1070 _143311 _143313 _143320 A s clauses x c t) = (term1071 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (MK_COMB (@lem8083931) (@lem8083930 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8083933 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1034 _143311 _143313 _143320 A clauses c x _106908) = (term1034 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (eq_refl (term1034 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083934 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1072 _143311 _143313 _143320 A s t clauses c x _106908) = (term1073 _143311 _143313 _143320 A s t clauses c x _106908).
Proof. exact (MK_COMB (@lem8083932 _143311 _143313 _143320 A s clauses x t c) (@lem8083933 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083935 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1074 _143311 _143313 _143320 A s clauses c x _106908) = (term1075 _143311 _143313 _143320 A s clauses c x _106908).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8083934 _143311 _143313 _143320 A s t clauses c x _106908)). Qed.
Lemma lem8083936 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8083937 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1063 _143311 _143313 _143320 A s clauses c x _106908) = (term1076 _143311 _143313 _143320 A s clauses c x _106908).
Proof. exact (MK_COMB (@lem8083936 _143311 _143313 _143320) (@lem8083935 _143311 _143313 _143320 A s clauses c x _106908)). Qed.
Lemma lem8083938 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : ((term1062 _143311 _143313 _143320 A s clauses c x _106908) = (term1063 _143311 _143313 _143320 A s clauses c x _106908)) = ((term1058 _143311 _143313 _143320 A s clauses c x _106908) = (term1076 _143311 _143313 _143320 A s clauses c x _106908)).
Proof. exact (MK_COMB (@lem8083929 _143311 _143313 _143320 A s clauses c x _106908) (@lem8083937 _143311 _143313 _143320 A s clauses c x _106908)). Qed.
Lemma lem8083939 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1058 _143311 _143313 _143320 A s clauses c x _106908) = (term1076 _143311 _143313 _143320 A s clauses c x _106908).
Proof. exact (EQ_MP (@lem8083938 _143311 _143313 _143320 A s clauses c x _106908) (@lem8083919 _143311 _143313 _143320 A s clauses c x _106908)). Qed.
Lemma lem8083941 {A : Type'} (P : A -> Prop) (Q : Prop) : (term714 A P Q) = (term715 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8083942 {_143313 : Type'} (P : _143313 -> Prop) (Q : Prop) : (term714 _143313 P Q) = (term715 _143313 P Q).
Proof. exact (@lem8083941 _143313 P Q). Qed.
Lemma lem8083943 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1077 _143311 _143313 _143320 A s t clauses c x _106908) = (term1078 _143311 _143313 _143320 A s t clauses c x _106908).
Proof. exact (@lem8083942 _143313 (term359 _143311 _143313 _143320 A s clauses x t c) (term1034 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083944 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) (a : _143313) : (term1079 _143311 _143313 _143320 A s clauses x t c a) = (term357 _143311 _143313 _143320 A s clauses x t c a).
Proof. exact (eq_refl (term1079 _143311 _143313 _143320 A s clauses x t c a)). Qed.
Lemma lem8083945 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term1080 _143311 _143313 _143320 A s clauses x t c) = (term359 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8083944 _143311 _143313 _143320 A s clauses x t c a)). Qed.
Lemma lem8083946 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8083947 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term1081 _143311 _143313 _143320 A s clauses x t c) = (term360 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (MK_COMB (@lem8083946 _143313) (@lem8083945 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8083948 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8083949 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term1082 _143311 _143313 _143320 A s clauses x t c) = (term1071 _143311 _143313 _143320 A s clauses x t c).
Proof. exact (MK_COMB (@lem8083948) (@lem8083947 _143311 _143313 _143320 A s clauses x t c)). Qed.
Lemma lem8083950 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1034 _143311 _143313 _143320 A clauses c x _106908) = (term1034 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (eq_refl (term1034 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083951 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1077 _143311 _143313 _143320 A s t clauses c x _106908) = (term1073 _143311 _143313 _143320 A s t clauses c x _106908).
Proof. exact (MK_COMB (@lem8083949 _143311 _143313 _143320 A s clauses x t c) (@lem8083950 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083952 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8083953 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1083 _143311 _143313 _143320 A s t clauses c x _106908) = (term1084 _143311 _143313 _143320 A s t clauses c x _106908).
Proof. exact (MK_COMB (@lem8083952) (@lem8083951 _143311 _143313 _143320 A s t clauses c x _106908)). Qed.
Lemma lem8083954 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) (a : _143313) : (term1079 _143311 _143313 _143320 A s clauses x t c a) = (term357 _143311 _143313 _143320 A s clauses x t c a).
Proof. exact (eq_refl (term1079 _143311 _143313 _143320 A s clauses x t c a)). Qed.
Lemma lem8083955 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8083956 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (x : A) (t : type1412 _143311 _143313 _143320) (c : _143311) (a : _143313) : (term1085 _143311 _143313 _143320 A s clauses x t c a) = (term1086 _143311 _143313 _143320 A s clauses x t c a).
Proof. exact (MK_COMB (@lem8083955) (@lem8083954 _143311 _143313 _143320 A s clauses x t c a)). Qed.
Lemma lem8083957 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1034 _143311 _143313 _143320 A clauses c x _106908) = (term1034 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (eq_refl (term1034 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083958 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (t : type1412 _143311 _143313 _143320) (a : _143313) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1087 _143311 _143313 _143320 A s t a clauses c x _106908) = (term1088 _143311 _143313 _143320 A s t a clauses c x _106908).
Proof. exact (MK_COMB (@lem8083956 _143311 _143313 _143320 A s clauses x t c a) (@lem8083957 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083959 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1089 _143311 _143313 _143320 A s t clauses c x _106908) = (term1090 _143311 _143313 _143320 A s t clauses c x _106908).
Proof. exact (fun_ext (fun a : _143313 => @lem8083958 _143311 _143313 _143320 A s t a clauses c x _106908)). Qed.
Lemma lem8083960 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8083961 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1078 _143311 _143313 _143320 A s t clauses c x _106908) = (term1091 _143311 _143313 _143320 A s t clauses c x _106908).
Proof. exact (MK_COMB (@lem8083960 _143313) (@lem8083959 _143311 _143313 _143320 A s t clauses c x _106908)). Qed.
Lemma lem8083962 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : ((term1077 _143311 _143313 _143320 A s t clauses c x _106908) = (term1078 _143311 _143313 _143320 A s t clauses c x _106908)) = ((term1073 _143311 _143313 _143320 A s t clauses c x _106908) = (term1091 _143311 _143313 _143320 A s t clauses c x _106908)).
Proof. exact (MK_COMB (@lem8083953 _143311 _143313 _143320 A s t clauses c x _106908) (@lem8083961 _143311 _143313 _143320 A s t clauses c x _106908)). Qed.
Lemma lem8083963 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1073 _143311 _143313 _143320 A s t clauses c x _106908) = (term1091 _143311 _143313 _143320 A s t clauses c x _106908).
Proof. exact (EQ_MP (@lem8083962 _143311 _143313 _143320 A s t clauses c x _106908) (@lem8083943 _143311 _143313 _143320 A s t clauses c x _106908)). Qed.
Lemma lem8083964 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1075 _143311 _143313 _143320 A s clauses c x _106908) = (term1092 _143311 _143313 _143320 A s clauses c x _106908).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8083963 _143311 _143313 _143320 A s t clauses c x _106908)). Qed.
Lemma lem8083965 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8083966 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1076 _143311 _143313 _143320 A s clauses c x _106908) = (term1093 _143311 _143313 _143320 A s clauses c x _106908).
Proof. exact (MK_COMB (@lem8083965 _143311 _143313 _143320) (@lem8083964 _143311 _143313 _143320 A s clauses c x _106908)). Qed.
Lemma lem8083967 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1058 _143311 _143313 _143320 A s clauses c x _106908) = (term1093 _143311 _143313 _143320 A s clauses c x _106908).
Proof. exact (TRANS (@lem8083939 _143311 _143313 _143320 A s clauses c x _106908) (@lem8083966 _143311 _143313 _143320 A s clauses c x _106908)). Qed.
Lemma lem8083968 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1060 _143311 _143313 _143320 A clauses c x _106908) = (term1094 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (fun_ext (fun s : _143313 -> A => @lem8083967 _143311 _143313 _143320 A s clauses c x _106908)). Qed.
Lemma lem8083969 {_143313 A : Type'} : (@ex (_143313 -> A)) = (@ex (_143313 -> A)).
Proof. exact (eq_refl (@ex (_143313 -> A))). Qed.
Lemma lem8083970 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1061 _143311 _143313 _143320 A clauses c x _106908) = (term1095 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (MK_COMB (@lem8083969 _143313 A) (@lem8083968 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083971 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1044 _143311 _143313 _143320 A clauses c x _106908) = (term1095 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (TRANS (@lem8083915 _143311 _143313 _143320 A clauses c x _106908) (@lem8083970 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083972 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1035 _143311 _143313 _143320 A clauses c x _106908) = (term1095 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (TRANS (@lem8083891 _143311 _143313 _143320 A clauses c x _106908) (@lem8083971 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083973 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1036 _143311 _143313 _143320 A clauses c _106908) = (term1096 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (fun_ext (fun x : A => @lem8083972 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083974 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8083975 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1037 _143311 _143313 _143320 A clauses c _106908) = (term1097 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (MK_COMB (@lem8083974 A) (@lem8083973 _143311 _143313 _143320 A clauses c _106908)). Qed.
Lemma lem8083977 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8083978 {_143313 A : Type'} (P : type1446 _143313 A) : (term1098 _143313 A P) = (term1099 _143313 A P).
Proof. exact (@lem8083977 A (_143313 -> A) P). Qed.
Lemma lem8083979 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1100 _143311 _143313 _143320 A clauses c _106908) = (term1101 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (@lem8083978 _143313 A (term1102 _143311 _143313 _143320 A clauses c _106908)). Qed.
Lemma lem8083980 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1103 _143311 _143313 _143320 A clauses c _106908 x) = (term1094 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (eq_refl (term1103 _143311 _143313 _143320 A clauses c _106908 x)). Qed.
Lemma lem8083981 {_143313 A : Type'} (s : _143313 -> A) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8083982 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) (s : _143313 -> A) : (term1104 _143311 _143313 _143320 A clauses c _106908 x s) = (term1105 _143311 _143313 _143320 A clauses c x _106908 s).
Proof. exact (MK_COMB (@lem8083980 _143311 _143313 _143320 A clauses c x _106908) (@lem8083981 _143313 A s)). Qed.
Lemma lem8083983 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1105 _143311 _143313 _143320 A clauses c x _106908 s) = (term1093 _143311 _143313 _143320 A s clauses c x _106908).
Proof. exact (eq_refl (term1105 _143311 _143313 _143320 A clauses c x _106908 s)). Qed.
Lemma lem8083984 {_143311 _143313 _143320 A : Type'} (s : _143313 -> A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1104 _143311 _143313 _143320 A clauses c _106908 x s) = (term1093 _143311 _143313 _143320 A s clauses c x _106908).
Proof. exact (TRANS (@lem8083982 _143311 _143313 _143320 A clauses c x _106908 s) (@lem8083983 _143311 _143313 _143320 A s clauses c x _106908)). Qed.
Lemma lem8083985 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1106 _143311 _143313 _143320 A clauses c _106908 x) = (term1094 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (fun_ext (fun s : _143313 -> A => @lem8083984 _143311 _143313 _143320 A s clauses c x _106908)). Qed.
Lemma lem8083986 {_143313 A : Type'} : (@ex (_143313 -> A)) = (@ex (_143313 -> A)).
Proof. exact (eq_refl (@ex (_143313 -> A))). Qed.
Lemma lem8083987 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1107 _143311 _143313 _143320 A clauses c _106908 x) = (term1095 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (MK_COMB (@lem8083986 _143313 A) (@lem8083985 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083988 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1108 _143311 _143313 _143320 A clauses c _106908) = (term1096 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (fun_ext (fun x : A => @lem8083987 _143311 _143313 _143320 A clauses c x _106908)). Qed.
Lemma lem8083989 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8083990 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1100 _143311 _143313 _143320 A clauses c _106908) = (term1097 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (MK_COMB (@lem8083989 A) (@lem8083988 _143311 _143313 _143320 A clauses c _106908)). Qed.
Lemma lem8083991 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8083992 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1109 _143311 _143313 _143320 A clauses c _106908) = (term1110 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (MK_COMB (@lem8083991) (@lem8083990 _143311 _143313 _143320 A clauses c _106908)). Qed.
Lemma lem8083993 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1103 _143311 _143313 _143320 A clauses c _106908 x) = (term1094 _143311 _143313 _143320 A clauses c x _106908).
Proof. exact (eq_refl (term1103 _143311 _143313 _143320 A clauses c _106908 x)). Qed.
Lemma lem8083994 {_143313 A : Type'} (s : type1468 _143313 A) (x : A) : (s x) = (s x).
Proof. exact (eq_refl (s x)). Qed.
Lemma lem8083995 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) (s : type1468 _143313 A) (x : A) : (term1111 _143311 _143313 _143320 A clauses c _106908 s x) = (term1112 _143311 _143313 _143320 A clauses c _106908 s x).
Proof. exact (MK_COMB (@lem8083993 _143311 _143313 _143320 A clauses c x _106908) (@lem8083994 _143313 A s x)). Qed.
Lemma lem8083996 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1112 _143311 _143313 _143320 A clauses c _106908 s x) = (term1113 _143311 _143313 _143320 A s clauses c x _106908).
Proof. exact (eq_refl (term1112 _143311 _143313 _143320 A clauses c _106908 s x)). Qed.
Lemma lem8083997 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1111 _143311 _143313 _143320 A clauses c _106908 s x) = (term1113 _143311 _143313 _143320 A s clauses c x _106908).
Proof. exact (TRANS (@lem8083995 _143311 _143313 _143320 A clauses c _106908 s x) (@lem8083996 _143311 _143313 _143320 A s clauses c x _106908)). Qed.
Lemma lem8083998 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1114 _143311 _143313 _143320 A clauses c _106908 s) = (term1115 _143311 _143313 _143320 A s clauses c _106908).
Proof. exact (fun_ext (fun x : A => @lem8083997 _143311 _143313 _143320 A s clauses c x _106908)). Qed.
Lemma lem8083999 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8084000 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1116 _143311 _143313 _143320 A clauses c _106908 s) = (term1117 _143311 _143313 _143320 A s clauses c _106908).
Proof. exact (MK_COMB (@lem8083999 A) (@lem8083998 _143311 _143313 _143320 A s clauses c _106908)). Qed.
Lemma lem8084001 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1118 _143311 _143313 _143320 A clauses c _106908) = (term1119 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (fun_ext (fun s : type1468 _143313 A => @lem8084000 _143311 _143313 _143320 A s clauses c _106908)). Qed.
Lemma lem8084002 {_143313 A : Type'} : (@ex (A -> _143313 -> A)) = (@ex (A -> _143313 -> A)).
Proof. exact (eq_refl (@ex (A -> _143313 -> A))). Qed.
Lemma lem8084003 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1101 _143311 _143313 _143320 A clauses c _106908) = (term1120 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (MK_COMB (@lem8084002 _143313 A) (@lem8084001 _143311 _143313 _143320 A clauses c _106908)). Qed.
Lemma lem8084004 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : ((term1100 _143311 _143313 _143320 A clauses c _106908) = (term1101 _143311 _143313 _143320 A clauses c _106908)) = ((term1097 _143311 _143313 _143320 A clauses c _106908) = (term1120 _143311 _143313 _143320 A clauses c _106908)).
Proof. exact (MK_COMB (@lem8083992 _143311 _143313 _143320 A clauses c _106908) (@lem8084003 _143311 _143313 _143320 A clauses c _106908)). Qed.
Lemma lem8084005 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1097 _143311 _143313 _143320 A clauses c _106908) = (term1120 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (EQ_MP (@lem8084004 _143311 _143313 _143320 A clauses c _106908) (@lem8083979 _143311 _143313 _143320 A clauses c _106908)). Qed.
Lemma lem8084007 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8084008 {_143311 _143313 _143320 A : Type'} (P : type1522 _143311 _143313 _143320 A) : (term1121 _143311 _143313 _143320 A P) = (term1122 _143311 _143313 _143320 A P).
Proof. exact (@lem8084007 A (type1412 _143311 _143313 _143320) P). Qed.
Lemma lem8084009 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1123 _143311 _143313 _143320 A s clauses c _106908) = (term1124 _143311 _143313 _143320 A s clauses c _106908).
Proof. exact (@lem8084008 _143311 _143313 _143320 A (term1125 _143311 _143313 _143320 A s clauses c _106908)). Qed.
Lemma lem8084010 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1126 _143311 _143313 _143320 A s clauses c _106908 x) = (term1127 _143311 _143313 _143320 A s clauses c x _106908).
Proof. exact (eq_refl (term1126 _143311 _143313 _143320 A s clauses c _106908 x)). Qed.
Lemma lem8084011 {_143311 _143313 _143320 : Type'} (t : type1412 _143311 _143313 _143320) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8084012 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) (t : type1412 _143311 _143313 _143320) : (term1128 _143311 _143313 _143320 A s clauses c _106908 x t) = (term1129 _143311 _143313 _143320 A s clauses c x _106908 t).
Proof. exact (MK_COMB (@lem8084010 _143311 _143313 _143320 A s clauses c x _106908) (@lem8084011 _143311 _143313 _143320 t)). Qed.
Lemma lem8084013 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1129 _143311 _143313 _143320 A s clauses c x _106908 t) = (term1130 _143311 _143313 _143320 A s t clauses c x _106908).
Proof. exact (eq_refl (term1129 _143311 _143313 _143320 A s clauses c x _106908 t)). Qed.
Lemma lem8084014 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1128 _143311 _143313 _143320 A s clauses c _106908 x t) = (term1130 _143311 _143313 _143320 A s t clauses c x _106908).
Proof. exact (TRANS (@lem8084012 _143311 _143313 _143320 A s clauses c x _106908 t) (@lem8084013 _143311 _143313 _143320 A s t clauses c x _106908)). Qed.
Lemma lem8084015 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1131 _143311 _143313 _143320 A s clauses c _106908 x) = (term1127 _143311 _143313 _143320 A s clauses c x _106908).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8084014 _143311 _143313 _143320 A s t clauses c x _106908)). Qed.
Lemma lem8084016 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8084017 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1132 _143311 _143313 _143320 A s clauses c _106908 x) = (term1113 _143311 _143313 _143320 A s clauses c x _106908).
Proof. exact (MK_COMB (@lem8084016 _143311 _143313 _143320) (@lem8084015 _143311 _143313 _143320 A s clauses c x _106908)). Qed.
Lemma lem8084018 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1133 _143311 _143313 _143320 A s clauses c _106908) = (term1115 _143311 _143313 _143320 A s clauses c _106908).
Proof. exact (fun_ext (fun x : A => @lem8084017 _143311 _143313 _143320 A s clauses c x _106908)). Qed.
Lemma lem8084019 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8084020 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1123 _143311 _143313 _143320 A s clauses c _106908) = (term1117 _143311 _143313 _143320 A s clauses c _106908).
Proof. exact (MK_COMB (@lem8084019 A) (@lem8084018 _143311 _143313 _143320 A s clauses c _106908)). Qed.
Lemma lem8084021 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8084022 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1134 _143311 _143313 _143320 A s clauses c _106908) = (term1135 _143311 _143313 _143320 A s clauses c _106908).
Proof. exact (MK_COMB (@lem8084021) (@lem8084020 _143311 _143313 _143320 A s clauses c _106908)). Qed.
Lemma lem8084023 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1126 _143311 _143313 _143320 A s clauses c _106908 x) = (term1127 _143311 _143313 _143320 A s clauses c x _106908).
Proof. exact (eq_refl (term1126 _143311 _143313 _143320 A s clauses c _106908 x)). Qed.
Lemma lem8084024 {_143311 _143313 _143320 A : Type'} (t : type1523 _143311 _143313 _143320 A) (x : A) : (t x) = (t x).
Proof. exact (eq_refl (t x)). Qed.
Lemma lem8084025 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) (t : type1523 _143311 _143313 _143320 A) (x : A) : (term1136 _143311 _143313 _143320 A s clauses c _106908 t x) = (term1137 _143311 _143313 _143320 A s clauses c _106908 t x).
Proof. exact (MK_COMB (@lem8084023 _143311 _143313 _143320 A s clauses c x _106908) (@lem8084024 _143311 _143313 _143320 A t x)). Qed.
Lemma lem8084026 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1137 _143311 _143313 _143320 A s clauses c _106908 t x) = (term1138 _143311 _143313 _143320 A s t clauses c x _106908).
Proof. exact (eq_refl (term1137 _143311 _143313 _143320 A s clauses c _106908 t x)). Qed.
Lemma lem8084027 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1136 _143311 _143313 _143320 A s clauses c _106908 t x) = (term1138 _143311 _143313 _143320 A s t clauses c x _106908).
Proof. exact (TRANS (@lem8084025 _143311 _143313 _143320 A s clauses c _106908 t x) (@lem8084026 _143311 _143313 _143320 A s t clauses c x _106908)). Qed.
Lemma lem8084028 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1139 _143311 _143313 _143320 A s clauses c _106908 t) = (term1140 _143311 _143313 _143320 A s t clauses c _106908).
Proof. exact (fun_ext (fun x : A => @lem8084027 _143311 _143313 _143320 A s t clauses c x _106908)). Qed.
Lemma lem8084029 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8084030 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1141 _143311 _143313 _143320 A s clauses c _106908 t) = (term1142 _143311 _143313 _143320 A s t clauses c _106908).
Proof. exact (MK_COMB (@lem8084029 A) (@lem8084028 _143311 _143313 _143320 A s t clauses c _106908)). Qed.
Lemma lem8084031 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1143 _143311 _143313 _143320 A s clauses c _106908) = (term1144 _143311 _143313 _143320 A s clauses c _106908).
Proof. exact (fun_ext (fun t : type1523 _143311 _143313 _143320 A => @lem8084030 _143311 _143313 _143320 A s t clauses c _106908)). Qed.
Lemma lem8084032 {_143311 _143313 _143320 A : Type'} : (@ex (A -> _143311 -> _143313 -> _143320)) = (@ex (A -> _143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (A -> _143311 -> _143313 -> _143320))). Qed.
Lemma lem8084033 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1124 _143311 _143313 _143320 A s clauses c _106908) = (term1145 _143311 _143313 _143320 A s clauses c _106908).
Proof. exact (MK_COMB (@lem8084032 _143311 _143313 _143320 A) (@lem8084031 _143311 _143313 _143320 A s clauses c _106908)). Qed.
Lemma lem8084034 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : ((term1123 _143311 _143313 _143320 A s clauses c _106908) = (term1124 _143311 _143313 _143320 A s clauses c _106908)) = ((term1117 _143311 _143313 _143320 A s clauses c _106908) = (term1145 _143311 _143313 _143320 A s clauses c _106908)).
Proof. exact (MK_COMB (@lem8084022 _143311 _143313 _143320 A s clauses c _106908) (@lem8084033 _143311 _143313 _143320 A s clauses c _106908)). Qed.
Lemma lem8084035 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1117 _143311 _143313 _143320 A s clauses c _106908) = (term1145 _143311 _143313 _143320 A s clauses c _106908).
Proof. exact (EQ_MP (@lem8084034 _143311 _143313 _143320 A s clauses c _106908) (@lem8084009 _143311 _143313 _143320 A s clauses c _106908)). Qed.
Lemma lem8084037 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8084038 {_143313 A : Type'} (P : type1470 _143313 A) : (term1146 _143313 A P) = (term1147 _143313 A P).
Proof. exact (@lem8084037 A _143313 P). Qed.
Lemma lem8084039 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1148 _143311 _143313 _143320 A s t clauses c _106908) = (term1149 _143311 _143313 _143320 A s t clauses c _106908).
Proof. exact (@lem8084038 _143313 A (term1150 _143311 _143313 _143320 A s t clauses c _106908)). Qed.
Lemma lem8084040 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1151 _143311 _143313 _143320 A s t clauses c _106908 x) = (term1152 _143311 _143313 _143320 A s t clauses c x _106908).
Proof. exact (eq_refl (term1151 _143311 _143313 _143320 A s t clauses c _106908 x)). Qed.
Lemma lem8084041 {_143313 : Type'} (a : _143313) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8084042 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) (a : _143313) : (term1153 _143311 _143313 _143320 A s t clauses c _106908 x a) = (term1154 _143311 _143313 _143320 A s t clauses c x _106908 a).
Proof. exact (MK_COMB (@lem8084040 _143311 _143313 _143320 A s t clauses c x _106908) (@lem8084041 _143313 a)). Qed.
Lemma lem8084043 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (a : _143313) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1154 _143311 _143313 _143320 A s t clauses c x _106908 a) = (term1155 _143311 _143313 _143320 A s t a clauses c x _106908).
Proof. exact (eq_refl (term1154 _143311 _143313 _143320 A s t clauses c x _106908 a)). Qed.
Lemma lem8084044 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (a : _143313) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1153 _143311 _143313 _143320 A s t clauses c _106908 x a) = (term1155 _143311 _143313 _143320 A s t a clauses c x _106908).
Proof. exact (TRANS (@lem8084042 _143311 _143313 _143320 A s t clauses c x _106908 a) (@lem8084043 _143311 _143313 _143320 A s t a clauses c x _106908)). Qed.
Lemma lem8084045 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1156 _143311 _143313 _143320 A s t clauses c _106908 x) = (term1152 _143311 _143313 _143320 A s t clauses c x _106908).
Proof. exact (fun_ext (fun a : _143313 => @lem8084044 _143311 _143313 _143320 A s t a clauses c x _106908)). Qed.
Lemma lem8084046 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8084047 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1157 _143311 _143313 _143320 A s t clauses c _106908 x) = (term1138 _143311 _143313 _143320 A s t clauses c x _106908).
Proof. exact (MK_COMB (@lem8084046 _143313) (@lem8084045 _143311 _143313 _143320 A s t clauses c x _106908)). Qed.
Lemma lem8084048 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1158 _143311 _143313 _143320 A s t clauses c _106908) = (term1140 _143311 _143313 _143320 A s t clauses c _106908).
Proof. exact (fun_ext (fun x : A => @lem8084047 _143311 _143313 _143320 A s t clauses c x _106908)). Qed.
Lemma lem8084049 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8084050 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1148 _143311 _143313 _143320 A s t clauses c _106908) = (term1142 _143311 _143313 _143320 A s t clauses c _106908).
Proof. exact (MK_COMB (@lem8084049 A) (@lem8084048 _143311 _143313 _143320 A s t clauses c _106908)). Qed.
Lemma lem8084051 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8084052 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1159 _143311 _143313 _143320 A s t clauses c _106908) = (term1160 _143311 _143313 _143320 A s t clauses c _106908).
Proof. exact (MK_COMB (@lem8084051) (@lem8084050 _143311 _143313 _143320 A s t clauses c _106908)). Qed.
Lemma lem8084053 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1151 _143311 _143313 _143320 A s t clauses c _106908 x) = (term1152 _143311 _143313 _143320 A s t clauses c x _106908).
Proof. exact (eq_refl (term1151 _143311 _143313 _143320 A s t clauses c _106908 x)). Qed.
Lemma lem8084054 {_143313 A : Type'} (a : A -> _143313) (x : A) : (a x) = (a x).
Proof. exact (eq_refl (a x)). Qed.
Lemma lem8084055 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) (a : A -> _143313) (x : A) : (term1161 _143311 _143313 _143320 A s t clauses c _106908 a x) = (term1162 _143311 _143313 _143320 A s t clauses c _106908 a x).
Proof. exact (MK_COMB (@lem8084053 _143311 _143313 _143320 A s t clauses c x _106908) (@lem8084054 _143313 A a x)). Qed.
Lemma lem8084056 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (a : A -> _143313) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1162 _143311 _143313 _143320 A s t clauses c _106908 a x) = (term1163 _143311 _143313 _143320 A s t a clauses c x _106908).
Proof. exact (eq_refl (term1162 _143311 _143313 _143320 A s t clauses c _106908 a x)). Qed.
Lemma lem8084057 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (a : A -> _143313) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (x : A) (_106908 : _143320) : (term1161 _143311 _143313 _143320 A s t clauses c _106908 a x) = (term1163 _143311 _143313 _143320 A s t a clauses c x _106908).
Proof. exact (TRANS (@lem8084055 _143311 _143313 _143320 A s t clauses c _106908 a x) (@lem8084056 _143311 _143313 _143320 A s t a clauses c x _106908)). Qed.
Lemma lem8084058 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (a : A -> _143313) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1164 _143311 _143313 _143320 A s t clauses c _106908 a) = (term1165 _143311 _143313 _143320 A s t a clauses c _106908).
Proof. exact (fun_ext (fun x : A => @lem8084057 _143311 _143313 _143320 A s t a clauses c x _106908)). Qed.
Lemma lem8084059 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8084060 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (a : A -> _143313) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1166 _143311 _143313 _143320 A s t clauses c _106908 a) = (term1167 _143311 _143313 _143320 A s t a clauses c _106908).
Proof. exact (MK_COMB (@lem8084059 A) (@lem8084058 _143311 _143313 _143320 A s t a clauses c _106908)). Qed.
Lemma lem8084061 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1168 _143311 _143313 _143320 A s t clauses c _106908) = (term1169 _143311 _143313 _143320 A s t clauses c _106908).
Proof. exact (fun_ext (fun a : A -> _143313 => @lem8084060 _143311 _143313 _143320 A s t a clauses c _106908)). Qed.
Lemma lem8084062 {_143313 A : Type'} : (@ex (A -> _143313)) = (@ex (A -> _143313)).
Proof. exact (eq_refl (@ex (A -> _143313))). Qed.
Lemma lem8084063 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1149 _143311 _143313 _143320 A s t clauses c _106908) = (term1170 _143311 _143313 _143320 A s t clauses c _106908).
Proof. exact (MK_COMB (@lem8084062 _143313 A) (@lem8084061 _143311 _143313 _143320 A s t clauses c _106908)). Qed.
Lemma lem8084064 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : ((term1148 _143311 _143313 _143320 A s t clauses c _106908) = (term1149 _143311 _143313 _143320 A s t clauses c _106908)) = ((term1142 _143311 _143313 _143320 A s t clauses c _106908) = (term1170 _143311 _143313 _143320 A s t clauses c _106908)).
Proof. exact (MK_COMB (@lem8084052 _143311 _143313 _143320 A s t clauses c _106908) (@lem8084063 _143311 _143313 _143320 A s t clauses c _106908)). Qed.
Lemma lem8084065 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (t : type1523 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1142 _143311 _143313 _143320 A s t clauses c _106908) = (term1170 _143311 _143313 _143320 A s t clauses c _106908).
Proof. exact (EQ_MP (@lem8084064 _143311 _143313 _143320 A s t clauses c _106908) (@lem8084039 _143311 _143313 _143320 A s t clauses c _106908)). Qed.
Lemma lem8084066 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1144 _143311 _143313 _143320 A s clauses c _106908) = (term1171 _143311 _143313 _143320 A s clauses c _106908).
Proof. exact (fun_ext (fun t : type1523 _143311 _143313 _143320 A => @lem8084065 _143311 _143313 _143320 A s t clauses c _106908)). Qed.
Lemma lem8084067 {_143311 _143313 _143320 A : Type'} : (@ex (A -> _143311 -> _143313 -> _143320)) = (@ex (A -> _143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (A -> _143311 -> _143313 -> _143320))). Qed.
Lemma lem8084068 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1145 _143311 _143313 _143320 A s clauses c _106908) = (term1172 _143311 _143313 _143320 A s clauses c _106908).
Proof. exact (MK_COMB (@lem8084067 _143311 _143313 _143320 A) (@lem8084066 _143311 _143313 _143320 A s clauses c _106908)). Qed.
Lemma lem8084069 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1117 _143311 _143313 _143320 A s clauses c _106908) = (term1172 _143311 _143313 _143320 A s clauses c _106908).
Proof. exact (TRANS (@lem8084035 _143311 _143313 _143320 A s clauses c _106908) (@lem8084068 _143311 _143313 _143320 A s clauses c _106908)). Qed.
Lemma lem8084070 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1119 _143311 _143313 _143320 A clauses c _106908) = (term1173 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (fun_ext (fun s : type1468 _143313 A => @lem8084069 _143311 _143313 _143320 A s clauses c _106908)). Qed.
Lemma lem8084071 {_143313 A : Type'} : (@ex (A -> _143313 -> A)) = (@ex (A -> _143313 -> A)).
Proof. exact (eq_refl (@ex (A -> _143313 -> A))). Qed.
Lemma lem8084072 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1120 _143311 _143313 _143320 A clauses c _106908) = (term1174 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (MK_COMB (@lem8084071 _143313 A) (@lem8084070 _143311 _143313 _143320 A clauses c _106908)). Qed.
Lemma lem8084073 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1097 _143311 _143313 _143320 A clauses c _106908) = (term1174 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (TRANS (@lem8084005 _143311 _143313 _143320 A clauses c _106908) (@lem8084072 _143311 _143313 _143320 A clauses c _106908)). Qed.
Lemma lem8084074 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1037 _143311 _143313 _143320 A clauses c _106908) = (term1174 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (TRANS (@lem8083975 _143311 _143313 _143320 A clauses c _106908) (@lem8084073 _143311 _143313 _143320 A clauses c _106908)). Qed.
Lemma lem8084075 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1038 _143311 _143313 _143320 A clauses _106908) = (term1175 _143311 _143313 _143320 A clauses _106908).
Proof. exact (fun_ext (fun c : _143311 => @lem8084074 _143311 _143313 _143320 A clauses c _106908)). Qed.
Lemma lem8084076 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8084077 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1039 _143311 _143313 _143320 A clauses _106908) = (term1176 _143311 _143313 _143320 A clauses _106908).
Proof. exact (MK_COMB (@lem8084076 _143311) (@lem8084075 _143311 _143313 _143320 A clauses _106908)). Qed.
Lemma lem8084079 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8084080 {_143311 _143313 A : Type'} (P : type1375 _143311 _143313 A) : (term1177 _143311 _143313 A P) = (term1178 _143311 _143313 A P).
Proof. exact (@lem8084079 _143311 (type1468 _143313 A) P). Qed.
Lemma lem8084081 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1179 _143311 _143313 _143320 A clauses _106908) = (term1180 _143311 _143313 _143320 A clauses _106908).
Proof. exact (@lem8084080 _143311 _143313 A (term1181 _143311 _143313 _143320 A clauses _106908)). Qed.
Lemma lem8084082 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1182 _143311 _143313 _143320 A clauses _106908 c) = (term1173 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (eq_refl (term1182 _143311 _143313 _143320 A clauses _106908 c)). Qed.
Lemma lem8084083 {_143313 A : Type'} (s : type1468 _143313 A) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8084084 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) (s : type1468 _143313 A) : (term1183 _143311 _143313 _143320 A clauses _106908 c s) = (term1184 _143311 _143313 _143320 A clauses c _106908 s).
Proof. exact (MK_COMB (@lem8084082 _143311 _143313 _143320 A clauses c _106908) (@lem8084083 _143313 A s)). Qed.
Lemma lem8084085 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1184 _143311 _143313 _143320 A clauses c _106908 s) = (term1172 _143311 _143313 _143320 A s clauses c _106908).
Proof. exact (eq_refl (term1184 _143311 _143313 _143320 A clauses c _106908 s)). Qed.
Lemma lem8084086 {_143311 _143313 _143320 A : Type'} (s : type1468 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1183 _143311 _143313 _143320 A clauses _106908 c s) = (term1172 _143311 _143313 _143320 A s clauses c _106908).
Proof. exact (TRANS (@lem8084084 _143311 _143313 _143320 A clauses c _106908 s) (@lem8084085 _143311 _143313 _143320 A s clauses c _106908)). Qed.
Lemma lem8084087 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1185 _143311 _143313 _143320 A clauses _106908 c) = (term1173 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (fun_ext (fun s : type1468 _143313 A => @lem8084086 _143311 _143313 _143320 A s clauses c _106908)). Qed.
Lemma lem8084088 {_143313 A : Type'} : (@ex (A -> _143313 -> A)) = (@ex (A -> _143313 -> A)).
Proof. exact (eq_refl (@ex (A -> _143313 -> A))). Qed.
Lemma lem8084089 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1186 _143311 _143313 _143320 A clauses _106908 c) = (term1174 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (MK_COMB (@lem8084088 _143313 A) (@lem8084087 _143311 _143313 _143320 A clauses c _106908)). Qed.
Lemma lem8084090 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1187 _143311 _143313 _143320 A clauses _106908) = (term1175 _143311 _143313 _143320 A clauses _106908).
Proof. exact (fun_ext (fun c : _143311 => @lem8084089 _143311 _143313 _143320 A clauses c _106908)). Qed.
Lemma lem8084091 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8084092 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1179 _143311 _143313 _143320 A clauses _106908) = (term1176 _143311 _143313 _143320 A clauses _106908).
Proof. exact (MK_COMB (@lem8084091 _143311) (@lem8084090 _143311 _143313 _143320 A clauses _106908)). Qed.
Lemma lem8084093 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8084094 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1188 _143311 _143313 _143320 A clauses _106908) = (term1189 _143311 _143313 _143320 A clauses _106908).
Proof. exact (MK_COMB (@lem8084093) (@lem8084092 _143311 _143313 _143320 A clauses _106908)). Qed.
Lemma lem8084095 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1182 _143311 _143313 _143320 A clauses _106908 c) = (term1173 _143311 _143313 _143320 A clauses c _106908).
Proof. exact (eq_refl (term1182 _143311 _143313 _143320 A clauses _106908 c)). Qed.
Lemma lem8084096 {_143311 _143313 A : Type'} (s : type1417 _143311 _143313 A) (c : _143311) : (s c) = (s c).
Proof. exact (eq_refl (s c)). Qed.
Lemma lem8084097 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) (s : type1417 _143311 _143313 A) (c : _143311) : (term1190 _143311 _143313 _143320 A clauses _106908 s c) = (term1191 _143311 _143313 _143320 A clauses _106908 s c).
Proof. exact (MK_COMB (@lem8084095 _143311 _143313 _143320 A clauses c _106908) (@lem8084096 _143311 _143313 A s c)). Qed.
Lemma lem8084098 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1191 _143311 _143313 _143320 A clauses _106908 s c) = (term1192 _143311 _143313 _143320 A s clauses c _106908).
Proof. exact (eq_refl (term1191 _143311 _143313 _143320 A clauses _106908 s c)). Qed.
Lemma lem8084099 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1190 _143311 _143313 _143320 A clauses _106908 s c) = (term1192 _143311 _143313 _143320 A s clauses c _106908).
Proof. exact (TRANS (@lem8084097 _143311 _143313 _143320 A clauses _106908 s c) (@lem8084098 _143311 _143313 _143320 A s clauses c _106908)). Qed.
Lemma lem8084100 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1193 _143311 _143313 _143320 A clauses _106908 s) = (term1194 _143311 _143313 _143320 A s clauses _106908).
Proof. exact (fun_ext (fun c : _143311 => @lem8084099 _143311 _143313 _143320 A s clauses c _106908)). Qed.
Lemma lem8084101 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8084102 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1195 _143311 _143313 _143320 A clauses _106908 s) = (term1196 _143311 _143313 _143320 A s clauses _106908).
Proof. exact (MK_COMB (@lem8084101 _143311) (@lem8084100 _143311 _143313 _143320 A s clauses _106908)). Qed.
Lemma lem8084103 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1197 _143311 _143313 _143320 A clauses _106908) = (term1198 _143311 _143313 _143320 A clauses _106908).
Proof. exact (fun_ext (fun s : type1417 _143311 _143313 A => @lem8084102 _143311 _143313 _143320 A s clauses _106908)). Qed.
Lemma lem8084104 {_143311 _143313 A : Type'} : (@ex (_143311 -> A -> _143313 -> A)) = (@ex (_143311 -> A -> _143313 -> A)).
Proof. exact (eq_refl (@ex (_143311 -> A -> _143313 -> A))). Qed.
Lemma lem8084105 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1180 _143311 _143313 _143320 A clauses _106908) = (term1199 _143311 _143313 _143320 A clauses _106908).
Proof. exact (MK_COMB (@lem8084104 _143311 _143313 A) (@lem8084103 _143311 _143313 _143320 A clauses _106908)). Qed.
Lemma lem8084106 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : ((term1179 _143311 _143313 _143320 A clauses _106908) = (term1180 _143311 _143313 _143320 A clauses _106908)) = ((term1176 _143311 _143313 _143320 A clauses _106908) = (term1199 _143311 _143313 _143320 A clauses _106908)).
Proof. exact (MK_COMB (@lem8084094 _143311 _143313 _143320 A clauses _106908) (@lem8084105 _143311 _143313 _143320 A clauses _106908)). Qed.
Lemma lem8084107 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1176 _143311 _143313 _143320 A clauses _106908) = (term1199 _143311 _143313 _143320 A clauses _106908).
Proof. exact (EQ_MP (@lem8084106 _143311 _143313 _143320 A clauses _106908) (@lem8084081 _143311 _143313 _143320 A clauses _106908)). Qed.
Lemma lem8084109 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8084110 {_143311 _143313 _143320 A : Type'} (P : type1378 _143311 _143313 _143320 A) : (term1200 _143311 _143313 _143320 A P) = (term1201 _143311 _143313 _143320 A P).
Proof. exact (@lem8084109 _143311 (type1523 _143311 _143313 _143320 A) P). Qed.
Lemma lem8084111 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1202 _143311 _143313 _143320 A s clauses _106908) = (term1203 _143311 _143313 _143320 A s clauses _106908).
Proof. exact (@lem8084110 _143311 _143313 _143320 A (term1204 _143311 _143313 _143320 A s clauses _106908)). Qed.
Lemma lem8084112 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1205 _143311 _143313 _143320 A s clauses _106908 c) = (term1206 _143311 _143313 _143320 A s clauses c _106908).
Proof. exact (eq_refl (term1205 _143311 _143313 _143320 A s clauses _106908 c)). Qed.
Lemma lem8084113 {_143311 _143313 _143320 A : Type'} (t : type1523 _143311 _143313 _143320 A) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8084114 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) (t : type1523 _143311 _143313 _143320 A) : (term1207 _143311 _143313 _143320 A s clauses _106908 c t) = (term1208 _143311 _143313 _143320 A s clauses c _106908 t).
Proof. exact (MK_COMB (@lem8084112 _143311 _143313 _143320 A s clauses c _106908) (@lem8084113 _143311 _143313 _143320 A t)). Qed.
Lemma lem8084115 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1523 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1208 _143311 _143313 _143320 A s clauses c _106908 t) = (term1209 _143311 _143313 _143320 A s t clauses c _106908).
Proof. exact (eq_refl (term1208 _143311 _143313 _143320 A s clauses c _106908 t)). Qed.
Lemma lem8084116 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1523 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1207 _143311 _143313 _143320 A s clauses _106908 c t) = (term1209 _143311 _143313 _143320 A s t clauses c _106908).
Proof. exact (TRANS (@lem8084114 _143311 _143313 _143320 A s clauses c _106908 t) (@lem8084115 _143311 _143313 _143320 A s t clauses c _106908)). Qed.
Lemma lem8084117 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1210 _143311 _143313 _143320 A s clauses _106908 c) = (term1206 _143311 _143313 _143320 A s clauses c _106908).
Proof. exact (fun_ext (fun t : type1523 _143311 _143313 _143320 A => @lem8084116 _143311 _143313 _143320 A s t clauses c _106908)). Qed.
Lemma lem8084118 {_143311 _143313 _143320 A : Type'} : (@ex (A -> _143311 -> _143313 -> _143320)) = (@ex (A -> _143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (A -> _143311 -> _143313 -> _143320))). Qed.
Lemma lem8084119 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1211 _143311 _143313 _143320 A s clauses _106908 c) = (term1192 _143311 _143313 _143320 A s clauses c _106908).
Proof. exact (MK_COMB (@lem8084118 _143311 _143313 _143320 A) (@lem8084117 _143311 _143313 _143320 A s clauses c _106908)). Qed.
Lemma lem8084120 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1212 _143311 _143313 _143320 A s clauses _106908) = (term1194 _143311 _143313 _143320 A s clauses _106908).
Proof. exact (fun_ext (fun c : _143311 => @lem8084119 _143311 _143313 _143320 A s clauses c _106908)). Qed.
Lemma lem8084121 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8084122 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1202 _143311 _143313 _143320 A s clauses _106908) = (term1196 _143311 _143313 _143320 A s clauses _106908).
Proof. exact (MK_COMB (@lem8084121 _143311) (@lem8084120 _143311 _143313 _143320 A s clauses _106908)). Qed.
Lemma lem8084123 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8084124 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1213 _143311 _143313 _143320 A s clauses _106908) = (term1214 _143311 _143313 _143320 A s clauses _106908).
Proof. exact (MK_COMB (@lem8084123) (@lem8084122 _143311 _143313 _143320 A s clauses _106908)). Qed.
Lemma lem8084125 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1205 _143311 _143313 _143320 A s clauses _106908 c) = (term1206 _143311 _143313 _143320 A s clauses c _106908).
Proof. exact (eq_refl (term1205 _143311 _143313 _143320 A s clauses _106908 c)). Qed.
Lemma lem8084126 {_143311 _143313 _143320 A : Type'} (t : type1420 _143311 _143313 _143320 A) (c : _143311) : (t c) = (t c).
Proof. exact (eq_refl (t c)). Qed.
Lemma lem8084127 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) (t : type1420 _143311 _143313 _143320 A) (c : _143311) : (term1215 _143311 _143313 _143320 A s clauses _106908 t c) = (term1216 _143311 _143313 _143320 A s clauses _106908 t c).
Proof. exact (MK_COMB (@lem8084125 _143311 _143313 _143320 A s clauses c _106908) (@lem8084126 _143311 _143313 _143320 A t c)). Qed.
Lemma lem8084128 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1216 _143311 _143313 _143320 A s clauses _106908 t c) = (term1217 _143311 _143313 _143320 A s t clauses c _106908).
Proof. exact (eq_refl (term1216 _143311 _143313 _143320 A s clauses _106908 t c)). Qed.
Lemma lem8084129 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1215 _143311 _143313 _143320 A s clauses _106908 t c) = (term1217 _143311 _143313 _143320 A s t clauses c _106908).
Proof. exact (TRANS (@lem8084127 _143311 _143313 _143320 A s clauses _106908 t c) (@lem8084128 _143311 _143313 _143320 A s t clauses c _106908)). Qed.
Lemma lem8084130 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1218 _143311 _143313 _143320 A s clauses _106908 t) = (term1219 _143311 _143313 _143320 A s t clauses _106908).
Proof. exact (fun_ext (fun c : _143311 => @lem8084129 _143311 _143313 _143320 A s t clauses c _106908)). Qed.
Lemma lem8084131 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8084132 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1220 _143311 _143313 _143320 A s clauses _106908 t) = (term1221 _143311 _143313 _143320 A s t clauses _106908).
Proof. exact (MK_COMB (@lem8084131 _143311) (@lem8084130 _143311 _143313 _143320 A s t clauses _106908)). Qed.
Lemma lem8084133 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1222 _143311 _143313 _143320 A s clauses _106908) = (term1223 _143311 _143313 _143320 A s clauses _106908).
Proof. exact (fun_ext (fun t : type1420 _143311 _143313 _143320 A => @lem8084132 _143311 _143313 _143320 A s t clauses _106908)). Qed.
Lemma lem8084134 {_143311 _143313 _143320 A : Type'} : (@ex (_143311 -> A -> _143311 -> _143313 -> _143320)) = (@ex (_143311 -> A -> _143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> A -> _143311 -> _143313 -> _143320))). Qed.
Lemma lem8084135 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1203 _143311 _143313 _143320 A s clauses _106908) = (term1224 _143311 _143313 _143320 A s clauses _106908).
Proof. exact (MK_COMB (@lem8084134 _143311 _143313 _143320 A) (@lem8084133 _143311 _143313 _143320 A s clauses _106908)). Qed.
Lemma lem8084136 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : ((term1202 _143311 _143313 _143320 A s clauses _106908) = (term1203 _143311 _143313 _143320 A s clauses _106908)) = ((term1196 _143311 _143313 _143320 A s clauses _106908) = (term1224 _143311 _143313 _143320 A s clauses _106908)).
Proof. exact (MK_COMB (@lem8084124 _143311 _143313 _143320 A s clauses _106908) (@lem8084135 _143311 _143313 _143320 A s clauses _106908)). Qed.
Lemma lem8084137 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1196 _143311 _143313 _143320 A s clauses _106908) = (term1224 _143311 _143313 _143320 A s clauses _106908).
Proof. exact (EQ_MP (@lem8084136 _143311 _143313 _143320 A s clauses _106908) (@lem8084111 _143311 _143313 _143320 A s clauses _106908)). Qed.
Lemma lem8084139 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8084140 {_143311 _143313 A : Type'} (P : type1377 _143311 _143313 A) : (term1225 _143311 _143313 A P) = (term1226 _143311 _143313 A P).
Proof. exact (@lem8084139 _143311 (A -> _143313) P). Qed.
Lemma lem8084141 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1227 _143311 _143313 _143320 A s t clauses _106908) = (term1228 _143311 _143313 _143320 A s t clauses _106908).
Proof. exact (@lem8084140 _143311 _143313 A (term1229 _143311 _143313 _143320 A s t clauses _106908)). Qed.
Lemma lem8084142 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1230 _143311 _143313 _143320 A s t clauses _106908 c) = (term1231 _143311 _143313 _143320 A s t clauses c _106908).
Proof. exact (eq_refl (term1230 _143311 _143313 _143320 A s t clauses _106908 c)). Qed.
Lemma lem8084143 {_143313 A : Type'} (a : A -> _143313) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8084144 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) (a : A -> _143313) : (term1232 _143311 _143313 _143320 A s t clauses _106908 c a) = (term1233 _143311 _143313 _143320 A s t clauses c _106908 a).
Proof. exact (MK_COMB (@lem8084142 _143311 _143313 _143320 A s t clauses c _106908) (@lem8084143 _143313 A a)). Qed.
Lemma lem8084145 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (a : A -> _143313) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1233 _143311 _143313 _143320 A s t clauses c _106908 a) = (term1234 _143311 _143313 _143320 A s t a clauses c _106908).
Proof. exact (eq_refl (term1233 _143311 _143313 _143320 A s t clauses c _106908 a)). Qed.
Lemma lem8084146 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (a : A -> _143313) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1232 _143311 _143313 _143320 A s t clauses _106908 c a) = (term1234 _143311 _143313 _143320 A s t a clauses c _106908).
Proof. exact (TRANS (@lem8084144 _143311 _143313 _143320 A s t clauses c _106908 a) (@lem8084145 _143311 _143313 _143320 A s t a clauses c _106908)). Qed.
Lemma lem8084147 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1235 _143311 _143313 _143320 A s t clauses _106908 c) = (term1231 _143311 _143313 _143320 A s t clauses c _106908).
Proof. exact (fun_ext (fun a : A -> _143313 => @lem8084146 _143311 _143313 _143320 A s t a clauses c _106908)). Qed.
Lemma lem8084148 {_143313 A : Type'} : (@ex (A -> _143313)) = (@ex (A -> _143313)).
Proof. exact (eq_refl (@ex (A -> _143313))). Qed.
Lemma lem8084149 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1236 _143311 _143313 _143320 A s t clauses _106908 c) = (term1217 _143311 _143313 _143320 A s t clauses c _106908).
Proof. exact (MK_COMB (@lem8084148 _143313 A) (@lem8084147 _143311 _143313 _143320 A s t clauses c _106908)). Qed.
Lemma lem8084150 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1237 _143311 _143313 _143320 A s t clauses _106908) = (term1219 _143311 _143313 _143320 A s t clauses _106908).
Proof. exact (fun_ext (fun c : _143311 => @lem8084149 _143311 _143313 _143320 A s t clauses c _106908)). Qed.
Lemma lem8084151 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8084152 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1227 _143311 _143313 _143320 A s t clauses _106908) = (term1221 _143311 _143313 _143320 A s t clauses _106908).
Proof. exact (MK_COMB (@lem8084151 _143311) (@lem8084150 _143311 _143313 _143320 A s t clauses _106908)). Qed.
Lemma lem8084153 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8084154 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1238 _143311 _143313 _143320 A s t clauses _106908) = (term1239 _143311 _143313 _143320 A s t clauses _106908).
Proof. exact (MK_COMB (@lem8084153) (@lem8084152 _143311 _143313 _143320 A s t clauses _106908)). Qed.
Lemma lem8084155 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1230 _143311 _143313 _143320 A s t clauses _106908 c) = (term1231 _143311 _143313 _143320 A s t clauses c _106908).
Proof. exact (eq_refl (term1230 _143311 _143313 _143320 A s t clauses _106908 c)). Qed.
Lemma lem8084156 {_143311 _143313 A : Type'} (a : type1419 _143311 _143313 A) (c : _143311) : (a c) = (a c).
Proof. exact (eq_refl (a c)). Qed.
Lemma lem8084157 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) (a : type1419 _143311 _143313 A) (c : _143311) : (term1240 _143311 _143313 _143320 A s t clauses _106908 a c) = (term1241 _143311 _143313 _143320 A s t clauses _106908 a c).
Proof. exact (MK_COMB (@lem8084155 _143311 _143313 _143320 A s t clauses c _106908) (@lem8084156 _143311 _143313 A a c)). Qed.
Lemma lem8084158 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (a : type1419 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1241 _143311 _143313 _143320 A s t clauses _106908 a c) = (term1242 _143311 _143313 _143320 A s t a clauses c _106908).
Proof. exact (eq_refl (term1241 _143311 _143313 _143320 A s t clauses _106908 a c)). Qed.
Lemma lem8084159 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (a : type1419 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (c : _143311) (_106908 : _143320) : (term1240 _143311 _143313 _143320 A s t clauses _106908 a c) = (term1242 _143311 _143313 _143320 A s t a clauses c _106908).
Proof. exact (TRANS (@lem8084157 _143311 _143313 _143320 A s t clauses _106908 a c) (@lem8084158 _143311 _143313 _143320 A s t a clauses c _106908)). Qed.
Lemma lem8084160 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (a : type1419 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1243 _143311 _143313 _143320 A s t clauses _106908 a) = (term1244 _143311 _143313 _143320 A s t a clauses _106908).
Proof. exact (fun_ext (fun c : _143311 => @lem8084159 _143311 _143313 _143320 A s t a clauses c _106908)). Qed.
Lemma lem8084161 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8084162 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (a : type1419 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1245 _143311 _143313 _143320 A s t clauses _106908 a) = (term1246 _143311 _143313 _143320 A s t a clauses _106908).
Proof. exact (MK_COMB (@lem8084161 _143311) (@lem8084160 _143311 _143313 _143320 A s t a clauses _106908)). Qed.
Lemma lem8084163 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1247 _143311 _143313 _143320 A s t clauses _106908) = (term1248 _143311 _143313 _143320 A s t clauses _106908).
Proof. exact (fun_ext (fun a : type1419 _143311 _143313 A => @lem8084162 _143311 _143313 _143320 A s t a clauses _106908)). Qed.
Lemma lem8084164 {_143311 _143313 A : Type'} : (@ex (_143311 -> A -> _143313)) = (@ex (_143311 -> A -> _143313)).
Proof. exact (eq_refl (@ex (_143311 -> A -> _143313))). Qed.
Lemma lem8084165 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1228 _143311 _143313 _143320 A s t clauses _106908) = (term1249 _143311 _143313 _143320 A s t clauses _106908).
Proof. exact (MK_COMB (@lem8084164 _143311 _143313 A) (@lem8084163 _143311 _143313 _143320 A s t clauses _106908)). Qed.
Lemma lem8084166 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : ((term1227 _143311 _143313 _143320 A s t clauses _106908) = (term1228 _143311 _143313 _143320 A s t clauses _106908)) = ((term1221 _143311 _143313 _143320 A s t clauses _106908) = (term1249 _143311 _143313 _143320 A s t clauses _106908)).
Proof. exact (MK_COMB (@lem8084154 _143311 _143313 _143320 A s t clauses _106908) (@lem8084165 _143311 _143313 _143320 A s t clauses _106908)). Qed.
Lemma lem8084167 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (t : type1420 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1221 _143311 _143313 _143320 A s t clauses _106908) = (term1249 _143311 _143313 _143320 A s t clauses _106908).
Proof. exact (EQ_MP (@lem8084166 _143311 _143313 _143320 A s t clauses _106908) (@lem8084141 _143311 _143313 _143320 A s t clauses _106908)). Qed.
Lemma lem8084168 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1223 _143311 _143313 _143320 A s clauses _106908) = (term1250 _143311 _143313 _143320 A s clauses _106908).
Proof. exact (fun_ext (fun t : type1420 _143311 _143313 _143320 A => @lem8084167 _143311 _143313 _143320 A s t clauses _106908)). Qed.
Lemma lem8084169 {_143311 _143313 _143320 A : Type'} : (@ex (_143311 -> A -> _143311 -> _143313 -> _143320)) = (@ex (_143311 -> A -> _143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> A -> _143311 -> _143313 -> _143320))). Qed.
Lemma lem8084170 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1224 _143311 _143313 _143320 A s clauses _106908) = (term1251 _143311 _143313 _143320 A s clauses _106908).
Proof. exact (MK_COMB (@lem8084169 _143311 _143313 _143320 A) (@lem8084168 _143311 _143313 _143320 A s clauses _106908)). Qed.
Lemma lem8084171 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1196 _143311 _143313 _143320 A s clauses _106908) = (term1251 _143311 _143313 _143320 A s clauses _106908).
Proof. exact (TRANS (@lem8084137 _143311 _143313 _143320 A s clauses _106908) (@lem8084170 _143311 _143313 _143320 A s clauses _106908)). Qed.
Lemma lem8084172 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1198 _143311 _143313 _143320 A clauses _106908) = (term1252 _143311 _143313 _143320 A clauses _106908).
Proof. exact (fun_ext (fun s : type1417 _143311 _143313 A => @lem8084171 _143311 _143313 _143320 A s clauses _106908)). Qed.
Lemma lem8084173 {_143311 _143313 A : Type'} : (@ex (_143311 -> A -> _143313 -> A)) = (@ex (_143311 -> A -> _143313 -> A)).
Proof. exact (eq_refl (@ex (_143311 -> A -> _143313 -> A))). Qed.
Lemma lem8084174 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1199 _143311 _143313 _143320 A clauses _106908) = (term1253 _143311 _143313 _143320 A clauses _106908).
Proof. exact (MK_COMB (@lem8084173 _143311 _143313 A) (@lem8084172 _143311 _143313 _143320 A clauses _106908)). Qed.
Lemma lem8084175 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1176 _143311 _143313 _143320 A clauses _106908) = (term1253 _143311 _143313 _143320 A clauses _106908).
Proof. exact (TRANS (@lem8084107 _143311 _143313 _143320 A clauses _106908) (@lem8084174 _143311 _143313 _143320 A clauses _106908)). Qed.
Lemma lem8084176 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1039 _143311 _143313 _143320 A clauses _106908) = (term1253 _143311 _143313 _143320 A clauses _106908).
Proof. exact (TRANS (@lem8084077 _143311 _143313 _143320 A clauses _106908) (@lem8084175 _143311 _143313 _143320 A clauses _106908)). Qed.
Lemma lem8084177 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) : (term1040 _143311 _143313 _143320 A _106908) = (term1254 _143311 _143313 _143320 A _106908).
Proof. exact (fun_ext (fun clauses : type1634 _143311 _143313 _143320 A => @lem8084176 _143311 _143313 _143320 A clauses _106908)). Qed.
Lemma lem8084178 {_143311 _143313 _143320 A : Type'} : (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320)))) = (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))))). Qed.
Lemma lem8084179 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) : (term1041 _143311 _143313 _143320 A _106908) = (term1255 _143311 _143313 _143320 A _106908).
Proof. exact (MK_COMB (@lem8084178 _143311 _143313 _143320 A) (@lem8084177 _143311 _143313 _143320 A _106908)). Qed.
Lemma lem8084181 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8084182 {_143311 _143313 _143320 A : Type'} (P : type1068 _143311 _143313 _143320 A) : (term1256 _143311 _143313 _143320 A P) = (term1257 _143311 _143313 _143320 A P).
Proof. exact (@lem8084181 (type1634 _143311 _143313 _143320 A) (type1417 _143311 _143313 A) P). Qed.
Lemma lem8084183 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) : (term1258 _143311 _143313 _143320 A _106908) = (term1259 _143311 _143313 _143320 A _106908).
Proof. exact (@lem8084182 _143311 _143313 _143320 A (term1260 _143311 _143313 _143320 A _106908)). Qed.
Lemma lem8084184 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1261 _143311 _143313 _143320 A _106908 clauses) = (term1252 _143311 _143313 _143320 A clauses _106908).
Proof. exact (eq_refl (term1261 _143311 _143313 _143320 A _106908 clauses)). Qed.
Lemma lem8084185 {_143311 _143313 A : Type'} (s : type1417 _143311 _143313 A) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8084186 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) (s : type1417 _143311 _143313 A) : (term1262 _143311 _143313 _143320 A _106908 clauses s) = (term1263 _143311 _143313 _143320 A clauses _106908 s).
Proof. exact (MK_COMB (@lem8084184 _143311 _143313 _143320 A clauses _106908) (@lem8084185 _143311 _143313 A s)). Qed.
Lemma lem8084187 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1263 _143311 _143313 _143320 A clauses _106908 s) = (term1251 _143311 _143313 _143320 A s clauses _106908).
Proof. exact (eq_refl (term1263 _143311 _143313 _143320 A clauses _106908 s)). Qed.
Lemma lem8084188 {_143311 _143313 _143320 A : Type'} (s : type1417 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1262 _143311 _143313 _143320 A _106908 clauses s) = (term1251 _143311 _143313 _143320 A s clauses _106908).
Proof. exact (TRANS (@lem8084186 _143311 _143313 _143320 A clauses _106908 s) (@lem8084187 _143311 _143313 _143320 A s clauses _106908)). Qed.
Lemma lem8084189 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1264 _143311 _143313 _143320 A _106908 clauses) = (term1252 _143311 _143313 _143320 A clauses _106908).
Proof. exact (fun_ext (fun s : type1417 _143311 _143313 A => @lem8084188 _143311 _143313 _143320 A s clauses _106908)). Qed.
Lemma lem8084190 {_143311 _143313 A : Type'} : (@ex (_143311 -> A -> _143313 -> A)) = (@ex (_143311 -> A -> _143313 -> A)).
Proof. exact (eq_refl (@ex (_143311 -> A -> _143313 -> A))). Qed.
Lemma lem8084191 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1265 _143311 _143313 _143320 A _106908 clauses) = (term1253 _143311 _143313 _143320 A clauses _106908).
Proof. exact (MK_COMB (@lem8084190 _143311 _143313 A) (@lem8084189 _143311 _143313 _143320 A clauses _106908)). Qed.
Lemma lem8084192 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) : (term1266 _143311 _143313 _143320 A _106908) = (term1254 _143311 _143313 _143320 A _106908).
Proof. exact (fun_ext (fun clauses : type1634 _143311 _143313 _143320 A => @lem8084191 _143311 _143313 _143320 A clauses _106908)). Qed.
Lemma lem8084193 {_143311 _143313 _143320 A : Type'} : (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320)))) = (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))))). Qed.
Lemma lem8084194 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) : (term1258 _143311 _143313 _143320 A _106908) = (term1255 _143311 _143313 _143320 A _106908).
Proof. exact (MK_COMB (@lem8084193 _143311 _143313 _143320 A) (@lem8084192 _143311 _143313 _143320 A _106908)). Qed.
Lemma lem8084195 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8084196 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) : (term1267 _143311 _143313 _143320 A _106908) = (term1268 _143311 _143313 _143320 A _106908).
Proof. exact (MK_COMB (@lem8084195) (@lem8084194 _143311 _143313 _143320 A _106908)). Qed.
Lemma lem8084197 {_143311 _143313 _143320 A : Type'} (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1261 _143311 _143313 _143320 A _106908 clauses) = (term1252 _143311 _143313 _143320 A clauses _106908).
Proof. exact (eq_refl (term1261 _143311 _143313 _143320 A _106908 clauses)). Qed.
Lemma lem8084198 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) : (s clauses) = (s clauses).
Proof. exact (eq_refl (s clauses)). Qed.
Lemma lem8084199 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) (s : type1071 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) : (term1269 _143311 _143313 _143320 A _106908 s clauses) = (term1270 _143311 _143313 _143320 A _106908 s clauses).
Proof. exact (MK_COMB (@lem8084197 _143311 _143313 _143320 A clauses _106908) (@lem8084198 _143311 _143313 _143320 A s clauses)). Qed.
Lemma lem8084200 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1270 _143311 _143313 _143320 A _106908 s clauses) = (term1271 _143311 _143313 _143320 A s clauses _106908).
Proof. exact (eq_refl (term1270 _143311 _143313 _143320 A _106908 s clauses)). Qed.
Lemma lem8084201 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1269 _143311 _143313 _143320 A _106908 s clauses) = (term1271 _143311 _143313 _143320 A s clauses _106908).
Proof. exact (TRANS (@lem8084199 _143311 _143313 _143320 A _106908 s clauses) (@lem8084200 _143311 _143313 _143320 A s clauses _106908)). Qed.
Lemma lem8084202 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (_106908 : _143320) : (term1272 _143311 _143313 _143320 A _106908 s) = (term1273 _143311 _143313 _143320 A s _106908).
Proof. exact (fun_ext (fun clauses : type1634 _143311 _143313 _143320 A => @lem8084201 _143311 _143313 _143320 A s clauses _106908)). Qed.
Lemma lem8084203 {_143311 _143313 _143320 A : Type'} : (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320)))) = (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))))). Qed.
Lemma lem8084204 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (_106908 : _143320) : (term1274 _143311 _143313 _143320 A _106908 s) = (term1275 _143311 _143313 _143320 A s _106908).
Proof. exact (MK_COMB (@lem8084203 _143311 _143313 _143320 A) (@lem8084202 _143311 _143313 _143320 A s _106908)). Qed.
Lemma lem8084205 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) : (term1276 _143311 _143313 _143320 A _106908) = (term1277 _143311 _143313 _143320 A _106908).
Proof. exact (fun_ext (fun s : type1071 _143311 _143313 _143320 A => @lem8084204 _143311 _143313 _143320 A s _106908)). Qed.
Lemma lem8084206 {_143311 _143313 _143320 A : Type'} : (@ex ((list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))) -> _143311 -> A -> _143313 -> A)) = (@ex ((list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))) -> _143311 -> A -> _143313 -> A)).
Proof. exact (eq_refl (@ex ((list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))) -> _143311 -> A -> _143313 -> A))). Qed.
Lemma lem8084207 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) : (term1259 _143311 _143313 _143320 A _106908) = (term1278 _143311 _143313 _143320 A _106908).
Proof. exact (MK_COMB (@lem8084206 _143311 _143313 _143320 A) (@lem8084205 _143311 _143313 _143320 A _106908)). Qed.
Lemma lem8084208 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) : ((term1258 _143311 _143313 _143320 A _106908) = (term1259 _143311 _143313 _143320 A _106908)) = ((term1255 _143311 _143313 _143320 A _106908) = (term1278 _143311 _143313 _143320 A _106908)).
Proof. exact (MK_COMB (@lem8084196 _143311 _143313 _143320 A _106908) (@lem8084207 _143311 _143313 _143320 A _106908)). Qed.
Lemma lem8084209 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) : (term1255 _143311 _143313 _143320 A _106908) = (term1278 _143311 _143313 _143320 A _106908).
Proof. exact (EQ_MP (@lem8084208 _143311 _143313 _143320 A _106908) (@lem8084183 _143311 _143313 _143320 A _106908)). Qed.
Lemma lem8084211 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8084212 {_143311 _143313 _143320 A : Type'} (P : type1067 _143311 _143313 _143320 A) : (term1279 _143311 _143313 _143320 A P) = (term1280 _143311 _143313 _143320 A P).
Proof. exact (@lem8084211 (type1634 _143311 _143313 _143320 A) (type1420 _143311 _143313 _143320 A) P). Qed.
Lemma lem8084213 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (_106908 : _143320) : (term1281 _143311 _143313 _143320 A s _106908) = (term1282 _143311 _143313 _143320 A s _106908).
Proof. exact (@lem8084212 _143311 _143313 _143320 A (term1283 _143311 _143313 _143320 A s _106908)). Qed.
Lemma lem8084214 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1284 _143311 _143313 _143320 A s _106908 clauses) = (term1285 _143311 _143313 _143320 A s clauses _106908).
Proof. exact (eq_refl (term1284 _143311 _143313 _143320 A s _106908 clauses)). Qed.
Lemma lem8084215 {_143311 _143313 _143320 A : Type'} (t : type1420 _143311 _143313 _143320 A) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8084216 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) (t : type1420 _143311 _143313 _143320 A) : (term1286 _143311 _143313 _143320 A s _106908 clauses t) = (term1287 _143311 _143313 _143320 A s clauses _106908 t).
Proof. exact (MK_COMB (@lem8084214 _143311 _143313 _143320 A s clauses _106908) (@lem8084215 _143311 _143313 _143320 A t)). Qed.
Lemma lem8084217 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1420 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1287 _143311 _143313 _143320 A s clauses _106908 t) = (term1288 _143311 _143313 _143320 A s t clauses _106908).
Proof. exact (eq_refl (term1287 _143311 _143313 _143320 A s clauses _106908 t)). Qed.
Lemma lem8084218 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1420 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1286 _143311 _143313 _143320 A s _106908 clauses t) = (term1288 _143311 _143313 _143320 A s t clauses _106908).
Proof. exact (TRANS (@lem8084216 _143311 _143313 _143320 A s clauses _106908 t) (@lem8084217 _143311 _143313 _143320 A s t clauses _106908)). Qed.
Lemma lem8084219 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1289 _143311 _143313 _143320 A s _106908 clauses) = (term1285 _143311 _143313 _143320 A s clauses _106908).
Proof. exact (fun_ext (fun t : type1420 _143311 _143313 _143320 A => @lem8084218 _143311 _143313 _143320 A s t clauses _106908)). Qed.
Lemma lem8084220 {_143311 _143313 _143320 A : Type'} : (@ex (_143311 -> A -> _143311 -> _143313 -> _143320)) = (@ex (_143311 -> A -> _143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> A -> _143311 -> _143313 -> _143320))). Qed.
Lemma lem8084221 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1290 _143311 _143313 _143320 A s _106908 clauses) = (term1271 _143311 _143313 _143320 A s clauses _106908).
Proof. exact (MK_COMB (@lem8084220 _143311 _143313 _143320 A) (@lem8084219 _143311 _143313 _143320 A s clauses _106908)). Qed.
Lemma lem8084222 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (_106908 : _143320) : (term1291 _143311 _143313 _143320 A s _106908) = (term1273 _143311 _143313 _143320 A s _106908).
Proof. exact (fun_ext (fun clauses : type1634 _143311 _143313 _143320 A => @lem8084221 _143311 _143313 _143320 A s clauses _106908)). Qed.
Lemma lem8084223 {_143311 _143313 _143320 A : Type'} : (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320)))) = (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))))). Qed.
Lemma lem8084224 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (_106908 : _143320) : (term1281 _143311 _143313 _143320 A s _106908) = (term1275 _143311 _143313 _143320 A s _106908).
Proof. exact (MK_COMB (@lem8084223 _143311 _143313 _143320 A) (@lem8084222 _143311 _143313 _143320 A s _106908)). Qed.
Lemma lem8084225 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8084226 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (_106908 : _143320) : (term1292 _143311 _143313 _143320 A s _106908) = (term1293 _143311 _143313 _143320 A s _106908).
Proof. exact (MK_COMB (@lem8084225) (@lem8084224 _143311 _143313 _143320 A s _106908)). Qed.
Lemma lem8084227 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1284 _143311 _143313 _143320 A s _106908 clauses) = (term1285 _143311 _143313 _143320 A s clauses _106908).
Proof. exact (eq_refl (term1284 _143311 _143313 _143320 A s _106908 clauses)). Qed.
Lemma lem8084228 {_143311 _143313 _143320 A : Type'} (t : type1070 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) : (t clauses) = (t clauses).
Proof. exact (eq_refl (t clauses)). Qed.
Lemma lem8084229 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (_106908 : _143320) (t : type1070 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) : (term1294 _143311 _143313 _143320 A s _106908 t clauses) = (term1295 _143311 _143313 _143320 A s _106908 t clauses).
Proof. exact (MK_COMB (@lem8084227 _143311 _143313 _143320 A s clauses _106908) (@lem8084228 _143311 _143313 _143320 A t clauses)). Qed.
Lemma lem8084230 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1295 _143311 _143313 _143320 A s _106908 t clauses) = (term1296 _143311 _143313 _143320 A s t clauses _106908).
Proof. exact (eq_refl (term1295 _143311 _143313 _143320 A s _106908 t clauses)). Qed.
Lemma lem8084231 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1294 _143311 _143313 _143320 A s _106908 t clauses) = (term1296 _143311 _143313 _143320 A s t clauses _106908).
Proof. exact (TRANS (@lem8084229 _143311 _143313 _143320 A s _106908 t clauses) (@lem8084230 _143311 _143313 _143320 A s t clauses _106908)). Qed.
Lemma lem8084232 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (_106908 : _143320) : (term1297 _143311 _143313 _143320 A s _106908 t) = (term1298 _143311 _143313 _143320 A s t _106908).
Proof. exact (fun_ext (fun clauses : type1634 _143311 _143313 _143320 A => @lem8084231 _143311 _143313 _143320 A s t clauses _106908)). Qed.
Lemma lem8084233 {_143311 _143313 _143320 A : Type'} : (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320)))) = (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))))). Qed.
Lemma lem8084234 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (_106908 : _143320) : (term1299 _143311 _143313 _143320 A s _106908 t) = (term1300 _143311 _143313 _143320 A s t _106908).
Proof. exact (MK_COMB (@lem8084233 _143311 _143313 _143320 A) (@lem8084232 _143311 _143313 _143320 A s t _106908)). Qed.
Lemma lem8084235 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (_106908 : _143320) : (term1301 _143311 _143313 _143320 A s _106908) = (term1302 _143311 _143313 _143320 A s _106908).
Proof. exact (fun_ext (fun t : type1070 _143311 _143313 _143320 A => @lem8084234 _143311 _143313 _143320 A s t _106908)). Qed.
Lemma lem8084236 {_143311 _143313 _143320 A : Type'} : (@ex ((list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))) -> _143311 -> A -> _143311 -> _143313 -> _143320)) = (@ex ((list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))) -> _143311 -> A -> _143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex ((list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))) -> _143311 -> A -> _143311 -> _143313 -> _143320))). Qed.
Lemma lem8084237 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (_106908 : _143320) : (term1282 _143311 _143313 _143320 A s _106908) = (term1303 _143311 _143313 _143320 A s _106908).
Proof. exact (MK_COMB (@lem8084236 _143311 _143313 _143320 A) (@lem8084235 _143311 _143313 _143320 A s _106908)). Qed.
Lemma lem8084238 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (_106908 : _143320) : ((term1281 _143311 _143313 _143320 A s _106908) = (term1282 _143311 _143313 _143320 A s _106908)) = ((term1275 _143311 _143313 _143320 A s _106908) = (term1303 _143311 _143313 _143320 A s _106908)).
Proof. exact (MK_COMB (@lem8084226 _143311 _143313 _143320 A s _106908) (@lem8084237 _143311 _143313 _143320 A s _106908)). Qed.
Lemma lem8084239 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (_106908 : _143320) : (term1275 _143311 _143313 _143320 A s _106908) = (term1303 _143311 _143313 _143320 A s _106908).
Proof. exact (EQ_MP (@lem8084238 _143311 _143313 _143320 A s _106908) (@lem8084213 _143311 _143313 _143320 A s _106908)). Qed.
Lemma lem8084241 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8084242 {_143311 _143313 _143320 A : Type'} (P : type1069 _143311 _143313 _143320 A) : (term1304 _143311 _143313 _143320 A P) = (term1305 _143311 _143313 _143320 A P).
Proof. exact (@lem8084241 (type1634 _143311 _143313 _143320 A) (type1419 _143311 _143313 A) P). Qed.
Lemma lem8084243 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (_106908 : _143320) : (term1306 _143311 _143313 _143320 A s t _106908) = (term1307 _143311 _143313 _143320 A s t _106908).
Proof. exact (@lem8084242 _143311 _143313 _143320 A (term1308 _143311 _143313 _143320 A s t _106908)). Qed.
Lemma lem8084244 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1309 _143311 _143313 _143320 A s t _106908 clauses) = (term1310 _143311 _143313 _143320 A s t clauses _106908).
Proof. exact (eq_refl (term1309 _143311 _143313 _143320 A s t _106908 clauses)). Qed.
Lemma lem8084245 {_143311 _143313 A : Type'} (a : type1419 _143311 _143313 A) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8084246 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) (a : type1419 _143311 _143313 A) : (term1311 _143311 _143313 _143320 A s t _106908 clauses a) = (term1312 _143311 _143313 _143320 A s t clauses _106908 a).
Proof. exact (MK_COMB (@lem8084244 _143311 _143313 _143320 A s t clauses _106908) (@lem8084245 _143311 _143313 A a)). Qed.
Lemma lem8084247 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (a : type1419 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1312 _143311 _143313 _143320 A s t clauses _106908 a) = (term1313 _143311 _143313 _143320 A s t a clauses _106908).
Proof. exact (eq_refl (term1312 _143311 _143313 _143320 A s t clauses _106908 a)). Qed.
Lemma lem8084248 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (a : type1419 _143311 _143313 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1311 _143311 _143313 _143320 A s t _106908 clauses a) = (term1313 _143311 _143313 _143320 A s t a clauses _106908).
Proof. exact (TRANS (@lem8084246 _143311 _143313 _143320 A s t clauses _106908 a) (@lem8084247 _143311 _143313 _143320 A s t a clauses _106908)). Qed.
Lemma lem8084249 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1314 _143311 _143313 _143320 A s t _106908 clauses) = (term1310 _143311 _143313 _143320 A s t clauses _106908).
Proof. exact (fun_ext (fun a : type1419 _143311 _143313 A => @lem8084248 _143311 _143313 _143320 A s t a clauses _106908)). Qed.
Lemma lem8084250 {_143311 _143313 A : Type'} : (@ex (_143311 -> A -> _143313)) = (@ex (_143311 -> A -> _143313)).
Proof. exact (eq_refl (@ex (_143311 -> A -> _143313))). Qed.
Lemma lem8084251 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1315 _143311 _143313 _143320 A s t _106908 clauses) = (term1296 _143311 _143313 _143320 A s t clauses _106908).
Proof. exact (MK_COMB (@lem8084250 _143311 _143313 A) (@lem8084249 _143311 _143313 _143320 A s t clauses _106908)). Qed.
Lemma lem8084252 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (_106908 : _143320) : (term1316 _143311 _143313 _143320 A s t _106908) = (term1298 _143311 _143313 _143320 A s t _106908).
Proof. exact (fun_ext (fun clauses : type1634 _143311 _143313 _143320 A => @lem8084251 _143311 _143313 _143320 A s t clauses _106908)). Qed.
Lemma lem8084253 {_143311 _143313 _143320 A : Type'} : (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320)))) = (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))))). Qed.
Lemma lem8084254 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (_106908 : _143320) : (term1306 _143311 _143313 _143320 A s t _106908) = (term1300 _143311 _143313 _143320 A s t _106908).
Proof. exact (MK_COMB (@lem8084253 _143311 _143313 _143320 A) (@lem8084252 _143311 _143313 _143320 A s t _106908)). Qed.
Lemma lem8084255 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8084256 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (_106908 : _143320) : (term1317 _143311 _143313 _143320 A s t _106908) = (term1318 _143311 _143313 _143320 A s t _106908).
Proof. exact (MK_COMB (@lem8084255) (@lem8084254 _143311 _143313 _143320 A s t _106908)). Qed.
Lemma lem8084257 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1309 _143311 _143313 _143320 A s t _106908 clauses) = (term1310 _143311 _143313 _143320 A s t clauses _106908).
Proof. exact (eq_refl (term1309 _143311 _143313 _143320 A s t _106908 clauses)). Qed.
Lemma lem8084258 {_143311 _143313 _143320 A : Type'} (a : type1072 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) : (a clauses) = (a clauses).
Proof. exact (eq_refl (a clauses)). Qed.
Lemma lem8084259 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (_106908 : _143320) (a : type1072 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) : (term1319 _143311 _143313 _143320 A s t _106908 a clauses) = (term1320 _143311 _143313 _143320 A s t _106908 a clauses).
Proof. exact (MK_COMB (@lem8084257 _143311 _143313 _143320 A s t clauses _106908) (@lem8084258 _143311 _143313 _143320 A a clauses)). Qed.
Lemma lem8084260 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (a : type1072 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1320 _143311 _143313 _143320 A s t _106908 a clauses) = (term1321 _143311 _143313 _143320 A s t a clauses _106908).
Proof. exact (eq_refl (term1320 _143311 _143313 _143320 A s t _106908 a clauses)). Qed.
Lemma lem8084261 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (a : type1072 _143311 _143313 _143320 A) (clauses : type1634 _143311 _143313 _143320 A) (_106908 : _143320) : (term1319 _143311 _143313 _143320 A s t _106908 a clauses) = (term1321 _143311 _143313 _143320 A s t a clauses _106908).
Proof. exact (TRANS (@lem8084259 _143311 _143313 _143320 A s t _106908 a clauses) (@lem8084260 _143311 _143313 _143320 A s t a clauses _106908)). Qed.
Lemma lem8084262 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (a : type1072 _143311 _143313 _143320 A) (_106908 : _143320) : (term1322 _143311 _143313 _143320 A s t _106908 a) = (term1323 _143311 _143313 _143320 A s t a _106908).
Proof. exact (fun_ext (fun clauses : type1634 _143311 _143313 _143320 A => @lem8084261 _143311 _143313 _143320 A s t a clauses _106908)). Qed.
Lemma lem8084263 {_143311 _143313 _143320 A : Type'} : (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320)))) = (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))))). Qed.
Lemma lem8084264 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (a : type1072 _143311 _143313 _143320 A) (_106908 : _143320) : (term1324 _143311 _143313 _143320 A s t _106908 a) = (term1325 _143311 _143313 _143320 A s t a _106908).
Proof. exact (MK_COMB (@lem8084263 _143311 _143313 _143320 A) (@lem8084262 _143311 _143313 _143320 A s t a _106908)). Qed.
Lemma lem8084265 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (_106908 : _143320) : (term1326 _143311 _143313 _143320 A s t _106908) = (term1327 _143311 _143313 _143320 A s t _106908).
Proof. exact (fun_ext (fun a : type1072 _143311 _143313 _143320 A => @lem8084264 _143311 _143313 _143320 A s t a _106908)). Qed.
Lemma lem8084266 {_143311 _143313 _143320 A : Type'} : (@ex ((list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))) -> _143311 -> A -> _143313)) = (@ex ((list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))) -> _143311 -> A -> _143313)).
Proof. exact (eq_refl (@ex ((list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))) -> _143311 -> A -> _143313))). Qed.
Lemma lem8084267 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (_106908 : _143320) : (term1307 _143311 _143313 _143320 A s t _106908) = (term1328 _143311 _143313 _143320 A s t _106908).
Proof. exact (MK_COMB (@lem8084266 _143311 _143313 _143320 A) (@lem8084265 _143311 _143313 _143320 A s t _106908)). Qed.
Lemma lem8084268 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (_106908 : _143320) : ((term1306 _143311 _143313 _143320 A s t _106908) = (term1307 _143311 _143313 _143320 A s t _106908)) = ((term1300 _143311 _143313 _143320 A s t _106908) = (term1328 _143311 _143313 _143320 A s t _106908)).
Proof. exact (MK_COMB (@lem8084256 _143311 _143313 _143320 A s t _106908) (@lem8084267 _143311 _143313 _143320 A s t _106908)). Qed.
Lemma lem8084269 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (t : type1070 _143311 _143313 _143320 A) (_106908 : _143320) : (term1300 _143311 _143313 _143320 A s t _106908) = (term1328 _143311 _143313 _143320 A s t _106908).
Proof. exact (EQ_MP (@lem8084268 _143311 _143313 _143320 A s t _106908) (@lem8084243 _143311 _143313 _143320 A s t _106908)). Qed.
Lemma lem8084270 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (_106908 : _143320) : (term1302 _143311 _143313 _143320 A s _106908) = (term1329 _143311 _143313 _143320 A s _106908).
Proof. exact (fun_ext (fun t : type1070 _143311 _143313 _143320 A => @lem8084269 _143311 _143313 _143320 A s t _106908)). Qed.
Lemma lem8084271 {_143311 _143313 _143320 A : Type'} : (@ex ((list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))) -> _143311 -> A -> _143311 -> _143313 -> _143320)) = (@ex ((list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))) -> _143311 -> A -> _143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex ((list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))) -> _143311 -> A -> _143311 -> _143313 -> _143320))). Qed.
Lemma lem8084272 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (_106908 : _143320) : (term1303 _143311 _143313 _143320 A s _106908) = (term1330 _143311 _143313 _143320 A s _106908).
Proof. exact (MK_COMB (@lem8084271 _143311 _143313 _143320 A) (@lem8084270 _143311 _143313 _143320 A s _106908)). Qed.
Lemma lem8084273 {_143311 _143313 _143320 A : Type'} (s : type1071 _143311 _143313 _143320 A) (_106908 : _143320) : (term1275 _143311 _143313 _143320 A s _106908) = (term1330 _143311 _143313 _143320 A s _106908).
Proof. exact (TRANS (@lem8084239 _143311 _143313 _143320 A s _106908) (@lem8084272 _143311 _143313 _143320 A s _106908)). Qed.
Lemma lem8084274 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) : (term1277 _143311 _143313 _143320 A _106908) = (term1331 _143311 _143313 _143320 A _106908).
Proof. exact (fun_ext (fun s : type1071 _143311 _143313 _143320 A => @lem8084273 _143311 _143313 _143320 A s _106908)). Qed.
Lemma lem8084275 {_143311 _143313 _143320 A : Type'} : (@ex ((list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))) -> _143311 -> A -> _143313 -> A)) = (@ex ((list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))) -> _143311 -> A -> _143313 -> A)).
Proof. exact (eq_refl (@ex ((list (prod (_143313 -> A) (_143311 -> _143313 -> _143320))) -> _143311 -> A -> _143313 -> A))). Qed.
Lemma lem8084276 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) : (term1278 _143311 _143313 _143320 A _106908) = (term1332 _143311 _143313 _143320 A _106908).
Proof. exact (MK_COMB (@lem8084275 _143311 _143313 _143320 A) (@lem8084274 _143311 _143313 _143320 A _106908)). Qed.
Lemma lem8084277 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) : (term1255 _143311 _143313 _143320 A _106908) = (term1332 _143311 _143313 _143320 A _106908).
Proof. exact (TRANS (@lem8084209 _143311 _143313 _143320 A _106908) (@lem8084276 _143311 _143313 _143320 A _106908)). Qed.
Lemma lem8084279 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) : (term1041 _143311 _143313 _143320 A _106908) = (term1332 _143311 _143313 _143320 A _106908).
Proof. exact (TRANS (@lem8084179 _143311 _143313 _143320 A _106908) (@lem8084277 _143311 _143313 _143320 A _106908)). Qed.
Lemma lem8084280 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) : (term424 _143311 _143313 _143320 A _106908) = (term1332 _143311 _143313 _143320 A _106908).
Proof. exact (TRANS (@lem8083648 _143311 _143313 _143320 A _106908) (@lem8084279 _143311 _143313 _143320 A _106908)). Qed.
Lemma lem8084281 {_143311 _143313 _143320 A : Type'} (_106908 : _143320) (h1 : term424 _143311 _143313 _143320 A _106908) : term1332 _143311 _143313 _143320 A _106908.
Proof. exact (EQ_MP (@lem8084280 _143311 _143313 _143320 A _106908) (@lem8081785 _143311 _143313 _143320 A _106908 h1)). Qed.
Lemma lem8084287 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) (a : _143313) : (term354 _143311 _143313 _143320 B s clauses x t c a) = (term354 _143311 _143313 _143320 B s clauses x t c a).
Proof. exact (eq_refl (term354 _143311 _143313 _143320 B s clauses x t c a)). Qed.
Lemma lem8084288 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term352 _143311 _143313 _143320 B s clauses x t c) = (term352 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8084287 _143311 _143313 _143320 B s clauses x t c a)). Qed.
Lemma lem8084289 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8084290 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term365 _143311 _143313 _143320 B s clauses x t c) = (term365 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (MK_COMB (@lem8084289 _143313) (@lem8084288 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8084292 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) : (term355 _143311 _143313 _143320 B s t clauses) = (term355 _143311 _143313 _143320 B s t clauses).
Proof. exact (eq_refl (term355 _143311 _143313 _143320 B s t clauses)). Qed.
Lemma lem8084293 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term366 _143311 _143313 _143320 B s clauses x t c) = (term366 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (MK_COMB (@lem8084292 _143311 _143313 _143320 B s t clauses) (@lem8084290 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8084294 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term368 _143311 _143313 _143320 B s clauses x c) = (term368 _143311 _143313 _143320 B s clauses x c).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8084293 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8084295 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8084296 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term370 _143311 _143313 _143320 B s clauses x c) = (term370 _143311 _143313 _143320 B s clauses x c).
Proof. exact (MK_COMB (@lem8084295 _143311 _143313 _143320) (@lem8084294 _143311 _143313 _143320 B s clauses x c)). Qed.
Lemma lem8084297 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term372 _143311 _143313 _143320 B clauses x c) = (term372 _143311 _143313 _143320 B clauses x c).
Proof. exact (fun_ext (fun s : _143313 -> B => @lem8084296 _143311 _143313 _143320 B s clauses x c)). Qed.
Lemma lem8084298 {_143313 B : Type'} : (@ex (_143313 -> B)) = (@ex (_143313 -> B)).
Proof. exact (eq_refl (@ex (_143313 -> B))). Qed.
Lemma lem8084299 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term374 _143311 _143313 _143320 B clauses x c) = (term374 _143311 _143313 _143320 B clauses x c).
Proof. exact (MK_COMB (@lem8084298 _143313 B) (@lem8084297 _143311 _143313 _143320 B clauses x c)). Qed.
Lemma lem8084301 {_143311 _143313 _143320 : Type'} (P : type443 _143311 _143313 _143320) : (term671 _143311 _143313 _143320 P) = (term672 _143311 _143313 _143320 P).
Proof. exact (@lem18394 (type1412 _143311 _143313 _143320) P). Qed.
Lemma lem8084302 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) : (term1006 _143311 _143313 _143320 B s clauses) = (term1007 _143311 _143313 _143320 B s clauses).
Proof. exact (@lem8084301 _143311 _143313 _143320 (term397 _143311 _143313 _143320 B s clauses)). Qed.
Lemma lem8084303 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) : (term398 _143311 _143313 _143320 B s clauses t) = (term351 _143311 _143313 _143320 B s t clauses).
Proof. exact (eq_refl (term398 _143311 _143313 _143320 B s clauses t)). Qed.
Lemma lem8084304 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8084306 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) : (term1008 _143311 _143313 _143320 B s clauses t) = (term1009 _143311 _143313 _143320 B s t clauses).
Proof. exact (MK_COMB (@lem8084304) (@lem8084303 _143311 _143313 _143320 B s t clauses)). Qed.
Lemma lem8084307 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) : (term1010 _143311 _143313 _143320 B s clauses) = (term1011 _143311 _143313 _143320 B s clauses).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8084306 _143311 _143313 _143320 B s t clauses)). Qed.
Lemma lem8084308 {_143311 _143313 _143320 : Type'} : (@all (_143311 -> _143313 -> _143320)) = (@all (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@all (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8084309 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) : (term1007 _143311 _143313 _143320 B s clauses) = (term1012 _143311 _143313 _143320 B s clauses).
Proof. exact (MK_COMB (@lem8084308 _143311 _143313 _143320) (@lem8084307 _143311 _143313 _143320 B s clauses)). Qed.
Lemma lem8084310 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) : (term1006 _143311 _143313 _143320 B s clauses) = (term1012 _143311 _143313 _143320 B s clauses).
Proof. exact (TRANS (@lem8084302 _143311 _143313 _143320 B s clauses) (@lem8084309 _143311 _143313 _143320 B s clauses)). Qed.
Lemma lem8084312 {_143313 : Type'} (P : _143313 -> Prop) : (term680 _143313 P) = (term681 _143313 P).
Proof. exact (@lem18394 _143313 P). Qed.
Lemma lem8084313 {_143313 B : Type'} (s : _143313 -> B) (x : B) : (term1013 _143313 B s x) = (term1014 _143313 B s x).
Proof. exact (@lem8084312 _143313 (term378 _143313 B s x)). Qed.
Lemma lem8084314 {_143313 B : Type'} (s : _143313 -> B) (a : _143313) (x : B) : (term379 _143313 B s x a) = ((s a) = x).
Proof. exact (eq_refl (term379 _143313 B s x a)). Qed.
Lemma lem8084315 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8084317 {_143313 B : Type'} (s : _143313 -> B) (a : _143313) (x : B) : (term1015 _143313 B s x a) = (term1016 _143313 B s a x).
Proof. exact (MK_COMB (@lem8084315) (@lem8084314 _143313 B s a x)). Qed.
Lemma lem8084318 {_143313 B : Type'} (s : _143313 -> B) (x : B) : (term1017 _143313 B s x) = (term1018 _143313 B s x).
Proof. exact (fun_ext (fun a : _143313 => @lem8084317 _143313 B s a x)). Qed.
Lemma lem8084319 {_143313 : Type'} : (@all _143313) = (@all _143313).
Proof. exact (eq_refl (@all _143313)). Qed.
Lemma lem8084320 {_143313 B : Type'} (s : _143313 -> B) (x : B) : (term1014 _143313 B s x) = (term1019 _143313 B s x).
Proof. exact (MK_COMB (@lem8084319 _143313) (@lem8084318 _143313 B s x)). Qed.
Lemma lem8084321 {_143313 B : Type'} (s : _143313 -> B) (x : B) : (term1013 _143313 B s x) = (term1019 _143313 B s x).
Proof. exact (TRANS (@lem8084313 _143313 B s x) (@lem8084320 _143313 B s x)). Qed.
Lemma lem8084322 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8084323 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) : (term1020 _143311 _143313 _143320 B s clauses) = (term1021 _143311 _143313 _143320 B s clauses).
Proof. exact (MK_COMB (@lem8084322) (@lem8084310 _143311 _143313 _143320 B s clauses)). Qed.
Lemma lem8084324 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : (term1022 _143311 _143313 _143320 B clauses s x) = (term1023 _143311 _143313 _143320 B clauses s x).
Proof. exact (MK_COMB (@lem8084323 _143311 _143313 _143320 B s clauses) (@lem8084321 _143313 B s x)). Qed.
Lemma lem8084325 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : (term1024 _143311 _143313 _143320 B clauses s x) = (term1022 _143311 _143313 _143320 B clauses s x).
Proof. exact (@lem17045 (term406 _143311 _143313 _143320 B s clauses) (term389 _143313 B s x)). Qed.
Lemma lem8084326 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : (term1024 _143311 _143313 _143320 B clauses s x) = (term1023 _143311 _143313 _143320 B clauses s x).
Proof. exact (TRANS (@lem8084325 _143311 _143313 _143320 B clauses s x) (@lem8084324 _143311 _143313 _143320 B clauses s x)). Qed.
Lemma lem8084327 {_143313 B : Type'} (P : type572 _143313 B) : (term1025 _143313 B P) = (term1026 _143313 B P).
Proof. exact (@lem18394 (_143313 -> B) P). Qed.
Lemma lem8084328 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) : (term415 _143311 _143313 _143320 B clauses x) = (term1027 _143311 _143313 _143320 B clauses x).
Proof. exact (@lem8084327 _143313 B (term411 _143311 _143313 _143320 B clauses x)). Qed.
Lemma lem8084329 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : (term1028 _143311 _143313 _143320 B clauses x s) = (term409 _143311 _143313 _143320 B clauses s x).
Proof. exact (eq_refl (term1028 _143311 _143313 _143320 B clauses x s)). Qed.
Lemma lem8084330 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8084331 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : (term1029 _143311 _143313 _143320 B clauses x s) = (term1024 _143311 _143313 _143320 B clauses s x).
Proof. exact (MK_COMB (@lem8084330) (@lem8084329 _143311 _143313 _143320 B clauses s x)). Qed.
Lemma lem8084332 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (s : _143313 -> B) (x : B) : (term1029 _143311 _143313 _143320 B clauses x s) = (term1023 _143311 _143313 _143320 B clauses s x).
Proof. exact (TRANS (@lem8084331 _143311 _143313 _143320 B clauses s x) (@lem8084326 _143311 _143313 _143320 B clauses s x)). Qed.
Lemma lem8084333 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) : (term1030 _143311 _143313 _143320 B clauses x) = (term1031 _143311 _143313 _143320 B clauses x).
Proof. exact (fun_ext (fun s : _143313 -> B => @lem8084332 _143311 _143313 _143320 B clauses s x)). Qed.
Lemma lem8084334 {_143313 B : Type'} : (@all (_143313 -> B)) = (@all (_143313 -> B)).
Proof. exact (eq_refl (@all (_143313 -> B))). Qed.
Lemma lem8084335 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) : (term1027 _143311 _143313 _143320 B clauses x) = (term1032 _143311 _143313 _143320 B clauses x).
Proof. exact (MK_COMB (@lem8084334 _143313 B) (@lem8084333 _143311 _143313 _143320 B clauses x)). Qed.
Lemma lem8084336 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) : (term415 _143311 _143313 _143320 B clauses x) = (term1032 _143311 _143313 _143320 B clauses x).
Proof. exact (TRANS (@lem8084328 _143311 _143313 _143320 B clauses x) (@lem8084335 _143311 _143313 _143320 B clauses x)). Qed.
Lemma lem8084337 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : ((@CASEWISE _143320 _143313 B _143311 clauses c x) = _106908) = ((@CASEWISE _143320 _143313 B _143311 clauses c x) = _106908).
Proof. exact (eq_refl ((@CASEWISE _143320 _143313 B _143311 clauses c x) = _106908)). Qed.
Lemma lem8084338 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8084339 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) : (term416 _143311 _143313 _143320 B clauses x) = (term1033 _143311 _143313 _143320 B clauses x).
Proof. exact (MK_COMB (@lem8084338) (@lem8084336 _143311 _143313 _143320 B clauses x)). Qed.
Lemma lem8084340 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term417 _143311 _143313 _143320 B clauses c x _106908) = (term1034 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (MK_COMB (@lem8084339 _143311 _143313 _143320 B clauses x) (@lem8084337 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084341 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8084342 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term375 _143311 _143313 _143320 B clauses x c) = (term375 _143311 _143313 _143320 B clauses x c).
Proof. exact (MK_COMB (@lem8084341) (@lem8084299 _143311 _143313 _143320 B clauses x c)). Qed.
Lemma lem8084343 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term418 _143311 _143313 _143320 B clauses c x _106908) = (term1035 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (MK_COMB (@lem8084342 _143311 _143313 _143320 B clauses x c) (@lem8084340 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084344 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term419 _143311 _143313 _143320 B clauses c _106908) = (term1036 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (fun_ext (fun x : B => @lem8084343 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084345 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8084346 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term420 _143311 _143313 _143320 B clauses c _106908) = (term1037 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (MK_COMB (@lem8084345 B) (@lem8084344 _143311 _143313 _143320 B clauses c _106908)). Qed.
Lemma lem8084347 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term421 _143311 _143313 _143320 B clauses _106908) = (term1038 _143311 _143313 _143320 B clauses _106908).
Proof. exact (fun_ext (fun c : _143311 => @lem8084346 _143311 _143313 _143320 B clauses c _106908)). Qed.
Lemma lem8084348 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8084349 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term422 _143311 _143313 _143320 B clauses _106908) = (term1039 _143311 _143313 _143320 B clauses _106908).
Proof. exact (MK_COMB (@lem8084348 _143311) (@lem8084347 _143311 _143313 _143320 B clauses _106908)). Qed.
Lemma lem8084350 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) : (term423 _143311 _143313 _143320 B _106908) = (term1040 _143311 _143313 _143320 B _106908).
Proof. exact (fun_ext (fun clauses : type1634 _143311 _143313 _143320 B => @lem8084349 _143311 _143313 _143320 B clauses _106908)). Qed.
Lemma lem8084351 {_143311 _143313 _143320 B : Type'} : (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320)))) = (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))))). Qed.
Lemma lem8084352 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) : (term424 _143311 _143313 _143320 B _106908) = (term1041 _143311 _143313 _143320 B _106908).
Proof. exact (MK_COMB (@lem8084351 _143311 _143313 _143320 B) (@lem8084350 _143311 _143313 _143320 B _106908)). Qed.
Lemma lem8084567 {A : Type'} (P : Prop) (Q : A -> Prop) : (term267 A P Q) = (term266 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem8084568 {_143313 : Type'} (P : Prop) (Q : _143313 -> Prop) : (term267 _143313 P Q) = (term266 _143313 P Q).
Proof. exact (@lem8084567 _143313 P Q). Qed.
Lemma lem8084569 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term350 _143311 _143313 _143320 B s clauses x t c) = (term349 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (@lem8084568 _143313 (term351 _143311 _143313 _143320 B s t clauses) (term352 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8084570 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) (a : _143313) : (term353 _143311 _143313 _143320 B s clauses x t c a) = (term354 _143311 _143313 _143320 B s clauses x t c a).
Proof. exact (eq_refl (term353 _143311 _143313 _143320 B s clauses x t c a)). Qed.
Lemma lem8084571 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term363 _143311 _143313 _143320 B s clauses x t c) = (term352 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8084570 _143311 _143313 _143320 B s clauses x t c a)). Qed.
Lemma lem8084572 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8084573 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term364 _143311 _143313 _143320 B s clauses x t c) = (term365 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (MK_COMB (@lem8084572 _143313) (@lem8084571 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8084574 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) : (term355 _143311 _143313 _143320 B s t clauses) = (term355 _143311 _143313 _143320 B s t clauses).
Proof. exact (eq_refl (term355 _143311 _143313 _143320 B s t clauses)). Qed.
Lemma lem8084575 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term350 _143311 _143313 _143320 B s clauses x t c) = (term366 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (MK_COMB (@lem8084574 _143311 _143313 _143320 B s t clauses) (@lem8084573 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8084576 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8084577 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term1042 _143311 _143313 _143320 B s clauses x t c) = (term1043 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (MK_COMB (@lem8084576) (@lem8084575 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8084578 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) (a : _143313) : (term353 _143311 _143313 _143320 B s clauses x t c a) = (term354 _143311 _143313 _143320 B s clauses x t c a).
Proof. exact (eq_refl (term353 _143311 _143313 _143320 B s clauses x t c a)). Qed.
Lemma lem8084579 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) : (term355 _143311 _143313 _143320 B s t clauses) = (term355 _143311 _143313 _143320 B s t clauses).
Proof. exact (eq_refl (term355 _143311 _143313 _143320 B s t clauses)). Qed.
Lemma lem8084580 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) (a : _143313) : (term356 _143311 _143313 _143320 B s clauses x t c a) = (term357 _143311 _143313 _143320 B s clauses x t c a).
Proof. exact (MK_COMB (@lem8084579 _143311 _143313 _143320 B s t clauses) (@lem8084578 _143311 _143313 _143320 B s clauses x t c a)). Qed.
Lemma lem8084581 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term358 _143311 _143313 _143320 B s clauses x t c) = (term359 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8084580 _143311 _143313 _143320 B s clauses x t c a)). Qed.
Lemma lem8084582 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8084583 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term349 _143311 _143313 _143320 B s clauses x t c) = (term360 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (MK_COMB (@lem8084582 _143313) (@lem8084581 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8084584 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : ((term350 _143311 _143313 _143320 B s clauses x t c) = (term349 _143311 _143313 _143320 B s clauses x t c)) = ((term366 _143311 _143313 _143320 B s clauses x t c) = (term360 _143311 _143313 _143320 B s clauses x t c)).
Proof. exact (MK_COMB (@lem8084577 _143311 _143313 _143320 B s clauses x t c) (@lem8084583 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8084585 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term366 _143311 _143313 _143320 B s clauses x t c) = (term360 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (EQ_MP (@lem8084584 _143311 _143313 _143320 B s clauses x t c) (@lem8084569 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8084586 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term368 _143311 _143313 _143320 B s clauses x c) = (term367 _143311 _143313 _143320 B s clauses x c).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8084585 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8084587 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8084588 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term370 _143311 _143313 _143320 B s clauses x c) = (term369 _143311 _143313 _143320 B s clauses x c).
Proof. exact (MK_COMB (@lem8084587 _143311 _143313 _143320) (@lem8084586 _143311 _143313 _143320 B s clauses x c)). Qed.
Lemma lem8084589 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term372 _143311 _143313 _143320 B clauses x c) = (term371 _143311 _143313 _143320 B clauses x c).
Proof. exact (fun_ext (fun s : _143313 -> B => @lem8084588 _143311 _143313 _143320 B s clauses x c)). Qed.
Lemma lem8084590 {_143313 B : Type'} : (@ex (_143313 -> B)) = (@ex (_143313 -> B)).
Proof. exact (eq_refl (@ex (_143313 -> B))). Qed.
Lemma lem8084591 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term374 _143311 _143313 _143320 B clauses x c) = (term373 _143311 _143313 _143320 B clauses x c).
Proof. exact (MK_COMB (@lem8084590 _143313 B) (@lem8084589 _143311 _143313 _143320 B clauses x c)). Qed.
Lemma lem8084592 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8084593 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term375 _143311 _143313 _143320 B clauses x c) = (term218 _143311 _143313 _143320 B clauses x c).
Proof. exact (MK_COMB (@lem8084592) (@lem8084591 _143311 _143313 _143320 B clauses x c)). Qed.
Lemma lem8084594 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1034 _143311 _143313 _143320 B clauses c x _106908) = (term1034 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (eq_refl (term1034 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084595 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1035 _143311 _143313 _143320 B clauses c x _106908) = (term1044 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (MK_COMB (@lem8084593 _143311 _143313 _143320 B clauses x c) (@lem8084594 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084597 {A : Type'} (P : A -> Prop) (Q : Prop) : (term714 A P Q) = (term715 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8084598 {_143313 B : Type'} (P : type572 _143313 B) (Q : Prop) : (term1045 _143313 B P Q) = (term1046 _143313 B P Q).
Proof. exact (@lem8084597 (_143313 -> B) P Q). Qed.
Lemma lem8084599 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1047 _143311 _143313 _143320 B clauses c x _106908) = (term1048 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (@lem8084598 _143313 B (term371 _143311 _143313 _143320 B clauses x c) (term1034 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084600 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term1049 _143311 _143313 _143320 B clauses x c s) = (term369 _143311 _143313 _143320 B s clauses x c).
Proof. exact (eq_refl (term1049 _143311 _143313 _143320 B clauses x c s)). Qed.
Lemma lem8084601 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term1050 _143311 _143313 _143320 B clauses x c) = (term371 _143311 _143313 _143320 B clauses x c).
Proof. exact (fun_ext (fun s : _143313 -> B => @lem8084600 _143311 _143313 _143320 B s clauses x c)). Qed.
Lemma lem8084602 {_143313 B : Type'} : (@ex (_143313 -> B)) = (@ex (_143313 -> B)).
Proof. exact (eq_refl (@ex (_143313 -> B))). Qed.
Lemma lem8084603 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term1051 _143311 _143313 _143320 B clauses x c) = (term373 _143311 _143313 _143320 B clauses x c).
Proof. exact (MK_COMB (@lem8084602 _143313 B) (@lem8084601 _143311 _143313 _143320 B clauses x c)). Qed.
Lemma lem8084604 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8084605 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term1052 _143311 _143313 _143320 B clauses x c) = (term218 _143311 _143313 _143320 B clauses x c).
Proof. exact (MK_COMB (@lem8084604) (@lem8084603 _143311 _143313 _143320 B clauses x c)). Qed.
Lemma lem8084606 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1034 _143311 _143313 _143320 B clauses c x _106908) = (term1034 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (eq_refl (term1034 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084607 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1047 _143311 _143313 _143320 B clauses c x _106908) = (term1044 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (MK_COMB (@lem8084605 _143311 _143313 _143320 B clauses x c) (@lem8084606 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084608 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8084609 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1053 _143311 _143313 _143320 B clauses c x _106908) = (term1054 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (MK_COMB (@lem8084608) (@lem8084607 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084610 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term1049 _143311 _143313 _143320 B clauses x c s) = (term369 _143311 _143313 _143320 B s clauses x c).
Proof. exact (eq_refl (term1049 _143311 _143313 _143320 B clauses x c s)). Qed.
Lemma lem8084611 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8084612 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term1055 _143311 _143313 _143320 B clauses x c s) = (term1056 _143311 _143313 _143320 B s clauses x c).
Proof. exact (MK_COMB (@lem8084611) (@lem8084610 _143311 _143313 _143320 B s clauses x c)). Qed.
Lemma lem8084613 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1034 _143311 _143313 _143320 B clauses c x _106908) = (term1034 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (eq_refl (term1034 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084614 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1057 _143311 _143313 _143320 B s clauses c x _106908) = (term1058 _143311 _143313 _143320 B s clauses c x _106908).
Proof. exact (MK_COMB (@lem8084612 _143311 _143313 _143320 B s clauses x c) (@lem8084613 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084615 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1059 _143311 _143313 _143320 B clauses c x _106908) = (term1060 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (fun_ext (fun s : _143313 -> B => @lem8084614 _143311 _143313 _143320 B s clauses c x _106908)). Qed.
Lemma lem8084616 {_143313 B : Type'} : (@ex (_143313 -> B)) = (@ex (_143313 -> B)).
Proof. exact (eq_refl (@ex (_143313 -> B))). Qed.
Lemma lem8084617 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1048 _143311 _143313 _143320 B clauses c x _106908) = (term1061 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (MK_COMB (@lem8084616 _143313 B) (@lem8084615 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084618 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : ((term1047 _143311 _143313 _143320 B clauses c x _106908) = (term1048 _143311 _143313 _143320 B clauses c x _106908)) = ((term1044 _143311 _143313 _143320 B clauses c x _106908) = (term1061 _143311 _143313 _143320 B clauses c x _106908)).
Proof. exact (MK_COMB (@lem8084609 _143311 _143313 _143320 B clauses c x _106908) (@lem8084617 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084619 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1044 _143311 _143313 _143320 B clauses c x _106908) = (term1061 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (EQ_MP (@lem8084618 _143311 _143313 _143320 B clauses c x _106908) (@lem8084599 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084621 {A : Type'} (P : A -> Prop) (Q : Prop) : (term714 A P Q) = (term715 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8084622 {_143311 _143313 _143320 : Type'} (P : type443 _143311 _143313 _143320) (Q : Prop) : (term733 _143311 _143313 _143320 P Q) = (term734 _143311 _143313 _143320 P Q).
Proof. exact (@lem8084621 (type1412 _143311 _143313 _143320) P Q). Qed.
Lemma lem8084623 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1062 _143311 _143313 _143320 B s clauses c x _106908) = (term1063 _143311 _143313 _143320 B s clauses c x _106908).
Proof. exact (@lem8084622 _143311 _143313 _143320 (term367 _143311 _143313 _143320 B s clauses x c) (term1034 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084624 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term1064 _143311 _143313 _143320 B s clauses x c t) = (term360 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (eq_refl (term1064 _143311 _143313 _143320 B s clauses x c t)). Qed.
Lemma lem8084625 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term1065 _143311 _143313 _143320 B s clauses x c) = (term367 _143311 _143313 _143320 B s clauses x c).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8084624 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8084626 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8084627 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term1066 _143311 _143313 _143320 B s clauses x c) = (term369 _143311 _143313 _143320 B s clauses x c).
Proof. exact (MK_COMB (@lem8084626 _143311 _143313 _143320) (@lem8084625 _143311 _143313 _143320 B s clauses x c)). Qed.
Lemma lem8084628 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8084629 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (c : _143311) : (term1067 _143311 _143313 _143320 B s clauses x c) = (term1056 _143311 _143313 _143320 B s clauses x c).
Proof. exact (MK_COMB (@lem8084628) (@lem8084627 _143311 _143313 _143320 B s clauses x c)). Qed.
Lemma lem8084630 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1034 _143311 _143313 _143320 B clauses c x _106908) = (term1034 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (eq_refl (term1034 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084631 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1062 _143311 _143313 _143320 B s clauses c x _106908) = (term1058 _143311 _143313 _143320 B s clauses c x _106908).
Proof. exact (MK_COMB (@lem8084629 _143311 _143313 _143320 B s clauses x c) (@lem8084630 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084632 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8084633 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1068 _143311 _143313 _143320 B s clauses c x _106908) = (term1069 _143311 _143313 _143320 B s clauses c x _106908).
Proof. exact (MK_COMB (@lem8084632) (@lem8084631 _143311 _143313 _143320 B s clauses c x _106908)). Qed.
Lemma lem8084634 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term1064 _143311 _143313 _143320 B s clauses x c t) = (term360 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (eq_refl (term1064 _143311 _143313 _143320 B s clauses x c t)). Qed.
Lemma lem8084635 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8084636 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term1070 _143311 _143313 _143320 B s clauses x c t) = (term1071 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (MK_COMB (@lem8084635) (@lem8084634 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8084637 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1034 _143311 _143313 _143320 B clauses c x _106908) = (term1034 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (eq_refl (term1034 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084638 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1072 _143311 _143313 _143320 B s t clauses c x _106908) = (term1073 _143311 _143313 _143320 B s t clauses c x _106908).
Proof. exact (MK_COMB (@lem8084636 _143311 _143313 _143320 B s clauses x t c) (@lem8084637 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084639 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1074 _143311 _143313 _143320 B s clauses c x _106908) = (term1075 _143311 _143313 _143320 B s clauses c x _106908).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8084638 _143311 _143313 _143320 B s t clauses c x _106908)). Qed.
Lemma lem8084640 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8084641 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1063 _143311 _143313 _143320 B s clauses c x _106908) = (term1076 _143311 _143313 _143320 B s clauses c x _106908).
Proof. exact (MK_COMB (@lem8084640 _143311 _143313 _143320) (@lem8084639 _143311 _143313 _143320 B s clauses c x _106908)). Qed.
Lemma lem8084642 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : ((term1062 _143311 _143313 _143320 B s clauses c x _106908) = (term1063 _143311 _143313 _143320 B s clauses c x _106908)) = ((term1058 _143311 _143313 _143320 B s clauses c x _106908) = (term1076 _143311 _143313 _143320 B s clauses c x _106908)).
Proof. exact (MK_COMB (@lem8084633 _143311 _143313 _143320 B s clauses c x _106908) (@lem8084641 _143311 _143313 _143320 B s clauses c x _106908)). Qed.
Lemma lem8084643 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1058 _143311 _143313 _143320 B s clauses c x _106908) = (term1076 _143311 _143313 _143320 B s clauses c x _106908).
Proof. exact (EQ_MP (@lem8084642 _143311 _143313 _143320 B s clauses c x _106908) (@lem8084623 _143311 _143313 _143320 B s clauses c x _106908)). Qed.
Lemma lem8084645 {A : Type'} (P : A -> Prop) (Q : Prop) : (term714 A P Q) = (term715 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8084646 {_143313 : Type'} (P : _143313 -> Prop) (Q : Prop) : (term714 _143313 P Q) = (term715 _143313 P Q).
Proof. exact (@lem8084645 _143313 P Q). Qed.
Lemma lem8084647 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1077 _143311 _143313 _143320 B s t clauses c x _106908) = (term1078 _143311 _143313 _143320 B s t clauses c x _106908).
Proof. exact (@lem8084646 _143313 (term359 _143311 _143313 _143320 B s clauses x t c) (term1034 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084648 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) (a : _143313) : (term1079 _143311 _143313 _143320 B s clauses x t c a) = (term357 _143311 _143313 _143320 B s clauses x t c a).
Proof. exact (eq_refl (term1079 _143311 _143313 _143320 B s clauses x t c a)). Qed.
Lemma lem8084649 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term1080 _143311 _143313 _143320 B s clauses x t c) = (term359 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (fun_ext (fun a : _143313 => @lem8084648 _143311 _143313 _143320 B s clauses x t c a)). Qed.
Lemma lem8084650 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8084651 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term1081 _143311 _143313 _143320 B s clauses x t c) = (term360 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (MK_COMB (@lem8084650 _143313) (@lem8084649 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8084652 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8084653 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) : (term1082 _143311 _143313 _143320 B s clauses x t c) = (term1071 _143311 _143313 _143320 B s clauses x t c).
Proof. exact (MK_COMB (@lem8084652) (@lem8084651 _143311 _143313 _143320 B s clauses x t c)). Qed.
Lemma lem8084654 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1034 _143311 _143313 _143320 B clauses c x _106908) = (term1034 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (eq_refl (term1034 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084655 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1077 _143311 _143313 _143320 B s t clauses c x _106908) = (term1073 _143311 _143313 _143320 B s t clauses c x _106908).
Proof. exact (MK_COMB (@lem8084653 _143311 _143313 _143320 B s clauses x t c) (@lem8084654 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084656 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8084657 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1083 _143311 _143313 _143320 B s t clauses c x _106908) = (term1084 _143311 _143313 _143320 B s t clauses c x _106908).
Proof. exact (MK_COMB (@lem8084656) (@lem8084655 _143311 _143313 _143320 B s t clauses c x _106908)). Qed.
Lemma lem8084658 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) (a : _143313) : (term1079 _143311 _143313 _143320 B s clauses x t c a) = (term357 _143311 _143313 _143320 B s clauses x t c a).
Proof. exact (eq_refl (term1079 _143311 _143313 _143320 B s clauses x t c a)). Qed.
Lemma lem8084659 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8084660 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (x : B) (t : type1412 _143311 _143313 _143320) (c : _143311) (a : _143313) : (term1085 _143311 _143313 _143320 B s clauses x t c a) = (term1086 _143311 _143313 _143320 B s clauses x t c a).
Proof. exact (MK_COMB (@lem8084659) (@lem8084658 _143311 _143313 _143320 B s clauses x t c a)). Qed.
Lemma lem8084661 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1034 _143311 _143313 _143320 B clauses c x _106908) = (term1034 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (eq_refl (term1034 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084662 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (t : type1412 _143311 _143313 _143320) (a : _143313) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1087 _143311 _143313 _143320 B s t a clauses c x _106908) = (term1088 _143311 _143313 _143320 B s t a clauses c x _106908).
Proof. exact (MK_COMB (@lem8084660 _143311 _143313 _143320 B s clauses x t c a) (@lem8084661 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084663 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1089 _143311 _143313 _143320 B s t clauses c x _106908) = (term1090 _143311 _143313 _143320 B s t clauses c x _106908).
Proof. exact (fun_ext (fun a : _143313 => @lem8084662 _143311 _143313 _143320 B s t a clauses c x _106908)). Qed.
Lemma lem8084664 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8084665 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1078 _143311 _143313 _143320 B s t clauses c x _106908) = (term1091 _143311 _143313 _143320 B s t clauses c x _106908).
Proof. exact (MK_COMB (@lem8084664 _143313) (@lem8084663 _143311 _143313 _143320 B s t clauses c x _106908)). Qed.
Lemma lem8084666 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : ((term1077 _143311 _143313 _143320 B s t clauses c x _106908) = (term1078 _143311 _143313 _143320 B s t clauses c x _106908)) = ((term1073 _143311 _143313 _143320 B s t clauses c x _106908) = (term1091 _143311 _143313 _143320 B s t clauses c x _106908)).
Proof. exact (MK_COMB (@lem8084657 _143311 _143313 _143320 B s t clauses c x _106908) (@lem8084665 _143311 _143313 _143320 B s t clauses c x _106908)). Qed.
Lemma lem8084667 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1073 _143311 _143313 _143320 B s t clauses c x _106908) = (term1091 _143311 _143313 _143320 B s t clauses c x _106908).
Proof. exact (EQ_MP (@lem8084666 _143311 _143313 _143320 B s t clauses c x _106908) (@lem8084647 _143311 _143313 _143320 B s t clauses c x _106908)). Qed.
Lemma lem8084668 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1075 _143311 _143313 _143320 B s clauses c x _106908) = (term1092 _143311 _143313 _143320 B s clauses c x _106908).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8084667 _143311 _143313 _143320 B s t clauses c x _106908)). Qed.
Lemma lem8084669 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8084670 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1076 _143311 _143313 _143320 B s clauses c x _106908) = (term1093 _143311 _143313 _143320 B s clauses c x _106908).
Proof. exact (MK_COMB (@lem8084669 _143311 _143313 _143320) (@lem8084668 _143311 _143313 _143320 B s clauses c x _106908)). Qed.
Lemma lem8084671 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1058 _143311 _143313 _143320 B s clauses c x _106908) = (term1093 _143311 _143313 _143320 B s clauses c x _106908).
Proof. exact (TRANS (@lem8084643 _143311 _143313 _143320 B s clauses c x _106908) (@lem8084670 _143311 _143313 _143320 B s clauses c x _106908)). Qed.
Lemma lem8084672 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1060 _143311 _143313 _143320 B clauses c x _106908) = (term1094 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (fun_ext (fun s : _143313 -> B => @lem8084671 _143311 _143313 _143320 B s clauses c x _106908)). Qed.
Lemma lem8084673 {_143313 B : Type'} : (@ex (_143313 -> B)) = (@ex (_143313 -> B)).
Proof. exact (eq_refl (@ex (_143313 -> B))). Qed.
Lemma lem8084674 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1061 _143311 _143313 _143320 B clauses c x _106908) = (term1095 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (MK_COMB (@lem8084673 _143313 B) (@lem8084672 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084675 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1044 _143311 _143313 _143320 B clauses c x _106908) = (term1095 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (TRANS (@lem8084619 _143311 _143313 _143320 B clauses c x _106908) (@lem8084674 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084676 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1035 _143311 _143313 _143320 B clauses c x _106908) = (term1095 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (TRANS (@lem8084595 _143311 _143313 _143320 B clauses c x _106908) (@lem8084675 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084677 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1036 _143311 _143313 _143320 B clauses c _106908) = (term1096 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (fun_ext (fun x : B => @lem8084676 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084678 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8084679 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1037 _143311 _143313 _143320 B clauses c _106908) = (term1097 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (MK_COMB (@lem8084678 B) (@lem8084677 _143311 _143313 _143320 B clauses c _106908)). Qed.
Lemma lem8084681 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8084682 {_143313 B : Type'} (P : type1446 _143313 B) : (term1098 _143313 B P) = (term1099 _143313 B P).
Proof. exact (@lem8084681 B (_143313 -> B) P). Qed.
Lemma lem8084683 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1100 _143311 _143313 _143320 B clauses c _106908) = (term1101 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (@lem8084682 _143313 B (term1102 _143311 _143313 _143320 B clauses c _106908)). Qed.
Lemma lem8084684 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1103 _143311 _143313 _143320 B clauses c _106908 x) = (term1094 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (eq_refl (term1103 _143311 _143313 _143320 B clauses c _106908 x)). Qed.
Lemma lem8084685 {_143313 B : Type'} (s : _143313 -> B) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8084686 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) (s : _143313 -> B) : (term1104 _143311 _143313 _143320 B clauses c _106908 x s) = (term1105 _143311 _143313 _143320 B clauses c x _106908 s).
Proof. exact (MK_COMB (@lem8084684 _143311 _143313 _143320 B clauses c x _106908) (@lem8084685 _143313 B s)). Qed.
Lemma lem8084687 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1105 _143311 _143313 _143320 B clauses c x _106908 s) = (term1093 _143311 _143313 _143320 B s clauses c x _106908).
Proof. exact (eq_refl (term1105 _143311 _143313 _143320 B clauses c x _106908 s)). Qed.
Lemma lem8084688 {_143311 _143313 _143320 B : Type'} (s : _143313 -> B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1104 _143311 _143313 _143320 B clauses c _106908 x s) = (term1093 _143311 _143313 _143320 B s clauses c x _106908).
Proof. exact (TRANS (@lem8084686 _143311 _143313 _143320 B clauses c x _106908 s) (@lem8084687 _143311 _143313 _143320 B s clauses c x _106908)). Qed.
Lemma lem8084689 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1106 _143311 _143313 _143320 B clauses c _106908 x) = (term1094 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (fun_ext (fun s : _143313 -> B => @lem8084688 _143311 _143313 _143320 B s clauses c x _106908)). Qed.
Lemma lem8084690 {_143313 B : Type'} : (@ex (_143313 -> B)) = (@ex (_143313 -> B)).
Proof. exact (eq_refl (@ex (_143313 -> B))). Qed.
Lemma lem8084691 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1107 _143311 _143313 _143320 B clauses c _106908 x) = (term1095 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (MK_COMB (@lem8084690 _143313 B) (@lem8084689 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084692 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1108 _143311 _143313 _143320 B clauses c _106908) = (term1096 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (fun_ext (fun x : B => @lem8084691 _143311 _143313 _143320 B clauses c x _106908)). Qed.
Lemma lem8084693 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8084694 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1100 _143311 _143313 _143320 B clauses c _106908) = (term1097 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (MK_COMB (@lem8084693 B) (@lem8084692 _143311 _143313 _143320 B clauses c _106908)). Qed.
Lemma lem8084695 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8084696 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1109 _143311 _143313 _143320 B clauses c _106908) = (term1110 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (MK_COMB (@lem8084695) (@lem8084694 _143311 _143313 _143320 B clauses c _106908)). Qed.
Lemma lem8084697 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1103 _143311 _143313 _143320 B clauses c _106908 x) = (term1094 _143311 _143313 _143320 B clauses c x _106908).
Proof. exact (eq_refl (term1103 _143311 _143313 _143320 B clauses c _106908 x)). Qed.
Lemma lem8084698 {_143313 B : Type'} (s : type1468 _143313 B) (x : B) : (s x) = (s x).
Proof. exact (eq_refl (s x)). Qed.
Lemma lem8084699 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) (s : type1468 _143313 B) (x : B) : (term1111 _143311 _143313 _143320 B clauses c _106908 s x) = (term1112 _143311 _143313 _143320 B clauses c _106908 s x).
Proof. exact (MK_COMB (@lem8084697 _143311 _143313 _143320 B clauses c x _106908) (@lem8084698 _143313 B s x)). Qed.
Lemma lem8084700 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1112 _143311 _143313 _143320 B clauses c _106908 s x) = (term1113 _143311 _143313 _143320 B s clauses c x _106908).
Proof. exact (eq_refl (term1112 _143311 _143313 _143320 B clauses c _106908 s x)). Qed.
Lemma lem8084701 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1111 _143311 _143313 _143320 B clauses c _106908 s x) = (term1113 _143311 _143313 _143320 B s clauses c x _106908).
Proof. exact (TRANS (@lem8084699 _143311 _143313 _143320 B clauses c _106908 s x) (@lem8084700 _143311 _143313 _143320 B s clauses c x _106908)). Qed.
Lemma lem8084702 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1114 _143311 _143313 _143320 B clauses c _106908 s) = (term1115 _143311 _143313 _143320 B s clauses c _106908).
Proof. exact (fun_ext (fun x : B => @lem8084701 _143311 _143313 _143320 B s clauses c x _106908)). Qed.
Lemma lem8084703 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8084704 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1116 _143311 _143313 _143320 B clauses c _106908 s) = (term1117 _143311 _143313 _143320 B s clauses c _106908).
Proof. exact (MK_COMB (@lem8084703 B) (@lem8084702 _143311 _143313 _143320 B s clauses c _106908)). Qed.
Lemma lem8084705 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1118 _143311 _143313 _143320 B clauses c _106908) = (term1119 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (fun_ext (fun s : type1468 _143313 B => @lem8084704 _143311 _143313 _143320 B s clauses c _106908)). Qed.
Lemma lem8084706 {_143313 B : Type'} : (@ex (B -> _143313 -> B)) = (@ex (B -> _143313 -> B)).
Proof. exact (eq_refl (@ex (B -> _143313 -> B))). Qed.
Lemma lem8084707 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1101 _143311 _143313 _143320 B clauses c _106908) = (term1120 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (MK_COMB (@lem8084706 _143313 B) (@lem8084705 _143311 _143313 _143320 B clauses c _106908)). Qed.
Lemma lem8084708 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : ((term1100 _143311 _143313 _143320 B clauses c _106908) = (term1101 _143311 _143313 _143320 B clauses c _106908)) = ((term1097 _143311 _143313 _143320 B clauses c _106908) = (term1120 _143311 _143313 _143320 B clauses c _106908)).
Proof. exact (MK_COMB (@lem8084696 _143311 _143313 _143320 B clauses c _106908) (@lem8084707 _143311 _143313 _143320 B clauses c _106908)). Qed.
Lemma lem8084709 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1097 _143311 _143313 _143320 B clauses c _106908) = (term1120 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (EQ_MP (@lem8084708 _143311 _143313 _143320 B clauses c _106908) (@lem8084683 _143311 _143313 _143320 B clauses c _106908)). Qed.
Lemma lem8084711 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8084712 {_143311 _143313 _143320 B : Type'} (P : type1522 _143311 _143313 _143320 B) : (term1121 _143311 _143313 _143320 B P) = (term1122 _143311 _143313 _143320 B P).
Proof. exact (@lem8084711 B (type1412 _143311 _143313 _143320) P). Qed.
Lemma lem8084713 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1123 _143311 _143313 _143320 B s clauses c _106908) = (term1124 _143311 _143313 _143320 B s clauses c _106908).
Proof. exact (@lem8084712 _143311 _143313 _143320 B (term1125 _143311 _143313 _143320 B s clauses c _106908)). Qed.
Lemma lem8084714 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1126 _143311 _143313 _143320 B s clauses c _106908 x) = (term1127 _143311 _143313 _143320 B s clauses c x _106908).
Proof. exact (eq_refl (term1126 _143311 _143313 _143320 B s clauses c _106908 x)). Qed.
Lemma lem8084715 {_143311 _143313 _143320 : Type'} (t : type1412 _143311 _143313 _143320) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8084716 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) (t : type1412 _143311 _143313 _143320) : (term1128 _143311 _143313 _143320 B s clauses c _106908 x t) = (term1129 _143311 _143313 _143320 B s clauses c x _106908 t).
Proof. exact (MK_COMB (@lem8084714 _143311 _143313 _143320 B s clauses c x _106908) (@lem8084715 _143311 _143313 _143320 t)). Qed.
Lemma lem8084717 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1129 _143311 _143313 _143320 B s clauses c x _106908 t) = (term1130 _143311 _143313 _143320 B s t clauses c x _106908).
Proof. exact (eq_refl (term1129 _143311 _143313 _143320 B s clauses c x _106908 t)). Qed.
Lemma lem8084718 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1412 _143311 _143313 _143320) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1128 _143311 _143313 _143320 B s clauses c _106908 x t) = (term1130 _143311 _143313 _143320 B s t clauses c x _106908).
Proof. exact (TRANS (@lem8084716 _143311 _143313 _143320 B s clauses c x _106908 t) (@lem8084717 _143311 _143313 _143320 B s t clauses c x _106908)). Qed.
Lemma lem8084719 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1131 _143311 _143313 _143320 B s clauses c _106908 x) = (term1127 _143311 _143313 _143320 B s clauses c x _106908).
Proof. exact (fun_ext (fun t : type1412 _143311 _143313 _143320 => @lem8084718 _143311 _143313 _143320 B s t clauses c x _106908)). Qed.
Lemma lem8084720 {_143311 _143313 _143320 : Type'} : (@ex (_143311 -> _143313 -> _143320)) = (@ex (_143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> _143313 -> _143320))). Qed.
Lemma lem8084721 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1132 _143311 _143313 _143320 B s clauses c _106908 x) = (term1113 _143311 _143313 _143320 B s clauses c x _106908).
Proof. exact (MK_COMB (@lem8084720 _143311 _143313 _143320) (@lem8084719 _143311 _143313 _143320 B s clauses c x _106908)). Qed.
Lemma lem8084722 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1133 _143311 _143313 _143320 B s clauses c _106908) = (term1115 _143311 _143313 _143320 B s clauses c _106908).
Proof. exact (fun_ext (fun x : B => @lem8084721 _143311 _143313 _143320 B s clauses c x _106908)). Qed.
Lemma lem8084723 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8084724 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1123 _143311 _143313 _143320 B s clauses c _106908) = (term1117 _143311 _143313 _143320 B s clauses c _106908).
Proof. exact (MK_COMB (@lem8084723 B) (@lem8084722 _143311 _143313 _143320 B s clauses c _106908)). Qed.
Lemma lem8084725 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8084726 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1134 _143311 _143313 _143320 B s clauses c _106908) = (term1135 _143311 _143313 _143320 B s clauses c _106908).
Proof. exact (MK_COMB (@lem8084725) (@lem8084724 _143311 _143313 _143320 B s clauses c _106908)). Qed.
Lemma lem8084727 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1126 _143311 _143313 _143320 B s clauses c _106908 x) = (term1127 _143311 _143313 _143320 B s clauses c x _106908).
Proof. exact (eq_refl (term1126 _143311 _143313 _143320 B s clauses c _106908 x)). Qed.
Lemma lem8084728 {_143311 _143313 _143320 B : Type'} (t : type1523 _143311 _143313 _143320 B) (x : B) : (t x) = (t x).
Proof. exact (eq_refl (t x)). Qed.
Lemma lem8084729 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) (t : type1523 _143311 _143313 _143320 B) (x : B) : (term1136 _143311 _143313 _143320 B s clauses c _106908 t x) = (term1137 _143311 _143313 _143320 B s clauses c _106908 t x).
Proof. exact (MK_COMB (@lem8084727 _143311 _143313 _143320 B s clauses c x _106908) (@lem8084728 _143311 _143313 _143320 B t x)). Qed.
Lemma lem8084730 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1137 _143311 _143313 _143320 B s clauses c _106908 t x) = (term1138 _143311 _143313 _143320 B s t clauses c x _106908).
Proof. exact (eq_refl (term1137 _143311 _143313 _143320 B s clauses c _106908 t x)). Qed.
Lemma lem8084731 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1136 _143311 _143313 _143320 B s clauses c _106908 t x) = (term1138 _143311 _143313 _143320 B s t clauses c x _106908).
Proof. exact (TRANS (@lem8084729 _143311 _143313 _143320 B s clauses c _106908 t x) (@lem8084730 _143311 _143313 _143320 B s t clauses c x _106908)). Qed.
Lemma lem8084732 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1139 _143311 _143313 _143320 B s clauses c _106908 t) = (term1140 _143311 _143313 _143320 B s t clauses c _106908).
Proof. exact (fun_ext (fun x : B => @lem8084731 _143311 _143313 _143320 B s t clauses c x _106908)). Qed.
Lemma lem8084733 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8084734 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1141 _143311 _143313 _143320 B s clauses c _106908 t) = (term1142 _143311 _143313 _143320 B s t clauses c _106908).
Proof. exact (MK_COMB (@lem8084733 B) (@lem8084732 _143311 _143313 _143320 B s t clauses c _106908)). Qed.
Lemma lem8084735 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1143 _143311 _143313 _143320 B s clauses c _106908) = (term1144 _143311 _143313 _143320 B s clauses c _106908).
Proof. exact (fun_ext (fun t : type1523 _143311 _143313 _143320 B => @lem8084734 _143311 _143313 _143320 B s t clauses c _106908)). Qed.
Lemma lem8084736 {_143311 _143313 _143320 B : Type'} : (@ex (B -> _143311 -> _143313 -> _143320)) = (@ex (B -> _143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (B -> _143311 -> _143313 -> _143320))). Qed.
Lemma lem8084737 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1124 _143311 _143313 _143320 B s clauses c _106908) = (term1145 _143311 _143313 _143320 B s clauses c _106908).
Proof. exact (MK_COMB (@lem8084736 _143311 _143313 _143320 B) (@lem8084735 _143311 _143313 _143320 B s clauses c _106908)). Qed.
Lemma lem8084738 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : ((term1123 _143311 _143313 _143320 B s clauses c _106908) = (term1124 _143311 _143313 _143320 B s clauses c _106908)) = ((term1117 _143311 _143313 _143320 B s clauses c _106908) = (term1145 _143311 _143313 _143320 B s clauses c _106908)).
Proof. exact (MK_COMB (@lem8084726 _143311 _143313 _143320 B s clauses c _106908) (@lem8084737 _143311 _143313 _143320 B s clauses c _106908)). Qed.
Lemma lem8084739 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1117 _143311 _143313 _143320 B s clauses c _106908) = (term1145 _143311 _143313 _143320 B s clauses c _106908).
Proof. exact (EQ_MP (@lem8084738 _143311 _143313 _143320 B s clauses c _106908) (@lem8084713 _143311 _143313 _143320 B s clauses c _106908)). Qed.
Lemma lem8084741 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8084742 {_143313 B : Type'} (P : type1470 _143313 B) : (term1146 _143313 B P) = (term1147 _143313 B P).
Proof. exact (@lem8084741 B _143313 P). Qed.
Lemma lem8084743 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1148 _143311 _143313 _143320 B s t clauses c _106908) = (term1149 _143311 _143313 _143320 B s t clauses c _106908).
Proof. exact (@lem8084742 _143313 B (term1150 _143311 _143313 _143320 B s t clauses c _106908)). Qed.
Lemma lem8084744 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1151 _143311 _143313 _143320 B s t clauses c _106908 x) = (term1152 _143311 _143313 _143320 B s t clauses c x _106908).
Proof. exact (eq_refl (term1151 _143311 _143313 _143320 B s t clauses c _106908 x)). Qed.
Lemma lem8084745 {_143313 : Type'} (a : _143313) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8084746 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) (a : _143313) : (term1153 _143311 _143313 _143320 B s t clauses c _106908 x a) = (term1154 _143311 _143313 _143320 B s t clauses c x _106908 a).
Proof. exact (MK_COMB (@lem8084744 _143311 _143313 _143320 B s t clauses c x _106908) (@lem8084745 _143313 a)). Qed.
Lemma lem8084747 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (a : _143313) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1154 _143311 _143313 _143320 B s t clauses c x _106908 a) = (term1155 _143311 _143313 _143320 B s t a clauses c x _106908).
Proof. exact (eq_refl (term1154 _143311 _143313 _143320 B s t clauses c x _106908 a)). Qed.
Lemma lem8084748 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (a : _143313) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1153 _143311 _143313 _143320 B s t clauses c _106908 x a) = (term1155 _143311 _143313 _143320 B s t a clauses c x _106908).
Proof. exact (TRANS (@lem8084746 _143311 _143313 _143320 B s t clauses c x _106908 a) (@lem8084747 _143311 _143313 _143320 B s t a clauses c x _106908)). Qed.
Lemma lem8084749 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1156 _143311 _143313 _143320 B s t clauses c _106908 x) = (term1152 _143311 _143313 _143320 B s t clauses c x _106908).
Proof. exact (fun_ext (fun a : _143313 => @lem8084748 _143311 _143313 _143320 B s t a clauses c x _106908)). Qed.
Lemma lem8084750 {_143313 : Type'} : (@ex _143313) = (@ex _143313).
Proof. exact (eq_refl (@ex _143313)). Qed.
Lemma lem8084751 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1157 _143311 _143313 _143320 B s t clauses c _106908 x) = (term1138 _143311 _143313 _143320 B s t clauses c x _106908).
Proof. exact (MK_COMB (@lem8084750 _143313) (@lem8084749 _143311 _143313 _143320 B s t clauses c x _106908)). Qed.
Lemma lem8084752 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1158 _143311 _143313 _143320 B s t clauses c _106908) = (term1140 _143311 _143313 _143320 B s t clauses c _106908).
Proof. exact (fun_ext (fun x : B => @lem8084751 _143311 _143313 _143320 B s t clauses c x _106908)). Qed.
Lemma lem8084753 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8084754 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1148 _143311 _143313 _143320 B s t clauses c _106908) = (term1142 _143311 _143313 _143320 B s t clauses c _106908).
Proof. exact (MK_COMB (@lem8084753 B) (@lem8084752 _143311 _143313 _143320 B s t clauses c _106908)). Qed.
Lemma lem8084755 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8084756 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1159 _143311 _143313 _143320 B s t clauses c _106908) = (term1160 _143311 _143313 _143320 B s t clauses c _106908).
Proof. exact (MK_COMB (@lem8084755) (@lem8084754 _143311 _143313 _143320 B s t clauses c _106908)). Qed.
Lemma lem8084757 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1151 _143311 _143313 _143320 B s t clauses c _106908 x) = (term1152 _143311 _143313 _143320 B s t clauses c x _106908).
Proof. exact (eq_refl (term1151 _143311 _143313 _143320 B s t clauses c _106908 x)). Qed.
Lemma lem8084758 {_143313 B : Type'} (a : B -> _143313) (x : B) : (a x) = (a x).
Proof. exact (eq_refl (a x)). Qed.
Lemma lem8084759 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) (a : B -> _143313) (x : B) : (term1161 _143311 _143313 _143320 B s t clauses c _106908 a x) = (term1162 _143311 _143313 _143320 B s t clauses c _106908 a x).
Proof. exact (MK_COMB (@lem8084757 _143311 _143313 _143320 B s t clauses c x _106908) (@lem8084758 _143313 B a x)). Qed.
Lemma lem8084760 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (a : B -> _143313) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1162 _143311 _143313 _143320 B s t clauses c _106908 a x) = (term1163 _143311 _143313 _143320 B s t a clauses c x _106908).
Proof. exact (eq_refl (term1162 _143311 _143313 _143320 B s t clauses c _106908 a x)). Qed.
Lemma lem8084761 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (a : B -> _143313) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (x : B) (_106908 : _143320) : (term1161 _143311 _143313 _143320 B s t clauses c _106908 a x) = (term1163 _143311 _143313 _143320 B s t a clauses c x _106908).
Proof. exact (TRANS (@lem8084759 _143311 _143313 _143320 B s t clauses c _106908 a x) (@lem8084760 _143311 _143313 _143320 B s t a clauses c x _106908)). Qed.
Lemma lem8084762 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (a : B -> _143313) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1164 _143311 _143313 _143320 B s t clauses c _106908 a) = (term1165 _143311 _143313 _143320 B s t a clauses c _106908).
Proof. exact (fun_ext (fun x : B => @lem8084761 _143311 _143313 _143320 B s t a clauses c x _106908)). Qed.
Lemma lem8084763 {B : Type'} : (@all B) = (@all B).
Proof. exact (eq_refl (@all B)). Qed.
Lemma lem8084764 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (a : B -> _143313) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1166 _143311 _143313 _143320 B s t clauses c _106908 a) = (term1167 _143311 _143313 _143320 B s t a clauses c _106908).
Proof. exact (MK_COMB (@lem8084763 B) (@lem8084762 _143311 _143313 _143320 B s t a clauses c _106908)). Qed.
Lemma lem8084765 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1168 _143311 _143313 _143320 B s t clauses c _106908) = (term1169 _143311 _143313 _143320 B s t clauses c _106908).
Proof. exact (fun_ext (fun a : B -> _143313 => @lem8084764 _143311 _143313 _143320 B s t a clauses c _106908)). Qed.
Lemma lem8084766 {_143313 B : Type'} : (@ex (B -> _143313)) = (@ex (B -> _143313)).
Proof. exact (eq_refl (@ex (B -> _143313))). Qed.
Lemma lem8084767 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1149 _143311 _143313 _143320 B s t clauses c _106908) = (term1170 _143311 _143313 _143320 B s t clauses c _106908).
Proof. exact (MK_COMB (@lem8084766 _143313 B) (@lem8084765 _143311 _143313 _143320 B s t clauses c _106908)). Qed.
Lemma lem8084768 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : ((term1148 _143311 _143313 _143320 B s t clauses c _106908) = (term1149 _143311 _143313 _143320 B s t clauses c _106908)) = ((term1142 _143311 _143313 _143320 B s t clauses c _106908) = (term1170 _143311 _143313 _143320 B s t clauses c _106908)).
Proof. exact (MK_COMB (@lem8084756 _143311 _143313 _143320 B s t clauses c _106908) (@lem8084767 _143311 _143313 _143320 B s t clauses c _106908)). Qed.
Lemma lem8084769 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (t : type1523 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1142 _143311 _143313 _143320 B s t clauses c _106908) = (term1170 _143311 _143313 _143320 B s t clauses c _106908).
Proof. exact (EQ_MP (@lem8084768 _143311 _143313 _143320 B s t clauses c _106908) (@lem8084743 _143311 _143313 _143320 B s t clauses c _106908)). Qed.
Lemma lem8084770 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1144 _143311 _143313 _143320 B s clauses c _106908) = (term1171 _143311 _143313 _143320 B s clauses c _106908).
Proof. exact (fun_ext (fun t : type1523 _143311 _143313 _143320 B => @lem8084769 _143311 _143313 _143320 B s t clauses c _106908)). Qed.
Lemma lem8084771 {_143311 _143313 _143320 B : Type'} : (@ex (B -> _143311 -> _143313 -> _143320)) = (@ex (B -> _143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (B -> _143311 -> _143313 -> _143320))). Qed.
Lemma lem8084772 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1145 _143311 _143313 _143320 B s clauses c _106908) = (term1172 _143311 _143313 _143320 B s clauses c _106908).
Proof. exact (MK_COMB (@lem8084771 _143311 _143313 _143320 B) (@lem8084770 _143311 _143313 _143320 B s clauses c _106908)). Qed.
Lemma lem8084773 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1117 _143311 _143313 _143320 B s clauses c _106908) = (term1172 _143311 _143313 _143320 B s clauses c _106908).
Proof. exact (TRANS (@lem8084739 _143311 _143313 _143320 B s clauses c _106908) (@lem8084772 _143311 _143313 _143320 B s clauses c _106908)). Qed.
Lemma lem8084774 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1119 _143311 _143313 _143320 B clauses c _106908) = (term1173 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (fun_ext (fun s : type1468 _143313 B => @lem8084773 _143311 _143313 _143320 B s clauses c _106908)). Qed.
Lemma lem8084775 {_143313 B : Type'} : (@ex (B -> _143313 -> B)) = (@ex (B -> _143313 -> B)).
Proof. exact (eq_refl (@ex (B -> _143313 -> B))). Qed.
Lemma lem8084776 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1120 _143311 _143313 _143320 B clauses c _106908) = (term1174 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (MK_COMB (@lem8084775 _143313 B) (@lem8084774 _143311 _143313 _143320 B clauses c _106908)). Qed.
Lemma lem8084777 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1097 _143311 _143313 _143320 B clauses c _106908) = (term1174 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (TRANS (@lem8084709 _143311 _143313 _143320 B clauses c _106908) (@lem8084776 _143311 _143313 _143320 B clauses c _106908)). Qed.
Lemma lem8084778 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1037 _143311 _143313 _143320 B clauses c _106908) = (term1174 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (TRANS (@lem8084679 _143311 _143313 _143320 B clauses c _106908) (@lem8084777 _143311 _143313 _143320 B clauses c _106908)). Qed.
Lemma lem8084779 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1038 _143311 _143313 _143320 B clauses _106908) = (term1175 _143311 _143313 _143320 B clauses _106908).
Proof. exact (fun_ext (fun c : _143311 => @lem8084778 _143311 _143313 _143320 B clauses c _106908)). Qed.
Lemma lem8084780 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8084781 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1039 _143311 _143313 _143320 B clauses _106908) = (term1176 _143311 _143313 _143320 B clauses _106908).
Proof. exact (MK_COMB (@lem8084780 _143311) (@lem8084779 _143311 _143313 _143320 B clauses _106908)). Qed.
Lemma lem8084783 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8084784 {_143311 _143313 B : Type'} (P : type1375 _143311 _143313 B) : (term1177 _143311 _143313 B P) = (term1178 _143311 _143313 B P).
Proof. exact (@lem8084783 _143311 (type1468 _143313 B) P). Qed.
Lemma lem8084785 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1179 _143311 _143313 _143320 B clauses _106908) = (term1180 _143311 _143313 _143320 B clauses _106908).
Proof. exact (@lem8084784 _143311 _143313 B (term1181 _143311 _143313 _143320 B clauses _106908)). Qed.
Lemma lem8084786 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1182 _143311 _143313 _143320 B clauses _106908 c) = (term1173 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (eq_refl (term1182 _143311 _143313 _143320 B clauses _106908 c)). Qed.
Lemma lem8084787 {_143313 B : Type'} (s : type1468 _143313 B) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8084788 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) (s : type1468 _143313 B) : (term1183 _143311 _143313 _143320 B clauses _106908 c s) = (term1184 _143311 _143313 _143320 B clauses c _106908 s).
Proof. exact (MK_COMB (@lem8084786 _143311 _143313 _143320 B clauses c _106908) (@lem8084787 _143313 B s)). Qed.
Lemma lem8084789 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1184 _143311 _143313 _143320 B clauses c _106908 s) = (term1172 _143311 _143313 _143320 B s clauses c _106908).
Proof. exact (eq_refl (term1184 _143311 _143313 _143320 B clauses c _106908 s)). Qed.
Lemma lem8084790 {_143311 _143313 _143320 B : Type'} (s : type1468 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1183 _143311 _143313 _143320 B clauses _106908 c s) = (term1172 _143311 _143313 _143320 B s clauses c _106908).
Proof. exact (TRANS (@lem8084788 _143311 _143313 _143320 B clauses c _106908 s) (@lem8084789 _143311 _143313 _143320 B s clauses c _106908)). Qed.
Lemma lem8084791 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1185 _143311 _143313 _143320 B clauses _106908 c) = (term1173 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (fun_ext (fun s : type1468 _143313 B => @lem8084790 _143311 _143313 _143320 B s clauses c _106908)). Qed.
Lemma lem8084792 {_143313 B : Type'} : (@ex (B -> _143313 -> B)) = (@ex (B -> _143313 -> B)).
Proof. exact (eq_refl (@ex (B -> _143313 -> B))). Qed.
Lemma lem8084793 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1186 _143311 _143313 _143320 B clauses _106908 c) = (term1174 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (MK_COMB (@lem8084792 _143313 B) (@lem8084791 _143311 _143313 _143320 B clauses c _106908)). Qed.
Lemma lem8084794 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1187 _143311 _143313 _143320 B clauses _106908) = (term1175 _143311 _143313 _143320 B clauses _106908).
Proof. exact (fun_ext (fun c : _143311 => @lem8084793 _143311 _143313 _143320 B clauses c _106908)). Qed.
Lemma lem8084795 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8084796 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1179 _143311 _143313 _143320 B clauses _106908) = (term1176 _143311 _143313 _143320 B clauses _106908).
Proof. exact (MK_COMB (@lem8084795 _143311) (@lem8084794 _143311 _143313 _143320 B clauses _106908)). Qed.
Lemma lem8084797 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8084798 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1188 _143311 _143313 _143320 B clauses _106908) = (term1189 _143311 _143313 _143320 B clauses _106908).
Proof. exact (MK_COMB (@lem8084797) (@lem8084796 _143311 _143313 _143320 B clauses _106908)). Qed.
Lemma lem8084799 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1182 _143311 _143313 _143320 B clauses _106908 c) = (term1173 _143311 _143313 _143320 B clauses c _106908).
Proof. exact (eq_refl (term1182 _143311 _143313 _143320 B clauses _106908 c)). Qed.
Lemma lem8084800 {_143311 _143313 B : Type'} (s : type1417 _143311 _143313 B) (c : _143311) : (s c) = (s c).
Proof. exact (eq_refl (s c)). Qed.
Lemma lem8084801 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) (s : type1417 _143311 _143313 B) (c : _143311) : (term1190 _143311 _143313 _143320 B clauses _106908 s c) = (term1191 _143311 _143313 _143320 B clauses _106908 s c).
Proof. exact (MK_COMB (@lem8084799 _143311 _143313 _143320 B clauses c _106908) (@lem8084800 _143311 _143313 B s c)). Qed.
Lemma lem8084802 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1191 _143311 _143313 _143320 B clauses _106908 s c) = (term1192 _143311 _143313 _143320 B s clauses c _106908).
Proof. exact (eq_refl (term1191 _143311 _143313 _143320 B clauses _106908 s c)). Qed.
Lemma lem8084803 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1190 _143311 _143313 _143320 B clauses _106908 s c) = (term1192 _143311 _143313 _143320 B s clauses c _106908).
Proof. exact (TRANS (@lem8084801 _143311 _143313 _143320 B clauses _106908 s c) (@lem8084802 _143311 _143313 _143320 B s clauses c _106908)). Qed.
Lemma lem8084804 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1193 _143311 _143313 _143320 B clauses _106908 s) = (term1194 _143311 _143313 _143320 B s clauses _106908).
Proof. exact (fun_ext (fun c : _143311 => @lem8084803 _143311 _143313 _143320 B s clauses c _106908)). Qed.
Lemma lem8084805 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8084806 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1195 _143311 _143313 _143320 B clauses _106908 s) = (term1196 _143311 _143313 _143320 B s clauses _106908).
Proof. exact (MK_COMB (@lem8084805 _143311) (@lem8084804 _143311 _143313 _143320 B s clauses _106908)). Qed.
Lemma lem8084807 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1197 _143311 _143313 _143320 B clauses _106908) = (term1198 _143311 _143313 _143320 B clauses _106908).
Proof. exact (fun_ext (fun s : type1417 _143311 _143313 B => @lem8084806 _143311 _143313 _143320 B s clauses _106908)). Qed.
Lemma lem8084808 {_143311 _143313 B : Type'} : (@ex (_143311 -> B -> _143313 -> B)) = (@ex (_143311 -> B -> _143313 -> B)).
Proof. exact (eq_refl (@ex (_143311 -> B -> _143313 -> B))). Qed.
Lemma lem8084809 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1180 _143311 _143313 _143320 B clauses _106908) = (term1199 _143311 _143313 _143320 B clauses _106908).
Proof. exact (MK_COMB (@lem8084808 _143311 _143313 B) (@lem8084807 _143311 _143313 _143320 B clauses _106908)). Qed.
Lemma lem8084810 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : ((term1179 _143311 _143313 _143320 B clauses _106908) = (term1180 _143311 _143313 _143320 B clauses _106908)) = ((term1176 _143311 _143313 _143320 B clauses _106908) = (term1199 _143311 _143313 _143320 B clauses _106908)).
Proof. exact (MK_COMB (@lem8084798 _143311 _143313 _143320 B clauses _106908) (@lem8084809 _143311 _143313 _143320 B clauses _106908)). Qed.
Lemma lem8084811 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1176 _143311 _143313 _143320 B clauses _106908) = (term1199 _143311 _143313 _143320 B clauses _106908).
Proof. exact (EQ_MP (@lem8084810 _143311 _143313 _143320 B clauses _106908) (@lem8084785 _143311 _143313 _143320 B clauses _106908)). Qed.
Lemma lem8084813 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8084814 {_143311 _143313 _143320 B : Type'} (P : type1378 _143311 _143313 _143320 B) : (term1200 _143311 _143313 _143320 B P) = (term1201 _143311 _143313 _143320 B P).
Proof. exact (@lem8084813 _143311 (type1523 _143311 _143313 _143320 B) P). Qed.
Lemma lem8084815 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1202 _143311 _143313 _143320 B s clauses _106908) = (term1203 _143311 _143313 _143320 B s clauses _106908).
Proof. exact (@lem8084814 _143311 _143313 _143320 B (term1204 _143311 _143313 _143320 B s clauses _106908)). Qed.
Lemma lem8084816 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1205 _143311 _143313 _143320 B s clauses _106908 c) = (term1206 _143311 _143313 _143320 B s clauses c _106908).
Proof. exact (eq_refl (term1205 _143311 _143313 _143320 B s clauses _106908 c)). Qed.
Lemma lem8084817 {_143311 _143313 _143320 B : Type'} (t : type1523 _143311 _143313 _143320 B) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8084818 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) (t : type1523 _143311 _143313 _143320 B) : (term1207 _143311 _143313 _143320 B s clauses _106908 c t) = (term1208 _143311 _143313 _143320 B s clauses c _106908 t).
Proof. exact (MK_COMB (@lem8084816 _143311 _143313 _143320 B s clauses c _106908) (@lem8084817 _143311 _143313 _143320 B t)). Qed.
Lemma lem8084819 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1523 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1208 _143311 _143313 _143320 B s clauses c _106908 t) = (term1209 _143311 _143313 _143320 B s t clauses c _106908).
Proof. exact (eq_refl (term1208 _143311 _143313 _143320 B s clauses c _106908 t)). Qed.
Lemma lem8084820 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1523 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1207 _143311 _143313 _143320 B s clauses _106908 c t) = (term1209 _143311 _143313 _143320 B s t clauses c _106908).
Proof. exact (TRANS (@lem8084818 _143311 _143313 _143320 B s clauses c _106908 t) (@lem8084819 _143311 _143313 _143320 B s t clauses c _106908)). Qed.
Lemma lem8084821 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1210 _143311 _143313 _143320 B s clauses _106908 c) = (term1206 _143311 _143313 _143320 B s clauses c _106908).
Proof. exact (fun_ext (fun t : type1523 _143311 _143313 _143320 B => @lem8084820 _143311 _143313 _143320 B s t clauses c _106908)). Qed.
Lemma lem8084822 {_143311 _143313 _143320 B : Type'} : (@ex (B -> _143311 -> _143313 -> _143320)) = (@ex (B -> _143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (B -> _143311 -> _143313 -> _143320))). Qed.
Lemma lem8084823 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1211 _143311 _143313 _143320 B s clauses _106908 c) = (term1192 _143311 _143313 _143320 B s clauses c _106908).
Proof. exact (MK_COMB (@lem8084822 _143311 _143313 _143320 B) (@lem8084821 _143311 _143313 _143320 B s clauses c _106908)). Qed.
Lemma lem8084824 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1212 _143311 _143313 _143320 B s clauses _106908) = (term1194 _143311 _143313 _143320 B s clauses _106908).
Proof. exact (fun_ext (fun c : _143311 => @lem8084823 _143311 _143313 _143320 B s clauses c _106908)). Qed.
Lemma lem8084825 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8084826 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1202 _143311 _143313 _143320 B s clauses _106908) = (term1196 _143311 _143313 _143320 B s clauses _106908).
Proof. exact (MK_COMB (@lem8084825 _143311) (@lem8084824 _143311 _143313 _143320 B s clauses _106908)). Qed.
Lemma lem8084827 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8084828 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1213 _143311 _143313 _143320 B s clauses _106908) = (term1214 _143311 _143313 _143320 B s clauses _106908).
Proof. exact (MK_COMB (@lem8084827) (@lem8084826 _143311 _143313 _143320 B s clauses _106908)). Qed.
Lemma lem8084829 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1205 _143311 _143313 _143320 B s clauses _106908 c) = (term1206 _143311 _143313 _143320 B s clauses c _106908).
Proof. exact (eq_refl (term1205 _143311 _143313 _143320 B s clauses _106908 c)). Qed.
Lemma lem8084830 {_143311 _143313 _143320 B : Type'} (t : type1420 _143311 _143313 _143320 B) (c : _143311) : (t c) = (t c).
Proof. exact (eq_refl (t c)). Qed.
Lemma lem8084831 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) (t : type1420 _143311 _143313 _143320 B) (c : _143311) : (term1215 _143311 _143313 _143320 B s clauses _106908 t c) = (term1216 _143311 _143313 _143320 B s clauses _106908 t c).
Proof. exact (MK_COMB (@lem8084829 _143311 _143313 _143320 B s clauses c _106908) (@lem8084830 _143311 _143313 _143320 B t c)). Qed.
Lemma lem8084832 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1216 _143311 _143313 _143320 B s clauses _106908 t c) = (term1217 _143311 _143313 _143320 B s t clauses c _106908).
Proof. exact (eq_refl (term1216 _143311 _143313 _143320 B s clauses _106908 t c)). Qed.
Lemma lem8084833 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1215 _143311 _143313 _143320 B s clauses _106908 t c) = (term1217 _143311 _143313 _143320 B s t clauses c _106908).
Proof. exact (TRANS (@lem8084831 _143311 _143313 _143320 B s clauses _106908 t c) (@lem8084832 _143311 _143313 _143320 B s t clauses c _106908)). Qed.
Lemma lem8084834 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1218 _143311 _143313 _143320 B s clauses _106908 t) = (term1219 _143311 _143313 _143320 B s t clauses _106908).
Proof. exact (fun_ext (fun c : _143311 => @lem8084833 _143311 _143313 _143320 B s t clauses c _106908)). Qed.
Lemma lem8084835 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8084836 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1220 _143311 _143313 _143320 B s clauses _106908 t) = (term1221 _143311 _143313 _143320 B s t clauses _106908).
Proof. exact (MK_COMB (@lem8084835 _143311) (@lem8084834 _143311 _143313 _143320 B s t clauses _106908)). Qed.
Lemma lem8084837 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1222 _143311 _143313 _143320 B s clauses _106908) = (term1223 _143311 _143313 _143320 B s clauses _106908).
Proof. exact (fun_ext (fun t : type1420 _143311 _143313 _143320 B => @lem8084836 _143311 _143313 _143320 B s t clauses _106908)). Qed.
Lemma lem8084838 {_143311 _143313 _143320 B : Type'} : (@ex (_143311 -> B -> _143311 -> _143313 -> _143320)) = (@ex (_143311 -> B -> _143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> B -> _143311 -> _143313 -> _143320))). Qed.
Lemma lem8084839 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1203 _143311 _143313 _143320 B s clauses _106908) = (term1224 _143311 _143313 _143320 B s clauses _106908).
Proof. exact (MK_COMB (@lem8084838 _143311 _143313 _143320 B) (@lem8084837 _143311 _143313 _143320 B s clauses _106908)). Qed.
Lemma lem8084840 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : ((term1202 _143311 _143313 _143320 B s clauses _106908) = (term1203 _143311 _143313 _143320 B s clauses _106908)) = ((term1196 _143311 _143313 _143320 B s clauses _106908) = (term1224 _143311 _143313 _143320 B s clauses _106908)).
Proof. exact (MK_COMB (@lem8084828 _143311 _143313 _143320 B s clauses _106908) (@lem8084839 _143311 _143313 _143320 B s clauses _106908)). Qed.
Lemma lem8084841 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1196 _143311 _143313 _143320 B s clauses _106908) = (term1224 _143311 _143313 _143320 B s clauses _106908).
Proof. exact (EQ_MP (@lem8084840 _143311 _143313 _143320 B s clauses _106908) (@lem8084815 _143311 _143313 _143320 B s clauses _106908)). Qed.
Lemma lem8084843 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8084844 {_143311 _143313 B : Type'} (P : type1377 _143311 _143313 B) : (term1225 _143311 _143313 B P) = (term1226 _143311 _143313 B P).
Proof. exact (@lem8084843 _143311 (B -> _143313) P). Qed.
Lemma lem8084845 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1227 _143311 _143313 _143320 B s t clauses _106908) = (term1228 _143311 _143313 _143320 B s t clauses _106908).
Proof. exact (@lem8084844 _143311 _143313 B (term1229 _143311 _143313 _143320 B s t clauses _106908)). Qed.
Lemma lem8084846 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1230 _143311 _143313 _143320 B s t clauses _106908 c) = (term1231 _143311 _143313 _143320 B s t clauses c _106908).
Proof. exact (eq_refl (term1230 _143311 _143313 _143320 B s t clauses _106908 c)). Qed.
Lemma lem8084847 {_143313 B : Type'} (a : B -> _143313) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8084848 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) (a : B -> _143313) : (term1232 _143311 _143313 _143320 B s t clauses _106908 c a) = (term1233 _143311 _143313 _143320 B s t clauses c _106908 a).
Proof. exact (MK_COMB (@lem8084846 _143311 _143313 _143320 B s t clauses c _106908) (@lem8084847 _143313 B a)). Qed.
Lemma lem8084849 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (a : B -> _143313) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1233 _143311 _143313 _143320 B s t clauses c _106908 a) = (term1234 _143311 _143313 _143320 B s t a clauses c _106908).
Proof. exact (eq_refl (term1233 _143311 _143313 _143320 B s t clauses c _106908 a)). Qed.
Lemma lem8084850 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (a : B -> _143313) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1232 _143311 _143313 _143320 B s t clauses _106908 c a) = (term1234 _143311 _143313 _143320 B s t a clauses c _106908).
Proof. exact (TRANS (@lem8084848 _143311 _143313 _143320 B s t clauses c _106908 a) (@lem8084849 _143311 _143313 _143320 B s t a clauses c _106908)). Qed.
Lemma lem8084851 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1235 _143311 _143313 _143320 B s t clauses _106908 c) = (term1231 _143311 _143313 _143320 B s t clauses c _106908).
Proof. exact (fun_ext (fun a : B -> _143313 => @lem8084850 _143311 _143313 _143320 B s t a clauses c _106908)). Qed.
Lemma lem8084852 {_143313 B : Type'} : (@ex (B -> _143313)) = (@ex (B -> _143313)).
Proof. exact (eq_refl (@ex (B -> _143313))). Qed.
Lemma lem8084853 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1236 _143311 _143313 _143320 B s t clauses _106908 c) = (term1217 _143311 _143313 _143320 B s t clauses c _106908).
Proof. exact (MK_COMB (@lem8084852 _143313 B) (@lem8084851 _143311 _143313 _143320 B s t clauses c _106908)). Qed.
Lemma lem8084854 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1237 _143311 _143313 _143320 B s t clauses _106908) = (term1219 _143311 _143313 _143320 B s t clauses _106908).
Proof. exact (fun_ext (fun c : _143311 => @lem8084853 _143311 _143313 _143320 B s t clauses c _106908)). Qed.
Lemma lem8084855 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8084856 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1227 _143311 _143313 _143320 B s t clauses _106908) = (term1221 _143311 _143313 _143320 B s t clauses _106908).
Proof. exact (MK_COMB (@lem8084855 _143311) (@lem8084854 _143311 _143313 _143320 B s t clauses _106908)). Qed.
Lemma lem8084857 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8084858 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1238 _143311 _143313 _143320 B s t clauses _106908) = (term1239 _143311 _143313 _143320 B s t clauses _106908).
Proof. exact (MK_COMB (@lem8084857) (@lem8084856 _143311 _143313 _143320 B s t clauses _106908)). Qed.
Lemma lem8084859 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1230 _143311 _143313 _143320 B s t clauses _106908 c) = (term1231 _143311 _143313 _143320 B s t clauses c _106908).
Proof. exact (eq_refl (term1230 _143311 _143313 _143320 B s t clauses _106908 c)). Qed.
Lemma lem8084860 {_143311 _143313 B : Type'} (a : type1419 _143311 _143313 B) (c : _143311) : (a c) = (a c).
Proof. exact (eq_refl (a c)). Qed.
Lemma lem8084861 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) (a : type1419 _143311 _143313 B) (c : _143311) : (term1240 _143311 _143313 _143320 B s t clauses _106908 a c) = (term1241 _143311 _143313 _143320 B s t clauses _106908 a c).
Proof. exact (MK_COMB (@lem8084859 _143311 _143313 _143320 B s t clauses c _106908) (@lem8084860 _143311 _143313 B a c)). Qed.
Lemma lem8084862 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (a : type1419 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1241 _143311 _143313 _143320 B s t clauses _106908 a c) = (term1242 _143311 _143313 _143320 B s t a clauses c _106908).
Proof. exact (eq_refl (term1241 _143311 _143313 _143320 B s t clauses _106908 a c)). Qed.
Lemma lem8084863 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (a : type1419 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (c : _143311) (_106908 : _143320) : (term1240 _143311 _143313 _143320 B s t clauses _106908 a c) = (term1242 _143311 _143313 _143320 B s t a clauses c _106908).
Proof. exact (TRANS (@lem8084861 _143311 _143313 _143320 B s t clauses _106908 a c) (@lem8084862 _143311 _143313 _143320 B s t a clauses c _106908)). Qed.
Lemma lem8084864 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (a : type1419 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1243 _143311 _143313 _143320 B s t clauses _106908 a) = (term1244 _143311 _143313 _143320 B s t a clauses _106908).
Proof. exact (fun_ext (fun c : _143311 => @lem8084863 _143311 _143313 _143320 B s t a clauses c _106908)). Qed.
Lemma lem8084865 {_143311 : Type'} : (@all _143311) = (@all _143311).
Proof. exact (eq_refl (@all _143311)). Qed.
Lemma lem8084866 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (a : type1419 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1245 _143311 _143313 _143320 B s t clauses _106908 a) = (term1246 _143311 _143313 _143320 B s t a clauses _106908).
Proof. exact (MK_COMB (@lem8084865 _143311) (@lem8084864 _143311 _143313 _143320 B s t a clauses _106908)). Qed.
Lemma lem8084867 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1247 _143311 _143313 _143320 B s t clauses _106908) = (term1248 _143311 _143313 _143320 B s t clauses _106908).
Proof. exact (fun_ext (fun a : type1419 _143311 _143313 B => @lem8084866 _143311 _143313 _143320 B s t a clauses _106908)). Qed.
Lemma lem8084868 {_143311 _143313 B : Type'} : (@ex (_143311 -> B -> _143313)) = (@ex (_143311 -> B -> _143313)).
Proof. exact (eq_refl (@ex (_143311 -> B -> _143313))). Qed.
Lemma lem8084869 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1228 _143311 _143313 _143320 B s t clauses _106908) = (term1249 _143311 _143313 _143320 B s t clauses _106908).
Proof. exact (MK_COMB (@lem8084868 _143311 _143313 B) (@lem8084867 _143311 _143313 _143320 B s t clauses _106908)). Qed.
Lemma lem8084870 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : ((term1227 _143311 _143313 _143320 B s t clauses _106908) = (term1228 _143311 _143313 _143320 B s t clauses _106908)) = ((term1221 _143311 _143313 _143320 B s t clauses _106908) = (term1249 _143311 _143313 _143320 B s t clauses _106908)).
Proof. exact (MK_COMB (@lem8084858 _143311 _143313 _143320 B s t clauses _106908) (@lem8084869 _143311 _143313 _143320 B s t clauses _106908)). Qed.
Lemma lem8084871 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (t : type1420 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1221 _143311 _143313 _143320 B s t clauses _106908) = (term1249 _143311 _143313 _143320 B s t clauses _106908).
Proof. exact (EQ_MP (@lem8084870 _143311 _143313 _143320 B s t clauses _106908) (@lem8084845 _143311 _143313 _143320 B s t clauses _106908)). Qed.
Lemma lem8084872 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1223 _143311 _143313 _143320 B s clauses _106908) = (term1250 _143311 _143313 _143320 B s clauses _106908).
Proof. exact (fun_ext (fun t : type1420 _143311 _143313 _143320 B => @lem8084871 _143311 _143313 _143320 B s t clauses _106908)). Qed.
Lemma lem8084873 {_143311 _143313 _143320 B : Type'} : (@ex (_143311 -> B -> _143311 -> _143313 -> _143320)) = (@ex (_143311 -> B -> _143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> B -> _143311 -> _143313 -> _143320))). Qed.
Lemma lem8084874 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1224 _143311 _143313 _143320 B s clauses _106908) = (term1251 _143311 _143313 _143320 B s clauses _106908).
Proof. exact (MK_COMB (@lem8084873 _143311 _143313 _143320 B) (@lem8084872 _143311 _143313 _143320 B s clauses _106908)). Qed.
Lemma lem8084875 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1196 _143311 _143313 _143320 B s clauses _106908) = (term1251 _143311 _143313 _143320 B s clauses _106908).
Proof. exact (TRANS (@lem8084841 _143311 _143313 _143320 B s clauses _106908) (@lem8084874 _143311 _143313 _143320 B s clauses _106908)). Qed.
Lemma lem8084876 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1198 _143311 _143313 _143320 B clauses _106908) = (term1252 _143311 _143313 _143320 B clauses _106908).
Proof. exact (fun_ext (fun s : type1417 _143311 _143313 B => @lem8084875 _143311 _143313 _143320 B s clauses _106908)). Qed.
Lemma lem8084877 {_143311 _143313 B : Type'} : (@ex (_143311 -> B -> _143313 -> B)) = (@ex (_143311 -> B -> _143313 -> B)).
Proof. exact (eq_refl (@ex (_143311 -> B -> _143313 -> B))). Qed.
Lemma lem8084878 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1199 _143311 _143313 _143320 B clauses _106908) = (term1253 _143311 _143313 _143320 B clauses _106908).
Proof. exact (MK_COMB (@lem8084877 _143311 _143313 B) (@lem8084876 _143311 _143313 _143320 B clauses _106908)). Qed.
Lemma lem8084879 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1176 _143311 _143313 _143320 B clauses _106908) = (term1253 _143311 _143313 _143320 B clauses _106908).
Proof. exact (TRANS (@lem8084811 _143311 _143313 _143320 B clauses _106908) (@lem8084878 _143311 _143313 _143320 B clauses _106908)). Qed.
Lemma lem8084880 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1039 _143311 _143313 _143320 B clauses _106908) = (term1253 _143311 _143313 _143320 B clauses _106908).
Proof. exact (TRANS (@lem8084781 _143311 _143313 _143320 B clauses _106908) (@lem8084879 _143311 _143313 _143320 B clauses _106908)). Qed.
Lemma lem8084881 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) : (term1040 _143311 _143313 _143320 B _106908) = (term1254 _143311 _143313 _143320 B _106908).
Proof. exact (fun_ext (fun clauses : type1634 _143311 _143313 _143320 B => @lem8084880 _143311 _143313 _143320 B clauses _106908)). Qed.
Lemma lem8084882 {_143311 _143313 _143320 B : Type'} : (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320)))) = (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))))). Qed.
Lemma lem8084883 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) : (term1041 _143311 _143313 _143320 B _106908) = (term1255 _143311 _143313 _143320 B _106908).
Proof. exact (MK_COMB (@lem8084882 _143311 _143313 _143320 B) (@lem8084881 _143311 _143313 _143320 B _106908)). Qed.
Lemma lem8084885 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8084886 {_143311 _143313 _143320 B : Type'} (P : type1068 _143311 _143313 _143320 B) : (term1256 _143311 _143313 _143320 B P) = (term1257 _143311 _143313 _143320 B P).
Proof. exact (@lem8084885 (type1634 _143311 _143313 _143320 B) (type1417 _143311 _143313 B) P). Qed.
Lemma lem8084887 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) : (term1258 _143311 _143313 _143320 B _106908) = (term1259 _143311 _143313 _143320 B _106908).
Proof. exact (@lem8084886 _143311 _143313 _143320 B (term1260 _143311 _143313 _143320 B _106908)). Qed.
Lemma lem8084888 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1261 _143311 _143313 _143320 B _106908 clauses) = (term1252 _143311 _143313 _143320 B clauses _106908).
Proof. exact (eq_refl (term1261 _143311 _143313 _143320 B _106908 clauses)). Qed.
Lemma lem8084889 {_143311 _143313 B : Type'} (s : type1417 _143311 _143313 B) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8084890 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) (s : type1417 _143311 _143313 B) : (term1262 _143311 _143313 _143320 B _106908 clauses s) = (term1263 _143311 _143313 _143320 B clauses _106908 s).
Proof. exact (MK_COMB (@lem8084888 _143311 _143313 _143320 B clauses _106908) (@lem8084889 _143311 _143313 B s)). Qed.
Lemma lem8084891 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1263 _143311 _143313 _143320 B clauses _106908 s) = (term1251 _143311 _143313 _143320 B s clauses _106908).
Proof. exact (eq_refl (term1263 _143311 _143313 _143320 B clauses _106908 s)). Qed.
Lemma lem8084892 {_143311 _143313 _143320 B : Type'} (s : type1417 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1262 _143311 _143313 _143320 B _106908 clauses s) = (term1251 _143311 _143313 _143320 B s clauses _106908).
Proof. exact (TRANS (@lem8084890 _143311 _143313 _143320 B clauses _106908 s) (@lem8084891 _143311 _143313 _143320 B s clauses _106908)). Qed.
Lemma lem8084893 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1264 _143311 _143313 _143320 B _106908 clauses) = (term1252 _143311 _143313 _143320 B clauses _106908).
Proof. exact (fun_ext (fun s : type1417 _143311 _143313 B => @lem8084892 _143311 _143313 _143320 B s clauses _106908)). Qed.
Lemma lem8084894 {_143311 _143313 B : Type'} : (@ex (_143311 -> B -> _143313 -> B)) = (@ex (_143311 -> B -> _143313 -> B)).
Proof. exact (eq_refl (@ex (_143311 -> B -> _143313 -> B))). Qed.
Lemma lem8084895 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1265 _143311 _143313 _143320 B _106908 clauses) = (term1253 _143311 _143313 _143320 B clauses _106908).
Proof. exact (MK_COMB (@lem8084894 _143311 _143313 B) (@lem8084893 _143311 _143313 _143320 B clauses _106908)). Qed.
Lemma lem8084896 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) : (term1266 _143311 _143313 _143320 B _106908) = (term1254 _143311 _143313 _143320 B _106908).
Proof. exact (fun_ext (fun clauses : type1634 _143311 _143313 _143320 B => @lem8084895 _143311 _143313 _143320 B clauses _106908)). Qed.
Lemma lem8084897 {_143311 _143313 _143320 B : Type'} : (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320)))) = (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))))). Qed.
Lemma lem8084898 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) : (term1258 _143311 _143313 _143320 B _106908) = (term1255 _143311 _143313 _143320 B _106908).
Proof. exact (MK_COMB (@lem8084897 _143311 _143313 _143320 B) (@lem8084896 _143311 _143313 _143320 B _106908)). Qed.
Lemma lem8084899 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8084900 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) : (term1267 _143311 _143313 _143320 B _106908) = (term1268 _143311 _143313 _143320 B _106908).
Proof. exact (MK_COMB (@lem8084899) (@lem8084898 _143311 _143313 _143320 B _106908)). Qed.
Lemma lem8084901 {_143311 _143313 _143320 B : Type'} (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1261 _143311 _143313 _143320 B _106908 clauses) = (term1252 _143311 _143313 _143320 B clauses _106908).
Proof. exact (eq_refl (term1261 _143311 _143313 _143320 B _106908 clauses)). Qed.
Lemma lem8084902 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) : (s clauses) = (s clauses).
Proof. exact (eq_refl (s clauses)). Qed.
Lemma lem8084903 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) (s : type1071 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) : (term1269 _143311 _143313 _143320 B _106908 s clauses) = (term1270 _143311 _143313 _143320 B _106908 s clauses).
Proof. exact (MK_COMB (@lem8084901 _143311 _143313 _143320 B clauses _106908) (@lem8084902 _143311 _143313 _143320 B s clauses)). Qed.
Lemma lem8084904 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1270 _143311 _143313 _143320 B _106908 s clauses) = (term1271 _143311 _143313 _143320 B s clauses _106908).
Proof. exact (eq_refl (term1270 _143311 _143313 _143320 B _106908 s clauses)). Qed.
Lemma lem8084905 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1269 _143311 _143313 _143320 B _106908 s clauses) = (term1271 _143311 _143313 _143320 B s clauses _106908).
Proof. exact (TRANS (@lem8084903 _143311 _143313 _143320 B _106908 s clauses) (@lem8084904 _143311 _143313 _143320 B s clauses _106908)). Qed.
Lemma lem8084906 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (_106908 : _143320) : (term1272 _143311 _143313 _143320 B _106908 s) = (term1273 _143311 _143313 _143320 B s _106908).
Proof. exact (fun_ext (fun clauses : type1634 _143311 _143313 _143320 B => @lem8084905 _143311 _143313 _143320 B s clauses _106908)). Qed.
Lemma lem8084907 {_143311 _143313 _143320 B : Type'} : (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320)))) = (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))))). Qed.
Lemma lem8084908 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (_106908 : _143320) : (term1274 _143311 _143313 _143320 B _106908 s) = (term1275 _143311 _143313 _143320 B s _106908).
Proof. exact (MK_COMB (@lem8084907 _143311 _143313 _143320 B) (@lem8084906 _143311 _143313 _143320 B s _106908)). Qed.
Lemma lem8084909 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) : (term1276 _143311 _143313 _143320 B _106908) = (term1277 _143311 _143313 _143320 B _106908).
Proof. exact (fun_ext (fun s : type1071 _143311 _143313 _143320 B => @lem8084908 _143311 _143313 _143320 B s _106908)). Qed.
Lemma lem8084910 {_143311 _143313 _143320 B : Type'} : (@ex ((list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))) -> _143311 -> B -> _143313 -> B)) = (@ex ((list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))) -> _143311 -> B -> _143313 -> B)).
Proof. exact (eq_refl (@ex ((list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))) -> _143311 -> B -> _143313 -> B))). Qed.
Lemma lem8084911 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) : (term1259 _143311 _143313 _143320 B _106908) = (term1278 _143311 _143313 _143320 B _106908).
Proof. exact (MK_COMB (@lem8084910 _143311 _143313 _143320 B) (@lem8084909 _143311 _143313 _143320 B _106908)). Qed.
Lemma lem8084912 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) : ((term1258 _143311 _143313 _143320 B _106908) = (term1259 _143311 _143313 _143320 B _106908)) = ((term1255 _143311 _143313 _143320 B _106908) = (term1278 _143311 _143313 _143320 B _106908)).
Proof. exact (MK_COMB (@lem8084900 _143311 _143313 _143320 B _106908) (@lem8084911 _143311 _143313 _143320 B _106908)). Qed.
Lemma lem8084913 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) : (term1255 _143311 _143313 _143320 B _106908) = (term1278 _143311 _143313 _143320 B _106908).
Proof. exact (EQ_MP (@lem8084912 _143311 _143313 _143320 B _106908) (@lem8084887 _143311 _143313 _143320 B _106908)). Qed.
Lemma lem8084915 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8084916 {_143311 _143313 _143320 B : Type'} (P : type1067 _143311 _143313 _143320 B) : (term1279 _143311 _143313 _143320 B P) = (term1280 _143311 _143313 _143320 B P).
Proof. exact (@lem8084915 (type1634 _143311 _143313 _143320 B) (type1420 _143311 _143313 _143320 B) P). Qed.
Lemma lem8084917 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (_106908 : _143320) : (term1281 _143311 _143313 _143320 B s _106908) = (term1282 _143311 _143313 _143320 B s _106908).
Proof. exact (@lem8084916 _143311 _143313 _143320 B (term1283 _143311 _143313 _143320 B s _106908)). Qed.
Lemma lem8084918 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1284 _143311 _143313 _143320 B s _106908 clauses) = (term1285 _143311 _143313 _143320 B s clauses _106908).
Proof. exact (eq_refl (term1284 _143311 _143313 _143320 B s _106908 clauses)). Qed.
Lemma lem8084919 {_143311 _143313 _143320 B : Type'} (t : type1420 _143311 _143313 _143320 B) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8084920 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) (t : type1420 _143311 _143313 _143320 B) : (term1286 _143311 _143313 _143320 B s _106908 clauses t) = (term1287 _143311 _143313 _143320 B s clauses _106908 t).
Proof. exact (MK_COMB (@lem8084918 _143311 _143313 _143320 B s clauses _106908) (@lem8084919 _143311 _143313 _143320 B t)). Qed.
Lemma lem8084921 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1420 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1287 _143311 _143313 _143320 B s clauses _106908 t) = (term1288 _143311 _143313 _143320 B s t clauses _106908).
Proof. exact (eq_refl (term1287 _143311 _143313 _143320 B s clauses _106908 t)). Qed.
Lemma lem8084922 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1420 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1286 _143311 _143313 _143320 B s _106908 clauses t) = (term1288 _143311 _143313 _143320 B s t clauses _106908).
Proof. exact (TRANS (@lem8084920 _143311 _143313 _143320 B s clauses _106908 t) (@lem8084921 _143311 _143313 _143320 B s t clauses _106908)). Qed.
Lemma lem8084923 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1289 _143311 _143313 _143320 B s _106908 clauses) = (term1285 _143311 _143313 _143320 B s clauses _106908).
Proof. exact (fun_ext (fun t : type1420 _143311 _143313 _143320 B => @lem8084922 _143311 _143313 _143320 B s t clauses _106908)). Qed.
Lemma lem8084924 {_143311 _143313 _143320 B : Type'} : (@ex (_143311 -> B -> _143311 -> _143313 -> _143320)) = (@ex (_143311 -> B -> _143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex (_143311 -> B -> _143311 -> _143313 -> _143320))). Qed.
Lemma lem8084925 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1290 _143311 _143313 _143320 B s _106908 clauses) = (term1271 _143311 _143313 _143320 B s clauses _106908).
Proof. exact (MK_COMB (@lem8084924 _143311 _143313 _143320 B) (@lem8084923 _143311 _143313 _143320 B s clauses _106908)). Qed.
Lemma lem8084926 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (_106908 : _143320) : (term1291 _143311 _143313 _143320 B s _106908) = (term1273 _143311 _143313 _143320 B s _106908).
Proof. exact (fun_ext (fun clauses : type1634 _143311 _143313 _143320 B => @lem8084925 _143311 _143313 _143320 B s clauses _106908)). Qed.
Lemma lem8084927 {_143311 _143313 _143320 B : Type'} : (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320)))) = (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))))). Qed.
Lemma lem8084928 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (_106908 : _143320) : (term1281 _143311 _143313 _143320 B s _106908) = (term1275 _143311 _143313 _143320 B s _106908).
Proof. exact (MK_COMB (@lem8084927 _143311 _143313 _143320 B) (@lem8084926 _143311 _143313 _143320 B s _106908)). Qed.
Lemma lem8084929 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8084930 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (_106908 : _143320) : (term1292 _143311 _143313 _143320 B s _106908) = (term1293 _143311 _143313 _143320 B s _106908).
Proof. exact (MK_COMB (@lem8084929) (@lem8084928 _143311 _143313 _143320 B s _106908)). Qed.
Lemma lem8084931 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1284 _143311 _143313 _143320 B s _106908 clauses) = (term1285 _143311 _143313 _143320 B s clauses _106908).
Proof. exact (eq_refl (term1284 _143311 _143313 _143320 B s _106908 clauses)). Qed.
Lemma lem8084932 {_143311 _143313 _143320 B : Type'} (t : type1070 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) : (t clauses) = (t clauses).
Proof. exact (eq_refl (t clauses)). Qed.
Lemma lem8084933 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (_106908 : _143320) (t : type1070 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) : (term1294 _143311 _143313 _143320 B s _106908 t clauses) = (term1295 _143311 _143313 _143320 B s _106908 t clauses).
Proof. exact (MK_COMB (@lem8084931 _143311 _143313 _143320 B s clauses _106908) (@lem8084932 _143311 _143313 _143320 B t clauses)). Qed.
Lemma lem8084934 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1295 _143311 _143313 _143320 B s _106908 t clauses) = (term1296 _143311 _143313 _143320 B s t clauses _106908).
Proof. exact (eq_refl (term1295 _143311 _143313 _143320 B s _106908 t clauses)). Qed.
Lemma lem8084935 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1294 _143311 _143313 _143320 B s _106908 t clauses) = (term1296 _143311 _143313 _143320 B s t clauses _106908).
Proof. exact (TRANS (@lem8084933 _143311 _143313 _143320 B s _106908 t clauses) (@lem8084934 _143311 _143313 _143320 B s t clauses _106908)). Qed.
Lemma lem8084936 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (_106908 : _143320) : (term1297 _143311 _143313 _143320 B s _106908 t) = (term1298 _143311 _143313 _143320 B s t _106908).
Proof. exact (fun_ext (fun clauses : type1634 _143311 _143313 _143320 B => @lem8084935 _143311 _143313 _143320 B s t clauses _106908)). Qed.
Lemma lem8084937 {_143311 _143313 _143320 B : Type'} : (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320)))) = (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))))). Qed.
Lemma lem8084938 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (_106908 : _143320) : (term1299 _143311 _143313 _143320 B s _106908 t) = (term1300 _143311 _143313 _143320 B s t _106908).
Proof. exact (MK_COMB (@lem8084937 _143311 _143313 _143320 B) (@lem8084936 _143311 _143313 _143320 B s t _106908)). Qed.
Lemma lem8084939 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (_106908 : _143320) : (term1301 _143311 _143313 _143320 B s _106908) = (term1302 _143311 _143313 _143320 B s _106908).
Proof. exact (fun_ext (fun t : type1070 _143311 _143313 _143320 B => @lem8084938 _143311 _143313 _143320 B s t _106908)). Qed.
Lemma lem8084940 {_143311 _143313 _143320 B : Type'} : (@ex ((list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))) -> _143311 -> B -> _143311 -> _143313 -> _143320)) = (@ex ((list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))) -> _143311 -> B -> _143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex ((list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))) -> _143311 -> B -> _143311 -> _143313 -> _143320))). Qed.
Lemma lem8084941 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (_106908 : _143320) : (term1282 _143311 _143313 _143320 B s _106908) = (term1303 _143311 _143313 _143320 B s _106908).
Proof. exact (MK_COMB (@lem8084940 _143311 _143313 _143320 B) (@lem8084939 _143311 _143313 _143320 B s _106908)). Qed.
Lemma lem8084942 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (_106908 : _143320) : ((term1281 _143311 _143313 _143320 B s _106908) = (term1282 _143311 _143313 _143320 B s _106908)) = ((term1275 _143311 _143313 _143320 B s _106908) = (term1303 _143311 _143313 _143320 B s _106908)).
Proof. exact (MK_COMB (@lem8084930 _143311 _143313 _143320 B s _106908) (@lem8084941 _143311 _143313 _143320 B s _106908)). Qed.
Lemma lem8084943 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (_106908 : _143320) : (term1275 _143311 _143313 _143320 B s _106908) = (term1303 _143311 _143313 _143320 B s _106908).
Proof. exact (EQ_MP (@lem8084942 _143311 _143313 _143320 B s _106908) (@lem8084917 _143311 _143313 _143320 B s _106908)). Qed.
Lemma lem8084945 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8084946 {_143311 _143313 _143320 B : Type'} (P : type1069 _143311 _143313 _143320 B) : (term1304 _143311 _143313 _143320 B P) = (term1305 _143311 _143313 _143320 B P).
Proof. exact (@lem8084945 (type1634 _143311 _143313 _143320 B) (type1419 _143311 _143313 B) P). Qed.
Lemma lem8084947 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (_106908 : _143320) : (term1306 _143311 _143313 _143320 B s t _106908) = (term1307 _143311 _143313 _143320 B s t _106908).
Proof. exact (@lem8084946 _143311 _143313 _143320 B (term1308 _143311 _143313 _143320 B s t _106908)). Qed.
Lemma lem8084948 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1309 _143311 _143313 _143320 B s t _106908 clauses) = (term1310 _143311 _143313 _143320 B s t clauses _106908).
Proof. exact (eq_refl (term1309 _143311 _143313 _143320 B s t _106908 clauses)). Qed.
Lemma lem8084949 {_143311 _143313 B : Type'} (a : type1419 _143311 _143313 B) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8084950 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) (a : type1419 _143311 _143313 B) : (term1311 _143311 _143313 _143320 B s t _106908 clauses a) = (term1312 _143311 _143313 _143320 B s t clauses _106908 a).
Proof. exact (MK_COMB (@lem8084948 _143311 _143313 _143320 B s t clauses _106908) (@lem8084949 _143311 _143313 B a)). Qed.
Lemma lem8084951 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (a : type1419 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1312 _143311 _143313 _143320 B s t clauses _106908 a) = (term1313 _143311 _143313 _143320 B s t a clauses _106908).
Proof. exact (eq_refl (term1312 _143311 _143313 _143320 B s t clauses _106908 a)). Qed.
Lemma lem8084952 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (a : type1419 _143311 _143313 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1311 _143311 _143313 _143320 B s t _106908 clauses a) = (term1313 _143311 _143313 _143320 B s t a clauses _106908).
Proof. exact (TRANS (@lem8084950 _143311 _143313 _143320 B s t clauses _106908 a) (@lem8084951 _143311 _143313 _143320 B s t a clauses _106908)). Qed.
Lemma lem8084953 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1314 _143311 _143313 _143320 B s t _106908 clauses) = (term1310 _143311 _143313 _143320 B s t clauses _106908).
Proof. exact (fun_ext (fun a : type1419 _143311 _143313 B => @lem8084952 _143311 _143313 _143320 B s t a clauses _106908)). Qed.
Lemma lem8084954 {_143311 _143313 B : Type'} : (@ex (_143311 -> B -> _143313)) = (@ex (_143311 -> B -> _143313)).
Proof. exact (eq_refl (@ex (_143311 -> B -> _143313))). Qed.
Lemma lem8084955 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1315 _143311 _143313 _143320 B s t _106908 clauses) = (term1296 _143311 _143313 _143320 B s t clauses _106908).
Proof. exact (MK_COMB (@lem8084954 _143311 _143313 B) (@lem8084953 _143311 _143313 _143320 B s t clauses _106908)). Qed.
Lemma lem8084956 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (_106908 : _143320) : (term1316 _143311 _143313 _143320 B s t _106908) = (term1298 _143311 _143313 _143320 B s t _106908).
Proof. exact (fun_ext (fun clauses : type1634 _143311 _143313 _143320 B => @lem8084955 _143311 _143313 _143320 B s t clauses _106908)). Qed.
Lemma lem8084957 {_143311 _143313 _143320 B : Type'} : (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320)))) = (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))))). Qed.
Lemma lem8084958 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (_106908 : _143320) : (term1306 _143311 _143313 _143320 B s t _106908) = (term1300 _143311 _143313 _143320 B s t _106908).
Proof. exact (MK_COMB (@lem8084957 _143311 _143313 _143320 B) (@lem8084956 _143311 _143313 _143320 B s t _106908)). Qed.
Lemma lem8084959 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8084960 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (_106908 : _143320) : (term1317 _143311 _143313 _143320 B s t _106908) = (term1318 _143311 _143313 _143320 B s t _106908).
Proof. exact (MK_COMB (@lem8084959) (@lem8084958 _143311 _143313 _143320 B s t _106908)). Qed.
Lemma lem8084961 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1309 _143311 _143313 _143320 B s t _106908 clauses) = (term1310 _143311 _143313 _143320 B s t clauses _106908).
Proof. exact (eq_refl (term1309 _143311 _143313 _143320 B s t _106908 clauses)). Qed.
Lemma lem8084962 {_143311 _143313 _143320 B : Type'} (a : type1072 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) : (a clauses) = (a clauses).
Proof. exact (eq_refl (a clauses)). Qed.
Lemma lem8084963 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (_106908 : _143320) (a : type1072 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) : (term1319 _143311 _143313 _143320 B s t _106908 a clauses) = (term1320 _143311 _143313 _143320 B s t _106908 a clauses).
Proof. exact (MK_COMB (@lem8084961 _143311 _143313 _143320 B s t clauses _106908) (@lem8084962 _143311 _143313 _143320 B a clauses)). Qed.
Lemma lem8084964 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (a : type1072 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1320 _143311 _143313 _143320 B s t _106908 a clauses) = (term1321 _143311 _143313 _143320 B s t a clauses _106908).
Proof. exact (eq_refl (term1320 _143311 _143313 _143320 B s t _106908 a clauses)). Qed.
Lemma lem8084965 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (a : type1072 _143311 _143313 _143320 B) (clauses : type1634 _143311 _143313 _143320 B) (_106908 : _143320) : (term1319 _143311 _143313 _143320 B s t _106908 a clauses) = (term1321 _143311 _143313 _143320 B s t a clauses _106908).
Proof. exact (TRANS (@lem8084963 _143311 _143313 _143320 B s t _106908 a clauses) (@lem8084964 _143311 _143313 _143320 B s t a clauses _106908)). Qed.
Lemma lem8084966 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (a : type1072 _143311 _143313 _143320 B) (_106908 : _143320) : (term1322 _143311 _143313 _143320 B s t _106908 a) = (term1323 _143311 _143313 _143320 B s t a _106908).
Proof. exact (fun_ext (fun clauses : type1634 _143311 _143313 _143320 B => @lem8084965 _143311 _143313 _143320 B s t a clauses _106908)). Qed.
Lemma lem8084967 {_143311 _143313 _143320 B : Type'} : (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320)))) = (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320)))).
Proof. exact (eq_refl (@all (list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))))). Qed.
Lemma lem8084968 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (a : type1072 _143311 _143313 _143320 B) (_106908 : _143320) : (term1324 _143311 _143313 _143320 B s t _106908 a) = (term1325 _143311 _143313 _143320 B s t a _106908).
Proof. exact (MK_COMB (@lem8084967 _143311 _143313 _143320 B) (@lem8084966 _143311 _143313 _143320 B s t a _106908)). Qed.
Lemma lem8084969 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (_106908 : _143320) : (term1326 _143311 _143313 _143320 B s t _106908) = (term1327 _143311 _143313 _143320 B s t _106908).
Proof. exact (fun_ext (fun a : type1072 _143311 _143313 _143320 B => @lem8084968 _143311 _143313 _143320 B s t a _106908)). Qed.
Lemma lem8084970 {_143311 _143313 _143320 B : Type'} : (@ex ((list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))) -> _143311 -> B -> _143313)) = (@ex ((list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))) -> _143311 -> B -> _143313)).
Proof. exact (eq_refl (@ex ((list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))) -> _143311 -> B -> _143313))). Qed.
Lemma lem8084971 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (_106908 : _143320) : (term1307 _143311 _143313 _143320 B s t _106908) = (term1328 _143311 _143313 _143320 B s t _106908).
Proof. exact (MK_COMB (@lem8084970 _143311 _143313 _143320 B) (@lem8084969 _143311 _143313 _143320 B s t _106908)). Qed.
Lemma lem8084972 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (_106908 : _143320) : ((term1306 _143311 _143313 _143320 B s t _106908) = (term1307 _143311 _143313 _143320 B s t _106908)) = ((term1300 _143311 _143313 _143320 B s t _106908) = (term1328 _143311 _143313 _143320 B s t _106908)).
Proof. exact (MK_COMB (@lem8084960 _143311 _143313 _143320 B s t _106908) (@lem8084971 _143311 _143313 _143320 B s t _106908)). Qed.
Lemma lem8084973 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (t : type1070 _143311 _143313 _143320 B) (_106908 : _143320) : (term1300 _143311 _143313 _143320 B s t _106908) = (term1328 _143311 _143313 _143320 B s t _106908).
Proof. exact (EQ_MP (@lem8084972 _143311 _143313 _143320 B s t _106908) (@lem8084947 _143311 _143313 _143320 B s t _106908)). Qed.
Lemma lem8084974 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (_106908 : _143320) : (term1302 _143311 _143313 _143320 B s _106908) = (term1329 _143311 _143313 _143320 B s _106908).
Proof. exact (fun_ext (fun t : type1070 _143311 _143313 _143320 B => @lem8084973 _143311 _143313 _143320 B s t _106908)). Qed.
Lemma lem8084975 {_143311 _143313 _143320 B : Type'} : (@ex ((list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))) -> _143311 -> B -> _143311 -> _143313 -> _143320)) = (@ex ((list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))) -> _143311 -> B -> _143311 -> _143313 -> _143320)).
Proof. exact (eq_refl (@ex ((list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))) -> _143311 -> B -> _143311 -> _143313 -> _143320))). Qed.
Lemma lem8084976 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (_106908 : _143320) : (term1303 _143311 _143313 _143320 B s _106908) = (term1330 _143311 _143313 _143320 B s _106908).
Proof. exact (MK_COMB (@lem8084975 _143311 _143313 _143320 B) (@lem8084974 _143311 _143313 _143320 B s _106908)). Qed.
Lemma lem8084977 {_143311 _143313 _143320 B : Type'} (s : type1071 _143311 _143313 _143320 B) (_106908 : _143320) : (term1275 _143311 _143313 _143320 B s _106908) = (term1330 _143311 _143313 _143320 B s _106908).
Proof. exact (TRANS (@lem8084943 _143311 _143313 _143320 B s _106908) (@lem8084976 _143311 _143313 _143320 B s _106908)). Qed.
Lemma lem8084978 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) : (term1277 _143311 _143313 _143320 B _106908) = (term1331 _143311 _143313 _143320 B _106908).
Proof. exact (fun_ext (fun s : type1071 _143311 _143313 _143320 B => @lem8084977 _143311 _143313 _143320 B s _106908)). Qed.
Lemma lem8084979 {_143311 _143313 _143320 B : Type'} : (@ex ((list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))) -> _143311 -> B -> _143313 -> B)) = (@ex ((list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))) -> _143311 -> B -> _143313 -> B)).
Proof. exact (eq_refl (@ex ((list (prod (_143313 -> B) (_143311 -> _143313 -> _143320))) -> _143311 -> B -> _143313 -> B))). Qed.
Lemma lem8084980 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) : (term1278 _143311 _143313 _143320 B _106908) = (term1332 _143311 _143313 _143320 B _106908).
Proof. exact (MK_COMB (@lem8084979 _143311 _143313 _143320 B) (@lem8084978 _143311 _143313 _143320 B _106908)). Qed.
Lemma lem8084981 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) : (term1255 _143311 _143313 _143320 B _106908) = (term1332 _143311 _143313 _143320 B _106908).
Proof. exact (TRANS (@lem8084913 _143311 _143313 _143320 B _106908) (@lem8084980 _143311 _143313 _143320 B _106908)). Qed.
Lemma lem8084983 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) : (term1041 _143311 _143313 _143320 B _106908) = (term1332 _143311 _143313 _143320 B _106908).
Proof. exact (TRANS (@lem8084883 _143311 _143313 _143320 B _106908) (@lem8084981 _143311 _143313 _143320 B _106908)). Qed.
Lemma lem8084984 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) : (term424 _143311 _143313 _143320 B _106908) = (term1332 _143311 _143313 _143320 B _106908).
Proof. exact (TRANS (@lem8084352 _143311 _143313 _143320 B _106908) (@lem8084983 _143311 _143313 _143320 B _106908)). Qed.
Lemma lem8084985 {_143311 _143313 _143320 B : Type'} (_106908 : _143320) (h1 : term424 _143311 _143313 _143320 B _106908) : term1332 _143311 _143313 _143320 B _106908.
Proof. exact (EQ_MP (@lem8084984 _143311 _143313 _143320 B _106908) (@lem8081786 _143311 _143313 _143320 B _106908 h1)). Qed.
Lemma lem8084991 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) (a : P) : (term432 A B C P s clauses x t c a) = (term432 A B C P s clauses x t c a).
Proof. exact (eq_refl (term432 A B C P s clauses x t c a)). Qed.
Lemma lem8084992 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term430 A B C P s clauses x t c) = (term430 A B C P s clauses x t c).
Proof. exact (fun_ext (fun a : P => @lem8084991 A B C P s clauses x t c a)). Qed.
Lemma lem8084993 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8084994 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term443 A B C P s clauses x t c) = (term443 A B C P s clauses x t c).
Proof. exact (MK_COMB (@lem8084993 P) (@lem8084992 A B C P s clauses x t c)). Qed.
Lemma lem8084996 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term433 A B C P s t clauses) = (term433 A B C P s t clauses).
Proof. exact (eq_refl (term433 A B C P s t clauses)). Qed.
Lemma lem8084997 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term444 A B C P s clauses x t c) = (term444 A B C P s clauses x t c).
Proof. exact (MK_COMB (@lem8084996 A B C P s t clauses) (@lem8084994 A B C P s clauses x t c)). Qed.
Lemma lem8084998 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (c : C) : (term446 A B C P s clauses x c) = (term446 A B C P s clauses x c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8084997 A B C P s clauses x t c)). Qed.
Lemma lem8084999 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8085000 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (c : C) : (term448 A B C P s clauses x c) = (term448 A B C P s clauses x c).
Proof. exact (MK_COMB (@lem8084999 B C P) (@lem8084998 A B C P s clauses x c)). Qed.
Lemma lem8085001 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) (c : C) : (term450 A B C P clauses x c) = (term450 A B C P clauses x c).
Proof. exact (fun_ext (fun s : P -> A => @lem8085000 A B C P s clauses x c)). Qed.
Lemma lem8085002 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8085003 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) (c : C) : (term452 A B C P clauses x c) = (term452 A B C P clauses x c).
Proof. exact (MK_COMB (@lem8085002 A P) (@lem8085001 A B C P clauses x c)). Qed.
Lemma lem8085005 {B C P : Type'} (P' : type766 B C P) : (term1333 B C P P') = (term1334 B C P P').
Proof. exact (@lem18394 (type1475 B C P) P'). Qed.
Lemma lem8085006 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) : (term1335 A B C P s clauses) = (term1336 A B C P s clauses).
Proof. exact (@lem8085005 B C P (term472 A B C P s clauses)). Qed.
Lemma lem8085007 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term473 A B C P s clauses t) = (term429 A B C P s t clauses).
Proof. exact (eq_refl (term473 A B C P s clauses t)). Qed.
Lemma lem8085008 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8085010 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term1337 A B C P s clauses t) = (term1338 A B C P s t clauses).
Proof. exact (MK_COMB (@lem8085008) (@lem8085007 A B C P s t clauses)). Qed.
Lemma lem8085011 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) : (term1339 A B C P s clauses) = (term1340 A B C P s clauses).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8085010 A B C P s t clauses)). Qed.
Lemma lem8085012 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8085013 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) : (term1336 A B C P s clauses) = (term1341 A B C P s clauses).
Proof. exact (MK_COMB (@lem8085012 B C P) (@lem8085011 A B C P s clauses)). Qed.
Lemma lem8085014 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) : (term1335 A B C P s clauses) = (term1341 A B C P s clauses).
Proof. exact (TRANS (@lem8085006 A B C P s clauses) (@lem8085013 A B C P s clauses)). Qed.
Lemma lem8085016 {P : Type'} (P' : P -> Prop) : (term680 P P') = (term681 P P').
Proof. exact (@lem18394 P P'). Qed.
Lemma lem8085017 {A P : Type'} (s : P -> A) (x : A) : (term682 A P s x) = (term683 A P s x).
Proof. exact (@lem8085016 P (term297 A P s x)). Qed.
Lemma lem8085018 {A P : Type'} (s : P -> A) (a : P) (x : A) : (term298 A P s x a) = ((s a) = x).
Proof. exact (eq_refl (term298 A P s x a)). Qed.
Lemma lem8085019 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8085021 {A P : Type'} (s : P -> A) (a : P) (x : A) : (term684 A P s x a) = (term685 A P s a x).
Proof. exact (MK_COMB (@lem8085019) (@lem8085018 A P s a x)). Qed.
Lemma lem8085022 {A P : Type'} (s : P -> A) (x : A) : (term686 A P s x) = (term687 A P s x).
Proof. exact (fun_ext (fun a : P => @lem8085021 A P s a x)). Qed.
Lemma lem8085023 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8085024 {A P : Type'} (s : P -> A) (x : A) : (term683 A P s x) = (term688 A P s x).
Proof. exact (MK_COMB (@lem8085023 P) (@lem8085022 A P s x)). Qed.
Lemma lem8085025 {A P : Type'} (s : P -> A) (x : A) : (term682 A P s x) = (term688 A P s x).
Proof. exact (TRANS (@lem8085017 A P s x) (@lem8085024 A P s x)). Qed.
Lemma lem8085026 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8085027 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) : (term1342 A B C P s clauses) = (term1343 A B C P s clauses).
Proof. exact (MK_COMB (@lem8085026) (@lem8085014 A B C P s clauses)). Qed.
Lemma lem8085028 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1344 A B C P clauses s x) = (term1345 A B C P clauses s x).
Proof. exact (MK_COMB (@lem8085027 A B C P s clauses) (@lem8085025 A P s x)). Qed.
Lemma lem8085029 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1346 A B C P clauses s x) = (term1344 A B C P clauses s x).
Proof. exact (@lem17045 (term481 A B C P s clauses) (term308 A P s x)). Qed.
Lemma lem8085030 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1346 A B C P clauses s x) = (term1345 A B C P clauses s x).
Proof. exact (TRANS (@lem8085029 A B C P clauses s x) (@lem8085028 A B C P clauses s x)). Qed.
Lemma lem8085031 {A P : Type'} (P' : type805 A P) : (term694 A P P') = (term695 A P P').
Proof. exact (@lem18394 (P -> A) P'). Qed.
Lemma lem8085032 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) : (term490 A B C P clauses x) = (term1347 A B C P clauses x).
Proof. exact (@lem8085031 A P (term486 A B C P clauses x)). Qed.
Lemma lem8085033 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1348 A B C P clauses x s) = (term484 A B C P clauses s x).
Proof. exact (eq_refl (term1348 A B C P clauses x s)). Qed.
Lemma lem8085034 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8085035 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1349 A B C P clauses x s) = (term1346 A B C P clauses s x).
Proof. exact (MK_COMB (@lem8085034) (@lem8085033 A B C P clauses s x)). Qed.
Lemma lem8085036 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1349 A B C P clauses x s) = (term1345 A B C P clauses s x).
Proof. exact (TRANS (@lem8085035 A B C P clauses s x) (@lem8085030 A B C P clauses s x)). Qed.
Lemma lem8085037 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) : (term1350 A B C P clauses x) = (term1351 A B C P clauses x).
Proof. exact (fun_ext (fun s : P -> A => @lem8085036 A B C P clauses s x)). Qed.
Lemma lem8085038 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8085039 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) : (term1347 A B C P clauses x) = (term1352 A B C P clauses x).
Proof. exact (MK_COMB (@lem8085038 A P) (@lem8085037 A B C P clauses x)). Qed.
Lemma lem8085040 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) : (term490 A B C P clauses x) = (term1352 A B C P clauses x).
Proof. exact (TRANS (@lem8085032 A B C P clauses x) (@lem8085039 A B C P clauses x)). Qed.
Lemma lem8085041 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : ((@CASEWISE B P A C clauses c x) = _106907) = ((@CASEWISE B P A C clauses c x) = _106907).
Proof. exact (eq_refl ((@CASEWISE B P A C clauses c x) = _106907)). Qed.
Lemma lem8085042 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8085043 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) : (term491 A B C P clauses x) = (term1353 A B C P clauses x).
Proof. exact (MK_COMB (@lem8085042) (@lem8085040 A B C P clauses x)). Qed.
Lemma lem8085044 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term492 A B C P clauses c x _106907) = (term1354 A B C P clauses c x _106907).
Proof. exact (MK_COMB (@lem8085043 A B C P clauses x) (@lem8085041 A B C P clauses c x _106907)). Qed.
Lemma lem8085045 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8085046 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) (c : C) : (term453 A B C P clauses x c) = (term453 A B C P clauses x c).
Proof. exact (MK_COMB (@lem8085045) (@lem8085003 A B C P clauses x c)). Qed.
Lemma lem8085047 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term493 A B C P clauses c x _106907) = (term1355 A B C P clauses c x _106907).
Proof. exact (MK_COMB (@lem8085046 A B C P clauses x c) (@lem8085044 A B C P clauses c x _106907)). Qed.
Lemma lem8085048 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term494 A B C P clauses c _106907) = (term1356 A B C P clauses c _106907).
Proof. exact (fun_ext (fun x : A => @lem8085047 A B C P clauses c x _106907)). Qed.
Lemma lem8085049 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8085050 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term495 A B C P clauses c _106907) = (term1357 A B C P clauses c _106907).
Proof. exact (MK_COMB (@lem8085049 A) (@lem8085048 A B C P clauses c _106907)). Qed.
Lemma lem8085051 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : (term496 A B C P clauses _106907) = (term1358 A B C P clauses _106907).
Proof. exact (fun_ext (fun c : C => @lem8085050 A B C P clauses c _106907)). Qed.
Lemma lem8085052 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8085053 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : (term497 A B C P clauses _106907) = (term1359 A B C P clauses _106907).
Proof. exact (MK_COMB (@lem8085052 C) (@lem8085051 A B C P clauses _106907)). Qed.
Lemma lem8085054 {A B C P : Type'} (_106907 : B) : (term498 A B C P _106907) = (term1360 A B C P _106907).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8085053 A B C P clauses _106907)). Qed.
Lemma lem8085055 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8085056 {A B C P : Type'} (_106907 : B) : (term499 A B C P _106907) = (term1361 A B C P _106907).
Proof. exact (MK_COMB (@lem8085055 A B C P) (@lem8085054 A B C P _106907)). Qed.
Lemma lem8085271 {A : Type'} (P : Prop) (Q : A -> Prop) : (term267 A P Q) = (term266 A P Q).
Proof. exact (EQ_MP (@lem18929 A P Q) (@lem18928 A P Q)). Qed.
Lemma lem8085272 {P : Type'} (P' : Prop) (Q : P -> Prop) : (term267 P P' Q) = (term266 P P' Q).
Proof. exact (@lem8085271 P P' Q). Qed.
Lemma lem8085273 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term428 A B C P s clauses x t c) = (term427 A B C P s clauses x t c).
Proof. exact (@lem8085272 P (term429 A B C P s t clauses) (term430 A B C P s clauses x t c)). Qed.
Lemma lem8085274 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) (a : P) : (term431 A B C P s clauses x t c a) = (term432 A B C P s clauses x t c a).
Proof. exact (eq_refl (term431 A B C P s clauses x t c a)). Qed.
Lemma lem8085275 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term441 A B C P s clauses x t c) = (term430 A B C P s clauses x t c).
Proof. exact (fun_ext (fun a : P => @lem8085274 A B C P s clauses x t c a)). Qed.
Lemma lem8085276 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8085277 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term442 A B C P s clauses x t c) = (term443 A B C P s clauses x t c).
Proof. exact (MK_COMB (@lem8085276 P) (@lem8085275 A B C P s clauses x t c)). Qed.
Lemma lem8085278 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term433 A B C P s t clauses) = (term433 A B C P s t clauses).
Proof. exact (eq_refl (term433 A B C P s t clauses)). Qed.
Lemma lem8085279 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term428 A B C P s clauses x t c) = (term444 A B C P s clauses x t c).
Proof. exact (MK_COMB (@lem8085278 A B C P s t clauses) (@lem8085277 A B C P s clauses x t c)). Qed.
Lemma lem8085280 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8085281 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term1362 A B C P s clauses x t c) = (term1363 A B C P s clauses x t c).
Proof. exact (MK_COMB (@lem8085280) (@lem8085279 A B C P s clauses x t c)). Qed.
Lemma lem8085282 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) (a : P) : (term431 A B C P s clauses x t c a) = (term432 A B C P s clauses x t c a).
Proof. exact (eq_refl (term431 A B C P s clauses x t c a)). Qed.
Lemma lem8085283 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term433 A B C P s t clauses) = (term433 A B C P s t clauses).
Proof. exact (eq_refl (term433 A B C P s t clauses)). Qed.
Lemma lem8085284 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) (a : P) : (term434 A B C P s clauses x t c a) = (term435 A B C P s clauses x t c a).
Proof. exact (MK_COMB (@lem8085283 A B C P s t clauses) (@lem8085282 A B C P s clauses x t c a)). Qed.
Lemma lem8085285 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term436 A B C P s clauses x t c) = (term437 A B C P s clauses x t c).
Proof. exact (fun_ext (fun a : P => @lem8085284 A B C P s clauses x t c a)). Qed.
Lemma lem8085286 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8085287 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term427 A B C P s clauses x t c) = (term438 A B C P s clauses x t c).
Proof. exact (MK_COMB (@lem8085286 P) (@lem8085285 A B C P s clauses x t c)). Qed.
Lemma lem8085288 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : ((term428 A B C P s clauses x t c) = (term427 A B C P s clauses x t c)) = ((term444 A B C P s clauses x t c) = (term438 A B C P s clauses x t c)).
Proof. exact (MK_COMB (@lem8085281 A B C P s clauses x t c) (@lem8085287 A B C P s clauses x t c)). Qed.
Lemma lem8085289 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term444 A B C P s clauses x t c) = (term438 A B C P s clauses x t c).
Proof. exact (EQ_MP (@lem8085288 A B C P s clauses x t c) (@lem8085273 A B C P s clauses x t c)). Qed.
Lemma lem8085290 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (c : C) : (term446 A B C P s clauses x c) = (term445 A B C P s clauses x c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8085289 A B C P s clauses x t c)). Qed.
Lemma lem8085291 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8085292 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (c : C) : (term448 A B C P s clauses x c) = (term447 A B C P s clauses x c).
Proof. exact (MK_COMB (@lem8085291 B C P) (@lem8085290 A B C P s clauses x c)). Qed.
Lemma lem8085293 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) (c : C) : (term450 A B C P clauses x c) = (term449 A B C P clauses x c).
Proof. exact (fun_ext (fun s : P -> A => @lem8085292 A B C P s clauses x c)). Qed.
Lemma lem8085294 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8085295 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) (c : C) : (term452 A B C P clauses x c) = (term451 A B C P clauses x c).
Proof. exact (MK_COMB (@lem8085294 A P) (@lem8085293 A B C P clauses x c)). Qed.
Lemma lem8085296 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8085297 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) (c : C) : (term453 A B C P clauses x c) = (term173 A B C P clauses x c).
Proof. exact (MK_COMB (@lem8085296) (@lem8085295 A B C P clauses x c)). Qed.
Lemma lem8085298 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1354 A B C P clauses c x _106907) = (term1354 A B C P clauses c x _106907).
Proof. exact (eq_refl (term1354 A B C P clauses c x _106907)). Qed.
Lemma lem8085299 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1355 A B C P clauses c x _106907) = (term1364 A B C P clauses c x _106907).
Proof. exact (MK_COMB (@lem8085297 A B C P clauses x c) (@lem8085298 A B C P clauses c x _106907)). Qed.
Lemma lem8085301 {A : Type'} (P : A -> Prop) (Q : Prop) : (term714 A P Q) = (term715 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8085302 {A P : Type'} (P' : type805 A P) (Q : Prop) : (term716 A P P' Q) = (term717 A P P' Q).
Proof. exact (@lem8085301 (P -> A) P' Q). Qed.
Lemma lem8085303 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1365 A B C P clauses c x _106907) = (term1366 A B C P clauses c x _106907).
Proof. exact (@lem8085302 A P (term449 A B C P clauses x c) (term1354 A B C P clauses c x _106907)). Qed.
Lemma lem8085304 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (c : C) : (term1367 A B C P clauses x c s) = (term447 A B C P s clauses x c).
Proof. exact (eq_refl (term1367 A B C P clauses x c s)). Qed.
Lemma lem8085305 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) (c : C) : (term1368 A B C P clauses x c) = (term449 A B C P clauses x c).
Proof. exact (fun_ext (fun s : P -> A => @lem8085304 A B C P s clauses x c)). Qed.
Lemma lem8085306 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8085307 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) (c : C) : (term1369 A B C P clauses x c) = (term451 A B C P clauses x c).
Proof. exact (MK_COMB (@lem8085306 A P) (@lem8085305 A B C P clauses x c)). Qed.
Lemma lem8085308 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8085309 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) (c : C) : (term1370 A B C P clauses x c) = (term173 A B C P clauses x c).
Proof. exact (MK_COMB (@lem8085308) (@lem8085307 A B C P clauses x c)). Qed.
Lemma lem8085310 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1354 A B C P clauses c x _106907) = (term1354 A B C P clauses c x _106907).
Proof. exact (eq_refl (term1354 A B C P clauses c x _106907)). Qed.
Lemma lem8085311 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1365 A B C P clauses c x _106907) = (term1364 A B C P clauses c x _106907).
Proof. exact (MK_COMB (@lem8085309 A B C P clauses x c) (@lem8085310 A B C P clauses c x _106907)). Qed.
Lemma lem8085312 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8085313 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1371 A B C P clauses c x _106907) = (term1372 A B C P clauses c x _106907).
Proof. exact (MK_COMB (@lem8085312) (@lem8085311 A B C P clauses c x _106907)). Qed.
Lemma lem8085314 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (c : C) : (term1367 A B C P clauses x c s) = (term447 A B C P s clauses x c).
Proof. exact (eq_refl (term1367 A B C P clauses x c s)). Qed.
Lemma lem8085315 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8085316 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (c : C) : (term1373 A B C P clauses x c s) = (term1374 A B C P s clauses x c).
Proof. exact (MK_COMB (@lem8085315) (@lem8085314 A B C P s clauses x c)). Qed.
Lemma lem8085317 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1354 A B C P clauses c x _106907) = (term1354 A B C P clauses c x _106907).
Proof. exact (eq_refl (term1354 A B C P clauses c x _106907)). Qed.
Lemma lem8085318 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1375 A B C P s clauses c x _106907) = (term1376 A B C P s clauses c x _106907).
Proof. exact (MK_COMB (@lem8085316 A B C P s clauses x c) (@lem8085317 A B C P clauses c x _106907)). Qed.
Lemma lem8085319 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1377 A B C P clauses c x _106907) = (term1378 A B C P clauses c x _106907).
Proof. exact (fun_ext (fun s : P -> A => @lem8085318 A B C P s clauses c x _106907)). Qed.
Lemma lem8085320 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8085321 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1366 A B C P clauses c x _106907) = (term1379 A B C P clauses c x _106907).
Proof. exact (MK_COMB (@lem8085320 A P) (@lem8085319 A B C P clauses c x _106907)). Qed.
Lemma lem8085322 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : ((term1365 A B C P clauses c x _106907) = (term1366 A B C P clauses c x _106907)) = ((term1364 A B C P clauses c x _106907) = (term1379 A B C P clauses c x _106907)).
Proof. exact (MK_COMB (@lem8085313 A B C P clauses c x _106907) (@lem8085321 A B C P clauses c x _106907)). Qed.
Lemma lem8085323 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1364 A B C P clauses c x _106907) = (term1379 A B C P clauses c x _106907).
Proof. exact (EQ_MP (@lem8085322 A B C P clauses c x _106907) (@lem8085303 A B C P clauses c x _106907)). Qed.
Lemma lem8085325 {A : Type'} (P : A -> Prop) (Q : Prop) : (term714 A P Q) = (term715 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8085326 {B C P : Type'} (P' : type766 B C P) (Q : Prop) : (term1380 B C P P' Q) = (term1381 B C P P' Q).
Proof. exact (@lem8085325 (type1475 B C P) P' Q). Qed.
Lemma lem8085327 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1382 A B C P s clauses c x _106907) = (term1383 A B C P s clauses c x _106907).
Proof. exact (@lem8085326 B C P (term445 A B C P s clauses x c) (term1354 A B C P clauses c x _106907)). Qed.
Lemma lem8085328 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term1384 A B C P s clauses x c t) = (term438 A B C P s clauses x t c).
Proof. exact (eq_refl (term1384 A B C P s clauses x c t)). Qed.
Lemma lem8085329 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (c : C) : (term1385 A B C P s clauses x c) = (term445 A B C P s clauses x c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8085328 A B C P s clauses x t c)). Qed.
Lemma lem8085330 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8085331 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (c : C) : (term1386 A B C P s clauses x c) = (term447 A B C P s clauses x c).
Proof. exact (MK_COMB (@lem8085330 B C P) (@lem8085329 A B C P s clauses x c)). Qed.
Lemma lem8085332 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8085333 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (c : C) : (term1387 A B C P s clauses x c) = (term1374 A B C P s clauses x c).
Proof. exact (MK_COMB (@lem8085332) (@lem8085331 A B C P s clauses x c)). Qed.
Lemma lem8085334 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1354 A B C P clauses c x _106907) = (term1354 A B C P clauses c x _106907).
Proof. exact (eq_refl (term1354 A B C P clauses c x _106907)). Qed.
Lemma lem8085335 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1382 A B C P s clauses c x _106907) = (term1376 A B C P s clauses c x _106907).
Proof. exact (MK_COMB (@lem8085333 A B C P s clauses x c) (@lem8085334 A B C P clauses c x _106907)). Qed.
Lemma lem8085336 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8085337 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1388 A B C P s clauses c x _106907) = (term1389 A B C P s clauses c x _106907).
Proof. exact (MK_COMB (@lem8085336) (@lem8085335 A B C P s clauses c x _106907)). Qed.
Lemma lem8085338 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term1384 A B C P s clauses x c t) = (term438 A B C P s clauses x t c).
Proof. exact (eq_refl (term1384 A B C P s clauses x c t)). Qed.
Lemma lem8085339 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8085340 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term1390 A B C P s clauses x c t) = (term1391 A B C P s clauses x t c).
Proof. exact (MK_COMB (@lem8085339) (@lem8085338 A B C P s clauses x t c)). Qed.
Lemma lem8085341 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1354 A B C P clauses c x _106907) = (term1354 A B C P clauses c x _106907).
Proof. exact (eq_refl (term1354 A B C P clauses c x _106907)). Qed.
Lemma lem8085342 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1392 A B C P s t clauses c x _106907) = (term1393 A B C P s t clauses c x _106907).
Proof. exact (MK_COMB (@lem8085340 A B C P s clauses x t c) (@lem8085341 A B C P clauses c x _106907)). Qed.
Lemma lem8085343 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1394 A B C P s clauses c x _106907) = (term1395 A B C P s clauses c x _106907).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8085342 A B C P s t clauses c x _106907)). Qed.
Lemma lem8085344 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8085345 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1383 A B C P s clauses c x _106907) = (term1396 A B C P s clauses c x _106907).
Proof. exact (MK_COMB (@lem8085344 B C P) (@lem8085343 A B C P s clauses c x _106907)). Qed.
Lemma lem8085346 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : ((term1382 A B C P s clauses c x _106907) = (term1383 A B C P s clauses c x _106907)) = ((term1376 A B C P s clauses c x _106907) = (term1396 A B C P s clauses c x _106907)).
Proof. exact (MK_COMB (@lem8085337 A B C P s clauses c x _106907) (@lem8085345 A B C P s clauses c x _106907)). Qed.
Lemma lem8085347 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1376 A B C P s clauses c x _106907) = (term1396 A B C P s clauses c x _106907).
Proof. exact (EQ_MP (@lem8085346 A B C P s clauses c x _106907) (@lem8085327 A B C P s clauses c x _106907)). Qed.
Lemma lem8085349 {A : Type'} (P : A -> Prop) (Q : Prop) : (term714 A P Q) = (term715 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8085350 {P : Type'} (P' : P -> Prop) (Q : Prop) : (term714 P P' Q) = (term715 P P' Q).
Proof. exact (@lem8085349 P P' Q). Qed.
Lemma lem8085351 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1397 A B C P s t clauses c x _106907) = (term1398 A B C P s t clauses c x _106907).
Proof. exact (@lem8085350 P (term437 A B C P s clauses x t c) (term1354 A B C P clauses c x _106907)). Qed.
Lemma lem8085352 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) (a : P) : (term1399 A B C P s clauses x t c a) = (term435 A B C P s clauses x t c a).
Proof. exact (eq_refl (term1399 A B C P s clauses x t c a)). Qed.
Lemma lem8085353 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term1400 A B C P s clauses x t c) = (term437 A B C P s clauses x t c).
Proof. exact (fun_ext (fun a : P => @lem8085352 A B C P s clauses x t c a)). Qed.
Lemma lem8085354 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8085355 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term1401 A B C P s clauses x t c) = (term438 A B C P s clauses x t c).
Proof. exact (MK_COMB (@lem8085354 P) (@lem8085353 A B C P s clauses x t c)). Qed.
Lemma lem8085356 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8085357 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) : (term1402 A B C P s clauses x t c) = (term1391 A B C P s clauses x t c).
Proof. exact (MK_COMB (@lem8085356) (@lem8085355 A B C P s clauses x t c)). Qed.
Lemma lem8085358 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1354 A B C P clauses c x _106907) = (term1354 A B C P clauses c x _106907).
Proof. exact (eq_refl (term1354 A B C P clauses c x _106907)). Qed.
Lemma lem8085359 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1397 A B C P s t clauses c x _106907) = (term1393 A B C P s t clauses c x _106907).
Proof. exact (MK_COMB (@lem8085357 A B C P s clauses x t c) (@lem8085358 A B C P clauses c x _106907)). Qed.
Lemma lem8085360 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8085361 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1403 A B C P s t clauses c x _106907) = (term1404 A B C P s t clauses c x _106907).
Proof. exact (MK_COMB (@lem8085360) (@lem8085359 A B C P s t clauses c x _106907)). Qed.
Lemma lem8085362 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) (a : P) : (term1399 A B C P s clauses x t c a) = (term435 A B C P s clauses x t c a).
Proof. exact (eq_refl (term1399 A B C P s clauses x t c a)). Qed.
Lemma lem8085363 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8085364 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (x : A) (t : type1475 B C P) (c : C) (a : P) : (term1405 A B C P s clauses x t c a) = (term1406 A B C P s clauses x t c a).
Proof. exact (MK_COMB (@lem8085363) (@lem8085362 A B C P s clauses x t c a)). Qed.
Lemma lem8085365 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1354 A B C P clauses c x _106907) = (term1354 A B C P clauses c x _106907).
Proof. exact (eq_refl (term1354 A B C P clauses c x _106907)). Qed.
Lemma lem8085366 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (a : P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1407 A B C P s t a clauses c x _106907) = (term1408 A B C P s t a clauses c x _106907).
Proof. exact (MK_COMB (@lem8085364 A B C P s clauses x t c a) (@lem8085365 A B C P clauses c x _106907)). Qed.
Lemma lem8085367 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1409 A B C P s t clauses c x _106907) = (term1410 A B C P s t clauses c x _106907).
Proof. exact (fun_ext (fun a : P => @lem8085366 A B C P s t a clauses c x _106907)). Qed.
Lemma lem8085368 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8085369 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1398 A B C P s t clauses c x _106907) = (term1411 A B C P s t clauses c x _106907).
Proof. exact (MK_COMB (@lem8085368 P) (@lem8085367 A B C P s t clauses c x _106907)). Qed.
Lemma lem8085370 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : ((term1397 A B C P s t clauses c x _106907) = (term1398 A B C P s t clauses c x _106907)) = ((term1393 A B C P s t clauses c x _106907) = (term1411 A B C P s t clauses c x _106907)).
Proof. exact (MK_COMB (@lem8085361 A B C P s t clauses c x _106907) (@lem8085369 A B C P s t clauses c x _106907)). Qed.
Lemma lem8085371 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1393 A B C P s t clauses c x _106907) = (term1411 A B C P s t clauses c x _106907).
Proof. exact (EQ_MP (@lem8085370 A B C P s t clauses c x _106907) (@lem8085351 A B C P s t clauses c x _106907)). Qed.
Lemma lem8085372 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1395 A B C P s clauses c x _106907) = (term1412 A B C P s clauses c x _106907).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8085371 A B C P s t clauses c x _106907)). Qed.
Lemma lem8085373 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8085374 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1396 A B C P s clauses c x _106907) = (term1413 A B C P s clauses c x _106907).
Proof. exact (MK_COMB (@lem8085373 B C P) (@lem8085372 A B C P s clauses c x _106907)). Qed.
Lemma lem8085375 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1376 A B C P s clauses c x _106907) = (term1413 A B C P s clauses c x _106907).
Proof. exact (TRANS (@lem8085347 A B C P s clauses c x _106907) (@lem8085374 A B C P s clauses c x _106907)). Qed.
Lemma lem8085376 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1378 A B C P clauses c x _106907) = (term1414 A B C P clauses c x _106907).
Proof. exact (fun_ext (fun s : P -> A => @lem8085375 A B C P s clauses c x _106907)). Qed.
Lemma lem8085377 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8085378 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1379 A B C P clauses c x _106907) = (term1415 A B C P clauses c x _106907).
Proof. exact (MK_COMB (@lem8085377 A P) (@lem8085376 A B C P clauses c x _106907)). Qed.
Lemma lem8085379 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1364 A B C P clauses c x _106907) = (term1415 A B C P clauses c x _106907).
Proof. exact (TRANS (@lem8085323 A B C P clauses c x _106907) (@lem8085378 A B C P clauses c x _106907)). Qed.
Lemma lem8085380 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1355 A B C P clauses c x _106907) = (term1415 A B C P clauses c x _106907).
Proof. exact (TRANS (@lem8085299 A B C P clauses c x _106907) (@lem8085379 A B C P clauses c x _106907)). Qed.
Lemma lem8085381 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1356 A B C P clauses c _106907) = (term1416 A B C P clauses c _106907).
Proof. exact (fun_ext (fun x : A => @lem8085380 A B C P clauses c x _106907)). Qed.
Lemma lem8085382 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8085383 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1357 A B C P clauses c _106907) = (term1417 A B C P clauses c _106907).
Proof. exact (MK_COMB (@lem8085382 A) (@lem8085381 A B C P clauses c _106907)). Qed.
Lemma lem8085385 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8085386 {A P : Type'} (P' : type1372 A P) : (term773 A P P') = (term774 A P P').
Proof. exact (@lem8085385 A (P -> A) P'). Qed.
Lemma lem8085387 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1418 A B C P clauses c _106907) = (term1419 A B C P clauses c _106907).
Proof. exact (@lem8085386 A P (term1420 A B C P clauses c _106907)). Qed.
Lemma lem8085388 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1421 A B C P clauses c _106907 x) = (term1414 A B C P clauses c x _106907).
Proof. exact (eq_refl (term1421 A B C P clauses c _106907 x)). Qed.
Lemma lem8085389 {A P : Type'} (s : P -> A) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8085390 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) (s : P -> A) : (term1422 A B C P clauses c _106907 x s) = (term1423 A B C P clauses c x _106907 s).
Proof. exact (MK_COMB (@lem8085388 A B C P clauses c x _106907) (@lem8085389 A P s)). Qed.
Lemma lem8085391 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1423 A B C P clauses c x _106907 s) = (term1413 A B C P s clauses c x _106907).
Proof. exact (eq_refl (term1423 A B C P clauses c x _106907 s)). Qed.
Lemma lem8085392 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1422 A B C P clauses c _106907 x s) = (term1413 A B C P s clauses c x _106907).
Proof. exact (TRANS (@lem8085390 A B C P clauses c x _106907 s) (@lem8085391 A B C P s clauses c x _106907)). Qed.
Lemma lem8085393 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1424 A B C P clauses c _106907 x) = (term1414 A B C P clauses c x _106907).
Proof. exact (fun_ext (fun s : P -> A => @lem8085392 A B C P s clauses c x _106907)). Qed.
Lemma lem8085394 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8085395 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1425 A B C P clauses c _106907 x) = (term1415 A B C P clauses c x _106907).
Proof. exact (MK_COMB (@lem8085394 A P) (@lem8085393 A B C P clauses c x _106907)). Qed.
Lemma lem8085396 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1426 A B C P clauses c _106907) = (term1416 A B C P clauses c _106907).
Proof. exact (fun_ext (fun x : A => @lem8085395 A B C P clauses c x _106907)). Qed.
Lemma lem8085397 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8085398 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1418 A B C P clauses c _106907) = (term1417 A B C P clauses c _106907).
Proof. exact (MK_COMB (@lem8085397 A) (@lem8085396 A B C P clauses c _106907)). Qed.
Lemma lem8085399 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8085400 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1427 A B C P clauses c _106907) = (term1428 A B C P clauses c _106907).
Proof. exact (MK_COMB (@lem8085399) (@lem8085398 A B C P clauses c _106907)). Qed.
Lemma lem8085401 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1421 A B C P clauses c _106907 x) = (term1414 A B C P clauses c x _106907).
Proof. exact (eq_refl (term1421 A B C P clauses c _106907 x)). Qed.
Lemma lem8085402 {A P : Type'} (s : type1410 A P) (x : A) : (s x) = (s x).
Proof. exact (eq_refl (s x)). Qed.
Lemma lem8085403 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) (s : type1410 A P) (x : A) : (term1429 A B C P clauses c _106907 s x) = (term1430 A B C P clauses c _106907 s x).
Proof. exact (MK_COMB (@lem8085401 A B C P clauses c x _106907) (@lem8085402 A P s x)). Qed.
Lemma lem8085404 {A B C P : Type'} (s : type1410 A P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1430 A B C P clauses c _106907 s x) = (term1431 A B C P s clauses c x _106907).
Proof. exact (eq_refl (term1430 A B C P clauses c _106907 s x)). Qed.
Lemma lem8085405 {A B C P : Type'} (s : type1410 A P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1429 A B C P clauses c _106907 s x) = (term1431 A B C P s clauses c x _106907).
Proof. exact (TRANS (@lem8085403 A B C P clauses c _106907 s x) (@lem8085404 A B C P s clauses c x _106907)). Qed.
Lemma lem8085406 {A B C P : Type'} (s : type1410 A P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1432 A B C P clauses c _106907 s) = (term1433 A B C P s clauses c _106907).
Proof. exact (fun_ext (fun x : A => @lem8085405 A B C P s clauses c x _106907)). Qed.
Lemma lem8085407 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8085408 {A B C P : Type'} (s : type1410 A P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1434 A B C P clauses c _106907 s) = (term1435 A B C P s clauses c _106907).
Proof. exact (MK_COMB (@lem8085407 A) (@lem8085406 A B C P s clauses c _106907)). Qed.
Lemma lem8085409 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1436 A B C P clauses c _106907) = (term1437 A B C P clauses c _106907).
Proof. exact (fun_ext (fun s : type1410 A P => @lem8085408 A B C P s clauses c _106907)). Qed.
Lemma lem8085410 {A P : Type'} : (@ex (A -> P -> A)) = (@ex (A -> P -> A)).
Proof. exact (eq_refl (@ex (A -> P -> A))). Qed.
Lemma lem8085411 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1419 A B C P clauses c _106907) = (term1438 A B C P clauses c _106907).
Proof. exact (MK_COMB (@lem8085410 A P) (@lem8085409 A B C P clauses c _106907)). Qed.
Lemma lem8085412 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : ((term1418 A B C P clauses c _106907) = (term1419 A B C P clauses c _106907)) = ((term1417 A B C P clauses c _106907) = (term1438 A B C P clauses c _106907)).
Proof. exact (MK_COMB (@lem8085400 A B C P clauses c _106907) (@lem8085411 A B C P clauses c _106907)). Qed.
Lemma lem8085413 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1417 A B C P clauses c _106907) = (term1438 A B C P clauses c _106907).
Proof. exact (EQ_MP (@lem8085412 A B C P clauses c _106907) (@lem8085387 A B C P clauses c _106907)). Qed.
Lemma lem8085415 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8085416 {A B C P : Type'} (P' : type1376 A B C P) : (term1439 A B C P P') = (term1440 A B C P P').
Proof. exact (@lem8085415 A (type1475 B C P) P'). Qed.
Lemma lem8085417 {A B C P : Type'} (s : type1410 A P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1441 A B C P s clauses c _106907) = (term1442 A B C P s clauses c _106907).
Proof. exact (@lem8085416 A B C P (term1443 A B C P s clauses c _106907)). Qed.
Lemma lem8085418 {A B C P : Type'} (s : type1410 A P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1444 A B C P s clauses c _106907 x) = (term1445 A B C P s clauses c x _106907).
Proof. exact (eq_refl (term1444 A B C P s clauses c _106907 x)). Qed.
Lemma lem8085419 {B C P : Type'} (t : type1475 B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8085420 {A B C P : Type'} (s : type1410 A P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) (t : type1475 B C P) : (term1446 A B C P s clauses c _106907 x t) = (term1447 A B C P s clauses c x _106907 t).
Proof. exact (MK_COMB (@lem8085418 A B C P s clauses c x _106907) (@lem8085419 B C P t)). Qed.
Lemma lem8085421 {A B C P : Type'} (s : type1410 A P) (t : type1475 B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1447 A B C P s clauses c x _106907 t) = (term1448 A B C P s t clauses c x _106907).
Proof. exact (eq_refl (term1447 A B C P s clauses c x _106907 t)). Qed.
Lemma lem8085422 {A B C P : Type'} (s : type1410 A P) (t : type1475 B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1446 A B C P s clauses c _106907 x t) = (term1448 A B C P s t clauses c x _106907).
Proof. exact (TRANS (@lem8085420 A B C P s clauses c x _106907 t) (@lem8085421 A B C P s t clauses c x _106907)). Qed.
Lemma lem8085423 {A B C P : Type'} (s : type1410 A P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1449 A B C P s clauses c _106907 x) = (term1445 A B C P s clauses c x _106907).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8085422 A B C P s t clauses c x _106907)). Qed.
Lemma lem8085424 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8085425 {A B C P : Type'} (s : type1410 A P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1450 A B C P s clauses c _106907 x) = (term1431 A B C P s clauses c x _106907).
Proof. exact (MK_COMB (@lem8085424 B C P) (@lem8085423 A B C P s clauses c x _106907)). Qed.
Lemma lem8085426 {A B C P : Type'} (s : type1410 A P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1451 A B C P s clauses c _106907) = (term1433 A B C P s clauses c _106907).
Proof. exact (fun_ext (fun x : A => @lem8085425 A B C P s clauses c x _106907)). Qed.
Lemma lem8085427 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8085428 {A B C P : Type'} (s : type1410 A P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1441 A B C P s clauses c _106907) = (term1435 A B C P s clauses c _106907).
Proof. exact (MK_COMB (@lem8085427 A) (@lem8085426 A B C P s clauses c _106907)). Qed.
Lemma lem8085429 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8085430 {A B C P : Type'} (s : type1410 A P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1452 A B C P s clauses c _106907) = (term1453 A B C P s clauses c _106907).
Proof. exact (MK_COMB (@lem8085429) (@lem8085428 A B C P s clauses c _106907)). Qed.
Lemma lem8085431 {A B C P : Type'} (s : type1410 A P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1444 A B C P s clauses c _106907 x) = (term1445 A B C P s clauses c x _106907).
Proof. exact (eq_refl (term1444 A B C P s clauses c _106907 x)). Qed.
Lemma lem8085432 {A B C P : Type'} (t : type1418 A B C P) (x : A) : (t x) = (t x).
Proof. exact (eq_refl (t x)). Qed.
Lemma lem8085433 {A B C P : Type'} (s : type1410 A P) (clauses : type1638 A B C P) (c : C) (_106907 : B) (t : type1418 A B C P) (x : A) : (term1454 A B C P s clauses c _106907 t x) = (term1455 A B C P s clauses c _106907 t x).
Proof. exact (MK_COMB (@lem8085431 A B C P s clauses c x _106907) (@lem8085432 A B C P t x)). Qed.
Lemma lem8085434 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1455 A B C P s clauses c _106907 t x) = (term1456 A B C P s t clauses c x _106907).
Proof. exact (eq_refl (term1455 A B C P s clauses c _106907 t x)). Qed.
Lemma lem8085435 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1454 A B C P s clauses c _106907 t x) = (term1456 A B C P s t clauses c x _106907).
Proof. exact (TRANS (@lem8085433 A B C P s clauses c _106907 t x) (@lem8085434 A B C P s t clauses c x _106907)). Qed.
Lemma lem8085436 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1457 A B C P s clauses c _106907 t) = (term1458 A B C P s t clauses c _106907).
Proof. exact (fun_ext (fun x : A => @lem8085435 A B C P s t clauses c x _106907)). Qed.
Lemma lem8085437 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8085438 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1459 A B C P s clauses c _106907 t) = (term1460 A B C P s t clauses c _106907).
Proof. exact (MK_COMB (@lem8085437 A) (@lem8085436 A B C P s t clauses c _106907)). Qed.
Lemma lem8085439 {A B C P : Type'} (s : type1410 A P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1461 A B C P s clauses c _106907) = (term1462 A B C P s clauses c _106907).
Proof. exact (fun_ext (fun t : type1418 A B C P => @lem8085438 A B C P s t clauses c _106907)). Qed.
Lemma lem8085440 {A B C P : Type'} : (@ex (A -> C -> P -> B)) = (@ex (A -> C -> P -> B)).
Proof. exact (eq_refl (@ex (A -> C -> P -> B))). Qed.
Lemma lem8085441 {A B C P : Type'} (s : type1410 A P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1442 A B C P s clauses c _106907) = (term1463 A B C P s clauses c _106907).
Proof. exact (MK_COMB (@lem8085440 A B C P) (@lem8085439 A B C P s clauses c _106907)). Qed.
Lemma lem8085442 {A B C P : Type'} (s : type1410 A P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : ((term1441 A B C P s clauses c _106907) = (term1442 A B C P s clauses c _106907)) = ((term1435 A B C P s clauses c _106907) = (term1463 A B C P s clauses c _106907)).
Proof. exact (MK_COMB (@lem8085430 A B C P s clauses c _106907) (@lem8085441 A B C P s clauses c _106907)). Qed.
Lemma lem8085443 {A B C P : Type'} (s : type1410 A P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1435 A B C P s clauses c _106907) = (term1463 A B C P s clauses c _106907).
Proof. exact (EQ_MP (@lem8085442 A B C P s clauses c _106907) (@lem8085417 A B C P s clauses c _106907)). Qed.
Lemma lem8085445 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8085446 {A P : Type'} (P' : type1413 A P) : (term771 A P P') = (term772 A P P').
Proof. exact (@lem8085445 A P P'). Qed.
Lemma lem8085447 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1464 A B C P s t clauses c _106907) = (term1465 A B C P s t clauses c _106907).
Proof. exact (@lem8085446 A P (term1466 A B C P s t clauses c _106907)). Qed.
Lemma lem8085448 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1467 A B C P s t clauses c _106907 x) = (term1468 A B C P s t clauses c x _106907).
Proof. exact (eq_refl (term1467 A B C P s t clauses c _106907 x)). Qed.
Lemma lem8085449 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8085450 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) (a : P) : (term1469 A B C P s t clauses c _106907 x a) = (term1470 A B C P s t clauses c x _106907 a).
Proof. exact (MK_COMB (@lem8085448 A B C P s t clauses c x _106907) (@lem8085449 P a)). Qed.
Lemma lem8085451 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (a : P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1470 A B C P s t clauses c x _106907 a) = (term1471 A B C P s t a clauses c x _106907).
Proof. exact (eq_refl (term1470 A B C P s t clauses c x _106907 a)). Qed.
Lemma lem8085452 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (a : P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1469 A B C P s t clauses c _106907 x a) = (term1471 A B C P s t a clauses c x _106907).
Proof. exact (TRANS (@lem8085450 A B C P s t clauses c x _106907 a) (@lem8085451 A B C P s t a clauses c x _106907)). Qed.
Lemma lem8085453 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1472 A B C P s t clauses c _106907 x) = (term1468 A B C P s t clauses c x _106907).
Proof. exact (fun_ext (fun a : P => @lem8085452 A B C P s t a clauses c x _106907)). Qed.
Lemma lem8085454 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8085455 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1473 A B C P s t clauses c _106907 x) = (term1456 A B C P s t clauses c x _106907).
Proof. exact (MK_COMB (@lem8085454 P) (@lem8085453 A B C P s t clauses c x _106907)). Qed.
Lemma lem8085456 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1474 A B C P s t clauses c _106907) = (term1458 A B C P s t clauses c _106907).
Proof. exact (fun_ext (fun x : A => @lem8085455 A B C P s t clauses c x _106907)). Qed.
Lemma lem8085457 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8085458 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1464 A B C P s t clauses c _106907) = (term1460 A B C P s t clauses c _106907).
Proof. exact (MK_COMB (@lem8085457 A) (@lem8085456 A B C P s t clauses c _106907)). Qed.
Lemma lem8085459 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8085460 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1475 A B C P s t clauses c _106907) = (term1476 A B C P s t clauses c _106907).
Proof. exact (MK_COMB (@lem8085459) (@lem8085458 A B C P s t clauses c _106907)). Qed.
Lemma lem8085461 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1467 A B C P s t clauses c _106907 x) = (term1468 A B C P s t clauses c x _106907).
Proof. exact (eq_refl (term1467 A B C P s t clauses c _106907 x)). Qed.
Lemma lem8085462 {A P : Type'} (a : A -> P) (x : A) : (a x) = (a x).
Proof. exact (eq_refl (a x)). Qed.
Lemma lem8085463 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) (a : A -> P) (x : A) : (term1477 A B C P s t clauses c _106907 a x) = (term1478 A B C P s t clauses c _106907 a x).
Proof. exact (MK_COMB (@lem8085461 A B C P s t clauses c x _106907) (@lem8085462 A P a x)). Qed.
Lemma lem8085464 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (a : A -> P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1478 A B C P s t clauses c _106907 a x) = (term1479 A B C P s t a clauses c x _106907).
Proof. exact (eq_refl (term1478 A B C P s t clauses c _106907 a x)). Qed.
Lemma lem8085465 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (a : A -> P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1477 A B C P s t clauses c _106907 a x) = (term1479 A B C P s t a clauses c x _106907).
Proof. exact (TRANS (@lem8085463 A B C P s t clauses c _106907 a x) (@lem8085464 A B C P s t a clauses c x _106907)). Qed.
Lemma lem8085466 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (a : A -> P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1480 A B C P s t clauses c _106907 a) = (term1481 A B C P s t a clauses c _106907).
Proof. exact (fun_ext (fun x : A => @lem8085465 A B C P s t a clauses c x _106907)). Qed.
Lemma lem8085467 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8085468 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (a : A -> P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1482 A B C P s t clauses c _106907 a) = (term1483 A B C P s t a clauses c _106907).
Proof. exact (MK_COMB (@lem8085467 A) (@lem8085466 A B C P s t a clauses c _106907)). Qed.
Lemma lem8085469 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1484 A B C P s t clauses c _106907) = (term1485 A B C P s t clauses c _106907).
Proof. exact (fun_ext (fun a : A -> P => @lem8085468 A B C P s t a clauses c _106907)). Qed.
Lemma lem8085470 {A P : Type'} : (@ex (A -> P)) = (@ex (A -> P)).
Proof. exact (eq_refl (@ex (A -> P))). Qed.
Lemma lem8085471 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1465 A B C P s t clauses c _106907) = (term1486 A B C P s t clauses c _106907).
Proof. exact (MK_COMB (@lem8085470 A P) (@lem8085469 A B C P s t clauses c _106907)). Qed.
Lemma lem8085472 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : ((term1464 A B C P s t clauses c _106907) = (term1465 A B C P s t clauses c _106907)) = ((term1460 A B C P s t clauses c _106907) = (term1486 A B C P s t clauses c _106907)).
Proof. exact (MK_COMB (@lem8085460 A B C P s t clauses c _106907) (@lem8085471 A B C P s t clauses c _106907)). Qed.
Lemma lem8085473 {A B C P : Type'} (s : type1410 A P) (t : type1418 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1460 A B C P s t clauses c _106907) = (term1486 A B C P s t clauses c _106907).
Proof. exact (EQ_MP (@lem8085472 A B C P s t clauses c _106907) (@lem8085447 A B C P s t clauses c _106907)). Qed.
Lemma lem8085474 {A B C P : Type'} (s : type1410 A P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1462 A B C P s clauses c _106907) = (term1487 A B C P s clauses c _106907).
Proof. exact (fun_ext (fun t : type1418 A B C P => @lem8085473 A B C P s t clauses c _106907)). Qed.
Lemma lem8085475 {A B C P : Type'} : (@ex (A -> C -> P -> B)) = (@ex (A -> C -> P -> B)).
Proof. exact (eq_refl (@ex (A -> C -> P -> B))). Qed.
Lemma lem8085476 {A B C P : Type'} (s : type1410 A P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1463 A B C P s clauses c _106907) = (term1488 A B C P s clauses c _106907).
Proof. exact (MK_COMB (@lem8085475 A B C P) (@lem8085474 A B C P s clauses c _106907)). Qed.
Lemma lem8085477 {A B C P : Type'} (s : type1410 A P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1435 A B C P s clauses c _106907) = (term1488 A B C P s clauses c _106907).
Proof. exact (TRANS (@lem8085443 A B C P s clauses c _106907) (@lem8085476 A B C P s clauses c _106907)). Qed.
Lemma lem8085478 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1437 A B C P clauses c _106907) = (term1489 A B C P clauses c _106907).
Proof. exact (fun_ext (fun s : type1410 A P => @lem8085477 A B C P s clauses c _106907)). Qed.
Lemma lem8085479 {A P : Type'} : (@ex (A -> P -> A)) = (@ex (A -> P -> A)).
Proof. exact (eq_refl (@ex (A -> P -> A))). Qed.
Lemma lem8085480 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1438 A B C P clauses c _106907) = (term1490 A B C P clauses c _106907).
Proof. exact (MK_COMB (@lem8085479 A P) (@lem8085478 A B C P clauses c _106907)). Qed.
Lemma lem8085481 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1417 A B C P clauses c _106907) = (term1490 A B C P clauses c _106907).
Proof. exact (TRANS (@lem8085413 A B C P clauses c _106907) (@lem8085480 A B C P clauses c _106907)). Qed.
Lemma lem8085482 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1357 A B C P clauses c _106907) = (term1490 A B C P clauses c _106907).
Proof. exact (TRANS (@lem8085383 A B C P clauses c _106907) (@lem8085481 A B C P clauses c _106907)). Qed.
Lemma lem8085483 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : (term1358 A B C P clauses _106907) = (term1491 A B C P clauses _106907).
Proof. exact (fun_ext (fun c : C => @lem8085482 A B C P clauses c _106907)). Qed.
Lemma lem8085484 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8085485 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : (term1359 A B C P clauses _106907) = (term1492 A B C P clauses _106907).
Proof. exact (MK_COMB (@lem8085484 C) (@lem8085483 A B C P clauses _106907)). Qed.
Lemma lem8085487 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8085488 {A C P : Type'} (P' : type1443 A C P) : (term850 A C P P') = (term851 A C P P').
Proof. exact (@lem8085487 C (type1410 A P) P'). Qed.
Lemma lem8085489 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : (term1493 A B C P clauses _106907) = (term1494 A B C P clauses _106907).
Proof. exact (@lem8085488 A C P (term1495 A B C P clauses _106907)). Qed.
Lemma lem8085490 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1496 A B C P clauses _106907 c) = (term1489 A B C P clauses c _106907).
Proof. exact (eq_refl (term1496 A B C P clauses _106907 c)). Qed.
Lemma lem8085491 {A P : Type'} (s : type1410 A P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8085492 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) (s : type1410 A P) : (term1497 A B C P clauses _106907 c s) = (term1498 A B C P clauses c _106907 s).
Proof. exact (MK_COMB (@lem8085490 A B C P clauses c _106907) (@lem8085491 A P s)). Qed.
Lemma lem8085493 {A B C P : Type'} (s : type1410 A P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1498 A B C P clauses c _106907 s) = (term1488 A B C P s clauses c _106907).
Proof. exact (eq_refl (term1498 A B C P clauses c _106907 s)). Qed.
Lemma lem8085494 {A B C P : Type'} (s : type1410 A P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1497 A B C P clauses _106907 c s) = (term1488 A B C P s clauses c _106907).
Proof. exact (TRANS (@lem8085492 A B C P clauses c _106907 s) (@lem8085493 A B C P s clauses c _106907)). Qed.
Lemma lem8085495 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1499 A B C P clauses _106907 c) = (term1489 A B C P clauses c _106907).
Proof. exact (fun_ext (fun s : type1410 A P => @lem8085494 A B C P s clauses c _106907)). Qed.
Lemma lem8085496 {A P : Type'} : (@ex (A -> P -> A)) = (@ex (A -> P -> A)).
Proof. exact (eq_refl (@ex (A -> P -> A))). Qed.
Lemma lem8085497 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1500 A B C P clauses _106907 c) = (term1490 A B C P clauses c _106907).
Proof. exact (MK_COMB (@lem8085496 A P) (@lem8085495 A B C P clauses c _106907)). Qed.
Lemma lem8085498 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : (term1501 A B C P clauses _106907) = (term1491 A B C P clauses _106907).
Proof. exact (fun_ext (fun c : C => @lem8085497 A B C P clauses c _106907)). Qed.
Lemma lem8085499 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8085500 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : (term1493 A B C P clauses _106907) = (term1492 A B C P clauses _106907).
Proof. exact (MK_COMB (@lem8085499 C) (@lem8085498 A B C P clauses _106907)). Qed.
Lemma lem8085501 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8085502 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : (term1502 A B C P clauses _106907) = (term1503 A B C P clauses _106907).
Proof. exact (MK_COMB (@lem8085501) (@lem8085500 A B C P clauses _106907)). Qed.
Lemma lem8085503 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1496 A B C P clauses _106907 c) = (term1489 A B C P clauses c _106907).
Proof. exact (eq_refl (term1496 A B C P clauses _106907 c)). Qed.
Lemma lem8085504 {A C P : Type'} (s : type1464 A C P) (c : C) : (s c) = (s c).
Proof. exact (eq_refl (s c)). Qed.
Lemma lem8085505 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) (s : type1464 A C P) (c : C) : (term1504 A B C P clauses _106907 s c) = (term1505 A B C P clauses _106907 s c).
Proof. exact (MK_COMB (@lem8085503 A B C P clauses c _106907) (@lem8085504 A C P s c)). Qed.
Lemma lem8085506 {A B C P : Type'} (s : type1464 A C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1505 A B C P clauses _106907 s c) = (term1506 A B C P s clauses c _106907).
Proof. exact (eq_refl (term1505 A B C P clauses _106907 s c)). Qed.
Lemma lem8085507 {A B C P : Type'} (s : type1464 A C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1504 A B C P clauses _106907 s c) = (term1506 A B C P s clauses c _106907).
Proof. exact (TRANS (@lem8085505 A B C P clauses _106907 s c) (@lem8085506 A B C P s clauses c _106907)). Qed.
Lemma lem8085508 {A B C P : Type'} (s : type1464 A C P) (clauses : type1638 A B C P) (_106907 : B) : (term1507 A B C P clauses _106907 s) = (term1508 A B C P s clauses _106907).
Proof. exact (fun_ext (fun c : C => @lem8085507 A B C P s clauses c _106907)). Qed.
Lemma lem8085509 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8085510 {A B C P : Type'} (s : type1464 A C P) (clauses : type1638 A B C P) (_106907 : B) : (term1509 A B C P clauses _106907 s) = (term1510 A B C P s clauses _106907).
Proof. exact (MK_COMB (@lem8085509 C) (@lem8085508 A B C P s clauses _106907)). Qed.
Lemma lem8085511 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : (term1511 A B C P clauses _106907) = (term1512 A B C P clauses _106907).
Proof. exact (fun_ext (fun s : type1464 A C P => @lem8085510 A B C P s clauses _106907)). Qed.
Lemma lem8085512 {A C P : Type'} : (@ex (C -> A -> P -> A)) = (@ex (C -> A -> P -> A)).
Proof. exact (eq_refl (@ex (C -> A -> P -> A))). Qed.
Lemma lem8085513 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : (term1494 A B C P clauses _106907) = (term1513 A B C P clauses _106907).
Proof. exact (MK_COMB (@lem8085512 A C P) (@lem8085511 A B C P clauses _106907)). Qed.
Lemma lem8085514 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : ((term1493 A B C P clauses _106907) = (term1494 A B C P clauses _106907)) = ((term1492 A B C P clauses _106907) = (term1513 A B C P clauses _106907)).
Proof. exact (MK_COMB (@lem8085502 A B C P clauses _106907) (@lem8085513 A B C P clauses _106907)). Qed.
Lemma lem8085515 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : (term1492 A B C P clauses _106907) = (term1513 A B C P clauses _106907).
Proof. exact (EQ_MP (@lem8085514 A B C P clauses _106907) (@lem8085489 A B C P clauses _106907)). Qed.
Lemma lem8085517 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8085518 {A B C P : Type'} (P' : type1504 A B C P) : (term1514 A B C P P') = (term1515 A B C P P').
Proof. exact (@lem8085517 C (type1418 A B C P) P'). Qed.
Lemma lem8085519 {A B C P : Type'} (s : type1464 A C P) (clauses : type1638 A B C P) (_106907 : B) : (term1516 A B C P s clauses _106907) = (term1517 A B C P s clauses _106907).
Proof. exact (@lem8085518 A B C P (term1518 A B C P s clauses _106907)). Qed.
Lemma lem8085520 {A B C P : Type'} (s : type1464 A C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1519 A B C P s clauses _106907 c) = (term1520 A B C P s clauses c _106907).
Proof. exact (eq_refl (term1519 A B C P s clauses _106907 c)). Qed.
Lemma lem8085521 {A B C P : Type'} (t : type1418 A B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8085522 {A B C P : Type'} (s : type1464 A C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) (t : type1418 A B C P) : (term1521 A B C P s clauses _106907 c t) = (term1522 A B C P s clauses c _106907 t).
Proof. exact (MK_COMB (@lem8085520 A B C P s clauses c _106907) (@lem8085521 A B C P t)). Qed.
Lemma lem8085523 {A B C P : Type'} (s : type1464 A C P) (t : type1418 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1522 A B C P s clauses c _106907 t) = (term1523 A B C P s t clauses c _106907).
Proof. exact (eq_refl (term1522 A B C P s clauses c _106907 t)). Qed.
Lemma lem8085524 {A B C P : Type'} (s : type1464 A C P) (t : type1418 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1521 A B C P s clauses _106907 c t) = (term1523 A B C P s t clauses c _106907).
Proof. exact (TRANS (@lem8085522 A B C P s clauses c _106907 t) (@lem8085523 A B C P s t clauses c _106907)). Qed.
Lemma lem8085525 {A B C P : Type'} (s : type1464 A C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1524 A B C P s clauses _106907 c) = (term1520 A B C P s clauses c _106907).
Proof. exact (fun_ext (fun t : type1418 A B C P => @lem8085524 A B C P s t clauses c _106907)). Qed.
Lemma lem8085526 {A B C P : Type'} : (@ex (A -> C -> P -> B)) = (@ex (A -> C -> P -> B)).
Proof. exact (eq_refl (@ex (A -> C -> P -> B))). Qed.
Lemma lem8085527 {A B C P : Type'} (s : type1464 A C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1525 A B C P s clauses _106907 c) = (term1506 A B C P s clauses c _106907).
Proof. exact (MK_COMB (@lem8085526 A B C P) (@lem8085525 A B C P s clauses c _106907)). Qed.
Lemma lem8085528 {A B C P : Type'} (s : type1464 A C P) (clauses : type1638 A B C P) (_106907 : B) : (term1526 A B C P s clauses _106907) = (term1508 A B C P s clauses _106907).
Proof. exact (fun_ext (fun c : C => @lem8085527 A B C P s clauses c _106907)). Qed.
Lemma lem8085529 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8085530 {A B C P : Type'} (s : type1464 A C P) (clauses : type1638 A B C P) (_106907 : B) : (term1516 A B C P s clauses _106907) = (term1510 A B C P s clauses _106907).
Proof. exact (MK_COMB (@lem8085529 C) (@lem8085528 A B C P s clauses _106907)). Qed.
Lemma lem8085531 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8085532 {A B C P : Type'} (s : type1464 A C P) (clauses : type1638 A B C P) (_106907 : B) : (term1527 A B C P s clauses _106907) = (term1528 A B C P s clauses _106907).
Proof. exact (MK_COMB (@lem8085531) (@lem8085530 A B C P s clauses _106907)). Qed.
Lemma lem8085533 {A B C P : Type'} (s : type1464 A C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1519 A B C P s clauses _106907 c) = (term1520 A B C P s clauses c _106907).
Proof. exact (eq_refl (term1519 A B C P s clauses _106907 c)). Qed.
Lemma lem8085534 {A B C P : Type'} (t : type1513 A B C P) (c : C) : (t c) = (t c).
Proof. exact (eq_refl (t c)). Qed.
Lemma lem8085535 {A B C P : Type'} (s : type1464 A C P) (clauses : type1638 A B C P) (_106907 : B) (t : type1513 A B C P) (c : C) : (term1529 A B C P s clauses _106907 t c) = (term1530 A B C P s clauses _106907 t c).
Proof. exact (MK_COMB (@lem8085533 A B C P s clauses c _106907) (@lem8085534 A B C P t c)). Qed.
Lemma lem8085536 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1530 A B C P s clauses _106907 t c) = (term1531 A B C P s t clauses c _106907).
Proof. exact (eq_refl (term1530 A B C P s clauses _106907 t c)). Qed.
Lemma lem8085537 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1529 A B C P s clauses _106907 t c) = (term1531 A B C P s t clauses c _106907).
Proof. exact (TRANS (@lem8085535 A B C P s clauses _106907 t c) (@lem8085536 A B C P s t clauses c _106907)). Qed.
Lemma lem8085538 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1532 A B C P s clauses _106907 t) = (term1533 A B C P s t clauses _106907).
Proof. exact (fun_ext (fun c : C => @lem8085537 A B C P s t clauses c _106907)). Qed.
Lemma lem8085539 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8085540 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1534 A B C P s clauses _106907 t) = (term1535 A B C P s t clauses _106907).
Proof. exact (MK_COMB (@lem8085539 C) (@lem8085538 A B C P s t clauses _106907)). Qed.
Lemma lem8085541 {A B C P : Type'} (s : type1464 A C P) (clauses : type1638 A B C P) (_106907 : B) : (term1536 A B C P s clauses _106907) = (term1537 A B C P s clauses _106907).
Proof. exact (fun_ext (fun t : type1513 A B C P => @lem8085540 A B C P s t clauses _106907)). Qed.
Lemma lem8085542 {A B C P : Type'} : (@ex (C -> A -> C -> P -> B)) = (@ex (C -> A -> C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> A -> C -> P -> B))). Qed.
Lemma lem8085543 {A B C P : Type'} (s : type1464 A C P) (clauses : type1638 A B C P) (_106907 : B) : (term1517 A B C P s clauses _106907) = (term1538 A B C P s clauses _106907).
Proof. exact (MK_COMB (@lem8085542 A B C P) (@lem8085541 A B C P s clauses _106907)). Qed.
Lemma lem8085544 {A B C P : Type'} (s : type1464 A C P) (clauses : type1638 A B C P) (_106907 : B) : ((term1516 A B C P s clauses _106907) = (term1517 A B C P s clauses _106907)) = ((term1510 A B C P s clauses _106907) = (term1538 A B C P s clauses _106907)).
Proof. exact (MK_COMB (@lem8085532 A B C P s clauses _106907) (@lem8085543 A B C P s clauses _106907)). Qed.
Lemma lem8085545 {A B C P : Type'} (s : type1464 A C P) (clauses : type1638 A B C P) (_106907 : B) : (term1510 A B C P s clauses _106907) = (term1538 A B C P s clauses _106907).
Proof. exact (EQ_MP (@lem8085544 A B C P s clauses _106907) (@lem8085519 A B C P s clauses _106907)). Qed.
Lemma lem8085547 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8085548 {A C P : Type'} (P' : type1447 A C P) : (term898 A C P P') = (term899 A C P P').
Proof. exact (@lem8085547 C (A -> P) P'). Qed.
Lemma lem8085549 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1539 A B C P s t clauses _106907) = (term1540 A B C P s t clauses _106907).
Proof. exact (@lem8085548 A C P (term1541 A B C P s t clauses _106907)). Qed.
Lemma lem8085550 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1542 A B C P s t clauses _106907 c) = (term1543 A B C P s t clauses c _106907).
Proof. exact (eq_refl (term1542 A B C P s t clauses _106907 c)). Qed.
Lemma lem8085551 {A P : Type'} (a : A -> P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8085552 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) (a : A -> P) : (term1544 A B C P s t clauses _106907 c a) = (term1545 A B C P s t clauses c _106907 a).
Proof. exact (MK_COMB (@lem8085550 A B C P s t clauses c _106907) (@lem8085551 A P a)). Qed.
Lemma lem8085553 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (a : A -> P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1545 A B C P s t clauses c _106907 a) = (term1546 A B C P s t a clauses c _106907).
Proof. exact (eq_refl (term1545 A B C P s t clauses c _106907 a)). Qed.
Lemma lem8085554 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (a : A -> P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1544 A B C P s t clauses _106907 c a) = (term1546 A B C P s t a clauses c _106907).
Proof. exact (TRANS (@lem8085552 A B C P s t clauses c _106907 a) (@lem8085553 A B C P s t a clauses c _106907)). Qed.
Lemma lem8085555 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1547 A B C P s t clauses _106907 c) = (term1543 A B C P s t clauses c _106907).
Proof. exact (fun_ext (fun a : A -> P => @lem8085554 A B C P s t a clauses c _106907)). Qed.
Lemma lem8085556 {A P : Type'} : (@ex (A -> P)) = (@ex (A -> P)).
Proof. exact (eq_refl (@ex (A -> P))). Qed.
Lemma lem8085557 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1548 A B C P s t clauses _106907 c) = (term1531 A B C P s t clauses c _106907).
Proof. exact (MK_COMB (@lem8085556 A P) (@lem8085555 A B C P s t clauses c _106907)). Qed.
Lemma lem8085558 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1549 A B C P s t clauses _106907) = (term1533 A B C P s t clauses _106907).
Proof. exact (fun_ext (fun c : C => @lem8085557 A B C P s t clauses c _106907)). Qed.
Lemma lem8085559 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8085560 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1539 A B C P s t clauses _106907) = (term1535 A B C P s t clauses _106907).
Proof. exact (MK_COMB (@lem8085559 C) (@lem8085558 A B C P s t clauses _106907)). Qed.
Lemma lem8085561 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8085562 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1550 A B C P s t clauses _106907) = (term1551 A B C P s t clauses _106907).
Proof. exact (MK_COMB (@lem8085561) (@lem8085560 A B C P s t clauses _106907)). Qed.
Lemma lem8085563 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1542 A B C P s t clauses _106907 c) = (term1543 A B C P s t clauses c _106907).
Proof. exact (eq_refl (term1542 A B C P s t clauses _106907 c)). Qed.
Lemma lem8085564 {A C P : Type'} (a : type1469 A C P) (c : C) : (a c) = (a c).
Proof. exact (eq_refl (a c)). Qed.
Lemma lem8085565 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (clauses : type1638 A B C P) (_106907 : B) (a : type1469 A C P) (c : C) : (term1552 A B C P s t clauses _106907 a c) = (term1553 A B C P s t clauses _106907 a c).
Proof. exact (MK_COMB (@lem8085563 A B C P s t clauses c _106907) (@lem8085564 A C P a c)). Qed.
Lemma lem8085566 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (a : type1469 A C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1553 A B C P s t clauses _106907 a c) = (term1554 A B C P s t a clauses c _106907).
Proof. exact (eq_refl (term1553 A B C P s t clauses _106907 a c)). Qed.
Lemma lem8085567 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (a : type1469 A C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1552 A B C P s t clauses _106907 a c) = (term1554 A B C P s t a clauses c _106907).
Proof. exact (TRANS (@lem8085565 A B C P s t clauses _106907 a c) (@lem8085566 A B C P s t a clauses c _106907)). Qed.
Lemma lem8085568 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (a : type1469 A C P) (clauses : type1638 A B C P) (_106907 : B) : (term1555 A B C P s t clauses _106907 a) = (term1556 A B C P s t a clauses _106907).
Proof. exact (fun_ext (fun c : C => @lem8085567 A B C P s t a clauses c _106907)). Qed.
Lemma lem8085569 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8085570 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (a : type1469 A C P) (clauses : type1638 A B C P) (_106907 : B) : (term1557 A B C P s t clauses _106907 a) = (term1558 A B C P s t a clauses _106907).
Proof. exact (MK_COMB (@lem8085569 C) (@lem8085568 A B C P s t a clauses _106907)). Qed.
Lemma lem8085571 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1559 A B C P s t clauses _106907) = (term1560 A B C P s t clauses _106907).
Proof. exact (fun_ext (fun a : type1469 A C P => @lem8085570 A B C P s t a clauses _106907)). Qed.
Lemma lem8085572 {A C P : Type'} : (@ex (C -> A -> P)) = (@ex (C -> A -> P)).
Proof. exact (eq_refl (@ex (C -> A -> P))). Qed.
Lemma lem8085573 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1540 A B C P s t clauses _106907) = (term1561 A B C P s t clauses _106907).
Proof. exact (MK_COMB (@lem8085572 A C P) (@lem8085571 A B C P s t clauses _106907)). Qed.
Lemma lem8085574 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (clauses : type1638 A B C P) (_106907 : B) : ((term1539 A B C P s t clauses _106907) = (term1540 A B C P s t clauses _106907)) = ((term1535 A B C P s t clauses _106907) = (term1561 A B C P s t clauses _106907)).
Proof. exact (MK_COMB (@lem8085562 A B C P s t clauses _106907) (@lem8085573 A B C P s t clauses _106907)). Qed.
Lemma lem8085575 {A B C P : Type'} (s : type1464 A C P) (t : type1513 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1535 A B C P s t clauses _106907) = (term1561 A B C P s t clauses _106907).
Proof. exact (EQ_MP (@lem8085574 A B C P s t clauses _106907) (@lem8085549 A B C P s t clauses _106907)). Qed.
Lemma lem8085576 {A B C P : Type'} (s : type1464 A C P) (clauses : type1638 A B C P) (_106907 : B) : (term1537 A B C P s clauses _106907) = (term1562 A B C P s clauses _106907).
Proof. exact (fun_ext (fun t : type1513 A B C P => @lem8085575 A B C P s t clauses _106907)). Qed.
Lemma lem8085577 {A B C P : Type'} : (@ex (C -> A -> C -> P -> B)) = (@ex (C -> A -> C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> A -> C -> P -> B))). Qed.
Lemma lem8085578 {A B C P : Type'} (s : type1464 A C P) (clauses : type1638 A B C P) (_106907 : B) : (term1538 A B C P s clauses _106907) = (term1563 A B C P s clauses _106907).
Proof. exact (MK_COMB (@lem8085577 A B C P) (@lem8085576 A B C P s clauses _106907)). Qed.
Lemma lem8085579 {A B C P : Type'} (s : type1464 A C P) (clauses : type1638 A B C P) (_106907 : B) : (term1510 A B C P s clauses _106907) = (term1563 A B C P s clauses _106907).
Proof. exact (TRANS (@lem8085545 A B C P s clauses _106907) (@lem8085578 A B C P s clauses _106907)). Qed.
Lemma lem8085580 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : (term1512 A B C P clauses _106907) = (term1564 A B C P clauses _106907).
Proof. exact (fun_ext (fun s : type1464 A C P => @lem8085579 A B C P s clauses _106907)). Qed.
Lemma lem8085581 {A C P : Type'} : (@ex (C -> A -> P -> A)) = (@ex (C -> A -> P -> A)).
Proof. exact (eq_refl (@ex (C -> A -> P -> A))). Qed.
Lemma lem8085582 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : (term1513 A B C P clauses _106907) = (term1565 A B C P clauses _106907).
Proof. exact (MK_COMB (@lem8085581 A C P) (@lem8085580 A B C P clauses _106907)). Qed.
Lemma lem8085583 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : (term1492 A B C P clauses _106907) = (term1565 A B C P clauses _106907).
Proof. exact (TRANS (@lem8085515 A B C P clauses _106907) (@lem8085582 A B C P clauses _106907)). Qed.
Lemma lem8085584 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : (term1359 A B C P clauses _106907) = (term1565 A B C P clauses _106907).
Proof. exact (TRANS (@lem8085485 A B C P clauses _106907) (@lem8085583 A B C P clauses _106907)). Qed.
Lemma lem8085585 {A B C P : Type'} (_106907 : B) : (term1360 A B C P _106907) = (term1566 A B C P _106907).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8085584 A B C P clauses _106907)). Qed.
Lemma lem8085586 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8085587 {A B C P : Type'} (_106907 : B) : (term1361 A B C P _106907) = (term1567 A B C P _106907).
Proof. exact (MK_COMB (@lem8085586 A B C P) (@lem8085585 A B C P _106907)). Qed.
Lemma lem8085589 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8085590 {A B C P : Type'} (P' : type1108 A B C P) : (term1568 A B C P P') = (term1569 A B C P P').
Proof. exact (@lem8085589 (type1638 A B C P) (type1464 A C P) P'). Qed.
Lemma lem8085591 {A B C P : Type'} (_106907 : B) : (term1570 A B C P _106907) = (term1571 A B C P _106907).
Proof. exact (@lem8085590 A B C P (term1572 A B C P _106907)). Qed.
Lemma lem8085592 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : (term1573 A B C P _106907 clauses) = (term1564 A B C P clauses _106907).
Proof. exact (eq_refl (term1573 A B C P _106907 clauses)). Qed.
Lemma lem8085593 {A C P : Type'} (s : type1464 A C P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8085594 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) (s : type1464 A C P) : (term1574 A B C P _106907 clauses s) = (term1575 A B C P clauses _106907 s).
Proof. exact (MK_COMB (@lem8085592 A B C P clauses _106907) (@lem8085593 A C P s)). Qed.
Lemma lem8085595 {A B C P : Type'} (s : type1464 A C P) (clauses : type1638 A B C P) (_106907 : B) : (term1575 A B C P clauses _106907 s) = (term1563 A B C P s clauses _106907).
Proof. exact (eq_refl (term1575 A B C P clauses _106907 s)). Qed.
Lemma lem8085596 {A B C P : Type'} (s : type1464 A C P) (clauses : type1638 A B C P) (_106907 : B) : (term1574 A B C P _106907 clauses s) = (term1563 A B C P s clauses _106907).
Proof. exact (TRANS (@lem8085594 A B C P clauses _106907 s) (@lem8085595 A B C P s clauses _106907)). Qed.
Lemma lem8085597 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : (term1576 A B C P _106907 clauses) = (term1564 A B C P clauses _106907).
Proof. exact (fun_ext (fun s : type1464 A C P => @lem8085596 A B C P s clauses _106907)). Qed.
Lemma lem8085598 {A C P : Type'} : (@ex (C -> A -> P -> A)) = (@ex (C -> A -> P -> A)).
Proof. exact (eq_refl (@ex (C -> A -> P -> A))). Qed.
Lemma lem8085599 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : (term1577 A B C P _106907 clauses) = (term1565 A B C P clauses _106907).
Proof. exact (MK_COMB (@lem8085598 A C P) (@lem8085597 A B C P clauses _106907)). Qed.
Lemma lem8085600 {A B C P : Type'} (_106907 : B) : (term1578 A B C P _106907) = (term1566 A B C P _106907).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8085599 A B C P clauses _106907)). Qed.
Lemma lem8085601 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8085602 {A B C P : Type'} (_106907 : B) : (term1570 A B C P _106907) = (term1567 A B C P _106907).
Proof. exact (MK_COMB (@lem8085601 A B C P) (@lem8085600 A B C P _106907)). Qed.
Lemma lem8085603 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8085604 {A B C P : Type'} (_106907 : B) : (term1579 A B C P _106907) = (term1580 A B C P _106907).
Proof. exact (MK_COMB (@lem8085603) (@lem8085602 A B C P _106907)). Qed.
Lemma lem8085605 {A B C P : Type'} (clauses : type1638 A B C P) (_106907 : B) : (term1573 A B C P _106907 clauses) = (term1564 A B C P clauses _106907).
Proof. exact (eq_refl (term1573 A B C P _106907 clauses)). Qed.
Lemma lem8085606 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) : (s clauses) = (s clauses).
Proof. exact (eq_refl (s clauses)). Qed.
Lemma lem8085607 {A B C P : Type'} (_106907 : B) (s : type1117 A B C P) (clauses : type1638 A B C P) : (term1581 A B C P _106907 s clauses) = (term1582 A B C P _106907 s clauses).
Proof. exact (MK_COMB (@lem8085605 A B C P clauses _106907) (@lem8085606 A B C P s clauses)). Qed.
Lemma lem8085608 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1582 A B C P _106907 s clauses) = (term1583 A B C P s clauses _106907).
Proof. exact (eq_refl (term1582 A B C P _106907 s clauses)). Qed.
Lemma lem8085609 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1581 A B C P _106907 s clauses) = (term1583 A B C P s clauses _106907).
Proof. exact (TRANS (@lem8085607 A B C P _106907 s clauses) (@lem8085608 A B C P s clauses _106907)). Qed.
Lemma lem8085610 {A B C P : Type'} (s : type1117 A B C P) (_106907 : B) : (term1584 A B C P _106907 s) = (term1585 A B C P s _106907).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8085609 A B C P s clauses _106907)). Qed.
Lemma lem8085611 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8085612 {A B C P : Type'} (s : type1117 A B C P) (_106907 : B) : (term1586 A B C P _106907 s) = (term1587 A B C P s _106907).
Proof. exact (MK_COMB (@lem8085611 A B C P) (@lem8085610 A B C P s _106907)). Qed.
Lemma lem8085613 {A B C P : Type'} (_106907 : B) : (term1588 A B C P _106907) = (term1589 A B C P _106907).
Proof. exact (fun_ext (fun s : type1117 A B C P => @lem8085612 A B C P s _106907)). Qed.
Lemma lem8085614 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P -> A))). Qed.
Lemma lem8085615 {A B C P : Type'} (_106907 : B) : (term1571 A B C P _106907) = (term1590 A B C P _106907).
Proof. exact (MK_COMB (@lem8085614 A B C P) (@lem8085613 A B C P _106907)). Qed.
Lemma lem8085616 {A B C P : Type'} (_106907 : B) : ((term1570 A B C P _106907) = (term1571 A B C P _106907)) = ((term1567 A B C P _106907) = (term1590 A B C P _106907)).
Proof. exact (MK_COMB (@lem8085604 A B C P _106907) (@lem8085615 A B C P _106907)). Qed.
Lemma lem8085617 {A B C P : Type'} (_106907 : B) : (term1567 A B C P _106907) = (term1590 A B C P _106907).
Proof. exact (EQ_MP (@lem8085616 A B C P _106907) (@lem8085591 A B C P _106907)). Qed.
Lemma lem8085619 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8085620 {A B C P : Type'} (P' : type1107 A B C P) : (term1591 A B C P P') = (term1592 A B C P P').
Proof. exact (@lem8085619 (type1638 A B C P) (type1513 A B C P) P'). Qed.
Lemma lem8085621 {A B C P : Type'} (s : type1117 A B C P) (_106907 : B) : (term1593 A B C P s _106907) = (term1594 A B C P s _106907).
Proof. exact (@lem8085620 A B C P (term1595 A B C P s _106907)). Qed.
Lemma lem8085622 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1596 A B C P s _106907 clauses) = (term1597 A B C P s clauses _106907).
Proof. exact (eq_refl (term1596 A B C P s _106907 clauses)). Qed.
Lemma lem8085623 {A B C P : Type'} (t : type1513 A B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8085624 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) (_106907 : B) (t : type1513 A B C P) : (term1598 A B C P s _106907 clauses t) = (term1599 A B C P s clauses _106907 t).
Proof. exact (MK_COMB (@lem8085622 A B C P s clauses _106907) (@lem8085623 A B C P t)). Qed.
Lemma lem8085625 {A B C P : Type'} (s : type1117 A B C P) (t : type1513 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1599 A B C P s clauses _106907 t) = (term1600 A B C P s t clauses _106907).
Proof. exact (eq_refl (term1599 A B C P s clauses _106907 t)). Qed.
Lemma lem8085626 {A B C P : Type'} (s : type1117 A B C P) (t : type1513 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1598 A B C P s _106907 clauses t) = (term1600 A B C P s t clauses _106907).
Proof. exact (TRANS (@lem8085624 A B C P s clauses _106907 t) (@lem8085625 A B C P s t clauses _106907)). Qed.
Lemma lem8085627 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1601 A B C P s _106907 clauses) = (term1597 A B C P s clauses _106907).
Proof. exact (fun_ext (fun t : type1513 A B C P => @lem8085626 A B C P s t clauses _106907)). Qed.
Lemma lem8085628 {A B C P : Type'} : (@ex (C -> A -> C -> P -> B)) = (@ex (C -> A -> C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> A -> C -> P -> B))). Qed.
Lemma lem8085629 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1602 A B C P s _106907 clauses) = (term1583 A B C P s clauses _106907).
Proof. exact (MK_COMB (@lem8085628 A B C P) (@lem8085627 A B C P s clauses _106907)). Qed.
Lemma lem8085630 {A B C P : Type'} (s : type1117 A B C P) (_106907 : B) : (term1603 A B C P s _106907) = (term1585 A B C P s _106907).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8085629 A B C P s clauses _106907)). Qed.
Lemma lem8085631 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8085632 {A B C P : Type'} (s : type1117 A B C P) (_106907 : B) : (term1593 A B C P s _106907) = (term1587 A B C P s _106907).
Proof. exact (MK_COMB (@lem8085631 A B C P) (@lem8085630 A B C P s _106907)). Qed.
Lemma lem8085633 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8085634 {A B C P : Type'} (s : type1117 A B C P) (_106907 : B) : (term1604 A B C P s _106907) = (term1605 A B C P s _106907).
Proof. exact (MK_COMB (@lem8085633) (@lem8085632 A B C P s _106907)). Qed.
Lemma lem8085635 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1596 A B C P s _106907 clauses) = (term1597 A B C P s clauses _106907).
Proof. exact (eq_refl (term1596 A B C P s _106907 clauses)). Qed.
Lemma lem8085636 {A B C P : Type'} (t : type1116 A B C P) (clauses : type1638 A B C P) : (t clauses) = (t clauses).
Proof. exact (eq_refl (t clauses)). Qed.
Lemma lem8085637 {A B C P : Type'} (s : type1117 A B C P) (_106907 : B) (t : type1116 A B C P) (clauses : type1638 A B C P) : (term1606 A B C P s _106907 t clauses) = (term1607 A B C P s _106907 t clauses).
Proof. exact (MK_COMB (@lem8085635 A B C P s clauses _106907) (@lem8085636 A B C P t clauses)). Qed.
Lemma lem8085638 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1607 A B C P s _106907 t clauses) = (term1608 A B C P s t clauses _106907).
Proof. exact (eq_refl (term1607 A B C P s _106907 t clauses)). Qed.
Lemma lem8085639 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1606 A B C P s _106907 t clauses) = (term1608 A B C P s t clauses _106907).
Proof. exact (TRANS (@lem8085637 A B C P s _106907 t clauses) (@lem8085638 A B C P s t clauses _106907)). Qed.
Lemma lem8085640 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (_106907 : B) : (term1609 A B C P s _106907 t) = (term1610 A B C P s t _106907).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8085639 A B C P s t clauses _106907)). Qed.
Lemma lem8085641 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8085642 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (_106907 : B) : (term1611 A B C P s _106907 t) = (term1612 A B C P s t _106907).
Proof. exact (MK_COMB (@lem8085641 A B C P) (@lem8085640 A B C P s t _106907)). Qed.
Lemma lem8085643 {A B C P : Type'} (s : type1117 A B C P) (_106907 : B) : (term1613 A B C P s _106907) = (term1614 A B C P s _106907).
Proof. exact (fun_ext (fun t : type1116 A B C P => @lem8085642 A B C P s t _106907)). Qed.
Lemma lem8085644 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> C -> P -> B)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> C -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> C -> P -> B))). Qed.
Lemma lem8085645 {A B C P : Type'} (s : type1117 A B C P) (_106907 : B) : (term1594 A B C P s _106907) = (term1615 A B C P s _106907).
Proof. exact (MK_COMB (@lem8085644 A B C P) (@lem8085643 A B C P s _106907)). Qed.
Lemma lem8085646 {A B C P : Type'} (s : type1117 A B C P) (_106907 : B) : ((term1593 A B C P s _106907) = (term1594 A B C P s _106907)) = ((term1587 A B C P s _106907) = (term1615 A B C P s _106907)).
Proof. exact (MK_COMB (@lem8085634 A B C P s _106907) (@lem8085645 A B C P s _106907)). Qed.
Lemma lem8085647 {A B C P : Type'} (s : type1117 A B C P) (_106907 : B) : (term1587 A B C P s _106907) = (term1615 A B C P s _106907).
Proof. exact (EQ_MP (@lem8085646 A B C P s _106907) (@lem8085621 A B C P s _106907)). Qed.
Lemma lem8085649 {A B : Type'} (P : type1413 A B) : (term771 A B P) = (term772 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8085650 {A B C P : Type'} (P' : type1109 A B C P) : (term1616 A B C P P') = (term1617 A B C P P').
Proof. exact (@lem8085649 (type1638 A B C P) (type1469 A C P) P'). Qed.
Lemma lem8085651 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (_106907 : B) : (term1618 A B C P s t _106907) = (term1619 A B C P s t _106907).
Proof. exact (@lem8085650 A B C P (term1620 A B C P s t _106907)). Qed.
Lemma lem8085652 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1621 A B C P s t _106907 clauses) = (term1622 A B C P s t clauses _106907).
Proof. exact (eq_refl (term1621 A B C P s t _106907 clauses)). Qed.
Lemma lem8085653 {A C P : Type'} (a : type1469 A C P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8085654 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (clauses : type1638 A B C P) (_106907 : B) (a : type1469 A C P) : (term1623 A B C P s t _106907 clauses a) = (term1624 A B C P s t clauses _106907 a).
Proof. exact (MK_COMB (@lem8085652 A B C P s t clauses _106907) (@lem8085653 A C P a)). Qed.
Lemma lem8085655 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1469 A C P) (clauses : type1638 A B C P) (_106907 : B) : (term1624 A B C P s t clauses _106907 a) = (term1625 A B C P s t a clauses _106907).
Proof. exact (eq_refl (term1624 A B C P s t clauses _106907 a)). Qed.
Lemma lem8085656 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1469 A C P) (clauses : type1638 A B C P) (_106907 : B) : (term1623 A B C P s t _106907 clauses a) = (term1625 A B C P s t a clauses _106907).
Proof. exact (TRANS (@lem8085654 A B C P s t clauses _106907 a) (@lem8085655 A B C P s t a clauses _106907)). Qed.
Lemma lem8085657 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1626 A B C P s t _106907 clauses) = (term1622 A B C P s t clauses _106907).
Proof. exact (fun_ext (fun a : type1469 A C P => @lem8085656 A B C P s t a clauses _106907)). Qed.
Lemma lem8085658 {A C P : Type'} : (@ex (C -> A -> P)) = (@ex (C -> A -> P)).
Proof. exact (eq_refl (@ex (C -> A -> P))). Qed.
Lemma lem8085659 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1627 A B C P s t _106907 clauses) = (term1608 A B C P s t clauses _106907).
Proof. exact (MK_COMB (@lem8085658 A C P) (@lem8085657 A B C P s t clauses _106907)). Qed.
Lemma lem8085660 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (_106907 : B) : (term1628 A B C P s t _106907) = (term1610 A B C P s t _106907).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8085659 A B C P s t clauses _106907)). Qed.
Lemma lem8085661 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8085662 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (_106907 : B) : (term1618 A B C P s t _106907) = (term1612 A B C P s t _106907).
Proof. exact (MK_COMB (@lem8085661 A B C P) (@lem8085660 A B C P s t _106907)). Qed.
Lemma lem8085663 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8085664 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (_106907 : B) : (term1629 A B C P s t _106907) = (term1630 A B C P s t _106907).
Proof. exact (MK_COMB (@lem8085663) (@lem8085662 A B C P s t _106907)). Qed.
Lemma lem8085665 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1621 A B C P s t _106907 clauses) = (term1622 A B C P s t clauses _106907).
Proof. exact (eq_refl (term1621 A B C P s t _106907 clauses)). Qed.
Lemma lem8085666 {A B C P : Type'} (a : type1119 A B C P) (clauses : type1638 A B C P) : (a clauses) = (a clauses).
Proof. exact (eq_refl (a clauses)). Qed.
Lemma lem8085667 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (_106907 : B) (a : type1119 A B C P) (clauses : type1638 A B C P) : (term1631 A B C P s t _106907 a clauses) = (term1632 A B C P s t _106907 a clauses).
Proof. exact (MK_COMB (@lem8085665 A B C P s t clauses _106907) (@lem8085666 A B C P a clauses)). Qed.
Lemma lem8085668 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1632 A B C P s t _106907 a clauses) = (term1633 A B C P s t a clauses _106907).
Proof. exact (eq_refl (term1632 A B C P s t _106907 a clauses)). Qed.
Lemma lem8085669 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1631 A B C P s t _106907 a clauses) = (term1633 A B C P s t a clauses _106907).
Proof. exact (TRANS (@lem8085667 A B C P s t _106907 a clauses) (@lem8085668 A B C P s t a clauses _106907)). Qed.
Lemma lem8085670 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) : (term1634 A B C P s t _106907 a) = (term1635 A B C P s t a _106907).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8085669 A B C P s t a clauses _106907)). Qed.
Lemma lem8085671 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8085672 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) : (term1636 A B C P s t _106907 a) = (term1637 A B C P s t a _106907).
Proof. exact (MK_COMB (@lem8085671 A B C P) (@lem8085670 A B C P s t a _106907)). Qed.
Lemma lem8085673 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (_106907 : B) : (term1638 A B C P s t _106907) = (term1639 A B C P s t _106907).
Proof. exact (fun_ext (fun a : type1119 A B C P => @lem8085672 A B C P s t a _106907)). Qed.
Lemma lem8085674 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P))). Qed.
Lemma lem8085675 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (_106907 : B) : (term1619 A B C P s t _106907) = (term1640 A B C P s t _106907).
Proof. exact (MK_COMB (@lem8085674 A B C P) (@lem8085673 A B C P s t _106907)). Qed.
Lemma lem8085676 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (_106907 : B) : ((term1618 A B C P s t _106907) = (term1619 A B C P s t _106907)) = ((term1612 A B C P s t _106907) = (term1640 A B C P s t _106907)).
Proof. exact (MK_COMB (@lem8085664 A B C P s t _106907) (@lem8085675 A B C P s t _106907)). Qed.
Lemma lem8085677 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (_106907 : B) : (term1612 A B C P s t _106907) = (term1640 A B C P s t _106907).
Proof. exact (EQ_MP (@lem8085676 A B C P s t _106907) (@lem8085651 A B C P s t _106907)). Qed.
Lemma lem8085678 {A B C P : Type'} (s : type1117 A B C P) (_106907 : B) : (term1614 A B C P s _106907) = (term1641 A B C P s _106907).
Proof. exact (fun_ext (fun t : type1116 A B C P => @lem8085677 A B C P s t _106907)). Qed.
Lemma lem8085679 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> C -> P -> B)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> C -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> C -> P -> B))). Qed.
Lemma lem8085680 {A B C P : Type'} (s : type1117 A B C P) (_106907 : B) : (term1615 A B C P s _106907) = (term1642 A B C P s _106907).
Proof. exact (MK_COMB (@lem8085679 A B C P) (@lem8085678 A B C P s _106907)). Qed.
Lemma lem8085681 {A B C P : Type'} (s : type1117 A B C P) (_106907 : B) : (term1587 A B C P s _106907) = (term1642 A B C P s _106907).
Proof. exact (TRANS (@lem8085647 A B C P s _106907) (@lem8085680 A B C P s _106907)). Qed.
Lemma lem8085682 {A B C P : Type'} (_106907 : B) : (term1589 A B C P _106907) = (term1643 A B C P _106907).
Proof. exact (fun_ext (fun s : type1117 A B C P => @lem8085681 A B C P s _106907)). Qed.
Lemma lem8085683 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P -> A))). Qed.
Lemma lem8085684 {A B C P : Type'} (_106907 : B) : (term1590 A B C P _106907) = (term1644 A B C P _106907).
Proof. exact (MK_COMB (@lem8085683 A B C P) (@lem8085682 A B C P _106907)). Qed.
Lemma lem8085685 {A B C P : Type'} (_106907 : B) : (term1567 A B C P _106907) = (term1644 A B C P _106907).
Proof. exact (TRANS (@lem8085617 A B C P _106907) (@lem8085684 A B C P _106907)). Qed.
Lemma lem8085687 {A B C P : Type'} (_106907 : B) : (term1361 A B C P _106907) = (term1644 A B C P _106907).
Proof. exact (TRANS (@lem8085587 A B C P _106907) (@lem8085685 A B C P _106907)). Qed.
Lemma lem8085688 {A B C P : Type'} (_106907 : B) : (term499 A B C P _106907) = (term1644 A B C P _106907).
Proof. exact (TRANS (@lem8085056 A B C P _106907) (@lem8085687 A B C P _106907)). Qed.
Lemma lem8085689 {A B C P : Type'} (_106907 : B) (h1 : term499 A B C P _106907) : term1644 A B C P _106907.
Proof. exact (EQ_MP (@lem8085688 A B C P _106907) (@lem8081787 A B C P _106907 h1)). Qed.
Lemma lem8085690 {A B C P : Type'} (s : type1117 A B C P) (_106907 : B) (h1 : term1642 A B C P s _106907) : term1642 A B C P s _106907.
Proof. exact (h1). Qed.
Lemma lem8085691 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (_106907 : B) (h1 : term1640 A B C P s t _106907) : term1640 A B C P s t _106907.
Proof. exact (h1). Qed.
Lemma lem8085692 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1637 A B C P s t a _106907.
Proof. exact (h1). Qed.
Lemma lem8085693 {_143311 _143313 _143320 B : Type'} (s' : type1071 _143311 _143313 _143320 B) (_106908 : _143320) (h1 : term1330 _143311 _143313 _143320 B s' _106908) : term1330 _143311 _143313 _143320 B s' _106908.
Proof. exact (h1). Qed.
Lemma lem8085694 {_143311 _143313 _143320 B : Type'} (s' : type1071 _143311 _143313 _143320 B) (t' : type1070 _143311 _143313 _143320 B) (_106908 : _143320) (h1 : term1328 _143311 _143313 _143320 B s' t' _106908) : term1328 _143311 _143313 _143320 B s' t' _106908.
Proof. exact (h1). Qed.
Lemma lem8085696 {_143311 _143313 _143320 A : Type'} (s'' : type1071 _143311 _143313 _143320 A) (_106908 : _143320) (h1 : term1330 _143311 _143313 _143320 A s'' _106908) : term1330 _143311 _143313 _143320 A s'' _106908.
Proof. exact (h1). Qed.
Lemma lem8085697 {_143311 _143313 _143320 A : Type'} (s'' : type1071 _143311 _143313 _143320 A) (t'' : type1070 _143311 _143313 _143320 A) (_106908 : _143320) (h1 : term1328 _143311 _143313 _143320 A s'' t'' _106908) : term1328 _143311 _143313 _143320 A s'' t'' _106908.
Proof. exact (h1). Qed.
Lemma lem8085699 {_143310 _143311 _143313 B : Type'} (s''' : type1101 _143310 _143311 _143313 B) (_106907 : B) (h1 : term1003 _143310 _143311 _143313 B s''' _106907) : term1003 _143310 _143311 _143313 B s''' _106907.
Proof. exact (h1). Qed.
Lemma lem8085700 {_143310 _143311 _143313 B : Type'} (s''' : type1101 _143310 _143311 _143313 B) (t''' : type1100 _143310 _143311 _143313 B) (_106907 : B) (h1 : term1001 _143310 _143311 _143313 B s''' t''' _106907) : term1001 _143310 _143311 _143313 B s''' t''' _106907.
Proof. exact (h1). Qed.
Lemma lem8085702 {_143310 _143311 _143313 A : Type'} (s'''' : type1101 _143310 _143311 _143313 A) (_106906 : A) (h1 : term1003 _143310 _143311 _143313 A s'''' _106906) : term1003 _143310 _143311 _143313 A s'''' _106906.
Proof. exact (h1). Qed.
Lemma lem8085703 {_143310 _143311 _143313 A : Type'} (s'''' : type1101 _143310 _143311 _143313 A) (t'''' : type1100 _143310 _143311 _143313 A) (_106906 : A) (h1 : term1001 _143310 _143311 _143313 A s'''' t'''' _106906) : term1001 _143310 _143311 _143313 A s'''' t'''' _106906.
Proof. exact (h1). Qed.
Lemma lem8085705 {A B C P : Type'} (clauses : type1638 A B C P) (h1 : term668 A B C P clauses) : term668 A B C P clauses.
Proof. exact (h1). Qed.
Lemma lem8085706 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (h1 : term666 A B C P clauses c) : term666 A B C P clauses c.
Proof. exact (h1). Qed.
Lemma lem8085707 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (c : C) (h1 : term664 A B C P clauses p1 c) : term664 A B C P clauses p1 c.
Proof. exact (h1). Qed.
Lemma lem8085708 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (h1 : term662 A B C P clauses p1 p2 c) : term662 A B C P clauses p1 p2 c.
Proof. exact (h1). Qed.
Lemma lem8085709 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term659 A B C P clauses p1 p2 c x.
Proof. exact (h1). Qed.
Lemma lem8085710 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8085719 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085720 {A B C P : Type'} (f : type1118 A B C P) (x : type1638 A B C P) : (f x) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> B) f x).
Proof. exact (@lem8085719 (type1638 A B C P) (type1514 A B C) f x). Qed.
Lemma lem8085721 {A B C P : Type'} (clauses : type1638 A B C P) : (@CASEWISE B P A C clauses) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> B) (@CASEWISE B P A C) clauses).
Proof. exact (@lem8085720 A B C P (@CASEWISE B P A C) clauses). Qed.
Lemma lem8085722 {C : Type'} (c : C) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8085723 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (@CASEWISE B P A C clauses c) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> B) (@CASEWISE B P A C) clauses c).
Proof. exact (MK_COMB (@lem8085721 A B C P clauses) (@lem8085722 C c)). Qed.
Lemma lem8085725 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085726 {A B C : Type'} (f : type1514 A B C) (x : C) : (f x) = (@I (C -> A -> B) f x).
Proof. exact (@lem8085725 C (A -> B) f x). Qed.
Lemma lem8085727 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> B) (@CASEWISE B P A C) clauses c) = (term1645 A B C P clauses c).
Proof. exact (@lem8085726 A B C (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> B) (@CASEWISE B P A C) clauses) c). Qed.
Lemma lem8085728 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (@CASEWISE B P A C clauses c) = (term1645 A B C P clauses c).
Proof. exact (TRANS (@lem8085723 A B C P clauses c) (@lem8085727 A B C P clauses c)). Qed.
Lemma lem8085729 {A : Type'} (x : A) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8085730 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) : (@CASEWISE B P A C clauses c x) = (term1646 A B C P clauses c x).
Proof. exact (MK_COMB (@lem8085728 A B C P clauses c) (@lem8085729 A x)). Qed.
Lemma lem8085732 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085733 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (@lem8085732 A B f x). Qed.
Lemma lem8085734 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) : (term1646 A B C P clauses c x) = (term1647 A B C P clauses c x).
Proof. exact (@lem8085733 A B (term1645 A B C P clauses c) x). Qed.
Lemma lem8085736 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) : (@CASEWISE B P A C clauses c x) = (term1647 A B C P clauses c x).
Proof. exact (TRANS (@lem8085730 A B C P clauses c x) (@lem8085734 A B C P clauses c x)). Qed.
Lemma lem8085737 {B : Type'} (_106907 : B) : _106907 = _106907.
Proof. exact (eq_refl _106907). Qed.
Lemma lem8085738 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) : (term169 A B C P clauses c x) = (term1648 A B C P clauses c x).
Proof. exact (MK_COMB (@lem8085710 B) (@lem8085736 A B C P clauses c x)). Qed.
Lemma lem8085739 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : ((@CASEWISE B P A C clauses c x) = _106907) = ((term1647 A B C P clauses c x) = _106907).
Proof. exact (MK_COMB (@lem8085738 A B C P clauses c x) (@lem8085737 B _106907)). Qed.
Lemma lem8085740 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8085741 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem8085746 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085747 {A P : Type'} (f : P -> A) (x : P) : (f x) = (@I (P -> A) f x).
Proof. exact (@lem8085746 P A f x). Qed.
Lemma lem8085749 {A P : Type'} (s : P -> A) (a : P) : (s a) = (@I (P -> A) s a).
Proof. exact (@lem8085747 A P s a). Qed.
Lemma lem8085750 {A : Type'} (x : A) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8085751 {A P : Type'} (s : P -> A) (a : P) : (term1649 A P s a) = (term1650 A P s a).
Proof. exact (MK_COMB (@lem8085741 A) (@lem8085749 A P s a)). Qed.
Lemma lem8085752 {A P : Type'} (s : P -> A) (a : P) (x : A) : ((s a) = x) = ((@I (P -> A) s a) = x).
Proof. exact (MK_COMB (@lem8085751 A P s a) (@lem8085750 A x)). Qed.
Lemma lem8085753 {A P : Type'} (s : P -> A) (a : P) (x : A) : (term685 A P s a x) = (term1651 A P s a x).
Proof. exact (MK_COMB (@lem8085740) (@lem8085752 A P s a x)). Qed.
Lemma lem8085754 {A P : Type'} (s : P -> A) (x : A) : (term687 A P s x) = (term1652 A P s x).
Proof. exact (fun_ext (fun a : P => @lem8085753 A P s a x)). Qed.
Lemma lem8085755 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8085756 {A P : Type'} (s : P -> A) (x : A) : (term688 A P s x) = (term1653 A P s x).
Proof. exact (MK_COMB (@lem8085755 P) (@lem8085754 A P s x)). Qed.
Lemma lem8085757 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8085758 {A B C P : Type'} : (@List.In (prod (P -> A) (C -> P -> B))) = (@List.In (prod (P -> A) (C -> P -> B))).
Proof. exact (eq_refl (@List.In (prod (P -> A) (C -> P -> B)))). Qed.
Lemma lem8085765 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085766 {A B C P : Type'} (f : type894 A B C P) (x : P -> A) : (f x) = (@I ((P -> A) -> (C -> P -> B) -> prod (P -> A) (C -> P -> B)) f x).
Proof. exact (@lem8085765 (P -> A) (type879 A B C P) f x). Qed.
Lemma lem8085767 {A B C P : Type'} (s : P -> A) : (@pair (P -> A) (C -> P -> B) s) = (@I ((P -> A) -> (C -> P -> B) -> prod (P -> A) (C -> P -> B)) (@pair (P -> A) (C -> P -> B)) s).
Proof. exact (@lem8085766 A B C P (@pair (P -> A) (C -> P -> B)) s). Qed.
Lemma lem8085768 {B C P : Type'} (t : type1475 B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8085769 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : (@pair (P -> A) (C -> P -> B) s t) = (@I ((P -> A) -> (C -> P -> B) -> prod (P -> A) (C -> P -> B)) (@pair (P -> A) (C -> P -> B)) s t).
Proof. exact (MK_COMB (@lem8085767 A B C P s) (@lem8085768 B C P t)). Qed.
Lemma lem8085771 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085772 {A B C P : Type'} (f : type879 A B C P) (x : type1475 B C P) : (f x) = (@I ((C -> P -> B) -> prod (P -> A) (C -> P -> B)) f x).
Proof. exact (@lem8085771 (type1475 B C P) (type1647 A B C P) f x). Qed.
Lemma lem8085773 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : (@I ((P -> A) -> (C -> P -> B) -> prod (P -> A) (C -> P -> B)) (@pair (P -> A) (C -> P -> B)) s t) = (term1654 A B C P s t).
Proof. exact (@lem8085772 A B C P (@I ((P -> A) -> (C -> P -> B) -> prod (P -> A) (C -> P -> B)) (@pair (P -> A) (C -> P -> B)) s) t). Qed.
Lemma lem8085775 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : (@pair (P -> A) (C -> P -> B) s t) = (term1654 A B C P s t).
Proof. exact (TRANS (@lem8085769 A B C P s t) (@lem8085773 A B C P s t)). Qed.
Lemma lem8085776 {A B C P : Type'} (clauses : type1638 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8085777 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : (term1655 A B C P s t) = (term1656 A B C P s t).
Proof. exact (MK_COMB (@lem8085758 A B C P) (@lem8085775 A B C P s t)). Qed.
Lemma lem8085778 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term429 A B C P s t clauses) = (term1657 A B C P s t clauses).
Proof. exact (MK_COMB (@lem8085777 A B C P s t) (@lem8085776 A B C P clauses)). Qed.
Lemma lem8085780 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085781 {A B C P : Type'} (f : type1181 A B C P) (x : type1647 A B C P) : (f x) = (@I ((prod (P -> A) (C -> P -> B)) -> (list (prod (P -> A) (C -> P -> B))) -> Prop) f x).
Proof. exact (@lem8085780 (type1647 A B C P) (type1123 A B C P) f x). Qed.
Lemma lem8085782 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : (term1656 A B C P s t) = (term1658 A B C P s t).
Proof. exact (@lem8085781 A B C P (@List.In (prod (P -> A) (C -> P -> B))) (term1654 A B C P s t)). Qed.
Lemma lem8085783 {A B C P : Type'} (clauses : type1638 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8085784 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term1657 A B C P s t clauses) = (term1659 A B C P s t clauses).
Proof. exact (MK_COMB (@lem8085782 A B C P s t) (@lem8085783 A B C P clauses)). Qed.
Lemma lem8085786 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085787 {A B C P : Type'} (f : type1123 A B C P) (x : type1638 A B C P) : (f x) = (@I ((list (prod (P -> A) (C -> P -> B))) -> Prop) f x).
Proof. exact (@lem8085786 (type1638 A B C P) Prop f x). Qed.
Lemma lem8085788 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term1659 A B C P s t clauses) = (term1660 A B C P s t clauses).
Proof. exact (@lem8085787 A B C P (term1658 A B C P s t) clauses). Qed.
Lemma lem8085789 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term1657 A B C P s t clauses) = (term1660 A B C P s t clauses).
Proof. exact (TRANS (@lem8085784 A B C P s t clauses) (@lem8085788 A B C P s t clauses)). Qed.
Lemma lem8085790 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term429 A B C P s t clauses) = (term1660 A B C P s t clauses).
Proof. exact (TRANS (@lem8085778 A B C P s t clauses) (@lem8085789 A B C P s t clauses)). Qed.
Lemma lem8085791 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term1338 A B C P s t clauses) = (term1661 A B C P s t clauses).
Proof. exact (MK_COMB (@lem8085757) (@lem8085790 A B C P s t clauses)). Qed.
Lemma lem8085792 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) : (term1340 A B C P s clauses) = (term1662 A B C P s clauses).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8085791 A B C P s t clauses)). Qed.
Lemma lem8085793 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8085794 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) : (term1341 A B C P s clauses) = (term1663 A B C P s clauses).
Proof. exact (MK_COMB (@lem8085793 B C P) (@lem8085792 A B C P s clauses)). Qed.
Lemma lem8085795 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8085796 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) : (term1343 A B C P s clauses) = (term1664 A B C P s clauses).
Proof. exact (MK_COMB (@lem8085795) (@lem8085794 A B C P s clauses)). Qed.
Lemma lem8085797 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1345 A B C P clauses s x) = (term1665 A B C P clauses s x).
Proof. exact (MK_COMB (@lem8085796 A B C P s clauses) (@lem8085756 A P s x)). Qed.
Lemma lem8085798 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) : (term1351 A B C P clauses x) = (term1666 A B C P clauses x).
Proof. exact (fun_ext (fun s : P -> A => @lem8085797 A B C P clauses s x)). Qed.
Lemma lem8085799 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8085800 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) : (term1352 A B C P clauses x) = (term1667 A B C P clauses x).
Proof. exact (MK_COMB (@lem8085799 A P) (@lem8085798 A B C P clauses x)). Qed.
Lemma lem8085801 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8085802 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) : (term1353 A B C P clauses x) = (term1668 A B C P clauses x).
Proof. exact (MK_COMB (@lem8085801) (@lem8085800 A B C P clauses x)). Qed.
Lemma lem8085803 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1354 A B C P clauses c x _106907) = (term1669 A B C P clauses c x _106907).
Proof. exact (MK_COMB (@lem8085802 A B C P clauses x) (@lem8085739 A B C P clauses c x _106907)). Qed.
Lemma lem8085804 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8085813 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085814 {A B C P : Type'} (f : type1118 A B C P) (x : type1638 A B C P) : (f x) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> B) f x).
Proof. exact (@lem8085813 (type1638 A B C P) (type1514 A B C) f x). Qed.
Lemma lem8085815 {A B C P : Type'} (clauses : type1638 A B C P) : (@CASEWISE B P A C clauses) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> B) (@CASEWISE B P A C) clauses).
Proof. exact (@lem8085814 A B C P (@CASEWISE B P A C) clauses). Qed.
Lemma lem8085816 {C : Type'} (c : C) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8085817 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (@CASEWISE B P A C clauses c) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> B) (@CASEWISE B P A C) clauses c).
Proof. exact (MK_COMB (@lem8085815 A B C P clauses) (@lem8085816 C c)). Qed.
Lemma lem8085819 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085820 {A B C : Type'} (f : type1514 A B C) (x : C) : (f x) = (@I (C -> A -> B) f x).
Proof. exact (@lem8085819 C (A -> B) f x). Qed.
Lemma lem8085821 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> B) (@CASEWISE B P A C) clauses c) = (term1645 A B C P clauses c).
Proof. exact (@lem8085820 A B C (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> B) (@CASEWISE B P A C) clauses) c). Qed.
Lemma lem8085822 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (@CASEWISE B P A C clauses c) = (term1645 A B C P clauses c).
Proof. exact (TRANS (@lem8085817 A B C P clauses c) (@lem8085821 A B C P clauses c)). Qed.
Lemma lem8085823 {A : Type'} (x : A) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8085824 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) : (@CASEWISE B P A C clauses c x) = (term1646 A B C P clauses c x).
Proof. exact (MK_COMB (@lem8085822 A B C P clauses c) (@lem8085823 A x)). Qed.
Lemma lem8085826 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085827 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (@lem8085826 A B f x). Qed.
Lemma lem8085828 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) : (term1646 A B C P clauses c x) = (term1647 A B C P clauses c x).
Proof. exact (@lem8085827 A B (term1645 A B C P clauses c) x). Qed.
Lemma lem8085830 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) : (@CASEWISE B P A C clauses c x) = (term1647 A B C P clauses c x).
Proof. exact (TRANS (@lem8085824 A B C P clauses c x) (@lem8085828 A B C P clauses c x)). Qed.
Lemma lem8085844 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085845 {A B C P : Type'} (f : type1119 A B C P) (x : type1638 A B C P) : (f x) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P) f x).
Proof. exact (@lem8085844 (type1638 A B C P) (type1469 A C P) f x). Qed.
Lemma lem8085846 {A B C P : Type'} (a : type1119 A B C P) (clauses : type1638 A B C P) : (a clauses) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P) a clauses).
Proof. exact (@lem8085845 A B C P a clauses). Qed.
Lemma lem8085847 {C : Type'} (c : C) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8085848 {A B C P : Type'} (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) : (a clauses c) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P) a clauses c).
Proof. exact (MK_COMB (@lem8085846 A B C P a clauses) (@lem8085847 C c)). Qed.
Lemma lem8085850 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085851 {A C P : Type'} (f : type1469 A C P) (x : C) : (f x) = (@I (C -> A -> P) f x).
Proof. exact (@lem8085850 C (A -> P) f x). Qed.
Lemma lem8085852 {A B C P : Type'} (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) : (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P) a clauses c) = (term1670 A B C P a clauses c).
Proof. exact (@lem8085851 A C P (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P) a clauses) c). Qed.
Lemma lem8085853 {A B C P : Type'} (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) : (a clauses c) = (term1670 A B C P a clauses c).
Proof. exact (TRANS (@lem8085848 A B C P a clauses c) (@lem8085852 A B C P a clauses c)). Qed.
Lemma lem8085854 {A : Type'} (x : A) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8085855 {A B C P : Type'} (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (a clauses c x) = (term1671 A B C P a clauses c x).
Proof. exact (MK_COMB (@lem8085853 A B C P a clauses c) (@lem8085854 A x)). Qed.
Lemma lem8085857 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085858 {A P : Type'} (f : A -> P) (x : A) : (f x) = (@I (A -> P) f x).
Proof. exact (@lem8085857 A P f x). Qed.
Lemma lem8085859 {A B C P : Type'} (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1671 A B C P a clauses c x) = (term1672 A B C P a clauses c x).
Proof. exact (@lem8085858 A P (term1670 A B C P a clauses c) x). Qed.
Lemma lem8085861 {A B C P : Type'} (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (a clauses c x) = (term1672 A B C P a clauses c x).
Proof. exact (TRANS (@lem8085855 A B C P a clauses c x) (@lem8085859 A B C P a clauses c x)). Qed.
Lemma lem8085865 {A B C P : Type'} (t : type1116 A B C P) (clauses : type1638 A B C P) (x : A) (c : C) : (t clauses c x c) = (t clauses c x c).
Proof. exact (eq_refl (t clauses c x c)). Qed.
Lemma lem8085866 {A B C P : Type'} (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1673 A B C P t a clauses c x) = (term1674 A B C P t a clauses c x).
Proof. exact (MK_COMB (@lem8085865 A B C P t clauses x c) (@lem8085861 A B C P a clauses c x)). Qed.
Lemma lem8085868 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085869 {A B C P : Type'} (f : type1116 A B C P) (x : type1638 A B C P) : (f x) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> C -> P -> B) f x).
Proof. exact (@lem8085868 (type1638 A B C P) (type1513 A B C P) f x). Qed.
Lemma lem8085870 {A B C P : Type'} (t : type1116 A B C P) (clauses : type1638 A B C P) : (t clauses) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> C -> P -> B) t clauses).
Proof. exact (@lem8085869 A B C P t clauses). Qed.
Lemma lem8085871 {C : Type'} (c : C) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8085872 {A B C P : Type'} (t : type1116 A B C P) (clauses : type1638 A B C P) (c : C) : (t clauses c) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> C -> P -> B) t clauses c).
Proof. exact (MK_COMB (@lem8085870 A B C P t clauses) (@lem8085871 C c)). Qed.
Lemma lem8085874 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085875 {A B C P : Type'} (f : type1513 A B C P) (x : C) : (f x) = (@I (C -> A -> C -> P -> B) f x).
Proof. exact (@lem8085874 C (type1418 A B C P) f x). Qed.
Lemma lem8085876 {A B C P : Type'} (t : type1116 A B C P) (clauses : type1638 A B C P) (c : C) : (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> C -> P -> B) t clauses c) = (term1675 A B C P t clauses c).
Proof. exact (@lem8085875 A B C P (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> C -> P -> B) t clauses) c). Qed.
Lemma lem8085877 {A B C P : Type'} (t : type1116 A B C P) (clauses : type1638 A B C P) (c : C) : (t clauses c) = (term1675 A B C P t clauses c).
Proof. exact (TRANS (@lem8085872 A B C P t clauses c) (@lem8085876 A B C P t clauses c)). Qed.
Lemma lem8085878 {A : Type'} (x : A) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8085879 {A B C P : Type'} (t : type1116 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (t clauses c x) = (term1676 A B C P t clauses c x).
Proof. exact (MK_COMB (@lem8085877 A B C P t clauses c) (@lem8085878 A x)). Qed.
Lemma lem8085881 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085882 {A B C P : Type'} (f : type1418 A B C P) (x : A) : (f x) = (@I (A -> C -> P -> B) f x).
Proof. exact (@lem8085881 A (type1475 B C P) f x). Qed.
Lemma lem8085883 {A B C P : Type'} (t : type1116 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1676 A B C P t clauses c x) = (term1677 A B C P t clauses c x).
Proof. exact (@lem8085882 A B C P (term1675 A B C P t clauses c) x). Qed.
Lemma lem8085884 {A B C P : Type'} (t : type1116 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (t clauses c x) = (term1677 A B C P t clauses c x).
Proof. exact (TRANS (@lem8085879 A B C P t clauses c x) (@lem8085883 A B C P t clauses c x)). Qed.
Lemma lem8085885 {C : Type'} (c : C) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8085886 {A B C P : Type'} (t : type1116 A B C P) (clauses : type1638 A B C P) (x : A) (c : C) : (t clauses c x c) = (term1678 A B C P t clauses x c).
Proof. exact (MK_COMB (@lem8085884 A B C P t clauses c x) (@lem8085885 C c)). Qed.
Lemma lem8085888 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085889 {B C P : Type'} (f : type1475 B C P) (x : C) : (f x) = (@I (C -> P -> B) f x).
Proof. exact (@lem8085888 C (P -> B) f x). Qed.
Lemma lem8085890 {A B C P : Type'} (t : type1116 A B C P) (clauses : type1638 A B C P) (x : A) (c : C) : (term1678 A B C P t clauses x c) = (term1679 A B C P t clauses x c).
Proof. exact (@lem8085889 B C P (term1677 A B C P t clauses c x) c). Qed.
Lemma lem8085891 {A B C P : Type'} (t : type1116 A B C P) (clauses : type1638 A B C P) (x : A) (c : C) : (t clauses c x c) = (term1679 A B C P t clauses x c).
Proof. exact (TRANS (@lem8085886 A B C P t clauses x c) (@lem8085890 A B C P t clauses x c)). Qed.
Lemma lem8085892 {A B C P : Type'} (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1672 A B C P a clauses c x) = (term1672 A B C P a clauses c x).
Proof. exact (eq_refl (term1672 A B C P a clauses c x)). Qed.
Lemma lem8085893 {A B C P : Type'} (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1674 A B C P t a clauses c x) = (term1680 A B C P t a clauses c x).
Proof. exact (MK_COMB (@lem8085891 A B C P t clauses x c) (@lem8085892 A B C P a clauses c x)). Qed.
Lemma lem8085895 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085896 {B P : Type'} (f : P -> B) (x : P) : (f x) = (@I (P -> B) f x).
Proof. exact (@lem8085895 P B f x). Qed.
Lemma lem8085897 {A B C P : Type'} (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1680 A B C P t a clauses c x) = (term1681 A B C P t a clauses c x).
Proof. exact (@lem8085896 B P (term1679 A B C P t clauses x c) (term1672 A B C P a clauses c x)). Qed.
Lemma lem8085898 {A B C P : Type'} (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1674 A B C P t a clauses c x) = (term1681 A B C P t a clauses c x).
Proof. exact (TRANS (@lem8085893 A B C P t a clauses c x) (@lem8085897 A B C P t a clauses c x)). Qed.
Lemma lem8085899 {A B C P : Type'} (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1673 A B C P t a clauses c x) = (term1681 A B C P t a clauses c x).
Proof. exact (TRANS (@lem8085866 A B C P t a clauses c x) (@lem8085898 A B C P t a clauses c x)). Qed.
Lemma lem8085900 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) : (term169 A B C P clauses c x) = (term1648 A B C P clauses c x).
Proof. exact (MK_COMB (@lem8085804 B) (@lem8085830 A B C P clauses c x)). Qed.
Lemma lem8085901 {A B C P : Type'} (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : ((@CASEWISE B P A C clauses c x) = (term1673 A B C P t a clauses c x)) = ((term1647 A B C P clauses c x) = (term1681 A B C P t a clauses c x)).
Proof. exact (MK_COMB (@lem8085900 A B C P clauses c x) (@lem8085899 A B C P t a clauses c x)). Qed.
Lemma lem8085902 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem8085915 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085916 {A B C P : Type'} (f : type1119 A B C P) (x : type1638 A B C P) : (f x) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P) f x).
Proof. exact (@lem8085915 (type1638 A B C P) (type1469 A C P) f x). Qed.
Lemma lem8085917 {A B C P : Type'} (a : type1119 A B C P) (clauses : type1638 A B C P) : (a clauses) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P) a clauses).
Proof. exact (@lem8085916 A B C P a clauses). Qed.
Lemma lem8085918 {C : Type'} (c : C) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8085919 {A B C P : Type'} (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) : (a clauses c) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P) a clauses c).
Proof. exact (MK_COMB (@lem8085917 A B C P a clauses) (@lem8085918 C c)). Qed.
Lemma lem8085921 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085922 {A C P : Type'} (f : type1469 A C P) (x : C) : (f x) = (@I (C -> A -> P) f x).
Proof. exact (@lem8085921 C (A -> P) f x). Qed.
Lemma lem8085923 {A B C P : Type'} (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) : (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P) a clauses c) = (term1670 A B C P a clauses c).
Proof. exact (@lem8085922 A C P (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P) a clauses) c). Qed.
Lemma lem8085924 {A B C P : Type'} (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) : (a clauses c) = (term1670 A B C P a clauses c).
Proof. exact (TRANS (@lem8085919 A B C P a clauses c) (@lem8085923 A B C P a clauses c)). Qed.
Lemma lem8085925 {A : Type'} (x : A) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8085926 {A B C P : Type'} (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (a clauses c x) = (term1671 A B C P a clauses c x).
Proof. exact (MK_COMB (@lem8085924 A B C P a clauses c) (@lem8085925 A x)). Qed.
Lemma lem8085928 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085929 {A P : Type'} (f : A -> P) (x : A) : (f x) = (@I (A -> P) f x).
Proof. exact (@lem8085928 A P f x). Qed.
Lemma lem8085930 {A B C P : Type'} (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1671 A B C P a clauses c x) = (term1672 A B C P a clauses c x).
Proof. exact (@lem8085929 A P (term1670 A B C P a clauses c) x). Qed.
Lemma lem8085932 {A B C P : Type'} (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (a clauses c x) = (term1672 A B C P a clauses c x).
Proof. exact (TRANS (@lem8085926 A B C P a clauses c x) (@lem8085930 A B C P a clauses c x)). Qed.
Lemma lem8085935 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (s clauses c x) = (s clauses c x).
Proof. exact (eq_refl (s clauses c x)). Qed.
Lemma lem8085936 {A B C P : Type'} (s : type1117 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1682 A B C P s a clauses c x) = (term1683 A B C P s a clauses c x).
Proof. exact (MK_COMB (@lem8085935 A B C P s clauses c x) (@lem8085932 A B C P a clauses c x)). Qed.
Lemma lem8085938 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085939 {A B C P : Type'} (f : type1117 A B C P) (x : type1638 A B C P) : (f x) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P -> A) f x).
Proof. exact (@lem8085938 (type1638 A B C P) (type1464 A C P) f x). Qed.
Lemma lem8085940 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) : (s clauses) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P -> A) s clauses).
Proof. exact (@lem8085939 A B C P s clauses). Qed.
Lemma lem8085941 {C : Type'} (c : C) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8085942 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) (c : C) : (s clauses c) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P -> A) s clauses c).
Proof. exact (MK_COMB (@lem8085940 A B C P s clauses) (@lem8085941 C c)). Qed.
Lemma lem8085944 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085945 {A C P : Type'} (f : type1464 A C P) (x : C) : (f x) = (@I (C -> A -> P -> A) f x).
Proof. exact (@lem8085944 C (type1410 A P) f x). Qed.
Lemma lem8085946 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) (c : C) : (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P -> A) s clauses c) = (term1684 A B C P s clauses c).
Proof. exact (@lem8085945 A C P (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P -> A) s clauses) c). Qed.
Lemma lem8085947 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) (c : C) : (s clauses c) = (term1684 A B C P s clauses c).
Proof. exact (TRANS (@lem8085942 A B C P s clauses c) (@lem8085946 A B C P s clauses c)). Qed.
Lemma lem8085948 {A : Type'} (x : A) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8085949 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (s clauses c x) = (term1685 A B C P s clauses c x).
Proof. exact (MK_COMB (@lem8085947 A B C P s clauses c) (@lem8085948 A x)). Qed.
Lemma lem8085951 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085952 {A P : Type'} (f : type1410 A P) (x : A) : (f x) = (@I (A -> P -> A) f x).
Proof. exact (@lem8085951 A (P -> A) f x). Qed.
Lemma lem8085953 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1685 A B C P s clauses c x) = (term1686 A B C P s clauses c x).
Proof. exact (@lem8085952 A P (term1684 A B C P s clauses c) x). Qed.
Lemma lem8085954 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (s clauses c x) = (term1686 A B C P s clauses c x).
Proof. exact (TRANS (@lem8085949 A B C P s clauses c x) (@lem8085953 A B C P s clauses c x)). Qed.
Lemma lem8085955 {A B C P : Type'} (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1672 A B C P a clauses c x) = (term1672 A B C P a clauses c x).
Proof. exact (eq_refl (term1672 A B C P a clauses c x)). Qed.
Lemma lem8085956 {A B C P : Type'} (s : type1117 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1683 A B C P s a clauses c x) = (term1687 A B C P s a clauses c x).
Proof. exact (MK_COMB (@lem8085954 A B C P s clauses c x) (@lem8085955 A B C P a clauses c x)). Qed.
Lemma lem8085958 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085959 {A P : Type'} (f : P -> A) (x : P) : (f x) = (@I (P -> A) f x).
Proof. exact (@lem8085958 P A f x). Qed.
Lemma lem8085960 {A B C P : Type'} (s : type1117 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1687 A B C P s a clauses c x) = (term1688 A B C P s a clauses c x).
Proof. exact (@lem8085959 A P (term1686 A B C P s clauses c x) (term1672 A B C P a clauses c x)). Qed.
Lemma lem8085961 {A B C P : Type'} (s : type1117 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1683 A B C P s a clauses c x) = (term1688 A B C P s a clauses c x).
Proof. exact (TRANS (@lem8085956 A B C P s a clauses c x) (@lem8085960 A B C P s a clauses c x)). Qed.
Lemma lem8085962 {A B C P : Type'} (s : type1117 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1682 A B C P s a clauses c x) = (term1688 A B C P s a clauses c x).
Proof. exact (TRANS (@lem8085936 A B C P s a clauses c x) (@lem8085961 A B C P s a clauses c x)). Qed.
Lemma lem8085963 {A : Type'} (x : A) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8085964 {A B C P : Type'} (s : type1117 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1689 A B C P s a clauses c x) = (term1690 A B C P s a clauses c x).
Proof. exact (MK_COMB (@lem8085902 A) (@lem8085962 A B C P s a clauses c x)). Qed.
Lemma lem8085965 {A B C P : Type'} (s : type1117 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : ((term1682 A B C P s a clauses c x) = x) = ((term1688 A B C P s a clauses c x) = x).
Proof. exact (MK_COMB (@lem8085964 A B C P s a clauses c x) (@lem8085963 A x)). Qed.
Lemma lem8085966 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8085967 {A B C P : Type'} (s : type1117 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1691 A B C P s a clauses c x) = (term1692 A B C P s a clauses c x).
Proof. exact (MK_COMB (@lem8085966) (@lem8085965 A B C P s a clauses c x)). Qed.
Lemma lem8085968 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1693 A B C P s t a clauses c x) = (term1694 A B C P s t a clauses c x).
Proof. exact (MK_COMB (@lem8085967 A B C P s a clauses c x) (@lem8085901 A B C P t a clauses c x)). Qed.
Lemma lem8085969 {A B C P : Type'} : (@List.In (prod (P -> A) (C -> P -> B))) = (@List.In (prod (P -> A) (C -> P -> B))).
Proof. exact (eq_refl (@List.In (prod (P -> A) (C -> P -> B)))). Qed.
Lemma lem8085970 {A B C P : Type'} : (@pair (P -> A) (C -> P -> B)) = (@pair (P -> A) (C -> P -> B)).
Proof. exact (eq_refl (@pair (P -> A) (C -> P -> B))). Qed.
Lemma lem8085979 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085980 {A B C P : Type'} (f : type1117 A B C P) (x : type1638 A B C P) : (f x) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P -> A) f x).
Proof. exact (@lem8085979 (type1638 A B C P) (type1464 A C P) f x). Qed.
Lemma lem8085981 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) : (s clauses) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P -> A) s clauses).
Proof. exact (@lem8085980 A B C P s clauses). Qed.
Lemma lem8085982 {C : Type'} (c : C) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8085983 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) (c : C) : (s clauses c) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P -> A) s clauses c).
Proof. exact (MK_COMB (@lem8085981 A B C P s clauses) (@lem8085982 C c)). Qed.
Lemma lem8085985 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085986 {A C P : Type'} (f : type1464 A C P) (x : C) : (f x) = (@I (C -> A -> P -> A) f x).
Proof. exact (@lem8085985 C (type1410 A P) f x). Qed.
Lemma lem8085987 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) (c : C) : (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P -> A) s clauses c) = (term1684 A B C P s clauses c).
Proof. exact (@lem8085986 A C P (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> P -> A) s clauses) c). Qed.
Lemma lem8085988 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) (c : C) : (s clauses c) = (term1684 A B C P s clauses c).
Proof. exact (TRANS (@lem8085983 A B C P s clauses c) (@lem8085987 A B C P s clauses c)). Qed.
Lemma lem8085989 {A : Type'} (x : A) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8085990 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (s clauses c x) = (term1685 A B C P s clauses c x).
Proof. exact (MK_COMB (@lem8085988 A B C P s clauses c) (@lem8085989 A x)). Qed.
Lemma lem8085992 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8085993 {A P : Type'} (f : type1410 A P) (x : A) : (f x) = (@I (A -> P -> A) f x).
Proof. exact (@lem8085992 A (P -> A) f x). Qed.
Lemma lem8085994 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1685 A B C P s clauses c x) = (term1686 A B C P s clauses c x).
Proof. exact (@lem8085993 A P (term1684 A B C P s clauses c) x). Qed.
Lemma lem8085996 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (s clauses c x) = (term1686 A B C P s clauses c x).
Proof. exact (TRANS (@lem8085990 A B C P s clauses c x) (@lem8085994 A B C P s clauses c x)). Qed.
Lemma lem8086005 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8086006 {A B C P : Type'} (f : type1116 A B C P) (x : type1638 A B C P) : (f x) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> C -> P -> B) f x).
Proof. exact (@lem8086005 (type1638 A B C P) (type1513 A B C P) f x). Qed.
Lemma lem8086007 {A B C P : Type'} (t : type1116 A B C P) (clauses : type1638 A B C P) : (t clauses) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> C -> P -> B) t clauses).
Proof. exact (@lem8086006 A B C P t clauses). Qed.
Lemma lem8086008 {C : Type'} (c : C) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8086009 {A B C P : Type'} (t : type1116 A B C P) (clauses : type1638 A B C P) (c : C) : (t clauses c) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> C -> P -> B) t clauses c).
Proof. exact (MK_COMB (@lem8086007 A B C P t clauses) (@lem8086008 C c)). Qed.
Lemma lem8086011 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8086012 {A B C P : Type'} (f : type1513 A B C P) (x : C) : (f x) = (@I (C -> A -> C -> P -> B) f x).
Proof. exact (@lem8086011 C (type1418 A B C P) f x). Qed.
Lemma lem8086013 {A B C P : Type'} (t : type1116 A B C P) (clauses : type1638 A B C P) (c : C) : (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> C -> P -> B) t clauses c) = (term1675 A B C P t clauses c).
Proof. exact (@lem8086012 A B C P (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> C -> P -> B) t clauses) c). Qed.
Lemma lem8086014 {A B C P : Type'} (t : type1116 A B C P) (clauses : type1638 A B C P) (c : C) : (t clauses c) = (term1675 A B C P t clauses c).
Proof. exact (TRANS (@lem8086009 A B C P t clauses c) (@lem8086013 A B C P t clauses c)). Qed.
Lemma lem8086015 {A : Type'} (x : A) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8086016 {A B C P : Type'} (t : type1116 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (t clauses c x) = (term1676 A B C P t clauses c x).
Proof. exact (MK_COMB (@lem8086014 A B C P t clauses c) (@lem8086015 A x)). Qed.
Lemma lem8086018 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8086019 {A B C P : Type'} (f : type1418 A B C P) (x : A) : (f x) = (@I (A -> C -> P -> B) f x).
Proof. exact (@lem8086018 A (type1475 B C P) f x). Qed.
Lemma lem8086020 {A B C P : Type'} (t : type1116 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1676 A B C P t clauses c x) = (term1677 A B C P t clauses c x).
Proof. exact (@lem8086019 A B C P (term1675 A B C P t clauses c) x). Qed.
Lemma lem8086022 {A B C P : Type'} (t : type1116 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (t clauses c x) = (term1677 A B C P t clauses c x).
Proof. exact (TRANS (@lem8086016 A B C P t clauses c x) (@lem8086020 A B C P t clauses c x)). Qed.
Lemma lem8086023 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1695 A B C P s clauses c x) = (term1696 A B C P s clauses c x).
Proof. exact (MK_COMB (@lem8085970 A B C P) (@lem8085996 A B C P s clauses c x)). Qed.
Lemma lem8086024 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1697 A B C P s t clauses c x) = (term1698 A B C P s t clauses c x).
Proof. exact (MK_COMB (@lem8086023 A B C P s clauses c x) (@lem8086022 A B C P t clauses c x)). Qed.
Lemma lem8086026 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8086027 {A B C P : Type'} (f : type894 A B C P) (x : P -> A) : (f x) = (@I ((P -> A) -> (C -> P -> B) -> prod (P -> A) (C -> P -> B)) f x).
Proof. exact (@lem8086026 (P -> A) (type879 A B C P) f x). Qed.
Lemma lem8086028 {A B C P : Type'} (s : type1117 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1696 A B C P s clauses c x) = (term1699 A B C P s clauses c x).
Proof. exact (@lem8086027 A B C P (@pair (P -> A) (C -> P -> B)) (term1686 A B C P s clauses c x)). Qed.
Lemma lem8086029 {A B C P : Type'} (t : type1116 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1677 A B C P t clauses c x) = (term1677 A B C P t clauses c x).
Proof. exact (eq_refl (term1677 A B C P t clauses c x)). Qed.
Lemma lem8086030 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1698 A B C P s t clauses c x) = (term1700 A B C P s t clauses c x).
Proof. exact (MK_COMB (@lem8086028 A B C P s clauses c x) (@lem8086029 A B C P t clauses c x)). Qed.
Lemma lem8086032 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8086033 {A B C P : Type'} (f : type879 A B C P) (x : type1475 B C P) : (f x) = (@I ((C -> P -> B) -> prod (P -> A) (C -> P -> B)) f x).
Proof. exact (@lem8086032 (type1475 B C P) (type1647 A B C P) f x). Qed.
Lemma lem8086034 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1700 A B C P s t clauses c x) = (term1701 A B C P s t clauses c x).
Proof. exact (@lem8086033 A B C P (term1699 A B C P s clauses c x) (term1677 A B C P t clauses c x)). Qed.
Lemma lem8086035 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1698 A B C P s t clauses c x) = (term1701 A B C P s t clauses c x).
Proof. exact (TRANS (@lem8086030 A B C P s t clauses c x) (@lem8086034 A B C P s t clauses c x)). Qed.
Lemma lem8086036 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1697 A B C P s t clauses c x) = (term1701 A B C P s t clauses c x).
Proof. exact (TRANS (@lem8086024 A B C P s t clauses c x) (@lem8086035 A B C P s t clauses c x)). Qed.
Lemma lem8086037 {A B C P : Type'} (clauses : type1638 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8086038 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1702 A B C P s t clauses c x) = (term1703 A B C P s t clauses c x).
Proof. exact (MK_COMB (@lem8085969 A B C P) (@lem8086036 A B C P s t clauses c x)). Qed.
Lemma lem8086039 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (c : C) (x : A) (clauses : type1638 A B C P) : (term1704 A B C P s t c x clauses) = (term1705 A B C P s t c x clauses).
Proof. exact (MK_COMB (@lem8086038 A B C P s t clauses c x) (@lem8086037 A B C P clauses)). Qed.
Lemma lem8086041 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8086042 {A B C P : Type'} (f : type1181 A B C P) (x : type1647 A B C P) : (f x) = (@I ((prod (P -> A) (C -> P -> B)) -> (list (prod (P -> A) (C -> P -> B))) -> Prop) f x).
Proof. exact (@lem8086041 (type1647 A B C P) (type1123 A B C P) f x). Qed.
Lemma lem8086043 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1703 A B C P s t clauses c x) = (term1706 A B C P s t clauses c x).
Proof. exact (@lem8086042 A B C P (@List.In (prod (P -> A) (C -> P -> B))) (term1701 A B C P s t clauses c x)). Qed.
Lemma lem8086044 {A B C P : Type'} (clauses : type1638 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8086045 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (c : C) (x : A) (clauses : type1638 A B C P) : (term1705 A B C P s t c x clauses) = (term1707 A B C P s t c x clauses).
Proof. exact (MK_COMB (@lem8086043 A B C P s t clauses c x) (@lem8086044 A B C P clauses)). Qed.
Lemma lem8086047 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8086048 {A B C P : Type'} (f : type1123 A B C P) (x : type1638 A B C P) : (f x) = (@I ((list (prod (P -> A) (C -> P -> B))) -> Prop) f x).
Proof. exact (@lem8086047 (type1638 A B C P) Prop f x). Qed.
Lemma lem8086049 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (c : C) (x : A) (clauses : type1638 A B C P) : (term1707 A B C P s t c x clauses) = (term1708 A B C P s t c x clauses).
Proof. exact (@lem8086048 A B C P (term1706 A B C P s t clauses c x) clauses). Qed.
Lemma lem8086050 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (c : C) (x : A) (clauses : type1638 A B C P) : (term1705 A B C P s t c x clauses) = (term1708 A B C P s t c x clauses).
Proof. exact (TRANS (@lem8086045 A B C P s t c x clauses) (@lem8086049 A B C P s t c x clauses)). Qed.
Lemma lem8086051 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (c : C) (x : A) (clauses : type1638 A B C P) : (term1704 A B C P s t c x clauses) = (term1708 A B C P s t c x clauses).
Proof. exact (TRANS (@lem8086039 A B C P s t c x clauses) (@lem8086050 A B C P s t c x clauses)). Qed.
Lemma lem8086052 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8086053 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (c : C) (x : A) (clauses : type1638 A B C P) : (term1709 A B C P s t c x clauses) = (term1710 A B C P s t c x clauses).
Proof. exact (MK_COMB (@lem8086052) (@lem8086051 A B C P s t c x clauses)). Qed.
Lemma lem8086054 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1711 A B C P s t a clauses c x) = (term1712 A B C P s t a clauses c x).
Proof. exact (MK_COMB (@lem8086053 A B C P s t c x clauses) (@lem8085968 A B C P s t a clauses c x)). Qed.
Lemma lem8086055 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8086056 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1713 A B C P s t a clauses c x) = (term1714 A B C P s t a clauses c x).
Proof. exact (MK_COMB (@lem8086055) (@lem8086054 A B C P s t a clauses c x)). Qed.
Lemma lem8086057 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1715 A B C P s t a clauses c x _106907) = (term1716 A B C P s t a clauses c x _106907).
Proof. exact (MK_COMB (@lem8086056 A B C P s t a clauses c x) (@lem8085803 A B C P clauses c x _106907)). Qed.
Lemma lem8086058 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1717 A B C P s t a clauses c _106907) = (term1718 A B C P s t a clauses c _106907).
Proof. exact (fun_ext (fun x : A => @lem8086057 A B C P s t a clauses c x _106907)). Qed.
Lemma lem8086059 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8086060 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1719 A B C P s t a clauses c _106907) = (term1720 A B C P s t a clauses c _106907).
Proof. exact (MK_COMB (@lem8086059 A) (@lem8086058 A B C P s t a clauses c _106907)). Qed.
Lemma lem8086061 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1721 A B C P s t a clauses _106907) = (term1722 A B C P s t a clauses _106907).
Proof. exact (fun_ext (fun c : C => @lem8086060 A B C P s t a clauses c _106907)). Qed.
Lemma lem8086062 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8086063 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1633 A B C P s t a clauses _106907) = (term1723 A B C P s t a clauses _106907).
Proof. exact (MK_COMB (@lem8086062 C) (@lem8086061 A B C P s t a clauses _106907)). Qed.
Lemma lem8086064 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) : (term1635 A B C P s t a _106907) = (term1724 A B C P s t a _106907).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8086063 A B C P s t a clauses _106907)). Qed.
Lemma lem8086065 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8086066 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) : (term1637 A B C P s t a _106907) = (term1725 A B C P s t a _106907).
Proof. exact (MK_COMB (@lem8086065 A B C P) (@lem8086064 A B C P s t a _106907)). Qed.
Lemma lem8086067 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1725 A B C P s t a _106907.
Proof. exact (EQ_MP (@lem8086066 A B C P s t a _106907) (@lem8085692 A B C P s t a _106907 h1)). Qed.
Lemma lem8087500 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8087501 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8087509 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087510 {A P : Type'} (f : P -> A) (x : P) : (f x) = (@I (P -> A) f x).
Proof. exact (@lem8087509 P A f x). Qed.
Lemma lem8087512 {A P : Type'} (p1 : P -> A) (x : P) : (p1 x) = (@I (P -> A) p1 x).
Proof. exact (@lem8087510 A P p1 x). Qed.
Lemma lem8087514 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (@CASEWISE B P A C clauses c) = (@CASEWISE B P A C clauses c).
Proof. exact (eq_refl (@CASEWISE B P A C clauses c)). Qed.
Lemma lem8087515 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (p1 : P -> A) (x : P) : (term516 A B C P clauses c p1 x) = (term1726 A B C P clauses c p1 x).
Proof. exact (MK_COMB (@lem8087514 A B C P clauses c) (@lem8087512 A P p1 x)). Qed.
Lemma lem8087517 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087518 {A B C P : Type'} (f : type1118 A B C P) (x : type1638 A B C P) : (f x) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> B) f x).
Proof. exact (@lem8087517 (type1638 A B C P) (type1514 A B C) f x). Qed.
Lemma lem8087519 {A B C P : Type'} (clauses : type1638 A B C P) : (@CASEWISE B P A C clauses) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> B) (@CASEWISE B P A C) clauses).
Proof. exact (@lem8087518 A B C P (@CASEWISE B P A C) clauses). Qed.
Lemma lem8087520 {C : Type'} (c : C) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8087521 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (@CASEWISE B P A C clauses c) = (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> B) (@CASEWISE B P A C) clauses c).
Proof. exact (MK_COMB (@lem8087519 A B C P clauses) (@lem8087520 C c)). Qed.
Lemma lem8087523 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087524 {A B C : Type'} (f : type1514 A B C) (x : C) : (f x) = (@I (C -> A -> B) f x).
Proof. exact (@lem8087523 C (A -> B) f x). Qed.
Lemma lem8087525 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> B) (@CASEWISE B P A C) clauses c) = (term1645 A B C P clauses c).
Proof. exact (@lem8087524 A B C (@I ((list (prod (P -> A) (C -> P -> B))) -> C -> A -> B) (@CASEWISE B P A C) clauses) c). Qed.
Lemma lem8087526 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (@CASEWISE B P A C clauses c) = (term1645 A B C P clauses c).
Proof. exact (TRANS (@lem8087521 A B C P clauses c) (@lem8087525 A B C P clauses c)). Qed.
Lemma lem8087527 {A P : Type'} (p1 : P -> A) (x : P) : (@I (P -> A) p1 x) = (@I (P -> A) p1 x).
Proof. exact (eq_refl (@I (P -> A) p1 x)). Qed.
Lemma lem8087528 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (p1 : P -> A) (x : P) : (term1726 A B C P clauses c p1 x) = (term1727 A B C P clauses c p1 x).
Proof. exact (MK_COMB (@lem8087526 A B C P clauses c) (@lem8087527 A P p1 x)). Qed.
Lemma lem8087530 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087531 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (@lem8087530 A B f x). Qed.
Lemma lem8087532 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (p1 : P -> A) (x : P) : (term1727 A B C P clauses c p1 x) = (term1728 A B C P clauses c p1 x).
Proof. exact (@lem8087531 A B (term1645 A B C P clauses c) (@I (P -> A) p1 x)). Qed.
Lemma lem8087533 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (p1 : P -> A) (x : P) : (term1726 A B C P clauses c p1 x) = (term1728 A B C P clauses c p1 x).
Proof. exact (TRANS (@lem8087528 A B C P clauses c p1 x) (@lem8087532 A B C P clauses c p1 x)). Qed.
Lemma lem8087534 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (p1 : P -> A) (x : P) : (term516 A B C P clauses c p1 x) = (term1728 A B C P clauses c p1 x).
Proof. exact (TRANS (@lem8087515 A B C P clauses c p1 x) (@lem8087533 A B C P clauses c p1 x)). Qed.
Lemma lem8087541 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087542 {B C P : Type'} (f : type1475 B C P) (x : C) : (f x) = (@I (C -> P -> B) f x).
Proof. exact (@lem8087541 C (P -> B) f x). Qed.
Lemma lem8087543 {B C P : Type'} (p2 : type1475 B C P) (c : C) : (p2 c) = (@I (C -> P -> B) p2 c).
Proof. exact (@lem8087542 B C P p2 c). Qed.
Lemma lem8087544 {P : Type'} (x : P) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8087545 {B C P : Type'} (p2 : type1475 B C P) (c : C) (x : P) : (p2 c x) = (@I (C -> P -> B) p2 c x).
Proof. exact (MK_COMB (@lem8087543 B C P p2 c) (@lem8087544 P x)). Qed.
Lemma lem8087547 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087548 {B P : Type'} (f : P -> B) (x : P) : (f x) = (@I (P -> B) f x).
Proof. exact (@lem8087547 P B f x). Qed.
Lemma lem8087549 {B C P : Type'} (p2 : type1475 B C P) (c : C) (x : P) : (@I (C -> P -> B) p2 c x) = (term1729 B C P p2 c x).
Proof. exact (@lem8087548 B P (@I (C -> P -> B) p2 c) x). Qed.
Lemma lem8087551 {B C P : Type'} (p2 : type1475 B C P) (c : C) (x : P) : (p2 c x) = (term1729 B C P p2 c x).
Proof. exact (TRANS (@lem8087545 B C P p2 c x) (@lem8087549 B C P p2 c x)). Qed.
Lemma lem8087552 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (p1 : P -> A) (x : P) : (term1730 A B C P clauses c p1 x) = (term1731 A B C P clauses c p1 x).
Proof. exact (MK_COMB (@lem8087501 B) (@lem8087534 A B C P clauses c p1 x)). Qed.
Lemma lem8087553 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) : ((term516 A B C P clauses c p1 x) = (p2 c x)) = ((term1728 A B C P clauses c p1 x) = (term1729 B C P p2 c x)).
Proof. exact (MK_COMB (@lem8087552 A B C P clauses c p1 x) (@lem8087551 B C P p2 c x)). Qed.
Lemma lem8087554 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) : (term561 A B C P clauses p1 p2 c x) = (term1732 A B C P clauses p1 p2 c x).
Proof. exact (MK_COMB (@lem8087500) (@lem8087553 A B C P clauses p1 p2 c x)). Qed.
Lemma lem8087555 {A B C P : Type'} : (@List.In (prod (P -> A) (C -> P -> B))) = (@List.In (prod (P -> A) (C -> P -> B))).
Proof. exact (eq_refl (@List.In (prod (P -> A) (C -> P -> B)))). Qed.
Lemma lem8087562 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087563 {A B C P : Type'} (f : type894 A B C P) (x : P -> A) : (f x) = (@I ((P -> A) -> (C -> P -> B) -> prod (P -> A) (C -> P -> B)) f x).
Proof. exact (@lem8087562 (P -> A) (type879 A B C P) f x). Qed.
Lemma lem8087564 {A B C P : Type'} (p1 : P -> A) : (@pair (P -> A) (C -> P -> B) p1) = (@I ((P -> A) -> (C -> P -> B) -> prod (P -> A) (C -> P -> B)) (@pair (P -> A) (C -> P -> B)) p1).
Proof. exact (@lem8087563 A B C P (@pair (P -> A) (C -> P -> B)) p1). Qed.
Lemma lem8087565 {B C P : Type'} (p2 : type1475 B C P) : p2 = p2.
Proof. exact (eq_refl p2). Qed.
Lemma lem8087566 {A B C P : Type'} (p1 : P -> A) (p2 : type1475 B C P) : (@pair (P -> A) (C -> P -> B) p1 p2) = (@I ((P -> A) -> (C -> P -> B) -> prod (P -> A) (C -> P -> B)) (@pair (P -> A) (C -> P -> B)) p1 p2).
Proof. exact (MK_COMB (@lem8087564 A B C P p1) (@lem8087565 B C P p2)). Qed.
Lemma lem8087568 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087569 {A B C P : Type'} (f : type879 A B C P) (x : type1475 B C P) : (f x) = (@I ((C -> P -> B) -> prod (P -> A) (C -> P -> B)) f x).
Proof. exact (@lem8087568 (type1475 B C P) (type1647 A B C P) f x). Qed.
Lemma lem8087570 {A B C P : Type'} (p1 : P -> A) (p2 : type1475 B C P) : (@I ((P -> A) -> (C -> P -> B) -> prod (P -> A) (C -> P -> B)) (@pair (P -> A) (C -> P -> B)) p1 p2) = (term1654 A B C P p1 p2).
Proof. exact (@lem8087569 A B C P (@I ((P -> A) -> (C -> P -> B) -> prod (P -> A) (C -> P -> B)) (@pair (P -> A) (C -> P -> B)) p1) p2). Qed.
Lemma lem8087572 {A B C P : Type'} (p1 : P -> A) (p2 : type1475 B C P) : (@pair (P -> A) (C -> P -> B) p1 p2) = (term1654 A B C P p1 p2).
Proof. exact (TRANS (@lem8087566 A B C P p1 p2) (@lem8087570 A B C P p1 p2)). Qed.
Lemma lem8087573 {A B C P : Type'} (clauses : type1638 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8087574 {A B C P : Type'} (p1 : P -> A) (p2 : type1475 B C P) : (term1655 A B C P p1 p2) = (term1656 A B C P p1 p2).
Proof. exact (MK_COMB (@lem8087555 A B C P) (@lem8087572 A B C P p1 p2)). Qed.
Lemma lem8087575 {A B C P : Type'} (p1 : P -> A) (p2 : type1475 B C P) (clauses : type1638 A B C P) : (term429 A B C P p1 p2 clauses) = (term1657 A B C P p1 p2 clauses).
Proof. exact (MK_COMB (@lem8087574 A B C P p1 p2) (@lem8087573 A B C P clauses)). Qed.
Lemma lem8087577 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087578 {A B C P : Type'} (f : type1181 A B C P) (x : type1647 A B C P) : (f x) = (@I ((prod (P -> A) (C -> P -> B)) -> (list (prod (P -> A) (C -> P -> B))) -> Prop) f x).
Proof. exact (@lem8087577 (type1647 A B C P) (type1123 A B C P) f x). Qed.
Lemma lem8087579 {A B C P : Type'} (p1 : P -> A) (p2 : type1475 B C P) : (term1656 A B C P p1 p2) = (term1658 A B C P p1 p2).
Proof. exact (@lem8087578 A B C P (@List.In (prod (P -> A) (C -> P -> B))) (term1654 A B C P p1 p2)). Qed.
Lemma lem8087580 {A B C P : Type'} (clauses : type1638 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8087581 {A B C P : Type'} (p1 : P -> A) (p2 : type1475 B C P) (clauses : type1638 A B C P) : (term1657 A B C P p1 p2 clauses) = (term1659 A B C P p1 p2 clauses).
Proof. exact (MK_COMB (@lem8087579 A B C P p1 p2) (@lem8087580 A B C P clauses)). Qed.
Lemma lem8087583 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087584 {A B C P : Type'} (f : type1123 A B C P) (x : type1638 A B C P) : (f x) = (@I ((list (prod (P -> A) (C -> P -> B))) -> Prop) f x).
Proof. exact (@lem8087583 (type1638 A B C P) Prop f x). Qed.
Lemma lem8087585 {A B C P : Type'} (p1 : P -> A) (p2 : type1475 B C P) (clauses : type1638 A B C P) : (term1659 A B C P p1 p2 clauses) = (term1660 A B C P p1 p2 clauses).
Proof. exact (@lem8087584 A B C P (term1658 A B C P p1 p2) clauses). Qed.
Lemma lem8087586 {A B C P : Type'} (p1 : P -> A) (p2 : type1475 B C P) (clauses : type1638 A B C P) : (term1657 A B C P p1 p2 clauses) = (term1660 A B C P p1 p2 clauses).
Proof. exact (TRANS (@lem8087581 A B C P p1 p2 clauses) (@lem8087585 A B C P p1 p2 clauses)). Qed.
Lemma lem8087587 {A B C P : Type'} (p1 : P -> A) (p2 : type1475 B C P) (clauses : type1638 A B C P) : (term429 A B C P p1 p2 clauses) = (term1660 A B C P p1 p2 clauses).
Proof. exact (TRANS (@lem8087575 A B C P p1 p2 clauses) (@lem8087586 A B C P p1 p2 clauses)). Qed.
Lemma lem8087588 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8087589 {A B C P : Type'} (p1 : P -> A) (p2 : type1475 B C P) (clauses : type1638 A B C P) : (term433 A B C P p1 p2 clauses) = (term1733 A B C P p1 p2 clauses).
Proof. exact (MK_COMB (@lem8087588) (@lem8087587 A B C P p1 p2 clauses)). Qed.
Lemma lem8087590 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) : (term614 A B C P clauses p1 p2 c x) = (term1734 A B C P clauses p1 p2 c x).
Proof. exact (MK_COMB (@lem8087589 A B C P p1 p2 clauses) (@lem8087554 A B C P clauses p1 p2 c x)). Qed.
Lemma lem8087591 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8087598 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087599 {B C P : Type'} (f : type1475 B C P) (x : C) : (f x) = (@I (C -> P -> B) f x).
Proof. exact (@lem8087598 C (P -> B) f x). Qed.
Lemma lem8087600 {B C P : Type'} (t : type1475 B C P) (c : C) : (t c) = (@I (C -> P -> B) t c).
Proof. exact (@lem8087599 B C P t c). Qed.
Lemma lem8087601 {P : Type'} (x : P) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8087602 {B C P : Type'} (t : type1475 B C P) (c : C) (x : P) : (t c x) = (@I (C -> P -> B) t c x).
Proof. exact (MK_COMB (@lem8087600 B C P t c) (@lem8087601 P x)). Qed.
Lemma lem8087604 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087605 {B P : Type'} (f : P -> B) (x : P) : (f x) = (@I (P -> B) f x).
Proof. exact (@lem8087604 P B f x). Qed.
Lemma lem8087606 {B C P : Type'} (t : type1475 B C P) (c : C) (x : P) : (@I (C -> P -> B) t c x) = (term1729 B C P t c x).
Proof. exact (@lem8087605 B P (@I (C -> P -> B) t c) x). Qed.
Lemma lem8087608 {B C P : Type'} (t : type1475 B C P) (c : C) (x : P) : (t c x) = (term1729 B C P t c x).
Proof. exact (TRANS (@lem8087602 B C P t c x) (@lem8087606 B C P t c x)). Qed.
Lemma lem8087615 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087616 {B C P : Type'} (f : type1475 B C P) (x : C) : (f x) = (@I (C -> P -> B) f x).
Proof. exact (@lem8087615 C (P -> B) f x). Qed.
Lemma lem8087617 {B C P : Type'} (t' : type1475 B C P) (c : C) : (t' c) = (@I (C -> P -> B) t' c).
Proof. exact (@lem8087616 B C P t' c). Qed.
Lemma lem8087618 {P : Type'} (y : P) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem8087619 {B C P : Type'} (t' : type1475 B C P) (c : C) (y : P) : (t' c y) = (@I (C -> P -> B) t' c y).
Proof. exact (MK_COMB (@lem8087617 B C P t' c) (@lem8087618 P y)). Qed.
Lemma lem8087621 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087622 {B P : Type'} (f : P -> B) (x : P) : (f x) = (@I (P -> B) f x).
Proof. exact (@lem8087621 P B f x). Qed.
Lemma lem8087623 {B C P : Type'} (t' : type1475 B C P) (c : C) (y : P) : (@I (C -> P -> B) t' c y) = (term1729 B C P t' c y).
Proof. exact (@lem8087622 B P (@I (C -> P -> B) t' c) y). Qed.
Lemma lem8087625 {B C P : Type'} (t' : type1475 B C P) (c : C) (y : P) : (t' c y) = (term1729 B C P t' c y).
Proof. exact (TRANS (@lem8087619 B C P t' c y) (@lem8087623 B C P t' c y)). Qed.
Lemma lem8087626 {B C P : Type'} (t : type1475 B C P) (c : C) (x : P) : (term1735 B C P t c x) = (term1736 B C P t c x).
Proof. exact (MK_COMB (@lem8087591 B) (@lem8087608 B C P t c x)). Qed.
Lemma lem8087627 {B C P : Type'} (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : ((t c x) = (t' c y)) = ((term1729 B C P t c x) = (term1729 B C P t' c y)).
Proof. exact (MK_COMB (@lem8087626 B C P t c x) (@lem8087625 B C P t' c y)). Qed.
Lemma lem8087628 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8087629 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem8087634 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087635 {A P : Type'} (f : P -> A) (x : P) : (f x) = (@I (P -> A) f x).
Proof. exact (@lem8087634 P A f x). Qed.
Lemma lem8087637 {A P : Type'} (s : P -> A) (x : P) : (s x) = (@I (P -> A) s x).
Proof. exact (@lem8087635 A P s x). Qed.
Lemma lem8087642 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087643 {A P : Type'} (f : P -> A) (x : P) : (f x) = (@I (P -> A) f x).
Proof. exact (@lem8087642 P A f x). Qed.
Lemma lem8087645 {A P : Type'} (s' : P -> A) (y : P) : (s' y) = (@I (P -> A) s' y).
Proof. exact (@lem8087643 A P s' y). Qed.
Lemma lem8087646 {A P : Type'} (s : P -> A) (x : P) : (term1649 A P s x) = (term1650 A P s x).
Proof. exact (MK_COMB (@lem8087629 A) (@lem8087637 A P s x)). Qed.
Lemma lem8087647 {A P : Type'} (s : P -> A) (x : P) (s' : P -> A) (y : P) : ((s x) = (s' y)) = ((@I (P -> A) s x) = (@I (P -> A) s' y)).
Proof. exact (MK_COMB (@lem8087646 A P s x) (@lem8087645 A P s' y)). Qed.
Lemma lem8087648 {A P : Type'} (s : P -> A) (x : P) (s' : P -> A) (y : P) : (term1737 A P s x s' y) = (term1738 A P s x s' y).
Proof. exact (MK_COMB (@lem8087628) (@lem8087647 A P s x s' y)). Qed.
Lemma lem8087649 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8087650 {A B C P : Type'} : (@List.In (prod (P -> A) (C -> P -> B))) = (@List.In (prod (P -> A) (C -> P -> B))).
Proof. exact (eq_refl (@List.In (prod (P -> A) (C -> P -> B)))). Qed.
Lemma lem8087657 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087658 {A B C P : Type'} (f : type894 A B C P) (x : P -> A) : (f x) = (@I ((P -> A) -> (C -> P -> B) -> prod (P -> A) (C -> P -> B)) f x).
Proof. exact (@lem8087657 (P -> A) (type879 A B C P) f x). Qed.
Lemma lem8087659 {A B C P : Type'} (s' : P -> A) : (@pair (P -> A) (C -> P -> B) s') = (@I ((P -> A) -> (C -> P -> B) -> prod (P -> A) (C -> P -> B)) (@pair (P -> A) (C -> P -> B)) s').
Proof. exact (@lem8087658 A B C P (@pair (P -> A) (C -> P -> B)) s'). Qed.
Lemma lem8087660 {B C P : Type'} (t' : type1475 B C P) : t' = t'.
Proof. exact (eq_refl t'). Qed.
Lemma lem8087661 {A B C P : Type'} (s' : P -> A) (t' : type1475 B C P) : (@pair (P -> A) (C -> P -> B) s' t') = (@I ((P -> A) -> (C -> P -> B) -> prod (P -> A) (C -> P -> B)) (@pair (P -> A) (C -> P -> B)) s' t').
Proof. exact (MK_COMB (@lem8087659 A B C P s') (@lem8087660 B C P t')). Qed.
Lemma lem8087663 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087664 {A B C P : Type'} (f : type879 A B C P) (x : type1475 B C P) : (f x) = (@I ((C -> P -> B) -> prod (P -> A) (C -> P -> B)) f x).
Proof. exact (@lem8087663 (type1475 B C P) (type1647 A B C P) f x). Qed.
Lemma lem8087665 {A B C P : Type'} (s' : P -> A) (t' : type1475 B C P) : (@I ((P -> A) -> (C -> P -> B) -> prod (P -> A) (C -> P -> B)) (@pair (P -> A) (C -> P -> B)) s' t') = (term1654 A B C P s' t').
Proof. exact (@lem8087664 A B C P (@I ((P -> A) -> (C -> P -> B) -> prod (P -> A) (C -> P -> B)) (@pair (P -> A) (C -> P -> B)) s') t'). Qed.
Lemma lem8087667 {A B C P : Type'} (s' : P -> A) (t' : type1475 B C P) : (@pair (P -> A) (C -> P -> B) s' t') = (term1654 A B C P s' t').
Proof. exact (TRANS (@lem8087661 A B C P s' t') (@lem8087665 A B C P s' t')). Qed.
Lemma lem8087668 {A B C P : Type'} (clauses : type1638 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8087669 {A B C P : Type'} (s' : P -> A) (t' : type1475 B C P) : (term1655 A B C P s' t') = (term1656 A B C P s' t').
Proof. exact (MK_COMB (@lem8087650 A B C P) (@lem8087667 A B C P s' t')). Qed.
Lemma lem8087670 {A B C P : Type'} (s' : P -> A) (t' : type1475 B C P) (clauses : type1638 A B C P) : (term429 A B C P s' t' clauses) = (term1657 A B C P s' t' clauses).
Proof. exact (MK_COMB (@lem8087669 A B C P s' t') (@lem8087668 A B C P clauses)). Qed.
Lemma lem8087672 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087673 {A B C P : Type'} (f : type1181 A B C P) (x : type1647 A B C P) : (f x) = (@I ((prod (P -> A) (C -> P -> B)) -> (list (prod (P -> A) (C -> P -> B))) -> Prop) f x).
Proof. exact (@lem8087672 (type1647 A B C P) (type1123 A B C P) f x). Qed.
Lemma lem8087674 {A B C P : Type'} (s' : P -> A) (t' : type1475 B C P) : (term1656 A B C P s' t') = (term1658 A B C P s' t').
Proof. exact (@lem8087673 A B C P (@List.In (prod (P -> A) (C -> P -> B))) (term1654 A B C P s' t')). Qed.
Lemma lem8087675 {A B C P : Type'} (clauses : type1638 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8087676 {A B C P : Type'} (s' : P -> A) (t' : type1475 B C P) (clauses : type1638 A B C P) : (term1657 A B C P s' t' clauses) = (term1659 A B C P s' t' clauses).
Proof. exact (MK_COMB (@lem8087674 A B C P s' t') (@lem8087675 A B C P clauses)). Qed.
Lemma lem8087678 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087679 {A B C P : Type'} (f : type1123 A B C P) (x : type1638 A B C P) : (f x) = (@I ((list (prod (P -> A) (C -> P -> B))) -> Prop) f x).
Proof. exact (@lem8087678 (type1638 A B C P) Prop f x). Qed.
Lemma lem8087680 {A B C P : Type'} (s' : P -> A) (t' : type1475 B C P) (clauses : type1638 A B C P) : (term1659 A B C P s' t' clauses) = (term1660 A B C P s' t' clauses).
Proof. exact (@lem8087679 A B C P (term1658 A B C P s' t') clauses). Qed.
Lemma lem8087681 {A B C P : Type'} (s' : P -> A) (t' : type1475 B C P) (clauses : type1638 A B C P) : (term1657 A B C P s' t' clauses) = (term1660 A B C P s' t' clauses).
Proof. exact (TRANS (@lem8087676 A B C P s' t' clauses) (@lem8087680 A B C P s' t' clauses)). Qed.
Lemma lem8087682 {A B C P : Type'} (s' : P -> A) (t' : type1475 B C P) (clauses : type1638 A B C P) : (term429 A B C P s' t' clauses) = (term1660 A B C P s' t' clauses).
Proof. exact (TRANS (@lem8087670 A B C P s' t' clauses) (@lem8087681 A B C P s' t' clauses)). Qed.
Lemma lem8087683 {A B C P : Type'} (s' : P -> A) (t' : type1475 B C P) (clauses : type1638 A B C P) : (term1338 A B C P s' t' clauses) = (term1661 A B C P s' t' clauses).
Proof. exact (MK_COMB (@lem8087649) (@lem8087682 A B C P s' t' clauses)). Qed.
Lemma lem8087684 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8087685 {A B C P : Type'} (s' : P -> A) (t' : type1475 B C P) (clauses : type1638 A B C P) : (term533 A B C P s' t' clauses) = (term1739 A B C P s' t' clauses).
Proof. exact (MK_COMB (@lem8087684) (@lem8087683 A B C P s' t' clauses)). Qed.
Lemma lem8087686 {A B C P : Type'} (t' : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : P) (s' : P -> A) (y : P) : (term532 A B C P t' clauses s x s' y) = (term1740 A B C P t' clauses s x s' y).
Proof. exact (MK_COMB (@lem8087685 A B C P s' t' clauses) (@lem8087648 A P s x s' y)). Qed.
Lemma lem8087687 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8087688 {A B C P : Type'} : (@List.In (prod (P -> A) (C -> P -> B))) = (@List.In (prod (P -> A) (C -> P -> B))).
Proof. exact (eq_refl (@List.In (prod (P -> A) (C -> P -> B)))). Qed.
Lemma lem8087695 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087696 {A B C P : Type'} (f : type894 A B C P) (x : P -> A) : (f x) = (@I ((P -> A) -> (C -> P -> B) -> prod (P -> A) (C -> P -> B)) f x).
Proof. exact (@lem8087695 (P -> A) (type879 A B C P) f x). Qed.
Lemma lem8087697 {A B C P : Type'} (s : P -> A) : (@pair (P -> A) (C -> P -> B) s) = (@I ((P -> A) -> (C -> P -> B) -> prod (P -> A) (C -> P -> B)) (@pair (P -> A) (C -> P -> B)) s).
Proof. exact (@lem8087696 A B C P (@pair (P -> A) (C -> P -> B)) s). Qed.
Lemma lem8087698 {B C P : Type'} (t : type1475 B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8087699 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : (@pair (P -> A) (C -> P -> B) s t) = (@I ((P -> A) -> (C -> P -> B) -> prod (P -> A) (C -> P -> B)) (@pair (P -> A) (C -> P -> B)) s t).
Proof. exact (MK_COMB (@lem8087697 A B C P s) (@lem8087698 B C P t)). Qed.
Lemma lem8087701 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087702 {A B C P : Type'} (f : type879 A B C P) (x : type1475 B C P) : (f x) = (@I ((C -> P -> B) -> prod (P -> A) (C -> P -> B)) f x).
Proof. exact (@lem8087701 (type1475 B C P) (type1647 A B C P) f x). Qed.
Lemma lem8087703 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : (@I ((P -> A) -> (C -> P -> B) -> prod (P -> A) (C -> P -> B)) (@pair (P -> A) (C -> P -> B)) s t) = (term1654 A B C P s t).
Proof. exact (@lem8087702 A B C P (@I ((P -> A) -> (C -> P -> B) -> prod (P -> A) (C -> P -> B)) (@pair (P -> A) (C -> P -> B)) s) t). Qed.
Lemma lem8087705 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : (@pair (P -> A) (C -> P -> B) s t) = (term1654 A B C P s t).
Proof. exact (TRANS (@lem8087699 A B C P s t) (@lem8087703 A B C P s t)). Qed.
Lemma lem8087706 {A B C P : Type'} (clauses : type1638 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8087707 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : (term1655 A B C P s t) = (term1656 A B C P s t).
Proof. exact (MK_COMB (@lem8087688 A B C P) (@lem8087705 A B C P s t)). Qed.
Lemma lem8087708 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term429 A B C P s t clauses) = (term1657 A B C P s t clauses).
Proof. exact (MK_COMB (@lem8087707 A B C P s t) (@lem8087706 A B C P clauses)). Qed.
Lemma lem8087710 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087711 {A B C P : Type'} (f : type1181 A B C P) (x : type1647 A B C P) : (f x) = (@I ((prod (P -> A) (C -> P -> B)) -> (list (prod (P -> A) (C -> P -> B))) -> Prop) f x).
Proof. exact (@lem8087710 (type1647 A B C P) (type1123 A B C P) f x). Qed.
Lemma lem8087712 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) : (term1656 A B C P s t) = (term1658 A B C P s t).
Proof. exact (@lem8087711 A B C P (@List.In (prod (P -> A) (C -> P -> B))) (term1654 A B C P s t)). Qed.
Lemma lem8087713 {A B C P : Type'} (clauses : type1638 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8087714 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term1657 A B C P s t clauses) = (term1659 A B C P s t clauses).
Proof. exact (MK_COMB (@lem8087712 A B C P s t) (@lem8087713 A B C P clauses)). Qed.
Lemma lem8087716 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8087717 {A B C P : Type'} (f : type1123 A B C P) (x : type1638 A B C P) : (f x) = (@I ((list (prod (P -> A) (C -> P -> B))) -> Prop) f x).
Proof. exact (@lem8087716 (type1638 A B C P) Prop f x). Qed.
Lemma lem8087718 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term1659 A B C P s t clauses) = (term1660 A B C P s t clauses).
Proof. exact (@lem8087717 A B C P (term1658 A B C P s t) clauses). Qed.
Lemma lem8087719 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term1657 A B C P s t clauses) = (term1660 A B C P s t clauses).
Proof. exact (TRANS (@lem8087714 A B C P s t clauses) (@lem8087718 A B C P s t clauses)). Qed.
Lemma lem8087720 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term429 A B C P s t clauses) = (term1660 A B C P s t clauses).
Proof. exact (TRANS (@lem8087708 A B C P s t clauses) (@lem8087719 A B C P s t clauses)). Qed.
Lemma lem8087721 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term1338 A B C P s t clauses) = (term1661 A B C P s t clauses).
Proof. exact (MK_COMB (@lem8087687) (@lem8087720 A B C P s t clauses)). Qed.
Lemma lem8087722 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8087723 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term533 A B C P s t clauses) = (term1739 A B C P s t clauses).
Proof. exact (MK_COMB (@lem8087722) (@lem8087721 A B C P s t clauses)). Qed.
Lemma lem8087724 {A B C P : Type'} (t : type1475 B C P) (t' : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : P) (s' : P -> A) (y : P) : (term535 A B C P t t' clauses s x s' y) = (term1741 A B C P t t' clauses s x s' y).
Proof. exact (MK_COMB (@lem8087723 A B C P s t clauses) (@lem8087686 A B C P t' clauses s x s' y)). Qed.
Lemma lem8087725 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8087726 {A B C P : Type'} (t : type1475 B C P) (t' : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : P) (s' : P -> A) (y : P) : (term539 A B C P t t' clauses s x s' y) = (term1742 A B C P t t' clauses s x s' y).
Proof. exact (MK_COMB (@lem8087725) (@lem8087724 A B C P t t' clauses s x s' y)). Qed.
Lemma lem8087727 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term541 A B C P clauses s s' t x t' c y) = (term1743 A B C P clauses s s' t x t' c y).
Proof. exact (MK_COMB (@lem8087726 A B C P t t' clauses s x s' y) (@lem8087627 B C P t x t' c y)). Qed.
Lemma lem8087728 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term543 A B C P clauses s s' t x t' c) = (term1744 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8087727 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8087729 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8087730 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term544 A B C P clauses s s' t x t' c) = (term1745 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8087729 P) (@lem8087728 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8087731 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term545 A B C P clauses s s' t t' c) = (term1746 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8087730 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8087732 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8087733 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term546 A B C P clauses s s' t t' c) = (term1747 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8087732 P) (@lem8087731 A B C P clauses s s' t t' c)). Qed.
Lemma lem8087734 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term547 A B C P clauses s s' t c) = (term1748 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8087733 A B C P clauses s s' t t' c)). Qed.
Lemma lem8087735 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8087736 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term548 A B C P clauses s s' t c) = (term1749 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8087735 B C P) (@lem8087734 A B C P clauses s s' t c)). Qed.
Lemma lem8087737 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term549 A B C P clauses s t c) = (term1750 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8087736 A B C P clauses s s' t c)). Qed.
Lemma lem8087738 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8087739 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term550 A B C P clauses s t c) = (term1751 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8087738 A P) (@lem8087737 A B C P clauses s t c)). Qed.
Lemma lem8087740 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term551 A B C P clauses s c) = (term1752 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8087739 A B C P clauses s t c)). Qed.
Lemma lem8087741 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8087742 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term552 A B C P clauses s c) = (term1753 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8087741 B C P) (@lem8087740 A B C P clauses s c)). Qed.
Lemma lem8087743 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term553 A B C P clauses c) = (term1754 A B C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8087742 A B C P clauses s c)). Qed.
Lemma lem8087744 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8087745 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term554 A B C P clauses c) = (term1755 A B C P clauses c).
Proof. exact (MK_COMB (@lem8087744 A P) (@lem8087743 A B C P clauses c)). Qed.
Lemma lem8087746 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8087747 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term587 A B C P clauses c) = (term1756 A B C P clauses c).
Proof. exact (MK_COMB (@lem8087746) (@lem8087745 A B C P clauses c)). Qed.
Lemma lem8087748 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) : (term659 A B C P clauses p1 p2 c x) = (term1757 A B C P clauses p1 p2 c x).
Proof. exact (MK_COMB (@lem8087747 A B C P clauses c) (@lem8087590 A B C P clauses p1 p2 c x)). Qed.
Lemma lem8087749 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1757 A B C P clauses p1 p2 c x.
Proof. exact (EQ_MP (@lem8087748 A B C P clauses p1 p2 c x) (@lem8085709 A B C P clauses p1 p2 c x h1)). Qed.
Lemma lem8087750 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1734 A B C P clauses p1 p2 c x.
Proof. exact (proj2 (@lem8087749 A B C P clauses p1 p2 c x h1)). Qed.
Lemma lem8087751 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1755 A B C P clauses c.
Proof. exact (proj1 (@lem8087749 A B C P clauses p1 p2 c x h1)). Qed.
Lemma lem8087755 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1758 A P Q) = (term1759 A P Q).
Proof. exact (EQ_MP (@lem19013 A P Q) (@lem19012 A P Q)). Qed.
Lemma lem8087756 {B C P : Type'} (P' : type766 B C P) (Q : Prop) : (term1760 B C P P' Q) = (term1761 B C P P' Q).
Proof. exact (@lem8087755 (type1475 B C P) P' Q). Qed.
Lemma lem8087757 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1762 A B C P clauses s x) = (term1763 A B C P clauses s x).
Proof. exact (@lem8087756 B C P (term1662 A B C P s clauses) (term1653 A P s x)). Qed.
Lemma lem8087758 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term1764 A B C P s clauses t) = (term1661 A B C P s t clauses).
Proof. exact (eq_refl (term1764 A B C P s clauses t)). Qed.
Lemma lem8087759 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) : (term1765 A B C P s clauses) = (term1662 A B C P s clauses).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8087758 A B C P s t clauses)). Qed.
Lemma lem8087760 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8087761 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) : (term1766 A B C P s clauses) = (term1663 A B C P s clauses).
Proof. exact (MK_COMB (@lem8087760 B C P) (@lem8087759 A B C P s clauses)). Qed.
Lemma lem8087762 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8087763 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) : (term1767 A B C P s clauses) = (term1664 A B C P s clauses).
Proof. exact (MK_COMB (@lem8087762) (@lem8087761 A B C P s clauses)). Qed.
Lemma lem8087764 {A P : Type'} (s : P -> A) (x : A) : (term1653 A P s x) = (term1653 A P s x).
Proof. exact (eq_refl (term1653 A P s x)). Qed.
Lemma lem8087765 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1762 A B C P clauses s x) = (term1665 A B C P clauses s x).
Proof. exact (MK_COMB (@lem8087763 A B C P s clauses) (@lem8087764 A P s x)). Qed.
Lemma lem8087766 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8087767 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1768 A B C P clauses s x) = (term1769 A B C P clauses s x).
Proof. exact (MK_COMB (@lem8087766) (@lem8087765 A B C P clauses s x)). Qed.
Lemma lem8087768 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term1764 A B C P s clauses t) = (term1661 A B C P s t clauses).
Proof. exact (eq_refl (term1764 A B C P s clauses t)). Qed.
Lemma lem8087769 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8087770 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term1770 A B C P s clauses t) = (term1739 A B C P s t clauses).
Proof. exact (MK_COMB (@lem8087769) (@lem8087768 A B C P s t clauses)). Qed.
Lemma lem8087771 {A P : Type'} (s : P -> A) (x : A) : (term1653 A P s x) = (term1653 A P s x).
Proof. exact (eq_refl (term1653 A P s x)). Qed.
Lemma lem8087772 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1771 A B C P clauses t s x) = (term1772 A B C P t clauses s x).
Proof. exact (MK_COMB (@lem8087770 A B C P s t clauses) (@lem8087771 A P s x)). Qed.
Lemma lem8087773 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1773 A B C P clauses s x) = (term1774 A B C P clauses s x).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8087772 A B C P t clauses s x)). Qed.
Lemma lem8087774 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8087775 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1763 A B C P clauses s x) = (term1775 A B C P clauses s x).
Proof. exact (MK_COMB (@lem8087774 B C P) (@lem8087773 A B C P clauses s x)). Qed.
Lemma lem8087776 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : ((term1762 A B C P clauses s x) = (term1763 A B C P clauses s x)) = ((term1665 A B C P clauses s x) = (term1775 A B C P clauses s x)).
Proof. exact (MK_COMB (@lem8087767 A B C P clauses s x) (@lem8087775 A B C P clauses s x)). Qed.
Lemma lem8087777 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1665 A B C P clauses s x) = (term1775 A B C P clauses s x).
Proof. exact (EQ_MP (@lem8087776 A B C P clauses s x) (@lem8087757 A B C P clauses s x)). Qed.
Lemma lem8087779 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1776 A P Q) = (term1777 A P Q).
Proof. exact (EQ_MP (@lem19007 A P Q) (@lem19006 A P Q)). Qed.
Lemma lem8087780 {P : Type'} (P' : Prop) (Q : P -> Prop) : (term1776 P P' Q) = (term1777 P P' Q).
Proof. exact (@lem8087779 P P' Q). Qed.
Lemma lem8087781 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1778 A B C P t clauses s x) = (term1779 A B C P t clauses s x).
Proof. exact (@lem8087780 P (term1661 A B C P s t clauses) (term1652 A P s x)). Qed.
Lemma lem8087782 {A P : Type'} (s : P -> A) (a : P) (x : A) : (term1780 A P s x a) = (term1651 A P s a x).
Proof. exact (eq_refl (term1780 A P s x a)). Qed.
Lemma lem8087783 {A P : Type'} (s : P -> A) (x : A) : (term1781 A P s x) = (term1652 A P s x).
Proof. exact (fun_ext (fun a : P => @lem8087782 A P s a x)). Qed.
Lemma lem8087784 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8087785 {A P : Type'} (s : P -> A) (x : A) : (term1782 A P s x) = (term1653 A P s x).
Proof. exact (MK_COMB (@lem8087784 P) (@lem8087783 A P s x)). Qed.
Lemma lem8087786 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term1739 A B C P s t clauses) = (term1739 A B C P s t clauses).
Proof. exact (eq_refl (term1739 A B C P s t clauses)). Qed.
Lemma lem8087787 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1778 A B C P t clauses s x) = (term1772 A B C P t clauses s x).
Proof. exact (MK_COMB (@lem8087786 A B C P s t clauses) (@lem8087785 A P s x)). Qed.
Lemma lem8087788 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8087789 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1783 A B C P t clauses s x) = (term1784 A B C P t clauses s x).
Proof. exact (MK_COMB (@lem8087788) (@lem8087787 A B C P t clauses s x)). Qed.
Lemma lem8087790 {A P : Type'} (s : P -> A) (a : P) (x : A) : (term1780 A P s x a) = (term1651 A P s a x).
Proof. exact (eq_refl (term1780 A P s x a)). Qed.
Lemma lem8087791 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (clauses : type1638 A B C P) : (term1739 A B C P s t clauses) = (term1739 A B C P s t clauses).
Proof. exact (eq_refl (term1739 A B C P s t clauses)). Qed.
Lemma lem8087792 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (a : P) (x : A) : (term1785 A B C P t clauses s x a) = (term1786 A B C P t clauses s a x).
Proof. exact (MK_COMB (@lem8087791 A B C P s t clauses) (@lem8087790 A P s a x)). Qed.
Lemma lem8087793 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1787 A B C P t clauses s x) = (term1788 A B C P t clauses s x).
Proof. exact (fun_ext (fun a : P => @lem8087792 A B C P t clauses s a x)). Qed.
Lemma lem8087794 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8087795 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1779 A B C P t clauses s x) = (term1789 A B C P t clauses s x).
Proof. exact (MK_COMB (@lem8087794 P) (@lem8087793 A B C P t clauses s x)). Qed.
Lemma lem8087796 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : A) : ((term1778 A B C P t clauses s x) = (term1779 A B C P t clauses s x)) = ((term1772 A B C P t clauses s x) = (term1789 A B C P t clauses s x)).
Proof. exact (MK_COMB (@lem8087789 A B C P t clauses s x) (@lem8087795 A B C P t clauses s x)). Qed.
Lemma lem8087797 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1772 A B C P t clauses s x) = (term1789 A B C P t clauses s x).
Proof. exact (EQ_MP (@lem8087796 A B C P t clauses s x) (@lem8087781 A B C P t clauses s x)). Qed.
Lemma lem8087798 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1774 A B C P clauses s x) = (term1790 A B C P clauses s x).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8087797 A B C P t clauses s x)). Qed.
Lemma lem8087799 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8087800 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1775 A B C P clauses s x) = (term1791 A B C P clauses s x).
Proof. exact (MK_COMB (@lem8087799 B C P) (@lem8087798 A B C P clauses s x)). Qed.
Lemma lem8087801 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1665 A B C P clauses s x) = (term1791 A B C P clauses s x).
Proof. exact (TRANS (@lem8087777 A B C P clauses s x) (@lem8087800 A B C P clauses s x)). Qed.
Lemma lem8087802 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) : (term1666 A B C P clauses x) = (term1792 A B C P clauses x).
Proof. exact (fun_ext (fun s : P -> A => @lem8087801 A B C P clauses s x)). Qed.
Lemma lem8087803 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8087804 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) : (term1667 A B C P clauses x) = (term1793 A B C P clauses x).
Proof. exact (MK_COMB (@lem8087803 A P) (@lem8087802 A B C P clauses x)). Qed.
Lemma lem8087805 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8087806 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) : (term1668 A B C P clauses x) = (term1794 A B C P clauses x).
Proof. exact (MK_COMB (@lem8087805) (@lem8087804 A B C P clauses x)). Qed.
Lemma lem8087807 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : ((term1647 A B C P clauses c x) = _106907) = ((term1647 A B C P clauses c x) = _106907).
Proof. exact (eq_refl ((term1647 A B C P clauses c x) = _106907)). Qed.
Lemma lem8087808 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1669 A B C P clauses c x _106907) = (term1795 A B C P clauses c x _106907).
Proof. exact (MK_COMB (@lem8087806 A B C P clauses x) (@lem8087807 A B C P clauses c x _106907)). Qed.
Lemma lem8087810 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1796 A P Q) = (term1797 A P Q).
Proof. exact (EQ_MP (@lem19025 A P Q) (@lem19024 A P Q)). Qed.
Lemma lem8087811 {A P : Type'} (P' : type805 A P) (Q : Prop) : (term1798 A P P' Q) = (term1799 A P P' Q).
Proof. exact (@lem8087810 (P -> A) P' Q). Qed.
Lemma lem8087812 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1800 A B C P clauses c x _106907) = (term1801 A B C P clauses c x _106907).
Proof. exact (@lem8087811 A P (term1792 A B C P clauses x) ((term1647 A B C P clauses c x) = _106907)). Qed.
Lemma lem8087813 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1802 A B C P clauses x s) = (term1791 A B C P clauses s x).
Proof. exact (eq_refl (term1802 A B C P clauses x s)). Qed.
Lemma lem8087814 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) : (term1803 A B C P clauses x) = (term1792 A B C P clauses x).
Proof. exact (fun_ext (fun s : P -> A => @lem8087813 A B C P clauses s x)). Qed.
Lemma lem8087815 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8087816 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) : (term1804 A B C P clauses x) = (term1793 A B C P clauses x).
Proof. exact (MK_COMB (@lem8087815 A P) (@lem8087814 A B C P clauses x)). Qed.
Lemma lem8087817 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8087818 {A B C P : Type'} (clauses : type1638 A B C P) (x : A) : (term1805 A B C P clauses x) = (term1794 A B C P clauses x).
Proof. exact (MK_COMB (@lem8087817) (@lem8087816 A B C P clauses x)). Qed.
Lemma lem8087819 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : ((term1647 A B C P clauses c x) = _106907) = ((term1647 A B C P clauses c x) = _106907).
Proof. exact (eq_refl ((term1647 A B C P clauses c x) = _106907)). Qed.
Lemma lem8087820 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1800 A B C P clauses c x _106907) = (term1795 A B C P clauses c x _106907).
Proof. exact (MK_COMB (@lem8087818 A B C P clauses x) (@lem8087819 A B C P clauses c x _106907)). Qed.
Lemma lem8087821 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8087822 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1806 A B C P clauses c x _106907) = (term1807 A B C P clauses c x _106907).
Proof. exact (MK_COMB (@lem8087821) (@lem8087820 A B C P clauses c x _106907)). Qed.
Lemma lem8087823 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1802 A B C P clauses x s) = (term1791 A B C P clauses s x).
Proof. exact (eq_refl (term1802 A B C P clauses x s)). Qed.
Lemma lem8087824 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8087825 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1808 A B C P clauses x s) = (term1809 A B C P clauses s x).
Proof. exact (MK_COMB (@lem8087824) (@lem8087823 A B C P clauses s x)). Qed.
Lemma lem8087826 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : ((term1647 A B C P clauses c x) = _106907) = ((term1647 A B C P clauses c x) = _106907).
Proof. exact (eq_refl ((term1647 A B C P clauses c x) = _106907)). Qed.
Lemma lem8087827 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1810 A B C P s clauses c x _106907) = (term1811 A B C P s clauses c x _106907).
Proof. exact (MK_COMB (@lem8087825 A B C P clauses s x) (@lem8087826 A B C P clauses c x _106907)). Qed.
Lemma lem8087828 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1812 A B C P clauses c x _106907) = (term1813 A B C P clauses c x _106907).
Proof. exact (fun_ext (fun s : P -> A => @lem8087827 A B C P s clauses c x _106907)). Qed.
Lemma lem8087829 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8087830 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1801 A B C P clauses c x _106907) = (term1814 A B C P clauses c x _106907).
Proof. exact (MK_COMB (@lem8087829 A P) (@lem8087828 A B C P clauses c x _106907)). Qed.
Lemma lem8087831 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : ((term1800 A B C P clauses c x _106907) = (term1801 A B C P clauses c x _106907)) = ((term1795 A B C P clauses c x _106907) = (term1814 A B C P clauses c x _106907)).
Proof. exact (MK_COMB (@lem8087822 A B C P clauses c x _106907) (@lem8087830 A B C P clauses c x _106907)). Qed.
Lemma lem8087832 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1795 A B C P clauses c x _106907) = (term1814 A B C P clauses c x _106907).
Proof. exact (EQ_MP (@lem8087831 A B C P clauses c x _106907) (@lem8087812 A B C P clauses c x _106907)). Qed.
Lemma lem8087834 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1796 A P Q) = (term1797 A P Q).
Proof. exact (EQ_MP (@lem19025 A P Q) (@lem19024 A P Q)). Qed.
Lemma lem8087835 {B C P : Type'} (P' : type766 B C P) (Q : Prop) : (term1815 B C P P' Q) = (term1816 B C P P' Q).
Proof. exact (@lem8087834 (type1475 B C P) P' Q). Qed.
Lemma lem8087836 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1817 A B C P s clauses c x _106907) = (term1818 A B C P s clauses c x _106907).
Proof. exact (@lem8087835 B C P (term1790 A B C P clauses s x) ((term1647 A B C P clauses c x) = _106907)). Qed.
Lemma lem8087837 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1819 A B C P clauses s x t) = (term1789 A B C P t clauses s x).
Proof. exact (eq_refl (term1819 A B C P clauses s x t)). Qed.
Lemma lem8087838 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1820 A B C P clauses s x) = (term1790 A B C P clauses s x).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8087837 A B C P t clauses s x)). Qed.
Lemma lem8087839 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8087840 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1821 A B C P clauses s x) = (term1791 A B C P clauses s x).
Proof. exact (MK_COMB (@lem8087839 B C P) (@lem8087838 A B C P clauses s x)). Qed.
Lemma lem8087841 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8087842 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1822 A B C P clauses s x) = (term1809 A B C P clauses s x).
Proof. exact (MK_COMB (@lem8087841) (@lem8087840 A B C P clauses s x)). Qed.
Lemma lem8087843 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : ((term1647 A B C P clauses c x) = _106907) = ((term1647 A B C P clauses c x) = _106907).
Proof. exact (eq_refl ((term1647 A B C P clauses c x) = _106907)). Qed.
Lemma lem8087844 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1817 A B C P s clauses c x _106907) = (term1811 A B C P s clauses c x _106907).
Proof. exact (MK_COMB (@lem8087842 A B C P clauses s x) (@lem8087843 A B C P clauses c x _106907)). Qed.
Lemma lem8087845 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8087846 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1823 A B C P s clauses c x _106907) = (term1824 A B C P s clauses c x _106907).
Proof. exact (MK_COMB (@lem8087845) (@lem8087844 A B C P s clauses c x _106907)). Qed.
Lemma lem8087847 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1819 A B C P clauses s x t) = (term1789 A B C P t clauses s x).
Proof. exact (eq_refl (term1819 A B C P clauses s x t)). Qed.
Lemma lem8087848 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8087849 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1825 A B C P clauses s x t) = (term1826 A B C P t clauses s x).
Proof. exact (MK_COMB (@lem8087848) (@lem8087847 A B C P t clauses s x)). Qed.
Lemma lem8087850 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : ((term1647 A B C P clauses c x) = _106907) = ((term1647 A B C P clauses c x) = _106907).
Proof. exact (eq_refl ((term1647 A B C P clauses c x) = _106907)). Qed.
Lemma lem8087851 {A B C P : Type'} (t : type1475 B C P) (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1827 A B C P s t clauses c x _106907) = (term1828 A B C P t s clauses c x _106907).
Proof. exact (MK_COMB (@lem8087849 A B C P t clauses s x) (@lem8087850 A B C P clauses c x _106907)). Qed.
Lemma lem8087852 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1829 A B C P s clauses c x _106907) = (term1830 A B C P s clauses c x _106907).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8087851 A B C P t s clauses c x _106907)). Qed.
Lemma lem8087853 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8087854 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1818 A B C P s clauses c x _106907) = (term1831 A B C P s clauses c x _106907).
Proof. exact (MK_COMB (@lem8087853 B C P) (@lem8087852 A B C P s clauses c x _106907)). Qed.
Lemma lem8087855 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : ((term1817 A B C P s clauses c x _106907) = (term1818 A B C P s clauses c x _106907)) = ((term1811 A B C P s clauses c x _106907) = (term1831 A B C P s clauses c x _106907)).
Proof. exact (MK_COMB (@lem8087846 A B C P s clauses c x _106907) (@lem8087854 A B C P s clauses c x _106907)). Qed.
Lemma lem8087856 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1811 A B C P s clauses c x _106907) = (term1831 A B C P s clauses c x _106907).
Proof. exact (EQ_MP (@lem8087855 A B C P s clauses c x _106907) (@lem8087836 A B C P s clauses c x _106907)). Qed.
Lemma lem8087858 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1796 A P Q) = (term1797 A P Q).
Proof. exact (EQ_MP (@lem19025 A P Q) (@lem19024 A P Q)). Qed.
Lemma lem8087859 {P : Type'} (P' : P -> Prop) (Q : Prop) : (term1796 P P' Q) = (term1797 P P' Q).
Proof. exact (@lem8087858 P P' Q). Qed.
Lemma lem8087860 {A B C P : Type'} (t : type1475 B C P) (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1832 A B C P t s clauses c x _106907) = (term1833 A B C P t s clauses c x _106907).
Proof. exact (@lem8087859 P (term1788 A B C P t clauses s x) ((term1647 A B C P clauses c x) = _106907)). Qed.
Lemma lem8087861 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (a : P) (x : A) : (term1834 A B C P t clauses s x a) = (term1786 A B C P t clauses s a x).
Proof. exact (eq_refl (term1834 A B C P t clauses s x a)). Qed.
Lemma lem8087862 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1835 A B C P t clauses s x) = (term1788 A B C P t clauses s x).
Proof. exact (fun_ext (fun a : P => @lem8087861 A B C P t clauses s a x)). Qed.
Lemma lem8087863 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8087864 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1836 A B C P t clauses s x) = (term1789 A B C P t clauses s x).
Proof. exact (MK_COMB (@lem8087863 P) (@lem8087862 A B C P t clauses s x)). Qed.
Lemma lem8087865 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8087866 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (x : A) : (term1837 A B C P t clauses s x) = (term1826 A B C P t clauses s x).
Proof. exact (MK_COMB (@lem8087865) (@lem8087864 A B C P t clauses s x)). Qed.
Lemma lem8087867 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : ((term1647 A B C P clauses c x) = _106907) = ((term1647 A B C P clauses c x) = _106907).
Proof. exact (eq_refl ((term1647 A B C P clauses c x) = _106907)). Qed.
Lemma lem8087868 {A B C P : Type'} (t : type1475 B C P) (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1832 A B C P t s clauses c x _106907) = (term1828 A B C P t s clauses c x _106907).
Proof. exact (MK_COMB (@lem8087866 A B C P t clauses s x) (@lem8087867 A B C P clauses c x _106907)). Qed.
Lemma lem8087869 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8087870 {A B C P : Type'} (t : type1475 B C P) (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1838 A B C P t s clauses c x _106907) = (term1839 A B C P t s clauses c x _106907).
Proof. exact (MK_COMB (@lem8087869) (@lem8087868 A B C P t s clauses c x _106907)). Qed.
Lemma lem8087871 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (a : P) (x : A) : (term1834 A B C P t clauses s x a) = (term1786 A B C P t clauses s a x).
Proof. exact (eq_refl (term1834 A B C P t clauses s x a)). Qed.
Lemma lem8087872 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8087873 {A B C P : Type'} (t : type1475 B C P) (clauses : type1638 A B C P) (s : P -> A) (a : P) (x : A) : (term1840 A B C P t clauses s x a) = (term1841 A B C P t clauses s a x).
Proof. exact (MK_COMB (@lem8087872) (@lem8087871 A B C P t clauses s a x)). Qed.
Lemma lem8087874 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : ((term1647 A B C P clauses c x) = _106907) = ((term1647 A B C P clauses c x) = _106907).
Proof. exact (eq_refl ((term1647 A B C P clauses c x) = _106907)). Qed.
Lemma lem8087875 {A B C P : Type'} (t : type1475 B C P) (s : P -> A) (a : P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1842 A B C P t s a clauses c x _106907) = (term1843 A B C P t s a clauses c x _106907).
Proof. exact (MK_COMB (@lem8087873 A B C P t clauses s a x) (@lem8087874 A B C P clauses c x _106907)). Qed.
Lemma lem8087876 {A B C P : Type'} (t : type1475 B C P) (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1844 A B C P t s clauses c x _106907) = (term1845 A B C P t s clauses c x _106907).
Proof. exact (fun_ext (fun a : P => @lem8087875 A B C P t s a clauses c x _106907)). Qed.
Lemma lem8087877 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8087878 {A B C P : Type'} (t : type1475 B C P) (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1833 A B C P t s clauses c x _106907) = (term1846 A B C P t s clauses c x _106907).
Proof. exact (MK_COMB (@lem8087877 P) (@lem8087876 A B C P t s clauses c x _106907)). Qed.
Lemma lem8087879 {A B C P : Type'} (t : type1475 B C P) (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : ((term1832 A B C P t s clauses c x _106907) = (term1833 A B C P t s clauses c x _106907)) = ((term1828 A B C P t s clauses c x _106907) = (term1846 A B C P t s clauses c x _106907)).
Proof. exact (MK_COMB (@lem8087870 A B C P t s clauses c x _106907) (@lem8087878 A B C P t s clauses c x _106907)). Qed.
Lemma lem8087880 {A B C P : Type'} (t : type1475 B C P) (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1828 A B C P t s clauses c x _106907) = (term1846 A B C P t s clauses c x _106907).
Proof. exact (EQ_MP (@lem8087879 A B C P t s clauses c x _106907) (@lem8087860 A B C P t s clauses c x _106907)). Qed.
Lemma lem8087881 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1830 A B C P s clauses c x _106907) = (term1847 A B C P s clauses c x _106907).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8087880 A B C P t s clauses c x _106907)). Qed.
Lemma lem8087882 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8087883 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1831 A B C P s clauses c x _106907) = (term1848 A B C P s clauses c x _106907).
Proof. exact (MK_COMB (@lem8087882 B C P) (@lem8087881 A B C P s clauses c x _106907)). Qed.
Lemma lem8087884 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1811 A B C P s clauses c x _106907) = (term1848 A B C P s clauses c x _106907).
Proof. exact (TRANS (@lem8087856 A B C P s clauses c x _106907) (@lem8087883 A B C P s clauses c x _106907)). Qed.
Lemma lem8087885 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1813 A B C P clauses c x _106907) = (term1849 A B C P clauses c x _106907).
Proof. exact (fun_ext (fun s : P -> A => @lem8087884 A B C P s clauses c x _106907)). Qed.
Lemma lem8087886 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8087887 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1814 A B C P clauses c x _106907) = (term1850 A B C P clauses c x _106907).
Proof. exact (MK_COMB (@lem8087886 A P) (@lem8087885 A B C P clauses c x _106907)). Qed.
Lemma lem8087888 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1795 A B C P clauses c x _106907) = (term1850 A B C P clauses c x _106907).
Proof. exact (TRANS (@lem8087832 A B C P clauses c x _106907) (@lem8087887 A B C P clauses c x _106907)). Qed.
Lemma lem8087889 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1669 A B C P clauses c x _106907) = (term1850 A B C P clauses c x _106907).
Proof. exact (TRANS (@lem8087808 A B C P clauses c x _106907) (@lem8087888 A B C P clauses c x _106907)). Qed.
Lemma lem8087890 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1714 A B C P s t a clauses c x) = (term1714 A B C P s t a clauses c x).
Proof. exact (eq_refl (term1714 A B C P s t a clauses c x)). Qed.
Lemma lem8087891 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1716 A B C P s t a clauses c x _106907) = (term1851 A B C P s t a clauses c x _106907).
Proof. exact (MK_COMB (@lem8087890 A B C P s t a clauses c x) (@lem8087889 A B C P clauses c x _106907)). Qed.
Lemma lem8087893 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1776 A P Q) = (term1777 A P Q).
Proof. exact (EQ_MP (@lem19007 A P Q) (@lem19006 A P Q)). Qed.
Lemma lem8087894 {A P : Type'} (P' : Prop) (Q : type805 A P) : (term1852 A P P' Q) = (term1853 A P P' Q).
Proof. exact (@lem8087893 (P -> A) P' Q). Qed.
Lemma lem8087895 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1854 A B C P s t a clauses c x _106907) = (term1855 A B C P s t a clauses c x _106907).
Proof. exact (@lem8087894 A P (term1712 A B C P s t a clauses c x) (term1849 A B C P clauses c x _106907)). Qed.
Lemma lem8087896 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1856 A B C P clauses c x _106907 s) = (term1848 A B C P s clauses c x _106907).
Proof. exact (eq_refl (term1856 A B C P clauses c x _106907 s)). Qed.
Lemma lem8087897 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1857 A B C P clauses c x _106907) = (term1849 A B C P clauses c x _106907).
Proof. exact (fun_ext (fun s : P -> A => @lem8087896 A B C P s clauses c x _106907)). Qed.
Lemma lem8087898 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8087899 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1858 A B C P clauses c x _106907) = (term1850 A B C P clauses c x _106907).
Proof. exact (MK_COMB (@lem8087898 A P) (@lem8087897 A B C P clauses c x _106907)). Qed.
Lemma lem8087900 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1714 A B C P s t a clauses c x) = (term1714 A B C P s t a clauses c x).
Proof. exact (eq_refl (term1714 A B C P s t a clauses c x)). Qed.
Lemma lem8087901 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1854 A B C P s t a clauses c x _106907) = (term1851 A B C P s t a clauses c x _106907).
Proof. exact (MK_COMB (@lem8087900 A B C P s t a clauses c x) (@lem8087899 A B C P clauses c x _106907)). Qed.
Lemma lem8087902 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8087903 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1859 A B C P s t a clauses c x _106907) = (term1860 A B C P s t a clauses c x _106907).
Proof. exact (MK_COMB (@lem8087902) (@lem8087901 A B C P s t a clauses c x _106907)). Qed.
Lemma lem8087904 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1856 A B C P clauses c x _106907 s) = (term1848 A B C P s clauses c x _106907).
Proof. exact (eq_refl (term1856 A B C P clauses c x _106907 s)). Qed.
Lemma lem8087905 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1714 A B C P s t a clauses c x) = (term1714 A B C P s t a clauses c x).
Proof. exact (eq_refl (term1714 A B C P s t a clauses c x)). Qed.
Lemma lem8087906 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (s' : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1861 A B C P s t a clauses c x _106907 s') = (term1862 A B C P s t a s' clauses c x _106907).
Proof. exact (MK_COMB (@lem8087905 A B C P s t a clauses c x) (@lem8087904 A B C P s' clauses c x _106907)). Qed.
Lemma lem8087907 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1863 A B C P s t a clauses c x _106907) = (term1864 A B C P s t a clauses c x _106907).
Proof. exact (fun_ext (fun s' : P -> A => @lem8087906 A B C P s t a s' clauses c x _106907)). Qed.
Lemma lem8087908 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8087909 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1855 A B C P s t a clauses c x _106907) = (term1865 A B C P s t a clauses c x _106907).
Proof. exact (MK_COMB (@lem8087908 A P) (@lem8087907 A B C P s t a clauses c x _106907)). Qed.
Lemma lem8087910 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : ((term1854 A B C P s t a clauses c x _106907) = (term1855 A B C P s t a clauses c x _106907)) = ((term1851 A B C P s t a clauses c x _106907) = (term1865 A B C P s t a clauses c x _106907)).
Proof. exact (MK_COMB (@lem8087903 A B C P s t a clauses c x _106907) (@lem8087909 A B C P s t a clauses c x _106907)). Qed.
Lemma lem8087911 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1851 A B C P s t a clauses c x _106907) = (term1865 A B C P s t a clauses c x _106907).
Proof. exact (EQ_MP (@lem8087910 A B C P s t a clauses c x _106907) (@lem8087895 A B C P s t a clauses c x _106907)). Qed.
Lemma lem8087913 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1776 A P Q) = (term1777 A P Q).
Proof. exact (EQ_MP (@lem19007 A P Q) (@lem19006 A P Q)). Qed.
Lemma lem8087914 {B C P : Type'} (P' : Prop) (Q : type766 B C P) : (term1866 B C P P' Q) = (term1867 B C P P' Q).
Proof. exact (@lem8087913 (type1475 B C P) P' Q). Qed.
Lemma lem8087915 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (s' : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1868 A B C P s t a s' clauses c x _106907) = (term1869 A B C P s t a s' clauses c x _106907).
Proof. exact (@lem8087914 B C P (term1712 A B C P s t a clauses c x) (term1847 A B C P s' clauses c x _106907)). Qed.
Lemma lem8087916 {A B C P : Type'} (t : type1475 B C P) (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1870 A B C P s clauses c x _106907 t) = (term1846 A B C P t s clauses c x _106907).
Proof. exact (eq_refl (term1870 A B C P s clauses c x _106907 t)). Qed.
Lemma lem8087917 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1871 A B C P s clauses c x _106907) = (term1847 A B C P s clauses c x _106907).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8087916 A B C P t s clauses c x _106907)). Qed.
Lemma lem8087918 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8087919 {A B C P : Type'} (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1872 A B C P s clauses c x _106907) = (term1848 A B C P s clauses c x _106907).
Proof. exact (MK_COMB (@lem8087918 B C P) (@lem8087917 A B C P s clauses c x _106907)). Qed.
Lemma lem8087920 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1714 A B C P s t a clauses c x) = (term1714 A B C P s t a clauses c x).
Proof. exact (eq_refl (term1714 A B C P s t a clauses c x)). Qed.
Lemma lem8087921 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (s' : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1868 A B C P s t a s' clauses c x _106907) = (term1862 A B C P s t a s' clauses c x _106907).
Proof. exact (MK_COMB (@lem8087920 A B C P s t a clauses c x) (@lem8087919 A B C P s' clauses c x _106907)). Qed.
Lemma lem8087922 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8087923 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (s' : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1873 A B C P s t a s' clauses c x _106907) = (term1874 A B C P s t a s' clauses c x _106907).
Proof. exact (MK_COMB (@lem8087922) (@lem8087921 A B C P s t a s' clauses c x _106907)). Qed.
Lemma lem8087924 {A B C P : Type'} (t : type1475 B C P) (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1870 A B C P s clauses c x _106907 t) = (term1846 A B C P t s clauses c x _106907).
Proof. exact (eq_refl (term1870 A B C P s clauses c x _106907 t)). Qed.
Lemma lem8087925 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1714 A B C P s t a clauses c x) = (term1714 A B C P s t a clauses c x).
Proof. exact (eq_refl (term1714 A B C P s t a clauses c x)). Qed.
Lemma lem8087926 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (t' : type1475 B C P) (s' : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1875 A B C P s t a s' clauses c x _106907 t') = (term1876 A B C P s t a t' s' clauses c x _106907).
Proof. exact (MK_COMB (@lem8087925 A B C P s t a clauses c x) (@lem8087924 A B C P t' s' clauses c x _106907)). Qed.
Lemma lem8087927 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (s' : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1877 A B C P s t a s' clauses c x _106907) = (term1878 A B C P s t a s' clauses c x _106907).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8087926 A B C P s t a t' s' clauses c x _106907)). Qed.
Lemma lem8087928 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8087929 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (s' : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1869 A B C P s t a s' clauses c x _106907) = (term1879 A B C P s t a s' clauses c x _106907).
Proof. exact (MK_COMB (@lem8087928 B C P) (@lem8087927 A B C P s t a s' clauses c x _106907)). Qed.
Lemma lem8087930 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (s' : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : ((term1868 A B C P s t a s' clauses c x _106907) = (term1869 A B C P s t a s' clauses c x _106907)) = ((term1862 A B C P s t a s' clauses c x _106907) = (term1879 A B C P s t a s' clauses c x _106907)).
Proof. exact (MK_COMB (@lem8087923 A B C P s t a s' clauses c x _106907) (@lem8087929 A B C P s t a s' clauses c x _106907)). Qed.
Lemma lem8087931 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (s' : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1862 A B C P s t a s' clauses c x _106907) = (term1879 A B C P s t a s' clauses c x _106907).
Proof. exact (EQ_MP (@lem8087930 A B C P s t a s' clauses c x _106907) (@lem8087915 A B C P s t a s' clauses c x _106907)). Qed.
Lemma lem8087933 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1776 A P Q) = (term1777 A P Q).
Proof. exact (EQ_MP (@lem19007 A P Q) (@lem19006 A P Q)). Qed.
Lemma lem8087934 {P : Type'} (P' : Prop) (Q : P -> Prop) : (term1776 P P' Q) = (term1777 P P' Q).
Proof. exact (@lem8087933 P P' Q). Qed.
Lemma lem8087935 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (t' : type1475 B C P) (s' : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1880 A B C P s t a t' s' clauses c x _106907) = (term1881 A B C P s t a t' s' clauses c x _106907).
Proof. exact (@lem8087934 P (term1712 A B C P s t a clauses c x) (term1845 A B C P t' s' clauses c x _106907)). Qed.
Lemma lem8087936 {A B C P : Type'} (t : type1475 B C P) (s : P -> A) (a : P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1882 A B C P t s clauses c x _106907 a) = (term1843 A B C P t s a clauses c x _106907).
Proof. exact (eq_refl (term1882 A B C P t s clauses c x _106907 a)). Qed.
Lemma lem8087937 {A B C P : Type'} (t : type1475 B C P) (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1883 A B C P t s clauses c x _106907) = (term1845 A B C P t s clauses c x _106907).
Proof. exact (fun_ext (fun a : P => @lem8087936 A B C P t s a clauses c x _106907)). Qed.
Lemma lem8087938 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8087939 {A B C P : Type'} (t : type1475 B C P) (s : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1884 A B C P t s clauses c x _106907) = (term1846 A B C P t s clauses c x _106907).
Proof. exact (MK_COMB (@lem8087938 P) (@lem8087937 A B C P t s clauses c x _106907)). Qed.
Lemma lem8087940 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1714 A B C P s t a clauses c x) = (term1714 A B C P s t a clauses c x).
Proof. exact (eq_refl (term1714 A B C P s t a clauses c x)). Qed.
Lemma lem8087941 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (t' : type1475 B C P) (s' : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1880 A B C P s t a t' s' clauses c x _106907) = (term1876 A B C P s t a t' s' clauses c x _106907).
Proof. exact (MK_COMB (@lem8087940 A B C P s t a clauses c x) (@lem8087939 A B C P t' s' clauses c x _106907)). Qed.
Lemma lem8087942 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8087943 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (t' : type1475 B C P) (s' : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1885 A B C P s t a t' s' clauses c x _106907) = (term1886 A B C P s t a t' s' clauses c x _106907).
Proof. exact (MK_COMB (@lem8087942) (@lem8087941 A B C P s t a t' s' clauses c x _106907)). Qed.
Lemma lem8087944 {A B C P : Type'} (t : type1475 B C P) (s : P -> A) (a : P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1882 A B C P t s clauses c x _106907 a) = (term1843 A B C P t s a clauses c x _106907).
Proof. exact (eq_refl (term1882 A B C P t s clauses c x _106907 a)). Qed.
Lemma lem8087945 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) : (term1714 A B C P s t a clauses c x) = (term1714 A B C P s t a clauses c x).
Proof. exact (eq_refl (term1714 A B C P s t a clauses c x)). Qed.
Lemma lem8087946 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (t' : type1475 B C P) (s' : P -> A) (a' : P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1887 A B C P s t a t' s' clauses c x _106907 a') = (term1888 A B C P s t a t' s' a' clauses c x _106907).
Proof. exact (MK_COMB (@lem8087945 A B C P s t a clauses c x) (@lem8087944 A B C P t' s' a' clauses c x _106907)). Qed.
Lemma lem8087947 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (t' : type1475 B C P) (s' : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1889 A B C P s t a t' s' clauses c x _106907) = (term1890 A B C P s t a t' s' clauses c x _106907).
Proof. exact (fun_ext (fun a' : P => @lem8087946 A B C P s t a t' s' a' clauses c x _106907)). Qed.
Lemma lem8087948 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8087949 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (t' : type1475 B C P) (s' : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1881 A B C P s t a t' s' clauses c x _106907) = (term1891 A B C P s t a t' s' clauses c x _106907).
Proof. exact (MK_COMB (@lem8087948 P) (@lem8087947 A B C P s t a t' s' clauses c x _106907)). Qed.
Lemma lem8087950 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (t' : type1475 B C P) (s' : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : ((term1880 A B C P s t a t' s' clauses c x _106907) = (term1881 A B C P s t a t' s' clauses c x _106907)) = ((term1876 A B C P s t a t' s' clauses c x _106907) = (term1891 A B C P s t a t' s' clauses c x _106907)).
Proof. exact (MK_COMB (@lem8087943 A B C P s t a t' s' clauses c x _106907) (@lem8087949 A B C P s t a t' s' clauses c x _106907)). Qed.
Lemma lem8087951 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (t' : type1475 B C P) (s' : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1876 A B C P s t a t' s' clauses c x _106907) = (term1891 A B C P s t a t' s' clauses c x _106907).
Proof. exact (EQ_MP (@lem8087950 A B C P s t a t' s' clauses c x _106907) (@lem8087935 A B C P s t a t' s' clauses c x _106907)). Qed.
Lemma lem8087952 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (s' : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1878 A B C P s t a s' clauses c x _106907) = (term1892 A B C P s t a s' clauses c x _106907).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8087951 A B C P s t a t' s' clauses c x _106907)). Qed.
Lemma lem8087953 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8087954 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (s' : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1879 A B C P s t a s' clauses c x _106907) = (term1893 A B C P s t a s' clauses c x _106907).
Proof. exact (MK_COMB (@lem8087953 B C P) (@lem8087952 A B C P s t a s' clauses c x _106907)). Qed.
Lemma lem8087955 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (s' : P -> A) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1862 A B C P s t a s' clauses c x _106907) = (term1893 A B C P s t a s' clauses c x _106907).
Proof. exact (TRANS (@lem8087931 A B C P s t a s' clauses c x _106907) (@lem8087954 A B C P s t a s' clauses c x _106907)). Qed.
Lemma lem8087956 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1864 A B C P s t a clauses c x _106907) = (term1894 A B C P s t a clauses c x _106907).
Proof. exact (fun_ext (fun s' : P -> A => @lem8087955 A B C P s t a s' clauses c x _106907)). Qed.
Lemma lem8087957 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8087958 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1865 A B C P s t a clauses c x _106907) = (term1895 A B C P s t a clauses c x _106907).
Proof. exact (MK_COMB (@lem8087957 A P) (@lem8087956 A B C P s t a clauses c x _106907)). Qed.
Lemma lem8087959 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1851 A B C P s t a clauses c x _106907) = (term1895 A B C P s t a clauses c x _106907).
Proof. exact (TRANS (@lem8087911 A B C P s t a clauses c x _106907) (@lem8087958 A B C P s t a clauses c x _106907)). Qed.
Lemma lem8087960 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1716 A B C P s t a clauses c x _106907) = (term1895 A B C P s t a clauses c x _106907).
Proof. exact (TRANS (@lem8087891 A B C P s t a clauses c x _106907) (@lem8087959 A B C P s t a clauses c x _106907)). Qed.
Lemma lem8087961 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1718 A B C P s t a clauses c _106907) = (term1896 A B C P s t a clauses c _106907).
Proof. exact (fun_ext (fun x : A => @lem8087960 A B C P s t a clauses c x _106907)). Qed.
Lemma lem8087962 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8087963 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1720 A B C P s t a clauses c _106907) = (term1897 A B C P s t a clauses c _106907).
Proof. exact (MK_COMB (@lem8087962 A) (@lem8087961 A B C P s t a clauses c _106907)). Qed.
Lemma lem8087964 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1722 A B C P s t a clauses _106907) = (term1898 A B C P s t a clauses _106907).
Proof. exact (fun_ext (fun c : C => @lem8087963 A B C P s t a clauses c _106907)). Qed.
Lemma lem8087965 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8087966 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1723 A B C P s t a clauses _106907) = (term1899 A B C P s t a clauses _106907).
Proof. exact (MK_COMB (@lem8087965 C) (@lem8087964 A B C P s t a clauses _106907)). Qed.
Lemma lem8087967 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) : (term1724 A B C P s t a _106907) = (term1900 A B C P s t a _106907).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8087966 A B C P s t a clauses _106907)). Qed.
Lemma lem8087968 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8087969 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) : (term1725 A B C P s t a _106907) = (term1901 A B C P s t a _106907).
Proof. exact (MK_COMB (@lem8087968 A B C P) (@lem8087967 A B C P s t a _106907)). Qed.
Lemma lem8087993 {A B C P : Type'} (t : type1475 B C P) (s : P -> A) (a : P) (s' : type1117 A B C P) (t' : type1116 A B C P) (a' : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1888 A B C P s' t' a' t s a clauses c x _106907) = (term1902 A B C P t s a s' t' a' clauses c x _106907).
Proof. exact (@lem19490 (term1786 A B C P t clauses s a x) (term1712 A B C P s' t' a' clauses c x) ((term1647 A B C P clauses c x) = _106907)). Qed.
Lemma lem8087994 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1903 A B C P s t a clauses c x _106907) = (term1904 A B C P s t a clauses c x _106907).
Proof. exact (@lem19699 (term1708 A B C P s t c x clauses) (term1694 A B C P s t a clauses c x) ((term1647 A B C P clauses c x) = _106907)). Qed.
Lemma lem8088001 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1905 A B C P s t a clauses c x _106907) = (term1906 A B C P s t a clauses c x _106907).
Proof. exact (@lem19699 ((term1688 A B C P s a clauses c x) = x) ((term1647 A B C P clauses c x) = (term1681 A B C P t a clauses c x)) ((term1647 A B C P clauses c x) = _106907)). Qed.
Lemma lem8088004 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1907 A B C P s t clauses c x _106907) = (term1907 A B C P s t clauses c x _106907).
Proof. exact (eq_refl (term1907 A B C P s t clauses c x _106907)). Qed.
Lemma lem8088005 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1904 A B C P s t a clauses c x _106907) = (term1908 A B C P s t a clauses c x _106907).
Proof. exact (MK_COMB (@lem8088004 A B C P s t clauses c x _106907) (@lem8088001 A B C P s t a clauses c x _106907)). Qed.
Lemma lem8088006 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1903 A B C P s t a clauses c x _106907) = (term1908 A B C P s t a clauses c x _106907).
Proof. exact (TRANS (@lem8087994 A B C P s t a clauses c x _106907) (@lem8088005 A B C P s t a clauses c x _106907)). Qed.
Lemma lem8088007 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (c : C) (t' : type1475 B C P) (clauses : type1638 A B C P) (s' : P -> A) (a' : P) (x : A) : (term1909 A B C P s t a c t' clauses s' a' x) = (term1910 A B C P s t a c t' clauses s' a' x).
Proof. exact (@lem19699 (term1708 A B C P s t c x clauses) (term1694 A B C P s t a clauses c x) (term1786 A B C P t' clauses s' a' x)). Qed.
Lemma lem8088014 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (c : C) (t' : type1475 B C P) (clauses : type1638 A B C P) (s' : P -> A) (a' : P) (x : A) : (term1911 A B C P s t a c t' clauses s' a' x) = (term1912 A B C P s t a c t' clauses s' a' x).
Proof. exact (@lem19699 ((term1688 A B C P s a clauses c x) = x) ((term1647 A B C P clauses c x) = (term1681 A B C P t a clauses c x)) (term1786 A B C P t' clauses s' a' x)). Qed.
Lemma lem8088017 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (c : C) (t' : type1475 B C P) (clauses : type1638 A B C P) (s' : P -> A) (a : P) (x : A) : (term1913 A B C P s t c t' clauses s' a x) = (term1913 A B C P s t c t' clauses s' a x).
Proof. exact (eq_refl (term1913 A B C P s t c t' clauses s' a x)). Qed.
Lemma lem8088018 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (c : C) (t' : type1475 B C P) (clauses : type1638 A B C P) (s' : P -> A) (a' : P) (x : A) : (term1910 A B C P s t a c t' clauses s' a' x) = (term1914 A B C P s t a c t' clauses s' a' x).
Proof. exact (MK_COMB (@lem8088017 A B C P s t c t' clauses s' a' x) (@lem8088014 A B C P s t a c t' clauses s' a' x)). Qed.
Lemma lem8088019 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (c : C) (t' : type1475 B C P) (clauses : type1638 A B C P) (s' : P -> A) (a' : P) (x : A) : (term1909 A B C P s t a c t' clauses s' a' x) = (term1914 A B C P s t a c t' clauses s' a' x).
Proof. exact (TRANS (@lem8088007 A B C P s t a c t' clauses s' a' x) (@lem8088018 A B C P s t a c t' clauses s' a' x)). Qed.
Lemma lem8088020 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8088021 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (c : C) (t' : type1475 B C P) (clauses : type1638 A B C P) (s' : P -> A) (a' : P) (x : A) : (term1915 A B C P s t a c t' clauses s' a' x) = (term1916 A B C P s t a c t' clauses s' a' x).
Proof. exact (MK_COMB (@lem8088020) (@lem8088019 A B C P s t a c t' clauses s' a' x)). Qed.
Lemma lem8088022 {A B C P : Type'} (t : type1475 B C P) (s : P -> A) (a : P) (s' : type1117 A B C P) (t' : type1116 A B C P) (a' : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1902 A B C P t s a s' t' a' clauses c x _106907) = (term1917 A B C P t s a s' t' a' clauses c x _106907).
Proof. exact (MK_COMB (@lem8088021 A B C P s' t' a' c t clauses s a x) (@lem8088006 A B C P s' t' a' clauses c x _106907)). Qed.
Lemma lem8088024 {A B C P : Type'} (t : type1475 B C P) (s : P -> A) (a : P) (s' : type1117 A B C P) (t' : type1116 A B C P) (a' : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1888 A B C P s' t' a' t s a clauses c x _106907) = (term1917 A B C P t s a s' t' a' clauses c x _106907).
Proof. exact (TRANS (@lem8087993 A B C P t s a s' t' a' clauses c x _106907) (@lem8088022 A B C P t s a s' t' a' clauses c x _106907)). Qed.
Lemma lem8088025 {A B C P : Type'} (t : type1475 B C P) (s : P -> A) (s' : type1117 A B C P) (t' : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1890 A B C P s' t' a t s clauses c x _106907) = (term1918 A B C P t s s' t' a clauses c x _106907).
Proof. exact (fun_ext (fun a' : P => @lem8088024 A B C P t s a' s' t' a clauses c x _106907)). Qed.
Lemma lem8088026 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8088027 {A B C P : Type'} (t : type1475 B C P) (s : P -> A) (s' : type1117 A B C P) (t' : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1891 A B C P s' t' a t s clauses c x _106907) = (term1919 A B C P t s s' t' a clauses c x _106907).
Proof. exact (MK_COMB (@lem8088026 P) (@lem8088025 A B C P t s s' t' a clauses c x _106907)). Qed.
Lemma lem8088028 {A B C P : Type'} (s : P -> A) (s' : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1892 A B C P s' t a s clauses c x _106907) = (term1920 A B C P s s' t a clauses c x _106907).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8088027 A B C P t' s s' t a clauses c x _106907)). Qed.
Lemma lem8088029 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8088030 {A B C P : Type'} (s : P -> A) (s' : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1893 A B C P s' t a s clauses c x _106907) = (term1921 A B C P s s' t a clauses c x _106907).
Proof. exact (MK_COMB (@lem8088029 B C P) (@lem8088028 A B C P s s' t a clauses c x _106907)). Qed.
Lemma lem8088031 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1894 A B C P s t a clauses c x _106907) = (term1922 A B C P s t a clauses c x _106907).
Proof. exact (fun_ext (fun s' : P -> A => @lem8088030 A B C P s' s t a clauses c x _106907)). Qed.
Lemma lem8088032 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8088033 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (x : A) (_106907 : B) : (term1895 A B C P s t a clauses c x _106907) = (term1923 A B C P s t a clauses c x _106907).
Proof. exact (MK_COMB (@lem8088032 A P) (@lem8088031 A B C P s t a clauses c x _106907)). Qed.
Lemma lem8088034 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1896 A B C P s t a clauses c _106907) = (term1924 A B C P s t a clauses c _106907).
Proof. exact (fun_ext (fun x : A => @lem8088033 A B C P s t a clauses c x _106907)). Qed.
Lemma lem8088035 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8088036 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (_106907 : B) : (term1897 A B C P s t a clauses c _106907) = (term1925 A B C P s t a clauses c _106907).
Proof. exact (MK_COMB (@lem8088035 A) (@lem8088034 A B C P s t a clauses c _106907)). Qed.
Lemma lem8088037 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1898 A B C P s t a clauses _106907) = (term1926 A B C P s t a clauses _106907).
Proof. exact (fun_ext (fun c : C => @lem8088036 A B C P s t a clauses c _106907)). Qed.
Lemma lem8088038 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8088039 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (_106907 : B) : (term1899 A B C P s t a clauses _106907) = (term1927 A B C P s t a clauses _106907).
Proof. exact (MK_COMB (@lem8088038 C) (@lem8088037 A B C P s t a clauses _106907)). Qed.
Lemma lem8088040 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) : (term1900 A B C P s t a _106907) = (term1928 A B C P s t a _106907).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8088039 A B C P s t a clauses _106907)). Qed.
Lemma lem8088041 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8088042 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) : (term1901 A B C P s t a _106907) = (term1929 A B C P s t a _106907).
Proof. exact (MK_COMB (@lem8088041 A B C P) (@lem8088040 A B C P s t a _106907)). Qed.
Lemma lem8088043 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) : (term1725 A B C P s t a _106907) = (term1929 A B C P s t a _106907).
Proof. exact (TRANS (@lem8087969 A B C P s t a _106907) (@lem8088042 A B C P s t a _106907)). Qed.
Lemma lem8088044 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1929 A B C P s t a _106907.
Proof. exact (EQ_MP (@lem8088043 A B C P s t a _106907) (@lem8086067 A B C P s t a _106907 h1)). Qed.
Lemma lem8089228 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term1743 A B C P clauses s s' t x t' c y) = (term1743 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term1743 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8089229 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term1744 A B C P clauses s s' t x t' c) = (term1744 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8089228 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8089230 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8089231 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term1745 A B C P clauses s s' t x t' c) = (term1745 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8089230 P) (@lem8089229 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8089232 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term1746 A B C P clauses s s' t t' c) = (term1746 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8089231 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8089233 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8089234 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term1747 A B C P clauses s s' t t' c) = (term1747 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8089233 P) (@lem8089232 A B C P clauses s s' t t' c)). Qed.
Lemma lem8089235 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term1748 A B C P clauses s s' t c) = (term1748 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8089234 A B C P clauses s s' t t' c)). Qed.
Lemma lem8089236 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8089237 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term1749 A B C P clauses s s' t c) = (term1749 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8089236 B C P) (@lem8089235 A B C P clauses s s' t c)). Qed.
Lemma lem8089238 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term1750 A B C P clauses s t c) = (term1750 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8089237 A B C P clauses s s' t c)). Qed.
Lemma lem8089239 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8089240 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term1751 A B C P clauses s t c) = (term1751 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8089239 A P) (@lem8089238 A B C P clauses s t c)). Qed.
Lemma lem8089241 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term1752 A B C P clauses s c) = (term1752 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8089240 A B C P clauses s t c)). Qed.
Lemma lem8089242 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8089243 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term1753 A B C P clauses s c) = (term1753 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8089242 B C P) (@lem8089241 A B C P clauses s c)). Qed.
Lemma lem8089244 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term1754 A B C P clauses c) = (term1754 A B C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8089243 A B C P clauses s c)). Qed.
Lemma lem8089245 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8089247 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term1755 A B C P clauses c) = (term1755 A B C P clauses c).
Proof. exact (MK_COMB (@lem8089245 A P) (@lem8089244 A B C P clauses c)). Qed.
Lemma lem8089248 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1755 A B C P clauses c.
Proof. exact (EQ_MP (@lem8089247 A B C P clauses c) (@lem8087751 A B C P clauses p1 p2 c x h1)). Qed.
Lemma lem8089257 {A B C P : Type'} (_106909 : type1638 A B C P) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1930 A B C P s t a _106907 _106909.
Proof. exact (@lem8088044 A B C P s t a _106907 h1 _106909). Qed.
Lemma lem8089258 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106909 : type1638 A B C P) (_106907 : B) : (term1930 A B C P s t a _106907 _106909) = (term1927 A B C P s t a _106909 _106907).
Proof. exact (eq_refl (term1930 A B C P s t a _106907 _106909)). Qed.
Lemma lem8089259 {A B C P : Type'} (_106909 : type1638 A B C P) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1927 A B C P s t a _106909 _106907.
Proof. exact (EQ_MP (@lem8089258 A B C P s t a _106909 _106907) (@lem8089257 A B C P _106909 s t a _106907 h1)). Qed.
Lemma lem8089260 {A B C P : Type'} (_106909 : type1638 A B C P) (_106910 : C) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1931 A B C P s t a _106909 _106907 _106910.
Proof. exact (@lem8089259 A B C P _106909 s t a _106907 h1 _106910). Qed.
Lemma lem8089261 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106909 : type1638 A B C P) (_106910 : C) (_106907 : B) : (term1931 A B C P s t a _106909 _106907 _106910) = (term1925 A B C P s t a _106909 _106910 _106907).
Proof. exact (eq_refl (term1931 A B C P s t a _106909 _106907 _106910)). Qed.
Lemma lem8089262 {A B C P : Type'} (_106909 : type1638 A B C P) (_106910 : C) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1925 A B C P s t a _106909 _106910 _106907.
Proof. exact (EQ_MP (@lem8089261 A B C P s t a _106909 _106910 _106907) (@lem8089260 A B C P _106909 _106910 s t a _106907 h1)). Qed.
Lemma lem8089263 {A B C P : Type'} (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1932 A B C P s t a _106909 _106910 _106907 _106911.
Proof. exact (@lem8089262 A B C P _106909 _106910 s t a _106907 h1 _106911). Qed.
Lemma lem8089264 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) (_106907 : B) : (term1932 A B C P s t a _106909 _106910 _106907 _106911) = (term1923 A B C P s t a _106909 _106910 _106911 _106907).
Proof. exact (eq_refl (term1932 A B C P s t a _106909 _106910 _106907 _106911)). Qed.
Lemma lem8089265 {A B C P : Type'} (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1923 A B C P s t a _106909 _106910 _106911 _106907.
Proof. exact (EQ_MP (@lem8089264 A B C P s t a _106909 _106910 _106911 _106907) (@lem8089263 A B C P _106909 _106910 _106911 s t a _106907 h1)). Qed.
Lemma lem8089266 {A B C P : Type'} (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) (_106912 : P -> A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1933 A B C P s t a _106909 _106910 _106911 _106907 _106912.
Proof. exact (@lem8089265 A B C P _106909 _106910 _106911 s t a _106907 h1 _106912). Qed.
Lemma lem8089267 {A B C P : Type'} (_106912 : P -> A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) (_106907 : B) : (term1933 A B C P s t a _106909 _106910 _106911 _106907 _106912) = (term1921 A B C P _106912 s t a _106909 _106910 _106911 _106907).
Proof. exact (eq_refl (term1933 A B C P s t a _106909 _106910 _106911 _106907 _106912)). Qed.
Lemma lem8089268 {A B C P : Type'} (_106912 : P -> A) (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1921 A B C P _106912 s t a _106909 _106910 _106911 _106907.
Proof. exact (EQ_MP (@lem8089267 A B C P _106912 s t a _106909 _106910 _106911 _106907) (@lem8089266 A B C P _106909 _106910 _106911 _106912 s t a _106907 h1)). Qed.
Lemma lem8089269 {A B C P : Type'} (_106912 : P -> A) (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) (_106913 : type1475 B C P) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1934 A B C P _106912 s t a _106909 _106910 _106911 _106907 _106913.
Proof. exact (@lem8089268 A B C P _106912 _106909 _106910 _106911 s t a _106907 h1 _106913). Qed.
Lemma lem8089270 {A B C P : Type'} (_106913 : type1475 B C P) (_106912 : P -> A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) (_106907 : B) : (term1934 A B C P _106912 s t a _106909 _106910 _106911 _106907 _106913) = (term1919 A B C P _106913 _106912 s t a _106909 _106910 _106911 _106907).
Proof. exact (eq_refl (term1934 A B C P _106912 s t a _106909 _106910 _106911 _106907 _106913)). Qed.
Lemma lem8089271 {A B C P : Type'} (_106913 : type1475 B C P) (_106912 : P -> A) (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1919 A B C P _106913 _106912 s t a _106909 _106910 _106911 _106907.
Proof. exact (EQ_MP (@lem8089270 A B C P _106913 _106912 s t a _106909 _106910 _106911 _106907) (@lem8089269 A B C P _106912 _106909 _106910 _106911 _106913 s t a _106907 h1)). Qed.
Lemma lem8089272 {A B C P : Type'} (_106913 : type1475 B C P) (_106912 : P -> A) (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) (_106914 : P) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1935 A B C P _106913 _106912 s t a _106909 _106910 _106911 _106907 _106914.
Proof. exact (@lem8089271 A B C P _106913 _106912 _106909 _106910 _106911 s t a _106907 h1 _106914). Qed.
Lemma lem8089273 {A B C P : Type'} (_106913 : type1475 B C P) (_106912 : P -> A) (_106914 : P) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) (_106907 : B) : (term1935 A B C P _106913 _106912 s t a _106909 _106910 _106911 _106907 _106914) = (term1917 A B C P _106913 _106912 _106914 s t a _106909 _106910 _106911 _106907).
Proof. exact (eq_refl (term1935 A B C P _106913 _106912 s t a _106909 _106910 _106911 _106907 _106914)). Qed.
Lemma lem8089274 {A B C P : Type'} (_106913 : type1475 B C P) (_106912 : P -> A) (_106914 : P) (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1917 A B C P _106913 _106912 _106914 s t a _106909 _106910 _106911 _106907.
Proof. exact (EQ_MP (@lem8089273 A B C P _106913 _106912 _106914 s t a _106909 _106910 _106911 _106907) (@lem8089272 A B C P _106913 _106912 _106909 _106910 _106911 _106914 s t a _106907 h1)). Qed.
Lemma lem8089347 {A B C P : Type'} (_106939 : P -> A) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1936 A B C P clauses c _106939.
Proof. exact (@lem8089248 A B C P clauses p1 p2 c x h1 _106939). Qed.
Lemma lem8089348 {A B C P : Type'} (clauses : type1638 A B C P) (_106939 : P -> A) (c : C) : (term1936 A B C P clauses c _106939) = (term1753 A B C P clauses _106939 c).
Proof. exact (eq_refl (term1936 A B C P clauses c _106939)). Qed.
Lemma lem8089349 {A B C P : Type'} (_106939 : P -> A) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1753 A B C P clauses _106939 c.
Proof. exact (EQ_MP (@lem8089348 A B C P clauses _106939 c) (@lem8089347 A B C P _106939 clauses p1 p2 c x h1)). Qed.
Lemma lem8089350 {A B C P : Type'} (_106939 : P -> A) (_106940 : type1475 B C P) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1937 A B C P clauses _106939 c _106940.
Proof. exact (@lem8089349 A B C P _106939 clauses p1 p2 c x h1 _106940). Qed.
Lemma lem8089351 {A B C P : Type'} (clauses : type1638 A B C P) (_106939 : P -> A) (_106940 : type1475 B C P) (c : C) : (term1937 A B C P clauses _106939 c _106940) = (term1751 A B C P clauses _106939 _106940 c).
Proof. exact (eq_refl (term1937 A B C P clauses _106939 c _106940)). Qed.
Lemma lem8089352 {A B C P : Type'} (_106939 : P -> A) (_106940 : type1475 B C P) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1751 A B C P clauses _106939 _106940 c.
Proof. exact (EQ_MP (@lem8089351 A B C P clauses _106939 _106940 c) (@lem8089350 A B C P _106939 _106940 clauses p1 p2 c x h1)). Qed.
Lemma lem8089353 {A B C P : Type'} (_106939 : P -> A) (_106940 : type1475 B C P) (_106941 : P -> A) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1938 A B C P clauses _106939 _106940 c _106941.
Proof. exact (@lem8089352 A B C P _106939 _106940 clauses p1 p2 c x h1 _106941). Qed.
Lemma lem8089354 {A B C P : Type'} (clauses : type1638 A B C P) (_106939 : P -> A) (_106941 : P -> A) (_106940 : type1475 B C P) (c : C) : (term1938 A B C P clauses _106939 _106940 c _106941) = (term1749 A B C P clauses _106939 _106941 _106940 c).
Proof. exact (eq_refl (term1938 A B C P clauses _106939 _106940 c _106941)). Qed.
Lemma lem8089355 {A B C P : Type'} (_106939 : P -> A) (_106941 : P -> A) (_106940 : type1475 B C P) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1749 A B C P clauses _106939 _106941 _106940 c.
Proof. exact (EQ_MP (@lem8089354 A B C P clauses _106939 _106941 _106940 c) (@lem8089353 A B C P _106939 _106940 _106941 clauses p1 p2 c x h1)). Qed.
Lemma lem8089356 {A B C P : Type'} (_106939 : P -> A) (_106941 : P -> A) (_106940 : type1475 B C P) (_106942 : type1475 B C P) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1939 A B C P clauses _106939 _106941 _106940 c _106942.
Proof. exact (@lem8089355 A B C P _106939 _106941 _106940 clauses p1 p2 c x h1 _106942). Qed.
Lemma lem8089357 {A B C P : Type'} (clauses : type1638 A B C P) (_106939 : P -> A) (_106941 : P -> A) (_106940 : type1475 B C P) (_106942 : type1475 B C P) (c : C) : (term1939 A B C P clauses _106939 _106941 _106940 c _106942) = (term1747 A B C P clauses _106939 _106941 _106940 _106942 c).
Proof. exact (eq_refl (term1939 A B C P clauses _106939 _106941 _106940 c _106942)). Qed.
Lemma lem8089358 {A B C P : Type'} (_106939 : P -> A) (_106941 : P -> A) (_106940 : type1475 B C P) (_106942 : type1475 B C P) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1747 A B C P clauses _106939 _106941 _106940 _106942 c.
Proof. exact (EQ_MP (@lem8089357 A B C P clauses _106939 _106941 _106940 _106942 c) (@lem8089356 A B C P _106939 _106941 _106940 _106942 clauses p1 p2 c x h1)). Qed.
Lemma lem8089359 {A B C P : Type'} (_106939 : P -> A) (_106941 : P -> A) (_106940 : type1475 B C P) (_106942 : type1475 B C P) (_106943 : P) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1940 A B C P clauses _106939 _106941 _106940 _106942 c _106943.
Proof. exact (@lem8089358 A B C P _106939 _106941 _106940 _106942 clauses p1 p2 c x h1 _106943). Qed.
Lemma lem8089360 {A B C P : Type'} (clauses : type1638 A B C P) (_106939 : P -> A) (_106941 : P -> A) (_106940 : type1475 B C P) (_106943 : P) (_106942 : type1475 B C P) (c : C) : (term1940 A B C P clauses _106939 _106941 _106940 _106942 c _106943) = (term1745 A B C P clauses _106939 _106941 _106940 _106943 _106942 c).
Proof. exact (eq_refl (term1940 A B C P clauses _106939 _106941 _106940 _106942 c _106943)). Qed.
Lemma lem8089361 {A B C P : Type'} (_106939 : P -> A) (_106941 : P -> A) (_106940 : type1475 B C P) (_106943 : P) (_106942 : type1475 B C P) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1745 A B C P clauses _106939 _106941 _106940 _106943 _106942 c.
Proof. exact (EQ_MP (@lem8089360 A B C P clauses _106939 _106941 _106940 _106943 _106942 c) (@lem8089359 A B C P _106939 _106941 _106940 _106942 _106943 clauses p1 p2 c x h1)). Qed.
Lemma lem8089362 {A B C P : Type'} (_106939 : P -> A) (_106941 : P -> A) (_106940 : type1475 B C P) (_106943 : P) (_106942 : type1475 B C P) (_106944 : P) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1941 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944.
Proof. exact (@lem8089361 A B C P _106939 _106941 _106940 _106943 _106942 clauses p1 p2 c x h1 _106944). Qed.
Lemma lem8089363 {A B C P : Type'} (clauses : type1638 A B C P) (_106939 : P -> A) (_106941 : P -> A) (_106940 : type1475 B C P) (_106943 : P) (_106942 : type1475 B C P) (c : C) (_106944 : P) : (term1941 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944) = (term1743 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944).
Proof. exact (eq_refl (term1941 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944)). Qed.
Lemma lem8089364 {A B C P : Type'} (_106939 : P -> A) (_106941 : P -> A) (_106940 : type1475 B C P) (_106943 : P) (_106942 : type1475 B C P) (_106944 : P) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1743 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944.
Proof. exact (EQ_MP (@lem8089363 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944) (@lem8089362 A B C P _106939 _106941 _106940 _106943 _106942 _106944 clauses p1 p2 c x h1)). Qed.
Lemma lem8089406 {A B C P : Type'} (_106910 : C) (_106913 : type1475 B C P) (_106909 : type1638 A B C P) (_106912 : P -> A) (_106914 : P) (_106911 : A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1914 A B C P s t a _106910 _106913 _106909 _106912 _106914 _106911.
Proof. exact (proj1 (@lem8089274 A B C P _106913 _106912 _106914 _106909 _106910 _106911 s t a _106907 h1)). Qed.
Lemma lem8089411 {A B C P : Type'} (_106910 : C) (_106913 : type1475 B C P) (_106909 : type1638 A B C P) (_106912 : P -> A) (_106914 : P) (_106911 : A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1912 A B C P s t a _106910 _106913 _106909 _106912 _106914 _106911.
Proof. exact (proj2 (@lem8089406 A B C P _106910 _106913 _106909 _106912 _106914 _106911 s t a _106907 h1)). Qed.
Lemma lem8089418 {A B C P : Type'} (clauses : type1638 A B C P) (_106939 : P -> A) (_106941 : P -> A) (_106940 : type1475 B C P) (_106943 : P) (_106942 : type1475 B C P) (c : C) (_106944 : P) : (term1743 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944) = (term1942 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944).
Proof. exact (@lem8074582 (term1661 A B C P _106939 _106940 clauses) (term1740 A B C P _106942 clauses _106939 _106943 _106941 _106944) ((term1729 B C P _106940 c _106943) = (term1729 B C P _106942 c _106944))). Qed.
Lemma lem8089425 {A B C P : Type'} (clauses : type1638 A B C P) (_106939 : P -> A) (_106941 : P -> A) (_106940 : type1475 B C P) (_106943 : P) (_106942 : type1475 B C P) (c : C) (_106944 : P) : (term1943 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944) = (term1944 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944).
Proof. exact (@lem8074582 (term1661 A B C P _106941 _106942 clauses) (term1738 A P _106939 _106943 _106941 _106944) ((term1729 B C P _106940 c _106943) = (term1729 B C P _106942 c _106944))). Qed.
Lemma lem8089426 {A B C P : Type'} (_106939 : P -> A) (_106940 : type1475 B C P) (clauses : type1638 A B C P) : (term1739 A B C P _106939 _106940 clauses) = (term1739 A B C P _106939 _106940 clauses).
Proof. exact (eq_refl (term1739 A B C P _106939 _106940 clauses)). Qed.
Lemma lem8089429 {A B C P : Type'} (clauses : type1638 A B C P) (_106939 : P -> A) (_106941 : P -> A) (_106940 : type1475 B C P) (_106943 : P) (_106942 : type1475 B C P) (c : C) (_106944 : P) : (term1942 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944) = (term1945 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944).
Proof. exact (MK_COMB (@lem8089426 A B C P _106939 _106940 clauses) (@lem8089425 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944)). Qed.
Lemma lem8089431 {A B C P : Type'} (clauses : type1638 A B C P) (_106939 : P -> A) (_106941 : P -> A) (_106940 : type1475 B C P) (_106943 : P) (_106942 : type1475 B C P) (c : C) (_106944 : P) : (term1743 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944) = (term1945 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944).
Proof. exact (TRANS (@lem8089418 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944) (@lem8089429 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944)). Qed.
Lemma lem8089432 {A B C P : Type'} (_106939 : P -> A) (_106941 : P -> A) (_106940 : type1475 B C P) (_106943 : P) (_106942 : type1475 B C P) (_106944 : P) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1945 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944.
Proof. exact (EQ_MP (@lem8089431 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944) (@lem8089364 A B C P _106939 _106941 _106940 _106943 _106942 _106944 clauses p1 p2 c x h1)). Qed.
Lemma lem8089436 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1732 A B C P clauses p1 p2 c x.
Proof. exact (proj2 (@lem8087750 A B C P clauses p1 p2 c x h1)). Qed.
Lemma lem8089656 {A B C P : Type'} (_106910 : C) (_106913 : type1475 B C P) (_106909 : type1638 A B C P) (_106912 : P -> A) (_106914 : P) (_106911 : A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1946 A B C P s t _106910 _106913 _106909 _106912 _106914 _106911.
Proof. exact (proj1 (@lem8089406 A B C P _106910 _106913 _106909 _106912 _106914 _106911 s t a _106907 h1)). Qed.
Lemma lem8089666 {A B C P : Type'} (_106910 : C) (_106913 : type1475 B C P) (_106909 : type1638 A B C P) (_106912 : P -> A) (_106914 : P) (_106911 : A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1947 A B C P s a _106910 _106913 _106909 _106912 _106914 _106911.
Proof. exact (proj1 (@lem8089411 A B C P _106910 _106913 _106909 _106912 _106914 _106911 s t a _106907 h1)). Qed.
Lemma lem8089676 {A B C P : Type'} (_106910 : C) (_106913 : type1475 B C P) (_106909 : type1638 A B C P) (_106912 : P -> A) (_106914 : P) (_106911 : A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1948 A B C P t a _106910 _106913 _106909 _106912 _106914 _106911.
Proof. exact (proj2 (@lem8089411 A B C P _106910 _106913 _106909 _106912 _106914 _106911 s t a _106907 h1)). Qed.
Lemma lem8090988 {B : Type'} (x : B) (y : B) (z : B) : term1949 B x y z.
Proof. exact (@lem21385 B x y z). Qed.
Lemma lem8091196 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1660 A B C P p1 p2 clauses.
Proof. exact (proj1 (@lem8087750 A B C P clauses p1 p2 c x h1)). Qed.
Lemma lem8091197 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1950 A B C P p1 p2 clauses.
Proof. exact (fun h0 : term1661 A B C P p1 p2 clauses => @lem8091196 A B C P clauses p1 p2 c x h1). Qed.
Lemma lem8091199 (p : Prop) : (term1951 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8091200 {A B C P : Type'} (p1 : P -> A) (p2 : type1475 B C P) (clauses : type1638 A B C P) : (term1950 A B C P p1 p2 clauses) = (term1660 A B C P p1 p2 clauses).
Proof. exact (@lem8091199 (term1660 A B C P p1 p2 clauses)). Qed.
Lemma lem8091201 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1660 A B C P p1 p2 clauses.
Proof. exact (EQ_MP (@lem8091200 A B C P p1 p2 clauses) (@lem8091197 A B C P clauses p1 p2 c x h1)). Qed.
Lemma lem8091203 {A : Type'} (x : A) : x = x.
Proof. exact (@lem21386 A x). Qed.
Lemma lem8091204 {A : Type'} (x : A) : x = x.
Proof. exact (@lem8091203 A x). Qed.
Lemma lem8091205 {A P : Type'} (p1 : P -> A) (x : P) : (@I (P -> A) p1 x) = (@I (P -> A) p1 x).
Proof. exact (@lem8091204 A (@I (P -> A) p1 x)). Qed.
Lemma lem8091206 {A P : Type'} (p1 : P -> A) (x : P) : term1952 A P p1 x.
Proof. exact (fun h0 : term1953 A P p1 x => @lem8091205 A P p1 x). Qed.
Lemma lem8091208 (p : Prop) : (term1951 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8091209 {A P : Type'} (p1 : P -> A) (x : P) : (term1952 A P p1 x) = ((@I (P -> A) p1 x) = (@I (P -> A) p1 x)).
Proof. exact (@lem8091208 ((@I (P -> A) p1 x) = (@I (P -> A) p1 x))). Qed.
Lemma lem8091210 {A P : Type'} (p1 : P -> A) (x : P) : (@I (P -> A) p1 x) = (@I (P -> A) p1 x).
Proof. exact (EQ_MP (@lem8091209 A P p1 x) (@lem8091206 A P p1 x)). Qed.
Lemma lem8091212 (b : Prop) (a : Prop) : (a \/ b) = (term1954 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8091213 {A B C P : Type'} (_106913 : type1475 B C P) (_106912 : P -> A) (_106914 : P) (t : type1116 A B C P) (a : type1119 A B C P) (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) : (term1948 A B C P t a _106910 _106913 _106909 _106912 _106914 _106911) = (term1955 A B C P _106913 _106912 _106914 t a _106909 _106910 _106911).
Proof. exact (@lem8091212 (term1786 A B C P _106913 _106909 _106912 _106914 _106911) ((term1647 A B C P _106909 _106910 _106911) = (term1681 A B C P t a _106909 _106910 _106911))). Qed.
Lemma lem8091215 (a : Prop) (b : Prop) : (term1956 a b) = (term1957 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8091216 {A B C P : Type'} (_106913 : type1475 B C P) (_106909 : type1638 A B C P) (_106912 : P -> A) (_106914 : P) (_106911 : A) : (term1958 A B C P _106913 _106909 _106912 _106914 _106911) = (term1959 A B C P _106913 _106909 _106912 _106914 _106911).
Proof. exact (@lem8091215 (term1661 A B C P _106912 _106913 _106909) (term1651 A P _106912 _106914 _106911)). Qed.
Lemma lem8091218 (a : Prop) : (term1960 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8091219 {A B C P : Type'} (_106912 : P -> A) (_106913 : type1475 B C P) (_106909 : type1638 A B C P) : (term1961 A B C P _106912 _106913 _106909) = (term1660 A B C P _106912 _106913 _106909).
Proof. exact (@lem8091218 (term1660 A B C P _106912 _106913 _106909)). Qed.
Lemma lem8091220 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8091221 {A B C P : Type'} (_106912 : P -> A) (_106913 : type1475 B C P) (_106909 : type1638 A B C P) : (term1962 A B C P _106912 _106913 _106909) = (term1733 A B C P _106912 _106913 _106909).
Proof. exact (MK_COMB (@lem8091220) (@lem8091219 A B C P _106912 _106913 _106909)). Qed.
Lemma lem8091223 (a : Prop) : (term1960 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8091224 {A P : Type'} (_106912 : P -> A) (_106914 : P) (_106911 : A) : (term1963 A P _106912 _106914 _106911) = ((@I (P -> A) _106912 _106914) = _106911).
Proof. exact (@lem8091223 ((@I (P -> A) _106912 _106914) = _106911)). Qed.
Lemma lem8091225 {A B C P : Type'} (_106913 : type1475 B C P) (_106909 : type1638 A B C P) (_106912 : P -> A) (_106914 : P) (_106911 : A) : (term1959 A B C P _106913 _106909 _106912 _106914 _106911) = (term1964 A B C P _106913 _106909 _106912 _106914 _106911).
Proof. exact (MK_COMB (@lem8091221 A B C P _106912 _106913 _106909) (@lem8091224 A P _106912 _106914 _106911)). Qed.
Lemma lem8091226 {A B C P : Type'} (_106913 : type1475 B C P) (_106909 : type1638 A B C P) (_106912 : P -> A) (_106914 : P) (_106911 : A) : (term1958 A B C P _106913 _106909 _106912 _106914 _106911) = (term1964 A B C P _106913 _106909 _106912 _106914 _106911).
Proof. exact (TRANS (@lem8091216 A B C P _106913 _106909 _106912 _106914 _106911) (@lem8091225 A B C P _106913 _106909 _106912 _106914 _106911)). Qed.
Lemma lem8091227 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8091228 {A B C P : Type'} (_106913 : type1475 B C P) (_106909 : type1638 A B C P) (_106912 : P -> A) (_106914 : P) (_106911 : A) : (term1965 A B C P _106913 _106909 _106912 _106914 _106911) = (term1966 A B C P _106913 _106909 _106912 _106914 _106911).
Proof. exact (MK_COMB (@lem8091227) (@lem8091226 A B C P _106913 _106909 _106912 _106914 _106911)). Qed.
Lemma lem8091229 {A B C P : Type'} (t : type1116 A B C P) (a : type1119 A B C P) (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) : ((term1647 A B C P _106909 _106910 _106911) = (term1681 A B C P t a _106909 _106910 _106911)) = ((term1647 A B C P _106909 _106910 _106911) = (term1681 A B C P t a _106909 _106910 _106911)).
Proof. exact (eq_refl ((term1647 A B C P _106909 _106910 _106911) = (term1681 A B C P t a _106909 _106910 _106911))). Qed.
Lemma lem8091230 {A B C P : Type'} (_106913 : type1475 B C P) (_106912 : P -> A) (_106914 : P) (t : type1116 A B C P) (a : type1119 A B C P) (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) : (term1955 A B C P _106913 _106912 _106914 t a _106909 _106910 _106911) = (term1967 A B C P _106913 _106912 _106914 t a _106909 _106910 _106911).
Proof. exact (MK_COMB (@lem8091228 A B C P _106913 _106909 _106912 _106914 _106911) (@lem8091229 A B C P t a _106909 _106910 _106911)). Qed.
Lemma lem8091231 {A B C P : Type'} (_106913 : type1475 B C P) (_106912 : P -> A) (_106914 : P) (t : type1116 A B C P) (a : type1119 A B C P) (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) : (term1948 A B C P t a _106910 _106913 _106909 _106912 _106914 _106911) = (term1967 A B C P _106913 _106912 _106914 t a _106909 _106910 _106911).
Proof. exact (TRANS (@lem8091213 A B C P _106913 _106912 _106914 t a _106909 _106910 _106911) (@lem8091230 A B C P _106913 _106912 _106914 t a _106909 _106910 _106911)). Qed.
Lemma lem8091233 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1968 A B C P p2 clauses p1 x.
Proof. exact (conj (@lem8091201 A B C P clauses p1 p2 c x h1) (@lem8091210 A P p1 x)). Qed.
Lemma lem8091235 {A B C P : Type'} (_106913 : type1475 B C P) (_106912 : P -> A) (_106914 : P) (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1967 A B C P _106913 _106912 _106914 t a _106909 _106910 _106911.
Proof. exact (EQ_MP (@lem8091231 A B C P _106913 _106912 _106914 t a _106909 _106910 _106911) (@lem8089676 A B C P _106910 _106913 _106909 _106912 _106914 _106911 s t a _106907 h1)). Qed.
Lemma lem8091236 {A B C P : Type'} (_106913 : type1475 B C P) (_106912 : P -> A) (_106914 : P) (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1967 A B C P _106913 _106912 _106914 t a _106909 _106910 _106911.
Proof. exact (@lem8091235 A B C P _106913 _106912 _106914 _106909 _106910 _106911 s t a _106907 h1). Qed.
Lemma lem8091237 {A B C P : Type'} (p2 : type1475 B C P) (clauses : type1638 A B C P) (_106910 : C) (p1 : P -> A) (x : P) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1969 A B C P p2 t a clauses _106910 p1 x.
Proof. exact (@lem8091236 A B C P p2 p1 x clauses _106910 (@I (P -> A) p1 x) s t a _106907 h1). Qed.
Lemma lem8091240 {A B C P : Type'} (_106910 : C) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : (term1728 A B C P clauses _106910 p1 x) = (term1970 A B C P t a clauses _106910 p1 x).
Proof. exact (@lem8091237 A B C P p2 clauses _106910 p1 x s t a _106907 h1 (@lem8091233 A B C P clauses p1 p2 c x h2)). Qed.
Lemma lem8091241 {A B C P : Type'} (_106910 : C) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : (term1728 A B C P clauses _106910 p1 x) = (term1970 A B C P t a clauses _106910 p1 x).
Proof. exact (@lem8091240 A B C P _106910 s t a _106907 clauses p1 p2 c x h1 h2). Qed.
Lemma lem8091242 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : (term1728 A B C P clauses c p1 x) = (term1970 A B C P t a clauses c p1 x).
Proof. exact (@lem8091241 A B C P c s t a _106907 clauses p1 p2 c x h1 h2). Qed.
Lemma lem8091243 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : term1971 A B C P t a clauses c p1 x.
Proof. exact (fun h0 : term1972 A B C P t a clauses c p1 x => @lem8091242 A B C P s t a _106907 clauses p1 p2 c x h1 h2). Qed.
Lemma lem8091245 (p : Prop) : (term1951 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8091246 {A B C P : Type'} (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (p1 : P -> A) (x : P) : (term1971 A B C P t a clauses c p1 x) = ((term1728 A B C P clauses c p1 x) = (term1970 A B C P t a clauses c p1 x)).
Proof. exact (@lem8091245 ((term1728 A B C P clauses c p1 x) = (term1970 A B C P t a clauses c p1 x))). Qed.
Lemma lem8091247 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : (term1728 A B C P clauses c p1 x) = (term1970 A B C P t a clauses c p1 x).
Proof. exact (EQ_MP (@lem8091246 A B C P t a clauses c p1 x) (@lem8091243 A B C P s t a _106907 clauses p1 p2 c x h1 h2)). Qed.
Lemma lem8091249 {B : Type'} (x : B) : x = x.
Proof. exact (@lem21386 B x). Qed.
Lemma lem8091250 {B : Type'} (x : B) : x = x.
Proof. exact (@lem8091249 B x). Qed.
Lemma lem8091251 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (p1 : P -> A) (x : P) : (term1728 A B C P clauses c p1 x) = (term1728 A B C P clauses c p1 x).
Proof. exact (@lem8091250 B (term1728 A B C P clauses c p1 x)). Qed.
Lemma lem8091252 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (p1 : P -> A) (x : P) : term1973 A B C P clauses c p1 x.
Proof. exact (fun h0 : term1974 A B C P clauses c p1 x => @lem8091251 A B C P clauses c p1 x). Qed.
Lemma lem8091254 (p : Prop) : (term1951 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8091255 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (p1 : P -> A) (x : P) : (term1973 A B C P clauses c p1 x) = ((term1728 A B C P clauses c p1 x) = (term1728 A B C P clauses c p1 x)).
Proof. exact (@lem8091254 ((term1728 A B C P clauses c p1 x) = (term1728 A B C P clauses c p1 x))). Qed.
Lemma lem8091256 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (p1 : P -> A) (x : P) : (term1728 A B C P clauses c p1 x) = (term1728 A B C P clauses c p1 x).
Proof. exact (EQ_MP (@lem8091255 A B C P clauses c p1 x) (@lem8091252 A B C P clauses c p1 x)). Qed.
Lemma lem8091274 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8091275 {B : Type'} (y : B) (x : B) (z : B) : (term1975 B x y z) = (term1976 B y x z).
Proof. exact (@lem8091274 (y = z) (term1977 B x z)). Qed.
Lemma lem8091285 {B : Type'} (x : B) (y : B) : (term1978 B x y) = (term1978 B x y).
Proof. exact (eq_refl (term1978 B x y)). Qed.
Lemma lem8091286 {B : Type'} (y : B) (x : B) (z : B) : (term1949 B x y z) = (term1979 B y x z).
Proof. exact (MK_COMB (@lem8091285 B x y) (@lem8091275 B y x z)). Qed.
Lemma lem8091290 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8091291 {B : Type'} (y : B) (x : B) (z : B) : (term1979 B y x z) = (term1980 B y x z).
Proof. exact (@lem8091290 (y = z) (term1977 B x y) (term1977 B x z)). Qed.
Lemma lem8091313 {B : Type'} (y : B) (x : B) (z : B) : (term1949 B x y z) = (term1980 B y x z).
Proof. exact (TRANS (@lem8091286 B y x z) (@lem8091291 B y x z)). Qed.
Lemma lem8091314 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8091315 {B : Type'} (y : B) (x : B) (z : B) : (term1981 B x y z) = (term1982 B y x z).
Proof. exact (MK_COMB (@lem8091314) (@lem8091313 B y x z)). Qed.
Lemma lem8091337 {B : Type'} (y : B) (x : B) (z : B) : (term1980 B y x z) = (term1980 B y x z).
Proof. exact (eq_refl (term1980 B y x z)). Qed.
Lemma lem8091338 {B : Type'} (y : B) (x : B) (z : B) : ((term1949 B x y z) = (term1980 B y x z)) = ((term1980 B y x z) = (term1980 B y x z)).
Proof. exact (MK_COMB (@lem8091315 B y x z) (@lem8091337 B y x z)). Qed.
Lemma lem8091340 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8091341 (x : Prop) : (x = x) = True.
Proof. exact (@lem8091340 Prop x). Qed.
Lemma lem8091342 {B : Type'} (y : B) (x : B) (z : B) : ((term1980 B y x z) = (term1980 B y x z)) = True.
Proof. exact (@lem8091341 (term1980 B y x z)). Qed.
Lemma lem8091343 {B : Type'} (y : B) (x : B) (z : B) : ((term1949 B x y z) = (term1980 B y x z)) = True.
Proof. exact (TRANS (@lem8091338 B y x z) (@lem8091342 B y x z)). Qed.
Lemma lem8091344 {B : Type'} (y : B) (x : B) (z : B) : True = ((term1949 B x y z) = (term1980 B y x z)).
Proof. exact (SYM (@lem8091343 B y x z)). Qed.
Lemma lem8091345 {B : Type'} (y : B) (x : B) (z : B) : (term1949 B x y z) = (term1980 B y x z).
Proof. exact (EQ_MP (@lem8091344 B y x z) (@lem0)). Qed.
Lemma lem8091346 {B : Type'} (y : B) (x : B) (z : B) : term1980 B y x z.
Proof. exact (EQ_MP (@lem8091345 B y x z) (@lem8090988 B x y z)). Qed.
Lemma lem8091348 (b : Prop) (a : Prop) : (a \/ b) = (term1954 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8091349 {B : Type'} (x : B) (y : B) (z : B) : (term1980 B y x z) = (term1983 B x y z).
Proof. exact (@lem8091348 (term1984 B y x z) (y = z)). Qed.
Lemma lem8091351 (a : Prop) (b : Prop) : (term1956 a b) = (term1957 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8091352 {B : Type'} (y : B) (x : B) (z : B) : (term1985 B y x z) = (term1986 B y x z).
Proof. exact (@lem8091351 (term1977 B x y) (term1977 B x z)). Qed.
Lemma lem8091354 (a : Prop) : (term1960 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8091355 {B : Type'} (x : B) (y : B) : (term1987 B x y) = (x = y).
Proof. exact (@lem8091354 (x = y)). Qed.
Lemma lem8091356 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8091357 {B : Type'} (x : B) (y : B) : (term1988 B x y) = (term1989 B x y).
Proof. exact (MK_COMB (@lem8091356) (@lem8091355 B x y)). Qed.
Lemma lem8091359 (a : Prop) : (term1960 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8091360 {B : Type'} (x : B) (z : B) : (term1987 B x z) = (x = z).
Proof. exact (@lem8091359 (x = z)). Qed.
Lemma lem8091361 {B : Type'} (y : B) (x : B) (z : B) : (term1986 B y x z) = (term1990 B y x z).
Proof. exact (MK_COMB (@lem8091357 B x y) (@lem8091360 B x z)). Qed.
Lemma lem8091362 {B : Type'} (y : B) (x : B) (z : B) : (term1985 B y x z) = (term1990 B y x z).
Proof. exact (TRANS (@lem8091352 B y x z) (@lem8091361 B y x z)). Qed.
Lemma lem8091363 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8091364 {B : Type'} (y : B) (x : B) (z : B) : (term1991 B y x z) = (term1992 B y x z).
Proof. exact (MK_COMB (@lem8091363) (@lem8091362 B y x z)). Qed.
Lemma lem8091365 {B : Type'} (y : B) (z : B) : (y = z) = (y = z).
Proof. exact (eq_refl (y = z)). Qed.
Lemma lem8091366 {B : Type'} (x : B) (y : B) (z : B) : (term1983 B x y z) = (term1993 B x y z).
Proof. exact (MK_COMB (@lem8091364 B y x z) (@lem8091365 B y z)). Qed.
Lemma lem8091367 {B : Type'} (x : B) (y : B) (z : B) : (term1980 B y x z) = (term1993 B x y z).
Proof. exact (TRANS (@lem8091349 B x y z) (@lem8091366 B x y z)). Qed.
Lemma lem8091369 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : term1994 A B C P t a clauses c p1 x.
Proof. exact (conj (@lem8091247 A B C P s t a _106907 clauses p1 p2 c x h1 h2) (@lem8091256 A B C P clauses c p1 x)). Qed.
Lemma lem8091371 {B : Type'} (x : B) (y : B) (z : B) : term1993 B x y z.
Proof. exact (EQ_MP (@lem8091367 B x y z) (@lem8091346 B y x z)). Qed.
Lemma lem8091372 {B : Type'} (x : B) (y : B) (z : B) : term1993 B x y z.
Proof. exact (@lem8091371 B x y z). Qed.
Lemma lem8091373 {A B C P : Type'} (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (p1 : P -> A) (x : P) : term1995 A B C P t a clauses c p1 x.
Proof. exact (@lem8091372 B (term1728 A B C P clauses c p1 x) (term1970 A B C P t a clauses c p1 x) (term1728 A B C P clauses c p1 x)). Qed.
Lemma lem8091376 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : (term1970 A B C P t a clauses c p1 x) = (term1728 A B C P clauses c p1 x).
Proof. exact (@lem8091373 A B C P t a clauses c p1 x (@lem8091369 A B C P s t a _106907 clauses p1 p2 c x h1 h2)). Qed.
Lemma lem8091377 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : term1996 A B C P t a clauses c p1 x.
Proof. exact (fun h0 : term1997 A B C P t a clauses c p1 x => @lem8091376 A B C P s t a _106907 clauses p1 p2 c x h1 h2). Qed.
Lemma lem8091379 (p : Prop) : (term1951 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8091380 {A B C P : Type'} (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (p1 : P -> A) (x : P) : (term1996 A B C P t a clauses c p1 x) = ((term1970 A B C P t a clauses c p1 x) = (term1728 A B C P clauses c p1 x)).
Proof. exact (@lem8091379 ((term1970 A B C P t a clauses c p1 x) = (term1728 A B C P clauses c p1 x))). Qed.
Lemma lem8091381 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : (term1970 A B C P t a clauses c p1 x) = (term1728 A B C P clauses c p1 x).
Proof. exact (EQ_MP (@lem8091380 A B C P t a clauses c p1 x) (@lem8091377 A B C P s t a _106907 clauses p1 p2 c x h1 h2)). Qed.
Lemma lem8091383 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1660 A B C P p1 p2 clauses.
Proof. exact (proj1 (@lem8087750 A B C P clauses p1 p2 c x h1)). Qed.
Lemma lem8091384 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1950 A B C P p1 p2 clauses.
Proof. exact (fun h0 : term1661 A B C P p1 p2 clauses => @lem8091383 A B C P clauses p1 p2 c x h1). Qed.
Lemma lem8091386 (p : Prop) : (term1951 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8091387 {A B C P : Type'} (p1 : P -> A) (p2 : type1475 B C P) (clauses : type1638 A B C P) : (term1950 A B C P p1 p2 clauses) = (term1660 A B C P p1 p2 clauses).
Proof. exact (@lem8091386 (term1660 A B C P p1 p2 clauses)). Qed.
Lemma lem8091388 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1660 A B C P p1 p2 clauses.
Proof. exact (EQ_MP (@lem8091387 A B C P p1 p2 clauses) (@lem8091384 A B C P clauses p1 p2 c x h1)). Qed.
Lemma lem8091390 {A : Type'} (x : A) : x = x.
Proof. exact (@lem21386 A x). Qed.
Lemma lem8091391 {A : Type'} (x : A) : x = x.
Proof. exact (@lem8091390 A x). Qed.
Lemma lem8091392 {A P : Type'} (p1 : P -> A) (x : P) : (@I (P -> A) p1 x) = (@I (P -> A) p1 x).
Proof. exact (@lem8091391 A (@I (P -> A) p1 x)). Qed.
Lemma lem8091393 {A P : Type'} (p1 : P -> A) (x : P) : term1952 A P p1 x.
Proof. exact (fun h0 : term1953 A P p1 x => @lem8091392 A P p1 x). Qed.
Lemma lem8091395 (p : Prop) : (term1951 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8091396 {A P : Type'} (p1 : P -> A) (x : P) : (term1952 A P p1 x) = ((@I (P -> A) p1 x) = (@I (P -> A) p1 x)).
Proof. exact (@lem8091395 ((@I (P -> A) p1 x) = (@I (P -> A) p1 x))). Qed.
Lemma lem8091397 {A P : Type'} (p1 : P -> A) (x : P) : (@I (P -> A) p1 x) = (@I (P -> A) p1 x).
Proof. exact (EQ_MP (@lem8091396 A P p1 x) (@lem8091393 A P p1 x)). Qed.
Lemma lem8091399 (b : Prop) (a : Prop) : (a \/ b) = (term1954 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8091400 {A B C P : Type'} (_106913 : type1475 B C P) (_106912 : P -> A) (_106914 : P) (s : type1117 A B C P) (t : type1116 A B C P) (_106910 : C) (_106911 : A) (_106909 : type1638 A B C P) : (term1946 A B C P s t _106910 _106913 _106909 _106912 _106914 _106911) = (term1998 A B C P _106913 _106912 _106914 s t _106910 _106911 _106909).
Proof. exact (@lem8091399 (term1786 A B C P _106913 _106909 _106912 _106914 _106911) (term1708 A B C P s t _106910 _106911 _106909)). Qed.
Lemma lem8091402 (a : Prop) (b : Prop) : (term1956 a b) = (term1957 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8091403 {A B C P : Type'} (_106913 : type1475 B C P) (_106909 : type1638 A B C P) (_106912 : P -> A) (_106914 : P) (_106911 : A) : (term1958 A B C P _106913 _106909 _106912 _106914 _106911) = (term1959 A B C P _106913 _106909 _106912 _106914 _106911).
Proof. exact (@lem8091402 (term1661 A B C P _106912 _106913 _106909) (term1651 A P _106912 _106914 _106911)). Qed.
Lemma lem8091405 (a : Prop) : (term1960 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8091406 {A B C P : Type'} (_106912 : P -> A) (_106913 : type1475 B C P) (_106909 : type1638 A B C P) : (term1961 A B C P _106912 _106913 _106909) = (term1660 A B C P _106912 _106913 _106909).
Proof. exact (@lem8091405 (term1660 A B C P _106912 _106913 _106909)). Qed.
Lemma lem8091407 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8091408 {A B C P : Type'} (_106912 : P -> A) (_106913 : type1475 B C P) (_106909 : type1638 A B C P) : (term1962 A B C P _106912 _106913 _106909) = (term1733 A B C P _106912 _106913 _106909).
Proof. exact (MK_COMB (@lem8091407) (@lem8091406 A B C P _106912 _106913 _106909)). Qed.
Lemma lem8091410 (a : Prop) : (term1960 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8091411 {A P : Type'} (_106912 : P -> A) (_106914 : P) (_106911 : A) : (term1963 A P _106912 _106914 _106911) = ((@I (P -> A) _106912 _106914) = _106911).
Proof. exact (@lem8091410 ((@I (P -> A) _106912 _106914) = _106911)). Qed.
Lemma lem8091412 {A B C P : Type'} (_106913 : type1475 B C P) (_106909 : type1638 A B C P) (_106912 : P -> A) (_106914 : P) (_106911 : A) : (term1959 A B C P _106913 _106909 _106912 _106914 _106911) = (term1964 A B C P _106913 _106909 _106912 _106914 _106911).
Proof. exact (MK_COMB (@lem8091408 A B C P _106912 _106913 _106909) (@lem8091411 A P _106912 _106914 _106911)). Qed.
Lemma lem8091413 {A B C P : Type'} (_106913 : type1475 B C P) (_106909 : type1638 A B C P) (_106912 : P -> A) (_106914 : P) (_106911 : A) : (term1958 A B C P _106913 _106909 _106912 _106914 _106911) = (term1964 A B C P _106913 _106909 _106912 _106914 _106911).
Proof. exact (TRANS (@lem8091403 A B C P _106913 _106909 _106912 _106914 _106911) (@lem8091412 A B C P _106913 _106909 _106912 _106914 _106911)). Qed.
Lemma lem8091414 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8091415 {A B C P : Type'} (_106913 : type1475 B C P) (_106909 : type1638 A B C P) (_106912 : P -> A) (_106914 : P) (_106911 : A) : (term1965 A B C P _106913 _106909 _106912 _106914 _106911) = (term1966 A B C P _106913 _106909 _106912 _106914 _106911).
Proof. exact (MK_COMB (@lem8091414) (@lem8091413 A B C P _106913 _106909 _106912 _106914 _106911)). Qed.
Lemma lem8091416 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (_106910 : C) (_106911 : A) (_106909 : type1638 A B C P) : (term1708 A B C P s t _106910 _106911 _106909) = (term1708 A B C P s t _106910 _106911 _106909).
Proof. exact (eq_refl (term1708 A B C P s t _106910 _106911 _106909)). Qed.
Lemma lem8091417 {A B C P : Type'} (_106913 : type1475 B C P) (_106912 : P -> A) (_106914 : P) (s : type1117 A B C P) (t : type1116 A B C P) (_106910 : C) (_106911 : A) (_106909 : type1638 A B C P) : (term1998 A B C P _106913 _106912 _106914 s t _106910 _106911 _106909) = (term1999 A B C P _106913 _106912 _106914 s t _106910 _106911 _106909).
Proof. exact (MK_COMB (@lem8091415 A B C P _106913 _106909 _106912 _106914 _106911) (@lem8091416 A B C P s t _106910 _106911 _106909)). Qed.
Lemma lem8091418 {A B C P : Type'} (_106913 : type1475 B C P) (_106912 : P -> A) (_106914 : P) (s : type1117 A B C P) (t : type1116 A B C P) (_106910 : C) (_106911 : A) (_106909 : type1638 A B C P) : (term1946 A B C P s t _106910 _106913 _106909 _106912 _106914 _106911) = (term1999 A B C P _106913 _106912 _106914 s t _106910 _106911 _106909).
Proof. exact (TRANS (@lem8091400 A B C P _106913 _106912 _106914 s t _106910 _106911 _106909) (@lem8091417 A B C P _106913 _106912 _106914 s t _106910 _106911 _106909)). Qed.
Lemma lem8091420 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1968 A B C P p2 clauses p1 x.
Proof. exact (conj (@lem8091388 A B C P clauses p1 p2 c x h1) (@lem8091397 A P p1 x)). Qed.
Lemma lem8091422 {A B C P : Type'} (_106913 : type1475 B C P) (_106912 : P -> A) (_106914 : P) (_106910 : C) (_106911 : A) (_106909 : type1638 A B C P) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1999 A B C P _106913 _106912 _106914 s t _106910 _106911 _106909.
Proof. exact (EQ_MP (@lem8091418 A B C P _106913 _106912 _106914 s t _106910 _106911 _106909) (@lem8089656 A B C P _106910 _106913 _106909 _106912 _106914 _106911 s t a _106907 h1)). Qed.
Lemma lem8091423 {A B C P : Type'} (_106913 : type1475 B C P) (_106912 : P -> A) (_106914 : P) (_106910 : C) (_106911 : A) (_106909 : type1638 A B C P) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term1999 A B C P _106913 _106912 _106914 s t _106910 _106911 _106909.
Proof. exact (@lem8091422 A B C P _106913 _106912 _106914 _106910 _106911 _106909 s t a _106907 h1). Qed.
Lemma lem8091424 {A B C P : Type'} (p2 : type1475 B C P) (_106910 : C) (p1 : P -> A) (x : P) (clauses : type1638 A B C P) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term2000 A B C P p2 s t _106910 p1 x clauses.
Proof. exact (@lem8091423 A B C P p2 p1 x _106910 (@I (P -> A) p1 x) clauses s t a _106907 h1). Qed.
Lemma lem8091427 {A B C P : Type'} (_106910 : C) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : term2001 A B C P s t _106910 p1 x clauses.
Proof. exact (@lem8091424 A B C P p2 _106910 p1 x clauses s t a _106907 h1 (@lem8091420 A B C P clauses p1 p2 c x h2)). Qed.
Lemma lem8091428 {A B C P : Type'} (_106910 : C) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : term2001 A B C P s t _106910 p1 x clauses.
Proof. exact (@lem8091427 A B C P _106910 s t a _106907 clauses p1 p2 c x h1 h2). Qed.
Lemma lem8091429 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : term2001 A B C P s t c p1 x clauses.
Proof. exact (@lem8091428 A B C P c s t a _106907 clauses p1 p2 c x h1 h2). Qed.
Lemma lem8091430 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : term2002 A B C P s t c p1 x clauses.
Proof. exact (fun h0 : term2003 A B C P s t c p1 x clauses => @lem8091429 A B C P s t a _106907 clauses p1 p2 c x h1 h2). Qed.
Lemma lem8091432 (p : Prop) : (term1951 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8091433 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (c : C) (p1 : P -> A) (x : P) (clauses : type1638 A B C P) : (term2002 A B C P s t c p1 x clauses) = (term2001 A B C P s t c p1 x clauses).
Proof. exact (@lem8091432 (term2001 A B C P s t c p1 x clauses)). Qed.
Lemma lem8091434 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : term2001 A B C P s t c p1 x clauses.
Proof. exact (EQ_MP (@lem8091433 A B C P s t c p1 x clauses) (@lem8091430 A B C P s t a _106907 clauses p1 p2 c x h1 h2)). Qed.
Lemma lem8091436 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1660 A B C P p1 p2 clauses.
Proof. exact (proj1 (@lem8087750 A B C P clauses p1 p2 c x h1)). Qed.
Lemma lem8091437 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1950 A B C P p1 p2 clauses.
Proof. exact (fun h0 : term1661 A B C P p1 p2 clauses => @lem8091436 A B C P clauses p1 p2 c x h1). Qed.
Lemma lem8091439 (p : Prop) : (term1951 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8091440 {A B C P : Type'} (p1 : P -> A) (p2 : type1475 B C P) (clauses : type1638 A B C P) : (term1950 A B C P p1 p2 clauses) = (term1660 A B C P p1 p2 clauses).
Proof. exact (@lem8091439 (term1660 A B C P p1 p2 clauses)). Qed.
Lemma lem8091441 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1660 A B C P p1 p2 clauses.
Proof. exact (EQ_MP (@lem8091440 A B C P p1 p2 clauses) (@lem8091437 A B C P clauses p1 p2 c x h1)). Qed.
Lemma lem8091443 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1660 A B C P p1 p2 clauses.
Proof. exact (proj1 (@lem8087750 A B C P clauses p1 p2 c x h1)). Qed.
Lemma lem8091444 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1950 A B C P p1 p2 clauses.
Proof. exact (fun h0 : term1661 A B C P p1 p2 clauses => @lem8091443 A B C P clauses p1 p2 c x h1). Qed.
Lemma lem8091446 (p : Prop) : (term1951 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8091447 {A B C P : Type'} (p1 : P -> A) (p2 : type1475 B C P) (clauses : type1638 A B C P) : (term1950 A B C P p1 p2 clauses) = (term1660 A B C P p1 p2 clauses).
Proof. exact (@lem8091446 (term1660 A B C P p1 p2 clauses)). Qed.
Lemma lem8091448 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1660 A B C P p1 p2 clauses.
Proof. exact (EQ_MP (@lem8091447 A B C P p1 p2 clauses) (@lem8091444 A B C P clauses p1 p2 c x h1)). Qed.
Lemma lem8091450 {A : Type'} (x : A) : x = x.
Proof. exact (@lem21386 A x). Qed.
Lemma lem8091451 {A : Type'} (x : A) : x = x.
Proof. exact (@lem8091450 A x). Qed.
Lemma lem8091452 {A P : Type'} (p1 : P -> A) (x : P) : (@I (P -> A) p1 x) = (@I (P -> A) p1 x).
Proof. exact (@lem8091451 A (@I (P -> A) p1 x)). Qed.
Lemma lem8091453 {A P : Type'} (p1 : P -> A) (x : P) : term1952 A P p1 x.
Proof. exact (fun h0 : term1953 A P p1 x => @lem8091452 A P p1 x). Qed.
Lemma lem8091455 (p : Prop) : (term1951 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8091456 {A P : Type'} (p1 : P -> A) (x : P) : (term1952 A P p1 x) = ((@I (P -> A) p1 x) = (@I (P -> A) p1 x)).
Proof. exact (@lem8091455 ((@I (P -> A) p1 x) = (@I (P -> A) p1 x))). Qed.
Lemma lem8091457 {A P : Type'} (p1 : P -> A) (x : P) : (@I (P -> A) p1 x) = (@I (P -> A) p1 x).
Proof. exact (EQ_MP (@lem8091456 A P p1 x) (@lem8091453 A P p1 x)). Qed.
Lemma lem8091459 (b : Prop) (a : Prop) : (a \/ b) = (term1954 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8091460 {A B C P : Type'} (_106913 : type1475 B C P) (_106912 : P -> A) (_106914 : P) (s : type1117 A B C P) (a : type1119 A B C P) (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) : (term1947 A B C P s a _106910 _106913 _106909 _106912 _106914 _106911) = (term2004 A B C P _106913 _106912 _106914 s a _106909 _106910 _106911).
Proof. exact (@lem8091459 (term1786 A B C P _106913 _106909 _106912 _106914 _106911) ((term1688 A B C P s a _106909 _106910 _106911) = _106911)). Qed.
Lemma lem8091462 (a : Prop) (b : Prop) : (term1956 a b) = (term1957 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8091463 {A B C P : Type'} (_106913 : type1475 B C P) (_106909 : type1638 A B C P) (_106912 : P -> A) (_106914 : P) (_106911 : A) : (term1958 A B C P _106913 _106909 _106912 _106914 _106911) = (term1959 A B C P _106913 _106909 _106912 _106914 _106911).
Proof. exact (@lem8091462 (term1661 A B C P _106912 _106913 _106909) (term1651 A P _106912 _106914 _106911)). Qed.
Lemma lem8091465 (a : Prop) : (term1960 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8091466 {A B C P : Type'} (_106912 : P -> A) (_106913 : type1475 B C P) (_106909 : type1638 A B C P) : (term1961 A B C P _106912 _106913 _106909) = (term1660 A B C P _106912 _106913 _106909).
Proof. exact (@lem8091465 (term1660 A B C P _106912 _106913 _106909)). Qed.
Lemma lem8091467 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8091468 {A B C P : Type'} (_106912 : P -> A) (_106913 : type1475 B C P) (_106909 : type1638 A B C P) : (term1962 A B C P _106912 _106913 _106909) = (term1733 A B C P _106912 _106913 _106909).
Proof. exact (MK_COMB (@lem8091467) (@lem8091466 A B C P _106912 _106913 _106909)). Qed.
Lemma lem8091470 (a : Prop) : (term1960 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8091471 {A P : Type'} (_106912 : P -> A) (_106914 : P) (_106911 : A) : (term1963 A P _106912 _106914 _106911) = ((@I (P -> A) _106912 _106914) = _106911).
Proof. exact (@lem8091470 ((@I (P -> A) _106912 _106914) = _106911)). Qed.
Lemma lem8091472 {A B C P : Type'} (_106913 : type1475 B C P) (_106909 : type1638 A B C P) (_106912 : P -> A) (_106914 : P) (_106911 : A) : (term1959 A B C P _106913 _106909 _106912 _106914 _106911) = (term1964 A B C P _106913 _106909 _106912 _106914 _106911).
Proof. exact (MK_COMB (@lem8091468 A B C P _106912 _106913 _106909) (@lem8091471 A P _106912 _106914 _106911)). Qed.
Lemma lem8091473 {A B C P : Type'} (_106913 : type1475 B C P) (_106909 : type1638 A B C P) (_106912 : P -> A) (_106914 : P) (_106911 : A) : (term1958 A B C P _106913 _106909 _106912 _106914 _106911) = (term1964 A B C P _106913 _106909 _106912 _106914 _106911).
Proof. exact (TRANS (@lem8091463 A B C P _106913 _106909 _106912 _106914 _106911) (@lem8091472 A B C P _106913 _106909 _106912 _106914 _106911)). Qed.
Lemma lem8091474 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8091475 {A B C P : Type'} (_106913 : type1475 B C P) (_106909 : type1638 A B C P) (_106912 : P -> A) (_106914 : P) (_106911 : A) : (term1965 A B C P _106913 _106909 _106912 _106914 _106911) = (term1966 A B C P _106913 _106909 _106912 _106914 _106911).
Proof. exact (MK_COMB (@lem8091474) (@lem8091473 A B C P _106913 _106909 _106912 _106914 _106911)). Qed.
Lemma lem8091476 {A B C P : Type'} (s : type1117 A B C P) (a : type1119 A B C P) (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) : ((term1688 A B C P s a _106909 _106910 _106911) = _106911) = ((term1688 A B C P s a _106909 _106910 _106911) = _106911).
Proof. exact (eq_refl ((term1688 A B C P s a _106909 _106910 _106911) = _106911)). Qed.
Lemma lem8091477 {A B C P : Type'} (_106913 : type1475 B C P) (_106912 : P -> A) (_106914 : P) (s : type1117 A B C P) (a : type1119 A B C P) (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) : (term2004 A B C P _106913 _106912 _106914 s a _106909 _106910 _106911) = (term2005 A B C P _106913 _106912 _106914 s a _106909 _106910 _106911).
Proof. exact (MK_COMB (@lem8091475 A B C P _106913 _106909 _106912 _106914 _106911) (@lem8091476 A B C P s a _106909 _106910 _106911)). Qed.
Lemma lem8091478 {A B C P : Type'} (_106913 : type1475 B C P) (_106912 : P -> A) (_106914 : P) (s : type1117 A B C P) (a : type1119 A B C P) (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) : (term1947 A B C P s a _106910 _106913 _106909 _106912 _106914 _106911) = (term2005 A B C P _106913 _106912 _106914 s a _106909 _106910 _106911).
Proof. exact (TRANS (@lem8091460 A B C P _106913 _106912 _106914 s a _106909 _106910 _106911) (@lem8091477 A B C P _106913 _106912 _106914 s a _106909 _106910 _106911)). Qed.
Lemma lem8091480 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term1968 A B C P p2 clauses p1 x.
Proof. exact (conj (@lem8091448 A B C P clauses p1 p2 c x h1) (@lem8091457 A P p1 x)). Qed.
Lemma lem8091482 {A B C P : Type'} (_106913 : type1475 B C P) (_106912 : P -> A) (_106914 : P) (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term2005 A B C P _106913 _106912 _106914 s a _106909 _106910 _106911.
Proof. exact (EQ_MP (@lem8091478 A B C P _106913 _106912 _106914 s a _106909 _106910 _106911) (@lem8089666 A B C P _106910 _106913 _106909 _106912 _106914 _106911 s t a _106907 h1)). Qed.
Lemma lem8091483 {A B C P : Type'} (_106913 : type1475 B C P) (_106912 : P -> A) (_106914 : P) (_106909 : type1638 A B C P) (_106910 : C) (_106911 : A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term2005 A B C P _106913 _106912 _106914 s a _106909 _106910 _106911.
Proof. exact (@lem8091482 A B C P _106913 _106912 _106914 _106909 _106910 _106911 s t a _106907 h1). Qed.
Lemma lem8091484 {A B C P : Type'} (p2 : type1475 B C P) (clauses : type1638 A B C P) (_106910 : C) (p1 : P -> A) (x : P) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) : term2006 A B C P p2 s a clauses _106910 p1 x.
Proof. exact (@lem8091483 A B C P p2 p1 x clauses _106910 (@I (P -> A) p1 x) s t a _106907 h1). Qed.
Lemma lem8091487 {A B C P : Type'} (_106910 : C) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : (term2007 A B C P s a clauses _106910 p1 x) = (@I (P -> A) p1 x).
Proof. exact (@lem8091484 A B C P p2 clauses _106910 p1 x s t a _106907 h1 (@lem8091480 A B C P clauses p1 p2 c x h2)). Qed.
Lemma lem8091488 {A B C P : Type'} (_106910 : C) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : (term2007 A B C P s a clauses _106910 p1 x) = (@I (P -> A) p1 x).
Proof. exact (@lem8091487 A B C P _106910 s t a _106907 clauses p1 p2 c x h1 h2). Qed.
Lemma lem8091489 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : (term2007 A B C P s a clauses c p1 x) = (@I (P -> A) p1 x).
Proof. exact (@lem8091488 A B C P c s t a _106907 clauses p1 p2 c x h1 h2). Qed.
Lemma lem8091490 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : term2008 A B C P s a clauses c p1 x.
Proof. exact (fun h0 : term2009 A B C P s a clauses c p1 x => @lem8091489 A B C P s t a _106907 clauses p1 p2 c x h1 h2). Qed.
Lemma lem8091492 (p : Prop) : (term1951 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8091493 {A B C P : Type'} (s : type1117 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (c : C) (p1 : P -> A) (x : P) : (term2008 A B C P s a clauses c p1 x) = ((term2007 A B C P s a clauses c p1 x) = (@I (P -> A) p1 x)).
Proof. exact (@lem8091492 ((term2007 A B C P s a clauses c p1 x) = (@I (P -> A) p1 x))). Qed.
Lemma lem8091494 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : (term2007 A B C P s a clauses c p1 x) = (@I (P -> A) p1 x).
Proof. exact (EQ_MP (@lem8091493 A B C P s a clauses c p1 x) (@lem8091490 A B C P s t a _106907 clauses p1 p2 c x h1 h2)). Qed.
Lemma lem8091510 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8091511 {A B C P : Type'} (_106939 : P -> A) (_106941 : P -> A) (clauses : type1638 A B C P) (_106940 : type1475 B C P) (_106943 : P) (_106942 : type1475 B C P) (c : C) (_106944 : P) : (term1944 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944) = (term2010 A B C P _106939 _106941 clauses _106940 _106943 _106942 c _106944).
Proof. exact (@lem8091510 (term1738 A P _106939 _106943 _106941 _106944) (term1661 A B C P _106941 _106942 clauses) ((term1729 B C P _106940 c _106943) = (term1729 B C P _106942 c _106944))). Qed.
Lemma lem8091527 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8091528 {A B C P : Type'} (_106940 : type1475 B C P) (_106943 : P) (c : C) (_106944 : P) (_106941 : P -> A) (_106942 : type1475 B C P) (clauses : type1638 A B C P) : (term2011 A B C P _106941 clauses _106940 _106943 _106942 c _106944) = (term2012 A B C P _106940 _106943 c _106944 _106941 _106942 clauses).
Proof. exact (@lem8091527 ((term1729 B C P _106940 c _106943) = (term1729 B C P _106942 c _106944)) (term1661 A B C P _106941 _106942 clauses)). Qed.
Lemma lem8091536 {A P : Type'} (_106939 : P -> A) (_106943 : P) (_106941 : P -> A) (_106944 : P) : (term2013 A P _106939 _106943 _106941 _106944) = (term2013 A P _106939 _106943 _106941 _106944).
Proof. exact (eq_refl (term2013 A P _106939 _106943 _106941 _106944)). Qed.
Lemma lem8091537 {A B C P : Type'} (_106939 : P -> A) (_106940 : type1475 B C P) (_106943 : P) (c : C) (_106944 : P) (_106941 : P -> A) (_106942 : type1475 B C P) (clauses : type1638 A B C P) : (term2010 A B C P _106939 _106941 clauses _106940 _106943 _106942 c _106944) = (term2014 A B C P _106939 _106940 _106943 c _106944 _106941 _106942 clauses).
Proof. exact (MK_COMB (@lem8091536 A P _106939 _106943 _106941 _106944) (@lem8091528 A B C P _106940 _106943 c _106944 _106941 _106942 clauses)). Qed.
Lemma lem8091541 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8091542 {A B C P : Type'} (_106940 : type1475 B C P) (c : C) (_106939 : P -> A) (_106943 : P) (_106944 : P) (_106941 : P -> A) (_106942 : type1475 B C P) (clauses : type1638 A B C P) : (term2014 A B C P _106939 _106940 _106943 c _106944 _106941 _106942 clauses) = (term2015 A B C P _106940 c _106939 _106943 _106944 _106941 _106942 clauses).
Proof. exact (@lem8091541 ((term1729 B C P _106940 c _106943) = (term1729 B C P _106942 c _106944)) (term1738 A P _106939 _106943 _106941 _106944) (term1661 A B C P _106941 _106942 clauses)). Qed.
Lemma lem8091562 {A B C P : Type'} (_106940 : type1475 B C P) (c : C) (_106939 : P -> A) (_106943 : P) (_106944 : P) (_106941 : P -> A) (_106942 : type1475 B C P) (clauses : type1638 A B C P) : (term2010 A B C P _106939 _106941 clauses _106940 _106943 _106942 c _106944) = (term2015 A B C P _106940 c _106939 _106943 _106944 _106941 _106942 clauses).
Proof. exact (TRANS (@lem8091537 A B C P _106939 _106940 _106943 c _106944 _106941 _106942 clauses) (@lem8091542 A B C P _106940 c _106939 _106943 _106944 _106941 _106942 clauses)). Qed.
Lemma lem8091563 {A B C P : Type'} (_106940 : type1475 B C P) (c : C) (_106939 : P -> A) (_106943 : P) (_106944 : P) (_106941 : P -> A) (_106942 : type1475 B C P) (clauses : type1638 A B C P) : (term1944 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944) = (term2015 A B C P _106940 c _106939 _106943 _106944 _106941 _106942 clauses).
Proof. exact (TRANS (@lem8091511 A B C P _106939 _106941 clauses _106940 _106943 _106942 c _106944) (@lem8091562 A B C P _106940 c _106939 _106943 _106944 _106941 _106942 clauses)). Qed.
Lemma lem8091564 {A B C P : Type'} (_106939 : P -> A) (_106940 : type1475 B C P) (clauses : type1638 A B C P) : (term1739 A B C P _106939 _106940 clauses) = (term1739 A B C P _106939 _106940 clauses).
Proof. exact (eq_refl (term1739 A B C P _106939 _106940 clauses)). Qed.
Lemma lem8091565 {A B C P : Type'} (_106940 : type1475 B C P) (c : C) (_106939 : P -> A) (_106943 : P) (_106944 : P) (_106941 : P -> A) (_106942 : type1475 B C P) (clauses : type1638 A B C P) : (term1945 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944) = (term2016 A B C P _106940 c _106939 _106943 _106944 _106941 _106942 clauses).
Proof. exact (MK_COMB (@lem8091564 A B C P _106939 _106940 clauses) (@lem8091563 A B C P _106940 c _106939 _106943 _106944 _106941 _106942 clauses)). Qed.
Lemma lem8091569 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8091570 {A B C P : Type'} (c : C) (_106940 : type1475 B C P) (_106939 : P -> A) (_106943 : P) (_106944 : P) (_106941 : P -> A) (_106942 : type1475 B C P) (clauses : type1638 A B C P) : (term2016 A B C P _106940 c _106939 _106943 _106944 _106941 _106942 clauses) = (term2017 A B C P c _106940 _106939 _106943 _106944 _106941 _106942 clauses).
Proof. exact (@lem8091569 ((term1729 B C P _106940 c _106943) = (term1729 B C P _106942 c _106944)) (term1661 A B C P _106939 _106940 clauses) (term2018 A B C P _106939 _106943 _106944 _106941 _106942 clauses)). Qed.
Lemma lem8091586 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8091587 {A B C P : Type'} (_106943 : P) (_106944 : P) (_106939 : P -> A) (_106940 : type1475 B C P) (_106941 : P -> A) (_106942 : type1475 B C P) (clauses : type1638 A B C P) : (term2019 A B C P _106940 _106939 _106943 _106944 _106941 _106942 clauses) = (term2020 A B C P _106943 _106944 _106939 _106940 _106941 _106942 clauses).
Proof. exact (@lem8091586 (term1738 A P _106939 _106943 _106941 _106944) (term1661 A B C P _106939 _106940 clauses) (term1661 A B C P _106941 _106942 clauses)). Qed.
Lemma lem8091605 {B C P : Type'} (_106940 : type1475 B C P) (_106943 : P) (_106942 : type1475 B C P) (c : C) (_106944 : P) : (term2021 B C P _106940 _106943 _106942 c _106944) = (term2021 B C P _106940 _106943 _106942 c _106944).
Proof. exact (eq_refl (term2021 B C P _106940 _106943 _106942 c _106944)). Qed.
Lemma lem8091606 {A B C P : Type'} (c : C) (_106943 : P) (_106944 : P) (_106939 : P -> A) (_106940 : type1475 B C P) (_106941 : P -> A) (_106942 : type1475 B C P) (clauses : type1638 A B C P) : (term2017 A B C P c _106940 _106939 _106943 _106944 _106941 _106942 clauses) = (term2022 A B C P c _106943 _106944 _106939 _106940 _106941 _106942 clauses).
Proof. exact (MK_COMB (@lem8091605 B C P _106940 _106943 _106942 c _106944) (@lem8091587 A B C P _106943 _106944 _106939 _106940 _106941 _106942 clauses)). Qed.
Lemma lem8091617 {A B C P : Type'} (c : C) (_106943 : P) (_106944 : P) (_106939 : P -> A) (_106940 : type1475 B C P) (_106941 : P -> A) (_106942 : type1475 B C P) (clauses : type1638 A B C P) : (term2016 A B C P _106940 c _106939 _106943 _106944 _106941 _106942 clauses) = (term2022 A B C P c _106943 _106944 _106939 _106940 _106941 _106942 clauses).
Proof. exact (TRANS (@lem8091570 A B C P c _106940 _106939 _106943 _106944 _106941 _106942 clauses) (@lem8091606 A B C P c _106943 _106944 _106939 _106940 _106941 _106942 clauses)). Qed.
Lemma lem8091618 {A B C P : Type'} (c : C) (_106943 : P) (_106944 : P) (_106939 : P -> A) (_106940 : type1475 B C P) (_106941 : P -> A) (_106942 : type1475 B C P) (clauses : type1638 A B C P) : (term1945 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944) = (term2022 A B C P c _106943 _106944 _106939 _106940 _106941 _106942 clauses).
Proof. exact (TRANS (@lem8091565 A B C P _106940 c _106939 _106943 _106944 _106941 _106942 clauses) (@lem8091617 A B C P c _106943 _106944 _106939 _106940 _106941 _106942 clauses)). Qed.
Lemma lem8091619 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8091620 {A B C P : Type'} (c : C) (_106943 : P) (_106944 : P) (_106939 : P -> A) (_106940 : type1475 B C P) (_106941 : P -> A) (_106942 : type1475 B C P) (clauses : type1638 A B C P) : (term2023 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944) = (term2024 A B C P c _106943 _106944 _106939 _106940 _106941 _106942 clauses).
Proof. exact (MK_COMB (@lem8091619) (@lem8091618 A B C P c _106943 _106944 _106939 _106940 _106941 _106942 clauses)). Qed.
Lemma lem8091646 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8091647 {A B C P : Type'} (_106939 : P -> A) (_106943 : P) (_106944 : P) (_106941 : P -> A) (_106942 : type1475 B C P) (clauses : type1638 A B C P) : (term1740 A B C P _106942 clauses _106939 _106943 _106941 _106944) = (term2018 A B C P _106939 _106943 _106944 _106941 _106942 clauses).
Proof. exact (@lem8091646 (term1738 A P _106939 _106943 _106941 _106944) (term1661 A B C P _106941 _106942 clauses)). Qed.
Lemma lem8091655 {A B C P : Type'} (_106939 : P -> A) (_106940 : type1475 B C P) (clauses : type1638 A B C P) : (term1739 A B C P _106939 _106940 clauses) = (term1739 A B C P _106939 _106940 clauses).
Proof. exact (eq_refl (term1739 A B C P _106939 _106940 clauses)). Qed.
Lemma lem8091656 {A B C P : Type'} (_106940 : type1475 B C P) (_106939 : P -> A) (_106943 : P) (_106944 : P) (_106941 : P -> A) (_106942 : type1475 B C P) (clauses : type1638 A B C P) : (term1741 A B C P _106940 _106942 clauses _106939 _106943 _106941 _106944) = (term2019 A B C P _106940 _106939 _106943 _106944 _106941 _106942 clauses).
Proof. exact (MK_COMB (@lem8091655 A B C P _106939 _106940 clauses) (@lem8091647 A B C P _106939 _106943 _106944 _106941 _106942 clauses)). Qed.
Lemma lem8091660 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8091661 {A B C P : Type'} (_106943 : P) (_106944 : P) (_106939 : P -> A) (_106940 : type1475 B C P) (_106941 : P -> A) (_106942 : type1475 B C P) (clauses : type1638 A B C P) : (term2019 A B C P _106940 _106939 _106943 _106944 _106941 _106942 clauses) = (term2020 A B C P _106943 _106944 _106939 _106940 _106941 _106942 clauses).
Proof. exact (@lem8091660 (term1738 A P _106939 _106943 _106941 _106944) (term1661 A B C P _106939 _106940 clauses) (term1661 A B C P _106941 _106942 clauses)). Qed.
Lemma lem8091679 {A B C P : Type'} (_106943 : P) (_106944 : P) (_106939 : P -> A) (_106940 : type1475 B C P) (_106941 : P -> A) (_106942 : type1475 B C P) (clauses : type1638 A B C P) : (term1741 A B C P _106940 _106942 clauses _106939 _106943 _106941 _106944) = (term2020 A B C P _106943 _106944 _106939 _106940 _106941 _106942 clauses).
Proof. exact (TRANS (@lem8091656 A B C P _106940 _106939 _106943 _106944 _106941 _106942 clauses) (@lem8091661 A B C P _106943 _106944 _106939 _106940 _106941 _106942 clauses)). Qed.
Lemma lem8091680 {B C P : Type'} (_106940 : type1475 B C P) (_106943 : P) (_106942 : type1475 B C P) (c : C) (_106944 : P) : (term2021 B C P _106940 _106943 _106942 c _106944) = (term2021 B C P _106940 _106943 _106942 c _106944).
Proof. exact (eq_refl (term2021 B C P _106940 _106943 _106942 c _106944)). Qed.
Lemma lem8091681 {A B C P : Type'} (c : C) (_106943 : P) (_106944 : P) (_106939 : P -> A) (_106940 : type1475 B C P) (_106941 : P -> A) (_106942 : type1475 B C P) (clauses : type1638 A B C P) : (term2025 A B C P c _106940 _106942 clauses _106939 _106943 _106941 _106944) = (term2022 A B C P c _106943 _106944 _106939 _106940 _106941 _106942 clauses).
Proof. exact (MK_COMB (@lem8091680 B C P _106940 _106943 _106942 c _106944) (@lem8091679 A B C P _106943 _106944 _106939 _106940 _106941 _106942 clauses)). Qed.
Lemma lem8091692 {A B C P : Type'} (c : C) (_106943 : P) (_106944 : P) (_106939 : P -> A) (_106940 : type1475 B C P) (_106941 : P -> A) (_106942 : type1475 B C P) (clauses : type1638 A B C P) : ((term1945 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944) = (term2025 A B C P c _106940 _106942 clauses _106939 _106943 _106941 _106944)) = ((term2022 A B C P c _106943 _106944 _106939 _106940 _106941 _106942 clauses) = (term2022 A B C P c _106943 _106944 _106939 _106940 _106941 _106942 clauses)).
Proof. exact (MK_COMB (@lem8091620 A B C P c _106943 _106944 _106939 _106940 _106941 _106942 clauses) (@lem8091681 A B C P c _106943 _106944 _106939 _106940 _106941 _106942 clauses)). Qed.
Lemma lem8091694 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8091695 (x : Prop) : (x = x) = True.
Proof. exact (@lem8091694 Prop x). Qed.
Lemma lem8091696 {A B C P : Type'} (c : C) (_106943 : P) (_106944 : P) (_106939 : P -> A) (_106940 : type1475 B C P) (_106941 : P -> A) (_106942 : type1475 B C P) (clauses : type1638 A B C P) : ((term2022 A B C P c _106943 _106944 _106939 _106940 _106941 _106942 clauses) = (term2022 A B C P c _106943 _106944 _106939 _106940 _106941 _106942 clauses)) = True.
Proof. exact (@lem8091695 (term2022 A B C P c _106943 _106944 _106939 _106940 _106941 _106942 clauses)). Qed.
Lemma lem8091697 {A B C P : Type'} (c : C) (_106940 : type1475 B C P) (_106942 : type1475 B C P) (clauses : type1638 A B C P) (_106939 : P -> A) (_106943 : P) (_106941 : P -> A) (_106944 : P) : ((term1945 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944) = (term2025 A B C P c _106940 _106942 clauses _106939 _106943 _106941 _106944)) = True.
Proof. exact (TRANS (@lem8091692 A B C P c _106943 _106944 _106939 _106940 _106941 _106942 clauses) (@lem8091696 A B C P c _106943 _106944 _106939 _106940 _106941 _106942 clauses)). Qed.
Lemma lem8091698 {A B C P : Type'} (c : C) (_106940 : type1475 B C P) (_106942 : type1475 B C P) (clauses : type1638 A B C P) (_106939 : P -> A) (_106943 : P) (_106941 : P -> A) (_106944 : P) : True = ((term1945 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944) = (term2025 A B C P c _106940 _106942 clauses _106939 _106943 _106941 _106944)).
Proof. exact (SYM (@lem8091697 A B C P c _106940 _106942 clauses _106939 _106943 _106941 _106944)). Qed.
Lemma lem8091699 {A B C P : Type'} (c : C) (_106940 : type1475 B C P) (_106942 : type1475 B C P) (clauses : type1638 A B C P) (_106939 : P -> A) (_106943 : P) (_106941 : P -> A) (_106944 : P) : (term1945 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944) = (term2025 A B C P c _106940 _106942 clauses _106939 _106943 _106941 _106944).
Proof. exact (EQ_MP (@lem8091698 A B C P c _106940 _106942 clauses _106939 _106943 _106941 _106944) (@lem0)). Qed.
Lemma lem8091700 {A B C P : Type'} (_106940 : type1475 B C P) (_106942 : type1475 B C P) (_106939 : P -> A) (_106943 : P) (_106941 : P -> A) (_106944 : P) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term2025 A B C P c _106940 _106942 clauses _106939 _106943 _106941 _106944.
Proof. exact (EQ_MP (@lem8091699 A B C P c _106940 _106942 clauses _106939 _106943 _106941 _106944) (@lem8089432 A B C P _106939 _106941 _106940 _106943 _106942 _106944 clauses p1 p2 c x h1)). Qed.
Lemma lem8091702 (b : Prop) (a : Prop) : (a \/ b) = (term1954 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8091703 {A B C P : Type'} (clauses : type1638 A B C P) (_106939 : P -> A) (_106941 : P -> A) (_106940 : type1475 B C P) (_106943 : P) (_106942 : type1475 B C P) (c : C) (_106944 : P) : (term2025 A B C P c _106940 _106942 clauses _106939 _106943 _106941 _106944) = (term2026 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944).
Proof. exact (@lem8091702 (term1741 A B C P _106940 _106942 clauses _106939 _106943 _106941 _106944) ((term1729 B C P _106940 c _106943) = (term1729 B C P _106942 c _106944))). Qed.
Lemma lem8091705 (a : Prop) (b : Prop) : (term1956 a b) = (term1957 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8091706 {A B C P : Type'} (_106940 : type1475 B C P) (_106942 : type1475 B C P) (clauses : type1638 A B C P) (_106939 : P -> A) (_106943 : P) (_106941 : P -> A) (_106944 : P) : (term2027 A B C P _106940 _106942 clauses _106939 _106943 _106941 _106944) = (term2028 A B C P _106940 _106942 clauses _106939 _106943 _106941 _106944).
Proof. exact (@lem8091705 (term1661 A B C P _106939 _106940 clauses) (term1740 A B C P _106942 clauses _106939 _106943 _106941 _106944)). Qed.
Lemma lem8091708 (a : Prop) : (term1960 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8091709 {A B C P : Type'} (_106939 : P -> A) (_106940 : type1475 B C P) (clauses : type1638 A B C P) : (term1961 A B C P _106939 _106940 clauses) = (term1660 A B C P _106939 _106940 clauses).
Proof. exact (@lem8091708 (term1660 A B C P _106939 _106940 clauses)). Qed.
Lemma lem8091710 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8091711 {A B C P : Type'} (_106939 : P -> A) (_106940 : type1475 B C P) (clauses : type1638 A B C P) : (term1962 A B C P _106939 _106940 clauses) = (term1733 A B C P _106939 _106940 clauses).
Proof. exact (MK_COMB (@lem8091710) (@lem8091709 A B C P _106939 _106940 clauses)). Qed.
Lemma lem8091713 (a : Prop) (b : Prop) : (term1956 a b) = (term1957 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8091714 {A B C P : Type'} (_106942 : type1475 B C P) (clauses : type1638 A B C P) (_106939 : P -> A) (_106943 : P) (_106941 : P -> A) (_106944 : P) : (term2029 A B C P _106942 clauses _106939 _106943 _106941 _106944) = (term2030 A B C P _106942 clauses _106939 _106943 _106941 _106944).
Proof. exact (@lem8091713 (term1661 A B C P _106941 _106942 clauses) (term1738 A P _106939 _106943 _106941 _106944)). Qed.
Lemma lem8091716 (a : Prop) : (term1960 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8091717 {A B C P : Type'} (_106941 : P -> A) (_106942 : type1475 B C P) (clauses : type1638 A B C P) : (term1961 A B C P _106941 _106942 clauses) = (term1660 A B C P _106941 _106942 clauses).
Proof. exact (@lem8091716 (term1660 A B C P _106941 _106942 clauses)). Qed.
Lemma lem8091718 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8091719 {A B C P : Type'} (_106941 : P -> A) (_106942 : type1475 B C P) (clauses : type1638 A B C P) : (term1962 A B C P _106941 _106942 clauses) = (term1733 A B C P _106941 _106942 clauses).
Proof. exact (MK_COMB (@lem8091718) (@lem8091717 A B C P _106941 _106942 clauses)). Qed.
Lemma lem8091721 (a : Prop) : (term1960 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8091722 {A P : Type'} (_106939 : P -> A) (_106943 : P) (_106941 : P -> A) (_106944 : P) : (term2031 A P _106939 _106943 _106941 _106944) = ((@I (P -> A) _106939 _106943) = (@I (P -> A) _106941 _106944)).
Proof. exact (@lem8091721 ((@I (P -> A) _106939 _106943) = (@I (P -> A) _106941 _106944))). Qed.
Lemma lem8091723 {A B C P : Type'} (_106942 : type1475 B C P) (clauses : type1638 A B C P) (_106939 : P -> A) (_106943 : P) (_106941 : P -> A) (_106944 : P) : (term2030 A B C P _106942 clauses _106939 _106943 _106941 _106944) = (term2032 A B C P _106942 clauses _106939 _106943 _106941 _106944).
Proof. exact (MK_COMB (@lem8091719 A B C P _106941 _106942 clauses) (@lem8091722 A P _106939 _106943 _106941 _106944)). Qed.
Lemma lem8091724 {A B C P : Type'} (_106942 : type1475 B C P) (clauses : type1638 A B C P) (_106939 : P -> A) (_106943 : P) (_106941 : P -> A) (_106944 : P) : (term2029 A B C P _106942 clauses _106939 _106943 _106941 _106944) = (term2032 A B C P _106942 clauses _106939 _106943 _106941 _106944).
Proof. exact (TRANS (@lem8091714 A B C P _106942 clauses _106939 _106943 _106941 _106944) (@lem8091723 A B C P _106942 clauses _106939 _106943 _106941 _106944)). Qed.
Lemma lem8091725 {A B C P : Type'} (_106940 : type1475 B C P) (_106942 : type1475 B C P) (clauses : type1638 A B C P) (_106939 : P -> A) (_106943 : P) (_106941 : P -> A) (_106944 : P) : (term2028 A B C P _106940 _106942 clauses _106939 _106943 _106941 _106944) = (term2033 A B C P _106940 _106942 clauses _106939 _106943 _106941 _106944).
Proof. exact (MK_COMB (@lem8091711 A B C P _106939 _106940 clauses) (@lem8091724 A B C P _106942 clauses _106939 _106943 _106941 _106944)). Qed.
Lemma lem8091726 {A B C P : Type'} (_106940 : type1475 B C P) (_106942 : type1475 B C P) (clauses : type1638 A B C P) (_106939 : P -> A) (_106943 : P) (_106941 : P -> A) (_106944 : P) : (term2027 A B C P _106940 _106942 clauses _106939 _106943 _106941 _106944) = (term2033 A B C P _106940 _106942 clauses _106939 _106943 _106941 _106944).
Proof. exact (TRANS (@lem8091706 A B C P _106940 _106942 clauses _106939 _106943 _106941 _106944) (@lem8091725 A B C P _106940 _106942 clauses _106939 _106943 _106941 _106944)). Qed.
Lemma lem8091727 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8091728 {A B C P : Type'} (_106940 : type1475 B C P) (_106942 : type1475 B C P) (clauses : type1638 A B C P) (_106939 : P -> A) (_106943 : P) (_106941 : P -> A) (_106944 : P) : (term2034 A B C P _106940 _106942 clauses _106939 _106943 _106941 _106944) = (term2035 A B C P _106940 _106942 clauses _106939 _106943 _106941 _106944).
Proof. exact (MK_COMB (@lem8091727) (@lem8091726 A B C P _106940 _106942 clauses _106939 _106943 _106941 _106944)). Qed.
Lemma lem8091729 {B C P : Type'} (_106940 : type1475 B C P) (_106943 : P) (_106942 : type1475 B C P) (c : C) (_106944 : P) : ((term1729 B C P _106940 c _106943) = (term1729 B C P _106942 c _106944)) = ((term1729 B C P _106940 c _106943) = (term1729 B C P _106942 c _106944)).
Proof. exact (eq_refl ((term1729 B C P _106940 c _106943) = (term1729 B C P _106942 c _106944))). Qed.
Lemma lem8091730 {A B C P : Type'} (clauses : type1638 A B C P) (_106939 : P -> A) (_106941 : P -> A) (_106940 : type1475 B C P) (_106943 : P) (_106942 : type1475 B C P) (c : C) (_106944 : P) : (term2026 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944) = (term2036 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944).
Proof. exact (MK_COMB (@lem8091728 A B C P _106940 _106942 clauses _106939 _106943 _106941 _106944) (@lem8091729 B C P _106940 _106943 _106942 c _106944)). Qed.
Lemma lem8091731 {A B C P : Type'} (clauses : type1638 A B C P) (_106939 : P -> A) (_106941 : P -> A) (_106940 : type1475 B C P) (_106943 : P) (_106942 : type1475 B C P) (c : C) (_106944 : P) : (term2025 A B C P c _106940 _106942 clauses _106939 _106943 _106941 _106944) = (term2036 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944).
Proof. exact (TRANS (@lem8091703 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944) (@lem8091730 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944)). Qed.
Lemma lem8091733 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : term2037 A B C P p2 s a clauses c p1 x.
Proof. exact (conj (@lem8091441 A B C P clauses p1 p2 c x h2) (@lem8091494 A B C P s t a _106907 clauses p1 p2 c x h1 h2)). Qed.
Lemma lem8091734 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : term2038 A B C P t p2 s a clauses c p1 x.
Proof. exact (conj (@lem8091434 A B C P s t a _106907 clauses p1 p2 c x h1 h2) (@lem8091733 A B C P s t a _106907 clauses p1 p2 c x h1 h2)). Qed.
Lemma lem8091736 {A B C P : Type'} (_106939 : P -> A) (_106941 : P -> A) (_106940 : type1475 B C P) (_106943 : P) (_106942 : type1475 B C P) (_106944 : P) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term2036 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944.
Proof. exact (EQ_MP (@lem8091731 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944) (@lem8091700 A B C P _106940 _106942 _106939 _106943 _106941 _106944 clauses p1 p2 c x h1)). Qed.
Lemma lem8091737 {A B C P : Type'} (_106939 : P -> A) (_106941 : P -> A) (_106940 : type1475 B C P) (_106943 : P) (_106942 : type1475 B C P) (_106944 : P) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term2036 A B C P clauses _106939 _106941 _106940 _106943 _106942 c _106944.
Proof. exact (@lem8091736 A B C P _106939 _106941 _106940 _106943 _106942 _106944 clauses p1 p2 c x h1). Qed.
Lemma lem8091738 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term2039 A B C P s t a clauses p1 p2 c x.
Proof. exact (@lem8091737 A B C P (term2040 A B C P s clauses c p1 x) p1 (term2041 A B C P t clauses c p1 x) (term2042 A B C P a clauses c p1 x) p2 x clauses p1 p2 c x h1). Qed.
Lemma lem8091741 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : (term1970 A B C P t a clauses c p1 x) = (term1729 B C P p2 c x).
Proof. exact (@lem8091738 A B C P s t a clauses p1 p2 c x h2 (@lem8091734 A B C P s t a _106907 clauses p1 p2 c x h1 h2)). Qed.
Lemma lem8091742 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : term2043 A B C P t a clauses p1 p2 c x.
Proof. exact (fun h0 : term2044 A B C P t a clauses p1 p2 c x => @lem8091741 A B C P s t a _106907 clauses p1 p2 c x h1 h2). Qed.
Lemma lem8091744 (p : Prop) : (term1951 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8091745 {A B C P : Type'} (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) : (term2043 A B C P t a clauses p1 p2 c x) = ((term1970 A B C P t a clauses c p1 x) = (term1729 B C P p2 c x)).
Proof. exact (@lem8091744 ((term1970 A B C P t a clauses c p1 x) = (term1729 B C P p2 c x))). Qed.
Lemma lem8091746 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : (term1970 A B C P t a clauses c p1 x) = (term1729 B C P p2 c x).
Proof. exact (EQ_MP (@lem8091745 A B C P t a clauses p1 p2 c x) (@lem8091742 A B C P s t a _106907 clauses p1 p2 c x h1 h2)). Qed.
Lemma lem8091747 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : term2045 A B C P t a clauses p1 p2 c x.
Proof. exact (conj (@lem8091381 A B C P s t a _106907 clauses p1 p2 c x h1 h2) (@lem8091746 A B C P s t a _106907 clauses p1 p2 c x h1 h2)). Qed.
Lemma lem8091749 {B : Type'} (x : B) (y : B) (z : B) : term1993 B x y z.
Proof. exact (EQ_MP (@lem8091367 B x y z) (@lem8091346 B y x z)). Qed.
Lemma lem8091750 {B : Type'} (x : B) (y : B) (z : B) : term1993 B x y z.
Proof. exact (@lem8091749 B x y z). Qed.
Lemma lem8091751 {A B C P : Type'} (t : type1116 A B C P) (a : type1119 A B C P) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) : term2046 A B C P t a clauses p1 p2 c x.
Proof. exact (@lem8091750 B (term1970 A B C P t a clauses c p1 x) (term1728 A B C P clauses c p1 x) (term1729 B C P p2 c x)). Qed.
Lemma lem8091754 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : (term1728 A B C P clauses c p1 x) = (term1729 B C P p2 c x).
Proof. exact (@lem8091751 A B C P t a clauses p1 p2 c x (@lem8091747 A B C P s t a _106907 clauses p1 p2 c x h1 h2)). Qed.
Lemma lem8091755 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : term2047 A B C P clauses p1 p2 c x.
Proof. exact (fun h0 : term1732 A B C P clauses p1 p2 c x => @lem8091754 A B C P s t a _106907 clauses p1 p2 c x h1 h2). Qed.
Lemma lem8091757 (p : Prop) : (term1951 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8091758 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) : (term2047 A B C P clauses p1 p2 c x) = ((term1728 A B C P clauses c p1 x) = (term1729 B C P p2 c x)).
Proof. exact (@lem8091757 ((term1728 A B C P clauses c p1 x) = (term1729 B C P p2 c x))). Qed.
Lemma lem8091759 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : (term1728 A B C P clauses c p1 x) = (term1729 B C P p2 c x).
Proof. exact (EQ_MP (@lem8091758 A B C P clauses p1 p2 c x) (@lem8091755 A B C P s t a _106907 clauses p1 p2 c x h1 h2)). Qed.
Lemma lem8091762 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem8091764 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) : (term1732 A B C P clauses p1 p2 c x) = (term2048 A B C P clauses p1 p2 c x).
Proof. exact (@lem8091762 ((term1728 A B C P clauses c p1 x) = (term1729 B C P p2 c x))). Qed.
Lemma lem8091767 {A B C P : Type'} (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term659 A B C P clauses p1 p2 c x) : term2048 A B C P clauses p1 p2 c x.
Proof. exact (EQ_MP (@lem8091764 A B C P clauses p1 p2 c x) (@lem8089436 A B C P clauses p1 p2 c x h1)). Qed.
Lemma lem8091770 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : False.
Proof. exact (@lem8091767 A B C P clauses p1 p2 c x h2 (@lem8091759 A B C P s t a _106907 clauses p1 p2 c x h1 h2)). Qed.
Lemma lem8091771 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : term2049.
Proof. exact (fun h0 : ~ False => @lem8091770 A B C P s t a _106907 clauses p1 p2 c x h1 h2). Qed.
Lemma lem8091773 (p : Prop) : (term1951 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8091774 : term2049 = False.
Proof. exact (@lem8091773 False). Qed.
Lemma lem8091775 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (x : P) (h1 : term1637 A B C P s t a _106907) (h2 : term659 A B C P clauses p1 p2 c x) : False.
Proof. exact (EQ_MP (@lem8091774) (@lem8091771 A B C P s t a _106907 clauses p1 p2 c x h1 h2)). Qed.
Lemma lem8091776 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (p2 : type1475 B C P) (c : C) (h1 : term1637 A B C P s t a _106907) (h2 : term662 A B C P clauses p1 p2 c) : False.
Proof. exact (ex_elim (@lem8085708 A B C P clauses p1 p2 c h2) (fun x : P => fun h0 : term661 A B C P clauses p1 p2 c x => @lem8091775 A B C P s t a _106907 clauses p1 p2 c x h1 h0)). Qed.
Lemma lem8091777 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (p1 : P -> A) (c : C) (h1 : term1637 A B C P s t a _106907) (h2 : term664 A B C P clauses p1 c) : False.
Proof. exact (ex_elim (@lem8085707 A B C P clauses p1 c h2) (fun p2 : type1475 B C P => fun h0 : term663 A B C P clauses p1 c p2 => @lem8091776 A B C P s t a _106907 clauses p1 p2 c h1 h0)). Qed.
Lemma lem8091778 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (c : C) (h1 : term1637 A B C P s t a _106907) (h2 : term666 A B C P clauses c) : False.
Proof. exact (ex_elim (@lem8085706 A B C P clauses c h2) (fun p1 : P -> A => fun h0 : term665 A B C P clauses c p1 => @lem8091777 A B C P s t a _106907 clauses p1 c h1 h0)). Qed.
Lemma lem8091779 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (clauses : type1638 A B C P) (h1 : term1637 A B C P s t a _106907) (h2 : term668 A B C P clauses) : False.
Proof. exact (ex_elim (@lem8085705 A B C P clauses h2) (fun c : C => fun h0 : term667 A B C P clauses c => @lem8091778 A B C P s t a _106907 clauses c h1 h0)). Qed.
Lemma lem8091780 {A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term1637 A B C P s t a _106907) (h2 : term114 A B C P) : False.
Proof. exact (ex_elim (@lem8082169 A B C P h2) (fun clauses : type1638 A B C P => fun h0 : term669 A B C P clauses => @lem8091779 A B C P s t a _106907 clauses h1 h0)). Qed.
Lemma lem8091781 {_143310 _143311 _143313 A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (s'''' : type1101 _143310 _143311 _143313 A) (t'''' : type1100 _143310 _143311 _143313 A) (_106906 : A) (h1 : term1637 A B C P s t a _106907) (h2 : term1001 _143310 _143311 _143313 A s'''' t'''' _106906) (h3 : term114 A B C P) : False.
Proof. exact (ex_elim (@lem8085703 _143310 _143311 _143313 A s'''' t'''' _106906 h2) (fun a'''' : type1102 _143310 _143311 _143313 A => fun h0 : term1000 _143310 _143311 _143313 A s'''' t'''' _106906 a'''' => @lem8091780 A B C P s t a _106907 h1 h3)). Qed.
Lemma lem8091782 {_143310 _143311 _143313 A B C P : Type'} (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (s'''' : type1101 _143310 _143311 _143313 A) (_106906 : A) (h1 : term1637 A B C P s t a _106907) (h2 : term1003 _143310 _143311 _143313 A s'''' _106906) (h3 : term114 A B C P) : False.
Proof. exact (ex_elim (@lem8085702 _143310 _143311 _143313 A s'''' _106906 h2) (fun t'''' : type1100 _143310 _143311 _143313 A => fun h0 : term1002 _143310 _143311 _143313 A s'''' _106906 t'''' => @lem8091781 _143310 _143311 _143313 A B C P s t a _106907 s'''' t'''' _106906 h1 h0 h3)). Qed.
Lemma lem8091783 {_143310 _143311 _143313 A B C P : Type'} (_106906 : A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term347 _143310 _143311 _143313 A _106906) (h2 : term1637 A B C P s t a _106907) (h3 : term114 A B C P) : False.
Proof. exact (ex_elim (@lem8082873 _143310 _143311 _143313 A _106906 h1) (fun s'''' : type1101 _143310 _143311 _143313 A => fun h0 : term1004 _143310 _143311 _143313 A _106906 s'''' => @lem8091782 _143310 _143311 _143313 A B C P s t a _106907 s'''' _106906 h2 h0 h3)). Qed.
Lemma lem8091784 {_143310 _143311 _143313 A B C P : Type'} (_106906 : A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (s''' : type1101 _143310 _143311 _143313 B) (t''' : type1100 _143310 _143311 _143313 B) (_106907 : B) (h1 : term347 _143310 _143311 _143313 A _106906) (h2 : term1637 A B C P s t a _106907) (h3 : term1001 _143310 _143311 _143313 B s''' t''' _106907) (h4 : term114 A B C P) : False.
Proof. exact (ex_elim (@lem8085700 _143310 _143311 _143313 B s''' t''' _106907 h3) (fun a''' : type1102 _143310 _143311 _143313 B => fun h0 : term1000 _143310 _143311 _143313 B s''' t''' _106907 a''' => @lem8091783 _143310 _143311 _143313 A B C P _106906 s t a _106907 h1 h2 h4)). Qed.
Lemma lem8091785 {_143310 _143311 _143313 A B C P : Type'} (_106906 : A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (s''' : type1101 _143310 _143311 _143313 B) (_106907 : B) (h1 : term347 _143310 _143311 _143313 A _106906) (h2 : term1637 A B C P s t a _106907) (h3 : term1003 _143310 _143311 _143313 B s''' _106907) (h4 : term114 A B C P) : False.
Proof. exact (ex_elim (@lem8085699 _143310 _143311 _143313 B s''' _106907 h3) (fun t''' : type1100 _143310 _143311 _143313 B => fun h0 : term1002 _143310 _143311 _143313 B s''' _106907 t''' => @lem8091784 _143310 _143311 _143313 A B C P _106906 s t a s''' t''' _106907 h1 h2 h0 h4)). Qed.
Lemma lem8091786 {_143310 _143311 _143313 A B C P : Type'} (_106906 : A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term347 _143310 _143311 _143313 A _106906) (h2 : term347 _143310 _143311 _143313 B _106907) (h3 : term1637 A B C P s t a _106907) (h4 : term114 A B C P) : False.
Proof. exact (ex_elim (@lem8083577 _143310 _143311 _143313 B _106907 h2) (fun s''' : type1101 _143310 _143311 _143313 B => fun h0 : term1004 _143310 _143311 _143313 B _106907 s''' => @lem8091785 _143310 _143311 _143313 A B C P _106906 s t a s''' _106907 h1 h3 h0 h4)). Qed.
Lemma lem8091787 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (s'' : type1071 _143311 _143313 _143320 A) (t'' : type1070 _143311 _143313 _143320 A) (_106908 : _143320) (h1 : term347 _143310 _143311 _143313 A _106906) (h2 : term347 _143310 _143311 _143313 B _106907) (h3 : term1637 A B C P s t a _106907) (h4 : term1328 _143311 _143313 _143320 A s'' t'' _106908) (h5 : term114 A B C P) : False.
Proof. exact (ex_elim (@lem8085697 _143311 _143313 _143320 A s'' t'' _106908 h4) (fun a'' : type1072 _143311 _143313 _143320 A => fun h0 : term1327 _143311 _143313 _143320 A s'' t'' _106908 a'' => @lem8091786 _143310 _143311 _143313 A B C P _106906 s t a _106907 h1 h2 h3 h5)). Qed.
Lemma lem8091788 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (s'' : type1071 _143311 _143313 _143320 A) (_106908 : _143320) (h1 : term347 _143310 _143311 _143313 A _106906) (h2 : term347 _143310 _143311 _143313 B _106907) (h3 : term1637 A B C P s t a _106907) (h4 : term1330 _143311 _143313 _143320 A s'' _106908) (h5 : term114 A B C P) : False.
Proof. exact (ex_elim (@lem8085696 _143311 _143313 _143320 A s'' _106908 h4) (fun t'' : type1070 _143311 _143313 _143320 A => fun h0 : term1329 _143311 _143313 _143320 A s'' _106908 t'' => @lem8091787 _143310 _143311 _143313 _143320 A B C P _106906 s t a _106907 s'' t'' _106908 h1 h2 h3 h0 h5)). Qed.
Lemma lem8091789 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (_106908 : _143320) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term347 _143310 _143311 _143313 A _106906) (h2 : term347 _143310 _143311 _143313 B _106907) (h3 : term424 _143311 _143313 _143320 A _106908) (h4 : term1637 A B C P s t a _106907) (h5 : term114 A B C P) : False.
Proof. exact (ex_elim (@lem8084281 _143311 _143313 _143320 A _106908 h3) (fun s'' : type1071 _143311 _143313 _143320 A => fun h0 : term1331 _143311 _143313 _143320 A _106908 s'' => @lem8091788 _143310 _143311 _143313 _143320 A B C P _106906 s t a _106907 s'' _106908 h1 h2 h4 h0 h5)). Qed.
Lemma lem8091790 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (s' : type1071 _143311 _143313 _143320 B) (t' : type1070 _143311 _143313 _143320 B) (_106908 : _143320) (h1 : term347 _143310 _143311 _143313 A _106906) (h2 : term347 _143310 _143311 _143313 B _106907) (h3 : term424 _143311 _143313 _143320 A _106908) (h4 : term1637 A B C P s t a _106907) (h5 : term1328 _143311 _143313 _143320 B s' t' _106908) (h6 : term114 A B C P) : False.
Proof. exact (ex_elim (@lem8085694 _143311 _143313 _143320 B s' t' _106908 h5) (fun a' : type1072 _143311 _143313 _143320 B => fun h0 : term1327 _143311 _143313 _143320 B s' t' _106908 a' => @lem8091789 _143310 _143311 _143313 _143320 A B C P _106906 _106908 s t a _106907 h1 h2 h3 h4 h6)). Qed.
Lemma lem8091791 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (s' : type1071 _143311 _143313 _143320 B) (_106908 : _143320) (h1 : term347 _143310 _143311 _143313 A _106906) (h2 : term347 _143310 _143311 _143313 B _106907) (h3 : term424 _143311 _143313 _143320 A _106908) (h4 : term1637 A B C P s t a _106907) (h5 : term1330 _143311 _143313 _143320 B s' _106908) (h6 : term114 A B C P) : False.
Proof. exact (ex_elim (@lem8085693 _143311 _143313 _143320 B s' _106908 h5) (fun t' : type1070 _143311 _143313 _143320 B => fun h0 : term1329 _143311 _143313 _143320 B s' _106908 t' => @lem8091790 _143310 _143311 _143313 _143320 A B C P _106906 s t a _106907 s' t' _106908 h1 h2 h3 h4 h0 h6)). Qed.
Lemma lem8091792 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (_106908 : _143320) (s : type1117 A B C P) (t : type1116 A B C P) (a : type1119 A B C P) (_106907 : B) (h1 : term347 _143310 _143311 _143313 A _106906) (h2 : term347 _143310 _143311 _143313 B _106907) (h3 : term424 _143311 _143313 _143320 A _106908) (h4 : term424 _143311 _143313 _143320 B _106908) (h5 : term1637 A B C P s t a _106907) (h6 : term114 A B C P) : False.
Proof. exact (ex_elim (@lem8084985 _143311 _143313 _143320 B _106908 h4) (fun s' : type1071 _143311 _143313 _143320 B => fun h0 : term1331 _143311 _143313 _143320 B _106908 s' => @lem8091791 _143310 _143311 _143313 _143320 A B C P _106906 s t a _106907 s' _106908 h1 h2 h3 h5 h0 h6)). Qed.
Lemma lem8091793 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (_106908 : _143320) (s : type1117 A B C P) (t : type1116 A B C P) (_106907 : B) (h1 : term347 _143310 _143311 _143313 A _106906) (h2 : term347 _143310 _143311 _143313 B _106907) (h3 : term424 _143311 _143313 _143320 A _106908) (h4 : term424 _143311 _143313 _143320 B _106908) (h5 : term1640 A B C P s t _106907) (h6 : term114 A B C P) : False.
Proof. exact (ex_elim (@lem8085691 A B C P s t _106907 h5) (fun a : type1119 A B C P => fun h0 : term1639 A B C P s t _106907 a => @lem8091792 _143310 _143311 _143313 _143320 A B C P _106906 _106908 s t a _106907 h1 h2 h3 h4 h0 h6)). Qed.
Lemma lem8091794 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (_106908 : _143320) (s : type1117 A B C P) (_106907 : B) (h1 : term347 _143310 _143311 _143313 A _106906) (h2 : term347 _143310 _143311 _143313 B _106907) (h3 : term424 _143311 _143313 _143320 A _106908) (h4 : term424 _143311 _143313 _143320 B _106908) (h5 : term1642 A B C P s _106907) (h6 : term114 A B C P) : False.
Proof. exact (ex_elim (@lem8085690 A B C P s _106907 h5) (fun t : type1116 A B C P => fun h0 : term1641 A B C P s _106907 t => @lem8091793 _143310 _143311 _143313 _143320 A B C P _106906 _106908 s t _106907 h1 h2 h3 h4 h0 h6)). Qed.
Lemma lem8091795 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (_106908 : _143320) (_106907 : B) (h1 : term347 _143310 _143311 _143313 A _106906) (h2 : term347 _143310 _143311 _143313 B _106907) (h3 : term424 _143311 _143313 _143320 A _106908) (h4 : term424 _143311 _143313 _143320 B _106908) (h5 : term499 A B C P _106907) (h6 : term114 A B C P) : False.
Proof. exact (ex_elim (@lem8085689 A B C P _106907 h5) (fun s : type1117 A B C P => fun h0 : term1643 A B C P _106907 s => @lem8091794 _143310 _143311 _143313 _143320 A B C P _106906 _106908 s _106907 h1 h2 h3 h4 h0 h6)). Qed.
Lemma lem8091796 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (_106907 : B) (_106908 : _143320) (h1 : term347 _143310 _143311 _143313 A _106906) (h2 : term347 _143310 _143311 _143313 B _106907) (h3 : term424 _143311 _143313 _143320 A _106908) (h4 : term424 _143311 _143313 _143320 B _106908) (h5 : term114 A B C P) : term2050 A B C P _106907.
Proof. exact (fun h0 : term499 A B C P _106907 => @lem8091795 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907 h1 h2 h3 h4 h0 h5). Qed.
Lemma lem8091797 {A B C P : Type'} (_106907 : B) : (term2050 A B C P _106907) = (term500 A B C P _106907).
Proof. exact (@lem69 (term499 A B C P _106907)). Qed.
Lemma lem8091798 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (_106907 : B) (_106908 : _143320) (h1 : term347 _143310 _143311 _143313 A _106906) (h2 : term347 _143310 _143311 _143313 B _106907) (h3 : term424 _143311 _143313 _143320 A _106908) (h4 : term424 _143311 _143313 _143320 B _106908) (h5 : term114 A B C P) : term500 A B C P _106907.
Proof. exact (EQ_MP (@lem8091797 A B C P _106907) (@lem8091796 _143310 _143311 _143313 _143320 A B C P _106906 _106907 _106908 h1 h2 h3 h4 h5)). Qed.
Lemma lem8091799 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (_106907 : B) (_106908 : _143320) (h1 : term347 _143310 _143311 _143313 A _106906) (h2 : term347 _143310 _143311 _143313 B _106907) (h3 : term424 _143311 _143313 _143320 A _106908) (h4 : term114 A B C P) : term501 _143311 _143313 _143320 A B C P _106908 _106907.
Proof. exact (fun h0 : term424 _143311 _143313 _143320 B _106908 => @lem8091798 _143310 _143311 _143313 _143320 A B C P _106906 _106907 _106908 h1 h2 h3 h0 h4). Qed.
Lemma lem8091800 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (_106906 : A) (_106907 : B) (h1 : term347 _143310 _143311 _143313 A _106906) (h2 : term347 _143310 _143311 _143313 B _106907) (h3 : term114 A B C P) : term502 _143311 _143313 _143320 A B C P _106908 _106907.
Proof. exact (fun h0 : term424 _143311 _143313 _143320 A _106908 => @lem8091799 _143310 _143311 _143313 _143320 A B C P _106906 _106907 _106908 h1 h2 h0 h3). Qed.
Lemma lem8091801 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (_106907 : B) (_106906 : A) (h1 : term347 _143310 _143311 _143313 A _106906) (h2 : term114 A B C P) : term503 _143310 _143311 _143313 _143320 A B C P _106908 _106907.
Proof. exact (fun h0 : term347 _143310 _143311 _143313 B _106907 => @lem8091800 _143310 _143311 _143313 _143320 A B C P _106908 _106906 _106907 h1 h0 h2). Qed.
Lemma lem8091802 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (_106908 : _143320) (_106907 : B) (h1 : term114 A B C P) : term504 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907.
Proof. exact (fun h0 : term347 _143310 _143311 _143313 A _106906 => @lem8091801 _143310 _143311 _143313 _143320 A B C P _106908 _106907 _106906 h0 h1). Qed.
Lemma lem8091803 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106906 : A) (_106908 : _143320) (_106907 : B) : term505 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907.
Proof. exact (fun h0 : term114 A B C P => @lem8091802 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907 h0). Qed.
Lemma lem8091808 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) (_106907 : B) : term508 _143310 _143311 _143313 _143320 A B C P _106908 _106907.
Proof. exact (fun _106906 : A => @lem8091803 _143310 _143311 _143313 _143320 A B C P _106906 _106908 _106907). Qed.
Lemma lem8091813 {_143310 _143311 _143313 _143320 A B C P : Type'} (_106908 : _143320) : term511 _143310 _143311 _143313 _143320 A B C P _106908.
Proof. exact (fun _106907 : B => @lem8091808 _143310 _143311 _143313 _143320 A B C P _106908 _106907). Qed.
Lemma lem8091818 {_143310 _143311 _143313 _143320 A B C P : Type'} : term515 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (fun _106908 : _143320 => @lem8091813 _143310 _143311 _143313 _143320 A B C P _106908). Qed.
Lemma lem8091819 {_143310 _143311 _143313 _143320 A B C P : Type'} : term246 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (EQ_MP (@lem8081781 _143310 _143311 _143313 _143320 A B C P) (@lem8091818 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8091821 {_143310 _143311 _143313 _143320 A B C P : Type'} : term129 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8075210 _143310 _143311 _143313 _143320 A B C P (@lem8091819 _143310 _143311 _143313 _143320 A B C P)). Qed.
Lemma lem8091822 {_143310 _143311 _143313 _143320 A B C P : Type'} (h1 : term114 A B C P) : term153 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8091821 _143310 _143311 _143313 _143320 A B C P (@lem8074865 A B C P h1)). Qed.
Lemma lem8091823 {_143310 _143311 _143313 _143320 A B C P : Type'} (h1 : term114 A B C P) : term152 _143310 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8091822 _143310 _143311 _143313 _143320 A B C P h1 (@lem8074870 _143310 _143311 _143313 A)). Qed.
Lemma lem8091824 {_143311 _143313 _143320 A B C P : Type'} (h1 : term114 A B C P) : term194 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8091823 Prop _143311 _143313 _143320 A B C P h1 (@lem8074871 Prop _143311 _143313 B)). Qed.
Lemma lem8091825 {_143311 _143313 _143320 A B C P : Type'} (h1 : term114 A B C P) : term192 _143311 _143313 _143320 A B C P.
Proof. exact (@lem8091824 _143311 _143313 _143320 A B C P h1 (@lem8074868 _143311 _143313 _143320 A)). Qed.
Lemma lem8091826 {A B C P : Type'} (h1 : term114 A B C P) : term189 A B C P.
Proof. exact (@lem8091825 Prop Prop Prop A B C P h1 (@lem8074869 Prop Prop Prop B)). Qed.
Lemma lem8091827 {A B C P : Type'} (h1 : term114 A B C P) : False.
Proof. exact (@lem8091826 A B C P h1 (@lem8074866 A B C P)). Qed.
Lemma lem8091828 {A B C P : Type'} (h1 : term114 A B C P) : (term114 A B C P) = False.
Proof. exact (prop_ext (fun h2 : term114 A B C P => @lem8091827 A B C P h1) (fun h2 : False => @lem8074865 A B C P h1)). Qed.
Lemma lem8091829 {A B C P : Type'} (h1 : term114 A B C P) : False.
Proof. exact (EQ_MP (@lem8091828 A B C P h1) (@lem8074865 A B C P h1)). Qed.
Lemma lem8091830 {A B C P : Type'} : term113 A B C P.
Proof. exact (fun h0 : term114 A B C P => @lem8091829 A B C P h0). Qed.
Lemma lem8091831 {A B C P : Type'} : term111 A B C P.
Proof. exact (EQ_MP (@lem8074864 A B C P) (@lem8091830 A B C P)). Qed.
Lemma lem8091832 {A B C P : Type'} : term110 A B C P.
Proof. exact (EQ_MP (@lem8074860 A B C P) (@lem8091831 A B C P)). Qed.
