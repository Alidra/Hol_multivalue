require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_terms;
symbol lem8390588 [A B P] : Prf (∀ (λ << : El (fun A (fun A bool)), (∀ (λ clauses : El (list (prod (fun P A) (fun (fun A B) (fun P B)))), (⇒ (∧ ((@WF A) <<) ((@ALL (prod (fun P A) (fun (fun A B) (fun P B)))) ((@GABS (fun (prod (fun P A) (fun (fun A B) (fun P B))) bool)) (λ f : El (fun (prod (fun P A) (fun (fun A B) (fun P B))) bool), (∀ (λ s : El (fun P A), (∀ (λ t : El (fun (fun A B) (fun P B)), ((@GEQ bool) (f ((@̦‚ (fun P A) (fun (fun A B) (fun P B))) s t)) (∃ (λ P' : El (fun (fun A B) (fun P bool)), (∃ (λ G : El (fun (fun A B) (fun P A)), (∃ (λ H : El (fun (fun A B) (fun P B)), (∧ (∀ (λ f' : El (fun A B), (∀ (λ a : El P, (∀ (λ y : El A, (⇒ (∧ (P' f' a) (<< y (G f' a))) (<< y (s a))))))))) (∧ (∀ (λ f' : El (fun A B), (∀ (λ g : El (fun A B), (∀ (λ a : El P, (⇒ (∀ (λ z : El A, (⇒ (<< z (s a)) (= (f' z) (g z))))) (∧ (= (P' f' a) (P' g a)) (∧ (= (G f' a) (G g a)) (= (H f' a) (H g a))))))))))) (∀ (λ f' : El (fun A B), (∀ (λ a : El P, (= (t f' a) ((@COND B) (P' f' a) (f' (G f' a)) (H f' a)))))))))))))))))))))) clauses)) (∃ (λ f : El (fun A B), (∀ (λ x : El A, (= (f x) ((@CASEWISE B P A (fun A B)) clauses f x)))))))))));
