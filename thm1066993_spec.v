Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_terms.
Axiom lem1066993 : forall {A B : Type'} (r : recspace (prod A B)) (sum' : (recspace (prod A B)) -> Prop) (INL' : A -> recspace (prod A B)) (INR' : B -> recspace (prod A B)) (h1 : INL' = (fun a : A => @CONSTR (prod A B) (NUMERAL 0) (@pair A B a (@Îµ B (fun v : B => True))) (fun n : nat => @BOTTOM (prod A B)))) (h2 : INR' = (fun a : B => @CONSTR (prod A B) (S (NUMERAL 0)) (@pair A B (@Îµ A (fun v : A => True)) a) (fun n : nat => @BOTTOM (prod A B)))) (h3 : sum' = (fun a : recspace (prod A B) => forall sum'' : (recspace (prod A B)) -> Prop, (forall a' : recspace (prod A B), ((exists a'' : A, a' = (INL' a'')) \/ (exists a'' : B, a' = (INR' a''))) -> sum'' a') -> sum'' a)), (sum' r) = ((fun a : recspace (prod A B) => forall sum'' : (recspace (prod A B)) -> Prop, (forall a' : recspace (prod A B), ((exists a'' : A, a' = ((fun a''' : A => @CONSTR (prod A B) (NUMERAL 0) (@pair A B a''' (@Îµ B (fun v : B => True))) (fun n : nat => @BOTTOM (prod A B))) a'')) \/ (exists a'' : B, a' = ((fun a''' : B => @CONSTR (prod A B) (S (NUMERAL 0)) (@pair A B (@Îµ A (fun v : A => True)) a''') (fun n : nat => @BOTTOM (prod A B))) a''))) -> sum'' a') -> sum'' a) r).
