Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_type_abbrevs.
Require Import hol_terms.
Definition term45 := fun y0 : int => forall y1 : int, (int_le (int_of_num (NUMERAL 0)) (int_gcd (@pair int int y0 y1))) /\ ((int_divides (int_gcd (@pair int int y0 y1)) y0) /\ ((int_divides (int_gcd (@pair int int y0 y1)) y1) /\ (exists y2 : int, exists y3 : int, (int_gcd (@pair int int y0 y1)) = (int_add (int_mul y0 y2) (int_mul y1 y3))))).
Definition term44 := fun y0 : int => forall y1 : int, (int_le (int_of_num (NUMERAL 0)) (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y2 : type1259 => forall y3 : type1670, forall y4 : int, forall y5 : int, (int_le (int_of_num (NUMERAL 0)) (y2 y3 (@pair int int y4 y5))) /\ ((int_divides (y2 y3 (@pair int int y4 y5)) y4) /\ ((int_divides (y2 y3 (@pair int int y4 y5)) y5) /\ (exists y6 : int, exists y7 : int, (y2 y3 (@pair int int y4 y5)) = (int_add (int_mul y4 y6) (int_mul y5 y7)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int y0 y1))) /\ ((int_divides (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y2 : type1259 => forall y3 : type1670, forall y4 : int, forall y5 : int, (int_le (int_of_num (NUMERAL 0)) (y2 y3 (@pair int int y4 y5))) /\ ((int_divides (y2 y3 (@pair int int y4 y5)) y4) /\ ((int_divides (y2 y3 (@pair int int y4 y5)) y5) /\ (exists y6 : int, exists y7 : int, (y2 y3 (@pair int int y4 y5)) = (int_add (int_mul y4 y6) (int_mul y5 y7)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int y0 y1)) y0) /\ ((int_divides (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y2 : type1259 => forall y3 : type1670, forall y4 : int, forall y5 : int, (int_le (int_of_num (NUMERAL 0)) (y2 y3 (@pair int int y4 y5))) /\ ((int_divides (y2 y3 (@pair int int y4 y5)) y4) /\ ((int_divides (y2 y3 (@pair int int y4 y5)) y5) /\ (exists y6 : int, exists y7 : int, (y2 y3 (@pair int int y4 y5)) = (int_add (int_mul y4 y6) (int_mul y5 y7)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int y0 y1)) y1) /\ (exists y2 : int, exists y3 : int, (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y4 : type1259 => forall y5 : type1670, forall y6 : int, forall y7 : int, (int_le (int_of_num (NUMERAL 0)) (y4 y5 (@pair int int y6 y7))) /\ ((int_divides (y4 y5 (@pair int int y6 y7)) y6) /\ ((int_divides (y4 y5 (@pair int int y6 y7)) y7) /\ (exists y8 : int, exists y9 : int, (y4 y5 (@pair int int y6 y7)) = (int_add (int_mul y6 y8) (int_mul y7 y9)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int y0 y1)) = (int_add (int_mul y0 y2) (int_mul y1 y3))))).
Definition term19 (x0 : int) (x1 : int) := int_divides (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y0 : type1259 => forall y1 : type1670, forall y2 : int, forall y3 : int, (int_le (int_of_num (NUMERAL 0)) (y0 y1 (@pair int int y2 y3))) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y2) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y3) /\ (exists y4 : int, exists y5 : int, (y0 y1 (@pair int int y2 y3)) = (int_add (int_mul y2 y4) (int_mul y3 y5)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 x1)) x1.
Definition term25 (x0 : int) (x1 : int) (x2 : int) (x3 : int) := int_add (int_mul x0 x1) (int_mul x2 x3).
Definition term22 (x0 : int) (x1 : int) := and (int_divides (int_gcd (@pair int int x0 x1)) x1).
Definition term18 (x0 : int) (x1 : int) := and (int_divides (int_gcd (@pair int int x1 x0)) x1).
Definition term43 (x0 : int) := forall y0 : int, (int_le (int_of_num (NUMERAL 0)) (int_gcd (@pair int int x0 y0))) /\ ((int_divides (int_gcd (@pair int int x0 y0)) x0) /\ ((int_divides (int_gcd (@pair int int x0 y0)) y0) /\ (exists y1 : int, exists y2 : int, (int_gcd (@pair int int x0 y0)) = (int_add (int_mul x0 y1) (int_mul y0 y2))))).
Definition term42 (x0 : int) := forall y0 : int, (int_le (int_of_num (NUMERAL 0)) (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y1 : type1259 => forall y2 : type1670, forall y3 : int, forall y4 : int, (int_le (int_of_num (NUMERAL 0)) (y1 y2 (@pair int int y3 y4))) /\ ((int_divides (y1 y2 (@pair int int y3 y4)) y3) /\ ((int_divides (y1 y2 (@pair int int y3 y4)) y4) /\ (exists y5 : int, exists y6 : int, (y1 y2 (@pair int int y3 y4)) = (int_add (int_mul y3 y5) (int_mul y4 y6)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 y0))) /\ ((int_divides (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y1 : type1259 => forall y2 : type1670, forall y3 : int, forall y4 : int, (int_le (int_of_num (NUMERAL 0)) (y1 y2 (@pair int int y3 y4))) /\ ((int_divides (y1 y2 (@pair int int y3 y4)) y3) /\ ((int_divides (y1 y2 (@pair int int y3 y4)) y4) /\ (exists y5 : int, exists y6 : int, (y1 y2 (@pair int int y3 y4)) = (int_add (int_mul y3 y5) (int_mul y4 y6)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 y0)) x0) /\ ((int_divides (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y1 : type1259 => forall y2 : type1670, forall y3 : int, forall y4 : int, (int_le (int_of_num (NUMERAL 0)) (y1 y2 (@pair int int y3 y4))) /\ ((int_divides (y1 y2 (@pair int int y3 y4)) y3) /\ ((int_divides (y1 y2 (@pair int int y3 y4)) y4) /\ (exists y5 : int, exists y6 : int, (y1 y2 (@pair int int y3 y4)) = (int_add (int_mul y3 y5) (int_mul y4 y6)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 y0)) y0) /\ (exists y1 : int, exists y2 : int, (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y3 : type1259 => forall y4 : type1670, forall y5 : int, forall y6 : int, (int_le (int_of_num (NUMERAL 0)) (y3 y4 (@pair int int y5 y6))) /\ ((int_divides (y3 y4 (@pair int int y5 y6)) y5) /\ ((int_divides (y3 y4 (@pair int int y5 y6)) y6) /\ (exists y7 : int, exists y8 : int, (y3 y4 (@pair int int y5 y6)) = (int_add (int_mul y5 y7) (int_mul y6 y8)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 y0)) = (int_add (int_mul x0 y1) (int_mul y0 y2))))).
Definition term24 (x0 : int) (x1 : int) := @eq int (int_gcd (@pair int int x0 x1)).
Definition term36 (x0 : int) (x1 : int) := (int_divides (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y0 : type1259 => forall y1 : type1670, forall y2 : int, forall y3 : int, (int_le (int_of_num (NUMERAL 0)) (y0 y1 (@pair int int y2 y3))) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y2) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y3) /\ (exists y4 : int, exists y5 : int, (y0 y1 (@pair int int y2 y3)) = (int_add (int_mul y2 y4) (int_mul y3 y5)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 x1)) x0) /\ ((int_divides (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y0 : type1259 => forall y1 : type1670, forall y2 : int, forall y3 : int, (int_le (int_of_num (NUMERAL 0)) (y0 y1 (@pair int int y2 y3))) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y2) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y3) /\ (exists y4 : int, exists y5 : int, (y0 y1 (@pair int int y2 y3)) = (int_add (int_mul y2 y4) (int_mul y3 y5)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 x1)) x1) /\ (exists y0 : int, exists y1 : int, (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y2 : type1259 => forall y3 : type1670, forall y4 : int, forall y5 : int, (int_le (int_of_num (NUMERAL 0)) (y2 y3 (@pair int int y4 y5))) /\ ((int_divides (y2 y3 (@pair int int y4 y5)) y4) /\ ((int_divides (y2 y3 (@pair int int y4 y5)) y5) /\ (exists y6 : int, exists y7 : int, (y2 y3 (@pair int int y4 y5)) = (int_add (int_mul y4 y6) (int_mul y5 y7)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 x1)) = (int_add (int_mul x0 y0) (int_mul x1 y1)))).
Definition term35 (x0 : int) (x1 : int) := (int_divides (int_gcd (@pair int int x0 x1)) x1) /\ (exists y0 : int, exists y1 : int, (int_gcd (@pair int int x0 x1)) = (int_add (int_mul x0 y0) (int_mul x1 y1))).
Definition term39 (x0 : int) (x1 : int) := (int_le (int_of_num (NUMERAL 0)) (int_gcd (@pair int int x0 x1))) /\ ((int_divides (int_gcd (@pair int int x0 x1)) x0) /\ ((int_divides (int_gcd (@pair int int x0 x1)) x1) /\ (exists y0 : int, exists y1 : int, (int_gcd (@pair int int x0 x1)) = (int_add (int_mul x0 y0) (int_mul x1 y1))))).
Definition term37 (x0 : int) (x1 : int) := (int_divides (int_gcd (@pair int int x0 x1)) x0) /\ ((int_divides (int_gcd (@pair int int x0 x1)) x1) /\ (exists y0 : int, exists y1 : int, (int_gcd (@pair int int x0 x1)) = (int_add (int_mul x0 y0) (int_mul x1 y1)))).
Definition term27 (x0 : int) (x1 : int) (x2 : int) := fun y0 : int => (int_gcd (@pair int int x0 x2)) = (int_add (int_mul x0 x1) (int_mul x2 y0)).
Definition term21 (x0 : int) (x1 : int) := and (int_divides (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y0 : type1259 => forall y1 : type1670, forall y2 : int, forall y3 : int, (int_le (int_of_num (NUMERAL 0)) (y0 y1 (@pair int int y2 y3))) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y2) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y3) /\ (exists y4 : int, exists y5 : int, (y0 y1 (@pair int int y2 y3)) = (int_add (int_mul y2 y4) (int_mul y3 y5)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 x1)) x1).
Definition term17 (x0 : int) (x1 : int) := and (int_divides (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y0 : type1259 => forall y1 : type1670, forall y2 : int, forall y3 : int, (int_le (int_of_num (NUMERAL 0)) (y0 y1 (@pair int int y2 y3))) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y2) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y3) /\ (exists y4 : int, exists y5 : int, (y0 y1 (@pair int int y2 y3)) = (int_add (int_mul y2 y4) (int_mul y3 y5)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x1 x0)) x1).
Definition term41 (x0 : int) := fun y0 : int => (int_le (int_of_num (NUMERAL 0)) (int_gcd (@pair int int x0 y0))) /\ ((int_divides (int_gcd (@pair int int x0 y0)) x0) /\ ((int_divides (int_gcd (@pair int int x0 y0)) y0) /\ (exists y1 : int, exists y2 : int, (int_gcd (@pair int int x0 y0)) = (int_add (int_mul x0 y1) (int_mul y0 y2))))).
Definition term15 (x0 : int) (x1 : int) := int_divides (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y0 : type1259 => forall y1 : type1670, forall y2 : int, forall y3 : int, (int_le (int_of_num (NUMERAL 0)) (y0 y1 (@pair int int y2 y3))) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y2) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y3) /\ (exists y4 : int, exists y5 : int, (y0 y1 (@pair int int y2 y3)) = (int_add (int_mul y2 y4) (int_mul y3 y5)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x1 x0)) x1.
Definition term10 (x0 : int) (x1 : int) := int_le (int_of_num (NUMERAL 0)) (int_gcd (@pair int int x0 x1)).
Definition term16 (x0 : int) (x1 : int) := int_divides (int_gcd (@pair int int x1 x0)) x1.
Definition term9 (x0 : int) (x1 : int) := int_le (int_of_num (NUMERAL 0)) (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y0 : type1259 => forall y1 : type1670, forall y2 : int, forall y3 : int, (int_le (int_of_num (NUMERAL 0)) (y0 y1 (@pair int int y2 y3))) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y2) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y3) /\ (exists y4 : int, exists y5 : int, (y0 y1 (@pair int int y2 y3)) = (int_add (int_mul y2 y4) (int_mul y3 y5)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 x1)).
Definition term1 := forall y0 : type1670, forall y1 : int, forall y2 : int, (int_le (int_of_num (NUMERAL 0)) (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y3 : type1259 => forall y4 : type1670, forall y5 : int, forall y6 : int, (int_le (int_of_num (NUMERAL 0)) (y3 y4 (@pair int int y5 y6))) /\ ((int_divides (y3 y4 (@pair int int y5 y6)) y5) /\ ((int_divides (y3 y4 (@pair int int y5 y6)) y6) /\ (exists y7 : int, exists y8 : int, (y3 y4 (@pair int int y5 y6)) = (int_add (int_mul y5 y7) (int_mul y6 y8)))))) y0 (@pair int int y1 y2))) /\ ((int_divides (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y3 : type1259 => forall y4 : type1670, forall y5 : int, forall y6 : int, (int_le (int_of_num (NUMERAL 0)) (y3 y4 (@pair int int y5 y6))) /\ ((int_divides (y3 y4 (@pair int int y5 y6)) y5) /\ ((int_divides (y3 y4 (@pair int int y5 y6)) y6) /\ (exists y7 : int, exists y8 : int, (y3 y4 (@pair int int y5 y6)) = (int_add (int_mul y5 y7) (int_mul y6 y8)))))) y0 (@pair int int y1 y2)) y1) /\ ((int_divides (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y3 : type1259 => forall y4 : type1670, forall y5 : int, forall y6 : int, (int_le (int_of_num (NUMERAL 0)) (y3 y4 (@pair int int y5 y6))) /\ ((int_divides (y3 y4 (@pair int int y5 y6)) y5) /\ ((int_divides (y3 y4 (@pair int int y5 y6)) y6) /\ (exists y7 : int, exists y8 : int, (y3 y4 (@pair int int y5 y6)) = (int_add (int_mul y5 y7) (int_mul y6 y8)))))) y0 (@pair int int y1 y2)) y2) /\ (exists y3 : int, exists y4 : int, (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y5 : type1259 => forall y6 : type1670, forall y7 : int, forall y8 : int, (int_le (int_of_num (NUMERAL 0)) (y5 y6 (@pair int int y7 y8))) /\ ((int_divides (y5 y6 (@pair int int y7 y8)) y7) /\ ((int_divides (y5 y6 (@pair int int y7 y8)) y8) /\ (exists y9 : int, exists y10 : int, (y5 y6 (@pair int int y7 y8)) = (int_add (int_mul y7 y9) (int_mul y8 y10)))))) y0 (@pair int int y1 y2)) = (int_add (int_mul y1 y3) (int_mul y2 y4))))).
Definition term12 (x0 : int) (x1 : int) := and (int_le (int_of_num (NUMERAL 0)) (int_gcd (@pair int int x0 x1))).
Definition term0 := (fun y0 : type1259 => forall y1 : type1670, forall y2 : int, forall y3 : int, (int_le (int_of_num (NUMERAL 0)) (y0 y1 (@pair int int y2 y3))) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y2) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y3) /\ (exists y4 : int, exists y5 : int, (y0 y1 (@pair int int y2 y3)) = (int_add (int_mul y2 y4) (int_mul y3 y5)))))) (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y0 : type1259 => forall y1 : type1670, forall y2 : int, forall y3 : int, (int_le (int_of_num (NUMERAL 0)) (y0 y1 (@pair int int y2 y3))) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y2) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y3) /\ (exists y4 : int, exists y5 : int, (y0 y1 (@pair int int y2 y3)) = (int_add (int_mul y2 y4) (int_mul y3 y5))))))).
Definition term3 := @pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0))))))))))))).
Definition term46 := forall y0 : int, forall y1 : int, (int_le (int_of_num (NUMERAL 0)) (int_gcd (@pair int int y0 y1))) /\ ((int_divides (int_gcd (@pair int int y0 y1)) y0) /\ ((int_divides (int_gcd (@pair int int y0 y1)) y1) /\ (exists y2 : int, exists y3 : int, (int_gcd (@pair int int y0 y1)) = (int_add (int_mul y0 y2) (int_mul y1 y3))))).
Definition term4 := forall y0 : int, forall y1 : int, (int_le (int_of_num (NUMERAL 0)) (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y2 : type1259 => forall y3 : type1670, forall y4 : int, forall y5 : int, (int_le (int_of_num (NUMERAL 0)) (y2 y3 (@pair int int y4 y5))) /\ ((int_divides (y2 y3 (@pair int int y4 y5)) y4) /\ ((int_divides (y2 y3 (@pair int int y4 y5)) y5) /\ (exists y6 : int, exists y7 : int, (y2 y3 (@pair int int y4 y5)) = (int_add (int_mul y4 y6) (int_mul y5 y7)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int y0 y1))) /\ ((int_divides (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y2 : type1259 => forall y3 : type1670, forall y4 : int, forall y5 : int, (int_le (int_of_num (NUMERAL 0)) (y2 y3 (@pair int int y4 y5))) /\ ((int_divides (y2 y3 (@pair int int y4 y5)) y4) /\ ((int_divides (y2 y3 (@pair int int y4 y5)) y5) /\ (exists y6 : int, exists y7 : int, (y2 y3 (@pair int int y4 y5)) = (int_add (int_mul y4 y6) (int_mul y5 y7)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int y0 y1)) y0) /\ ((int_divides (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y2 : type1259 => forall y3 : type1670, forall y4 : int, forall y5 : int, (int_le (int_of_num (NUMERAL 0)) (y2 y3 (@pair int int y4 y5))) /\ ((int_divides (y2 y3 (@pair int int y4 y5)) y4) /\ ((int_divides (y2 y3 (@pair int int y4 y5)) y5) /\ (exists y6 : int, exists y7 : int, (y2 y3 (@pair int int y4 y5)) = (int_add (int_mul y4 y6) (int_mul y5 y7)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int y0 y1)) y1) /\ (exists y2 : int, exists y3 : int, (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y4 : type1259 => forall y5 : type1670, forall y6 : int, forall y7 : int, (int_le (int_of_num (NUMERAL 0)) (y4 y5 (@pair int int y6 y7))) /\ ((int_divides (y4 y5 (@pair int int y6 y7)) y6) /\ ((int_divides (y4 y5 (@pair int int y6 y7)) y7) /\ (exists y8 : int, exists y9 : int, (y4 y5 (@pair int int y6 y7)) = (int_add (int_mul y6 y8) (int_mul y7 y9)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int y0 y1)) = (int_add (int_mul y0 y2) (int_mul y1 y3))))).
Definition term28 (x0 : int) (x1 : int) (x2 : int) := exists y0 : int, (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y1 : type1259 => forall y2 : type1670, forall y3 : int, forall y4 : int, (int_le (int_of_num (NUMERAL 0)) (y1 y2 (@pair int int y3 y4))) /\ ((int_divides (y1 y2 (@pair int int y3 y4)) y3) /\ ((int_divides (y1 y2 (@pair int int y3 y4)) y4) /\ (exists y5 : int, exists y6 : int, (y1 y2 (@pair int int y3 y4)) = (int_add (int_mul y3 y5) (int_mul y4 y6)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 x2)) = (int_add (int_mul x0 x1) (int_mul x2 y0)).
Definition term29 (x0 : int) (x1 : int) (x2 : int) := exists y0 : int, (int_gcd (@pair int int x0 x2)) = (int_add (int_mul x0 x1) (int_mul x2 y0)).
Definition term38 (x0 : int) (x1 : int) := (int_le (int_of_num (NUMERAL 0)) (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y0 : type1259 => forall y1 : type1670, forall y2 : int, forall y3 : int, (int_le (int_of_num (NUMERAL 0)) (y0 y1 (@pair int int y2 y3))) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y2) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y3) /\ (exists y4 : int, exists y5 : int, (y0 y1 (@pair int int y2 y3)) = (int_add (int_mul y2 y4) (int_mul y3 y5)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 x1))) /\ ((int_divides (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y0 : type1259 => forall y1 : type1670, forall y2 : int, forall y3 : int, (int_le (int_of_num (NUMERAL 0)) (y0 y1 (@pair int int y2 y3))) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y2) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y3) /\ (exists y4 : int, exists y5 : int, (y0 y1 (@pair int int y2 y3)) = (int_add (int_mul y2 y4) (int_mul y3 y5)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 x1)) x0) /\ ((int_divides (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y0 : type1259 => forall y1 : type1670, forall y2 : int, forall y3 : int, (int_le (int_of_num (NUMERAL 0)) (y0 y1 (@pair int int y2 y3))) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y2) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y3) /\ (exists y4 : int, exists y5 : int, (y0 y1 (@pair int int y2 y3)) = (int_add (int_mul y2 y4) (int_mul y3 y5)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 x1)) x1) /\ (exists y0 : int, exists y1 : int, (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y2 : type1259 => forall y3 : type1670, forall y4 : int, forall y5 : int, (int_le (int_of_num (NUMERAL 0)) (y2 y3 (@pair int int y4 y5))) /\ ((int_divides (y2 y3 (@pair int int y4 y5)) y4) /\ ((int_divides (y2 y3 (@pair int int y4 y5)) y5) /\ (exists y6 : int, exists y7 : int, (y2 y3 (@pair int int y4 y5)) = (int_add (int_mul y4 y6) (int_mul y5 y7)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 x1)) = (int_add (int_mul x0 y0) (int_mul x1 y1))))).
Definition term20 (x0 : int) (x1 : int) := int_divides (int_gcd (@pair int int x0 x1)) x1.
Definition term6 (x0 : int) (x1 : int) := @ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y0 : type1259 => forall y1 : type1670, forall y2 : int, forall y3 : int, (int_le (int_of_num (NUMERAL 0)) (y0 y1 (@pair int int y2 y3))) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y2) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y3) /\ (exists y4 : int, exists y5 : int, (y0 y1 (@pair int int y2 y3)) = (int_add (int_mul y2 y4) (int_mul y3 y5)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 x1).
Definition term2 := (fun y0 : type1670 => forall y1 : int, forall y2 : int, (int_le (int_of_num (NUMERAL 0)) (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y3 : type1259 => forall y4 : type1670, forall y5 : int, forall y6 : int, (int_le (int_of_num (NUMERAL 0)) (y3 y4 (@pair int int y5 y6))) /\ ((int_divides (y3 y4 (@pair int int y5 y6)) y5) /\ ((int_divides (y3 y4 (@pair int int y5 y6)) y6) /\ (exists y7 : int, exists y8 : int, (y3 y4 (@pair int int y5 y6)) = (int_add (int_mul y5 y7) (int_mul y6 y8)))))) y0 (@pair int int y1 y2))) /\ ((int_divides (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y3 : type1259 => forall y4 : type1670, forall y5 : int, forall y6 : int, (int_le (int_of_num (NUMERAL 0)) (y3 y4 (@pair int int y5 y6))) /\ ((int_divides (y3 y4 (@pair int int y5 y6)) y5) /\ ((int_divides (y3 y4 (@pair int int y5 y6)) y6) /\ (exists y7 : int, exists y8 : int, (y3 y4 (@pair int int y5 y6)) = (int_add (int_mul y5 y7) (int_mul y6 y8)))))) y0 (@pair int int y1 y2)) y1) /\ ((int_divides (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y3 : type1259 => forall y4 : type1670, forall y5 : int, forall y6 : int, (int_le (int_of_num (NUMERAL 0)) (y3 y4 (@pair int int y5 y6))) /\ ((int_divides (y3 y4 (@pair int int y5 y6)) y5) /\ ((int_divides (y3 y4 (@pair int int y5 y6)) y6) /\ (exists y7 : int, exists y8 : int, (y3 y4 (@pair int int y5 y6)) = (int_add (int_mul y5 y7) (int_mul y6 y8)))))) y0 (@pair int int y1 y2)) y2) /\ (exists y3 : int, exists y4 : int, (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y5 : type1259 => forall y6 : type1670, forall y7 : int, forall y8 : int, (int_le (int_of_num (NUMERAL 0)) (y5 y6 (@pair int int y7 y8))) /\ ((int_divides (y5 y6 (@pair int int y7 y8)) y7) /\ ((int_divides (y5 y6 (@pair int int y7 y8)) y8) /\ (exists y9 : int, exists y10 : int, (y5 y6 (@pair int int y7 y8)) = (int_add (int_mul y7 y9) (int_mul y8 y10)))))) y0 (@pair int int y1 y2)) = (int_add (int_mul y1 y3) (int_mul y2 y4)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))).
Definition term40 (x0 : int) := fun y0 : int => (int_le (int_of_num (NUMERAL 0)) (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y1 : type1259 => forall y2 : type1670, forall y3 : int, forall y4 : int, (int_le (int_of_num (NUMERAL 0)) (y1 y2 (@pair int int y3 y4))) /\ ((int_divides (y1 y2 (@pair int int y3 y4)) y3) /\ ((int_divides (y1 y2 (@pair int int y3 y4)) y4) /\ (exists y5 : int, exists y6 : int, (y1 y2 (@pair int int y3 y4)) = (int_add (int_mul y3 y5) (int_mul y4 y6)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 y0))) /\ ((int_divides (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y1 : type1259 => forall y2 : type1670, forall y3 : int, forall y4 : int, (int_le (int_of_num (NUMERAL 0)) (y1 y2 (@pair int int y3 y4))) /\ ((int_divides (y1 y2 (@pair int int y3 y4)) y3) /\ ((int_divides (y1 y2 (@pair int int y3 y4)) y4) /\ (exists y5 : int, exists y6 : int, (y1 y2 (@pair int int y3 y4)) = (int_add (int_mul y3 y5) (int_mul y4 y6)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 y0)) x0) /\ ((int_divides (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y1 : type1259 => forall y2 : type1670, forall y3 : int, forall y4 : int, (int_le (int_of_num (NUMERAL 0)) (y1 y2 (@pair int int y3 y4))) /\ ((int_divides (y1 y2 (@pair int int y3 y4)) y3) /\ ((int_divides (y1 y2 (@pair int int y3 y4)) y4) /\ (exists y5 : int, exists y6 : int, (y1 y2 (@pair int int y3 y4)) = (int_add (int_mul y3 y5) (int_mul y4 y6)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 y0)) y0) /\ (exists y1 : int, exists y2 : int, (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y3 : type1259 => forall y4 : type1670, forall y5 : int, forall y6 : int, (int_le (int_of_num (NUMERAL 0)) (y3 y4 (@pair int int y5 y6))) /\ ((int_divides (y3 y4 (@pair int int y5 y6)) y5) /\ ((int_divides (y3 y4 (@pair int int y5 y6)) y6) /\ (exists y7 : int, exists y8 : int, (y3 y4 (@pair int int y5 y6)) = (int_add (int_mul y5 y7) (int_mul y6 y8)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 y0)) = (int_add (int_mul x0 y1) (int_mul y0 y2))))).
Definition term26 (x0 : int) (x1 : int) (x2 : int) := fun y0 : int => (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y1 : type1259 => forall y2 : type1670, forall y3 : int, forall y4 : int, (int_le (int_of_num (NUMERAL 0)) (y1 y2 (@pair int int y3 y4))) /\ ((int_divides (y1 y2 (@pair int int y3 y4)) y3) /\ ((int_divides (y1 y2 (@pair int int y3 y4)) y4) /\ (exists y5 : int, exists y6 : int, (y1 y2 (@pair int int y3 y4)) = (int_add (int_mul y3 y5) (int_mul y4 y6)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 x2)) = (int_add (int_mul x0 x1) (int_mul x2 y0)).
Definition term13 (x0 : int) (x1 : int) := int_divides (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y0 : type1259 => forall y1 : type1670, forall y2 : int, forall y3 : int, (int_le (int_of_num (NUMERAL 0)) (y0 y1 (@pair int int y2 y3))) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y2) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y3) /\ (exists y4 : int, exists y5 : int, (y0 y1 (@pair int int y2 y3)) = (int_add (int_mul y2 y4) (int_mul y3 y5)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 x1)).
Definition term34 (x0 : int) (x1 : int) := (int_divides (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y0 : type1259 => forall y1 : type1670, forall y2 : int, forall y3 : int, (int_le (int_of_num (NUMERAL 0)) (y0 y1 (@pair int int y2 y3))) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y2) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y3) /\ (exists y4 : int, exists y5 : int, (y0 y1 (@pair int int y2 y3)) = (int_add (int_mul y2 y4) (int_mul y3 y5)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 x1)) x1) /\ (exists y0 : int, exists y1 : int, (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y2 : type1259 => forall y3 : type1670, forall y4 : int, forall y5 : int, (int_le (int_of_num (NUMERAL 0)) (y2 y3 (@pair int int y4 y5))) /\ ((int_divides (y2 y3 (@pair int int y4 y5)) y4) /\ ((int_divides (y2 y3 (@pair int int y4 y5)) y5) /\ (exists y6 : int, exists y7 : int, (y2 y3 (@pair int int y4 y5)) = (int_add (int_mul y4 y6) (int_mul y5 y7)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 x1)) = (int_add (int_mul x0 y0) (int_mul x1 y1))).
Definition term11 (x0 : int) (x1 : int) := and (int_le (int_of_num (NUMERAL 0)) (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y0 : type1259 => forall y1 : type1670, forall y2 : int, forall y3 : int, (int_le (int_of_num (NUMERAL 0)) (y0 y1 (@pair int int y2 y3))) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y2) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y3) /\ (exists y4 : int, exists y5 : int, (y0 y1 (@pair int int y2 y3)) = (int_add (int_mul y2 y4) (int_mul y3 y5)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 x1))).
Definition term33 (x0 : int) (x1 : int) := exists y0 : int, exists y1 : int, (int_gcd (@pair int int x0 x1)) = (int_add (int_mul x0 y0) (int_mul x1 y1)).
Definition term32 (x0 : int) (x1 : int) := exists y0 : int, exists y1 : int, (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y2 : type1259 => forall y3 : type1670, forall y4 : int, forall y5 : int, (int_le (int_of_num (NUMERAL 0)) (y2 y3 (@pair int int y4 y5))) /\ ((int_divides (y2 y3 (@pair int int y4 y5)) y4) /\ ((int_divides (y2 y3 (@pair int int y4 y5)) y5) /\ (exists y6 : int, exists y7 : int, (y2 y3 (@pair int int y4 y5)) = (int_add (int_mul y4 y6) (int_mul y5 y7)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 x1)) = (int_add (int_mul x0 y0) (int_mul x1 y1)).
Definition term7 (x0 : int) (x1 : int) := int_gcd (@pair int int x0 x1).
Definition term31 (x0 : int) (x1 : int) := fun y0 : int => exists y1 : int, (int_gcd (@pair int int x0 x1)) = (int_add (int_mul x0 y0) (int_mul x1 y1)).
Definition term30 (x0 : int) (x1 : int) := fun y0 : int => exists y1 : int, (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y2 : type1259 => forall y3 : type1670, forall y4 : int, forall y5 : int, (int_le (int_of_num (NUMERAL 0)) (y2 y3 (@pair int int y4 y5))) /\ ((int_divides (y2 y3 (@pair int int y4 y5)) y4) /\ ((int_divides (y2 y3 (@pair int int y4 y5)) y5) /\ (exists y6 : int, exists y7 : int, (y2 y3 (@pair int int y4 y5)) = (int_add (int_mul y4 y6) (int_mul y5 y7)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 x1)) = (int_add (int_mul x0 y0) (int_mul x1 y1)).
Definition term8 := int_le (int_of_num (NUMERAL 0)).
Definition term5 := @ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y0 : type1259 => forall y1 : type1670, forall y2 : int, forall y3 : int, (int_le (int_of_num (NUMERAL 0)) (y0 y1 (@pair int int y2 y3))) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y2) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y3) /\ (exists y4 : int, exists y5 : int, (y0 y1 (@pair int int y2 y3)) = (int_add (int_mul y2 y4) (int_mul y3 y5)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))).
Definition term23 (x0 : int) (x1 : int) := @eq int (@ε ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))) -> (prod int int) -> int) (fun y0 : type1259 => forall y1 : type1670, forall y2 : int, forall y3 : int, (int_le (int_of_num (NUMERAL 0)) (y0 y1 (@pair int int y2 y3))) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y2) /\ ((int_divides (y0 y1 (@pair int int y2 y3)) y3) /\ (exists y4 : int, exists y5 : int, (y0 y1 (@pair int int y2 y3)) = (int_add (int_mul y2 y4) (int_mul y3 y5)))))) (@pair nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat (prod nat nat)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat (prod nat nat))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 0)))))))) (@pair nat (prod nat (prod nat nat)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 0)))))))) (@pair nat (prod nat nat) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (@pair nat nat (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 0)))))))))))))) (@pair int int x0 x1)).
Definition term14 (x0 : int) (x1 : int) := int_divides (int_gcd (@pair int int x0 x1)).
