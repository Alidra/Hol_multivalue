require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_type_abbrevs;
require open hol-light.hol_terms;
symbol term0 a0 a1 ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (fun a0 bool) (fun a0 (fun (fun a0 (fun a0 a0)) (fun (fun a1 (fun a1 bool)) (fun (fun a1 bool) (fun (fun a1 a0) a0)))))))) (λ y0 : El (type1255 a0 a1), (∀ (λ y1 : El type1670, (∀ (λ y2 : El (fun a0 bool), (∀ (λ y3 : El a0, (∀ (λ y4 : El (type1400 a0), (∀ (λ y5 : El (type1402 a1), (∀ (λ y6 : El (fun a1 bool), (∀ (λ y7 : El (fun a1 a0), (= (y0 y1 y2 y3 y4 y5 y6 y7) ((@COND a0) (∧ ((@FINITE a1) ((@GSPEC a1) (λ y8 : El a1, (∃ (λ y9 : El a1, ((@SETSPEC a1) y8 (∧ ((@IN a1) y9 y6) ((@IN a0) (y7 y9) ((@DIFF a0) y2 ((@INSERT a0) y3 (@EMPTY a0))))) y9)))))) (¬ (= ((@GSPEC a1) (λ y8 : El a1, (∃ (λ y9 : El a1, ((@SETSPEC a1) y8 (∧ ((@IN a1) y9 y6) ((@IN a0) (y7 y9) ((@DIFF a0) y2 ((@INSERT a0) y3 (@EMPTY a0))))) y9))))) (@EMPTY a1)))) ((@LET a1 a0) (λ y8 : El a1, ((@LET_END a0) (y4 (y7 y8) (y0 y1 y2 y3 y4 y5 ((@GSPEC a1) (λ y9 : El a1, (∃ (λ y10 : El a1, ((@SETSPEC a1) y9 (∧ ((@IN a1) y10 ((@DELETE a1) y6 y8)) ((@IN a0) (y7 y10) ((@DIFF a0) y2 ((@INSERT a0) y3 (@EMPTY a0))))) y10))))) y7)))) ((@COND a1) (∃ (λ y8 : El a1, (∧ ((@IN a1) y8 y6) (∧ ((@IN a0) (y7 y8) ((@DIFF a0) y2 ((@INSERT a0) y3 (@EMPTY a0)))) (∀ (λ y9 : El a1, (⇒ (∧ (y5 y9 y8) (∧ ((@IN a1) y9 y6) ((@IN a0) (y7 y9) ((@DIFF a0) y2 ((@INSERT a0) y3 (@EMPTY a0)))))) (= y9 y8)))))))) ((@ε a1) (λ y8 : El a1, (∧ ((@IN a1) y8 y6) (∧ ((@IN a0) (y7 y8) ((@DIFF a0) y2 ((@INSERT a0) y3 (@EMPTY a0)))) (∀ (λ y9 : El a1, (⇒ (∧ (y5 y9 y8) (∧ ((@IN a1) y9 y6) ((@IN a0) (y7 y9) ((@DIFF a0) y2 ((@INSERT a0) y3 (@EMPTY a0)))))) (= y9 y8)))))))) ((@ε a1) (λ y8 : El a1, (∧ ((@IN a1) y8 y6) ((@IN a0) (y7 y8) ((@DIFF a0) y2 ((@INSERT a0) y3 (@EMPTY a0))))))))) y3))))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))))))))));
