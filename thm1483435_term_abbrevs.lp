require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_type_abbrevs;
require open hol-light.hol_terms;
symbol term0 (x0: El real) (x1: El real) (x2: El real) (x3: El real) (x4: El real) (x5: El real) (x6: El real) (x7: El real) (x8: El real) (x9: El num) (x10: El real) (x11: El real) (x12: El real) (x13: El num) ≔ (∧ (= (real_add (real_mul x6 x0) (real_mul x5 x0)) (real_mul (real_add x6 x5) x0)) (∧ (= (real_add (real_mul x6 x0) x0) (real_mul (real_add x6 (real_of_num (NUMERAL (BIT1 _0)))) x0)) (∧ (= (real_add x0 (real_mul x6 x0)) (real_mul (real_add x6 (real_of_num (NUMERAL (BIT1 _0)))) x0)) (∧ (= (real_add x0 x0) (real_mul (real_add (real_of_num (NUMERAL (BIT1 _0))) (real_of_num (NUMERAL (BIT1 _0)))) x0)) (∧ (= (real_mul (real_of_num (NUMERAL _0)) x0) (real_of_num (NUMERAL _0))) (∧ (= (real_add (real_of_num (NUMERAL _0)) x6) x6) (∧ (= (real_add x6 (real_of_num (NUMERAL _0))) x6) (∧ (= (real_mul x6 x5) (real_mul x5 x6)) (∧ (= (real_mul (real_add x6 x5) x7) (real_add (real_mul x6 x7) (real_mul x5 x7))) (∧ (= (real_mul (real_of_num (NUMERAL _0)) x6) (real_of_num (NUMERAL _0))) (∧ (= (real_mul x6 (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL _0))) (∧ (= (real_mul (real_of_num (NUMERAL (BIT1 _0))) x6) x6) (∧ (= (real_mul x6 (real_of_num (NUMERAL (BIT1 _0)))) x6) (∧ (= (real_mul (real_mul x3 x1) (real_mul x2 x4)) (real_mul (real_mul x3 x2) (real_mul x1 x4))) (∧ (= (real_mul (real_mul x3 x1) (real_mul x2 x4)) (real_mul x3 (real_mul x1 (real_mul x2 x4)))) (∧ (= (real_mul (real_mul x3 x1) (real_mul x2 x4)) (real_mul x2 (real_mul (real_mul x3 x1) x4))) (∧ (= (real_mul (real_mul x3 x1) x2) (real_mul (real_mul x3 x2) x1)) (∧ (= (real_mul (real_mul x3 x1) x2) (real_mul x3 (real_mul x1 x2))) (∧ (= (real_mul x3 x2) (real_mul x2 x3)) (∧ (= (real_mul x3 (real_mul x2 x4)) (real_mul (real_mul x3 x2) x4)) (∧ (= (real_mul x3 (real_mul x2 x4)) (real_mul x2 (real_mul x3 x4))) (∧ (= (real_add (real_add x6 x5) (real_add x7 x8)) (real_add (real_add x6 x7) (real_add x5 x8))) (∧ (= (real_add (real_add x6 x5) x7) (real_add x6 (real_add x5 x7))) (∧ (= (real_add x6 (real_add x7 x8)) (real_add x7 (real_add x6 x8))) (∧ (= (real_add (real_add x6 x5) x7) (real_add (real_add x6 x7) x5)) (∧ (= (real_add x6 x7) (real_add x7 x6)) (∧ (= (real_add x6 (real_add x7 x8)) (real_add (real_add x6 x7) x8)) (∧ (= (real_mul (real_pow x12 x9) (real_pow x12 x13)) (real_pow x12 (+ x9 x13))) (∧ (= (real_mul x12 (real_pow x12 x13)) (real_pow x12 (SUC x13))) (∧ (= (real_mul (real_pow x12 x13) x12) (real_pow x12 (SUC x13))) (∧ (= (real_mul x12 x12) (real_pow x12 (NUMERAL (BIT0 (BIT1 _0))))) (∧ (= (real_pow (real_mul x12 x10) x13) (real_mul (real_pow x12 x13) (real_pow x10 x13))) (∧ (= (real_pow (real_pow x12 x9) x13) (real_pow x12 (* x9 x13))) (∧ (= (real_pow x12 (NUMERAL _0)) (real_of_num (NUMERAL (BIT1 _0)))) (∧ (= (real_pow x12 (NUMERAL (BIT1 _0))) x12) (∧ (= (real_mul x12 (real_add x10 x11)) (real_add (real_mul x12 x10) (real_mul x12 x11))) (= (real_pow x12 (SUC x13)) (real_mul x12 (real_pow x12 x13)))))))))))))))))))))))))))))))))))))));
