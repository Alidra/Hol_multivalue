Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_terms.
Require Import hol_axioms.
Require Import hol_type_abbrevs.
Require Import ADMISSIBLE_CONST_term_abbrevs.
Require Import admissible_spec.
Require Import thm0_spec.
Require Import thm1809_spec.
Require Import thm1810_spec.
Require Import thm1815_spec.
Require Import thm1816_spec.
Require Import thm1821_spec.
Require Import thm1862_spec.
Require Import thm1863_spec.
Lemma lem8099924 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) : term0 _143449 _143452 _143456 _143457 _143462 p.
Proof. exact (@lem8093231 _143449 _143452 _143456 _143457 _143462 p). Qed.
Lemma lem8099925 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) : (term0 _143449 _143452 _143456 _143457 _143462 p) = (term1 _143449 _143452 _143456 _143457 _143462 p).
Proof. exact (eq_refl (term0 _143449 _143452 _143456 _143457 _143462 p)). Qed.
Lemma lem8099926 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) : term1 _143449 _143452 _143456 _143457 _143462 p.
Proof. exact (EQ_MP (@lem8099925 _143449 _143452 _143456 _143457 _143462 p) (@lem8099924 _143449 _143452 _143456 _143457 _143462 p)). Qed.
Lemma lem8099927 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) : term2 _143449 _143452 _143456 _143457 _143462 p lt2.
Proof. exact (@lem8099926 _143449 _143452 _143456 _143457 _143462 p lt2). Qed.
Lemma lem8099928 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) : (term2 _143449 _143452 _143456 _143457 _143462 p lt2) = (term3 _143449 _143452 _143456 _143457 _143462 p lt2).
Proof. exact (eq_refl (term2 _143449 _143452 _143456 _143457 _143462 p lt2)). Qed.
Lemma lem8099929 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) : term3 _143449 _143452 _143456 _143457 _143462 p lt2.
Proof. exact (EQ_MP (@lem8099928 _143449 _143452 _143456 _143457 _143462 p lt2) (@lem8099927 _143449 _143452 _143456 _143457 _143462 p lt2)). Qed.
Lemma lem8099930 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) (s : _143462 -> _143449) : term4 _143449 _143452 _143456 _143457 _143462 p lt2 s.
Proof. exact (@lem8099929 _143449 _143452 _143456 _143457 _143462 p lt2 s). Qed.
Lemma lem8099931 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) (s : _143462 -> _143449) : (term4 _143449 _143452 _143456 _143457 _143462 p lt2 s) = (term5 _143449 _143452 _143456 _143457 _143462 p lt2 s).
Proof. exact (eq_refl (term4 _143449 _143452 _143456 _143457 _143462 p lt2 s)). Qed.
Lemma lem8099932 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) (s : _143462 -> _143449) : term5 _143449 _143452 _143456 _143457 _143462 p lt2 s.
Proof. exact (EQ_MP (@lem8099931 _143449 _143452 _143456 _143457 _143462 p lt2 s) (@lem8099930 _143449 _143452 _143456 _143457 _143462 p lt2 s)). Qed.
Lemma lem8099933 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) (s : _143462 -> _143449) (t : type801 _143452 _143456 _143457 _143462) : term6 _143449 _143452 _143456 _143457 _143462 p lt2 s t.
Proof. exact (@lem8099932 _143449 _143452 _143456 _143457 _143462 p lt2 s t). Qed.
Lemma lem8099934 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) (s : _143462 -> _143449) (t : type801 _143452 _143456 _143457 _143462) : (term6 _143449 _143452 _143456 _143457 _143462 p lt2 s t) = ((@admissible _143449 _143452 _143456 _143457 _143462 lt2 p s t) = (term7 _143449 _143452 _143456 _143457 _143462 p lt2 s t)).
Proof. exact (eq_refl (term6 _143449 _143452 _143456 _143457 _143462 p lt2 s t)). Qed.
Lemma lem8099949 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) (s : _143462 -> _143449) (t : type801 _143452 _143456 _143457 _143462) : (@admissible _143449 _143452 _143456 _143457 _143462 lt2 p s t) = (term7 _143449 _143452 _143456 _143457 _143462 p lt2 s t).
Proof. exact (EQ_MP (@lem8099934 _143449 _143452 _143456 _143457 _143462 p lt2 s t) (@lem8099933 _143449 _143452 _143456 _143457 _143462 p lt2 s t)). Qed.
Lemma lem8099950 {_143669 _143670 _143671 _143672 _143673 : Type'} (p : type560 _143670 _143671 _143672) (lt2 : type1470 _143669 _143670) (s : _143672 -> _143669) (t : type559 _143670 _143671 _143672 _143673) : (@admissible _143669 _143671 _143670 _143673 _143672 lt2 p s t) = (term8 _143669 _143670 _143671 _143672 _143673 p lt2 s t).
Proof. exact (@lem8099949 _143669 _143671 _143670 _143673 _143672 p lt2 s t). Qed.
Lemma lem8099951 {_143669 _143670 _143671 _143672 _143673 : Type'} (p : type560 _143670 _143671 _143672) (lt2 : type1470 _143669 _143670) (s : _143672 -> _143669) (c : _143672 -> _143673) : (term9 _143669 _143670 _143671 _143672 _143673 lt2 p s c) = (term10 _143669 _143670 _143671 _143672 _143673 p lt2 s c).
Proof. exact (@lem8099950 _143669 _143670 _143671 _143672 _143673 p lt2 s (term11 _143670 _143671 _143672 _143673 c)). Qed.
Lemma lem8099981 {A B : Type'} (f : A -> B) (y : A) : (term12 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8099982 {_143670 _143671 _143672 _143673 : Type'} (f : type559 _143670 _143671 _143672 _143673) (y : _143670 -> _143671) : (term13 _143670 _143671 _143672 _143673 f y) = (f y).
Proof. exact (@lem8099981 (_143670 -> _143671) (_143672 -> _143673) f y). Qed.
Lemma lem8099983 {_143670 _143671 _143672 _143673 : Type'} (c : _143672 -> _143673) (f : _143670 -> _143671) : (term14 _143670 _143671 _143672 _143673 c f) = (term15 _143670 _143671 _143672 _143673 c f).
Proof. exact (@lem8099982 _143670 _143671 _143672 _143673 (term11 _143670 _143671 _143672 _143673 c) f). Qed.
Lemma lem8099984 {_143670 _143671 _143672 _143673 : Type'} (f : _143670 -> _143671) (c : _143672 -> _143673) : (term15 _143670 _143671 _143672 _143673 c f) = c.
Proof. exact (eq_refl (term15 _143670 _143671 _143672 _143673 c f)). Qed.
Lemma lem8099985 {_143670 _143671 _143672 _143673 : Type'} (c : _143672 -> _143673) : (term16 _143670 _143671 _143672 _143673 c) = (term11 _143670 _143671 _143672 _143673 c).
Proof. exact (fun_ext (fun f : _143670 -> _143671 => @lem8099984 _143670 _143671 _143672 _143673 f c)). Qed.
Lemma lem8099986 {_143670 _143671 : Type'} (f : _143670 -> _143671) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8099987 {_143670 _143671 _143672 _143673 : Type'} (c : _143672 -> _143673) (f : _143670 -> _143671) : (term14 _143670 _143671 _143672 _143673 c f) = (term15 _143670 _143671 _143672 _143673 c f).
Proof. exact (MK_COMB (@lem8099985 _143670 _143671 _143672 _143673 c) (@lem8099986 _143670 _143671 f)). Qed.
Lemma lem8099988 {_143672 _143673 : Type'} : (@eq (_143672 -> _143673)) = (@eq (_143672 -> _143673)).
Proof. exact (eq_refl (@eq (_143672 -> _143673))). Qed.
Lemma lem8099989 {_143670 _143671 _143672 _143673 : Type'} (c : _143672 -> _143673) (f : _143670 -> _143671) : (term17 _143670 _143671 _143672 _143673 c f) = (term18 _143670 _143671 _143672 _143673 c f).
Proof. exact (MK_COMB (@lem8099988 _143672 _143673) (@lem8099987 _143670 _143671 _143672 _143673 c f)). Qed.
Lemma lem8099990 {_143670 _143671 _143672 _143673 : Type'} (f : _143670 -> _143671) (c : _143672 -> _143673) : (term15 _143670 _143671 _143672 _143673 c f) = c.
Proof. exact (eq_refl (term15 _143670 _143671 _143672 _143673 c f)). Qed.
Lemma lem8099991 {_143670 _143671 _143672 _143673 : Type'} (f : _143670 -> _143671) (c : _143672 -> _143673) : ((term14 _143670 _143671 _143672 _143673 c f) = (term15 _143670 _143671 _143672 _143673 c f)) = ((term15 _143670 _143671 _143672 _143673 c f) = c).
Proof. exact (MK_COMB (@lem8099989 _143670 _143671 _143672 _143673 c f) (@lem8099990 _143670 _143671 _143672 _143673 f c)). Qed.
Lemma lem8099992 {_143670 _143671 _143672 _143673 : Type'} (f : _143670 -> _143671) (c : _143672 -> _143673) : (term15 _143670 _143671 _143672 _143673 c f) = c.
Proof. exact (EQ_MP (@lem8099991 _143670 _143671 _143672 _143673 f c) (@lem8099983 _143670 _143671 _143672 _143673 c f)). Qed.
Lemma lem8099993 {_143672 : Type'} (a : _143672) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8099994 {_143670 _143671 _143672 _143673 : Type'} (f : _143670 -> _143671) (c : _143672 -> _143673) (a : _143672) : (term19 _143670 _143671 _143672 _143673 c f a) = (c a).
Proof. exact (MK_COMB (@lem8099992 _143670 _143671 _143672 _143673 f c) (@lem8099993 _143672 a)). Qed.
Lemma lem8099995 {_143673 : Type'} : (@eq _143673) = (@eq _143673).
Proof. exact (eq_refl (@eq _143673)). Qed.
Lemma lem8099996 {_143670 _143671 _143672 _143673 : Type'} (f : _143670 -> _143671) (c : _143672 -> _143673) (a : _143672) : (term20 _143670 _143671 _143672 _143673 c f a) = (term21 _143672 _143673 c a).
Proof. exact (MK_COMB (@lem8099995 _143673) (@lem8099994 _143670 _143671 _143672 _143673 f c a)). Qed.
Lemma lem8099998 {A B : Type'} (f : A -> B) (y : A) : (term12 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8099999 {_143670 _143671 _143672 _143673 : Type'} (f : type559 _143670 _143671 _143672 _143673) (y : _143670 -> _143671) : (term13 _143670 _143671 _143672 _143673 f y) = (f y).
Proof. exact (@lem8099998 (_143670 -> _143671) (_143672 -> _143673) f y). Qed.
Lemma lem8100000 {_143670 _143671 _143672 _143673 : Type'} (c : _143672 -> _143673) (g : _143670 -> _143671) : (term14 _143670 _143671 _143672 _143673 c g) = (term15 _143670 _143671 _143672 _143673 c g).
Proof. exact (@lem8099999 _143670 _143671 _143672 _143673 (term11 _143670 _143671 _143672 _143673 c) g). Qed.
Lemma lem8100001 {_143670 _143671 _143672 _143673 : Type'} (f : _143670 -> _143671) (c : _143672 -> _143673) : (term15 _143670 _143671 _143672 _143673 c f) = c.
Proof. exact (eq_refl (term15 _143670 _143671 _143672 _143673 c f)). Qed.
Lemma lem8100002 {_143670 _143671 _143672 _143673 : Type'} (c : _143672 -> _143673) : (term16 _143670 _143671 _143672 _143673 c) = (term11 _143670 _143671 _143672 _143673 c).
Proof. exact (fun_ext (fun f : _143670 -> _143671 => @lem8100001 _143670 _143671 _143672 _143673 f c)). Qed.
Lemma lem8100003 {_143670 _143671 : Type'} (g : _143670 -> _143671) : g = g.
Proof. exact (eq_refl g). Qed.
Lemma lem8100004 {_143670 _143671 _143672 _143673 : Type'} (c : _143672 -> _143673) (g : _143670 -> _143671) : (term14 _143670 _143671 _143672 _143673 c g) = (term15 _143670 _143671 _143672 _143673 c g).
Proof. exact (MK_COMB (@lem8100002 _143670 _143671 _143672 _143673 c) (@lem8100003 _143670 _143671 g)). Qed.
Lemma lem8100005 {_143672 _143673 : Type'} : (@eq (_143672 -> _143673)) = (@eq (_143672 -> _143673)).
Proof. exact (eq_refl (@eq (_143672 -> _143673))). Qed.
Lemma lem8100006 {_143670 _143671 _143672 _143673 : Type'} (c : _143672 -> _143673) (g : _143670 -> _143671) : (term17 _143670 _143671 _143672 _143673 c g) = (term18 _143670 _143671 _143672 _143673 c g).
Proof. exact (MK_COMB (@lem8100005 _143672 _143673) (@lem8100004 _143670 _143671 _143672 _143673 c g)). Qed.
Lemma lem8100007 {_143670 _143671 _143672 _143673 : Type'} (g : _143670 -> _143671) (c : _143672 -> _143673) : (term15 _143670 _143671 _143672 _143673 c g) = c.
Proof. exact (eq_refl (term15 _143670 _143671 _143672 _143673 c g)). Qed.
Lemma lem8100008 {_143670 _143671 _143672 _143673 : Type'} (g : _143670 -> _143671) (c : _143672 -> _143673) : ((term14 _143670 _143671 _143672 _143673 c g) = (term15 _143670 _143671 _143672 _143673 c g)) = ((term15 _143670 _143671 _143672 _143673 c g) = c).
Proof. exact (MK_COMB (@lem8100006 _143670 _143671 _143672 _143673 c g) (@lem8100007 _143670 _143671 _143672 _143673 g c)). Qed.
Lemma lem8100009 {_143670 _143671 _143672 _143673 : Type'} (g : _143670 -> _143671) (c : _143672 -> _143673) : (term15 _143670 _143671 _143672 _143673 c g) = c.
Proof. exact (EQ_MP (@lem8100008 _143670 _143671 _143672 _143673 g c) (@lem8100000 _143670 _143671 _143672 _143673 c g)). Qed.
Lemma lem8100010 {_143672 : Type'} (a : _143672) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8100011 {_143670 _143671 _143672 _143673 : Type'} (g : _143670 -> _143671) (c : _143672 -> _143673) (a : _143672) : (term19 _143670 _143671 _143672 _143673 c g a) = (c a).
Proof. exact (MK_COMB (@lem8100009 _143670 _143671 _143672 _143673 g c) (@lem8100010 _143672 a)). Qed.
Lemma lem8100012 {_143670 _143671 _143672 _143673 : Type'} (f : _143670 -> _143671) (g : _143670 -> _143671) (c : _143672 -> _143673) (a : _143672) : ((term19 _143670 _143671 _143672 _143673 c f a) = (term19 _143670 _143671 _143672 _143673 c g a)) = ((c a) = (c a)).
Proof. exact (MK_COMB (@lem8099996 _143670 _143671 _143672 _143673 f c a) (@lem8100011 _143670 _143671 _143672 _143673 g c a)). Qed.
Lemma lem8100014 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem1863 A x) (@lem1862 A x)). Qed.
Lemma lem8100015 {_143673 : Type'} (x : _143673) : (x = x) = True.
Proof. exact (@lem8100014 _143673 x). Qed.
Lemma lem8100016 {_143672 _143673 : Type'} (c : _143672 -> _143673) (a : _143672) : ((c a) = (c a)) = True.
Proof. exact (@lem8100015 _143673 (c a)). Qed.
Lemma lem8100017 {_143670 _143671 _143672 _143673 : Type'} (f : _143670 -> _143671) (c : _143672 -> _143673) (g : _143670 -> _143671) (a : _143672) : ((term19 _143670 _143671 _143672 _143673 c f a) = (term19 _143670 _143671 _143672 _143673 c g a)) = True.
Proof. exact (TRANS (@lem8100012 _143670 _143671 _143672 _143673 f g c a) (@lem8100016 _143672 _143673 c a)). Qed.
Lemma lem8100018 {_143669 _143670 _143671 _143672 : Type'} (p : type560 _143670 _143671 _143672) (lt2 : type1470 _143669 _143670) (s : _143672 -> _143669) (a : _143672) (f : _143670 -> _143671) (g : _143670 -> _143671) : (term22 _143669 _143670 _143671 _143672 p lt2 s a f g) = (term22 _143669 _143670 _143671 _143672 p lt2 s a f g).
Proof. exact (eq_refl (term22 _143669 _143670 _143671 _143672 p lt2 s a f g)). Qed.
Lemma lem8100019 {_143669 _143670 _143671 _143672 _143673 : Type'} (c : _143672 -> _143673) (p : type560 _143670 _143671 _143672) (lt2 : type1470 _143669 _143670) (s : _143672 -> _143669) (a : _143672) (f : _143670 -> _143671) (g : _143670 -> _143671) : (term23 _143669 _143670 _143671 _143672 _143673 p lt2 s f c g a) = (term24 _143669 _143670 _143671 _143672 p lt2 s a f g).
Proof. exact (MK_COMB (@lem8100018 _143669 _143670 _143671 _143672 p lt2 s a f g) (@lem8100017 _143670 _143671 _143672 _143673 f c g a)). Qed.
Lemma lem8100021 (t : Prop) : (t -> True) = True.
Proof. exact (proj1 (@lem1821 t)). Qed.
Lemma lem8100022 {_143669 _143670 _143671 _143672 : Type'} (p : type560 _143670 _143671 _143672) (lt2 : type1470 _143669 _143670) (s : _143672 -> _143669) (a : _143672) (f : _143670 -> _143671) (g : _143670 -> _143671) : (term24 _143669 _143670 _143671 _143672 p lt2 s a f g) = True.
Proof. exact (@lem8100021 (term25 _143669 _143670 _143671 _143672 p lt2 s a f g)). Qed.
Lemma lem8100023 {_143669 _143670 _143671 _143672 _143673 : Type'} (p : type560 _143670 _143671 _143672) (lt2 : type1470 _143669 _143670) (s : _143672 -> _143669) (f : _143670 -> _143671) (c : _143672 -> _143673) (g : _143670 -> _143671) (a : _143672) : (term23 _143669 _143670 _143671 _143672 _143673 p lt2 s f c g a) = True.
Proof. exact (TRANS (@lem8100019 _143669 _143670 _143671 _143672 _143673 c p lt2 s a f g) (@lem8100022 _143669 _143670 _143671 _143672 p lt2 s a f g)). Qed.
Lemma lem8100024 {_143669 _143670 _143671 _143672 _143673 : Type'} (p : type560 _143670 _143671 _143672) (lt2 : type1470 _143669 _143670) (s : _143672 -> _143669) (f : _143670 -> _143671) (c : _143672 -> _143673) (g : _143670 -> _143671) : (term26 _143669 _143670 _143671 _143672 _143673 p lt2 s f c g) = (term27 _143672).
Proof. exact (fun_ext (fun a : _143672 => @lem8100023 _143669 _143670 _143671 _143672 _143673 p lt2 s f c g a)). Qed.
Lemma lem8100025 {_143672 : Type'} : (@all _143672) = (@all _143672).
Proof. exact (eq_refl (@all _143672)). Qed.
Lemma lem8100026 {_143669 _143670 _143671 _143672 _143673 : Type'} (p : type560 _143670 _143671 _143672) (lt2 : type1470 _143669 _143670) (s : _143672 -> _143669) (f : _143670 -> _143671) (c : _143672 -> _143673) (g : _143670 -> _143671) : (term28 _143669 _143670 _143671 _143672 _143673 p lt2 s f c g) = (term29 _143672).
Proof. exact (MK_COMB (@lem8100025 _143672) (@lem8100024 _143669 _143670 _143671 _143672 _143673 p lt2 s f c g)). Qed.
Lemma lem8100028 {A : Type'} (t : Prop) : (term30 A t) = t.
Proof. exact (EQ_MP (@lem1816 A t) (@lem1815 A t)). Qed.
Lemma lem8100029 {_143672 : Type'} (t : Prop) : (term30 _143672 t) = t.
Proof. exact (@lem8100028 _143672 t). Qed.
Lemma lem8100030 {_143672 : Type'} : (term29 _143672) = True.
Proof. exact (@lem8100029 _143672 True). Qed.
Lemma lem8100031 {_143669 _143670 _143671 _143672 _143673 : Type'} (p : type560 _143670 _143671 _143672) (lt2 : type1470 _143669 _143670) (s : _143672 -> _143669) (f : _143670 -> _143671) (c : _143672 -> _143673) (g : _143670 -> _143671) : (term28 _143669 _143670 _143671 _143672 _143673 p lt2 s f c g) = True.
Proof. exact (TRANS (@lem8100026 _143669 _143670 _143671 _143672 _143673 p lt2 s f c g) (@lem8100030 _143672)). Qed.
Lemma lem8100032 {_143669 _143670 _143671 _143672 _143673 : Type'} (p : type560 _143670 _143671 _143672) (lt2 : type1470 _143669 _143670) (s : _143672 -> _143669) (f : _143670 -> _143671) (c : _143672 -> _143673) : (term31 _143669 _143670 _143671 _143672 _143673 p lt2 s f c) = (term32 _143670 _143671).
Proof. exact (fun_ext (fun g : _143670 -> _143671 => @lem8100031 _143669 _143670 _143671 _143672 _143673 p lt2 s f c g)). Qed.
Lemma lem8100033 {_143670 _143671 : Type'} : (@all (_143670 -> _143671)) = (@all (_143670 -> _143671)).
Proof. exact (eq_refl (@all (_143670 -> _143671))). Qed.
Lemma lem8100034 {_143669 _143670 _143671 _143672 _143673 : Type'} (p : type560 _143670 _143671 _143672) (lt2 : type1470 _143669 _143670) (s : _143672 -> _143669) (f : _143670 -> _143671) (c : _143672 -> _143673) : (term33 _143669 _143670 _143671 _143672 _143673 p lt2 s f c) = (term34 _143670 _143671).
Proof. exact (MK_COMB (@lem8100033 _143670 _143671) (@lem8100032 _143669 _143670 _143671 _143672 _143673 p lt2 s f c)). Qed.
Lemma lem8100036 {A : Type'} (t : Prop) : (term30 A t) = t.
Proof. exact (EQ_MP (@lem1816 A t) (@lem1815 A t)). Qed.
Lemma lem8100037 {_143670 _143671 : Type'} (t : Prop) : (term35 _143670 _143671 t) = t.
Proof. exact (@lem8100036 (_143670 -> _143671) t). Qed.
Lemma lem8100038 {_143670 _143671 : Type'} : (term34 _143670 _143671) = True.
Proof. exact (@lem8100037 _143670 _143671 True). Qed.
Lemma lem8100039 {_143669 _143670 _143671 _143672 _143673 : Type'} (p : type560 _143670 _143671 _143672) (lt2 : type1470 _143669 _143670) (s : _143672 -> _143669) (f : _143670 -> _143671) (c : _143672 -> _143673) : (term33 _143669 _143670 _143671 _143672 _143673 p lt2 s f c) = True.
Proof. exact (TRANS (@lem8100034 _143669 _143670 _143671 _143672 _143673 p lt2 s f c) (@lem8100038 _143670 _143671)). Qed.
Lemma lem8100040 {_143669 _143670 _143671 _143672 _143673 : Type'} (p : type560 _143670 _143671 _143672) (lt2 : type1470 _143669 _143670) (s : _143672 -> _143669) (c : _143672 -> _143673) : (term36 _143669 _143670 _143671 _143672 _143673 p lt2 s c) = (term32 _143670 _143671).
Proof. exact (fun_ext (fun f : _143670 -> _143671 => @lem8100039 _143669 _143670 _143671 _143672 _143673 p lt2 s f c)). Qed.
Lemma lem8100041 {_143670 _143671 : Type'} : (@all (_143670 -> _143671)) = (@all (_143670 -> _143671)).
Proof. exact (eq_refl (@all (_143670 -> _143671))). Qed.
Lemma lem8100042 {_143669 _143670 _143671 _143672 _143673 : Type'} (p : type560 _143670 _143671 _143672) (lt2 : type1470 _143669 _143670) (s : _143672 -> _143669) (c : _143672 -> _143673) : (term10 _143669 _143670 _143671 _143672 _143673 p lt2 s c) = (term34 _143670 _143671).
Proof. exact (MK_COMB (@lem8100041 _143670 _143671) (@lem8100040 _143669 _143670 _143671 _143672 _143673 p lt2 s c)). Qed.
Lemma lem8100044 {A : Type'} (t : Prop) : (term30 A t) = t.
Proof. exact (EQ_MP (@lem1816 A t) (@lem1815 A t)). Qed.
Lemma lem8100045 {_143670 _143671 : Type'} (t : Prop) : (term35 _143670 _143671 t) = t.
Proof. exact (@lem8100044 (_143670 -> _143671) t). Qed.
Lemma lem8100046 {_143670 _143671 : Type'} : (term34 _143670 _143671) = True.
Proof. exact (@lem8100045 _143670 _143671 True). Qed.
Lemma lem8100047 {_143669 _143670 _143671 _143672 _143673 : Type'} (p : type560 _143670 _143671 _143672) (lt2 : type1470 _143669 _143670) (s : _143672 -> _143669) (c : _143672 -> _143673) : (term10 _143669 _143670 _143671 _143672 _143673 p lt2 s c) = True.
Proof. exact (TRANS (@lem8100042 _143669 _143670 _143671 _143672 _143673 p lt2 s c) (@lem8100046 _143670 _143671)). Qed.
Lemma lem8100048 {_143669 _143670 _143671 _143672 _143673 : Type'} (lt2 : type1470 _143669 _143670) (p : type560 _143670 _143671 _143672) (s : _143672 -> _143669) (c : _143672 -> _143673) : (term9 _143669 _143670 _143671 _143672 _143673 lt2 p s c) = True.
Proof. exact (TRANS (@lem8099951 _143669 _143670 _143671 _143672 _143673 p lt2 s c) (@lem8100047 _143669 _143670 _143671 _143672 _143673 p lt2 s c)). Qed.
Lemma lem8100049 {_143669 _143670 _143671 _143672 _143673 : Type'} (lt2 : type1470 _143669 _143670) (p : type560 _143670 _143671 _143672) (s : _143672 -> _143669) : (term37 _143669 _143670 _143671 _143672 _143673 lt2 p s) = (term32 _143672 _143673).
Proof. exact (fun_ext (fun c : _143672 -> _143673 => @lem8100048 _143669 _143670 _143671 _143672 _143673 lt2 p s c)). Qed.
Lemma lem8100050 {_143672 _143673 : Type'} : (@all (_143672 -> _143673)) = (@all (_143672 -> _143673)).
Proof. exact (eq_refl (@all (_143672 -> _143673))). Qed.
Lemma lem8100051 {_143669 _143670 _143671 _143672 _143673 : Type'} (lt2 : type1470 _143669 _143670) (p : type560 _143670 _143671 _143672) (s : _143672 -> _143669) : (term38 _143669 _143670 _143671 _143672 _143673 lt2 p s) = (term34 _143672 _143673).
Proof. exact (MK_COMB (@lem8100050 _143672 _143673) (@lem8100049 _143669 _143670 _143671 _143672 _143673 lt2 p s)). Qed.
Lemma lem8100053 {A : Type'} (t : Prop) : (term30 A t) = t.
Proof. exact (EQ_MP (@lem1816 A t) (@lem1815 A t)). Qed.
Lemma lem8100054 {_143672 _143673 : Type'} (t : Prop) : (term35 _143672 _143673 t) = t.
Proof. exact (@lem8100053 (_143672 -> _143673) t). Qed.
Lemma lem8100055 {_143672 _143673 : Type'} : (term34 _143672 _143673) = True.
Proof. exact (@lem8100054 _143672 _143673 True). Qed.
Lemma lem8100056 {_143669 _143670 _143671 _143672 _143673 : Type'} (lt2 : type1470 _143669 _143670) (p : type560 _143670 _143671 _143672) (s : _143672 -> _143669) : (term38 _143669 _143670 _143671 _143672 _143673 lt2 p s) = True.
Proof. exact (TRANS (@lem8100051 _143669 _143670 _143671 _143672 _143673 lt2 p s) (@lem8100055 _143672 _143673)). Qed.
Lemma lem8100057 {_143669 _143670 _143671 _143672 _143673 : Type'} (lt2 : type1470 _143669 _143670) (p : type560 _143670 _143671 _143672) : (term39 _143669 _143670 _143671 _143672 _143673 lt2 p) = (term40 _143669 _143672).
Proof. exact (fun_ext (fun s : _143672 -> _143669 => @lem8100056 _143669 _143670 _143671 _143672 _143673 lt2 p s)). Qed.
Lemma lem8100058 {_143669 _143672 : Type'} : (@all (_143672 -> _143669)) = (@all (_143672 -> _143669)).
Proof. exact (eq_refl (@all (_143672 -> _143669))). Qed.
Lemma lem8100059 {_143669 _143670 _143671 _143672 _143673 : Type'} (lt2 : type1470 _143669 _143670) (p : type560 _143670 _143671 _143672) : (term41 _143669 _143670 _143671 _143672 _143673 lt2 p) = (term42 _143669 _143672).
Proof. exact (MK_COMB (@lem8100058 _143669 _143672) (@lem8100057 _143669 _143670 _143671 _143672 _143673 lt2 p)). Qed.
Lemma lem8100061 {A : Type'} (t : Prop) : (term30 A t) = t.
Proof. exact (EQ_MP (@lem1816 A t) (@lem1815 A t)). Qed.
Lemma lem8100062 {_143669 _143672 : Type'} (t : Prop) : (term43 _143669 _143672 t) = t.
Proof. exact (@lem8100061 (_143672 -> _143669) t). Qed.
Lemma lem8100063 {_143669 _143672 : Type'} : (term42 _143669 _143672) = True.
Proof. exact (@lem8100062 _143669 _143672 True). Qed.
Lemma lem8100064 {_143669 _143670 _143671 _143672 _143673 : Type'} (lt2 : type1470 _143669 _143670) (p : type560 _143670 _143671 _143672) : (term41 _143669 _143670 _143671 _143672 _143673 lt2 p) = True.
Proof. exact (TRANS (@lem8100059 _143669 _143670 _143671 _143672 _143673 lt2 p) (@lem8100063 _143669 _143672)). Qed.
Lemma lem8100065 {_143669 _143670 _143671 _143672 _143673 : Type'} (lt2 : type1470 _143669 _143670) : (term44 _143669 _143670 _143671 _143672 _143673 lt2) = (term45 _143670 _143671 _143672).
Proof. exact (fun_ext (fun p : type560 _143670 _143671 _143672 => @lem8100064 _143669 _143670 _143671 _143672 _143673 lt2 p)). Qed.
Lemma lem8100066 {_143670 _143671 _143672 : Type'} : (@all ((_143670 -> _143671) -> _143672 -> Prop)) = (@all ((_143670 -> _143671) -> _143672 -> Prop)).
Proof. exact (eq_refl (@all ((_143670 -> _143671) -> _143672 -> Prop))). Qed.
Lemma lem8100067 {_143669 _143670 _143671 _143672 _143673 : Type'} (lt2 : type1470 _143669 _143670) : (term46 _143669 _143670 _143671 _143672 _143673 lt2) = (term47 _143670 _143671 _143672).
Proof. exact (MK_COMB (@lem8100066 _143670 _143671 _143672) (@lem8100065 _143669 _143670 _143671 _143672 _143673 lt2)). Qed.
Lemma lem8100069 {A : Type'} (t : Prop) : (term30 A t) = t.
Proof. exact (EQ_MP (@lem1816 A t) (@lem1815 A t)). Qed.
Lemma lem8100070 {_143670 _143671 _143672 : Type'} (t : Prop) : (term48 _143670 _143671 _143672 t) = t.
Proof. exact (@lem8100069 (type560 _143670 _143671 _143672) t). Qed.
Lemma lem8100071 {_143670 _143671 _143672 : Type'} : (term47 _143670 _143671 _143672) = True.
Proof. exact (@lem8100070 _143670 _143671 _143672 True). Qed.
Lemma lem8100072 {_143669 _143670 _143671 _143672 _143673 : Type'} (lt2 : type1470 _143669 _143670) : (term46 _143669 _143670 _143671 _143672 _143673 lt2) = True.
Proof. exact (TRANS (@lem8100067 _143669 _143670 _143671 _143672 _143673 lt2) (@lem8100071 _143670 _143671 _143672)). Qed.
Lemma lem8100073 {_143669 _143670 _143671 _143672 _143673 : Type'} (lt2 : type1470 _143669 _143670) : True = (term46 _143669 _143670 _143671 _143672 _143673 lt2).
Proof. exact (SYM (@lem8100072 _143669 _143670 _143671 _143672 _143673 lt2)). Qed.
Lemma lem8100074 {_143669 _143670 _143671 _143672 _143673 : Type'} (lt2 : type1470 _143669 _143670) : term46 _143669 _143670 _143671 _143672 _143673 lt2.
Proof. exact (EQ_MP (@lem8100073 _143669 _143670 _143671 _143672 _143673 lt2) (@lem0)). Qed.
