require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_terms;
symbol lem1110612 [A] : Prf (= (@PAIRWISE A) ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun (fun A (fun A bool)) (fun (list A) bool)))) (λ PAIRWISE' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun (fun A (fun A bool)) (fun (list A) bool))), (∀ (λ _18057 : El (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))), (∧ (∀ (λ r : El (fun A (fun A bool)), (= (PAIRWISE' _18057 r (@NIL A)) T))) (∀ (λ h : El A, (∀ (λ r : El (fun A (fun A bool)), (∀ (λ t : El (list A), (= (PAIRWISE' _18057 r ((@CONS A) h t)) (∧ ((@ALL A) (r h) t) (PAIRWISE' _18057 r t))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))))))))))));
