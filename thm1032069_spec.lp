require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_terms;
symbol lem1032069 (ly : El num) (rx : El num) (lx : El num) (ry : El num) (b : El num) (a : El num) (c : El num) (d : El num) (p : El num) (y : El num) (z : El num) (x : El num) (q : El num) : Prf (∧ (= (* a (NUMERAL (BIT1 _0))) a) (∧ (= (* (* lx ly) (* rx ry)) (* (* lx rx) (* ly ry))) (∧ (= (* (* lx ly) (* rx ry)) (* lx (* ly (* rx ry)))) (∧ (= (* (* lx ly) (* rx ry)) (* rx (* (* lx ly) ry))) (∧ (= (* (* lx ly) rx) (* (* lx rx) ly)) (∧ (= (* (* lx ly) rx) (* lx (* ly rx))) (∧ (= (* lx rx) (* rx lx)) (∧ (= (* lx (* rx ry)) (* (* lx rx) ry)) (∧ (= (* lx (* rx ry)) (* rx (* lx ry))) (∧ (= (+ (+ a b) (+ c d)) (+ (+ a c) (+ b d))) (∧ (= (+ (+ a b) c) (+ a (+ b c))) (∧ (= (+ a (+ c d)) (+ c (+ a d))) (∧ (= (+ (+ a b) c) (+ (+ a c) b)) (∧ (= (+ a c) (+ c a)) (∧ (= (+ a (+ c d)) (+ (+ a c) d)) (∧ (= (* (EXP x p) (EXP x q)) (EXP x (+ p q))) (∧ (= (* x (EXP x q)) (EXP x (SUC q))) (∧ (= (* (EXP x q) x) (EXP x (SUC q))) (∧ (= (* x x) (EXP x (NUMERAL (BIT0 (BIT1 _0))))) (∧ (= (EXP (* x y) q) (* (EXP x q) (EXP y q))) (∧ (= (EXP (EXP x p) q) (EXP x (* p q))) (∧ (= (EXP x (NUMERAL _0)) (NUMERAL (BIT1 _0))) (∧ (= (EXP x (NUMERAL (BIT1 _0))) x) (∧ (= (* x (+ y z)) (+ (* x y) (* x z))) (= (EXP x (SUC q)) (* x (EXP x q)))))))))))))))))))))))))));
