require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_terms;
symbol lem6401305 [A K] : Prf (∀ (λ dom : El (fun A bool), (∀ (λ neut : El A, (∀ (λ op : El (fun A (fun A A)), (∀ (λ <<= : El (fun K (fun K bool)), (∀ (λ k : El (fun K bool), (∀ (λ f : El (fun K A), (= ((@iterato A K) dom neut op <<= k f) ((@COND A) (∧ ((@FINITE K) ((@GSPEC K) (λ GEN_PVAR_263 : El K, (∃ (λ i : El K, ((@SETSPEC K) GEN_PVAR_263 (∧ ((@IN K) i k) ((@IN A) (f i) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A))))) i)))))) (¬ (= ((@GSPEC K) (λ GEN_PVAR_264 : El K, (∃ (λ i : El K, ((@SETSPEC K) GEN_PVAR_264 (∧ ((@IN K) i k) ((@IN A) (f i) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A))))) i))))) (@EMPTY K)))) ((@LET K A) (λ i : El K, ((@LET_END A) (op (f i) ((@iterato A K) dom neut op <<= ((@GSPEC K) (λ GEN_PVAR_265 : El K, (∃ (λ j : El K, ((@SETSPEC K) GEN_PVAR_265 (∧ ((@IN K) j ((@DELETE K) k i)) ((@IN A) (f j) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A))))) j))))) f)))) ((@COND K) (∃ (λ i : El K, (∧ ((@IN K) i k) (∧ ((@IN A) (f i) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A)))) (∀ (λ j : El K, (⇒ (∧ (<<= j i) (∧ ((@IN K) j k) ((@IN A) (f j) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A)))))) (= j i)))))))) ((@ε K) (λ i : El K, (∧ ((@IN K) i k) (∧ ((@IN A) (f i) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A)))) (∀ (λ j : El K, (⇒ (∧ (<<= j i) (∧ ((@IN K) j k) ((@IN A) (f j) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A)))))) (= j i)))))))) ((@ε K) (λ i : El K, (∧ ((@IN K) i k) ((@IN A) (f i) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A))))))))) neut))))))))))))));
