require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_terms;
symbol lem4785419 [A] : Prf (= (@set_of_list A) ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))))) (fun (list A) (fun A bool)))) (λ set_of_list' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))))) (fun (list A) (fun A bool))), (∀ (λ _59117 : El (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))))), (∧ (= (set_of_list' _59117 (@NIL A)) (@EMPTY A)) (∀ (λ h : El A, (∀ (λ t : El (list A), (= (set_of_list' _59117 ((@CONS A) h t)) ((@INSERT A) h (set_of_list' _59117 t))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0))))))))))))))))))));
