Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_type_abbrevs.
Require Import hol_terms.
Definition term8 (a0 : Type') (a1 : Type') (x0 : a1 -> Prop) (x1 : type1470 a0 a1) := (fun y0 : type1470 a0 a1 => (@cartesian_product a0 a1 x0 y0) = (@GSPEC (a1 -> a0) (fun y1 : a1 -> a0 => exists y2 : a1 -> a0, @SETSPEC (a1 -> a0) y1 ((@EXTENSIONAL a1 a0 x0 y2) /\ (forall y3 : a1, (@IN a1 y3 x0) -> @IN a0 (y2 y3) (y0 y3))) y2))) x1.
Definition term3 (a0 : Type') (a1 : Type') (x0 : a1 -> Prop) (x1 : type1470 a0 a1) := (fun y0 : type1470 a0 a1 => @GSPEC (a1 -> a0) (fun y1 : a1 -> a0 => exists y2 : a1 -> a0, @SETSPEC (a1 -> a0) y1 ((@EXTENSIONAL a1 a0 x0 y2) /\ (forall y3 : a1, (@IN a1 y3 x0) -> @IN a0 (y2 y3) (y0 y3))) y2)) x1.
Definition term1 (a0 : Type') (a1 : Type') (x0 : a1 -> Prop) := (fun y0 : a1 -> Prop => fun y1 : type1470 a0 a1 => @GSPEC (a1 -> a0) (fun y2 : a1 -> a0 => exists y3 : a1 -> a0, @SETSPEC (a1 -> a0) y2 ((@EXTENSIONAL a1 a0 y0 y3) /\ (forall y4 : a1, (@IN a1 y4 y0) -> @IN a0 (y3 y4) (y1 y4))) y3)) x0.
Definition term0 (a0 : Type') (a1 : Type') := fun y0 : a1 -> Prop => fun y1 : type1470 a0 a1 => @GSPEC (a1 -> a0) (fun y2 : a1 -> a0 => exists y3 : a1 -> a0, @SETSPEC (a1 -> a0) y2 ((@EXTENSIONAL a1 a0 y0 y3) /\ (forall y4 : a1, (@IN a1 y4 y0) -> @IN a0 (y3 y4) (y1 y4))) y3).
Definition term4 (a0 : Type') (a1 : Type') (x0 : a1 -> Prop) (x1 : type1470 a0 a1) := @GSPEC (a1 -> a0) (fun y0 : a1 -> a0 => exists y1 : a1 -> a0, @SETSPEC (a1 -> a0) y0 ((@EXTENSIONAL a1 a0 x0 y1) /\ (forall y2 : a1, (@IN a1 y2 x0) -> @IN a0 (y1 y2) (x1 y2))) y1).
Definition term6 (a0 : Type') (a1 : Type') := forall y0 : a1 -> Prop, forall y1 : type1470 a0 a1, (@cartesian_product a0 a1 y0 y1) = (@GSPEC (a1 -> a0) (fun y2 : a1 -> a0 => exists y3 : a1 -> a0, @SETSPEC (a1 -> a0) y2 ((@EXTENSIONAL a1 a0 y0 y3) /\ (forall y4 : a1, (@IN a1 y4 y0) -> @IN a0 (y3 y4) (y1 y4))) y3)).
Definition term5 (a0 : Type') (a1 : Type') (x0 : a1 -> Prop) := forall y0 : type1470 a0 a1, (@cartesian_product a0 a1 x0 y0) = (@GSPEC (a1 -> a0) (fun y1 : a1 -> a0 => exists y2 : a1 -> a0, @SETSPEC (a1 -> a0) y1 ((@EXTENSIONAL a1 a0 x0 y2) /\ (forall y3 : a1, (@IN a1 y3 x0) -> @IN a0 (y2 y3) (y0 y3))) y2)).
Definition term7 (a0 : Type') (a1 : Type') (x0 : a1 -> Prop) := (fun y0 : a1 -> Prop => forall y1 : type1470 a0 a1, (@cartesian_product a0 a1 y0 y1) = (@GSPEC (a1 -> a0) (fun y2 : a1 -> a0 => exists y3 : a1 -> a0, @SETSPEC (a1 -> a0) y2 ((@EXTENSIONAL a1 a0 y0 y3) /\ (forall y4 : a1, (@IN a1 y4 y0) -> @IN a0 (y3 y4) (y1 y4))) y3))) x0.
Definition term2 (a0 : Type') (a1 : Type') (x0 : a1 -> Prop) := fun y0 : type1470 a0 a1 => @GSPEC (a1 -> a0) (fun y1 : a1 -> a0 => exists y2 : a1 -> a0, @SETSPEC (a1 -> a0) y1 ((@EXTENSIONAL a1 a0 x0 y2) /\ (forall y3 : a1, (@IN a1 y3 x0) -> @IN a0 (y2 y3) (y0 y3))) y2).
