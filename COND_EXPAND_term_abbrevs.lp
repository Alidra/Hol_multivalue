require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_type_abbrevs;
require open hol-light.hol_terms;
symbol term12 ≔ (∨ (¬ T));
symbol term5 (x0: El bool) (x1: El bool) ≔ (∧ (∨ (¬ T) x0) (∨ T x1));
symbol term15 (x0: El bool) (x1: El bool) ≔ ((@= bool) ((@COND bool) F x0 x1));
symbol term11 (x0: El bool) (x1: El bool) ≔ ((@= bool) ((@COND bool) T x0 x1));
symbol term3 (x0: El bool) (x1: El bool) (x2: El bool) ≔ ((λ y0 : El bool, (= ((@COND bool) y0 x0 x1) (∧ (∨ (¬ y0) x0) (∨ y0 x1)))) x2);
symbol term17 (x0: El bool) ≔ (∨ (¬ F) x0);
symbol term16 ≔ (∨ (¬ F));
symbol term2 (x0: El bool) (x1: El bool) ≔ (λ y0 : El bool, (= ((@COND bool) y0 x0 x1) (∧ (∨ (¬ y0) x0) (∨ y0 x1))));
symbol term13 (x0: El bool) ≔ (∨ (¬ T) x0);
symbol term1 (x0: El bool) ≔ (∨ (= x0 T) (= x0 F));
symbol term21 ≔ (∀ (λ y0 : El bool, (∀ (λ y1 : El bool, (∀ (λ y2 : El bool, (= ((@COND bool) y0 y1 y2) (∧ (∨ (¬ y0) y1) (∨ y0 y2)))))))));
symbol term20 (x0: El bool) ≔ (∀ (λ y0 : El bool, (∀ (λ y1 : El bool, (= ((@COND bool) x0 y0 y1) (∧ (∨ (¬ x0) y0) (∨ x0 y1)))))));
symbol term9 (x0: El bool) (x1: El bool) ≔ ((λ y0 : El bool, (= ((@COND bool) y0 x0 x1) (∧ (∨ (¬ y0) x0) (∨ y0 x1)))) F);
symbol term10 (x0: El bool) (x1: El bool) ≔ (∧ (∨ (¬ F) x0) (∨ F x1));
symbol term0 (x0: El bool) ≔ ((λ y0 : El bool, (∨ (= y0 T) (= y0 F))) x0);
symbol term8 (x0: El bool) (x1: El bool) (x2: El bool) ≔ ((@= bool) (= ((@COND bool) x1 x0 x2) (∧ (∨ (¬ x1) x0) (∨ x1 x2))));
symbol term19 (x0: El bool) (x1: El bool) ≔ (∀ (λ y0 : El bool, (= ((@COND bool) x1 x0 y0) (∧ (∨ (¬ x1) x0) (∨ x1 y0)))));
symbol term18 (x0: El bool) ≔ (∧ (∨ (¬ F) x0));
symbol term14 (x0: El bool) ≔ (∧ (∨ (¬ T) x0));
symbol term4 (x0: El bool) (x1: El bool) ≔ ((λ y0 : El bool, (= ((@COND bool) y0 x0 x1) (∧ (∨ (¬ y0) x0) (∨ y0 x1)))) T);
symbol term6 (x0: El bool) (x1: El bool) (x2: El bool) ≔ ((@= bool) ((λ y0 : El bool, (= ((@COND bool) y0 x0 x1) (∧ (∨ (¬ y0) x0) (∨ y0 x1)))) x2));
symbol term7 (x0: El bool) (x1: El bool) (x2: El bool) ≔ (∧ (∨ (¬ x1) x0) (∨ x1 x2));
