require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_terms;
symbol lem3790897 [A B] : Prf (= (@FINREC A B) ((@ε (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun (fun A (fun B B)) (fun B (fun (fun A bool) (fun B (fun num bool))))))) (λ FINREC' : El (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun (fun A (fun B B)) (fun B (fun (fun A bool) (fun B (fun num bool)))))), (∀ (λ _43486 : El (prod num (prod num (prod num (prod num (prod num num))))), (∧ (∀ (λ f : El (fun A (fun B B)), (∀ (λ s : El (fun A bool), (∀ (λ a : El B, (∀ (λ b : El B, (= (FINREC' _43486 f b s a (NUMERAL _0)) (∧ (= s (@EMPTY A)) (= a b))))))))))) (∀ (λ b : El B, (∀ (λ s : El (fun A bool), (∀ (λ n : El num, (∀ (λ a : El B, (∀ (λ f : El (fun A (fun B B)), (= (FINREC' _43486 f b s a (SUC n)) (∃ (λ x : El A, (∃ (λ c : El B, (∧ ((@IN A) x s) (∧ (FINREC' _43486 f b ((@DELETE A) s x) c n) (= a (f x c))))))))))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))))))))));
