Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_terms.
Require Import hol_axioms.
Require Import hol_type_abbrevs.
Require Import thm8057570_term_abbrevs.
Require Import SKOLEM_THM_spec.
Require Import list_RECURSION_spec.
Require Import thm9261_spec.
Require Import thm9306_spec.
Lemma lem8057429 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : (CASEWISE' (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118)))) = (term0 _143118 _143158 _143159)) : (CASEWISE' (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118)))) = (term0 _143118 _143158 _143159).
Proof. exact (h1). Qed.
Lemma lem8057430 {_143159 : Type'} (f : _143159) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8057431 {_143118 _143154 _143158 _143159 : Type'} (f : _143159) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : (CASEWISE' (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118)))) = (term0 _143118 _143158 _143159)) : (CASEWISE' (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) f) = (term1 _143118 _143158 _143159 f).
Proof. exact (MK_COMB (@lem8057429 _143118 _143154 _143158 _143159 CASEWISE' h1) (@lem8057430 _143159 f)). Qed.
Lemma lem8057432 {_143118 _143158 _143159 : Type'} (f : _143159) : (term1 _143118 _143158 _143159 f) = (term2 _143118 _143158).
Proof. exact (eq_refl (term1 _143118 _143158 _143159 f)). Qed.
Lemma lem8057433 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (f : _143159) : (term3 _143118 _143154 _143158 _143159 CASEWISE' f) = (term3 _143118 _143154 _143158 _143159 CASEWISE' f).
Proof. exact (eq_refl (term3 _143118 _143154 _143158 _143159 CASEWISE' f)). Qed.
Lemma lem8057434 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (f : _143159) : ((CASEWISE' (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) f) = (term1 _143118 _143158 _143159 f)) = ((CASEWISE' (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) f) = (term2 _143118 _143158)).
Proof. exact (MK_COMB (@lem8057433 _143118 _143154 _143158 _143159 CASEWISE' f) (@lem8057432 _143118 _143158 _143159 f)). Qed.
Lemma lem8057435 {_143118 _143154 _143158 _143159 : Type'} (f : _143159) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : (CASEWISE' (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118)))) = (term0 _143118 _143158 _143159)) : (CASEWISE' (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) f) = (term2 _143118 _143158).
Proof. exact (EQ_MP (@lem8057434 _143118 _143154 _143158 _143159 CASEWISE' f) (@lem8057431 _143118 _143154 _143158 _143159 f CASEWISE' h1)). Qed.
Lemma lem8057436 {_143158 : Type'} (x : _143158) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8057437 {_143118 _143154 _143158 _143159 : Type'} (f : _143159) (x : _143158) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : (CASEWISE' (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118)))) = (term0 _143118 _143158 _143159)) : (CASEWISE' (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) f x) = (term4 _143118 _143158 x).
Proof. exact (MK_COMB (@lem8057435 _143118 _143154 _143158 _143159 f CASEWISE' h1) (@lem8057436 _143158 x)). Qed.
Lemma lem8057438 {_143118 _143158 : Type'} (x : _143158) : (term4 _143118 _143158 x) = (term5 _143118).
Proof. exact (eq_refl (term4 _143118 _143158 x)). Qed.
Lemma lem8057439 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (f : _143159) (x : _143158) : (term6 _143118 _143154 _143158 _143159 CASEWISE' f x) = (term6 _143118 _143154 _143158 _143159 CASEWISE' f x).
Proof. exact (eq_refl (term6 _143118 _143154 _143158 _143159 CASEWISE' f x)). Qed.
Lemma lem8057440 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (f : _143159) (x : _143158) : ((CASEWISE' (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) f x) = (term4 _143118 _143158 x)) = ((CASEWISE' (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) f x) = (term5 _143118)).
Proof. exact (MK_COMB (@lem8057439 _143118 _143154 _143158 _143159 CASEWISE' f x) (@lem8057438 _143118 _143158 x)). Qed.
Lemma lem8057441 {_143118 _143154 _143158 _143159 : Type'} (f : _143159) (x : _143158) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : (CASEWISE' (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118)))) = (term0 _143118 _143158 _143159)) : (CASEWISE' (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) f x) = (term5 _143118).
Proof. exact (EQ_MP (@lem8057440 _143118 _143154 _143158 _143159 CASEWISE' f x) (@lem8057437 _143118 _143154 _143158 _143159 f x CASEWISE' h1)). Qed.
Lemma lem8057442 {_143118 _143154 _143158 _143159 : Type'} (f : _143159) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : (CASEWISE' (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118)))) = (term0 _143118 _143158 _143159)) : term7 _143118 _143154 _143158 _143159 CASEWISE' f.
Proof. exact (fun x : _143158 => @lem8057441 _143118 _143154 _143158 _143159 f x CASEWISE' h1). Qed.
Lemma lem8057443 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : (CASEWISE' (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118)))) = (term0 _143118 _143158 _143159)) : term8 _143118 _143154 _143158 _143159 CASEWISE'.
Proof. exact (fun f : _143159 => @lem8057442 _143118 _143154 _143158 _143159 f CASEWISE' h1). Qed.
Lemma lem8057444 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term9 _143118 _143154 _143158 _143159 CASEWISE') : term9 _143118 _143154 _143158 _143159 CASEWISE'.
Proof. exact (h1). Qed.
Lemma lem8057445 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term9 _143118 _143154 _143158 _143159 CASEWISE') : term10 _143118 _143154 _143158 _143159 CASEWISE' h.
Proof. exact (@lem8057444 _143118 _143154 _143158 _143159 CASEWISE' h1 h). Qed.
Lemma lem8057446 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) : (term10 _143118 _143154 _143158 _143159 CASEWISE' h) = (term11 _143118 _143154 _143158 _143159 h CASEWISE').
Proof. exact (eq_refl (term10 _143118 _143154 _143158 _143159 CASEWISE' h)). Qed.
Lemma lem8057447 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term9 _143118 _143154 _143158 _143159 CASEWISE') : term11 _143118 _143154 _143158 _143159 h CASEWISE'.
Proof. exact (EQ_MP (@lem8057446 _143118 _143154 _143158 _143159 h CASEWISE') (@lem8057445 _143118 _143154 _143158 _143159 h CASEWISE' h1)). Qed.
Lemma lem8057448 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term9 _143118 _143154 _143158 _143159 CASEWISE') : term12 _143118 _143154 _143158 _143159 h CASEWISE' t.
Proof. exact (@lem8057447 _143118 _143154 _143158 _143159 h CASEWISE' h1 t). Qed.
Lemma lem8057449 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) : (term12 _143118 _143154 _143158 _143159 h CASEWISE' t) = ((term13 _143118 _143154 _143158 _143159 CASEWISE' h t) = (term14 _143118 _143154 _143158 _143159 h CASEWISE' t)).
Proof. exact (eq_refl (term12 _143118 _143154 _143158 _143159 h CASEWISE' t)). Qed.
Lemma lem8057450 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term9 _143118 _143154 _143158 _143159 CASEWISE') : (term13 _143118 _143154 _143158 _143159 CASEWISE' h t) = (term14 _143118 _143154 _143158 _143159 h CASEWISE' t).
Proof. exact (EQ_MP (@lem8057449 _143118 _143154 _143158 _143159 h CASEWISE' t) (@lem8057448 _143118 _143154 _143158 _143159 h t CASEWISE' h1)). Qed.
Lemma lem8057451 {_143159 : Type'} (f : _143159) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8057452 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) (f : _143159) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term9 _143118 _143154 _143158 _143159 CASEWISE') : (term15 _143118 _143154 _143158 _143159 CASEWISE' h t f) = (term16 _143118 _143154 _143158 _143159 h CASEWISE' t f).
Proof. exact (MK_COMB (@lem8057450 _143118 _143154 _143158 _143159 h t CASEWISE' h1) (@lem8057451 _143159 f)). Qed.
Lemma lem8057453 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) (f : _143159) : (term16 _143118 _143154 _143158 _143159 h CASEWISE' t f) = (term17 _143118 _143154 _143158 _143159 h CASEWISE' t f).
Proof. exact (eq_refl (term16 _143118 _143154 _143158 _143159 h CASEWISE' t f)). Qed.
Lemma lem8057454 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h : type1644 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) (f : _143159) : (term18 _143118 _143154 _143158 _143159 CASEWISE' h t f) = (term18 _143118 _143154 _143158 _143159 CASEWISE' h t f).
Proof. exact (eq_refl (term18 _143118 _143154 _143158 _143159 CASEWISE' h t f)). Qed.
Lemma lem8057455 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) (f : _143159) : ((term15 _143118 _143154 _143158 _143159 CASEWISE' h t f) = (term16 _143118 _143154 _143158 _143159 h CASEWISE' t f)) = ((term15 _143118 _143154 _143158 _143159 CASEWISE' h t f) = (term17 _143118 _143154 _143158 _143159 h CASEWISE' t f)).
Proof. exact (MK_COMB (@lem8057454 _143118 _143154 _143158 _143159 CASEWISE' h t f) (@lem8057453 _143118 _143154 _143158 _143159 h CASEWISE' t f)). Qed.
Lemma lem8057456 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) (f : _143159) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term9 _143118 _143154 _143158 _143159 CASEWISE') : (term15 _143118 _143154 _143158 _143159 CASEWISE' h t f) = (term17 _143118 _143154 _143158 _143159 h CASEWISE' t f).
Proof. exact (EQ_MP (@lem8057455 _143118 _143154 _143158 _143159 h CASEWISE' t f) (@lem8057452 _143118 _143154 _143158 _143159 h t f CASEWISE' h1)). Qed.
Lemma lem8057457 {_143158 : Type'} (x : _143158) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8057458 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) (f : _143159) (x : _143158) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term9 _143118 _143154 _143158 _143159 CASEWISE') : (term19 _143118 _143154 _143158 _143159 CASEWISE' h t f x) = (term20 _143118 _143154 _143158 _143159 h CASEWISE' t f x).
Proof. exact (MK_COMB (@lem8057456 _143118 _143154 _143158 _143159 h t f CASEWISE' h1) (@lem8057457 _143158 x)). Qed.
Lemma lem8057459 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) (f : _143159) (x : _143158) : (term20 _143118 _143154 _143158 _143159 h CASEWISE' t f x) = (term21 _143118 _143154 _143158 _143159 h CASEWISE' t f x).
Proof. exact (eq_refl (term20 _143118 _143154 _143158 _143159 h CASEWISE' t f x)). Qed.
Lemma lem8057460 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h : type1644 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) (f : _143159) (x : _143158) : (term22 _143118 _143154 _143158 _143159 CASEWISE' h t f x) = (term22 _143118 _143154 _143158 _143159 CASEWISE' h t f x).
Proof. exact (eq_refl (term22 _143118 _143154 _143158 _143159 CASEWISE' h t f x)). Qed.
Lemma lem8057461 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) (f : _143159) (x : _143158) : ((term19 _143118 _143154 _143158 _143159 CASEWISE' h t f x) = (term20 _143118 _143154 _143158 _143159 h CASEWISE' t f x)) = ((term19 _143118 _143154 _143158 _143159 CASEWISE' h t f x) = (term21 _143118 _143154 _143158 _143159 h CASEWISE' t f x)).
Proof. exact (MK_COMB (@lem8057460 _143118 _143154 _143158 _143159 CASEWISE' h t f x) (@lem8057459 _143118 _143154 _143158 _143159 h CASEWISE' t f x)). Qed.
Lemma lem8057462 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) (f : _143159) (x : _143158) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term9 _143118 _143154 _143158 _143159 CASEWISE') : (term19 _143118 _143154 _143158 _143159 CASEWISE' h t f x) = (term21 _143118 _143154 _143158 _143159 h CASEWISE' t f x).
Proof. exact (EQ_MP (@lem8057461 _143118 _143154 _143158 _143159 h CASEWISE' t f x) (@lem8057458 _143118 _143154 _143158 _143159 h t f x CASEWISE' h1)). Qed.
Lemma lem8057463 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) (f : _143159) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term9 _143118 _143154 _143158 _143159 CASEWISE') : term23 _143118 _143154 _143158 _143159 h CASEWISE' t f.
Proof. exact (fun x : _143158 => @lem8057462 _143118 _143154 _143158 _143159 h t f x CASEWISE' h1). Qed.
Lemma lem8057464 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (t : type1633 _143118 _143154 _143158 _143159) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term9 _143118 _143154 _143158 _143159 CASEWISE') : term24 _143118 _143154 _143158 _143159 h CASEWISE' t.
Proof. exact (fun f : _143159 => @lem8057463 _143118 _143154 _143158 _143159 h t f CASEWISE' h1). Qed.
Lemma lem8057465 {_143118 _143154 _143158 _143159 : Type'} (h : type1644 _143118 _143154 _143158 _143159) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term9 _143118 _143154 _143158 _143159 CASEWISE') : term25 _143118 _143154 _143158 _143159 h CASEWISE'.
Proof. exact (fun t : type1633 _143118 _143154 _143158 _143159 => @lem8057464 _143118 _143154 _143158 _143159 h t CASEWISE' h1). Qed.
Lemma lem8057466 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term9 _143118 _143154 _143158 _143159 CASEWISE') : term26 _143118 _143154 _143158 _143159 CASEWISE'.
Proof. exact (fun h : type1644 _143118 _143154 _143158 _143159 => @lem8057465 _143118 _143154 _143158 _143159 h CASEWISE' h1). Qed.
Lemma lem8057467 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term27 _143118 _143154 _143158 _143159 CASEWISE') : term27 _143118 _143154 _143158 _143159 CASEWISE'.
Proof. exact (h1). Qed.
Lemma lem8057468 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term27 _143118 _143154 _143158 _143159 CASEWISE') : term9 _143118 _143154 _143158 _143159 CASEWISE'.
Proof. exact (proj2 (@lem8057467 _143118 _143154 _143158 _143159 CASEWISE' h1)). Qed.
Lemma lem8057469 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term27 _143118 _143154 _143158 _143159 CASEWISE') : (CASEWISE' (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118)))) = (term0 _143118 _143158 _143159).
Proof. exact (proj1 (@lem8057467 _143118 _143154 _143158 _143159 CASEWISE' h1)). Qed.
Lemma lem8057470 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term27 _143118 _143154 _143158 _143159 CASEWISE') : ((CASEWISE' (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118)))) = (term0 _143118 _143158 _143159)) = (term8 _143118 _143154 _143158 _143159 CASEWISE').
Proof. exact (prop_ext (fun h2 : (CASEWISE' (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118)))) = (term0 _143118 _143158 _143159) => @lem8057443 _143118 _143154 _143158 _143159 CASEWISE' h2) (fun h2 : term8 _143118 _143154 _143158 _143159 CASEWISE' => @lem8057469 _143118 _143154 _143158 _143159 CASEWISE' h1)). Qed.
Lemma lem8057471 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term27 _143118 _143154 _143158 _143159 CASEWISE') : term8 _143118 _143154 _143158 _143159 CASEWISE'.
Proof. exact (EQ_MP (@lem8057470 _143118 _143154 _143158 _143159 CASEWISE' h1) (@lem8057469 _143118 _143154 _143158 _143159 CASEWISE' h1)). Qed.
Lemma lem8057472 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term27 _143118 _143154 _143158 _143159 CASEWISE') : (term9 _143118 _143154 _143158 _143159 CASEWISE') = (term26 _143118 _143154 _143158 _143159 CASEWISE').
Proof. exact (prop_ext (fun h2 : term9 _143118 _143154 _143158 _143159 CASEWISE' => @lem8057466 _143118 _143154 _143158 _143159 CASEWISE' h2) (fun h2 : term26 _143118 _143154 _143158 _143159 CASEWISE' => @lem8057468 _143118 _143154 _143158 _143159 CASEWISE' h1)). Qed.
Lemma lem8057473 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term27 _143118 _143154 _143158 _143159 CASEWISE') : term26 _143118 _143154 _143158 _143159 CASEWISE'.
Proof. exact (EQ_MP (@lem8057472 _143118 _143154 _143158 _143159 CASEWISE' h1) (@lem8057468 _143118 _143154 _143158 _143159 CASEWISE' h1)). Qed.
Lemma lem8057474 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term27 _143118 _143154 _143158 _143159 CASEWISE') : term28 _143118 _143154 _143158 _143159 CASEWISE'.
Proof. exact (conj (@lem8057471 _143118 _143154 _143158 _143159 CASEWISE' h1) (@lem8057473 _143118 _143154 _143158 _143159 CASEWISE' h1)). Qed.
Lemma lem8057475 {A Z : Type'} (NIL' : Z) : term29 A Z NIL'.
Proof. exact (@lem1072128 A Z NIL'). Qed.
Lemma lem8057476 {A Z : Type'} (NIL' : Z) : (term29 A Z NIL') = (term30 A Z NIL').
Proof. exact (eq_refl (term29 A Z NIL')). Qed.
Lemma lem8057477 {A Z : Type'} (NIL' : Z) : term30 A Z NIL'.
Proof. exact (EQ_MP (@lem8057476 A Z NIL') (@lem8057475 A Z NIL')). Qed.
Lemma lem8057478 {A Z : Type'} (NIL' : Z) (CONS' : type1394 A Z) : term31 A Z NIL' CONS'.
Proof. exact (@lem8057477 A Z NIL' CONS'). Qed.
Lemma lem8057479 {A Z : Type'} (NIL' : Z) (CONS' : type1394 A Z) : (term31 A Z NIL' CONS') = (term32 A Z NIL' CONS').
Proof. exact (eq_refl (term31 A Z NIL' CONS')). Qed.
Lemma lem8057480 {A Z : Type'} (NIL' : Z) (CONS' : type1394 A Z) : term32 A Z NIL' CONS'.
Proof. exact (EQ_MP (@lem8057479 A Z NIL' CONS') (@lem8057478 A Z NIL' CONS')). Qed.
Lemma lem8057481 {_143118 _143154 _143158 _143159 : Type'} (NIL' : type1518 _143118 _143158 _143159) (CONS' : type1172 _143118 _143154 _143158 _143159) : term33 _143118 _143154 _143158 _143159 NIL' CONS'.
Proof. exact (@lem8057480 (type1644 _143118 _143154 _143158 _143159) (type1518 _143118 _143158 _143159) NIL' CONS'). Qed.
Lemma lem8057482 {_143118 _143154 _143158 _143159 : Type'} : term34 _143118 _143154 _143158 _143159.
Proof. exact (@lem8057481 _143118 _143154 _143158 _143159 (term0 _143118 _143158 _143159) (term35 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8057483 {_143118 _143154 _143158 _143159 : Type'} (a0 : type1644 _143118 _143154 _143158 _143159) : (term36 _143118 _143154 _143158 _143159 a0) = (term37 _143118 _143154 _143158 _143159 a0).
Proof. exact (eq_refl (term36 _143118 _143154 _143158 _143159 a0)). Qed.
Lemma lem8057484 {_143118 _143154 _143158 _143159 : Type'} (a1 : type1633 _143118 _143154 _143158 _143159) : a1 = a1.
Proof. exact (eq_refl a1). Qed.
Lemma lem8057485 {_143118 _143154 _143158 _143159 : Type'} (a0 : type1644 _143118 _143154 _143158 _143159) (a1 : type1633 _143118 _143154 _143158 _143159) : (term38 _143118 _143154 _143158 _143159 a0 a1) = (term39 _143118 _143154 _143158 _143159 a0 a1).
Proof. exact (MK_COMB (@lem8057483 _143118 _143154 _143158 _143159 a0) (@lem8057484 _143118 _143154 _143158 _143159 a1)). Qed.
Lemma lem8057486 {_143118 _143154 _143158 _143159 : Type'} (a1 : type1633 _143118 _143154 _143158 _143159) (a0 : type1644 _143118 _143154 _143158 _143159) : (term39 _143118 _143154 _143158 _143159 a0 a1) = (term40 _143118 _143154 _143158 _143159 a0).
Proof. exact (eq_refl (term39 _143118 _143154 _143158 _143159 a0 a1)). Qed.
Lemma lem8057487 {_143118 _143154 _143158 _143159 : Type'} (a1 : type1633 _143118 _143154 _143158 _143159) (a0 : type1644 _143118 _143154 _143158 _143159) : (term38 _143118 _143154 _143158 _143159 a0 a1) = (term40 _143118 _143154 _143158 _143159 a0).
Proof. exact (TRANS (@lem8057485 _143118 _143154 _143158 _143159 a0 a1) (@lem8057486 _143118 _143154 _143158 _143159 a1 a0)). Qed.
Lemma lem8057488 {_143118 _143154 _143158 _143159 : Type'} (fn : type1066 _143118 _143154 _143158 _143159) (a1 : type1633 _143118 _143154 _143158 _143159) : (fn a1) = (fn a1).
Proof. exact (eq_refl (fn a1)). Qed.
Lemma lem8057489 {_143118 _143154 _143158 _143159 : Type'} (a0 : type1644 _143118 _143154 _143158 _143159) (fn : type1066 _143118 _143154 _143158 _143159) (a1 : type1633 _143118 _143154 _143158 _143159) : (term41 _143118 _143154 _143158 _143159 a0 fn a1) = (term42 _143118 _143154 _143158 _143159 a0 fn a1).
Proof. exact (MK_COMB (@lem8057487 _143118 _143154 _143158 _143159 a1 a0) (@lem8057488 _143118 _143154 _143158 _143159 fn a1)). Qed.
Lemma lem8057490 {_143118 _143154 _143158 _143159 : Type'} (a0 : type1644 _143118 _143154 _143158 _143159) (fn : type1066 _143118 _143154 _143158 _143159) (a1 : type1633 _143118 _143154 _143158 _143159) : (term42 _143118 _143154 _143158 _143159 a0 fn a1) = (term14 _143118 _143154 _143158 _143159 a0 fn a1).
Proof. exact (eq_refl (term42 _143118 _143154 _143158 _143159 a0 fn a1)). Qed.
Lemma lem8057491 {_143118 _143154 _143158 _143159 : Type'} (a0 : type1644 _143118 _143154 _143158 _143159) (fn : type1066 _143118 _143154 _143158 _143159) (a1 : type1633 _143118 _143154 _143158 _143159) : (term41 _143118 _143154 _143158 _143159 a0 fn a1) = (term14 _143118 _143154 _143158 _143159 a0 fn a1).
Proof. exact (TRANS (@lem8057489 _143118 _143154 _143158 _143159 a0 fn a1) (@lem8057490 _143118 _143154 _143158 _143159 a0 fn a1)). Qed.
Lemma lem8057492 {_143118 _143154 _143158 _143159 : Type'} (fn : type1066 _143118 _143154 _143158 _143159) (a0 : type1644 _143118 _143154 _143158 _143159) (a1 : type1633 _143118 _143154 _143158 _143159) : (term43 _143118 _143154 _143158 _143159 fn a0 a1) = (term43 _143118 _143154 _143158 _143159 fn a0 a1).
Proof. exact (eq_refl (term43 _143118 _143154 _143158 _143159 fn a0 a1)). Qed.
Lemma lem8057493 {_143118 _143154 _143158 _143159 : Type'} (a0 : type1644 _143118 _143154 _143158 _143159) (fn : type1066 _143118 _143154 _143158 _143159) (a1 : type1633 _143118 _143154 _143158 _143159) : ((term13 _143118 _143154 _143158 _143159 fn a0 a1) = (term41 _143118 _143154 _143158 _143159 a0 fn a1)) = ((term13 _143118 _143154 _143158 _143159 fn a0 a1) = (term14 _143118 _143154 _143158 _143159 a0 fn a1)).
Proof. exact (MK_COMB (@lem8057492 _143118 _143154 _143158 _143159 fn a0 a1) (@lem8057491 _143118 _143154 _143158 _143159 a0 fn a1)). Qed.
Lemma lem8057494 {_143118 _143154 _143158 _143159 : Type'} (a0 : type1644 _143118 _143154 _143158 _143159) (fn : type1066 _143118 _143154 _143158 _143159) : (term44 _143118 _143154 _143158 _143159 a0 fn) = (term45 _143118 _143154 _143158 _143159 a0 fn).
Proof. exact (fun_ext (fun a1 : type1633 _143118 _143154 _143158 _143159 => @lem8057493 _143118 _143154 _143158 _143159 a0 fn a1)). Qed.
Lemma lem8057495 {_143118 _143154 _143158 _143159 : Type'} : (@all (list (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118)))) = (@all (list (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118)))).
Proof. exact (eq_refl (@all (list (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))))). Qed.
Lemma lem8057496 {_143118 _143154 _143158 _143159 : Type'} (a0 : type1644 _143118 _143154 _143158 _143159) (fn : type1066 _143118 _143154 _143158 _143159) : (term46 _143118 _143154 _143158 _143159 a0 fn) = (term11 _143118 _143154 _143158 _143159 a0 fn).
Proof. exact (MK_COMB (@lem8057495 _143118 _143154 _143158 _143159) (@lem8057494 _143118 _143154 _143158 _143159 a0 fn)). Qed.
Lemma lem8057497 {_143118 _143154 _143158 _143159 : Type'} (fn : type1066 _143118 _143154 _143158 _143159) : (term47 _143118 _143154 _143158 _143159 fn) = (term48 _143118 _143154 _143158 _143159 fn).
Proof. exact (fun_ext (fun a0 : type1644 _143118 _143154 _143158 _143159 => @lem8057496 _143118 _143154 _143158 _143159 a0 fn)). Qed.
Lemma lem8057498 {_143118 _143154 _143158 _143159 : Type'} : (@all (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) = (@all (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))).
Proof. exact (eq_refl (@all (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118)))). Qed.
Lemma lem8057499 {_143118 _143154 _143158 _143159 : Type'} (fn : type1066 _143118 _143154 _143158 _143159) : (term49 _143118 _143154 _143158 _143159 fn) = (term9 _143118 _143154 _143158 _143159 fn).
Proof. exact (MK_COMB (@lem8057498 _143118 _143154 _143158 _143159) (@lem8057497 _143118 _143154 _143158 _143159 fn)). Qed.
Lemma lem8057500 {_143118 _143154 _143158 _143159 : Type'} (fn : type1066 _143118 _143154 _143158 _143159) : (term50 _143118 _143154 _143158 _143159 fn) = (term50 _143118 _143154 _143158 _143159 fn).
Proof. exact (eq_refl (term50 _143118 _143154 _143158 _143159 fn)). Qed.
Lemma lem8057501 {_143118 _143154 _143158 _143159 : Type'} (fn : type1066 _143118 _143154 _143158 _143159) : (term51 _143118 _143154 _143158 _143159 fn) = (term27 _143118 _143154 _143158 _143159 fn).
Proof. exact (MK_COMB (@lem8057500 _143118 _143154 _143158 _143159 fn) (@lem8057499 _143118 _143154 _143158 _143159 fn)). Qed.
Lemma lem8057502 {_143118 _143154 _143158 _143159 : Type'} : (term52 _143118 _143154 _143158 _143159) = (term53 _143118 _143154 _143158 _143159).
Proof. exact (fun_ext (fun fn : type1066 _143118 _143154 _143158 _143159 => @lem8057501 _143118 _143154 _143158 _143159 fn)). Qed.
Lemma lem8057503 {_143118 _143154 _143158 _143159 : Type'} : (@ex ((list (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) -> _143159 -> _143158 -> _143118)) = (@ex ((list (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) -> _143159 -> _143158 -> _143118)).
Proof. exact (eq_refl (@ex ((list (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) -> _143159 -> _143158 -> _143118))). Qed.
Lemma lem8057504 {_143118 _143154 _143158 _143159 : Type'} : (term34 _143118 _143154 _143158 _143159) = (term54 _143118 _143154 _143158 _143159).
Proof. exact (MK_COMB (@lem8057503 _143118 _143154 _143158 _143159) (@lem8057502 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8057505 {_143118 _143154 _143158 _143159 : Type'} : term54 _143118 _143154 _143158 _143159.
Proof. exact (EQ_MP (@lem8057504 _143118 _143154 _143158 _143159) (@lem8057482 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8057506 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term27 _143118 _143154 _143158 _143159 CASEWISE') : term27 _143118 _143154 _143158 _143159 CASEWISE'.
Proof. exact (h1). Qed.
Lemma lem8057507 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term27 _143118 _143154 _143158 _143159 CASEWISE') : term9 _143118 _143154 _143158 _143159 CASEWISE'.
Proof. exact (proj2 (@lem8057506 _143118 _143154 _143158 _143159 CASEWISE' h1)). Qed.
Lemma lem8057508 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term27 _143118 _143154 _143158 _143159 CASEWISE') : (CASEWISE' (@nil (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118)))) = (term0 _143118 _143158 _143159).
Proof. exact (proj1 (@lem8057506 _143118 _143154 _143158 _143159 CASEWISE' h1)). Qed.
Lemma lem8057509 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term27 _143118 _143154 _143158 _143159 CASEWISE') : term27 _143118 _143154 _143158 _143159 CASEWISE'.
Proof. exact (conj (@lem8057508 _143118 _143154 _143158 _143159 CASEWISE' h1) (@lem8057507 _143118 _143154 _143158 _143159 CASEWISE' h1)). Qed.
Lemma lem8057510 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term27 _143118 _143154 _143158 _143159 CASEWISE') : term54 _143118 _143154 _143158 _143159.
Proof. exact (ex_intro (term53 _143118 _143154 _143158 _143159) CASEWISE' (@lem8057509 _143118 _143154 _143158 _143159 CASEWISE' h1)). Qed.
Lemma lem8057511 {_143118 _143154 _143158 _143159 : Type'} (h1 : term54 _143118 _143154 _143158 _143159) : term54 _143118 _143154 _143158 _143159.
Proof. exact (h1). Qed.
Lemma lem8057512 {_143118 _143154 _143158 _143159 : Type'} (h1 : term54 _143118 _143154 _143158 _143159) : term54 _143118 _143154 _143158 _143159.
Proof. exact (ex_elim (@lem8057511 _143118 _143154 _143158 _143159 h1) (fun CASEWISE' : type1066 _143118 _143154 _143158 _143159 => fun h0 : term53 _143118 _143154 _143158 _143159 CASEWISE' => @lem8057510 _143118 _143154 _143158 _143159 CASEWISE' h0)). Qed.
Lemma lem8057513 {_143118 _143154 _143158 _143159 : Type'} : (term54 _143118 _143154 _143158 _143159) = (term54 _143118 _143154 _143158 _143159).
Proof. exact (prop_ext (fun h1 : term54 _143118 _143154 _143158 _143159 => @lem8057512 _143118 _143154 _143158 _143159 h1) (fun h1 : term54 _143118 _143154 _143158 _143159 => @lem8057505 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8057514 {_143118 _143154 _143158 _143159 : Type'} : term54 _143118 _143154 _143158 _143159.
Proof. exact (EQ_MP (@lem8057513 _143118 _143154 _143158 _143159) (@lem8057505 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8057515 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term27 _143118 _143154 _143158 _143159 CASEWISE') : term55 _143118 _143154 _143158 _143159.
Proof. exact (ex_intro (term56 _143118 _143154 _143158 _143159) CASEWISE' (@lem8057474 _143118 _143154 _143158 _143159 CASEWISE' h1)). Qed.
Lemma lem8057516 {_143118 _143154 _143158 _143159 : Type'} (h1 : term54 _143118 _143154 _143158 _143159) : term54 _143118 _143154 _143158 _143159.
Proof. exact (h1). Qed.
Lemma lem8057517 {_143118 _143154 _143158 _143159 : Type'} (h1 : term54 _143118 _143154 _143158 _143159) : term55 _143118 _143154 _143158 _143159.
Proof. exact (ex_elim (@lem8057516 _143118 _143154 _143158 _143159 h1) (fun CASEWISE' : type1066 _143118 _143154 _143158 _143159 => fun h0 : term53 _143118 _143154 _143158 _143159 CASEWISE' => @lem8057515 _143118 _143154 _143158 _143159 CASEWISE' h0)). Qed.
Lemma lem8057518 {_143118 _143154 _143158 _143159 : Type'} : (term54 _143118 _143154 _143158 _143159) = (term55 _143118 _143154 _143158 _143159).
Proof. exact (prop_ext (fun h1 : term54 _143118 _143154 _143158 _143159 => @lem8057517 _143118 _143154 _143158 _143159 h1) (fun h1 : term55 _143118 _143154 _143158 _143159 => @lem8057514 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8057519 {_143118 _143154 _143158 _143159 : Type'} : term55 _143118 _143154 _143158 _143159.
Proof. exact (EQ_MP (@lem8057518 _143118 _143154 _143158 _143159) (@lem8057514 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8057522 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term28 _143118 _143154 _143158 _143159 CASEWISE') : term28 _143118 _143154 _143158 _143159 CASEWISE'.
Proof. exact (h1). Qed.
Lemma lem8057523 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) (h1 : term28 _143118 _143154 _143158 _143159 CASEWISE') : term55 _143118 _143154 _143158 _143159.
Proof. exact (ex_intro (term56 _143118 _143154 _143158 _143159) CASEWISE' (@lem8057522 _143118 _143154 _143158 _143159 CASEWISE' h1)). Qed.
Lemma lem8057524 {_143118 _143154 _143158 _143159 : Type'} (h1 : term55 _143118 _143154 _143158 _143159) : term55 _143118 _143154 _143158 _143159.
Proof. exact (h1). Qed.
Lemma lem8057525 {_143118 _143154 _143158 _143159 : Type'} (h1 : term55 _143118 _143154 _143158 _143159) : term55 _143118 _143154 _143158 _143159.
Proof. exact (ex_elim (@lem8057524 _143118 _143154 _143158 _143159 h1) (fun CASEWISE' : type1066 _143118 _143154 _143158 _143159 => fun h0 : term56 _143118 _143154 _143158 _143159 CASEWISE' => @lem8057523 _143118 _143154 _143158 _143159 CASEWISE' h0)). Qed.
Lemma lem8057526 {_143118 _143154 _143158 _143159 : Type'} : (term55 _143118 _143154 _143158 _143159) = (term55 _143118 _143154 _143158 _143159).
Proof. exact (prop_ext (fun h1 : term55 _143118 _143154 _143158 _143159 => @lem8057525 _143118 _143154 _143158 _143159 h1) (fun h1 : term55 _143118 _143154 _143158 _143159 => @lem8057519 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8057527 {_143118 _143154 _143158 _143159 : Type'} : term55 _143118 _143154 _143158 _143159.
Proof. exact (EQ_MP (@lem8057526 _143118 _143154 _143158 _143159) (@lem8057519 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8057528 {_143118 _143154 _143158 _143159 : Type'} : term57 _143118 _143154 _143158 _143159.
Proof. exact (fun _106222 : type1669 => @lem8057527 _143118 _143154 _143158 _143159). Qed.
Lemma lem8057529 {A B : Type'} (P : type1413 A B) : term58 A B P.
Proof. exact (@lem13546 A B P). Qed.
Lemma lem8057530 {A B : Type'} (P : type1413 A B) : (term58 A B P) = ((term59 A B P) = (term60 A B P)).
Proof. exact (eq_refl (term58 A B P)). Qed.
Lemma lem8057533 {A B : Type'} (P : type1413 A B) : (term59 A B P) = (term60 A B P).
Proof. exact (EQ_MP (@lem8057530 A B P) (@lem8057529 A B P)). Qed.
Lemma lem8057534 {_143118 _143154 _143158 _143159 : Type'} (P : type1243 _143118 _143154 _143158 _143159) : (term61 _143118 _143154 _143158 _143159 P) = (term62 _143118 _143154 _143158 _143159 P).
Proof. exact (@lem8057533 type1669 (type1066 _143118 _143154 _143158 _143159) P). Qed.
Lemma lem8057535 {_143118 _143154 _143158 _143159 : Type'} : (term63 _143118 _143154 _143158 _143159) = (term64 _143118 _143154 _143158 _143159).
Proof. exact (@lem8057534 _143118 _143154 _143158 _143159 (term65 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8057536 {_143118 _143154 _143158 _143159 : Type'} (_106222 : type1669) : (term66 _143118 _143154 _143158 _143159 _106222) = (term56 _143118 _143154 _143158 _143159).
Proof. exact (eq_refl (term66 _143118 _143154 _143158 _143159 _106222)). Qed.
Lemma lem8057537 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) : CASEWISE' = CASEWISE'.
Proof. exact (eq_refl CASEWISE'). Qed.
Lemma lem8057538 {_143118 _143154 _143158 _143159 : Type'} (_106222 : type1669) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) : (term67 _143118 _143154 _143158 _143159 _106222 CASEWISE') = (term68 _143118 _143154 _143158 _143159 CASEWISE').
Proof. exact (MK_COMB (@lem8057536 _143118 _143154 _143158 _143159 _106222) (@lem8057537 _143118 _143154 _143158 _143159 CASEWISE')). Qed.
Lemma lem8057539 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1066 _143118 _143154 _143158 _143159) : (term68 _143118 _143154 _143158 _143159 CASEWISE') = (term28 _143118 _143154 _143158 _143159 CASEWISE').
Proof. exact (eq_refl (term68 _143118 _143154 _143158 _143159 CASEWISE')). Qed.
Lemma lem8057540 {_143118 _143154 _143158 _143159 : Type'} (_106222 : type1669) (CASEWISE' : type1066 _143118 _143154 _143158 _143159) : (term67 _143118 _143154 _143158 _143159 _106222 CASEWISE') = (term28 _143118 _143154 _143158 _143159 CASEWISE').
Proof. exact (TRANS (@lem8057538 _143118 _143154 _143158 _143159 _106222 CASEWISE') (@lem8057539 _143118 _143154 _143158 _143159 CASEWISE')). Qed.
Lemma lem8057541 {_143118 _143154 _143158 _143159 : Type'} (_106222 : type1669) : (term69 _143118 _143154 _143158 _143159 _106222) = (term56 _143118 _143154 _143158 _143159).
Proof. exact (fun_ext (fun CASEWISE' : type1066 _143118 _143154 _143158 _143159 => @lem8057540 _143118 _143154 _143158 _143159 _106222 CASEWISE')). Qed.
Lemma lem8057542 {_143118 _143154 _143158 _143159 : Type'} : (@ex ((list (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) -> _143159 -> _143158 -> _143118)) = (@ex ((list (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) -> _143159 -> _143158 -> _143118)).
Proof. exact (eq_refl (@ex ((list (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) -> _143159 -> _143158 -> _143118))). Qed.
Lemma lem8057543 {_143118 _143154 _143158 _143159 : Type'} (_106222 : type1669) : (term70 _143118 _143154 _143158 _143159 _106222) = (term55 _143118 _143154 _143158 _143159).
Proof. exact (MK_COMB (@lem8057542 _143118 _143154 _143158 _143159) (@lem8057541 _143118 _143154 _143158 _143159 _106222)). Qed.
Lemma lem8057544 {_143118 _143154 _143158 _143159 : Type'} : (term71 _143118 _143154 _143158 _143159) = (term72 _143118 _143154 _143158 _143159).
Proof. exact (fun_ext (fun _106222 : type1669 => @lem8057543 _143118 _143154 _143158 _143159 _106222)). Qed.
Lemma lem8057545 : (@all (prod nat (prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))))) = (@all (prod nat (prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))))).
Proof. exact (eq_refl (@all (prod nat (prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))))))). Qed.
Lemma lem8057546 {_143118 _143154 _143158 _143159 : Type'} : (term63 _143118 _143154 _143158 _143159) = (term57 _143118 _143154 _143158 _143159).
Proof. exact (MK_COMB (@lem8057545) (@lem8057544 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8057547 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8057548 {_143118 _143154 _143158 _143159 : Type'} : (term73 _143118 _143154 _143158 _143159) = (term74 _143118 _143154 _143158 _143159).
Proof. exact (MK_COMB (@lem8057547) (@lem8057546 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8057549 {_143118 _143154 _143158 _143159 : Type'} (_106222 : type1669) : (term66 _143118 _143154 _143158 _143159 _106222) = (term56 _143118 _143154 _143158 _143159).
Proof. exact (eq_refl (term66 _143118 _143154 _143158 _143159 _106222)). Qed.
Lemma lem8057550 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1248 _143118 _143154 _143158 _143159) (_106222 : type1669) : (CASEWISE' _106222) = (CASEWISE' _106222).
Proof. exact (eq_refl (CASEWISE' _106222)). Qed.
Lemma lem8057551 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1248 _143118 _143154 _143158 _143159) (_106222 : type1669) : (term75 _143118 _143154 _143158 _143159 CASEWISE' _106222) = (term76 _143118 _143154 _143158 _143159 CASEWISE' _106222).
Proof. exact (MK_COMB (@lem8057549 _143118 _143154 _143158 _143159 _106222) (@lem8057550 _143118 _143154 _143158 _143159 CASEWISE' _106222)). Qed.
Lemma lem8057552 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1248 _143118 _143154 _143158 _143159) (_106222 : type1669) : (term76 _143118 _143154 _143158 _143159 CASEWISE' _106222) = (term77 _143118 _143154 _143158 _143159 CASEWISE' _106222).
Proof. exact (eq_refl (term76 _143118 _143154 _143158 _143159 CASEWISE' _106222)). Qed.
Lemma lem8057553 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1248 _143118 _143154 _143158 _143159) (_106222 : type1669) : (term75 _143118 _143154 _143158 _143159 CASEWISE' _106222) = (term77 _143118 _143154 _143158 _143159 CASEWISE' _106222).
Proof. exact (TRANS (@lem8057551 _143118 _143154 _143158 _143159 CASEWISE' _106222) (@lem8057552 _143118 _143154 _143158 _143159 CASEWISE' _106222)). Qed.
Lemma lem8057554 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1248 _143118 _143154 _143158 _143159) : (term78 _143118 _143154 _143158 _143159 CASEWISE') = (term79 _143118 _143154 _143158 _143159 CASEWISE').
Proof. exact (fun_ext (fun _106222 : type1669 => @lem8057553 _143118 _143154 _143158 _143159 CASEWISE' _106222)). Qed.
Lemma lem8057555 : (@all (prod nat (prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))))) = (@all (prod nat (prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat)))))))).
Proof. exact (eq_refl (@all (prod nat (prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))))))). Qed.
Lemma lem8057556 {_143118 _143154 _143158 _143159 : Type'} (CASEWISE' : type1248 _143118 _143154 _143158 _143159) : (term80 _143118 _143154 _143158 _143159 CASEWISE') = (term81 _143118 _143154 _143158 _143159 CASEWISE').
Proof. exact (MK_COMB (@lem8057555) (@lem8057554 _143118 _143154 _143158 _143159 CASEWISE')). Qed.
Lemma lem8057557 {_143118 _143154 _143158 _143159 : Type'} : (term82 _143118 _143154 _143158 _143159) = (term83 _143118 _143154 _143158 _143159).
Proof. exact (fun_ext (fun CASEWISE' : type1248 _143118 _143154 _143158 _143159 => @lem8057556 _143118 _143154 _143158 _143159 CASEWISE')). Qed.
Lemma lem8057558 {_143118 _143154 _143158 _143159 : Type'} : (@ex ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))))) -> (list (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) -> _143159 -> _143158 -> _143118)) = (@ex ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))))) -> (list (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) -> _143159 -> _143158 -> _143118)).
Proof. exact (eq_refl (@ex ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))))) -> (list (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) -> _143159 -> _143158 -> _143118))). Qed.
Lemma lem8057559 {_143118 _143154 _143158 _143159 : Type'} : (term64 _143118 _143154 _143158 _143159) = (term84 _143118 _143154 _143158 _143159).
Proof. exact (MK_COMB (@lem8057558 _143118 _143154 _143158 _143159) (@lem8057557 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8057560 {_143118 _143154 _143158 _143159 : Type'} : ((term63 _143118 _143154 _143158 _143159) = (term64 _143118 _143154 _143158 _143159)) = ((term57 _143118 _143154 _143158 _143159) = (term84 _143118 _143154 _143158 _143159)).
Proof. exact (MK_COMB (@lem8057548 _143118 _143154 _143158 _143159) (@lem8057559 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8057561 {_143118 _143154 _143158 _143159 : Type'} : (term57 _143118 _143154 _143158 _143159) = (term84 _143118 _143154 _143158 _143159).
Proof. exact (EQ_MP (@lem8057560 _143118 _143154 _143158 _143159) (@lem8057535 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8057562 {_143118 _143154 _143158 _143159 : Type'} : term84 _143118 _143154 _143158 _143159.
Proof. exact (EQ_MP (@lem8057561 _143118 _143154 _143158 _143159) (@lem8057528 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8057564 {A : Type'} : (@ex A) = (term85 A).
Proof. exact (@lem9261 A (@lem9306 A)). Qed.
Lemma lem8057565 {_143118 _143154 _143158 _143159 : Type'} : (@ex ((prod nat (prod nat (prod nat (prod nat (prod nat (prod nat (prod nat nat))))))) -> (list (prod (_143154 -> _143158) (_143159 -> _143154 -> _143118))) -> _143159 -> _143158 -> _143118)) = (term86 _143118 _143154 _143158 _143159).
Proof. exact (@lem8057564 (type1248 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8057566 {_143118 _143154 _143158 _143159 : Type'} : (term83 _143118 _143154 _143158 _143159) = (term83 _143118 _143154 _143158 _143159).
Proof. exact (eq_refl (term83 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8057567 {_143118 _143154 _143158 _143159 : Type'} : (term84 _143118 _143154 _143158 _143159) = (term87 _143118 _143154 _143158 _143159).
Proof. exact (MK_COMB (@lem8057565 _143118 _143154 _143158 _143159) (@lem8057566 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8057568 {_143118 _143154 _143158 _143159 : Type'} : (term87 _143118 _143154 _143158 _143159) = (term88 _143118 _143154 _143158 _143159).
Proof. exact (eq_refl (term87 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8057569 {_143118 _143154 _143158 _143159 : Type'} : (term84 _143118 _143154 _143158 _143159) = (term88 _143118 _143154 _143158 _143159).
Proof. exact (TRANS (@lem8057567 _143118 _143154 _143158 _143159) (@lem8057568 _143118 _143154 _143158 _143159)). Qed.
Lemma lem8057570 {_143118 _143154 _143158 _143159 : Type'} : term88 _143118 _143154 _143158 _143159.
Proof. exact (EQ_MP (@lem8057569 _143118 _143154 _143158 _143159) (@lem8057562 _143118 _143154 _143158 _143159)). Qed.
