Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_type_abbrevs.
Require Import hol_terms.
Definition term5 (x0 : nat) := @HAS_SIZE nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1)) x0.
Definition term23 (x0 : nat) := ((fun y0 : nat => (@FINITE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) /\ ((@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) = y0)) x0) -> (fun y0 : nat => (@FINITE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) /\ ((@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) = y0)) (S x0).
Definition term47 (a0 : Type') (x0 : a0 -> Prop) := forall y0 : a0, (@IN a0 y0 (@GSPEC a0 (fun y1 : a0 => exists y2 : a0, @SETSPEC a0 y1 (x0 y2) y2))) = (x0 y0).
Definition term64 (x0 : nat) := @INSERT nat x0 (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1)).
Definition term50 (a0 : Type') (x0 : a0 -> Prop) := (fun y0 : a0 -> Prop => forall y1 : a0, (@FINITE a0 (@INSERT a0 y1 y0)) = (@FINITE a0 y0)) x0.
Definition term46 (a0 : Type') (x0 : a0 -> Prop) := (fun y0 : a0 -> Prop => forall y1 : a0, (@IN a0 y1 (@GSPEC a0 (fun y2 : a0 => exists y3 : a0, @SETSPEC a0 y2 (y0 y3) y3))) = (y0 y1)) x0.
Definition term41 := @eq nat (NUMERAL 0).
Definition term87 (x0 : nat) (x1 : Prop) (x2 : nat) := forall y0 : nat, ((@IN nat x0 (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 x0) y2))) = x1) -> (x1 -> (@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 x0) y2))) = x2) -> ((~ x1) -> (S (@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 x0) y2)))) = y0) -> (@COND nat (@IN nat x0 (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 x0) y2))) (@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 x0) y2))) (S (@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 x0) y2))))) = (@COND nat x1 x2 y0).
Definition term22 (x0 : nat) := (@FINITE nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (S x0)) y1))) /\ ((@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (S x0)) y1))) = (S x0)).
Definition term112 (x0 : nat) (x1 : nat) := ((~ False) -> (S (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1)))) = x1) -> (@COND nat (@IN nat x0 (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) (S (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))))) = (@COND nat False x0 x1).
Definition term116 (x0 : nat) := @eq nat (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (S x0)) y1))).
Definition term40 := @eq nat (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1))).
Definition term110 (x0 : nat) := False -> (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) = x0.
Definition term59 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) := @CARD a0 (@INSERT a0 x0 x1).
Definition term82 (x0 : nat) := @CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1)).
Definition term70 (x0 : nat) := @CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (S x0)) y1)).
Definition term39 := @CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)).
Definition term67 (x0 : nat) := @FINITE nat (@INSERT nat x0 (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))).
Definition term104 (x0 : nat) := fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1.
Definition term103 (x0 : nat) := fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 ((fun y2 : nat => Peano.lt y2 x0) y1) y1.
Definition term73 (x0 : nat) := (@FINITE nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) -> (@CARD nat (@INSERT nat x0 (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1)))) = (@COND nat (@IN nat x0 (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) (S (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))))).
Definition term57 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) := (fun y0 : a0 -> Prop => (@FINITE a0 y0) -> (@CARD a0 (@INSERT a0 x0 y0)) = (@COND nat (@IN a0 x0 y0) (@CARD a0 y0) (S (@CARD a0 y0)))) x1.
Definition term34 := forall y0 : nat, (fun y1 : nat => (@FINITE nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) /\ ((@CARD nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) = y1)) y0.
Definition term9 := fun y0 : nat => (@FINITE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) /\ ((@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) = y0).
Definition term76 (a0 : Type') (x0 : Prop) (x1 : a0) (x2 : a0) (x3 : Prop) (x4 : a0) := forall y0 : a0, (x0 = x3) -> (x3 -> x1 = x4) -> ((~ x3) -> x2 = y0) -> (@COND a0 x0 x1 x2) = (@COND a0 x3 x4 y0).
Definition term74 (x0 : nat) := @COND nat (@IN nat x0 (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) (S (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1)))).
Definition term111 (x0 : nat) (x1 : nat) := (False -> (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) = x0) -> ((~ False) -> (S (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1)))) = x1) -> (@COND nat (@IN nat x0 (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) (S (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))))) = (@COND nat False x0 x1).
Definition term29 := ((fun y0 : nat => (@FINITE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) /\ ((@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) = y0)) (NUMERAL 0)) /\ (forall y0 : nat, ((fun y1 : nat => (@FINITE nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) /\ ((@CARD nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) = y1)) y0) -> (fun y1 : nat => (@FINITE nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) /\ ((@CARD nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) = y1)) (S y0)).
Definition term72 (x0 : nat) (x1 : nat -> Prop) := (@FINITE nat x1) -> (@CARD nat (@INSERT nat x0 x1)) = (@COND nat (@IN nat x0 x1) (@CARD nat x1) (S (@CARD nat x1))).
Definition term58 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) := (@FINITE a0 x1) -> (@CARD a0 (@INSERT a0 x0 x1)) = (@COND nat (@IN a0 x0 x1) (@CARD a0 x1) (S (@CARD a0 x1))).
Definition term52 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0) := (fun y0 : a0 => (@FINITE a0 (@INSERT a0 y0 x0)) = (@FINITE a0 x0)) x1.
Definition term13 := (((fun y0 : nat => (@FINITE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) /\ ((@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) = y0)) (NUMERAL 0)) /\ (forall y0 : nat, ((fun y1 : nat => (@FINITE nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) /\ ((@CARD nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) = y1)) y0) -> (fun y1 : nat => (@FINITE nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) /\ ((@CARD nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) = y1)) (S y0))) -> forall y0 : nat, (fun y1 : nat => (@FINITE nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) /\ ((@CARD nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) = y1)) y0.
Definition term107 (x0 : nat) := @eq Prop (@IN nat x0 (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))).
Definition term106 (x0 : nat) := @eq Prop (@IN nat x0 (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 ((fun y2 : nat => Peano.lt y2 x0) y1) y1))).
Definition term55 (a0 : Type') (x0 : a0) := (fun y0 : a0 => forall y1 : a0 -> Prop, (@FINITE a0 y1) -> (@CARD a0 (@INSERT a0 y0 y1)) = (@COND nat (@IN a0 y0 y1) (@CARD a0 y1) (S (@CARD a0 y1)))) x0.
Definition term12 (x0 : nat -> Prop) := ((x0 (NUMERAL 0)) /\ (forall y0 : nat, (x0 y0) -> x0 (S y0))) -> forall y0 : nat, x0 y0.
Definition term31 := imp (((fun y0 : nat => (@FINITE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) /\ ((@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) = y0)) (NUMERAL 0)) /\ (forall y0 : nat, ((fun y1 : nat => (@FINITE nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) /\ ((@CARD nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) = y1)) y0) -> (fun y1 : nat => (@FINITE nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) /\ ((@CARD nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) = y1)) (S y0))).
Definition term26 := fun y0 : nat => ((@FINITE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) /\ ((@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) = y0)) -> (@FINITE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2))) /\ ((@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2))) = (S y0)).
Definition term24 (x0 : nat) := ((@FINITE nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) /\ ((@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) = x0)) -> (@FINITE nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (S x0)) y1))) /\ ((@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (S x0)) y1))) = (S x0)).
Definition term27 := forall y0 : nat, ((fun y1 : nat => (@FINITE nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) /\ ((@CARD nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) = y1)) y0) -> (fun y1 : nat => (@FINITE nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) /\ ((@CARD nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) = y1)) (S y0).
Definition term8 := fun y0 : nat => @HAS_SIZE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) y0.
Definition term97 (x0 : nat) (x1 : nat) (x2 : nat) := @SETSPEC nat x0 ((fun y0 : nat => Peano.lt y0 x1) x2) x2.
Definition term113 (x0 : nat) := (~ False) -> (S (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1)))) = (S x0).
Definition term98 (x0 : nat) (x1 : nat) (x2 : nat) := @SETSPEC nat x0 (Peano.lt x2 x1) x2.
Definition term49 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) := @IN a0 x0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 (x1 y1) y1)).
Definition term16 := and ((fun y0 : nat => (@FINITE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) /\ ((@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) = y0)) (NUMERAL 0)).
Definition term95 (x0 : nat) (x1 : nat) (x2 : nat) := @SETSPEC nat x0 ((fun y0 : nat => Peano.lt y0 x1) x2).
Definition term71 (x0 : nat) := @CARD nat (@INSERT nat x0 (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))).
Definition term93 (x0 : nat) := fun y0 : nat => Peano.lt y0 x0.
Definition term25 := fun y0 : nat => ((fun y1 : nat => (@FINITE nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) /\ ((@CARD nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) = y1)) y0) -> (fun y1 : nat => (@FINITE nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) /\ ((@CARD nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) = y1)) (S y0).
Definition term2 (a0 : Type') (x0 : a0 -> Prop) (x1 : nat) := (fun y0 : nat => (@HAS_SIZE a0 x0 y0) = ((@FINITE a0 x0) /\ ((@CARD a0 x0) = y0))) x1.
Definition term30 := ((@FINITE nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1))) /\ ((@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1))) = (NUMERAL 0))) /\ (forall y0 : nat, ((@FINITE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) /\ ((@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) = y0)) -> (@FINITE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2))) /\ ((@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2))) = (S y0))).
Definition term15 := (@FINITE nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1))) /\ ((@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1))) = (NUMERAL 0)).
Definition term44 (x0 : nat) := (~ (Peano.lt x0 x0)) -> (Peano.lt x0 x0) = False.
Definition term56 (a0 : Type') (x0 : a0) := forall y0 : a0 -> Prop, (@FINITE a0 y0) -> (@CARD a0 (@INSERT a0 x0 y0)) = (@COND nat (@IN a0 x0 y0) (@CARD a0 y0) (S (@CARD a0 y0))).
Definition term85 (x0 : nat) (x1 : Prop) := forall y0 : nat, forall y1 : nat, ((@IN nat x0 (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 x0) y3))) = x1) -> (x1 -> (@CARD nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 x0) y3))) = y0) -> ((~ x1) -> (S (@CARD nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 x0) y3)))) = y1) -> (@COND nat (@IN nat x0 (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 x0) y3))) (@CARD nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 x0) y3))) (S (@CARD nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 x0) y3))))) = (@COND nat x1 y0 y1).
Definition term114 (x0 : nat) := ((~ False) -> (S (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1)))) = (S x0)) -> (@COND nat (@IN nat x0 (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) (S (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))))) = (@COND nat False x0 (S x0)).
Definition term62 (x0 : nat) := (fun y0 : nat => (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) = (@INSERT nat y0 (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)))) x0.
Definition term68 (x0 : nat) (x1 : nat -> Prop) := @FINITE nat (@INSERT nat x0 x1).
Definition term86 (x0 : nat) (x1 : Prop) (x2 : nat) := (fun y0 : nat => forall y1 : nat, ((@IN nat x0 (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 x0) y3))) = x1) -> (x1 -> (@CARD nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 x0) y3))) = y0) -> ((~ x1) -> (S (@CARD nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 x0) y3)))) = y1) -> (@COND nat (@IN nat x0 (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 x0) y3))) (@CARD nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 x0) y3))) (S (@CARD nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 x0) y3))))) = (@COND nat x1 y0 y1)) x2.
Definition term18 (x0 : nat) := (fun y0 : nat => (@FINITE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) /\ ((@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) = y0)) x0.
Definition term109 (x0 : nat) (x1 : nat) (x2 : nat) := (False -> (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) = x1) -> ((~ False) -> (S (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1)))) = x2) -> (@COND nat (@IN nat x0 (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) (S (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))))) = (@COND nat False x1 x2).
Definition term66 (x0 : nat) := @FINITE nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (S x0)) y1)).
Definition term65 (x0 : nat) := @FINITE nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1)).
Definition term37 := @FINITE nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)).
Definition term94 (x0 : nat) (x1 : nat) := (fun y0 : nat => Peano.lt y0 x0) x1.
Definition term60 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) := @COND nat (@IN a0 x0 x1) (@CARD a0 x1) (S (@CARD a0 x1)).
Definition term0 (a0 : Type') (x0 : a0 -> Prop) := (fun y0 : a0 -> Prop => forall y1 : nat, (@HAS_SIZE a0 y0 y1) = ((@FINITE a0 y0) /\ ((@CARD a0 y0) = y1))) x0.
Definition term53 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) := @FINITE a0 (@INSERT a0 x0 x1).
Definition term43 (x0 : nat) := ~ (Peano.lt x0 x0).
Definition term88 (x0 : nat) (x1 : Prop) (x2 : nat) (x3 : nat) := (fun y0 : nat => ((@IN nat x0 (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 x0) y2))) = x1) -> (x1 -> (@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 x0) y2))) = x2) -> ((~ x1) -> (S (@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 x0) y2)))) = y0) -> (@COND nat (@IN nat x0 (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 x0) y2))) (@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 x0) y2))) (S (@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 x0) y2))))) = (@COND nat x1 x2 y0)) x3.
Definition term35 := (((@FINITE nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1))) /\ ((@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1))) = (NUMERAL 0))) /\ (forall y0 : nat, ((@FINITE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) /\ ((@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) = y0)) -> (@FINITE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2))) /\ ((@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2))) = (S y0)))) -> forall y0 : nat, (@FINITE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) /\ ((@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) = y0).
Definition term102 (x0 : nat) (x1 : nat) := exists y0 : nat, @SETSPEC nat x0 (Peano.lt y0 x1) y0.
Definition term20 (x0 : nat) := imp ((@FINITE nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) /\ ((@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) = x0)).
Definition term4 (x0 : nat -> Prop) (x1 : nat) := (@FINITE nat x0) /\ ((@CARD nat x0) = x1).
Definition term3 (a0 : Type') (x0 : a0 -> Prop) (x1 : nat) := (@FINITE a0 x0) /\ ((@CARD a0 x0) = x1).
Definition term80 (x0 : nat) := forall y0 : Prop, forall y1 : nat, forall y2 : nat, ((@IN nat x0 (@GSPEC nat (fun y3 : nat => exists y4 : nat, @SETSPEC nat y3 (Peano.lt y4 x0) y4))) = y0) -> (y0 -> (@CARD nat (@GSPEC nat (fun y3 : nat => exists y4 : nat, @SETSPEC nat y3 (Peano.lt y4 x0) y4))) = y1) -> ((~ y0) -> (S (@CARD nat (@GSPEC nat (fun y3 : nat => exists y4 : nat, @SETSPEC nat y3 (Peano.lt y4 x0) y4)))) = y2) -> (@COND nat (@IN nat x0 (@GSPEC nat (fun y3 : nat => exists y4 : nat, @SETSPEC nat y3 (Peano.lt y4 x0) y4))) (@CARD nat (@GSPEC nat (fun y3 : nat => exists y4 : nat, @SETSPEC nat y3 (Peano.lt y4 x0) y4))) (S (@CARD nat (@GSPEC nat (fun y3 : nat => exists y4 : nat, @SETSPEC nat y3 (Peano.lt y4 x0) y4))))) = (@COND nat y0 y1 y2).
Definition term79 (x0 : Prop) (x1 : nat) (x2 : nat) := forall y0 : Prop, forall y1 : nat, forall y2 : nat, (x0 = y0) -> (y0 -> x1 = y1) -> ((~ y0) -> x2 = y2) -> (@COND nat x0 x1 x2) = (@COND nat y0 y1 y2).
Definition term78 (a0 : Type') (x0 : Prop) (x1 : a0) (x2 : a0) := forall y0 : Prop, forall y1 : a0, forall y2 : a0, (x0 = y0) -> (y0 -> x1 = y1) -> ((~ y0) -> x2 = y2) -> (@COND a0 x0 x1 x2) = (@COND a0 y0 y1 y2).
Definition term14 := (fun y0 : nat => (@FINITE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) /\ ((@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) = y0)) (NUMERAL 0).
Definition term48 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0) := (fun y0 : a0 => (@IN a0 y0 (@GSPEC a0 (fun y1 : a0 => exists y2 : a0, @SETSPEC a0 y1 (x0 y2) y2))) = (x0 y0)) x1.
Definition term117 (x0 : nat) := @eq nat (S x0).
Definition term96 (x0 : nat) (x1 : nat) (x2 : nat) := @SETSPEC nat x0 (Peano.lt x1 x2).
Definition term83 (x0 : nat) := S (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))).
Definition term115 (x0 : nat) := @COND nat False x0 (S x0).
Definition term100 (x0 : nat) (x1 : nat) := fun y0 : nat => @SETSPEC nat x0 (Peano.lt y0 x1) y0.
Definition term77 (a0 : Type') (x0 : Prop) (x1 : a0) (x2 : a0) (x3 : Prop) := forall y0 : a0, forall y1 : a0, (x0 = x3) -> (x3 -> x1 = y0) -> ((~ x3) -> x2 = y1) -> (@COND a0 x0 x1 x2) = (@COND a0 x3 y0 y1).
Definition term84 (x0 : nat) (x1 : Prop) := (fun y0 : Prop => forall y1 : nat, forall y2 : nat, ((@IN nat x0 (@GSPEC nat (fun y3 : nat => exists y4 : nat, @SETSPEC nat y3 (Peano.lt y4 x0) y4))) = y0) -> (y0 -> (@CARD nat (@GSPEC nat (fun y3 : nat => exists y4 : nat, @SETSPEC nat y3 (Peano.lt y4 x0) y4))) = y1) -> ((~ y0) -> (S (@CARD nat (@GSPEC nat (fun y3 : nat => exists y4 : nat, @SETSPEC nat y3 (Peano.lt y4 x0) y4)))) = y2) -> (@COND nat (@IN nat x0 (@GSPEC nat (fun y3 : nat => exists y4 : nat, @SETSPEC nat y3 (Peano.lt y4 x0) y4))) (@CARD nat (@GSPEC nat (fun y3 : nat => exists y4 : nat, @SETSPEC nat y3 (Peano.lt y4 x0) y4))) (S (@CARD nat (@GSPEC nat (fun y3 : nat => exists y4 : nat, @SETSPEC nat y3 (Peano.lt y4 x0) y4))))) = (@COND nat y0 y1 y2)) x1.
Definition term11 := forall y0 : nat, (@FINITE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) /\ ((@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) = y0).
Definition term42 (x0 : nat) := (fun y0 : nat => ~ (Peano.lt y0 y0)) x0.
Definition term1 (a0 : Type') (x0 : a0 -> Prop) := forall y0 : nat, (@HAS_SIZE a0 x0 y0) = ((@FINITE a0 x0) /\ ((@CARD a0 x0) = y0)).
Definition term21 (x0 : nat) := (fun y0 : nat => (@FINITE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) /\ ((@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) = y0)) (S x0).
Definition term91 (x0 : nat) := @IN nat x0 (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 ((fun y2 : nat => Peano.lt y2 x0) y1) y1)).
Definition term90 (x0 : nat) (x1 : nat -> Prop) := @IN nat x0 (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (x1 y1) y1)).
Definition term81 (x0 : nat) := @IN nat x0 (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1)).
Definition term108 (x0 : nat) (x1 : nat) (x2 : nat) := ((@IN nat x0 (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) = False) -> (False -> (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) = x1) -> ((~ False) -> (S (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1)))) = x2) -> (@COND nat (@IN nat x0 (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) (S (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))))) = (@COND nat False x1 x2).
Definition term32 := imp (((@FINITE nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1))) /\ ((@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1))) = (NUMERAL 0))) /\ (forall y0 : nat, ((@FINITE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) /\ ((@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) = y0)) -> (@FINITE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2))) /\ ((@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2))) = (S y0)))).
Definition term10 := forall y0 : nat, @HAS_SIZE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) y0.
Definition term6 (x0 : nat) := (@FINITE nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) /\ ((@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) = x0).
Definition term28 := forall y0 : nat, ((@FINITE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) /\ ((@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) = y0)) -> (@FINITE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2))) /\ ((@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2))) = (S y0)).
Definition term101 (x0 : nat) (x1 : nat) := exists y0 : nat, @SETSPEC nat x0 ((fun y1 : nat => Peano.lt y1 x1) y0) y0.
Definition term19 (x0 : nat) := imp ((fun y0 : nat => (@FINITE nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) /\ ((@CARD nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))) = y0)) x0).
Definition term51 (a0 : Type') (x0 : a0 -> Prop) := forall y0 : a0, (@FINITE a0 (@INSERT a0 y0 x0)) = (@FINITE a0 x0).
Definition term99 (x0 : nat) (x1 : nat) := fun y0 : nat => @SETSPEC nat x0 ((fun y1 : nat => Peano.lt y1 x1) y0) y0.
Definition term69 (x0 : nat) := and (@FINITE nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (S x0)) y1))).
Definition term38 := and (@FINITE nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1))).
Definition term92 (x0 : nat) := (fun y0 : nat => Peano.lt y0 x0) x0.
Definition term54 (a0 : Type') := forall y0 : a0, forall y1 : a0 -> Prop, (@FINITE a0 y1) -> (@CARD a0 (@INSERT a0 y0 y1)) = (@COND nat (@IN a0 y0 y1) (@CARD a0 y1) (S (@CARD a0 y1))).
Definition term75 (a0 : Type') (x0 : Prop) (x1 : a0) (x2 : a0) (x3 : Prop) (x4 : a0) (x5 : a0) := (x0 = x3) -> (x3 -> x1 = x4) -> ((~ x3) -> x2 = x5) -> (@COND a0 x0 x1 x2) = (@COND a0 x3 x4 x5).
Definition term45 (a0 : Type') := forall y0 : a0 -> Prop, forall y1 : a0, (@IN a0 y1 (@GSPEC a0 (fun y2 : a0 => exists y3 : a0, @SETSPEC a0 y2 (y0 y3) y3))) = (y0 y1).
Definition term89 (x0 : nat) (x1 : Prop) (x2 : nat) (x3 : nat) := ((@IN nat x0 (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) = x1) -> (x1 -> (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) = x2) -> ((~ x1) -> (S (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1)))) = x3) -> (@COND nat (@IN nat x0 (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))) (S (@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1))))) = (@COND nat x1 x2 x3).
Definition term17 := and ((@FINITE nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1))) /\ ((@CARD nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1))) = (NUMERAL 0))).
Definition term105 (x0 : nat) := @GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 ((fun y2 : nat => Peano.lt y2 x0) y1) y1).
Definition term63 (x0 : nat) := @GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (S x0)) y1).
Definition term36 := @GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1).
Definition term7 (x0 : nat) := @GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1).
Definition term61 := forall y0 : nat, (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) = (@INSERT nat y0 (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2))).
Definition term33 := fun y0 : nat => (fun y1 : nat => (@FINITE nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) /\ ((@CARD nat (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3))) = y1)) y0.
