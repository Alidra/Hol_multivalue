Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_terms.
Require Import hol_axioms.
Require Import hol_type_abbrevs.
Require Import RECURSION_CASEWISE_term_abbrevs.
Require Import CASEWISE_WORKS_spec.
Require Import DISJ_ACI_spec.
Require Import DISJ_ASSOC_spec.
Require Import IMP_CONJ_spec.
Require Import MONO_EXISTS_spec.
Require Import WF_REC_CASES_spec.
Require Import tailadmissible_spec.
Require Import thm0_spec.
Require Import thm10578_spec.
Require Import thm10597_spec.
Require Import thm16474_spec.
Require Import thm17045_spec.
Require Import thm17265_spec.
Require Import thm17362_spec.
Require Import thm17784_spec.
Require Import thm1809_spec.
Require Import thm1810_spec.
Require Import thm1815_spec.
Require Import thm1816_spec.
Require Import thm1820_spec.
Require Import thm18392_spec.
Require Import thm18898_spec.
Require Import thm18899_spec.
Require Import thm18904_spec.
Require Import thm18905_spec.
Require Import thm18910_spec.
Require Import thm18911_spec.
Require Import thm18922_spec.
Require Import thm18923_spec.
Require Import thm18952_spec.
Require Import thm18953_spec.
Require Import thm19699_spec.
Require Import thm19792_spec.
Require Import thm20230_spec.
Require Import thm20661_spec.
Require Import thm20662_spec.
Require Import thm20664_spec.
Require Import thm20665_spec.
Require Import thm20668_spec.
Require Import thm20682_spec.
Require Import thm20764_spec.
Require Import thm20780_spec.
Require Import thm20789_spec.
Require Import thm20895_spec.
Require Import thm21021_spec.
Require Import thm21028_spec.
Require Import thm21107_spec.
Require Import thm21114_spec.
Require Import thm21182_spec.
Require Import thm69_spec.
Require Import thm7_spec.
Require Import thm892_spec.
Lemma lem8390589 {A B P : Type'} (lt2 : type1402 A) : term0 A B P lt2.
Proof. exact (@lem8094644 A B P lt2). Qed.
Lemma lem8390590 {A B P : Type'} (lt2 : type1402 A) : (term0 A B P lt2) = (term1 A B P lt2).
Proof. exact (eq_refl (term0 A B P lt2)). Qed.
Lemma lem8390591 {A B P : Type'} (lt2 : type1402 A) : term1 A B P lt2.
Proof. exact (EQ_MP (@lem8390590 A B P lt2) (@lem8390589 A B P lt2)). Qed.
Lemma lem8390592 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) : term2 A B P lt2 s.
Proof. exact (@lem8390591 A B P lt2 s). Qed.
Lemma lem8390593 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) : (term2 A B P lt2 s) = (term3 A B P lt2 s).
Proof. exact (eq_refl (term2 A B P lt2 s)). Qed.
Lemma lem8390594 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) : term3 A B P lt2 s.
Proof. exact (EQ_MP (@lem8390593 A B P lt2 s) (@lem8390592 A B P lt2 s)). Qed.
Lemma lem8390595 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : term4 A B P lt2 s p.
Proof. exact (@lem8390594 A B P lt2 s p). Qed.
Lemma lem8390596 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : (term4 A B P lt2 s p) = (term5 A B P lt2 s p).
Proof. exact (eq_refl (term4 A B P lt2 s p)). Qed.
Lemma lem8390597 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) : term5 A B P lt2 s p.
Proof. exact (EQ_MP (@lem8390596 A B P lt2 s p) (@lem8390595 A B P lt2 s p)). Qed.
Lemma lem8390598 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (t : type558 A B P) : term6 A B P lt2 s p t.
Proof. exact (@lem8390597 A B P lt2 s p t). Qed.
Lemma lem8390599 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (t : type558 A B P) : (term6 A B P lt2 s p t) = ((@tailadmissible A B P lt2 p s t) = (term7 A B P lt2 s p t)).
Proof. exact (eq_refl (term6 A B P lt2 s p t)). Qed.
Lemma lem8390601 {A B P : Type'} (lt2 : type1402 A) : term8 A B P lt2.
Proof. exact (@lem8390588 A B P lt2). Qed.
Lemma lem8390602 {A B P : Type'} (lt2 : type1402 A) : (term8 A B P lt2) = (term9 A B P lt2).
Proof. exact (eq_refl (term8 A B P lt2)). Qed.
Lemma lem8390603 {A B P : Type'} (lt2 : type1402 A) : term9 A B P lt2.
Proof. exact (EQ_MP (@lem8390602 A B P lt2) (@lem8390601 A B P lt2)). Qed.
Lemma lem8390604 {A B P : Type'} (lt2 : type1402 A) (clauses : type1635 A B P) : term10 A B P lt2 clauses.
Proof. exact (@lem8390603 A B P lt2 clauses). Qed.
Lemma lem8390605 {A B P : Type'} (lt2 : type1402 A) (clauses : type1635 A B P) : (term10 A B P lt2 clauses) = (term11 A B P lt2 clauses).
Proof. exact (eq_refl (term10 A B P lt2 clauses)). Qed.
Lemma lem8390606 {A B P : Type'} (lt2 : type1402 A) (clauses : type1635 A B P) : term11 A B P lt2 clauses.
Proof. exact (EQ_MP (@lem8390605 A B P lt2 clauses) (@lem8390604 A B P lt2 clauses)). Qed.
Lemma lem8390607 {A B P : Type'} (lt2 : type1402 A) (clauses : type1635 A B P) : (term11 A B P lt2 clauses) = ((term11 A B P lt2 clauses) = True).
Proof. exact (@lem7 (term11 A B P lt2 clauses)). Qed.
Lemma lem8390630 {A B P : Type'} (lt2 : type1402 A) (s : P -> A) (p : type560 A B P) (t : type558 A B P) : (@tailadmissible A B P lt2 p s t) = (term7 A B P lt2 s p t).
Proof. exact (EQ_MP (@lem8390599 A B P lt2 s p t) (@lem8390598 A B P lt2 s p t)). Qed.
Lemma lem8390631 {_146622 A B : Type'} (lt2 : type1402 A) (s : _146622 -> A) (p : type814 _146622 A B) (t : type813 _146622 A B) : (@tailadmissible A B _146622 lt2 p s t) = (term12 _146622 A B lt2 s p t).
Proof. exact (@lem8390630 A B _146622 lt2 s p t). Qed.
Lemma lem8390632 {_146622 A B : Type'} (lt2 : type1402 A) (s : _146622 -> A) (t : type813 _146622 A B) : (term13 _146622 A B lt2 s t) = (term14 _146622 A B lt2 s t).
Proof. exact (@lem8390631 _146622 A B lt2 s (term15 _146622 A B) t). Qed.
Lemma lem8390708 {A B : Type'} (f : A -> B) (y : A) : (term16 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8390709 {_146622 A B : Type'} (f : type814 _146622 A B) (y : A -> B) : (term17 _146622 A B f y) = (f y).
Proof. exact (@lem8390708 (A -> B) (_146622 -> Prop) f y). Qed.
Lemma lem8390710 {_146622 A B : Type'} (f : A -> B) : (term18 _146622 A B f) = (term19 _146622 A B f).
Proof. exact (@lem8390709 _146622 A B (term15 _146622 A B) f). Qed.
Lemma lem8390711 {_146622 A B : Type'} (f : A -> B) : (term19 _146622 A B f) = (term20 _146622).
Proof. exact (eq_refl (term19 _146622 A B f)). Qed.
Lemma lem8390712 {_146622 A B : Type'} : (term21 _146622 A B) = (term15 _146622 A B).
Proof. exact (fun_ext (fun f : A -> B => @lem8390711 _146622 A B f)). Qed.
Lemma lem8390713 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8390714 {_146622 A B : Type'} (f : A -> B) : (term18 _146622 A B f) = (term19 _146622 A B f).
Proof. exact (MK_COMB (@lem8390712 _146622 A B) (@lem8390713 A B f)). Qed.
Lemma lem8390715 {_146622 : Type'} : (@eq (_146622 -> Prop)) = (@eq (_146622 -> Prop)).
Proof. exact (eq_refl (@eq (_146622 -> Prop))). Qed.
Lemma lem8390716 {_146622 A B : Type'} (f : A -> B) : (term22 _146622 A B f) = (term23 _146622 A B f).
Proof. exact (MK_COMB (@lem8390715 _146622) (@lem8390714 _146622 A B f)). Qed.
Lemma lem8390717 {_146622 A B : Type'} (f : A -> B) : (term19 _146622 A B f) = (term20 _146622).
Proof. exact (eq_refl (term19 _146622 A B f)). Qed.
Lemma lem8390718 {_146622 A B : Type'} (f : A -> B) : ((term18 _146622 A B f) = (term19 _146622 A B f)) = ((term19 _146622 A B f) = (term20 _146622)).
Proof. exact (MK_COMB (@lem8390716 _146622 A B f) (@lem8390717 _146622 A B f)). Qed.
Lemma lem8390719 {_146622 A B : Type'} (f : A -> B) : (term19 _146622 A B f) = (term20 _146622).
Proof. exact (EQ_MP (@lem8390718 _146622 A B f) (@lem8390710 _146622 A B f)). Qed.
Lemma lem8390720 {_146622 : Type'} (a : _146622) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8390721 {_146622 A B : Type'} (f : A -> B) (a : _146622) : (term24 _146622 A B f a) = (term25 _146622 a).
Proof. exact (MK_COMB (@lem8390719 _146622 A B f) (@lem8390720 _146622 a)). Qed.
Lemma lem8390723 {A B : Type'} (f : A -> B) (y : A) : (term16 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8390724 {_146622 : Type'} (f : _146622 -> Prop) (y : _146622) : (term26 _146622 f y) = (f y).
Proof. exact (@lem8390723 _146622 Prop f y). Qed.
Lemma lem8390725 {_146622 : Type'} (a : _146622) : (term27 _146622 a) = (term25 _146622 a).
Proof. exact (@lem8390724 _146622 (term20 _146622) a). Qed.
Lemma lem8390726 {_146622 : Type'} (a : _146622) : (term25 _146622 a) = True.
Proof. exact (eq_refl (term25 _146622 a)). Qed.
Lemma lem8390727 {_146622 : Type'} : (term28 _146622) = (term20 _146622).
Proof. exact (fun_ext (fun a : _146622 => @lem8390726 _146622 a)). Qed.
Lemma lem8390728 {_146622 : Type'} (a : _146622) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8390729 {_146622 : Type'} (a : _146622) : (term27 _146622 a) = (term25 _146622 a).
Proof. exact (MK_COMB (@lem8390727 _146622) (@lem8390728 _146622 a)). Qed.
Lemma lem8390730 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8390731 {_146622 : Type'} (a : _146622) : (term29 _146622 a) = (term30 _146622 a).
Proof. exact (MK_COMB (@lem8390730) (@lem8390729 _146622 a)). Qed.
Lemma lem8390732 {_146622 : Type'} (a : _146622) : (term25 _146622 a) = True.
Proof. exact (eq_refl (term25 _146622 a)). Qed.
Lemma lem8390733 {_146622 : Type'} (a : _146622) : ((term27 _146622 a) = (term25 _146622 a)) = ((term25 _146622 a) = True).
Proof. exact (MK_COMB (@lem8390731 _146622 a) (@lem8390732 _146622 a)). Qed.
Lemma lem8390734 {_146622 : Type'} (a : _146622) : (term25 _146622 a) = True.
Proof. exact (EQ_MP (@lem8390733 _146622 a) (@lem8390725 _146622 a)). Qed.
Lemma lem8390735 {_146622 A B : Type'} (f : A -> B) (a : _146622) : (term24 _146622 A B f a) = True.
Proof. exact (TRANS (@lem8390721 _146622 A B f a) (@lem8390734 _146622 a)). Qed.
Lemma lem8390736 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8390737 {_146622 A B : Type'} (f : A -> B) (a : _146622) : (term31 _146622 A B f a) = (imp True).
Proof. exact (MK_COMB (@lem8390736) (@lem8390735 _146622 A B f a)). Qed.
Lemma lem8390740 {_146622 A B : Type'} (t : type813 _146622 A B) (P : type814 _146622 A B) (G : type812 _146622 A B) (H : type813 _146622 A B) (f : A -> B) (a : _146622) : ((t f a) = (term32 _146622 A B P G H f a)) = ((t f a) = (term32 _146622 A B P G H f a)).
Proof. exact (eq_refl ((t f a) = (term32 _146622 A B P G H f a))). Qed.
Lemma lem8390741 {_146622 A B : Type'} (t : type813 _146622 A B) (P : type814 _146622 A B) (G : type812 _146622 A B) (H : type813 _146622 A B) (f : A -> B) (a : _146622) : (term33 _146622 A B t P G H f a) = (term34 _146622 A B t P G H f a).
Proof. exact (MK_COMB (@lem8390737 _146622 A B f a) (@lem8390740 _146622 A B t P G H f a)). Qed.
Lemma lem8390743 (t : Prop) : (True -> t) = t.
Proof. exact (proj1 (@lem1820 t)). Qed.
Lemma lem8390744 {_146622 A B : Type'} (t : type813 _146622 A B) (P : type814 _146622 A B) (G : type812 _146622 A B) (H : type813 _146622 A B) (f : A -> B) (a : _146622) : (term34 _146622 A B t P G H f a) = ((t f a) = (term32 _146622 A B P G H f a)).
Proof. exact (@lem8390743 ((t f a) = (term32 _146622 A B P G H f a))). Qed.
Lemma lem8390747 {_146622 A B : Type'} (t : type813 _146622 A B) (P : type814 _146622 A B) (G : type812 _146622 A B) (H : type813 _146622 A B) (f : A -> B) (a : _146622) : (term33 _146622 A B t P G H f a) = ((t f a) = (term32 _146622 A B P G H f a)).
Proof. exact (TRANS (@lem8390741 _146622 A B t P G H f a) (@lem8390744 _146622 A B t P G H f a)). Qed.
Lemma lem8390748 {_146622 A B : Type'} (t : type813 _146622 A B) (P : type814 _146622 A B) (G : type812 _146622 A B) (H : type813 _146622 A B) (f : A -> B) : (term35 _146622 A B t P G H f) = (term36 _146622 A B t P G H f).
Proof. exact (fun_ext (fun a : _146622 => @lem8390747 _146622 A B t P G H f a)). Qed.
Lemma lem8390749 {_146622 : Type'} : (@all _146622) = (@all _146622).
Proof. exact (eq_refl (@all _146622)). Qed.
Lemma lem8390750 {_146622 A B : Type'} (t : type813 _146622 A B) (P : type814 _146622 A B) (G : type812 _146622 A B) (H : type813 _146622 A B) (f : A -> B) : (term37 _146622 A B t P G H f) = (term38 _146622 A B t P G H f).
Proof. exact (MK_COMB (@lem8390749 _146622) (@lem8390748 _146622 A B t P G H f)). Qed.
Lemma lem8390755 {_146622 A B : Type'} (t : type813 _146622 A B) (P : type814 _146622 A B) (G : type812 _146622 A B) (H : type813 _146622 A B) : (term39 _146622 A B t P G H) = (term40 _146622 A B t P G H).
Proof. exact (fun_ext (fun f : A -> B => @lem8390750 _146622 A B t P G H f)). Qed.
Lemma lem8390756 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8390757 {_146622 A B : Type'} (t : type813 _146622 A B) (P : type814 _146622 A B) (G : type812 _146622 A B) (H : type813 _146622 A B) : (term41 _146622 A B t P G H) = (term42 _146622 A B t P G H).
Proof. exact (MK_COMB (@lem8390756 A B) (@lem8390755 _146622 A B t P G H)). Qed.
Lemma lem8390762 {_146622 A B : Type'} (lt2 : type1402 A) (s : _146622 -> A) (P : type814 _146622 A B) (G : type812 _146622 A B) (H : type813 _146622 A B) : (term43 _146622 A B lt2 s P G H) = (term43 _146622 A B lt2 s P G H).
Proof. exact (eq_refl (term43 _146622 A B lt2 s P G H)). Qed.
Lemma lem8390763 {_146622 A B : Type'} (lt2 : type1402 A) (s : _146622 -> A) (t : type813 _146622 A B) (P : type814 _146622 A B) (G : type812 _146622 A B) (H : type813 _146622 A B) : (term44 _146622 A B lt2 s t P G H) = (term45 _146622 A B lt2 s t P G H).
Proof. exact (MK_COMB (@lem8390762 _146622 A B lt2 s P G H) (@lem8390757 _146622 A B t P G H)). Qed.
Lemma lem8390766 {_146622 A B : Type'} (P : type814 _146622 A B) (G : type812 _146622 A B) (lt2 : type1402 A) (s : _146622 -> A) : (term46 _146622 A B P G lt2 s) = (term46 _146622 A B P G lt2 s).
Proof. exact (eq_refl (term46 _146622 A B P G lt2 s)). Qed.
Lemma lem8390767 {_146622 A B : Type'} (lt2 : type1402 A) (s : _146622 -> A) (t : type813 _146622 A B) (P : type814 _146622 A B) (G : type812 _146622 A B) (H : type813 _146622 A B) : (term47 _146622 A B lt2 s t P G H) = (term48 _146622 A B lt2 s t P G H).
Proof. exact (MK_COMB (@lem8390766 _146622 A B P G lt2 s) (@lem8390763 _146622 A B lt2 s t P G H)). Qed.
Lemma lem8390770 {_146622 A B : Type'} (lt2 : type1402 A) (s : _146622 -> A) (t : type813 _146622 A B) (P : type814 _146622 A B) (G : type812 _146622 A B) : (term49 _146622 A B lt2 s t P G) = (term50 _146622 A B lt2 s t P G).
Proof. exact (fun_ext (fun H : type813 _146622 A B => @lem8390767 _146622 A B lt2 s t P G H)). Qed.
Lemma lem8390771 {_146622 A B : Type'} : (@ex ((A -> B) -> _146622 -> B)) = (@ex ((A -> B) -> _146622 -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> _146622 -> B))). Qed.
Lemma lem8390772 {_146622 A B : Type'} (lt2 : type1402 A) (s : _146622 -> A) (t : type813 _146622 A B) (P : type814 _146622 A B) (G : type812 _146622 A B) : (term51 _146622 A B lt2 s t P G) = (term52 _146622 A B lt2 s t P G).
Proof. exact (MK_COMB (@lem8390771 _146622 A B) (@lem8390770 _146622 A B lt2 s t P G)). Qed.
Lemma lem8390777 {_146622 A B : Type'} (lt2 : type1402 A) (s : _146622 -> A) (t : type813 _146622 A B) (P : type814 _146622 A B) : (term53 _146622 A B lt2 s t P) = (term54 _146622 A B lt2 s t P).
Proof. exact (fun_ext (fun G : type812 _146622 A B => @lem8390772 _146622 A B lt2 s t P G)). Qed.
Lemma lem8390778 {_146622 A B : Type'} : (@ex ((A -> B) -> _146622 -> A)) = (@ex ((A -> B) -> _146622 -> A)).
Proof. exact (eq_refl (@ex ((A -> B) -> _146622 -> A))). Qed.
Lemma lem8390779 {_146622 A B : Type'} (lt2 : type1402 A) (s : _146622 -> A) (t : type813 _146622 A B) (P : type814 _146622 A B) : (term55 _146622 A B lt2 s t P) = (term56 _146622 A B lt2 s t P).
Proof. exact (MK_COMB (@lem8390778 _146622 A B) (@lem8390777 _146622 A B lt2 s t P)). Qed.
Lemma lem8390784 {_146622 A B : Type'} (lt2 : type1402 A) (s : _146622 -> A) (t : type813 _146622 A B) : (term57 _146622 A B lt2 s t) = (term58 _146622 A B lt2 s t).
Proof. exact (fun_ext (fun P : type814 _146622 A B => @lem8390779 _146622 A B lt2 s t P)). Qed.
Lemma lem8390785 {_146622 A B : Type'} : (@ex ((A -> B) -> _146622 -> Prop)) = (@ex ((A -> B) -> _146622 -> Prop)).
Proof. exact (eq_refl (@ex ((A -> B) -> _146622 -> Prop))). Qed.
Lemma lem8390786 {_146622 A B : Type'} (lt2 : type1402 A) (s : _146622 -> A) (t : type813 _146622 A B) : (term14 _146622 A B lt2 s t) = (term59 _146622 A B lt2 s t).
Proof. exact (MK_COMB (@lem8390785 _146622 A B) (@lem8390784 _146622 A B lt2 s t)). Qed.
Lemma lem8390791 {_146622 A B : Type'} (lt2 : type1402 A) (s : _146622 -> A) (t : type813 _146622 A B) : (term13 _146622 A B lt2 s t) = (term59 _146622 A B lt2 s t).
Proof. exact (TRANS (@lem8390632 _146622 A B lt2 s t) (@lem8390786 _146622 A B lt2 s t)). Qed.
Lemma lem8390792 {_146622 A B : Type'} (f : type1169 _146622 A B) (s : _146622 -> A) (t : type813 _146622 A B) : (term60 _146622 A B f s t) = (term60 _146622 A B f s t).
Proof. exact (eq_refl (term60 _146622 A B f s t)). Qed.
Lemma lem8390793 {_146622 A B : Type'} (f : type1169 _146622 A B) (lt2 : type1402 A) (s : _146622 -> A) (t : type813 _146622 A B) : (term61 _146622 A B f lt2 s t) = (term62 _146622 A B f lt2 s t).
Proof. exact (MK_COMB (@lem8390792 _146622 A B f s t) (@lem8390791 _146622 A B lt2 s t)). Qed.
Lemma lem8390794 {_146622 A B : Type'} (f : type1169 _146622 A B) (lt2 : type1402 A) (s : _146622 -> A) : (term63 _146622 A B f lt2 s) = (term64 _146622 A B f lt2 s).
Proof. exact (fun_ext (fun t : type813 _146622 A B => @lem8390793 _146622 A B f lt2 s t)). Qed.
Lemma lem8390795 {_146622 A B : Type'} : (@all ((A -> B) -> _146622 -> B)) = (@all ((A -> B) -> _146622 -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> _146622 -> B))). Qed.
Lemma lem8390796 {_146622 A B : Type'} (f : type1169 _146622 A B) (lt2 : type1402 A) (s : _146622 -> A) : (term65 _146622 A B f lt2 s) = (term66 _146622 A B f lt2 s).
Proof. exact (MK_COMB (@lem8390795 _146622 A B) (@lem8390794 _146622 A B f lt2 s)). Qed.
Lemma lem8390801 {_146622 A B : Type'} (f : type1169 _146622 A B) (lt2 : type1402 A) : (term67 _146622 A B f lt2) = (term68 _146622 A B f lt2).
Proof. exact (fun_ext (fun s : _146622 -> A => @lem8390796 _146622 A B f lt2 s)). Qed.
Lemma lem8390802 {_146622 A : Type'} : (@all (_146622 -> A)) = (@all (_146622 -> A)).
Proof. exact (eq_refl (@all (_146622 -> A))). Qed.
Lemma lem8390803 {_146622 A B : Type'} (f : type1169 _146622 A B) (lt2 : type1402 A) : (term69 _146622 A B f lt2) = (term70 _146622 A B f lt2).
Proof. exact (MK_COMB (@lem8390802 _146622 A) (@lem8390801 _146622 A B f lt2)). Qed.
Lemma lem8390808 {_146622 A B : Type'} (lt2 : type1402 A) : (term71 _146622 A B lt2) = (term72 _146622 A B lt2).
Proof. exact (fun_ext (fun f : type1169 _146622 A B => @lem8390803 _146622 A B f lt2)). Qed.
Lemma lem8390809 {_146622 A B : Type'} : (@GABS ((prod (_146622 -> A) ((A -> B) -> _146622 -> B)) -> Prop)) = (@GABS ((prod (_146622 -> A) ((A -> B) -> _146622 -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod (_146622 -> A) ((A -> B) -> _146622 -> B)) -> Prop))). Qed.
Lemma lem8390810 {_146622 A B : Type'} (lt2 : type1402 A) : (term73 _146622 A B lt2) = (term74 _146622 A B lt2).
Proof. exact (MK_COMB (@lem8390809 _146622 A B) (@lem8390808 _146622 A B lt2)). Qed.
Lemma lem8390811 {_146622 A B : Type'} : (@List.Forall (prod (_146622 -> A) ((A -> B) -> _146622 -> B))) = (@List.Forall (prod (_146622 -> A) ((A -> B) -> _146622 -> B))).
Proof. exact (eq_refl (@List.Forall (prod (_146622 -> A) ((A -> B) -> _146622 -> B)))). Qed.
Lemma lem8390812 {_146622 A B : Type'} (lt2 : type1402 A) : (term75 _146622 A B lt2) = (term76 _146622 A B lt2).
Proof. exact (MK_COMB (@lem8390811 _146622 A B) (@lem8390810 _146622 A B lt2)). Qed.
Lemma lem8390813 {_146622 A B : Type'} (clauses : type1632 _146622 A B) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8390814 {_146622 A B : Type'} (lt2 : type1402 A) (clauses : type1632 _146622 A B) : (term77 _146622 A B lt2 clauses) = (term78 _146622 A B lt2 clauses).
Proof. exact (MK_COMB (@lem8390812 _146622 A B lt2) (@lem8390813 _146622 A B clauses)). Qed.
Lemma lem8390815 {A : Type'} (lt2 : type1402 A) : (term79 A lt2) = (term79 A lt2).
Proof. exact (eq_refl (term79 A lt2)). Qed.
Lemma lem8390816 {_146622 A B : Type'} (lt2 : type1402 A) (clauses : type1632 _146622 A B) : (term80 _146622 A B lt2 clauses) = (term81 _146622 A B lt2 clauses).
Proof. exact (MK_COMB (@lem8390815 A lt2) (@lem8390814 _146622 A B lt2 clauses)). Qed.
Lemma lem8390819 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8390820 {_146622 A B : Type'} (lt2 : type1402 A) (clauses : type1632 _146622 A B) : (term82 _146622 A B lt2 clauses) = (term83 _146622 A B lt2 clauses).
Proof. exact (MK_COMB (@lem8390819) (@lem8390816 _146622 A B lt2 clauses)). Qed.
Lemma lem8390831 {_146622 A B : Type'} (clauses : type1632 _146622 A B) : (term84 _146622 A B clauses) = (term84 _146622 A B clauses).
Proof. exact (eq_refl (term84 _146622 A B clauses)). Qed.
Lemma lem8390832 {_146622 A B : Type'} (lt2 : type1402 A) (clauses : type1632 _146622 A B) : (term85 _146622 A B lt2 clauses) = (term86 _146622 A B lt2 clauses).
Proof. exact (MK_COMB (@lem8390820 _146622 A B lt2 clauses) (@lem8390831 _146622 A B clauses)). Qed.
Lemma lem8390834 {A B P : Type'} (lt2 : type1402 A) (clauses : type1635 A B P) : (term11 A B P lt2 clauses) = True.
Proof. exact (EQ_MP (@lem8390607 A B P lt2 clauses) (@lem8390606 A B P lt2 clauses)). Qed.
Lemma lem8390835 {_146622 A B : Type'} (lt2 : type1402 A) (clauses : type1632 _146622 A B) : (term86 _146622 A B lt2 clauses) = True.
Proof. exact (@lem8390834 A B _146622 lt2 clauses). Qed.
Lemma lem8390836 {_146622 A B : Type'} (lt2 : type1402 A) (clauses : type1632 _146622 A B) : (term85 _146622 A B lt2 clauses) = True.
Proof. exact (TRANS (@lem8390832 _146622 A B lt2 clauses) (@lem8390835 _146622 A B lt2 clauses)). Qed.
Lemma lem8390837 {_146622 A B : Type'} (lt2 : type1402 A) : (term87 _146622 A B lt2) = (term88 _146622 A B).
Proof. exact (fun_ext (fun clauses : type1632 _146622 A B => @lem8390836 _146622 A B lt2 clauses)). Qed.
Lemma lem8390838 {_146622 A B : Type'} : (@all (list (prod (_146622 -> A) ((A -> B) -> _146622 -> B)))) = (@all (list (prod (_146622 -> A) ((A -> B) -> _146622 -> B)))).
Proof. exact (eq_refl (@all (list (prod (_146622 -> A) ((A -> B) -> _146622 -> B))))). Qed.
Lemma lem8390839 {_146622 A B : Type'} (lt2 : type1402 A) : (term89 _146622 A B lt2) = (term90 _146622 A B).
Proof. exact (MK_COMB (@lem8390838 _146622 A B) (@lem8390837 _146622 A B lt2)). Qed.
Lemma lem8390841 {A : Type'} (t : Prop) : (term91 A t) = t.
Proof. exact (EQ_MP (@lem1816 A t) (@lem1815 A t)). Qed.
Lemma lem8390842 {_146622 A B : Type'} (t : Prop) : (term92 _146622 A B t) = t.
Proof. exact (@lem8390841 (type1632 _146622 A B) t). Qed.
Lemma lem8390843 {_146622 A B : Type'} : (term90 _146622 A B) = True.
Proof. exact (@lem8390842 _146622 A B True). Qed.
Lemma lem8390844 {_146622 A B : Type'} (lt2 : type1402 A) : (term89 _146622 A B lt2) = True.
Proof. exact (TRANS (@lem8390839 _146622 A B lt2) (@lem8390843 _146622 A B)). Qed.
Lemma lem8390845 {_146622 A B : Type'} : (term93 _146622 A B) = (term94 A).
Proof. exact (fun_ext (fun lt2 : type1402 A => @lem8390844 _146622 A B lt2)). Qed.
Lemma lem8390846 {A : Type'} : (@all (A -> A -> Prop)) = (@all (A -> A -> Prop)).
Proof. exact (eq_refl (@all (A -> A -> Prop))). Qed.
Lemma lem8390847 {_146622 A B : Type'} : (term95 _146622 A B) = (term96 A).
Proof. exact (MK_COMB (@lem8390846 A) (@lem8390845 _146622 A B)). Qed.
Lemma lem8390849 {A : Type'} (t : Prop) : (term91 A t) = t.
Proof. exact (EQ_MP (@lem1816 A t) (@lem1815 A t)). Qed.
Lemma lem8390850 {A : Type'} (t : Prop) : (term97 A t) = t.
Proof. exact (@lem8390849 (type1402 A) t). Qed.
Lemma lem8390851 {A : Type'} : (term96 A) = True.
Proof. exact (@lem8390850 A True). Qed.
Lemma lem8390852 {_146622 A B : Type'} : (term95 _146622 A B) = True.
Proof. exact (TRANS (@lem8390847 _146622 A B) (@lem8390851 A)). Qed.
Lemma lem8390853 {_146622 A B : Type'} : True = (term95 _146622 A B).
Proof. exact (SYM (@lem8390852 _146622 A B)). Qed.
Lemma lem8390854 {_146622 A B : Type'} : term95 _146622 A B.
Proof. exact (EQ_MP (@lem8390853 _146622 A B) (@lem0)). Qed.
Lemma lem8390855 (t1 : Prop) : term98 t1.
Proof. exact (@lem693 t1). Qed.
Lemma lem8390856 (t1 : Prop) : (term98 t1) = (term99 t1).
Proof. exact (eq_refl (term98 t1)). Qed.
Lemma lem8390857 (t1 : Prop) : term99 t1.
Proof. exact (EQ_MP (@lem8390856 t1) (@lem8390855 t1)). Qed.
Lemma lem8390858 (t1 : Prop) (t2 : Prop) : term100 t1 t2.
Proof. exact (@lem8390857 t1 t2). Qed.
Lemma lem8390859 (t1 : Prop) (t2 : Prop) : (term100 t1 t2) = (term101 t1 t2).
Proof. exact (eq_refl (term100 t1 t2)). Qed.
Lemma lem8390860 (t1 : Prop) (t2 : Prop) : term101 t1 t2.
Proof. exact (EQ_MP (@lem8390859 t1 t2) (@lem8390858 t1 t2)). Qed.
Lemma lem8390861 (t1 : Prop) (t2 : Prop) (t3 : Prop) : term102 t1 t2 t3.
Proof. exact (@lem8390860 t1 t2 t3). Qed.
Lemma lem8390862 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term102 t1 t2 t3) = ((term103 t1 t2 t3) = (term104 t1 t2 t3)).
Proof. exact (eq_refl (term102 t1 t2 t3)). Qed.
Lemma lem8390863 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term103 t1 t2 t3) = (term104 t1 t2 t3).
Proof. exact (EQ_MP (@lem8390862 t1 t2 t3) (@lem8390861 t1 t2 t3)). Qed.
Lemma lem8390864 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term104 t1 t2 t3) = (term103 t1 t2 t3).
Proof. exact (SYM (@lem8390863 t1 t2 t3)). Qed.
Lemma lem8390865 {A : Type'} (P : A -> Prop) (Q : A -> Prop) (h1 : term105 A P Q) : term105 A P Q.
Proof. exact (h1). Qed.
Lemma lem8390866 {A : Type'} (P : A -> Prop) (Q : A -> Prop) (h1 : term106 A P Q) : term106 A P Q.
Proof. exact (h1). Qed.
Lemma lem8390867 {A : Type'} (P : A -> Prop) (Q : A -> Prop) (h1 : term106 A P Q) (h2 : term105 A P Q) : term107 A P Q.
Proof. exact (@lem8390865 A P Q h2 (@lem8390866 A P Q h1)). Qed.
Lemma lem8390868 {A : Type'} (P : A -> Prop) (Q : A -> Prop) (h1 : term106 A P Q) : term108 A P Q.
Proof. exact (fun h0 : term105 A P Q => @lem8390867 A P Q h1 h0). Qed.
Lemma lem8390869 {A : Type'} (P : A -> Prop) (Q : A -> Prop) (h1 : term105 A P Q) : term105 A P Q.
Proof. exact (h1). Qed.
Lemma lem8390870 {A : Type'} (P : A -> Prop) (Q : A -> Prop) (h1 : term106 A P Q) (h2 : term105 A P Q) : term107 A P Q.
Proof. exact (@lem8390868 A P Q h1 (@lem8390869 A P Q h2)). Qed.
Lemma lem8390871 {A : Type'} (P : A -> Prop) (Q : A -> Prop) (h1 : term105 A P Q) : term105 A P Q.
Proof. exact (fun h0 : term106 A P Q => @lem8390870 A P Q h0 h1). Qed.
Lemma lem8390872 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : term109 A P Q.
Proof. exact (fun h0 : term105 A P Q => @lem8390871 A P Q h0). Qed.
Lemma lem8390874 {_146622 A B : Type'} (lt2 : type1402 A) : term110 _146622 A B lt2.
Proof. exact (@lem8390854 _146622 A B lt2). Qed.
Lemma lem8390875 {_146622 A B : Type'} (lt2 : type1402 A) : (term110 _146622 A B lt2) = (term89 _146622 A B lt2).
Proof. exact (eq_refl (term110 _146622 A B lt2)). Qed.
Lemma lem8390876 {_146622 A B : Type'} (lt2 : type1402 A) : term89 _146622 A B lt2.
Proof. exact (EQ_MP (@lem8390875 _146622 A B lt2) (@lem8390874 _146622 A B lt2)). Qed.
Lemma lem8390877 {_146622 A B : Type'} (lt2 : type1402 A) (clauses : type1632 _146622 A B) : term111 _146622 A B lt2 clauses.
Proof. exact (@lem8390876 _146622 A B lt2 clauses). Qed.
Lemma lem8390878 {_146622 A B : Type'} (lt2 : type1402 A) (clauses : type1632 _146622 A B) : (term111 _146622 A B lt2 clauses) = (term85 _146622 A B lt2 clauses).
Proof. exact (eq_refl (term111 _146622 A B lt2 clauses)). Qed.
Lemma lem8390936 (p : Prop) (q : Prop) (r : Prop) : (term112 p q r) = (term113 p q r).
Proof. exact (EQ_MP (@lem892 p q r) (@lem887 p q r)). Qed.
Lemma lem8390937 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) (y : P) : (term114 A B P clauses s s' t x t' f y) = (term115 A B P clauses s s' t x t' f y).
Proof. exact (@lem8390936 (term116 A B P s t s' t' clauses) ((s x) = (s' y)) ((t f x) = (t' f y))). Qed.
Lemma lem8390948 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term117 A B P clauses s s' t x t' f) = (term118 A B P clauses s s' t x t' f).
Proof. exact (fun_ext (fun y : P => @lem8390937 A B P clauses s s' t x t' f y)). Qed.
Lemma lem8390949 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8390950 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term119 A B P clauses s s' t x t' f) = (term120 A B P clauses s s' t x t' f).
Proof. exact (MK_COMB (@lem8390949 P) (@lem8390948 A B P clauses s s' t x t' f)). Qed.
Lemma lem8390955 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term121 A B P clauses s s' t t' f) = (term122 A B P clauses s s' t t' f).
Proof. exact (fun_ext (fun x : P => @lem8390950 A B P clauses s s' t x t' f)). Qed.
Lemma lem8390956 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8390957 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term123 A B P clauses s s' t t' f) = (term124 A B P clauses s s' t t' f).
Proof. exact (MK_COMB (@lem8390956 P) (@lem8390955 A B P clauses s s' t t' f)). Qed.
Lemma lem8390962 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term125 A B P clauses s s' t t') = (term126 A B P clauses s s' t t').
Proof. exact (fun_ext (fun f : A -> B => @lem8390957 A B P clauses s s' t t' f)). Qed.
Lemma lem8390963 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8390964 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term127 A B P clauses s s' t t') = (term128 A B P clauses s s' t t').
Proof. exact (MK_COMB (@lem8390963 A B) (@lem8390962 A B P clauses s s' t t')). Qed.
Lemma lem8390969 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term129 A B P clauses s s' t) = (term130 A B P clauses s s' t).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8390964 A B P clauses s s' t t')). Qed.
Lemma lem8390970 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8390971 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term131 A B P clauses s s' t) = (term132 A B P clauses s s' t).
Proof. exact (MK_COMB (@lem8390970 A B P) (@lem8390969 A B P clauses s s' t)). Qed.
Lemma lem8390976 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term133 A B P clauses s t) = (term134 A B P clauses s t).
Proof. exact (fun_ext (fun s' : P -> A => @lem8390971 A B P clauses s s' t)). Qed.
Lemma lem8390977 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8390978 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term135 A B P clauses s t) = (term136 A B P clauses s t).
Proof. exact (MK_COMB (@lem8390977 A P) (@lem8390976 A B P clauses s t)). Qed.
Lemma lem8390983 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term137 A B P clauses s) = (term138 A B P clauses s).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8390978 A B P clauses s t)). Qed.
Lemma lem8390984 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8390985 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term139 A B P clauses s) = (term140 A B P clauses s).
Proof. exact (MK_COMB (@lem8390984 A B P) (@lem8390983 A B P clauses s)). Qed.
Lemma lem8390990 {A B P : Type'} (clauses : type1635 A B P) : (term141 A B P clauses) = (term142 A B P clauses).
Proof. exact (fun_ext (fun s : P -> A => @lem8390985 A B P clauses s)). Qed.
Lemma lem8390991 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8390992 {A B P : Type'} (clauses : type1635 A B P) : (term143 A B P clauses) = (term144 A B P clauses).
Proof. exact (MK_COMB (@lem8390991 A P) (@lem8390990 A B P clauses)). Qed.
Lemma lem8390997 {A B P : Type'} (clauses : type1635 A B P) : (term145 A B P clauses) = (term145 A B P clauses).
Proof. exact (eq_refl (term145 A B P clauses)). Qed.
Lemma lem8390998 {A B P : Type'} (clauses : type1635 A B P) : (term146 A B P clauses) = (term147 A B P clauses).
Proof. exact (MK_COMB (@lem8390997 A B P clauses) (@lem8390992 A B P clauses)). Qed.
Lemma lem8391001 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8391002 {A B P : Type'} (clauses : type1635 A B P) : (term148 A B P clauses) = (term149 A B P clauses).
Proof. exact (MK_COMB (@lem8391001) (@lem8390998 A B P clauses)). Qed.
Lemma lem8391021 {A B P : Type'} (clauses : type1635 A B P) : (term150 A B P clauses) = (term150 A B P clauses).
Proof. exact (eq_refl (term150 A B P clauses)). Qed.
Lemma lem8391022 {A B P : Type'} (clauses : type1635 A B P) : (term151 A B P clauses) = (term152 A B P clauses).
Proof. exact (MK_COMB (@lem8391002 A B P clauses) (@lem8391021 A B P clauses)). Qed.
Lemma lem8391025 {A B P : Type'} (clauses : type1635 A B P) : (term152 A B P clauses) = (term151 A B P clauses).
Proof. exact (SYM (@lem8391022 A B P clauses)). Qed.
Lemma lem8391026 {A B P : Type'} (clauses : type1635 A B P) (h1 : term147 A B P clauses) : term147 A B P clauses.
Proof. exact (h1). Qed.
Lemma lem8391027 {A B P : Type'} (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term144 A B P clauses.
Proof. exact (h1). Qed.
Lemma lem8391028 {A B P : Type'} (clauses : type1635 A B P) (h1 : term153 A B P clauses) : term153 A B P clauses.
Proof. exact (h1). Qed.
Lemma lem8391029 {A B P : Type'} (clauses : type1635 A B P) (h1 : term153 A B P clauses) : term153 A B P clauses.
Proof. exact (h1). Qed.
Lemma lem8391030 {A B P : Type'} (lt2 : type1402 A) (clauses : type1635 A B P) (h1 : term154 A B P lt2 clauses) : term154 A B P lt2 clauses.
Proof. exact (h1). Qed.
Lemma lem8391032 {_146622 A B : Type'} (lt2 : type1402 A) (clauses : type1632 _146622 A B) : term85 _146622 A B lt2 clauses.
Proof. exact (EQ_MP (@lem8390878 _146622 A B lt2 clauses) (@lem8390877 _146622 A B lt2 clauses)). Qed.
Lemma lem8391033 {A B P : Type'} (lt2 : type1402 A) (clauses : type1635 A B P) : term155 A B P lt2 clauses.
Proof. exact (@lem8391032 P A B lt2 clauses). Qed.
Lemma lem8391034 {A B P : Type'} (lt2 : type1402 A) (clauses : type1635 A B P) (h1 : term154 A B P lt2 clauses) : term156 A B P clauses.
Proof. exact (@lem8391033 A B P lt2 clauses (@lem8391030 A B P lt2 clauses h1)). Qed.
Lemma lem8391036 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : term105 A P Q.
Proof. exact (@lem8390872 A P Q (@lem7401 A P Q)). Qed.
Lemma lem8391037 {A B : Type'} (P : type572 A B) (Q : type572 A B) : term157 A B P Q.
Proof. exact (@lem8391036 (A -> B) P Q). Qed.
Lemma lem8391038 {A B P : Type'} (clauses : type1635 A B P) : term158 A B P clauses.
Proof. exact (@lem8391037 A B (term159 A B P clauses) (term160 A B P clauses)). Qed.
Lemma lem8391039 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term161 A B P clauses f) = (term162 A B P clauses f).
Proof. exact (eq_refl (term161 A B P clauses f)). Qed.
Lemma lem8391040 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8391041 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term163 A B P clauses f) = (term164 A B P clauses f).
Proof. exact (MK_COMB (@lem8391040) (@lem8391039 A B P clauses f)). Qed.
Lemma lem8391042 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) : (term165 A B P clauses f) = (term166 A B P f clauses).
Proof. exact (eq_refl (term165 A B P clauses f)). Qed.
Lemma lem8391043 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) : (term167 A B P clauses f) = (term168 A B P f clauses).
Proof. exact (MK_COMB (@lem8391041 A B P clauses f) (@lem8391042 A B P f clauses)). Qed.
Lemma lem8391044 {A B P : Type'} (clauses : type1635 A B P) : (term169 A B P clauses) = (term170 A B P clauses).
Proof. exact (fun_ext (fun f : A -> B => @lem8391043 A B P f clauses)). Qed.
Lemma lem8391045 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8391046 {A B P : Type'} (clauses : type1635 A B P) : (term171 A B P clauses) = (term172 A B P clauses).
Proof. exact (MK_COMB (@lem8391045 A B) (@lem8391044 A B P clauses)). Qed.
Lemma lem8391047 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8391048 {A B P : Type'} (clauses : type1635 A B P) : (term173 A B P clauses) = (term174 A B P clauses).
Proof. exact (MK_COMB (@lem8391047) (@lem8391046 A B P clauses)). Qed.
Lemma lem8391049 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term161 A B P clauses f) = (term162 A B P clauses f).
Proof. exact (eq_refl (term161 A B P clauses f)). Qed.
Lemma lem8391050 {A B P : Type'} (clauses : type1635 A B P) : (term175 A B P clauses) = (term159 A B P clauses).
Proof. exact (fun_ext (fun f : A -> B => @lem8391049 A B P clauses f)). Qed.
Lemma lem8391051 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8391052 {A B P : Type'} (clauses : type1635 A B P) : (term176 A B P clauses) = (term156 A B P clauses).
Proof. exact (MK_COMB (@lem8391051 A B) (@lem8391050 A B P clauses)). Qed.
Lemma lem8391053 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8391054 {A B P : Type'} (clauses : type1635 A B P) : (term177 A B P clauses) = (term178 A B P clauses).
Proof. exact (MK_COMB (@lem8391053) (@lem8391052 A B P clauses)). Qed.
Lemma lem8391055 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) : (term165 A B P clauses f) = (term166 A B P f clauses).
Proof. exact (eq_refl (term165 A B P clauses f)). Qed.
Lemma lem8391056 {A B P : Type'} (clauses : type1635 A B P) : (term179 A B P clauses) = (term160 A B P clauses).
Proof. exact (fun_ext (fun f : A -> B => @lem8391055 A B P f clauses)). Qed.
Lemma lem8391057 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8391058 {A B P : Type'} (clauses : type1635 A B P) : (term180 A B P clauses) = (term150 A B P clauses).
Proof. exact (MK_COMB (@lem8391057 A B) (@lem8391056 A B P clauses)). Qed.
Lemma lem8391059 {A B P : Type'} (clauses : type1635 A B P) : (term181 A B P clauses) = (term182 A B P clauses).
Proof. exact (MK_COMB (@lem8391054 A B P clauses) (@lem8391058 A B P clauses)). Qed.
Lemma lem8391060 {A B P : Type'} (clauses : type1635 A B P) : (term158 A B P clauses) = (term183 A B P clauses).
Proof. exact (MK_COMB (@lem8391048 A B P clauses) (@lem8391059 A B P clauses)). Qed.
Lemma lem8391061 {A B P : Type'} (clauses : type1635 A B P) : term183 A B P clauses.
Proof. exact (EQ_MP (@lem8391060 A B P clauses) (@lem8391038 A B P clauses)). Qed.
Lemma lem8391062 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (h1 : term162 A B P clauses f) : term162 A B P clauses f.
Proof. exact (h1). Qed.
Lemma lem8391086 {A B P : Type'} (x : A) (clauses : type1635 A B P) (f : A -> B) (h1 : term162 A B P clauses f) : term184 A B P clauses f x.
Proof. exact (@lem8391062 A B P clauses f h1 x). Qed.
Lemma lem8391087 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (x : A) : (term184 A B P clauses f x) = ((f x) = (@CASEWISE B P A (A -> B) clauses f x)).
Proof. exact (eq_refl (term184 A B P clauses f x)). Qed.
Lemma lem8391106 {A B P : Type'} (x : A) (clauses : type1635 A B P) (f : A -> B) (h1 : term162 A B P clauses f) : (f x) = (@CASEWISE B P A (A -> B) clauses f x).
Proof. exact (EQ_MP (@lem8391087 A B P clauses f x) (@lem8391086 A B P x clauses f h1)). Qed.
Lemma lem8391107 {A B P : Type'} (x : A) (clauses : type1635 A B P) (f : A -> B) (h1 : term162 A B P clauses f) : (f x) = (@CASEWISE B P A (A -> B) clauses f x).
Proof. exact (@lem8391106 A B P x clauses f h1). Qed.
Lemma lem8391108 {A B P : Type'} (s : P -> A) (x : P) (clauses : type1635 A B P) (f : A -> B) (h1 : term162 A B P clauses f) : (term185 A B P f s x) = (term186 A B P clauses f s x).
Proof. exact (@lem8391107 A B P (s x) clauses f h1). Qed.
Lemma lem8391109 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8391110 {A B P : Type'} (s : P -> A) (x : P) (clauses : type1635 A B P) (f : A -> B) (h1 : term162 A B P clauses f) : (term187 A B P f s x) = (term188 A B P clauses f s x).
Proof. exact (MK_COMB (@lem8391109 B) (@lem8391108 A B P s x clauses f h1)). Qed.
Lemma lem8391111 {A B P : Type'} (t : type558 A B P) (f : A -> B) (x : P) : (t f x) = (t f x).
Proof. exact (eq_refl (t f x)). Qed.
Lemma lem8391112 {A B P : Type'} (s : P -> A) (t : type558 A B P) (x : P) (clauses : type1635 A B P) (f : A -> B) (h1 : term162 A B P clauses f) : ((term185 A B P f s x) = (t f x)) = ((term186 A B P clauses f s x) = (t f x)).
Proof. exact (MK_COMB (@lem8391110 A B P s x clauses f h1) (@lem8391111 A B P t f x)). Qed.
Lemma lem8391115 {A B P : Type'} (s : P -> A) (t : type558 A B P) (clauses : type1635 A B P) (f : A -> B) (h1 : term162 A B P clauses f) : (term189 A B P s t f) = (term190 A B P clauses s t f).
Proof. exact (fun_ext (fun x : P => @lem8391112 A B P s t x clauses f h1)). Qed.
Lemma lem8391116 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8391117 {A B P : Type'} (s : P -> A) (t : type558 A B P) (clauses : type1635 A B P) (f : A -> B) (h1 : term162 A B P clauses f) : (term191 A B P s t f) = (term192 A B P clauses s t f).
Proof. exact (MK_COMB (@lem8391116 P) (@lem8391115 A B P s t clauses f h1)). Qed.
Lemma lem8391122 {A B P : Type'} (f : type1177 A B P) (s : P -> A) (t : type558 A B P) : (term193 A B P f s t) = (term193 A B P f s t).
Proof. exact (eq_refl (term193 A B P f s t)). Qed.
Lemma lem8391123 {A B P : Type'} (f : type1177 A B P) (s : P -> A) (t : type558 A B P) (clauses : type1635 A B P) (f' : A -> B) (h1 : term162 A B P clauses f') : (term194 A B P f s t f') = (term195 A B P f clauses s t f').
Proof. exact (MK_COMB (@lem8391122 A B P f s t) (@lem8391117 A B P s t clauses f' h1)). Qed.
Lemma lem8391124 {A B P : Type'} (f : type1177 A B P) (s : P -> A) (clauses : type1635 A B P) (f' : A -> B) (h1 : term162 A B P clauses f') : (term196 A B P f s f') = (term197 A B P f clauses s f').
Proof. exact (fun_ext (fun t : type558 A B P => @lem8391123 A B P f s t clauses f' h1)). Qed.
Lemma lem8391125 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8391126 {A B P : Type'} (f : type1177 A B P) (s : P -> A) (clauses : type1635 A B P) (f' : A -> B) (h1 : term162 A B P clauses f') : (term198 A B P f s f') = (term199 A B P f clauses s f').
Proof. exact (MK_COMB (@lem8391125 A B P) (@lem8391124 A B P f s clauses f' h1)). Qed.
Lemma lem8391131 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) (h1 : term162 A B P clauses f') : (term200 A B P f f') = (term201 A B P f clauses f').
Proof. exact (fun_ext (fun s : P -> A => @lem8391126 A B P f s clauses f' h1)). Qed.
Lemma lem8391132 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8391133 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) (h1 : term162 A B P clauses f') : (term202 A B P f f') = (term203 A B P f clauses f').
Proof. exact (MK_COMB (@lem8391132 A P) (@lem8391131 A B P f clauses f' h1)). Qed.
Lemma lem8391138 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (h1 : term162 A B P clauses f) : (term204 A B P f) = (term205 A B P clauses f).
Proof. exact (fun_ext (fun f' : type1177 A B P => @lem8391133 A B P f' clauses f h1)). Qed.
Lemma lem8391139 {A B P : Type'} : (@GABS ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) = (@GABS ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop))). Qed.
Lemma lem8391140 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (h1 : term162 A B P clauses f) : (term206 A B P f) = (term207 A B P clauses f).
Proof. exact (MK_COMB (@lem8391139 A B P) (@lem8391138 A B P clauses f h1)). Qed.
Lemma lem8391141 {A B P : Type'} : (@List.Forall (prod (P -> A) ((A -> B) -> P -> B))) = (@List.Forall (prod (P -> A) ((A -> B) -> P -> B))).
Proof. exact (eq_refl (@List.Forall (prod (P -> A) ((A -> B) -> P -> B)))). Qed.
Lemma lem8391142 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (h1 : term162 A B P clauses f) : (term208 A B P f) = (term209 A B P clauses f).
Proof. exact (MK_COMB (@lem8391141 A B P) (@lem8391140 A B P clauses f h1)). Qed.
Lemma lem8391143 {A B P : Type'} (clauses : type1635 A B P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8391144 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (h1 : term162 A B P clauses f) : (term166 A B P f clauses) = (term210 A B P f clauses).
Proof. exact (MK_COMB (@lem8391142 A B P clauses f h1) (@lem8391143 A B P clauses)). Qed.
Lemma lem8391145 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (h1 : term162 A B P clauses f) : (term210 A B P f clauses) = (term166 A B P f clauses).
Proof. exact (SYM (@lem8391144 A B P clauses f h1)). Qed.
Lemma lem8391147 (p : Prop) : p = (term211 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem8391148 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) : (term210 A B P f clauses) = (term212 A B P f clauses).
Proof. exact (@lem8391147 (term210 A B P f clauses)). Qed.
Lemma lem8391149 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) : (term212 A B P f clauses) = (term210 A B P f clauses).
Proof. exact (SYM (@lem8391148 A B P f clauses)). Qed.
Lemma lem8391150 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term213 A B P f clauses) : term213 A B P f clauses.
Proof. exact (h1). Qed.
Lemma lem8391151 {A B P : Type'} : term214 A B P.
Proof. exact (@lem8091832 A B (A -> B) P). Qed.
Lemma lem8391153 {A B C P : Type'} : term215 A B C P.
Proof. exact (@lem8091832 A B C P). Qed.
Lemma lem8391154 {B C P : Type'} : term216 B C P.
Proof. exact (@lem8091832 B B C P). Qed.
Lemma lem8391155 {A C P : Type'} : term216 A C P.
Proof. exact (@lem8091832 A A C P). Qed.
Lemma lem8391160 {A B C P : Type'} : term217 A B C P.
Proof. exact (@lem8091832 (P -> B) B C (A -> B)). Qed.
Lemma lem8391162 {A B C P : Type'} : term218 A B C P.
Proof. exact (@lem8091832 A B C (P -> A)). Qed.
Lemma lem8391163 {A B C P : Type'} : term219 A B C P.
Proof. exact (@lem8091832 A B C (type558 A B P)). Qed.
Lemma lem8391168 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term220 A B C P f clauses) : term220 A B C P f clauses.
Proof. exact (h1). Qed.
Lemma lem8391169 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) : term221 A B C P f clauses.
Proof. exact (fun h0 : term220 A B C P f clauses => @lem8391168 A B C P f clauses h0). Qed.
Lemma lem8391170 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term221 A B C P f clauses) : term221 A B C P f clauses.
Proof. exact (h1). Qed.
Lemma lem8391171 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term220 A B C P f clauses) : term220 A B C P f clauses.
Proof. exact (h1). Qed.
Lemma lem8391172 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term220 A B C P f clauses) (h2 : term221 A B C P f clauses) : term220 A B C P f clauses.
Proof. exact (@lem8391170 A B C P f clauses h2 (@lem8391171 A B C P f clauses h1)). Qed.
Lemma lem8391173 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term220 A B C P f clauses) : term222 A B C P f clauses.
Proof. exact (fun h0 : term221 A B C P f clauses => @lem8391172 A B C P f clauses h1 h0). Qed.
Lemma lem8391174 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term221 A B C P f clauses) : term221 A B C P f clauses.
Proof. exact (h1). Qed.
Lemma lem8391175 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term220 A B C P f clauses) (h2 : term221 A B C P f clauses) : term220 A B C P f clauses.
Proof. exact (@lem8391173 A B C P f clauses h1 (@lem8391174 A B C P f clauses h2)). Qed.
Lemma lem8391176 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term221 A B C P f clauses) : term221 A B C P f clauses.
Proof. exact (fun h0 : term220 A B C P f clauses => @lem8391175 A B C P f clauses h0 h1). Qed.
Lemma lem8391177 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) : term223 A B C P f clauses.
Proof. exact (fun h0 : term221 A B C P f clauses => @lem8391176 A B C P f clauses h0). Qed.
Lemma lem8391180 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) : term221 A B C P f clauses.
Proof. exact (@lem8391177 A B C P f clauses (@lem8391169 A B C P f clauses)). Qed.
Lemma lem8391181 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) : term221 A B C P f clauses.
Proof. exact (@lem8391180 A B C P f clauses). Qed.
Lemma lem8391571 (t : Prop) : (t -> False) = (~ t).
Proof. exact (proj2 (@lem16474 t)). Qed.
Lemma lem8391572 {A B C P : Type'} : (term224 A B C P) = (term225 A B C P).
Proof. exact (@lem8391571 (term219 A B C P)). Qed.
Lemma lem8391625 {A B C P : Type'} : (term226 A B C P) = (term226 A B C P).
Proof. exact (eq_refl (term226 A B C P)). Qed.
Lemma lem8391626 {A B C P : Type'} : (term227 A B C P) = (term228 A B C P).
Proof. exact (MK_COMB (@lem8391625 A B C P) (@lem8391572 A B C P)). Qed.
Lemma lem8391629 {A B C P : Type'} : (term229 A B C P) = (term229 A B C P).
Proof. exact (eq_refl (term229 A B C P)). Qed.
Lemma lem8391630 {A B C P : Type'} : (term230 A B C P) = (term231 A B C P).
Proof. exact (MK_COMB (@lem8391629 A B C P) (@lem8391626 A B C P)). Qed.
Lemma lem8391633 {B C P : Type'} : (term232 B C P) = (term232 B C P).
Proof. exact (eq_refl (term232 B C P)). Qed.
Lemma lem8391634 {A B C P : Type'} : (term233 A B C P) = (term234 A B C P).
Proof. exact (MK_COMB (@lem8391633 B C P) (@lem8391630 A B C P)). Qed.
Lemma lem8391637 {A B P : Type'} : (term235 A B P) = (term235 A B P).
Proof. exact (eq_refl (term235 A B P)). Qed.
Lemma lem8391638 {A B C P : Type'} : (term236 A B C P) = (term237 A B C P).
Proof. exact (MK_COMB (@lem8391637 A B P) (@lem8391634 A B C P)). Qed.
Lemma lem8391641 {A B C P : Type'} : (term238 A B C P) = (term238 A B C P).
Proof. exact (eq_refl (term238 A B C P)). Qed.
Lemma lem8391642 {A B C P : Type'} : (term239 A B C P) = (term240 A B C P).
Proof. exact (MK_COMB (@lem8391641 A B C P) (@lem8391638 A B C P)). Qed.
Lemma lem8391645 {A C P : Type'} : (term232 A C P) = (term232 A C P).
Proof. exact (eq_refl (term232 A C P)). Qed.
Lemma lem8391646 {A B C P : Type'} : (term241 A B C P) = (term242 A B C P).
Proof. exact (MK_COMB (@lem8391645 A C P) (@lem8391642 A B C P)). Qed.
Lemma lem8391649 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) : (term243 A B P f clauses) = (term243 A B P f clauses).
Proof. exact (eq_refl (term243 A B P f clauses)). Qed.
Lemma lem8391650 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) : (term244 A B C P f clauses) = (term245 A B C P f clauses).
Proof. exact (MK_COMB (@lem8391649 A B P f clauses) (@lem8391646 A B C P)). Qed.
Lemma lem8391653 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term164 A B P clauses f) = (term164 A B P clauses f).
Proof. exact (eq_refl (term164 A B P clauses f)). Qed.
Lemma lem8391654 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) : (term246 A B C P f clauses) = (term247 A B C P f clauses).
Proof. exact (MK_COMB (@lem8391653 A B P clauses f) (@lem8391650 A B C P f clauses)). Qed.
Lemma lem8391657 {A B P : Type'} (clauses : type1635 A B P) : (term248 A B P clauses) = (term248 A B P clauses).
Proof. exact (eq_refl (term248 A B P clauses)). Qed.
Lemma lem8391658 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) : (term220 A B C P f clauses) = (term249 A B C P f clauses).
Proof. exact (MK_COMB (@lem8391657 A B P clauses) (@lem8391654 A B C P f clauses)). Qed.
Lemma lem8391661 {A B C P : Type'} (clauses : type1635 A B P) : (term250 A B C P clauses) = (term251 A B C P clauses).
Proof. exact (fun_ext (fun f : A -> B => @lem8391658 A B C P f clauses)). Qed.
Lemma lem8391662 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8391663 {A B C P : Type'} (clauses : type1635 A B P) : (term252 A B C P clauses) = (term253 A B C P clauses).
Proof. exact (MK_COMB (@lem8391662 A B) (@lem8391661 A B C P clauses)). Qed.
Lemma lem8391668 {A B C P : Type'} : (term254 A B C P) = (term255 A B C P).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8391663 A B C P clauses)). Qed.
Lemma lem8391669 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8391676 {A B C P : Type'} : (term256 A B C P) = (term257 A B C P).
Proof. exact (MK_COMB (@lem8391669 A B P) (@lem8391668 A B C P)). Qed.
Lemma lem8391677 {A B P : Type'} (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : _115314 = (term258 A B P).
Proof. exact (h1). Qed.
Lemma lem8391678 {A B P : Type'} (clauses : type1635 A B P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8391679 {A B P : Type'} (clauses : type1635 A B P) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (_115314 clauses) = (term259 A B P clauses).
Proof. exact (MK_COMB (@lem8391677 A B P _115314 h1) (@lem8391678 A B P clauses)). Qed.
Lemma lem8391680 {A B P : Type'} (clauses : type1635 A B P) : (term259 A B P clauses) = (term260 A B P clauses).
Proof. exact (eq_refl (term259 A B P clauses)). Qed.
Lemma lem8391681 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term261 A B P _115314 clauses) = (term261 A B P _115314 clauses).
Proof. exact (eq_refl (term261 A B P _115314 clauses)). Qed.
Lemma lem8391682 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : ((_115314 clauses) = (term259 A B P clauses)) = ((_115314 clauses) = (term260 A B P clauses)).
Proof. exact (MK_COMB (@lem8391681 A B P _115314 clauses) (@lem8391680 A B P clauses)). Qed.
Lemma lem8391683 {A B P : Type'} (clauses : type1635 A B P) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (_115314 clauses) = (term260 A B P clauses).
Proof. exact (EQ_MP (@lem8391682 A B P _115314 clauses) (@lem8391679 A B P clauses _115314 h1)). Qed.
Lemma lem8391684 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8391685 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (_115314 clauses f) = (term262 A B P clauses f).
Proof. exact (MK_COMB (@lem8391683 A B P clauses _115314 h1) (@lem8391684 A B f)). Qed.
Lemma lem8391686 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term262 A B P clauses f) = (term205 A B P clauses f).
Proof. exact (eq_refl (term262 A B P clauses f)). Qed.
Lemma lem8391687 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term263 A B P _115314 clauses f) = (term263 A B P _115314 clauses f).
Proof. exact (eq_refl (term263 A B P _115314 clauses f)). Qed.
Lemma lem8391688 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : ((_115314 clauses f) = (term262 A B P clauses f)) = ((_115314 clauses f) = (term205 A B P clauses f)).
Proof. exact (MK_COMB (@lem8391687 A B P _115314 clauses f) (@lem8391686 A B P clauses f)). Qed.
Lemma lem8391689 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (_115314 clauses f) = (term205 A B P clauses f).
Proof. exact (EQ_MP (@lem8391688 A B P _115314 clauses f) (@lem8391685 A B P clauses f _115314 h1)). Qed.
Lemma lem8391691 {A B C P : Type'} (clauses : type1629 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8391710 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) (x : type558 A B P) : ((term264 A B C P clauses c s x) = (t c x)) = ((term264 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term264 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8391711 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term265 A B C P clauses s t c) = (term265 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : type558 A B P => @lem8391710 A B C P clauses s t c x)). Qed.
Lemma lem8391712 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8391713 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term266 A B C P clauses s t c) = (term266 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8391712 A B P) (@lem8391711 A B C P clauses s t c)). Qed.
Lemma lem8391722 {A B C P : Type'} (f : type1166 A B C P) (s : type115 A B P) (t : type1490 A B C P) : (term267 A B C P f s t) = (term267 A B C P f s t).
Proof. exact (eq_refl (term267 A B C P f s t)). Qed.
Lemma lem8391723 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term268 A B C P f clauses s t c) = (term268 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8391722 A B C P f s t) (@lem8391713 A B C P clauses s t c)). Qed.
Lemma lem8391724 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term269 A B C P f clauses s c) = (term269 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8391723 A B C P f clauses s t c)). Qed.
Lemma lem8391725 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8391726 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term270 A B C P f clauses s c) = (term270 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8391725 A B C P) (@lem8391724 A B C P f clauses s c)). Qed.
Lemma lem8391727 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term271 A B C P f clauses c) = (term271 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8391726 A B C P f clauses s c)). Qed.
Lemma lem8391728 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8391729 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term272 A B C P f clauses c) = (term272 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8391728 A B P) (@lem8391727 A B C P f clauses c)). Qed.
Lemma lem8391730 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term273 A B C P clauses c) = (term273 A B C P clauses c).
Proof. exact (fun_ext (fun f : type1166 A B C P => @lem8391729 A B C P f clauses c)). Qed.
Lemma lem8391731 {A B C P : Type'} : (@GABS ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)) = (@GABS ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop))). Qed.
Lemma lem8391732 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term274 A B C P clauses c) = (term274 A B C P clauses c).
Proof. exact (MK_COMB (@lem8391731 A B C P) (@lem8391730 A B C P clauses c)). Qed.
Lemma lem8391733 {A B C P : Type'} : (@List.Forall (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) = (@List.Forall (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))).
Proof. exact (eq_refl (@List.Forall (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))). Qed.
Lemma lem8391734 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term275 A B C P clauses c) = (term275 A B C P clauses c).
Proof. exact (MK_COMB (@lem8391733 A B C P) (@lem8391732 A B C P clauses c)). Qed.
Lemma lem8391735 {A B C P : Type'} (c : C) (clauses : type1629 A B C P) : (term276 A B C P c clauses) = (term276 A B C P c clauses).
Proof. exact (MK_COMB (@lem8391734 A B C P clauses c) (@lem8391691 A B C P clauses)). Qed.
Lemma lem8391784 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) (y : type558 A B P) : (term277 A B C P clauses s s' t x t' c y) = (term277 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term277 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8391785 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term278 A B C P clauses s s' t x t' c) = (term278 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : type558 A B P => @lem8391784 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8391786 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8391787 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term279 A B C P clauses s s' t x t' c) = (term279 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8391786 A B P) (@lem8391785 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8391788 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term280 A B C P clauses s s' t t' c) = (term280 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : type558 A B P => @lem8391787 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8391789 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8391790 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term281 A B C P clauses s s' t t' c) = (term281 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8391789 A B P) (@lem8391788 A B C P clauses s s' t t' c)). Qed.
Lemma lem8391791 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term282 A B C P clauses s s' t c) = (term282 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1490 A B C P => @lem8391790 A B C P clauses s s' t t' c)). Qed.
Lemma lem8391792 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8391793 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term283 A B C P clauses s s' t c) = (term283 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8391792 A B C P) (@lem8391791 A B C P clauses s s' t c)). Qed.
Lemma lem8391794 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term284 A B C P clauses s t c) = (term284 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type115 A B P => @lem8391793 A B C P clauses s s' t c)). Qed.
Lemma lem8391795 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8391796 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term285 A B C P clauses s t c) = (term285 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8391795 A B P) (@lem8391794 A B C P clauses s t c)). Qed.
Lemma lem8391797 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term286 A B C P clauses s c) = (term286 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8391796 A B C P clauses s t c)). Qed.
Lemma lem8391798 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8391799 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term287 A B C P clauses s c) = (term287 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8391798 A B C P) (@lem8391797 A B C P clauses s c)). Qed.
Lemma lem8391800 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term288 A B C P clauses c) = (term288 A B C P clauses c).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8391799 A B C P clauses s c)). Qed.
Lemma lem8391801 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8391802 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term289 A B C P clauses c) = (term289 A B C P clauses c).
Proof. exact (MK_COMB (@lem8391801 A B P) (@lem8391800 A B C P clauses c)). Qed.
Lemma lem8391803 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8391804 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term290 A B C P clauses c) = (term290 A B C P clauses c).
Proof. exact (MK_COMB (@lem8391803) (@lem8391802 A B C P clauses c)). Qed.
Lemma lem8391805 {A B C P : Type'} (c : C) (clauses : type1629 A B C P) : (term291 A B C P c clauses) = (term291 A B C P c clauses).
Proof. exact (MK_COMB (@lem8391804 A B C P clauses c) (@lem8391735 A B C P c clauses)). Qed.
Lemma lem8391806 {A B C P : Type'} (clauses : type1629 A B C P) : (term292 A B C P clauses) = (term292 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8391805 A B C P c clauses)). Qed.
Lemma lem8391807 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8391808 {A B C P : Type'} (clauses : type1629 A B C P) : (term293 A B C P clauses) = (term293 A B C P clauses).
Proof. exact (MK_COMB (@lem8391807 C) (@lem8391806 A B C P clauses)). Qed.
Lemma lem8391809 {A B C P : Type'} : (term294 A B C P) = (term294 A B C P).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8391808 A B C P clauses)). Qed.
Lemma lem8391810 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8391811 {A B C P : Type'} : (term219 A B C P) = (term219 A B C P).
Proof. exact (MK_COMB (@lem8391810 A B C P) (@lem8391809 A B C P)). Qed.
Lemma lem8391812 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8391813 {A B C P : Type'} : (term225 A B C P) = (term225 A B C P).
Proof. exact (MK_COMB (@lem8391812) (@lem8391811 A B C P)). Qed.
Lemma lem8391814 {A B C P : Type'} (clauses : type1631 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8391833 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) (x : P -> A) : ((term295 A B C P clauses c s x) = (t c x)) = ((term295 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term295 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8391834 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term296 A B C P clauses s t c) = (term296 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : P -> A => @lem8391833 A B C P clauses s t c x)). Qed.
Lemma lem8391835 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8391836 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term297 A B C P clauses s t c) = (term297 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8391835 A P) (@lem8391834 A B C P clauses s t c)). Qed.
Lemma lem8391845 {A B C P : Type'} (f : type1168 A B C P) (s : type802 A P) (t : type1512 A B C P) : (term298 A B C P f s t) = (term298 A B C P f s t).
Proof. exact (eq_refl (term298 A B C P f s t)). Qed.
Lemma lem8391846 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term299 A B C P f clauses s t c) = (term299 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8391845 A B C P f s t) (@lem8391836 A B C P clauses s t c)). Qed.
Lemma lem8391847 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term300 A B C P f clauses s c) = (term300 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8391846 A B C P f clauses s t c)). Qed.
Lemma lem8391848 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8391849 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term301 A B C P f clauses s c) = (term301 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8391848 A B C P) (@lem8391847 A B C P f clauses s c)). Qed.
Lemma lem8391850 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term302 A B C P f clauses c) = (term302 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type802 A P => @lem8391849 A B C P f clauses s c)). Qed.
Lemma lem8391851 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8391852 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term303 A B C P f clauses c) = (term303 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8391851 A P) (@lem8391850 A B C P f clauses c)). Qed.
Lemma lem8391853 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term304 A B C P clauses c) = (term304 A B C P clauses c).
Proof. exact (fun_ext (fun f : type1168 A B C P => @lem8391852 A B C P f clauses c)). Qed.
Lemma lem8391854 {A B C P : Type'} : (@GABS ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)) = (@GABS ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop))). Qed.
Lemma lem8391855 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term305 A B C P clauses c) = (term305 A B C P clauses c).
Proof. exact (MK_COMB (@lem8391854 A B C P) (@lem8391853 A B C P clauses c)). Qed.
Lemma lem8391856 {A B C P : Type'} : (@List.Forall (prod ((P -> A) -> A) (C -> (P -> A) -> B))) = (@List.Forall (prod ((P -> A) -> A) (C -> (P -> A) -> B))).
Proof. exact (eq_refl (@List.Forall (prod ((P -> A) -> A) (C -> (P -> A) -> B)))). Qed.
Lemma lem8391857 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term306 A B C P clauses c) = (term306 A B C P clauses c).
Proof. exact (MK_COMB (@lem8391856 A B C P) (@lem8391855 A B C P clauses c)). Qed.
Lemma lem8391858 {A B C P : Type'} (c : C) (clauses : type1631 A B C P) : (term307 A B C P c clauses) = (term307 A B C P c clauses).
Proof. exact (MK_COMB (@lem8391857 A B C P clauses c) (@lem8391814 A B C P clauses)). Qed.
Lemma lem8391907 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) (y : P -> A) : (term308 A B C P clauses s s' t x t' c y) = (term308 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term308 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8391908 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term309 A B C P clauses s s' t x t' c) = (term309 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P -> A => @lem8391907 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8391909 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8391910 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term310 A B C P clauses s s' t x t' c) = (term310 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8391909 A P) (@lem8391908 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8391911 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term311 A B C P clauses s s' t t' c) = (term311 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P -> A => @lem8391910 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8391912 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8391913 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term312 A B C P clauses s s' t t' c) = (term312 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8391912 A P) (@lem8391911 A B C P clauses s s' t t' c)). Qed.
Lemma lem8391914 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term313 A B C P clauses s s' t c) = (term313 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1512 A B C P => @lem8391913 A B C P clauses s s' t t' c)). Qed.
Lemma lem8391915 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8391916 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term314 A B C P clauses s s' t c) = (term314 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8391915 A B C P) (@lem8391914 A B C P clauses s s' t c)). Qed.
Lemma lem8391917 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term315 A B C P clauses s t c) = (term315 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type802 A P => @lem8391916 A B C P clauses s s' t c)). Qed.
Lemma lem8391918 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8391919 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term316 A B C P clauses s t c) = (term316 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8391918 A P) (@lem8391917 A B C P clauses s t c)). Qed.
Lemma lem8391920 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term317 A B C P clauses s c) = (term317 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8391919 A B C P clauses s t c)). Qed.
Lemma lem8391921 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8391922 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term318 A B C P clauses s c) = (term318 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8391921 A B C P) (@lem8391920 A B C P clauses s c)). Qed.
Lemma lem8391923 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term319 A B C P clauses c) = (term319 A B C P clauses c).
Proof. exact (fun_ext (fun s : type802 A P => @lem8391922 A B C P clauses s c)). Qed.
Lemma lem8391924 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8391925 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term320 A B C P clauses c) = (term320 A B C P clauses c).
Proof. exact (MK_COMB (@lem8391924 A P) (@lem8391923 A B C P clauses c)). Qed.
Lemma lem8391926 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8391927 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term321 A B C P clauses c) = (term321 A B C P clauses c).
Proof. exact (MK_COMB (@lem8391926) (@lem8391925 A B C P clauses c)). Qed.
Lemma lem8391928 {A B C P : Type'} (c : C) (clauses : type1631 A B C P) : (term322 A B C P c clauses) = (term322 A B C P c clauses).
Proof. exact (MK_COMB (@lem8391927 A B C P clauses c) (@lem8391858 A B C P c clauses)). Qed.
Lemma lem8391929 {A B C P : Type'} (clauses : type1631 A B C P) : (term323 A B C P clauses) = (term323 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8391928 A B C P c clauses)). Qed.
Lemma lem8391930 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8391931 {A B C P : Type'} (clauses : type1631 A B C P) : (term324 A B C P clauses) = (term324 A B C P clauses).
Proof. exact (MK_COMB (@lem8391930 C) (@lem8391929 A B C P clauses)). Qed.
Lemma lem8391932 {A B C P : Type'} : (term325 A B C P) = (term325 A B C P).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8391931 A B C P clauses)). Qed.
Lemma lem8391933 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8391934 {A B C P : Type'} : (term218 A B C P) = (term218 A B C P).
Proof. exact (MK_COMB (@lem8391933 A B C P) (@lem8391932 A B C P)). Qed.
Lemma lem8391935 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8391936 {A B C P : Type'} : (term226 A B C P) = (term226 A B C P).
Proof. exact (MK_COMB (@lem8391935) (@lem8391934 A B C P)). Qed.
Lemma lem8391937 {A B C P : Type'} : (term228 A B C P) = (term228 A B C P).
Proof. exact (MK_COMB (@lem8391936 A B C P) (@lem8391813 A B C P)). Qed.
Lemma lem8391938 {A B C P : Type'} (clauses : type1630 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8391957 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) (x : A -> B) : ((term326 A B C P clauses c s x) = (t c x)) = ((term326 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term326 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8391958 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term327 A B C P clauses s t c) = (term327 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : A -> B => @lem8391957 A B C P clauses s t c x)). Qed.
Lemma lem8391959 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8391960 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term328 A B C P clauses s t c) = (term328 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8391959 A B) (@lem8391958 A B C P clauses s t c)). Qed.
Lemma lem8391969 {A B C P : Type'} (f : type1167 A B C P) (s : type558 A B P) (t : type1506 A B C) : (term329 A B C P f s t) = (term329 A B C P f s t).
Proof. exact (eq_refl (term329 A B C P f s t)). Qed.
Lemma lem8391970 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term330 A B C P f clauses s t c) = (term330 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8391969 A B C P f s t) (@lem8391960 A B C P clauses s t c)). Qed.
Lemma lem8391971 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term331 A B C P f clauses s c) = (term331 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8391970 A B C P f clauses s t c)). Qed.
Lemma lem8391972 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8391973 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term332 A B C P f clauses s c) = (term332 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8391972 A B C) (@lem8391971 A B C P f clauses s c)). Qed.
Lemma lem8391974 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term333 A B C P f clauses c) = (term333 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8391973 A B C P f clauses s c)). Qed.
Lemma lem8391975 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8391976 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term334 A B C P f clauses c) = (term334 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8391975 A B P) (@lem8391974 A B C P f clauses c)). Qed.
Lemma lem8391977 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term335 A B C P clauses c) = (term335 A B C P clauses c).
Proof. exact (fun_ext (fun f : type1167 A B C P => @lem8391976 A B C P f clauses c)). Qed.
Lemma lem8391978 {A B C P : Type'} : (@GABS ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)) = (@GABS ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop))). Qed.
Lemma lem8391979 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term336 A B C P clauses c) = (term336 A B C P clauses c).
Proof. exact (MK_COMB (@lem8391978 A B C P) (@lem8391977 A B C P clauses c)). Qed.
Lemma lem8391980 {A B C P : Type'} : (@List.Forall (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) = (@List.Forall (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))).
Proof. exact (eq_refl (@List.Forall (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))). Qed.
Lemma lem8391981 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term337 A B C P clauses c) = (term337 A B C P clauses c).
Proof. exact (MK_COMB (@lem8391980 A B C P) (@lem8391979 A B C P clauses c)). Qed.
Lemma lem8391982 {A B C P : Type'} (c : C) (clauses : type1630 A B C P) : (term338 A B C P c clauses) = (term338 A B C P c clauses).
Proof. exact (MK_COMB (@lem8391981 A B C P clauses c) (@lem8391938 A B C P clauses)). Qed.
Lemma lem8392031 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) (y : A -> B) : (term339 A B C P clauses s s' t x t' c y) = (term339 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term339 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8392032 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term340 A B C P clauses s s' t x t' c) = (term340 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : A -> B => @lem8392031 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8392033 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8392034 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term341 A B C P clauses s s' t x t' c) = (term341 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8392033 A B) (@lem8392032 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8392035 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term342 A B C P clauses s s' t t' c) = (term342 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : A -> B => @lem8392034 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8392036 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8392037 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term343 A B C P clauses s s' t t' c) = (term343 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8392036 A B) (@lem8392035 A B C P clauses s s' t t' c)). Qed.
Lemma lem8392038 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term344 A B C P clauses s s' t c) = (term344 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1506 A B C => @lem8392037 A B C P clauses s s' t t' c)). Qed.
Lemma lem8392039 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8392040 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term345 A B C P clauses s s' t c) = (term345 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8392039 A B C) (@lem8392038 A B C P clauses s s' t c)). Qed.
Lemma lem8392041 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term346 A B C P clauses s t c) = (term346 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type558 A B P => @lem8392040 A B C P clauses s s' t c)). Qed.
Lemma lem8392042 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8392043 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term347 A B C P clauses s t c) = (term347 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8392042 A B P) (@lem8392041 A B C P clauses s t c)). Qed.
Lemma lem8392044 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term348 A B C P clauses s c) = (term348 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8392043 A B C P clauses s t c)). Qed.
Lemma lem8392045 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8392046 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term349 A B C P clauses s c) = (term349 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8392045 A B C) (@lem8392044 A B C P clauses s c)). Qed.
Lemma lem8392047 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term350 A B C P clauses c) = (term350 A B C P clauses c).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8392046 A B C P clauses s c)). Qed.
Lemma lem8392048 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8392049 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term351 A B C P clauses c) = (term351 A B C P clauses c).
Proof. exact (MK_COMB (@lem8392048 A B P) (@lem8392047 A B C P clauses c)). Qed.
Lemma lem8392050 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8392051 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term352 A B C P clauses c) = (term352 A B C P clauses c).
Proof. exact (MK_COMB (@lem8392050) (@lem8392049 A B C P clauses c)). Qed.
Lemma lem8392052 {A B C P : Type'} (c : C) (clauses : type1630 A B C P) : (term353 A B C P c clauses) = (term353 A B C P c clauses).
Proof. exact (MK_COMB (@lem8392051 A B C P clauses c) (@lem8391982 A B C P c clauses)). Qed.
Lemma lem8392053 {A B C P : Type'} (clauses : type1630 A B C P) : (term354 A B C P clauses) = (term354 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8392052 A B C P c clauses)). Qed.
Lemma lem8392054 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8392055 {A B C P : Type'} (clauses : type1630 A B C P) : (term355 A B C P clauses) = (term355 A B C P clauses).
Proof. exact (MK_COMB (@lem8392054 C) (@lem8392053 A B C P clauses)). Qed.
Lemma lem8392056 {A B C P : Type'} : (term356 A B C P) = (term356 A B C P).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8392055 A B C P clauses)). Qed.
Lemma lem8392057 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8392058 {A B C P : Type'} : (term217 A B C P) = (term217 A B C P).
Proof. exact (MK_COMB (@lem8392057 A B C P) (@lem8392056 A B C P)). Qed.
Lemma lem8392059 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8392060 {A B C P : Type'} : (term229 A B C P) = (term229 A B C P).
Proof. exact (MK_COMB (@lem8392059) (@lem8392058 A B C P)). Qed.
Lemma lem8392061 {A B C P : Type'} : (term231 A B C P) = (term231 A B C P).
Proof. exact (MK_COMB (@lem8392060 A B C P) (@lem8391937 A B C P)). Qed.
Lemma lem8392062 {B C P : Type'} (clauses : type1636 B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8392081 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) (x : P) : ((term357 B C P clauses c s x) = (t c x)) = ((term357 B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term357 B C P clauses c s x) = (t c x))). Qed.
Lemma lem8392082 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term358 B C P clauses s t c) = (term358 B C P clauses s t c).
Proof. exact (fun_ext (fun x : P => @lem8392081 B C P clauses s t c x)). Qed.
Lemma lem8392083 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8392084 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term359 B C P clauses s t c) = (term359 B C P clauses s t c).
Proof. exact (MK_COMB (@lem8392083 P) (@lem8392082 B C P clauses s t c)). Qed.
Lemma lem8392093 {B C P : Type'} (f : type1178 B C P) (s : P -> B) (t : type1475 B C P) : (term360 B C P f s t) = (term360 B C P f s t).
Proof. exact (eq_refl (term360 B C P f s t)). Qed.
Lemma lem8392094 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term361 B C P f clauses s t c) = (term361 B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8392093 B C P f s t) (@lem8392084 B C P clauses s t c)). Qed.
Lemma lem8392095 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term362 B C P f clauses s c) = (term362 B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8392094 B C P f clauses s t c)). Qed.
Lemma lem8392096 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8392097 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term363 B C P f clauses s c) = (term363 B C P f clauses s c).
Proof. exact (MK_COMB (@lem8392096 B C P) (@lem8392095 B C P f clauses s c)). Qed.
Lemma lem8392098 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term364 B C P f clauses c) = (term364 B C P f clauses c).
Proof. exact (fun_ext (fun s : P -> B => @lem8392097 B C P f clauses s c)). Qed.
Lemma lem8392099 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8392100 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term365 B C P f clauses c) = (term365 B C P f clauses c).
Proof. exact (MK_COMB (@lem8392099 B P) (@lem8392098 B C P f clauses c)). Qed.
Lemma lem8392101 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term366 B C P clauses c) = (term366 B C P clauses c).
Proof. exact (fun_ext (fun f : type1178 B C P => @lem8392100 B C P f clauses c)). Qed.
Lemma lem8392102 {B C P : Type'} : (@GABS ((prod (P -> B) (C -> P -> B)) -> Prop)) = (@GABS ((prod (P -> B) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod (P -> B) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8392103 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term367 B C P clauses c) = (term367 B C P clauses c).
Proof. exact (MK_COMB (@lem8392102 B C P) (@lem8392101 B C P clauses c)). Qed.
Lemma lem8392104 {B C P : Type'} : (@List.Forall (prod (P -> B) (C -> P -> B))) = (@List.Forall (prod (P -> B) (C -> P -> B))).
Proof. exact (eq_refl (@List.Forall (prod (P -> B) (C -> P -> B)))). Qed.
Lemma lem8392105 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term368 B C P clauses c) = (term368 B C P clauses c).
Proof. exact (MK_COMB (@lem8392104 B C P) (@lem8392103 B C P clauses c)). Qed.
Lemma lem8392106 {B C P : Type'} (c : C) (clauses : type1636 B C P) : (term369 B C P c clauses) = (term369 B C P c clauses).
Proof. exact (MK_COMB (@lem8392105 B C P clauses c) (@lem8392062 B C P clauses)). Qed.
Lemma lem8392155 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term370 B C P clauses s s' t x t' c y) = (term370 B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term370 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8392156 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term371 B C P clauses s s' t x t' c) = (term371 B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8392155 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8392157 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8392158 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term372 B C P clauses s s' t x t' c) = (term372 B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8392157 P) (@lem8392156 B C P clauses s s' t x t' c)). Qed.
Lemma lem8392159 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term373 B C P clauses s s' t t' c) = (term373 B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8392158 B C P clauses s s' t x t' c)). Qed.
Lemma lem8392160 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8392161 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term374 B C P clauses s s' t t' c) = (term374 B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8392160 P) (@lem8392159 B C P clauses s s' t t' c)). Qed.
Lemma lem8392162 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term375 B C P clauses s s' t c) = (term375 B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8392161 B C P clauses s s' t t' c)). Qed.
Lemma lem8392163 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8392164 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term376 B C P clauses s s' t c) = (term376 B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8392163 B C P) (@lem8392162 B C P clauses s s' t c)). Qed.
Lemma lem8392165 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term377 B C P clauses s t c) = (term377 B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> B => @lem8392164 B C P clauses s s' t c)). Qed.
Lemma lem8392166 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8392167 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term378 B C P clauses s t c) = (term378 B C P clauses s t c).
Proof. exact (MK_COMB (@lem8392166 B P) (@lem8392165 B C P clauses s t c)). Qed.
Lemma lem8392168 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term379 B C P clauses s c) = (term379 B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8392167 B C P clauses s t c)). Qed.
Lemma lem8392169 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8392170 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term380 B C P clauses s c) = (term380 B C P clauses s c).
Proof. exact (MK_COMB (@lem8392169 B C P) (@lem8392168 B C P clauses s c)). Qed.
Lemma lem8392171 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term381 B C P clauses c) = (term381 B C P clauses c).
Proof. exact (fun_ext (fun s : P -> B => @lem8392170 B C P clauses s c)). Qed.
Lemma lem8392172 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8392173 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term382 B C P clauses c) = (term382 B C P clauses c).
Proof. exact (MK_COMB (@lem8392172 B P) (@lem8392171 B C P clauses c)). Qed.
Lemma lem8392174 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8392175 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term383 B C P clauses c) = (term383 B C P clauses c).
Proof. exact (MK_COMB (@lem8392174) (@lem8392173 B C P clauses c)). Qed.
Lemma lem8392176 {B C P : Type'} (c : C) (clauses : type1636 B C P) : (term384 B C P c clauses) = (term384 B C P c clauses).
Proof. exact (MK_COMB (@lem8392175 B C P clauses c) (@lem8392106 B C P c clauses)). Qed.
Lemma lem8392177 {B C P : Type'} (clauses : type1636 B C P) : (term385 B C P clauses) = (term385 B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8392176 B C P c clauses)). Qed.
Lemma lem8392178 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8392179 {B C P : Type'} (clauses : type1636 B C P) : (term386 B C P clauses) = (term386 B C P clauses).
Proof. exact (MK_COMB (@lem8392178 C) (@lem8392177 B C P clauses)). Qed.
Lemma lem8392180 {B C P : Type'} : (term387 B C P) = (term387 B C P).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8392179 B C P clauses)). Qed.
Lemma lem8392181 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8392182 {B C P : Type'} : (term216 B C P) = (term216 B C P).
Proof. exact (MK_COMB (@lem8392181 B C P) (@lem8392180 B C P)). Qed.
Lemma lem8392183 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8392184 {B C P : Type'} : (term232 B C P) = (term232 B C P).
Proof. exact (MK_COMB (@lem8392183) (@lem8392182 B C P)). Qed.
Lemma lem8392185 {A B C P : Type'} : (term234 A B C P) = (term234 A B C P).
Proof. exact (MK_COMB (@lem8392184 B C P) (@lem8392061 A B C P)). Qed.
Lemma lem8392186 {A B P : Type'} (clauses : type1635 A B P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8392188 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term205 A B P clauses f) = (_115314 clauses f).
Proof. exact (SYM (@lem8391689 A B P clauses f _115314 h1)). Qed.
Lemma lem8392189 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term205 A B P clauses f) = (_115314 clauses f).
Proof. exact (@lem8392188 A B P clauses f _115314 h1). Qed.
Lemma lem8392190 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term205 A B P clauses c) = (_115314 clauses c).
Proof. exact (@lem8392189 A B P clauses c _115314 h1). Qed.
Lemma lem8392191 {A B P : Type'} : (@GABS ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) = (@GABS ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop))). Qed.
Lemma lem8392192 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term207 A B P clauses c) = (term388 A B P _115314 clauses c).
Proof. exact (MK_COMB (@lem8392191 A B P) (@lem8392190 A B P clauses c _115314 h1)). Qed.
Lemma lem8392193 {A B P : Type'} : (@List.Forall (prod (P -> A) ((A -> B) -> P -> B))) = (@List.Forall (prod (P -> A) ((A -> B) -> P -> B))).
Proof. exact (eq_refl (@List.Forall (prod (P -> A) ((A -> B) -> P -> B)))). Qed.
Lemma lem8392194 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term209 A B P clauses c) = (term389 A B P _115314 clauses c).
Proof. exact (MK_COMB (@lem8392193 A B P) (@lem8392192 A B P clauses c _115314 h1)). Qed.
Lemma lem8392195 {A B P : Type'} (c : A -> B) (clauses : type1635 A B P) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term210 A B P c clauses) = (term390 A B P _115314 c clauses).
Proof. exact (MK_COMB (@lem8392194 A B P clauses c _115314 h1) (@lem8392186 A B P clauses)). Qed.
Lemma lem8392244 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) (y : P) : (term391 A B P clauses s s' t x t' c y) = (term391 A B P clauses s s' t x t' c y).
Proof. exact (eq_refl (term391 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8392245 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term392 A B P clauses s s' t x t' c) = (term392 A B P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8392244 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8392246 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8392247 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term393 A B P clauses s s' t x t' c) = (term393 A B P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8392246 P) (@lem8392245 A B P clauses s s' t x t' c)). Qed.
Lemma lem8392248 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term394 A B P clauses s s' t t' c) = (term394 A B P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8392247 A B P clauses s s' t x t' c)). Qed.
Lemma lem8392249 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8392250 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term395 A B P clauses s s' t t' c) = (term395 A B P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8392249 P) (@lem8392248 A B P clauses s s' t t' c)). Qed.
Lemma lem8392251 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term396 A B P clauses s s' t c) = (term396 A B P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8392250 A B P clauses s s' t t' c)). Qed.
Lemma lem8392252 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8392253 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term397 A B P clauses s s' t c) = (term397 A B P clauses s s' t c).
Proof. exact (MK_COMB (@lem8392252 A B P) (@lem8392251 A B P clauses s s' t c)). Qed.
Lemma lem8392254 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term398 A B P clauses s t c) = (term398 A B P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8392253 A B P clauses s s' t c)). Qed.
Lemma lem8392255 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8392256 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term399 A B P clauses s t c) = (term399 A B P clauses s t c).
Proof. exact (MK_COMB (@lem8392255 A P) (@lem8392254 A B P clauses s t c)). Qed.
Lemma lem8392257 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term400 A B P clauses s c) = (term400 A B P clauses s c).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8392256 A B P clauses s t c)). Qed.
Lemma lem8392258 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8392259 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term401 A B P clauses s c) = (term401 A B P clauses s c).
Proof. exact (MK_COMB (@lem8392258 A B P) (@lem8392257 A B P clauses s c)). Qed.
Lemma lem8392260 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term402 A B P clauses c) = (term402 A B P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8392259 A B P clauses s c)). Qed.
Lemma lem8392261 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8392262 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term403 A B P clauses c) = (term403 A B P clauses c).
Proof. exact (MK_COMB (@lem8392261 A P) (@lem8392260 A B P clauses c)). Qed.
Lemma lem8392263 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8392264 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term404 A B P clauses c) = (term404 A B P clauses c).
Proof. exact (MK_COMB (@lem8392263) (@lem8392262 A B P clauses c)). Qed.
Lemma lem8392265 {A B P : Type'} (c : A -> B) (clauses : type1635 A B P) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term405 A B P c clauses) = (term406 A B P _115314 c clauses).
Proof. exact (MK_COMB (@lem8392264 A B P clauses c) (@lem8392195 A B P c clauses _115314 h1)). Qed.
Lemma lem8392266 {A B P : Type'} (clauses : type1635 A B P) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term407 A B P clauses) = (term408 A B P _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8392265 A B P c clauses _115314 h1)). Qed.
Lemma lem8392267 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8392268 {A B P : Type'} (clauses : type1635 A B P) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term409 A B P clauses) = (term410 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8392267 A B) (@lem8392266 A B P clauses _115314 h1)). Qed.
Lemma lem8392269 {A B P : Type'} (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term411 A B P) = (term412 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8392268 A B P clauses _115314 h1)). Qed.
Lemma lem8392270 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8392271 {A B P : Type'} (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term214 A B P) = (term413 A B P _115314).
Proof. exact (MK_COMB (@lem8392270 A B P) (@lem8392269 A B P _115314 h1)). Qed.
Lemma lem8392272 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8392273 {A B P : Type'} (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term235 A B P) = (term414 A B P _115314).
Proof. exact (MK_COMB (@lem8392272) (@lem8392271 A B P _115314 h1)). Qed.
Lemma lem8392274 {A B C P : Type'} (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term237 A B C P) = (term415 A B C P _115314).
Proof. exact (MK_COMB (@lem8392273 A B P _115314 h1) (@lem8392185 A B C P)). Qed.
Lemma lem8392275 {A B C P : Type'} (clauses : type1638 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8392294 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) (x : P) : ((term416 A B C P clauses c s x) = (t c x)) = ((term416 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term416 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8392295 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term417 A B C P clauses s t c) = (term417 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : P => @lem8392294 A B C P clauses s t c x)). Qed.
Lemma lem8392296 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8392297 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term418 A B C P clauses s t c) = (term418 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8392296 P) (@lem8392295 A B C P clauses s t c)). Qed.
Lemma lem8392306 {A B C P : Type'} (f : type1185 A B C P) (s : P -> A) (t : type1475 B C P) : (term419 A B C P f s t) = (term419 A B C P f s t).
Proof. exact (eq_refl (term419 A B C P f s t)). Qed.
Lemma lem8392307 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term420 A B C P f clauses s t c) = (term420 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8392306 A B C P f s t) (@lem8392297 A B C P clauses s t c)). Qed.
Lemma lem8392308 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term421 A B C P f clauses s c) = (term421 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8392307 A B C P f clauses s t c)). Qed.
Lemma lem8392309 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8392310 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term422 A B C P f clauses s c) = (term422 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8392309 B C P) (@lem8392308 A B C P f clauses s c)). Qed.
Lemma lem8392311 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term423 A B C P f clauses c) = (term423 A B C P f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8392310 A B C P f clauses s c)). Qed.
Lemma lem8392312 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8392313 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term424 A B C P f clauses c) = (term424 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8392312 A P) (@lem8392311 A B C P f clauses c)). Qed.
Lemma lem8392314 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term425 A B C P clauses c) = (term425 A B C P clauses c).
Proof. exact (fun_ext (fun f : type1185 A B C P => @lem8392313 A B C P f clauses c)). Qed.
Lemma lem8392315 {A B C P : Type'} : (@GABS ((prod (P -> A) (C -> P -> B)) -> Prop)) = (@GABS ((prod (P -> A) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod (P -> A) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8392316 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term426 A B C P clauses c) = (term426 A B C P clauses c).
Proof. exact (MK_COMB (@lem8392315 A B C P) (@lem8392314 A B C P clauses c)). Qed.
Lemma lem8392317 {A B C P : Type'} : (@List.Forall (prod (P -> A) (C -> P -> B))) = (@List.Forall (prod (P -> A) (C -> P -> B))).
Proof. exact (eq_refl (@List.Forall (prod (P -> A) (C -> P -> B)))). Qed.
Lemma lem8392318 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term427 A B C P clauses c) = (term427 A B C P clauses c).
Proof. exact (MK_COMB (@lem8392317 A B C P) (@lem8392316 A B C P clauses c)). Qed.
Lemma lem8392319 {A B C P : Type'} (c : C) (clauses : type1638 A B C P) : (term428 A B C P c clauses) = (term428 A B C P c clauses).
Proof. exact (MK_COMB (@lem8392318 A B C P clauses c) (@lem8392275 A B C P clauses)). Qed.
Lemma lem8392368 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term429 A B C P clauses s s' t x t' c y) = (term429 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term429 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8392369 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term430 A B C P clauses s s' t x t' c) = (term430 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8392368 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8392370 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8392371 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term431 A B C P clauses s s' t x t' c) = (term431 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8392370 P) (@lem8392369 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8392372 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term432 A B C P clauses s s' t t' c) = (term432 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8392371 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8392373 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8392374 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term433 A B C P clauses s s' t t' c) = (term433 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8392373 P) (@lem8392372 A B C P clauses s s' t t' c)). Qed.
Lemma lem8392375 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term434 A B C P clauses s s' t c) = (term434 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8392374 A B C P clauses s s' t t' c)). Qed.
Lemma lem8392376 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8392377 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term435 A B C P clauses s s' t c) = (term435 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8392376 B C P) (@lem8392375 A B C P clauses s s' t c)). Qed.
Lemma lem8392378 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term436 A B C P clauses s t c) = (term436 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8392377 A B C P clauses s s' t c)). Qed.
Lemma lem8392379 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8392380 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term437 A B C P clauses s t c) = (term437 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8392379 A P) (@lem8392378 A B C P clauses s t c)). Qed.
Lemma lem8392381 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term438 A B C P clauses s c) = (term438 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8392380 A B C P clauses s t c)). Qed.
Lemma lem8392382 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8392383 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term439 A B C P clauses s c) = (term439 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8392382 B C P) (@lem8392381 A B C P clauses s c)). Qed.
Lemma lem8392384 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term440 A B C P clauses c) = (term440 A B C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8392383 A B C P clauses s c)). Qed.
Lemma lem8392385 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8392386 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term441 A B C P clauses c) = (term441 A B C P clauses c).
Proof. exact (MK_COMB (@lem8392385 A P) (@lem8392384 A B C P clauses c)). Qed.
Lemma lem8392387 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8392388 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term442 A B C P clauses c) = (term442 A B C P clauses c).
Proof. exact (MK_COMB (@lem8392387) (@lem8392386 A B C P clauses c)). Qed.
Lemma lem8392389 {A B C P : Type'} (c : C) (clauses : type1638 A B C P) : (term443 A B C P c clauses) = (term443 A B C P c clauses).
Proof. exact (MK_COMB (@lem8392388 A B C P clauses c) (@lem8392319 A B C P c clauses)). Qed.
Lemma lem8392390 {A B C P : Type'} (clauses : type1638 A B C P) : (term444 A B C P clauses) = (term444 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8392389 A B C P c clauses)). Qed.
Lemma lem8392391 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8392392 {A B C P : Type'} (clauses : type1638 A B C P) : (term445 A B C P clauses) = (term445 A B C P clauses).
Proof. exact (MK_COMB (@lem8392391 C) (@lem8392390 A B C P clauses)). Qed.
Lemma lem8392393 {A B C P : Type'} : (term446 A B C P) = (term446 A B C P).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8392392 A B C P clauses)). Qed.
Lemma lem8392394 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8392395 {A B C P : Type'} : (term215 A B C P) = (term215 A B C P).
Proof. exact (MK_COMB (@lem8392394 A B C P) (@lem8392393 A B C P)). Qed.
Lemma lem8392396 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8392397 {A B C P : Type'} : (term238 A B C P) = (term238 A B C P).
Proof. exact (MK_COMB (@lem8392396) (@lem8392395 A B C P)). Qed.
Lemma lem8392398 {A B C P : Type'} (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term240 A B C P) = (term447 A B C P _115314).
Proof. exact (MK_COMB (@lem8392397 A B C P) (@lem8392274 A B C P _115314 h1)). Qed.
Lemma lem8392399 {A C P : Type'} (clauses : type1636 A C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8392418 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) (x : P) : ((term357 A C P clauses c s x) = (t c x)) = ((term357 A C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term357 A C P clauses c s x) = (t c x))). Qed.
Lemma lem8392419 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term358 A C P clauses s t c) = (term358 A C P clauses s t c).
Proof. exact (fun_ext (fun x : P => @lem8392418 A C P clauses s t c x)). Qed.
Lemma lem8392420 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8392421 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term359 A C P clauses s t c) = (term359 A C P clauses s t c).
Proof. exact (MK_COMB (@lem8392420 P) (@lem8392419 A C P clauses s t c)). Qed.
Lemma lem8392430 {A C P : Type'} (f : type1178 A C P) (s : P -> A) (t : type1475 A C P) : (term360 A C P f s t) = (term360 A C P f s t).
Proof. exact (eq_refl (term360 A C P f s t)). Qed.
Lemma lem8392431 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term361 A C P f clauses s t c) = (term361 A C P f clauses s t c).
Proof. exact (MK_COMB (@lem8392430 A C P f s t) (@lem8392421 A C P clauses s t c)). Qed.
Lemma lem8392432 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term362 A C P f clauses s c) = (term362 A C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8392431 A C P f clauses s t c)). Qed.
Lemma lem8392433 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8392434 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term363 A C P f clauses s c) = (term363 A C P f clauses s c).
Proof. exact (MK_COMB (@lem8392433 A C P) (@lem8392432 A C P f clauses s c)). Qed.
Lemma lem8392435 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term364 A C P f clauses c) = (term364 A C P f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8392434 A C P f clauses s c)). Qed.
Lemma lem8392436 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8392437 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term365 A C P f clauses c) = (term365 A C P f clauses c).
Proof. exact (MK_COMB (@lem8392436 A P) (@lem8392435 A C P f clauses c)). Qed.
Lemma lem8392438 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term366 A C P clauses c) = (term366 A C P clauses c).
Proof. exact (fun_ext (fun f : type1178 A C P => @lem8392437 A C P f clauses c)). Qed.
Lemma lem8392439 {A C P : Type'} : (@GABS ((prod (P -> A) (C -> P -> A)) -> Prop)) = (@GABS ((prod (P -> A) (C -> P -> A)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod (P -> A) (C -> P -> A)) -> Prop))). Qed.
Lemma lem8392440 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term367 A C P clauses c) = (term367 A C P clauses c).
Proof. exact (MK_COMB (@lem8392439 A C P) (@lem8392438 A C P clauses c)). Qed.
Lemma lem8392441 {A C P : Type'} : (@List.Forall (prod (P -> A) (C -> P -> A))) = (@List.Forall (prod (P -> A) (C -> P -> A))).
Proof. exact (eq_refl (@List.Forall (prod (P -> A) (C -> P -> A)))). Qed.
Lemma lem8392442 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term368 A C P clauses c) = (term368 A C P clauses c).
Proof. exact (MK_COMB (@lem8392441 A C P) (@lem8392440 A C P clauses c)). Qed.
Lemma lem8392443 {A C P : Type'} (c : C) (clauses : type1636 A C P) : (term369 A C P c clauses) = (term369 A C P c clauses).
Proof. exact (MK_COMB (@lem8392442 A C P clauses c) (@lem8392399 A C P clauses)). Qed.
Lemma lem8392492 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) (y : P) : (term370 A C P clauses s s' t x t' c y) = (term370 A C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term370 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8392493 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term371 A C P clauses s s' t x t' c) = (term371 A C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8392492 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8392494 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8392495 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term372 A C P clauses s s' t x t' c) = (term372 A C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8392494 P) (@lem8392493 A C P clauses s s' t x t' c)). Qed.
Lemma lem8392496 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term373 A C P clauses s s' t t' c) = (term373 A C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8392495 A C P clauses s s' t x t' c)). Qed.
Lemma lem8392497 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8392498 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term374 A C P clauses s s' t t' c) = (term374 A C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8392497 P) (@lem8392496 A C P clauses s s' t t' c)). Qed.
Lemma lem8392499 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term375 A C P clauses s s' t c) = (term375 A C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 A C P => @lem8392498 A C P clauses s s' t t' c)). Qed.
Lemma lem8392500 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8392501 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term376 A C P clauses s s' t c) = (term376 A C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8392500 A C P) (@lem8392499 A C P clauses s s' t c)). Qed.
Lemma lem8392502 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term377 A C P clauses s t c) = (term377 A C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8392501 A C P clauses s s' t c)). Qed.
Lemma lem8392503 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8392504 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term378 A C P clauses s t c) = (term378 A C P clauses s t c).
Proof. exact (MK_COMB (@lem8392503 A P) (@lem8392502 A C P clauses s t c)). Qed.
Lemma lem8392505 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term379 A C P clauses s c) = (term379 A C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8392504 A C P clauses s t c)). Qed.
Lemma lem8392506 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8392507 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term380 A C P clauses s c) = (term380 A C P clauses s c).
Proof. exact (MK_COMB (@lem8392506 A C P) (@lem8392505 A C P clauses s c)). Qed.
Lemma lem8392508 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term381 A C P clauses c) = (term381 A C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8392507 A C P clauses s c)). Qed.
Lemma lem8392509 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8392510 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term382 A C P clauses c) = (term382 A C P clauses c).
Proof. exact (MK_COMB (@lem8392509 A P) (@lem8392508 A C P clauses c)). Qed.
Lemma lem8392511 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8392512 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term383 A C P clauses c) = (term383 A C P clauses c).
Proof. exact (MK_COMB (@lem8392511) (@lem8392510 A C P clauses c)). Qed.
Lemma lem8392513 {A C P : Type'} (c : C) (clauses : type1636 A C P) : (term384 A C P c clauses) = (term384 A C P c clauses).
Proof. exact (MK_COMB (@lem8392512 A C P clauses c) (@lem8392443 A C P c clauses)). Qed.
Lemma lem8392514 {A C P : Type'} (clauses : type1636 A C P) : (term385 A C P clauses) = (term385 A C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8392513 A C P c clauses)). Qed.
Lemma lem8392515 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8392516 {A C P : Type'} (clauses : type1636 A C P) : (term386 A C P clauses) = (term386 A C P clauses).
Proof. exact (MK_COMB (@lem8392515 C) (@lem8392514 A C P clauses)). Qed.
Lemma lem8392517 {A C P : Type'} : (term387 A C P) = (term387 A C P).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8392516 A C P clauses)). Qed.
Lemma lem8392518 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8392519 {A C P : Type'} : (term216 A C P) = (term216 A C P).
Proof. exact (MK_COMB (@lem8392518 A C P) (@lem8392517 A C P)). Qed.
Lemma lem8392520 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8392521 {A C P : Type'} : (term232 A C P) = (term232 A C P).
Proof. exact (MK_COMB (@lem8392520) (@lem8392519 A C P)). Qed.
Lemma lem8392522 {A B C P : Type'} (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term242 A B C P) = (term448 A B C P _115314).
Proof. exact (MK_COMB (@lem8392521 A C P) (@lem8392398 A B C P _115314 h1)). Qed.
Lemma lem8392523 {A B P : Type'} (clauses : type1635 A B P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8392525 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term205 A B P clauses f) = (_115314 clauses f).
Proof. exact (SYM (@lem8391689 A B P clauses f _115314 h1)). Qed.
Lemma lem8392526 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term205 A B P clauses f) = (_115314 clauses f).
Proof. exact (@lem8392525 A B P clauses f _115314 h1). Qed.
Lemma lem8392527 {A B P : Type'} : (@GABS ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) = (@GABS ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop))). Qed.
Lemma lem8392528 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term207 A B P clauses f) = (term388 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8392527 A B P) (@lem8392526 A B P clauses f _115314 h1)). Qed.
Lemma lem8392529 {A B P : Type'} : (@List.Forall (prod (P -> A) ((A -> B) -> P -> B))) = (@List.Forall (prod (P -> A) ((A -> B) -> P -> B))).
Proof. exact (eq_refl (@List.Forall (prod (P -> A) ((A -> B) -> P -> B)))). Qed.
Lemma lem8392530 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term209 A B P clauses f) = (term389 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8392529 A B P) (@lem8392528 A B P clauses f _115314 h1)). Qed.
Lemma lem8392531 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term210 A B P f clauses) = (term390 A B P _115314 f clauses).
Proof. exact (MK_COMB (@lem8392530 A B P clauses f _115314 h1) (@lem8392523 A B P clauses)). Qed.
Lemma lem8392532 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8392533 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term213 A B P f clauses) = (term449 A B P _115314 f clauses).
Proof. exact (MK_COMB (@lem8392532) (@lem8392531 A B P f clauses _115314 h1)). Qed.
Lemma lem8392534 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8392535 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term243 A B P f clauses) = (term450 A B P _115314 f clauses).
Proof. exact (MK_COMB (@lem8392534) (@lem8392533 A B P f clauses _115314 h1)). Qed.
Lemma lem8392536 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term245 A B C P f clauses) = (term451 A B C P f clauses _115314).
Proof. exact (MK_COMB (@lem8392535 A B P f clauses _115314 h1) (@lem8392522 A B C P _115314 h1)). Qed.
Lemma lem8392549 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (x : A) : ((f x) = (@CASEWISE B P A (A -> B) clauses f x)) = ((f x) = (@CASEWISE B P A (A -> B) clauses f x)).
Proof. exact (eq_refl ((f x) = (@CASEWISE B P A (A -> B) clauses f x))). Qed.
Lemma lem8392550 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term452 A B P clauses f) = (term452 A B P clauses f).
Proof. exact (fun_ext (fun x : A => @lem8392549 A B P clauses f x)). Qed.
Lemma lem8392551 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8392552 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term162 A B P clauses f) = (term162 A B P clauses f).
Proof. exact (MK_COMB (@lem8392551 A) (@lem8392550 A B P clauses f)). Qed.
Lemma lem8392553 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8392554 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term164 A B P clauses f) = (term164 A B P clauses f).
Proof. exact (MK_COMB (@lem8392553) (@lem8392552 A B P clauses f)). Qed.
Lemma lem8392555 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term247 A B C P f clauses) = (term453 A B C P f clauses _115314).
Proof. exact (MK_COMB (@lem8392554 A B P clauses f) (@lem8392536 A B C P f clauses _115314 h1)). Qed.
Lemma lem8392604 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) (y : P) : (term115 A B P clauses s s' t x t' f y) = (term115 A B P clauses s s' t x t' f y).
Proof. exact (eq_refl (term115 A B P clauses s s' t x t' f y)). Qed.
Lemma lem8392605 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term118 A B P clauses s s' t x t' f) = (term118 A B P clauses s s' t x t' f).
Proof. exact (fun_ext (fun y : P => @lem8392604 A B P clauses s s' t x t' f y)). Qed.
Lemma lem8392606 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8392607 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term120 A B P clauses s s' t x t' f) = (term120 A B P clauses s s' t x t' f).
Proof. exact (MK_COMB (@lem8392606 P) (@lem8392605 A B P clauses s s' t x t' f)). Qed.
Lemma lem8392608 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term122 A B P clauses s s' t t' f) = (term122 A B P clauses s s' t t' f).
Proof. exact (fun_ext (fun x : P => @lem8392607 A B P clauses s s' t x t' f)). Qed.
Lemma lem8392609 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8392610 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term124 A B P clauses s s' t t' f) = (term124 A B P clauses s s' t t' f).
Proof. exact (MK_COMB (@lem8392609 P) (@lem8392608 A B P clauses s s' t t' f)). Qed.
Lemma lem8392611 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term126 A B P clauses s s' t t') = (term126 A B P clauses s s' t t').
Proof. exact (fun_ext (fun f : A -> B => @lem8392610 A B P clauses s s' t t' f)). Qed.
Lemma lem8392612 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8392613 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term128 A B P clauses s s' t t') = (term128 A B P clauses s s' t t').
Proof. exact (MK_COMB (@lem8392612 A B) (@lem8392611 A B P clauses s s' t t')). Qed.
Lemma lem8392614 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term130 A B P clauses s s' t) = (term130 A B P clauses s s' t).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8392613 A B P clauses s s' t t')). Qed.
Lemma lem8392615 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8392616 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term132 A B P clauses s s' t) = (term132 A B P clauses s s' t).
Proof. exact (MK_COMB (@lem8392615 A B P) (@lem8392614 A B P clauses s s' t)). Qed.
Lemma lem8392617 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term134 A B P clauses s t) = (term134 A B P clauses s t).
Proof. exact (fun_ext (fun s' : P -> A => @lem8392616 A B P clauses s s' t)). Qed.
Lemma lem8392618 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8392619 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term136 A B P clauses s t) = (term136 A B P clauses s t).
Proof. exact (MK_COMB (@lem8392618 A P) (@lem8392617 A B P clauses s t)). Qed.
Lemma lem8392620 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term138 A B P clauses s) = (term138 A B P clauses s).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8392619 A B P clauses s t)). Qed.
Lemma lem8392621 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8392622 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term140 A B P clauses s) = (term140 A B P clauses s).
Proof. exact (MK_COMB (@lem8392621 A B P) (@lem8392620 A B P clauses s)). Qed.
Lemma lem8392623 {A B P : Type'} (clauses : type1635 A B P) : (term142 A B P clauses) = (term142 A B P clauses).
Proof. exact (fun_ext (fun s : P -> A => @lem8392622 A B P clauses s)). Qed.
Lemma lem8392624 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8392625 {A B P : Type'} (clauses : type1635 A B P) : (term144 A B P clauses) = (term144 A B P clauses).
Proof. exact (MK_COMB (@lem8392624 A P) (@lem8392623 A B P clauses)). Qed.
Lemma lem8392626 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8392627 {A B P : Type'} (clauses : type1635 A B P) : (term248 A B P clauses) = (term248 A B P clauses).
Proof. exact (MK_COMB (@lem8392626) (@lem8392625 A B P clauses)). Qed.
Lemma lem8392628 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term249 A B C P f clauses) = (term454 A B C P f clauses _115314).
Proof. exact (MK_COMB (@lem8392627 A B P clauses) (@lem8392555 A B C P f clauses _115314 h1)). Qed.
Lemma lem8392629 {A B C P : Type'} (clauses : type1635 A B P) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term251 A B C P clauses) = (term455 A B C P clauses _115314).
Proof. exact (fun_ext (fun f : A -> B => @lem8392628 A B C P f clauses _115314 h1)). Qed.
Lemma lem8392630 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8392631 {A B C P : Type'} (clauses : type1635 A B P) (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term253 A B C P clauses) = (term456 A B C P clauses _115314).
Proof. exact (MK_COMB (@lem8392630 A B) (@lem8392629 A B C P clauses _115314 h1)). Qed.
Lemma lem8392632 {A B C P : Type'} (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term255 A B C P) = (term457 A B C P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8392631 A B C P clauses _115314 h1)). Qed.
Lemma lem8392633 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8392634 {A B C P : Type'} (_115314 : type1080 A B P) (h1 : _115314 = (term258 A B P)) : (term257 A B C P) = (term458 A B C P _115314).
Proof. exact (MK_COMB (@lem8392633 A B P) (@lem8392632 A B C P _115314 h1)). Qed.
Lemma lem8392635 {A B C P : Type'} (_115314 : type1080 A B P) : term459 A B C P _115314.
Proof. exact (fun h0 : _115314 = (term258 A B P) => @lem8392634 A B C P _115314 h0). Qed.
Lemma lem8392636 {A B C P : Type'} : term460 A B C P.
Proof. exact (fun _115314 : type1080 A B P => @lem8392635 A B C P _115314). Qed.
Lemma lem8392638 {_3603 : Type'} (P : Prop) (c : _3603) (Q : _3603 -> Prop) : term461 _3603 P c Q.
Proof. exact (EQ_MP (@lem20230 _3603 P c Q) (@lem0)). Qed.
Lemma lem8392639 {A B P : Type'} (P' : Prop) (c : type1080 A B P) (Q : type269 A B P) : term462 A B P P' c Q.
Proof. exact (@lem8392638 (type1080 A B P) P' c Q). Qed.
Lemma lem8392640 {A B C P : Type'} : term463 A B C P.
Proof. exact (@lem8392639 A B P (term257 A B C P) (term258 A B P) (term464 A B C P)). Qed.
Lemma lem8392641 {A B C P : Type'} (_115314 : type1080 A B P) : (term465 A B C P _115314) = (term458 A B C P _115314).
Proof. exact (eq_refl (term465 A B C P _115314)). Qed.
Lemma lem8392642 {A B C P : Type'} : (term466 A B C P) = (term466 A B C P).
Proof. exact (eq_refl (term466 A B C P)). Qed.
Lemma lem8392643 {A B C P : Type'} (_115314 : type1080 A B P) : ((term257 A B C P) = (term465 A B C P _115314)) = ((term257 A B C P) = (term458 A B C P _115314)).
Proof. exact (MK_COMB (@lem8392642 A B C P) (@lem8392641 A B C P _115314)). Qed.
Lemma lem8392644 {A B P : Type'} (_115314 : type1080 A B P) : (term467 A B P _115314) = (term467 A B P _115314).
Proof. exact (eq_refl (term467 A B P _115314)). Qed.
Lemma lem8392645 {A B C P : Type'} (_115314 : type1080 A B P) : (term468 A B C P _115314) = (term459 A B C P _115314).
Proof. exact (MK_COMB (@lem8392644 A B P _115314) (@lem8392643 A B C P _115314)). Qed.
Lemma lem8392646 {A B C P : Type'} : (term469 A B C P) = (term470 A B C P).
Proof. exact (fun_ext (fun _115314 : type1080 A B P => @lem8392645 A B C P _115314)). Qed.
Lemma lem8392647 {A B P : Type'} : (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8392648 {A B C P : Type'} : (term471 A B C P) = (term460 A B C P).
Proof. exact (MK_COMB (@lem8392647 A B P) (@lem8392646 A B C P)). Qed.
Lemma lem8392649 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8392650 {A B C P : Type'} : (term472 A B C P) = (term473 A B C P).
Proof. exact (MK_COMB (@lem8392649) (@lem8392648 A B C P)). Qed.
Lemma lem8392651 {A B C P : Type'} (_115314 : type1080 A B P) : (term465 A B C P _115314) = (term458 A B C P _115314).
Proof. exact (eq_refl (term465 A B C P _115314)). Qed.
Lemma lem8392652 {A B P : Type'} (_115314 : type1080 A B P) : (term467 A B P _115314) = (term467 A B P _115314).
Proof. exact (eq_refl (term467 A B P _115314)). Qed.
Lemma lem8392653 {A B C P : Type'} (_115314 : type1080 A B P) : (term474 A B C P _115314) = (term475 A B C P _115314).
Proof. exact (MK_COMB (@lem8392652 A B P _115314) (@lem8392651 A B C P _115314)). Qed.
Lemma lem8392654 {A B C P : Type'} : (term476 A B C P) = (term477 A B C P).
Proof. exact (fun_ext (fun _115314 : type1080 A B P => @lem8392653 A B C P _115314)). Qed.
Lemma lem8392655 {A B P : Type'} : (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8392656 {A B C P : Type'} : (term478 A B C P) = (term479 A B C P).
Proof. exact (MK_COMB (@lem8392655 A B P) (@lem8392654 A B C P)). Qed.
Lemma lem8392657 {A B C P : Type'} : (term466 A B C P) = (term466 A B C P).
Proof. exact (eq_refl (term466 A B C P)). Qed.
Lemma lem8392658 {A B C P : Type'} : ((term257 A B C P) = (term478 A B C P)) = ((term257 A B C P) = (term479 A B C P)).
Proof. exact (MK_COMB (@lem8392657 A B C P) (@lem8392656 A B C P)). Qed.
Lemma lem8392659 {A B C P : Type'} : (term463 A B C P) = (term480 A B C P).
Proof. exact (MK_COMB (@lem8392650 A B C P) (@lem8392658 A B C P)). Qed.
Lemma lem8392660 {A B C P : Type'} : term480 A B C P.
Proof. exact (EQ_MP (@lem8392659 A B C P) (@lem8392640 A B C P)). Qed.
Lemma lem8392661 {A B C P : Type'} : (term257 A B C P) = (term479 A B C P).
Proof. exact (@lem8392660 A B C P (@lem8392636 A B C P)). Qed.
Lemma lem8392663 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term481 _3571 _3575 t)) = (term482 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem8392664 {A B P : Type'} (s : type1080 A B P) (t : type1080 A B P) : (s = (term483 A B P t)) = (term484 A B P s t).
Proof. exact (@lem8392663 (type512 A B P) (type1635 A B P) s t). Qed.
Lemma lem8392665 {A B P : Type'} (_115314 : type1080 A B P) : (_115314 = (term485 A B P)) = (term486 A B P _115314).
Proof. exact (@lem8392664 A B P _115314 (term258 A B P)). Qed.
Lemma lem8392666 {A B P : Type'} (clauses : type1635 A B P) : (term259 A B P clauses) = (term260 A B P clauses).
Proof. exact (eq_refl (term259 A B P clauses)). Qed.
Lemma lem8392667 {A B P : Type'} : (term485 A B P) = (term258 A B P).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8392666 A B P clauses)). Qed.
Lemma lem8392668 {A B P : Type'} (_115314 : type1080 A B P) : (@eq ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop) _115314) = (@eq ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop) _115314).
Proof. exact (eq_refl (@eq ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop) _115314)). Qed.
Lemma lem8392669 {A B P : Type'} (_115314 : type1080 A B P) : (_115314 = (term485 A B P)) = (_115314 = (term258 A B P)).
Proof. exact (MK_COMB (@lem8392668 A B P _115314) (@lem8392667 A B P)). Qed.
Lemma lem8392670 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8392671 {A B P : Type'} (_115314 : type1080 A B P) : (term487 A B P _115314) = (term488 A B P _115314).
Proof. exact (MK_COMB (@lem8392670) (@lem8392669 A B P _115314)). Qed.
Lemma lem8392672 {A B P : Type'} (clauses : type1635 A B P) : (term259 A B P clauses) = (term260 A B P clauses).
Proof. exact (eq_refl (term259 A B P clauses)). Qed.
Lemma lem8392673 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term261 A B P _115314 clauses) = (term261 A B P _115314 clauses).
Proof. exact (eq_refl (term261 A B P _115314 clauses)). Qed.
Lemma lem8392674 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : ((_115314 clauses) = (term259 A B P clauses)) = ((_115314 clauses) = (term260 A B P clauses)).
Proof. exact (MK_COMB (@lem8392673 A B P _115314 clauses) (@lem8392672 A B P clauses)). Qed.
Lemma lem8392675 {A B P : Type'} (_115314 : type1080 A B P) : (term489 A B P _115314) = (term490 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8392674 A B P _115314 clauses)). Qed.
Lemma lem8392676 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8392677 {A B P : Type'} (_115314 : type1080 A B P) : (term486 A B P _115314) = (term491 A B P _115314).
Proof. exact (MK_COMB (@lem8392676 A B P) (@lem8392675 A B P _115314)). Qed.
Lemma lem8392678 {A B P : Type'} (_115314 : type1080 A B P) : ((_115314 = (term485 A B P)) = (term486 A B P _115314)) = ((_115314 = (term258 A B P)) = (term491 A B P _115314)).
Proof. exact (MK_COMB (@lem8392671 A B P _115314) (@lem8392677 A B P _115314)). Qed.
Lemma lem8392679 {A B P : Type'} (_115314 : type1080 A B P) : (_115314 = (term258 A B P)) = (term491 A B P _115314).
Proof. exact (EQ_MP (@lem8392678 A B P _115314) (@lem8392665 A B P _115314)). Qed.
Lemma lem8392681 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term481 _3571 _3575 t)) = (term482 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem8392682 {A B P : Type'} (s : type512 A B P) (t : type512 A B P) : (s = (term492 A B P t)) = (term493 A B P s t).
Proof. exact (@lem8392681 (type301 A B P) (A -> B) s t). Qed.
Lemma lem8392683 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : ((_115314 clauses) = (term494 A B P clauses)) = (term495 A B P _115314 clauses).
Proof. exact (@lem8392682 A B P (_115314 clauses) (term260 A B P clauses)). Qed.
Lemma lem8392684 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term262 A B P clauses f) = (term205 A B P clauses f).
Proof. exact (eq_refl (term262 A B P clauses f)). Qed.
Lemma lem8392685 {A B P : Type'} (clauses : type1635 A B P) : (term494 A B P clauses) = (term260 A B P clauses).
Proof. exact (fun_ext (fun f : A -> B => @lem8392684 A B P clauses f)). Qed.
Lemma lem8392686 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term261 A B P _115314 clauses) = (term261 A B P _115314 clauses).
Proof. exact (eq_refl (term261 A B P _115314 clauses)). Qed.
Lemma lem8392687 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : ((_115314 clauses) = (term494 A B P clauses)) = ((_115314 clauses) = (term260 A B P clauses)).
Proof. exact (MK_COMB (@lem8392686 A B P _115314 clauses) (@lem8392685 A B P clauses)). Qed.
Lemma lem8392688 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8392689 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term496 A B P _115314 clauses) = (term497 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8392688) (@lem8392687 A B P _115314 clauses)). Qed.
Lemma lem8392690 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term262 A B P clauses f) = (term205 A B P clauses f).
Proof. exact (eq_refl (term262 A B P clauses f)). Qed.
Lemma lem8392691 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term263 A B P _115314 clauses f) = (term263 A B P _115314 clauses f).
Proof. exact (eq_refl (term263 A B P _115314 clauses f)). Qed.
Lemma lem8392692 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : ((_115314 clauses f) = (term262 A B P clauses f)) = ((_115314 clauses f) = (term205 A B P clauses f)).
Proof. exact (MK_COMB (@lem8392691 A B P _115314 clauses f) (@lem8392690 A B P clauses f)). Qed.
Lemma lem8392693 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term498 A B P _115314 clauses) = (term499 A B P _115314 clauses).
Proof. exact (fun_ext (fun f : A -> B => @lem8392692 A B P _115314 clauses f)). Qed.
Lemma lem8392694 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8392695 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term495 A B P _115314 clauses) = (term500 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8392694 A B) (@lem8392693 A B P _115314 clauses)). Qed.
Lemma lem8392696 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (((_115314 clauses) = (term494 A B P clauses)) = (term495 A B P _115314 clauses)) = (((_115314 clauses) = (term260 A B P clauses)) = (term500 A B P _115314 clauses)).
Proof. exact (MK_COMB (@lem8392689 A B P _115314 clauses) (@lem8392695 A B P _115314 clauses)). Qed.
Lemma lem8392697 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : ((_115314 clauses) = (term260 A B P clauses)) = (term500 A B P _115314 clauses).
Proof. exact (EQ_MP (@lem8392696 A B P _115314 clauses) (@lem8392683 A B P _115314 clauses)). Qed.
Lemma lem8392699 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term481 _3571 _3575 t)) = (term482 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem8392700 {A B P : Type'} (s : type301 A B P) (t : type301 A B P) : (s = (term501 A B P t)) = (term502 A B P s t).
Proof. exact (@lem8392699 Prop (type1177 A B P) s t). Qed.
Lemma lem8392701 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : ((_115314 clauses f) = (term503 A B P clauses f)) = (term504 A B P _115314 clauses f).
Proof. exact (@lem8392700 A B P (_115314 clauses f) (term205 A B P clauses f)). Qed.
Lemma lem8392702 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term505 A B P clauses f' f) = (term203 A B P f clauses f').
Proof. exact (eq_refl (term505 A B P clauses f' f)). Qed.
Lemma lem8392703 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term503 A B P clauses f) = (term205 A B P clauses f).
Proof. exact (fun_ext (fun f' : type1177 A B P => @lem8392702 A B P f' clauses f)). Qed.
Lemma lem8392704 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term263 A B P _115314 clauses f) = (term263 A B P _115314 clauses f).
Proof. exact (eq_refl (term263 A B P _115314 clauses f)). Qed.
Lemma lem8392705 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : ((_115314 clauses f) = (term503 A B P clauses f)) = ((_115314 clauses f) = (term205 A B P clauses f)).
Proof. exact (MK_COMB (@lem8392704 A B P _115314 clauses f) (@lem8392703 A B P clauses f)). Qed.
Lemma lem8392706 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8392707 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term506 A B P _115314 clauses f) = (term507 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8392706) (@lem8392705 A B P _115314 clauses f)). Qed.
Lemma lem8392708 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term505 A B P clauses f' f) = (term203 A B P f clauses f').
Proof. exact (eq_refl (term505 A B P clauses f' f)). Qed.
Lemma lem8392709 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) (f' : type1177 A B P) : (term508 A B P _115314 clauses f f') = (term508 A B P _115314 clauses f f').
Proof. exact (eq_refl (term508 A B P _115314 clauses f f')). Qed.
Lemma lem8392710 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : ((_115314 clauses f' f) = (term505 A B P clauses f' f)) = ((_115314 clauses f' f) = (term203 A B P f clauses f')).
Proof. exact (MK_COMB (@lem8392709 A B P _115314 clauses f' f) (@lem8392708 A B P f clauses f')). Qed.
Lemma lem8392711 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term509 A B P _115314 clauses f) = (term510 A B P _115314 clauses f).
Proof. exact (fun_ext (fun f' : type1177 A B P => @lem8392710 A B P _115314 f' clauses f)). Qed.
Lemma lem8392712 {A B P : Type'} : (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) = (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop))). Qed.
Lemma lem8392713 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term504 A B P _115314 clauses f) = (term511 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8392712 A B P) (@lem8392711 A B P _115314 clauses f)). Qed.
Lemma lem8392714 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (((_115314 clauses f) = (term503 A B P clauses f)) = (term504 A B P _115314 clauses f)) = (((_115314 clauses f) = (term205 A B P clauses f)) = (term511 A B P _115314 clauses f)).
Proof. exact (MK_COMB (@lem8392707 A B P _115314 clauses f) (@lem8392713 A B P _115314 clauses f)). Qed.
Lemma lem8392715 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : ((_115314 clauses f) = (term205 A B P clauses f)) = (term511 A B P _115314 clauses f).
Proof. exact (EQ_MP (@lem8392714 A B P _115314 clauses f) (@lem8392701 A B P _115314 clauses f)). Qed.
Lemma lem8392716 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : ((_115314 clauses f' f) = (term203 A B P f clauses f')) = ((_115314 clauses f' f) = (term203 A B P f clauses f')).
Proof. exact (eq_refl ((_115314 clauses f' f) = (term203 A B P f clauses f'))). Qed.
Lemma lem8392717 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term510 A B P _115314 clauses f) = (term510 A B P _115314 clauses f).
Proof. exact (fun_ext (fun f' : type1177 A B P => @lem8392716 A B P _115314 f' clauses f)). Qed.
Lemma lem8392718 {A B P : Type'} : (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) = (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop))). Qed.
Lemma lem8392719 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term511 A B P _115314 clauses f) = (term511 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8392718 A B P) (@lem8392717 A B P _115314 clauses f)). Qed.
Lemma lem8392720 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : ((_115314 clauses f) = (term205 A B P clauses f)) = (term511 A B P _115314 clauses f).
Proof. exact (TRANS (@lem8392715 A B P _115314 clauses f) (@lem8392719 A B P _115314 clauses f)). Qed.
Lemma lem8392721 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term499 A B P _115314 clauses) = (term512 A B P _115314 clauses).
Proof. exact (fun_ext (fun f : A -> B => @lem8392720 A B P _115314 clauses f)). Qed.
Lemma lem8392722 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8392723 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term500 A B P _115314 clauses) = (term513 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8392722 A B) (@lem8392721 A B P _115314 clauses)). Qed.
Lemma lem8392724 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : ((_115314 clauses) = (term260 A B P clauses)) = (term513 A B P _115314 clauses).
Proof. exact (TRANS (@lem8392697 A B P _115314 clauses) (@lem8392723 A B P _115314 clauses)). Qed.
Lemma lem8392725 {A B P : Type'} (_115314 : type1080 A B P) : (term490 A B P _115314) = (term514 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8392724 A B P _115314 clauses)). Qed.
Lemma lem8392726 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8392727 {A B P : Type'} (_115314 : type1080 A B P) : (term491 A B P _115314) = (term515 A B P _115314).
Proof. exact (MK_COMB (@lem8392726 A B P) (@lem8392725 A B P _115314)). Qed.
Lemma lem8392728 {A B P : Type'} (_115314 : type1080 A B P) : (_115314 = (term258 A B P)) = (term515 A B P _115314).
Proof. exact (TRANS (@lem8392679 A B P _115314) (@lem8392727 A B P _115314)). Qed.
Lemma lem8392729 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8392730 {A B P : Type'} (_115314 : type1080 A B P) : (term467 A B P _115314) = (term516 A B P _115314).
Proof. exact (MK_COMB (@lem8392729) (@lem8392728 A B P _115314)). Qed.
Lemma lem8392731 {A B C P : Type'} (_115314 : type1080 A B P) : (term458 A B C P _115314) = (term458 A B C P _115314).
Proof. exact (eq_refl (term458 A B C P _115314)). Qed.
Lemma lem8392732 {A B C P : Type'} (_115314 : type1080 A B P) : (term475 A B C P _115314) = (term517 A B C P _115314).
Proof. exact (MK_COMB (@lem8392730 A B P _115314) (@lem8392731 A B C P _115314)). Qed.
Lemma lem8392733 {A B C P : Type'} : (term477 A B C P) = (term518 A B C P).
Proof. exact (fun_ext (fun _115314 : type1080 A B P => @lem8392732 A B C P _115314)). Qed.
Lemma lem8392734 {A B P : Type'} : (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8392735 {A B C P : Type'} : (term479 A B C P) = (term519 A B C P).
Proof. exact (MK_COMB (@lem8392734 A B P) (@lem8392733 A B C P)). Qed.
Lemma lem8392736 {A B C P : Type'} : (term466 A B C P) = (term466 A B C P).
Proof. exact (eq_refl (term466 A B C P)). Qed.
Lemma lem8392737 {A B C P : Type'} : ((term257 A B C P) = (term479 A B C P)) = ((term257 A B C P) = (term519 A B C P)).
Proof. exact (MK_COMB (@lem8392736 A B C P) (@lem8392735 A B C P)). Qed.
Lemma lem8392738 {A B C P : Type'} : (term257 A B C P) = (term519 A B C P).
Proof. exact (EQ_MP (@lem8392737 A B C P) (@lem8392661 A B C P)). Qed.
Lemma lem8392739 {A C P : Type'} (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : _115315 = (term520 A C P).
Proof. exact (h1). Qed.
Lemma lem8392740 {A C P : Type'} (clauses : type1636 A C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8392741 {A C P : Type'} (clauses : type1636 A C P) (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (_115315 clauses) = (term521 A C P clauses).
Proof. exact (MK_COMB (@lem8392739 A C P _115315 h1) (@lem8392740 A C P clauses)). Qed.
Lemma lem8392742 {A C P : Type'} (clauses : type1636 A C P) : (term521 A C P clauses) = (term522 A C P clauses).
Proof. exact (eq_refl (term521 A C P clauses)). Qed.
Lemma lem8392743 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term523 A C P _115315 clauses) = (term523 A C P _115315 clauses).
Proof. exact (eq_refl (term523 A C P _115315 clauses)). Qed.
Lemma lem8392744 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : ((_115315 clauses) = (term521 A C P clauses)) = ((_115315 clauses) = (term522 A C P clauses)).
Proof. exact (MK_COMB (@lem8392743 A C P _115315 clauses) (@lem8392742 A C P clauses)). Qed.
Lemma lem8392745 {A C P : Type'} (clauses : type1636 A C P) (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (_115315 clauses) = (term522 A C P clauses).
Proof. exact (EQ_MP (@lem8392744 A C P _115315 clauses) (@lem8392741 A C P clauses _115315 h1)). Qed.
Lemma lem8392746 {C : Type'} (c : C) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8392747 {A C P : Type'} (clauses : type1636 A C P) (c : C) (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (_115315 clauses c) = (term524 A C P clauses c).
Proof. exact (MK_COMB (@lem8392745 A C P clauses _115315 h1) (@lem8392746 C c)). Qed.
Lemma lem8392748 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term524 A C P clauses c) = (term366 A C P clauses c).
Proof. exact (eq_refl (term524 A C P clauses c)). Qed.
Lemma lem8392749 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term525 A C P _115315 clauses c) = (term525 A C P _115315 clauses c).
Proof. exact (eq_refl (term525 A C P _115315 clauses c)). Qed.
Lemma lem8392750 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : ((_115315 clauses c) = (term524 A C P clauses c)) = ((_115315 clauses c) = (term366 A C P clauses c)).
Proof. exact (MK_COMB (@lem8392749 A C P _115315 clauses c) (@lem8392748 A C P clauses c)). Qed.
Lemma lem8392751 {A C P : Type'} (clauses : type1636 A C P) (c : C) (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (_115315 clauses c) = (term366 A C P clauses c).
Proof. exact (EQ_MP (@lem8392750 A C P _115315 clauses c) (@lem8392747 A C P clauses c _115315 h1)). Qed.
Lemma lem8392753 {A B C P : Type'} (clauses : type1629 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8392772 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) (x : type558 A B P) : ((term264 A B C P clauses c s x) = (t c x)) = ((term264 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term264 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8392773 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term265 A B C P clauses s t c) = (term265 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : type558 A B P => @lem8392772 A B C P clauses s t c x)). Qed.
Lemma lem8392774 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8392775 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term266 A B C P clauses s t c) = (term266 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8392774 A B P) (@lem8392773 A B C P clauses s t c)). Qed.
Lemma lem8392784 {A B C P : Type'} (f : type1166 A B C P) (s : type115 A B P) (t : type1490 A B C P) : (term267 A B C P f s t) = (term267 A B C P f s t).
Proof. exact (eq_refl (term267 A B C P f s t)). Qed.
Lemma lem8392785 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term268 A B C P f clauses s t c) = (term268 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8392784 A B C P f s t) (@lem8392775 A B C P clauses s t c)). Qed.
Lemma lem8392786 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term269 A B C P f clauses s c) = (term269 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8392785 A B C P f clauses s t c)). Qed.
Lemma lem8392787 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8392788 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term270 A B C P f clauses s c) = (term270 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8392787 A B C P) (@lem8392786 A B C P f clauses s c)). Qed.
Lemma lem8392789 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term271 A B C P f clauses c) = (term271 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8392788 A B C P f clauses s c)). Qed.
Lemma lem8392790 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8392791 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term272 A B C P f clauses c) = (term272 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8392790 A B P) (@lem8392789 A B C P f clauses c)). Qed.
Lemma lem8392792 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term273 A B C P clauses c) = (term273 A B C P clauses c).
Proof. exact (fun_ext (fun f : type1166 A B C P => @lem8392791 A B C P f clauses c)). Qed.
Lemma lem8392793 {A B C P : Type'} : (@GABS ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)) = (@GABS ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop))). Qed.
Lemma lem8392794 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term274 A B C P clauses c) = (term274 A B C P clauses c).
Proof. exact (MK_COMB (@lem8392793 A B C P) (@lem8392792 A B C P clauses c)). Qed.
Lemma lem8392795 {A B C P : Type'} : (@List.Forall (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) = (@List.Forall (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))).
Proof. exact (eq_refl (@List.Forall (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))). Qed.
Lemma lem8392796 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term275 A B C P clauses c) = (term275 A B C P clauses c).
Proof. exact (MK_COMB (@lem8392795 A B C P) (@lem8392794 A B C P clauses c)). Qed.
Lemma lem8392797 {A B C P : Type'} (c : C) (clauses : type1629 A B C P) : (term276 A B C P c clauses) = (term276 A B C P c clauses).
Proof. exact (MK_COMB (@lem8392796 A B C P clauses c) (@lem8392753 A B C P clauses)). Qed.
Lemma lem8392846 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) (y : type558 A B P) : (term277 A B C P clauses s s' t x t' c y) = (term277 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term277 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8392847 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term278 A B C P clauses s s' t x t' c) = (term278 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : type558 A B P => @lem8392846 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8392848 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8392849 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term279 A B C P clauses s s' t x t' c) = (term279 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8392848 A B P) (@lem8392847 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8392850 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term280 A B C P clauses s s' t t' c) = (term280 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : type558 A B P => @lem8392849 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8392851 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8392852 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term281 A B C P clauses s s' t t' c) = (term281 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8392851 A B P) (@lem8392850 A B C P clauses s s' t t' c)). Qed.
Lemma lem8392853 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term282 A B C P clauses s s' t c) = (term282 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1490 A B C P => @lem8392852 A B C P clauses s s' t t' c)). Qed.
Lemma lem8392854 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8392855 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term283 A B C P clauses s s' t c) = (term283 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8392854 A B C P) (@lem8392853 A B C P clauses s s' t c)). Qed.
Lemma lem8392856 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term284 A B C P clauses s t c) = (term284 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type115 A B P => @lem8392855 A B C P clauses s s' t c)). Qed.
Lemma lem8392857 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8392858 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term285 A B C P clauses s t c) = (term285 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8392857 A B P) (@lem8392856 A B C P clauses s t c)). Qed.
Lemma lem8392859 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term286 A B C P clauses s c) = (term286 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8392858 A B C P clauses s t c)). Qed.
Lemma lem8392860 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8392861 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term287 A B C P clauses s c) = (term287 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8392860 A B C P) (@lem8392859 A B C P clauses s c)). Qed.
Lemma lem8392862 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term288 A B C P clauses c) = (term288 A B C P clauses c).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8392861 A B C P clauses s c)). Qed.
Lemma lem8392863 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8392864 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term289 A B C P clauses c) = (term289 A B C P clauses c).
Proof. exact (MK_COMB (@lem8392863 A B P) (@lem8392862 A B C P clauses c)). Qed.
Lemma lem8392865 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8392866 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term290 A B C P clauses c) = (term290 A B C P clauses c).
Proof. exact (MK_COMB (@lem8392865) (@lem8392864 A B C P clauses c)). Qed.
Lemma lem8392867 {A B C P : Type'} (c : C) (clauses : type1629 A B C P) : (term291 A B C P c clauses) = (term291 A B C P c clauses).
Proof. exact (MK_COMB (@lem8392866 A B C P clauses c) (@lem8392797 A B C P c clauses)). Qed.
Lemma lem8392868 {A B C P : Type'} (clauses : type1629 A B C P) : (term292 A B C P clauses) = (term292 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8392867 A B C P c clauses)). Qed.
Lemma lem8392869 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8392870 {A B C P : Type'} (clauses : type1629 A B C P) : (term293 A B C P clauses) = (term293 A B C P clauses).
Proof. exact (MK_COMB (@lem8392869 C) (@lem8392868 A B C P clauses)). Qed.
Lemma lem8392871 {A B C P : Type'} : (term294 A B C P) = (term294 A B C P).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8392870 A B C P clauses)). Qed.
Lemma lem8392872 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8392873 {A B C P : Type'} : (term219 A B C P) = (term219 A B C P).
Proof. exact (MK_COMB (@lem8392872 A B C P) (@lem8392871 A B C P)). Qed.
Lemma lem8392874 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8392875 {A B C P : Type'} : (term225 A B C P) = (term225 A B C P).
Proof. exact (MK_COMB (@lem8392874) (@lem8392873 A B C P)). Qed.
Lemma lem8392876 {A B C P : Type'} (clauses : type1631 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8392895 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) (x : P -> A) : ((term295 A B C P clauses c s x) = (t c x)) = ((term295 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term295 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8392896 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term296 A B C P clauses s t c) = (term296 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : P -> A => @lem8392895 A B C P clauses s t c x)). Qed.
Lemma lem8392897 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8392898 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term297 A B C P clauses s t c) = (term297 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8392897 A P) (@lem8392896 A B C P clauses s t c)). Qed.
Lemma lem8392907 {A B C P : Type'} (f : type1168 A B C P) (s : type802 A P) (t : type1512 A B C P) : (term298 A B C P f s t) = (term298 A B C P f s t).
Proof. exact (eq_refl (term298 A B C P f s t)). Qed.
Lemma lem8392908 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term299 A B C P f clauses s t c) = (term299 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8392907 A B C P f s t) (@lem8392898 A B C P clauses s t c)). Qed.
Lemma lem8392909 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term300 A B C P f clauses s c) = (term300 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8392908 A B C P f clauses s t c)). Qed.
Lemma lem8392910 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8392911 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term301 A B C P f clauses s c) = (term301 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8392910 A B C P) (@lem8392909 A B C P f clauses s c)). Qed.
Lemma lem8392912 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term302 A B C P f clauses c) = (term302 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type802 A P => @lem8392911 A B C P f clauses s c)). Qed.
Lemma lem8392913 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8392914 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term303 A B C P f clauses c) = (term303 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8392913 A P) (@lem8392912 A B C P f clauses c)). Qed.
Lemma lem8392915 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term304 A B C P clauses c) = (term304 A B C P clauses c).
Proof. exact (fun_ext (fun f : type1168 A B C P => @lem8392914 A B C P f clauses c)). Qed.
Lemma lem8392916 {A B C P : Type'} : (@GABS ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)) = (@GABS ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop))). Qed.
Lemma lem8392917 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term305 A B C P clauses c) = (term305 A B C P clauses c).
Proof. exact (MK_COMB (@lem8392916 A B C P) (@lem8392915 A B C P clauses c)). Qed.
Lemma lem8392918 {A B C P : Type'} : (@List.Forall (prod ((P -> A) -> A) (C -> (P -> A) -> B))) = (@List.Forall (prod ((P -> A) -> A) (C -> (P -> A) -> B))).
Proof. exact (eq_refl (@List.Forall (prod ((P -> A) -> A) (C -> (P -> A) -> B)))). Qed.
Lemma lem8392919 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term306 A B C P clauses c) = (term306 A B C P clauses c).
Proof. exact (MK_COMB (@lem8392918 A B C P) (@lem8392917 A B C P clauses c)). Qed.
Lemma lem8392920 {A B C P : Type'} (c : C) (clauses : type1631 A B C P) : (term307 A B C P c clauses) = (term307 A B C P c clauses).
Proof. exact (MK_COMB (@lem8392919 A B C P clauses c) (@lem8392876 A B C P clauses)). Qed.
Lemma lem8392969 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) (y : P -> A) : (term308 A B C P clauses s s' t x t' c y) = (term308 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term308 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8392970 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term309 A B C P clauses s s' t x t' c) = (term309 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P -> A => @lem8392969 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8392971 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8392972 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term310 A B C P clauses s s' t x t' c) = (term310 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8392971 A P) (@lem8392970 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8392973 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term311 A B C P clauses s s' t t' c) = (term311 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P -> A => @lem8392972 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8392974 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8392975 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term312 A B C P clauses s s' t t' c) = (term312 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8392974 A P) (@lem8392973 A B C P clauses s s' t t' c)). Qed.
Lemma lem8392976 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term313 A B C P clauses s s' t c) = (term313 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1512 A B C P => @lem8392975 A B C P clauses s s' t t' c)). Qed.
Lemma lem8392977 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8392978 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term314 A B C P clauses s s' t c) = (term314 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8392977 A B C P) (@lem8392976 A B C P clauses s s' t c)). Qed.
Lemma lem8392979 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term315 A B C P clauses s t c) = (term315 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type802 A P => @lem8392978 A B C P clauses s s' t c)). Qed.
Lemma lem8392980 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8392981 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term316 A B C P clauses s t c) = (term316 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8392980 A P) (@lem8392979 A B C P clauses s t c)). Qed.
Lemma lem8392982 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term317 A B C P clauses s c) = (term317 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8392981 A B C P clauses s t c)). Qed.
Lemma lem8392983 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8392984 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term318 A B C P clauses s c) = (term318 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8392983 A B C P) (@lem8392982 A B C P clauses s c)). Qed.
Lemma lem8392985 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term319 A B C P clauses c) = (term319 A B C P clauses c).
Proof. exact (fun_ext (fun s : type802 A P => @lem8392984 A B C P clauses s c)). Qed.
Lemma lem8392986 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8392987 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term320 A B C P clauses c) = (term320 A B C P clauses c).
Proof. exact (MK_COMB (@lem8392986 A P) (@lem8392985 A B C P clauses c)). Qed.
Lemma lem8392988 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8392989 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term321 A B C P clauses c) = (term321 A B C P clauses c).
Proof. exact (MK_COMB (@lem8392988) (@lem8392987 A B C P clauses c)). Qed.
Lemma lem8392990 {A B C P : Type'} (c : C) (clauses : type1631 A B C P) : (term322 A B C P c clauses) = (term322 A B C P c clauses).
Proof. exact (MK_COMB (@lem8392989 A B C P clauses c) (@lem8392920 A B C P c clauses)). Qed.
Lemma lem8392991 {A B C P : Type'} (clauses : type1631 A B C P) : (term323 A B C P clauses) = (term323 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8392990 A B C P c clauses)). Qed.
Lemma lem8392992 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8392993 {A B C P : Type'} (clauses : type1631 A B C P) : (term324 A B C P clauses) = (term324 A B C P clauses).
Proof. exact (MK_COMB (@lem8392992 C) (@lem8392991 A B C P clauses)). Qed.
Lemma lem8392994 {A B C P : Type'} : (term325 A B C P) = (term325 A B C P).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8392993 A B C P clauses)). Qed.
Lemma lem8392995 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8392996 {A B C P : Type'} : (term218 A B C P) = (term218 A B C P).
Proof. exact (MK_COMB (@lem8392995 A B C P) (@lem8392994 A B C P)). Qed.
Lemma lem8392997 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8392998 {A B C P : Type'} : (term226 A B C P) = (term226 A B C P).
Proof. exact (MK_COMB (@lem8392997) (@lem8392996 A B C P)). Qed.
Lemma lem8392999 {A B C P : Type'} : (term228 A B C P) = (term228 A B C P).
Proof. exact (MK_COMB (@lem8392998 A B C P) (@lem8392875 A B C P)). Qed.
Lemma lem8393000 {A B C P : Type'} (clauses : type1630 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8393019 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) (x : A -> B) : ((term326 A B C P clauses c s x) = (t c x)) = ((term326 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term326 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8393020 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term327 A B C P clauses s t c) = (term327 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : A -> B => @lem8393019 A B C P clauses s t c x)). Qed.
Lemma lem8393021 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8393022 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term328 A B C P clauses s t c) = (term328 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8393021 A B) (@lem8393020 A B C P clauses s t c)). Qed.
Lemma lem8393031 {A B C P : Type'} (f : type1167 A B C P) (s : type558 A B P) (t : type1506 A B C) : (term329 A B C P f s t) = (term329 A B C P f s t).
Proof. exact (eq_refl (term329 A B C P f s t)). Qed.
Lemma lem8393032 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term330 A B C P f clauses s t c) = (term330 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8393031 A B C P f s t) (@lem8393022 A B C P clauses s t c)). Qed.
Lemma lem8393033 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term331 A B C P f clauses s c) = (term331 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8393032 A B C P f clauses s t c)). Qed.
Lemma lem8393034 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8393035 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term332 A B C P f clauses s c) = (term332 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8393034 A B C) (@lem8393033 A B C P f clauses s c)). Qed.
Lemma lem8393036 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term333 A B C P f clauses c) = (term333 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8393035 A B C P f clauses s c)). Qed.
Lemma lem8393037 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8393038 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term334 A B C P f clauses c) = (term334 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8393037 A B P) (@lem8393036 A B C P f clauses c)). Qed.
Lemma lem8393039 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term335 A B C P clauses c) = (term335 A B C P clauses c).
Proof. exact (fun_ext (fun f : type1167 A B C P => @lem8393038 A B C P f clauses c)). Qed.
Lemma lem8393040 {A B C P : Type'} : (@GABS ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)) = (@GABS ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop))). Qed.
Lemma lem8393041 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term336 A B C P clauses c) = (term336 A B C P clauses c).
Proof. exact (MK_COMB (@lem8393040 A B C P) (@lem8393039 A B C P clauses c)). Qed.
Lemma lem8393042 {A B C P : Type'} : (@List.Forall (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) = (@List.Forall (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))).
Proof. exact (eq_refl (@List.Forall (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))). Qed.
Lemma lem8393043 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term337 A B C P clauses c) = (term337 A B C P clauses c).
Proof. exact (MK_COMB (@lem8393042 A B C P) (@lem8393041 A B C P clauses c)). Qed.
Lemma lem8393044 {A B C P : Type'} (c : C) (clauses : type1630 A B C P) : (term338 A B C P c clauses) = (term338 A B C P c clauses).
Proof. exact (MK_COMB (@lem8393043 A B C P clauses c) (@lem8393000 A B C P clauses)). Qed.
Lemma lem8393093 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) (y : A -> B) : (term339 A B C P clauses s s' t x t' c y) = (term339 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term339 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8393094 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term340 A B C P clauses s s' t x t' c) = (term340 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : A -> B => @lem8393093 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8393095 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8393096 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term341 A B C P clauses s s' t x t' c) = (term341 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8393095 A B) (@lem8393094 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8393097 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term342 A B C P clauses s s' t t' c) = (term342 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : A -> B => @lem8393096 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8393098 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8393099 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term343 A B C P clauses s s' t t' c) = (term343 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8393098 A B) (@lem8393097 A B C P clauses s s' t t' c)). Qed.
Lemma lem8393100 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term344 A B C P clauses s s' t c) = (term344 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1506 A B C => @lem8393099 A B C P clauses s s' t t' c)). Qed.
Lemma lem8393101 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8393102 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term345 A B C P clauses s s' t c) = (term345 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8393101 A B C) (@lem8393100 A B C P clauses s s' t c)). Qed.
Lemma lem8393103 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term346 A B C P clauses s t c) = (term346 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type558 A B P => @lem8393102 A B C P clauses s s' t c)). Qed.
Lemma lem8393104 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8393105 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term347 A B C P clauses s t c) = (term347 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8393104 A B P) (@lem8393103 A B C P clauses s t c)). Qed.
Lemma lem8393106 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term348 A B C P clauses s c) = (term348 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8393105 A B C P clauses s t c)). Qed.
Lemma lem8393107 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8393108 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term349 A B C P clauses s c) = (term349 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8393107 A B C) (@lem8393106 A B C P clauses s c)). Qed.
Lemma lem8393109 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term350 A B C P clauses c) = (term350 A B C P clauses c).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8393108 A B C P clauses s c)). Qed.
Lemma lem8393110 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8393111 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term351 A B C P clauses c) = (term351 A B C P clauses c).
Proof. exact (MK_COMB (@lem8393110 A B P) (@lem8393109 A B C P clauses c)). Qed.
Lemma lem8393112 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8393113 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term352 A B C P clauses c) = (term352 A B C P clauses c).
Proof. exact (MK_COMB (@lem8393112) (@lem8393111 A B C P clauses c)). Qed.
Lemma lem8393114 {A B C P : Type'} (c : C) (clauses : type1630 A B C P) : (term353 A B C P c clauses) = (term353 A B C P c clauses).
Proof. exact (MK_COMB (@lem8393113 A B C P clauses c) (@lem8393044 A B C P c clauses)). Qed.
Lemma lem8393115 {A B C P : Type'} (clauses : type1630 A B C P) : (term354 A B C P clauses) = (term354 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8393114 A B C P c clauses)). Qed.
Lemma lem8393116 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8393117 {A B C P : Type'} (clauses : type1630 A B C P) : (term355 A B C P clauses) = (term355 A B C P clauses).
Proof. exact (MK_COMB (@lem8393116 C) (@lem8393115 A B C P clauses)). Qed.
Lemma lem8393118 {A B C P : Type'} : (term356 A B C P) = (term356 A B C P).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8393117 A B C P clauses)). Qed.
Lemma lem8393119 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8393120 {A B C P : Type'} : (term217 A B C P) = (term217 A B C P).
Proof. exact (MK_COMB (@lem8393119 A B C P) (@lem8393118 A B C P)). Qed.
Lemma lem8393121 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8393122 {A B C P : Type'} : (term229 A B C P) = (term229 A B C P).
Proof. exact (MK_COMB (@lem8393121) (@lem8393120 A B C P)). Qed.
Lemma lem8393123 {A B C P : Type'} : (term231 A B C P) = (term231 A B C P).
Proof. exact (MK_COMB (@lem8393122 A B C P) (@lem8392999 A B C P)). Qed.
Lemma lem8393124 {B C P : Type'} (clauses : type1636 B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8393144 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) (x : P) : ((term357 B C P clauses c s x) = (t c x)) = ((term357 B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term357 B C P clauses c s x) = (t c x))). Qed.
Lemma lem8393145 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term358 B C P clauses s t c) = (term358 B C P clauses s t c).
Proof. exact (fun_ext (fun x : P => @lem8393144 B C P clauses s t c x)). Qed.
Lemma lem8393146 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8393147 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term359 B C P clauses s t c) = (term359 B C P clauses s t c).
Proof. exact (MK_COMB (@lem8393146 P) (@lem8393145 B C P clauses s t c)). Qed.
Lemma lem8393156 {B C P : Type'} (f : type1178 B C P) (s : P -> B) (t : type1475 B C P) : (term360 B C P f s t) = (term360 B C P f s t).
Proof. exact (eq_refl (term360 B C P f s t)). Qed.
Lemma lem8393157 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term361 B C P f clauses s t c) = (term361 B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8393156 B C P f s t) (@lem8393147 B C P clauses s t c)). Qed.
Lemma lem8393158 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term362 B C P f clauses s c) = (term362 B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8393157 B C P f clauses s t c)). Qed.
Lemma lem8393159 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8393160 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term363 B C P f clauses s c) = (term363 B C P f clauses s c).
Proof. exact (MK_COMB (@lem8393159 B C P) (@lem8393158 B C P f clauses s c)). Qed.
Lemma lem8393161 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term364 B C P f clauses c) = (term364 B C P f clauses c).
Proof. exact (fun_ext (fun s : P -> B => @lem8393160 B C P f clauses s c)). Qed.
Lemma lem8393162 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8393163 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term365 B C P f clauses c) = (term365 B C P f clauses c).
Proof. exact (MK_COMB (@lem8393162 B P) (@lem8393161 B C P f clauses c)). Qed.
Lemma lem8393164 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term366 B C P clauses c) = (term366 B C P clauses c).
Proof. exact (fun_ext (fun f : type1178 B C P => @lem8393163 B C P f clauses c)). Qed.
Lemma lem8393165 {B C P : Type'} : (@GABS ((prod (P -> B) (C -> P -> B)) -> Prop)) = (@GABS ((prod (P -> B) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod (P -> B) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8393166 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term367 B C P clauses c) = (term367 B C P clauses c).
Proof. exact (MK_COMB (@lem8393165 B C P) (@lem8393164 B C P clauses c)). Qed.
Lemma lem8393167 {B C P : Type'} : (@List.Forall (prod (P -> B) (C -> P -> B))) = (@List.Forall (prod (P -> B) (C -> P -> B))).
Proof. exact (eq_refl (@List.Forall (prod (P -> B) (C -> P -> B)))). Qed.
Lemma lem8393168 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term368 B C P clauses c) = (term368 B C P clauses c).
Proof. exact (MK_COMB (@lem8393167 B C P) (@lem8393166 B C P clauses c)). Qed.
Lemma lem8393169 {B C P : Type'} (c : C) (clauses : type1636 B C P) : (term369 B C P c clauses) = (term369 B C P c clauses).
Proof. exact (MK_COMB (@lem8393168 B C P clauses c) (@lem8393124 B C P clauses)). Qed.
Lemma lem8393218 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term370 B C P clauses s s' t x t' c y) = (term370 B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term370 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8393219 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term371 B C P clauses s s' t x t' c) = (term371 B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8393218 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8393220 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8393221 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term372 B C P clauses s s' t x t' c) = (term372 B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8393220 P) (@lem8393219 B C P clauses s s' t x t' c)). Qed.
Lemma lem8393222 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term373 B C P clauses s s' t t' c) = (term373 B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8393221 B C P clauses s s' t x t' c)). Qed.
Lemma lem8393223 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8393224 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term374 B C P clauses s s' t t' c) = (term374 B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8393223 P) (@lem8393222 B C P clauses s s' t t' c)). Qed.
Lemma lem8393225 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term375 B C P clauses s s' t c) = (term375 B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8393224 B C P clauses s s' t t' c)). Qed.
Lemma lem8393226 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8393227 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term376 B C P clauses s s' t c) = (term376 B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8393226 B C P) (@lem8393225 B C P clauses s s' t c)). Qed.
Lemma lem8393228 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term377 B C P clauses s t c) = (term377 B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> B => @lem8393227 B C P clauses s s' t c)). Qed.
Lemma lem8393229 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8393230 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term378 B C P clauses s t c) = (term378 B C P clauses s t c).
Proof. exact (MK_COMB (@lem8393229 B P) (@lem8393228 B C P clauses s t c)). Qed.
Lemma lem8393231 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term379 B C P clauses s c) = (term379 B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8393230 B C P clauses s t c)). Qed.
Lemma lem8393232 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8393233 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term380 B C P clauses s c) = (term380 B C P clauses s c).
Proof. exact (MK_COMB (@lem8393232 B C P) (@lem8393231 B C P clauses s c)). Qed.
Lemma lem8393234 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term381 B C P clauses c) = (term381 B C P clauses c).
Proof. exact (fun_ext (fun s : P -> B => @lem8393233 B C P clauses s c)). Qed.
Lemma lem8393235 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8393236 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term382 B C P clauses c) = (term382 B C P clauses c).
Proof. exact (MK_COMB (@lem8393235 B P) (@lem8393234 B C P clauses c)). Qed.
Lemma lem8393237 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8393238 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term383 B C P clauses c) = (term383 B C P clauses c).
Proof. exact (MK_COMB (@lem8393237) (@lem8393236 B C P clauses c)). Qed.
Lemma lem8393239 {B C P : Type'} (c : C) (clauses : type1636 B C P) : (term384 B C P c clauses) = (term384 B C P c clauses).
Proof. exact (MK_COMB (@lem8393238 B C P clauses c) (@lem8393169 B C P c clauses)). Qed.
Lemma lem8393240 {B C P : Type'} (clauses : type1636 B C P) : (term385 B C P clauses) = (term385 B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8393239 B C P c clauses)). Qed.
Lemma lem8393241 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8393242 {B C P : Type'} (clauses : type1636 B C P) : (term386 B C P clauses) = (term386 B C P clauses).
Proof. exact (MK_COMB (@lem8393241 C) (@lem8393240 B C P clauses)). Qed.
Lemma lem8393243 {B C P : Type'} : (term387 B C P) = (term387 B C P).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8393242 B C P clauses)). Qed.
Lemma lem8393244 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8393245 {B C P : Type'} : (term216 B C P) = (term216 B C P).
Proof. exact (MK_COMB (@lem8393244 B C P) (@lem8393243 B C P)). Qed.
Lemma lem8393246 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8393247 {B C P : Type'} : (term232 B C P) = (term232 B C P).
Proof. exact (MK_COMB (@lem8393246) (@lem8393245 B C P)). Qed.
Lemma lem8393248 {A B C P : Type'} : (term234 A B C P) = (term234 A B C P).
Proof. exact (MK_COMB (@lem8393247 B C P) (@lem8393123 A B C P)). Qed.
Lemma lem8393259 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 c clauses) = (term390 A B P _115314 c clauses).
Proof. exact (eq_refl (term390 A B P _115314 c clauses)). Qed.
Lemma lem8393308 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) (y : P) : (term391 A B P clauses s s' t x t' c y) = (term391 A B P clauses s s' t x t' c y).
Proof. exact (eq_refl (term391 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8393309 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term392 A B P clauses s s' t x t' c) = (term392 A B P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8393308 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8393310 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8393311 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term393 A B P clauses s s' t x t' c) = (term393 A B P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8393310 P) (@lem8393309 A B P clauses s s' t x t' c)). Qed.
Lemma lem8393312 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term394 A B P clauses s s' t t' c) = (term394 A B P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8393311 A B P clauses s s' t x t' c)). Qed.
Lemma lem8393313 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8393314 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term395 A B P clauses s s' t t' c) = (term395 A B P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8393313 P) (@lem8393312 A B P clauses s s' t t' c)). Qed.
Lemma lem8393315 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term396 A B P clauses s s' t c) = (term396 A B P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8393314 A B P clauses s s' t t' c)). Qed.
Lemma lem8393316 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8393317 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term397 A B P clauses s s' t c) = (term397 A B P clauses s s' t c).
Proof. exact (MK_COMB (@lem8393316 A B P) (@lem8393315 A B P clauses s s' t c)). Qed.
Lemma lem8393318 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term398 A B P clauses s t c) = (term398 A B P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8393317 A B P clauses s s' t c)). Qed.
Lemma lem8393319 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8393320 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term399 A B P clauses s t c) = (term399 A B P clauses s t c).
Proof. exact (MK_COMB (@lem8393319 A P) (@lem8393318 A B P clauses s t c)). Qed.
Lemma lem8393321 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term400 A B P clauses s c) = (term400 A B P clauses s c).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8393320 A B P clauses s t c)). Qed.
Lemma lem8393322 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8393323 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term401 A B P clauses s c) = (term401 A B P clauses s c).
Proof. exact (MK_COMB (@lem8393322 A B P) (@lem8393321 A B P clauses s c)). Qed.
Lemma lem8393324 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term402 A B P clauses c) = (term402 A B P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8393323 A B P clauses s c)). Qed.
Lemma lem8393325 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8393326 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term403 A B P clauses c) = (term403 A B P clauses c).
Proof. exact (MK_COMB (@lem8393325 A P) (@lem8393324 A B P clauses c)). Qed.
Lemma lem8393327 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8393328 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term404 A B P clauses c) = (term404 A B P clauses c).
Proof. exact (MK_COMB (@lem8393327) (@lem8393326 A B P clauses c)). Qed.
Lemma lem8393329 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term406 A B P _115314 c clauses) = (term406 A B P _115314 c clauses).
Proof. exact (MK_COMB (@lem8393328 A B P clauses c) (@lem8393259 A B P _115314 c clauses)). Qed.
Lemma lem8393330 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term408 A B P _115314 clauses) = (term408 A B P _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8393329 A B P _115314 c clauses)). Qed.
Lemma lem8393331 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8393332 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term410 A B P _115314 clauses) = (term410 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8393331 A B) (@lem8393330 A B P _115314 clauses)). Qed.
Lemma lem8393333 {A B P : Type'} (_115314 : type1080 A B P) : (term412 A B P _115314) = (term412 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8393332 A B P _115314 clauses)). Qed.
Lemma lem8393334 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8393335 {A B P : Type'} (_115314 : type1080 A B P) : (term413 A B P _115314) = (term413 A B P _115314).
Proof. exact (MK_COMB (@lem8393334 A B P) (@lem8393333 A B P _115314)). Qed.
Lemma lem8393336 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8393337 {A B P : Type'} (_115314 : type1080 A B P) : (term414 A B P _115314) = (term414 A B P _115314).
Proof. exact (MK_COMB (@lem8393336) (@lem8393335 A B P _115314)). Qed.
Lemma lem8393338 {A B C P : Type'} (_115314 : type1080 A B P) : (term415 A B C P _115314) = (term415 A B C P _115314).
Proof. exact (MK_COMB (@lem8393337 A B P _115314) (@lem8393248 A B C P)). Qed.
Lemma lem8393339 {A B C P : Type'} (clauses : type1638 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8393358 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) (x : P) : ((term416 A B C P clauses c s x) = (t c x)) = ((term416 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term416 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8393359 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term417 A B C P clauses s t c) = (term417 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : P => @lem8393358 A B C P clauses s t c x)). Qed.
Lemma lem8393360 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8393361 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term418 A B C P clauses s t c) = (term418 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8393360 P) (@lem8393359 A B C P clauses s t c)). Qed.
Lemma lem8393370 {A B C P : Type'} (f : type1185 A B C P) (s : P -> A) (t : type1475 B C P) : (term419 A B C P f s t) = (term419 A B C P f s t).
Proof. exact (eq_refl (term419 A B C P f s t)). Qed.
Lemma lem8393371 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term420 A B C P f clauses s t c) = (term420 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8393370 A B C P f s t) (@lem8393361 A B C P clauses s t c)). Qed.
Lemma lem8393372 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term421 A B C P f clauses s c) = (term421 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8393371 A B C P f clauses s t c)). Qed.
Lemma lem8393373 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8393374 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term422 A B C P f clauses s c) = (term422 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8393373 B C P) (@lem8393372 A B C P f clauses s c)). Qed.
Lemma lem8393375 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term423 A B C P f clauses c) = (term423 A B C P f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8393374 A B C P f clauses s c)). Qed.
Lemma lem8393376 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8393377 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term424 A B C P f clauses c) = (term424 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8393376 A P) (@lem8393375 A B C P f clauses c)). Qed.
Lemma lem8393378 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term425 A B C P clauses c) = (term425 A B C P clauses c).
Proof. exact (fun_ext (fun f : type1185 A B C P => @lem8393377 A B C P f clauses c)). Qed.
Lemma lem8393379 {A B C P : Type'} : (@GABS ((prod (P -> A) (C -> P -> B)) -> Prop)) = (@GABS ((prod (P -> A) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod (P -> A) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8393380 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term426 A B C P clauses c) = (term426 A B C P clauses c).
Proof. exact (MK_COMB (@lem8393379 A B C P) (@lem8393378 A B C P clauses c)). Qed.
Lemma lem8393381 {A B C P : Type'} : (@List.Forall (prod (P -> A) (C -> P -> B))) = (@List.Forall (prod (P -> A) (C -> P -> B))).
Proof. exact (eq_refl (@List.Forall (prod (P -> A) (C -> P -> B)))). Qed.
Lemma lem8393382 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term427 A B C P clauses c) = (term427 A B C P clauses c).
Proof. exact (MK_COMB (@lem8393381 A B C P) (@lem8393380 A B C P clauses c)). Qed.
Lemma lem8393383 {A B C P : Type'} (c : C) (clauses : type1638 A B C P) : (term428 A B C P c clauses) = (term428 A B C P c clauses).
Proof. exact (MK_COMB (@lem8393382 A B C P clauses c) (@lem8393339 A B C P clauses)). Qed.
Lemma lem8393432 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term429 A B C P clauses s s' t x t' c y) = (term429 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term429 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8393433 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term430 A B C P clauses s s' t x t' c) = (term430 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8393432 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8393434 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8393435 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term431 A B C P clauses s s' t x t' c) = (term431 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8393434 P) (@lem8393433 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8393436 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term432 A B C P clauses s s' t t' c) = (term432 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8393435 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8393437 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8393438 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term433 A B C P clauses s s' t t' c) = (term433 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8393437 P) (@lem8393436 A B C P clauses s s' t t' c)). Qed.
Lemma lem8393439 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term434 A B C P clauses s s' t c) = (term434 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8393438 A B C P clauses s s' t t' c)). Qed.
Lemma lem8393440 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8393441 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term435 A B C P clauses s s' t c) = (term435 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8393440 B C P) (@lem8393439 A B C P clauses s s' t c)). Qed.
Lemma lem8393442 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term436 A B C P clauses s t c) = (term436 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8393441 A B C P clauses s s' t c)). Qed.
Lemma lem8393443 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8393444 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term437 A B C P clauses s t c) = (term437 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8393443 A P) (@lem8393442 A B C P clauses s t c)). Qed.
Lemma lem8393445 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term438 A B C P clauses s c) = (term438 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8393444 A B C P clauses s t c)). Qed.
Lemma lem8393446 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8393447 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term439 A B C P clauses s c) = (term439 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8393446 B C P) (@lem8393445 A B C P clauses s c)). Qed.
Lemma lem8393448 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term440 A B C P clauses c) = (term440 A B C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8393447 A B C P clauses s c)). Qed.
Lemma lem8393449 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8393450 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term441 A B C P clauses c) = (term441 A B C P clauses c).
Proof. exact (MK_COMB (@lem8393449 A P) (@lem8393448 A B C P clauses c)). Qed.
Lemma lem8393451 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8393452 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term442 A B C P clauses c) = (term442 A B C P clauses c).
Proof. exact (MK_COMB (@lem8393451) (@lem8393450 A B C P clauses c)). Qed.
Lemma lem8393453 {A B C P : Type'} (c : C) (clauses : type1638 A B C P) : (term443 A B C P c clauses) = (term443 A B C P c clauses).
Proof. exact (MK_COMB (@lem8393452 A B C P clauses c) (@lem8393383 A B C P c clauses)). Qed.
Lemma lem8393454 {A B C P : Type'} (clauses : type1638 A B C P) : (term444 A B C P clauses) = (term444 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8393453 A B C P c clauses)). Qed.
Lemma lem8393455 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8393456 {A B C P : Type'} (clauses : type1638 A B C P) : (term445 A B C P clauses) = (term445 A B C P clauses).
Proof. exact (MK_COMB (@lem8393455 C) (@lem8393454 A B C P clauses)). Qed.
Lemma lem8393457 {A B C P : Type'} : (term446 A B C P) = (term446 A B C P).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8393456 A B C P clauses)). Qed.
Lemma lem8393458 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8393459 {A B C P : Type'} : (term215 A B C P) = (term215 A B C P).
Proof. exact (MK_COMB (@lem8393458 A B C P) (@lem8393457 A B C P)). Qed.
Lemma lem8393460 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8393461 {A B C P : Type'} : (term238 A B C P) = (term238 A B C P).
Proof. exact (MK_COMB (@lem8393460) (@lem8393459 A B C P)). Qed.
Lemma lem8393462 {A B C P : Type'} (_115314 : type1080 A B P) : (term447 A B C P _115314) = (term447 A B C P _115314).
Proof. exact (MK_COMB (@lem8393461 A B C P) (@lem8393338 A B C P _115314)). Qed.
Lemma lem8393463 {A C P : Type'} (clauses : type1636 A C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8393465 {A C P : Type'} (clauses : type1636 A C P) (c : C) (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (term366 A C P clauses c) = (_115315 clauses c).
Proof. exact (SYM (@lem8392751 A C P clauses c _115315 h1)). Qed.
Lemma lem8393466 {A C P : Type'} (clauses : type1636 A C P) (c : C) (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (term366 A C P clauses c) = (_115315 clauses c).
Proof. exact (@lem8393465 A C P clauses c _115315 h1). Qed.
Lemma lem8393467 {A C P : Type'} : (@GABS ((prod (P -> A) (C -> P -> A)) -> Prop)) = (@GABS ((prod (P -> A) (C -> P -> A)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod (P -> A) (C -> P -> A)) -> Prop))). Qed.
Lemma lem8393468 {A C P : Type'} (clauses : type1636 A C P) (c : C) (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (term367 A C P clauses c) = (term526 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8393467 A C P) (@lem8393466 A C P clauses c _115315 h1)). Qed.
Lemma lem8393469 {A C P : Type'} : (@List.Forall (prod (P -> A) (C -> P -> A))) = (@List.Forall (prod (P -> A) (C -> P -> A))).
Proof. exact (eq_refl (@List.Forall (prod (P -> A) (C -> P -> A)))). Qed.
Lemma lem8393470 {A C P : Type'} (clauses : type1636 A C P) (c : C) (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (term368 A C P clauses c) = (term527 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8393469 A C P) (@lem8393468 A C P clauses c _115315 h1)). Qed.
Lemma lem8393471 {A C P : Type'} (c : C) (clauses : type1636 A C P) (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (term369 A C P c clauses) = (term528 A C P _115315 c clauses).
Proof. exact (MK_COMB (@lem8393470 A C P clauses c _115315 h1) (@lem8393463 A C P clauses)). Qed.
Lemma lem8393520 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) (y : P) : (term370 A C P clauses s s' t x t' c y) = (term370 A C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term370 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8393521 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term371 A C P clauses s s' t x t' c) = (term371 A C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8393520 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8393522 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8393523 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term372 A C P clauses s s' t x t' c) = (term372 A C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8393522 P) (@lem8393521 A C P clauses s s' t x t' c)). Qed.
Lemma lem8393524 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term373 A C P clauses s s' t t' c) = (term373 A C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8393523 A C P clauses s s' t x t' c)). Qed.
Lemma lem8393525 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8393526 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term374 A C P clauses s s' t t' c) = (term374 A C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8393525 P) (@lem8393524 A C P clauses s s' t t' c)). Qed.
Lemma lem8393527 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term375 A C P clauses s s' t c) = (term375 A C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 A C P => @lem8393526 A C P clauses s s' t t' c)). Qed.
Lemma lem8393528 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8393529 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term376 A C P clauses s s' t c) = (term376 A C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8393528 A C P) (@lem8393527 A C P clauses s s' t c)). Qed.
Lemma lem8393530 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term377 A C P clauses s t c) = (term377 A C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8393529 A C P clauses s s' t c)). Qed.
Lemma lem8393531 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8393532 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term378 A C P clauses s t c) = (term378 A C P clauses s t c).
Proof. exact (MK_COMB (@lem8393531 A P) (@lem8393530 A C P clauses s t c)). Qed.
Lemma lem8393533 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term379 A C P clauses s c) = (term379 A C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8393532 A C P clauses s t c)). Qed.
Lemma lem8393534 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8393535 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term380 A C P clauses s c) = (term380 A C P clauses s c).
Proof. exact (MK_COMB (@lem8393534 A C P) (@lem8393533 A C P clauses s c)). Qed.
Lemma lem8393536 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term381 A C P clauses c) = (term381 A C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8393535 A C P clauses s c)). Qed.
Lemma lem8393537 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8393538 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term382 A C P clauses c) = (term382 A C P clauses c).
Proof. exact (MK_COMB (@lem8393537 A P) (@lem8393536 A C P clauses c)). Qed.
Lemma lem8393539 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8393540 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term383 A C P clauses c) = (term383 A C P clauses c).
Proof. exact (MK_COMB (@lem8393539) (@lem8393538 A C P clauses c)). Qed.
Lemma lem8393541 {A C P : Type'} (c : C) (clauses : type1636 A C P) (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (term384 A C P c clauses) = (term529 A C P _115315 c clauses).
Proof. exact (MK_COMB (@lem8393540 A C P clauses c) (@lem8393471 A C P c clauses _115315 h1)). Qed.
Lemma lem8393542 {A C P : Type'} (clauses : type1636 A C P) (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (term385 A C P clauses) = (term530 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8393541 A C P c clauses _115315 h1)). Qed.
Lemma lem8393543 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8393544 {A C P : Type'} (clauses : type1636 A C P) (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (term386 A C P clauses) = (term531 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8393543 C) (@lem8393542 A C P clauses _115315 h1)). Qed.
Lemma lem8393545 {A C P : Type'} (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (term387 A C P) = (term532 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8393544 A C P clauses _115315 h1)). Qed.
Lemma lem8393546 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8393547 {A C P : Type'} (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (term216 A C P) = (term533 A C P _115315).
Proof. exact (MK_COMB (@lem8393546 A C P) (@lem8393545 A C P _115315 h1)). Qed.
Lemma lem8393548 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8393549 {A C P : Type'} (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (term232 A C P) = (term534 A C P _115315).
Proof. exact (MK_COMB (@lem8393548) (@lem8393547 A C P _115315 h1)). Qed.
Lemma lem8393550 {A B C P : Type'} (_115314 : type1080 A B P) (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (term448 A B C P _115314) = (term535 A B C P _115315 _115314).
Proof. exact (MK_COMB (@lem8393549 A C P _115315 h1) (@lem8393462 A B C P _115314)). Qed.
Lemma lem8393565 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) : (term450 A B P _115314 f clauses) = (term450 A B P _115314 f clauses).
Proof. exact (eq_refl (term450 A B P _115314 f clauses)). Qed.
Lemma lem8393566 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115314 : type1080 A B P) (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (term451 A B C P f clauses _115314) = (term536 A B C P f clauses _115315 _115314).
Proof. exact (MK_COMB (@lem8393565 A B P _115314 f clauses) (@lem8393550 A B C P _115314 _115315 h1)). Qed.
Lemma lem8393579 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (x : A) : ((f x) = (@CASEWISE B P A (A -> B) clauses f x)) = ((f x) = (@CASEWISE B P A (A -> B) clauses f x)).
Proof. exact (eq_refl ((f x) = (@CASEWISE B P A (A -> B) clauses f x))). Qed.
Lemma lem8393580 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term452 A B P clauses f) = (term452 A B P clauses f).
Proof. exact (fun_ext (fun x : A => @lem8393579 A B P clauses f x)). Qed.
Lemma lem8393581 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8393582 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term162 A B P clauses f) = (term162 A B P clauses f).
Proof. exact (MK_COMB (@lem8393581 A) (@lem8393580 A B P clauses f)). Qed.
Lemma lem8393583 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8393584 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term164 A B P clauses f) = (term164 A B P clauses f).
Proof. exact (MK_COMB (@lem8393583) (@lem8393582 A B P clauses f)). Qed.
Lemma lem8393585 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115314 : type1080 A B P) (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (term453 A B C P f clauses _115314) = (term537 A B C P f clauses _115315 _115314).
Proof. exact (MK_COMB (@lem8393584 A B P clauses f) (@lem8393566 A B C P f clauses _115314 _115315 h1)). Qed.
Lemma lem8393634 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) (y : P) : (term115 A B P clauses s s' t x t' f y) = (term115 A B P clauses s s' t x t' f y).
Proof. exact (eq_refl (term115 A B P clauses s s' t x t' f y)). Qed.
Lemma lem8393635 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term118 A B P clauses s s' t x t' f) = (term118 A B P clauses s s' t x t' f).
Proof. exact (fun_ext (fun y : P => @lem8393634 A B P clauses s s' t x t' f y)). Qed.
Lemma lem8393636 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8393637 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term120 A B P clauses s s' t x t' f) = (term120 A B P clauses s s' t x t' f).
Proof. exact (MK_COMB (@lem8393636 P) (@lem8393635 A B P clauses s s' t x t' f)). Qed.
Lemma lem8393638 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term122 A B P clauses s s' t t' f) = (term122 A B P clauses s s' t t' f).
Proof. exact (fun_ext (fun x : P => @lem8393637 A B P clauses s s' t x t' f)). Qed.
Lemma lem8393639 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8393640 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term124 A B P clauses s s' t t' f) = (term124 A B P clauses s s' t t' f).
Proof. exact (MK_COMB (@lem8393639 P) (@lem8393638 A B P clauses s s' t t' f)). Qed.
Lemma lem8393641 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term126 A B P clauses s s' t t') = (term126 A B P clauses s s' t t').
Proof. exact (fun_ext (fun f : A -> B => @lem8393640 A B P clauses s s' t t' f)). Qed.
Lemma lem8393642 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8393643 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term128 A B P clauses s s' t t') = (term128 A B P clauses s s' t t').
Proof. exact (MK_COMB (@lem8393642 A B) (@lem8393641 A B P clauses s s' t t')). Qed.
Lemma lem8393644 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term130 A B P clauses s s' t) = (term130 A B P clauses s s' t).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8393643 A B P clauses s s' t t')). Qed.
Lemma lem8393645 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8393646 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term132 A B P clauses s s' t) = (term132 A B P clauses s s' t).
Proof. exact (MK_COMB (@lem8393645 A B P) (@lem8393644 A B P clauses s s' t)). Qed.
Lemma lem8393647 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term134 A B P clauses s t) = (term134 A B P clauses s t).
Proof. exact (fun_ext (fun s' : P -> A => @lem8393646 A B P clauses s s' t)). Qed.
Lemma lem8393648 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8393649 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term136 A B P clauses s t) = (term136 A B P clauses s t).
Proof. exact (MK_COMB (@lem8393648 A P) (@lem8393647 A B P clauses s t)). Qed.
Lemma lem8393650 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term138 A B P clauses s) = (term138 A B P clauses s).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8393649 A B P clauses s t)). Qed.
Lemma lem8393651 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8393652 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term140 A B P clauses s) = (term140 A B P clauses s).
Proof. exact (MK_COMB (@lem8393651 A B P) (@lem8393650 A B P clauses s)). Qed.
Lemma lem8393653 {A B P : Type'} (clauses : type1635 A B P) : (term142 A B P clauses) = (term142 A B P clauses).
Proof. exact (fun_ext (fun s : P -> A => @lem8393652 A B P clauses s)). Qed.
Lemma lem8393654 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8393655 {A B P : Type'} (clauses : type1635 A B P) : (term144 A B P clauses) = (term144 A B P clauses).
Proof. exact (MK_COMB (@lem8393654 A P) (@lem8393653 A B P clauses)). Qed.
Lemma lem8393656 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8393657 {A B P : Type'} (clauses : type1635 A B P) : (term248 A B P clauses) = (term248 A B P clauses).
Proof. exact (MK_COMB (@lem8393656) (@lem8393655 A B P clauses)). Qed.
Lemma lem8393658 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115314 : type1080 A B P) (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (term454 A B C P f clauses _115314) = (term538 A B C P f clauses _115315 _115314).
Proof. exact (MK_COMB (@lem8393657 A B P clauses) (@lem8393585 A B C P f clauses _115314 _115315 h1)). Qed.
Lemma lem8393659 {A B C P : Type'} (clauses : type1635 A B P) (_115314 : type1080 A B P) (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (term455 A B C P clauses _115314) = (term539 A B C P clauses _115315 _115314).
Proof. exact (fun_ext (fun f : A -> B => @lem8393658 A B C P f clauses _115314 _115315 h1)). Qed.
Lemma lem8393660 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8393661 {A B C P : Type'} (clauses : type1635 A B P) (_115314 : type1080 A B P) (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (term456 A B C P clauses _115314) = (term540 A B C P clauses _115315 _115314).
Proof. exact (MK_COMB (@lem8393660 A B) (@lem8393659 A B C P clauses _115314 _115315 h1)). Qed.
Lemma lem8393662 {A B C P : Type'} (_115314 : type1080 A B P) (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (term457 A B C P _115314) = (term541 A B C P _115315 _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8393661 A B C P clauses _115314 _115315 h1)). Qed.
Lemma lem8393663 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8393664 {A B C P : Type'} (_115314 : type1080 A B P) (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (term458 A B C P _115314) = (term542 A B C P _115315 _115314).
Proof. exact (MK_COMB (@lem8393663 A B P) (@lem8393662 A B C P _115314 _115315 h1)). Qed.
Lemma lem8393681 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f : A -> B) (x : P) : ((term186 A B P clauses f s x) = (t f x)) = ((term186 A B P clauses f s x) = (t f x)).
Proof. exact (eq_refl ((term186 A B P clauses f s x) = (t f x))). Qed.
Lemma lem8393682 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f : A -> B) : (term190 A B P clauses s t f) = (term190 A B P clauses s t f).
Proof. exact (fun_ext (fun x : P => @lem8393681 A B P clauses s t f x)). Qed.
Lemma lem8393683 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8393684 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f : A -> B) : (term192 A B P clauses s t f) = (term192 A B P clauses s t f).
Proof. exact (MK_COMB (@lem8393683 P) (@lem8393682 A B P clauses s t f)). Qed.
Lemma lem8393693 {A B P : Type'} (f : type1177 A B P) (s : P -> A) (t : type558 A B P) : (term193 A B P f s t) = (term193 A B P f s t).
Proof. exact (eq_refl (term193 A B P f s t)). Qed.
Lemma lem8393694 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f' : A -> B) : (term195 A B P f clauses s t f') = (term195 A B P f clauses s t f').
Proof. exact (MK_COMB (@lem8393693 A B P f s t) (@lem8393684 A B P clauses s t f')). Qed.
Lemma lem8393695 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term197 A B P f clauses s f') = (term197 A B P f clauses s f').
Proof. exact (fun_ext (fun t : type558 A B P => @lem8393694 A B P f clauses s t f')). Qed.
Lemma lem8393696 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8393697 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term199 A B P f clauses s f') = (term199 A B P f clauses s f').
Proof. exact (MK_COMB (@lem8393696 A B P) (@lem8393695 A B P f clauses s f')). Qed.
Lemma lem8393698 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term201 A B P f clauses f') = (term201 A B P f clauses f').
Proof. exact (fun_ext (fun s : P -> A => @lem8393697 A B P f clauses s f')). Qed.
Lemma lem8393699 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8393700 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term203 A B P f clauses f') = (term203 A B P f clauses f').
Proof. exact (MK_COMB (@lem8393699 A P) (@lem8393698 A B P f clauses f')). Qed.
Lemma lem8393709 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) (f' : type1177 A B P) : (term508 A B P _115314 clauses f f') = (term508 A B P _115314 clauses f f').
Proof. exact (eq_refl (term508 A B P _115314 clauses f f')). Qed.
Lemma lem8393710 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : ((_115314 clauses f' f) = (term203 A B P f clauses f')) = ((_115314 clauses f' f) = (term203 A B P f clauses f')).
Proof. exact (MK_COMB (@lem8393709 A B P _115314 clauses f' f) (@lem8393700 A B P f clauses f')). Qed.
Lemma lem8393711 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term510 A B P _115314 clauses f) = (term510 A B P _115314 clauses f).
Proof. exact (fun_ext (fun f' : type1177 A B P => @lem8393710 A B P _115314 f' clauses f)). Qed.
Lemma lem8393712 {A B P : Type'} : (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) = (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop))). Qed.
Lemma lem8393713 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term511 A B P _115314 clauses f) = (term511 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8393712 A B P) (@lem8393711 A B P _115314 clauses f)). Qed.
Lemma lem8393714 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term512 A B P _115314 clauses) = (term512 A B P _115314 clauses).
Proof. exact (fun_ext (fun f : A -> B => @lem8393713 A B P _115314 clauses f)). Qed.
Lemma lem8393715 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8393716 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term513 A B P _115314 clauses) = (term513 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8393715 A B) (@lem8393714 A B P _115314 clauses)). Qed.
Lemma lem8393717 {A B P : Type'} (_115314 : type1080 A B P) : (term514 A B P _115314) = (term514 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8393716 A B P _115314 clauses)). Qed.
Lemma lem8393718 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8393719 {A B P : Type'} (_115314 : type1080 A B P) : (term515 A B P _115314) = (term515 A B P _115314).
Proof. exact (MK_COMB (@lem8393718 A B P) (@lem8393717 A B P _115314)). Qed.
Lemma lem8393720 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8393721 {A B P : Type'} (_115314 : type1080 A B P) : (term516 A B P _115314) = (term516 A B P _115314).
Proof. exact (MK_COMB (@lem8393720) (@lem8393719 A B P _115314)). Qed.
Lemma lem8393722 {A B C P : Type'} (_115314 : type1080 A B P) (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (term517 A B C P _115314) = (term543 A B C P _115315 _115314).
Proof. exact (MK_COMB (@lem8393721 A B P _115314) (@lem8393664 A B C P _115314 _115315 h1)). Qed.
Lemma lem8393723 {A B C P : Type'} (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (term518 A B C P) = (term544 A B C P _115315).
Proof. exact (fun_ext (fun _115314 : type1080 A B P => @lem8393722 A B C P _115314 _115315 h1)). Qed.
Lemma lem8393724 {A B P : Type'} : (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8393725 {A B C P : Type'} (_115315 : type1092 A C P) (h1 : _115315 = (term520 A C P)) : (term519 A B C P) = (term545 A B C P _115315).
Proof. exact (MK_COMB (@lem8393724 A B P) (@lem8393723 A B C P _115315 h1)). Qed.
Lemma lem8393726 {A B C P : Type'} (_115315 : type1092 A C P) : term546 A B C P _115315.
Proof. exact (fun h0 : _115315 = (term520 A C P) => @lem8393725 A B C P _115315 h0). Qed.
Lemma lem8393727 {A B C P : Type'} : term547 A B C P.
Proof. exact (fun _115315 : type1092 A C P => @lem8393726 A B C P _115315). Qed.
Lemma lem8393729 {_3603 : Type'} (P : Prop) (c : _3603) (Q : _3603 -> Prop) : term461 _3603 P c Q.
Proof. exact (EQ_MP (@lem20230 _3603 P c Q) (@lem0)). Qed.
Lemma lem8393730 {A C P : Type'} (P' : Prop) (c : type1092 A C P) (Q : type272 A C P) : term548 A C P P' c Q.
Proof. exact (@lem8393729 (type1092 A C P) P' c Q). Qed.
Lemma lem8393731 {A B C P : Type'} : term549 A B C P.
Proof. exact (@lem8393730 A C P (term519 A B C P) (term520 A C P) (term550 A B C P)). Qed.
Lemma lem8393732 {A B C P : Type'} (_115315 : type1092 A C P) : (term551 A B C P _115315) = (term545 A B C P _115315).
Proof. exact (eq_refl (term551 A B C P _115315)). Qed.
Lemma lem8393733 {A B C P : Type'} : (term552 A B C P) = (term552 A B C P).
Proof. exact (eq_refl (term552 A B C P)). Qed.
Lemma lem8393734 {A B C P : Type'} (_115315 : type1092 A C P) : ((term519 A B C P) = (term551 A B C P _115315)) = ((term519 A B C P) = (term545 A B C P _115315)).
Proof. exact (MK_COMB (@lem8393733 A B C P) (@lem8393732 A B C P _115315)). Qed.
Lemma lem8393735 {A C P : Type'} (_115315 : type1092 A C P) : (term553 A C P _115315) = (term553 A C P _115315).
Proof. exact (eq_refl (term553 A C P _115315)). Qed.
Lemma lem8393736 {A B C P : Type'} (_115315 : type1092 A C P) : (term554 A B C P _115315) = (term546 A B C P _115315).
Proof. exact (MK_COMB (@lem8393735 A C P _115315) (@lem8393734 A B C P _115315)). Qed.
Lemma lem8393737 {A B C P : Type'} : (term555 A B C P) = (term556 A B C P).
Proof. exact (fun_ext (fun _115315 : type1092 A C P => @lem8393736 A B C P _115315)). Qed.
Lemma lem8393738 {A C P : Type'} : (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop))). Qed.
Lemma lem8393739 {A B C P : Type'} : (term557 A B C P) = (term547 A B C P).
Proof. exact (MK_COMB (@lem8393738 A C P) (@lem8393737 A B C P)). Qed.
Lemma lem8393740 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8393741 {A B C P : Type'} : (term558 A B C P) = (term559 A B C P).
Proof. exact (MK_COMB (@lem8393740) (@lem8393739 A B C P)). Qed.
Lemma lem8393742 {A B C P : Type'} (_115315 : type1092 A C P) : (term551 A B C P _115315) = (term545 A B C P _115315).
Proof. exact (eq_refl (term551 A B C P _115315)). Qed.
Lemma lem8393743 {A C P : Type'} (_115315 : type1092 A C P) : (term553 A C P _115315) = (term553 A C P _115315).
Proof. exact (eq_refl (term553 A C P _115315)). Qed.
Lemma lem8393744 {A B C P : Type'} (_115315 : type1092 A C P) : (term560 A B C P _115315) = (term561 A B C P _115315).
Proof. exact (MK_COMB (@lem8393743 A C P _115315) (@lem8393742 A B C P _115315)). Qed.
Lemma lem8393745 {A B C P : Type'} : (term562 A B C P) = (term563 A B C P).
Proof. exact (fun_ext (fun _115315 : type1092 A C P => @lem8393744 A B C P _115315)). Qed.
Lemma lem8393746 {A C P : Type'} : (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop))). Qed.
Lemma lem8393747 {A B C P : Type'} : (term564 A B C P) = (term565 A B C P).
Proof. exact (MK_COMB (@lem8393746 A C P) (@lem8393745 A B C P)). Qed.
Lemma lem8393748 {A B C P : Type'} : (term552 A B C P) = (term552 A B C P).
Proof. exact (eq_refl (term552 A B C P)). Qed.
Lemma lem8393749 {A B C P : Type'} : ((term519 A B C P) = (term564 A B C P)) = ((term519 A B C P) = (term565 A B C P)).
Proof. exact (MK_COMB (@lem8393748 A B C P) (@lem8393747 A B C P)). Qed.
Lemma lem8393750 {A B C P : Type'} : (term549 A B C P) = (term566 A B C P).
Proof. exact (MK_COMB (@lem8393741 A B C P) (@lem8393749 A B C P)). Qed.
Lemma lem8393751 {A B C P : Type'} : term566 A B C P.
Proof. exact (EQ_MP (@lem8393750 A B C P) (@lem8393731 A B C P)). Qed.
Lemma lem8393752 {A B C P : Type'} : (term519 A B C P) = (term565 A B C P).
Proof. exact (@lem8393751 A B C P (@lem8393727 A B C P)). Qed.
Lemma lem8393754 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term481 _3571 _3575 t)) = (term482 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem8393755 {A C P : Type'} (s : type1092 A C P) (t : type1092 A C P) : (s = (term567 A C P t)) = (term568 A C P s t).
Proof. exact (@lem8393754 (type1441 A C P) (type1636 A C P) s t). Qed.
Lemma lem8393756 {A C P : Type'} (_115315 : type1092 A C P) : (_115315 = (term569 A C P)) = (term570 A C P _115315).
Proof. exact (@lem8393755 A C P _115315 (term520 A C P)). Qed.
Lemma lem8393757 {A C P : Type'} (clauses : type1636 A C P) : (term521 A C P clauses) = (term522 A C P clauses).
Proof. exact (eq_refl (term521 A C P clauses)). Qed.
Lemma lem8393758 {A C P : Type'} : (term569 A C P) = (term520 A C P).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8393757 A C P clauses)). Qed.
Lemma lem8393759 {A C P : Type'} (_115315 : type1092 A C P) : (@eq ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop) _115315) = (@eq ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop) _115315).
Proof. exact (eq_refl (@eq ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop) _115315)). Qed.
Lemma lem8393760 {A C P : Type'} (_115315 : type1092 A C P) : (_115315 = (term569 A C P)) = (_115315 = (term520 A C P)).
Proof. exact (MK_COMB (@lem8393759 A C P _115315) (@lem8393758 A C P)). Qed.
Lemma lem8393761 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8393762 {A C P : Type'} (_115315 : type1092 A C P) : (term571 A C P _115315) = (term572 A C P _115315).
Proof. exact (MK_COMB (@lem8393761) (@lem8393760 A C P _115315)). Qed.
Lemma lem8393763 {A C P : Type'} (clauses : type1636 A C P) : (term521 A C P clauses) = (term522 A C P clauses).
Proof. exact (eq_refl (term521 A C P clauses)). Qed.
Lemma lem8393764 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term523 A C P _115315 clauses) = (term523 A C P _115315 clauses).
Proof. exact (eq_refl (term523 A C P _115315 clauses)). Qed.
Lemma lem8393765 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : ((_115315 clauses) = (term521 A C P clauses)) = ((_115315 clauses) = (term522 A C P clauses)).
Proof. exact (MK_COMB (@lem8393764 A C P _115315 clauses) (@lem8393763 A C P clauses)). Qed.
Lemma lem8393766 {A C P : Type'} (_115315 : type1092 A C P) : (term573 A C P _115315) = (term574 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8393765 A C P _115315 clauses)). Qed.
Lemma lem8393767 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8393768 {A C P : Type'} (_115315 : type1092 A C P) : (term570 A C P _115315) = (term575 A C P _115315).
Proof. exact (MK_COMB (@lem8393767 A C P) (@lem8393766 A C P _115315)). Qed.
Lemma lem8393769 {A C P : Type'} (_115315 : type1092 A C P) : ((_115315 = (term569 A C P)) = (term570 A C P _115315)) = ((_115315 = (term520 A C P)) = (term575 A C P _115315)).
Proof. exact (MK_COMB (@lem8393762 A C P _115315) (@lem8393768 A C P _115315)). Qed.
Lemma lem8393770 {A C P : Type'} (_115315 : type1092 A C P) : (_115315 = (term520 A C P)) = (term575 A C P _115315).
Proof. exact (EQ_MP (@lem8393769 A C P _115315) (@lem8393756 A C P _115315)). Qed.
Lemma lem8393772 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term481 _3571 _3575 t)) = (term482 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem8393773 {A C P : Type'} (s : type1441 A C P) (t : type1441 A C P) : (s = (term576 A C P t)) = (term577 A C P s t).
Proof. exact (@lem8393772 (type306 A C P) C s t). Qed.
Lemma lem8393774 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : ((_115315 clauses) = (term578 A C P clauses)) = (term579 A C P _115315 clauses).
Proof. exact (@lem8393773 A C P (_115315 clauses) (term522 A C P clauses)). Qed.
Lemma lem8393775 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term524 A C P clauses c) = (term366 A C P clauses c).
Proof. exact (eq_refl (term524 A C P clauses c)). Qed.
Lemma lem8393776 {A C P : Type'} (clauses : type1636 A C P) : (term578 A C P clauses) = (term522 A C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8393775 A C P clauses c)). Qed.
Lemma lem8393777 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term523 A C P _115315 clauses) = (term523 A C P _115315 clauses).
Proof. exact (eq_refl (term523 A C P _115315 clauses)). Qed.
Lemma lem8393778 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : ((_115315 clauses) = (term578 A C P clauses)) = ((_115315 clauses) = (term522 A C P clauses)).
Proof. exact (MK_COMB (@lem8393777 A C P _115315 clauses) (@lem8393776 A C P clauses)). Qed.
Lemma lem8393779 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8393780 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term580 A C P _115315 clauses) = (term581 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8393779) (@lem8393778 A C P _115315 clauses)). Qed.
Lemma lem8393781 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term524 A C P clauses c) = (term366 A C P clauses c).
Proof. exact (eq_refl (term524 A C P clauses c)). Qed.
Lemma lem8393782 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term525 A C P _115315 clauses c) = (term525 A C P _115315 clauses c).
Proof. exact (eq_refl (term525 A C P _115315 clauses c)). Qed.
Lemma lem8393783 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : ((_115315 clauses c) = (term524 A C P clauses c)) = ((_115315 clauses c) = (term366 A C P clauses c)).
Proof. exact (MK_COMB (@lem8393782 A C P _115315 clauses c) (@lem8393781 A C P clauses c)). Qed.
Lemma lem8393784 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term582 A C P _115315 clauses) = (term583 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8393783 A C P _115315 clauses c)). Qed.
Lemma lem8393785 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8393786 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term579 A C P _115315 clauses) = (term584 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8393785 C) (@lem8393784 A C P _115315 clauses)). Qed.
Lemma lem8393787 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (((_115315 clauses) = (term578 A C P clauses)) = (term579 A C P _115315 clauses)) = (((_115315 clauses) = (term522 A C P clauses)) = (term584 A C P _115315 clauses)).
Proof. exact (MK_COMB (@lem8393780 A C P _115315 clauses) (@lem8393786 A C P _115315 clauses)). Qed.
Lemma lem8393788 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : ((_115315 clauses) = (term522 A C P clauses)) = (term584 A C P _115315 clauses).
Proof. exact (EQ_MP (@lem8393787 A C P _115315 clauses) (@lem8393774 A C P _115315 clauses)). Qed.
Lemma lem8393790 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term481 _3571 _3575 t)) = (term482 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem8393791 {A C P : Type'} (s : type306 A C P) (t : type306 A C P) : (s = (term585 A C P t)) = (term586 A C P s t).
Proof. exact (@lem8393790 Prop (type1178 A C P) s t). Qed.
Lemma lem8393792 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : ((_115315 clauses c) = (term587 A C P clauses c)) = (term588 A C P _115315 clauses c).
Proof. exact (@lem8393791 A C P (_115315 clauses c) (term366 A C P clauses c)). Qed.
Lemma lem8393793 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term589 A C P clauses c f) = (term365 A C P f clauses c).
Proof. exact (eq_refl (term589 A C P clauses c f)). Qed.
Lemma lem8393794 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term587 A C P clauses c) = (term366 A C P clauses c).
Proof. exact (fun_ext (fun f : type1178 A C P => @lem8393793 A C P f clauses c)). Qed.
Lemma lem8393795 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term525 A C P _115315 clauses c) = (term525 A C P _115315 clauses c).
Proof. exact (eq_refl (term525 A C P _115315 clauses c)). Qed.
Lemma lem8393796 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : ((_115315 clauses c) = (term587 A C P clauses c)) = ((_115315 clauses c) = (term366 A C P clauses c)).
Proof. exact (MK_COMB (@lem8393795 A C P _115315 clauses c) (@lem8393794 A C P clauses c)). Qed.
Lemma lem8393797 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8393798 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term590 A C P _115315 clauses c) = (term591 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8393797) (@lem8393796 A C P _115315 clauses c)). Qed.
Lemma lem8393799 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term589 A C P clauses c f) = (term365 A C P f clauses c).
Proof. exact (eq_refl (term589 A C P clauses c f)). Qed.
Lemma lem8393800 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) (f : type1178 A C P) : (term592 A C P _115315 clauses c f) = (term592 A C P _115315 clauses c f).
Proof. exact (eq_refl (term592 A C P _115315 clauses c f)). Qed.
Lemma lem8393801 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : ((_115315 clauses c f) = (term589 A C P clauses c f)) = ((_115315 clauses c f) = (term365 A C P f clauses c)).
Proof. exact (MK_COMB (@lem8393800 A C P _115315 clauses c f) (@lem8393799 A C P f clauses c)). Qed.
Lemma lem8393802 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term593 A C P _115315 clauses c) = (term594 A C P _115315 clauses c).
Proof. exact (fun_ext (fun f : type1178 A C P => @lem8393801 A C P _115315 f clauses c)). Qed.
Lemma lem8393803 {A C P : Type'} : (@all ((prod (P -> A) (C -> P -> A)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> A)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> A)) -> Prop))). Qed.
Lemma lem8393804 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term588 A C P _115315 clauses c) = (term595 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8393803 A C P) (@lem8393802 A C P _115315 clauses c)). Qed.
Lemma lem8393805 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (((_115315 clauses c) = (term587 A C P clauses c)) = (term588 A C P _115315 clauses c)) = (((_115315 clauses c) = (term366 A C P clauses c)) = (term595 A C P _115315 clauses c)).
Proof. exact (MK_COMB (@lem8393798 A C P _115315 clauses c) (@lem8393804 A C P _115315 clauses c)). Qed.
Lemma lem8393806 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : ((_115315 clauses c) = (term366 A C P clauses c)) = (term595 A C P _115315 clauses c).
Proof. exact (EQ_MP (@lem8393805 A C P _115315 clauses c) (@lem8393792 A C P _115315 clauses c)). Qed.
Lemma lem8393807 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : ((_115315 clauses c f) = (term365 A C P f clauses c)) = ((_115315 clauses c f) = (term365 A C P f clauses c)).
Proof. exact (eq_refl ((_115315 clauses c f) = (term365 A C P f clauses c))). Qed.
Lemma lem8393808 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term594 A C P _115315 clauses c) = (term594 A C P _115315 clauses c).
Proof. exact (fun_ext (fun f : type1178 A C P => @lem8393807 A C P _115315 f clauses c)). Qed.
Lemma lem8393809 {A C P : Type'} : (@all ((prod (P -> A) (C -> P -> A)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> A)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> A)) -> Prop))). Qed.
Lemma lem8393810 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term595 A C P _115315 clauses c) = (term595 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8393809 A C P) (@lem8393808 A C P _115315 clauses c)). Qed.
Lemma lem8393811 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : ((_115315 clauses c) = (term366 A C P clauses c)) = (term595 A C P _115315 clauses c).
Proof. exact (TRANS (@lem8393806 A C P _115315 clauses c) (@lem8393810 A C P _115315 clauses c)). Qed.
Lemma lem8393812 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term583 A C P _115315 clauses) = (term596 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8393811 A C P _115315 clauses c)). Qed.
Lemma lem8393813 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8393814 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term584 A C P _115315 clauses) = (term597 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8393813 C) (@lem8393812 A C P _115315 clauses)). Qed.
Lemma lem8393815 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : ((_115315 clauses) = (term522 A C P clauses)) = (term597 A C P _115315 clauses).
Proof. exact (TRANS (@lem8393788 A C P _115315 clauses) (@lem8393814 A C P _115315 clauses)). Qed.
Lemma lem8393816 {A C P : Type'} (_115315 : type1092 A C P) : (term574 A C P _115315) = (term598 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8393815 A C P _115315 clauses)). Qed.
Lemma lem8393817 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8393818 {A C P : Type'} (_115315 : type1092 A C P) : (term575 A C P _115315) = (term599 A C P _115315).
Proof. exact (MK_COMB (@lem8393817 A C P) (@lem8393816 A C P _115315)). Qed.
Lemma lem8393819 {A C P : Type'} (_115315 : type1092 A C P) : (_115315 = (term520 A C P)) = (term599 A C P _115315).
Proof. exact (TRANS (@lem8393770 A C P _115315) (@lem8393818 A C P _115315)). Qed.
Lemma lem8393820 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8393821 {A C P : Type'} (_115315 : type1092 A C P) : (term553 A C P _115315) = (term600 A C P _115315).
Proof. exact (MK_COMB (@lem8393820) (@lem8393819 A C P _115315)). Qed.
Lemma lem8393822 {A B C P : Type'} (_115315 : type1092 A C P) : (term545 A B C P _115315) = (term545 A B C P _115315).
Proof. exact (eq_refl (term545 A B C P _115315)). Qed.
Lemma lem8393823 {A B C P : Type'} (_115315 : type1092 A C P) : (term561 A B C P _115315) = (term601 A B C P _115315).
Proof. exact (MK_COMB (@lem8393821 A C P _115315) (@lem8393822 A B C P _115315)). Qed.
Lemma lem8393824 {A B C P : Type'} : (term563 A B C P) = (term602 A B C P).
Proof. exact (fun_ext (fun _115315 : type1092 A C P => @lem8393823 A B C P _115315)). Qed.
Lemma lem8393825 {A C P : Type'} : (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop))). Qed.
Lemma lem8393826 {A B C P : Type'} : (term565 A B C P) = (term603 A B C P).
Proof. exact (MK_COMB (@lem8393825 A C P) (@lem8393824 A B C P)). Qed.
Lemma lem8393827 {A B C P : Type'} : (term552 A B C P) = (term552 A B C P).
Proof. exact (eq_refl (term552 A B C P)). Qed.
Lemma lem8393828 {A B C P : Type'} : ((term519 A B C P) = (term565 A B C P)) = ((term519 A B C P) = (term603 A B C P)).
Proof. exact (MK_COMB (@lem8393827 A B C P) (@lem8393826 A B C P)). Qed.
Lemma lem8393829 {A B C P : Type'} : (term519 A B C P) = (term603 A B C P).
Proof. exact (EQ_MP (@lem8393828 A B C P) (@lem8393752 A B C P)). Qed.
Lemma lem8393830 {A B C P : Type'} (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : _115316 = (term604 A B C P).
Proof. exact (h1). Qed.
Lemma lem8393831 {A B C P : Type'} (clauses : type1638 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8393832 {A B C P : Type'} (clauses : type1638 A B C P) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (_115316 clauses) = (term605 A B C P clauses).
Proof. exact (MK_COMB (@lem8393830 A B C P _115316 h1) (@lem8393831 A B C P clauses)). Qed.
Lemma lem8393833 {A B C P : Type'} (clauses : type1638 A B C P) : (term605 A B C P clauses) = (term606 A B C P clauses).
Proof. exact (eq_refl (term605 A B C P clauses)). Qed.
Lemma lem8393834 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term607 A B C P _115316 clauses) = (term607 A B C P _115316 clauses).
Proof. exact (eq_refl (term607 A B C P _115316 clauses)). Qed.
Lemma lem8393835 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : ((_115316 clauses) = (term605 A B C P clauses)) = ((_115316 clauses) = (term606 A B C P clauses)).
Proof. exact (MK_COMB (@lem8393834 A B C P _115316 clauses) (@lem8393833 A B C P clauses)). Qed.
Lemma lem8393836 {A B C P : Type'} (clauses : type1638 A B C P) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (_115316 clauses) = (term606 A B C P clauses).
Proof. exact (EQ_MP (@lem8393835 A B C P _115316 clauses) (@lem8393832 A B C P clauses _115316 h1)). Qed.
Lemma lem8393837 {C : Type'} (c : C) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8393838 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (_115316 clauses c) = (term608 A B C P clauses c).
Proof. exact (MK_COMB (@lem8393836 A B C P clauses _115316 h1) (@lem8393837 C c)). Qed.
Lemma lem8393839 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term608 A B C P clauses c) = (term425 A B C P clauses c).
Proof. exact (eq_refl (term608 A B C P clauses c)). Qed.
Lemma lem8393840 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term609 A B C P _115316 clauses c) = (term609 A B C P _115316 clauses c).
Proof. exact (eq_refl (term609 A B C P _115316 clauses c)). Qed.
Lemma lem8393841 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : ((_115316 clauses c) = (term608 A B C P clauses c)) = ((_115316 clauses c) = (term425 A B C P clauses c)).
Proof. exact (MK_COMB (@lem8393840 A B C P _115316 clauses c) (@lem8393839 A B C P clauses c)). Qed.
Lemma lem8393842 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (_115316 clauses c) = (term425 A B C P clauses c).
Proof. exact (EQ_MP (@lem8393841 A B C P _115316 clauses c) (@lem8393838 A B C P clauses c _115316 h1)). Qed.
Lemma lem8393844 {A B C P : Type'} (clauses : type1629 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8393864 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) (x : type558 A B P) : ((term264 A B C P clauses c s x) = (t c x)) = ((term264 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term264 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8393865 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term265 A B C P clauses s t c) = (term265 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : type558 A B P => @lem8393864 A B C P clauses s t c x)). Qed.
Lemma lem8393866 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8393867 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term266 A B C P clauses s t c) = (term266 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8393866 A B P) (@lem8393865 A B C P clauses s t c)). Qed.
Lemma lem8393876 {A B C P : Type'} (f : type1166 A B C P) (s : type115 A B P) (t : type1490 A B C P) : (term267 A B C P f s t) = (term267 A B C P f s t).
Proof. exact (eq_refl (term267 A B C P f s t)). Qed.
Lemma lem8393877 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term268 A B C P f clauses s t c) = (term268 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8393876 A B C P f s t) (@lem8393867 A B C P clauses s t c)). Qed.
Lemma lem8393878 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term269 A B C P f clauses s c) = (term269 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8393877 A B C P f clauses s t c)). Qed.
Lemma lem8393879 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8393880 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term270 A B C P f clauses s c) = (term270 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8393879 A B C P) (@lem8393878 A B C P f clauses s c)). Qed.
Lemma lem8393881 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term271 A B C P f clauses c) = (term271 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8393880 A B C P f clauses s c)). Qed.
Lemma lem8393882 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8393883 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term272 A B C P f clauses c) = (term272 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8393882 A B P) (@lem8393881 A B C P f clauses c)). Qed.
Lemma lem8393884 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term273 A B C P clauses c) = (term273 A B C P clauses c).
Proof. exact (fun_ext (fun f : type1166 A B C P => @lem8393883 A B C P f clauses c)). Qed.
Lemma lem8393885 {A B C P : Type'} : (@GABS ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)) = (@GABS ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop))). Qed.
Lemma lem8393886 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term274 A B C P clauses c) = (term274 A B C P clauses c).
Proof. exact (MK_COMB (@lem8393885 A B C P) (@lem8393884 A B C P clauses c)). Qed.
Lemma lem8393887 {A B C P : Type'} : (@List.Forall (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) = (@List.Forall (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))).
Proof. exact (eq_refl (@List.Forall (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))). Qed.
Lemma lem8393888 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term275 A B C P clauses c) = (term275 A B C P clauses c).
Proof. exact (MK_COMB (@lem8393887 A B C P) (@lem8393886 A B C P clauses c)). Qed.
Lemma lem8393889 {A B C P : Type'} (c : C) (clauses : type1629 A B C P) : (term276 A B C P c clauses) = (term276 A B C P c clauses).
Proof. exact (MK_COMB (@lem8393888 A B C P clauses c) (@lem8393844 A B C P clauses)). Qed.
Lemma lem8393938 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) (y : type558 A B P) : (term277 A B C P clauses s s' t x t' c y) = (term277 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term277 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8393939 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term278 A B C P clauses s s' t x t' c) = (term278 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : type558 A B P => @lem8393938 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8393940 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8393941 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term279 A B C P clauses s s' t x t' c) = (term279 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8393940 A B P) (@lem8393939 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8393942 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term280 A B C P clauses s s' t t' c) = (term280 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : type558 A B P => @lem8393941 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8393943 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8393944 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term281 A B C P clauses s s' t t' c) = (term281 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8393943 A B P) (@lem8393942 A B C P clauses s s' t t' c)). Qed.
Lemma lem8393945 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term282 A B C P clauses s s' t c) = (term282 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1490 A B C P => @lem8393944 A B C P clauses s s' t t' c)). Qed.
Lemma lem8393946 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8393947 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term283 A B C P clauses s s' t c) = (term283 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8393946 A B C P) (@lem8393945 A B C P clauses s s' t c)). Qed.
Lemma lem8393948 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term284 A B C P clauses s t c) = (term284 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type115 A B P => @lem8393947 A B C P clauses s s' t c)). Qed.
Lemma lem8393949 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8393950 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term285 A B C P clauses s t c) = (term285 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8393949 A B P) (@lem8393948 A B C P clauses s t c)). Qed.
Lemma lem8393951 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term286 A B C P clauses s c) = (term286 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8393950 A B C P clauses s t c)). Qed.
Lemma lem8393952 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8393953 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term287 A B C P clauses s c) = (term287 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8393952 A B C P) (@lem8393951 A B C P clauses s c)). Qed.
Lemma lem8393954 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term288 A B C P clauses c) = (term288 A B C P clauses c).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8393953 A B C P clauses s c)). Qed.
Lemma lem8393955 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8393956 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term289 A B C P clauses c) = (term289 A B C P clauses c).
Proof. exact (MK_COMB (@lem8393955 A B P) (@lem8393954 A B C P clauses c)). Qed.
Lemma lem8393957 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8393958 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term290 A B C P clauses c) = (term290 A B C P clauses c).
Proof. exact (MK_COMB (@lem8393957) (@lem8393956 A B C P clauses c)). Qed.
Lemma lem8393959 {A B C P : Type'} (c : C) (clauses : type1629 A B C P) : (term291 A B C P c clauses) = (term291 A B C P c clauses).
Proof. exact (MK_COMB (@lem8393958 A B C P clauses c) (@lem8393889 A B C P c clauses)). Qed.
Lemma lem8393960 {A B C P : Type'} (clauses : type1629 A B C P) : (term292 A B C P clauses) = (term292 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8393959 A B C P c clauses)). Qed.
Lemma lem8393961 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8393962 {A B C P : Type'} (clauses : type1629 A B C P) : (term293 A B C P clauses) = (term293 A B C P clauses).
Proof. exact (MK_COMB (@lem8393961 C) (@lem8393960 A B C P clauses)). Qed.
Lemma lem8393963 {A B C P : Type'} : (term294 A B C P) = (term294 A B C P).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8393962 A B C P clauses)). Qed.
Lemma lem8393964 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8393965 {A B C P : Type'} : (term219 A B C P) = (term219 A B C P).
Proof. exact (MK_COMB (@lem8393964 A B C P) (@lem8393963 A B C P)). Qed.
Lemma lem8393966 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8393967 {A B C P : Type'} : (term225 A B C P) = (term225 A B C P).
Proof. exact (MK_COMB (@lem8393966) (@lem8393965 A B C P)). Qed.
Lemma lem8393968 {A B C P : Type'} (clauses : type1631 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8393988 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) (x : P -> A) : ((term295 A B C P clauses c s x) = (t c x)) = ((term295 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term295 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8393989 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term296 A B C P clauses s t c) = (term296 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : P -> A => @lem8393988 A B C P clauses s t c x)). Qed.
Lemma lem8393990 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8393991 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term297 A B C P clauses s t c) = (term297 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8393990 A P) (@lem8393989 A B C P clauses s t c)). Qed.
Lemma lem8394000 {A B C P : Type'} (f : type1168 A B C P) (s : type802 A P) (t : type1512 A B C P) : (term298 A B C P f s t) = (term298 A B C P f s t).
Proof. exact (eq_refl (term298 A B C P f s t)). Qed.
Lemma lem8394001 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term299 A B C P f clauses s t c) = (term299 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8394000 A B C P f s t) (@lem8393991 A B C P clauses s t c)). Qed.
Lemma lem8394002 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term300 A B C P f clauses s c) = (term300 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8394001 A B C P f clauses s t c)). Qed.
Lemma lem8394003 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8394004 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term301 A B C P f clauses s c) = (term301 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8394003 A B C P) (@lem8394002 A B C P f clauses s c)). Qed.
Lemma lem8394005 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term302 A B C P f clauses c) = (term302 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type802 A P => @lem8394004 A B C P f clauses s c)). Qed.
Lemma lem8394006 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8394007 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term303 A B C P f clauses c) = (term303 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8394006 A P) (@lem8394005 A B C P f clauses c)). Qed.
Lemma lem8394008 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term304 A B C P clauses c) = (term304 A B C P clauses c).
Proof. exact (fun_ext (fun f : type1168 A B C P => @lem8394007 A B C P f clauses c)). Qed.
Lemma lem8394009 {A B C P : Type'} : (@GABS ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)) = (@GABS ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop))). Qed.
Lemma lem8394010 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term305 A B C P clauses c) = (term305 A B C P clauses c).
Proof. exact (MK_COMB (@lem8394009 A B C P) (@lem8394008 A B C P clauses c)). Qed.
Lemma lem8394011 {A B C P : Type'} : (@List.Forall (prod ((P -> A) -> A) (C -> (P -> A) -> B))) = (@List.Forall (prod ((P -> A) -> A) (C -> (P -> A) -> B))).
Proof. exact (eq_refl (@List.Forall (prod ((P -> A) -> A) (C -> (P -> A) -> B)))). Qed.
Lemma lem8394012 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term306 A B C P clauses c) = (term306 A B C P clauses c).
Proof. exact (MK_COMB (@lem8394011 A B C P) (@lem8394010 A B C P clauses c)). Qed.
Lemma lem8394013 {A B C P : Type'} (c : C) (clauses : type1631 A B C P) : (term307 A B C P c clauses) = (term307 A B C P c clauses).
Proof. exact (MK_COMB (@lem8394012 A B C P clauses c) (@lem8393968 A B C P clauses)). Qed.
Lemma lem8394062 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) (y : P -> A) : (term308 A B C P clauses s s' t x t' c y) = (term308 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term308 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8394063 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term309 A B C P clauses s s' t x t' c) = (term309 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P -> A => @lem8394062 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8394064 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8394065 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term310 A B C P clauses s s' t x t' c) = (term310 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8394064 A P) (@lem8394063 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8394066 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term311 A B C P clauses s s' t t' c) = (term311 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P -> A => @lem8394065 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8394067 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8394068 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term312 A B C P clauses s s' t t' c) = (term312 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8394067 A P) (@lem8394066 A B C P clauses s s' t t' c)). Qed.
Lemma lem8394069 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term313 A B C P clauses s s' t c) = (term313 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1512 A B C P => @lem8394068 A B C P clauses s s' t t' c)). Qed.
Lemma lem8394070 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8394071 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term314 A B C P clauses s s' t c) = (term314 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8394070 A B C P) (@lem8394069 A B C P clauses s s' t c)). Qed.
Lemma lem8394072 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term315 A B C P clauses s t c) = (term315 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type802 A P => @lem8394071 A B C P clauses s s' t c)). Qed.
Lemma lem8394073 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8394074 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term316 A B C P clauses s t c) = (term316 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8394073 A P) (@lem8394072 A B C P clauses s t c)). Qed.
Lemma lem8394075 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term317 A B C P clauses s c) = (term317 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8394074 A B C P clauses s t c)). Qed.
Lemma lem8394076 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8394077 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term318 A B C P clauses s c) = (term318 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8394076 A B C P) (@lem8394075 A B C P clauses s c)). Qed.
Lemma lem8394078 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term319 A B C P clauses c) = (term319 A B C P clauses c).
Proof. exact (fun_ext (fun s : type802 A P => @lem8394077 A B C P clauses s c)). Qed.
Lemma lem8394079 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8394080 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term320 A B C P clauses c) = (term320 A B C P clauses c).
Proof. exact (MK_COMB (@lem8394079 A P) (@lem8394078 A B C P clauses c)). Qed.
Lemma lem8394081 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8394082 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term321 A B C P clauses c) = (term321 A B C P clauses c).
Proof. exact (MK_COMB (@lem8394081) (@lem8394080 A B C P clauses c)). Qed.
Lemma lem8394083 {A B C P : Type'} (c : C) (clauses : type1631 A B C P) : (term322 A B C P c clauses) = (term322 A B C P c clauses).
Proof. exact (MK_COMB (@lem8394082 A B C P clauses c) (@lem8394013 A B C P c clauses)). Qed.
Lemma lem8394084 {A B C P : Type'} (clauses : type1631 A B C P) : (term323 A B C P clauses) = (term323 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8394083 A B C P c clauses)). Qed.
Lemma lem8394085 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8394086 {A B C P : Type'} (clauses : type1631 A B C P) : (term324 A B C P clauses) = (term324 A B C P clauses).
Proof. exact (MK_COMB (@lem8394085 C) (@lem8394084 A B C P clauses)). Qed.
Lemma lem8394087 {A B C P : Type'} : (term325 A B C P) = (term325 A B C P).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8394086 A B C P clauses)). Qed.
Lemma lem8394088 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8394089 {A B C P : Type'} : (term218 A B C P) = (term218 A B C P).
Proof. exact (MK_COMB (@lem8394088 A B C P) (@lem8394087 A B C P)). Qed.
Lemma lem8394090 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8394091 {A B C P : Type'} : (term226 A B C P) = (term226 A B C P).
Proof. exact (MK_COMB (@lem8394090) (@lem8394089 A B C P)). Qed.
Lemma lem8394092 {A B C P : Type'} : (term228 A B C P) = (term228 A B C P).
Proof. exact (MK_COMB (@lem8394091 A B C P) (@lem8393967 A B C P)). Qed.
Lemma lem8394093 {A B C P : Type'} (clauses : type1630 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8394113 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) (x : A -> B) : ((term326 A B C P clauses c s x) = (t c x)) = ((term326 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term326 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8394114 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term327 A B C P clauses s t c) = (term327 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : A -> B => @lem8394113 A B C P clauses s t c x)). Qed.
Lemma lem8394115 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8394116 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term328 A B C P clauses s t c) = (term328 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8394115 A B) (@lem8394114 A B C P clauses s t c)). Qed.
Lemma lem8394125 {A B C P : Type'} (f : type1167 A B C P) (s : type558 A B P) (t : type1506 A B C) : (term329 A B C P f s t) = (term329 A B C P f s t).
Proof. exact (eq_refl (term329 A B C P f s t)). Qed.
Lemma lem8394126 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term330 A B C P f clauses s t c) = (term330 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8394125 A B C P f s t) (@lem8394116 A B C P clauses s t c)). Qed.
Lemma lem8394127 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term331 A B C P f clauses s c) = (term331 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8394126 A B C P f clauses s t c)). Qed.
Lemma lem8394128 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8394129 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term332 A B C P f clauses s c) = (term332 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8394128 A B C) (@lem8394127 A B C P f clauses s c)). Qed.
Lemma lem8394130 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term333 A B C P f clauses c) = (term333 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8394129 A B C P f clauses s c)). Qed.
Lemma lem8394131 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8394132 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term334 A B C P f clauses c) = (term334 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8394131 A B P) (@lem8394130 A B C P f clauses c)). Qed.
Lemma lem8394133 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term335 A B C P clauses c) = (term335 A B C P clauses c).
Proof. exact (fun_ext (fun f : type1167 A B C P => @lem8394132 A B C P f clauses c)). Qed.
Lemma lem8394134 {A B C P : Type'} : (@GABS ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)) = (@GABS ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop))). Qed.
Lemma lem8394135 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term336 A B C P clauses c) = (term336 A B C P clauses c).
Proof. exact (MK_COMB (@lem8394134 A B C P) (@lem8394133 A B C P clauses c)). Qed.
Lemma lem8394136 {A B C P : Type'} : (@List.Forall (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) = (@List.Forall (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))).
Proof. exact (eq_refl (@List.Forall (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))). Qed.
Lemma lem8394137 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term337 A B C P clauses c) = (term337 A B C P clauses c).
Proof. exact (MK_COMB (@lem8394136 A B C P) (@lem8394135 A B C P clauses c)). Qed.
Lemma lem8394138 {A B C P : Type'} (c : C) (clauses : type1630 A B C P) : (term338 A B C P c clauses) = (term338 A B C P c clauses).
Proof. exact (MK_COMB (@lem8394137 A B C P clauses c) (@lem8394093 A B C P clauses)). Qed.
Lemma lem8394187 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) (y : A -> B) : (term339 A B C P clauses s s' t x t' c y) = (term339 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term339 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8394188 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term340 A B C P clauses s s' t x t' c) = (term340 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : A -> B => @lem8394187 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8394189 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8394190 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term341 A B C P clauses s s' t x t' c) = (term341 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8394189 A B) (@lem8394188 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8394191 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term342 A B C P clauses s s' t t' c) = (term342 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : A -> B => @lem8394190 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8394192 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8394193 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term343 A B C P clauses s s' t t' c) = (term343 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8394192 A B) (@lem8394191 A B C P clauses s s' t t' c)). Qed.
Lemma lem8394194 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term344 A B C P clauses s s' t c) = (term344 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1506 A B C => @lem8394193 A B C P clauses s s' t t' c)). Qed.
Lemma lem8394195 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8394196 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term345 A B C P clauses s s' t c) = (term345 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8394195 A B C) (@lem8394194 A B C P clauses s s' t c)). Qed.
Lemma lem8394197 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term346 A B C P clauses s t c) = (term346 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type558 A B P => @lem8394196 A B C P clauses s s' t c)). Qed.
Lemma lem8394198 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8394199 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term347 A B C P clauses s t c) = (term347 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8394198 A B P) (@lem8394197 A B C P clauses s t c)). Qed.
Lemma lem8394200 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term348 A B C P clauses s c) = (term348 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8394199 A B C P clauses s t c)). Qed.
Lemma lem8394201 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8394202 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term349 A B C P clauses s c) = (term349 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8394201 A B C) (@lem8394200 A B C P clauses s c)). Qed.
Lemma lem8394203 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term350 A B C P clauses c) = (term350 A B C P clauses c).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8394202 A B C P clauses s c)). Qed.
Lemma lem8394204 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8394205 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term351 A B C P clauses c) = (term351 A B C P clauses c).
Proof. exact (MK_COMB (@lem8394204 A B P) (@lem8394203 A B C P clauses c)). Qed.
Lemma lem8394206 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8394207 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term352 A B C P clauses c) = (term352 A B C P clauses c).
Proof. exact (MK_COMB (@lem8394206) (@lem8394205 A B C P clauses c)). Qed.
Lemma lem8394208 {A B C P : Type'} (c : C) (clauses : type1630 A B C P) : (term353 A B C P c clauses) = (term353 A B C P c clauses).
Proof. exact (MK_COMB (@lem8394207 A B C P clauses c) (@lem8394138 A B C P c clauses)). Qed.
Lemma lem8394209 {A B C P : Type'} (clauses : type1630 A B C P) : (term354 A B C P clauses) = (term354 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8394208 A B C P c clauses)). Qed.
Lemma lem8394210 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8394211 {A B C P : Type'} (clauses : type1630 A B C P) : (term355 A B C P clauses) = (term355 A B C P clauses).
Proof. exact (MK_COMB (@lem8394210 C) (@lem8394209 A B C P clauses)). Qed.
Lemma lem8394212 {A B C P : Type'} : (term356 A B C P) = (term356 A B C P).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8394211 A B C P clauses)). Qed.
Lemma lem8394213 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8394214 {A B C P : Type'} : (term217 A B C P) = (term217 A B C P).
Proof. exact (MK_COMB (@lem8394213 A B C P) (@lem8394212 A B C P)). Qed.
Lemma lem8394215 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8394216 {A B C P : Type'} : (term229 A B C P) = (term229 A B C P).
Proof. exact (MK_COMB (@lem8394215) (@lem8394214 A B C P)). Qed.
Lemma lem8394217 {A B C P : Type'} : (term231 A B C P) = (term231 A B C P).
Proof. exact (MK_COMB (@lem8394216 A B C P) (@lem8394092 A B C P)). Qed.
Lemma lem8394218 {B C P : Type'} (clauses : type1636 B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8394238 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) (x : P) : ((term357 B C P clauses c s x) = (t c x)) = ((term357 B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term357 B C P clauses c s x) = (t c x))). Qed.
Lemma lem8394239 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term358 B C P clauses s t c) = (term358 B C P clauses s t c).
Proof. exact (fun_ext (fun x : P => @lem8394238 B C P clauses s t c x)). Qed.
Lemma lem8394240 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8394241 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term359 B C P clauses s t c) = (term359 B C P clauses s t c).
Proof. exact (MK_COMB (@lem8394240 P) (@lem8394239 B C P clauses s t c)). Qed.
Lemma lem8394250 {B C P : Type'} (f : type1178 B C P) (s : P -> B) (t : type1475 B C P) : (term360 B C P f s t) = (term360 B C P f s t).
Proof. exact (eq_refl (term360 B C P f s t)). Qed.
Lemma lem8394251 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term361 B C P f clauses s t c) = (term361 B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8394250 B C P f s t) (@lem8394241 B C P clauses s t c)). Qed.
Lemma lem8394252 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term362 B C P f clauses s c) = (term362 B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8394251 B C P f clauses s t c)). Qed.
Lemma lem8394253 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8394254 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term363 B C P f clauses s c) = (term363 B C P f clauses s c).
Proof. exact (MK_COMB (@lem8394253 B C P) (@lem8394252 B C P f clauses s c)). Qed.
Lemma lem8394255 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term364 B C P f clauses c) = (term364 B C P f clauses c).
Proof. exact (fun_ext (fun s : P -> B => @lem8394254 B C P f clauses s c)). Qed.
Lemma lem8394256 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8394257 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term365 B C P f clauses c) = (term365 B C P f clauses c).
Proof. exact (MK_COMB (@lem8394256 B P) (@lem8394255 B C P f clauses c)). Qed.
Lemma lem8394258 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term366 B C P clauses c) = (term366 B C P clauses c).
Proof. exact (fun_ext (fun f : type1178 B C P => @lem8394257 B C P f clauses c)). Qed.
Lemma lem8394259 {B C P : Type'} : (@GABS ((prod (P -> B) (C -> P -> B)) -> Prop)) = (@GABS ((prod (P -> B) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod (P -> B) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8394260 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term367 B C P clauses c) = (term367 B C P clauses c).
Proof. exact (MK_COMB (@lem8394259 B C P) (@lem8394258 B C P clauses c)). Qed.
Lemma lem8394261 {B C P : Type'} : (@List.Forall (prod (P -> B) (C -> P -> B))) = (@List.Forall (prod (P -> B) (C -> P -> B))).
Proof. exact (eq_refl (@List.Forall (prod (P -> B) (C -> P -> B)))). Qed.
Lemma lem8394262 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term368 B C P clauses c) = (term368 B C P clauses c).
Proof. exact (MK_COMB (@lem8394261 B C P) (@lem8394260 B C P clauses c)). Qed.
Lemma lem8394263 {B C P : Type'} (c : C) (clauses : type1636 B C P) : (term369 B C P c clauses) = (term369 B C P c clauses).
Proof. exact (MK_COMB (@lem8394262 B C P clauses c) (@lem8394218 B C P clauses)). Qed.
Lemma lem8394312 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term370 B C P clauses s s' t x t' c y) = (term370 B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term370 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8394313 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term371 B C P clauses s s' t x t' c) = (term371 B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8394312 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8394314 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8394315 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term372 B C P clauses s s' t x t' c) = (term372 B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8394314 P) (@lem8394313 B C P clauses s s' t x t' c)). Qed.
Lemma lem8394316 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term373 B C P clauses s s' t t' c) = (term373 B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8394315 B C P clauses s s' t x t' c)). Qed.
Lemma lem8394317 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8394318 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term374 B C P clauses s s' t t' c) = (term374 B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8394317 P) (@lem8394316 B C P clauses s s' t t' c)). Qed.
Lemma lem8394319 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term375 B C P clauses s s' t c) = (term375 B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8394318 B C P clauses s s' t t' c)). Qed.
Lemma lem8394320 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8394321 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term376 B C P clauses s s' t c) = (term376 B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8394320 B C P) (@lem8394319 B C P clauses s s' t c)). Qed.
Lemma lem8394322 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term377 B C P clauses s t c) = (term377 B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> B => @lem8394321 B C P clauses s s' t c)). Qed.
Lemma lem8394323 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8394324 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term378 B C P clauses s t c) = (term378 B C P clauses s t c).
Proof. exact (MK_COMB (@lem8394323 B P) (@lem8394322 B C P clauses s t c)). Qed.
Lemma lem8394325 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term379 B C P clauses s c) = (term379 B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8394324 B C P clauses s t c)). Qed.
Lemma lem8394326 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8394327 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term380 B C P clauses s c) = (term380 B C P clauses s c).
Proof. exact (MK_COMB (@lem8394326 B C P) (@lem8394325 B C P clauses s c)). Qed.
Lemma lem8394328 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term381 B C P clauses c) = (term381 B C P clauses c).
Proof. exact (fun_ext (fun s : P -> B => @lem8394327 B C P clauses s c)). Qed.
Lemma lem8394329 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8394330 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term382 B C P clauses c) = (term382 B C P clauses c).
Proof. exact (MK_COMB (@lem8394329 B P) (@lem8394328 B C P clauses c)). Qed.
Lemma lem8394331 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8394332 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term383 B C P clauses c) = (term383 B C P clauses c).
Proof. exact (MK_COMB (@lem8394331) (@lem8394330 B C P clauses c)). Qed.
Lemma lem8394333 {B C P : Type'} (c : C) (clauses : type1636 B C P) : (term384 B C P c clauses) = (term384 B C P c clauses).
Proof. exact (MK_COMB (@lem8394332 B C P clauses c) (@lem8394263 B C P c clauses)). Qed.
Lemma lem8394334 {B C P : Type'} (clauses : type1636 B C P) : (term385 B C P clauses) = (term385 B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8394333 B C P c clauses)). Qed.
Lemma lem8394335 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8394336 {B C P : Type'} (clauses : type1636 B C P) : (term386 B C P clauses) = (term386 B C P clauses).
Proof. exact (MK_COMB (@lem8394335 C) (@lem8394334 B C P clauses)). Qed.
Lemma lem8394337 {B C P : Type'} : (term387 B C P) = (term387 B C P).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8394336 B C P clauses)). Qed.
Lemma lem8394338 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8394339 {B C P : Type'} : (term216 B C P) = (term216 B C P).
Proof. exact (MK_COMB (@lem8394338 B C P) (@lem8394337 B C P)). Qed.
Lemma lem8394340 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8394341 {B C P : Type'} : (term232 B C P) = (term232 B C P).
Proof. exact (MK_COMB (@lem8394340) (@lem8394339 B C P)). Qed.
Lemma lem8394342 {A B C P : Type'} : (term234 A B C P) = (term234 A B C P).
Proof. exact (MK_COMB (@lem8394341 B C P) (@lem8394217 A B C P)). Qed.
Lemma lem8394353 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 c clauses) = (term390 A B P _115314 c clauses).
Proof. exact (eq_refl (term390 A B P _115314 c clauses)). Qed.
Lemma lem8394402 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) (y : P) : (term391 A B P clauses s s' t x t' c y) = (term391 A B P clauses s s' t x t' c y).
Proof. exact (eq_refl (term391 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8394403 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term392 A B P clauses s s' t x t' c) = (term392 A B P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8394402 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8394404 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8394405 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term393 A B P clauses s s' t x t' c) = (term393 A B P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8394404 P) (@lem8394403 A B P clauses s s' t x t' c)). Qed.
Lemma lem8394406 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term394 A B P clauses s s' t t' c) = (term394 A B P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8394405 A B P clauses s s' t x t' c)). Qed.
Lemma lem8394407 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8394408 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term395 A B P clauses s s' t t' c) = (term395 A B P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8394407 P) (@lem8394406 A B P clauses s s' t t' c)). Qed.
Lemma lem8394409 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term396 A B P clauses s s' t c) = (term396 A B P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8394408 A B P clauses s s' t t' c)). Qed.
Lemma lem8394410 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8394411 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term397 A B P clauses s s' t c) = (term397 A B P clauses s s' t c).
Proof. exact (MK_COMB (@lem8394410 A B P) (@lem8394409 A B P clauses s s' t c)). Qed.
Lemma lem8394412 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term398 A B P clauses s t c) = (term398 A B P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8394411 A B P clauses s s' t c)). Qed.
Lemma lem8394413 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8394414 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term399 A B P clauses s t c) = (term399 A B P clauses s t c).
Proof. exact (MK_COMB (@lem8394413 A P) (@lem8394412 A B P clauses s t c)). Qed.
Lemma lem8394415 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term400 A B P clauses s c) = (term400 A B P clauses s c).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8394414 A B P clauses s t c)). Qed.
Lemma lem8394416 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8394417 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term401 A B P clauses s c) = (term401 A B P clauses s c).
Proof. exact (MK_COMB (@lem8394416 A B P) (@lem8394415 A B P clauses s c)). Qed.
Lemma lem8394418 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term402 A B P clauses c) = (term402 A B P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8394417 A B P clauses s c)). Qed.
Lemma lem8394419 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8394420 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term403 A B P clauses c) = (term403 A B P clauses c).
Proof. exact (MK_COMB (@lem8394419 A P) (@lem8394418 A B P clauses c)). Qed.
Lemma lem8394421 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8394422 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term404 A B P clauses c) = (term404 A B P clauses c).
Proof. exact (MK_COMB (@lem8394421) (@lem8394420 A B P clauses c)). Qed.
Lemma lem8394423 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term406 A B P _115314 c clauses) = (term406 A B P _115314 c clauses).
Proof. exact (MK_COMB (@lem8394422 A B P clauses c) (@lem8394353 A B P _115314 c clauses)). Qed.
Lemma lem8394424 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term408 A B P _115314 clauses) = (term408 A B P _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8394423 A B P _115314 c clauses)). Qed.
Lemma lem8394425 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8394426 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term410 A B P _115314 clauses) = (term410 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8394425 A B) (@lem8394424 A B P _115314 clauses)). Qed.
Lemma lem8394427 {A B P : Type'} (_115314 : type1080 A B P) : (term412 A B P _115314) = (term412 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8394426 A B P _115314 clauses)). Qed.
Lemma lem8394428 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8394429 {A B P : Type'} (_115314 : type1080 A B P) : (term413 A B P _115314) = (term413 A B P _115314).
Proof. exact (MK_COMB (@lem8394428 A B P) (@lem8394427 A B P _115314)). Qed.
Lemma lem8394430 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8394431 {A B P : Type'} (_115314 : type1080 A B P) : (term414 A B P _115314) = (term414 A B P _115314).
Proof. exact (MK_COMB (@lem8394430) (@lem8394429 A B P _115314)). Qed.
Lemma lem8394432 {A B C P : Type'} (_115314 : type1080 A B P) : (term415 A B C P _115314) = (term415 A B C P _115314).
Proof. exact (MK_COMB (@lem8394431 A B P _115314) (@lem8394342 A B C P)). Qed.
Lemma lem8394433 {A B C P : Type'} (clauses : type1638 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8394435 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term425 A B C P clauses c) = (_115316 clauses c).
Proof. exact (SYM (@lem8393842 A B C P clauses c _115316 h1)). Qed.
Lemma lem8394436 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term425 A B C P clauses c) = (_115316 clauses c).
Proof. exact (@lem8394435 A B C P clauses c _115316 h1). Qed.
Lemma lem8394437 {A B C P : Type'} : (@GABS ((prod (P -> A) (C -> P -> B)) -> Prop)) = (@GABS ((prod (P -> A) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod (P -> A) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8394438 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term426 A B C P clauses c) = (term610 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8394437 A B C P) (@lem8394436 A B C P clauses c _115316 h1)). Qed.
Lemma lem8394439 {A B C P : Type'} : (@List.Forall (prod (P -> A) (C -> P -> B))) = (@List.Forall (prod (P -> A) (C -> P -> B))).
Proof. exact (eq_refl (@List.Forall (prod (P -> A) (C -> P -> B)))). Qed.
Lemma lem8394440 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term427 A B C P clauses c) = (term611 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8394439 A B C P) (@lem8394438 A B C P clauses c _115316 h1)). Qed.
Lemma lem8394441 {A B C P : Type'} (c : C) (clauses : type1638 A B C P) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term428 A B C P c clauses) = (term612 A B C P _115316 c clauses).
Proof. exact (MK_COMB (@lem8394440 A B C P clauses c _115316 h1) (@lem8394433 A B C P clauses)). Qed.
Lemma lem8394490 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term429 A B C P clauses s s' t x t' c y) = (term429 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term429 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8394491 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term430 A B C P clauses s s' t x t' c) = (term430 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8394490 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8394492 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8394493 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term431 A B C P clauses s s' t x t' c) = (term431 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8394492 P) (@lem8394491 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8394494 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term432 A B C P clauses s s' t t' c) = (term432 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8394493 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8394495 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8394496 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term433 A B C P clauses s s' t t' c) = (term433 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8394495 P) (@lem8394494 A B C P clauses s s' t t' c)). Qed.
Lemma lem8394497 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term434 A B C P clauses s s' t c) = (term434 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8394496 A B C P clauses s s' t t' c)). Qed.
Lemma lem8394498 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8394499 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term435 A B C P clauses s s' t c) = (term435 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8394498 B C P) (@lem8394497 A B C P clauses s s' t c)). Qed.
Lemma lem8394500 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term436 A B C P clauses s t c) = (term436 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8394499 A B C P clauses s s' t c)). Qed.
Lemma lem8394501 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8394502 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term437 A B C P clauses s t c) = (term437 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8394501 A P) (@lem8394500 A B C P clauses s t c)). Qed.
Lemma lem8394503 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term438 A B C P clauses s c) = (term438 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8394502 A B C P clauses s t c)). Qed.
Lemma lem8394504 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8394505 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term439 A B C P clauses s c) = (term439 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8394504 B C P) (@lem8394503 A B C P clauses s c)). Qed.
Lemma lem8394506 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term440 A B C P clauses c) = (term440 A B C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8394505 A B C P clauses s c)). Qed.
Lemma lem8394507 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8394508 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term441 A B C P clauses c) = (term441 A B C P clauses c).
Proof. exact (MK_COMB (@lem8394507 A P) (@lem8394506 A B C P clauses c)). Qed.
Lemma lem8394509 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8394510 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term442 A B C P clauses c) = (term442 A B C P clauses c).
Proof. exact (MK_COMB (@lem8394509) (@lem8394508 A B C P clauses c)). Qed.
Lemma lem8394511 {A B C P : Type'} (c : C) (clauses : type1638 A B C P) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term443 A B C P c clauses) = (term613 A B C P _115316 c clauses).
Proof. exact (MK_COMB (@lem8394510 A B C P clauses c) (@lem8394441 A B C P c clauses _115316 h1)). Qed.
Lemma lem8394512 {A B C P : Type'} (clauses : type1638 A B C P) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term444 A B C P clauses) = (term614 A B C P _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8394511 A B C P c clauses _115316 h1)). Qed.
Lemma lem8394513 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8394514 {A B C P : Type'} (clauses : type1638 A B C P) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term445 A B C P clauses) = (term615 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8394513 C) (@lem8394512 A B C P clauses _115316 h1)). Qed.
Lemma lem8394515 {A B C P : Type'} (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term446 A B C P) = (term616 A B C P _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8394514 A B C P clauses _115316 h1)). Qed.
Lemma lem8394516 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8394517 {A B C P : Type'} (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term215 A B C P) = (term617 A B C P _115316).
Proof. exact (MK_COMB (@lem8394516 A B C P) (@lem8394515 A B C P _115316 h1)). Qed.
Lemma lem8394518 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8394519 {A B C P : Type'} (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term238 A B C P) = (term618 A B C P _115316).
Proof. exact (MK_COMB (@lem8394518) (@lem8394517 A B C P _115316 h1)). Qed.
Lemma lem8394520 {A B C P : Type'} (_115314 : type1080 A B P) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term447 A B C P _115314) = (term619 A B C P _115316 _115314).
Proof. exact (MK_COMB (@lem8394519 A B C P _115316 h1) (@lem8394432 A B C P _115314)). Qed.
Lemma lem8394531 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term528 A C P _115315 c clauses) = (term528 A C P _115315 c clauses).
Proof. exact (eq_refl (term528 A C P _115315 c clauses)). Qed.
Lemma lem8394580 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) (y : P) : (term370 A C P clauses s s' t x t' c y) = (term370 A C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term370 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8394581 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term371 A C P clauses s s' t x t' c) = (term371 A C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8394580 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8394582 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8394583 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term372 A C P clauses s s' t x t' c) = (term372 A C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8394582 P) (@lem8394581 A C P clauses s s' t x t' c)). Qed.
Lemma lem8394584 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term373 A C P clauses s s' t t' c) = (term373 A C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8394583 A C P clauses s s' t x t' c)). Qed.
Lemma lem8394585 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8394586 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term374 A C P clauses s s' t t' c) = (term374 A C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8394585 P) (@lem8394584 A C P clauses s s' t t' c)). Qed.
Lemma lem8394587 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term375 A C P clauses s s' t c) = (term375 A C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 A C P => @lem8394586 A C P clauses s s' t t' c)). Qed.
Lemma lem8394588 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8394589 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term376 A C P clauses s s' t c) = (term376 A C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8394588 A C P) (@lem8394587 A C P clauses s s' t c)). Qed.
Lemma lem8394590 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term377 A C P clauses s t c) = (term377 A C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8394589 A C P clauses s s' t c)). Qed.
Lemma lem8394591 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8394592 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term378 A C P clauses s t c) = (term378 A C P clauses s t c).
Proof. exact (MK_COMB (@lem8394591 A P) (@lem8394590 A C P clauses s t c)). Qed.
Lemma lem8394593 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term379 A C P clauses s c) = (term379 A C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8394592 A C P clauses s t c)). Qed.
Lemma lem8394594 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8394595 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term380 A C P clauses s c) = (term380 A C P clauses s c).
Proof. exact (MK_COMB (@lem8394594 A C P) (@lem8394593 A C P clauses s c)). Qed.
Lemma lem8394596 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term381 A C P clauses c) = (term381 A C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8394595 A C P clauses s c)). Qed.
Lemma lem8394597 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8394598 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term382 A C P clauses c) = (term382 A C P clauses c).
Proof. exact (MK_COMB (@lem8394597 A P) (@lem8394596 A C P clauses c)). Qed.
Lemma lem8394599 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8394600 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term383 A C P clauses c) = (term383 A C P clauses c).
Proof. exact (MK_COMB (@lem8394599) (@lem8394598 A C P clauses c)). Qed.
Lemma lem8394601 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term529 A C P _115315 c clauses) = (term529 A C P _115315 c clauses).
Proof. exact (MK_COMB (@lem8394600 A C P clauses c) (@lem8394531 A C P _115315 c clauses)). Qed.
Lemma lem8394602 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term530 A C P _115315 clauses) = (term530 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8394601 A C P _115315 c clauses)). Qed.
Lemma lem8394603 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8394604 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term531 A C P _115315 clauses) = (term531 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8394603 C) (@lem8394602 A C P _115315 clauses)). Qed.
Lemma lem8394605 {A C P : Type'} (_115315 : type1092 A C P) : (term532 A C P _115315) = (term532 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8394604 A C P _115315 clauses)). Qed.
Lemma lem8394606 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8394607 {A C P : Type'} (_115315 : type1092 A C P) : (term533 A C P _115315) = (term533 A C P _115315).
Proof. exact (MK_COMB (@lem8394606 A C P) (@lem8394605 A C P _115315)). Qed.
Lemma lem8394608 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8394609 {A C P : Type'} (_115315 : type1092 A C P) : (term534 A C P _115315) = (term534 A C P _115315).
Proof. exact (MK_COMB (@lem8394608) (@lem8394607 A C P _115315)). Qed.
Lemma lem8394610 {A B C P : Type'} (_115315 : type1092 A C P) (_115314 : type1080 A B P) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term535 A B C P _115315 _115314) = (term620 A B C P _115315 _115316 _115314).
Proof. exact (MK_COMB (@lem8394609 A C P _115315) (@lem8394520 A B C P _115314 _115316 h1)). Qed.
Lemma lem8394625 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) : (term450 A B P _115314 f clauses) = (term450 A B P _115314 f clauses).
Proof. exact (eq_refl (term450 A B P _115314 f clauses)). Qed.
Lemma lem8394626 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115314 : type1080 A B P) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term536 A B C P f clauses _115315 _115314) = (term621 A B C P f clauses _115315 _115316 _115314).
Proof. exact (MK_COMB (@lem8394625 A B P _115314 f clauses) (@lem8394610 A B C P _115315 _115314 _115316 h1)). Qed.
Lemma lem8394639 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (x : A) : ((f x) = (@CASEWISE B P A (A -> B) clauses f x)) = ((f x) = (@CASEWISE B P A (A -> B) clauses f x)).
Proof. exact (eq_refl ((f x) = (@CASEWISE B P A (A -> B) clauses f x))). Qed.
Lemma lem8394640 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term452 A B P clauses f) = (term452 A B P clauses f).
Proof. exact (fun_ext (fun x : A => @lem8394639 A B P clauses f x)). Qed.
Lemma lem8394641 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8394642 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term162 A B P clauses f) = (term162 A B P clauses f).
Proof. exact (MK_COMB (@lem8394641 A) (@lem8394640 A B P clauses f)). Qed.
Lemma lem8394643 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8394644 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term164 A B P clauses f) = (term164 A B P clauses f).
Proof. exact (MK_COMB (@lem8394643) (@lem8394642 A B P clauses f)). Qed.
Lemma lem8394645 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115314 : type1080 A B P) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term537 A B C P f clauses _115315 _115314) = (term622 A B C P f clauses _115315 _115316 _115314).
Proof. exact (MK_COMB (@lem8394644 A B P clauses f) (@lem8394626 A B C P f clauses _115315 _115314 _115316 h1)). Qed.
Lemma lem8394694 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) (y : P) : (term115 A B P clauses s s' t x t' f y) = (term115 A B P clauses s s' t x t' f y).
Proof. exact (eq_refl (term115 A B P clauses s s' t x t' f y)). Qed.
Lemma lem8394695 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term118 A B P clauses s s' t x t' f) = (term118 A B P clauses s s' t x t' f).
Proof. exact (fun_ext (fun y : P => @lem8394694 A B P clauses s s' t x t' f y)). Qed.
Lemma lem8394696 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8394697 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term120 A B P clauses s s' t x t' f) = (term120 A B P clauses s s' t x t' f).
Proof. exact (MK_COMB (@lem8394696 P) (@lem8394695 A B P clauses s s' t x t' f)). Qed.
Lemma lem8394698 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term122 A B P clauses s s' t t' f) = (term122 A B P clauses s s' t t' f).
Proof. exact (fun_ext (fun x : P => @lem8394697 A B P clauses s s' t x t' f)). Qed.
Lemma lem8394699 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8394700 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term124 A B P clauses s s' t t' f) = (term124 A B P clauses s s' t t' f).
Proof. exact (MK_COMB (@lem8394699 P) (@lem8394698 A B P clauses s s' t t' f)). Qed.
Lemma lem8394701 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term126 A B P clauses s s' t t') = (term126 A B P clauses s s' t t').
Proof. exact (fun_ext (fun f : A -> B => @lem8394700 A B P clauses s s' t t' f)). Qed.
Lemma lem8394702 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8394703 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term128 A B P clauses s s' t t') = (term128 A B P clauses s s' t t').
Proof. exact (MK_COMB (@lem8394702 A B) (@lem8394701 A B P clauses s s' t t')). Qed.
Lemma lem8394704 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term130 A B P clauses s s' t) = (term130 A B P clauses s s' t).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8394703 A B P clauses s s' t t')). Qed.
Lemma lem8394705 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8394706 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term132 A B P clauses s s' t) = (term132 A B P clauses s s' t).
Proof. exact (MK_COMB (@lem8394705 A B P) (@lem8394704 A B P clauses s s' t)). Qed.
Lemma lem8394707 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term134 A B P clauses s t) = (term134 A B P clauses s t).
Proof. exact (fun_ext (fun s' : P -> A => @lem8394706 A B P clauses s s' t)). Qed.
Lemma lem8394708 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8394709 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term136 A B P clauses s t) = (term136 A B P clauses s t).
Proof. exact (MK_COMB (@lem8394708 A P) (@lem8394707 A B P clauses s t)). Qed.
Lemma lem8394710 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term138 A B P clauses s) = (term138 A B P clauses s).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8394709 A B P clauses s t)). Qed.
Lemma lem8394711 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8394712 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term140 A B P clauses s) = (term140 A B P clauses s).
Proof. exact (MK_COMB (@lem8394711 A B P) (@lem8394710 A B P clauses s)). Qed.
Lemma lem8394713 {A B P : Type'} (clauses : type1635 A B P) : (term142 A B P clauses) = (term142 A B P clauses).
Proof. exact (fun_ext (fun s : P -> A => @lem8394712 A B P clauses s)). Qed.
Lemma lem8394714 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8394715 {A B P : Type'} (clauses : type1635 A B P) : (term144 A B P clauses) = (term144 A B P clauses).
Proof. exact (MK_COMB (@lem8394714 A P) (@lem8394713 A B P clauses)). Qed.
Lemma lem8394716 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8394717 {A B P : Type'} (clauses : type1635 A B P) : (term248 A B P clauses) = (term248 A B P clauses).
Proof. exact (MK_COMB (@lem8394716) (@lem8394715 A B P clauses)). Qed.
Lemma lem8394718 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115314 : type1080 A B P) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term538 A B C P f clauses _115315 _115314) = (term623 A B C P f clauses _115315 _115316 _115314).
Proof. exact (MK_COMB (@lem8394717 A B P clauses) (@lem8394645 A B C P f clauses _115315 _115314 _115316 h1)). Qed.
Lemma lem8394719 {A B C P : Type'} (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115314 : type1080 A B P) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term539 A B C P clauses _115315 _115314) = (term624 A B C P clauses _115315 _115316 _115314).
Proof. exact (fun_ext (fun f : A -> B => @lem8394718 A B C P f clauses _115315 _115314 _115316 h1)). Qed.
Lemma lem8394720 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8394721 {A B C P : Type'} (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115314 : type1080 A B P) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term540 A B C P clauses _115315 _115314) = (term625 A B C P clauses _115315 _115316 _115314).
Proof. exact (MK_COMB (@lem8394720 A B) (@lem8394719 A B C P clauses _115315 _115314 _115316 h1)). Qed.
Lemma lem8394722 {A B C P : Type'} (_115315 : type1092 A C P) (_115314 : type1080 A B P) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term541 A B C P _115315 _115314) = (term626 A B C P _115315 _115316 _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8394721 A B C P clauses _115315 _115314 _115316 h1)). Qed.
Lemma lem8394723 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8394724 {A B C P : Type'} (_115315 : type1092 A C P) (_115314 : type1080 A B P) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term542 A B C P _115315 _115314) = (term627 A B C P _115315 _115316 _115314).
Proof. exact (MK_COMB (@lem8394723 A B P) (@lem8394722 A B C P _115315 _115314 _115316 h1)). Qed.
Lemma lem8394741 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f : A -> B) (x : P) : ((term186 A B P clauses f s x) = (t f x)) = ((term186 A B P clauses f s x) = (t f x)).
Proof. exact (eq_refl ((term186 A B P clauses f s x) = (t f x))). Qed.
Lemma lem8394742 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f : A -> B) : (term190 A B P clauses s t f) = (term190 A B P clauses s t f).
Proof. exact (fun_ext (fun x : P => @lem8394741 A B P clauses s t f x)). Qed.
Lemma lem8394743 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8394744 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f : A -> B) : (term192 A B P clauses s t f) = (term192 A B P clauses s t f).
Proof. exact (MK_COMB (@lem8394743 P) (@lem8394742 A B P clauses s t f)). Qed.
Lemma lem8394753 {A B P : Type'} (f : type1177 A B P) (s : P -> A) (t : type558 A B P) : (term193 A B P f s t) = (term193 A B P f s t).
Proof. exact (eq_refl (term193 A B P f s t)). Qed.
Lemma lem8394754 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f' : A -> B) : (term195 A B P f clauses s t f') = (term195 A B P f clauses s t f').
Proof. exact (MK_COMB (@lem8394753 A B P f s t) (@lem8394744 A B P clauses s t f')). Qed.
Lemma lem8394755 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term197 A B P f clauses s f') = (term197 A B P f clauses s f').
Proof. exact (fun_ext (fun t : type558 A B P => @lem8394754 A B P f clauses s t f')). Qed.
Lemma lem8394756 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8394757 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term199 A B P f clauses s f') = (term199 A B P f clauses s f').
Proof. exact (MK_COMB (@lem8394756 A B P) (@lem8394755 A B P f clauses s f')). Qed.
Lemma lem8394758 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term201 A B P f clauses f') = (term201 A B P f clauses f').
Proof. exact (fun_ext (fun s : P -> A => @lem8394757 A B P f clauses s f')). Qed.
Lemma lem8394759 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8394760 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term203 A B P f clauses f') = (term203 A B P f clauses f').
Proof. exact (MK_COMB (@lem8394759 A P) (@lem8394758 A B P f clauses f')). Qed.
Lemma lem8394769 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) (f' : type1177 A B P) : (term508 A B P _115314 clauses f f') = (term508 A B P _115314 clauses f f').
Proof. exact (eq_refl (term508 A B P _115314 clauses f f')). Qed.
Lemma lem8394770 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : ((_115314 clauses f' f) = (term203 A B P f clauses f')) = ((_115314 clauses f' f) = (term203 A B P f clauses f')).
Proof. exact (MK_COMB (@lem8394769 A B P _115314 clauses f' f) (@lem8394760 A B P f clauses f')). Qed.
Lemma lem8394771 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term510 A B P _115314 clauses f) = (term510 A B P _115314 clauses f).
Proof. exact (fun_ext (fun f' : type1177 A B P => @lem8394770 A B P _115314 f' clauses f)). Qed.
Lemma lem8394772 {A B P : Type'} : (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) = (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop))). Qed.
Lemma lem8394773 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term511 A B P _115314 clauses f) = (term511 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8394772 A B P) (@lem8394771 A B P _115314 clauses f)). Qed.
Lemma lem8394774 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term512 A B P _115314 clauses) = (term512 A B P _115314 clauses).
Proof. exact (fun_ext (fun f : A -> B => @lem8394773 A B P _115314 clauses f)). Qed.
Lemma lem8394775 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8394776 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term513 A B P _115314 clauses) = (term513 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8394775 A B) (@lem8394774 A B P _115314 clauses)). Qed.
Lemma lem8394777 {A B P : Type'} (_115314 : type1080 A B P) : (term514 A B P _115314) = (term514 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8394776 A B P _115314 clauses)). Qed.
Lemma lem8394778 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8394779 {A B P : Type'} (_115314 : type1080 A B P) : (term515 A B P _115314) = (term515 A B P _115314).
Proof. exact (MK_COMB (@lem8394778 A B P) (@lem8394777 A B P _115314)). Qed.
Lemma lem8394780 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8394781 {A B P : Type'} (_115314 : type1080 A B P) : (term516 A B P _115314) = (term516 A B P _115314).
Proof. exact (MK_COMB (@lem8394780) (@lem8394779 A B P _115314)). Qed.
Lemma lem8394782 {A B C P : Type'} (_115315 : type1092 A C P) (_115314 : type1080 A B P) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term543 A B C P _115315 _115314) = (term628 A B C P _115315 _115316 _115314).
Proof. exact (MK_COMB (@lem8394781 A B P _115314) (@lem8394724 A B C P _115315 _115314 _115316 h1)). Qed.
Lemma lem8394783 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term544 A B C P _115315) = (term629 A B C P _115315 _115316).
Proof. exact (fun_ext (fun _115314 : type1080 A B P => @lem8394782 A B C P _115315 _115314 _115316 h1)). Qed.
Lemma lem8394784 {A B P : Type'} : (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8394785 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term545 A B C P _115315) = (term630 A B C P _115315 _115316).
Proof. exact (MK_COMB (@lem8394784 A B P) (@lem8394783 A B C P _115315 _115316 h1)). Qed.
Lemma lem8394802 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) (x : P) : ((term357 A C P clauses c s x) = (t c x)) = ((term357 A C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term357 A C P clauses c s x) = (t c x))). Qed.
Lemma lem8394803 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term358 A C P clauses s t c) = (term358 A C P clauses s t c).
Proof. exact (fun_ext (fun x : P => @lem8394802 A C P clauses s t c x)). Qed.
Lemma lem8394804 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8394805 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term359 A C P clauses s t c) = (term359 A C P clauses s t c).
Proof. exact (MK_COMB (@lem8394804 P) (@lem8394803 A C P clauses s t c)). Qed.
Lemma lem8394814 {A C P : Type'} (f : type1178 A C P) (s : P -> A) (t : type1475 A C P) : (term360 A C P f s t) = (term360 A C P f s t).
Proof. exact (eq_refl (term360 A C P f s t)). Qed.
Lemma lem8394815 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term361 A C P f clauses s t c) = (term361 A C P f clauses s t c).
Proof. exact (MK_COMB (@lem8394814 A C P f s t) (@lem8394805 A C P clauses s t c)). Qed.
Lemma lem8394816 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term362 A C P f clauses s c) = (term362 A C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8394815 A C P f clauses s t c)). Qed.
Lemma lem8394817 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8394818 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term363 A C P f clauses s c) = (term363 A C P f clauses s c).
Proof. exact (MK_COMB (@lem8394817 A C P) (@lem8394816 A C P f clauses s c)). Qed.
Lemma lem8394819 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term364 A C P f clauses c) = (term364 A C P f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8394818 A C P f clauses s c)). Qed.
Lemma lem8394820 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8394821 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term365 A C P f clauses c) = (term365 A C P f clauses c).
Proof. exact (MK_COMB (@lem8394820 A P) (@lem8394819 A C P f clauses c)). Qed.
Lemma lem8394830 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) (f : type1178 A C P) : (term592 A C P _115315 clauses c f) = (term592 A C P _115315 clauses c f).
Proof. exact (eq_refl (term592 A C P _115315 clauses c f)). Qed.
Lemma lem8394831 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : ((_115315 clauses c f) = (term365 A C P f clauses c)) = ((_115315 clauses c f) = (term365 A C P f clauses c)).
Proof. exact (MK_COMB (@lem8394830 A C P _115315 clauses c f) (@lem8394821 A C P f clauses c)). Qed.
Lemma lem8394832 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term594 A C P _115315 clauses c) = (term594 A C P _115315 clauses c).
Proof. exact (fun_ext (fun f : type1178 A C P => @lem8394831 A C P _115315 f clauses c)). Qed.
Lemma lem8394833 {A C P : Type'} : (@all ((prod (P -> A) (C -> P -> A)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> A)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> A)) -> Prop))). Qed.
Lemma lem8394834 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term595 A C P _115315 clauses c) = (term595 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8394833 A C P) (@lem8394832 A C P _115315 clauses c)). Qed.
Lemma lem8394835 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term596 A C P _115315 clauses) = (term596 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8394834 A C P _115315 clauses c)). Qed.
Lemma lem8394836 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8394837 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term597 A C P _115315 clauses) = (term597 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8394836 C) (@lem8394835 A C P _115315 clauses)). Qed.
Lemma lem8394838 {A C P : Type'} (_115315 : type1092 A C P) : (term598 A C P _115315) = (term598 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8394837 A C P _115315 clauses)). Qed.
Lemma lem8394839 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8394840 {A C P : Type'} (_115315 : type1092 A C P) : (term599 A C P _115315) = (term599 A C P _115315).
Proof. exact (MK_COMB (@lem8394839 A C P) (@lem8394838 A C P _115315)). Qed.
Lemma lem8394841 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8394842 {A C P : Type'} (_115315 : type1092 A C P) : (term600 A C P _115315) = (term600 A C P _115315).
Proof. exact (MK_COMB (@lem8394841) (@lem8394840 A C P _115315)). Qed.
Lemma lem8394843 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term601 A B C P _115315) = (term631 A B C P _115315 _115316).
Proof. exact (MK_COMB (@lem8394842 A C P _115315) (@lem8394785 A B C P _115315 _115316 h1)). Qed.
Lemma lem8394844 {A B C P : Type'} (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term602 A B C P) = (term632 A B C P _115316).
Proof. exact (fun_ext (fun _115315 : type1092 A C P => @lem8394843 A B C P _115315 _115316 h1)). Qed.
Lemma lem8394845 {A C P : Type'} : (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop))). Qed.
Lemma lem8394846 {A B C P : Type'} (_115316 : type1115 A B C P) (h1 : _115316 = (term604 A B C P)) : (term603 A B C P) = (term633 A B C P _115316).
Proof. exact (MK_COMB (@lem8394845 A C P) (@lem8394844 A B C P _115316 h1)). Qed.
Lemma lem8394847 {A B C P : Type'} (_115316 : type1115 A B C P) : term634 A B C P _115316.
Proof. exact (fun h0 : _115316 = (term604 A B C P) => @lem8394846 A B C P _115316 h0). Qed.
Lemma lem8394848 {A B C P : Type'} : term635 A B C P.
Proof. exact (fun _115316 : type1115 A B C P => @lem8394847 A B C P _115316). Qed.
Lemma lem8394850 {_3603 : Type'} (P : Prop) (c : _3603) (Q : _3603 -> Prop) : term461 _3603 P c Q.
Proof. exact (EQ_MP (@lem20230 _3603 P c Q) (@lem0)). Qed.
Lemma lem8394851 {A B C P : Type'} (P' : Prop) (c : type1115 A B C P) (Q : type275 A B C P) : term636 A B C P P' c Q.
Proof. exact (@lem8394850 (type1115 A B C P) P' c Q). Qed.
Lemma lem8394852 {A B C P : Type'} : term637 A B C P.
Proof. exact (@lem8394851 A B C P (term603 A B C P) (term604 A B C P) (term638 A B C P)). Qed.
Lemma lem8394853 {A B C P : Type'} (_115316 : type1115 A B C P) : (term639 A B C P _115316) = (term633 A B C P _115316).
Proof. exact (eq_refl (term639 A B C P _115316)). Qed.
Lemma lem8394854 {A B C P : Type'} : (term640 A B C P) = (term640 A B C P).
Proof. exact (eq_refl (term640 A B C P)). Qed.
Lemma lem8394855 {A B C P : Type'} (_115316 : type1115 A B C P) : ((term603 A B C P) = (term639 A B C P _115316)) = ((term603 A B C P) = (term633 A B C P _115316)).
Proof. exact (MK_COMB (@lem8394854 A B C P) (@lem8394853 A B C P _115316)). Qed.
Lemma lem8394856 {A B C P : Type'} (_115316 : type1115 A B C P) : (term641 A B C P _115316) = (term641 A B C P _115316).
Proof. exact (eq_refl (term641 A B C P _115316)). Qed.
Lemma lem8394857 {A B C P : Type'} (_115316 : type1115 A B C P) : (term642 A B C P _115316) = (term634 A B C P _115316).
Proof. exact (MK_COMB (@lem8394856 A B C P _115316) (@lem8394855 A B C P _115316)). Qed.
Lemma lem8394858 {A B C P : Type'} : (term643 A B C P) = (term644 A B C P).
Proof. exact (fun_ext (fun _115316 : type1115 A B C P => @lem8394857 A B C P _115316)). Qed.
Lemma lem8394859 {A B C P : Type'} : (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8394860 {A B C P : Type'} : (term645 A B C P) = (term635 A B C P).
Proof. exact (MK_COMB (@lem8394859 A B C P) (@lem8394858 A B C P)). Qed.
Lemma lem8394861 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8394862 {A B C P : Type'} : (term646 A B C P) = (term647 A B C P).
Proof. exact (MK_COMB (@lem8394861) (@lem8394860 A B C P)). Qed.
Lemma lem8394863 {A B C P : Type'} (_115316 : type1115 A B C P) : (term639 A B C P _115316) = (term633 A B C P _115316).
Proof. exact (eq_refl (term639 A B C P _115316)). Qed.
Lemma lem8394864 {A B C P : Type'} (_115316 : type1115 A B C P) : (term641 A B C P _115316) = (term641 A B C P _115316).
Proof. exact (eq_refl (term641 A B C P _115316)). Qed.
Lemma lem8394865 {A B C P : Type'} (_115316 : type1115 A B C P) : (term648 A B C P _115316) = (term649 A B C P _115316).
Proof. exact (MK_COMB (@lem8394864 A B C P _115316) (@lem8394863 A B C P _115316)). Qed.
Lemma lem8394866 {A B C P : Type'} : (term650 A B C P) = (term651 A B C P).
Proof. exact (fun_ext (fun _115316 : type1115 A B C P => @lem8394865 A B C P _115316)). Qed.
Lemma lem8394867 {A B C P : Type'} : (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8394868 {A B C P : Type'} : (term652 A B C P) = (term653 A B C P).
Proof. exact (MK_COMB (@lem8394867 A B C P) (@lem8394866 A B C P)). Qed.
Lemma lem8394869 {A B C P : Type'} : (term640 A B C P) = (term640 A B C P).
Proof. exact (eq_refl (term640 A B C P)). Qed.
Lemma lem8394870 {A B C P : Type'} : ((term603 A B C P) = (term652 A B C P)) = ((term603 A B C P) = (term653 A B C P)).
Proof. exact (MK_COMB (@lem8394869 A B C P) (@lem8394868 A B C P)). Qed.
Lemma lem8394871 {A B C P : Type'} : (term637 A B C P) = (term654 A B C P).
Proof. exact (MK_COMB (@lem8394862 A B C P) (@lem8394870 A B C P)). Qed.
Lemma lem8394872 {A B C P : Type'} : term654 A B C P.
Proof. exact (EQ_MP (@lem8394871 A B C P) (@lem8394852 A B C P)). Qed.
Lemma lem8394873 {A B C P : Type'} : (term603 A B C P) = (term653 A B C P).
Proof. exact (@lem8394872 A B C P (@lem8394848 A B C P)). Qed.
Lemma lem8394875 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term481 _3571 _3575 t)) = (term482 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem8394876 {A B C P : Type'} (s : type1115 A B C P) (t : type1115 A B C P) : (s = (term655 A B C P t)) = (term656 A B C P s t).
Proof. exact (@lem8394875 (type1503 A B C P) (type1638 A B C P) s t). Qed.
Lemma lem8394877 {A B C P : Type'} (_115316 : type1115 A B C P) : (_115316 = (term657 A B C P)) = (term658 A B C P _115316).
Proof. exact (@lem8394876 A B C P _115316 (term604 A B C P)). Qed.
Lemma lem8394878 {A B C P : Type'} (clauses : type1638 A B C P) : (term605 A B C P clauses) = (term606 A B C P clauses).
Proof. exact (eq_refl (term605 A B C P clauses)). Qed.
Lemma lem8394879 {A B C P : Type'} : (term657 A B C P) = (term604 A B C P).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8394878 A B C P clauses)). Qed.
Lemma lem8394880 {A B C P : Type'} (_115316 : type1115 A B C P) : (@eq ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop) _115316) = (@eq ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop) _115316).
Proof. exact (eq_refl (@eq ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop) _115316)). Qed.
Lemma lem8394881 {A B C P : Type'} (_115316 : type1115 A B C P) : (_115316 = (term657 A B C P)) = (_115316 = (term604 A B C P)).
Proof. exact (MK_COMB (@lem8394880 A B C P _115316) (@lem8394879 A B C P)). Qed.
Lemma lem8394882 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8394883 {A B C P : Type'} (_115316 : type1115 A B C P) : (term659 A B C P _115316) = (term660 A B C P _115316).
Proof. exact (MK_COMB (@lem8394882) (@lem8394881 A B C P _115316)). Qed.
Lemma lem8394884 {A B C P : Type'} (clauses : type1638 A B C P) : (term605 A B C P clauses) = (term606 A B C P clauses).
Proof. exact (eq_refl (term605 A B C P clauses)). Qed.
Lemma lem8394885 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term607 A B C P _115316 clauses) = (term607 A B C P _115316 clauses).
Proof. exact (eq_refl (term607 A B C P _115316 clauses)). Qed.
Lemma lem8394886 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : ((_115316 clauses) = (term605 A B C P clauses)) = ((_115316 clauses) = (term606 A B C P clauses)).
Proof. exact (MK_COMB (@lem8394885 A B C P _115316 clauses) (@lem8394884 A B C P clauses)). Qed.
Lemma lem8394887 {A B C P : Type'} (_115316 : type1115 A B C P) : (term661 A B C P _115316) = (term662 A B C P _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8394886 A B C P _115316 clauses)). Qed.
Lemma lem8394888 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8394889 {A B C P : Type'} (_115316 : type1115 A B C P) : (term658 A B C P _115316) = (term663 A B C P _115316).
Proof. exact (MK_COMB (@lem8394888 A B C P) (@lem8394887 A B C P _115316)). Qed.
Lemma lem8394890 {A B C P : Type'} (_115316 : type1115 A B C P) : ((_115316 = (term657 A B C P)) = (term658 A B C P _115316)) = ((_115316 = (term604 A B C P)) = (term663 A B C P _115316)).
Proof. exact (MK_COMB (@lem8394883 A B C P _115316) (@lem8394889 A B C P _115316)). Qed.
Lemma lem8394891 {A B C P : Type'} (_115316 : type1115 A B C P) : (_115316 = (term604 A B C P)) = (term663 A B C P _115316).
Proof. exact (EQ_MP (@lem8394890 A B C P _115316) (@lem8394877 A B C P _115316)). Qed.
Lemma lem8394893 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term481 _3571 _3575 t)) = (term482 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem8394894 {A B C P : Type'} (s : type1503 A B C P) (t : type1503 A B C P) : (s = (term664 A B C P t)) = (term665 A B C P s t).
Proof. exact (@lem8394893 (type312 A B C P) C s t). Qed.
Lemma lem8394895 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : ((_115316 clauses) = (term666 A B C P clauses)) = (term667 A B C P _115316 clauses).
Proof. exact (@lem8394894 A B C P (_115316 clauses) (term606 A B C P clauses)). Qed.
Lemma lem8394896 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term608 A B C P clauses c) = (term425 A B C P clauses c).
Proof. exact (eq_refl (term608 A B C P clauses c)). Qed.
Lemma lem8394897 {A B C P : Type'} (clauses : type1638 A B C P) : (term666 A B C P clauses) = (term606 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8394896 A B C P clauses c)). Qed.
Lemma lem8394898 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term607 A B C P _115316 clauses) = (term607 A B C P _115316 clauses).
Proof. exact (eq_refl (term607 A B C P _115316 clauses)). Qed.
Lemma lem8394899 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : ((_115316 clauses) = (term666 A B C P clauses)) = ((_115316 clauses) = (term606 A B C P clauses)).
Proof. exact (MK_COMB (@lem8394898 A B C P _115316 clauses) (@lem8394897 A B C P clauses)). Qed.
Lemma lem8394900 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8394901 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term668 A B C P _115316 clauses) = (term669 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8394900) (@lem8394899 A B C P _115316 clauses)). Qed.
Lemma lem8394902 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term608 A B C P clauses c) = (term425 A B C P clauses c).
Proof. exact (eq_refl (term608 A B C P clauses c)). Qed.
Lemma lem8394903 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term609 A B C P _115316 clauses c) = (term609 A B C P _115316 clauses c).
Proof. exact (eq_refl (term609 A B C P _115316 clauses c)). Qed.
Lemma lem8394904 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : ((_115316 clauses c) = (term608 A B C P clauses c)) = ((_115316 clauses c) = (term425 A B C P clauses c)).
Proof. exact (MK_COMB (@lem8394903 A B C P _115316 clauses c) (@lem8394902 A B C P clauses c)). Qed.
Lemma lem8394905 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term670 A B C P _115316 clauses) = (term671 A B C P _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8394904 A B C P _115316 clauses c)). Qed.
Lemma lem8394906 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8394907 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term667 A B C P _115316 clauses) = (term672 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8394906 C) (@lem8394905 A B C P _115316 clauses)). Qed.
Lemma lem8394908 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (((_115316 clauses) = (term666 A B C P clauses)) = (term667 A B C P _115316 clauses)) = (((_115316 clauses) = (term606 A B C P clauses)) = (term672 A B C P _115316 clauses)).
Proof. exact (MK_COMB (@lem8394901 A B C P _115316 clauses) (@lem8394907 A B C P _115316 clauses)). Qed.
Lemma lem8394909 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : ((_115316 clauses) = (term606 A B C P clauses)) = (term672 A B C P _115316 clauses).
Proof. exact (EQ_MP (@lem8394908 A B C P _115316 clauses) (@lem8394895 A B C P _115316 clauses)). Qed.
Lemma lem8394911 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term481 _3571 _3575 t)) = (term482 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem8394912 {A B C P : Type'} (s : type312 A B C P) (t : type312 A B C P) : (s = (term673 A B C P t)) = (term674 A B C P s t).
Proof. exact (@lem8394911 Prop (type1185 A B C P) s t). Qed.
Lemma lem8394913 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : ((_115316 clauses c) = (term675 A B C P clauses c)) = (term676 A B C P _115316 clauses c).
Proof. exact (@lem8394912 A B C P (_115316 clauses c) (term425 A B C P clauses c)). Qed.
Lemma lem8394914 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term677 A B C P clauses c f) = (term424 A B C P f clauses c).
Proof. exact (eq_refl (term677 A B C P clauses c f)). Qed.
Lemma lem8394915 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term675 A B C P clauses c) = (term425 A B C P clauses c).
Proof. exact (fun_ext (fun f : type1185 A B C P => @lem8394914 A B C P f clauses c)). Qed.
Lemma lem8394916 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term609 A B C P _115316 clauses c) = (term609 A B C P _115316 clauses c).
Proof. exact (eq_refl (term609 A B C P _115316 clauses c)). Qed.
Lemma lem8394917 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : ((_115316 clauses c) = (term675 A B C P clauses c)) = ((_115316 clauses c) = (term425 A B C P clauses c)).
Proof. exact (MK_COMB (@lem8394916 A B C P _115316 clauses c) (@lem8394915 A B C P clauses c)). Qed.
Lemma lem8394918 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8394919 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term678 A B C P _115316 clauses c) = (term679 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8394918) (@lem8394917 A B C P _115316 clauses c)). Qed.
Lemma lem8394920 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term677 A B C P clauses c f) = (term424 A B C P f clauses c).
Proof. exact (eq_refl (term677 A B C P clauses c f)). Qed.
Lemma lem8394921 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) (f : type1185 A B C P) : (term680 A B C P _115316 clauses c f) = (term680 A B C P _115316 clauses c f).
Proof. exact (eq_refl (term680 A B C P _115316 clauses c f)). Qed.
Lemma lem8394922 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : ((_115316 clauses c f) = (term677 A B C P clauses c f)) = ((_115316 clauses c f) = (term424 A B C P f clauses c)).
Proof. exact (MK_COMB (@lem8394921 A B C P _115316 clauses c f) (@lem8394920 A B C P f clauses c)). Qed.
Lemma lem8394923 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term681 A B C P _115316 clauses c) = (term682 A B C P _115316 clauses c).
Proof. exact (fun_ext (fun f : type1185 A B C P => @lem8394922 A B C P _115316 f clauses c)). Qed.
Lemma lem8394924 {A B C P : Type'} : (@all ((prod (P -> A) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8394925 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term676 A B C P _115316 clauses c) = (term683 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8394924 A B C P) (@lem8394923 A B C P _115316 clauses c)). Qed.
Lemma lem8394926 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (((_115316 clauses c) = (term675 A B C P clauses c)) = (term676 A B C P _115316 clauses c)) = (((_115316 clauses c) = (term425 A B C P clauses c)) = (term683 A B C P _115316 clauses c)).
Proof. exact (MK_COMB (@lem8394919 A B C P _115316 clauses c) (@lem8394925 A B C P _115316 clauses c)). Qed.
Lemma lem8394927 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : ((_115316 clauses c) = (term425 A B C P clauses c)) = (term683 A B C P _115316 clauses c).
Proof. exact (EQ_MP (@lem8394926 A B C P _115316 clauses c) (@lem8394913 A B C P _115316 clauses c)). Qed.
Lemma lem8394928 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : ((_115316 clauses c f) = (term424 A B C P f clauses c)) = ((_115316 clauses c f) = (term424 A B C P f clauses c)).
Proof. exact (eq_refl ((_115316 clauses c f) = (term424 A B C P f clauses c))). Qed.
Lemma lem8394929 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term682 A B C P _115316 clauses c) = (term682 A B C P _115316 clauses c).
Proof. exact (fun_ext (fun f : type1185 A B C P => @lem8394928 A B C P _115316 f clauses c)). Qed.
Lemma lem8394930 {A B C P : Type'} : (@all ((prod (P -> A) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8394931 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term683 A B C P _115316 clauses c) = (term683 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8394930 A B C P) (@lem8394929 A B C P _115316 clauses c)). Qed.
Lemma lem8394932 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : ((_115316 clauses c) = (term425 A B C P clauses c)) = (term683 A B C P _115316 clauses c).
Proof. exact (TRANS (@lem8394927 A B C P _115316 clauses c) (@lem8394931 A B C P _115316 clauses c)). Qed.
Lemma lem8394933 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term671 A B C P _115316 clauses) = (term684 A B C P _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8394932 A B C P _115316 clauses c)). Qed.
Lemma lem8394934 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8394935 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term672 A B C P _115316 clauses) = (term685 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8394934 C) (@lem8394933 A B C P _115316 clauses)). Qed.
Lemma lem8394936 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : ((_115316 clauses) = (term606 A B C P clauses)) = (term685 A B C P _115316 clauses).
Proof. exact (TRANS (@lem8394909 A B C P _115316 clauses) (@lem8394935 A B C P _115316 clauses)). Qed.
Lemma lem8394937 {A B C P : Type'} (_115316 : type1115 A B C P) : (term662 A B C P _115316) = (term686 A B C P _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8394936 A B C P _115316 clauses)). Qed.
Lemma lem8394938 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8394939 {A B C P : Type'} (_115316 : type1115 A B C P) : (term663 A B C P _115316) = (term687 A B C P _115316).
Proof. exact (MK_COMB (@lem8394938 A B C P) (@lem8394937 A B C P _115316)). Qed.
Lemma lem8394940 {A B C P : Type'} (_115316 : type1115 A B C P) : (_115316 = (term604 A B C P)) = (term687 A B C P _115316).
Proof. exact (TRANS (@lem8394891 A B C P _115316) (@lem8394939 A B C P _115316)). Qed.
Lemma lem8394941 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8394942 {A B C P : Type'} (_115316 : type1115 A B C P) : (term641 A B C P _115316) = (term688 A B C P _115316).
Proof. exact (MK_COMB (@lem8394941) (@lem8394940 A B C P _115316)). Qed.
Lemma lem8394943 {A B C P : Type'} (_115316 : type1115 A B C P) : (term633 A B C P _115316) = (term633 A B C P _115316).
Proof. exact (eq_refl (term633 A B C P _115316)). Qed.
Lemma lem8394944 {A B C P : Type'} (_115316 : type1115 A B C P) : (term649 A B C P _115316) = (term689 A B C P _115316).
Proof. exact (MK_COMB (@lem8394942 A B C P _115316) (@lem8394943 A B C P _115316)). Qed.
Lemma lem8394945 {A B C P : Type'} : (term651 A B C P) = (term690 A B C P).
Proof. exact (fun_ext (fun _115316 : type1115 A B C P => @lem8394944 A B C P _115316)). Qed.
Lemma lem8394946 {A B C P : Type'} : (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8394947 {A B C P : Type'} : (term653 A B C P) = (term691 A B C P).
Proof. exact (MK_COMB (@lem8394946 A B C P) (@lem8394945 A B C P)). Qed.
Lemma lem8394948 {A B C P : Type'} : (term640 A B C P) = (term640 A B C P).
Proof. exact (eq_refl (term640 A B C P)). Qed.
Lemma lem8394949 {A B C P : Type'} : ((term603 A B C P) = (term653 A B C P)) = ((term603 A B C P) = (term691 A B C P)).
Proof. exact (MK_COMB (@lem8394948 A B C P) (@lem8394947 A B C P)). Qed.
Lemma lem8394950 {A B C P : Type'} : (term603 A B C P) = (term691 A B C P).
Proof. exact (EQ_MP (@lem8394949 A B C P) (@lem8394873 A B C P)). Qed.
Lemma lem8394951 {B C P : Type'} (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : _115317 = (term520 B C P).
Proof. exact (h1). Qed.
Lemma lem8394952 {B C P : Type'} (clauses : type1636 B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8394953 {B C P : Type'} (clauses : type1636 B C P) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (_115317 clauses) = (term521 B C P clauses).
Proof. exact (MK_COMB (@lem8394951 B C P _115317 h1) (@lem8394952 B C P clauses)). Qed.
Lemma lem8394954 {B C P : Type'} (clauses : type1636 B C P) : (term521 B C P clauses) = (term522 B C P clauses).
Proof. exact (eq_refl (term521 B C P clauses)). Qed.
Lemma lem8394955 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term523 B C P _115317 clauses) = (term523 B C P _115317 clauses).
Proof. exact (eq_refl (term523 B C P _115317 clauses)). Qed.
Lemma lem8394956 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : ((_115317 clauses) = (term521 B C P clauses)) = ((_115317 clauses) = (term522 B C P clauses)).
Proof. exact (MK_COMB (@lem8394955 B C P _115317 clauses) (@lem8394954 B C P clauses)). Qed.
Lemma lem8394957 {B C P : Type'} (clauses : type1636 B C P) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (_115317 clauses) = (term522 B C P clauses).
Proof. exact (EQ_MP (@lem8394956 B C P _115317 clauses) (@lem8394953 B C P clauses _115317 h1)). Qed.
Lemma lem8394958 {C : Type'} (c : C) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8394959 {B C P : Type'} (clauses : type1636 B C P) (c : C) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (_115317 clauses c) = (term524 B C P clauses c).
Proof. exact (MK_COMB (@lem8394957 B C P clauses _115317 h1) (@lem8394958 C c)). Qed.
Lemma lem8394960 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term524 B C P clauses c) = (term366 B C P clauses c).
Proof. exact (eq_refl (term524 B C P clauses c)). Qed.
Lemma lem8394961 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term525 B C P _115317 clauses c) = (term525 B C P _115317 clauses c).
Proof. exact (eq_refl (term525 B C P _115317 clauses c)). Qed.
Lemma lem8394962 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : ((_115317 clauses c) = (term524 B C P clauses c)) = ((_115317 clauses c) = (term366 B C P clauses c)).
Proof. exact (MK_COMB (@lem8394961 B C P _115317 clauses c) (@lem8394960 B C P clauses c)). Qed.
Lemma lem8394963 {B C P : Type'} (clauses : type1636 B C P) (c : C) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (_115317 clauses c) = (term366 B C P clauses c).
Proof. exact (EQ_MP (@lem8394962 B C P _115317 clauses c) (@lem8394959 B C P clauses c _115317 h1)). Qed.
Lemma lem8394965 {A B C P : Type'} (clauses : type1629 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8394984 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) (x : type558 A B P) : ((term264 A B C P clauses c s x) = (t c x)) = ((term264 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term264 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8394985 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term265 A B C P clauses s t c) = (term265 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : type558 A B P => @lem8394984 A B C P clauses s t c x)). Qed.
Lemma lem8394986 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8394987 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term266 A B C P clauses s t c) = (term266 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8394986 A B P) (@lem8394985 A B C P clauses s t c)). Qed.
Lemma lem8394996 {A B C P : Type'} (f : type1166 A B C P) (s : type115 A B P) (t : type1490 A B C P) : (term267 A B C P f s t) = (term267 A B C P f s t).
Proof. exact (eq_refl (term267 A B C P f s t)). Qed.
Lemma lem8394997 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term268 A B C P f clauses s t c) = (term268 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8394996 A B C P f s t) (@lem8394987 A B C P clauses s t c)). Qed.
Lemma lem8394998 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term269 A B C P f clauses s c) = (term269 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8394997 A B C P f clauses s t c)). Qed.
Lemma lem8394999 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8395000 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term270 A B C P f clauses s c) = (term270 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8394999 A B C P) (@lem8394998 A B C P f clauses s c)). Qed.
Lemma lem8395001 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term271 A B C P f clauses c) = (term271 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8395000 A B C P f clauses s c)). Qed.
Lemma lem8395002 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8395003 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term272 A B C P f clauses c) = (term272 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8395002 A B P) (@lem8395001 A B C P f clauses c)). Qed.
Lemma lem8395004 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term273 A B C P clauses c) = (term273 A B C P clauses c).
Proof. exact (fun_ext (fun f : type1166 A B C P => @lem8395003 A B C P f clauses c)). Qed.
Lemma lem8395005 {A B C P : Type'} : (@GABS ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)) = (@GABS ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop))). Qed.
Lemma lem8395006 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term274 A B C P clauses c) = (term274 A B C P clauses c).
Proof. exact (MK_COMB (@lem8395005 A B C P) (@lem8395004 A B C P clauses c)). Qed.
Lemma lem8395007 {A B C P : Type'} : (@List.Forall (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) = (@List.Forall (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))).
Proof. exact (eq_refl (@List.Forall (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))). Qed.
Lemma lem8395008 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term275 A B C P clauses c) = (term275 A B C P clauses c).
Proof. exact (MK_COMB (@lem8395007 A B C P) (@lem8395006 A B C P clauses c)). Qed.
Lemma lem8395009 {A B C P : Type'} (c : C) (clauses : type1629 A B C P) : (term276 A B C P c clauses) = (term276 A B C P c clauses).
Proof. exact (MK_COMB (@lem8395008 A B C P clauses c) (@lem8394965 A B C P clauses)). Qed.
Lemma lem8395058 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) (y : type558 A B P) : (term277 A B C P clauses s s' t x t' c y) = (term277 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term277 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8395059 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term278 A B C P clauses s s' t x t' c) = (term278 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : type558 A B P => @lem8395058 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8395060 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8395061 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term279 A B C P clauses s s' t x t' c) = (term279 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8395060 A B P) (@lem8395059 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8395062 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term280 A B C P clauses s s' t t' c) = (term280 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : type558 A B P => @lem8395061 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8395063 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8395064 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term281 A B C P clauses s s' t t' c) = (term281 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8395063 A B P) (@lem8395062 A B C P clauses s s' t t' c)). Qed.
Lemma lem8395065 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term282 A B C P clauses s s' t c) = (term282 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1490 A B C P => @lem8395064 A B C P clauses s s' t t' c)). Qed.
Lemma lem8395066 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8395067 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term283 A B C P clauses s s' t c) = (term283 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8395066 A B C P) (@lem8395065 A B C P clauses s s' t c)). Qed.
Lemma lem8395068 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term284 A B C P clauses s t c) = (term284 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type115 A B P => @lem8395067 A B C P clauses s s' t c)). Qed.
Lemma lem8395069 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8395070 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term285 A B C P clauses s t c) = (term285 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8395069 A B P) (@lem8395068 A B C P clauses s t c)). Qed.
Lemma lem8395071 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term286 A B C P clauses s c) = (term286 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8395070 A B C P clauses s t c)). Qed.
Lemma lem8395072 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8395073 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term287 A B C P clauses s c) = (term287 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8395072 A B C P) (@lem8395071 A B C P clauses s c)). Qed.
Lemma lem8395074 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term288 A B C P clauses c) = (term288 A B C P clauses c).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8395073 A B C P clauses s c)). Qed.
Lemma lem8395075 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8395076 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term289 A B C P clauses c) = (term289 A B C P clauses c).
Proof. exact (MK_COMB (@lem8395075 A B P) (@lem8395074 A B C P clauses c)). Qed.
Lemma lem8395077 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8395078 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term290 A B C P clauses c) = (term290 A B C P clauses c).
Proof. exact (MK_COMB (@lem8395077) (@lem8395076 A B C P clauses c)). Qed.
Lemma lem8395079 {A B C P : Type'} (c : C) (clauses : type1629 A B C P) : (term291 A B C P c clauses) = (term291 A B C P c clauses).
Proof. exact (MK_COMB (@lem8395078 A B C P clauses c) (@lem8395009 A B C P c clauses)). Qed.
Lemma lem8395080 {A B C P : Type'} (clauses : type1629 A B C P) : (term292 A B C P clauses) = (term292 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8395079 A B C P c clauses)). Qed.
Lemma lem8395081 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8395082 {A B C P : Type'} (clauses : type1629 A B C P) : (term293 A B C P clauses) = (term293 A B C P clauses).
Proof. exact (MK_COMB (@lem8395081 C) (@lem8395080 A B C P clauses)). Qed.
Lemma lem8395083 {A B C P : Type'} : (term294 A B C P) = (term294 A B C P).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8395082 A B C P clauses)). Qed.
Lemma lem8395084 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8395085 {A B C P : Type'} : (term219 A B C P) = (term219 A B C P).
Proof. exact (MK_COMB (@lem8395084 A B C P) (@lem8395083 A B C P)). Qed.
Lemma lem8395086 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8395087 {A B C P : Type'} : (term225 A B C P) = (term225 A B C P).
Proof. exact (MK_COMB (@lem8395086) (@lem8395085 A B C P)). Qed.
Lemma lem8395088 {A B C P : Type'} (clauses : type1631 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8395107 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) (x : P -> A) : ((term295 A B C P clauses c s x) = (t c x)) = ((term295 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term295 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8395108 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term296 A B C P clauses s t c) = (term296 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : P -> A => @lem8395107 A B C P clauses s t c x)). Qed.
Lemma lem8395109 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8395110 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term297 A B C P clauses s t c) = (term297 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8395109 A P) (@lem8395108 A B C P clauses s t c)). Qed.
Lemma lem8395119 {A B C P : Type'} (f : type1168 A B C P) (s : type802 A P) (t : type1512 A B C P) : (term298 A B C P f s t) = (term298 A B C P f s t).
Proof. exact (eq_refl (term298 A B C P f s t)). Qed.
Lemma lem8395120 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term299 A B C P f clauses s t c) = (term299 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8395119 A B C P f s t) (@lem8395110 A B C P clauses s t c)). Qed.
Lemma lem8395121 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term300 A B C P f clauses s c) = (term300 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8395120 A B C P f clauses s t c)). Qed.
Lemma lem8395122 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8395123 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term301 A B C P f clauses s c) = (term301 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8395122 A B C P) (@lem8395121 A B C P f clauses s c)). Qed.
Lemma lem8395124 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term302 A B C P f clauses c) = (term302 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type802 A P => @lem8395123 A B C P f clauses s c)). Qed.
Lemma lem8395125 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8395126 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term303 A B C P f clauses c) = (term303 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8395125 A P) (@lem8395124 A B C P f clauses c)). Qed.
Lemma lem8395127 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term304 A B C P clauses c) = (term304 A B C P clauses c).
Proof. exact (fun_ext (fun f : type1168 A B C P => @lem8395126 A B C P f clauses c)). Qed.
Lemma lem8395128 {A B C P : Type'} : (@GABS ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)) = (@GABS ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop))). Qed.
Lemma lem8395129 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term305 A B C P clauses c) = (term305 A B C P clauses c).
Proof. exact (MK_COMB (@lem8395128 A B C P) (@lem8395127 A B C P clauses c)). Qed.
Lemma lem8395130 {A B C P : Type'} : (@List.Forall (prod ((P -> A) -> A) (C -> (P -> A) -> B))) = (@List.Forall (prod ((P -> A) -> A) (C -> (P -> A) -> B))).
Proof. exact (eq_refl (@List.Forall (prod ((P -> A) -> A) (C -> (P -> A) -> B)))). Qed.
Lemma lem8395131 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term306 A B C P clauses c) = (term306 A B C P clauses c).
Proof. exact (MK_COMB (@lem8395130 A B C P) (@lem8395129 A B C P clauses c)). Qed.
Lemma lem8395132 {A B C P : Type'} (c : C) (clauses : type1631 A B C P) : (term307 A B C P c clauses) = (term307 A B C P c clauses).
Proof. exact (MK_COMB (@lem8395131 A B C P clauses c) (@lem8395088 A B C P clauses)). Qed.
Lemma lem8395181 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) (y : P -> A) : (term308 A B C P clauses s s' t x t' c y) = (term308 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term308 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8395182 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term309 A B C P clauses s s' t x t' c) = (term309 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P -> A => @lem8395181 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8395183 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8395184 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term310 A B C P clauses s s' t x t' c) = (term310 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8395183 A P) (@lem8395182 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8395185 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term311 A B C P clauses s s' t t' c) = (term311 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P -> A => @lem8395184 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8395186 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8395187 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term312 A B C P clauses s s' t t' c) = (term312 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8395186 A P) (@lem8395185 A B C P clauses s s' t t' c)). Qed.
Lemma lem8395188 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term313 A B C P clauses s s' t c) = (term313 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1512 A B C P => @lem8395187 A B C P clauses s s' t t' c)). Qed.
Lemma lem8395189 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8395190 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term314 A B C P clauses s s' t c) = (term314 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8395189 A B C P) (@lem8395188 A B C P clauses s s' t c)). Qed.
Lemma lem8395191 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term315 A B C P clauses s t c) = (term315 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type802 A P => @lem8395190 A B C P clauses s s' t c)). Qed.
Lemma lem8395192 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8395193 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term316 A B C P clauses s t c) = (term316 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8395192 A P) (@lem8395191 A B C P clauses s t c)). Qed.
Lemma lem8395194 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term317 A B C P clauses s c) = (term317 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8395193 A B C P clauses s t c)). Qed.
Lemma lem8395195 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8395196 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term318 A B C P clauses s c) = (term318 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8395195 A B C P) (@lem8395194 A B C P clauses s c)). Qed.
Lemma lem8395197 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term319 A B C P clauses c) = (term319 A B C P clauses c).
Proof. exact (fun_ext (fun s : type802 A P => @lem8395196 A B C P clauses s c)). Qed.
Lemma lem8395198 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8395199 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term320 A B C P clauses c) = (term320 A B C P clauses c).
Proof. exact (MK_COMB (@lem8395198 A P) (@lem8395197 A B C P clauses c)). Qed.
Lemma lem8395200 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8395201 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term321 A B C P clauses c) = (term321 A B C P clauses c).
Proof. exact (MK_COMB (@lem8395200) (@lem8395199 A B C P clauses c)). Qed.
Lemma lem8395202 {A B C P : Type'} (c : C) (clauses : type1631 A B C P) : (term322 A B C P c clauses) = (term322 A B C P c clauses).
Proof. exact (MK_COMB (@lem8395201 A B C P clauses c) (@lem8395132 A B C P c clauses)). Qed.
Lemma lem8395203 {A B C P : Type'} (clauses : type1631 A B C P) : (term323 A B C P clauses) = (term323 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8395202 A B C P c clauses)). Qed.
Lemma lem8395204 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8395205 {A B C P : Type'} (clauses : type1631 A B C P) : (term324 A B C P clauses) = (term324 A B C P clauses).
Proof. exact (MK_COMB (@lem8395204 C) (@lem8395203 A B C P clauses)). Qed.
Lemma lem8395206 {A B C P : Type'} : (term325 A B C P) = (term325 A B C P).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8395205 A B C P clauses)). Qed.
Lemma lem8395207 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8395208 {A B C P : Type'} : (term218 A B C P) = (term218 A B C P).
Proof. exact (MK_COMB (@lem8395207 A B C P) (@lem8395206 A B C P)). Qed.
Lemma lem8395209 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8395210 {A B C P : Type'} : (term226 A B C P) = (term226 A B C P).
Proof. exact (MK_COMB (@lem8395209) (@lem8395208 A B C P)). Qed.
Lemma lem8395211 {A B C P : Type'} : (term228 A B C P) = (term228 A B C P).
Proof. exact (MK_COMB (@lem8395210 A B C P) (@lem8395087 A B C P)). Qed.
Lemma lem8395212 {A B C P : Type'} (clauses : type1630 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8395231 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) (x : A -> B) : ((term326 A B C P clauses c s x) = (t c x)) = ((term326 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term326 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8395232 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term327 A B C P clauses s t c) = (term327 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : A -> B => @lem8395231 A B C P clauses s t c x)). Qed.
Lemma lem8395233 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8395234 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term328 A B C P clauses s t c) = (term328 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8395233 A B) (@lem8395232 A B C P clauses s t c)). Qed.
Lemma lem8395243 {A B C P : Type'} (f : type1167 A B C P) (s : type558 A B P) (t : type1506 A B C) : (term329 A B C P f s t) = (term329 A B C P f s t).
Proof. exact (eq_refl (term329 A B C P f s t)). Qed.
Lemma lem8395244 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term330 A B C P f clauses s t c) = (term330 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8395243 A B C P f s t) (@lem8395234 A B C P clauses s t c)). Qed.
Lemma lem8395245 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term331 A B C P f clauses s c) = (term331 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8395244 A B C P f clauses s t c)). Qed.
Lemma lem8395246 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8395247 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term332 A B C P f clauses s c) = (term332 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8395246 A B C) (@lem8395245 A B C P f clauses s c)). Qed.
Lemma lem8395248 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term333 A B C P f clauses c) = (term333 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8395247 A B C P f clauses s c)). Qed.
Lemma lem8395249 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8395250 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term334 A B C P f clauses c) = (term334 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8395249 A B P) (@lem8395248 A B C P f clauses c)). Qed.
Lemma lem8395251 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term335 A B C P clauses c) = (term335 A B C P clauses c).
Proof. exact (fun_ext (fun f : type1167 A B C P => @lem8395250 A B C P f clauses c)). Qed.
Lemma lem8395252 {A B C P : Type'} : (@GABS ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)) = (@GABS ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop))). Qed.
Lemma lem8395253 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term336 A B C P clauses c) = (term336 A B C P clauses c).
Proof. exact (MK_COMB (@lem8395252 A B C P) (@lem8395251 A B C P clauses c)). Qed.
Lemma lem8395254 {A B C P : Type'} : (@List.Forall (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) = (@List.Forall (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))).
Proof. exact (eq_refl (@List.Forall (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))). Qed.
Lemma lem8395255 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term337 A B C P clauses c) = (term337 A B C P clauses c).
Proof. exact (MK_COMB (@lem8395254 A B C P) (@lem8395253 A B C P clauses c)). Qed.
Lemma lem8395256 {A B C P : Type'} (c : C) (clauses : type1630 A B C P) : (term338 A B C P c clauses) = (term338 A B C P c clauses).
Proof. exact (MK_COMB (@lem8395255 A B C P clauses c) (@lem8395212 A B C P clauses)). Qed.
Lemma lem8395305 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) (y : A -> B) : (term339 A B C P clauses s s' t x t' c y) = (term339 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term339 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8395306 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term340 A B C P clauses s s' t x t' c) = (term340 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : A -> B => @lem8395305 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8395307 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8395308 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term341 A B C P clauses s s' t x t' c) = (term341 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8395307 A B) (@lem8395306 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8395309 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term342 A B C P clauses s s' t t' c) = (term342 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : A -> B => @lem8395308 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8395310 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8395311 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term343 A B C P clauses s s' t t' c) = (term343 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8395310 A B) (@lem8395309 A B C P clauses s s' t t' c)). Qed.
Lemma lem8395312 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term344 A B C P clauses s s' t c) = (term344 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1506 A B C => @lem8395311 A B C P clauses s s' t t' c)). Qed.
Lemma lem8395313 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8395314 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term345 A B C P clauses s s' t c) = (term345 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8395313 A B C) (@lem8395312 A B C P clauses s s' t c)). Qed.
Lemma lem8395315 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term346 A B C P clauses s t c) = (term346 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type558 A B P => @lem8395314 A B C P clauses s s' t c)). Qed.
Lemma lem8395316 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8395317 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term347 A B C P clauses s t c) = (term347 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8395316 A B P) (@lem8395315 A B C P clauses s t c)). Qed.
Lemma lem8395318 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term348 A B C P clauses s c) = (term348 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8395317 A B C P clauses s t c)). Qed.
Lemma lem8395319 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8395320 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term349 A B C P clauses s c) = (term349 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8395319 A B C) (@lem8395318 A B C P clauses s c)). Qed.
Lemma lem8395321 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term350 A B C P clauses c) = (term350 A B C P clauses c).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8395320 A B C P clauses s c)). Qed.
Lemma lem8395322 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8395323 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term351 A B C P clauses c) = (term351 A B C P clauses c).
Proof. exact (MK_COMB (@lem8395322 A B P) (@lem8395321 A B C P clauses c)). Qed.
Lemma lem8395324 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8395325 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term352 A B C P clauses c) = (term352 A B C P clauses c).
Proof. exact (MK_COMB (@lem8395324) (@lem8395323 A B C P clauses c)). Qed.
Lemma lem8395326 {A B C P : Type'} (c : C) (clauses : type1630 A B C P) : (term353 A B C P c clauses) = (term353 A B C P c clauses).
Proof. exact (MK_COMB (@lem8395325 A B C P clauses c) (@lem8395256 A B C P c clauses)). Qed.
Lemma lem8395327 {A B C P : Type'} (clauses : type1630 A B C P) : (term354 A B C P clauses) = (term354 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8395326 A B C P c clauses)). Qed.
Lemma lem8395328 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8395329 {A B C P : Type'} (clauses : type1630 A B C P) : (term355 A B C P clauses) = (term355 A B C P clauses).
Proof. exact (MK_COMB (@lem8395328 C) (@lem8395327 A B C P clauses)). Qed.
Lemma lem8395330 {A B C P : Type'} : (term356 A B C P) = (term356 A B C P).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8395329 A B C P clauses)). Qed.
Lemma lem8395331 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8395332 {A B C P : Type'} : (term217 A B C P) = (term217 A B C P).
Proof. exact (MK_COMB (@lem8395331 A B C P) (@lem8395330 A B C P)). Qed.
Lemma lem8395333 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8395334 {A B C P : Type'} : (term229 A B C P) = (term229 A B C P).
Proof. exact (MK_COMB (@lem8395333) (@lem8395332 A B C P)). Qed.
Lemma lem8395335 {A B C P : Type'} : (term231 A B C P) = (term231 A B C P).
Proof. exact (MK_COMB (@lem8395334 A B C P) (@lem8395211 A B C P)). Qed.
Lemma lem8395336 {B C P : Type'} (clauses : type1636 B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8395338 {B C P : Type'} (clauses : type1636 B C P) (c : C) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term366 B C P clauses c) = (_115317 clauses c).
Proof. exact (SYM (@lem8394963 B C P clauses c _115317 h1)). Qed.
Lemma lem8395339 {B C P : Type'} (clauses : type1636 B C P) (c : C) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term366 B C P clauses c) = (_115317 clauses c).
Proof. exact (@lem8395338 B C P clauses c _115317 h1). Qed.
Lemma lem8395340 {B C P : Type'} : (@GABS ((prod (P -> B) (C -> P -> B)) -> Prop)) = (@GABS ((prod (P -> B) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod (P -> B) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8395341 {B C P : Type'} (clauses : type1636 B C P) (c : C) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term367 B C P clauses c) = (term526 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8395340 B C P) (@lem8395339 B C P clauses c _115317 h1)). Qed.
Lemma lem8395342 {B C P : Type'} : (@List.Forall (prod (P -> B) (C -> P -> B))) = (@List.Forall (prod (P -> B) (C -> P -> B))).
Proof. exact (eq_refl (@List.Forall (prod (P -> B) (C -> P -> B)))). Qed.
Lemma lem8395343 {B C P : Type'} (clauses : type1636 B C P) (c : C) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term368 B C P clauses c) = (term527 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8395342 B C P) (@lem8395341 B C P clauses c _115317 h1)). Qed.
Lemma lem8395344 {B C P : Type'} (c : C) (clauses : type1636 B C P) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term369 B C P c clauses) = (term528 B C P _115317 c clauses).
Proof. exact (MK_COMB (@lem8395343 B C P clauses c _115317 h1) (@lem8395336 B C P clauses)). Qed.
Lemma lem8395393 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term370 B C P clauses s s' t x t' c y) = (term370 B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term370 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8395394 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term371 B C P clauses s s' t x t' c) = (term371 B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8395393 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8395395 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8395396 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term372 B C P clauses s s' t x t' c) = (term372 B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8395395 P) (@lem8395394 B C P clauses s s' t x t' c)). Qed.
Lemma lem8395397 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term373 B C P clauses s s' t t' c) = (term373 B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8395396 B C P clauses s s' t x t' c)). Qed.
Lemma lem8395398 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8395399 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term374 B C P clauses s s' t t' c) = (term374 B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8395398 P) (@lem8395397 B C P clauses s s' t t' c)). Qed.
Lemma lem8395400 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term375 B C P clauses s s' t c) = (term375 B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8395399 B C P clauses s s' t t' c)). Qed.
Lemma lem8395401 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8395402 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term376 B C P clauses s s' t c) = (term376 B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8395401 B C P) (@lem8395400 B C P clauses s s' t c)). Qed.
Lemma lem8395403 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term377 B C P clauses s t c) = (term377 B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> B => @lem8395402 B C P clauses s s' t c)). Qed.
Lemma lem8395404 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8395405 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term378 B C P clauses s t c) = (term378 B C P clauses s t c).
Proof. exact (MK_COMB (@lem8395404 B P) (@lem8395403 B C P clauses s t c)). Qed.
Lemma lem8395406 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term379 B C P clauses s c) = (term379 B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8395405 B C P clauses s t c)). Qed.
Lemma lem8395407 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8395408 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term380 B C P clauses s c) = (term380 B C P clauses s c).
Proof. exact (MK_COMB (@lem8395407 B C P) (@lem8395406 B C P clauses s c)). Qed.
Lemma lem8395409 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term381 B C P clauses c) = (term381 B C P clauses c).
Proof. exact (fun_ext (fun s : P -> B => @lem8395408 B C P clauses s c)). Qed.
Lemma lem8395410 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8395411 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term382 B C P clauses c) = (term382 B C P clauses c).
Proof. exact (MK_COMB (@lem8395410 B P) (@lem8395409 B C P clauses c)). Qed.
Lemma lem8395412 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8395413 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term383 B C P clauses c) = (term383 B C P clauses c).
Proof. exact (MK_COMB (@lem8395412) (@lem8395411 B C P clauses c)). Qed.
Lemma lem8395414 {B C P : Type'} (c : C) (clauses : type1636 B C P) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term384 B C P c clauses) = (term529 B C P _115317 c clauses).
Proof. exact (MK_COMB (@lem8395413 B C P clauses c) (@lem8395344 B C P c clauses _115317 h1)). Qed.
Lemma lem8395415 {B C P : Type'} (clauses : type1636 B C P) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term385 B C P clauses) = (term530 B C P _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8395414 B C P c clauses _115317 h1)). Qed.
Lemma lem8395416 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8395417 {B C P : Type'} (clauses : type1636 B C P) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term386 B C P clauses) = (term531 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8395416 C) (@lem8395415 B C P clauses _115317 h1)). Qed.
Lemma lem8395418 {B C P : Type'} (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term387 B C P) = (term532 B C P _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8395417 B C P clauses _115317 h1)). Qed.
Lemma lem8395419 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8395420 {B C P : Type'} (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term216 B C P) = (term533 B C P _115317).
Proof. exact (MK_COMB (@lem8395419 B C P) (@lem8395418 B C P _115317 h1)). Qed.
Lemma lem8395421 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8395422 {B C P : Type'} (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term232 B C P) = (term534 B C P _115317).
Proof. exact (MK_COMB (@lem8395421) (@lem8395420 B C P _115317 h1)). Qed.
Lemma lem8395423 {A B C P : Type'} (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term234 A B C P) = (term692 A B C P _115317).
Proof. exact (MK_COMB (@lem8395422 B C P _115317 h1) (@lem8395335 A B C P)). Qed.
Lemma lem8395434 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 c clauses) = (term390 A B P _115314 c clauses).
Proof. exact (eq_refl (term390 A B P _115314 c clauses)). Qed.
Lemma lem8395483 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) (y : P) : (term391 A B P clauses s s' t x t' c y) = (term391 A B P clauses s s' t x t' c y).
Proof. exact (eq_refl (term391 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8395484 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term392 A B P clauses s s' t x t' c) = (term392 A B P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8395483 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8395485 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8395486 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term393 A B P clauses s s' t x t' c) = (term393 A B P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8395485 P) (@lem8395484 A B P clauses s s' t x t' c)). Qed.
Lemma lem8395487 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term394 A B P clauses s s' t t' c) = (term394 A B P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8395486 A B P clauses s s' t x t' c)). Qed.
Lemma lem8395488 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8395489 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term395 A B P clauses s s' t t' c) = (term395 A B P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8395488 P) (@lem8395487 A B P clauses s s' t t' c)). Qed.
Lemma lem8395490 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term396 A B P clauses s s' t c) = (term396 A B P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8395489 A B P clauses s s' t t' c)). Qed.
Lemma lem8395491 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8395492 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term397 A B P clauses s s' t c) = (term397 A B P clauses s s' t c).
Proof. exact (MK_COMB (@lem8395491 A B P) (@lem8395490 A B P clauses s s' t c)). Qed.
Lemma lem8395493 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term398 A B P clauses s t c) = (term398 A B P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8395492 A B P clauses s s' t c)). Qed.
Lemma lem8395494 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8395495 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term399 A B P clauses s t c) = (term399 A B P clauses s t c).
Proof. exact (MK_COMB (@lem8395494 A P) (@lem8395493 A B P clauses s t c)). Qed.
Lemma lem8395496 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term400 A B P clauses s c) = (term400 A B P clauses s c).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8395495 A B P clauses s t c)). Qed.
Lemma lem8395497 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8395498 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term401 A B P clauses s c) = (term401 A B P clauses s c).
Proof. exact (MK_COMB (@lem8395497 A B P) (@lem8395496 A B P clauses s c)). Qed.
Lemma lem8395499 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term402 A B P clauses c) = (term402 A B P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8395498 A B P clauses s c)). Qed.
Lemma lem8395500 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8395501 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term403 A B P clauses c) = (term403 A B P clauses c).
Proof. exact (MK_COMB (@lem8395500 A P) (@lem8395499 A B P clauses c)). Qed.
Lemma lem8395502 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8395503 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term404 A B P clauses c) = (term404 A B P clauses c).
Proof. exact (MK_COMB (@lem8395502) (@lem8395501 A B P clauses c)). Qed.
Lemma lem8395504 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term406 A B P _115314 c clauses) = (term406 A B P _115314 c clauses).
Proof. exact (MK_COMB (@lem8395503 A B P clauses c) (@lem8395434 A B P _115314 c clauses)). Qed.
Lemma lem8395505 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term408 A B P _115314 clauses) = (term408 A B P _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8395504 A B P _115314 c clauses)). Qed.
Lemma lem8395506 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8395507 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term410 A B P _115314 clauses) = (term410 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8395506 A B) (@lem8395505 A B P _115314 clauses)). Qed.
Lemma lem8395508 {A B P : Type'} (_115314 : type1080 A B P) : (term412 A B P _115314) = (term412 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8395507 A B P _115314 clauses)). Qed.
Lemma lem8395509 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8395510 {A B P : Type'} (_115314 : type1080 A B P) : (term413 A B P _115314) = (term413 A B P _115314).
Proof. exact (MK_COMB (@lem8395509 A B P) (@lem8395508 A B P _115314)). Qed.
Lemma lem8395511 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8395512 {A B P : Type'} (_115314 : type1080 A B P) : (term414 A B P _115314) = (term414 A B P _115314).
Proof. exact (MK_COMB (@lem8395511) (@lem8395510 A B P _115314)). Qed.
Lemma lem8395513 {A B C P : Type'} (_115314 : type1080 A B P) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term415 A B C P _115314) = (term693 A B C P _115314 _115317).
Proof. exact (MK_COMB (@lem8395512 A B P _115314) (@lem8395423 A B C P _115317 h1)). Qed.
Lemma lem8395524 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term612 A B C P _115316 c clauses) = (term612 A B C P _115316 c clauses).
Proof. exact (eq_refl (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8395573 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term429 A B C P clauses s s' t x t' c y) = (term429 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term429 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8395574 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term430 A B C P clauses s s' t x t' c) = (term430 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8395573 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8395575 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8395576 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term431 A B C P clauses s s' t x t' c) = (term431 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8395575 P) (@lem8395574 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8395577 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term432 A B C P clauses s s' t t' c) = (term432 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8395576 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8395578 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8395579 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term433 A B C P clauses s s' t t' c) = (term433 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8395578 P) (@lem8395577 A B C P clauses s s' t t' c)). Qed.
Lemma lem8395580 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term434 A B C P clauses s s' t c) = (term434 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8395579 A B C P clauses s s' t t' c)). Qed.
Lemma lem8395581 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8395582 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term435 A B C P clauses s s' t c) = (term435 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8395581 B C P) (@lem8395580 A B C P clauses s s' t c)). Qed.
Lemma lem8395583 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term436 A B C P clauses s t c) = (term436 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8395582 A B C P clauses s s' t c)). Qed.
Lemma lem8395584 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8395585 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term437 A B C P clauses s t c) = (term437 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8395584 A P) (@lem8395583 A B C P clauses s t c)). Qed.
Lemma lem8395586 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term438 A B C P clauses s c) = (term438 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8395585 A B C P clauses s t c)). Qed.
Lemma lem8395587 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8395588 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term439 A B C P clauses s c) = (term439 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8395587 B C P) (@lem8395586 A B C P clauses s c)). Qed.
Lemma lem8395589 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term440 A B C P clauses c) = (term440 A B C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8395588 A B C P clauses s c)). Qed.
Lemma lem8395590 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8395591 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term441 A B C P clauses c) = (term441 A B C P clauses c).
Proof. exact (MK_COMB (@lem8395590 A P) (@lem8395589 A B C P clauses c)). Qed.
Lemma lem8395592 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8395593 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term442 A B C P clauses c) = (term442 A B C P clauses c).
Proof. exact (MK_COMB (@lem8395592) (@lem8395591 A B C P clauses c)). Qed.
Lemma lem8395594 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term613 A B C P _115316 c clauses) = (term613 A B C P _115316 c clauses).
Proof. exact (MK_COMB (@lem8395593 A B C P clauses c) (@lem8395524 A B C P _115316 c clauses)). Qed.
Lemma lem8395595 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term614 A B C P _115316 clauses) = (term614 A B C P _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8395594 A B C P _115316 c clauses)). Qed.
Lemma lem8395596 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8395597 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term615 A B C P _115316 clauses) = (term615 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8395596 C) (@lem8395595 A B C P _115316 clauses)). Qed.
Lemma lem8395598 {A B C P : Type'} (_115316 : type1115 A B C P) : (term616 A B C P _115316) = (term616 A B C P _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8395597 A B C P _115316 clauses)). Qed.
Lemma lem8395599 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8395600 {A B C P : Type'} (_115316 : type1115 A B C P) : (term617 A B C P _115316) = (term617 A B C P _115316).
Proof. exact (MK_COMB (@lem8395599 A B C P) (@lem8395598 A B C P _115316)). Qed.
Lemma lem8395601 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8395602 {A B C P : Type'} (_115316 : type1115 A B C P) : (term618 A B C P _115316) = (term618 A B C P _115316).
Proof. exact (MK_COMB (@lem8395601) (@lem8395600 A B C P _115316)). Qed.
Lemma lem8395603 {A B C P : Type'} (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term619 A B C P _115316 _115314) = (term694 A B C P _115316 _115314 _115317).
Proof. exact (MK_COMB (@lem8395602 A B C P _115316) (@lem8395513 A B C P _115314 _115317 h1)). Qed.
Lemma lem8395614 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term528 A C P _115315 c clauses) = (term528 A C P _115315 c clauses).
Proof. exact (eq_refl (term528 A C P _115315 c clauses)). Qed.
Lemma lem8395663 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) (y : P) : (term370 A C P clauses s s' t x t' c y) = (term370 A C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term370 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8395664 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term371 A C P clauses s s' t x t' c) = (term371 A C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8395663 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8395665 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8395666 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term372 A C P clauses s s' t x t' c) = (term372 A C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8395665 P) (@lem8395664 A C P clauses s s' t x t' c)). Qed.
Lemma lem8395667 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term373 A C P clauses s s' t t' c) = (term373 A C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8395666 A C P clauses s s' t x t' c)). Qed.
Lemma lem8395668 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8395669 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term374 A C P clauses s s' t t' c) = (term374 A C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8395668 P) (@lem8395667 A C P clauses s s' t t' c)). Qed.
Lemma lem8395670 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term375 A C P clauses s s' t c) = (term375 A C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 A C P => @lem8395669 A C P clauses s s' t t' c)). Qed.
Lemma lem8395671 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8395672 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term376 A C P clauses s s' t c) = (term376 A C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8395671 A C P) (@lem8395670 A C P clauses s s' t c)). Qed.
Lemma lem8395673 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term377 A C P clauses s t c) = (term377 A C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8395672 A C P clauses s s' t c)). Qed.
Lemma lem8395674 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8395675 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term378 A C P clauses s t c) = (term378 A C P clauses s t c).
Proof. exact (MK_COMB (@lem8395674 A P) (@lem8395673 A C P clauses s t c)). Qed.
Lemma lem8395676 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term379 A C P clauses s c) = (term379 A C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8395675 A C P clauses s t c)). Qed.
Lemma lem8395677 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8395678 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term380 A C P clauses s c) = (term380 A C P clauses s c).
Proof. exact (MK_COMB (@lem8395677 A C P) (@lem8395676 A C P clauses s c)). Qed.
Lemma lem8395679 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term381 A C P clauses c) = (term381 A C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8395678 A C P clauses s c)). Qed.
Lemma lem8395680 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8395681 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term382 A C P clauses c) = (term382 A C P clauses c).
Proof. exact (MK_COMB (@lem8395680 A P) (@lem8395679 A C P clauses c)). Qed.
Lemma lem8395682 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8395683 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term383 A C P clauses c) = (term383 A C P clauses c).
Proof. exact (MK_COMB (@lem8395682) (@lem8395681 A C P clauses c)). Qed.
Lemma lem8395684 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term529 A C P _115315 c clauses) = (term529 A C P _115315 c clauses).
Proof. exact (MK_COMB (@lem8395683 A C P clauses c) (@lem8395614 A C P _115315 c clauses)). Qed.
Lemma lem8395685 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term530 A C P _115315 clauses) = (term530 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8395684 A C P _115315 c clauses)). Qed.
Lemma lem8395686 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8395687 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term531 A C P _115315 clauses) = (term531 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8395686 C) (@lem8395685 A C P _115315 clauses)). Qed.
Lemma lem8395688 {A C P : Type'} (_115315 : type1092 A C P) : (term532 A C P _115315) = (term532 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8395687 A C P _115315 clauses)). Qed.
Lemma lem8395689 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8395690 {A C P : Type'} (_115315 : type1092 A C P) : (term533 A C P _115315) = (term533 A C P _115315).
Proof. exact (MK_COMB (@lem8395689 A C P) (@lem8395688 A C P _115315)). Qed.
Lemma lem8395691 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8395692 {A C P : Type'} (_115315 : type1092 A C P) : (term534 A C P _115315) = (term534 A C P _115315).
Proof. exact (MK_COMB (@lem8395691) (@lem8395690 A C P _115315)). Qed.
Lemma lem8395693 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term620 A B C P _115315 _115316 _115314) = (term695 A B C P _115315 _115316 _115314 _115317).
Proof. exact (MK_COMB (@lem8395692 A C P _115315) (@lem8395603 A B C P _115316 _115314 _115317 h1)). Qed.
Lemma lem8395708 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) : (term450 A B P _115314 f clauses) = (term450 A B P _115314 f clauses).
Proof. exact (eq_refl (term450 A B P _115314 f clauses)). Qed.
Lemma lem8395709 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term621 A B C P f clauses _115315 _115316 _115314) = (term696 A B C P f clauses _115315 _115316 _115314 _115317).
Proof. exact (MK_COMB (@lem8395708 A B P _115314 f clauses) (@lem8395693 A B C P _115315 _115316 _115314 _115317 h1)). Qed.
Lemma lem8395722 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (x : A) : ((f x) = (@CASEWISE B P A (A -> B) clauses f x)) = ((f x) = (@CASEWISE B P A (A -> B) clauses f x)).
Proof. exact (eq_refl ((f x) = (@CASEWISE B P A (A -> B) clauses f x))). Qed.
Lemma lem8395723 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term452 A B P clauses f) = (term452 A B P clauses f).
Proof. exact (fun_ext (fun x : A => @lem8395722 A B P clauses f x)). Qed.
Lemma lem8395724 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8395725 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term162 A B P clauses f) = (term162 A B P clauses f).
Proof. exact (MK_COMB (@lem8395724 A) (@lem8395723 A B P clauses f)). Qed.
Lemma lem8395726 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8395727 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term164 A B P clauses f) = (term164 A B P clauses f).
Proof. exact (MK_COMB (@lem8395726) (@lem8395725 A B P clauses f)). Qed.
Lemma lem8395728 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term622 A B C P f clauses _115315 _115316 _115314) = (term697 A B C P f clauses _115315 _115316 _115314 _115317).
Proof. exact (MK_COMB (@lem8395727 A B P clauses f) (@lem8395709 A B C P f clauses _115315 _115316 _115314 _115317 h1)). Qed.
Lemma lem8395777 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) (y : P) : (term115 A B P clauses s s' t x t' f y) = (term115 A B P clauses s s' t x t' f y).
Proof. exact (eq_refl (term115 A B P clauses s s' t x t' f y)). Qed.
Lemma lem8395778 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term118 A B P clauses s s' t x t' f) = (term118 A B P clauses s s' t x t' f).
Proof. exact (fun_ext (fun y : P => @lem8395777 A B P clauses s s' t x t' f y)). Qed.
Lemma lem8395779 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8395780 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term120 A B P clauses s s' t x t' f) = (term120 A B P clauses s s' t x t' f).
Proof. exact (MK_COMB (@lem8395779 P) (@lem8395778 A B P clauses s s' t x t' f)). Qed.
Lemma lem8395781 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term122 A B P clauses s s' t t' f) = (term122 A B P clauses s s' t t' f).
Proof. exact (fun_ext (fun x : P => @lem8395780 A B P clauses s s' t x t' f)). Qed.
Lemma lem8395782 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8395783 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term124 A B P clauses s s' t t' f) = (term124 A B P clauses s s' t t' f).
Proof. exact (MK_COMB (@lem8395782 P) (@lem8395781 A B P clauses s s' t t' f)). Qed.
Lemma lem8395784 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term126 A B P clauses s s' t t') = (term126 A B P clauses s s' t t').
Proof. exact (fun_ext (fun f : A -> B => @lem8395783 A B P clauses s s' t t' f)). Qed.
Lemma lem8395785 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8395786 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term128 A B P clauses s s' t t') = (term128 A B P clauses s s' t t').
Proof. exact (MK_COMB (@lem8395785 A B) (@lem8395784 A B P clauses s s' t t')). Qed.
Lemma lem8395787 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term130 A B P clauses s s' t) = (term130 A B P clauses s s' t).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8395786 A B P clauses s s' t t')). Qed.
Lemma lem8395788 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8395789 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term132 A B P clauses s s' t) = (term132 A B P clauses s s' t).
Proof. exact (MK_COMB (@lem8395788 A B P) (@lem8395787 A B P clauses s s' t)). Qed.
Lemma lem8395790 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term134 A B P clauses s t) = (term134 A B P clauses s t).
Proof. exact (fun_ext (fun s' : P -> A => @lem8395789 A B P clauses s s' t)). Qed.
Lemma lem8395791 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8395792 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term136 A B P clauses s t) = (term136 A B P clauses s t).
Proof. exact (MK_COMB (@lem8395791 A P) (@lem8395790 A B P clauses s t)). Qed.
Lemma lem8395793 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term138 A B P clauses s) = (term138 A B P clauses s).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8395792 A B P clauses s t)). Qed.
Lemma lem8395794 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8395795 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term140 A B P clauses s) = (term140 A B P clauses s).
Proof. exact (MK_COMB (@lem8395794 A B P) (@lem8395793 A B P clauses s)). Qed.
Lemma lem8395796 {A B P : Type'} (clauses : type1635 A B P) : (term142 A B P clauses) = (term142 A B P clauses).
Proof. exact (fun_ext (fun s : P -> A => @lem8395795 A B P clauses s)). Qed.
Lemma lem8395797 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8395798 {A B P : Type'} (clauses : type1635 A B P) : (term144 A B P clauses) = (term144 A B P clauses).
Proof. exact (MK_COMB (@lem8395797 A P) (@lem8395796 A B P clauses)). Qed.
Lemma lem8395799 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8395800 {A B P : Type'} (clauses : type1635 A B P) : (term248 A B P clauses) = (term248 A B P clauses).
Proof. exact (MK_COMB (@lem8395799) (@lem8395798 A B P clauses)). Qed.
Lemma lem8395801 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term623 A B C P f clauses _115315 _115316 _115314) = (term698 A B C P f clauses _115315 _115316 _115314 _115317).
Proof. exact (MK_COMB (@lem8395800 A B P clauses) (@lem8395728 A B C P f clauses _115315 _115316 _115314 _115317 h1)). Qed.
Lemma lem8395802 {A B C P : Type'} (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term624 A B C P clauses _115315 _115316 _115314) = (term699 A B C P clauses _115315 _115316 _115314 _115317).
Proof. exact (fun_ext (fun f : A -> B => @lem8395801 A B C P f clauses _115315 _115316 _115314 _115317 h1)). Qed.
Lemma lem8395803 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8395804 {A B C P : Type'} (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term625 A B C P clauses _115315 _115316 _115314) = (term700 A B C P clauses _115315 _115316 _115314 _115317).
Proof. exact (MK_COMB (@lem8395803 A B) (@lem8395802 A B C P clauses _115315 _115316 _115314 _115317 h1)). Qed.
Lemma lem8395805 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term626 A B C P _115315 _115316 _115314) = (term701 A B C P _115315 _115316 _115314 _115317).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8395804 A B C P clauses _115315 _115316 _115314 _115317 h1)). Qed.
Lemma lem8395806 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8395807 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term627 A B C P _115315 _115316 _115314) = (term702 A B C P _115315 _115316 _115314 _115317).
Proof. exact (MK_COMB (@lem8395806 A B P) (@lem8395805 A B C P _115315 _115316 _115314 _115317 h1)). Qed.
Lemma lem8395824 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f : A -> B) (x : P) : ((term186 A B P clauses f s x) = (t f x)) = ((term186 A B P clauses f s x) = (t f x)).
Proof. exact (eq_refl ((term186 A B P clauses f s x) = (t f x))). Qed.
Lemma lem8395825 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f : A -> B) : (term190 A B P clauses s t f) = (term190 A B P clauses s t f).
Proof. exact (fun_ext (fun x : P => @lem8395824 A B P clauses s t f x)). Qed.
Lemma lem8395826 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8395827 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f : A -> B) : (term192 A B P clauses s t f) = (term192 A B P clauses s t f).
Proof. exact (MK_COMB (@lem8395826 P) (@lem8395825 A B P clauses s t f)). Qed.
Lemma lem8395836 {A B P : Type'} (f : type1177 A B P) (s : P -> A) (t : type558 A B P) : (term193 A B P f s t) = (term193 A B P f s t).
Proof. exact (eq_refl (term193 A B P f s t)). Qed.
Lemma lem8395837 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f' : A -> B) : (term195 A B P f clauses s t f') = (term195 A B P f clauses s t f').
Proof. exact (MK_COMB (@lem8395836 A B P f s t) (@lem8395827 A B P clauses s t f')). Qed.
Lemma lem8395838 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term197 A B P f clauses s f') = (term197 A B P f clauses s f').
Proof. exact (fun_ext (fun t : type558 A B P => @lem8395837 A B P f clauses s t f')). Qed.
Lemma lem8395839 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8395840 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term199 A B P f clauses s f') = (term199 A B P f clauses s f').
Proof. exact (MK_COMB (@lem8395839 A B P) (@lem8395838 A B P f clauses s f')). Qed.
Lemma lem8395841 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term201 A B P f clauses f') = (term201 A B P f clauses f').
Proof. exact (fun_ext (fun s : P -> A => @lem8395840 A B P f clauses s f')). Qed.
Lemma lem8395842 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8395843 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term203 A B P f clauses f') = (term203 A B P f clauses f').
Proof. exact (MK_COMB (@lem8395842 A P) (@lem8395841 A B P f clauses f')). Qed.
Lemma lem8395852 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) (f' : type1177 A B P) : (term508 A B P _115314 clauses f f') = (term508 A B P _115314 clauses f f').
Proof. exact (eq_refl (term508 A B P _115314 clauses f f')). Qed.
Lemma lem8395853 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : ((_115314 clauses f' f) = (term203 A B P f clauses f')) = ((_115314 clauses f' f) = (term203 A B P f clauses f')).
Proof. exact (MK_COMB (@lem8395852 A B P _115314 clauses f' f) (@lem8395843 A B P f clauses f')). Qed.
Lemma lem8395854 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term510 A B P _115314 clauses f) = (term510 A B P _115314 clauses f).
Proof. exact (fun_ext (fun f' : type1177 A B P => @lem8395853 A B P _115314 f' clauses f)). Qed.
Lemma lem8395855 {A B P : Type'} : (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) = (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop))). Qed.
Lemma lem8395856 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term511 A B P _115314 clauses f) = (term511 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8395855 A B P) (@lem8395854 A B P _115314 clauses f)). Qed.
Lemma lem8395857 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term512 A B P _115314 clauses) = (term512 A B P _115314 clauses).
Proof. exact (fun_ext (fun f : A -> B => @lem8395856 A B P _115314 clauses f)). Qed.
Lemma lem8395858 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8395859 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term513 A B P _115314 clauses) = (term513 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8395858 A B) (@lem8395857 A B P _115314 clauses)). Qed.
Lemma lem8395860 {A B P : Type'} (_115314 : type1080 A B P) : (term514 A B P _115314) = (term514 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8395859 A B P _115314 clauses)). Qed.
Lemma lem8395861 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8395862 {A B P : Type'} (_115314 : type1080 A B P) : (term515 A B P _115314) = (term515 A B P _115314).
Proof. exact (MK_COMB (@lem8395861 A B P) (@lem8395860 A B P _115314)). Qed.
Lemma lem8395863 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8395864 {A B P : Type'} (_115314 : type1080 A B P) : (term516 A B P _115314) = (term516 A B P _115314).
Proof. exact (MK_COMB (@lem8395863) (@lem8395862 A B P _115314)). Qed.
Lemma lem8395865 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term628 A B C P _115315 _115316 _115314) = (term703 A B C P _115315 _115316 _115314 _115317).
Proof. exact (MK_COMB (@lem8395864 A B P _115314) (@lem8395807 A B C P _115315 _115316 _115314 _115317 h1)). Qed.
Lemma lem8395866 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term629 A B C P _115315 _115316) = (term704 A B C P _115315 _115316 _115317).
Proof. exact (fun_ext (fun _115314 : type1080 A B P => @lem8395865 A B C P _115315 _115316 _115314 _115317 h1)). Qed.
Lemma lem8395867 {A B P : Type'} : (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8395868 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term630 A B C P _115315 _115316) = (term705 A B C P _115315 _115316 _115317).
Proof. exact (MK_COMB (@lem8395867 A B P) (@lem8395866 A B C P _115315 _115316 _115317 h1)). Qed.
Lemma lem8395885 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) (x : P) : ((term357 A C P clauses c s x) = (t c x)) = ((term357 A C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term357 A C P clauses c s x) = (t c x))). Qed.
Lemma lem8395886 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term358 A C P clauses s t c) = (term358 A C P clauses s t c).
Proof. exact (fun_ext (fun x : P => @lem8395885 A C P clauses s t c x)). Qed.
Lemma lem8395887 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8395888 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term359 A C P clauses s t c) = (term359 A C P clauses s t c).
Proof. exact (MK_COMB (@lem8395887 P) (@lem8395886 A C P clauses s t c)). Qed.
Lemma lem8395897 {A C P : Type'} (f : type1178 A C P) (s : P -> A) (t : type1475 A C P) : (term360 A C P f s t) = (term360 A C P f s t).
Proof. exact (eq_refl (term360 A C P f s t)). Qed.
Lemma lem8395898 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term361 A C P f clauses s t c) = (term361 A C P f clauses s t c).
Proof. exact (MK_COMB (@lem8395897 A C P f s t) (@lem8395888 A C P clauses s t c)). Qed.
Lemma lem8395899 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term362 A C P f clauses s c) = (term362 A C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8395898 A C P f clauses s t c)). Qed.
Lemma lem8395900 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8395901 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term363 A C P f clauses s c) = (term363 A C P f clauses s c).
Proof. exact (MK_COMB (@lem8395900 A C P) (@lem8395899 A C P f clauses s c)). Qed.
Lemma lem8395902 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term364 A C P f clauses c) = (term364 A C P f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8395901 A C P f clauses s c)). Qed.
Lemma lem8395903 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8395904 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term365 A C P f clauses c) = (term365 A C P f clauses c).
Proof. exact (MK_COMB (@lem8395903 A P) (@lem8395902 A C P f clauses c)). Qed.
Lemma lem8395913 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) (f : type1178 A C P) : (term592 A C P _115315 clauses c f) = (term592 A C P _115315 clauses c f).
Proof. exact (eq_refl (term592 A C P _115315 clauses c f)). Qed.
Lemma lem8395914 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : ((_115315 clauses c f) = (term365 A C P f clauses c)) = ((_115315 clauses c f) = (term365 A C P f clauses c)).
Proof. exact (MK_COMB (@lem8395913 A C P _115315 clauses c f) (@lem8395904 A C P f clauses c)). Qed.
Lemma lem8395915 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term594 A C P _115315 clauses c) = (term594 A C P _115315 clauses c).
Proof. exact (fun_ext (fun f : type1178 A C P => @lem8395914 A C P _115315 f clauses c)). Qed.
Lemma lem8395916 {A C P : Type'} : (@all ((prod (P -> A) (C -> P -> A)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> A)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> A)) -> Prop))). Qed.
Lemma lem8395917 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term595 A C P _115315 clauses c) = (term595 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8395916 A C P) (@lem8395915 A C P _115315 clauses c)). Qed.
Lemma lem8395918 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term596 A C P _115315 clauses) = (term596 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8395917 A C P _115315 clauses c)). Qed.
Lemma lem8395919 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8395920 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term597 A C P _115315 clauses) = (term597 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8395919 C) (@lem8395918 A C P _115315 clauses)). Qed.
Lemma lem8395921 {A C P : Type'} (_115315 : type1092 A C P) : (term598 A C P _115315) = (term598 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8395920 A C P _115315 clauses)). Qed.
Lemma lem8395922 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8395923 {A C P : Type'} (_115315 : type1092 A C P) : (term599 A C P _115315) = (term599 A C P _115315).
Proof. exact (MK_COMB (@lem8395922 A C P) (@lem8395921 A C P _115315)). Qed.
Lemma lem8395924 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8395925 {A C P : Type'} (_115315 : type1092 A C P) : (term600 A C P _115315) = (term600 A C P _115315).
Proof. exact (MK_COMB (@lem8395924) (@lem8395923 A C P _115315)). Qed.
Lemma lem8395926 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term631 A B C P _115315 _115316) = (term706 A B C P _115315 _115316 _115317).
Proof. exact (MK_COMB (@lem8395925 A C P _115315) (@lem8395868 A B C P _115315 _115316 _115317 h1)). Qed.
Lemma lem8395927 {A B C P : Type'} (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term632 A B C P _115316) = (term707 A B C P _115316 _115317).
Proof. exact (fun_ext (fun _115315 : type1092 A C P => @lem8395926 A B C P _115315 _115316 _115317 h1)). Qed.
Lemma lem8395928 {A C P : Type'} : (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop))). Qed.
Lemma lem8395929 {A B C P : Type'} (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term633 A B C P _115316) = (term708 A B C P _115316 _115317).
Proof. exact (MK_COMB (@lem8395928 A C P) (@lem8395927 A B C P _115316 _115317 h1)). Qed.
Lemma lem8395946 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) (x : P) : ((term416 A B C P clauses c s x) = (t c x)) = ((term416 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term416 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8395947 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term417 A B C P clauses s t c) = (term417 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : P => @lem8395946 A B C P clauses s t c x)). Qed.
Lemma lem8395948 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8395949 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term418 A B C P clauses s t c) = (term418 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8395948 P) (@lem8395947 A B C P clauses s t c)). Qed.
Lemma lem8395958 {A B C P : Type'} (f : type1185 A B C P) (s : P -> A) (t : type1475 B C P) : (term419 A B C P f s t) = (term419 A B C P f s t).
Proof. exact (eq_refl (term419 A B C P f s t)). Qed.
Lemma lem8395959 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term420 A B C P f clauses s t c) = (term420 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8395958 A B C P f s t) (@lem8395949 A B C P clauses s t c)). Qed.
Lemma lem8395960 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term421 A B C P f clauses s c) = (term421 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8395959 A B C P f clauses s t c)). Qed.
Lemma lem8395961 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8395962 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term422 A B C P f clauses s c) = (term422 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8395961 B C P) (@lem8395960 A B C P f clauses s c)). Qed.
Lemma lem8395963 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term423 A B C P f clauses c) = (term423 A B C P f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8395962 A B C P f clauses s c)). Qed.
Lemma lem8395964 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8395965 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term424 A B C P f clauses c) = (term424 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8395964 A P) (@lem8395963 A B C P f clauses c)). Qed.
Lemma lem8395974 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) (f : type1185 A B C P) : (term680 A B C P _115316 clauses c f) = (term680 A B C P _115316 clauses c f).
Proof. exact (eq_refl (term680 A B C P _115316 clauses c f)). Qed.
Lemma lem8395975 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : ((_115316 clauses c f) = (term424 A B C P f clauses c)) = ((_115316 clauses c f) = (term424 A B C P f clauses c)).
Proof. exact (MK_COMB (@lem8395974 A B C P _115316 clauses c f) (@lem8395965 A B C P f clauses c)). Qed.
Lemma lem8395976 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term682 A B C P _115316 clauses c) = (term682 A B C P _115316 clauses c).
Proof. exact (fun_ext (fun f : type1185 A B C P => @lem8395975 A B C P _115316 f clauses c)). Qed.
Lemma lem8395977 {A B C P : Type'} : (@all ((prod (P -> A) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8395978 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term683 A B C P _115316 clauses c) = (term683 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8395977 A B C P) (@lem8395976 A B C P _115316 clauses c)). Qed.
Lemma lem8395979 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term684 A B C P _115316 clauses) = (term684 A B C P _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8395978 A B C P _115316 clauses c)). Qed.
Lemma lem8395980 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8395981 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term685 A B C P _115316 clauses) = (term685 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8395980 C) (@lem8395979 A B C P _115316 clauses)). Qed.
Lemma lem8395982 {A B C P : Type'} (_115316 : type1115 A B C P) : (term686 A B C P _115316) = (term686 A B C P _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8395981 A B C P _115316 clauses)). Qed.
Lemma lem8395983 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8395984 {A B C P : Type'} (_115316 : type1115 A B C P) : (term687 A B C P _115316) = (term687 A B C P _115316).
Proof. exact (MK_COMB (@lem8395983 A B C P) (@lem8395982 A B C P _115316)). Qed.
Lemma lem8395985 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8395986 {A B C P : Type'} (_115316 : type1115 A B C P) : (term688 A B C P _115316) = (term688 A B C P _115316).
Proof. exact (MK_COMB (@lem8395985) (@lem8395984 A B C P _115316)). Qed.
Lemma lem8395987 {A B C P : Type'} (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term689 A B C P _115316) = (term709 A B C P _115316 _115317).
Proof. exact (MK_COMB (@lem8395986 A B C P _115316) (@lem8395929 A B C P _115316 _115317 h1)). Qed.
Lemma lem8395988 {A B C P : Type'} (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term690 A B C P) = (term710 A B C P _115317).
Proof. exact (fun_ext (fun _115316 : type1115 A B C P => @lem8395987 A B C P _115316 _115317 h1)). Qed.
Lemma lem8395989 {A B C P : Type'} : (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8395990 {A B C P : Type'} (_115317 : type1092 B C P) (h1 : _115317 = (term520 B C P)) : (term691 A B C P) = (term711 A B C P _115317).
Proof. exact (MK_COMB (@lem8395989 A B C P) (@lem8395988 A B C P _115317 h1)). Qed.
Lemma lem8395991 {A B C P : Type'} (_115317 : type1092 B C P) : term712 A B C P _115317.
Proof. exact (fun h0 : _115317 = (term520 B C P) => @lem8395990 A B C P _115317 h0). Qed.
Lemma lem8395992 {A B C P : Type'} : term713 A B C P.
Proof. exact (fun _115317 : type1092 B C P => @lem8395991 A B C P _115317). Qed.
Lemma lem8395994 {_3603 : Type'} (P : Prop) (c : _3603) (Q : _3603 -> Prop) : term461 _3603 P c Q.
Proof. exact (EQ_MP (@lem20230 _3603 P c Q) (@lem0)). Qed.
Lemma lem8395995 {B C P : Type'} (P' : Prop) (c : type1092 B C P) (Q : type272 B C P) : term548 B C P P' c Q.
Proof. exact (@lem8395994 (type1092 B C P) P' c Q). Qed.
Lemma lem8395996 {A B C P : Type'} : term714 A B C P.
Proof. exact (@lem8395995 B C P (term691 A B C P) (term520 B C P) (term715 A B C P)). Qed.
Lemma lem8395997 {A B C P : Type'} (_115317 : type1092 B C P) : (term716 A B C P _115317) = (term711 A B C P _115317).
Proof. exact (eq_refl (term716 A B C P _115317)). Qed.
Lemma lem8395998 {A B C P : Type'} : (term717 A B C P) = (term717 A B C P).
Proof. exact (eq_refl (term717 A B C P)). Qed.
Lemma lem8395999 {A B C P : Type'} (_115317 : type1092 B C P) : ((term691 A B C P) = (term716 A B C P _115317)) = ((term691 A B C P) = (term711 A B C P _115317)).
Proof. exact (MK_COMB (@lem8395998 A B C P) (@lem8395997 A B C P _115317)). Qed.
Lemma lem8396000 {B C P : Type'} (_115317 : type1092 B C P) : (term553 B C P _115317) = (term553 B C P _115317).
Proof. exact (eq_refl (term553 B C P _115317)). Qed.
Lemma lem8396001 {A B C P : Type'} (_115317 : type1092 B C P) : (term718 A B C P _115317) = (term712 A B C P _115317).
Proof. exact (MK_COMB (@lem8396000 B C P _115317) (@lem8395999 A B C P _115317)). Qed.
Lemma lem8396002 {A B C P : Type'} : (term719 A B C P) = (term720 A B C P).
Proof. exact (fun_ext (fun _115317 : type1092 B C P => @lem8396001 A B C P _115317)). Qed.
Lemma lem8396003 {B C P : Type'} : (@all ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8396004 {A B C P : Type'} : (term721 A B C P) = (term713 A B C P).
Proof. exact (MK_COMB (@lem8396003 B C P) (@lem8396002 A B C P)). Qed.
Lemma lem8396005 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8396006 {A B C P : Type'} : (term722 A B C P) = (term723 A B C P).
Proof. exact (MK_COMB (@lem8396005) (@lem8396004 A B C P)). Qed.
Lemma lem8396007 {A B C P : Type'} (_115317 : type1092 B C P) : (term716 A B C P _115317) = (term711 A B C P _115317).
Proof. exact (eq_refl (term716 A B C P _115317)). Qed.
Lemma lem8396008 {B C P : Type'} (_115317 : type1092 B C P) : (term553 B C P _115317) = (term553 B C P _115317).
Proof. exact (eq_refl (term553 B C P _115317)). Qed.
Lemma lem8396009 {A B C P : Type'} (_115317 : type1092 B C P) : (term724 A B C P _115317) = (term725 A B C P _115317).
Proof. exact (MK_COMB (@lem8396008 B C P _115317) (@lem8396007 A B C P _115317)). Qed.
Lemma lem8396010 {A B C P : Type'} : (term726 A B C P) = (term727 A B C P).
Proof. exact (fun_ext (fun _115317 : type1092 B C P => @lem8396009 A B C P _115317)). Qed.
Lemma lem8396011 {B C P : Type'} : (@all ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8396012 {A B C P : Type'} : (term728 A B C P) = (term729 A B C P).
Proof. exact (MK_COMB (@lem8396011 B C P) (@lem8396010 A B C P)). Qed.
Lemma lem8396013 {A B C P : Type'} : (term717 A B C P) = (term717 A B C P).
Proof. exact (eq_refl (term717 A B C P)). Qed.
Lemma lem8396014 {A B C P : Type'} : ((term691 A B C P) = (term728 A B C P)) = ((term691 A B C P) = (term729 A B C P)).
Proof. exact (MK_COMB (@lem8396013 A B C P) (@lem8396012 A B C P)). Qed.
Lemma lem8396015 {A B C P : Type'} : (term714 A B C P) = (term730 A B C P).
Proof. exact (MK_COMB (@lem8396006 A B C P) (@lem8396014 A B C P)). Qed.
Lemma lem8396016 {A B C P : Type'} : term730 A B C P.
Proof. exact (EQ_MP (@lem8396015 A B C P) (@lem8395996 A B C P)). Qed.
Lemma lem8396017 {A B C P : Type'} : (term691 A B C P) = (term729 A B C P).
Proof. exact (@lem8396016 A B C P (@lem8395992 A B C P)). Qed.
Lemma lem8396019 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term481 _3571 _3575 t)) = (term482 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem8396020 {B C P : Type'} (s : type1092 B C P) (t : type1092 B C P) : (s = (term567 B C P t)) = (term568 B C P s t).
Proof. exact (@lem8396019 (type1441 B C P) (type1636 B C P) s t). Qed.
Lemma lem8396021 {B C P : Type'} (_115317 : type1092 B C P) : (_115317 = (term569 B C P)) = (term570 B C P _115317).
Proof. exact (@lem8396020 B C P _115317 (term520 B C P)). Qed.
Lemma lem8396022 {B C P : Type'} (clauses : type1636 B C P) : (term521 B C P clauses) = (term522 B C P clauses).
Proof. exact (eq_refl (term521 B C P clauses)). Qed.
Lemma lem8396023 {B C P : Type'} : (term569 B C P) = (term520 B C P).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8396022 B C P clauses)). Qed.
Lemma lem8396024 {B C P : Type'} (_115317 : type1092 B C P) : (@eq ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop) _115317) = (@eq ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop) _115317).
Proof. exact (eq_refl (@eq ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop) _115317)). Qed.
Lemma lem8396025 {B C P : Type'} (_115317 : type1092 B C P) : (_115317 = (term569 B C P)) = (_115317 = (term520 B C P)).
Proof. exact (MK_COMB (@lem8396024 B C P _115317) (@lem8396023 B C P)). Qed.
Lemma lem8396026 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8396027 {B C P : Type'} (_115317 : type1092 B C P) : (term571 B C P _115317) = (term572 B C P _115317).
Proof. exact (MK_COMB (@lem8396026) (@lem8396025 B C P _115317)). Qed.
Lemma lem8396028 {B C P : Type'} (clauses : type1636 B C P) : (term521 B C P clauses) = (term522 B C P clauses).
Proof. exact (eq_refl (term521 B C P clauses)). Qed.
Lemma lem8396029 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term523 B C P _115317 clauses) = (term523 B C P _115317 clauses).
Proof. exact (eq_refl (term523 B C P _115317 clauses)). Qed.
Lemma lem8396030 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : ((_115317 clauses) = (term521 B C P clauses)) = ((_115317 clauses) = (term522 B C P clauses)).
Proof. exact (MK_COMB (@lem8396029 B C P _115317 clauses) (@lem8396028 B C P clauses)). Qed.
Lemma lem8396031 {B C P : Type'} (_115317 : type1092 B C P) : (term573 B C P _115317) = (term574 B C P _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8396030 B C P _115317 clauses)). Qed.
Lemma lem8396032 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8396033 {B C P : Type'} (_115317 : type1092 B C P) : (term570 B C P _115317) = (term575 B C P _115317).
Proof. exact (MK_COMB (@lem8396032 B C P) (@lem8396031 B C P _115317)). Qed.
Lemma lem8396034 {B C P : Type'} (_115317 : type1092 B C P) : ((_115317 = (term569 B C P)) = (term570 B C P _115317)) = ((_115317 = (term520 B C P)) = (term575 B C P _115317)).
Proof. exact (MK_COMB (@lem8396027 B C P _115317) (@lem8396033 B C P _115317)). Qed.
Lemma lem8396035 {B C P : Type'} (_115317 : type1092 B C P) : (_115317 = (term520 B C P)) = (term575 B C P _115317).
Proof. exact (EQ_MP (@lem8396034 B C P _115317) (@lem8396021 B C P _115317)). Qed.
Lemma lem8396037 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term481 _3571 _3575 t)) = (term482 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem8396038 {B C P : Type'} (s : type1441 B C P) (t : type1441 B C P) : (s = (term576 B C P t)) = (term577 B C P s t).
Proof. exact (@lem8396037 (type306 B C P) C s t). Qed.
Lemma lem8396039 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : ((_115317 clauses) = (term578 B C P clauses)) = (term579 B C P _115317 clauses).
Proof. exact (@lem8396038 B C P (_115317 clauses) (term522 B C P clauses)). Qed.
Lemma lem8396040 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term524 B C P clauses c) = (term366 B C P clauses c).
Proof. exact (eq_refl (term524 B C P clauses c)). Qed.
Lemma lem8396041 {B C P : Type'} (clauses : type1636 B C P) : (term578 B C P clauses) = (term522 B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8396040 B C P clauses c)). Qed.
Lemma lem8396042 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term523 B C P _115317 clauses) = (term523 B C P _115317 clauses).
Proof. exact (eq_refl (term523 B C P _115317 clauses)). Qed.
Lemma lem8396043 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : ((_115317 clauses) = (term578 B C P clauses)) = ((_115317 clauses) = (term522 B C P clauses)).
Proof. exact (MK_COMB (@lem8396042 B C P _115317 clauses) (@lem8396041 B C P clauses)). Qed.
Lemma lem8396044 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8396045 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term580 B C P _115317 clauses) = (term581 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8396044) (@lem8396043 B C P _115317 clauses)). Qed.
Lemma lem8396046 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term524 B C P clauses c) = (term366 B C P clauses c).
Proof. exact (eq_refl (term524 B C P clauses c)). Qed.
Lemma lem8396047 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term525 B C P _115317 clauses c) = (term525 B C P _115317 clauses c).
Proof. exact (eq_refl (term525 B C P _115317 clauses c)). Qed.
Lemma lem8396048 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : ((_115317 clauses c) = (term524 B C P clauses c)) = ((_115317 clauses c) = (term366 B C P clauses c)).
Proof. exact (MK_COMB (@lem8396047 B C P _115317 clauses c) (@lem8396046 B C P clauses c)). Qed.
Lemma lem8396049 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term582 B C P _115317 clauses) = (term583 B C P _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8396048 B C P _115317 clauses c)). Qed.
Lemma lem8396050 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8396051 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term579 B C P _115317 clauses) = (term584 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8396050 C) (@lem8396049 B C P _115317 clauses)). Qed.
Lemma lem8396052 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (((_115317 clauses) = (term578 B C P clauses)) = (term579 B C P _115317 clauses)) = (((_115317 clauses) = (term522 B C P clauses)) = (term584 B C P _115317 clauses)).
Proof. exact (MK_COMB (@lem8396045 B C P _115317 clauses) (@lem8396051 B C P _115317 clauses)). Qed.
Lemma lem8396053 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : ((_115317 clauses) = (term522 B C P clauses)) = (term584 B C P _115317 clauses).
Proof. exact (EQ_MP (@lem8396052 B C P _115317 clauses) (@lem8396039 B C P _115317 clauses)). Qed.
Lemma lem8396055 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term481 _3571 _3575 t)) = (term482 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem8396056 {B C P : Type'} (s : type306 B C P) (t : type306 B C P) : (s = (term585 B C P t)) = (term586 B C P s t).
Proof. exact (@lem8396055 Prop (type1178 B C P) s t). Qed.
Lemma lem8396057 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : ((_115317 clauses c) = (term587 B C P clauses c)) = (term588 B C P _115317 clauses c).
Proof. exact (@lem8396056 B C P (_115317 clauses c) (term366 B C P clauses c)). Qed.
Lemma lem8396058 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term589 B C P clauses c f) = (term365 B C P f clauses c).
Proof. exact (eq_refl (term589 B C P clauses c f)). Qed.
Lemma lem8396059 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term587 B C P clauses c) = (term366 B C P clauses c).
Proof. exact (fun_ext (fun f : type1178 B C P => @lem8396058 B C P f clauses c)). Qed.
Lemma lem8396060 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term525 B C P _115317 clauses c) = (term525 B C P _115317 clauses c).
Proof. exact (eq_refl (term525 B C P _115317 clauses c)). Qed.
Lemma lem8396061 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : ((_115317 clauses c) = (term587 B C P clauses c)) = ((_115317 clauses c) = (term366 B C P clauses c)).
Proof. exact (MK_COMB (@lem8396060 B C P _115317 clauses c) (@lem8396059 B C P clauses c)). Qed.
Lemma lem8396062 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8396063 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term590 B C P _115317 clauses c) = (term591 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8396062) (@lem8396061 B C P _115317 clauses c)). Qed.
Lemma lem8396064 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term589 B C P clauses c f) = (term365 B C P f clauses c).
Proof. exact (eq_refl (term589 B C P clauses c f)). Qed.
Lemma lem8396065 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) (f : type1178 B C P) : (term592 B C P _115317 clauses c f) = (term592 B C P _115317 clauses c f).
Proof. exact (eq_refl (term592 B C P _115317 clauses c f)). Qed.
Lemma lem8396066 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : ((_115317 clauses c f) = (term589 B C P clauses c f)) = ((_115317 clauses c f) = (term365 B C P f clauses c)).
Proof. exact (MK_COMB (@lem8396065 B C P _115317 clauses c f) (@lem8396064 B C P f clauses c)). Qed.
Lemma lem8396067 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term593 B C P _115317 clauses c) = (term594 B C P _115317 clauses c).
Proof. exact (fun_ext (fun f : type1178 B C P => @lem8396066 B C P _115317 f clauses c)). Qed.
Lemma lem8396068 {B C P : Type'} : (@all ((prod (P -> B) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> B) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> B) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8396069 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term588 B C P _115317 clauses c) = (term595 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8396068 B C P) (@lem8396067 B C P _115317 clauses c)). Qed.
Lemma lem8396070 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (((_115317 clauses c) = (term587 B C P clauses c)) = (term588 B C P _115317 clauses c)) = (((_115317 clauses c) = (term366 B C P clauses c)) = (term595 B C P _115317 clauses c)).
Proof. exact (MK_COMB (@lem8396063 B C P _115317 clauses c) (@lem8396069 B C P _115317 clauses c)). Qed.
Lemma lem8396071 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : ((_115317 clauses c) = (term366 B C P clauses c)) = (term595 B C P _115317 clauses c).
Proof. exact (EQ_MP (@lem8396070 B C P _115317 clauses c) (@lem8396057 B C P _115317 clauses c)). Qed.
Lemma lem8396072 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : ((_115317 clauses c f) = (term365 B C P f clauses c)) = ((_115317 clauses c f) = (term365 B C P f clauses c)).
Proof. exact (eq_refl ((_115317 clauses c f) = (term365 B C P f clauses c))). Qed.
Lemma lem8396073 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term594 B C P _115317 clauses c) = (term594 B C P _115317 clauses c).
Proof. exact (fun_ext (fun f : type1178 B C P => @lem8396072 B C P _115317 f clauses c)). Qed.
Lemma lem8396074 {B C P : Type'} : (@all ((prod (P -> B) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> B) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> B) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8396075 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term595 B C P _115317 clauses c) = (term595 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8396074 B C P) (@lem8396073 B C P _115317 clauses c)). Qed.
Lemma lem8396076 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : ((_115317 clauses c) = (term366 B C P clauses c)) = (term595 B C P _115317 clauses c).
Proof. exact (TRANS (@lem8396071 B C P _115317 clauses c) (@lem8396075 B C P _115317 clauses c)). Qed.
Lemma lem8396077 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term583 B C P _115317 clauses) = (term596 B C P _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8396076 B C P _115317 clauses c)). Qed.
Lemma lem8396078 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8396079 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term584 B C P _115317 clauses) = (term597 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8396078 C) (@lem8396077 B C P _115317 clauses)). Qed.
Lemma lem8396080 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : ((_115317 clauses) = (term522 B C P clauses)) = (term597 B C P _115317 clauses).
Proof. exact (TRANS (@lem8396053 B C P _115317 clauses) (@lem8396079 B C P _115317 clauses)). Qed.
Lemma lem8396081 {B C P : Type'} (_115317 : type1092 B C P) : (term574 B C P _115317) = (term598 B C P _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8396080 B C P _115317 clauses)). Qed.
Lemma lem8396082 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8396083 {B C P : Type'} (_115317 : type1092 B C P) : (term575 B C P _115317) = (term599 B C P _115317).
Proof. exact (MK_COMB (@lem8396082 B C P) (@lem8396081 B C P _115317)). Qed.
Lemma lem8396084 {B C P : Type'} (_115317 : type1092 B C P) : (_115317 = (term520 B C P)) = (term599 B C P _115317).
Proof. exact (TRANS (@lem8396035 B C P _115317) (@lem8396083 B C P _115317)). Qed.
Lemma lem8396085 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8396086 {B C P : Type'} (_115317 : type1092 B C P) : (term553 B C P _115317) = (term600 B C P _115317).
Proof. exact (MK_COMB (@lem8396085) (@lem8396084 B C P _115317)). Qed.
Lemma lem8396087 {A B C P : Type'} (_115317 : type1092 B C P) : (term711 A B C P _115317) = (term711 A B C P _115317).
Proof. exact (eq_refl (term711 A B C P _115317)). Qed.
Lemma lem8396088 {A B C P : Type'} (_115317 : type1092 B C P) : (term725 A B C P _115317) = (term731 A B C P _115317).
Proof. exact (MK_COMB (@lem8396086 B C P _115317) (@lem8396087 A B C P _115317)). Qed.
Lemma lem8396089 {A B C P : Type'} : (term727 A B C P) = (term732 A B C P).
Proof. exact (fun_ext (fun _115317 : type1092 B C P => @lem8396088 A B C P _115317)). Qed.
Lemma lem8396090 {B C P : Type'} : (@all ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8396091 {A B C P : Type'} : (term729 A B C P) = (term733 A B C P).
Proof. exact (MK_COMB (@lem8396090 B C P) (@lem8396089 A B C P)). Qed.
Lemma lem8396092 {A B C P : Type'} : (term717 A B C P) = (term717 A B C P).
Proof. exact (eq_refl (term717 A B C P)). Qed.
Lemma lem8396093 {A B C P : Type'} : ((term691 A B C P) = (term729 A B C P)) = ((term691 A B C P) = (term733 A B C P)).
Proof. exact (MK_COMB (@lem8396092 A B C P) (@lem8396091 A B C P)). Qed.
Lemma lem8396094 {A B C P : Type'} : (term691 A B C P) = (term733 A B C P).
Proof. exact (EQ_MP (@lem8396093 A B C P) (@lem8396017 A B C P)). Qed.
Lemma lem8396095 {A B C P : Type'} (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : _115318 = (term734 A B C P).
Proof. exact (h1). Qed.
Lemma lem8396096 {A B C P : Type'} (clauses : type1630 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8396097 {A B C P : Type'} (clauses : type1630 A B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (_115318 clauses) = (term735 A B C P clauses).
Proof. exact (MK_COMB (@lem8396095 A B C P _115318 h1) (@lem8396096 A B C P clauses)). Qed.
Lemma lem8396098 {A B C P : Type'} (clauses : type1630 A B C P) : (term735 A B C P clauses) = (term736 A B C P clauses).
Proof. exact (eq_refl (term735 A B C P clauses)). Qed.
Lemma lem8396099 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term737 A B C P _115318 clauses) = (term737 A B C P _115318 clauses).
Proof. exact (eq_refl (term737 A B C P _115318 clauses)). Qed.
Lemma lem8396100 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : ((_115318 clauses) = (term735 A B C P clauses)) = ((_115318 clauses) = (term736 A B C P clauses)).
Proof. exact (MK_COMB (@lem8396099 A B C P _115318 clauses) (@lem8396098 A B C P clauses)). Qed.
Lemma lem8396101 {A B C P : Type'} (clauses : type1630 A B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (_115318 clauses) = (term736 A B C P clauses).
Proof. exact (EQ_MP (@lem8396100 A B C P _115318 clauses) (@lem8396097 A B C P clauses _115318 h1)). Qed.
Lemma lem8396102 {C : Type'} (c : C) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8396103 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (_115318 clauses c) = (term738 A B C P clauses c).
Proof. exact (MK_COMB (@lem8396101 A B C P clauses _115318 h1) (@lem8396102 C c)). Qed.
Lemma lem8396104 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term738 A B C P clauses c) = (term335 A B C P clauses c).
Proof. exact (eq_refl (term738 A B C P clauses c)). Qed.
Lemma lem8396105 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term739 A B C P _115318 clauses c) = (term739 A B C P _115318 clauses c).
Proof. exact (eq_refl (term739 A B C P _115318 clauses c)). Qed.
Lemma lem8396106 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : ((_115318 clauses c) = (term738 A B C P clauses c)) = ((_115318 clauses c) = (term335 A B C P clauses c)).
Proof. exact (MK_COMB (@lem8396105 A B C P _115318 clauses c) (@lem8396104 A B C P clauses c)). Qed.
Lemma lem8396107 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (_115318 clauses c) = (term335 A B C P clauses c).
Proof. exact (EQ_MP (@lem8396106 A B C P _115318 clauses c) (@lem8396103 A B C P clauses c _115318 h1)). Qed.
Lemma lem8396109 {A B C P : Type'} (clauses : type1629 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8396128 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) (x : type558 A B P) : ((term264 A B C P clauses c s x) = (t c x)) = ((term264 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term264 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8396129 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term265 A B C P clauses s t c) = (term265 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : type558 A B P => @lem8396128 A B C P clauses s t c x)). Qed.
Lemma lem8396130 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8396131 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term266 A B C P clauses s t c) = (term266 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8396130 A B P) (@lem8396129 A B C P clauses s t c)). Qed.
Lemma lem8396140 {A B C P : Type'} (f : type1166 A B C P) (s : type115 A B P) (t : type1490 A B C P) : (term267 A B C P f s t) = (term267 A B C P f s t).
Proof. exact (eq_refl (term267 A B C P f s t)). Qed.
Lemma lem8396141 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term268 A B C P f clauses s t c) = (term268 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8396140 A B C P f s t) (@lem8396131 A B C P clauses s t c)). Qed.
Lemma lem8396142 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term269 A B C P f clauses s c) = (term269 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8396141 A B C P f clauses s t c)). Qed.
Lemma lem8396143 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8396144 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term270 A B C P f clauses s c) = (term270 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8396143 A B C P) (@lem8396142 A B C P f clauses s c)). Qed.
Lemma lem8396145 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term271 A B C P f clauses c) = (term271 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8396144 A B C P f clauses s c)). Qed.
Lemma lem8396146 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8396147 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term272 A B C P f clauses c) = (term272 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8396146 A B P) (@lem8396145 A B C P f clauses c)). Qed.
Lemma lem8396148 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term273 A B C P clauses c) = (term273 A B C P clauses c).
Proof. exact (fun_ext (fun f : type1166 A B C P => @lem8396147 A B C P f clauses c)). Qed.
Lemma lem8396149 {A B C P : Type'} : (@GABS ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)) = (@GABS ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop))). Qed.
Lemma lem8396150 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term274 A B C P clauses c) = (term274 A B C P clauses c).
Proof. exact (MK_COMB (@lem8396149 A B C P) (@lem8396148 A B C P clauses c)). Qed.
Lemma lem8396151 {A B C P : Type'} : (@List.Forall (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) = (@List.Forall (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))).
Proof. exact (eq_refl (@List.Forall (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))). Qed.
Lemma lem8396152 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term275 A B C P clauses c) = (term275 A B C P clauses c).
Proof. exact (MK_COMB (@lem8396151 A B C P) (@lem8396150 A B C P clauses c)). Qed.
Lemma lem8396153 {A B C P : Type'} (c : C) (clauses : type1629 A B C P) : (term276 A B C P c clauses) = (term276 A B C P c clauses).
Proof. exact (MK_COMB (@lem8396152 A B C P clauses c) (@lem8396109 A B C P clauses)). Qed.
Lemma lem8396202 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) (y : type558 A B P) : (term277 A B C P clauses s s' t x t' c y) = (term277 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term277 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8396203 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term278 A B C P clauses s s' t x t' c) = (term278 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : type558 A B P => @lem8396202 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8396204 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8396205 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term279 A B C P clauses s s' t x t' c) = (term279 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8396204 A B P) (@lem8396203 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8396206 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term280 A B C P clauses s s' t t' c) = (term280 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : type558 A B P => @lem8396205 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8396207 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8396208 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term281 A B C P clauses s s' t t' c) = (term281 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8396207 A B P) (@lem8396206 A B C P clauses s s' t t' c)). Qed.
Lemma lem8396209 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term282 A B C P clauses s s' t c) = (term282 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1490 A B C P => @lem8396208 A B C P clauses s s' t t' c)). Qed.
Lemma lem8396210 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8396211 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term283 A B C P clauses s s' t c) = (term283 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8396210 A B C P) (@lem8396209 A B C P clauses s s' t c)). Qed.
Lemma lem8396212 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term284 A B C P clauses s t c) = (term284 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type115 A B P => @lem8396211 A B C P clauses s s' t c)). Qed.
Lemma lem8396213 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8396214 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term285 A B C P clauses s t c) = (term285 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8396213 A B P) (@lem8396212 A B C P clauses s t c)). Qed.
Lemma lem8396215 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term286 A B C P clauses s c) = (term286 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8396214 A B C P clauses s t c)). Qed.
Lemma lem8396216 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8396217 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term287 A B C P clauses s c) = (term287 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8396216 A B C P) (@lem8396215 A B C P clauses s c)). Qed.
Lemma lem8396218 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term288 A B C P clauses c) = (term288 A B C P clauses c).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8396217 A B C P clauses s c)). Qed.
Lemma lem8396219 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8396220 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term289 A B C P clauses c) = (term289 A B C P clauses c).
Proof. exact (MK_COMB (@lem8396219 A B P) (@lem8396218 A B C P clauses c)). Qed.
Lemma lem8396221 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8396222 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term290 A B C P clauses c) = (term290 A B C P clauses c).
Proof. exact (MK_COMB (@lem8396221) (@lem8396220 A B C P clauses c)). Qed.
Lemma lem8396223 {A B C P : Type'} (c : C) (clauses : type1629 A B C P) : (term291 A B C P c clauses) = (term291 A B C P c clauses).
Proof. exact (MK_COMB (@lem8396222 A B C P clauses c) (@lem8396153 A B C P c clauses)). Qed.
Lemma lem8396224 {A B C P : Type'} (clauses : type1629 A B C P) : (term292 A B C P clauses) = (term292 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8396223 A B C P c clauses)). Qed.
Lemma lem8396225 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8396226 {A B C P : Type'} (clauses : type1629 A B C P) : (term293 A B C P clauses) = (term293 A B C P clauses).
Proof. exact (MK_COMB (@lem8396225 C) (@lem8396224 A B C P clauses)). Qed.
Lemma lem8396227 {A B C P : Type'} : (term294 A B C P) = (term294 A B C P).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8396226 A B C P clauses)). Qed.
Lemma lem8396228 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8396229 {A B C P : Type'} : (term219 A B C P) = (term219 A B C P).
Proof. exact (MK_COMB (@lem8396228 A B C P) (@lem8396227 A B C P)). Qed.
Lemma lem8396230 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8396231 {A B C P : Type'} : (term225 A B C P) = (term225 A B C P).
Proof. exact (MK_COMB (@lem8396230) (@lem8396229 A B C P)). Qed.
Lemma lem8396232 {A B C P : Type'} (clauses : type1631 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8396251 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) (x : P -> A) : ((term295 A B C P clauses c s x) = (t c x)) = ((term295 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term295 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8396252 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term296 A B C P clauses s t c) = (term296 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : P -> A => @lem8396251 A B C P clauses s t c x)). Qed.
Lemma lem8396253 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8396254 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term297 A B C P clauses s t c) = (term297 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8396253 A P) (@lem8396252 A B C P clauses s t c)). Qed.
Lemma lem8396263 {A B C P : Type'} (f : type1168 A B C P) (s : type802 A P) (t : type1512 A B C P) : (term298 A B C P f s t) = (term298 A B C P f s t).
Proof. exact (eq_refl (term298 A B C P f s t)). Qed.
Lemma lem8396264 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term299 A B C P f clauses s t c) = (term299 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8396263 A B C P f s t) (@lem8396254 A B C P clauses s t c)). Qed.
Lemma lem8396265 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term300 A B C P f clauses s c) = (term300 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8396264 A B C P f clauses s t c)). Qed.
Lemma lem8396266 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8396267 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term301 A B C P f clauses s c) = (term301 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8396266 A B C P) (@lem8396265 A B C P f clauses s c)). Qed.
Lemma lem8396268 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term302 A B C P f clauses c) = (term302 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type802 A P => @lem8396267 A B C P f clauses s c)). Qed.
Lemma lem8396269 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8396270 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term303 A B C P f clauses c) = (term303 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8396269 A P) (@lem8396268 A B C P f clauses c)). Qed.
Lemma lem8396271 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term304 A B C P clauses c) = (term304 A B C P clauses c).
Proof. exact (fun_ext (fun f : type1168 A B C P => @lem8396270 A B C P f clauses c)). Qed.
Lemma lem8396272 {A B C P : Type'} : (@GABS ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)) = (@GABS ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop))). Qed.
Lemma lem8396273 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term305 A B C P clauses c) = (term305 A B C P clauses c).
Proof. exact (MK_COMB (@lem8396272 A B C P) (@lem8396271 A B C P clauses c)). Qed.
Lemma lem8396274 {A B C P : Type'} : (@List.Forall (prod ((P -> A) -> A) (C -> (P -> A) -> B))) = (@List.Forall (prod ((P -> A) -> A) (C -> (P -> A) -> B))).
Proof. exact (eq_refl (@List.Forall (prod ((P -> A) -> A) (C -> (P -> A) -> B)))). Qed.
Lemma lem8396275 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term306 A B C P clauses c) = (term306 A B C P clauses c).
Proof. exact (MK_COMB (@lem8396274 A B C P) (@lem8396273 A B C P clauses c)). Qed.
Lemma lem8396276 {A B C P : Type'} (c : C) (clauses : type1631 A B C P) : (term307 A B C P c clauses) = (term307 A B C P c clauses).
Proof. exact (MK_COMB (@lem8396275 A B C P clauses c) (@lem8396232 A B C P clauses)). Qed.
Lemma lem8396325 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) (y : P -> A) : (term308 A B C P clauses s s' t x t' c y) = (term308 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term308 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8396326 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term309 A B C P clauses s s' t x t' c) = (term309 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P -> A => @lem8396325 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8396327 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8396328 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term310 A B C P clauses s s' t x t' c) = (term310 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8396327 A P) (@lem8396326 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8396329 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term311 A B C P clauses s s' t t' c) = (term311 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P -> A => @lem8396328 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8396330 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8396331 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term312 A B C P clauses s s' t t' c) = (term312 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8396330 A P) (@lem8396329 A B C P clauses s s' t t' c)). Qed.
Lemma lem8396332 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term313 A B C P clauses s s' t c) = (term313 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1512 A B C P => @lem8396331 A B C P clauses s s' t t' c)). Qed.
Lemma lem8396333 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8396334 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term314 A B C P clauses s s' t c) = (term314 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8396333 A B C P) (@lem8396332 A B C P clauses s s' t c)). Qed.
Lemma lem8396335 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term315 A B C P clauses s t c) = (term315 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type802 A P => @lem8396334 A B C P clauses s s' t c)). Qed.
Lemma lem8396336 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8396337 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term316 A B C P clauses s t c) = (term316 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8396336 A P) (@lem8396335 A B C P clauses s t c)). Qed.
Lemma lem8396338 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term317 A B C P clauses s c) = (term317 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8396337 A B C P clauses s t c)). Qed.
Lemma lem8396339 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8396340 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term318 A B C P clauses s c) = (term318 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8396339 A B C P) (@lem8396338 A B C P clauses s c)). Qed.
Lemma lem8396341 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term319 A B C P clauses c) = (term319 A B C P clauses c).
Proof. exact (fun_ext (fun s : type802 A P => @lem8396340 A B C P clauses s c)). Qed.
Lemma lem8396342 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8396343 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term320 A B C P clauses c) = (term320 A B C P clauses c).
Proof. exact (MK_COMB (@lem8396342 A P) (@lem8396341 A B C P clauses c)). Qed.
Lemma lem8396344 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8396345 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term321 A B C P clauses c) = (term321 A B C P clauses c).
Proof. exact (MK_COMB (@lem8396344) (@lem8396343 A B C P clauses c)). Qed.
Lemma lem8396346 {A B C P : Type'} (c : C) (clauses : type1631 A B C P) : (term322 A B C P c clauses) = (term322 A B C P c clauses).
Proof. exact (MK_COMB (@lem8396345 A B C P clauses c) (@lem8396276 A B C P c clauses)). Qed.
Lemma lem8396347 {A B C P : Type'} (clauses : type1631 A B C P) : (term323 A B C P clauses) = (term323 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8396346 A B C P c clauses)). Qed.
Lemma lem8396348 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8396349 {A B C P : Type'} (clauses : type1631 A B C P) : (term324 A B C P clauses) = (term324 A B C P clauses).
Proof. exact (MK_COMB (@lem8396348 C) (@lem8396347 A B C P clauses)). Qed.
Lemma lem8396350 {A B C P : Type'} : (term325 A B C P) = (term325 A B C P).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8396349 A B C P clauses)). Qed.
Lemma lem8396351 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8396352 {A B C P : Type'} : (term218 A B C P) = (term218 A B C P).
Proof. exact (MK_COMB (@lem8396351 A B C P) (@lem8396350 A B C P)). Qed.
Lemma lem8396353 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8396354 {A B C P : Type'} : (term226 A B C P) = (term226 A B C P).
Proof. exact (MK_COMB (@lem8396353) (@lem8396352 A B C P)). Qed.
Lemma lem8396355 {A B C P : Type'} : (term228 A B C P) = (term228 A B C P).
Proof. exact (MK_COMB (@lem8396354 A B C P) (@lem8396231 A B C P)). Qed.
Lemma lem8396356 {A B C P : Type'} (clauses : type1630 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8396358 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term335 A B C P clauses c) = (_115318 clauses c).
Proof. exact (SYM (@lem8396107 A B C P clauses c _115318 h1)). Qed.
Lemma lem8396359 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term335 A B C P clauses c) = (_115318 clauses c).
Proof. exact (@lem8396358 A B C P clauses c _115318 h1). Qed.
Lemma lem8396360 {A B C P : Type'} : (@GABS ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)) = (@GABS ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop))). Qed.
Lemma lem8396361 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term336 A B C P clauses c) = (term740 A B C P _115318 clauses c).
Proof. exact (MK_COMB (@lem8396360 A B C P) (@lem8396359 A B C P clauses c _115318 h1)). Qed.
Lemma lem8396362 {A B C P : Type'} : (@List.Forall (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) = (@List.Forall (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))).
Proof. exact (eq_refl (@List.Forall (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))). Qed.
Lemma lem8396363 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term337 A B C P clauses c) = (term741 A B C P _115318 clauses c).
Proof. exact (MK_COMB (@lem8396362 A B C P) (@lem8396361 A B C P clauses c _115318 h1)). Qed.
Lemma lem8396364 {A B C P : Type'} (c : C) (clauses : type1630 A B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term338 A B C P c clauses) = (term742 A B C P _115318 c clauses).
Proof. exact (MK_COMB (@lem8396363 A B C P clauses c _115318 h1) (@lem8396356 A B C P clauses)). Qed.
Lemma lem8396413 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) (y : A -> B) : (term339 A B C P clauses s s' t x t' c y) = (term339 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term339 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8396414 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term340 A B C P clauses s s' t x t' c) = (term340 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : A -> B => @lem8396413 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8396415 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8396416 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term341 A B C P clauses s s' t x t' c) = (term341 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8396415 A B) (@lem8396414 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8396417 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term342 A B C P clauses s s' t t' c) = (term342 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : A -> B => @lem8396416 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8396418 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8396419 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term343 A B C P clauses s s' t t' c) = (term343 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8396418 A B) (@lem8396417 A B C P clauses s s' t t' c)). Qed.
Lemma lem8396420 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term344 A B C P clauses s s' t c) = (term344 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1506 A B C => @lem8396419 A B C P clauses s s' t t' c)). Qed.
Lemma lem8396421 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8396422 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term345 A B C P clauses s s' t c) = (term345 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8396421 A B C) (@lem8396420 A B C P clauses s s' t c)). Qed.
Lemma lem8396423 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term346 A B C P clauses s t c) = (term346 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type558 A B P => @lem8396422 A B C P clauses s s' t c)). Qed.
Lemma lem8396424 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8396425 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term347 A B C P clauses s t c) = (term347 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8396424 A B P) (@lem8396423 A B C P clauses s t c)). Qed.
Lemma lem8396426 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term348 A B C P clauses s c) = (term348 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8396425 A B C P clauses s t c)). Qed.
Lemma lem8396427 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8396428 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term349 A B C P clauses s c) = (term349 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8396427 A B C) (@lem8396426 A B C P clauses s c)). Qed.
Lemma lem8396429 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term350 A B C P clauses c) = (term350 A B C P clauses c).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8396428 A B C P clauses s c)). Qed.
Lemma lem8396430 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8396431 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term351 A B C P clauses c) = (term351 A B C P clauses c).
Proof. exact (MK_COMB (@lem8396430 A B P) (@lem8396429 A B C P clauses c)). Qed.
Lemma lem8396432 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8396433 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term352 A B C P clauses c) = (term352 A B C P clauses c).
Proof. exact (MK_COMB (@lem8396432) (@lem8396431 A B C P clauses c)). Qed.
Lemma lem8396434 {A B C P : Type'} (c : C) (clauses : type1630 A B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term353 A B C P c clauses) = (term743 A B C P _115318 c clauses).
Proof. exact (MK_COMB (@lem8396433 A B C P clauses c) (@lem8396364 A B C P c clauses _115318 h1)). Qed.
Lemma lem8396435 {A B C P : Type'} (clauses : type1630 A B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term354 A B C P clauses) = (term744 A B C P _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8396434 A B C P c clauses _115318 h1)). Qed.
Lemma lem8396436 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8396437 {A B C P : Type'} (clauses : type1630 A B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term355 A B C P clauses) = (term745 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8396436 C) (@lem8396435 A B C P clauses _115318 h1)). Qed.
Lemma lem8396438 {A B C P : Type'} (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term356 A B C P) = (term746 A B C P _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8396437 A B C P clauses _115318 h1)). Qed.
Lemma lem8396439 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8396440 {A B C P : Type'} (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term217 A B C P) = (term747 A B C P _115318).
Proof. exact (MK_COMB (@lem8396439 A B C P) (@lem8396438 A B C P _115318 h1)). Qed.
Lemma lem8396441 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8396442 {A B C P : Type'} (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term229 A B C P) = (term748 A B C P _115318).
Proof. exact (MK_COMB (@lem8396441) (@lem8396440 A B C P _115318 h1)). Qed.
Lemma lem8396443 {A B C P : Type'} (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term231 A B C P) = (term749 A B C P _115318).
Proof. exact (MK_COMB (@lem8396442 A B C P _115318 h1) (@lem8396355 A B C P)). Qed.
Lemma lem8396454 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term528 B C P _115317 c clauses) = (term528 B C P _115317 c clauses).
Proof. exact (eq_refl (term528 B C P _115317 c clauses)). Qed.
Lemma lem8396503 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term370 B C P clauses s s' t x t' c y) = (term370 B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term370 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8396504 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term371 B C P clauses s s' t x t' c) = (term371 B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8396503 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8396505 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8396506 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term372 B C P clauses s s' t x t' c) = (term372 B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8396505 P) (@lem8396504 B C P clauses s s' t x t' c)). Qed.
Lemma lem8396507 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term373 B C P clauses s s' t t' c) = (term373 B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8396506 B C P clauses s s' t x t' c)). Qed.
Lemma lem8396508 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8396509 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term374 B C P clauses s s' t t' c) = (term374 B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8396508 P) (@lem8396507 B C P clauses s s' t t' c)). Qed.
Lemma lem8396510 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term375 B C P clauses s s' t c) = (term375 B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8396509 B C P clauses s s' t t' c)). Qed.
Lemma lem8396511 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8396512 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term376 B C P clauses s s' t c) = (term376 B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8396511 B C P) (@lem8396510 B C P clauses s s' t c)). Qed.
Lemma lem8396513 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term377 B C P clauses s t c) = (term377 B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> B => @lem8396512 B C P clauses s s' t c)). Qed.
Lemma lem8396514 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8396515 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term378 B C P clauses s t c) = (term378 B C P clauses s t c).
Proof. exact (MK_COMB (@lem8396514 B P) (@lem8396513 B C P clauses s t c)). Qed.
Lemma lem8396516 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term379 B C P clauses s c) = (term379 B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8396515 B C P clauses s t c)). Qed.
Lemma lem8396517 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8396518 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term380 B C P clauses s c) = (term380 B C P clauses s c).
Proof. exact (MK_COMB (@lem8396517 B C P) (@lem8396516 B C P clauses s c)). Qed.
Lemma lem8396519 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term381 B C P clauses c) = (term381 B C P clauses c).
Proof. exact (fun_ext (fun s : P -> B => @lem8396518 B C P clauses s c)). Qed.
Lemma lem8396520 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8396521 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term382 B C P clauses c) = (term382 B C P clauses c).
Proof. exact (MK_COMB (@lem8396520 B P) (@lem8396519 B C P clauses c)). Qed.
Lemma lem8396522 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8396523 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term383 B C P clauses c) = (term383 B C P clauses c).
Proof. exact (MK_COMB (@lem8396522) (@lem8396521 B C P clauses c)). Qed.
Lemma lem8396524 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term529 B C P _115317 c clauses) = (term529 B C P _115317 c clauses).
Proof. exact (MK_COMB (@lem8396523 B C P clauses c) (@lem8396454 B C P _115317 c clauses)). Qed.
Lemma lem8396525 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term530 B C P _115317 clauses) = (term530 B C P _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8396524 B C P _115317 c clauses)). Qed.
Lemma lem8396526 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8396527 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term531 B C P _115317 clauses) = (term531 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8396526 C) (@lem8396525 B C P _115317 clauses)). Qed.
Lemma lem8396528 {B C P : Type'} (_115317 : type1092 B C P) : (term532 B C P _115317) = (term532 B C P _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8396527 B C P _115317 clauses)). Qed.
Lemma lem8396529 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8396530 {B C P : Type'} (_115317 : type1092 B C P) : (term533 B C P _115317) = (term533 B C P _115317).
Proof. exact (MK_COMB (@lem8396529 B C P) (@lem8396528 B C P _115317)). Qed.
Lemma lem8396531 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8396532 {B C P : Type'} (_115317 : type1092 B C P) : (term534 B C P _115317) = (term534 B C P _115317).
Proof. exact (MK_COMB (@lem8396531) (@lem8396530 B C P _115317)). Qed.
Lemma lem8396533 {A B C P : Type'} (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term692 A B C P _115317) = (term750 A B C P _115317 _115318).
Proof. exact (MK_COMB (@lem8396532 B C P _115317) (@lem8396443 A B C P _115318 h1)). Qed.
Lemma lem8396544 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 c clauses) = (term390 A B P _115314 c clauses).
Proof. exact (eq_refl (term390 A B P _115314 c clauses)). Qed.
Lemma lem8396593 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) (y : P) : (term391 A B P clauses s s' t x t' c y) = (term391 A B P clauses s s' t x t' c y).
Proof. exact (eq_refl (term391 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8396594 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term392 A B P clauses s s' t x t' c) = (term392 A B P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8396593 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8396595 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8396596 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term393 A B P clauses s s' t x t' c) = (term393 A B P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8396595 P) (@lem8396594 A B P clauses s s' t x t' c)). Qed.
Lemma lem8396597 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term394 A B P clauses s s' t t' c) = (term394 A B P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8396596 A B P clauses s s' t x t' c)). Qed.
Lemma lem8396598 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8396599 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term395 A B P clauses s s' t t' c) = (term395 A B P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8396598 P) (@lem8396597 A B P clauses s s' t t' c)). Qed.
Lemma lem8396600 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term396 A B P clauses s s' t c) = (term396 A B P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8396599 A B P clauses s s' t t' c)). Qed.
Lemma lem8396601 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8396602 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term397 A B P clauses s s' t c) = (term397 A B P clauses s s' t c).
Proof. exact (MK_COMB (@lem8396601 A B P) (@lem8396600 A B P clauses s s' t c)). Qed.
Lemma lem8396603 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term398 A B P clauses s t c) = (term398 A B P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8396602 A B P clauses s s' t c)). Qed.
Lemma lem8396604 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8396605 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term399 A B P clauses s t c) = (term399 A B P clauses s t c).
Proof. exact (MK_COMB (@lem8396604 A P) (@lem8396603 A B P clauses s t c)). Qed.
Lemma lem8396606 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term400 A B P clauses s c) = (term400 A B P clauses s c).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8396605 A B P clauses s t c)). Qed.
Lemma lem8396607 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8396608 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term401 A B P clauses s c) = (term401 A B P clauses s c).
Proof. exact (MK_COMB (@lem8396607 A B P) (@lem8396606 A B P clauses s c)). Qed.
Lemma lem8396609 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term402 A B P clauses c) = (term402 A B P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8396608 A B P clauses s c)). Qed.
Lemma lem8396610 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8396611 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term403 A B P clauses c) = (term403 A B P clauses c).
Proof. exact (MK_COMB (@lem8396610 A P) (@lem8396609 A B P clauses c)). Qed.
Lemma lem8396612 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8396613 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term404 A B P clauses c) = (term404 A B P clauses c).
Proof. exact (MK_COMB (@lem8396612) (@lem8396611 A B P clauses c)). Qed.
Lemma lem8396614 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term406 A B P _115314 c clauses) = (term406 A B P _115314 c clauses).
Proof. exact (MK_COMB (@lem8396613 A B P clauses c) (@lem8396544 A B P _115314 c clauses)). Qed.
Lemma lem8396615 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term408 A B P _115314 clauses) = (term408 A B P _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8396614 A B P _115314 c clauses)). Qed.
Lemma lem8396616 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8396617 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term410 A B P _115314 clauses) = (term410 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8396616 A B) (@lem8396615 A B P _115314 clauses)). Qed.
Lemma lem8396618 {A B P : Type'} (_115314 : type1080 A B P) : (term412 A B P _115314) = (term412 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8396617 A B P _115314 clauses)). Qed.
Lemma lem8396619 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8396620 {A B P : Type'} (_115314 : type1080 A B P) : (term413 A B P _115314) = (term413 A B P _115314).
Proof. exact (MK_COMB (@lem8396619 A B P) (@lem8396618 A B P _115314)). Qed.
Lemma lem8396621 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8396622 {A B P : Type'} (_115314 : type1080 A B P) : (term414 A B P _115314) = (term414 A B P _115314).
Proof. exact (MK_COMB (@lem8396621) (@lem8396620 A B P _115314)). Qed.
Lemma lem8396623 {A B C P : Type'} (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term693 A B C P _115314 _115317) = (term751 A B C P _115314 _115317 _115318).
Proof. exact (MK_COMB (@lem8396622 A B P _115314) (@lem8396533 A B C P _115317 _115318 h1)). Qed.
Lemma lem8396634 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term612 A B C P _115316 c clauses) = (term612 A B C P _115316 c clauses).
Proof. exact (eq_refl (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8396683 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term429 A B C P clauses s s' t x t' c y) = (term429 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term429 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8396684 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term430 A B C P clauses s s' t x t' c) = (term430 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8396683 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8396685 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8396686 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term431 A B C P clauses s s' t x t' c) = (term431 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8396685 P) (@lem8396684 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8396687 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term432 A B C P clauses s s' t t' c) = (term432 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8396686 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8396688 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8396689 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term433 A B C P clauses s s' t t' c) = (term433 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8396688 P) (@lem8396687 A B C P clauses s s' t t' c)). Qed.
Lemma lem8396690 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term434 A B C P clauses s s' t c) = (term434 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8396689 A B C P clauses s s' t t' c)). Qed.
Lemma lem8396691 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8396692 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term435 A B C P clauses s s' t c) = (term435 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8396691 B C P) (@lem8396690 A B C P clauses s s' t c)). Qed.
Lemma lem8396693 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term436 A B C P clauses s t c) = (term436 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8396692 A B C P clauses s s' t c)). Qed.
Lemma lem8396694 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8396695 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term437 A B C P clauses s t c) = (term437 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8396694 A P) (@lem8396693 A B C P clauses s t c)). Qed.
Lemma lem8396696 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term438 A B C P clauses s c) = (term438 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8396695 A B C P clauses s t c)). Qed.
Lemma lem8396697 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8396698 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term439 A B C P clauses s c) = (term439 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8396697 B C P) (@lem8396696 A B C P clauses s c)). Qed.
Lemma lem8396699 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term440 A B C P clauses c) = (term440 A B C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8396698 A B C P clauses s c)). Qed.
Lemma lem8396700 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8396701 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term441 A B C P clauses c) = (term441 A B C P clauses c).
Proof. exact (MK_COMB (@lem8396700 A P) (@lem8396699 A B C P clauses c)). Qed.
Lemma lem8396702 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8396703 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term442 A B C P clauses c) = (term442 A B C P clauses c).
Proof. exact (MK_COMB (@lem8396702) (@lem8396701 A B C P clauses c)). Qed.
Lemma lem8396704 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term613 A B C P _115316 c clauses) = (term613 A B C P _115316 c clauses).
Proof. exact (MK_COMB (@lem8396703 A B C P clauses c) (@lem8396634 A B C P _115316 c clauses)). Qed.
Lemma lem8396705 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term614 A B C P _115316 clauses) = (term614 A B C P _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8396704 A B C P _115316 c clauses)). Qed.
Lemma lem8396706 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8396707 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term615 A B C P _115316 clauses) = (term615 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8396706 C) (@lem8396705 A B C P _115316 clauses)). Qed.
Lemma lem8396708 {A B C P : Type'} (_115316 : type1115 A B C P) : (term616 A B C P _115316) = (term616 A B C P _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8396707 A B C P _115316 clauses)). Qed.
Lemma lem8396709 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8396710 {A B C P : Type'} (_115316 : type1115 A B C P) : (term617 A B C P _115316) = (term617 A B C P _115316).
Proof. exact (MK_COMB (@lem8396709 A B C P) (@lem8396708 A B C P _115316)). Qed.
Lemma lem8396711 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8396712 {A B C P : Type'} (_115316 : type1115 A B C P) : (term618 A B C P _115316) = (term618 A B C P _115316).
Proof. exact (MK_COMB (@lem8396711) (@lem8396710 A B C P _115316)). Qed.
Lemma lem8396713 {A B C P : Type'} (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term694 A B C P _115316 _115314 _115317) = (term752 A B C P _115316 _115314 _115317 _115318).
Proof. exact (MK_COMB (@lem8396712 A B C P _115316) (@lem8396623 A B C P _115314 _115317 _115318 h1)). Qed.
Lemma lem8396724 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term528 A C P _115315 c clauses) = (term528 A C P _115315 c clauses).
Proof. exact (eq_refl (term528 A C P _115315 c clauses)). Qed.
Lemma lem8396773 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) (y : P) : (term370 A C P clauses s s' t x t' c y) = (term370 A C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term370 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8396774 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term371 A C P clauses s s' t x t' c) = (term371 A C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8396773 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8396775 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8396776 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term372 A C P clauses s s' t x t' c) = (term372 A C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8396775 P) (@lem8396774 A C P clauses s s' t x t' c)). Qed.
Lemma lem8396777 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term373 A C P clauses s s' t t' c) = (term373 A C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8396776 A C P clauses s s' t x t' c)). Qed.
Lemma lem8396778 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8396779 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term374 A C P clauses s s' t t' c) = (term374 A C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8396778 P) (@lem8396777 A C P clauses s s' t t' c)). Qed.
Lemma lem8396780 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term375 A C P clauses s s' t c) = (term375 A C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 A C P => @lem8396779 A C P clauses s s' t t' c)). Qed.
Lemma lem8396781 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8396782 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term376 A C P clauses s s' t c) = (term376 A C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8396781 A C P) (@lem8396780 A C P clauses s s' t c)). Qed.
Lemma lem8396783 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term377 A C P clauses s t c) = (term377 A C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8396782 A C P clauses s s' t c)). Qed.
Lemma lem8396784 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8396785 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term378 A C P clauses s t c) = (term378 A C P clauses s t c).
Proof. exact (MK_COMB (@lem8396784 A P) (@lem8396783 A C P clauses s t c)). Qed.
Lemma lem8396786 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term379 A C P clauses s c) = (term379 A C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8396785 A C P clauses s t c)). Qed.
Lemma lem8396787 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8396788 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term380 A C P clauses s c) = (term380 A C P clauses s c).
Proof. exact (MK_COMB (@lem8396787 A C P) (@lem8396786 A C P clauses s c)). Qed.
Lemma lem8396789 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term381 A C P clauses c) = (term381 A C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8396788 A C P clauses s c)). Qed.
Lemma lem8396790 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8396791 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term382 A C P clauses c) = (term382 A C P clauses c).
Proof. exact (MK_COMB (@lem8396790 A P) (@lem8396789 A C P clauses c)). Qed.
Lemma lem8396792 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8396793 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term383 A C P clauses c) = (term383 A C P clauses c).
Proof. exact (MK_COMB (@lem8396792) (@lem8396791 A C P clauses c)). Qed.
Lemma lem8396794 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term529 A C P _115315 c clauses) = (term529 A C P _115315 c clauses).
Proof. exact (MK_COMB (@lem8396793 A C P clauses c) (@lem8396724 A C P _115315 c clauses)). Qed.
Lemma lem8396795 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term530 A C P _115315 clauses) = (term530 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8396794 A C P _115315 c clauses)). Qed.
Lemma lem8396796 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8396797 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term531 A C P _115315 clauses) = (term531 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8396796 C) (@lem8396795 A C P _115315 clauses)). Qed.
Lemma lem8396798 {A C P : Type'} (_115315 : type1092 A C P) : (term532 A C P _115315) = (term532 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8396797 A C P _115315 clauses)). Qed.
Lemma lem8396799 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8396800 {A C P : Type'} (_115315 : type1092 A C P) : (term533 A C P _115315) = (term533 A C P _115315).
Proof. exact (MK_COMB (@lem8396799 A C P) (@lem8396798 A C P _115315)). Qed.
Lemma lem8396801 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8396802 {A C P : Type'} (_115315 : type1092 A C P) : (term534 A C P _115315) = (term534 A C P _115315).
Proof. exact (MK_COMB (@lem8396801) (@lem8396800 A C P _115315)). Qed.
Lemma lem8396803 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term695 A B C P _115315 _115316 _115314 _115317) = (term753 A B C P _115315 _115316 _115314 _115317 _115318).
Proof. exact (MK_COMB (@lem8396802 A C P _115315) (@lem8396713 A B C P _115316 _115314 _115317 _115318 h1)). Qed.
Lemma lem8396818 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) : (term450 A B P _115314 f clauses) = (term450 A B P _115314 f clauses).
Proof. exact (eq_refl (term450 A B P _115314 f clauses)). Qed.
Lemma lem8396819 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term696 A B C P f clauses _115315 _115316 _115314 _115317) = (term754 A B C P f clauses _115315 _115316 _115314 _115317 _115318).
Proof. exact (MK_COMB (@lem8396818 A B P _115314 f clauses) (@lem8396803 A B C P _115315 _115316 _115314 _115317 _115318 h1)). Qed.
Lemma lem8396832 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (x : A) : ((f x) = (@CASEWISE B P A (A -> B) clauses f x)) = ((f x) = (@CASEWISE B P A (A -> B) clauses f x)).
Proof. exact (eq_refl ((f x) = (@CASEWISE B P A (A -> B) clauses f x))). Qed.
Lemma lem8396833 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term452 A B P clauses f) = (term452 A B P clauses f).
Proof. exact (fun_ext (fun x : A => @lem8396832 A B P clauses f x)). Qed.
Lemma lem8396834 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8396835 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term162 A B P clauses f) = (term162 A B P clauses f).
Proof. exact (MK_COMB (@lem8396834 A) (@lem8396833 A B P clauses f)). Qed.
Lemma lem8396836 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8396837 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term164 A B P clauses f) = (term164 A B P clauses f).
Proof. exact (MK_COMB (@lem8396836) (@lem8396835 A B P clauses f)). Qed.
Lemma lem8396838 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term697 A B C P f clauses _115315 _115316 _115314 _115317) = (term755 A B C P f clauses _115315 _115316 _115314 _115317 _115318).
Proof. exact (MK_COMB (@lem8396837 A B P clauses f) (@lem8396819 A B C P f clauses _115315 _115316 _115314 _115317 _115318 h1)). Qed.
Lemma lem8396887 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) (y : P) : (term115 A B P clauses s s' t x t' f y) = (term115 A B P clauses s s' t x t' f y).
Proof. exact (eq_refl (term115 A B P clauses s s' t x t' f y)). Qed.
Lemma lem8396888 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term118 A B P clauses s s' t x t' f) = (term118 A B P clauses s s' t x t' f).
Proof. exact (fun_ext (fun y : P => @lem8396887 A B P clauses s s' t x t' f y)). Qed.
Lemma lem8396889 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8396890 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term120 A B P clauses s s' t x t' f) = (term120 A B P clauses s s' t x t' f).
Proof. exact (MK_COMB (@lem8396889 P) (@lem8396888 A B P clauses s s' t x t' f)). Qed.
Lemma lem8396891 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term122 A B P clauses s s' t t' f) = (term122 A B P clauses s s' t t' f).
Proof. exact (fun_ext (fun x : P => @lem8396890 A B P clauses s s' t x t' f)). Qed.
Lemma lem8396892 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8396893 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term124 A B P clauses s s' t t' f) = (term124 A B P clauses s s' t t' f).
Proof. exact (MK_COMB (@lem8396892 P) (@lem8396891 A B P clauses s s' t t' f)). Qed.
Lemma lem8396894 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term126 A B P clauses s s' t t') = (term126 A B P clauses s s' t t').
Proof. exact (fun_ext (fun f : A -> B => @lem8396893 A B P clauses s s' t t' f)). Qed.
Lemma lem8396895 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8396896 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term128 A B P clauses s s' t t') = (term128 A B P clauses s s' t t').
Proof. exact (MK_COMB (@lem8396895 A B) (@lem8396894 A B P clauses s s' t t')). Qed.
Lemma lem8396897 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term130 A B P clauses s s' t) = (term130 A B P clauses s s' t).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8396896 A B P clauses s s' t t')). Qed.
Lemma lem8396898 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8396899 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term132 A B P clauses s s' t) = (term132 A B P clauses s s' t).
Proof. exact (MK_COMB (@lem8396898 A B P) (@lem8396897 A B P clauses s s' t)). Qed.
Lemma lem8396900 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term134 A B P clauses s t) = (term134 A B P clauses s t).
Proof. exact (fun_ext (fun s' : P -> A => @lem8396899 A B P clauses s s' t)). Qed.
Lemma lem8396901 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8396902 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term136 A B P clauses s t) = (term136 A B P clauses s t).
Proof. exact (MK_COMB (@lem8396901 A P) (@lem8396900 A B P clauses s t)). Qed.
Lemma lem8396903 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term138 A B P clauses s) = (term138 A B P clauses s).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8396902 A B P clauses s t)). Qed.
Lemma lem8396904 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8396905 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term140 A B P clauses s) = (term140 A B P clauses s).
Proof. exact (MK_COMB (@lem8396904 A B P) (@lem8396903 A B P clauses s)). Qed.
Lemma lem8396906 {A B P : Type'} (clauses : type1635 A B P) : (term142 A B P clauses) = (term142 A B P clauses).
Proof. exact (fun_ext (fun s : P -> A => @lem8396905 A B P clauses s)). Qed.
Lemma lem8396907 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8396908 {A B P : Type'} (clauses : type1635 A B P) : (term144 A B P clauses) = (term144 A B P clauses).
Proof. exact (MK_COMB (@lem8396907 A P) (@lem8396906 A B P clauses)). Qed.
Lemma lem8396909 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8396910 {A B P : Type'} (clauses : type1635 A B P) : (term248 A B P clauses) = (term248 A B P clauses).
Proof. exact (MK_COMB (@lem8396909) (@lem8396908 A B P clauses)). Qed.
Lemma lem8396911 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term698 A B C P f clauses _115315 _115316 _115314 _115317) = (term756 A B C P f clauses _115315 _115316 _115314 _115317 _115318).
Proof. exact (MK_COMB (@lem8396910 A B P clauses) (@lem8396838 A B C P f clauses _115315 _115316 _115314 _115317 _115318 h1)). Qed.
Lemma lem8396912 {A B C P : Type'} (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term699 A B C P clauses _115315 _115316 _115314 _115317) = (term757 A B C P clauses _115315 _115316 _115314 _115317 _115318).
Proof. exact (fun_ext (fun f : A -> B => @lem8396911 A B C P f clauses _115315 _115316 _115314 _115317 _115318 h1)). Qed.
Lemma lem8396913 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8396914 {A B C P : Type'} (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term700 A B C P clauses _115315 _115316 _115314 _115317) = (term758 A B C P clauses _115315 _115316 _115314 _115317 _115318).
Proof. exact (MK_COMB (@lem8396913 A B) (@lem8396912 A B C P clauses _115315 _115316 _115314 _115317 _115318 h1)). Qed.
Lemma lem8396915 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term701 A B C P _115315 _115316 _115314 _115317) = (term759 A B C P _115315 _115316 _115314 _115317 _115318).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8396914 A B C P clauses _115315 _115316 _115314 _115317 _115318 h1)). Qed.
Lemma lem8396916 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8396917 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term702 A B C P _115315 _115316 _115314 _115317) = (term760 A B C P _115315 _115316 _115314 _115317 _115318).
Proof. exact (MK_COMB (@lem8396916 A B P) (@lem8396915 A B C P _115315 _115316 _115314 _115317 _115318 h1)). Qed.
Lemma lem8396934 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f : A -> B) (x : P) : ((term186 A B P clauses f s x) = (t f x)) = ((term186 A B P clauses f s x) = (t f x)).
Proof. exact (eq_refl ((term186 A B P clauses f s x) = (t f x))). Qed.
Lemma lem8396935 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f : A -> B) : (term190 A B P clauses s t f) = (term190 A B P clauses s t f).
Proof. exact (fun_ext (fun x : P => @lem8396934 A B P clauses s t f x)). Qed.
Lemma lem8396936 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8396937 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f : A -> B) : (term192 A B P clauses s t f) = (term192 A B P clauses s t f).
Proof. exact (MK_COMB (@lem8396936 P) (@lem8396935 A B P clauses s t f)). Qed.
Lemma lem8396946 {A B P : Type'} (f : type1177 A B P) (s : P -> A) (t : type558 A B P) : (term193 A B P f s t) = (term193 A B P f s t).
Proof. exact (eq_refl (term193 A B P f s t)). Qed.
Lemma lem8396947 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f' : A -> B) : (term195 A B P f clauses s t f') = (term195 A B P f clauses s t f').
Proof. exact (MK_COMB (@lem8396946 A B P f s t) (@lem8396937 A B P clauses s t f')). Qed.
Lemma lem8396948 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term197 A B P f clauses s f') = (term197 A B P f clauses s f').
Proof. exact (fun_ext (fun t : type558 A B P => @lem8396947 A B P f clauses s t f')). Qed.
Lemma lem8396949 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8396950 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term199 A B P f clauses s f') = (term199 A B P f clauses s f').
Proof. exact (MK_COMB (@lem8396949 A B P) (@lem8396948 A B P f clauses s f')). Qed.
Lemma lem8396951 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term201 A B P f clauses f') = (term201 A B P f clauses f').
Proof. exact (fun_ext (fun s : P -> A => @lem8396950 A B P f clauses s f')). Qed.
Lemma lem8396952 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8396953 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term203 A B P f clauses f') = (term203 A B P f clauses f').
Proof. exact (MK_COMB (@lem8396952 A P) (@lem8396951 A B P f clauses f')). Qed.
Lemma lem8396962 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) (f' : type1177 A B P) : (term508 A B P _115314 clauses f f') = (term508 A B P _115314 clauses f f').
Proof. exact (eq_refl (term508 A B P _115314 clauses f f')). Qed.
Lemma lem8396963 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : ((_115314 clauses f' f) = (term203 A B P f clauses f')) = ((_115314 clauses f' f) = (term203 A B P f clauses f')).
Proof. exact (MK_COMB (@lem8396962 A B P _115314 clauses f' f) (@lem8396953 A B P f clauses f')). Qed.
Lemma lem8396964 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term510 A B P _115314 clauses f) = (term510 A B P _115314 clauses f).
Proof. exact (fun_ext (fun f' : type1177 A B P => @lem8396963 A B P _115314 f' clauses f)). Qed.
Lemma lem8396965 {A B P : Type'} : (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) = (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop))). Qed.
Lemma lem8396966 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term511 A B P _115314 clauses f) = (term511 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8396965 A B P) (@lem8396964 A B P _115314 clauses f)). Qed.
Lemma lem8396967 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term512 A B P _115314 clauses) = (term512 A B P _115314 clauses).
Proof. exact (fun_ext (fun f : A -> B => @lem8396966 A B P _115314 clauses f)). Qed.
Lemma lem8396968 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8396969 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term513 A B P _115314 clauses) = (term513 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8396968 A B) (@lem8396967 A B P _115314 clauses)). Qed.
Lemma lem8396970 {A B P : Type'} (_115314 : type1080 A B P) : (term514 A B P _115314) = (term514 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8396969 A B P _115314 clauses)). Qed.
Lemma lem8396971 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8396972 {A B P : Type'} (_115314 : type1080 A B P) : (term515 A B P _115314) = (term515 A B P _115314).
Proof. exact (MK_COMB (@lem8396971 A B P) (@lem8396970 A B P _115314)). Qed.
Lemma lem8396973 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8396974 {A B P : Type'} (_115314 : type1080 A B P) : (term516 A B P _115314) = (term516 A B P _115314).
Proof. exact (MK_COMB (@lem8396973) (@lem8396972 A B P _115314)). Qed.
Lemma lem8396975 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term703 A B C P _115315 _115316 _115314 _115317) = (term761 A B C P _115315 _115316 _115314 _115317 _115318).
Proof. exact (MK_COMB (@lem8396974 A B P _115314) (@lem8396917 A B C P _115315 _115316 _115314 _115317 _115318 h1)). Qed.
Lemma lem8396976 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term704 A B C P _115315 _115316 _115317) = (term762 A B C P _115315 _115316 _115317 _115318).
Proof. exact (fun_ext (fun _115314 : type1080 A B P => @lem8396975 A B C P _115315 _115316 _115314 _115317 _115318 h1)). Qed.
Lemma lem8396977 {A B P : Type'} : (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8396978 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term705 A B C P _115315 _115316 _115317) = (term763 A B C P _115315 _115316 _115317 _115318).
Proof. exact (MK_COMB (@lem8396977 A B P) (@lem8396976 A B C P _115315 _115316 _115317 _115318 h1)). Qed.
Lemma lem8396995 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) (x : P) : ((term357 A C P clauses c s x) = (t c x)) = ((term357 A C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term357 A C P clauses c s x) = (t c x))). Qed.
Lemma lem8396996 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term358 A C P clauses s t c) = (term358 A C P clauses s t c).
Proof. exact (fun_ext (fun x : P => @lem8396995 A C P clauses s t c x)). Qed.
Lemma lem8396997 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8396998 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term359 A C P clauses s t c) = (term359 A C P clauses s t c).
Proof. exact (MK_COMB (@lem8396997 P) (@lem8396996 A C P clauses s t c)). Qed.
Lemma lem8397007 {A C P : Type'} (f : type1178 A C P) (s : P -> A) (t : type1475 A C P) : (term360 A C P f s t) = (term360 A C P f s t).
Proof. exact (eq_refl (term360 A C P f s t)). Qed.
Lemma lem8397008 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term361 A C P f clauses s t c) = (term361 A C P f clauses s t c).
Proof. exact (MK_COMB (@lem8397007 A C P f s t) (@lem8396998 A C P clauses s t c)). Qed.
Lemma lem8397009 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term362 A C P f clauses s c) = (term362 A C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8397008 A C P f clauses s t c)). Qed.
Lemma lem8397010 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8397011 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term363 A C P f clauses s c) = (term363 A C P f clauses s c).
Proof. exact (MK_COMB (@lem8397010 A C P) (@lem8397009 A C P f clauses s c)). Qed.
Lemma lem8397012 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term364 A C P f clauses c) = (term364 A C P f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8397011 A C P f clauses s c)). Qed.
Lemma lem8397013 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8397014 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term365 A C P f clauses c) = (term365 A C P f clauses c).
Proof. exact (MK_COMB (@lem8397013 A P) (@lem8397012 A C P f clauses c)). Qed.
Lemma lem8397023 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) (f : type1178 A C P) : (term592 A C P _115315 clauses c f) = (term592 A C P _115315 clauses c f).
Proof. exact (eq_refl (term592 A C P _115315 clauses c f)). Qed.
Lemma lem8397024 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : ((_115315 clauses c f) = (term365 A C P f clauses c)) = ((_115315 clauses c f) = (term365 A C P f clauses c)).
Proof. exact (MK_COMB (@lem8397023 A C P _115315 clauses c f) (@lem8397014 A C P f clauses c)). Qed.
Lemma lem8397025 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term594 A C P _115315 clauses c) = (term594 A C P _115315 clauses c).
Proof. exact (fun_ext (fun f : type1178 A C P => @lem8397024 A C P _115315 f clauses c)). Qed.
Lemma lem8397026 {A C P : Type'} : (@all ((prod (P -> A) (C -> P -> A)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> A)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> A)) -> Prop))). Qed.
Lemma lem8397027 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term595 A C P _115315 clauses c) = (term595 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8397026 A C P) (@lem8397025 A C P _115315 clauses c)). Qed.
Lemma lem8397028 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term596 A C P _115315 clauses) = (term596 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8397027 A C P _115315 clauses c)). Qed.
Lemma lem8397029 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8397030 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term597 A C P _115315 clauses) = (term597 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8397029 C) (@lem8397028 A C P _115315 clauses)). Qed.
Lemma lem8397031 {A C P : Type'} (_115315 : type1092 A C P) : (term598 A C P _115315) = (term598 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8397030 A C P _115315 clauses)). Qed.
Lemma lem8397032 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8397033 {A C P : Type'} (_115315 : type1092 A C P) : (term599 A C P _115315) = (term599 A C P _115315).
Proof. exact (MK_COMB (@lem8397032 A C P) (@lem8397031 A C P _115315)). Qed.
Lemma lem8397034 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8397035 {A C P : Type'} (_115315 : type1092 A C P) : (term600 A C P _115315) = (term600 A C P _115315).
Proof. exact (MK_COMB (@lem8397034) (@lem8397033 A C P _115315)). Qed.
Lemma lem8397036 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term706 A B C P _115315 _115316 _115317) = (term764 A B C P _115315 _115316 _115317 _115318).
Proof. exact (MK_COMB (@lem8397035 A C P _115315) (@lem8396978 A B C P _115315 _115316 _115317 _115318 h1)). Qed.
Lemma lem8397037 {A B C P : Type'} (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term707 A B C P _115316 _115317) = (term765 A B C P _115316 _115317 _115318).
Proof. exact (fun_ext (fun _115315 : type1092 A C P => @lem8397036 A B C P _115315 _115316 _115317 _115318 h1)). Qed.
Lemma lem8397038 {A C P : Type'} : (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop))). Qed.
Lemma lem8397039 {A B C P : Type'} (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term708 A B C P _115316 _115317) = (term766 A B C P _115316 _115317 _115318).
Proof. exact (MK_COMB (@lem8397038 A C P) (@lem8397037 A B C P _115316 _115317 _115318 h1)). Qed.
Lemma lem8397056 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) (x : P) : ((term416 A B C P clauses c s x) = (t c x)) = ((term416 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term416 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8397057 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term417 A B C P clauses s t c) = (term417 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : P => @lem8397056 A B C P clauses s t c x)). Qed.
Lemma lem8397058 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8397059 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term418 A B C P clauses s t c) = (term418 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8397058 P) (@lem8397057 A B C P clauses s t c)). Qed.
Lemma lem8397068 {A B C P : Type'} (f : type1185 A B C P) (s : P -> A) (t : type1475 B C P) : (term419 A B C P f s t) = (term419 A B C P f s t).
Proof. exact (eq_refl (term419 A B C P f s t)). Qed.
Lemma lem8397069 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term420 A B C P f clauses s t c) = (term420 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8397068 A B C P f s t) (@lem8397059 A B C P clauses s t c)). Qed.
Lemma lem8397070 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term421 A B C P f clauses s c) = (term421 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8397069 A B C P f clauses s t c)). Qed.
Lemma lem8397071 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8397072 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term422 A B C P f clauses s c) = (term422 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8397071 B C P) (@lem8397070 A B C P f clauses s c)). Qed.
Lemma lem8397073 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term423 A B C P f clauses c) = (term423 A B C P f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8397072 A B C P f clauses s c)). Qed.
Lemma lem8397074 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8397075 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term424 A B C P f clauses c) = (term424 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8397074 A P) (@lem8397073 A B C P f clauses c)). Qed.
Lemma lem8397084 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) (f : type1185 A B C P) : (term680 A B C P _115316 clauses c f) = (term680 A B C P _115316 clauses c f).
Proof. exact (eq_refl (term680 A B C P _115316 clauses c f)). Qed.
Lemma lem8397085 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : ((_115316 clauses c f) = (term424 A B C P f clauses c)) = ((_115316 clauses c f) = (term424 A B C P f clauses c)).
Proof. exact (MK_COMB (@lem8397084 A B C P _115316 clauses c f) (@lem8397075 A B C P f clauses c)). Qed.
Lemma lem8397086 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term682 A B C P _115316 clauses c) = (term682 A B C P _115316 clauses c).
Proof. exact (fun_ext (fun f : type1185 A B C P => @lem8397085 A B C P _115316 f clauses c)). Qed.
Lemma lem8397087 {A B C P : Type'} : (@all ((prod (P -> A) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8397088 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term683 A B C P _115316 clauses c) = (term683 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8397087 A B C P) (@lem8397086 A B C P _115316 clauses c)). Qed.
Lemma lem8397089 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term684 A B C P _115316 clauses) = (term684 A B C P _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8397088 A B C P _115316 clauses c)). Qed.
Lemma lem8397090 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8397091 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term685 A B C P _115316 clauses) = (term685 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8397090 C) (@lem8397089 A B C P _115316 clauses)). Qed.
Lemma lem8397092 {A B C P : Type'} (_115316 : type1115 A B C P) : (term686 A B C P _115316) = (term686 A B C P _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8397091 A B C P _115316 clauses)). Qed.
Lemma lem8397093 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8397094 {A B C P : Type'} (_115316 : type1115 A B C P) : (term687 A B C P _115316) = (term687 A B C P _115316).
Proof. exact (MK_COMB (@lem8397093 A B C P) (@lem8397092 A B C P _115316)). Qed.
Lemma lem8397095 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8397096 {A B C P : Type'} (_115316 : type1115 A B C P) : (term688 A B C P _115316) = (term688 A B C P _115316).
Proof. exact (MK_COMB (@lem8397095) (@lem8397094 A B C P _115316)). Qed.
Lemma lem8397097 {A B C P : Type'} (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term709 A B C P _115316 _115317) = (term767 A B C P _115316 _115317 _115318).
Proof. exact (MK_COMB (@lem8397096 A B C P _115316) (@lem8397039 A B C P _115316 _115317 _115318 h1)). Qed.
Lemma lem8397098 {A B C P : Type'} (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term710 A B C P _115317) = (term768 A B C P _115317 _115318).
Proof. exact (fun_ext (fun _115316 : type1115 A B C P => @lem8397097 A B C P _115316 _115317 _115318 h1)). Qed.
Lemma lem8397099 {A B C P : Type'} : (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8397100 {A B C P : Type'} (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term711 A B C P _115317) = (term769 A B C P _115317 _115318).
Proof. exact (MK_COMB (@lem8397099 A B C P) (@lem8397098 A B C P _115317 _115318 h1)). Qed.
Lemma lem8397117 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) (x : P) : ((term357 B C P clauses c s x) = (t c x)) = ((term357 B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term357 B C P clauses c s x) = (t c x))). Qed.
Lemma lem8397118 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term358 B C P clauses s t c) = (term358 B C P clauses s t c).
Proof. exact (fun_ext (fun x : P => @lem8397117 B C P clauses s t c x)). Qed.
Lemma lem8397119 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8397120 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term359 B C P clauses s t c) = (term359 B C P clauses s t c).
Proof. exact (MK_COMB (@lem8397119 P) (@lem8397118 B C P clauses s t c)). Qed.
Lemma lem8397129 {B C P : Type'} (f : type1178 B C P) (s : P -> B) (t : type1475 B C P) : (term360 B C P f s t) = (term360 B C P f s t).
Proof. exact (eq_refl (term360 B C P f s t)). Qed.
Lemma lem8397130 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term361 B C P f clauses s t c) = (term361 B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8397129 B C P f s t) (@lem8397120 B C P clauses s t c)). Qed.
Lemma lem8397131 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term362 B C P f clauses s c) = (term362 B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8397130 B C P f clauses s t c)). Qed.
Lemma lem8397132 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8397133 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term363 B C P f clauses s c) = (term363 B C P f clauses s c).
Proof. exact (MK_COMB (@lem8397132 B C P) (@lem8397131 B C P f clauses s c)). Qed.
Lemma lem8397134 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term364 B C P f clauses c) = (term364 B C P f clauses c).
Proof. exact (fun_ext (fun s : P -> B => @lem8397133 B C P f clauses s c)). Qed.
Lemma lem8397135 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8397136 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term365 B C P f clauses c) = (term365 B C P f clauses c).
Proof. exact (MK_COMB (@lem8397135 B P) (@lem8397134 B C P f clauses c)). Qed.
Lemma lem8397145 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) (f : type1178 B C P) : (term592 B C P _115317 clauses c f) = (term592 B C P _115317 clauses c f).
Proof. exact (eq_refl (term592 B C P _115317 clauses c f)). Qed.
Lemma lem8397146 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : ((_115317 clauses c f) = (term365 B C P f clauses c)) = ((_115317 clauses c f) = (term365 B C P f clauses c)).
Proof. exact (MK_COMB (@lem8397145 B C P _115317 clauses c f) (@lem8397136 B C P f clauses c)). Qed.
Lemma lem8397147 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term594 B C P _115317 clauses c) = (term594 B C P _115317 clauses c).
Proof. exact (fun_ext (fun f : type1178 B C P => @lem8397146 B C P _115317 f clauses c)). Qed.
Lemma lem8397148 {B C P : Type'} : (@all ((prod (P -> B) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> B) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> B) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8397149 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term595 B C P _115317 clauses c) = (term595 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8397148 B C P) (@lem8397147 B C P _115317 clauses c)). Qed.
Lemma lem8397150 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term596 B C P _115317 clauses) = (term596 B C P _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8397149 B C P _115317 clauses c)). Qed.
Lemma lem8397151 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8397152 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term597 B C P _115317 clauses) = (term597 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8397151 C) (@lem8397150 B C P _115317 clauses)). Qed.
Lemma lem8397153 {B C P : Type'} (_115317 : type1092 B C P) : (term598 B C P _115317) = (term598 B C P _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8397152 B C P _115317 clauses)). Qed.
Lemma lem8397154 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8397155 {B C P : Type'} (_115317 : type1092 B C P) : (term599 B C P _115317) = (term599 B C P _115317).
Proof. exact (MK_COMB (@lem8397154 B C P) (@lem8397153 B C P _115317)). Qed.
Lemma lem8397156 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8397157 {B C P : Type'} (_115317 : type1092 B C P) : (term600 B C P _115317) = (term600 B C P _115317).
Proof. exact (MK_COMB (@lem8397156) (@lem8397155 B C P _115317)). Qed.
Lemma lem8397158 {A B C P : Type'} (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term731 A B C P _115317) = (term770 A B C P _115317 _115318).
Proof. exact (MK_COMB (@lem8397157 B C P _115317) (@lem8397100 A B C P _115317 _115318 h1)). Qed.
Lemma lem8397159 {A B C P : Type'} (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term732 A B C P) = (term771 A B C P _115318).
Proof. exact (fun_ext (fun _115317 : type1092 B C P => @lem8397158 A B C P _115317 _115318 h1)). Qed.
Lemma lem8397160 {B C P : Type'} : (@all ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8397161 {A B C P : Type'} (_115318 : type1049 A B C P) (h1 : _115318 = (term734 A B C P)) : (term733 A B C P) = (term772 A B C P _115318).
Proof. exact (MK_COMB (@lem8397160 B C P) (@lem8397159 A B C P _115318 h1)). Qed.
Lemma lem8397162 {A B C P : Type'} (_115318 : type1049 A B C P) : term773 A B C P _115318.
Proof. exact (fun h0 : _115318 = (term734 A B C P) => @lem8397161 A B C P _115318 h0). Qed.
Lemma lem8397163 {A B C P : Type'} : term774 A B C P.
Proof. exact (fun _115318 : type1049 A B C P => @lem8397162 A B C P _115318). Qed.
Lemma lem8397165 {_3603 : Type'} (P : Prop) (c : _3603) (Q : _3603 -> Prop) : term461 _3603 P c Q.
Proof. exact (EQ_MP (@lem20230 _3603 P c Q) (@lem0)). Qed.
Lemma lem8397166 {A B C P : Type'} (P' : Prop) (c : type1049 A B C P) (Q : type263 A B C P) : term775 A B C P P' c Q.
Proof. exact (@lem8397165 (type1049 A B C P) P' c Q). Qed.
Lemma lem8397167 {A B C P : Type'} : term776 A B C P.
Proof. exact (@lem8397166 A B C P (term733 A B C P) (term734 A B C P) (term777 A B C P)). Qed.
Lemma lem8397168 {A B C P : Type'} (_115318 : type1049 A B C P) : (term778 A B C P _115318) = (term772 A B C P _115318).
Proof. exact (eq_refl (term778 A B C P _115318)). Qed.
Lemma lem8397169 {A B C P : Type'} : (term779 A B C P) = (term779 A B C P).
Proof. exact (eq_refl (term779 A B C P)). Qed.
Lemma lem8397170 {A B C P : Type'} (_115318 : type1049 A B C P) : ((term733 A B C P) = (term778 A B C P _115318)) = ((term733 A B C P) = (term772 A B C P _115318)).
Proof. exact (MK_COMB (@lem8397169 A B C P) (@lem8397168 A B C P _115318)). Qed.
Lemma lem8397171 {A B C P : Type'} (_115318 : type1049 A B C P) : (term780 A B C P _115318) = (term780 A B C P _115318).
Proof. exact (eq_refl (term780 A B C P _115318)). Qed.
Lemma lem8397172 {A B C P : Type'} (_115318 : type1049 A B C P) : (term781 A B C P _115318) = (term773 A B C P _115318).
Proof. exact (MK_COMB (@lem8397171 A B C P _115318) (@lem8397170 A B C P _115318)). Qed.
Lemma lem8397173 {A B C P : Type'} : (term782 A B C P) = (term783 A B C P).
Proof. exact (fun_ext (fun _115318 : type1049 A B C P => @lem8397172 A B C P _115318)). Qed.
Lemma lem8397174 {A B C P : Type'} : (@all ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> Prop)) = (@all ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8397175 {A B C P : Type'} : (term784 A B C P) = (term774 A B C P).
Proof. exact (MK_COMB (@lem8397174 A B C P) (@lem8397173 A B C P)). Qed.
Lemma lem8397176 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8397177 {A B C P : Type'} : (term785 A B C P) = (term786 A B C P).
Proof. exact (MK_COMB (@lem8397176) (@lem8397175 A B C P)). Qed.
Lemma lem8397178 {A B C P : Type'} (_115318 : type1049 A B C P) : (term778 A B C P _115318) = (term772 A B C P _115318).
Proof. exact (eq_refl (term778 A B C P _115318)). Qed.
Lemma lem8397179 {A B C P : Type'} (_115318 : type1049 A B C P) : (term780 A B C P _115318) = (term780 A B C P _115318).
Proof. exact (eq_refl (term780 A B C P _115318)). Qed.
Lemma lem8397180 {A B C P : Type'} (_115318 : type1049 A B C P) : (term787 A B C P _115318) = (term788 A B C P _115318).
Proof. exact (MK_COMB (@lem8397179 A B C P _115318) (@lem8397178 A B C P _115318)). Qed.
Lemma lem8397181 {A B C P : Type'} : (term789 A B C P) = (term790 A B C P).
Proof. exact (fun_ext (fun _115318 : type1049 A B C P => @lem8397180 A B C P _115318)). Qed.
Lemma lem8397182 {A B C P : Type'} : (@all ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> Prop)) = (@all ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8397183 {A B C P : Type'} : (term791 A B C P) = (term792 A B C P).
Proof. exact (MK_COMB (@lem8397182 A B C P) (@lem8397181 A B C P)). Qed.
Lemma lem8397184 {A B C P : Type'} : (term779 A B C P) = (term779 A B C P).
Proof. exact (eq_refl (term779 A B C P)). Qed.
Lemma lem8397185 {A B C P : Type'} : ((term733 A B C P) = (term791 A B C P)) = ((term733 A B C P) = (term792 A B C P)).
Proof. exact (MK_COMB (@lem8397184 A B C P) (@lem8397183 A B C P)). Qed.
Lemma lem8397186 {A B C P : Type'} : (term776 A B C P) = (term793 A B C P).
Proof. exact (MK_COMB (@lem8397177 A B C P) (@lem8397185 A B C P)). Qed.
Lemma lem8397187 {A B C P : Type'} : term793 A B C P.
Proof. exact (EQ_MP (@lem8397186 A B C P) (@lem8397167 A B C P)). Qed.
Lemma lem8397188 {A B C P : Type'} : (term733 A B C P) = (term792 A B C P).
Proof. exact (@lem8397187 A B C P (@lem8397163 A B C P)). Qed.
Lemma lem8397190 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term481 _3571 _3575 t)) = (term482 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem8397191 {A B C P : Type'} (s : type1049 A B C P) (t : type1049 A B C P) : (s = (term794 A B C P t)) = (term795 A B C P s t).
Proof. exact (@lem8397190 (type1497 A B C P) (type1630 A B C P) s t). Qed.
Lemma lem8397192 {A B C P : Type'} (_115318 : type1049 A B C P) : (_115318 = (term796 A B C P)) = (term797 A B C P _115318).
Proof. exact (@lem8397191 A B C P _115318 (term734 A B C P)). Qed.
Lemma lem8397193 {A B C P : Type'} (clauses : type1630 A B C P) : (term735 A B C P clauses) = (term736 A B C P clauses).
Proof. exact (eq_refl (term735 A B C P clauses)). Qed.
Lemma lem8397194 {A B C P : Type'} : (term796 A B C P) = (term734 A B C P).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8397193 A B C P clauses)). Qed.
Lemma lem8397195 {A B C P : Type'} (_115318 : type1049 A B C P) : (@eq ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> Prop) _115318) = (@eq ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> Prop) _115318).
Proof. exact (eq_refl (@eq ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> Prop) _115318)). Qed.
Lemma lem8397196 {A B C P : Type'} (_115318 : type1049 A B C P) : (_115318 = (term796 A B C P)) = (_115318 = (term734 A B C P)).
Proof. exact (MK_COMB (@lem8397195 A B C P _115318) (@lem8397194 A B C P)). Qed.
Lemma lem8397197 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8397198 {A B C P : Type'} (_115318 : type1049 A B C P) : (term798 A B C P _115318) = (term799 A B C P _115318).
Proof. exact (MK_COMB (@lem8397197) (@lem8397196 A B C P _115318)). Qed.
Lemma lem8397199 {A B C P : Type'} (clauses : type1630 A B C P) : (term735 A B C P clauses) = (term736 A B C P clauses).
Proof. exact (eq_refl (term735 A B C P clauses)). Qed.
Lemma lem8397200 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term737 A B C P _115318 clauses) = (term737 A B C P _115318 clauses).
Proof. exact (eq_refl (term737 A B C P _115318 clauses)). Qed.
Lemma lem8397201 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : ((_115318 clauses) = (term735 A B C P clauses)) = ((_115318 clauses) = (term736 A B C P clauses)).
Proof. exact (MK_COMB (@lem8397200 A B C P _115318 clauses) (@lem8397199 A B C P clauses)). Qed.
Lemma lem8397202 {A B C P : Type'} (_115318 : type1049 A B C P) : (term800 A B C P _115318) = (term801 A B C P _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8397201 A B C P _115318 clauses)). Qed.
Lemma lem8397203 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8397204 {A B C P : Type'} (_115318 : type1049 A B C P) : (term797 A B C P _115318) = (term802 A B C P _115318).
Proof. exact (MK_COMB (@lem8397203 A B C P) (@lem8397202 A B C P _115318)). Qed.
Lemma lem8397205 {A B C P : Type'} (_115318 : type1049 A B C P) : ((_115318 = (term796 A B C P)) = (term797 A B C P _115318)) = ((_115318 = (term734 A B C P)) = (term802 A B C P _115318)).
Proof. exact (MK_COMB (@lem8397198 A B C P _115318) (@lem8397204 A B C P _115318)). Qed.
Lemma lem8397206 {A B C P : Type'} (_115318 : type1049 A B C P) : (_115318 = (term734 A B C P)) = (term802 A B C P _115318).
Proof. exact (EQ_MP (@lem8397205 A B C P _115318) (@lem8397192 A B C P _115318)). Qed.
Lemma lem8397208 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term481 _3571 _3575 t)) = (term482 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem8397209 {A B C P : Type'} (s : type1497 A B C P) (t : type1497 A B C P) : (s = (term803 A B C P t)) = (term804 A B C P s t).
Proof. exact (@lem8397208 (type290 A B C P) C s t). Qed.
Lemma lem8397210 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : ((_115318 clauses) = (term805 A B C P clauses)) = (term806 A B C P _115318 clauses).
Proof. exact (@lem8397209 A B C P (_115318 clauses) (term736 A B C P clauses)). Qed.
Lemma lem8397211 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term738 A B C P clauses c) = (term335 A B C P clauses c).
Proof. exact (eq_refl (term738 A B C P clauses c)). Qed.
Lemma lem8397212 {A B C P : Type'} (clauses : type1630 A B C P) : (term805 A B C P clauses) = (term736 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8397211 A B C P clauses c)). Qed.
Lemma lem8397213 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term737 A B C P _115318 clauses) = (term737 A B C P _115318 clauses).
Proof. exact (eq_refl (term737 A B C P _115318 clauses)). Qed.
Lemma lem8397214 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : ((_115318 clauses) = (term805 A B C P clauses)) = ((_115318 clauses) = (term736 A B C P clauses)).
Proof. exact (MK_COMB (@lem8397213 A B C P _115318 clauses) (@lem8397212 A B C P clauses)). Qed.
Lemma lem8397215 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8397216 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term807 A B C P _115318 clauses) = (term808 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8397215) (@lem8397214 A B C P _115318 clauses)). Qed.
Lemma lem8397217 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term738 A B C P clauses c) = (term335 A B C P clauses c).
Proof. exact (eq_refl (term738 A B C P clauses c)). Qed.
Lemma lem8397218 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term739 A B C P _115318 clauses c) = (term739 A B C P _115318 clauses c).
Proof. exact (eq_refl (term739 A B C P _115318 clauses c)). Qed.
Lemma lem8397219 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : ((_115318 clauses c) = (term738 A B C P clauses c)) = ((_115318 clauses c) = (term335 A B C P clauses c)).
Proof. exact (MK_COMB (@lem8397218 A B C P _115318 clauses c) (@lem8397217 A B C P clauses c)). Qed.
Lemma lem8397220 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term809 A B C P _115318 clauses) = (term810 A B C P _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8397219 A B C P _115318 clauses c)). Qed.
Lemma lem8397221 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8397222 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term806 A B C P _115318 clauses) = (term811 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8397221 C) (@lem8397220 A B C P _115318 clauses)). Qed.
Lemma lem8397223 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (((_115318 clauses) = (term805 A B C P clauses)) = (term806 A B C P _115318 clauses)) = (((_115318 clauses) = (term736 A B C P clauses)) = (term811 A B C P _115318 clauses)).
Proof. exact (MK_COMB (@lem8397216 A B C P _115318 clauses) (@lem8397222 A B C P _115318 clauses)). Qed.
Lemma lem8397224 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : ((_115318 clauses) = (term736 A B C P clauses)) = (term811 A B C P _115318 clauses).
Proof. exact (EQ_MP (@lem8397223 A B C P _115318 clauses) (@lem8397210 A B C P _115318 clauses)). Qed.
Lemma lem8397226 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term481 _3571 _3575 t)) = (term482 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem8397227 {A B C P : Type'} (s : type290 A B C P) (t : type290 A B C P) : (s = (term812 A B C P t)) = (term813 A B C P s t).
Proof. exact (@lem8397226 Prop (type1167 A B C P) s t). Qed.
Lemma lem8397228 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : ((_115318 clauses c) = (term814 A B C P clauses c)) = (term815 A B C P _115318 clauses c).
Proof. exact (@lem8397227 A B C P (_115318 clauses c) (term335 A B C P clauses c)). Qed.
Lemma lem8397229 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term816 A B C P clauses c f) = (term334 A B C P f clauses c).
Proof. exact (eq_refl (term816 A B C P clauses c f)). Qed.
Lemma lem8397230 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term814 A B C P clauses c) = (term335 A B C P clauses c).
Proof. exact (fun_ext (fun f : type1167 A B C P => @lem8397229 A B C P f clauses c)). Qed.
Lemma lem8397231 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term739 A B C P _115318 clauses c) = (term739 A B C P _115318 clauses c).
Proof. exact (eq_refl (term739 A B C P _115318 clauses c)). Qed.
Lemma lem8397232 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : ((_115318 clauses c) = (term814 A B C P clauses c)) = ((_115318 clauses c) = (term335 A B C P clauses c)).
Proof. exact (MK_COMB (@lem8397231 A B C P _115318 clauses c) (@lem8397230 A B C P clauses c)). Qed.
Lemma lem8397233 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8397234 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term817 A B C P _115318 clauses c) = (term818 A B C P _115318 clauses c).
Proof. exact (MK_COMB (@lem8397233) (@lem8397232 A B C P _115318 clauses c)). Qed.
Lemma lem8397235 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term816 A B C P clauses c f) = (term334 A B C P f clauses c).
Proof. exact (eq_refl (term816 A B C P clauses c f)). Qed.
Lemma lem8397236 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) (f : type1167 A B C P) : (term819 A B C P _115318 clauses c f) = (term819 A B C P _115318 clauses c f).
Proof. exact (eq_refl (term819 A B C P _115318 clauses c f)). Qed.
Lemma lem8397237 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : ((_115318 clauses c f) = (term816 A B C P clauses c f)) = ((_115318 clauses c f) = (term334 A B C P f clauses c)).
Proof. exact (MK_COMB (@lem8397236 A B C P _115318 clauses c f) (@lem8397235 A B C P f clauses c)). Qed.
Lemma lem8397238 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term820 A B C P _115318 clauses c) = (term821 A B C P _115318 clauses c).
Proof. exact (fun_ext (fun f : type1167 A B C P => @lem8397237 A B C P _115318 f clauses c)). Qed.
Lemma lem8397239 {A B C P : Type'} : (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)) = (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop))). Qed.
Lemma lem8397240 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term815 A B C P _115318 clauses c) = (term822 A B C P _115318 clauses c).
Proof. exact (MK_COMB (@lem8397239 A B C P) (@lem8397238 A B C P _115318 clauses c)). Qed.
Lemma lem8397241 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (((_115318 clauses c) = (term814 A B C P clauses c)) = (term815 A B C P _115318 clauses c)) = (((_115318 clauses c) = (term335 A B C P clauses c)) = (term822 A B C P _115318 clauses c)).
Proof. exact (MK_COMB (@lem8397234 A B C P _115318 clauses c) (@lem8397240 A B C P _115318 clauses c)). Qed.
Lemma lem8397242 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : ((_115318 clauses c) = (term335 A B C P clauses c)) = (term822 A B C P _115318 clauses c).
Proof. exact (EQ_MP (@lem8397241 A B C P _115318 clauses c) (@lem8397228 A B C P _115318 clauses c)). Qed.
Lemma lem8397243 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : ((_115318 clauses c f) = (term334 A B C P f clauses c)) = ((_115318 clauses c f) = (term334 A B C P f clauses c)).
Proof. exact (eq_refl ((_115318 clauses c f) = (term334 A B C P f clauses c))). Qed.
Lemma lem8397244 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term821 A B C P _115318 clauses c) = (term821 A B C P _115318 clauses c).
Proof. exact (fun_ext (fun f : type1167 A B C P => @lem8397243 A B C P _115318 f clauses c)). Qed.
Lemma lem8397245 {A B C P : Type'} : (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)) = (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop))). Qed.
Lemma lem8397246 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term822 A B C P _115318 clauses c) = (term822 A B C P _115318 clauses c).
Proof. exact (MK_COMB (@lem8397245 A B C P) (@lem8397244 A B C P _115318 clauses c)). Qed.
Lemma lem8397247 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : ((_115318 clauses c) = (term335 A B C P clauses c)) = (term822 A B C P _115318 clauses c).
Proof. exact (TRANS (@lem8397242 A B C P _115318 clauses c) (@lem8397246 A B C P _115318 clauses c)). Qed.
Lemma lem8397248 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term810 A B C P _115318 clauses) = (term823 A B C P _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8397247 A B C P _115318 clauses c)). Qed.
Lemma lem8397249 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8397250 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term811 A B C P _115318 clauses) = (term824 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8397249 C) (@lem8397248 A B C P _115318 clauses)). Qed.
Lemma lem8397251 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : ((_115318 clauses) = (term736 A B C P clauses)) = (term824 A B C P _115318 clauses).
Proof. exact (TRANS (@lem8397224 A B C P _115318 clauses) (@lem8397250 A B C P _115318 clauses)). Qed.
Lemma lem8397252 {A B C P : Type'} (_115318 : type1049 A B C P) : (term801 A B C P _115318) = (term825 A B C P _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8397251 A B C P _115318 clauses)). Qed.
Lemma lem8397253 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8397254 {A B C P : Type'} (_115318 : type1049 A B C P) : (term802 A B C P _115318) = (term826 A B C P _115318).
Proof. exact (MK_COMB (@lem8397253 A B C P) (@lem8397252 A B C P _115318)). Qed.
Lemma lem8397255 {A B C P : Type'} (_115318 : type1049 A B C P) : (_115318 = (term734 A B C P)) = (term826 A B C P _115318).
Proof. exact (TRANS (@lem8397206 A B C P _115318) (@lem8397254 A B C P _115318)). Qed.
Lemma lem8397256 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8397257 {A B C P : Type'} (_115318 : type1049 A B C P) : (term780 A B C P _115318) = (term827 A B C P _115318).
Proof. exact (MK_COMB (@lem8397256) (@lem8397255 A B C P _115318)). Qed.
Lemma lem8397258 {A B C P : Type'} (_115318 : type1049 A B C P) : (term772 A B C P _115318) = (term772 A B C P _115318).
Proof. exact (eq_refl (term772 A B C P _115318)). Qed.
Lemma lem8397259 {A B C P : Type'} (_115318 : type1049 A B C P) : (term788 A B C P _115318) = (term828 A B C P _115318).
Proof. exact (MK_COMB (@lem8397257 A B C P _115318) (@lem8397258 A B C P _115318)). Qed.
Lemma lem8397260 {A B C P : Type'} : (term790 A B C P) = (term829 A B C P).
Proof. exact (fun_ext (fun _115318 : type1049 A B C P => @lem8397259 A B C P _115318)). Qed.
Lemma lem8397261 {A B C P : Type'} : (@all ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> Prop)) = (@all ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8397262 {A B C P : Type'} : (term792 A B C P) = (term830 A B C P).
Proof. exact (MK_COMB (@lem8397261 A B C P) (@lem8397260 A B C P)). Qed.
Lemma lem8397263 {A B C P : Type'} : (term779 A B C P) = (term779 A B C P).
Proof. exact (eq_refl (term779 A B C P)). Qed.
Lemma lem8397264 {A B C P : Type'} : ((term733 A B C P) = (term792 A B C P)) = ((term733 A B C P) = (term830 A B C P)).
Proof. exact (MK_COMB (@lem8397263 A B C P) (@lem8397262 A B C P)). Qed.
Lemma lem8397265 {A B C P : Type'} : (term733 A B C P) = (term830 A B C P).
Proof. exact (EQ_MP (@lem8397264 A B C P) (@lem8397188 A B C P)). Qed.
Lemma lem8397266 {A B C P : Type'} (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : _115319 = (term831 A B C P).
Proof. exact (h1). Qed.
Lemma lem8397267 {A B C P : Type'} (clauses : type1631 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8397268 {A B C P : Type'} (clauses : type1631 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (_115319 clauses) = (term832 A B C P clauses).
Proof. exact (MK_COMB (@lem8397266 A B C P _115319 h1) (@lem8397267 A B C P clauses)). Qed.
Lemma lem8397269 {A B C P : Type'} (clauses : type1631 A B C P) : (term832 A B C P clauses) = (term833 A B C P clauses).
Proof. exact (eq_refl (term832 A B C P clauses)). Qed.
Lemma lem8397270 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term834 A B C P _115319 clauses) = (term834 A B C P _115319 clauses).
Proof. exact (eq_refl (term834 A B C P _115319 clauses)). Qed.
Lemma lem8397271 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : ((_115319 clauses) = (term832 A B C P clauses)) = ((_115319 clauses) = (term833 A B C P clauses)).
Proof. exact (MK_COMB (@lem8397270 A B C P _115319 clauses) (@lem8397269 A B C P clauses)). Qed.
Lemma lem8397272 {A B C P : Type'} (clauses : type1631 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (_115319 clauses) = (term833 A B C P clauses).
Proof. exact (EQ_MP (@lem8397271 A B C P _115319 clauses) (@lem8397268 A B C P clauses _115319 h1)). Qed.
Lemma lem8397273 {C : Type'} (c : C) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8397274 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (_115319 clauses c) = (term835 A B C P clauses c).
Proof. exact (MK_COMB (@lem8397272 A B C P clauses _115319 h1) (@lem8397273 C c)). Qed.
Lemma lem8397275 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term835 A B C P clauses c) = (term304 A B C P clauses c).
Proof. exact (eq_refl (term835 A B C P clauses c)). Qed.
Lemma lem8397276 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term836 A B C P _115319 clauses c) = (term836 A B C P _115319 clauses c).
Proof. exact (eq_refl (term836 A B C P _115319 clauses c)). Qed.
Lemma lem8397277 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : ((_115319 clauses c) = (term835 A B C P clauses c)) = ((_115319 clauses c) = (term304 A B C P clauses c)).
Proof. exact (MK_COMB (@lem8397276 A B C P _115319 clauses c) (@lem8397275 A B C P clauses c)). Qed.
Lemma lem8397278 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (_115319 clauses c) = (term304 A B C P clauses c).
Proof. exact (EQ_MP (@lem8397277 A B C P _115319 clauses c) (@lem8397274 A B C P clauses c _115319 h1)). Qed.
Lemma lem8397280 {A B C P : Type'} (clauses : type1629 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8397299 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) (x : type558 A B P) : ((term264 A B C P clauses c s x) = (t c x)) = ((term264 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term264 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8397300 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term265 A B C P clauses s t c) = (term265 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : type558 A B P => @lem8397299 A B C P clauses s t c x)). Qed.
Lemma lem8397301 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8397302 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term266 A B C P clauses s t c) = (term266 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8397301 A B P) (@lem8397300 A B C P clauses s t c)). Qed.
Lemma lem8397311 {A B C P : Type'} (f : type1166 A B C P) (s : type115 A B P) (t : type1490 A B C P) : (term267 A B C P f s t) = (term267 A B C P f s t).
Proof. exact (eq_refl (term267 A B C P f s t)). Qed.
Lemma lem8397312 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term268 A B C P f clauses s t c) = (term268 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8397311 A B C P f s t) (@lem8397302 A B C P clauses s t c)). Qed.
Lemma lem8397313 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term269 A B C P f clauses s c) = (term269 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8397312 A B C P f clauses s t c)). Qed.
Lemma lem8397314 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8397315 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term270 A B C P f clauses s c) = (term270 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8397314 A B C P) (@lem8397313 A B C P f clauses s c)). Qed.
Lemma lem8397316 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term271 A B C P f clauses c) = (term271 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8397315 A B C P f clauses s c)). Qed.
Lemma lem8397317 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8397318 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term272 A B C P f clauses c) = (term272 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8397317 A B P) (@lem8397316 A B C P f clauses c)). Qed.
Lemma lem8397319 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term273 A B C P clauses c) = (term273 A B C P clauses c).
Proof. exact (fun_ext (fun f : type1166 A B C P => @lem8397318 A B C P f clauses c)). Qed.
Lemma lem8397320 {A B C P : Type'} : (@GABS ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)) = (@GABS ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop))). Qed.
Lemma lem8397321 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term274 A B C P clauses c) = (term274 A B C P clauses c).
Proof. exact (MK_COMB (@lem8397320 A B C P) (@lem8397319 A B C P clauses c)). Qed.
Lemma lem8397322 {A B C P : Type'} : (@List.Forall (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) = (@List.Forall (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))).
Proof. exact (eq_refl (@List.Forall (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))). Qed.
Lemma lem8397323 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term275 A B C P clauses c) = (term275 A B C P clauses c).
Proof. exact (MK_COMB (@lem8397322 A B C P) (@lem8397321 A B C P clauses c)). Qed.
Lemma lem8397324 {A B C P : Type'} (c : C) (clauses : type1629 A B C P) : (term276 A B C P c clauses) = (term276 A B C P c clauses).
Proof. exact (MK_COMB (@lem8397323 A B C P clauses c) (@lem8397280 A B C P clauses)). Qed.
Lemma lem8397373 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) (y : type558 A B P) : (term277 A B C P clauses s s' t x t' c y) = (term277 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term277 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8397374 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term278 A B C P clauses s s' t x t' c) = (term278 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : type558 A B P => @lem8397373 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8397375 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8397376 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term279 A B C P clauses s s' t x t' c) = (term279 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8397375 A B P) (@lem8397374 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8397377 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term280 A B C P clauses s s' t t' c) = (term280 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : type558 A B P => @lem8397376 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8397378 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8397379 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term281 A B C P clauses s s' t t' c) = (term281 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8397378 A B P) (@lem8397377 A B C P clauses s s' t t' c)). Qed.
Lemma lem8397380 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term282 A B C P clauses s s' t c) = (term282 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1490 A B C P => @lem8397379 A B C P clauses s s' t t' c)). Qed.
Lemma lem8397381 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8397382 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term283 A B C P clauses s s' t c) = (term283 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8397381 A B C P) (@lem8397380 A B C P clauses s s' t c)). Qed.
Lemma lem8397383 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term284 A B C P clauses s t c) = (term284 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type115 A B P => @lem8397382 A B C P clauses s s' t c)). Qed.
Lemma lem8397384 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8397385 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term285 A B C P clauses s t c) = (term285 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8397384 A B P) (@lem8397383 A B C P clauses s t c)). Qed.
Lemma lem8397386 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term286 A B C P clauses s c) = (term286 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8397385 A B C P clauses s t c)). Qed.
Lemma lem8397387 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8397388 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term287 A B C P clauses s c) = (term287 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8397387 A B C P) (@lem8397386 A B C P clauses s c)). Qed.
Lemma lem8397389 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term288 A B C P clauses c) = (term288 A B C P clauses c).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8397388 A B C P clauses s c)). Qed.
Lemma lem8397390 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8397391 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term289 A B C P clauses c) = (term289 A B C P clauses c).
Proof. exact (MK_COMB (@lem8397390 A B P) (@lem8397389 A B C P clauses c)). Qed.
Lemma lem8397392 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8397393 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term290 A B C P clauses c) = (term290 A B C P clauses c).
Proof. exact (MK_COMB (@lem8397392) (@lem8397391 A B C P clauses c)). Qed.
Lemma lem8397394 {A B C P : Type'} (c : C) (clauses : type1629 A B C P) : (term291 A B C P c clauses) = (term291 A B C P c clauses).
Proof. exact (MK_COMB (@lem8397393 A B C P clauses c) (@lem8397324 A B C P c clauses)). Qed.
Lemma lem8397395 {A B C P : Type'} (clauses : type1629 A B C P) : (term292 A B C P clauses) = (term292 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8397394 A B C P c clauses)). Qed.
Lemma lem8397396 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8397397 {A B C P : Type'} (clauses : type1629 A B C P) : (term293 A B C P clauses) = (term293 A B C P clauses).
Proof. exact (MK_COMB (@lem8397396 C) (@lem8397395 A B C P clauses)). Qed.
Lemma lem8397398 {A B C P : Type'} : (term294 A B C P) = (term294 A B C P).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8397397 A B C P clauses)). Qed.
Lemma lem8397399 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8397400 {A B C P : Type'} : (term219 A B C P) = (term219 A B C P).
Proof. exact (MK_COMB (@lem8397399 A B C P) (@lem8397398 A B C P)). Qed.
Lemma lem8397401 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8397402 {A B C P : Type'} : (term225 A B C P) = (term225 A B C P).
Proof. exact (MK_COMB (@lem8397401) (@lem8397400 A B C P)). Qed.
Lemma lem8397403 {A B C P : Type'} (clauses : type1631 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8397405 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term304 A B C P clauses c) = (_115319 clauses c).
Proof. exact (SYM (@lem8397278 A B C P clauses c _115319 h1)). Qed.
Lemma lem8397406 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term304 A B C P clauses c) = (_115319 clauses c).
Proof. exact (@lem8397405 A B C P clauses c _115319 h1). Qed.
Lemma lem8397407 {A B C P : Type'} : (@GABS ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)) = (@GABS ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop))). Qed.
Lemma lem8397408 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term305 A B C P clauses c) = (term837 A B C P _115319 clauses c).
Proof. exact (MK_COMB (@lem8397407 A B C P) (@lem8397406 A B C P clauses c _115319 h1)). Qed.
Lemma lem8397409 {A B C P : Type'} : (@List.Forall (prod ((P -> A) -> A) (C -> (P -> A) -> B))) = (@List.Forall (prod ((P -> A) -> A) (C -> (P -> A) -> B))).
Proof. exact (eq_refl (@List.Forall (prod ((P -> A) -> A) (C -> (P -> A) -> B)))). Qed.
Lemma lem8397410 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term306 A B C P clauses c) = (term838 A B C P _115319 clauses c).
Proof. exact (MK_COMB (@lem8397409 A B C P) (@lem8397408 A B C P clauses c _115319 h1)). Qed.
Lemma lem8397411 {A B C P : Type'} (c : C) (clauses : type1631 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term307 A B C P c clauses) = (term839 A B C P _115319 c clauses).
Proof. exact (MK_COMB (@lem8397410 A B C P clauses c _115319 h1) (@lem8397403 A B C P clauses)). Qed.
Lemma lem8397460 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) (y : P -> A) : (term308 A B C P clauses s s' t x t' c y) = (term308 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term308 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8397461 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term309 A B C P clauses s s' t x t' c) = (term309 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P -> A => @lem8397460 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8397462 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8397463 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term310 A B C P clauses s s' t x t' c) = (term310 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8397462 A P) (@lem8397461 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8397464 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term311 A B C P clauses s s' t t' c) = (term311 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P -> A => @lem8397463 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8397465 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8397466 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term312 A B C P clauses s s' t t' c) = (term312 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8397465 A P) (@lem8397464 A B C P clauses s s' t t' c)). Qed.
Lemma lem8397467 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term313 A B C P clauses s s' t c) = (term313 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1512 A B C P => @lem8397466 A B C P clauses s s' t t' c)). Qed.
Lemma lem8397468 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8397469 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term314 A B C P clauses s s' t c) = (term314 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8397468 A B C P) (@lem8397467 A B C P clauses s s' t c)). Qed.
Lemma lem8397470 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term315 A B C P clauses s t c) = (term315 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type802 A P => @lem8397469 A B C P clauses s s' t c)). Qed.
Lemma lem8397471 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8397472 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term316 A B C P clauses s t c) = (term316 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8397471 A P) (@lem8397470 A B C P clauses s t c)). Qed.
Lemma lem8397473 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term317 A B C P clauses s c) = (term317 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8397472 A B C P clauses s t c)). Qed.
Lemma lem8397474 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8397475 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term318 A B C P clauses s c) = (term318 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8397474 A B C P) (@lem8397473 A B C P clauses s c)). Qed.
Lemma lem8397476 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term319 A B C P clauses c) = (term319 A B C P clauses c).
Proof. exact (fun_ext (fun s : type802 A P => @lem8397475 A B C P clauses s c)). Qed.
Lemma lem8397477 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8397478 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term320 A B C P clauses c) = (term320 A B C P clauses c).
Proof. exact (MK_COMB (@lem8397477 A P) (@lem8397476 A B C P clauses c)). Qed.
Lemma lem8397479 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8397480 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term321 A B C P clauses c) = (term321 A B C P clauses c).
Proof. exact (MK_COMB (@lem8397479) (@lem8397478 A B C P clauses c)). Qed.
Lemma lem8397481 {A B C P : Type'} (c : C) (clauses : type1631 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term322 A B C P c clauses) = (term840 A B C P _115319 c clauses).
Proof. exact (MK_COMB (@lem8397480 A B C P clauses c) (@lem8397411 A B C P c clauses _115319 h1)). Qed.
Lemma lem8397482 {A B C P : Type'} (clauses : type1631 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term323 A B C P clauses) = (term841 A B C P _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8397481 A B C P c clauses _115319 h1)). Qed.
Lemma lem8397483 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8397484 {A B C P : Type'} (clauses : type1631 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term324 A B C P clauses) = (term842 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8397483 C) (@lem8397482 A B C P clauses _115319 h1)). Qed.
Lemma lem8397485 {A B C P : Type'} (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term325 A B C P) = (term843 A B C P _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8397484 A B C P clauses _115319 h1)). Qed.
Lemma lem8397486 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8397487 {A B C P : Type'} (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term218 A B C P) = (term844 A B C P _115319).
Proof. exact (MK_COMB (@lem8397486 A B C P) (@lem8397485 A B C P _115319 h1)). Qed.
Lemma lem8397488 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8397489 {A B C P : Type'} (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term226 A B C P) = (term845 A B C P _115319).
Proof. exact (MK_COMB (@lem8397488) (@lem8397487 A B C P _115319 h1)). Qed.
Lemma lem8397490 {A B C P : Type'} (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term228 A B C P) = (term846 A B C P _115319).
Proof. exact (MK_COMB (@lem8397489 A B C P _115319 h1) (@lem8397402 A B C P)). Qed.
Lemma lem8397501 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term742 A B C P _115318 c clauses) = (term742 A B C P _115318 c clauses).
Proof. exact (eq_refl (term742 A B C P _115318 c clauses)). Qed.
Lemma lem8397550 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) (y : A -> B) : (term339 A B C P clauses s s' t x t' c y) = (term339 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term339 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8397551 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term340 A B C P clauses s s' t x t' c) = (term340 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : A -> B => @lem8397550 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8397552 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8397553 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term341 A B C P clauses s s' t x t' c) = (term341 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8397552 A B) (@lem8397551 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8397554 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term342 A B C P clauses s s' t t' c) = (term342 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : A -> B => @lem8397553 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8397555 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8397556 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term343 A B C P clauses s s' t t' c) = (term343 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8397555 A B) (@lem8397554 A B C P clauses s s' t t' c)). Qed.
Lemma lem8397557 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term344 A B C P clauses s s' t c) = (term344 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1506 A B C => @lem8397556 A B C P clauses s s' t t' c)). Qed.
Lemma lem8397558 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8397559 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term345 A B C P clauses s s' t c) = (term345 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8397558 A B C) (@lem8397557 A B C P clauses s s' t c)). Qed.
Lemma lem8397560 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term346 A B C P clauses s t c) = (term346 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type558 A B P => @lem8397559 A B C P clauses s s' t c)). Qed.
Lemma lem8397561 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8397562 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term347 A B C P clauses s t c) = (term347 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8397561 A B P) (@lem8397560 A B C P clauses s t c)). Qed.
Lemma lem8397563 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term348 A B C P clauses s c) = (term348 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8397562 A B C P clauses s t c)). Qed.
Lemma lem8397564 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8397565 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term349 A B C P clauses s c) = (term349 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8397564 A B C) (@lem8397563 A B C P clauses s c)). Qed.
Lemma lem8397566 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term350 A B C P clauses c) = (term350 A B C P clauses c).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8397565 A B C P clauses s c)). Qed.
Lemma lem8397567 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8397568 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term351 A B C P clauses c) = (term351 A B C P clauses c).
Proof. exact (MK_COMB (@lem8397567 A B P) (@lem8397566 A B C P clauses c)). Qed.
Lemma lem8397569 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8397570 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term352 A B C P clauses c) = (term352 A B C P clauses c).
Proof. exact (MK_COMB (@lem8397569) (@lem8397568 A B C P clauses c)). Qed.
Lemma lem8397571 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term743 A B C P _115318 c clauses) = (term743 A B C P _115318 c clauses).
Proof. exact (MK_COMB (@lem8397570 A B C P clauses c) (@lem8397501 A B C P _115318 c clauses)). Qed.
Lemma lem8397572 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term744 A B C P _115318 clauses) = (term744 A B C P _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8397571 A B C P _115318 c clauses)). Qed.
Lemma lem8397573 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8397574 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term745 A B C P _115318 clauses) = (term745 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8397573 C) (@lem8397572 A B C P _115318 clauses)). Qed.
Lemma lem8397575 {A B C P : Type'} (_115318 : type1049 A B C P) : (term746 A B C P _115318) = (term746 A B C P _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8397574 A B C P _115318 clauses)). Qed.
Lemma lem8397576 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8397577 {A B C P : Type'} (_115318 : type1049 A B C P) : (term747 A B C P _115318) = (term747 A B C P _115318).
Proof. exact (MK_COMB (@lem8397576 A B C P) (@lem8397575 A B C P _115318)). Qed.
Lemma lem8397578 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8397579 {A B C P : Type'} (_115318 : type1049 A B C P) : (term748 A B C P _115318) = (term748 A B C P _115318).
Proof. exact (MK_COMB (@lem8397578) (@lem8397577 A B C P _115318)). Qed.
Lemma lem8397580 {A B C P : Type'} (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term749 A B C P _115318) = (term847 A B C P _115318 _115319).
Proof. exact (MK_COMB (@lem8397579 A B C P _115318) (@lem8397490 A B C P _115319 h1)). Qed.
Lemma lem8397591 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term528 B C P _115317 c clauses) = (term528 B C P _115317 c clauses).
Proof. exact (eq_refl (term528 B C P _115317 c clauses)). Qed.
Lemma lem8397640 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term370 B C P clauses s s' t x t' c y) = (term370 B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term370 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8397641 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term371 B C P clauses s s' t x t' c) = (term371 B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8397640 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8397642 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8397643 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term372 B C P clauses s s' t x t' c) = (term372 B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8397642 P) (@lem8397641 B C P clauses s s' t x t' c)). Qed.
Lemma lem8397644 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term373 B C P clauses s s' t t' c) = (term373 B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8397643 B C P clauses s s' t x t' c)). Qed.
Lemma lem8397645 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8397646 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term374 B C P clauses s s' t t' c) = (term374 B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8397645 P) (@lem8397644 B C P clauses s s' t t' c)). Qed.
Lemma lem8397647 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term375 B C P clauses s s' t c) = (term375 B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8397646 B C P clauses s s' t t' c)). Qed.
Lemma lem8397648 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8397649 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term376 B C P clauses s s' t c) = (term376 B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8397648 B C P) (@lem8397647 B C P clauses s s' t c)). Qed.
Lemma lem8397650 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term377 B C P clauses s t c) = (term377 B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> B => @lem8397649 B C P clauses s s' t c)). Qed.
Lemma lem8397651 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8397652 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term378 B C P clauses s t c) = (term378 B C P clauses s t c).
Proof. exact (MK_COMB (@lem8397651 B P) (@lem8397650 B C P clauses s t c)). Qed.
Lemma lem8397653 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term379 B C P clauses s c) = (term379 B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8397652 B C P clauses s t c)). Qed.
Lemma lem8397654 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8397655 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term380 B C P clauses s c) = (term380 B C P clauses s c).
Proof. exact (MK_COMB (@lem8397654 B C P) (@lem8397653 B C P clauses s c)). Qed.
Lemma lem8397656 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term381 B C P clauses c) = (term381 B C P clauses c).
Proof. exact (fun_ext (fun s : P -> B => @lem8397655 B C P clauses s c)). Qed.
Lemma lem8397657 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8397658 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term382 B C P clauses c) = (term382 B C P clauses c).
Proof. exact (MK_COMB (@lem8397657 B P) (@lem8397656 B C P clauses c)). Qed.
Lemma lem8397659 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8397660 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term383 B C P clauses c) = (term383 B C P clauses c).
Proof. exact (MK_COMB (@lem8397659) (@lem8397658 B C P clauses c)). Qed.
Lemma lem8397661 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term529 B C P _115317 c clauses) = (term529 B C P _115317 c clauses).
Proof. exact (MK_COMB (@lem8397660 B C P clauses c) (@lem8397591 B C P _115317 c clauses)). Qed.
Lemma lem8397662 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term530 B C P _115317 clauses) = (term530 B C P _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8397661 B C P _115317 c clauses)). Qed.
Lemma lem8397663 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8397664 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term531 B C P _115317 clauses) = (term531 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8397663 C) (@lem8397662 B C P _115317 clauses)). Qed.
Lemma lem8397665 {B C P : Type'} (_115317 : type1092 B C P) : (term532 B C P _115317) = (term532 B C P _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8397664 B C P _115317 clauses)). Qed.
Lemma lem8397666 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8397667 {B C P : Type'} (_115317 : type1092 B C P) : (term533 B C P _115317) = (term533 B C P _115317).
Proof. exact (MK_COMB (@lem8397666 B C P) (@lem8397665 B C P _115317)). Qed.
Lemma lem8397668 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8397669 {B C P : Type'} (_115317 : type1092 B C P) : (term534 B C P _115317) = (term534 B C P _115317).
Proof. exact (MK_COMB (@lem8397668) (@lem8397667 B C P _115317)). Qed.
Lemma lem8397670 {A B C P : Type'} (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term750 A B C P _115317 _115318) = (term848 A B C P _115317 _115318 _115319).
Proof. exact (MK_COMB (@lem8397669 B C P _115317) (@lem8397580 A B C P _115318 _115319 h1)). Qed.
Lemma lem8397681 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 c clauses) = (term390 A B P _115314 c clauses).
Proof. exact (eq_refl (term390 A B P _115314 c clauses)). Qed.
Lemma lem8397730 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) (y : P) : (term391 A B P clauses s s' t x t' c y) = (term391 A B P clauses s s' t x t' c y).
Proof. exact (eq_refl (term391 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8397731 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term392 A B P clauses s s' t x t' c) = (term392 A B P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8397730 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8397732 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8397733 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term393 A B P clauses s s' t x t' c) = (term393 A B P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8397732 P) (@lem8397731 A B P clauses s s' t x t' c)). Qed.
Lemma lem8397734 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term394 A B P clauses s s' t t' c) = (term394 A B P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8397733 A B P clauses s s' t x t' c)). Qed.
Lemma lem8397735 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8397736 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term395 A B P clauses s s' t t' c) = (term395 A B P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8397735 P) (@lem8397734 A B P clauses s s' t t' c)). Qed.
Lemma lem8397737 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term396 A B P clauses s s' t c) = (term396 A B P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8397736 A B P clauses s s' t t' c)). Qed.
Lemma lem8397738 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8397739 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term397 A B P clauses s s' t c) = (term397 A B P clauses s s' t c).
Proof. exact (MK_COMB (@lem8397738 A B P) (@lem8397737 A B P clauses s s' t c)). Qed.
Lemma lem8397740 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term398 A B P clauses s t c) = (term398 A B P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8397739 A B P clauses s s' t c)). Qed.
Lemma lem8397741 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8397742 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term399 A B P clauses s t c) = (term399 A B P clauses s t c).
Proof. exact (MK_COMB (@lem8397741 A P) (@lem8397740 A B P clauses s t c)). Qed.
Lemma lem8397743 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term400 A B P clauses s c) = (term400 A B P clauses s c).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8397742 A B P clauses s t c)). Qed.
Lemma lem8397744 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8397745 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term401 A B P clauses s c) = (term401 A B P clauses s c).
Proof. exact (MK_COMB (@lem8397744 A B P) (@lem8397743 A B P clauses s c)). Qed.
Lemma lem8397746 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term402 A B P clauses c) = (term402 A B P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8397745 A B P clauses s c)). Qed.
Lemma lem8397747 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8397748 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term403 A B P clauses c) = (term403 A B P clauses c).
Proof. exact (MK_COMB (@lem8397747 A P) (@lem8397746 A B P clauses c)). Qed.
Lemma lem8397749 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8397750 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term404 A B P clauses c) = (term404 A B P clauses c).
Proof. exact (MK_COMB (@lem8397749) (@lem8397748 A B P clauses c)). Qed.
Lemma lem8397751 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term406 A B P _115314 c clauses) = (term406 A B P _115314 c clauses).
Proof. exact (MK_COMB (@lem8397750 A B P clauses c) (@lem8397681 A B P _115314 c clauses)). Qed.
Lemma lem8397752 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term408 A B P _115314 clauses) = (term408 A B P _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8397751 A B P _115314 c clauses)). Qed.
Lemma lem8397753 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8397754 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term410 A B P _115314 clauses) = (term410 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8397753 A B) (@lem8397752 A B P _115314 clauses)). Qed.
Lemma lem8397755 {A B P : Type'} (_115314 : type1080 A B P) : (term412 A B P _115314) = (term412 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8397754 A B P _115314 clauses)). Qed.
Lemma lem8397756 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8397757 {A B P : Type'} (_115314 : type1080 A B P) : (term413 A B P _115314) = (term413 A B P _115314).
Proof. exact (MK_COMB (@lem8397756 A B P) (@lem8397755 A B P _115314)). Qed.
Lemma lem8397758 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8397759 {A B P : Type'} (_115314 : type1080 A B P) : (term414 A B P _115314) = (term414 A B P _115314).
Proof. exact (MK_COMB (@lem8397758) (@lem8397757 A B P _115314)). Qed.
Lemma lem8397760 {A B C P : Type'} (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term751 A B C P _115314 _115317 _115318) = (term849 A B C P _115314 _115317 _115318 _115319).
Proof. exact (MK_COMB (@lem8397759 A B P _115314) (@lem8397670 A B C P _115317 _115318 _115319 h1)). Qed.
Lemma lem8397771 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term612 A B C P _115316 c clauses) = (term612 A B C P _115316 c clauses).
Proof. exact (eq_refl (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8397820 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term429 A B C P clauses s s' t x t' c y) = (term429 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term429 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8397821 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term430 A B C P clauses s s' t x t' c) = (term430 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8397820 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8397822 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8397823 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term431 A B C P clauses s s' t x t' c) = (term431 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8397822 P) (@lem8397821 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8397824 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term432 A B C P clauses s s' t t' c) = (term432 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8397823 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8397825 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8397826 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term433 A B C P clauses s s' t t' c) = (term433 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8397825 P) (@lem8397824 A B C P clauses s s' t t' c)). Qed.
Lemma lem8397827 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term434 A B C P clauses s s' t c) = (term434 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8397826 A B C P clauses s s' t t' c)). Qed.
Lemma lem8397828 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8397829 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term435 A B C P clauses s s' t c) = (term435 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8397828 B C P) (@lem8397827 A B C P clauses s s' t c)). Qed.
Lemma lem8397830 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term436 A B C P clauses s t c) = (term436 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8397829 A B C P clauses s s' t c)). Qed.
Lemma lem8397831 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8397832 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term437 A B C P clauses s t c) = (term437 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8397831 A P) (@lem8397830 A B C P clauses s t c)). Qed.
Lemma lem8397833 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term438 A B C P clauses s c) = (term438 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8397832 A B C P clauses s t c)). Qed.
Lemma lem8397834 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8397835 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term439 A B C P clauses s c) = (term439 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8397834 B C P) (@lem8397833 A B C P clauses s c)). Qed.
Lemma lem8397836 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term440 A B C P clauses c) = (term440 A B C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8397835 A B C P clauses s c)). Qed.
Lemma lem8397837 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8397838 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term441 A B C P clauses c) = (term441 A B C P clauses c).
Proof. exact (MK_COMB (@lem8397837 A P) (@lem8397836 A B C P clauses c)). Qed.
Lemma lem8397839 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8397840 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term442 A B C P clauses c) = (term442 A B C P clauses c).
Proof. exact (MK_COMB (@lem8397839) (@lem8397838 A B C P clauses c)). Qed.
Lemma lem8397841 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term613 A B C P _115316 c clauses) = (term613 A B C P _115316 c clauses).
Proof. exact (MK_COMB (@lem8397840 A B C P clauses c) (@lem8397771 A B C P _115316 c clauses)). Qed.
Lemma lem8397842 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term614 A B C P _115316 clauses) = (term614 A B C P _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8397841 A B C P _115316 c clauses)). Qed.
Lemma lem8397843 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8397844 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term615 A B C P _115316 clauses) = (term615 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8397843 C) (@lem8397842 A B C P _115316 clauses)). Qed.
Lemma lem8397845 {A B C P : Type'} (_115316 : type1115 A B C P) : (term616 A B C P _115316) = (term616 A B C P _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8397844 A B C P _115316 clauses)). Qed.
Lemma lem8397846 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8397847 {A B C P : Type'} (_115316 : type1115 A B C P) : (term617 A B C P _115316) = (term617 A B C P _115316).
Proof. exact (MK_COMB (@lem8397846 A B C P) (@lem8397845 A B C P _115316)). Qed.
Lemma lem8397848 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8397849 {A B C P : Type'} (_115316 : type1115 A B C P) : (term618 A B C P _115316) = (term618 A B C P _115316).
Proof. exact (MK_COMB (@lem8397848) (@lem8397847 A B C P _115316)). Qed.
Lemma lem8397850 {A B C P : Type'} (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term752 A B C P _115316 _115314 _115317 _115318) = (term850 A B C P _115316 _115314 _115317 _115318 _115319).
Proof. exact (MK_COMB (@lem8397849 A B C P _115316) (@lem8397760 A B C P _115314 _115317 _115318 _115319 h1)). Qed.
Lemma lem8397861 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term528 A C P _115315 c clauses) = (term528 A C P _115315 c clauses).
Proof. exact (eq_refl (term528 A C P _115315 c clauses)). Qed.
Lemma lem8397910 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) (y : P) : (term370 A C P clauses s s' t x t' c y) = (term370 A C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term370 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8397911 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term371 A C P clauses s s' t x t' c) = (term371 A C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8397910 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8397912 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8397913 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term372 A C P clauses s s' t x t' c) = (term372 A C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8397912 P) (@lem8397911 A C P clauses s s' t x t' c)). Qed.
Lemma lem8397914 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term373 A C P clauses s s' t t' c) = (term373 A C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8397913 A C P clauses s s' t x t' c)). Qed.
Lemma lem8397915 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8397916 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term374 A C P clauses s s' t t' c) = (term374 A C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8397915 P) (@lem8397914 A C P clauses s s' t t' c)). Qed.
Lemma lem8397917 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term375 A C P clauses s s' t c) = (term375 A C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 A C P => @lem8397916 A C P clauses s s' t t' c)). Qed.
Lemma lem8397918 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8397919 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term376 A C P clauses s s' t c) = (term376 A C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8397918 A C P) (@lem8397917 A C P clauses s s' t c)). Qed.
Lemma lem8397920 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term377 A C P clauses s t c) = (term377 A C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8397919 A C P clauses s s' t c)). Qed.
Lemma lem8397921 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8397922 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term378 A C P clauses s t c) = (term378 A C P clauses s t c).
Proof. exact (MK_COMB (@lem8397921 A P) (@lem8397920 A C P clauses s t c)). Qed.
Lemma lem8397923 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term379 A C P clauses s c) = (term379 A C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8397922 A C P clauses s t c)). Qed.
Lemma lem8397924 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8397925 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term380 A C P clauses s c) = (term380 A C P clauses s c).
Proof. exact (MK_COMB (@lem8397924 A C P) (@lem8397923 A C P clauses s c)). Qed.
Lemma lem8397926 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term381 A C P clauses c) = (term381 A C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8397925 A C P clauses s c)). Qed.
Lemma lem8397927 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8397928 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term382 A C P clauses c) = (term382 A C P clauses c).
Proof. exact (MK_COMB (@lem8397927 A P) (@lem8397926 A C P clauses c)). Qed.
Lemma lem8397929 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8397930 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term383 A C P clauses c) = (term383 A C P clauses c).
Proof. exact (MK_COMB (@lem8397929) (@lem8397928 A C P clauses c)). Qed.
Lemma lem8397931 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term529 A C P _115315 c clauses) = (term529 A C P _115315 c clauses).
Proof. exact (MK_COMB (@lem8397930 A C P clauses c) (@lem8397861 A C P _115315 c clauses)). Qed.
Lemma lem8397932 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term530 A C P _115315 clauses) = (term530 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8397931 A C P _115315 c clauses)). Qed.
Lemma lem8397933 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8397934 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term531 A C P _115315 clauses) = (term531 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8397933 C) (@lem8397932 A C P _115315 clauses)). Qed.
Lemma lem8397935 {A C P : Type'} (_115315 : type1092 A C P) : (term532 A C P _115315) = (term532 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8397934 A C P _115315 clauses)). Qed.
Lemma lem8397936 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8397937 {A C P : Type'} (_115315 : type1092 A C P) : (term533 A C P _115315) = (term533 A C P _115315).
Proof. exact (MK_COMB (@lem8397936 A C P) (@lem8397935 A C P _115315)). Qed.
Lemma lem8397938 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8397939 {A C P : Type'} (_115315 : type1092 A C P) : (term534 A C P _115315) = (term534 A C P _115315).
Proof. exact (MK_COMB (@lem8397938) (@lem8397937 A C P _115315)). Qed.
Lemma lem8397940 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term753 A B C P _115315 _115316 _115314 _115317 _115318) = (term851 A B C P _115315 _115316 _115314 _115317 _115318 _115319).
Proof. exact (MK_COMB (@lem8397939 A C P _115315) (@lem8397850 A B C P _115316 _115314 _115317 _115318 _115319 h1)). Qed.
Lemma lem8397955 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) : (term450 A B P _115314 f clauses) = (term450 A B P _115314 f clauses).
Proof. exact (eq_refl (term450 A B P _115314 f clauses)). Qed.
Lemma lem8397956 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term754 A B C P f clauses _115315 _115316 _115314 _115317 _115318) = (term852 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319).
Proof. exact (MK_COMB (@lem8397955 A B P _115314 f clauses) (@lem8397940 A B C P _115315 _115316 _115314 _115317 _115318 _115319 h1)). Qed.
Lemma lem8397969 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (x : A) : ((f x) = (@CASEWISE B P A (A -> B) clauses f x)) = ((f x) = (@CASEWISE B P A (A -> B) clauses f x)).
Proof. exact (eq_refl ((f x) = (@CASEWISE B P A (A -> B) clauses f x))). Qed.
Lemma lem8397970 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term452 A B P clauses f) = (term452 A B P clauses f).
Proof. exact (fun_ext (fun x : A => @lem8397969 A B P clauses f x)). Qed.
Lemma lem8397971 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8397972 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term162 A B P clauses f) = (term162 A B P clauses f).
Proof. exact (MK_COMB (@lem8397971 A) (@lem8397970 A B P clauses f)). Qed.
Lemma lem8397973 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8397974 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term164 A B P clauses f) = (term164 A B P clauses f).
Proof. exact (MK_COMB (@lem8397973) (@lem8397972 A B P clauses f)). Qed.
Lemma lem8397975 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term755 A B C P f clauses _115315 _115316 _115314 _115317 _115318) = (term853 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319).
Proof. exact (MK_COMB (@lem8397974 A B P clauses f) (@lem8397956 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 h1)). Qed.
Lemma lem8398024 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) (y : P) : (term115 A B P clauses s s' t x t' f y) = (term115 A B P clauses s s' t x t' f y).
Proof. exact (eq_refl (term115 A B P clauses s s' t x t' f y)). Qed.
Lemma lem8398025 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term118 A B P clauses s s' t x t' f) = (term118 A B P clauses s s' t x t' f).
Proof. exact (fun_ext (fun y : P => @lem8398024 A B P clauses s s' t x t' f y)). Qed.
Lemma lem8398026 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8398027 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term120 A B P clauses s s' t x t' f) = (term120 A B P clauses s s' t x t' f).
Proof. exact (MK_COMB (@lem8398026 P) (@lem8398025 A B P clauses s s' t x t' f)). Qed.
Lemma lem8398028 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term122 A B P clauses s s' t t' f) = (term122 A B P clauses s s' t t' f).
Proof. exact (fun_ext (fun x : P => @lem8398027 A B P clauses s s' t x t' f)). Qed.
Lemma lem8398029 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8398030 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term124 A B P clauses s s' t t' f) = (term124 A B P clauses s s' t t' f).
Proof. exact (MK_COMB (@lem8398029 P) (@lem8398028 A B P clauses s s' t t' f)). Qed.
Lemma lem8398031 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term126 A B P clauses s s' t t') = (term126 A B P clauses s s' t t').
Proof. exact (fun_ext (fun f : A -> B => @lem8398030 A B P clauses s s' t t' f)). Qed.
Lemma lem8398032 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8398033 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term128 A B P clauses s s' t t') = (term128 A B P clauses s s' t t').
Proof. exact (MK_COMB (@lem8398032 A B) (@lem8398031 A B P clauses s s' t t')). Qed.
Lemma lem8398034 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term130 A B P clauses s s' t) = (term130 A B P clauses s s' t).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8398033 A B P clauses s s' t t')). Qed.
Lemma lem8398035 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8398036 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term132 A B P clauses s s' t) = (term132 A B P clauses s s' t).
Proof. exact (MK_COMB (@lem8398035 A B P) (@lem8398034 A B P clauses s s' t)). Qed.
Lemma lem8398037 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term134 A B P clauses s t) = (term134 A B P clauses s t).
Proof. exact (fun_ext (fun s' : P -> A => @lem8398036 A B P clauses s s' t)). Qed.
Lemma lem8398038 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8398039 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term136 A B P clauses s t) = (term136 A B P clauses s t).
Proof. exact (MK_COMB (@lem8398038 A P) (@lem8398037 A B P clauses s t)). Qed.
Lemma lem8398040 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term138 A B P clauses s) = (term138 A B P clauses s).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8398039 A B P clauses s t)). Qed.
Lemma lem8398041 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8398042 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term140 A B P clauses s) = (term140 A B P clauses s).
Proof. exact (MK_COMB (@lem8398041 A B P) (@lem8398040 A B P clauses s)). Qed.
Lemma lem8398043 {A B P : Type'} (clauses : type1635 A B P) : (term142 A B P clauses) = (term142 A B P clauses).
Proof. exact (fun_ext (fun s : P -> A => @lem8398042 A B P clauses s)). Qed.
Lemma lem8398044 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8398045 {A B P : Type'} (clauses : type1635 A B P) : (term144 A B P clauses) = (term144 A B P clauses).
Proof. exact (MK_COMB (@lem8398044 A P) (@lem8398043 A B P clauses)). Qed.
Lemma lem8398046 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8398047 {A B P : Type'} (clauses : type1635 A B P) : (term248 A B P clauses) = (term248 A B P clauses).
Proof. exact (MK_COMB (@lem8398046) (@lem8398045 A B P clauses)). Qed.
Lemma lem8398048 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term756 A B C P f clauses _115315 _115316 _115314 _115317 _115318) = (term854 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319).
Proof. exact (MK_COMB (@lem8398047 A B P clauses) (@lem8397975 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 h1)). Qed.
Lemma lem8398049 {A B C P : Type'} (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term757 A B C P clauses _115315 _115316 _115314 _115317 _115318) = (term855 A B C P clauses _115315 _115316 _115314 _115317 _115318 _115319).
Proof. exact (fun_ext (fun f : A -> B => @lem8398048 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 h1)). Qed.
Lemma lem8398050 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8398051 {A B C P : Type'} (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term758 A B C P clauses _115315 _115316 _115314 _115317 _115318) = (term856 A B C P clauses _115315 _115316 _115314 _115317 _115318 _115319).
Proof. exact (MK_COMB (@lem8398050 A B) (@lem8398049 A B C P clauses _115315 _115316 _115314 _115317 _115318 _115319 h1)). Qed.
Lemma lem8398052 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term759 A B C P _115315 _115316 _115314 _115317 _115318) = (term857 A B C P _115315 _115316 _115314 _115317 _115318 _115319).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8398051 A B C P clauses _115315 _115316 _115314 _115317 _115318 _115319 h1)). Qed.
Lemma lem8398053 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8398054 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term760 A B C P _115315 _115316 _115314 _115317 _115318) = (term858 A B C P _115315 _115316 _115314 _115317 _115318 _115319).
Proof. exact (MK_COMB (@lem8398053 A B P) (@lem8398052 A B C P _115315 _115316 _115314 _115317 _115318 _115319 h1)). Qed.
Lemma lem8398071 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f : A -> B) (x : P) : ((term186 A B P clauses f s x) = (t f x)) = ((term186 A B P clauses f s x) = (t f x)).
Proof. exact (eq_refl ((term186 A B P clauses f s x) = (t f x))). Qed.
Lemma lem8398072 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f : A -> B) : (term190 A B P clauses s t f) = (term190 A B P clauses s t f).
Proof. exact (fun_ext (fun x : P => @lem8398071 A B P clauses s t f x)). Qed.
Lemma lem8398073 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8398074 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f : A -> B) : (term192 A B P clauses s t f) = (term192 A B P clauses s t f).
Proof. exact (MK_COMB (@lem8398073 P) (@lem8398072 A B P clauses s t f)). Qed.
Lemma lem8398083 {A B P : Type'} (f : type1177 A B P) (s : P -> A) (t : type558 A B P) : (term193 A B P f s t) = (term193 A B P f s t).
Proof. exact (eq_refl (term193 A B P f s t)). Qed.
Lemma lem8398084 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f' : A -> B) : (term195 A B P f clauses s t f') = (term195 A B P f clauses s t f').
Proof. exact (MK_COMB (@lem8398083 A B P f s t) (@lem8398074 A B P clauses s t f')). Qed.
Lemma lem8398085 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term197 A B P f clauses s f') = (term197 A B P f clauses s f').
Proof. exact (fun_ext (fun t : type558 A B P => @lem8398084 A B P f clauses s t f')). Qed.
Lemma lem8398086 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8398087 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term199 A B P f clauses s f') = (term199 A B P f clauses s f').
Proof. exact (MK_COMB (@lem8398086 A B P) (@lem8398085 A B P f clauses s f')). Qed.
Lemma lem8398088 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term201 A B P f clauses f') = (term201 A B P f clauses f').
Proof. exact (fun_ext (fun s : P -> A => @lem8398087 A B P f clauses s f')). Qed.
Lemma lem8398089 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8398090 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term203 A B P f clauses f') = (term203 A B P f clauses f').
Proof. exact (MK_COMB (@lem8398089 A P) (@lem8398088 A B P f clauses f')). Qed.
Lemma lem8398099 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) (f' : type1177 A B P) : (term508 A B P _115314 clauses f f') = (term508 A B P _115314 clauses f f').
Proof. exact (eq_refl (term508 A B P _115314 clauses f f')). Qed.
Lemma lem8398100 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : ((_115314 clauses f' f) = (term203 A B P f clauses f')) = ((_115314 clauses f' f) = (term203 A B P f clauses f')).
Proof. exact (MK_COMB (@lem8398099 A B P _115314 clauses f' f) (@lem8398090 A B P f clauses f')). Qed.
Lemma lem8398101 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term510 A B P _115314 clauses f) = (term510 A B P _115314 clauses f).
Proof. exact (fun_ext (fun f' : type1177 A B P => @lem8398100 A B P _115314 f' clauses f)). Qed.
Lemma lem8398102 {A B P : Type'} : (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) = (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop))). Qed.
Lemma lem8398103 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term511 A B P _115314 clauses f) = (term511 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8398102 A B P) (@lem8398101 A B P _115314 clauses f)). Qed.
Lemma lem8398104 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term512 A B P _115314 clauses) = (term512 A B P _115314 clauses).
Proof. exact (fun_ext (fun f : A -> B => @lem8398103 A B P _115314 clauses f)). Qed.
Lemma lem8398105 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8398106 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term513 A B P _115314 clauses) = (term513 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8398105 A B) (@lem8398104 A B P _115314 clauses)). Qed.
Lemma lem8398107 {A B P : Type'} (_115314 : type1080 A B P) : (term514 A B P _115314) = (term514 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8398106 A B P _115314 clauses)). Qed.
Lemma lem8398108 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8398109 {A B P : Type'} (_115314 : type1080 A B P) : (term515 A B P _115314) = (term515 A B P _115314).
Proof. exact (MK_COMB (@lem8398108 A B P) (@lem8398107 A B P _115314)). Qed.
Lemma lem8398110 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8398111 {A B P : Type'} (_115314 : type1080 A B P) : (term516 A B P _115314) = (term516 A B P _115314).
Proof. exact (MK_COMB (@lem8398110) (@lem8398109 A B P _115314)). Qed.
Lemma lem8398112 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term761 A B C P _115315 _115316 _115314 _115317 _115318) = (term859 A B C P _115315 _115316 _115314 _115317 _115318 _115319).
Proof. exact (MK_COMB (@lem8398111 A B P _115314) (@lem8398054 A B C P _115315 _115316 _115314 _115317 _115318 _115319 h1)). Qed.
Lemma lem8398113 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term762 A B C P _115315 _115316 _115317 _115318) = (term860 A B C P _115315 _115316 _115317 _115318 _115319).
Proof. exact (fun_ext (fun _115314 : type1080 A B P => @lem8398112 A B C P _115315 _115316 _115314 _115317 _115318 _115319 h1)). Qed.
Lemma lem8398114 {A B P : Type'} : (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8398115 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term763 A B C P _115315 _115316 _115317 _115318) = (term861 A B C P _115315 _115316 _115317 _115318 _115319).
Proof. exact (MK_COMB (@lem8398114 A B P) (@lem8398113 A B C P _115315 _115316 _115317 _115318 _115319 h1)). Qed.
Lemma lem8398132 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) (x : P) : ((term357 A C P clauses c s x) = (t c x)) = ((term357 A C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term357 A C P clauses c s x) = (t c x))). Qed.
Lemma lem8398133 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term358 A C P clauses s t c) = (term358 A C P clauses s t c).
Proof. exact (fun_ext (fun x : P => @lem8398132 A C P clauses s t c x)). Qed.
Lemma lem8398134 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8398135 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term359 A C P clauses s t c) = (term359 A C P clauses s t c).
Proof. exact (MK_COMB (@lem8398134 P) (@lem8398133 A C P clauses s t c)). Qed.
Lemma lem8398144 {A C P : Type'} (f : type1178 A C P) (s : P -> A) (t : type1475 A C P) : (term360 A C P f s t) = (term360 A C P f s t).
Proof. exact (eq_refl (term360 A C P f s t)). Qed.
Lemma lem8398145 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term361 A C P f clauses s t c) = (term361 A C P f clauses s t c).
Proof. exact (MK_COMB (@lem8398144 A C P f s t) (@lem8398135 A C P clauses s t c)). Qed.
Lemma lem8398146 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term362 A C P f clauses s c) = (term362 A C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8398145 A C P f clauses s t c)). Qed.
Lemma lem8398147 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8398148 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term363 A C P f clauses s c) = (term363 A C P f clauses s c).
Proof. exact (MK_COMB (@lem8398147 A C P) (@lem8398146 A C P f clauses s c)). Qed.
Lemma lem8398149 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term364 A C P f clauses c) = (term364 A C P f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8398148 A C P f clauses s c)). Qed.
Lemma lem8398150 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8398151 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term365 A C P f clauses c) = (term365 A C P f clauses c).
Proof. exact (MK_COMB (@lem8398150 A P) (@lem8398149 A C P f clauses c)). Qed.
Lemma lem8398160 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) (f : type1178 A C P) : (term592 A C P _115315 clauses c f) = (term592 A C P _115315 clauses c f).
Proof. exact (eq_refl (term592 A C P _115315 clauses c f)). Qed.
Lemma lem8398161 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : ((_115315 clauses c f) = (term365 A C P f clauses c)) = ((_115315 clauses c f) = (term365 A C P f clauses c)).
Proof. exact (MK_COMB (@lem8398160 A C P _115315 clauses c f) (@lem8398151 A C P f clauses c)). Qed.
Lemma lem8398162 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term594 A C P _115315 clauses c) = (term594 A C P _115315 clauses c).
Proof. exact (fun_ext (fun f : type1178 A C P => @lem8398161 A C P _115315 f clauses c)). Qed.
Lemma lem8398163 {A C P : Type'} : (@all ((prod (P -> A) (C -> P -> A)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> A)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> A)) -> Prop))). Qed.
Lemma lem8398164 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term595 A C P _115315 clauses c) = (term595 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8398163 A C P) (@lem8398162 A C P _115315 clauses c)). Qed.
Lemma lem8398165 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term596 A C P _115315 clauses) = (term596 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8398164 A C P _115315 clauses c)). Qed.
Lemma lem8398166 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8398167 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term597 A C P _115315 clauses) = (term597 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8398166 C) (@lem8398165 A C P _115315 clauses)). Qed.
Lemma lem8398168 {A C P : Type'} (_115315 : type1092 A C P) : (term598 A C P _115315) = (term598 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8398167 A C P _115315 clauses)). Qed.
Lemma lem8398169 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8398170 {A C P : Type'} (_115315 : type1092 A C P) : (term599 A C P _115315) = (term599 A C P _115315).
Proof. exact (MK_COMB (@lem8398169 A C P) (@lem8398168 A C P _115315)). Qed.
Lemma lem8398171 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8398172 {A C P : Type'} (_115315 : type1092 A C P) : (term600 A C P _115315) = (term600 A C P _115315).
Proof. exact (MK_COMB (@lem8398171) (@lem8398170 A C P _115315)). Qed.
Lemma lem8398173 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term764 A B C P _115315 _115316 _115317 _115318) = (term862 A B C P _115315 _115316 _115317 _115318 _115319).
Proof. exact (MK_COMB (@lem8398172 A C P _115315) (@lem8398115 A B C P _115315 _115316 _115317 _115318 _115319 h1)). Qed.
Lemma lem8398174 {A B C P : Type'} (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term765 A B C P _115316 _115317 _115318) = (term863 A B C P _115316 _115317 _115318 _115319).
Proof. exact (fun_ext (fun _115315 : type1092 A C P => @lem8398173 A B C P _115315 _115316 _115317 _115318 _115319 h1)). Qed.
Lemma lem8398175 {A C P : Type'} : (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop))). Qed.
Lemma lem8398176 {A B C P : Type'} (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term766 A B C P _115316 _115317 _115318) = (term864 A B C P _115316 _115317 _115318 _115319).
Proof. exact (MK_COMB (@lem8398175 A C P) (@lem8398174 A B C P _115316 _115317 _115318 _115319 h1)). Qed.
Lemma lem8398193 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) (x : P) : ((term416 A B C P clauses c s x) = (t c x)) = ((term416 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term416 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8398194 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term417 A B C P clauses s t c) = (term417 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : P => @lem8398193 A B C P clauses s t c x)). Qed.
Lemma lem8398195 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8398196 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term418 A B C P clauses s t c) = (term418 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8398195 P) (@lem8398194 A B C P clauses s t c)). Qed.
Lemma lem8398205 {A B C P : Type'} (f : type1185 A B C P) (s : P -> A) (t : type1475 B C P) : (term419 A B C P f s t) = (term419 A B C P f s t).
Proof. exact (eq_refl (term419 A B C P f s t)). Qed.
Lemma lem8398206 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term420 A B C P f clauses s t c) = (term420 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8398205 A B C P f s t) (@lem8398196 A B C P clauses s t c)). Qed.
Lemma lem8398207 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term421 A B C P f clauses s c) = (term421 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8398206 A B C P f clauses s t c)). Qed.
Lemma lem8398208 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8398209 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term422 A B C P f clauses s c) = (term422 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8398208 B C P) (@lem8398207 A B C P f clauses s c)). Qed.
Lemma lem8398210 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term423 A B C P f clauses c) = (term423 A B C P f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8398209 A B C P f clauses s c)). Qed.
Lemma lem8398211 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8398212 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term424 A B C P f clauses c) = (term424 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8398211 A P) (@lem8398210 A B C P f clauses c)). Qed.
Lemma lem8398221 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) (f : type1185 A B C P) : (term680 A B C P _115316 clauses c f) = (term680 A B C P _115316 clauses c f).
Proof. exact (eq_refl (term680 A B C P _115316 clauses c f)). Qed.
Lemma lem8398222 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : ((_115316 clauses c f) = (term424 A B C P f clauses c)) = ((_115316 clauses c f) = (term424 A B C P f clauses c)).
Proof. exact (MK_COMB (@lem8398221 A B C P _115316 clauses c f) (@lem8398212 A B C P f clauses c)). Qed.
Lemma lem8398223 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term682 A B C P _115316 clauses c) = (term682 A B C P _115316 clauses c).
Proof. exact (fun_ext (fun f : type1185 A B C P => @lem8398222 A B C P _115316 f clauses c)). Qed.
Lemma lem8398224 {A B C P : Type'} : (@all ((prod (P -> A) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8398225 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term683 A B C P _115316 clauses c) = (term683 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8398224 A B C P) (@lem8398223 A B C P _115316 clauses c)). Qed.
Lemma lem8398226 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term684 A B C P _115316 clauses) = (term684 A B C P _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8398225 A B C P _115316 clauses c)). Qed.
Lemma lem8398227 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8398228 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term685 A B C P _115316 clauses) = (term685 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8398227 C) (@lem8398226 A B C P _115316 clauses)). Qed.
Lemma lem8398229 {A B C P : Type'} (_115316 : type1115 A B C P) : (term686 A B C P _115316) = (term686 A B C P _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8398228 A B C P _115316 clauses)). Qed.
Lemma lem8398230 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8398231 {A B C P : Type'} (_115316 : type1115 A B C P) : (term687 A B C P _115316) = (term687 A B C P _115316).
Proof. exact (MK_COMB (@lem8398230 A B C P) (@lem8398229 A B C P _115316)). Qed.
Lemma lem8398232 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8398233 {A B C P : Type'} (_115316 : type1115 A B C P) : (term688 A B C P _115316) = (term688 A B C P _115316).
Proof. exact (MK_COMB (@lem8398232) (@lem8398231 A B C P _115316)). Qed.
Lemma lem8398234 {A B C P : Type'} (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term767 A B C P _115316 _115317 _115318) = (term865 A B C P _115316 _115317 _115318 _115319).
Proof. exact (MK_COMB (@lem8398233 A B C P _115316) (@lem8398176 A B C P _115316 _115317 _115318 _115319 h1)). Qed.
Lemma lem8398235 {A B C P : Type'} (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term768 A B C P _115317 _115318) = (term866 A B C P _115317 _115318 _115319).
Proof. exact (fun_ext (fun _115316 : type1115 A B C P => @lem8398234 A B C P _115316 _115317 _115318 _115319 h1)). Qed.
Lemma lem8398236 {A B C P : Type'} : (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8398237 {A B C P : Type'} (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term769 A B C P _115317 _115318) = (term867 A B C P _115317 _115318 _115319).
Proof. exact (MK_COMB (@lem8398236 A B C P) (@lem8398235 A B C P _115317 _115318 _115319 h1)). Qed.
Lemma lem8398254 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) (x : P) : ((term357 B C P clauses c s x) = (t c x)) = ((term357 B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term357 B C P clauses c s x) = (t c x))). Qed.
Lemma lem8398255 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term358 B C P clauses s t c) = (term358 B C P clauses s t c).
Proof. exact (fun_ext (fun x : P => @lem8398254 B C P clauses s t c x)). Qed.
Lemma lem8398256 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8398257 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term359 B C P clauses s t c) = (term359 B C P clauses s t c).
Proof. exact (MK_COMB (@lem8398256 P) (@lem8398255 B C P clauses s t c)). Qed.
Lemma lem8398266 {B C P : Type'} (f : type1178 B C P) (s : P -> B) (t : type1475 B C P) : (term360 B C P f s t) = (term360 B C P f s t).
Proof. exact (eq_refl (term360 B C P f s t)). Qed.
Lemma lem8398267 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term361 B C P f clauses s t c) = (term361 B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8398266 B C P f s t) (@lem8398257 B C P clauses s t c)). Qed.
Lemma lem8398268 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term362 B C P f clauses s c) = (term362 B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8398267 B C P f clauses s t c)). Qed.
Lemma lem8398269 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8398270 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term363 B C P f clauses s c) = (term363 B C P f clauses s c).
Proof. exact (MK_COMB (@lem8398269 B C P) (@lem8398268 B C P f clauses s c)). Qed.
Lemma lem8398271 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term364 B C P f clauses c) = (term364 B C P f clauses c).
Proof. exact (fun_ext (fun s : P -> B => @lem8398270 B C P f clauses s c)). Qed.
Lemma lem8398272 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8398273 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term365 B C P f clauses c) = (term365 B C P f clauses c).
Proof. exact (MK_COMB (@lem8398272 B P) (@lem8398271 B C P f clauses c)). Qed.
Lemma lem8398282 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) (f : type1178 B C P) : (term592 B C P _115317 clauses c f) = (term592 B C P _115317 clauses c f).
Proof. exact (eq_refl (term592 B C P _115317 clauses c f)). Qed.
Lemma lem8398283 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : ((_115317 clauses c f) = (term365 B C P f clauses c)) = ((_115317 clauses c f) = (term365 B C P f clauses c)).
Proof. exact (MK_COMB (@lem8398282 B C P _115317 clauses c f) (@lem8398273 B C P f clauses c)). Qed.
Lemma lem8398284 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term594 B C P _115317 clauses c) = (term594 B C P _115317 clauses c).
Proof. exact (fun_ext (fun f : type1178 B C P => @lem8398283 B C P _115317 f clauses c)). Qed.
Lemma lem8398285 {B C P : Type'} : (@all ((prod (P -> B) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> B) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> B) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8398286 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term595 B C P _115317 clauses c) = (term595 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8398285 B C P) (@lem8398284 B C P _115317 clauses c)). Qed.
Lemma lem8398287 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term596 B C P _115317 clauses) = (term596 B C P _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8398286 B C P _115317 clauses c)). Qed.
Lemma lem8398288 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8398289 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term597 B C P _115317 clauses) = (term597 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8398288 C) (@lem8398287 B C P _115317 clauses)). Qed.
Lemma lem8398290 {B C P : Type'} (_115317 : type1092 B C P) : (term598 B C P _115317) = (term598 B C P _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8398289 B C P _115317 clauses)). Qed.
Lemma lem8398291 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8398292 {B C P : Type'} (_115317 : type1092 B C P) : (term599 B C P _115317) = (term599 B C P _115317).
Proof. exact (MK_COMB (@lem8398291 B C P) (@lem8398290 B C P _115317)). Qed.
Lemma lem8398293 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8398294 {B C P : Type'} (_115317 : type1092 B C P) : (term600 B C P _115317) = (term600 B C P _115317).
Proof. exact (MK_COMB (@lem8398293) (@lem8398292 B C P _115317)). Qed.
Lemma lem8398295 {A B C P : Type'} (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term770 A B C P _115317 _115318) = (term868 A B C P _115317 _115318 _115319).
Proof. exact (MK_COMB (@lem8398294 B C P _115317) (@lem8398237 A B C P _115317 _115318 _115319 h1)). Qed.
Lemma lem8398296 {A B C P : Type'} (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term771 A B C P _115318) = (term869 A B C P _115318 _115319).
Proof. exact (fun_ext (fun _115317 : type1092 B C P => @lem8398295 A B C P _115317 _115318 _115319 h1)). Qed.
Lemma lem8398297 {B C P : Type'} : (@all ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8398298 {A B C P : Type'} (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term772 A B C P _115318) = (term870 A B C P _115318 _115319).
Proof. exact (MK_COMB (@lem8398297 B C P) (@lem8398296 A B C P _115318 _115319 h1)). Qed.
Lemma lem8398315 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) (x : A -> B) : ((term326 A B C P clauses c s x) = (t c x)) = ((term326 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term326 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8398316 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term327 A B C P clauses s t c) = (term327 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : A -> B => @lem8398315 A B C P clauses s t c x)). Qed.
Lemma lem8398317 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8398318 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term328 A B C P clauses s t c) = (term328 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8398317 A B) (@lem8398316 A B C P clauses s t c)). Qed.
Lemma lem8398327 {A B C P : Type'} (f : type1167 A B C P) (s : type558 A B P) (t : type1506 A B C) : (term329 A B C P f s t) = (term329 A B C P f s t).
Proof. exact (eq_refl (term329 A B C P f s t)). Qed.
Lemma lem8398328 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term330 A B C P f clauses s t c) = (term330 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8398327 A B C P f s t) (@lem8398318 A B C P clauses s t c)). Qed.
Lemma lem8398329 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term331 A B C P f clauses s c) = (term331 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8398328 A B C P f clauses s t c)). Qed.
Lemma lem8398330 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8398331 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term332 A B C P f clauses s c) = (term332 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8398330 A B C) (@lem8398329 A B C P f clauses s c)). Qed.
Lemma lem8398332 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term333 A B C P f clauses c) = (term333 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8398331 A B C P f clauses s c)). Qed.
Lemma lem8398333 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8398334 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term334 A B C P f clauses c) = (term334 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8398333 A B P) (@lem8398332 A B C P f clauses c)). Qed.
Lemma lem8398343 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) (f : type1167 A B C P) : (term819 A B C P _115318 clauses c f) = (term819 A B C P _115318 clauses c f).
Proof. exact (eq_refl (term819 A B C P _115318 clauses c f)). Qed.
Lemma lem8398344 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : ((_115318 clauses c f) = (term334 A B C P f clauses c)) = ((_115318 clauses c f) = (term334 A B C P f clauses c)).
Proof. exact (MK_COMB (@lem8398343 A B C P _115318 clauses c f) (@lem8398334 A B C P f clauses c)). Qed.
Lemma lem8398345 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term821 A B C P _115318 clauses c) = (term821 A B C P _115318 clauses c).
Proof. exact (fun_ext (fun f : type1167 A B C P => @lem8398344 A B C P _115318 f clauses c)). Qed.
Lemma lem8398346 {A B C P : Type'} : (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)) = (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop))). Qed.
Lemma lem8398347 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term822 A B C P _115318 clauses c) = (term822 A B C P _115318 clauses c).
Proof. exact (MK_COMB (@lem8398346 A B C P) (@lem8398345 A B C P _115318 clauses c)). Qed.
Lemma lem8398348 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term823 A B C P _115318 clauses) = (term823 A B C P _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8398347 A B C P _115318 clauses c)). Qed.
Lemma lem8398349 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8398350 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term824 A B C P _115318 clauses) = (term824 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8398349 C) (@lem8398348 A B C P _115318 clauses)). Qed.
Lemma lem8398351 {A B C P : Type'} (_115318 : type1049 A B C P) : (term825 A B C P _115318) = (term825 A B C P _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8398350 A B C P _115318 clauses)). Qed.
Lemma lem8398352 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8398353 {A B C P : Type'} (_115318 : type1049 A B C P) : (term826 A B C P _115318) = (term826 A B C P _115318).
Proof. exact (MK_COMB (@lem8398352 A B C P) (@lem8398351 A B C P _115318)). Qed.
Lemma lem8398354 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8398355 {A B C P : Type'} (_115318 : type1049 A B C P) : (term827 A B C P _115318) = (term827 A B C P _115318).
Proof. exact (MK_COMB (@lem8398354) (@lem8398353 A B C P _115318)). Qed.
Lemma lem8398356 {A B C P : Type'} (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term828 A B C P _115318) = (term871 A B C P _115318 _115319).
Proof. exact (MK_COMB (@lem8398355 A B C P _115318) (@lem8398298 A B C P _115318 _115319 h1)). Qed.
Lemma lem8398357 {A B C P : Type'} (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term829 A B C P) = (term872 A B C P _115319).
Proof. exact (fun_ext (fun _115318 : type1049 A B C P => @lem8398356 A B C P _115318 _115319 h1)). Qed.
Lemma lem8398358 {A B C P : Type'} : (@all ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> Prop)) = (@all ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8398359 {A B C P : Type'} (_115319 : type1061 A B C P) (h1 : _115319 = (term831 A B C P)) : (term830 A B C P) = (term873 A B C P _115319).
Proof. exact (MK_COMB (@lem8398358 A B C P) (@lem8398357 A B C P _115319 h1)). Qed.
Lemma lem8398360 {A B C P : Type'} (_115319 : type1061 A B C P) : term874 A B C P _115319.
Proof. exact (fun h0 : _115319 = (term831 A B C P) => @lem8398359 A B C P _115319 h0). Qed.
Lemma lem8398361 {A B C P : Type'} : term875 A B C P.
Proof. exact (fun _115319 : type1061 A B C P => @lem8398360 A B C P _115319). Qed.
Lemma lem8398363 {_3603 : Type'} (P : Prop) (c : _3603) (Q : _3603 -> Prop) : term461 _3603 P c Q.
Proof. exact (EQ_MP (@lem20230 _3603 P c Q) (@lem0)). Qed.
Lemma lem8398364 {A B C P : Type'} (P' : Prop) (c : type1061 A B C P) (Q : type266 A B C P) : term876 A B C P P' c Q.
Proof. exact (@lem8398363 (type1061 A B C P) P' c Q). Qed.
Lemma lem8398365 {A B C P : Type'} : term877 A B C P.
Proof. exact (@lem8398364 A B C P (term830 A B C P) (term831 A B C P) (term878 A B C P)). Qed.
Lemma lem8398366 {A B C P : Type'} (_115319 : type1061 A B C P) : (term879 A B C P _115319) = (term873 A B C P _115319).
Proof. exact (eq_refl (term879 A B C P _115319)). Qed.
Lemma lem8398367 {A B C P : Type'} : (term880 A B C P) = (term880 A B C P).
Proof. exact (eq_refl (term880 A B C P)). Qed.
Lemma lem8398368 {A B C P : Type'} (_115319 : type1061 A B C P) : ((term830 A B C P) = (term879 A B C P _115319)) = ((term830 A B C P) = (term873 A B C P _115319)).
Proof. exact (MK_COMB (@lem8398367 A B C P) (@lem8398366 A B C P _115319)). Qed.
Lemma lem8398369 {A B C P : Type'} (_115319 : type1061 A B C P) : (term881 A B C P _115319) = (term881 A B C P _115319).
Proof. exact (eq_refl (term881 A B C P _115319)). Qed.
Lemma lem8398370 {A B C P : Type'} (_115319 : type1061 A B C P) : (term882 A B C P _115319) = (term874 A B C P _115319).
Proof. exact (MK_COMB (@lem8398369 A B C P _115319) (@lem8398368 A B C P _115319)). Qed.
Lemma lem8398371 {A B C P : Type'} : (term883 A B C P) = (term884 A B C P).
Proof. exact (fun_ext (fun _115319 : type1061 A B C P => @lem8398370 A B C P _115319)). Qed.
Lemma lem8398372 {A B C P : Type'} : (@all ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> Prop)) = (@all ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8398373 {A B C P : Type'} : (term885 A B C P) = (term875 A B C P).
Proof. exact (MK_COMB (@lem8398372 A B C P) (@lem8398371 A B C P)). Qed.
Lemma lem8398374 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8398375 {A B C P : Type'} : (term886 A B C P) = (term887 A B C P).
Proof. exact (MK_COMB (@lem8398374) (@lem8398373 A B C P)). Qed.
Lemma lem8398376 {A B C P : Type'} (_115319 : type1061 A B C P) : (term879 A B C P _115319) = (term873 A B C P _115319).
Proof. exact (eq_refl (term879 A B C P _115319)). Qed.
Lemma lem8398377 {A B C P : Type'} (_115319 : type1061 A B C P) : (term881 A B C P _115319) = (term881 A B C P _115319).
Proof. exact (eq_refl (term881 A B C P _115319)). Qed.
Lemma lem8398378 {A B C P : Type'} (_115319 : type1061 A B C P) : (term888 A B C P _115319) = (term889 A B C P _115319).
Proof. exact (MK_COMB (@lem8398377 A B C P _115319) (@lem8398376 A B C P _115319)). Qed.
Lemma lem8398379 {A B C P : Type'} : (term890 A B C P) = (term891 A B C P).
Proof. exact (fun_ext (fun _115319 : type1061 A B C P => @lem8398378 A B C P _115319)). Qed.
Lemma lem8398380 {A B C P : Type'} : (@all ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> Prop)) = (@all ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8398381 {A B C P : Type'} : (term892 A B C P) = (term893 A B C P).
Proof. exact (MK_COMB (@lem8398380 A B C P) (@lem8398379 A B C P)). Qed.
Lemma lem8398382 {A B C P : Type'} : (term880 A B C P) = (term880 A B C P).
Proof. exact (eq_refl (term880 A B C P)). Qed.
Lemma lem8398383 {A B C P : Type'} : ((term830 A B C P) = (term892 A B C P)) = ((term830 A B C P) = (term893 A B C P)).
Proof. exact (MK_COMB (@lem8398382 A B C P) (@lem8398381 A B C P)). Qed.
Lemma lem8398384 {A B C P : Type'} : (term877 A B C P) = (term894 A B C P).
Proof. exact (MK_COMB (@lem8398375 A B C P) (@lem8398383 A B C P)). Qed.
Lemma lem8398385 {A B C P : Type'} : term894 A B C P.
Proof. exact (EQ_MP (@lem8398384 A B C P) (@lem8398365 A B C P)). Qed.
Lemma lem8398386 {A B C P : Type'} : (term830 A B C P) = (term893 A B C P).
Proof. exact (@lem8398385 A B C P (@lem8398361 A B C P)). Qed.
Lemma lem8398388 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term481 _3571 _3575 t)) = (term482 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem8398389 {A B C P : Type'} (s : type1061 A B C P) (t : type1061 A B C P) : (s = (term895 A B C P t)) = (term896 A B C P s t).
Proof. exact (@lem8398388 (type1500 A B C P) (type1631 A B C P) s t). Qed.
Lemma lem8398390 {A B C P : Type'} (_115319 : type1061 A B C P) : (_115319 = (term897 A B C P)) = (term898 A B C P _115319).
Proof. exact (@lem8398389 A B C P _115319 (term831 A B C P)). Qed.
Lemma lem8398391 {A B C P : Type'} (clauses : type1631 A B C P) : (term832 A B C P clauses) = (term833 A B C P clauses).
Proof. exact (eq_refl (term832 A B C P clauses)). Qed.
Lemma lem8398392 {A B C P : Type'} : (term897 A B C P) = (term831 A B C P).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8398391 A B C P clauses)). Qed.
Lemma lem8398393 {A B C P : Type'} (_115319 : type1061 A B C P) : (@eq ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> Prop) _115319) = (@eq ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> Prop) _115319).
Proof. exact (eq_refl (@eq ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> Prop) _115319)). Qed.
Lemma lem8398394 {A B C P : Type'} (_115319 : type1061 A B C P) : (_115319 = (term897 A B C P)) = (_115319 = (term831 A B C P)).
Proof. exact (MK_COMB (@lem8398393 A B C P _115319) (@lem8398392 A B C P)). Qed.
Lemma lem8398395 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8398396 {A B C P : Type'} (_115319 : type1061 A B C P) : (term899 A B C P _115319) = (term900 A B C P _115319).
Proof. exact (MK_COMB (@lem8398395) (@lem8398394 A B C P _115319)). Qed.
Lemma lem8398397 {A B C P : Type'} (clauses : type1631 A B C P) : (term832 A B C P clauses) = (term833 A B C P clauses).
Proof. exact (eq_refl (term832 A B C P clauses)). Qed.
Lemma lem8398398 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term834 A B C P _115319 clauses) = (term834 A B C P _115319 clauses).
Proof. exact (eq_refl (term834 A B C P _115319 clauses)). Qed.
Lemma lem8398399 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : ((_115319 clauses) = (term832 A B C P clauses)) = ((_115319 clauses) = (term833 A B C P clauses)).
Proof. exact (MK_COMB (@lem8398398 A B C P _115319 clauses) (@lem8398397 A B C P clauses)). Qed.
Lemma lem8398400 {A B C P : Type'} (_115319 : type1061 A B C P) : (term901 A B C P _115319) = (term902 A B C P _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8398399 A B C P _115319 clauses)). Qed.
Lemma lem8398401 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8398402 {A B C P : Type'} (_115319 : type1061 A B C P) : (term898 A B C P _115319) = (term903 A B C P _115319).
Proof. exact (MK_COMB (@lem8398401 A B C P) (@lem8398400 A B C P _115319)). Qed.
Lemma lem8398403 {A B C P : Type'} (_115319 : type1061 A B C P) : ((_115319 = (term897 A B C P)) = (term898 A B C P _115319)) = ((_115319 = (term831 A B C P)) = (term903 A B C P _115319)).
Proof. exact (MK_COMB (@lem8398396 A B C P _115319) (@lem8398402 A B C P _115319)). Qed.
Lemma lem8398404 {A B C P : Type'} (_115319 : type1061 A B C P) : (_115319 = (term831 A B C P)) = (term903 A B C P _115319).
Proof. exact (EQ_MP (@lem8398403 A B C P _115319) (@lem8398390 A B C P _115319)). Qed.
Lemma lem8398406 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term481 _3571 _3575 t)) = (term482 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem8398407 {A B C P : Type'} (s : type1500 A B C P) (t : type1500 A B C P) : (s = (term904 A B C P t)) = (term905 A B C P s t).
Proof. exact (@lem8398406 (type295 A B C P) C s t). Qed.
Lemma lem8398408 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : ((_115319 clauses) = (term906 A B C P clauses)) = (term907 A B C P _115319 clauses).
Proof. exact (@lem8398407 A B C P (_115319 clauses) (term833 A B C P clauses)). Qed.
Lemma lem8398409 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term835 A B C P clauses c) = (term304 A B C P clauses c).
Proof. exact (eq_refl (term835 A B C P clauses c)). Qed.
Lemma lem8398410 {A B C P : Type'} (clauses : type1631 A B C P) : (term906 A B C P clauses) = (term833 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8398409 A B C P clauses c)). Qed.
Lemma lem8398411 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term834 A B C P _115319 clauses) = (term834 A B C P _115319 clauses).
Proof. exact (eq_refl (term834 A B C P _115319 clauses)). Qed.
Lemma lem8398412 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : ((_115319 clauses) = (term906 A B C P clauses)) = ((_115319 clauses) = (term833 A B C P clauses)).
Proof. exact (MK_COMB (@lem8398411 A B C P _115319 clauses) (@lem8398410 A B C P clauses)). Qed.
Lemma lem8398413 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8398414 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term908 A B C P _115319 clauses) = (term909 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8398413) (@lem8398412 A B C P _115319 clauses)). Qed.
Lemma lem8398415 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term835 A B C P clauses c) = (term304 A B C P clauses c).
Proof. exact (eq_refl (term835 A B C P clauses c)). Qed.
Lemma lem8398416 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term836 A B C P _115319 clauses c) = (term836 A B C P _115319 clauses c).
Proof. exact (eq_refl (term836 A B C P _115319 clauses c)). Qed.
Lemma lem8398417 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : ((_115319 clauses c) = (term835 A B C P clauses c)) = ((_115319 clauses c) = (term304 A B C P clauses c)).
Proof. exact (MK_COMB (@lem8398416 A B C P _115319 clauses c) (@lem8398415 A B C P clauses c)). Qed.
Lemma lem8398418 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term910 A B C P _115319 clauses) = (term911 A B C P _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8398417 A B C P _115319 clauses c)). Qed.
Lemma lem8398419 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8398420 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term907 A B C P _115319 clauses) = (term912 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8398419 C) (@lem8398418 A B C P _115319 clauses)). Qed.
Lemma lem8398421 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (((_115319 clauses) = (term906 A B C P clauses)) = (term907 A B C P _115319 clauses)) = (((_115319 clauses) = (term833 A B C P clauses)) = (term912 A B C P _115319 clauses)).
Proof. exact (MK_COMB (@lem8398414 A B C P _115319 clauses) (@lem8398420 A B C P _115319 clauses)). Qed.
Lemma lem8398422 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : ((_115319 clauses) = (term833 A B C P clauses)) = (term912 A B C P _115319 clauses).
Proof. exact (EQ_MP (@lem8398421 A B C P _115319 clauses) (@lem8398408 A B C P _115319 clauses)). Qed.
Lemma lem8398424 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term481 _3571 _3575 t)) = (term482 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem8398425 {A B C P : Type'} (s : type295 A B C P) (t : type295 A B C P) : (s = (term913 A B C P t)) = (term914 A B C P s t).
Proof. exact (@lem8398424 Prop (type1168 A B C P) s t). Qed.
Lemma lem8398426 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : ((_115319 clauses c) = (term915 A B C P clauses c)) = (term916 A B C P _115319 clauses c).
Proof. exact (@lem8398425 A B C P (_115319 clauses c) (term304 A B C P clauses c)). Qed.
Lemma lem8398427 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term917 A B C P clauses c f) = (term303 A B C P f clauses c).
Proof. exact (eq_refl (term917 A B C P clauses c f)). Qed.
Lemma lem8398428 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term915 A B C P clauses c) = (term304 A B C P clauses c).
Proof. exact (fun_ext (fun f : type1168 A B C P => @lem8398427 A B C P f clauses c)). Qed.
Lemma lem8398429 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term836 A B C P _115319 clauses c) = (term836 A B C P _115319 clauses c).
Proof. exact (eq_refl (term836 A B C P _115319 clauses c)). Qed.
Lemma lem8398430 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : ((_115319 clauses c) = (term915 A B C P clauses c)) = ((_115319 clauses c) = (term304 A B C P clauses c)).
Proof. exact (MK_COMB (@lem8398429 A B C P _115319 clauses c) (@lem8398428 A B C P clauses c)). Qed.
Lemma lem8398431 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8398432 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term918 A B C P _115319 clauses c) = (term919 A B C P _115319 clauses c).
Proof. exact (MK_COMB (@lem8398431) (@lem8398430 A B C P _115319 clauses c)). Qed.
Lemma lem8398433 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term917 A B C P clauses c f) = (term303 A B C P f clauses c).
Proof. exact (eq_refl (term917 A B C P clauses c f)). Qed.
Lemma lem8398434 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) (f : type1168 A B C P) : (term920 A B C P _115319 clauses c f) = (term920 A B C P _115319 clauses c f).
Proof. exact (eq_refl (term920 A B C P _115319 clauses c f)). Qed.
Lemma lem8398435 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : ((_115319 clauses c f) = (term917 A B C P clauses c f)) = ((_115319 clauses c f) = (term303 A B C P f clauses c)).
Proof. exact (MK_COMB (@lem8398434 A B C P _115319 clauses c f) (@lem8398433 A B C P f clauses c)). Qed.
Lemma lem8398436 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term921 A B C P _115319 clauses c) = (term922 A B C P _115319 clauses c).
Proof. exact (fun_ext (fun f : type1168 A B C P => @lem8398435 A B C P _115319 f clauses c)). Qed.
Lemma lem8398437 {A B C P : Type'} : (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)) = (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop))). Qed.
Lemma lem8398438 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term916 A B C P _115319 clauses c) = (term923 A B C P _115319 clauses c).
Proof. exact (MK_COMB (@lem8398437 A B C P) (@lem8398436 A B C P _115319 clauses c)). Qed.
Lemma lem8398439 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (((_115319 clauses c) = (term915 A B C P clauses c)) = (term916 A B C P _115319 clauses c)) = (((_115319 clauses c) = (term304 A B C P clauses c)) = (term923 A B C P _115319 clauses c)).
Proof. exact (MK_COMB (@lem8398432 A B C P _115319 clauses c) (@lem8398438 A B C P _115319 clauses c)). Qed.
Lemma lem8398440 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : ((_115319 clauses c) = (term304 A B C P clauses c)) = (term923 A B C P _115319 clauses c).
Proof. exact (EQ_MP (@lem8398439 A B C P _115319 clauses c) (@lem8398426 A B C P _115319 clauses c)). Qed.
Lemma lem8398441 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : ((_115319 clauses c f) = (term303 A B C P f clauses c)) = ((_115319 clauses c f) = (term303 A B C P f clauses c)).
Proof. exact (eq_refl ((_115319 clauses c f) = (term303 A B C P f clauses c))). Qed.
Lemma lem8398442 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term922 A B C P _115319 clauses c) = (term922 A B C P _115319 clauses c).
Proof. exact (fun_ext (fun f : type1168 A B C P => @lem8398441 A B C P _115319 f clauses c)). Qed.
Lemma lem8398443 {A B C P : Type'} : (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)) = (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop))). Qed.
Lemma lem8398444 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term923 A B C P _115319 clauses c) = (term923 A B C P _115319 clauses c).
Proof. exact (MK_COMB (@lem8398443 A B C P) (@lem8398442 A B C P _115319 clauses c)). Qed.
Lemma lem8398445 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : ((_115319 clauses c) = (term304 A B C P clauses c)) = (term923 A B C P _115319 clauses c).
Proof. exact (TRANS (@lem8398440 A B C P _115319 clauses c) (@lem8398444 A B C P _115319 clauses c)). Qed.
Lemma lem8398446 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term911 A B C P _115319 clauses) = (term924 A B C P _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8398445 A B C P _115319 clauses c)). Qed.
Lemma lem8398447 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8398448 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term912 A B C P _115319 clauses) = (term925 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8398447 C) (@lem8398446 A B C P _115319 clauses)). Qed.
Lemma lem8398449 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : ((_115319 clauses) = (term833 A B C P clauses)) = (term925 A B C P _115319 clauses).
Proof. exact (TRANS (@lem8398422 A B C P _115319 clauses) (@lem8398448 A B C P _115319 clauses)). Qed.
Lemma lem8398450 {A B C P : Type'} (_115319 : type1061 A B C P) : (term902 A B C P _115319) = (term926 A B C P _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8398449 A B C P _115319 clauses)). Qed.
Lemma lem8398451 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8398452 {A B C P : Type'} (_115319 : type1061 A B C P) : (term903 A B C P _115319) = (term927 A B C P _115319).
Proof. exact (MK_COMB (@lem8398451 A B C P) (@lem8398450 A B C P _115319)). Qed.
Lemma lem8398453 {A B C P : Type'} (_115319 : type1061 A B C P) : (_115319 = (term831 A B C P)) = (term927 A B C P _115319).
Proof. exact (TRANS (@lem8398404 A B C P _115319) (@lem8398452 A B C P _115319)). Qed.
Lemma lem8398454 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8398455 {A B C P : Type'} (_115319 : type1061 A B C P) : (term881 A B C P _115319) = (term928 A B C P _115319).
Proof. exact (MK_COMB (@lem8398454) (@lem8398453 A B C P _115319)). Qed.
Lemma lem8398456 {A B C P : Type'} (_115319 : type1061 A B C P) : (term873 A B C P _115319) = (term873 A B C P _115319).
Proof. exact (eq_refl (term873 A B C P _115319)). Qed.
Lemma lem8398457 {A B C P : Type'} (_115319 : type1061 A B C P) : (term889 A B C P _115319) = (term929 A B C P _115319).
Proof. exact (MK_COMB (@lem8398455 A B C P _115319) (@lem8398456 A B C P _115319)). Qed.
Lemma lem8398458 {A B C P : Type'} : (term891 A B C P) = (term930 A B C P).
Proof. exact (fun_ext (fun _115319 : type1061 A B C P => @lem8398457 A B C P _115319)). Qed.
Lemma lem8398459 {A B C P : Type'} : (@all ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> Prop)) = (@all ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8398460 {A B C P : Type'} : (term893 A B C P) = (term931 A B C P).
Proof. exact (MK_COMB (@lem8398459 A B C P) (@lem8398458 A B C P)). Qed.
Lemma lem8398461 {A B C P : Type'} : (term880 A B C P) = (term880 A B C P).
Proof. exact (eq_refl (term880 A B C P)). Qed.
Lemma lem8398462 {A B C P : Type'} : ((term830 A B C P) = (term893 A B C P)) = ((term830 A B C P) = (term931 A B C P)).
Proof. exact (MK_COMB (@lem8398461 A B C P) (@lem8398460 A B C P)). Qed.
Lemma lem8398463 {A B C P : Type'} : (term830 A B C P) = (term931 A B C P).
Proof. exact (EQ_MP (@lem8398462 A B C P) (@lem8398386 A B C P)). Qed.
Lemma lem8398464 {A B C P : Type'} (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : _115320 = (term932 A B C P).
Proof. exact (h1). Qed.
Lemma lem8398465 {A B C P : Type'} (clauses : type1629 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8398466 {A B C P : Type'} (clauses : type1629 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (_115320 clauses) = (term933 A B C P clauses).
Proof. exact (MK_COMB (@lem8398464 A B C P _115320 h1) (@lem8398465 A B C P clauses)). Qed.
Lemma lem8398467 {A B C P : Type'} (clauses : type1629 A B C P) : (term933 A B C P clauses) = (term934 A B C P clauses).
Proof. exact (eq_refl (term933 A B C P clauses)). Qed.
Lemma lem8398468 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term935 A B C P _115320 clauses) = (term935 A B C P _115320 clauses).
Proof. exact (eq_refl (term935 A B C P _115320 clauses)). Qed.
Lemma lem8398469 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : ((_115320 clauses) = (term933 A B C P clauses)) = ((_115320 clauses) = (term934 A B C P clauses)).
Proof. exact (MK_COMB (@lem8398468 A B C P _115320 clauses) (@lem8398467 A B C P clauses)). Qed.
Lemma lem8398470 {A B C P : Type'} (clauses : type1629 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (_115320 clauses) = (term934 A B C P clauses).
Proof. exact (EQ_MP (@lem8398469 A B C P _115320 clauses) (@lem8398466 A B C P clauses _115320 h1)). Qed.
Lemma lem8398471 {C : Type'} (c : C) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8398472 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (_115320 clauses c) = (term936 A B C P clauses c).
Proof. exact (MK_COMB (@lem8398470 A B C P clauses _115320 h1) (@lem8398471 C c)). Qed.
Lemma lem8398473 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term936 A B C P clauses c) = (term273 A B C P clauses c).
Proof. exact (eq_refl (term936 A B C P clauses c)). Qed.
Lemma lem8398474 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term937 A B C P _115320 clauses c) = (term937 A B C P _115320 clauses c).
Proof. exact (eq_refl (term937 A B C P _115320 clauses c)). Qed.
Lemma lem8398475 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : ((_115320 clauses c) = (term936 A B C P clauses c)) = ((_115320 clauses c) = (term273 A B C P clauses c)).
Proof. exact (MK_COMB (@lem8398474 A B C P _115320 clauses c) (@lem8398473 A B C P clauses c)). Qed.
Lemma lem8398476 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (_115320 clauses c) = (term273 A B C P clauses c).
Proof. exact (EQ_MP (@lem8398475 A B C P _115320 clauses c) (@lem8398472 A B C P clauses c _115320 h1)). Qed.
Lemma lem8398478 {A B C P : Type'} (clauses : type1629 A B C P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8398480 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term273 A B C P clauses c) = (_115320 clauses c).
Proof. exact (SYM (@lem8398476 A B C P clauses c _115320 h1)). Qed.
Lemma lem8398481 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term273 A B C P clauses c) = (_115320 clauses c).
Proof. exact (@lem8398480 A B C P clauses c _115320 h1). Qed.
Lemma lem8398482 {A B C P : Type'} : (@GABS ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)) = (@GABS ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop))). Qed.
Lemma lem8398483 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term274 A B C P clauses c) = (term938 A B C P _115320 clauses c).
Proof. exact (MK_COMB (@lem8398482 A B C P) (@lem8398481 A B C P clauses c _115320 h1)). Qed.
Lemma lem8398484 {A B C P : Type'} : (@List.Forall (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) = (@List.Forall (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))).
Proof. exact (eq_refl (@List.Forall (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))). Qed.
Lemma lem8398485 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term275 A B C P clauses c) = (term939 A B C P _115320 clauses c).
Proof. exact (MK_COMB (@lem8398484 A B C P) (@lem8398483 A B C P clauses c _115320 h1)). Qed.
Lemma lem8398486 {A B C P : Type'} (c : C) (clauses : type1629 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term276 A B C P c clauses) = (term940 A B C P _115320 c clauses).
Proof. exact (MK_COMB (@lem8398485 A B C P clauses c _115320 h1) (@lem8398478 A B C P clauses)). Qed.
Lemma lem8398535 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) (y : type558 A B P) : (term277 A B C P clauses s s' t x t' c y) = (term277 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term277 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8398536 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term278 A B C P clauses s s' t x t' c) = (term278 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : type558 A B P => @lem8398535 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8398537 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8398538 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term279 A B C P clauses s s' t x t' c) = (term279 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8398537 A B P) (@lem8398536 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8398539 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term280 A B C P clauses s s' t t' c) = (term280 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : type558 A B P => @lem8398538 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8398540 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8398541 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term281 A B C P clauses s s' t t' c) = (term281 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8398540 A B P) (@lem8398539 A B C P clauses s s' t t' c)). Qed.
Lemma lem8398542 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term282 A B C P clauses s s' t c) = (term282 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1490 A B C P => @lem8398541 A B C P clauses s s' t t' c)). Qed.
Lemma lem8398543 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8398544 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term283 A B C P clauses s s' t c) = (term283 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8398543 A B C P) (@lem8398542 A B C P clauses s s' t c)). Qed.
Lemma lem8398545 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term284 A B C P clauses s t c) = (term284 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type115 A B P => @lem8398544 A B C P clauses s s' t c)). Qed.
Lemma lem8398546 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8398547 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term285 A B C P clauses s t c) = (term285 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8398546 A B P) (@lem8398545 A B C P clauses s t c)). Qed.
Lemma lem8398548 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term286 A B C P clauses s c) = (term286 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8398547 A B C P clauses s t c)). Qed.
Lemma lem8398549 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8398550 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term287 A B C P clauses s c) = (term287 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8398549 A B C P) (@lem8398548 A B C P clauses s c)). Qed.
Lemma lem8398551 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term288 A B C P clauses c) = (term288 A B C P clauses c).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8398550 A B C P clauses s c)). Qed.
Lemma lem8398552 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8398553 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term289 A B C P clauses c) = (term289 A B C P clauses c).
Proof. exact (MK_COMB (@lem8398552 A B P) (@lem8398551 A B C P clauses c)). Qed.
Lemma lem8398554 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8398555 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term290 A B C P clauses c) = (term290 A B C P clauses c).
Proof. exact (MK_COMB (@lem8398554) (@lem8398553 A B C P clauses c)). Qed.
Lemma lem8398556 {A B C P : Type'} (c : C) (clauses : type1629 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term291 A B C P c clauses) = (term941 A B C P _115320 c clauses).
Proof. exact (MK_COMB (@lem8398555 A B C P clauses c) (@lem8398486 A B C P c clauses _115320 h1)). Qed.
Lemma lem8398557 {A B C P : Type'} (clauses : type1629 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term292 A B C P clauses) = (term942 A B C P _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8398556 A B C P c clauses _115320 h1)). Qed.
Lemma lem8398558 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8398559 {A B C P : Type'} (clauses : type1629 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term293 A B C P clauses) = (term943 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8398558 C) (@lem8398557 A B C P clauses _115320 h1)). Qed.
Lemma lem8398560 {A B C P : Type'} (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term294 A B C P) = (term944 A B C P _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8398559 A B C P clauses _115320 h1)). Qed.
Lemma lem8398561 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8398562 {A B C P : Type'} (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term219 A B C P) = (term945 A B C P _115320).
Proof. exact (MK_COMB (@lem8398561 A B C P) (@lem8398560 A B C P _115320 h1)). Qed.
Lemma lem8398563 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8398564 {A B C P : Type'} (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term225 A B C P) = (term946 A B C P _115320).
Proof. exact (MK_COMB (@lem8398563) (@lem8398562 A B C P _115320 h1)). Qed.
Lemma lem8398575 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term839 A B C P _115319 c clauses) = (term839 A B C P _115319 c clauses).
Proof. exact (eq_refl (term839 A B C P _115319 c clauses)). Qed.
Lemma lem8398624 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) (y : P -> A) : (term308 A B C P clauses s s' t x t' c y) = (term308 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term308 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8398625 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term309 A B C P clauses s s' t x t' c) = (term309 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P -> A => @lem8398624 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8398626 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8398627 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term310 A B C P clauses s s' t x t' c) = (term310 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8398626 A P) (@lem8398625 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8398628 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term311 A B C P clauses s s' t t' c) = (term311 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P -> A => @lem8398627 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8398629 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8398630 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term312 A B C P clauses s s' t t' c) = (term312 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8398629 A P) (@lem8398628 A B C P clauses s s' t t' c)). Qed.
Lemma lem8398631 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term313 A B C P clauses s s' t c) = (term313 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1512 A B C P => @lem8398630 A B C P clauses s s' t t' c)). Qed.
Lemma lem8398632 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8398633 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term314 A B C P clauses s s' t c) = (term314 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8398632 A B C P) (@lem8398631 A B C P clauses s s' t c)). Qed.
Lemma lem8398634 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term315 A B C P clauses s t c) = (term315 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type802 A P => @lem8398633 A B C P clauses s s' t c)). Qed.
Lemma lem8398635 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8398636 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term316 A B C P clauses s t c) = (term316 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8398635 A P) (@lem8398634 A B C P clauses s t c)). Qed.
Lemma lem8398637 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term317 A B C P clauses s c) = (term317 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8398636 A B C P clauses s t c)). Qed.
Lemma lem8398638 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8398639 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term318 A B C P clauses s c) = (term318 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8398638 A B C P) (@lem8398637 A B C P clauses s c)). Qed.
Lemma lem8398640 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term319 A B C P clauses c) = (term319 A B C P clauses c).
Proof. exact (fun_ext (fun s : type802 A P => @lem8398639 A B C P clauses s c)). Qed.
Lemma lem8398641 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8398642 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term320 A B C P clauses c) = (term320 A B C P clauses c).
Proof. exact (MK_COMB (@lem8398641 A P) (@lem8398640 A B C P clauses c)). Qed.
Lemma lem8398643 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8398644 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term321 A B C P clauses c) = (term321 A B C P clauses c).
Proof. exact (MK_COMB (@lem8398643) (@lem8398642 A B C P clauses c)). Qed.
Lemma lem8398645 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term840 A B C P _115319 c clauses) = (term840 A B C P _115319 c clauses).
Proof. exact (MK_COMB (@lem8398644 A B C P clauses c) (@lem8398575 A B C P _115319 c clauses)). Qed.
Lemma lem8398646 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term841 A B C P _115319 clauses) = (term841 A B C P _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8398645 A B C P _115319 c clauses)). Qed.
Lemma lem8398647 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8398648 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term842 A B C P _115319 clauses) = (term842 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8398647 C) (@lem8398646 A B C P _115319 clauses)). Qed.
Lemma lem8398649 {A B C P : Type'} (_115319 : type1061 A B C P) : (term843 A B C P _115319) = (term843 A B C P _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8398648 A B C P _115319 clauses)). Qed.
Lemma lem8398650 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8398651 {A B C P : Type'} (_115319 : type1061 A B C P) : (term844 A B C P _115319) = (term844 A B C P _115319).
Proof. exact (MK_COMB (@lem8398650 A B C P) (@lem8398649 A B C P _115319)). Qed.
Lemma lem8398652 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8398653 {A B C P : Type'} (_115319 : type1061 A B C P) : (term845 A B C P _115319) = (term845 A B C P _115319).
Proof. exact (MK_COMB (@lem8398652) (@lem8398651 A B C P _115319)). Qed.
Lemma lem8398654 {A B C P : Type'} (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term846 A B C P _115319) = (term947 A B C P _115319 _115320).
Proof. exact (MK_COMB (@lem8398653 A B C P _115319) (@lem8398564 A B C P _115320 h1)). Qed.
Lemma lem8398665 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term742 A B C P _115318 c clauses) = (term742 A B C P _115318 c clauses).
Proof. exact (eq_refl (term742 A B C P _115318 c clauses)). Qed.
Lemma lem8398714 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) (y : A -> B) : (term339 A B C P clauses s s' t x t' c y) = (term339 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term339 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8398715 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term340 A B C P clauses s s' t x t' c) = (term340 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : A -> B => @lem8398714 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8398716 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8398717 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term341 A B C P clauses s s' t x t' c) = (term341 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8398716 A B) (@lem8398715 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8398718 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term342 A B C P clauses s s' t t' c) = (term342 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : A -> B => @lem8398717 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8398719 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8398720 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term343 A B C P clauses s s' t t' c) = (term343 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8398719 A B) (@lem8398718 A B C P clauses s s' t t' c)). Qed.
Lemma lem8398721 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term344 A B C P clauses s s' t c) = (term344 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1506 A B C => @lem8398720 A B C P clauses s s' t t' c)). Qed.
Lemma lem8398722 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8398723 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term345 A B C P clauses s s' t c) = (term345 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8398722 A B C) (@lem8398721 A B C P clauses s s' t c)). Qed.
Lemma lem8398724 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term346 A B C P clauses s t c) = (term346 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type558 A B P => @lem8398723 A B C P clauses s s' t c)). Qed.
Lemma lem8398725 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8398726 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term347 A B C P clauses s t c) = (term347 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8398725 A B P) (@lem8398724 A B C P clauses s t c)). Qed.
Lemma lem8398727 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term348 A B C P clauses s c) = (term348 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8398726 A B C P clauses s t c)). Qed.
Lemma lem8398728 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8398729 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term349 A B C P clauses s c) = (term349 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8398728 A B C) (@lem8398727 A B C P clauses s c)). Qed.
Lemma lem8398730 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term350 A B C P clauses c) = (term350 A B C P clauses c).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8398729 A B C P clauses s c)). Qed.
Lemma lem8398731 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8398732 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term351 A B C P clauses c) = (term351 A B C P clauses c).
Proof. exact (MK_COMB (@lem8398731 A B P) (@lem8398730 A B C P clauses c)). Qed.
Lemma lem8398733 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8398734 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term352 A B C P clauses c) = (term352 A B C P clauses c).
Proof. exact (MK_COMB (@lem8398733) (@lem8398732 A B C P clauses c)). Qed.
Lemma lem8398735 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term743 A B C P _115318 c clauses) = (term743 A B C P _115318 c clauses).
Proof. exact (MK_COMB (@lem8398734 A B C P clauses c) (@lem8398665 A B C P _115318 c clauses)). Qed.
Lemma lem8398736 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term744 A B C P _115318 clauses) = (term744 A B C P _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8398735 A B C P _115318 c clauses)). Qed.
Lemma lem8398737 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8398738 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term745 A B C P _115318 clauses) = (term745 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8398737 C) (@lem8398736 A B C P _115318 clauses)). Qed.
Lemma lem8398739 {A B C P : Type'} (_115318 : type1049 A B C P) : (term746 A B C P _115318) = (term746 A B C P _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8398738 A B C P _115318 clauses)). Qed.
Lemma lem8398740 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8398741 {A B C P : Type'} (_115318 : type1049 A B C P) : (term747 A B C P _115318) = (term747 A B C P _115318).
Proof. exact (MK_COMB (@lem8398740 A B C P) (@lem8398739 A B C P _115318)). Qed.
Lemma lem8398742 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8398743 {A B C P : Type'} (_115318 : type1049 A B C P) : (term748 A B C P _115318) = (term748 A B C P _115318).
Proof. exact (MK_COMB (@lem8398742) (@lem8398741 A B C P _115318)). Qed.
Lemma lem8398744 {A B C P : Type'} (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term847 A B C P _115318 _115319) = (term948 A B C P _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8398743 A B C P _115318) (@lem8398654 A B C P _115319 _115320 h1)). Qed.
Lemma lem8398755 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term528 B C P _115317 c clauses) = (term528 B C P _115317 c clauses).
Proof. exact (eq_refl (term528 B C P _115317 c clauses)). Qed.
Lemma lem8398804 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term370 B C P clauses s s' t x t' c y) = (term370 B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term370 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8398805 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term371 B C P clauses s s' t x t' c) = (term371 B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8398804 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8398806 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8398807 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term372 B C P clauses s s' t x t' c) = (term372 B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8398806 P) (@lem8398805 B C P clauses s s' t x t' c)). Qed.
Lemma lem8398808 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term373 B C P clauses s s' t t' c) = (term373 B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8398807 B C P clauses s s' t x t' c)). Qed.
Lemma lem8398809 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8398810 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term374 B C P clauses s s' t t' c) = (term374 B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8398809 P) (@lem8398808 B C P clauses s s' t t' c)). Qed.
Lemma lem8398811 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term375 B C P clauses s s' t c) = (term375 B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8398810 B C P clauses s s' t t' c)). Qed.
Lemma lem8398812 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8398813 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term376 B C P clauses s s' t c) = (term376 B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8398812 B C P) (@lem8398811 B C P clauses s s' t c)). Qed.
Lemma lem8398814 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term377 B C P clauses s t c) = (term377 B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> B => @lem8398813 B C P clauses s s' t c)). Qed.
Lemma lem8398815 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8398816 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term378 B C P clauses s t c) = (term378 B C P clauses s t c).
Proof. exact (MK_COMB (@lem8398815 B P) (@lem8398814 B C P clauses s t c)). Qed.
Lemma lem8398817 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term379 B C P clauses s c) = (term379 B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8398816 B C P clauses s t c)). Qed.
Lemma lem8398818 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8398819 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term380 B C P clauses s c) = (term380 B C P clauses s c).
Proof. exact (MK_COMB (@lem8398818 B C P) (@lem8398817 B C P clauses s c)). Qed.
Lemma lem8398820 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term381 B C P clauses c) = (term381 B C P clauses c).
Proof. exact (fun_ext (fun s : P -> B => @lem8398819 B C P clauses s c)). Qed.
Lemma lem8398821 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8398822 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term382 B C P clauses c) = (term382 B C P clauses c).
Proof. exact (MK_COMB (@lem8398821 B P) (@lem8398820 B C P clauses c)). Qed.
Lemma lem8398823 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8398824 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term383 B C P clauses c) = (term383 B C P clauses c).
Proof. exact (MK_COMB (@lem8398823) (@lem8398822 B C P clauses c)). Qed.
Lemma lem8398825 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term529 B C P _115317 c clauses) = (term529 B C P _115317 c clauses).
Proof. exact (MK_COMB (@lem8398824 B C P clauses c) (@lem8398755 B C P _115317 c clauses)). Qed.
Lemma lem8398826 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term530 B C P _115317 clauses) = (term530 B C P _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8398825 B C P _115317 c clauses)). Qed.
Lemma lem8398827 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8398828 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term531 B C P _115317 clauses) = (term531 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8398827 C) (@lem8398826 B C P _115317 clauses)). Qed.
Lemma lem8398829 {B C P : Type'} (_115317 : type1092 B C P) : (term532 B C P _115317) = (term532 B C P _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8398828 B C P _115317 clauses)). Qed.
Lemma lem8398830 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8398831 {B C P : Type'} (_115317 : type1092 B C P) : (term533 B C P _115317) = (term533 B C P _115317).
Proof. exact (MK_COMB (@lem8398830 B C P) (@lem8398829 B C P _115317)). Qed.
Lemma lem8398832 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8398833 {B C P : Type'} (_115317 : type1092 B C P) : (term534 B C P _115317) = (term534 B C P _115317).
Proof. exact (MK_COMB (@lem8398832) (@lem8398831 B C P _115317)). Qed.
Lemma lem8398834 {A B C P : Type'} (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term848 A B C P _115317 _115318 _115319) = (term949 A B C P _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8398833 B C P _115317) (@lem8398744 A B C P _115318 _115319 _115320 h1)). Qed.
Lemma lem8398845 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 c clauses) = (term390 A B P _115314 c clauses).
Proof. exact (eq_refl (term390 A B P _115314 c clauses)). Qed.
Lemma lem8398894 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) (y : P) : (term391 A B P clauses s s' t x t' c y) = (term391 A B P clauses s s' t x t' c y).
Proof. exact (eq_refl (term391 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8398895 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term392 A B P clauses s s' t x t' c) = (term392 A B P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8398894 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8398896 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8398897 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term393 A B P clauses s s' t x t' c) = (term393 A B P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8398896 P) (@lem8398895 A B P clauses s s' t x t' c)). Qed.
Lemma lem8398898 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term394 A B P clauses s s' t t' c) = (term394 A B P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8398897 A B P clauses s s' t x t' c)). Qed.
Lemma lem8398899 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8398900 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term395 A B P clauses s s' t t' c) = (term395 A B P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8398899 P) (@lem8398898 A B P clauses s s' t t' c)). Qed.
Lemma lem8398901 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term396 A B P clauses s s' t c) = (term396 A B P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8398900 A B P clauses s s' t t' c)). Qed.
Lemma lem8398902 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8398903 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term397 A B P clauses s s' t c) = (term397 A B P clauses s s' t c).
Proof. exact (MK_COMB (@lem8398902 A B P) (@lem8398901 A B P clauses s s' t c)). Qed.
Lemma lem8398904 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term398 A B P clauses s t c) = (term398 A B P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8398903 A B P clauses s s' t c)). Qed.
Lemma lem8398905 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8398906 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term399 A B P clauses s t c) = (term399 A B P clauses s t c).
Proof. exact (MK_COMB (@lem8398905 A P) (@lem8398904 A B P clauses s t c)). Qed.
Lemma lem8398907 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term400 A B P clauses s c) = (term400 A B P clauses s c).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8398906 A B P clauses s t c)). Qed.
Lemma lem8398908 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8398909 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term401 A B P clauses s c) = (term401 A B P clauses s c).
Proof. exact (MK_COMB (@lem8398908 A B P) (@lem8398907 A B P clauses s c)). Qed.
Lemma lem8398910 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term402 A B P clauses c) = (term402 A B P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8398909 A B P clauses s c)). Qed.
Lemma lem8398911 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8398912 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term403 A B P clauses c) = (term403 A B P clauses c).
Proof. exact (MK_COMB (@lem8398911 A P) (@lem8398910 A B P clauses c)). Qed.
Lemma lem8398913 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8398914 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term404 A B P clauses c) = (term404 A B P clauses c).
Proof. exact (MK_COMB (@lem8398913) (@lem8398912 A B P clauses c)). Qed.
Lemma lem8398915 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term406 A B P _115314 c clauses) = (term406 A B P _115314 c clauses).
Proof. exact (MK_COMB (@lem8398914 A B P clauses c) (@lem8398845 A B P _115314 c clauses)). Qed.
Lemma lem8398916 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term408 A B P _115314 clauses) = (term408 A B P _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8398915 A B P _115314 c clauses)). Qed.
Lemma lem8398917 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8398918 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term410 A B P _115314 clauses) = (term410 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8398917 A B) (@lem8398916 A B P _115314 clauses)). Qed.
Lemma lem8398919 {A B P : Type'} (_115314 : type1080 A B P) : (term412 A B P _115314) = (term412 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8398918 A B P _115314 clauses)). Qed.
Lemma lem8398920 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8398921 {A B P : Type'} (_115314 : type1080 A B P) : (term413 A B P _115314) = (term413 A B P _115314).
Proof. exact (MK_COMB (@lem8398920 A B P) (@lem8398919 A B P _115314)). Qed.
Lemma lem8398922 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8398923 {A B P : Type'} (_115314 : type1080 A B P) : (term414 A B P _115314) = (term414 A B P _115314).
Proof. exact (MK_COMB (@lem8398922) (@lem8398921 A B P _115314)). Qed.
Lemma lem8398924 {A B C P : Type'} (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term849 A B C P _115314 _115317 _115318 _115319) = (term950 A B C P _115314 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8398923 A B P _115314) (@lem8398834 A B C P _115317 _115318 _115319 _115320 h1)). Qed.
Lemma lem8398935 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term612 A B C P _115316 c clauses) = (term612 A B C P _115316 c clauses).
Proof. exact (eq_refl (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8398984 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term429 A B C P clauses s s' t x t' c y) = (term429 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term429 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8398985 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term430 A B C P clauses s s' t x t' c) = (term430 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8398984 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8398986 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8398987 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term431 A B C P clauses s s' t x t' c) = (term431 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8398986 P) (@lem8398985 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8398988 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term432 A B C P clauses s s' t t' c) = (term432 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8398987 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8398989 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8398990 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term433 A B C P clauses s s' t t' c) = (term433 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8398989 P) (@lem8398988 A B C P clauses s s' t t' c)). Qed.
Lemma lem8398991 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term434 A B C P clauses s s' t c) = (term434 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8398990 A B C P clauses s s' t t' c)). Qed.
Lemma lem8398992 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8398993 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term435 A B C P clauses s s' t c) = (term435 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8398992 B C P) (@lem8398991 A B C P clauses s s' t c)). Qed.
Lemma lem8398994 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term436 A B C P clauses s t c) = (term436 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8398993 A B C P clauses s s' t c)). Qed.
Lemma lem8398995 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8398996 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term437 A B C P clauses s t c) = (term437 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8398995 A P) (@lem8398994 A B C P clauses s t c)). Qed.
Lemma lem8398997 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term438 A B C P clauses s c) = (term438 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8398996 A B C P clauses s t c)). Qed.
Lemma lem8398998 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8398999 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term439 A B C P clauses s c) = (term439 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8398998 B C P) (@lem8398997 A B C P clauses s c)). Qed.
Lemma lem8399000 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term440 A B C P clauses c) = (term440 A B C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8398999 A B C P clauses s c)). Qed.
Lemma lem8399001 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8399002 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term441 A B C P clauses c) = (term441 A B C P clauses c).
Proof. exact (MK_COMB (@lem8399001 A P) (@lem8399000 A B C P clauses c)). Qed.
Lemma lem8399003 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399004 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term442 A B C P clauses c) = (term442 A B C P clauses c).
Proof. exact (MK_COMB (@lem8399003) (@lem8399002 A B C P clauses c)). Qed.
Lemma lem8399005 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term613 A B C P _115316 c clauses) = (term613 A B C P _115316 c clauses).
Proof. exact (MK_COMB (@lem8399004 A B C P clauses c) (@lem8398935 A B C P _115316 c clauses)). Qed.
Lemma lem8399006 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term614 A B C P _115316 clauses) = (term614 A B C P _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8399005 A B C P _115316 c clauses)). Qed.
Lemma lem8399007 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8399008 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term615 A B C P _115316 clauses) = (term615 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8399007 C) (@lem8399006 A B C P _115316 clauses)). Qed.
Lemma lem8399009 {A B C P : Type'} (_115316 : type1115 A B C P) : (term616 A B C P _115316) = (term616 A B C P _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8399008 A B C P _115316 clauses)). Qed.
Lemma lem8399010 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8399011 {A B C P : Type'} (_115316 : type1115 A B C P) : (term617 A B C P _115316) = (term617 A B C P _115316).
Proof. exact (MK_COMB (@lem8399010 A B C P) (@lem8399009 A B C P _115316)). Qed.
Lemma lem8399012 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399013 {A B C P : Type'} (_115316 : type1115 A B C P) : (term618 A B C P _115316) = (term618 A B C P _115316).
Proof. exact (MK_COMB (@lem8399012) (@lem8399011 A B C P _115316)). Qed.
Lemma lem8399014 {A B C P : Type'} (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term850 A B C P _115316 _115314 _115317 _115318 _115319) = (term951 A B C P _115316 _115314 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8399013 A B C P _115316) (@lem8398924 A B C P _115314 _115317 _115318 _115319 _115320 h1)). Qed.
Lemma lem8399025 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term528 A C P _115315 c clauses) = (term528 A C P _115315 c clauses).
Proof. exact (eq_refl (term528 A C P _115315 c clauses)). Qed.
Lemma lem8399074 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) (y : P) : (term370 A C P clauses s s' t x t' c y) = (term370 A C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term370 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8399075 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term371 A C P clauses s s' t x t' c) = (term371 A C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8399074 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8399076 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8399077 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term372 A C P clauses s s' t x t' c) = (term372 A C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8399076 P) (@lem8399075 A C P clauses s s' t x t' c)). Qed.
Lemma lem8399078 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term373 A C P clauses s s' t t' c) = (term373 A C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8399077 A C P clauses s s' t x t' c)). Qed.
Lemma lem8399079 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8399080 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term374 A C P clauses s s' t t' c) = (term374 A C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8399079 P) (@lem8399078 A C P clauses s s' t t' c)). Qed.
Lemma lem8399081 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term375 A C P clauses s s' t c) = (term375 A C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 A C P => @lem8399080 A C P clauses s s' t t' c)). Qed.
Lemma lem8399082 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8399083 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term376 A C P clauses s s' t c) = (term376 A C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8399082 A C P) (@lem8399081 A C P clauses s s' t c)). Qed.
Lemma lem8399084 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term377 A C P clauses s t c) = (term377 A C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8399083 A C P clauses s s' t c)). Qed.
Lemma lem8399085 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8399086 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term378 A C P clauses s t c) = (term378 A C P clauses s t c).
Proof. exact (MK_COMB (@lem8399085 A P) (@lem8399084 A C P clauses s t c)). Qed.
Lemma lem8399087 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term379 A C P clauses s c) = (term379 A C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8399086 A C P clauses s t c)). Qed.
Lemma lem8399088 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8399089 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term380 A C P clauses s c) = (term380 A C P clauses s c).
Proof. exact (MK_COMB (@lem8399088 A C P) (@lem8399087 A C P clauses s c)). Qed.
Lemma lem8399090 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term381 A C P clauses c) = (term381 A C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8399089 A C P clauses s c)). Qed.
Lemma lem8399091 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8399092 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term382 A C P clauses c) = (term382 A C P clauses c).
Proof. exact (MK_COMB (@lem8399091 A P) (@lem8399090 A C P clauses c)). Qed.
Lemma lem8399093 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399094 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term383 A C P clauses c) = (term383 A C P clauses c).
Proof. exact (MK_COMB (@lem8399093) (@lem8399092 A C P clauses c)). Qed.
Lemma lem8399095 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term529 A C P _115315 c clauses) = (term529 A C P _115315 c clauses).
Proof. exact (MK_COMB (@lem8399094 A C P clauses c) (@lem8399025 A C P _115315 c clauses)). Qed.
Lemma lem8399096 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term530 A C P _115315 clauses) = (term530 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8399095 A C P _115315 c clauses)). Qed.
Lemma lem8399097 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8399098 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term531 A C P _115315 clauses) = (term531 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8399097 C) (@lem8399096 A C P _115315 clauses)). Qed.
Lemma lem8399099 {A C P : Type'} (_115315 : type1092 A C P) : (term532 A C P _115315) = (term532 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8399098 A C P _115315 clauses)). Qed.
Lemma lem8399100 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8399101 {A C P : Type'} (_115315 : type1092 A C P) : (term533 A C P _115315) = (term533 A C P _115315).
Proof. exact (MK_COMB (@lem8399100 A C P) (@lem8399099 A C P _115315)). Qed.
Lemma lem8399102 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399103 {A C P : Type'} (_115315 : type1092 A C P) : (term534 A C P _115315) = (term534 A C P _115315).
Proof. exact (MK_COMB (@lem8399102) (@lem8399101 A C P _115315)). Qed.
Lemma lem8399104 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term851 A B C P _115315 _115316 _115314 _115317 _115318 _115319) = (term952 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8399103 A C P _115315) (@lem8399014 A B C P _115316 _115314 _115317 _115318 _115319 _115320 h1)). Qed.
Lemma lem8399119 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) : (term450 A B P _115314 f clauses) = (term450 A B P _115314 f clauses).
Proof. exact (eq_refl (term450 A B P _115314 f clauses)). Qed.
Lemma lem8399120 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term852 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319) = (term953 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8399119 A B P _115314 f clauses) (@lem8399104 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320 h1)). Qed.
Lemma lem8399133 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (x : A) : ((f x) = (@CASEWISE B P A (A -> B) clauses f x)) = ((f x) = (@CASEWISE B P A (A -> B) clauses f x)).
Proof. exact (eq_refl ((f x) = (@CASEWISE B P A (A -> B) clauses f x))). Qed.
Lemma lem8399134 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term452 A B P clauses f) = (term452 A B P clauses f).
Proof. exact (fun_ext (fun x : A => @lem8399133 A B P clauses f x)). Qed.
Lemma lem8399135 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8399136 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term162 A B P clauses f) = (term162 A B P clauses f).
Proof. exact (MK_COMB (@lem8399135 A) (@lem8399134 A B P clauses f)). Qed.
Lemma lem8399137 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399138 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term164 A B P clauses f) = (term164 A B P clauses f).
Proof. exact (MK_COMB (@lem8399137) (@lem8399136 A B P clauses f)). Qed.
Lemma lem8399139 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term853 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319) = (term954 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8399138 A B P clauses f) (@lem8399120 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320 h1)). Qed.
Lemma lem8399188 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) (y : P) : (term115 A B P clauses s s' t x t' f y) = (term115 A B P clauses s s' t x t' f y).
Proof. exact (eq_refl (term115 A B P clauses s s' t x t' f y)). Qed.
Lemma lem8399189 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term118 A B P clauses s s' t x t' f) = (term118 A B P clauses s s' t x t' f).
Proof. exact (fun_ext (fun y : P => @lem8399188 A B P clauses s s' t x t' f y)). Qed.
Lemma lem8399190 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8399191 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term120 A B P clauses s s' t x t' f) = (term120 A B P clauses s s' t x t' f).
Proof. exact (MK_COMB (@lem8399190 P) (@lem8399189 A B P clauses s s' t x t' f)). Qed.
Lemma lem8399192 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term122 A B P clauses s s' t t' f) = (term122 A B P clauses s s' t t' f).
Proof. exact (fun_ext (fun x : P => @lem8399191 A B P clauses s s' t x t' f)). Qed.
Lemma lem8399193 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8399194 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term124 A B P clauses s s' t t' f) = (term124 A B P clauses s s' t t' f).
Proof. exact (MK_COMB (@lem8399193 P) (@lem8399192 A B P clauses s s' t t' f)). Qed.
Lemma lem8399195 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term126 A B P clauses s s' t t') = (term126 A B P clauses s s' t t').
Proof. exact (fun_ext (fun f : A -> B => @lem8399194 A B P clauses s s' t t' f)). Qed.
Lemma lem8399196 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8399197 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term128 A B P clauses s s' t t') = (term128 A B P clauses s s' t t').
Proof. exact (MK_COMB (@lem8399196 A B) (@lem8399195 A B P clauses s s' t t')). Qed.
Lemma lem8399198 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term130 A B P clauses s s' t) = (term130 A B P clauses s s' t).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8399197 A B P clauses s s' t t')). Qed.
Lemma lem8399199 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8399200 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term132 A B P clauses s s' t) = (term132 A B P clauses s s' t).
Proof. exact (MK_COMB (@lem8399199 A B P) (@lem8399198 A B P clauses s s' t)). Qed.
Lemma lem8399201 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term134 A B P clauses s t) = (term134 A B P clauses s t).
Proof. exact (fun_ext (fun s' : P -> A => @lem8399200 A B P clauses s s' t)). Qed.
Lemma lem8399202 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8399203 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term136 A B P clauses s t) = (term136 A B P clauses s t).
Proof. exact (MK_COMB (@lem8399202 A P) (@lem8399201 A B P clauses s t)). Qed.
Lemma lem8399204 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term138 A B P clauses s) = (term138 A B P clauses s).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8399203 A B P clauses s t)). Qed.
Lemma lem8399205 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8399206 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term140 A B P clauses s) = (term140 A B P clauses s).
Proof. exact (MK_COMB (@lem8399205 A B P) (@lem8399204 A B P clauses s)). Qed.
Lemma lem8399207 {A B P : Type'} (clauses : type1635 A B P) : (term142 A B P clauses) = (term142 A B P clauses).
Proof. exact (fun_ext (fun s : P -> A => @lem8399206 A B P clauses s)). Qed.
Lemma lem8399208 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8399209 {A B P : Type'} (clauses : type1635 A B P) : (term144 A B P clauses) = (term144 A B P clauses).
Proof. exact (MK_COMB (@lem8399208 A P) (@lem8399207 A B P clauses)). Qed.
Lemma lem8399210 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399211 {A B P : Type'} (clauses : type1635 A B P) : (term248 A B P clauses) = (term248 A B P clauses).
Proof. exact (MK_COMB (@lem8399210) (@lem8399209 A B P clauses)). Qed.
Lemma lem8399212 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term854 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319) = (term955 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8399211 A B P clauses) (@lem8399139 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320 h1)). Qed.
Lemma lem8399213 {A B C P : Type'} (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term855 A B C P clauses _115315 _115316 _115314 _115317 _115318 _115319) = (term956 A B C P clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320).
Proof. exact (fun_ext (fun f : A -> B => @lem8399212 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320 h1)). Qed.
Lemma lem8399214 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8399215 {A B C P : Type'} (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term856 A B C P clauses _115315 _115316 _115314 _115317 _115318 _115319) = (term957 A B C P clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8399214 A B) (@lem8399213 A B C P clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320 h1)). Qed.
Lemma lem8399216 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term857 A B C P _115315 _115316 _115314 _115317 _115318 _115319) = (term958 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8399215 A B C P clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320 h1)). Qed.
Lemma lem8399217 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8399218 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term858 A B C P _115315 _115316 _115314 _115317 _115318 _115319) = (term959 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8399217 A B P) (@lem8399216 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320 h1)). Qed.
Lemma lem8399235 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f : A -> B) (x : P) : ((term186 A B P clauses f s x) = (t f x)) = ((term186 A B P clauses f s x) = (t f x)).
Proof. exact (eq_refl ((term186 A B P clauses f s x) = (t f x))). Qed.
Lemma lem8399236 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f : A -> B) : (term190 A B P clauses s t f) = (term190 A B P clauses s t f).
Proof. exact (fun_ext (fun x : P => @lem8399235 A B P clauses s t f x)). Qed.
Lemma lem8399237 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8399238 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f : A -> B) : (term192 A B P clauses s t f) = (term192 A B P clauses s t f).
Proof. exact (MK_COMB (@lem8399237 P) (@lem8399236 A B P clauses s t f)). Qed.
Lemma lem8399247 {A B P : Type'} (f : type1177 A B P) (s : P -> A) (t : type558 A B P) : (term193 A B P f s t) = (term193 A B P f s t).
Proof. exact (eq_refl (term193 A B P f s t)). Qed.
Lemma lem8399248 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f' : A -> B) : (term195 A B P f clauses s t f') = (term195 A B P f clauses s t f').
Proof. exact (MK_COMB (@lem8399247 A B P f s t) (@lem8399238 A B P clauses s t f')). Qed.
Lemma lem8399249 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term197 A B P f clauses s f') = (term197 A B P f clauses s f').
Proof. exact (fun_ext (fun t : type558 A B P => @lem8399248 A B P f clauses s t f')). Qed.
Lemma lem8399250 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8399251 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term199 A B P f clauses s f') = (term199 A B P f clauses s f').
Proof. exact (MK_COMB (@lem8399250 A B P) (@lem8399249 A B P f clauses s f')). Qed.
Lemma lem8399252 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term201 A B P f clauses f') = (term201 A B P f clauses f').
Proof. exact (fun_ext (fun s : P -> A => @lem8399251 A B P f clauses s f')). Qed.
Lemma lem8399253 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8399254 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term203 A B P f clauses f') = (term203 A B P f clauses f').
Proof. exact (MK_COMB (@lem8399253 A P) (@lem8399252 A B P f clauses f')). Qed.
Lemma lem8399263 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) (f' : type1177 A B P) : (term508 A B P _115314 clauses f f') = (term508 A B P _115314 clauses f f').
Proof. exact (eq_refl (term508 A B P _115314 clauses f f')). Qed.
Lemma lem8399264 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : ((_115314 clauses f' f) = (term203 A B P f clauses f')) = ((_115314 clauses f' f) = (term203 A B P f clauses f')).
Proof. exact (MK_COMB (@lem8399263 A B P _115314 clauses f' f) (@lem8399254 A B P f clauses f')). Qed.
Lemma lem8399265 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term510 A B P _115314 clauses f) = (term510 A B P _115314 clauses f).
Proof. exact (fun_ext (fun f' : type1177 A B P => @lem8399264 A B P _115314 f' clauses f)). Qed.
Lemma lem8399266 {A B P : Type'} : (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) = (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop))). Qed.
Lemma lem8399267 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term511 A B P _115314 clauses f) = (term511 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8399266 A B P) (@lem8399265 A B P _115314 clauses f)). Qed.
Lemma lem8399268 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term512 A B P _115314 clauses) = (term512 A B P _115314 clauses).
Proof. exact (fun_ext (fun f : A -> B => @lem8399267 A B P _115314 clauses f)). Qed.
Lemma lem8399269 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8399270 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term513 A B P _115314 clauses) = (term513 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8399269 A B) (@lem8399268 A B P _115314 clauses)). Qed.
Lemma lem8399271 {A B P : Type'} (_115314 : type1080 A B P) : (term514 A B P _115314) = (term514 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8399270 A B P _115314 clauses)). Qed.
Lemma lem8399272 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8399273 {A B P : Type'} (_115314 : type1080 A B P) : (term515 A B P _115314) = (term515 A B P _115314).
Proof. exact (MK_COMB (@lem8399272 A B P) (@lem8399271 A B P _115314)). Qed.
Lemma lem8399274 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399275 {A B P : Type'} (_115314 : type1080 A B P) : (term516 A B P _115314) = (term516 A B P _115314).
Proof. exact (MK_COMB (@lem8399274) (@lem8399273 A B P _115314)). Qed.
Lemma lem8399276 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term859 A B C P _115315 _115316 _115314 _115317 _115318 _115319) = (term960 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8399275 A B P _115314) (@lem8399218 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320 h1)). Qed.
Lemma lem8399277 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term860 A B C P _115315 _115316 _115317 _115318 _115319) = (term961 A B C P _115315 _115316 _115317 _115318 _115319 _115320).
Proof. exact (fun_ext (fun _115314 : type1080 A B P => @lem8399276 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320 h1)). Qed.
Lemma lem8399278 {A B P : Type'} : (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8399279 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term861 A B C P _115315 _115316 _115317 _115318 _115319) = (term962 A B C P _115315 _115316 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8399278 A B P) (@lem8399277 A B C P _115315 _115316 _115317 _115318 _115319 _115320 h1)). Qed.
Lemma lem8399296 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) (x : P) : ((term357 A C P clauses c s x) = (t c x)) = ((term357 A C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term357 A C P clauses c s x) = (t c x))). Qed.
Lemma lem8399297 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term358 A C P clauses s t c) = (term358 A C P clauses s t c).
Proof. exact (fun_ext (fun x : P => @lem8399296 A C P clauses s t c x)). Qed.
Lemma lem8399298 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8399299 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term359 A C P clauses s t c) = (term359 A C P clauses s t c).
Proof. exact (MK_COMB (@lem8399298 P) (@lem8399297 A C P clauses s t c)). Qed.
Lemma lem8399308 {A C P : Type'} (f : type1178 A C P) (s : P -> A) (t : type1475 A C P) : (term360 A C P f s t) = (term360 A C P f s t).
Proof. exact (eq_refl (term360 A C P f s t)). Qed.
Lemma lem8399309 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term361 A C P f clauses s t c) = (term361 A C P f clauses s t c).
Proof. exact (MK_COMB (@lem8399308 A C P f s t) (@lem8399299 A C P clauses s t c)). Qed.
Lemma lem8399310 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term362 A C P f clauses s c) = (term362 A C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8399309 A C P f clauses s t c)). Qed.
Lemma lem8399311 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8399312 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term363 A C P f clauses s c) = (term363 A C P f clauses s c).
Proof. exact (MK_COMB (@lem8399311 A C P) (@lem8399310 A C P f clauses s c)). Qed.
Lemma lem8399313 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term364 A C P f clauses c) = (term364 A C P f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8399312 A C P f clauses s c)). Qed.
Lemma lem8399314 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8399315 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term365 A C P f clauses c) = (term365 A C P f clauses c).
Proof. exact (MK_COMB (@lem8399314 A P) (@lem8399313 A C P f clauses c)). Qed.
Lemma lem8399324 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) (f : type1178 A C P) : (term592 A C P _115315 clauses c f) = (term592 A C P _115315 clauses c f).
Proof. exact (eq_refl (term592 A C P _115315 clauses c f)). Qed.
Lemma lem8399325 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : ((_115315 clauses c f) = (term365 A C P f clauses c)) = ((_115315 clauses c f) = (term365 A C P f clauses c)).
Proof. exact (MK_COMB (@lem8399324 A C P _115315 clauses c f) (@lem8399315 A C P f clauses c)). Qed.
Lemma lem8399326 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term594 A C P _115315 clauses c) = (term594 A C P _115315 clauses c).
Proof. exact (fun_ext (fun f : type1178 A C P => @lem8399325 A C P _115315 f clauses c)). Qed.
Lemma lem8399327 {A C P : Type'} : (@all ((prod (P -> A) (C -> P -> A)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> A)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> A)) -> Prop))). Qed.
Lemma lem8399328 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term595 A C P _115315 clauses c) = (term595 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8399327 A C P) (@lem8399326 A C P _115315 clauses c)). Qed.
Lemma lem8399329 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term596 A C P _115315 clauses) = (term596 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8399328 A C P _115315 clauses c)). Qed.
Lemma lem8399330 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8399331 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term597 A C P _115315 clauses) = (term597 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8399330 C) (@lem8399329 A C P _115315 clauses)). Qed.
Lemma lem8399332 {A C P : Type'} (_115315 : type1092 A C P) : (term598 A C P _115315) = (term598 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8399331 A C P _115315 clauses)). Qed.
Lemma lem8399333 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8399334 {A C P : Type'} (_115315 : type1092 A C P) : (term599 A C P _115315) = (term599 A C P _115315).
Proof. exact (MK_COMB (@lem8399333 A C P) (@lem8399332 A C P _115315)). Qed.
Lemma lem8399335 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399336 {A C P : Type'} (_115315 : type1092 A C P) : (term600 A C P _115315) = (term600 A C P _115315).
Proof. exact (MK_COMB (@lem8399335) (@lem8399334 A C P _115315)). Qed.
Lemma lem8399337 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term862 A B C P _115315 _115316 _115317 _115318 _115319) = (term963 A B C P _115315 _115316 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8399336 A C P _115315) (@lem8399279 A B C P _115315 _115316 _115317 _115318 _115319 _115320 h1)). Qed.
Lemma lem8399338 {A B C P : Type'} (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term863 A B C P _115316 _115317 _115318 _115319) = (term964 A B C P _115316 _115317 _115318 _115319 _115320).
Proof. exact (fun_ext (fun _115315 : type1092 A C P => @lem8399337 A B C P _115315 _115316 _115317 _115318 _115319 _115320 h1)). Qed.
Lemma lem8399339 {A C P : Type'} : (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop))). Qed.
Lemma lem8399340 {A B C P : Type'} (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term864 A B C P _115316 _115317 _115318 _115319) = (term965 A B C P _115316 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8399339 A C P) (@lem8399338 A B C P _115316 _115317 _115318 _115319 _115320 h1)). Qed.
Lemma lem8399357 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) (x : P) : ((term416 A B C P clauses c s x) = (t c x)) = ((term416 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term416 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8399358 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term417 A B C P clauses s t c) = (term417 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : P => @lem8399357 A B C P clauses s t c x)). Qed.
Lemma lem8399359 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8399360 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term418 A B C P clauses s t c) = (term418 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8399359 P) (@lem8399358 A B C P clauses s t c)). Qed.
Lemma lem8399369 {A B C P : Type'} (f : type1185 A B C P) (s : P -> A) (t : type1475 B C P) : (term419 A B C P f s t) = (term419 A B C P f s t).
Proof. exact (eq_refl (term419 A B C P f s t)). Qed.
Lemma lem8399370 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term420 A B C P f clauses s t c) = (term420 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8399369 A B C P f s t) (@lem8399360 A B C P clauses s t c)). Qed.
Lemma lem8399371 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term421 A B C P f clauses s c) = (term421 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8399370 A B C P f clauses s t c)). Qed.
Lemma lem8399372 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8399373 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term422 A B C P f clauses s c) = (term422 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8399372 B C P) (@lem8399371 A B C P f clauses s c)). Qed.
Lemma lem8399374 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term423 A B C P f clauses c) = (term423 A B C P f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8399373 A B C P f clauses s c)). Qed.
Lemma lem8399375 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8399376 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term424 A B C P f clauses c) = (term424 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8399375 A P) (@lem8399374 A B C P f clauses c)). Qed.
Lemma lem8399385 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) (f : type1185 A B C P) : (term680 A B C P _115316 clauses c f) = (term680 A B C P _115316 clauses c f).
Proof. exact (eq_refl (term680 A B C P _115316 clauses c f)). Qed.
Lemma lem8399386 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : ((_115316 clauses c f) = (term424 A B C P f clauses c)) = ((_115316 clauses c f) = (term424 A B C P f clauses c)).
Proof. exact (MK_COMB (@lem8399385 A B C P _115316 clauses c f) (@lem8399376 A B C P f clauses c)). Qed.
Lemma lem8399387 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term682 A B C P _115316 clauses c) = (term682 A B C P _115316 clauses c).
Proof. exact (fun_ext (fun f : type1185 A B C P => @lem8399386 A B C P _115316 f clauses c)). Qed.
Lemma lem8399388 {A B C P : Type'} : (@all ((prod (P -> A) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8399389 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term683 A B C P _115316 clauses c) = (term683 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8399388 A B C P) (@lem8399387 A B C P _115316 clauses c)). Qed.
Lemma lem8399390 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term684 A B C P _115316 clauses) = (term684 A B C P _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8399389 A B C P _115316 clauses c)). Qed.
Lemma lem8399391 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8399392 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term685 A B C P _115316 clauses) = (term685 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8399391 C) (@lem8399390 A B C P _115316 clauses)). Qed.
Lemma lem8399393 {A B C P : Type'} (_115316 : type1115 A B C P) : (term686 A B C P _115316) = (term686 A B C P _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8399392 A B C P _115316 clauses)). Qed.
Lemma lem8399394 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8399395 {A B C P : Type'} (_115316 : type1115 A B C P) : (term687 A B C P _115316) = (term687 A B C P _115316).
Proof. exact (MK_COMB (@lem8399394 A B C P) (@lem8399393 A B C P _115316)). Qed.
Lemma lem8399396 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399397 {A B C P : Type'} (_115316 : type1115 A B C P) : (term688 A B C P _115316) = (term688 A B C P _115316).
Proof. exact (MK_COMB (@lem8399396) (@lem8399395 A B C P _115316)). Qed.
Lemma lem8399398 {A B C P : Type'} (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term865 A B C P _115316 _115317 _115318 _115319) = (term966 A B C P _115316 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8399397 A B C P _115316) (@lem8399340 A B C P _115316 _115317 _115318 _115319 _115320 h1)). Qed.
Lemma lem8399399 {A B C P : Type'} (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term866 A B C P _115317 _115318 _115319) = (term967 A B C P _115317 _115318 _115319 _115320).
Proof. exact (fun_ext (fun _115316 : type1115 A B C P => @lem8399398 A B C P _115316 _115317 _115318 _115319 _115320 h1)). Qed.
Lemma lem8399400 {A B C P : Type'} : (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8399401 {A B C P : Type'} (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term867 A B C P _115317 _115318 _115319) = (term968 A B C P _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8399400 A B C P) (@lem8399399 A B C P _115317 _115318 _115319 _115320 h1)). Qed.
Lemma lem8399418 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) (x : P) : ((term357 B C P clauses c s x) = (t c x)) = ((term357 B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term357 B C P clauses c s x) = (t c x))). Qed.
Lemma lem8399419 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term358 B C P clauses s t c) = (term358 B C P clauses s t c).
Proof. exact (fun_ext (fun x : P => @lem8399418 B C P clauses s t c x)). Qed.
Lemma lem8399420 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8399421 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term359 B C P clauses s t c) = (term359 B C P clauses s t c).
Proof. exact (MK_COMB (@lem8399420 P) (@lem8399419 B C P clauses s t c)). Qed.
Lemma lem8399430 {B C P : Type'} (f : type1178 B C P) (s : P -> B) (t : type1475 B C P) : (term360 B C P f s t) = (term360 B C P f s t).
Proof. exact (eq_refl (term360 B C P f s t)). Qed.
Lemma lem8399431 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term361 B C P f clauses s t c) = (term361 B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8399430 B C P f s t) (@lem8399421 B C P clauses s t c)). Qed.
Lemma lem8399432 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term362 B C P f clauses s c) = (term362 B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8399431 B C P f clauses s t c)). Qed.
Lemma lem8399433 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8399434 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term363 B C P f clauses s c) = (term363 B C P f clauses s c).
Proof. exact (MK_COMB (@lem8399433 B C P) (@lem8399432 B C P f clauses s c)). Qed.
Lemma lem8399435 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term364 B C P f clauses c) = (term364 B C P f clauses c).
Proof. exact (fun_ext (fun s : P -> B => @lem8399434 B C P f clauses s c)). Qed.
Lemma lem8399436 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8399437 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term365 B C P f clauses c) = (term365 B C P f clauses c).
Proof. exact (MK_COMB (@lem8399436 B P) (@lem8399435 B C P f clauses c)). Qed.
Lemma lem8399446 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) (f : type1178 B C P) : (term592 B C P _115317 clauses c f) = (term592 B C P _115317 clauses c f).
Proof. exact (eq_refl (term592 B C P _115317 clauses c f)). Qed.
Lemma lem8399447 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : ((_115317 clauses c f) = (term365 B C P f clauses c)) = ((_115317 clauses c f) = (term365 B C P f clauses c)).
Proof. exact (MK_COMB (@lem8399446 B C P _115317 clauses c f) (@lem8399437 B C P f clauses c)). Qed.
Lemma lem8399448 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term594 B C P _115317 clauses c) = (term594 B C P _115317 clauses c).
Proof. exact (fun_ext (fun f : type1178 B C P => @lem8399447 B C P _115317 f clauses c)). Qed.
Lemma lem8399449 {B C P : Type'} : (@all ((prod (P -> B) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> B) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> B) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8399450 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term595 B C P _115317 clauses c) = (term595 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8399449 B C P) (@lem8399448 B C P _115317 clauses c)). Qed.
Lemma lem8399451 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term596 B C P _115317 clauses) = (term596 B C P _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8399450 B C P _115317 clauses c)). Qed.
Lemma lem8399452 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8399453 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term597 B C P _115317 clauses) = (term597 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8399452 C) (@lem8399451 B C P _115317 clauses)). Qed.
Lemma lem8399454 {B C P : Type'} (_115317 : type1092 B C P) : (term598 B C P _115317) = (term598 B C P _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8399453 B C P _115317 clauses)). Qed.
Lemma lem8399455 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8399456 {B C P : Type'} (_115317 : type1092 B C P) : (term599 B C P _115317) = (term599 B C P _115317).
Proof. exact (MK_COMB (@lem8399455 B C P) (@lem8399454 B C P _115317)). Qed.
Lemma lem8399457 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399458 {B C P : Type'} (_115317 : type1092 B C P) : (term600 B C P _115317) = (term600 B C P _115317).
Proof. exact (MK_COMB (@lem8399457) (@lem8399456 B C P _115317)). Qed.
Lemma lem8399459 {A B C P : Type'} (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term868 A B C P _115317 _115318 _115319) = (term969 A B C P _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8399458 B C P _115317) (@lem8399401 A B C P _115317 _115318 _115319 _115320 h1)). Qed.
Lemma lem8399460 {A B C P : Type'} (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term869 A B C P _115318 _115319) = (term970 A B C P _115318 _115319 _115320).
Proof. exact (fun_ext (fun _115317 : type1092 B C P => @lem8399459 A B C P _115317 _115318 _115319 _115320 h1)). Qed.
Lemma lem8399461 {B C P : Type'} : (@all ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8399462 {A B C P : Type'} (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term870 A B C P _115318 _115319) = (term971 A B C P _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8399461 B C P) (@lem8399460 A B C P _115318 _115319 _115320 h1)). Qed.
Lemma lem8399479 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) (x : A -> B) : ((term326 A B C P clauses c s x) = (t c x)) = ((term326 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term326 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8399480 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term327 A B C P clauses s t c) = (term327 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : A -> B => @lem8399479 A B C P clauses s t c x)). Qed.
Lemma lem8399481 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8399482 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term328 A B C P clauses s t c) = (term328 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8399481 A B) (@lem8399480 A B C P clauses s t c)). Qed.
Lemma lem8399491 {A B C P : Type'} (f : type1167 A B C P) (s : type558 A B P) (t : type1506 A B C) : (term329 A B C P f s t) = (term329 A B C P f s t).
Proof. exact (eq_refl (term329 A B C P f s t)). Qed.
Lemma lem8399492 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term330 A B C P f clauses s t c) = (term330 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8399491 A B C P f s t) (@lem8399482 A B C P clauses s t c)). Qed.
Lemma lem8399493 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term331 A B C P f clauses s c) = (term331 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8399492 A B C P f clauses s t c)). Qed.
Lemma lem8399494 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8399495 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term332 A B C P f clauses s c) = (term332 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8399494 A B C) (@lem8399493 A B C P f clauses s c)). Qed.
Lemma lem8399496 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term333 A B C P f clauses c) = (term333 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8399495 A B C P f clauses s c)). Qed.
Lemma lem8399497 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8399498 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term334 A B C P f clauses c) = (term334 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8399497 A B P) (@lem8399496 A B C P f clauses c)). Qed.
Lemma lem8399507 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) (f : type1167 A B C P) : (term819 A B C P _115318 clauses c f) = (term819 A B C P _115318 clauses c f).
Proof. exact (eq_refl (term819 A B C P _115318 clauses c f)). Qed.
Lemma lem8399508 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : ((_115318 clauses c f) = (term334 A B C P f clauses c)) = ((_115318 clauses c f) = (term334 A B C P f clauses c)).
Proof. exact (MK_COMB (@lem8399507 A B C P _115318 clauses c f) (@lem8399498 A B C P f clauses c)). Qed.
Lemma lem8399509 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term821 A B C P _115318 clauses c) = (term821 A B C P _115318 clauses c).
Proof. exact (fun_ext (fun f : type1167 A B C P => @lem8399508 A B C P _115318 f clauses c)). Qed.
Lemma lem8399510 {A B C P : Type'} : (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)) = (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop))). Qed.
Lemma lem8399511 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term822 A B C P _115318 clauses c) = (term822 A B C P _115318 clauses c).
Proof. exact (MK_COMB (@lem8399510 A B C P) (@lem8399509 A B C P _115318 clauses c)). Qed.
Lemma lem8399512 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term823 A B C P _115318 clauses) = (term823 A B C P _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8399511 A B C P _115318 clauses c)). Qed.
Lemma lem8399513 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8399514 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term824 A B C P _115318 clauses) = (term824 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8399513 C) (@lem8399512 A B C P _115318 clauses)). Qed.
Lemma lem8399515 {A B C P : Type'} (_115318 : type1049 A B C P) : (term825 A B C P _115318) = (term825 A B C P _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8399514 A B C P _115318 clauses)). Qed.
Lemma lem8399516 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8399517 {A B C P : Type'} (_115318 : type1049 A B C P) : (term826 A B C P _115318) = (term826 A B C P _115318).
Proof. exact (MK_COMB (@lem8399516 A B C P) (@lem8399515 A B C P _115318)). Qed.
Lemma lem8399518 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399519 {A B C P : Type'} (_115318 : type1049 A B C P) : (term827 A B C P _115318) = (term827 A B C P _115318).
Proof. exact (MK_COMB (@lem8399518) (@lem8399517 A B C P _115318)). Qed.
Lemma lem8399520 {A B C P : Type'} (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term871 A B C P _115318 _115319) = (term972 A B C P _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8399519 A B C P _115318) (@lem8399462 A B C P _115318 _115319 _115320 h1)). Qed.
Lemma lem8399521 {A B C P : Type'} (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term872 A B C P _115319) = (term973 A B C P _115319 _115320).
Proof. exact (fun_ext (fun _115318 : type1049 A B C P => @lem8399520 A B C P _115318 _115319 _115320 h1)). Qed.
Lemma lem8399522 {A B C P : Type'} : (@all ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> Prop)) = (@all ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8399523 {A B C P : Type'} (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term873 A B C P _115319) = (term974 A B C P _115319 _115320).
Proof. exact (MK_COMB (@lem8399522 A B C P) (@lem8399521 A B C P _115319 _115320 h1)). Qed.
Lemma lem8399540 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) (x : P -> A) : ((term295 A B C P clauses c s x) = (t c x)) = ((term295 A B C P clauses c s x) = (t c x)).
Proof. exact (eq_refl ((term295 A B C P clauses c s x) = (t c x))). Qed.
Lemma lem8399541 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term296 A B C P clauses s t c) = (term296 A B C P clauses s t c).
Proof. exact (fun_ext (fun x : P -> A => @lem8399540 A B C P clauses s t c x)). Qed.
Lemma lem8399542 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8399543 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term297 A B C P clauses s t c) = (term297 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8399542 A P) (@lem8399541 A B C P clauses s t c)). Qed.
Lemma lem8399552 {A B C P : Type'} (f : type1168 A B C P) (s : type802 A P) (t : type1512 A B C P) : (term298 A B C P f s t) = (term298 A B C P f s t).
Proof. exact (eq_refl (term298 A B C P f s t)). Qed.
Lemma lem8399553 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term299 A B C P f clauses s t c) = (term299 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8399552 A B C P f s t) (@lem8399543 A B C P clauses s t c)). Qed.
Lemma lem8399554 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term300 A B C P f clauses s c) = (term300 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8399553 A B C P f clauses s t c)). Qed.
Lemma lem8399555 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8399556 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term301 A B C P f clauses s c) = (term301 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8399555 A B C P) (@lem8399554 A B C P f clauses s c)). Qed.
Lemma lem8399557 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term302 A B C P f clauses c) = (term302 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type802 A P => @lem8399556 A B C P f clauses s c)). Qed.
Lemma lem8399558 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8399559 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term303 A B C P f clauses c) = (term303 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8399558 A P) (@lem8399557 A B C P f clauses c)). Qed.
Lemma lem8399568 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) (f : type1168 A B C P) : (term920 A B C P _115319 clauses c f) = (term920 A B C P _115319 clauses c f).
Proof. exact (eq_refl (term920 A B C P _115319 clauses c f)). Qed.
Lemma lem8399569 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : ((_115319 clauses c f) = (term303 A B C P f clauses c)) = ((_115319 clauses c f) = (term303 A B C P f clauses c)).
Proof. exact (MK_COMB (@lem8399568 A B C P _115319 clauses c f) (@lem8399559 A B C P f clauses c)). Qed.
Lemma lem8399570 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term922 A B C P _115319 clauses c) = (term922 A B C P _115319 clauses c).
Proof. exact (fun_ext (fun f : type1168 A B C P => @lem8399569 A B C P _115319 f clauses c)). Qed.
Lemma lem8399571 {A B C P : Type'} : (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)) = (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop))). Qed.
Lemma lem8399572 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term923 A B C P _115319 clauses c) = (term923 A B C P _115319 clauses c).
Proof. exact (MK_COMB (@lem8399571 A B C P) (@lem8399570 A B C P _115319 clauses c)). Qed.
Lemma lem8399573 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term924 A B C P _115319 clauses) = (term924 A B C P _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8399572 A B C P _115319 clauses c)). Qed.
Lemma lem8399574 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8399575 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term925 A B C P _115319 clauses) = (term925 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8399574 C) (@lem8399573 A B C P _115319 clauses)). Qed.
Lemma lem8399576 {A B C P : Type'} (_115319 : type1061 A B C P) : (term926 A B C P _115319) = (term926 A B C P _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8399575 A B C P _115319 clauses)). Qed.
Lemma lem8399577 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8399578 {A B C P : Type'} (_115319 : type1061 A B C P) : (term927 A B C P _115319) = (term927 A B C P _115319).
Proof. exact (MK_COMB (@lem8399577 A B C P) (@lem8399576 A B C P _115319)). Qed.
Lemma lem8399579 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399580 {A B C P : Type'} (_115319 : type1061 A B C P) : (term928 A B C P _115319) = (term928 A B C P _115319).
Proof. exact (MK_COMB (@lem8399579) (@lem8399578 A B C P _115319)). Qed.
Lemma lem8399581 {A B C P : Type'} (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term929 A B C P _115319) = (term975 A B C P _115319 _115320).
Proof. exact (MK_COMB (@lem8399580 A B C P _115319) (@lem8399523 A B C P _115319 _115320 h1)). Qed.
Lemma lem8399582 {A B C P : Type'} (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term930 A B C P) = (term976 A B C P _115320).
Proof. exact (fun_ext (fun _115319 : type1061 A B C P => @lem8399581 A B C P _115319 _115320 h1)). Qed.
Lemma lem8399583 {A B C P : Type'} : (@all ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> Prop)) = (@all ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8399584 {A B C P : Type'} (_115320 : type1038 A B C P) (h1 : _115320 = (term932 A B C P)) : (term931 A B C P) = (term977 A B C P _115320).
Proof. exact (MK_COMB (@lem8399583 A B C P) (@lem8399582 A B C P _115320 h1)). Qed.
Lemma lem8399585 {A B C P : Type'} (_115320 : type1038 A B C P) : term978 A B C P _115320.
Proof. exact (fun h0 : _115320 = (term932 A B C P) => @lem8399584 A B C P _115320 h0). Qed.
Lemma lem8399586 {A B C P : Type'} : term979 A B C P.
Proof. exact (fun _115320 : type1038 A B C P => @lem8399585 A B C P _115320). Qed.
Lemma lem8399588 {_3603 : Type'} (P : Prop) (c : _3603) (Q : _3603 -> Prop) : term461 _3603 P c Q.
Proof. exact (EQ_MP (@lem20230 _3603 P c Q) (@lem0)). Qed.
Lemma lem8399589 {A B C P : Type'} (P' : Prop) (c : type1038 A B C P) (Q : type260 A B C P) : term980 A B C P P' c Q.
Proof. exact (@lem8399588 (type1038 A B C P) P' c Q). Qed.
Lemma lem8399590 {A B C P : Type'} : term981 A B C P.
Proof. exact (@lem8399589 A B C P (term931 A B C P) (term932 A B C P) (term982 A B C P)). Qed.
Lemma lem8399591 {A B C P : Type'} (_115320 : type1038 A B C P) : (term983 A B C P _115320) = (term977 A B C P _115320).
Proof. exact (eq_refl (term983 A B C P _115320)). Qed.
Lemma lem8399592 {A B C P : Type'} : (term984 A B C P) = (term984 A B C P).
Proof. exact (eq_refl (term984 A B C P)). Qed.
Lemma lem8399593 {A B C P : Type'} (_115320 : type1038 A B C P) : ((term931 A B C P) = (term983 A B C P _115320)) = ((term931 A B C P) = (term977 A B C P _115320)).
Proof. exact (MK_COMB (@lem8399592 A B C P) (@lem8399591 A B C P _115320)). Qed.
Lemma lem8399594 {A B C P : Type'} (_115320 : type1038 A B C P) : (term985 A B C P _115320) = (term985 A B C P _115320).
Proof. exact (eq_refl (term985 A B C P _115320)). Qed.
Lemma lem8399595 {A B C P : Type'} (_115320 : type1038 A B C P) : (term986 A B C P _115320) = (term978 A B C P _115320).
Proof. exact (MK_COMB (@lem8399594 A B C P _115320) (@lem8399593 A B C P _115320)). Qed.
Lemma lem8399596 {A B C P : Type'} : (term987 A B C P) = (term988 A B C P).
Proof. exact (fun_ext (fun _115320 : type1038 A B C P => @lem8399595 A B C P _115320)). Qed.
Lemma lem8399597 {A B C P : Type'} : (@all ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> Prop)) = (@all ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8399598 {A B C P : Type'} : (term989 A B C P) = (term979 A B C P).
Proof. exact (MK_COMB (@lem8399597 A B C P) (@lem8399596 A B C P)). Qed.
Lemma lem8399599 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399600 {A B C P : Type'} : (term990 A B C P) = (term991 A B C P).
Proof. exact (MK_COMB (@lem8399599) (@lem8399598 A B C P)). Qed.
Lemma lem8399601 {A B C P : Type'} (_115320 : type1038 A B C P) : (term983 A B C P _115320) = (term977 A B C P _115320).
Proof. exact (eq_refl (term983 A B C P _115320)). Qed.
Lemma lem8399602 {A B C P : Type'} (_115320 : type1038 A B C P) : (term985 A B C P _115320) = (term985 A B C P _115320).
Proof. exact (eq_refl (term985 A B C P _115320)). Qed.
Lemma lem8399603 {A B C P : Type'} (_115320 : type1038 A B C P) : (term992 A B C P _115320) = (term993 A B C P _115320).
Proof. exact (MK_COMB (@lem8399602 A B C P _115320) (@lem8399601 A B C P _115320)). Qed.
Lemma lem8399604 {A B C P : Type'} : (term994 A B C P) = (term995 A B C P).
Proof. exact (fun_ext (fun _115320 : type1038 A B C P => @lem8399603 A B C P _115320)). Qed.
Lemma lem8399605 {A B C P : Type'} : (@all ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> Prop)) = (@all ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8399606 {A B C P : Type'} : (term996 A B C P) = (term997 A B C P).
Proof. exact (MK_COMB (@lem8399605 A B C P) (@lem8399604 A B C P)). Qed.
Lemma lem8399607 {A B C P : Type'} : (term984 A B C P) = (term984 A B C P).
Proof. exact (eq_refl (term984 A B C P)). Qed.
Lemma lem8399608 {A B C P : Type'} : ((term931 A B C P) = (term996 A B C P)) = ((term931 A B C P) = (term997 A B C P)).
Proof. exact (MK_COMB (@lem8399607 A B C P) (@lem8399606 A B C P)). Qed.
Lemma lem8399609 {A B C P : Type'} : (term981 A B C P) = (term998 A B C P).
Proof. exact (MK_COMB (@lem8399600 A B C P) (@lem8399608 A B C P)). Qed.
Lemma lem8399610 {A B C P : Type'} : term998 A B C P.
Proof. exact (EQ_MP (@lem8399609 A B C P) (@lem8399590 A B C P)). Qed.
Lemma lem8399611 {A B C P : Type'} : (term931 A B C P) = (term997 A B C P).
Proof. exact (@lem8399610 A B C P (@lem8399586 A B C P)). Qed.
Lemma lem8399613 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term481 _3571 _3575 t)) = (term482 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem8399614 {A B C P : Type'} (s : type1038 A B C P) (t : type1038 A B C P) : (s = (term999 A B C P t)) = (term1000 A B C P s t).
Proof. exact (@lem8399613 (type1494 A B C P) (type1629 A B C P) s t). Qed.
Lemma lem8399615 {A B C P : Type'} (_115320 : type1038 A B C P) : (_115320 = (term1001 A B C P)) = (term1002 A B C P _115320).
Proof. exact (@lem8399614 A B C P _115320 (term932 A B C P)). Qed.
Lemma lem8399616 {A B C P : Type'} (clauses : type1629 A B C P) : (term933 A B C P clauses) = (term934 A B C P clauses).
Proof. exact (eq_refl (term933 A B C P clauses)). Qed.
Lemma lem8399617 {A B C P : Type'} : (term1001 A B C P) = (term932 A B C P).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8399616 A B C P clauses)). Qed.
Lemma lem8399618 {A B C P : Type'} (_115320 : type1038 A B C P) : (@eq ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> Prop) _115320) = (@eq ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> Prop) _115320).
Proof. exact (eq_refl (@eq ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> Prop) _115320)). Qed.
Lemma lem8399619 {A B C P : Type'} (_115320 : type1038 A B C P) : (_115320 = (term1001 A B C P)) = (_115320 = (term932 A B C P)).
Proof. exact (MK_COMB (@lem8399618 A B C P _115320) (@lem8399617 A B C P)). Qed.
Lemma lem8399620 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8399621 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1003 A B C P _115320) = (term1004 A B C P _115320).
Proof. exact (MK_COMB (@lem8399620) (@lem8399619 A B C P _115320)). Qed.
Lemma lem8399622 {A B C P : Type'} (clauses : type1629 A B C P) : (term933 A B C P clauses) = (term934 A B C P clauses).
Proof. exact (eq_refl (term933 A B C P clauses)). Qed.
Lemma lem8399623 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term935 A B C P _115320 clauses) = (term935 A B C P _115320 clauses).
Proof. exact (eq_refl (term935 A B C P _115320 clauses)). Qed.
Lemma lem8399624 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : ((_115320 clauses) = (term933 A B C P clauses)) = ((_115320 clauses) = (term934 A B C P clauses)).
Proof. exact (MK_COMB (@lem8399623 A B C P _115320 clauses) (@lem8399622 A B C P clauses)). Qed.
Lemma lem8399625 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1005 A B C P _115320) = (term1006 A B C P _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8399624 A B C P _115320 clauses)). Qed.
Lemma lem8399626 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8399627 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1002 A B C P _115320) = (term1007 A B C P _115320).
Proof. exact (MK_COMB (@lem8399626 A B C P) (@lem8399625 A B C P _115320)). Qed.
Lemma lem8399628 {A B C P : Type'} (_115320 : type1038 A B C P) : ((_115320 = (term1001 A B C P)) = (term1002 A B C P _115320)) = ((_115320 = (term932 A B C P)) = (term1007 A B C P _115320)).
Proof. exact (MK_COMB (@lem8399621 A B C P _115320) (@lem8399627 A B C P _115320)). Qed.
Lemma lem8399629 {A B C P : Type'} (_115320 : type1038 A B C P) : (_115320 = (term932 A B C P)) = (term1007 A B C P _115320).
Proof. exact (EQ_MP (@lem8399628 A B C P _115320) (@lem8399615 A B C P _115320)). Qed.
Lemma lem8399631 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term481 _3571 _3575 t)) = (term482 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem8399632 {A B C P : Type'} (s : type1494 A B C P) (t : type1494 A B C P) : (s = (term1008 A B C P t)) = (term1009 A B C P s t).
Proof. exact (@lem8399631 (type285 A B C P) C s t). Qed.
Lemma lem8399633 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : ((_115320 clauses) = (term1010 A B C P clauses)) = (term1011 A B C P _115320 clauses).
Proof. exact (@lem8399632 A B C P (_115320 clauses) (term934 A B C P clauses)). Qed.
Lemma lem8399634 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term936 A B C P clauses c) = (term273 A B C P clauses c).
Proof. exact (eq_refl (term936 A B C P clauses c)). Qed.
Lemma lem8399635 {A B C P : Type'} (clauses : type1629 A B C P) : (term1010 A B C P clauses) = (term934 A B C P clauses).
Proof. exact (fun_ext (fun c : C => @lem8399634 A B C P clauses c)). Qed.
Lemma lem8399636 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term935 A B C P _115320 clauses) = (term935 A B C P _115320 clauses).
Proof. exact (eq_refl (term935 A B C P _115320 clauses)). Qed.
Lemma lem8399637 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : ((_115320 clauses) = (term1010 A B C P clauses)) = ((_115320 clauses) = (term934 A B C P clauses)).
Proof. exact (MK_COMB (@lem8399636 A B C P _115320 clauses) (@lem8399635 A B C P clauses)). Qed.
Lemma lem8399638 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8399639 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1012 A B C P _115320 clauses) = (term1013 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8399638) (@lem8399637 A B C P _115320 clauses)). Qed.
Lemma lem8399640 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term936 A B C P clauses c) = (term273 A B C P clauses c).
Proof. exact (eq_refl (term936 A B C P clauses c)). Qed.
Lemma lem8399641 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term937 A B C P _115320 clauses c) = (term937 A B C P _115320 clauses c).
Proof. exact (eq_refl (term937 A B C P _115320 clauses c)). Qed.
Lemma lem8399642 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : ((_115320 clauses c) = (term936 A B C P clauses c)) = ((_115320 clauses c) = (term273 A B C P clauses c)).
Proof. exact (MK_COMB (@lem8399641 A B C P _115320 clauses c) (@lem8399640 A B C P clauses c)). Qed.
Lemma lem8399643 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1014 A B C P _115320 clauses) = (term1015 A B C P _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8399642 A B C P _115320 clauses c)). Qed.
Lemma lem8399644 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8399645 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1011 A B C P _115320 clauses) = (term1016 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8399644 C) (@lem8399643 A B C P _115320 clauses)). Qed.
Lemma lem8399646 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (((_115320 clauses) = (term1010 A B C P clauses)) = (term1011 A B C P _115320 clauses)) = (((_115320 clauses) = (term934 A B C P clauses)) = (term1016 A B C P _115320 clauses)).
Proof. exact (MK_COMB (@lem8399639 A B C P _115320 clauses) (@lem8399645 A B C P _115320 clauses)). Qed.
Lemma lem8399647 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : ((_115320 clauses) = (term934 A B C P clauses)) = (term1016 A B C P _115320 clauses).
Proof. exact (EQ_MP (@lem8399646 A B C P _115320 clauses) (@lem8399633 A B C P _115320 clauses)). Qed.
Lemma lem8399649 {_3571 _3575 : Type'} (s : _3575 -> _3571) (t : _3575 -> _3571) : (s = (term481 _3571 _3575 t)) = (term482 _3571 _3575 s t).
Proof. exact (EQ_MP (@lem19792 _3571 _3575 s t) (@lem0)). Qed.
Lemma lem8399650 {A B C P : Type'} (s : type285 A B C P) (t : type285 A B C P) : (s = (term1017 A B C P t)) = (term1018 A B C P s t).
Proof. exact (@lem8399649 Prop (type1166 A B C P) s t). Qed.
Lemma lem8399651 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : ((_115320 clauses c) = (term1019 A B C P clauses c)) = (term1020 A B C P _115320 clauses c).
Proof. exact (@lem8399650 A B C P (_115320 clauses c) (term273 A B C P clauses c)). Qed.
Lemma lem8399652 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1021 A B C P clauses c f) = (term272 A B C P f clauses c).
Proof. exact (eq_refl (term1021 A B C P clauses c f)). Qed.
Lemma lem8399653 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term1019 A B C P clauses c) = (term273 A B C P clauses c).
Proof. exact (fun_ext (fun f : type1166 A B C P => @lem8399652 A B C P f clauses c)). Qed.
Lemma lem8399654 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term937 A B C P _115320 clauses c) = (term937 A B C P _115320 clauses c).
Proof. exact (eq_refl (term937 A B C P _115320 clauses c)). Qed.
Lemma lem8399655 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : ((_115320 clauses c) = (term1019 A B C P clauses c)) = ((_115320 clauses c) = (term273 A B C P clauses c)).
Proof. exact (MK_COMB (@lem8399654 A B C P _115320 clauses c) (@lem8399653 A B C P clauses c)). Qed.
Lemma lem8399656 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8399657 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1022 A B C P _115320 clauses c) = (term1023 A B C P _115320 clauses c).
Proof. exact (MK_COMB (@lem8399656) (@lem8399655 A B C P _115320 clauses c)). Qed.
Lemma lem8399658 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1021 A B C P clauses c f) = (term272 A B C P f clauses c).
Proof. exact (eq_refl (term1021 A B C P clauses c f)). Qed.
Lemma lem8399659 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) (f : type1166 A B C P) : (term1024 A B C P _115320 clauses c f) = (term1024 A B C P _115320 clauses c f).
Proof. exact (eq_refl (term1024 A B C P _115320 clauses c f)). Qed.
Lemma lem8399660 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : ((_115320 clauses c f) = (term1021 A B C P clauses c f)) = ((_115320 clauses c f) = (term272 A B C P f clauses c)).
Proof. exact (MK_COMB (@lem8399659 A B C P _115320 clauses c f) (@lem8399658 A B C P f clauses c)). Qed.
Lemma lem8399661 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1025 A B C P _115320 clauses c) = (term1026 A B C P _115320 clauses c).
Proof. exact (fun_ext (fun f : type1166 A B C P => @lem8399660 A B C P _115320 f clauses c)). Qed.
Lemma lem8399662 {A B C P : Type'} : (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)) = (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop))). Qed.
Lemma lem8399663 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1020 A B C P _115320 clauses c) = (term1027 A B C P _115320 clauses c).
Proof. exact (MK_COMB (@lem8399662 A B C P) (@lem8399661 A B C P _115320 clauses c)). Qed.
Lemma lem8399664 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (((_115320 clauses c) = (term1019 A B C P clauses c)) = (term1020 A B C P _115320 clauses c)) = (((_115320 clauses c) = (term273 A B C P clauses c)) = (term1027 A B C P _115320 clauses c)).
Proof. exact (MK_COMB (@lem8399657 A B C P _115320 clauses c) (@lem8399663 A B C P _115320 clauses c)). Qed.
Lemma lem8399665 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : ((_115320 clauses c) = (term273 A B C P clauses c)) = (term1027 A B C P _115320 clauses c).
Proof. exact (EQ_MP (@lem8399664 A B C P _115320 clauses c) (@lem8399651 A B C P _115320 clauses c)). Qed.
Lemma lem8399666 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : ((_115320 clauses c f) = (term272 A B C P f clauses c)) = ((_115320 clauses c f) = (term272 A B C P f clauses c)).
Proof. exact (eq_refl ((_115320 clauses c f) = (term272 A B C P f clauses c))). Qed.
Lemma lem8399667 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1026 A B C P _115320 clauses c) = (term1026 A B C P _115320 clauses c).
Proof. exact (fun_ext (fun f : type1166 A B C P => @lem8399666 A B C P _115320 f clauses c)). Qed.
Lemma lem8399668 {A B C P : Type'} : (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)) = (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop))). Qed.
Lemma lem8399669 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1027 A B C P _115320 clauses c) = (term1027 A B C P _115320 clauses c).
Proof. exact (MK_COMB (@lem8399668 A B C P) (@lem8399667 A B C P _115320 clauses c)). Qed.
Lemma lem8399670 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : ((_115320 clauses c) = (term273 A B C P clauses c)) = (term1027 A B C P _115320 clauses c).
Proof. exact (TRANS (@lem8399665 A B C P _115320 clauses c) (@lem8399669 A B C P _115320 clauses c)). Qed.
Lemma lem8399671 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1015 A B C P _115320 clauses) = (term1028 A B C P _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8399670 A B C P _115320 clauses c)). Qed.
Lemma lem8399672 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8399673 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1016 A B C P _115320 clauses) = (term1029 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8399672 C) (@lem8399671 A B C P _115320 clauses)). Qed.
Lemma lem8399674 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : ((_115320 clauses) = (term934 A B C P clauses)) = (term1029 A B C P _115320 clauses).
Proof. exact (TRANS (@lem8399647 A B C P _115320 clauses) (@lem8399673 A B C P _115320 clauses)). Qed.
Lemma lem8399675 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1006 A B C P _115320) = (term1030 A B C P _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8399674 A B C P _115320 clauses)). Qed.
Lemma lem8399676 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8399677 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1007 A B C P _115320) = (term1031 A B C P _115320).
Proof. exact (MK_COMB (@lem8399676 A B C P) (@lem8399675 A B C P _115320)). Qed.
Lemma lem8399678 {A B C P : Type'} (_115320 : type1038 A B C P) : (_115320 = (term932 A B C P)) = (term1031 A B C P _115320).
Proof. exact (TRANS (@lem8399629 A B C P _115320) (@lem8399677 A B C P _115320)). Qed.
Lemma lem8399679 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399680 {A B C P : Type'} (_115320 : type1038 A B C P) : (term985 A B C P _115320) = (term1032 A B C P _115320).
Proof. exact (MK_COMB (@lem8399679) (@lem8399678 A B C P _115320)). Qed.
Lemma lem8399681 {A B C P : Type'} (_115320 : type1038 A B C P) : (term977 A B C P _115320) = (term977 A B C P _115320).
Proof. exact (eq_refl (term977 A B C P _115320)). Qed.
Lemma lem8399682 {A B C P : Type'} (_115320 : type1038 A B C P) : (term993 A B C P _115320) = (term1033 A B C P _115320).
Proof. exact (MK_COMB (@lem8399680 A B C P _115320) (@lem8399681 A B C P _115320)). Qed.
Lemma lem8399683 {A B C P : Type'} : (term995 A B C P) = (term1034 A B C P).
Proof. exact (fun_ext (fun _115320 : type1038 A B C P => @lem8399682 A B C P _115320)). Qed.
Lemma lem8399684 {A B C P : Type'} : (@all ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> Prop)) = (@all ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8399685 {A B C P : Type'} : (term997 A B C P) = (term1035 A B C P).
Proof. exact (MK_COMB (@lem8399684 A B C P) (@lem8399683 A B C P)). Qed.
Lemma lem8399686 {A B C P : Type'} : (term984 A B C P) = (term984 A B C P).
Proof. exact (eq_refl (term984 A B C P)). Qed.
Lemma lem8399687 {A B C P : Type'} : ((term931 A B C P) = (term997 A B C P)) = ((term931 A B C P) = (term1035 A B C P)).
Proof. exact (MK_COMB (@lem8399686 A B C P) (@lem8399685 A B C P)). Qed.
Lemma lem8399690 {A B C P : Type'} : (term931 A B C P) = (term1035 A B C P).
Proof. exact (EQ_MP (@lem8399687 A B C P) (@lem8399611 A B C P)). Qed.
Lemma lem8399691 {A B C P : Type'} : (term830 A B C P) = (term1035 A B C P).
Proof. exact (TRANS (@lem8398463 A B C P) (@lem8399690 A B C P)). Qed.
Lemma lem8399692 {A B C P : Type'} : (term733 A B C P) = (term1035 A B C P).
Proof. exact (TRANS (@lem8397265 A B C P) (@lem8399691 A B C P)). Qed.
Lemma lem8399693 {A B C P : Type'} : (term691 A B C P) = (term1035 A B C P).
Proof. exact (TRANS (@lem8396094 A B C P) (@lem8399692 A B C P)). Qed.
Lemma lem8399694 {A B C P : Type'} : (term603 A B C P) = (term1035 A B C P).
Proof. exact (TRANS (@lem8394950 A B C P) (@lem8399693 A B C P)). Qed.
Lemma lem8399695 {A B C P : Type'} : (term519 A B C P) = (term1035 A B C P).
Proof. exact (TRANS (@lem8393829 A B C P) (@lem8399694 A B C P)). Qed.
Lemma lem8399696 {A B C P : Type'} : (term257 A B C P) = (term1035 A B C P).
Proof. exact (TRANS (@lem8392738 A B C P) (@lem8399695 A B C P)). Qed.
Lemma lem8399697 {A B C P : Type'} : (term256 A B C P) = (term1035 A B C P).
Proof. exact (TRANS (@lem8391676 A B C P) (@lem8399696 A B C P)). Qed.
Lemma lem8399698 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term940 A B C P _115320 c clauses) = (term940 A B C P _115320 c clauses).
Proof. exact (eq_refl (term940 A B C P _115320 c clauses)). Qed.
Lemma lem8399711 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) (y : type558 A B P) : (term277 A B C P clauses s s' t x t' c y) = (term277 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term277 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8399712 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term278 A B C P clauses s s' t x t' c) = (term278 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : type558 A B P => @lem8399711 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8399713 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8399714 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term279 A B C P clauses s s' t x t' c) = (term279 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8399713 A B P) (@lem8399712 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8399715 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term280 A B C P clauses s s' t t' c) = (term280 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : type558 A B P => @lem8399714 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8399716 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8399717 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term281 A B C P clauses s s' t t' c) = (term281 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8399716 A B P) (@lem8399715 A B C P clauses s s' t t' c)). Qed.
Lemma lem8399718 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term282 A B C P clauses s s' t c) = (term282 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1490 A B C P => @lem8399717 A B C P clauses s s' t t' c)). Qed.
Lemma lem8399719 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8399720 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term283 A B C P clauses s s' t c) = (term283 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8399719 A B C P) (@lem8399718 A B C P clauses s s' t c)). Qed.
Lemma lem8399721 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term284 A B C P clauses s t c) = (term284 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type115 A B P => @lem8399720 A B C P clauses s s' t c)). Qed.
Lemma lem8399722 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8399723 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term285 A B C P clauses s t c) = (term285 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8399722 A B P) (@lem8399721 A B C P clauses s t c)). Qed.
Lemma lem8399724 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term286 A B C P clauses s c) = (term286 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8399723 A B C P clauses s t c)). Qed.
Lemma lem8399725 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8399726 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term287 A B C P clauses s c) = (term287 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8399725 A B C P) (@lem8399724 A B C P clauses s c)). Qed.
Lemma lem8399727 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term288 A B C P clauses c) = (term288 A B C P clauses c).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8399726 A B C P clauses s c)). Qed.
Lemma lem8399728 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8399729 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term289 A B C P clauses c) = (term289 A B C P clauses c).
Proof. exact (MK_COMB (@lem8399728 A B P) (@lem8399727 A B C P clauses c)). Qed.
Lemma lem8399730 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399731 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term290 A B C P clauses c) = (term290 A B C P clauses c).
Proof. exact (MK_COMB (@lem8399730) (@lem8399729 A B C P clauses c)). Qed.
Lemma lem8399732 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term941 A B C P _115320 c clauses) = (term941 A B C P _115320 c clauses).
Proof. exact (MK_COMB (@lem8399731 A B C P clauses c) (@lem8399698 A B C P _115320 c clauses)). Qed.
Lemma lem8399733 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term942 A B C P _115320 clauses) = (term942 A B C P _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8399732 A B C P _115320 c clauses)). Qed.
Lemma lem8399734 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8399735 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term943 A B C P _115320 clauses) = (term943 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8399734 C) (@lem8399733 A B C P _115320 clauses)). Qed.
Lemma lem8399736 {A B C P : Type'} (_115320 : type1038 A B C P) : (term944 A B C P _115320) = (term944 A B C P _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8399735 A B C P _115320 clauses)). Qed.
Lemma lem8399737 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8399738 {A B C P : Type'} (_115320 : type1038 A B C P) : (term945 A B C P _115320) = (term945 A B C P _115320).
Proof. exact (MK_COMB (@lem8399737 A B C P) (@lem8399736 A B C P _115320)). Qed.
Lemma lem8399739 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8399740 {A B C P : Type'} (_115320 : type1038 A B C P) : (term946 A B C P _115320) = (term946 A B C P _115320).
Proof. exact (MK_COMB (@lem8399739) (@lem8399738 A B C P _115320)). Qed.
Lemma lem8399741 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term839 A B C P _115319 c clauses) = (term839 A B C P _115319 c clauses).
Proof. exact (eq_refl (term839 A B C P _115319 c clauses)). Qed.
Lemma lem8399754 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) (y : P -> A) : (term308 A B C P clauses s s' t x t' c y) = (term308 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term308 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8399755 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term309 A B C P clauses s s' t x t' c) = (term309 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P -> A => @lem8399754 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8399756 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8399757 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term310 A B C P clauses s s' t x t' c) = (term310 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8399756 A P) (@lem8399755 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8399758 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term311 A B C P clauses s s' t t' c) = (term311 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P -> A => @lem8399757 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8399759 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8399760 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term312 A B C P clauses s s' t t' c) = (term312 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8399759 A P) (@lem8399758 A B C P clauses s s' t t' c)). Qed.
Lemma lem8399761 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term313 A B C P clauses s s' t c) = (term313 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1512 A B C P => @lem8399760 A B C P clauses s s' t t' c)). Qed.
Lemma lem8399762 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8399763 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term314 A B C P clauses s s' t c) = (term314 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8399762 A B C P) (@lem8399761 A B C P clauses s s' t c)). Qed.
Lemma lem8399764 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term315 A B C P clauses s t c) = (term315 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type802 A P => @lem8399763 A B C P clauses s s' t c)). Qed.
Lemma lem8399765 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8399766 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term316 A B C P clauses s t c) = (term316 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8399765 A P) (@lem8399764 A B C P clauses s t c)). Qed.
Lemma lem8399767 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term317 A B C P clauses s c) = (term317 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8399766 A B C P clauses s t c)). Qed.
Lemma lem8399768 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8399769 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term318 A B C P clauses s c) = (term318 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8399768 A B C P) (@lem8399767 A B C P clauses s c)). Qed.
Lemma lem8399770 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term319 A B C P clauses c) = (term319 A B C P clauses c).
Proof. exact (fun_ext (fun s : type802 A P => @lem8399769 A B C P clauses s c)). Qed.
Lemma lem8399771 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8399772 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term320 A B C P clauses c) = (term320 A B C P clauses c).
Proof. exact (MK_COMB (@lem8399771 A P) (@lem8399770 A B C P clauses c)). Qed.
Lemma lem8399773 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399774 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term321 A B C P clauses c) = (term321 A B C P clauses c).
Proof. exact (MK_COMB (@lem8399773) (@lem8399772 A B C P clauses c)). Qed.
Lemma lem8399775 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term840 A B C P _115319 c clauses) = (term840 A B C P _115319 c clauses).
Proof. exact (MK_COMB (@lem8399774 A B C P clauses c) (@lem8399741 A B C P _115319 c clauses)). Qed.
Lemma lem8399776 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term841 A B C P _115319 clauses) = (term841 A B C P _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8399775 A B C P _115319 c clauses)). Qed.
Lemma lem8399777 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8399778 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term842 A B C P _115319 clauses) = (term842 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8399777 C) (@lem8399776 A B C P _115319 clauses)). Qed.
Lemma lem8399779 {A B C P : Type'} (_115319 : type1061 A B C P) : (term843 A B C P _115319) = (term843 A B C P _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8399778 A B C P _115319 clauses)). Qed.
Lemma lem8399780 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8399781 {A B C P : Type'} (_115319 : type1061 A B C P) : (term844 A B C P _115319) = (term844 A B C P _115319).
Proof. exact (MK_COMB (@lem8399780 A B C P) (@lem8399779 A B C P _115319)). Qed.
Lemma lem8399782 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399783 {A B C P : Type'} (_115319 : type1061 A B C P) : (term845 A B C P _115319) = (term845 A B C P _115319).
Proof. exact (MK_COMB (@lem8399782) (@lem8399781 A B C P _115319)). Qed.
Lemma lem8399784 {A B C P : Type'} (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term947 A B C P _115319 _115320) = (term947 A B C P _115319 _115320).
Proof. exact (MK_COMB (@lem8399783 A B C P _115319) (@lem8399740 A B C P _115320)). Qed.
Lemma lem8399785 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term742 A B C P _115318 c clauses) = (term742 A B C P _115318 c clauses).
Proof. exact (eq_refl (term742 A B C P _115318 c clauses)). Qed.
Lemma lem8399798 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) (y : A -> B) : (term339 A B C P clauses s s' t x t' c y) = (term339 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term339 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8399799 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term340 A B C P clauses s s' t x t' c) = (term340 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : A -> B => @lem8399798 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8399800 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8399801 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term341 A B C P clauses s s' t x t' c) = (term341 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8399800 A B) (@lem8399799 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8399802 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term342 A B C P clauses s s' t t' c) = (term342 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : A -> B => @lem8399801 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8399803 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8399804 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term343 A B C P clauses s s' t t' c) = (term343 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8399803 A B) (@lem8399802 A B C P clauses s s' t t' c)). Qed.
Lemma lem8399805 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term344 A B C P clauses s s' t c) = (term344 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1506 A B C => @lem8399804 A B C P clauses s s' t t' c)). Qed.
Lemma lem8399806 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8399807 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term345 A B C P clauses s s' t c) = (term345 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8399806 A B C) (@lem8399805 A B C P clauses s s' t c)). Qed.
Lemma lem8399808 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term346 A B C P clauses s t c) = (term346 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type558 A B P => @lem8399807 A B C P clauses s s' t c)). Qed.
Lemma lem8399809 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8399810 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term347 A B C P clauses s t c) = (term347 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8399809 A B P) (@lem8399808 A B C P clauses s t c)). Qed.
Lemma lem8399811 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term348 A B C P clauses s c) = (term348 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8399810 A B C P clauses s t c)). Qed.
Lemma lem8399812 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8399813 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term349 A B C P clauses s c) = (term349 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8399812 A B C) (@lem8399811 A B C P clauses s c)). Qed.
Lemma lem8399814 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term350 A B C P clauses c) = (term350 A B C P clauses c).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8399813 A B C P clauses s c)). Qed.
Lemma lem8399815 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8399816 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term351 A B C P clauses c) = (term351 A B C P clauses c).
Proof. exact (MK_COMB (@lem8399815 A B P) (@lem8399814 A B C P clauses c)). Qed.
Lemma lem8399817 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399818 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term352 A B C P clauses c) = (term352 A B C P clauses c).
Proof. exact (MK_COMB (@lem8399817) (@lem8399816 A B C P clauses c)). Qed.
Lemma lem8399819 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term743 A B C P _115318 c clauses) = (term743 A B C P _115318 c clauses).
Proof. exact (MK_COMB (@lem8399818 A B C P clauses c) (@lem8399785 A B C P _115318 c clauses)). Qed.
Lemma lem8399820 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term744 A B C P _115318 clauses) = (term744 A B C P _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8399819 A B C P _115318 c clauses)). Qed.
Lemma lem8399821 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8399822 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term745 A B C P _115318 clauses) = (term745 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8399821 C) (@lem8399820 A B C P _115318 clauses)). Qed.
Lemma lem8399823 {A B C P : Type'} (_115318 : type1049 A B C P) : (term746 A B C P _115318) = (term746 A B C P _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8399822 A B C P _115318 clauses)). Qed.
Lemma lem8399824 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8399825 {A B C P : Type'} (_115318 : type1049 A B C P) : (term747 A B C P _115318) = (term747 A B C P _115318).
Proof. exact (MK_COMB (@lem8399824 A B C P) (@lem8399823 A B C P _115318)). Qed.
Lemma lem8399826 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399827 {A B C P : Type'} (_115318 : type1049 A B C P) : (term748 A B C P _115318) = (term748 A B C P _115318).
Proof. exact (MK_COMB (@lem8399826) (@lem8399825 A B C P _115318)). Qed.
Lemma lem8399828 {A B C P : Type'} (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term948 A B C P _115318 _115319 _115320) = (term948 A B C P _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8399827 A B C P _115318) (@lem8399784 A B C P _115319 _115320)). Qed.
Lemma lem8399829 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term528 B C P _115317 c clauses) = (term528 B C P _115317 c clauses).
Proof. exact (eq_refl (term528 B C P _115317 c clauses)). Qed.
Lemma lem8399842 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term370 B C P clauses s s' t x t' c y) = (term370 B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term370 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8399843 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term371 B C P clauses s s' t x t' c) = (term371 B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8399842 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8399844 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8399845 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term372 B C P clauses s s' t x t' c) = (term372 B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8399844 P) (@lem8399843 B C P clauses s s' t x t' c)). Qed.
Lemma lem8399846 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term373 B C P clauses s s' t t' c) = (term373 B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8399845 B C P clauses s s' t x t' c)). Qed.
Lemma lem8399847 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8399848 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term374 B C P clauses s s' t t' c) = (term374 B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8399847 P) (@lem8399846 B C P clauses s s' t t' c)). Qed.
Lemma lem8399849 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term375 B C P clauses s s' t c) = (term375 B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8399848 B C P clauses s s' t t' c)). Qed.
Lemma lem8399850 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8399851 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term376 B C P clauses s s' t c) = (term376 B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8399850 B C P) (@lem8399849 B C P clauses s s' t c)). Qed.
Lemma lem8399852 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term377 B C P clauses s t c) = (term377 B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> B => @lem8399851 B C P clauses s s' t c)). Qed.
Lemma lem8399853 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8399854 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term378 B C P clauses s t c) = (term378 B C P clauses s t c).
Proof. exact (MK_COMB (@lem8399853 B P) (@lem8399852 B C P clauses s t c)). Qed.
Lemma lem8399855 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term379 B C P clauses s c) = (term379 B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8399854 B C P clauses s t c)). Qed.
Lemma lem8399856 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8399857 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term380 B C P clauses s c) = (term380 B C P clauses s c).
Proof. exact (MK_COMB (@lem8399856 B C P) (@lem8399855 B C P clauses s c)). Qed.
Lemma lem8399858 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term381 B C P clauses c) = (term381 B C P clauses c).
Proof. exact (fun_ext (fun s : P -> B => @lem8399857 B C P clauses s c)). Qed.
Lemma lem8399859 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8399860 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term382 B C P clauses c) = (term382 B C P clauses c).
Proof. exact (MK_COMB (@lem8399859 B P) (@lem8399858 B C P clauses c)). Qed.
Lemma lem8399861 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399862 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term383 B C P clauses c) = (term383 B C P clauses c).
Proof. exact (MK_COMB (@lem8399861) (@lem8399860 B C P clauses c)). Qed.
Lemma lem8399863 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term529 B C P _115317 c clauses) = (term529 B C P _115317 c clauses).
Proof. exact (MK_COMB (@lem8399862 B C P clauses c) (@lem8399829 B C P _115317 c clauses)). Qed.
Lemma lem8399864 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term530 B C P _115317 clauses) = (term530 B C P _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8399863 B C P _115317 c clauses)). Qed.
Lemma lem8399865 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8399866 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term531 B C P _115317 clauses) = (term531 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8399865 C) (@lem8399864 B C P _115317 clauses)). Qed.
Lemma lem8399867 {B C P : Type'} (_115317 : type1092 B C P) : (term532 B C P _115317) = (term532 B C P _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8399866 B C P _115317 clauses)). Qed.
Lemma lem8399868 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8399869 {B C P : Type'} (_115317 : type1092 B C P) : (term533 B C P _115317) = (term533 B C P _115317).
Proof. exact (MK_COMB (@lem8399868 B C P) (@lem8399867 B C P _115317)). Qed.
Lemma lem8399870 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399871 {B C P : Type'} (_115317 : type1092 B C P) : (term534 B C P _115317) = (term534 B C P _115317).
Proof. exact (MK_COMB (@lem8399870) (@lem8399869 B C P _115317)). Qed.
Lemma lem8399872 {A B C P : Type'} (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term949 A B C P _115317 _115318 _115319 _115320) = (term949 A B C P _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8399871 B C P _115317) (@lem8399828 A B C P _115318 _115319 _115320)). Qed.
Lemma lem8399873 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 c clauses) = (term390 A B P _115314 c clauses).
Proof. exact (eq_refl (term390 A B P _115314 c clauses)). Qed.
Lemma lem8399886 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) (y : P) : (term391 A B P clauses s s' t x t' c y) = (term391 A B P clauses s s' t x t' c y).
Proof. exact (eq_refl (term391 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8399887 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term392 A B P clauses s s' t x t' c) = (term392 A B P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8399886 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8399888 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8399889 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term393 A B P clauses s s' t x t' c) = (term393 A B P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8399888 P) (@lem8399887 A B P clauses s s' t x t' c)). Qed.
Lemma lem8399890 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term394 A B P clauses s s' t t' c) = (term394 A B P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8399889 A B P clauses s s' t x t' c)). Qed.
Lemma lem8399891 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8399892 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term395 A B P clauses s s' t t' c) = (term395 A B P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8399891 P) (@lem8399890 A B P clauses s s' t t' c)). Qed.
Lemma lem8399893 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term396 A B P clauses s s' t c) = (term396 A B P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8399892 A B P clauses s s' t t' c)). Qed.
Lemma lem8399894 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8399895 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term397 A B P clauses s s' t c) = (term397 A B P clauses s s' t c).
Proof. exact (MK_COMB (@lem8399894 A B P) (@lem8399893 A B P clauses s s' t c)). Qed.
Lemma lem8399896 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term398 A B P clauses s t c) = (term398 A B P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8399895 A B P clauses s s' t c)). Qed.
Lemma lem8399897 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8399898 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term399 A B P clauses s t c) = (term399 A B P clauses s t c).
Proof. exact (MK_COMB (@lem8399897 A P) (@lem8399896 A B P clauses s t c)). Qed.
Lemma lem8399899 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term400 A B P clauses s c) = (term400 A B P clauses s c).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8399898 A B P clauses s t c)). Qed.
Lemma lem8399900 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8399901 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term401 A B P clauses s c) = (term401 A B P clauses s c).
Proof. exact (MK_COMB (@lem8399900 A B P) (@lem8399899 A B P clauses s c)). Qed.
Lemma lem8399902 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term402 A B P clauses c) = (term402 A B P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8399901 A B P clauses s c)). Qed.
Lemma lem8399903 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8399904 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term403 A B P clauses c) = (term403 A B P clauses c).
Proof. exact (MK_COMB (@lem8399903 A P) (@lem8399902 A B P clauses c)). Qed.
Lemma lem8399905 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399906 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term404 A B P clauses c) = (term404 A B P clauses c).
Proof. exact (MK_COMB (@lem8399905) (@lem8399904 A B P clauses c)). Qed.
Lemma lem8399907 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term406 A B P _115314 c clauses) = (term406 A B P _115314 c clauses).
Proof. exact (MK_COMB (@lem8399906 A B P clauses c) (@lem8399873 A B P _115314 c clauses)). Qed.
Lemma lem8399908 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term408 A B P _115314 clauses) = (term408 A B P _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8399907 A B P _115314 c clauses)). Qed.
Lemma lem8399909 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8399910 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term410 A B P _115314 clauses) = (term410 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8399909 A B) (@lem8399908 A B P _115314 clauses)). Qed.
Lemma lem8399911 {A B P : Type'} (_115314 : type1080 A B P) : (term412 A B P _115314) = (term412 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8399910 A B P _115314 clauses)). Qed.
Lemma lem8399912 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8399913 {A B P : Type'} (_115314 : type1080 A B P) : (term413 A B P _115314) = (term413 A B P _115314).
Proof. exact (MK_COMB (@lem8399912 A B P) (@lem8399911 A B P _115314)). Qed.
Lemma lem8399914 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399915 {A B P : Type'} (_115314 : type1080 A B P) : (term414 A B P _115314) = (term414 A B P _115314).
Proof. exact (MK_COMB (@lem8399914) (@lem8399913 A B P _115314)). Qed.
Lemma lem8399916 {A B C P : Type'} (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term950 A B C P _115314 _115317 _115318 _115319 _115320) = (term950 A B C P _115314 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8399915 A B P _115314) (@lem8399872 A B C P _115317 _115318 _115319 _115320)). Qed.
Lemma lem8399917 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term612 A B C P _115316 c clauses) = (term612 A B C P _115316 c clauses).
Proof. exact (eq_refl (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8399930 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term429 A B C P clauses s s' t x t' c y) = (term429 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term429 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8399931 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term430 A B C P clauses s s' t x t' c) = (term430 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8399930 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8399932 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8399933 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term431 A B C P clauses s s' t x t' c) = (term431 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8399932 P) (@lem8399931 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8399934 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term432 A B C P clauses s s' t t' c) = (term432 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8399933 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8399935 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8399936 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term433 A B C P clauses s s' t t' c) = (term433 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8399935 P) (@lem8399934 A B C P clauses s s' t t' c)). Qed.
Lemma lem8399937 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term434 A B C P clauses s s' t c) = (term434 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8399936 A B C P clauses s s' t t' c)). Qed.
Lemma lem8399938 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8399939 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term435 A B C P clauses s s' t c) = (term435 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8399938 B C P) (@lem8399937 A B C P clauses s s' t c)). Qed.
Lemma lem8399940 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term436 A B C P clauses s t c) = (term436 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8399939 A B C P clauses s s' t c)). Qed.
Lemma lem8399941 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8399942 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term437 A B C P clauses s t c) = (term437 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8399941 A P) (@lem8399940 A B C P clauses s t c)). Qed.
Lemma lem8399943 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term438 A B C P clauses s c) = (term438 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8399942 A B C P clauses s t c)). Qed.
Lemma lem8399944 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8399945 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term439 A B C P clauses s c) = (term439 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8399944 B C P) (@lem8399943 A B C P clauses s c)). Qed.
Lemma lem8399946 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term440 A B C P clauses c) = (term440 A B C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8399945 A B C P clauses s c)). Qed.
Lemma lem8399947 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8399948 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term441 A B C P clauses c) = (term441 A B C P clauses c).
Proof. exact (MK_COMB (@lem8399947 A P) (@lem8399946 A B C P clauses c)). Qed.
Lemma lem8399949 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399950 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term442 A B C P clauses c) = (term442 A B C P clauses c).
Proof. exact (MK_COMB (@lem8399949) (@lem8399948 A B C P clauses c)). Qed.
Lemma lem8399951 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term613 A B C P _115316 c clauses) = (term613 A B C P _115316 c clauses).
Proof. exact (MK_COMB (@lem8399950 A B C P clauses c) (@lem8399917 A B C P _115316 c clauses)). Qed.
Lemma lem8399952 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term614 A B C P _115316 clauses) = (term614 A B C P _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8399951 A B C P _115316 c clauses)). Qed.
Lemma lem8399953 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8399954 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term615 A B C P _115316 clauses) = (term615 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8399953 C) (@lem8399952 A B C P _115316 clauses)). Qed.
Lemma lem8399955 {A B C P : Type'} (_115316 : type1115 A B C P) : (term616 A B C P _115316) = (term616 A B C P _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8399954 A B C P _115316 clauses)). Qed.
Lemma lem8399956 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8399957 {A B C P : Type'} (_115316 : type1115 A B C P) : (term617 A B C P _115316) = (term617 A B C P _115316).
Proof. exact (MK_COMB (@lem8399956 A B C P) (@lem8399955 A B C P _115316)). Qed.
Lemma lem8399958 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399959 {A B C P : Type'} (_115316 : type1115 A B C P) : (term618 A B C P _115316) = (term618 A B C P _115316).
Proof. exact (MK_COMB (@lem8399958) (@lem8399957 A B C P _115316)). Qed.
Lemma lem8399960 {A B C P : Type'} (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term951 A B C P _115316 _115314 _115317 _115318 _115319 _115320) = (term951 A B C P _115316 _115314 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8399959 A B C P _115316) (@lem8399916 A B C P _115314 _115317 _115318 _115319 _115320)). Qed.
Lemma lem8399961 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term528 A C P _115315 c clauses) = (term528 A C P _115315 c clauses).
Proof. exact (eq_refl (term528 A C P _115315 c clauses)). Qed.
Lemma lem8399974 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) (y : P) : (term370 A C P clauses s s' t x t' c y) = (term370 A C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term370 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8399975 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term371 A C P clauses s s' t x t' c) = (term371 A C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8399974 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8399976 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8399977 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term372 A C P clauses s s' t x t' c) = (term372 A C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8399976 P) (@lem8399975 A C P clauses s s' t x t' c)). Qed.
Lemma lem8399978 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term373 A C P clauses s s' t t' c) = (term373 A C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8399977 A C P clauses s s' t x t' c)). Qed.
Lemma lem8399979 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8399980 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term374 A C P clauses s s' t t' c) = (term374 A C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8399979 P) (@lem8399978 A C P clauses s s' t t' c)). Qed.
Lemma lem8399981 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term375 A C P clauses s s' t c) = (term375 A C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 A C P => @lem8399980 A C P clauses s s' t t' c)). Qed.
Lemma lem8399982 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8399983 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term376 A C P clauses s s' t c) = (term376 A C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8399982 A C P) (@lem8399981 A C P clauses s s' t c)). Qed.
Lemma lem8399984 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term377 A C P clauses s t c) = (term377 A C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8399983 A C P clauses s s' t c)). Qed.
Lemma lem8399985 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8399986 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term378 A C P clauses s t c) = (term378 A C P clauses s t c).
Proof. exact (MK_COMB (@lem8399985 A P) (@lem8399984 A C P clauses s t c)). Qed.
Lemma lem8399987 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term379 A C P clauses s c) = (term379 A C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8399986 A C P clauses s t c)). Qed.
Lemma lem8399988 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8399989 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term380 A C P clauses s c) = (term380 A C P clauses s c).
Proof. exact (MK_COMB (@lem8399988 A C P) (@lem8399987 A C P clauses s c)). Qed.
Lemma lem8399990 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term381 A C P clauses c) = (term381 A C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8399989 A C P clauses s c)). Qed.
Lemma lem8399991 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8399992 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term382 A C P clauses c) = (term382 A C P clauses c).
Proof. exact (MK_COMB (@lem8399991 A P) (@lem8399990 A C P clauses c)). Qed.
Lemma lem8399993 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8399994 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term383 A C P clauses c) = (term383 A C P clauses c).
Proof. exact (MK_COMB (@lem8399993) (@lem8399992 A C P clauses c)). Qed.
Lemma lem8399995 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term529 A C P _115315 c clauses) = (term529 A C P _115315 c clauses).
Proof. exact (MK_COMB (@lem8399994 A C P clauses c) (@lem8399961 A C P _115315 c clauses)). Qed.
Lemma lem8399996 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term530 A C P _115315 clauses) = (term530 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8399995 A C P _115315 c clauses)). Qed.
Lemma lem8399997 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8399998 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term531 A C P _115315 clauses) = (term531 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8399997 C) (@lem8399996 A C P _115315 clauses)). Qed.
Lemma lem8399999 {A C P : Type'} (_115315 : type1092 A C P) : (term532 A C P _115315) = (term532 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8399998 A C P _115315 clauses)). Qed.
Lemma lem8400000 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8400001 {A C P : Type'} (_115315 : type1092 A C P) : (term533 A C P _115315) = (term533 A C P _115315).
Proof. exact (MK_COMB (@lem8400000 A C P) (@lem8399999 A C P _115315)). Qed.
Lemma lem8400002 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8400003 {A C P : Type'} (_115315 : type1092 A C P) : (term534 A C P _115315) = (term534 A C P _115315).
Proof. exact (MK_COMB (@lem8400002) (@lem8400001 A C P _115315)). Qed.
Lemma lem8400004 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term952 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320) = (term952 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8400003 A C P _115315) (@lem8399960 A B C P _115316 _115314 _115317 _115318 _115319 _115320)). Qed.
Lemma lem8400009 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) : (term450 A B P _115314 f clauses) = (term450 A B P _115314 f clauses).
Proof. exact (eq_refl (term450 A B P _115314 f clauses)). Qed.
Lemma lem8400010 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term953 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320) = (term953 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8400009 A B P _115314 f clauses) (@lem8400004 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320)). Qed.
Lemma lem8400011 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (x : A) : ((f x) = (@CASEWISE B P A (A -> B) clauses f x)) = ((f x) = (@CASEWISE B P A (A -> B) clauses f x)).
Proof. exact (eq_refl ((f x) = (@CASEWISE B P A (A -> B) clauses f x))). Qed.
Lemma lem8400012 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term452 A B P clauses f) = (term452 A B P clauses f).
Proof. exact (fun_ext (fun x : A => @lem8400011 A B P clauses f x)). Qed.
Lemma lem8400013 {A : Type'} : (@all A) = (@all A).
Proof. exact (eq_refl (@all A)). Qed.
Lemma lem8400014 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term162 A B P clauses f) = (term162 A B P clauses f).
Proof. exact (MK_COMB (@lem8400013 A) (@lem8400012 A B P clauses f)). Qed.
Lemma lem8400015 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8400016 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) : (term164 A B P clauses f) = (term164 A B P clauses f).
Proof. exact (MK_COMB (@lem8400015) (@lem8400014 A B P clauses f)). Qed.
Lemma lem8400017 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term954 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320) = (term954 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8400016 A B P clauses f) (@lem8400010 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320)). Qed.
Lemma lem8400030 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) (y : P) : (term115 A B P clauses s s' t x t' f y) = (term115 A B P clauses s s' t x t' f y).
Proof. exact (eq_refl (term115 A B P clauses s s' t x t' f y)). Qed.
Lemma lem8400031 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term118 A B P clauses s s' t x t' f) = (term118 A B P clauses s s' t x t' f).
Proof. exact (fun_ext (fun y : P => @lem8400030 A B P clauses s s' t x t' f y)). Qed.
Lemma lem8400032 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8400033 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term120 A B P clauses s s' t x t' f) = (term120 A B P clauses s s' t x t' f).
Proof. exact (MK_COMB (@lem8400032 P) (@lem8400031 A B P clauses s s' t x t' f)). Qed.
Lemma lem8400034 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term122 A B P clauses s s' t t' f) = (term122 A B P clauses s s' t t' f).
Proof. exact (fun_ext (fun x : P => @lem8400033 A B P clauses s s' t x t' f)). Qed.
Lemma lem8400035 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8400036 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term124 A B P clauses s s' t t' f) = (term124 A B P clauses s s' t t' f).
Proof. exact (MK_COMB (@lem8400035 P) (@lem8400034 A B P clauses s s' t t' f)). Qed.
Lemma lem8400037 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term126 A B P clauses s s' t t') = (term126 A B P clauses s s' t t').
Proof. exact (fun_ext (fun f : A -> B => @lem8400036 A B P clauses s s' t t' f)). Qed.
Lemma lem8400038 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8400039 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term128 A B P clauses s s' t t') = (term128 A B P clauses s s' t t').
Proof. exact (MK_COMB (@lem8400038 A B) (@lem8400037 A B P clauses s s' t t')). Qed.
Lemma lem8400040 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term130 A B P clauses s s' t) = (term130 A B P clauses s s' t).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8400039 A B P clauses s s' t t')). Qed.
Lemma lem8400041 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8400042 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term132 A B P clauses s s' t) = (term132 A B P clauses s s' t).
Proof. exact (MK_COMB (@lem8400041 A B P) (@lem8400040 A B P clauses s s' t)). Qed.
Lemma lem8400043 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term134 A B P clauses s t) = (term134 A B P clauses s t).
Proof. exact (fun_ext (fun s' : P -> A => @lem8400042 A B P clauses s s' t)). Qed.
Lemma lem8400044 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8400045 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term136 A B P clauses s t) = (term136 A B P clauses s t).
Proof. exact (MK_COMB (@lem8400044 A P) (@lem8400043 A B P clauses s t)). Qed.
Lemma lem8400046 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term138 A B P clauses s) = (term138 A B P clauses s).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8400045 A B P clauses s t)). Qed.
Lemma lem8400047 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8400048 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term140 A B P clauses s) = (term140 A B P clauses s).
Proof. exact (MK_COMB (@lem8400047 A B P) (@lem8400046 A B P clauses s)). Qed.
Lemma lem8400049 {A B P : Type'} (clauses : type1635 A B P) : (term142 A B P clauses) = (term142 A B P clauses).
Proof. exact (fun_ext (fun s : P -> A => @lem8400048 A B P clauses s)). Qed.
Lemma lem8400050 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8400051 {A B P : Type'} (clauses : type1635 A B P) : (term144 A B P clauses) = (term144 A B P clauses).
Proof. exact (MK_COMB (@lem8400050 A P) (@lem8400049 A B P clauses)). Qed.
Lemma lem8400052 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8400053 {A B P : Type'} (clauses : type1635 A B P) : (term248 A B P clauses) = (term248 A B P clauses).
Proof. exact (MK_COMB (@lem8400052) (@lem8400051 A B P clauses)). Qed.
Lemma lem8400054 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term955 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320) = (term955 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8400053 A B P clauses) (@lem8400017 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320)). Qed.
Lemma lem8400055 {A B C P : Type'} (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term956 A B C P clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320) = (term956 A B C P clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320).
Proof. exact (fun_ext (fun f : A -> B => @lem8400054 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320)). Qed.
Lemma lem8400056 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8400057 {A B C P : Type'} (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term957 A B C P clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320) = (term957 A B C P clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8400056 A B) (@lem8400055 A B C P clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320)). Qed.
Lemma lem8400058 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term958 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320) = (term958 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8400057 A B C P clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320)). Qed.
Lemma lem8400059 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8400060 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term959 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320) = (term959 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8400059 A B P) (@lem8400058 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320)). Qed.
Lemma lem8400061 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f' : A -> B) : (term195 A B P f clauses s t f') = (term195 A B P f clauses s t f').
Proof. exact (eq_refl (term195 A B P f clauses s t f')). Qed.
Lemma lem8400062 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term197 A B P f clauses s f') = (term197 A B P f clauses s f').
Proof. exact (fun_ext (fun t : type558 A B P => @lem8400061 A B P f clauses s t f')). Qed.
Lemma lem8400063 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8400064 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term199 A B P f clauses s f') = (term199 A B P f clauses s f').
Proof. exact (MK_COMB (@lem8400063 A B P) (@lem8400062 A B P f clauses s f')). Qed.
Lemma lem8400065 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term201 A B P f clauses f') = (term201 A B P f clauses f').
Proof. exact (fun_ext (fun s : P -> A => @lem8400064 A B P f clauses s f')). Qed.
Lemma lem8400066 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8400067 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term203 A B P f clauses f') = (term203 A B P f clauses f').
Proof. exact (MK_COMB (@lem8400066 A P) (@lem8400065 A B P f clauses f')). Qed.
Lemma lem8400070 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) (f' : type1177 A B P) : (term508 A B P _115314 clauses f f') = (term508 A B P _115314 clauses f f').
Proof. exact (eq_refl (term508 A B P _115314 clauses f f')). Qed.
Lemma lem8400071 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : ((_115314 clauses f' f) = (term203 A B P f clauses f')) = ((_115314 clauses f' f) = (term203 A B P f clauses f')).
Proof. exact (MK_COMB (@lem8400070 A B P _115314 clauses f' f) (@lem8400067 A B P f clauses f')). Qed.
Lemma lem8400072 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term510 A B P _115314 clauses f) = (term510 A B P _115314 clauses f).
Proof. exact (fun_ext (fun f' : type1177 A B P => @lem8400071 A B P _115314 f' clauses f)). Qed.
Lemma lem8400073 {A B P : Type'} : (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) = (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop))). Qed.
Lemma lem8400074 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term511 A B P _115314 clauses f) = (term511 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8400073 A B P) (@lem8400072 A B P _115314 clauses f)). Qed.
Lemma lem8400075 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term512 A B P _115314 clauses) = (term512 A B P _115314 clauses).
Proof. exact (fun_ext (fun f : A -> B => @lem8400074 A B P _115314 clauses f)). Qed.
Lemma lem8400076 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8400077 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term513 A B P _115314 clauses) = (term513 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8400076 A B) (@lem8400075 A B P _115314 clauses)). Qed.
Lemma lem8400078 {A B P : Type'} (_115314 : type1080 A B P) : (term514 A B P _115314) = (term514 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8400077 A B P _115314 clauses)). Qed.
Lemma lem8400079 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8400080 {A B P : Type'} (_115314 : type1080 A B P) : (term515 A B P _115314) = (term515 A B P _115314).
Proof. exact (MK_COMB (@lem8400079 A B P) (@lem8400078 A B P _115314)). Qed.
Lemma lem8400081 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8400082 {A B P : Type'} (_115314 : type1080 A B P) : (term516 A B P _115314) = (term516 A B P _115314).
Proof. exact (MK_COMB (@lem8400081) (@lem8400080 A B P _115314)). Qed.
Lemma lem8400083 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term960 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320) = (term960 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8400082 A B P _115314) (@lem8400060 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320)). Qed.
Lemma lem8400084 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term961 A B C P _115315 _115316 _115317 _115318 _115319 _115320) = (term961 A B C P _115315 _115316 _115317 _115318 _115319 _115320).
Proof. exact (fun_ext (fun _115314 : type1080 A B P => @lem8400083 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320)). Qed.
Lemma lem8400085 {A B P : Type'} : (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8400086 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term962 A B C P _115315 _115316 _115317 _115318 _115319 _115320) = (term962 A B C P _115315 _115316 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8400085 A B P) (@lem8400084 A B C P _115315 _115316 _115317 _115318 _115319 _115320)). Qed.
Lemma lem8400087 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term361 A C P f clauses s t c) = (term361 A C P f clauses s t c).
Proof. exact (eq_refl (term361 A C P f clauses s t c)). Qed.
Lemma lem8400088 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term362 A C P f clauses s c) = (term362 A C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8400087 A C P f clauses s t c)). Qed.
Lemma lem8400089 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8400090 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term363 A C P f clauses s c) = (term363 A C P f clauses s c).
Proof. exact (MK_COMB (@lem8400089 A C P) (@lem8400088 A C P f clauses s c)). Qed.
Lemma lem8400091 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term364 A C P f clauses c) = (term364 A C P f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8400090 A C P f clauses s c)). Qed.
Lemma lem8400092 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8400093 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term365 A C P f clauses c) = (term365 A C P f clauses c).
Proof. exact (MK_COMB (@lem8400092 A P) (@lem8400091 A C P f clauses c)). Qed.
Lemma lem8400096 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) (f : type1178 A C P) : (term592 A C P _115315 clauses c f) = (term592 A C P _115315 clauses c f).
Proof. exact (eq_refl (term592 A C P _115315 clauses c f)). Qed.
Lemma lem8400097 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : ((_115315 clauses c f) = (term365 A C P f clauses c)) = ((_115315 clauses c f) = (term365 A C P f clauses c)).
Proof. exact (MK_COMB (@lem8400096 A C P _115315 clauses c f) (@lem8400093 A C P f clauses c)). Qed.
Lemma lem8400098 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term594 A C P _115315 clauses c) = (term594 A C P _115315 clauses c).
Proof. exact (fun_ext (fun f : type1178 A C P => @lem8400097 A C P _115315 f clauses c)). Qed.
Lemma lem8400099 {A C P : Type'} : (@all ((prod (P -> A) (C -> P -> A)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> A)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> A)) -> Prop))). Qed.
Lemma lem8400100 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term595 A C P _115315 clauses c) = (term595 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8400099 A C P) (@lem8400098 A C P _115315 clauses c)). Qed.
Lemma lem8400101 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term596 A C P _115315 clauses) = (term596 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8400100 A C P _115315 clauses c)). Qed.
Lemma lem8400102 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8400103 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term597 A C P _115315 clauses) = (term597 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8400102 C) (@lem8400101 A C P _115315 clauses)). Qed.
Lemma lem8400104 {A C P : Type'} (_115315 : type1092 A C P) : (term598 A C P _115315) = (term598 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8400103 A C P _115315 clauses)). Qed.
Lemma lem8400105 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8400106 {A C P : Type'} (_115315 : type1092 A C P) : (term599 A C P _115315) = (term599 A C P _115315).
Proof. exact (MK_COMB (@lem8400105 A C P) (@lem8400104 A C P _115315)). Qed.
Lemma lem8400107 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8400108 {A C P : Type'} (_115315 : type1092 A C P) : (term600 A C P _115315) = (term600 A C P _115315).
Proof. exact (MK_COMB (@lem8400107) (@lem8400106 A C P _115315)). Qed.
Lemma lem8400109 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term963 A B C P _115315 _115316 _115317 _115318 _115319 _115320) = (term963 A B C P _115315 _115316 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8400108 A C P _115315) (@lem8400086 A B C P _115315 _115316 _115317 _115318 _115319 _115320)). Qed.
Lemma lem8400110 {A B C P : Type'} (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term964 A B C P _115316 _115317 _115318 _115319 _115320) = (term964 A B C P _115316 _115317 _115318 _115319 _115320).
Proof. exact (fun_ext (fun _115315 : type1092 A C P => @lem8400109 A B C P _115315 _115316 _115317 _115318 _115319 _115320)). Qed.
Lemma lem8400111 {A C P : Type'} : (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> Prop))). Qed.
Lemma lem8400112 {A B C P : Type'} (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term965 A B C P _115316 _115317 _115318 _115319 _115320) = (term965 A B C P _115316 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8400111 A C P) (@lem8400110 A B C P _115316 _115317 _115318 _115319 _115320)). Qed.
Lemma lem8400113 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term420 A B C P f clauses s t c) = (term420 A B C P f clauses s t c).
Proof. exact (eq_refl (term420 A B C P f clauses s t c)). Qed.
Lemma lem8400114 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term421 A B C P f clauses s c) = (term421 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8400113 A B C P f clauses s t c)). Qed.
Lemma lem8400115 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8400116 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term422 A B C P f clauses s c) = (term422 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8400115 B C P) (@lem8400114 A B C P f clauses s c)). Qed.
Lemma lem8400117 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term423 A B C P f clauses c) = (term423 A B C P f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8400116 A B C P f clauses s c)). Qed.
Lemma lem8400118 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8400119 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term424 A B C P f clauses c) = (term424 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8400118 A P) (@lem8400117 A B C P f clauses c)). Qed.
Lemma lem8400122 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) (f : type1185 A B C P) : (term680 A B C P _115316 clauses c f) = (term680 A B C P _115316 clauses c f).
Proof. exact (eq_refl (term680 A B C P _115316 clauses c f)). Qed.
Lemma lem8400123 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : ((_115316 clauses c f) = (term424 A B C P f clauses c)) = ((_115316 clauses c f) = (term424 A B C P f clauses c)).
Proof. exact (MK_COMB (@lem8400122 A B C P _115316 clauses c f) (@lem8400119 A B C P f clauses c)). Qed.
Lemma lem8400124 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term682 A B C P _115316 clauses c) = (term682 A B C P _115316 clauses c).
Proof. exact (fun_ext (fun f : type1185 A B C P => @lem8400123 A B C P _115316 f clauses c)). Qed.
Lemma lem8400125 {A B C P : Type'} : (@all ((prod (P -> A) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8400126 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term683 A B C P _115316 clauses c) = (term683 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8400125 A B C P) (@lem8400124 A B C P _115316 clauses c)). Qed.
Lemma lem8400127 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term684 A B C P _115316 clauses) = (term684 A B C P _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8400126 A B C P _115316 clauses c)). Qed.
Lemma lem8400128 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8400129 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term685 A B C P _115316 clauses) = (term685 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8400128 C) (@lem8400127 A B C P _115316 clauses)). Qed.
Lemma lem8400130 {A B C P : Type'} (_115316 : type1115 A B C P) : (term686 A B C P _115316) = (term686 A B C P _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8400129 A B C P _115316 clauses)). Qed.
Lemma lem8400131 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8400132 {A B C P : Type'} (_115316 : type1115 A B C P) : (term687 A B C P _115316) = (term687 A B C P _115316).
Proof. exact (MK_COMB (@lem8400131 A B C P) (@lem8400130 A B C P _115316)). Qed.
Lemma lem8400133 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8400134 {A B C P : Type'} (_115316 : type1115 A B C P) : (term688 A B C P _115316) = (term688 A B C P _115316).
Proof. exact (MK_COMB (@lem8400133) (@lem8400132 A B C P _115316)). Qed.
Lemma lem8400135 {A B C P : Type'} (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term966 A B C P _115316 _115317 _115318 _115319 _115320) = (term966 A B C P _115316 _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8400134 A B C P _115316) (@lem8400112 A B C P _115316 _115317 _115318 _115319 _115320)). Qed.
Lemma lem8400136 {A B C P : Type'} (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term967 A B C P _115317 _115318 _115319 _115320) = (term967 A B C P _115317 _115318 _115319 _115320).
Proof. exact (fun_ext (fun _115316 : type1115 A B C P => @lem8400135 A B C P _115316 _115317 _115318 _115319 _115320)). Qed.
Lemma lem8400137 {A B C P : Type'} : (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8400138 {A B C P : Type'} (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term968 A B C P _115317 _115318 _115319 _115320) = (term968 A B C P _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8400137 A B C P) (@lem8400136 A B C P _115317 _115318 _115319 _115320)). Qed.
Lemma lem8400139 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term361 B C P f clauses s t c) = (term361 B C P f clauses s t c).
Proof. exact (eq_refl (term361 B C P f clauses s t c)). Qed.
Lemma lem8400140 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term362 B C P f clauses s c) = (term362 B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8400139 B C P f clauses s t c)). Qed.
Lemma lem8400141 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8400142 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term363 B C P f clauses s c) = (term363 B C P f clauses s c).
Proof. exact (MK_COMB (@lem8400141 B C P) (@lem8400140 B C P f clauses s c)). Qed.
Lemma lem8400143 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term364 B C P f clauses c) = (term364 B C P f clauses c).
Proof. exact (fun_ext (fun s : P -> B => @lem8400142 B C P f clauses s c)). Qed.
Lemma lem8400144 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8400145 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term365 B C P f clauses c) = (term365 B C P f clauses c).
Proof. exact (MK_COMB (@lem8400144 B P) (@lem8400143 B C P f clauses c)). Qed.
Lemma lem8400148 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) (f : type1178 B C P) : (term592 B C P _115317 clauses c f) = (term592 B C P _115317 clauses c f).
Proof. exact (eq_refl (term592 B C P _115317 clauses c f)). Qed.
Lemma lem8400149 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : ((_115317 clauses c f) = (term365 B C P f clauses c)) = ((_115317 clauses c f) = (term365 B C P f clauses c)).
Proof. exact (MK_COMB (@lem8400148 B C P _115317 clauses c f) (@lem8400145 B C P f clauses c)). Qed.
Lemma lem8400150 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term594 B C P _115317 clauses c) = (term594 B C P _115317 clauses c).
Proof. exact (fun_ext (fun f : type1178 B C P => @lem8400149 B C P _115317 f clauses c)). Qed.
Lemma lem8400151 {B C P : Type'} : (@all ((prod (P -> B) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> B) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> B) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8400152 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term595 B C P _115317 clauses c) = (term595 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8400151 B C P) (@lem8400150 B C P _115317 clauses c)). Qed.
Lemma lem8400153 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term596 B C P _115317 clauses) = (term596 B C P _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8400152 B C P _115317 clauses c)). Qed.
Lemma lem8400154 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8400155 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term597 B C P _115317 clauses) = (term597 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8400154 C) (@lem8400153 B C P _115317 clauses)). Qed.
Lemma lem8400156 {B C P : Type'} (_115317 : type1092 B C P) : (term598 B C P _115317) = (term598 B C P _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8400155 B C P _115317 clauses)). Qed.
Lemma lem8400157 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8400158 {B C P : Type'} (_115317 : type1092 B C P) : (term599 B C P _115317) = (term599 B C P _115317).
Proof. exact (MK_COMB (@lem8400157 B C P) (@lem8400156 B C P _115317)). Qed.
Lemma lem8400159 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8400160 {B C P : Type'} (_115317 : type1092 B C P) : (term600 B C P _115317) = (term600 B C P _115317).
Proof. exact (MK_COMB (@lem8400159) (@lem8400158 B C P _115317)). Qed.
Lemma lem8400161 {A B C P : Type'} (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term969 A B C P _115317 _115318 _115319 _115320) = (term969 A B C P _115317 _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8400160 B C P _115317) (@lem8400138 A B C P _115317 _115318 _115319 _115320)). Qed.
Lemma lem8400162 {A B C P : Type'} (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term970 A B C P _115318 _115319 _115320) = (term970 A B C P _115318 _115319 _115320).
Proof. exact (fun_ext (fun _115317 : type1092 B C P => @lem8400161 A B C P _115317 _115318 _115319 _115320)). Qed.
Lemma lem8400163 {B C P : Type'} : (@all ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop)) = (@all ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8400164 {A B C P : Type'} (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term971 A B C P _115318 _115319 _115320) = (term971 A B C P _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8400163 B C P) (@lem8400162 A B C P _115318 _115319 _115320)). Qed.
Lemma lem8400165 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term330 A B C P f clauses s t c) = (term330 A B C P f clauses s t c).
Proof. exact (eq_refl (term330 A B C P f clauses s t c)). Qed.
Lemma lem8400166 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term331 A B C P f clauses s c) = (term331 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8400165 A B C P f clauses s t c)). Qed.
Lemma lem8400167 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8400168 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term332 A B C P f clauses s c) = (term332 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8400167 A B C) (@lem8400166 A B C P f clauses s c)). Qed.
Lemma lem8400169 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term333 A B C P f clauses c) = (term333 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8400168 A B C P f clauses s c)). Qed.
Lemma lem8400170 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8400171 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term334 A B C P f clauses c) = (term334 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8400170 A B P) (@lem8400169 A B C P f clauses c)). Qed.
Lemma lem8400174 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) (f : type1167 A B C P) : (term819 A B C P _115318 clauses c f) = (term819 A B C P _115318 clauses c f).
Proof. exact (eq_refl (term819 A B C P _115318 clauses c f)). Qed.
Lemma lem8400175 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : ((_115318 clauses c f) = (term334 A B C P f clauses c)) = ((_115318 clauses c f) = (term334 A B C P f clauses c)).
Proof. exact (MK_COMB (@lem8400174 A B C P _115318 clauses c f) (@lem8400171 A B C P f clauses c)). Qed.
Lemma lem8400176 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term821 A B C P _115318 clauses c) = (term821 A B C P _115318 clauses c).
Proof. exact (fun_ext (fun f : type1167 A B C P => @lem8400175 A B C P _115318 f clauses c)). Qed.
Lemma lem8400177 {A B C P : Type'} : (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)) = (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop))). Qed.
Lemma lem8400178 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term822 A B C P _115318 clauses c) = (term822 A B C P _115318 clauses c).
Proof. exact (MK_COMB (@lem8400177 A B C P) (@lem8400176 A B C P _115318 clauses c)). Qed.
Lemma lem8400179 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term823 A B C P _115318 clauses) = (term823 A B C P _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8400178 A B C P _115318 clauses c)). Qed.
Lemma lem8400180 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8400181 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term824 A B C P _115318 clauses) = (term824 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8400180 C) (@lem8400179 A B C P _115318 clauses)). Qed.
Lemma lem8400182 {A B C P : Type'} (_115318 : type1049 A B C P) : (term825 A B C P _115318) = (term825 A B C P _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8400181 A B C P _115318 clauses)). Qed.
Lemma lem8400183 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8400184 {A B C P : Type'} (_115318 : type1049 A B C P) : (term826 A B C P _115318) = (term826 A B C P _115318).
Proof. exact (MK_COMB (@lem8400183 A B C P) (@lem8400182 A B C P _115318)). Qed.
Lemma lem8400185 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8400186 {A B C P : Type'} (_115318 : type1049 A B C P) : (term827 A B C P _115318) = (term827 A B C P _115318).
Proof. exact (MK_COMB (@lem8400185) (@lem8400184 A B C P _115318)). Qed.
Lemma lem8400187 {A B C P : Type'} (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term972 A B C P _115318 _115319 _115320) = (term972 A B C P _115318 _115319 _115320).
Proof. exact (MK_COMB (@lem8400186 A B C P _115318) (@lem8400164 A B C P _115318 _115319 _115320)). Qed.
Lemma lem8400188 {A B C P : Type'} (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term973 A B C P _115319 _115320) = (term973 A B C P _115319 _115320).
Proof. exact (fun_ext (fun _115318 : type1049 A B C P => @lem8400187 A B C P _115318 _115319 _115320)). Qed.
Lemma lem8400189 {A B C P : Type'} : (@all ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> Prop)) = (@all ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8400190 {A B C P : Type'} (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term974 A B C P _115319 _115320) = (term974 A B C P _115319 _115320).
Proof. exact (MK_COMB (@lem8400189 A B C P) (@lem8400188 A B C P _115319 _115320)). Qed.
Lemma lem8400191 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term299 A B C P f clauses s t c) = (term299 A B C P f clauses s t c).
Proof. exact (eq_refl (term299 A B C P f clauses s t c)). Qed.
Lemma lem8400192 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term300 A B C P f clauses s c) = (term300 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8400191 A B C P f clauses s t c)). Qed.
Lemma lem8400193 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8400194 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term301 A B C P f clauses s c) = (term301 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8400193 A B C P) (@lem8400192 A B C P f clauses s c)). Qed.
Lemma lem8400195 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term302 A B C P f clauses c) = (term302 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type802 A P => @lem8400194 A B C P f clauses s c)). Qed.
Lemma lem8400196 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8400197 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term303 A B C P f clauses c) = (term303 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8400196 A P) (@lem8400195 A B C P f clauses c)). Qed.
Lemma lem8400200 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) (f : type1168 A B C P) : (term920 A B C P _115319 clauses c f) = (term920 A B C P _115319 clauses c f).
Proof. exact (eq_refl (term920 A B C P _115319 clauses c f)). Qed.
Lemma lem8400201 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : ((_115319 clauses c f) = (term303 A B C P f clauses c)) = ((_115319 clauses c f) = (term303 A B C P f clauses c)).
Proof. exact (MK_COMB (@lem8400200 A B C P _115319 clauses c f) (@lem8400197 A B C P f clauses c)). Qed.
Lemma lem8400202 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term922 A B C P _115319 clauses c) = (term922 A B C P _115319 clauses c).
Proof. exact (fun_ext (fun f : type1168 A B C P => @lem8400201 A B C P _115319 f clauses c)). Qed.
Lemma lem8400203 {A B C P : Type'} : (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)) = (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop))). Qed.
Lemma lem8400204 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term923 A B C P _115319 clauses c) = (term923 A B C P _115319 clauses c).
Proof. exact (MK_COMB (@lem8400203 A B C P) (@lem8400202 A B C P _115319 clauses c)). Qed.
Lemma lem8400205 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term924 A B C P _115319 clauses) = (term924 A B C P _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8400204 A B C P _115319 clauses c)). Qed.
Lemma lem8400206 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8400207 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term925 A B C P _115319 clauses) = (term925 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8400206 C) (@lem8400205 A B C P _115319 clauses)). Qed.
Lemma lem8400208 {A B C P : Type'} (_115319 : type1061 A B C P) : (term926 A B C P _115319) = (term926 A B C P _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8400207 A B C P _115319 clauses)). Qed.
Lemma lem8400209 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8400210 {A B C P : Type'} (_115319 : type1061 A B C P) : (term927 A B C P _115319) = (term927 A B C P _115319).
Proof. exact (MK_COMB (@lem8400209 A B C P) (@lem8400208 A B C P _115319)). Qed.
Lemma lem8400211 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8400212 {A B C P : Type'} (_115319 : type1061 A B C P) : (term928 A B C P _115319) = (term928 A B C P _115319).
Proof. exact (MK_COMB (@lem8400211) (@lem8400210 A B C P _115319)). Qed.
Lemma lem8400213 {A B C P : Type'} (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) : (term975 A B C P _115319 _115320) = (term975 A B C P _115319 _115320).
Proof. exact (MK_COMB (@lem8400212 A B C P _115319) (@lem8400190 A B C P _115319 _115320)). Qed.
Lemma lem8400214 {A B C P : Type'} (_115320 : type1038 A B C P) : (term976 A B C P _115320) = (term976 A B C P _115320).
Proof. exact (fun_ext (fun _115319 : type1061 A B C P => @lem8400213 A B C P _115319 _115320)). Qed.
Lemma lem8400215 {A B C P : Type'} : (@all ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> Prop)) = (@all ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8400216 {A B C P : Type'} (_115320 : type1038 A B C P) : (term977 A B C P _115320) = (term977 A B C P _115320).
Proof. exact (MK_COMB (@lem8400215 A B C P) (@lem8400214 A B C P _115320)). Qed.
Lemma lem8400217 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term268 A B C P f clauses s t c) = (term268 A B C P f clauses s t c).
Proof. exact (eq_refl (term268 A B C P f clauses s t c)). Qed.
Lemma lem8400218 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term269 A B C P f clauses s c) = (term269 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8400217 A B C P f clauses s t c)). Qed.
Lemma lem8400219 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8400220 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term270 A B C P f clauses s c) = (term270 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8400219 A B C P) (@lem8400218 A B C P f clauses s c)). Qed.
Lemma lem8400221 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term271 A B C P f clauses c) = (term271 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8400220 A B C P f clauses s c)). Qed.
Lemma lem8400222 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8400223 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term272 A B C P f clauses c) = (term272 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8400222 A B P) (@lem8400221 A B C P f clauses c)). Qed.
Lemma lem8400226 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) (f : type1166 A B C P) : (term1024 A B C P _115320 clauses c f) = (term1024 A B C P _115320 clauses c f).
Proof. exact (eq_refl (term1024 A B C P _115320 clauses c f)). Qed.
Lemma lem8400227 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : ((_115320 clauses c f) = (term272 A B C P f clauses c)) = ((_115320 clauses c f) = (term272 A B C P f clauses c)).
Proof. exact (MK_COMB (@lem8400226 A B C P _115320 clauses c f) (@lem8400223 A B C P f clauses c)). Qed.
Lemma lem8400228 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1026 A B C P _115320 clauses c) = (term1026 A B C P _115320 clauses c).
Proof. exact (fun_ext (fun f : type1166 A B C P => @lem8400227 A B C P _115320 f clauses c)). Qed.
Lemma lem8400229 {A B C P : Type'} : (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)) = (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop))). Qed.
Lemma lem8400230 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1027 A B C P _115320 clauses c) = (term1027 A B C P _115320 clauses c).
Proof. exact (MK_COMB (@lem8400229 A B C P) (@lem8400228 A B C P _115320 clauses c)). Qed.
Lemma lem8400231 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1028 A B C P _115320 clauses) = (term1028 A B C P _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8400230 A B C P _115320 clauses c)). Qed.
Lemma lem8400232 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8400233 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1029 A B C P _115320 clauses) = (term1029 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8400232 C) (@lem8400231 A B C P _115320 clauses)). Qed.
Lemma lem8400234 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1030 A B C P _115320) = (term1030 A B C P _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8400233 A B C P _115320 clauses)). Qed.
Lemma lem8400235 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8400236 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1031 A B C P _115320) = (term1031 A B C P _115320).
Proof. exact (MK_COMB (@lem8400235 A B C P) (@lem8400234 A B C P _115320)). Qed.
Lemma lem8400237 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8400238 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1032 A B C P _115320) = (term1032 A B C P _115320).
Proof. exact (MK_COMB (@lem8400237) (@lem8400236 A B C P _115320)). Qed.
Lemma lem8400239 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1033 A B C P _115320) = (term1033 A B C P _115320).
Proof. exact (MK_COMB (@lem8400238 A B C P _115320) (@lem8400216 A B C P _115320)). Qed.
Lemma lem8400240 {A B C P : Type'} : (term1034 A B C P) = (term1034 A B C P).
Proof. exact (fun_ext (fun _115320 : type1038 A B C P => @lem8400239 A B C P _115320)). Qed.
Lemma lem8400241 {A B C P : Type'} : (@all ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> Prop)) = (@all ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> Prop)).
Proof. exact (eq_refl (@all ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> Prop))). Qed.
Lemma lem8400242 {A B C P : Type'} : (term1035 A B C P) = (term1035 A B C P).
Proof. exact (MK_COMB (@lem8400241 A B C P) (@lem8400240 A B C P)). Qed.
Lemma lem8401029 {A B C P : Type'} : (term256 A B C P) = (term1035 A B C P).
Proof. exact (TRANS (@lem8399697 A B C P) (@lem8400242 A B C P)). Qed.
Lemma lem8401030 {A B C P : Type'} : (term1035 A B C P) = (term256 A B C P).
Proof. exact (SYM (@lem8401029 A B C P)). Qed.
Lemma lem8401031 {A B C P : Type'} (_115320 : type1038 A B C P) (h1 : term1031 A B C P _115320) : term1031 A B C P _115320.
Proof. exact (h1). Qed.
Lemma lem8401032 {A B C P : Type'} (_115319 : type1061 A B C P) (h1 : term927 A B C P _115319) : term927 A B C P _115319.
Proof. exact (h1). Qed.
Lemma lem8401033 {A B C P : Type'} (_115318 : type1049 A B C P) (h1 : term826 A B C P _115318) : term826 A B C P _115318.
Proof. exact (h1). Qed.
Lemma lem8401034 {B C P : Type'} (_115317 : type1092 B C P) (h1 : term599 B C P _115317) : term599 B C P _115317.
Proof. exact (h1). Qed.
Lemma lem8401035 {A B C P : Type'} (_115316 : type1115 A B C P) (h1 : term687 A B C P _115316) : term687 A B C P _115316.
Proof. exact (h1). Qed.
Lemma lem8401036 {A C P : Type'} (_115315 : type1092 A C P) (h1 : term599 A C P _115315) : term599 A C P _115315.
Proof. exact (h1). Qed.
Lemma lem8401037 {A B P : Type'} (_115314 : type1080 A B P) (h1 : term515 A B P _115314) : term515 A B P _115314.
Proof. exact (h1). Qed.
Lemma lem8401038 {A B P : Type'} (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term144 A B P clauses.
Proof. exact (h1). Qed.
Lemma lem8401041 {A C P : Type'} (_115315 : type1092 A C P) (h1 : term533 A C P _115315) : term533 A C P _115315.
Proof. exact (h1). Qed.
Lemma lem8401042 {A B C P : Type'} (_115316 : type1115 A B C P) (h1 : term617 A B C P _115316) : term617 A B C P _115316.
Proof. exact (h1). Qed.
Lemma lem8401043 {A B P : Type'} (_115314 : type1080 A B P) (h1 : term413 A B P _115314) : term413 A B P _115314.
Proof. exact (h1). Qed.
Lemma lem8401044 {B C P : Type'} (_115317 : type1092 B C P) (h1 : term533 B C P _115317) : term533 B C P _115317.
Proof. exact (h1). Qed.
Lemma lem8401045 {A B C P : Type'} (_115318 : type1049 A B C P) (h1 : term747 A B C P _115318) : term747 A B C P _115318.
Proof. exact (h1). Qed.
Lemma lem8401046 {A B C P : Type'} (_115319 : type1061 A B C P) (h1 : term844 A B C P _115319) : term844 A B C P _115319.
Proof. exact (h1). Qed.
Lemma lem8401047 {A B C P : Type'} (_115320 : type1038 A B C P) (h1 : term945 A B C P _115320) : term945 A B C P _115320.
Proof. exact (h1). Qed.
Lemma lem8401051 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term268 A B C P f clauses s t c) = (term268 A B C P f clauses s t c).
Proof. exact (eq_refl (term268 A B C P f clauses s t c)). Qed.
Lemma lem8401052 {A B C P : Type'} (P' : type863 A B C P) : (term1036 A B C P P') = (term1037 A B C P P').
Proof. exact (@lem18392 (type1490 A B C P) P'). Qed.
Lemma lem8401053 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term1038 A B C P f clauses s c) = (term1039 A B C P f clauses s c).
Proof. exact (@lem8401052 A B C P (term269 A B C P f clauses s c)). Qed.
Lemma lem8401054 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term1040 A B C P f clauses s c t) = (term268 A B C P f clauses s t c).
Proof. exact (eq_refl (term1040 A B C P f clauses s c t)). Qed.
Lemma lem8401055 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8401057 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term1041 A B C P f clauses s c t) = (term1042 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8401055) (@lem8401054 A B C P f clauses s t c)). Qed.
Lemma lem8401058 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term1043 A B C P f clauses s c) = (term1044 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8401057 A B C P f clauses s t c)). Qed.
Lemma lem8401059 {A B C P : Type'} : (@ex (C -> ((A -> B) -> P -> B) -> B)) = (@ex (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8401060 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term1039 A B C P f clauses s c) = (term1045 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8401059 A B C P) (@lem8401058 A B C P f clauses s c)). Qed.
Lemma lem8401061 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term1038 A B C P f clauses s c) = (term1045 A B C P f clauses s c).
Proof. exact (TRANS (@lem8401053 A B C P f clauses s c) (@lem8401060 A B C P f clauses s c)). Qed.
Lemma lem8401062 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term269 A B C P f clauses s c) = (term269 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8401051 A B C P f clauses s t c)). Qed.
Lemma lem8401063 {A B C P : Type'} : (@all (C -> ((A -> B) -> P -> B) -> B)) = (@all (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@all (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8401064 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term270 A B C P f clauses s c) = (term270 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8401063 A B C P) (@lem8401062 A B C P f clauses s c)). Qed.
Lemma lem8401065 {A B P : Type'} (P' : type68 A B P) : (term1046 A B P P') = (term1047 A B P P').
Proof. exact (@lem18392 (type115 A B P) P'). Qed.
Lemma lem8401066 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1048 A B C P f clauses c) = (term1049 A B C P f clauses c).
Proof. exact (@lem8401065 A B P (term271 A B C P f clauses c)). Qed.
Lemma lem8401067 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term1050 A B C P f clauses c s) = (term270 A B C P f clauses s c).
Proof. exact (eq_refl (term1050 A B C P f clauses c s)). Qed.
Lemma lem8401068 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8401069 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term1051 A B C P f clauses c s) = (term1038 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8401068) (@lem8401067 A B C P f clauses s c)). Qed.
Lemma lem8401070 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term1051 A B C P f clauses c s) = (term1045 A B C P f clauses s c).
Proof. exact (TRANS (@lem8401069 A B C P f clauses s c) (@lem8401061 A B C P f clauses s c)). Qed.
Lemma lem8401071 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1052 A B C P f clauses c) = (term1053 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8401070 A B C P f clauses s c)). Qed.
Lemma lem8401072 {A B P : Type'} : (@ex (((A -> B) -> P -> B) -> A)) = (@ex (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8401073 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1049 A B C P f clauses c) = (term1054 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8401072 A B P) (@lem8401071 A B C P f clauses c)). Qed.
Lemma lem8401074 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1048 A B C P f clauses c) = (term1054 A B C P f clauses c).
Proof. exact (TRANS (@lem8401066 A B C P f clauses c) (@lem8401073 A B C P f clauses c)). Qed.
Lemma lem8401075 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term271 A B C P f clauses c) = (term271 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8401064 A B C P f clauses s c)). Qed.
Lemma lem8401076 {A B P : Type'} : (@all (((A -> B) -> P -> B) -> A)) = (@all (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@all (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8401077 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term272 A B C P f clauses c) = (term272 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8401076 A B P) (@lem8401075 A B C P f clauses c)). Qed.
Lemma lem8401079 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) (f : type1166 A B C P) : (term1055 A B C P _115320 clauses c f) = (term1055 A B C P _115320 clauses c f).
Proof. exact (eq_refl (term1055 A B C P _115320 clauses c f)). Qed.
Lemma lem8401080 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1056 A B C P _115320 f clauses c) = (term1056 A B C P _115320 f clauses c).
Proof. exact (MK_COMB (@lem8401079 A B C P _115320 clauses c f) (@lem8401077 A B C P f clauses c)). Qed.
Lemma lem8401082 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) (f : type1166 A B C P) : (term1057 A B C P _115320 clauses c f) = (term1057 A B C P _115320 clauses c f).
Proof. exact (eq_refl (term1057 A B C P _115320 clauses c f)). Qed.
Lemma lem8401083 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1058 A B C P _115320 f clauses c) = (term1059 A B C P _115320 f clauses c).
Proof. exact (MK_COMB (@lem8401082 A B C P _115320 clauses c f) (@lem8401074 A B C P f clauses c)). Qed.
Lemma lem8401084 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8401085 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1060 A B C P _115320 f clauses c) = (term1061 A B C P _115320 f clauses c).
Proof. exact (MK_COMB (@lem8401084) (@lem8401083 A B C P _115320 f clauses c)). Qed.
Lemma lem8401086 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1062 A B C P _115320 f clauses c) = (term1063 A B C P _115320 f clauses c).
Proof. exact (MK_COMB (@lem8401085 A B C P _115320 f clauses c) (@lem8401080 A B C P _115320 f clauses c)). Qed.
Lemma lem8401087 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : ((_115320 clauses c f) = (term272 A B C P f clauses c)) = (term1062 A B C P _115320 f clauses c).
Proof. exact (@lem17784 (_115320 clauses c f) (term272 A B C P f clauses c)). Qed.
Lemma lem8401088 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : ((_115320 clauses c f) = (term272 A B C P f clauses c)) = (term1063 A B C P _115320 f clauses c).
Proof. exact (TRANS (@lem8401087 A B C P _115320 f clauses c) (@lem8401086 A B C P _115320 f clauses c)). Qed.
Lemma lem8401089 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1026 A B C P _115320 clauses c) = (term1064 A B C P _115320 clauses c).
Proof. exact (fun_ext (fun f : type1166 A B C P => @lem8401088 A B C P _115320 f clauses c)). Qed.
Lemma lem8401090 {A B C P : Type'} : (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)) = (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop))). Qed.
Lemma lem8401091 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1027 A B C P _115320 clauses c) = (term1065 A B C P _115320 clauses c).
Proof. exact (MK_COMB (@lem8401090 A B C P) (@lem8401089 A B C P _115320 clauses c)). Qed.
Lemma lem8401092 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1028 A B C P _115320 clauses) = (term1066 A B C P _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8401091 A B C P _115320 clauses c)). Qed.
Lemma lem8401093 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8401094 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1029 A B C P _115320 clauses) = (term1067 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8401093 C) (@lem8401092 A B C P _115320 clauses)). Qed.
Lemma lem8401095 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1030 A B C P _115320) = (term1068 A B C P _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8401094 A B C P _115320 clauses)). Qed.
Lemma lem8401096 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8401097 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1031 A B C P _115320) = (term1069 A B C P _115320).
Proof. exact (MK_COMB (@lem8401096 A B C P) (@lem8401095 A B C P _115320)). Qed.
Lemma lem8401107 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term1070 A P Q) = (term1071 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem8401108 {A B C P : Type'} (P' : type285 A B C P) (Q : type285 A B C P) : (term1072 A B C P P' Q) = (term1073 A B C P P' Q).
Proof. exact (@lem8401107 (type1166 A B C P) P' Q). Qed.
Lemma lem8401109 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1074 A B C P _115320 clauses c) = (term1075 A B C P _115320 clauses c).
Proof. exact (@lem8401108 A B C P (term1076 A B C P _115320 clauses c) (term1077 A B C P _115320 clauses c)). Qed.
Lemma lem8401110 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1078 A B C P _115320 clauses c f) = (term1059 A B C P _115320 f clauses c).
Proof. exact (eq_refl (term1078 A B C P _115320 clauses c f)). Qed.
Lemma lem8401111 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8401112 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1079 A B C P _115320 clauses c f) = (term1061 A B C P _115320 f clauses c).
Proof. exact (MK_COMB (@lem8401111) (@lem8401110 A B C P _115320 f clauses c)). Qed.
Lemma lem8401113 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1080 A B C P _115320 clauses c f) = (term1056 A B C P _115320 f clauses c).
Proof. exact (eq_refl (term1080 A B C P _115320 clauses c f)). Qed.
Lemma lem8401114 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1081 A B C P _115320 clauses c f) = (term1063 A B C P _115320 f clauses c).
Proof. exact (MK_COMB (@lem8401112 A B C P _115320 f clauses c) (@lem8401113 A B C P _115320 f clauses c)). Qed.
Lemma lem8401115 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1082 A B C P _115320 clauses c) = (term1064 A B C P _115320 clauses c).
Proof. exact (fun_ext (fun f : type1166 A B C P => @lem8401114 A B C P _115320 f clauses c)). Qed.
Lemma lem8401116 {A B C P : Type'} : (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)) = (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop))). Qed.
Lemma lem8401117 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1074 A B C P _115320 clauses c) = (term1065 A B C P _115320 clauses c).
Proof. exact (MK_COMB (@lem8401116 A B C P) (@lem8401115 A B C P _115320 clauses c)). Qed.
Lemma lem8401118 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8401119 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1083 A B C P _115320 clauses c) = (term1084 A B C P _115320 clauses c).
Proof. exact (MK_COMB (@lem8401118) (@lem8401117 A B C P _115320 clauses c)). Qed.
Lemma lem8401120 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1078 A B C P _115320 clauses c f) = (term1059 A B C P _115320 f clauses c).
Proof. exact (eq_refl (term1078 A B C P _115320 clauses c f)). Qed.
Lemma lem8401121 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1085 A B C P _115320 clauses c) = (term1076 A B C P _115320 clauses c).
Proof. exact (fun_ext (fun f : type1166 A B C P => @lem8401120 A B C P _115320 f clauses c)). Qed.
Lemma lem8401122 {A B C P : Type'} : (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)) = (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop))). Qed.
Lemma lem8401123 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1086 A B C P _115320 clauses c) = (term1087 A B C P _115320 clauses c).
Proof. exact (MK_COMB (@lem8401122 A B C P) (@lem8401121 A B C P _115320 clauses c)). Qed.
Lemma lem8401124 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8401125 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1088 A B C P _115320 clauses c) = (term1089 A B C P _115320 clauses c).
Proof. exact (MK_COMB (@lem8401124) (@lem8401123 A B C P _115320 clauses c)). Qed.
Lemma lem8401126 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1080 A B C P _115320 clauses c f) = (term1056 A B C P _115320 f clauses c).
Proof. exact (eq_refl (term1080 A B C P _115320 clauses c f)). Qed.
Lemma lem8401127 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1090 A B C P _115320 clauses c) = (term1077 A B C P _115320 clauses c).
Proof. exact (fun_ext (fun f : type1166 A B C P => @lem8401126 A B C P _115320 f clauses c)). Qed.
Lemma lem8401128 {A B C P : Type'} : (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)) = (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop))). Qed.
Lemma lem8401129 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1091 A B C P _115320 clauses c) = (term1092 A B C P _115320 clauses c).
Proof. exact (MK_COMB (@lem8401128 A B C P) (@lem8401127 A B C P _115320 clauses c)). Qed.
Lemma lem8401130 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1075 A B C P _115320 clauses c) = (term1093 A B C P _115320 clauses c).
Proof. exact (MK_COMB (@lem8401125 A B C P _115320 clauses c) (@lem8401129 A B C P _115320 clauses c)). Qed.
Lemma lem8401131 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : ((term1074 A B C P _115320 clauses c) = (term1075 A B C P _115320 clauses c)) = ((term1065 A B C P _115320 clauses c) = (term1093 A B C P _115320 clauses c)).
Proof. exact (MK_COMB (@lem8401119 A B C P _115320 clauses c) (@lem8401130 A B C P _115320 clauses c)). Qed.
Lemma lem8401132 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1065 A B C P _115320 clauses c) = (term1093 A B C P _115320 clauses c).
Proof. exact (EQ_MP (@lem8401131 A B C P _115320 clauses c) (@lem8401109 A B C P _115320 clauses c)). Qed.
Lemma lem8401253 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1066 A B C P _115320 clauses) = (term1094 A B C P _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8401132 A B C P _115320 clauses c)). Qed.
Lemma lem8401254 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8401255 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1067 A B C P _115320 clauses) = (term1095 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8401254 C) (@lem8401253 A B C P _115320 clauses)). Qed.
Lemma lem8401257 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term1070 A P Q) = (term1071 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem8401258 {C : Type'} (P : C -> Prop) (Q : C -> Prop) : (term1070 C P Q) = (term1071 C P Q).
Proof. exact (@lem8401257 C P Q). Qed.
Lemma lem8401259 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1096 A B C P _115320 clauses) = (term1097 A B C P _115320 clauses).
Proof. exact (@lem8401258 C (term1098 A B C P _115320 clauses) (term1099 A B C P _115320 clauses)). Qed.
Lemma lem8401260 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1100 A B C P _115320 clauses c) = (term1087 A B C P _115320 clauses c).
Proof. exact (eq_refl (term1100 A B C P _115320 clauses c)). Qed.
Lemma lem8401261 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8401262 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1101 A B C P _115320 clauses c) = (term1089 A B C P _115320 clauses c).
Proof. exact (MK_COMB (@lem8401261) (@lem8401260 A B C P _115320 clauses c)). Qed.
Lemma lem8401263 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1102 A B C P _115320 clauses c) = (term1092 A B C P _115320 clauses c).
Proof. exact (eq_refl (term1102 A B C P _115320 clauses c)). Qed.
Lemma lem8401264 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1103 A B C P _115320 clauses c) = (term1093 A B C P _115320 clauses c).
Proof. exact (MK_COMB (@lem8401262 A B C P _115320 clauses c) (@lem8401263 A B C P _115320 clauses c)). Qed.
Lemma lem8401265 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1104 A B C P _115320 clauses) = (term1094 A B C P _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8401264 A B C P _115320 clauses c)). Qed.
Lemma lem8401266 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8401267 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1096 A B C P _115320 clauses) = (term1095 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8401266 C) (@lem8401265 A B C P _115320 clauses)). Qed.
Lemma lem8401268 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8401269 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1105 A B C P _115320 clauses) = (term1106 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8401268) (@lem8401267 A B C P _115320 clauses)). Qed.
Lemma lem8401270 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1100 A B C P _115320 clauses c) = (term1087 A B C P _115320 clauses c).
Proof. exact (eq_refl (term1100 A B C P _115320 clauses c)). Qed.
Lemma lem8401271 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1107 A B C P _115320 clauses) = (term1098 A B C P _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8401270 A B C P _115320 clauses c)). Qed.
Lemma lem8401272 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8401273 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1108 A B C P _115320 clauses) = (term1109 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8401272 C) (@lem8401271 A B C P _115320 clauses)). Qed.
Lemma lem8401274 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8401275 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1110 A B C P _115320 clauses) = (term1111 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8401274) (@lem8401273 A B C P _115320 clauses)). Qed.
Lemma lem8401276 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1102 A B C P _115320 clauses c) = (term1092 A B C P _115320 clauses c).
Proof. exact (eq_refl (term1102 A B C P _115320 clauses c)). Qed.
Lemma lem8401277 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1112 A B C P _115320 clauses) = (term1099 A B C P _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8401276 A B C P _115320 clauses c)). Qed.
Lemma lem8401278 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8401279 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1113 A B C P _115320 clauses) = (term1114 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8401278 C) (@lem8401277 A B C P _115320 clauses)). Qed.
Lemma lem8401280 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1097 A B C P _115320 clauses) = (term1115 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8401275 A B C P _115320 clauses) (@lem8401279 A B C P _115320 clauses)). Qed.
Lemma lem8401281 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : ((term1096 A B C P _115320 clauses) = (term1097 A B C P _115320 clauses)) = ((term1095 A B C P _115320 clauses) = (term1115 A B C P _115320 clauses)).
Proof. exact (MK_COMB (@lem8401269 A B C P _115320 clauses) (@lem8401280 A B C P _115320 clauses)). Qed.
Lemma lem8401282 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1095 A B C P _115320 clauses) = (term1115 A B C P _115320 clauses).
Proof. exact (EQ_MP (@lem8401281 A B C P _115320 clauses) (@lem8401259 A B C P _115320 clauses)). Qed.
Lemma lem8401411 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1067 A B C P _115320 clauses) = (term1115 A B C P _115320 clauses).
Proof. exact (TRANS (@lem8401255 A B C P _115320 clauses) (@lem8401282 A B C P _115320 clauses)). Qed.
Lemma lem8401412 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1068 A B C P _115320) = (term1116 A B C P _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8401411 A B C P _115320 clauses)). Qed.
Lemma lem8401413 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8401414 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1069 A B C P _115320) = (term1117 A B C P _115320).
Proof. exact (MK_COMB (@lem8401413 A B C P) (@lem8401412 A B C P _115320)). Qed.
Lemma lem8401416 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term1070 A P Q) = (term1071 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem8401417 {A B C P : Type'} (P' : type1041 A B C P) (Q : type1041 A B C P) : (term1118 A B C P P' Q) = (term1119 A B C P P' Q).
Proof. exact (@lem8401416 (type1629 A B C P) P' Q). Qed.
Lemma lem8401418 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1120 A B C P _115320) = (term1121 A B C P _115320).
Proof. exact (@lem8401417 A B C P (term1122 A B C P _115320) (term1123 A B C P _115320)). Qed.
Lemma lem8401419 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1124 A B C P _115320 clauses) = (term1109 A B C P _115320 clauses).
Proof. exact (eq_refl (term1124 A B C P _115320 clauses)). Qed.
Lemma lem8401420 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8401421 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1125 A B C P _115320 clauses) = (term1111 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8401420) (@lem8401419 A B C P _115320 clauses)). Qed.
Lemma lem8401422 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1126 A B C P _115320 clauses) = (term1114 A B C P _115320 clauses).
Proof. exact (eq_refl (term1126 A B C P _115320 clauses)). Qed.
Lemma lem8401423 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1127 A B C P _115320 clauses) = (term1115 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8401421 A B C P _115320 clauses) (@lem8401422 A B C P _115320 clauses)). Qed.
Lemma lem8401424 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1128 A B C P _115320) = (term1116 A B C P _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8401423 A B C P _115320 clauses)). Qed.
Lemma lem8401425 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8401426 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1120 A B C P _115320) = (term1117 A B C P _115320).
Proof. exact (MK_COMB (@lem8401425 A B C P) (@lem8401424 A B C P _115320)). Qed.
Lemma lem8401427 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8401428 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1129 A B C P _115320) = (term1130 A B C P _115320).
Proof. exact (MK_COMB (@lem8401427) (@lem8401426 A B C P _115320)). Qed.
Lemma lem8401429 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1124 A B C P _115320 clauses) = (term1109 A B C P _115320 clauses).
Proof. exact (eq_refl (term1124 A B C P _115320 clauses)). Qed.
Lemma lem8401430 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1131 A B C P _115320) = (term1122 A B C P _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8401429 A B C P _115320 clauses)). Qed.
Lemma lem8401431 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8401432 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1132 A B C P _115320) = (term1133 A B C P _115320).
Proof. exact (MK_COMB (@lem8401431 A B C P) (@lem8401430 A B C P _115320)). Qed.
Lemma lem8401433 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8401434 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1134 A B C P _115320) = (term1135 A B C P _115320).
Proof. exact (MK_COMB (@lem8401433) (@lem8401432 A B C P _115320)). Qed.
Lemma lem8401435 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1126 A B C P _115320 clauses) = (term1114 A B C P _115320 clauses).
Proof. exact (eq_refl (term1126 A B C P _115320 clauses)). Qed.
Lemma lem8401436 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1136 A B C P _115320) = (term1123 A B C P _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8401435 A B C P _115320 clauses)). Qed.
Lemma lem8401437 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8401438 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1137 A B C P _115320) = (term1138 A B C P _115320).
Proof. exact (MK_COMB (@lem8401437 A B C P) (@lem8401436 A B C P _115320)). Qed.
Lemma lem8401439 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1121 A B C P _115320) = (term1139 A B C P _115320).
Proof. exact (MK_COMB (@lem8401434 A B C P _115320) (@lem8401438 A B C P _115320)). Qed.
Lemma lem8401440 {A B C P : Type'} (_115320 : type1038 A B C P) : ((term1120 A B C P _115320) = (term1121 A B C P _115320)) = ((term1117 A B C P _115320) = (term1139 A B C P _115320)).
Proof. exact (MK_COMB (@lem8401428 A B C P _115320) (@lem8401439 A B C P _115320)). Qed.
Lemma lem8401441 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1117 A B C P _115320) = (term1139 A B C P _115320).
Proof. exact (EQ_MP (@lem8401440 A B C P _115320) (@lem8401418 A B C P _115320)). Qed.
Lemma lem8401578 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1069 A B C P _115320) = (term1139 A B C P _115320).
Proof. exact (TRANS (@lem8401414 A B C P _115320) (@lem8401441 A B C P _115320)). Qed.
Lemma lem8401580 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1140 A P Q) = (term1141 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8401581 {A B P : Type'} (P' : Prop) (Q : type68 A B P) : (term1142 A B P P' Q) = (term1143 A B P P' Q).
Proof. exact (@lem8401580 (type115 A B P) P' Q). Qed.
Lemma lem8401582 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1144 A B C P _115320 f clauses c) = (term1145 A B C P _115320 f clauses c).
Proof. exact (@lem8401581 A B P (_115320 clauses c f) (term1053 A B C P f clauses c)). Qed.
Lemma lem8401583 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term1146 A B C P f clauses c s) = (term1045 A B C P f clauses s c).
Proof. exact (eq_refl (term1146 A B C P f clauses c s)). Qed.
Lemma lem8401584 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1147 A B C P f clauses c) = (term1053 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8401583 A B C P f clauses s c)). Qed.
Lemma lem8401585 {A B P : Type'} : (@ex (((A -> B) -> P -> B) -> A)) = (@ex (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8401586 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1148 A B C P f clauses c) = (term1054 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8401585 A B P) (@lem8401584 A B C P f clauses c)). Qed.
Lemma lem8401587 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) (f : type1166 A B C P) : (term1057 A B C P _115320 clauses c f) = (term1057 A B C P _115320 clauses c f).
Proof. exact (eq_refl (term1057 A B C P _115320 clauses c f)). Qed.
Lemma lem8401588 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1144 A B C P _115320 f clauses c) = (term1059 A B C P _115320 f clauses c).
Proof. exact (MK_COMB (@lem8401587 A B C P _115320 clauses c f) (@lem8401586 A B C P f clauses c)). Qed.
Lemma lem8401589 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8401590 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1149 A B C P _115320 f clauses c) = (term1150 A B C P _115320 f clauses c).
Proof. exact (MK_COMB (@lem8401589) (@lem8401588 A B C P _115320 f clauses c)). Qed.
Lemma lem8401591 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term1146 A B C P f clauses c s) = (term1045 A B C P f clauses s c).
Proof. exact (eq_refl (term1146 A B C P f clauses c s)). Qed.
Lemma lem8401592 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) (f : type1166 A B C P) : (term1057 A B C P _115320 clauses c f) = (term1057 A B C P _115320 clauses c f).
Proof. exact (eq_refl (term1057 A B C P _115320 clauses c f)). Qed.
Lemma lem8401593 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term1151 A B C P _115320 f clauses c s) = (term1152 A B C P _115320 f clauses s c).
Proof. exact (MK_COMB (@lem8401592 A B C P _115320 clauses c f) (@lem8401591 A B C P f clauses s c)). Qed.
Lemma lem8401594 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1153 A B C P _115320 f clauses c) = (term1154 A B C P _115320 f clauses c).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8401593 A B C P _115320 f clauses s c)). Qed.
Lemma lem8401595 {A B P : Type'} : (@ex (((A -> B) -> P -> B) -> A)) = (@ex (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8401596 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1145 A B C P _115320 f clauses c) = (term1155 A B C P _115320 f clauses c).
Proof. exact (MK_COMB (@lem8401595 A B P) (@lem8401594 A B C P _115320 f clauses c)). Qed.
Lemma lem8401597 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : ((term1144 A B C P _115320 f clauses c) = (term1145 A B C P _115320 f clauses c)) = ((term1059 A B C P _115320 f clauses c) = (term1155 A B C P _115320 f clauses c)).
Proof. exact (MK_COMB (@lem8401590 A B C P _115320 f clauses c) (@lem8401596 A B C P _115320 f clauses c)). Qed.
Lemma lem8401598 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1059 A B C P _115320 f clauses c) = (term1155 A B C P _115320 f clauses c).
Proof. exact (EQ_MP (@lem8401597 A B C P _115320 f clauses c) (@lem8401582 A B C P _115320 f clauses c)). Qed.
Lemma lem8401600 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1140 A P Q) = (term1141 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8401601 {A B C P : Type'} (P' : Prop) (Q : type863 A B C P) : (term1156 A B C P P' Q) = (term1157 A B C P P' Q).
Proof. exact (@lem8401600 (type1490 A B C P) P' Q). Qed.
Lemma lem8401602 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term1158 A B C P _115320 f clauses s c) = (term1159 A B C P _115320 f clauses s c).
Proof. exact (@lem8401601 A B C P (_115320 clauses c f) (term1044 A B C P f clauses s c)). Qed.
Lemma lem8401603 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term1160 A B C P f clauses s c t) = (term1042 A B C P f clauses s t c).
Proof. exact (eq_refl (term1160 A B C P f clauses s c t)). Qed.
Lemma lem8401604 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term1161 A B C P f clauses s c) = (term1044 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8401603 A B C P f clauses s t c)). Qed.
Lemma lem8401605 {A B C P : Type'} : (@ex (C -> ((A -> B) -> P -> B) -> B)) = (@ex (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8401606 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term1162 A B C P f clauses s c) = (term1045 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8401605 A B C P) (@lem8401604 A B C P f clauses s c)). Qed.
Lemma lem8401607 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) (f : type1166 A B C P) : (term1057 A B C P _115320 clauses c f) = (term1057 A B C P _115320 clauses c f).
Proof. exact (eq_refl (term1057 A B C P _115320 clauses c f)). Qed.
Lemma lem8401608 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term1158 A B C P _115320 f clauses s c) = (term1152 A B C P _115320 f clauses s c).
Proof. exact (MK_COMB (@lem8401607 A B C P _115320 clauses c f) (@lem8401606 A B C P f clauses s c)). Qed.
Lemma lem8401609 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8401610 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term1163 A B C P _115320 f clauses s c) = (term1164 A B C P _115320 f clauses s c).
Proof. exact (MK_COMB (@lem8401609) (@lem8401608 A B C P _115320 f clauses s c)). Qed.
Lemma lem8401611 {A B C P : Type'} (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term1160 A B C P f clauses s c t) = (term1042 A B C P f clauses s t c).
Proof. exact (eq_refl (term1160 A B C P f clauses s c t)). Qed.
Lemma lem8401612 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) (f : type1166 A B C P) : (term1057 A B C P _115320 clauses c f) = (term1057 A B C P _115320 clauses c f).
Proof. exact (eq_refl (term1057 A B C P _115320 clauses c f)). Qed.
Lemma lem8401613 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term1165 A B C P _115320 f clauses s c t) = (term1166 A B C P _115320 f clauses s t c).
Proof. exact (MK_COMB (@lem8401612 A B C P _115320 clauses c f) (@lem8401611 A B C P f clauses s t c)). Qed.
Lemma lem8401614 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term1167 A B C P _115320 f clauses s c) = (term1168 A B C P _115320 f clauses s c).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8401613 A B C P _115320 f clauses s t c)). Qed.
Lemma lem8401615 {A B C P : Type'} : (@ex (C -> ((A -> B) -> P -> B) -> B)) = (@ex (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8401616 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term1159 A B C P _115320 f clauses s c) = (term1169 A B C P _115320 f clauses s c).
Proof. exact (MK_COMB (@lem8401615 A B C P) (@lem8401614 A B C P _115320 f clauses s c)). Qed.
Lemma lem8401617 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : ((term1158 A B C P _115320 f clauses s c) = (term1159 A B C P _115320 f clauses s c)) = ((term1152 A B C P _115320 f clauses s c) = (term1169 A B C P _115320 f clauses s c)).
Proof. exact (MK_COMB (@lem8401610 A B C P _115320 f clauses s c) (@lem8401616 A B C P _115320 f clauses s c)). Qed.
Lemma lem8401618 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term1152 A B C P _115320 f clauses s c) = (term1169 A B C P _115320 f clauses s c).
Proof. exact (EQ_MP (@lem8401617 A B C P _115320 f clauses s c) (@lem8401602 A B C P _115320 f clauses s c)). Qed.
Lemma lem8401619 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1154 A B C P _115320 f clauses c) = (term1170 A B C P _115320 f clauses c).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8401618 A B C P _115320 f clauses s c)). Qed.
Lemma lem8401620 {A B P : Type'} : (@ex (((A -> B) -> P -> B) -> A)) = (@ex (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8401621 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1155 A B C P _115320 f clauses c) = (term1171 A B C P _115320 f clauses c).
Proof. exact (MK_COMB (@lem8401620 A B P) (@lem8401619 A B C P _115320 f clauses c)). Qed.
Lemma lem8401622 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1059 A B C P _115320 f clauses c) = (term1171 A B C P _115320 f clauses c).
Proof. exact (TRANS (@lem8401598 A B C P _115320 f clauses c) (@lem8401621 A B C P _115320 f clauses c)). Qed.
Lemma lem8401623 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1076 A B C P _115320 clauses c) = (term1172 A B C P _115320 clauses c).
Proof. exact (fun_ext (fun f : type1166 A B C P => @lem8401622 A B C P _115320 f clauses c)). Qed.
Lemma lem8401624 {A B C P : Type'} : (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)) = (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop))). Qed.
Lemma lem8401625 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1087 A B C P _115320 clauses c) = (term1173 A B C P _115320 clauses c).
Proof. exact (MK_COMB (@lem8401624 A B C P) (@lem8401623 A B C P _115320 clauses c)). Qed.
Lemma lem8401627 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8401628 {A B C P : Type'} (P' : type281 A B C P) : (term1176 A B C P P') = (term1177 A B C P P').
Proof. exact (@lem8401627 (type1166 A B C P) (type115 A B P) P'). Qed.
Lemma lem8401629 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1178 A B C P _115320 clauses c) = (term1179 A B C P _115320 clauses c).
Proof. exact (@lem8401628 A B C P (term1180 A B C P _115320 clauses c)). Qed.
Lemma lem8401630 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1181 A B C P _115320 clauses c f) = (term1170 A B C P _115320 f clauses c).
Proof. exact (eq_refl (term1181 A B C P _115320 clauses c f)). Qed.
Lemma lem8401631 {A B P : Type'} (s : type115 A B P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8401632 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) (s : type115 A B P) : (term1182 A B C P _115320 clauses c f s) = (term1183 A B C P _115320 f clauses c s).
Proof. exact (MK_COMB (@lem8401630 A B C P _115320 f clauses c) (@lem8401631 A B P s)). Qed.
Lemma lem8401633 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term1183 A B C P _115320 f clauses c s) = (term1169 A B C P _115320 f clauses s c).
Proof. exact (eq_refl (term1183 A B C P _115320 f clauses c s)). Qed.
Lemma lem8401634 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term1182 A B C P _115320 clauses c f s) = (term1169 A B C P _115320 f clauses s c).
Proof. exact (TRANS (@lem8401632 A B C P _115320 f clauses c s) (@lem8401633 A B C P _115320 f clauses s c)). Qed.
Lemma lem8401635 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1184 A B C P _115320 clauses c f) = (term1170 A B C P _115320 f clauses c).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8401634 A B C P _115320 f clauses s c)). Qed.
Lemma lem8401636 {A B P : Type'} : (@ex (((A -> B) -> P -> B) -> A)) = (@ex (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8401637 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1185 A B C P _115320 clauses c f) = (term1171 A B C P _115320 f clauses c).
Proof. exact (MK_COMB (@lem8401636 A B P) (@lem8401635 A B C P _115320 f clauses c)). Qed.
Lemma lem8401638 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1186 A B C P _115320 clauses c) = (term1172 A B C P _115320 clauses c).
Proof. exact (fun_ext (fun f : type1166 A B C P => @lem8401637 A B C P _115320 f clauses c)). Qed.
Lemma lem8401639 {A B C P : Type'} : (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)) = (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop))). Qed.
Lemma lem8401640 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1178 A B C P _115320 clauses c) = (term1173 A B C P _115320 clauses c).
Proof. exact (MK_COMB (@lem8401639 A B C P) (@lem8401638 A B C P _115320 clauses c)). Qed.
Lemma lem8401641 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8401642 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1187 A B C P _115320 clauses c) = (term1188 A B C P _115320 clauses c).
Proof. exact (MK_COMB (@lem8401641) (@lem8401640 A B C P _115320 clauses c)). Qed.
Lemma lem8401643 {A B C P : Type'} (_115320 : type1038 A B C P) (f : type1166 A B C P) (clauses : type1629 A B C P) (c : C) : (term1181 A B C P _115320 clauses c f) = (term1170 A B C P _115320 f clauses c).
Proof. exact (eq_refl (term1181 A B C P _115320 clauses c f)). Qed.
Lemma lem8401644 {A B C P : Type'} (s : type282 A B C P) (f : type1166 A B C P) : (s f) = (s f).
Proof. exact (eq_refl (s f)). Qed.
Lemma lem8401645 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) (s : type282 A B C P) (f : type1166 A B C P) : (term1189 A B C P _115320 clauses c s f) = (term1190 A B C P _115320 clauses c s f).
Proof. exact (MK_COMB (@lem8401643 A B C P _115320 f clauses c) (@lem8401644 A B C P s f)). Qed.
Lemma lem8401646 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (f : type1166 A B C P) (c : C) : (term1190 A B C P _115320 clauses c s f) = (term1191 A B C P _115320 clauses s f c).
Proof. exact (eq_refl (term1190 A B C P _115320 clauses c s f)). Qed.
Lemma lem8401647 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (f : type1166 A B C P) (c : C) : (term1189 A B C P _115320 clauses c s f) = (term1191 A B C P _115320 clauses s f c).
Proof. exact (TRANS (@lem8401645 A B C P _115320 clauses c s f) (@lem8401646 A B C P _115320 clauses s f c)). Qed.
Lemma lem8401648 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (c : C) : (term1192 A B C P _115320 clauses c s) = (term1193 A B C P _115320 clauses s c).
Proof. exact (fun_ext (fun f : type1166 A B C P => @lem8401647 A B C P _115320 clauses s f c)). Qed.
Lemma lem8401649 {A B C P : Type'} : (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)) = (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop))). Qed.
Lemma lem8401650 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (c : C) : (term1194 A B C P _115320 clauses c s) = (term1195 A B C P _115320 clauses s c).
Proof. exact (MK_COMB (@lem8401649 A B C P) (@lem8401648 A B C P _115320 clauses s c)). Qed.
Lemma lem8401651 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1196 A B C P _115320 clauses c) = (term1197 A B C P _115320 clauses c).
Proof. exact (fun_ext (fun s : type282 A B C P => @lem8401650 A B C P _115320 clauses s c)). Qed.
Lemma lem8401652 {A B C P : Type'} : (@ex (((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A)) = (@ex (((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8401653 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1179 A B C P _115320 clauses c) = (term1198 A B C P _115320 clauses c).
Proof. exact (MK_COMB (@lem8401652 A B C P) (@lem8401651 A B C P _115320 clauses c)). Qed.
Lemma lem8401654 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : ((term1178 A B C P _115320 clauses c) = (term1179 A B C P _115320 clauses c)) = ((term1173 A B C P _115320 clauses c) = (term1198 A B C P _115320 clauses c)).
Proof. exact (MK_COMB (@lem8401642 A B C P _115320 clauses c) (@lem8401653 A B C P _115320 clauses c)). Qed.
Lemma lem8401655 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1173 A B C P _115320 clauses c) = (term1198 A B C P _115320 clauses c).
Proof. exact (EQ_MP (@lem8401654 A B C P _115320 clauses c) (@lem8401629 A B C P _115320 clauses c)). Qed.
Lemma lem8401657 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8401658 {A B C P : Type'} (P' : type283 A B C P) : (term1199 A B C P P') = (term1200 A B C P P').
Proof. exact (@lem8401657 (type1166 A B C P) (type1490 A B C P) P'). Qed.
Lemma lem8401659 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (c : C) : (term1201 A B C P _115320 clauses s c) = (term1202 A B C P _115320 clauses s c).
Proof. exact (@lem8401658 A B C P (term1203 A B C P _115320 clauses s c)). Qed.
Lemma lem8401660 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (f : type1166 A B C P) (c : C) : (term1204 A B C P _115320 clauses s c f) = (term1205 A B C P _115320 clauses s f c).
Proof. exact (eq_refl (term1204 A B C P _115320 clauses s c f)). Qed.
Lemma lem8401661 {A B C P : Type'} (t : type1490 A B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8401662 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (f : type1166 A B C P) (c : C) (t : type1490 A B C P) : (term1206 A B C P _115320 clauses s c f t) = (term1207 A B C P _115320 clauses s f c t).
Proof. exact (MK_COMB (@lem8401660 A B C P _115320 clauses s f c) (@lem8401661 A B C P t)). Qed.
Lemma lem8401663 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (f : type1166 A B C P) (t : type1490 A B C P) (c : C) : (term1207 A B C P _115320 clauses s f c t) = (term1208 A B C P _115320 clauses s f t c).
Proof. exact (eq_refl (term1207 A B C P _115320 clauses s f c t)). Qed.
Lemma lem8401664 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (f : type1166 A B C P) (t : type1490 A B C P) (c : C) : (term1206 A B C P _115320 clauses s c f t) = (term1208 A B C P _115320 clauses s f t c).
Proof. exact (TRANS (@lem8401662 A B C P _115320 clauses s f c t) (@lem8401663 A B C P _115320 clauses s f t c)). Qed.
Lemma lem8401665 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (f : type1166 A B C P) (c : C) : (term1209 A B C P _115320 clauses s c f) = (term1205 A B C P _115320 clauses s f c).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8401664 A B C P _115320 clauses s f t c)). Qed.
Lemma lem8401666 {A B C P : Type'} : (@ex (C -> ((A -> B) -> P -> B) -> B)) = (@ex (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8401667 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (f : type1166 A B C P) (c : C) : (term1210 A B C P _115320 clauses s c f) = (term1191 A B C P _115320 clauses s f c).
Proof. exact (MK_COMB (@lem8401666 A B C P) (@lem8401665 A B C P _115320 clauses s f c)). Qed.
Lemma lem8401668 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (c : C) : (term1211 A B C P _115320 clauses s c) = (term1193 A B C P _115320 clauses s c).
Proof. exact (fun_ext (fun f : type1166 A B C P => @lem8401667 A B C P _115320 clauses s f c)). Qed.
Lemma lem8401669 {A B C P : Type'} : (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)) = (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop))). Qed.
Lemma lem8401670 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (c : C) : (term1201 A B C P _115320 clauses s c) = (term1195 A B C P _115320 clauses s c).
Proof. exact (MK_COMB (@lem8401669 A B C P) (@lem8401668 A B C P _115320 clauses s c)). Qed.
Lemma lem8401671 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8401672 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (c : C) : (term1212 A B C P _115320 clauses s c) = (term1213 A B C P _115320 clauses s c).
Proof. exact (MK_COMB (@lem8401671) (@lem8401670 A B C P _115320 clauses s c)). Qed.
Lemma lem8401673 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (f : type1166 A B C P) (c : C) : (term1204 A B C P _115320 clauses s c f) = (term1205 A B C P _115320 clauses s f c).
Proof. exact (eq_refl (term1204 A B C P _115320 clauses s c f)). Qed.
Lemma lem8401674 {A B C P : Type'} (t : type284 A B C P) (f : type1166 A B C P) : (t f) = (t f).
Proof. exact (eq_refl (t f)). Qed.
Lemma lem8401675 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (c : C) (t : type284 A B C P) (f : type1166 A B C P) : (term1214 A B C P _115320 clauses s c t f) = (term1215 A B C P _115320 clauses s c t f).
Proof. exact (MK_COMB (@lem8401673 A B C P _115320 clauses s f c) (@lem8401674 A B C P t f)). Qed.
Lemma lem8401676 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (t : type284 A B C P) (f : type1166 A B C P) (c : C) : (term1215 A B C P _115320 clauses s c t f) = (term1216 A B C P _115320 clauses s t f c).
Proof. exact (eq_refl (term1215 A B C P _115320 clauses s c t f)). Qed.
Lemma lem8401677 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (t : type284 A B C P) (f : type1166 A B C P) (c : C) : (term1214 A B C P _115320 clauses s c t f) = (term1216 A B C P _115320 clauses s t f c).
Proof. exact (TRANS (@lem8401675 A B C P _115320 clauses s c t f) (@lem8401676 A B C P _115320 clauses s t f c)). Qed.
Lemma lem8401678 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (t : type284 A B C P) (c : C) : (term1217 A B C P _115320 clauses s c t) = (term1218 A B C P _115320 clauses s t c).
Proof. exact (fun_ext (fun f : type1166 A B C P => @lem8401677 A B C P _115320 clauses s t f c)). Qed.
Lemma lem8401679 {A B C P : Type'} : (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)) = (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop))). Qed.
Lemma lem8401680 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (t : type284 A B C P) (c : C) : (term1219 A B C P _115320 clauses s c t) = (term1220 A B C P _115320 clauses s t c).
Proof. exact (MK_COMB (@lem8401679 A B C P) (@lem8401678 A B C P _115320 clauses s t c)). Qed.
Lemma lem8401681 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (c : C) : (term1221 A B C P _115320 clauses s c) = (term1222 A B C P _115320 clauses s c).
Proof. exact (fun_ext (fun t : type284 A B C P => @lem8401680 A B C P _115320 clauses s t c)). Qed.
Lemma lem8401682 {A B C P : Type'} : (@ex (((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> C -> ((A -> B) -> P -> B) -> B)) = (@ex (((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8401683 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (c : C) : (term1202 A B C P _115320 clauses s c) = (term1223 A B C P _115320 clauses s c).
Proof. exact (MK_COMB (@lem8401682 A B C P) (@lem8401681 A B C P _115320 clauses s c)). Qed.
Lemma lem8401684 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (c : C) : ((term1201 A B C P _115320 clauses s c) = (term1202 A B C P _115320 clauses s c)) = ((term1195 A B C P _115320 clauses s c) = (term1223 A B C P _115320 clauses s c)).
Proof. exact (MK_COMB (@lem8401672 A B C P _115320 clauses s c) (@lem8401683 A B C P _115320 clauses s c)). Qed.
Lemma lem8401685 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (c : C) : (term1195 A B C P _115320 clauses s c) = (term1223 A B C P _115320 clauses s c).
Proof. exact (EQ_MP (@lem8401684 A B C P _115320 clauses s c) (@lem8401659 A B C P _115320 clauses s c)). Qed.
Lemma lem8401686 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1197 A B C P _115320 clauses c) = (term1224 A B C P _115320 clauses c).
Proof. exact (fun_ext (fun s : type282 A B C P => @lem8401685 A B C P _115320 clauses s c)). Qed.
Lemma lem8401687 {A B C P : Type'} : (@ex (((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A)) = (@ex (((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8401688 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1198 A B C P _115320 clauses c) = (term1225 A B C P _115320 clauses c).
Proof. exact (MK_COMB (@lem8401687 A B C P) (@lem8401686 A B C P _115320 clauses c)). Qed.
Lemma lem8401689 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1173 A B C P _115320 clauses c) = (term1225 A B C P _115320 clauses c).
Proof. exact (TRANS (@lem8401655 A B C P _115320 clauses c) (@lem8401688 A B C P _115320 clauses c)). Qed.
Lemma lem8401690 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1087 A B C P _115320 clauses c) = (term1225 A B C P _115320 clauses c).
Proof. exact (TRANS (@lem8401625 A B C P _115320 clauses c) (@lem8401689 A B C P _115320 clauses c)). Qed.
Lemma lem8401691 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1098 A B C P _115320 clauses) = (term1226 A B C P _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8401690 A B C P _115320 clauses c)). Qed.
Lemma lem8401692 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8401693 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1109 A B C P _115320 clauses) = (term1227 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8401692 C) (@lem8401691 A B C P _115320 clauses)). Qed.
Lemma lem8401695 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8401696 {A B C P : Type'} (P' : type1481 A B C P) : (term1228 A B C P P') = (term1229 A B C P P').
Proof. exact (@lem8401695 C (type282 A B C P) P'). Qed.
Lemma lem8401697 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1230 A B C P _115320 clauses) = (term1231 A B C P _115320 clauses).
Proof. exact (@lem8401696 A B C P (term1232 A B C P _115320 clauses)). Qed.
Lemma lem8401698 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1233 A B C P _115320 clauses c) = (term1224 A B C P _115320 clauses c).
Proof. exact (eq_refl (term1233 A B C P _115320 clauses c)). Qed.
Lemma lem8401699 {A B C P : Type'} (s : type282 A B C P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8401700 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) (s : type282 A B C P) : (term1234 A B C P _115320 clauses c s) = (term1235 A B C P _115320 clauses c s).
Proof. exact (MK_COMB (@lem8401698 A B C P _115320 clauses c) (@lem8401699 A B C P s)). Qed.
Lemma lem8401701 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (c : C) : (term1235 A B C P _115320 clauses c s) = (term1223 A B C P _115320 clauses s c).
Proof. exact (eq_refl (term1235 A B C P _115320 clauses c s)). Qed.
Lemma lem8401702 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type282 A B C P) (c : C) : (term1234 A B C P _115320 clauses c s) = (term1223 A B C P _115320 clauses s c).
Proof. exact (TRANS (@lem8401700 A B C P _115320 clauses c s) (@lem8401701 A B C P _115320 clauses s c)). Qed.
Lemma lem8401703 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1236 A B C P _115320 clauses c) = (term1224 A B C P _115320 clauses c).
Proof. exact (fun_ext (fun s : type282 A B C P => @lem8401702 A B C P _115320 clauses s c)). Qed.
Lemma lem8401704 {A B C P : Type'} : (@ex (((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A)) = (@ex (((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8401705 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1237 A B C P _115320 clauses c) = (term1225 A B C P _115320 clauses c).
Proof. exact (MK_COMB (@lem8401704 A B C P) (@lem8401703 A B C P _115320 clauses c)). Qed.
Lemma lem8401706 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1238 A B C P _115320 clauses) = (term1226 A B C P _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8401705 A B C P _115320 clauses c)). Qed.
Lemma lem8401707 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8401708 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1230 A B C P _115320 clauses) = (term1227 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8401707 C) (@lem8401706 A B C P _115320 clauses)). Qed.
Lemma lem8401709 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8401710 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1239 A B C P _115320 clauses) = (term1240 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8401709) (@lem8401708 A B C P _115320 clauses)). Qed.
Lemma lem8401711 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (c : C) : (term1233 A B C P _115320 clauses c) = (term1224 A B C P _115320 clauses c).
Proof. exact (eq_refl (term1233 A B C P _115320 clauses c)). Qed.
Lemma lem8401712 {A B C P : Type'} (s : type1492 A B C P) (c : C) : (s c) = (s c).
Proof. exact (eq_refl (s c)). Qed.
Lemma lem8401713 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) (c : C) : (term1241 A B C P _115320 clauses s c) = (term1242 A B C P _115320 clauses s c).
Proof. exact (MK_COMB (@lem8401711 A B C P _115320 clauses c) (@lem8401712 A B C P s c)). Qed.
Lemma lem8401714 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) (c : C) : (term1242 A B C P _115320 clauses s c) = (term1243 A B C P _115320 clauses s c).
Proof. exact (eq_refl (term1242 A B C P _115320 clauses s c)). Qed.
Lemma lem8401715 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) (c : C) : (term1241 A B C P _115320 clauses s c) = (term1243 A B C P _115320 clauses s c).
Proof. exact (TRANS (@lem8401713 A B C P _115320 clauses s c) (@lem8401714 A B C P _115320 clauses s c)). Qed.
Lemma lem8401716 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) : (term1244 A B C P _115320 clauses s) = (term1245 A B C P _115320 clauses s).
Proof. exact (fun_ext (fun c : C => @lem8401715 A B C P _115320 clauses s c)). Qed.
Lemma lem8401717 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8401718 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) : (term1246 A B C P _115320 clauses s) = (term1247 A B C P _115320 clauses s).
Proof. exact (MK_COMB (@lem8401717 C) (@lem8401716 A B C P _115320 clauses s)). Qed.
Lemma lem8401719 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1248 A B C P _115320 clauses) = (term1249 A B C P _115320 clauses).
Proof. exact (fun_ext (fun s : type1492 A B C P => @lem8401718 A B C P _115320 clauses s)). Qed.
Lemma lem8401720 {A B C P : Type'} : (@ex (C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A)) = (@ex (C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8401721 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1231 A B C P _115320 clauses) = (term1250 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8401720 A B C P) (@lem8401719 A B C P _115320 clauses)). Qed.
Lemma lem8401722 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : ((term1230 A B C P _115320 clauses) = (term1231 A B C P _115320 clauses)) = ((term1227 A B C P _115320 clauses) = (term1250 A B C P _115320 clauses)).
Proof. exact (MK_COMB (@lem8401710 A B C P _115320 clauses) (@lem8401721 A B C P _115320 clauses)). Qed.
Lemma lem8401723 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1227 A B C P _115320 clauses) = (term1250 A B C P _115320 clauses).
Proof. exact (EQ_MP (@lem8401722 A B C P _115320 clauses) (@lem8401697 A B C P _115320 clauses)). Qed.
Lemma lem8401725 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8401726 {A B C P : Type'} (P' : type1482 A B C P) : (term1251 A B C P P') = (term1252 A B C P P').
Proof. exact (@lem8401725 C (type284 A B C P) P'). Qed.
Lemma lem8401727 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) : (term1253 A B C P _115320 clauses s) = (term1254 A B C P _115320 clauses s).
Proof. exact (@lem8401726 A B C P (term1255 A B C P _115320 clauses s)). Qed.
Lemma lem8401728 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) (c : C) : (term1256 A B C P _115320 clauses s c) = (term1257 A B C P _115320 clauses s c).
Proof. exact (eq_refl (term1256 A B C P _115320 clauses s c)). Qed.
Lemma lem8401729 {A B C P : Type'} (t : type284 A B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8401730 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) (c : C) (t : type284 A B C P) : (term1258 A B C P _115320 clauses s c t) = (term1259 A B C P _115320 clauses s c t).
Proof. exact (MK_COMB (@lem8401728 A B C P _115320 clauses s c) (@lem8401729 A B C P t)). Qed.
Lemma lem8401731 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) (t : type284 A B C P) (c : C) : (term1259 A B C P _115320 clauses s c t) = (term1260 A B C P _115320 clauses s t c).
Proof. exact (eq_refl (term1259 A B C P _115320 clauses s c t)). Qed.
Lemma lem8401732 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) (t : type284 A B C P) (c : C) : (term1258 A B C P _115320 clauses s c t) = (term1260 A B C P _115320 clauses s t c).
Proof. exact (TRANS (@lem8401730 A B C P _115320 clauses s c t) (@lem8401731 A B C P _115320 clauses s t c)). Qed.
Lemma lem8401733 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) (c : C) : (term1261 A B C P _115320 clauses s c) = (term1257 A B C P _115320 clauses s c).
Proof. exact (fun_ext (fun t : type284 A B C P => @lem8401732 A B C P _115320 clauses s t c)). Qed.
Lemma lem8401734 {A B C P : Type'} : (@ex (((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> C -> ((A -> B) -> P -> B) -> B)) = (@ex (((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8401735 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) (c : C) : (term1262 A B C P _115320 clauses s c) = (term1243 A B C P _115320 clauses s c).
Proof. exact (MK_COMB (@lem8401734 A B C P) (@lem8401733 A B C P _115320 clauses s c)). Qed.
Lemma lem8401736 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) : (term1263 A B C P _115320 clauses s) = (term1245 A B C P _115320 clauses s).
Proof. exact (fun_ext (fun c : C => @lem8401735 A B C P _115320 clauses s c)). Qed.
Lemma lem8401737 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8401738 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) : (term1253 A B C P _115320 clauses s) = (term1247 A B C P _115320 clauses s).
Proof. exact (MK_COMB (@lem8401737 C) (@lem8401736 A B C P _115320 clauses s)). Qed.
Lemma lem8401739 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8401740 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) : (term1264 A B C P _115320 clauses s) = (term1265 A B C P _115320 clauses s).
Proof. exact (MK_COMB (@lem8401739) (@lem8401738 A B C P _115320 clauses s)). Qed.
Lemma lem8401741 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) (c : C) : (term1256 A B C P _115320 clauses s c) = (term1257 A B C P _115320 clauses s c).
Proof. exact (eq_refl (term1256 A B C P _115320 clauses s c)). Qed.
Lemma lem8401742 {A B C P : Type'} (t : type1493 A B C P) (c : C) : (t c) = (t c).
Proof. exact (eq_refl (t c)). Qed.
Lemma lem8401743 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) (t : type1493 A B C P) (c : C) : (term1266 A B C P _115320 clauses s t c) = (term1267 A B C P _115320 clauses s t c).
Proof. exact (MK_COMB (@lem8401741 A B C P _115320 clauses s c) (@lem8401742 A B C P t c)). Qed.
Lemma lem8401744 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) (t : type1493 A B C P) (c : C) : (term1267 A B C P _115320 clauses s t c) = (term1268 A B C P _115320 clauses s t c).
Proof. exact (eq_refl (term1267 A B C P _115320 clauses s t c)). Qed.
Lemma lem8401745 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) (t : type1493 A B C P) (c : C) : (term1266 A B C P _115320 clauses s t c) = (term1268 A B C P _115320 clauses s t c).
Proof. exact (TRANS (@lem8401743 A B C P _115320 clauses s t c) (@lem8401744 A B C P _115320 clauses s t c)). Qed.
Lemma lem8401746 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) (t : type1493 A B C P) : (term1269 A B C P _115320 clauses s t) = (term1270 A B C P _115320 clauses s t).
Proof. exact (fun_ext (fun c : C => @lem8401745 A B C P _115320 clauses s t c)). Qed.
Lemma lem8401747 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8401748 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) (t : type1493 A B C P) : (term1271 A B C P _115320 clauses s t) = (term1272 A B C P _115320 clauses s t).
Proof. exact (MK_COMB (@lem8401747 C) (@lem8401746 A B C P _115320 clauses s t)). Qed.
Lemma lem8401749 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) : (term1273 A B C P _115320 clauses s) = (term1274 A B C P _115320 clauses s).
Proof. exact (fun_ext (fun t : type1493 A B C P => @lem8401748 A B C P _115320 clauses s t)). Qed.
Lemma lem8401750 {A B C P : Type'} : (@ex (C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> C -> ((A -> B) -> P -> B) -> B)) = (@ex (C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8401751 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) : (term1254 A B C P _115320 clauses s) = (term1275 A B C P _115320 clauses s).
Proof. exact (MK_COMB (@lem8401750 A B C P) (@lem8401749 A B C P _115320 clauses s)). Qed.
Lemma lem8401752 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) : ((term1253 A B C P _115320 clauses s) = (term1254 A B C P _115320 clauses s)) = ((term1247 A B C P _115320 clauses s) = (term1275 A B C P _115320 clauses s)).
Proof. exact (MK_COMB (@lem8401740 A B C P _115320 clauses s) (@lem8401751 A B C P _115320 clauses s)). Qed.
Lemma lem8401753 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) : (term1247 A B C P _115320 clauses s) = (term1275 A B C P _115320 clauses s).
Proof. exact (EQ_MP (@lem8401752 A B C P _115320 clauses s) (@lem8401727 A B C P _115320 clauses s)). Qed.
Lemma lem8401754 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1249 A B C P _115320 clauses) = (term1276 A B C P _115320 clauses).
Proof. exact (fun_ext (fun s : type1492 A B C P => @lem8401753 A B C P _115320 clauses s)). Qed.
Lemma lem8401755 {A B C P : Type'} : (@ex (C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A)) = (@ex (C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8401756 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1250 A B C P _115320 clauses) = (term1277 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8401755 A B C P) (@lem8401754 A B C P _115320 clauses)). Qed.
Lemma lem8401757 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1227 A B C P _115320 clauses) = (term1277 A B C P _115320 clauses).
Proof. exact (TRANS (@lem8401723 A B C P _115320 clauses) (@lem8401756 A B C P _115320 clauses)). Qed.
Lemma lem8401758 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1109 A B C P _115320 clauses) = (term1277 A B C P _115320 clauses).
Proof. exact (TRANS (@lem8401693 A B C P _115320 clauses) (@lem8401757 A B C P _115320 clauses)). Qed.
Lemma lem8401759 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1122 A B C P _115320) = (term1278 A B C P _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8401758 A B C P _115320 clauses)). Qed.
Lemma lem8401760 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8401761 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1133 A B C P _115320) = (term1279 A B C P _115320).
Proof. exact (MK_COMB (@lem8401760 A B C P) (@lem8401759 A B C P _115320)). Qed.
Lemma lem8401763 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8401764 {A B C P : Type'} (P' : type1031 A B C P) : (term1280 A B C P P') = (term1281 A B C P P').
Proof. exact (@lem8401763 (type1629 A B C P) (type1492 A B C P) P'). Qed.
Lemma lem8401765 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1282 A B C P _115320) = (term1283 A B C P _115320).
Proof. exact (@lem8401764 A B C P (term1284 A B C P _115320)). Qed.
Lemma lem8401766 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1285 A B C P _115320 clauses) = (term1276 A B C P _115320 clauses).
Proof. exact (eq_refl (term1285 A B C P _115320 clauses)). Qed.
Lemma lem8401767 {A B C P : Type'} (s : type1492 A B C P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8401768 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) : (term1286 A B C P _115320 clauses s) = (term1287 A B C P _115320 clauses s).
Proof. exact (MK_COMB (@lem8401766 A B C P _115320 clauses) (@lem8401767 A B C P s)). Qed.
Lemma lem8401769 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) : (term1287 A B C P _115320 clauses s) = (term1275 A B C P _115320 clauses s).
Proof. exact (eq_refl (term1287 A B C P _115320 clauses s)). Qed.
Lemma lem8401770 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1492 A B C P) : (term1286 A B C P _115320 clauses s) = (term1275 A B C P _115320 clauses s).
Proof. exact (TRANS (@lem8401768 A B C P _115320 clauses s) (@lem8401769 A B C P _115320 clauses s)). Qed.
Lemma lem8401771 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1288 A B C P _115320 clauses) = (term1276 A B C P _115320 clauses).
Proof. exact (fun_ext (fun s : type1492 A B C P => @lem8401770 A B C P _115320 clauses s)). Qed.
Lemma lem8401772 {A B C P : Type'} : (@ex (C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A)) = (@ex (C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8401773 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1289 A B C P _115320 clauses) = (term1277 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8401772 A B C P) (@lem8401771 A B C P _115320 clauses)). Qed.
Lemma lem8401774 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1290 A B C P _115320) = (term1278 A B C P _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8401773 A B C P _115320 clauses)). Qed.
Lemma lem8401775 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8401776 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1282 A B C P _115320) = (term1279 A B C P _115320).
Proof. exact (MK_COMB (@lem8401775 A B C P) (@lem8401774 A B C P _115320)). Qed.
Lemma lem8401777 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8401778 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1291 A B C P _115320) = (term1292 A B C P _115320).
Proof. exact (MK_COMB (@lem8401777) (@lem8401776 A B C P _115320)). Qed.
Lemma lem8401779 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term1285 A B C P _115320 clauses) = (term1276 A B C P _115320 clauses).
Proof. exact (eq_refl (term1285 A B C P _115320 clauses)). Qed.
Lemma lem8401780 {A B C P : Type'} (s : type1036 A B C P) (clauses : type1629 A B C P) : (s clauses) = (s clauses).
Proof. exact (eq_refl (s clauses)). Qed.
Lemma lem8401781 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) (clauses : type1629 A B C P) : (term1293 A B C P _115320 s clauses) = (term1294 A B C P _115320 s clauses).
Proof. exact (MK_COMB (@lem8401779 A B C P _115320 clauses) (@lem8401780 A B C P s clauses)). Qed.
Lemma lem8401782 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) (clauses : type1629 A B C P) : (term1294 A B C P _115320 s clauses) = (term1295 A B C P _115320 s clauses).
Proof. exact (eq_refl (term1294 A B C P _115320 s clauses)). Qed.
Lemma lem8401783 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) (clauses : type1629 A B C P) : (term1293 A B C P _115320 s clauses) = (term1295 A B C P _115320 s clauses).
Proof. exact (TRANS (@lem8401781 A B C P _115320 s clauses) (@lem8401782 A B C P _115320 s clauses)). Qed.
Lemma lem8401784 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) : (term1296 A B C P _115320 s) = (term1297 A B C P _115320 s).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8401783 A B C P _115320 s clauses)). Qed.
Lemma lem8401785 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8401786 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) : (term1298 A B C P _115320 s) = (term1299 A B C P _115320 s).
Proof. exact (MK_COMB (@lem8401785 A B C P) (@lem8401784 A B C P _115320 s)). Qed.
Lemma lem8401787 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1300 A B C P _115320) = (term1301 A B C P _115320).
Proof. exact (fun_ext (fun s : type1036 A B C P => @lem8401786 A B C P _115320 s)). Qed.
Lemma lem8401788 {A B C P : Type'} : (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A)) = (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8401789 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1283 A B C P _115320) = (term1302 A B C P _115320).
Proof. exact (MK_COMB (@lem8401788 A B C P) (@lem8401787 A B C P _115320)). Qed.
Lemma lem8401790 {A B C P : Type'} (_115320 : type1038 A B C P) : ((term1282 A B C P _115320) = (term1283 A B C P _115320)) = ((term1279 A B C P _115320) = (term1302 A B C P _115320)).
Proof. exact (MK_COMB (@lem8401778 A B C P _115320) (@lem8401789 A B C P _115320)). Qed.
Lemma lem8401791 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1279 A B C P _115320) = (term1302 A B C P _115320).
Proof. exact (EQ_MP (@lem8401790 A B C P _115320) (@lem8401765 A B C P _115320)). Qed.
Lemma lem8401793 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8401794 {A B C P : Type'} (P' : type1032 A B C P) : (term1303 A B C P P') = (term1304 A B C P P').
Proof. exact (@lem8401793 (type1629 A B C P) (type1493 A B C P) P'). Qed.
Lemma lem8401795 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) : (term1305 A B C P _115320 s) = (term1306 A B C P _115320 s).
Proof. exact (@lem8401794 A B C P (term1307 A B C P _115320 s)). Qed.
Lemma lem8401796 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) (clauses : type1629 A B C P) : (term1308 A B C P _115320 s clauses) = (term1309 A B C P _115320 s clauses).
Proof. exact (eq_refl (term1308 A B C P _115320 s clauses)). Qed.
Lemma lem8401797 {A B C P : Type'} (t : type1493 A B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8401798 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) (clauses : type1629 A B C P) (t : type1493 A B C P) : (term1310 A B C P _115320 s clauses t) = (term1311 A B C P _115320 s clauses t).
Proof. exact (MK_COMB (@lem8401796 A B C P _115320 s clauses) (@lem8401797 A B C P t)). Qed.
Lemma lem8401799 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) (clauses : type1629 A B C P) (t : type1493 A B C P) : (term1311 A B C P _115320 s clauses t) = (term1312 A B C P _115320 s clauses t).
Proof. exact (eq_refl (term1311 A B C P _115320 s clauses t)). Qed.
Lemma lem8401800 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) (clauses : type1629 A B C P) (t : type1493 A B C P) : (term1310 A B C P _115320 s clauses t) = (term1312 A B C P _115320 s clauses t).
Proof. exact (TRANS (@lem8401798 A B C P _115320 s clauses t) (@lem8401799 A B C P _115320 s clauses t)). Qed.
Lemma lem8401801 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) (clauses : type1629 A B C P) : (term1313 A B C P _115320 s clauses) = (term1309 A B C P _115320 s clauses).
Proof. exact (fun_ext (fun t : type1493 A B C P => @lem8401800 A B C P _115320 s clauses t)). Qed.
Lemma lem8401802 {A B C P : Type'} : (@ex (C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> C -> ((A -> B) -> P -> B) -> B)) = (@ex (C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8401803 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) (clauses : type1629 A B C P) : (term1314 A B C P _115320 s clauses) = (term1295 A B C P _115320 s clauses).
Proof. exact (MK_COMB (@lem8401802 A B C P) (@lem8401801 A B C P _115320 s clauses)). Qed.
Lemma lem8401804 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) : (term1315 A B C P _115320 s) = (term1297 A B C P _115320 s).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8401803 A B C P _115320 s clauses)). Qed.
Lemma lem8401805 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8401806 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) : (term1305 A B C P _115320 s) = (term1299 A B C P _115320 s).
Proof. exact (MK_COMB (@lem8401805 A B C P) (@lem8401804 A B C P _115320 s)). Qed.
Lemma lem8401807 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8401808 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) : (term1316 A B C P _115320 s) = (term1317 A B C P _115320 s).
Proof. exact (MK_COMB (@lem8401807) (@lem8401806 A B C P _115320 s)). Qed.
Lemma lem8401809 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) (clauses : type1629 A B C P) : (term1308 A B C P _115320 s clauses) = (term1309 A B C P _115320 s clauses).
Proof. exact (eq_refl (term1308 A B C P _115320 s clauses)). Qed.
Lemma lem8401810 {A B C P : Type'} (t : type1037 A B C P) (clauses : type1629 A B C P) : (t clauses) = (t clauses).
Proof. exact (eq_refl (t clauses)). Qed.
Lemma lem8401811 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) (t : type1037 A B C P) (clauses : type1629 A B C P) : (term1318 A B C P _115320 s t clauses) = (term1319 A B C P _115320 s t clauses).
Proof. exact (MK_COMB (@lem8401809 A B C P _115320 s clauses) (@lem8401810 A B C P t clauses)). Qed.
Lemma lem8401812 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) (t : type1037 A B C P) (clauses : type1629 A B C P) : (term1319 A B C P _115320 s t clauses) = (term1320 A B C P _115320 s t clauses).
Proof. exact (eq_refl (term1319 A B C P _115320 s t clauses)). Qed.
Lemma lem8401813 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) (t : type1037 A B C P) (clauses : type1629 A B C P) : (term1318 A B C P _115320 s t clauses) = (term1320 A B C P _115320 s t clauses).
Proof. exact (TRANS (@lem8401811 A B C P _115320 s t clauses) (@lem8401812 A B C P _115320 s t clauses)). Qed.
Lemma lem8401814 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) (t : type1037 A B C P) : (term1321 A B C P _115320 s t) = (term1322 A B C P _115320 s t).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8401813 A B C P _115320 s t clauses)). Qed.
Lemma lem8401815 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8401816 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) (t : type1037 A B C P) : (term1323 A B C P _115320 s t) = (term1324 A B C P _115320 s t).
Proof. exact (MK_COMB (@lem8401815 A B C P) (@lem8401814 A B C P _115320 s t)). Qed.
Lemma lem8401817 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) : (term1325 A B C P _115320 s) = (term1326 A B C P _115320 s).
Proof. exact (fun_ext (fun t : type1037 A B C P => @lem8401816 A B C P _115320 s t)). Qed.
Lemma lem8401818 {A B C P : Type'} : (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> C -> ((A -> B) -> P -> B) -> B)) = (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8401819 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) : (term1306 A B C P _115320 s) = (term1327 A B C P _115320 s).
Proof. exact (MK_COMB (@lem8401818 A B C P) (@lem8401817 A B C P _115320 s)). Qed.
Lemma lem8401820 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) : ((term1305 A B C P _115320 s) = (term1306 A B C P _115320 s)) = ((term1299 A B C P _115320 s) = (term1327 A B C P _115320 s)).
Proof. exact (MK_COMB (@lem8401808 A B C P _115320 s) (@lem8401819 A B C P _115320 s)). Qed.
Lemma lem8401821 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) : (term1299 A B C P _115320 s) = (term1327 A B C P _115320 s).
Proof. exact (EQ_MP (@lem8401820 A B C P _115320 s) (@lem8401795 A B C P _115320 s)). Qed.
Lemma lem8401822 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1301 A B C P _115320) = (term1328 A B C P _115320).
Proof. exact (fun_ext (fun s : type1036 A B C P => @lem8401821 A B C P _115320 s)). Qed.
Lemma lem8401823 {A B C P : Type'} : (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A)) = (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8401824 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1302 A B C P _115320) = (term1329 A B C P _115320).
Proof. exact (MK_COMB (@lem8401823 A B C P) (@lem8401822 A B C P _115320)). Qed.
Lemma lem8401825 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1279 A B C P _115320) = (term1329 A B C P _115320).
Proof. exact (TRANS (@lem8401791 A B C P _115320) (@lem8401824 A B C P _115320)). Qed.
Lemma lem8401826 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1133 A B C P _115320) = (term1329 A B C P _115320).
Proof. exact (TRANS (@lem8401761 A B C P _115320) (@lem8401825 A B C P _115320)). Qed.
Lemma lem8401827 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8401828 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1135 A B C P _115320) = (term1330 A B C P _115320).
Proof. exact (MK_COMB (@lem8401827) (@lem8401826 A B C P _115320)). Qed.
Lemma lem8401829 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1138 A B C P _115320) = (term1138 A B C P _115320).
Proof. exact (eq_refl (term1138 A B C P _115320)). Qed.
Lemma lem8401830 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1139 A B C P _115320) = (term1331 A B C P _115320).
Proof. exact (MK_COMB (@lem8401828 A B C P _115320) (@lem8401829 A B C P _115320)). Qed.
Lemma lem8401832 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1332 A P Q) = (term1333 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8401833 {A B C P : Type'} (P' : type258 A B C P) (Q : Prop) : (term1334 A B C P P' Q) = (term1335 A B C P P' Q).
Proof. exact (@lem8401832 (type1036 A B C P) P' Q). Qed.
Lemma lem8401834 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1336 A B C P _115320) = (term1337 A B C P _115320).
Proof. exact (@lem8401833 A B C P (term1328 A B C P _115320) (term1138 A B C P _115320)). Qed.
Lemma lem8401835 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) : (term1338 A B C P _115320 s) = (term1327 A B C P _115320 s).
Proof. exact (eq_refl (term1338 A B C P _115320 s)). Qed.
Lemma lem8401836 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1339 A B C P _115320) = (term1328 A B C P _115320).
Proof. exact (fun_ext (fun s : type1036 A B C P => @lem8401835 A B C P _115320 s)). Qed.
Lemma lem8401837 {A B C P : Type'} : (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A)) = (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8401838 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1340 A B C P _115320) = (term1329 A B C P _115320).
Proof. exact (MK_COMB (@lem8401837 A B C P) (@lem8401836 A B C P _115320)). Qed.
Lemma lem8401839 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8401840 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1341 A B C P _115320) = (term1330 A B C P _115320).
Proof. exact (MK_COMB (@lem8401839) (@lem8401838 A B C P _115320)). Qed.
Lemma lem8401841 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1138 A B C P _115320) = (term1138 A B C P _115320).
Proof. exact (eq_refl (term1138 A B C P _115320)). Qed.
Lemma lem8401842 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1336 A B C P _115320) = (term1331 A B C P _115320).
Proof. exact (MK_COMB (@lem8401840 A B C P _115320) (@lem8401841 A B C P _115320)). Qed.
Lemma lem8401843 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8401844 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1342 A B C P _115320) = (term1343 A B C P _115320).
Proof. exact (MK_COMB (@lem8401843) (@lem8401842 A B C P _115320)). Qed.
Lemma lem8401845 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) : (term1338 A B C P _115320 s) = (term1327 A B C P _115320 s).
Proof. exact (eq_refl (term1338 A B C P _115320 s)). Qed.
Lemma lem8401846 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8401847 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) : (term1344 A B C P _115320 s) = (term1345 A B C P _115320 s).
Proof. exact (MK_COMB (@lem8401846) (@lem8401845 A B C P _115320 s)). Qed.
Lemma lem8401848 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1138 A B C P _115320) = (term1138 A B C P _115320).
Proof. exact (eq_refl (term1138 A B C P _115320)). Qed.
Lemma lem8401849 {A B C P : Type'} (s : type1036 A B C P) (_115320 : type1038 A B C P) : (term1346 A B C P s _115320) = (term1347 A B C P s _115320).
Proof. exact (MK_COMB (@lem8401847 A B C P _115320 s) (@lem8401848 A B C P _115320)). Qed.
Lemma lem8401850 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1348 A B C P _115320) = (term1349 A B C P _115320).
Proof. exact (fun_ext (fun s : type1036 A B C P => @lem8401849 A B C P s _115320)). Qed.
Lemma lem8401851 {A B C P : Type'} : (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A)) = (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8401852 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1337 A B C P _115320) = (term1350 A B C P _115320).
Proof. exact (MK_COMB (@lem8401851 A B C P) (@lem8401850 A B C P _115320)). Qed.
Lemma lem8401853 {A B C P : Type'} (_115320 : type1038 A B C P) : ((term1336 A B C P _115320) = (term1337 A B C P _115320)) = ((term1331 A B C P _115320) = (term1350 A B C P _115320)).
Proof. exact (MK_COMB (@lem8401844 A B C P _115320) (@lem8401852 A B C P _115320)). Qed.
Lemma lem8401854 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1331 A B C P _115320) = (term1350 A B C P _115320).
Proof. exact (EQ_MP (@lem8401853 A B C P _115320) (@lem8401834 A B C P _115320)). Qed.
Lemma lem8401856 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1332 A P Q) = (term1333 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8401857 {A B C P : Type'} (P' : type259 A B C P) (Q : Prop) : (term1351 A B C P P' Q) = (term1352 A B C P P' Q).
Proof. exact (@lem8401856 (type1037 A B C P) P' Q). Qed.
Lemma lem8401858 {A B C P : Type'} (s : type1036 A B C P) (_115320 : type1038 A B C P) : (term1353 A B C P s _115320) = (term1354 A B C P s _115320).
Proof. exact (@lem8401857 A B C P (term1326 A B C P _115320 s) (term1138 A B C P _115320)). Qed.
Lemma lem8401859 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) (t : type1037 A B C P) : (term1355 A B C P _115320 s t) = (term1324 A B C P _115320 s t).
Proof. exact (eq_refl (term1355 A B C P _115320 s t)). Qed.
Lemma lem8401860 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) : (term1356 A B C P _115320 s) = (term1326 A B C P _115320 s).
Proof. exact (fun_ext (fun t : type1037 A B C P => @lem8401859 A B C P _115320 s t)). Qed.
Lemma lem8401861 {A B C P : Type'} : (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> C -> ((A -> B) -> P -> B) -> B)) = (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8401862 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) : (term1357 A B C P _115320 s) = (term1327 A B C P _115320 s).
Proof. exact (MK_COMB (@lem8401861 A B C P) (@lem8401860 A B C P _115320 s)). Qed.
Lemma lem8401863 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8401864 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) : (term1358 A B C P _115320 s) = (term1345 A B C P _115320 s).
Proof. exact (MK_COMB (@lem8401863) (@lem8401862 A B C P _115320 s)). Qed.
Lemma lem8401865 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1138 A B C P _115320) = (term1138 A B C P _115320).
Proof. exact (eq_refl (term1138 A B C P _115320)). Qed.
Lemma lem8401866 {A B C P : Type'} (s : type1036 A B C P) (_115320 : type1038 A B C P) : (term1353 A B C P s _115320) = (term1347 A B C P s _115320).
Proof. exact (MK_COMB (@lem8401864 A B C P _115320 s) (@lem8401865 A B C P _115320)). Qed.
Lemma lem8401867 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8401868 {A B C P : Type'} (s : type1036 A B C P) (_115320 : type1038 A B C P) : (term1359 A B C P s _115320) = (term1360 A B C P s _115320).
Proof. exact (MK_COMB (@lem8401867) (@lem8401866 A B C P s _115320)). Qed.
Lemma lem8401869 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) (t : type1037 A B C P) : (term1355 A B C P _115320 s t) = (term1324 A B C P _115320 s t).
Proof. exact (eq_refl (term1355 A B C P _115320 s t)). Qed.
Lemma lem8401870 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8401871 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1036 A B C P) (t : type1037 A B C P) : (term1361 A B C P _115320 s t) = (term1362 A B C P _115320 s t).
Proof. exact (MK_COMB (@lem8401870) (@lem8401869 A B C P _115320 s t)). Qed.
Lemma lem8401872 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1138 A B C P _115320) = (term1138 A B C P _115320).
Proof. exact (eq_refl (term1138 A B C P _115320)). Qed.
Lemma lem8401873 {A B C P : Type'} (s : type1036 A B C P) (t : type1037 A B C P) (_115320 : type1038 A B C P) : (term1363 A B C P s t _115320) = (term1364 A B C P s t _115320).
Proof. exact (MK_COMB (@lem8401871 A B C P _115320 s t) (@lem8401872 A B C P _115320)). Qed.
Lemma lem8401874 {A B C P : Type'} (s : type1036 A B C P) (_115320 : type1038 A B C P) : (term1365 A B C P s _115320) = (term1366 A B C P s _115320).
Proof. exact (fun_ext (fun t : type1037 A B C P => @lem8401873 A B C P s t _115320)). Qed.
Lemma lem8401875 {A B C P : Type'} : (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> C -> ((A -> B) -> P -> B) -> B)) = (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8401876 {A B C P : Type'} (s : type1036 A B C P) (_115320 : type1038 A B C P) : (term1354 A B C P s _115320) = (term1367 A B C P s _115320).
Proof. exact (MK_COMB (@lem8401875 A B C P) (@lem8401874 A B C P s _115320)). Qed.
Lemma lem8401877 {A B C P : Type'} (s : type1036 A B C P) (_115320 : type1038 A B C P) : ((term1353 A B C P s _115320) = (term1354 A B C P s _115320)) = ((term1347 A B C P s _115320) = (term1367 A B C P s _115320)).
Proof. exact (MK_COMB (@lem8401868 A B C P s _115320) (@lem8401876 A B C P s _115320)). Qed.
Lemma lem8401878 {A B C P : Type'} (s : type1036 A B C P) (_115320 : type1038 A B C P) : (term1347 A B C P s _115320) = (term1367 A B C P s _115320).
Proof. exact (EQ_MP (@lem8401877 A B C P s _115320) (@lem8401858 A B C P s _115320)). Qed.
Lemma lem8401879 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1349 A B C P _115320) = (term1368 A B C P _115320).
Proof. exact (fun_ext (fun s : type1036 A B C P => @lem8401878 A B C P s _115320)). Qed.
Lemma lem8401880 {A B C P : Type'} : (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A)) = (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)) -> Prop) -> ((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8401881 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1350 A B C P _115320) = (term1369 A B C P _115320).
Proof. exact (MK_COMB (@lem8401880 A B C P) (@lem8401879 A B C P _115320)). Qed.
Lemma lem8401882 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1331 A B C P _115320) = (term1369 A B C P _115320).
Proof. exact (TRANS (@lem8401854 A B C P _115320) (@lem8401881 A B C P _115320)). Qed.
Lemma lem8401883 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1139 A B C P _115320) = (term1369 A B C P _115320).
Proof. exact (TRANS (@lem8401830 A B C P _115320) (@lem8401882 A B C P _115320)). Qed.
Lemma lem8401884 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1069 A B C P _115320) = (term1369 A B C P _115320).
Proof. exact (TRANS (@lem8401578 A B C P _115320) (@lem8401883 A B C P _115320)). Qed.
Lemma lem8401885 {A B C P : Type'} (_115320 : type1038 A B C P) : (term1031 A B C P _115320) = (term1369 A B C P _115320).
Proof. exact (TRANS (@lem8401097 A B C P _115320) (@lem8401884 A B C P _115320)). Qed.
Lemma lem8401886 {A B C P : Type'} (_115320 : type1038 A B C P) (h1 : term1031 A B C P _115320) : term1369 A B C P _115320.
Proof. exact (EQ_MP (@lem8401885 A B C P _115320) (@lem8401031 A B C P _115320 h1)). Qed.
Lemma lem8401890 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term299 A B C P f clauses s t c) = (term299 A B C P f clauses s t c).
Proof. exact (eq_refl (term299 A B C P f clauses s t c)). Qed.
Lemma lem8401891 {A B C P : Type'} (P' : type867 A B C P) : (term1370 A B C P P') = (term1371 A B C P P').
Proof. exact (@lem18392 (type1512 A B C P) P'). Qed.
Lemma lem8401892 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term1372 A B C P f clauses s c) = (term1373 A B C P f clauses s c).
Proof. exact (@lem8401891 A B C P (term300 A B C P f clauses s c)). Qed.
Lemma lem8401893 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term1374 A B C P f clauses s c t) = (term299 A B C P f clauses s t c).
Proof. exact (eq_refl (term1374 A B C P f clauses s c t)). Qed.
Lemma lem8401894 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8401896 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term1375 A B C P f clauses s c t) = (term1376 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8401894) (@lem8401893 A B C P f clauses s t c)). Qed.
Lemma lem8401897 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term1377 A B C P f clauses s c) = (term1378 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8401896 A B C P f clauses s t c)). Qed.
Lemma lem8401898 {A B C P : Type'} : (@ex (C -> (P -> A) -> B)) = (@ex (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (C -> (P -> A) -> B))). Qed.
Lemma lem8401899 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term1373 A B C P f clauses s c) = (term1379 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8401898 A B C P) (@lem8401897 A B C P f clauses s c)). Qed.
Lemma lem8401900 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term1372 A B C P f clauses s c) = (term1379 A B C P f clauses s c).
Proof. exact (TRANS (@lem8401892 A B C P f clauses s c) (@lem8401899 A B C P f clauses s c)). Qed.
Lemma lem8401901 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term300 A B C P f clauses s c) = (term300 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8401890 A B C P f clauses s t c)). Qed.
Lemma lem8401902 {A B C P : Type'} : (@all (C -> (P -> A) -> B)) = (@all (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@all (C -> (P -> A) -> B))). Qed.
Lemma lem8401903 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term301 A B C P f clauses s c) = (term301 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8401902 A B C P) (@lem8401901 A B C P f clauses s c)). Qed.
Lemma lem8401904 {A P : Type'} (P' : type197 A P) : (term1380 A P P') = (term1381 A P P').
Proof. exact (@lem18392 (type802 A P) P'). Qed.
Lemma lem8401905 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1382 A B C P f clauses c) = (term1383 A B C P f clauses c).
Proof. exact (@lem8401904 A P (term302 A B C P f clauses c)). Qed.
Lemma lem8401906 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term1384 A B C P f clauses c s) = (term301 A B C P f clauses s c).
Proof. exact (eq_refl (term1384 A B C P f clauses c s)). Qed.
Lemma lem8401907 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8401908 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term1385 A B C P f clauses c s) = (term1372 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8401907) (@lem8401906 A B C P f clauses s c)). Qed.
Lemma lem8401909 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term1385 A B C P f clauses c s) = (term1379 A B C P f clauses s c).
Proof. exact (TRANS (@lem8401908 A B C P f clauses s c) (@lem8401900 A B C P f clauses s c)). Qed.
Lemma lem8401910 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1386 A B C P f clauses c) = (term1387 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type802 A P => @lem8401909 A B C P f clauses s c)). Qed.
Lemma lem8401911 {A P : Type'} : (@ex ((P -> A) -> A)) = (@ex ((P -> A) -> A)).
Proof. exact (eq_refl (@ex ((P -> A) -> A))). Qed.
Lemma lem8401912 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1383 A B C P f clauses c) = (term1388 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8401911 A P) (@lem8401910 A B C P f clauses c)). Qed.
Lemma lem8401913 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1382 A B C P f clauses c) = (term1388 A B C P f clauses c).
Proof. exact (TRANS (@lem8401905 A B C P f clauses c) (@lem8401912 A B C P f clauses c)). Qed.
Lemma lem8401914 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term302 A B C P f clauses c) = (term302 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type802 A P => @lem8401903 A B C P f clauses s c)). Qed.
Lemma lem8401915 {A P : Type'} : (@all ((P -> A) -> A)) = (@all ((P -> A) -> A)).
Proof. exact (eq_refl (@all ((P -> A) -> A))). Qed.
Lemma lem8401916 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term303 A B C P f clauses c) = (term303 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8401915 A P) (@lem8401914 A B C P f clauses c)). Qed.
Lemma lem8401918 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) (f : type1168 A B C P) : (term1389 A B C P _115319 clauses c f) = (term1389 A B C P _115319 clauses c f).
Proof. exact (eq_refl (term1389 A B C P _115319 clauses c f)). Qed.
Lemma lem8401919 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1390 A B C P _115319 f clauses c) = (term1390 A B C P _115319 f clauses c).
Proof. exact (MK_COMB (@lem8401918 A B C P _115319 clauses c f) (@lem8401916 A B C P f clauses c)). Qed.
Lemma lem8401921 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) (f : type1168 A B C P) : (term1391 A B C P _115319 clauses c f) = (term1391 A B C P _115319 clauses c f).
Proof. exact (eq_refl (term1391 A B C P _115319 clauses c f)). Qed.
Lemma lem8401922 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1392 A B C P _115319 f clauses c) = (term1393 A B C P _115319 f clauses c).
Proof. exact (MK_COMB (@lem8401921 A B C P _115319 clauses c f) (@lem8401913 A B C P f clauses c)). Qed.
Lemma lem8401923 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8401924 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1394 A B C P _115319 f clauses c) = (term1395 A B C P _115319 f clauses c).
Proof. exact (MK_COMB (@lem8401923) (@lem8401922 A B C P _115319 f clauses c)). Qed.
Lemma lem8401925 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1396 A B C P _115319 f clauses c) = (term1397 A B C P _115319 f clauses c).
Proof. exact (MK_COMB (@lem8401924 A B C P _115319 f clauses c) (@lem8401919 A B C P _115319 f clauses c)). Qed.
Lemma lem8401926 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : ((_115319 clauses c f) = (term303 A B C P f clauses c)) = (term1396 A B C P _115319 f clauses c).
Proof. exact (@lem17784 (_115319 clauses c f) (term303 A B C P f clauses c)). Qed.
Lemma lem8401927 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : ((_115319 clauses c f) = (term303 A B C P f clauses c)) = (term1397 A B C P _115319 f clauses c).
Proof. exact (TRANS (@lem8401926 A B C P _115319 f clauses c) (@lem8401925 A B C P _115319 f clauses c)). Qed.
Lemma lem8401928 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term922 A B C P _115319 clauses c) = (term1398 A B C P _115319 clauses c).
Proof. exact (fun_ext (fun f : type1168 A B C P => @lem8401927 A B C P _115319 f clauses c)). Qed.
Lemma lem8401929 {A B C P : Type'} : (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)) = (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop))). Qed.
Lemma lem8401930 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term923 A B C P _115319 clauses c) = (term1399 A B C P _115319 clauses c).
Proof. exact (MK_COMB (@lem8401929 A B C P) (@lem8401928 A B C P _115319 clauses c)). Qed.
Lemma lem8401931 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term924 A B C P _115319 clauses) = (term1400 A B C P _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8401930 A B C P _115319 clauses c)). Qed.
Lemma lem8401932 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8401933 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term925 A B C P _115319 clauses) = (term1401 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8401932 C) (@lem8401931 A B C P _115319 clauses)). Qed.
Lemma lem8401934 {A B C P : Type'} (_115319 : type1061 A B C P) : (term926 A B C P _115319) = (term1402 A B C P _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8401933 A B C P _115319 clauses)). Qed.
Lemma lem8401935 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8401936 {A B C P : Type'} (_115319 : type1061 A B C P) : (term927 A B C P _115319) = (term1403 A B C P _115319).
Proof. exact (MK_COMB (@lem8401935 A B C P) (@lem8401934 A B C P _115319)). Qed.
Lemma lem8401946 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term1070 A P Q) = (term1071 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem8401947 {A B C P : Type'} (P' : type295 A B C P) (Q : type295 A B C P) : (term1404 A B C P P' Q) = (term1405 A B C P P' Q).
Proof. exact (@lem8401946 (type1168 A B C P) P' Q). Qed.
Lemma lem8401948 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1406 A B C P _115319 clauses c) = (term1407 A B C P _115319 clauses c).
Proof. exact (@lem8401947 A B C P (term1408 A B C P _115319 clauses c) (term1409 A B C P _115319 clauses c)). Qed.
Lemma lem8401949 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1410 A B C P _115319 clauses c f) = (term1393 A B C P _115319 f clauses c).
Proof. exact (eq_refl (term1410 A B C P _115319 clauses c f)). Qed.
Lemma lem8401950 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8401951 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1411 A B C P _115319 clauses c f) = (term1395 A B C P _115319 f clauses c).
Proof. exact (MK_COMB (@lem8401950) (@lem8401949 A B C P _115319 f clauses c)). Qed.
Lemma lem8401952 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1412 A B C P _115319 clauses c f) = (term1390 A B C P _115319 f clauses c).
Proof. exact (eq_refl (term1412 A B C P _115319 clauses c f)). Qed.
Lemma lem8401953 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1413 A B C P _115319 clauses c f) = (term1397 A B C P _115319 f clauses c).
Proof. exact (MK_COMB (@lem8401951 A B C P _115319 f clauses c) (@lem8401952 A B C P _115319 f clauses c)). Qed.
Lemma lem8401954 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1414 A B C P _115319 clauses c) = (term1398 A B C P _115319 clauses c).
Proof. exact (fun_ext (fun f : type1168 A B C P => @lem8401953 A B C P _115319 f clauses c)). Qed.
Lemma lem8401955 {A B C P : Type'} : (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)) = (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop))). Qed.
Lemma lem8401956 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1406 A B C P _115319 clauses c) = (term1399 A B C P _115319 clauses c).
Proof. exact (MK_COMB (@lem8401955 A B C P) (@lem8401954 A B C P _115319 clauses c)). Qed.
Lemma lem8401957 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8401958 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1415 A B C P _115319 clauses c) = (term1416 A B C P _115319 clauses c).
Proof. exact (MK_COMB (@lem8401957) (@lem8401956 A B C P _115319 clauses c)). Qed.
Lemma lem8401959 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1410 A B C P _115319 clauses c f) = (term1393 A B C P _115319 f clauses c).
Proof. exact (eq_refl (term1410 A B C P _115319 clauses c f)). Qed.
Lemma lem8401960 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1417 A B C P _115319 clauses c) = (term1408 A B C P _115319 clauses c).
Proof. exact (fun_ext (fun f : type1168 A B C P => @lem8401959 A B C P _115319 f clauses c)). Qed.
Lemma lem8401961 {A B C P : Type'} : (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)) = (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop))). Qed.
Lemma lem8401962 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1418 A B C P _115319 clauses c) = (term1419 A B C P _115319 clauses c).
Proof. exact (MK_COMB (@lem8401961 A B C P) (@lem8401960 A B C P _115319 clauses c)). Qed.
Lemma lem8401963 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8401964 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1420 A B C P _115319 clauses c) = (term1421 A B C P _115319 clauses c).
Proof. exact (MK_COMB (@lem8401963) (@lem8401962 A B C P _115319 clauses c)). Qed.
Lemma lem8401965 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1412 A B C P _115319 clauses c f) = (term1390 A B C P _115319 f clauses c).
Proof. exact (eq_refl (term1412 A B C P _115319 clauses c f)). Qed.
Lemma lem8401966 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1422 A B C P _115319 clauses c) = (term1409 A B C P _115319 clauses c).
Proof. exact (fun_ext (fun f : type1168 A B C P => @lem8401965 A B C P _115319 f clauses c)). Qed.
Lemma lem8401967 {A B C P : Type'} : (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)) = (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop))). Qed.
Lemma lem8401968 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1423 A B C P _115319 clauses c) = (term1424 A B C P _115319 clauses c).
Proof. exact (MK_COMB (@lem8401967 A B C P) (@lem8401966 A B C P _115319 clauses c)). Qed.
Lemma lem8401969 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1407 A B C P _115319 clauses c) = (term1425 A B C P _115319 clauses c).
Proof. exact (MK_COMB (@lem8401964 A B C P _115319 clauses c) (@lem8401968 A B C P _115319 clauses c)). Qed.
Lemma lem8401970 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : ((term1406 A B C P _115319 clauses c) = (term1407 A B C P _115319 clauses c)) = ((term1399 A B C P _115319 clauses c) = (term1425 A B C P _115319 clauses c)).
Proof. exact (MK_COMB (@lem8401958 A B C P _115319 clauses c) (@lem8401969 A B C P _115319 clauses c)). Qed.
Lemma lem8401971 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1399 A B C P _115319 clauses c) = (term1425 A B C P _115319 clauses c).
Proof. exact (EQ_MP (@lem8401970 A B C P _115319 clauses c) (@lem8401948 A B C P _115319 clauses c)). Qed.
Lemma lem8402092 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1400 A B C P _115319 clauses) = (term1426 A B C P _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8401971 A B C P _115319 clauses c)). Qed.
Lemma lem8402093 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8402094 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1401 A B C P _115319 clauses) = (term1427 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8402093 C) (@lem8402092 A B C P _115319 clauses)). Qed.
Lemma lem8402096 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term1070 A P Q) = (term1071 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem8402097 {C : Type'} (P : C -> Prop) (Q : C -> Prop) : (term1070 C P Q) = (term1071 C P Q).
Proof. exact (@lem8402096 C P Q). Qed.
Lemma lem8402098 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1428 A B C P _115319 clauses) = (term1429 A B C P _115319 clauses).
Proof. exact (@lem8402097 C (term1430 A B C P _115319 clauses) (term1431 A B C P _115319 clauses)). Qed.
Lemma lem8402099 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1432 A B C P _115319 clauses c) = (term1419 A B C P _115319 clauses c).
Proof. exact (eq_refl (term1432 A B C P _115319 clauses c)). Qed.
Lemma lem8402100 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8402101 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1433 A B C P _115319 clauses c) = (term1421 A B C P _115319 clauses c).
Proof. exact (MK_COMB (@lem8402100) (@lem8402099 A B C P _115319 clauses c)). Qed.
Lemma lem8402102 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1434 A B C P _115319 clauses c) = (term1424 A B C P _115319 clauses c).
Proof. exact (eq_refl (term1434 A B C P _115319 clauses c)). Qed.
Lemma lem8402103 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1435 A B C P _115319 clauses c) = (term1425 A B C P _115319 clauses c).
Proof. exact (MK_COMB (@lem8402101 A B C P _115319 clauses c) (@lem8402102 A B C P _115319 clauses c)). Qed.
Lemma lem8402104 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1436 A B C P _115319 clauses) = (term1426 A B C P _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8402103 A B C P _115319 clauses c)). Qed.
Lemma lem8402105 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8402106 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1428 A B C P _115319 clauses) = (term1427 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8402105 C) (@lem8402104 A B C P _115319 clauses)). Qed.
Lemma lem8402107 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8402108 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1437 A B C P _115319 clauses) = (term1438 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8402107) (@lem8402106 A B C P _115319 clauses)). Qed.
Lemma lem8402109 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1432 A B C P _115319 clauses c) = (term1419 A B C P _115319 clauses c).
Proof. exact (eq_refl (term1432 A B C P _115319 clauses c)). Qed.
Lemma lem8402110 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1439 A B C P _115319 clauses) = (term1430 A B C P _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8402109 A B C P _115319 clauses c)). Qed.
Lemma lem8402111 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8402112 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1440 A B C P _115319 clauses) = (term1441 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8402111 C) (@lem8402110 A B C P _115319 clauses)). Qed.
Lemma lem8402113 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8402114 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1442 A B C P _115319 clauses) = (term1443 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8402113) (@lem8402112 A B C P _115319 clauses)). Qed.
Lemma lem8402115 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1434 A B C P _115319 clauses c) = (term1424 A B C P _115319 clauses c).
Proof. exact (eq_refl (term1434 A B C P _115319 clauses c)). Qed.
Lemma lem8402116 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1444 A B C P _115319 clauses) = (term1431 A B C P _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8402115 A B C P _115319 clauses c)). Qed.
Lemma lem8402117 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8402118 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1445 A B C P _115319 clauses) = (term1446 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8402117 C) (@lem8402116 A B C P _115319 clauses)). Qed.
Lemma lem8402119 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1429 A B C P _115319 clauses) = (term1447 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8402114 A B C P _115319 clauses) (@lem8402118 A B C P _115319 clauses)). Qed.
Lemma lem8402120 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : ((term1428 A B C P _115319 clauses) = (term1429 A B C P _115319 clauses)) = ((term1427 A B C P _115319 clauses) = (term1447 A B C P _115319 clauses)).
Proof. exact (MK_COMB (@lem8402108 A B C P _115319 clauses) (@lem8402119 A B C P _115319 clauses)). Qed.
Lemma lem8402121 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1427 A B C P _115319 clauses) = (term1447 A B C P _115319 clauses).
Proof. exact (EQ_MP (@lem8402120 A B C P _115319 clauses) (@lem8402098 A B C P _115319 clauses)). Qed.
Lemma lem8402250 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1401 A B C P _115319 clauses) = (term1447 A B C P _115319 clauses).
Proof. exact (TRANS (@lem8402094 A B C P _115319 clauses) (@lem8402121 A B C P _115319 clauses)). Qed.
Lemma lem8402251 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1402 A B C P _115319) = (term1448 A B C P _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8402250 A B C P _115319 clauses)). Qed.
Lemma lem8402252 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8402253 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1403 A B C P _115319) = (term1449 A B C P _115319).
Proof. exact (MK_COMB (@lem8402252 A B C P) (@lem8402251 A B C P _115319)). Qed.
Lemma lem8402255 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term1070 A P Q) = (term1071 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem8402256 {A B C P : Type'} (P' : type1065 A B C P) (Q : type1065 A B C P) : (term1450 A B C P P' Q) = (term1451 A B C P P' Q).
Proof. exact (@lem8402255 (type1631 A B C P) P' Q). Qed.
Lemma lem8402257 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1452 A B C P _115319) = (term1453 A B C P _115319).
Proof. exact (@lem8402256 A B C P (term1454 A B C P _115319) (term1455 A B C P _115319)). Qed.
Lemma lem8402258 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1456 A B C P _115319 clauses) = (term1441 A B C P _115319 clauses).
Proof. exact (eq_refl (term1456 A B C P _115319 clauses)). Qed.
Lemma lem8402259 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8402260 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1457 A B C P _115319 clauses) = (term1443 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8402259) (@lem8402258 A B C P _115319 clauses)). Qed.
Lemma lem8402261 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1458 A B C P _115319 clauses) = (term1446 A B C P _115319 clauses).
Proof. exact (eq_refl (term1458 A B C P _115319 clauses)). Qed.
Lemma lem8402262 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1459 A B C P _115319 clauses) = (term1447 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8402260 A B C P _115319 clauses) (@lem8402261 A B C P _115319 clauses)). Qed.
Lemma lem8402263 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1460 A B C P _115319) = (term1448 A B C P _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8402262 A B C P _115319 clauses)). Qed.
Lemma lem8402264 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8402265 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1452 A B C P _115319) = (term1449 A B C P _115319).
Proof. exact (MK_COMB (@lem8402264 A B C P) (@lem8402263 A B C P _115319)). Qed.
Lemma lem8402266 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8402267 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1461 A B C P _115319) = (term1462 A B C P _115319).
Proof. exact (MK_COMB (@lem8402266) (@lem8402265 A B C P _115319)). Qed.
Lemma lem8402268 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1456 A B C P _115319 clauses) = (term1441 A B C P _115319 clauses).
Proof. exact (eq_refl (term1456 A B C P _115319 clauses)). Qed.
Lemma lem8402269 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1463 A B C P _115319) = (term1454 A B C P _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8402268 A B C P _115319 clauses)). Qed.
Lemma lem8402270 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8402271 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1464 A B C P _115319) = (term1465 A B C P _115319).
Proof. exact (MK_COMB (@lem8402270 A B C P) (@lem8402269 A B C P _115319)). Qed.
Lemma lem8402272 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8402273 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1466 A B C P _115319) = (term1467 A B C P _115319).
Proof. exact (MK_COMB (@lem8402272) (@lem8402271 A B C P _115319)). Qed.
Lemma lem8402274 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1458 A B C P _115319 clauses) = (term1446 A B C P _115319 clauses).
Proof. exact (eq_refl (term1458 A B C P _115319 clauses)). Qed.
Lemma lem8402275 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1468 A B C P _115319) = (term1455 A B C P _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8402274 A B C P _115319 clauses)). Qed.
Lemma lem8402276 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8402277 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1469 A B C P _115319) = (term1470 A B C P _115319).
Proof. exact (MK_COMB (@lem8402276 A B C P) (@lem8402275 A B C P _115319)). Qed.
Lemma lem8402278 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1453 A B C P _115319) = (term1471 A B C P _115319).
Proof. exact (MK_COMB (@lem8402273 A B C P _115319) (@lem8402277 A B C P _115319)). Qed.
Lemma lem8402279 {A B C P : Type'} (_115319 : type1061 A B C P) : ((term1452 A B C P _115319) = (term1453 A B C P _115319)) = ((term1449 A B C P _115319) = (term1471 A B C P _115319)).
Proof. exact (MK_COMB (@lem8402267 A B C P _115319) (@lem8402278 A B C P _115319)). Qed.
Lemma lem8402280 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1449 A B C P _115319) = (term1471 A B C P _115319).
Proof. exact (EQ_MP (@lem8402279 A B C P _115319) (@lem8402257 A B C P _115319)). Qed.
Lemma lem8402417 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1403 A B C P _115319) = (term1471 A B C P _115319).
Proof. exact (TRANS (@lem8402253 A B C P _115319) (@lem8402280 A B C P _115319)). Qed.
Lemma lem8402419 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1140 A P Q) = (term1141 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8402420 {A P : Type'} (P' : Prop) (Q : type197 A P) : (term1472 A P P' Q) = (term1473 A P P' Q).
Proof. exact (@lem8402419 (type802 A P) P' Q). Qed.
Lemma lem8402421 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1474 A B C P _115319 f clauses c) = (term1475 A B C P _115319 f clauses c).
Proof. exact (@lem8402420 A P (_115319 clauses c f) (term1387 A B C P f clauses c)). Qed.
Lemma lem8402422 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term1476 A B C P f clauses c s) = (term1379 A B C P f clauses s c).
Proof. exact (eq_refl (term1476 A B C P f clauses c s)). Qed.
Lemma lem8402423 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1477 A B C P f clauses c) = (term1387 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type802 A P => @lem8402422 A B C P f clauses s c)). Qed.
Lemma lem8402424 {A P : Type'} : (@ex ((P -> A) -> A)) = (@ex ((P -> A) -> A)).
Proof. exact (eq_refl (@ex ((P -> A) -> A))). Qed.
Lemma lem8402425 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1478 A B C P f clauses c) = (term1388 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8402424 A P) (@lem8402423 A B C P f clauses c)). Qed.
Lemma lem8402426 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) (f : type1168 A B C P) : (term1391 A B C P _115319 clauses c f) = (term1391 A B C P _115319 clauses c f).
Proof. exact (eq_refl (term1391 A B C P _115319 clauses c f)). Qed.
Lemma lem8402427 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1474 A B C P _115319 f clauses c) = (term1393 A B C P _115319 f clauses c).
Proof. exact (MK_COMB (@lem8402426 A B C P _115319 clauses c f) (@lem8402425 A B C P f clauses c)). Qed.
Lemma lem8402428 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8402429 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1479 A B C P _115319 f clauses c) = (term1480 A B C P _115319 f clauses c).
Proof. exact (MK_COMB (@lem8402428) (@lem8402427 A B C P _115319 f clauses c)). Qed.
Lemma lem8402430 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term1476 A B C P f clauses c s) = (term1379 A B C P f clauses s c).
Proof. exact (eq_refl (term1476 A B C P f clauses c s)). Qed.
Lemma lem8402431 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) (f : type1168 A B C P) : (term1391 A B C P _115319 clauses c f) = (term1391 A B C P _115319 clauses c f).
Proof. exact (eq_refl (term1391 A B C P _115319 clauses c f)). Qed.
Lemma lem8402432 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term1481 A B C P _115319 f clauses c s) = (term1482 A B C P _115319 f clauses s c).
Proof. exact (MK_COMB (@lem8402431 A B C P _115319 clauses c f) (@lem8402430 A B C P f clauses s c)). Qed.
Lemma lem8402433 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1483 A B C P _115319 f clauses c) = (term1484 A B C P _115319 f clauses c).
Proof. exact (fun_ext (fun s : type802 A P => @lem8402432 A B C P _115319 f clauses s c)). Qed.
Lemma lem8402434 {A P : Type'} : (@ex ((P -> A) -> A)) = (@ex ((P -> A) -> A)).
Proof. exact (eq_refl (@ex ((P -> A) -> A))). Qed.
Lemma lem8402435 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1475 A B C P _115319 f clauses c) = (term1485 A B C P _115319 f clauses c).
Proof. exact (MK_COMB (@lem8402434 A P) (@lem8402433 A B C P _115319 f clauses c)). Qed.
Lemma lem8402436 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : ((term1474 A B C P _115319 f clauses c) = (term1475 A B C P _115319 f clauses c)) = ((term1393 A B C P _115319 f clauses c) = (term1485 A B C P _115319 f clauses c)).
Proof. exact (MK_COMB (@lem8402429 A B C P _115319 f clauses c) (@lem8402435 A B C P _115319 f clauses c)). Qed.
Lemma lem8402437 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1393 A B C P _115319 f clauses c) = (term1485 A B C P _115319 f clauses c).
Proof. exact (EQ_MP (@lem8402436 A B C P _115319 f clauses c) (@lem8402421 A B C P _115319 f clauses c)). Qed.
Lemma lem8402439 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1140 A P Q) = (term1141 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8402440 {A B C P : Type'} (P' : Prop) (Q : type867 A B C P) : (term1486 A B C P P' Q) = (term1487 A B C P P' Q).
Proof. exact (@lem8402439 (type1512 A B C P) P' Q). Qed.
Lemma lem8402441 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term1488 A B C P _115319 f clauses s c) = (term1489 A B C P _115319 f clauses s c).
Proof. exact (@lem8402440 A B C P (_115319 clauses c f) (term1378 A B C P f clauses s c)). Qed.
Lemma lem8402442 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term1490 A B C P f clauses s c t) = (term1376 A B C P f clauses s t c).
Proof. exact (eq_refl (term1490 A B C P f clauses s c t)). Qed.
Lemma lem8402443 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term1491 A B C P f clauses s c) = (term1378 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8402442 A B C P f clauses s t c)). Qed.
Lemma lem8402444 {A B C P : Type'} : (@ex (C -> (P -> A) -> B)) = (@ex (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (C -> (P -> A) -> B))). Qed.
Lemma lem8402445 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term1492 A B C P f clauses s c) = (term1379 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8402444 A B C P) (@lem8402443 A B C P f clauses s c)). Qed.
Lemma lem8402446 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) (f : type1168 A B C P) : (term1391 A B C P _115319 clauses c f) = (term1391 A B C P _115319 clauses c f).
Proof. exact (eq_refl (term1391 A B C P _115319 clauses c f)). Qed.
Lemma lem8402447 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term1488 A B C P _115319 f clauses s c) = (term1482 A B C P _115319 f clauses s c).
Proof. exact (MK_COMB (@lem8402446 A B C P _115319 clauses c f) (@lem8402445 A B C P f clauses s c)). Qed.
Lemma lem8402448 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8402449 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term1493 A B C P _115319 f clauses s c) = (term1494 A B C P _115319 f clauses s c).
Proof. exact (MK_COMB (@lem8402448) (@lem8402447 A B C P _115319 f clauses s c)). Qed.
Lemma lem8402450 {A B C P : Type'} (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term1490 A B C P f clauses s c t) = (term1376 A B C P f clauses s t c).
Proof. exact (eq_refl (term1490 A B C P f clauses s c t)). Qed.
Lemma lem8402451 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) (f : type1168 A B C P) : (term1391 A B C P _115319 clauses c f) = (term1391 A B C P _115319 clauses c f).
Proof. exact (eq_refl (term1391 A B C P _115319 clauses c f)). Qed.
Lemma lem8402452 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term1495 A B C P _115319 f clauses s c t) = (term1496 A B C P _115319 f clauses s t c).
Proof. exact (MK_COMB (@lem8402451 A B C P _115319 clauses c f) (@lem8402450 A B C P f clauses s t c)). Qed.
Lemma lem8402453 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term1497 A B C P _115319 f clauses s c) = (term1498 A B C P _115319 f clauses s c).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8402452 A B C P _115319 f clauses s t c)). Qed.
Lemma lem8402454 {A B C P : Type'} : (@ex (C -> (P -> A) -> B)) = (@ex (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (C -> (P -> A) -> B))). Qed.
Lemma lem8402455 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term1489 A B C P _115319 f clauses s c) = (term1499 A B C P _115319 f clauses s c).
Proof. exact (MK_COMB (@lem8402454 A B C P) (@lem8402453 A B C P _115319 f clauses s c)). Qed.
Lemma lem8402456 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : ((term1488 A B C P _115319 f clauses s c) = (term1489 A B C P _115319 f clauses s c)) = ((term1482 A B C P _115319 f clauses s c) = (term1499 A B C P _115319 f clauses s c)).
Proof. exact (MK_COMB (@lem8402449 A B C P _115319 f clauses s c) (@lem8402455 A B C P _115319 f clauses s c)). Qed.
Lemma lem8402457 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term1482 A B C P _115319 f clauses s c) = (term1499 A B C P _115319 f clauses s c).
Proof. exact (EQ_MP (@lem8402456 A B C P _115319 f clauses s c) (@lem8402441 A B C P _115319 f clauses s c)). Qed.
Lemma lem8402458 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1484 A B C P _115319 f clauses c) = (term1500 A B C P _115319 f clauses c).
Proof. exact (fun_ext (fun s : type802 A P => @lem8402457 A B C P _115319 f clauses s c)). Qed.
Lemma lem8402459 {A P : Type'} : (@ex ((P -> A) -> A)) = (@ex ((P -> A) -> A)).
Proof. exact (eq_refl (@ex ((P -> A) -> A))). Qed.
Lemma lem8402460 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1485 A B C P _115319 f clauses c) = (term1501 A B C P _115319 f clauses c).
Proof. exact (MK_COMB (@lem8402459 A P) (@lem8402458 A B C P _115319 f clauses c)). Qed.
Lemma lem8402461 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1393 A B C P _115319 f clauses c) = (term1501 A B C P _115319 f clauses c).
Proof. exact (TRANS (@lem8402437 A B C P _115319 f clauses c) (@lem8402460 A B C P _115319 f clauses c)). Qed.
Lemma lem8402462 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1408 A B C P _115319 clauses c) = (term1502 A B C P _115319 clauses c).
Proof. exact (fun_ext (fun f : type1168 A B C P => @lem8402461 A B C P _115319 f clauses c)). Qed.
Lemma lem8402463 {A B C P : Type'} : (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)) = (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop))). Qed.
Lemma lem8402464 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1419 A B C P _115319 clauses c) = (term1503 A B C P _115319 clauses c).
Proof. exact (MK_COMB (@lem8402463 A B C P) (@lem8402462 A B C P _115319 clauses c)). Qed.
Lemma lem8402466 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8402467 {A B C P : Type'} (P' : type291 A B C P) : (term1504 A B C P P') = (term1505 A B C P P').
Proof. exact (@lem8402466 (type1168 A B C P) (type802 A P) P'). Qed.
Lemma lem8402468 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1506 A B C P _115319 clauses c) = (term1507 A B C P _115319 clauses c).
Proof. exact (@lem8402467 A B C P (term1508 A B C P _115319 clauses c)). Qed.
Lemma lem8402469 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1509 A B C P _115319 clauses c f) = (term1500 A B C P _115319 f clauses c).
Proof. exact (eq_refl (term1509 A B C P _115319 clauses c f)). Qed.
Lemma lem8402470 {A P : Type'} (s : type802 A P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8402471 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) (s : type802 A P) : (term1510 A B C P _115319 clauses c f s) = (term1511 A B C P _115319 f clauses c s).
Proof. exact (MK_COMB (@lem8402469 A B C P _115319 f clauses c) (@lem8402470 A P s)). Qed.
Lemma lem8402472 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term1511 A B C P _115319 f clauses c s) = (term1499 A B C P _115319 f clauses s c).
Proof. exact (eq_refl (term1511 A B C P _115319 f clauses c s)). Qed.
Lemma lem8402473 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term1510 A B C P _115319 clauses c f s) = (term1499 A B C P _115319 f clauses s c).
Proof. exact (TRANS (@lem8402471 A B C P _115319 f clauses c s) (@lem8402472 A B C P _115319 f clauses s c)). Qed.
Lemma lem8402474 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1512 A B C P _115319 clauses c f) = (term1500 A B C P _115319 f clauses c).
Proof. exact (fun_ext (fun s : type802 A P => @lem8402473 A B C P _115319 f clauses s c)). Qed.
Lemma lem8402475 {A P : Type'} : (@ex ((P -> A) -> A)) = (@ex ((P -> A) -> A)).
Proof. exact (eq_refl (@ex ((P -> A) -> A))). Qed.
Lemma lem8402476 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1513 A B C P _115319 clauses c f) = (term1501 A B C P _115319 f clauses c).
Proof. exact (MK_COMB (@lem8402475 A P) (@lem8402474 A B C P _115319 f clauses c)). Qed.
Lemma lem8402477 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1514 A B C P _115319 clauses c) = (term1502 A B C P _115319 clauses c).
Proof. exact (fun_ext (fun f : type1168 A B C P => @lem8402476 A B C P _115319 f clauses c)). Qed.
Lemma lem8402478 {A B C P : Type'} : (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)) = (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop))). Qed.
Lemma lem8402479 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1506 A B C P _115319 clauses c) = (term1503 A B C P _115319 clauses c).
Proof. exact (MK_COMB (@lem8402478 A B C P) (@lem8402477 A B C P _115319 clauses c)). Qed.
Lemma lem8402480 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8402481 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1515 A B C P _115319 clauses c) = (term1516 A B C P _115319 clauses c).
Proof. exact (MK_COMB (@lem8402480) (@lem8402479 A B C P _115319 clauses c)). Qed.
Lemma lem8402482 {A B C P : Type'} (_115319 : type1061 A B C P) (f : type1168 A B C P) (clauses : type1631 A B C P) (c : C) : (term1509 A B C P _115319 clauses c f) = (term1500 A B C P _115319 f clauses c).
Proof. exact (eq_refl (term1509 A B C P _115319 clauses c f)). Qed.
Lemma lem8402483 {A B C P : Type'} (s : type293 A B C P) (f : type1168 A B C P) : (s f) = (s f).
Proof. exact (eq_refl (s f)). Qed.
Lemma lem8402484 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) (s : type293 A B C P) (f : type1168 A B C P) : (term1517 A B C P _115319 clauses c s f) = (term1518 A B C P _115319 clauses c s f).
Proof. exact (MK_COMB (@lem8402482 A B C P _115319 f clauses c) (@lem8402483 A B C P s f)). Qed.
Lemma lem8402485 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (f : type1168 A B C P) (c : C) : (term1518 A B C P _115319 clauses c s f) = (term1519 A B C P _115319 clauses s f c).
Proof. exact (eq_refl (term1518 A B C P _115319 clauses c s f)). Qed.
Lemma lem8402486 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (f : type1168 A B C P) (c : C) : (term1517 A B C P _115319 clauses c s f) = (term1519 A B C P _115319 clauses s f c).
Proof. exact (TRANS (@lem8402484 A B C P _115319 clauses c s f) (@lem8402485 A B C P _115319 clauses s f c)). Qed.
Lemma lem8402487 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (c : C) : (term1520 A B C P _115319 clauses c s) = (term1521 A B C P _115319 clauses s c).
Proof. exact (fun_ext (fun f : type1168 A B C P => @lem8402486 A B C P _115319 clauses s f c)). Qed.
Lemma lem8402488 {A B C P : Type'} : (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)) = (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop))). Qed.
Lemma lem8402489 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (c : C) : (term1522 A B C P _115319 clauses c s) = (term1523 A B C P _115319 clauses s c).
Proof. exact (MK_COMB (@lem8402488 A B C P) (@lem8402487 A B C P _115319 clauses s c)). Qed.
Lemma lem8402490 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1524 A B C P _115319 clauses c) = (term1525 A B C P _115319 clauses c).
Proof. exact (fun_ext (fun s : type293 A B C P => @lem8402489 A B C P _115319 clauses s c)). Qed.
Lemma lem8402491 {A B C P : Type'} : (@ex (((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A)) = (@ex (((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A)).
Proof. exact (eq_refl (@ex (((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A))). Qed.
Lemma lem8402492 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1507 A B C P _115319 clauses c) = (term1526 A B C P _115319 clauses c).
Proof. exact (MK_COMB (@lem8402491 A B C P) (@lem8402490 A B C P _115319 clauses c)). Qed.
Lemma lem8402493 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : ((term1506 A B C P _115319 clauses c) = (term1507 A B C P _115319 clauses c)) = ((term1503 A B C P _115319 clauses c) = (term1526 A B C P _115319 clauses c)).
Proof. exact (MK_COMB (@lem8402481 A B C P _115319 clauses c) (@lem8402492 A B C P _115319 clauses c)). Qed.
Lemma lem8402494 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1503 A B C P _115319 clauses c) = (term1526 A B C P _115319 clauses c).
Proof. exact (EQ_MP (@lem8402493 A B C P _115319 clauses c) (@lem8402468 A B C P _115319 clauses c)). Qed.
Lemma lem8402496 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8402497 {A B C P : Type'} (P' : type292 A B C P) : (term1527 A B C P P') = (term1528 A B C P P').
Proof. exact (@lem8402496 (type1168 A B C P) (type1512 A B C P) P'). Qed.
Lemma lem8402498 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (c : C) : (term1529 A B C P _115319 clauses s c) = (term1530 A B C P _115319 clauses s c).
Proof. exact (@lem8402497 A B C P (term1531 A B C P _115319 clauses s c)). Qed.
Lemma lem8402499 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (f : type1168 A B C P) (c : C) : (term1532 A B C P _115319 clauses s c f) = (term1533 A B C P _115319 clauses s f c).
Proof. exact (eq_refl (term1532 A B C P _115319 clauses s c f)). Qed.
Lemma lem8402500 {A B C P : Type'} (t : type1512 A B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8402501 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (f : type1168 A B C P) (c : C) (t : type1512 A B C P) : (term1534 A B C P _115319 clauses s c f t) = (term1535 A B C P _115319 clauses s f c t).
Proof. exact (MK_COMB (@lem8402499 A B C P _115319 clauses s f c) (@lem8402500 A B C P t)). Qed.
Lemma lem8402502 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (f : type1168 A B C P) (t : type1512 A B C P) (c : C) : (term1535 A B C P _115319 clauses s f c t) = (term1536 A B C P _115319 clauses s f t c).
Proof. exact (eq_refl (term1535 A B C P _115319 clauses s f c t)). Qed.
Lemma lem8402503 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (f : type1168 A B C P) (t : type1512 A B C P) (c : C) : (term1534 A B C P _115319 clauses s c f t) = (term1536 A B C P _115319 clauses s f t c).
Proof. exact (TRANS (@lem8402501 A B C P _115319 clauses s f c t) (@lem8402502 A B C P _115319 clauses s f t c)). Qed.
Lemma lem8402504 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (f : type1168 A B C P) (c : C) : (term1537 A B C P _115319 clauses s c f) = (term1533 A B C P _115319 clauses s f c).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8402503 A B C P _115319 clauses s f t c)). Qed.
Lemma lem8402505 {A B C P : Type'} : (@ex (C -> (P -> A) -> B)) = (@ex (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (C -> (P -> A) -> B))). Qed.
Lemma lem8402506 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (f : type1168 A B C P) (c : C) : (term1538 A B C P _115319 clauses s c f) = (term1519 A B C P _115319 clauses s f c).
Proof. exact (MK_COMB (@lem8402505 A B C P) (@lem8402504 A B C P _115319 clauses s f c)). Qed.
Lemma lem8402507 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (c : C) : (term1539 A B C P _115319 clauses s c) = (term1521 A B C P _115319 clauses s c).
Proof. exact (fun_ext (fun f : type1168 A B C P => @lem8402506 A B C P _115319 clauses s f c)). Qed.
Lemma lem8402508 {A B C P : Type'} : (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)) = (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop))). Qed.
Lemma lem8402509 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (c : C) : (term1529 A B C P _115319 clauses s c) = (term1523 A B C P _115319 clauses s c).
Proof. exact (MK_COMB (@lem8402508 A B C P) (@lem8402507 A B C P _115319 clauses s c)). Qed.
Lemma lem8402510 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8402511 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (c : C) : (term1540 A B C P _115319 clauses s c) = (term1541 A B C P _115319 clauses s c).
Proof. exact (MK_COMB (@lem8402510) (@lem8402509 A B C P _115319 clauses s c)). Qed.
Lemma lem8402512 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (f : type1168 A B C P) (c : C) : (term1532 A B C P _115319 clauses s c f) = (term1533 A B C P _115319 clauses s f c).
Proof. exact (eq_refl (term1532 A B C P _115319 clauses s c f)). Qed.
Lemma lem8402513 {A B C P : Type'} (t : type294 A B C P) (f : type1168 A B C P) : (t f) = (t f).
Proof. exact (eq_refl (t f)). Qed.
Lemma lem8402514 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (c : C) (t : type294 A B C P) (f : type1168 A B C P) : (term1542 A B C P _115319 clauses s c t f) = (term1543 A B C P _115319 clauses s c t f).
Proof. exact (MK_COMB (@lem8402512 A B C P _115319 clauses s f c) (@lem8402513 A B C P t f)). Qed.
Lemma lem8402515 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (t : type294 A B C P) (f : type1168 A B C P) (c : C) : (term1543 A B C P _115319 clauses s c t f) = (term1544 A B C P _115319 clauses s t f c).
Proof. exact (eq_refl (term1543 A B C P _115319 clauses s c t f)). Qed.
Lemma lem8402516 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (t : type294 A B C P) (f : type1168 A B C P) (c : C) : (term1542 A B C P _115319 clauses s c t f) = (term1544 A B C P _115319 clauses s t f c).
Proof. exact (TRANS (@lem8402514 A B C P _115319 clauses s c t f) (@lem8402515 A B C P _115319 clauses s t f c)). Qed.
Lemma lem8402517 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (t : type294 A B C P) (c : C) : (term1545 A B C P _115319 clauses s c t) = (term1546 A B C P _115319 clauses s t c).
Proof. exact (fun_ext (fun f : type1168 A B C P => @lem8402516 A B C P _115319 clauses s t f c)). Qed.
Lemma lem8402518 {A B C P : Type'} : (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)) = (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop))). Qed.
Lemma lem8402519 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (t : type294 A B C P) (c : C) : (term1547 A B C P _115319 clauses s c t) = (term1548 A B C P _115319 clauses s t c).
Proof. exact (MK_COMB (@lem8402518 A B C P) (@lem8402517 A B C P _115319 clauses s t c)). Qed.
Lemma lem8402520 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (c : C) : (term1549 A B C P _115319 clauses s c) = (term1550 A B C P _115319 clauses s c).
Proof. exact (fun_ext (fun t : type294 A B C P => @lem8402519 A B C P _115319 clauses s t c)). Qed.
Lemma lem8402521 {A B C P : Type'} : (@ex (((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> C -> (P -> A) -> B)) = (@ex (((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> C -> (P -> A) -> B))). Qed.
Lemma lem8402522 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (c : C) : (term1530 A B C P _115319 clauses s c) = (term1551 A B C P _115319 clauses s c).
Proof. exact (MK_COMB (@lem8402521 A B C P) (@lem8402520 A B C P _115319 clauses s c)). Qed.
Lemma lem8402523 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (c : C) : ((term1529 A B C P _115319 clauses s c) = (term1530 A B C P _115319 clauses s c)) = ((term1523 A B C P _115319 clauses s c) = (term1551 A B C P _115319 clauses s c)).
Proof. exact (MK_COMB (@lem8402511 A B C P _115319 clauses s c) (@lem8402522 A B C P _115319 clauses s c)). Qed.
Lemma lem8402524 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (c : C) : (term1523 A B C P _115319 clauses s c) = (term1551 A B C P _115319 clauses s c).
Proof. exact (EQ_MP (@lem8402523 A B C P _115319 clauses s c) (@lem8402498 A B C P _115319 clauses s c)). Qed.
Lemma lem8402525 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1525 A B C P _115319 clauses c) = (term1552 A B C P _115319 clauses c).
Proof. exact (fun_ext (fun s : type293 A B C P => @lem8402524 A B C P _115319 clauses s c)). Qed.
Lemma lem8402526 {A B C P : Type'} : (@ex (((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A)) = (@ex (((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A)).
Proof. exact (eq_refl (@ex (((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A))). Qed.
Lemma lem8402527 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1526 A B C P _115319 clauses c) = (term1553 A B C P _115319 clauses c).
Proof. exact (MK_COMB (@lem8402526 A B C P) (@lem8402525 A B C P _115319 clauses c)). Qed.
Lemma lem8402528 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1503 A B C P _115319 clauses c) = (term1553 A B C P _115319 clauses c).
Proof. exact (TRANS (@lem8402494 A B C P _115319 clauses c) (@lem8402527 A B C P _115319 clauses c)). Qed.
Lemma lem8402529 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1419 A B C P _115319 clauses c) = (term1553 A B C P _115319 clauses c).
Proof. exact (TRANS (@lem8402464 A B C P _115319 clauses c) (@lem8402528 A B C P _115319 clauses c)). Qed.
Lemma lem8402530 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1430 A B C P _115319 clauses) = (term1554 A B C P _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8402529 A B C P _115319 clauses c)). Qed.
Lemma lem8402531 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8402532 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1441 A B C P _115319 clauses) = (term1555 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8402531 C) (@lem8402530 A B C P _115319 clauses)). Qed.
Lemma lem8402534 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8402535 {A B C P : Type'} (P' : type1485 A B C P) : (term1556 A B C P P') = (term1557 A B C P P').
Proof. exact (@lem8402534 C (type293 A B C P) P'). Qed.
Lemma lem8402536 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1558 A B C P _115319 clauses) = (term1559 A B C P _115319 clauses).
Proof. exact (@lem8402535 A B C P (term1560 A B C P _115319 clauses)). Qed.
Lemma lem8402537 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1561 A B C P _115319 clauses c) = (term1552 A B C P _115319 clauses c).
Proof. exact (eq_refl (term1561 A B C P _115319 clauses c)). Qed.
Lemma lem8402538 {A B C P : Type'} (s : type293 A B C P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8402539 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) (s : type293 A B C P) : (term1562 A B C P _115319 clauses c s) = (term1563 A B C P _115319 clauses c s).
Proof. exact (MK_COMB (@lem8402537 A B C P _115319 clauses c) (@lem8402538 A B C P s)). Qed.
Lemma lem8402540 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (c : C) : (term1563 A B C P _115319 clauses c s) = (term1551 A B C P _115319 clauses s c).
Proof. exact (eq_refl (term1563 A B C P _115319 clauses c s)). Qed.
Lemma lem8402541 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type293 A B C P) (c : C) : (term1562 A B C P _115319 clauses c s) = (term1551 A B C P _115319 clauses s c).
Proof. exact (TRANS (@lem8402539 A B C P _115319 clauses c s) (@lem8402540 A B C P _115319 clauses s c)). Qed.
Lemma lem8402542 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1564 A B C P _115319 clauses c) = (term1552 A B C P _115319 clauses c).
Proof. exact (fun_ext (fun s : type293 A B C P => @lem8402541 A B C P _115319 clauses s c)). Qed.
Lemma lem8402543 {A B C P : Type'} : (@ex (((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A)) = (@ex (((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A)).
Proof. exact (eq_refl (@ex (((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A))). Qed.
Lemma lem8402544 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1565 A B C P _115319 clauses c) = (term1553 A B C P _115319 clauses c).
Proof. exact (MK_COMB (@lem8402543 A B C P) (@lem8402542 A B C P _115319 clauses c)). Qed.
Lemma lem8402545 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1566 A B C P _115319 clauses) = (term1554 A B C P _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8402544 A B C P _115319 clauses c)). Qed.
Lemma lem8402546 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8402547 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1558 A B C P _115319 clauses) = (term1555 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8402546 C) (@lem8402545 A B C P _115319 clauses)). Qed.
Lemma lem8402548 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8402549 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1567 A B C P _115319 clauses) = (term1568 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8402548) (@lem8402547 A B C P _115319 clauses)). Qed.
Lemma lem8402550 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (c : C) : (term1561 A B C P _115319 clauses c) = (term1552 A B C P _115319 clauses c).
Proof. exact (eq_refl (term1561 A B C P _115319 clauses c)). Qed.
Lemma lem8402551 {A B C P : Type'} (s : type1498 A B C P) (c : C) : (s c) = (s c).
Proof. exact (eq_refl (s c)). Qed.
Lemma lem8402552 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) (c : C) : (term1569 A B C P _115319 clauses s c) = (term1570 A B C P _115319 clauses s c).
Proof. exact (MK_COMB (@lem8402550 A B C P _115319 clauses c) (@lem8402551 A B C P s c)). Qed.
Lemma lem8402553 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) (c : C) : (term1570 A B C P _115319 clauses s c) = (term1571 A B C P _115319 clauses s c).
Proof. exact (eq_refl (term1570 A B C P _115319 clauses s c)). Qed.
Lemma lem8402554 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) (c : C) : (term1569 A B C P _115319 clauses s c) = (term1571 A B C P _115319 clauses s c).
Proof. exact (TRANS (@lem8402552 A B C P _115319 clauses s c) (@lem8402553 A B C P _115319 clauses s c)). Qed.
Lemma lem8402555 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) : (term1572 A B C P _115319 clauses s) = (term1573 A B C P _115319 clauses s).
Proof. exact (fun_ext (fun c : C => @lem8402554 A B C P _115319 clauses s c)). Qed.
Lemma lem8402556 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8402557 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) : (term1574 A B C P _115319 clauses s) = (term1575 A B C P _115319 clauses s).
Proof. exact (MK_COMB (@lem8402556 C) (@lem8402555 A B C P _115319 clauses s)). Qed.
Lemma lem8402558 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1576 A B C P _115319 clauses) = (term1577 A B C P _115319 clauses).
Proof. exact (fun_ext (fun s : type1498 A B C P => @lem8402557 A B C P _115319 clauses s)). Qed.
Lemma lem8402559 {A B C P : Type'} : (@ex (C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A)) = (@ex (C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A)).
Proof. exact (eq_refl (@ex (C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A))). Qed.
Lemma lem8402560 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1559 A B C P _115319 clauses) = (term1578 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8402559 A B C P) (@lem8402558 A B C P _115319 clauses)). Qed.
Lemma lem8402561 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : ((term1558 A B C P _115319 clauses) = (term1559 A B C P _115319 clauses)) = ((term1555 A B C P _115319 clauses) = (term1578 A B C P _115319 clauses)).
Proof. exact (MK_COMB (@lem8402549 A B C P _115319 clauses) (@lem8402560 A B C P _115319 clauses)). Qed.
Lemma lem8402562 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1555 A B C P _115319 clauses) = (term1578 A B C P _115319 clauses).
Proof. exact (EQ_MP (@lem8402561 A B C P _115319 clauses) (@lem8402536 A B C P _115319 clauses)). Qed.
Lemma lem8402564 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8402565 {A B C P : Type'} (P' : type1486 A B C P) : (term1579 A B C P P') = (term1580 A B C P P').
Proof. exact (@lem8402564 C (type294 A B C P) P'). Qed.
Lemma lem8402566 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) : (term1581 A B C P _115319 clauses s) = (term1582 A B C P _115319 clauses s).
Proof. exact (@lem8402565 A B C P (term1583 A B C P _115319 clauses s)). Qed.
Lemma lem8402567 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) (c : C) : (term1584 A B C P _115319 clauses s c) = (term1585 A B C P _115319 clauses s c).
Proof. exact (eq_refl (term1584 A B C P _115319 clauses s c)). Qed.
Lemma lem8402568 {A B C P : Type'} (t : type294 A B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8402569 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) (c : C) (t : type294 A B C P) : (term1586 A B C P _115319 clauses s c t) = (term1587 A B C P _115319 clauses s c t).
Proof. exact (MK_COMB (@lem8402567 A B C P _115319 clauses s c) (@lem8402568 A B C P t)). Qed.
Lemma lem8402570 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) (t : type294 A B C P) (c : C) : (term1587 A B C P _115319 clauses s c t) = (term1588 A B C P _115319 clauses s t c).
Proof. exact (eq_refl (term1587 A B C P _115319 clauses s c t)). Qed.
Lemma lem8402571 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) (t : type294 A B C P) (c : C) : (term1586 A B C P _115319 clauses s c t) = (term1588 A B C P _115319 clauses s t c).
Proof. exact (TRANS (@lem8402569 A B C P _115319 clauses s c t) (@lem8402570 A B C P _115319 clauses s t c)). Qed.
Lemma lem8402572 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) (c : C) : (term1589 A B C P _115319 clauses s c) = (term1585 A B C P _115319 clauses s c).
Proof. exact (fun_ext (fun t : type294 A B C P => @lem8402571 A B C P _115319 clauses s t c)). Qed.
Lemma lem8402573 {A B C P : Type'} : (@ex (((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> C -> (P -> A) -> B)) = (@ex (((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> C -> (P -> A) -> B))). Qed.
Lemma lem8402574 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) (c : C) : (term1590 A B C P _115319 clauses s c) = (term1571 A B C P _115319 clauses s c).
Proof. exact (MK_COMB (@lem8402573 A B C P) (@lem8402572 A B C P _115319 clauses s c)). Qed.
Lemma lem8402575 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) : (term1591 A B C P _115319 clauses s) = (term1573 A B C P _115319 clauses s).
Proof. exact (fun_ext (fun c : C => @lem8402574 A B C P _115319 clauses s c)). Qed.
Lemma lem8402576 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8402577 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) : (term1581 A B C P _115319 clauses s) = (term1575 A B C P _115319 clauses s).
Proof. exact (MK_COMB (@lem8402576 C) (@lem8402575 A B C P _115319 clauses s)). Qed.
Lemma lem8402578 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8402579 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) : (term1592 A B C P _115319 clauses s) = (term1593 A B C P _115319 clauses s).
Proof. exact (MK_COMB (@lem8402578) (@lem8402577 A B C P _115319 clauses s)). Qed.
Lemma lem8402580 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) (c : C) : (term1584 A B C P _115319 clauses s c) = (term1585 A B C P _115319 clauses s c).
Proof. exact (eq_refl (term1584 A B C P _115319 clauses s c)). Qed.
Lemma lem8402581 {A B C P : Type'} (t : type1499 A B C P) (c : C) : (t c) = (t c).
Proof. exact (eq_refl (t c)). Qed.
Lemma lem8402582 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) (t : type1499 A B C P) (c : C) : (term1594 A B C P _115319 clauses s t c) = (term1595 A B C P _115319 clauses s t c).
Proof. exact (MK_COMB (@lem8402580 A B C P _115319 clauses s c) (@lem8402581 A B C P t c)). Qed.
Lemma lem8402583 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) (t : type1499 A B C P) (c : C) : (term1595 A B C P _115319 clauses s t c) = (term1596 A B C P _115319 clauses s t c).
Proof. exact (eq_refl (term1595 A B C P _115319 clauses s t c)). Qed.
Lemma lem8402584 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) (t : type1499 A B C P) (c : C) : (term1594 A B C P _115319 clauses s t c) = (term1596 A B C P _115319 clauses s t c).
Proof. exact (TRANS (@lem8402582 A B C P _115319 clauses s t c) (@lem8402583 A B C P _115319 clauses s t c)). Qed.
Lemma lem8402585 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) (t : type1499 A B C P) : (term1597 A B C P _115319 clauses s t) = (term1598 A B C P _115319 clauses s t).
Proof. exact (fun_ext (fun c : C => @lem8402584 A B C P _115319 clauses s t c)). Qed.
Lemma lem8402586 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8402587 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) (t : type1499 A B C P) : (term1599 A B C P _115319 clauses s t) = (term1600 A B C P _115319 clauses s t).
Proof. exact (MK_COMB (@lem8402586 C) (@lem8402585 A B C P _115319 clauses s t)). Qed.
Lemma lem8402588 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) : (term1601 A B C P _115319 clauses s) = (term1602 A B C P _115319 clauses s).
Proof. exact (fun_ext (fun t : type1499 A B C P => @lem8402587 A B C P _115319 clauses s t)). Qed.
Lemma lem8402589 {A B C P : Type'} : (@ex (C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> C -> (P -> A) -> B)) = (@ex (C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> C -> (P -> A) -> B))). Qed.
Lemma lem8402590 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) : (term1582 A B C P _115319 clauses s) = (term1603 A B C P _115319 clauses s).
Proof. exact (MK_COMB (@lem8402589 A B C P) (@lem8402588 A B C P _115319 clauses s)). Qed.
Lemma lem8402591 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) : ((term1581 A B C P _115319 clauses s) = (term1582 A B C P _115319 clauses s)) = ((term1575 A B C P _115319 clauses s) = (term1603 A B C P _115319 clauses s)).
Proof. exact (MK_COMB (@lem8402579 A B C P _115319 clauses s) (@lem8402590 A B C P _115319 clauses s)). Qed.
Lemma lem8402592 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) : (term1575 A B C P _115319 clauses s) = (term1603 A B C P _115319 clauses s).
Proof. exact (EQ_MP (@lem8402591 A B C P _115319 clauses s) (@lem8402566 A B C P _115319 clauses s)). Qed.
Lemma lem8402593 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1577 A B C P _115319 clauses) = (term1604 A B C P _115319 clauses).
Proof. exact (fun_ext (fun s : type1498 A B C P => @lem8402592 A B C P _115319 clauses s)). Qed.
Lemma lem8402594 {A B C P : Type'} : (@ex (C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A)) = (@ex (C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A)).
Proof. exact (eq_refl (@ex (C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A))). Qed.
Lemma lem8402595 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1578 A B C P _115319 clauses) = (term1605 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8402594 A B C P) (@lem8402593 A B C P _115319 clauses)). Qed.
Lemma lem8402596 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1555 A B C P _115319 clauses) = (term1605 A B C P _115319 clauses).
Proof. exact (TRANS (@lem8402562 A B C P _115319 clauses) (@lem8402595 A B C P _115319 clauses)). Qed.
Lemma lem8402597 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1441 A B C P _115319 clauses) = (term1605 A B C P _115319 clauses).
Proof. exact (TRANS (@lem8402532 A B C P _115319 clauses) (@lem8402596 A B C P _115319 clauses)). Qed.
Lemma lem8402598 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1454 A B C P _115319) = (term1606 A B C P _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8402597 A B C P _115319 clauses)). Qed.
Lemma lem8402599 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8402600 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1465 A B C P _115319) = (term1607 A B C P _115319).
Proof. exact (MK_COMB (@lem8402599 A B C P) (@lem8402598 A B C P _115319)). Qed.
Lemma lem8402602 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8402603 {A B C P : Type'} (P' : type1054 A B C P) : (term1608 A B C P P') = (term1609 A B C P P').
Proof. exact (@lem8402602 (type1631 A B C P) (type1498 A B C P) P'). Qed.
Lemma lem8402604 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1610 A B C P _115319) = (term1611 A B C P _115319).
Proof. exact (@lem8402603 A B C P (term1612 A B C P _115319)). Qed.
Lemma lem8402605 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1613 A B C P _115319 clauses) = (term1604 A B C P _115319 clauses).
Proof. exact (eq_refl (term1613 A B C P _115319 clauses)). Qed.
Lemma lem8402606 {A B C P : Type'} (s : type1498 A B C P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8402607 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) : (term1614 A B C P _115319 clauses s) = (term1615 A B C P _115319 clauses s).
Proof. exact (MK_COMB (@lem8402605 A B C P _115319 clauses) (@lem8402606 A B C P s)). Qed.
Lemma lem8402608 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) : (term1615 A B C P _115319 clauses s) = (term1603 A B C P _115319 clauses s).
Proof. exact (eq_refl (term1615 A B C P _115319 clauses s)). Qed.
Lemma lem8402609 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1498 A B C P) : (term1614 A B C P _115319 clauses s) = (term1603 A B C P _115319 clauses s).
Proof. exact (TRANS (@lem8402607 A B C P _115319 clauses s) (@lem8402608 A B C P _115319 clauses s)). Qed.
Lemma lem8402610 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1616 A B C P _115319 clauses) = (term1604 A B C P _115319 clauses).
Proof. exact (fun_ext (fun s : type1498 A B C P => @lem8402609 A B C P _115319 clauses s)). Qed.
Lemma lem8402611 {A B C P : Type'} : (@ex (C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A)) = (@ex (C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A)).
Proof. exact (eq_refl (@ex (C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A))). Qed.
Lemma lem8402612 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1617 A B C P _115319 clauses) = (term1605 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8402611 A B C P) (@lem8402610 A B C P _115319 clauses)). Qed.
Lemma lem8402613 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1618 A B C P _115319) = (term1606 A B C P _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8402612 A B C P _115319 clauses)). Qed.
Lemma lem8402614 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8402615 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1610 A B C P _115319) = (term1607 A B C P _115319).
Proof. exact (MK_COMB (@lem8402614 A B C P) (@lem8402613 A B C P _115319)). Qed.
Lemma lem8402616 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8402617 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1619 A B C P _115319) = (term1620 A B C P _115319).
Proof. exact (MK_COMB (@lem8402616) (@lem8402615 A B C P _115319)). Qed.
Lemma lem8402618 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term1613 A B C P _115319 clauses) = (term1604 A B C P _115319 clauses).
Proof. exact (eq_refl (term1613 A B C P _115319 clauses)). Qed.
Lemma lem8402619 {A B C P : Type'} (s : type1059 A B C P) (clauses : type1631 A B C P) : (s clauses) = (s clauses).
Proof. exact (eq_refl (s clauses)). Qed.
Lemma lem8402620 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) (clauses : type1631 A B C P) : (term1621 A B C P _115319 s clauses) = (term1622 A B C P _115319 s clauses).
Proof. exact (MK_COMB (@lem8402618 A B C P _115319 clauses) (@lem8402619 A B C P s clauses)). Qed.
Lemma lem8402621 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) (clauses : type1631 A B C P) : (term1622 A B C P _115319 s clauses) = (term1623 A B C P _115319 s clauses).
Proof. exact (eq_refl (term1622 A B C P _115319 s clauses)). Qed.
Lemma lem8402622 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) (clauses : type1631 A B C P) : (term1621 A B C P _115319 s clauses) = (term1623 A B C P _115319 s clauses).
Proof. exact (TRANS (@lem8402620 A B C P _115319 s clauses) (@lem8402621 A B C P _115319 s clauses)). Qed.
Lemma lem8402623 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) : (term1624 A B C P _115319 s) = (term1625 A B C P _115319 s).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8402622 A B C P _115319 s clauses)). Qed.
Lemma lem8402624 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8402625 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) : (term1626 A B C P _115319 s) = (term1627 A B C P _115319 s).
Proof. exact (MK_COMB (@lem8402624 A B C P) (@lem8402623 A B C P _115319 s)). Qed.
Lemma lem8402626 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1628 A B C P _115319) = (term1629 A B C P _115319).
Proof. exact (fun_ext (fun s : type1059 A B C P => @lem8402625 A B C P _115319 s)). Qed.
Lemma lem8402627 {A B C P : Type'} : (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A)) = (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A)).
Proof. exact (eq_refl (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A))). Qed.
Lemma lem8402628 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1611 A B C P _115319) = (term1630 A B C P _115319).
Proof. exact (MK_COMB (@lem8402627 A B C P) (@lem8402626 A B C P _115319)). Qed.
Lemma lem8402629 {A B C P : Type'} (_115319 : type1061 A B C P) : ((term1610 A B C P _115319) = (term1611 A B C P _115319)) = ((term1607 A B C P _115319) = (term1630 A B C P _115319)).
Proof. exact (MK_COMB (@lem8402617 A B C P _115319) (@lem8402628 A B C P _115319)). Qed.
Lemma lem8402630 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1607 A B C P _115319) = (term1630 A B C P _115319).
Proof. exact (EQ_MP (@lem8402629 A B C P _115319) (@lem8402604 A B C P _115319)). Qed.
Lemma lem8402632 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8402633 {A B C P : Type'} (P' : type1055 A B C P) : (term1631 A B C P P') = (term1632 A B C P P').
Proof. exact (@lem8402632 (type1631 A B C P) (type1499 A B C P) P'). Qed.
Lemma lem8402634 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) : (term1633 A B C P _115319 s) = (term1634 A B C P _115319 s).
Proof. exact (@lem8402633 A B C P (term1635 A B C P _115319 s)). Qed.
Lemma lem8402635 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) (clauses : type1631 A B C P) : (term1636 A B C P _115319 s clauses) = (term1637 A B C P _115319 s clauses).
Proof. exact (eq_refl (term1636 A B C P _115319 s clauses)). Qed.
Lemma lem8402636 {A B C P : Type'} (t : type1499 A B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8402637 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) (clauses : type1631 A B C P) (t : type1499 A B C P) : (term1638 A B C P _115319 s clauses t) = (term1639 A B C P _115319 s clauses t).
Proof. exact (MK_COMB (@lem8402635 A B C P _115319 s clauses) (@lem8402636 A B C P t)). Qed.
Lemma lem8402638 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) (clauses : type1631 A B C P) (t : type1499 A B C P) : (term1639 A B C P _115319 s clauses t) = (term1640 A B C P _115319 s clauses t).
Proof. exact (eq_refl (term1639 A B C P _115319 s clauses t)). Qed.
Lemma lem8402639 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) (clauses : type1631 A B C P) (t : type1499 A B C P) : (term1638 A B C P _115319 s clauses t) = (term1640 A B C P _115319 s clauses t).
Proof. exact (TRANS (@lem8402637 A B C P _115319 s clauses t) (@lem8402638 A B C P _115319 s clauses t)). Qed.
Lemma lem8402640 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) (clauses : type1631 A B C P) : (term1641 A B C P _115319 s clauses) = (term1637 A B C P _115319 s clauses).
Proof. exact (fun_ext (fun t : type1499 A B C P => @lem8402639 A B C P _115319 s clauses t)). Qed.
Lemma lem8402641 {A B C P : Type'} : (@ex (C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> C -> (P -> A) -> B)) = (@ex (C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> C -> (P -> A) -> B))). Qed.
Lemma lem8402642 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) (clauses : type1631 A B C P) : (term1642 A B C P _115319 s clauses) = (term1623 A B C P _115319 s clauses).
Proof. exact (MK_COMB (@lem8402641 A B C P) (@lem8402640 A B C P _115319 s clauses)). Qed.
Lemma lem8402643 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) : (term1643 A B C P _115319 s) = (term1625 A B C P _115319 s).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8402642 A B C P _115319 s clauses)). Qed.
Lemma lem8402644 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8402645 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) : (term1633 A B C P _115319 s) = (term1627 A B C P _115319 s).
Proof. exact (MK_COMB (@lem8402644 A B C P) (@lem8402643 A B C P _115319 s)). Qed.
Lemma lem8402646 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8402647 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) : (term1644 A B C P _115319 s) = (term1645 A B C P _115319 s).
Proof. exact (MK_COMB (@lem8402646) (@lem8402645 A B C P _115319 s)). Qed.
Lemma lem8402648 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) (clauses : type1631 A B C P) : (term1636 A B C P _115319 s clauses) = (term1637 A B C P _115319 s clauses).
Proof. exact (eq_refl (term1636 A B C P _115319 s clauses)). Qed.
Lemma lem8402649 {A B C P : Type'} (t : type1060 A B C P) (clauses : type1631 A B C P) : (t clauses) = (t clauses).
Proof. exact (eq_refl (t clauses)). Qed.
Lemma lem8402650 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) (t : type1060 A B C P) (clauses : type1631 A B C P) : (term1646 A B C P _115319 s t clauses) = (term1647 A B C P _115319 s t clauses).
Proof. exact (MK_COMB (@lem8402648 A B C P _115319 s clauses) (@lem8402649 A B C P t clauses)). Qed.
Lemma lem8402651 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) (t : type1060 A B C P) (clauses : type1631 A B C P) : (term1647 A B C P _115319 s t clauses) = (term1648 A B C P _115319 s t clauses).
Proof. exact (eq_refl (term1647 A B C P _115319 s t clauses)). Qed.
Lemma lem8402652 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) (t : type1060 A B C P) (clauses : type1631 A B C P) : (term1646 A B C P _115319 s t clauses) = (term1648 A B C P _115319 s t clauses).
Proof. exact (TRANS (@lem8402650 A B C P _115319 s t clauses) (@lem8402651 A B C P _115319 s t clauses)). Qed.
Lemma lem8402653 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) (t : type1060 A B C P) : (term1649 A B C P _115319 s t) = (term1650 A B C P _115319 s t).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8402652 A B C P _115319 s t clauses)). Qed.
Lemma lem8402654 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8402655 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) (t : type1060 A B C P) : (term1651 A B C P _115319 s t) = (term1652 A B C P _115319 s t).
Proof. exact (MK_COMB (@lem8402654 A B C P) (@lem8402653 A B C P _115319 s t)). Qed.
Lemma lem8402656 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) : (term1653 A B C P _115319 s) = (term1654 A B C P _115319 s).
Proof. exact (fun_ext (fun t : type1060 A B C P => @lem8402655 A B C P _115319 s t)). Qed.
Lemma lem8402657 {A B C P : Type'} : (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> C -> (P -> A) -> B)) = (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> C -> (P -> A) -> B))). Qed.
Lemma lem8402658 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) : (term1634 A B C P _115319 s) = (term1655 A B C P _115319 s).
Proof. exact (MK_COMB (@lem8402657 A B C P) (@lem8402656 A B C P _115319 s)). Qed.
Lemma lem8402659 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) : ((term1633 A B C P _115319 s) = (term1634 A B C P _115319 s)) = ((term1627 A B C P _115319 s) = (term1655 A B C P _115319 s)).
Proof. exact (MK_COMB (@lem8402647 A B C P _115319 s) (@lem8402658 A B C P _115319 s)). Qed.
Lemma lem8402660 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) : (term1627 A B C P _115319 s) = (term1655 A B C P _115319 s).
Proof. exact (EQ_MP (@lem8402659 A B C P _115319 s) (@lem8402634 A B C P _115319 s)). Qed.
Lemma lem8402661 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1629 A B C P _115319) = (term1656 A B C P _115319).
Proof. exact (fun_ext (fun s : type1059 A B C P => @lem8402660 A B C P _115319 s)). Qed.
Lemma lem8402662 {A B C P : Type'} : (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A)) = (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A)).
Proof. exact (eq_refl (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A))). Qed.
Lemma lem8402663 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1630 A B C P _115319) = (term1657 A B C P _115319).
Proof. exact (MK_COMB (@lem8402662 A B C P) (@lem8402661 A B C P _115319)). Qed.
Lemma lem8402664 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1607 A B C P _115319) = (term1657 A B C P _115319).
Proof. exact (TRANS (@lem8402630 A B C P _115319) (@lem8402663 A B C P _115319)). Qed.
Lemma lem8402665 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1465 A B C P _115319) = (term1657 A B C P _115319).
Proof. exact (TRANS (@lem8402600 A B C P _115319) (@lem8402664 A B C P _115319)). Qed.
Lemma lem8402666 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8402667 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1467 A B C P _115319) = (term1658 A B C P _115319).
Proof. exact (MK_COMB (@lem8402666) (@lem8402665 A B C P _115319)). Qed.
Lemma lem8402668 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1470 A B C P _115319) = (term1470 A B C P _115319).
Proof. exact (eq_refl (term1470 A B C P _115319)). Qed.
Lemma lem8402669 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1471 A B C P _115319) = (term1659 A B C P _115319).
Proof. exact (MK_COMB (@lem8402667 A B C P _115319) (@lem8402668 A B C P _115319)). Qed.
Lemma lem8402671 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1332 A P Q) = (term1333 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8402672 {A B C P : Type'} (P' : type264 A B C P) (Q : Prop) : (term1660 A B C P P' Q) = (term1661 A B C P P' Q).
Proof. exact (@lem8402671 (type1059 A B C P) P' Q). Qed.
Lemma lem8402673 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1662 A B C P _115319) = (term1663 A B C P _115319).
Proof. exact (@lem8402672 A B C P (term1656 A B C P _115319) (term1470 A B C P _115319)). Qed.
Lemma lem8402674 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) : (term1664 A B C P _115319 s) = (term1655 A B C P _115319 s).
Proof. exact (eq_refl (term1664 A B C P _115319 s)). Qed.
Lemma lem8402675 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1665 A B C P _115319) = (term1656 A B C P _115319).
Proof. exact (fun_ext (fun s : type1059 A B C P => @lem8402674 A B C P _115319 s)). Qed.
Lemma lem8402676 {A B C P : Type'} : (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A)) = (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A)).
Proof. exact (eq_refl (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A))). Qed.
Lemma lem8402677 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1666 A B C P _115319) = (term1657 A B C P _115319).
Proof. exact (MK_COMB (@lem8402676 A B C P) (@lem8402675 A B C P _115319)). Qed.
Lemma lem8402678 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8402679 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1667 A B C P _115319) = (term1658 A B C P _115319).
Proof. exact (MK_COMB (@lem8402678) (@lem8402677 A B C P _115319)). Qed.
Lemma lem8402680 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1470 A B C P _115319) = (term1470 A B C P _115319).
Proof. exact (eq_refl (term1470 A B C P _115319)). Qed.
Lemma lem8402681 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1662 A B C P _115319) = (term1659 A B C P _115319).
Proof. exact (MK_COMB (@lem8402679 A B C P _115319) (@lem8402680 A B C P _115319)). Qed.
Lemma lem8402682 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8402683 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1668 A B C P _115319) = (term1669 A B C P _115319).
Proof. exact (MK_COMB (@lem8402682) (@lem8402681 A B C P _115319)). Qed.
Lemma lem8402684 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) : (term1664 A B C P _115319 s) = (term1655 A B C P _115319 s).
Proof. exact (eq_refl (term1664 A B C P _115319 s)). Qed.
Lemma lem8402685 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8402686 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) : (term1670 A B C P _115319 s) = (term1671 A B C P _115319 s).
Proof. exact (MK_COMB (@lem8402685) (@lem8402684 A B C P _115319 s)). Qed.
Lemma lem8402687 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1470 A B C P _115319) = (term1470 A B C P _115319).
Proof. exact (eq_refl (term1470 A B C P _115319)). Qed.
Lemma lem8402688 {A B C P : Type'} (s : type1059 A B C P) (_115319 : type1061 A B C P) : (term1672 A B C P s _115319) = (term1673 A B C P s _115319).
Proof. exact (MK_COMB (@lem8402686 A B C P _115319 s) (@lem8402687 A B C P _115319)). Qed.
Lemma lem8402689 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1674 A B C P _115319) = (term1675 A B C P _115319).
Proof. exact (fun_ext (fun s : type1059 A B C P => @lem8402688 A B C P s _115319)). Qed.
Lemma lem8402690 {A B C P : Type'} : (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A)) = (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A)).
Proof. exact (eq_refl (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A))). Qed.
Lemma lem8402691 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1663 A B C P _115319) = (term1676 A B C P _115319).
Proof. exact (MK_COMB (@lem8402690 A B C P) (@lem8402689 A B C P _115319)). Qed.
Lemma lem8402692 {A B C P : Type'} (_115319 : type1061 A B C P) : ((term1662 A B C P _115319) = (term1663 A B C P _115319)) = ((term1659 A B C P _115319) = (term1676 A B C P _115319)).
Proof. exact (MK_COMB (@lem8402683 A B C P _115319) (@lem8402691 A B C P _115319)). Qed.
Lemma lem8402693 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1659 A B C P _115319) = (term1676 A B C P _115319).
Proof. exact (EQ_MP (@lem8402692 A B C P _115319) (@lem8402673 A B C P _115319)). Qed.
Lemma lem8402695 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1332 A P Q) = (term1333 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8402696 {A B C P : Type'} (P' : type265 A B C P) (Q : Prop) : (term1677 A B C P P' Q) = (term1678 A B C P P' Q).
Proof. exact (@lem8402695 (type1060 A B C P) P' Q). Qed.
Lemma lem8402697 {A B C P : Type'} (s : type1059 A B C P) (_115319 : type1061 A B C P) : (term1679 A B C P s _115319) = (term1680 A B C P s _115319).
Proof. exact (@lem8402696 A B C P (term1654 A B C P _115319 s) (term1470 A B C P _115319)). Qed.
Lemma lem8402698 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) (t : type1060 A B C P) : (term1681 A B C P _115319 s t) = (term1652 A B C P _115319 s t).
Proof. exact (eq_refl (term1681 A B C P _115319 s t)). Qed.
Lemma lem8402699 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) : (term1682 A B C P _115319 s) = (term1654 A B C P _115319 s).
Proof. exact (fun_ext (fun t : type1060 A B C P => @lem8402698 A B C P _115319 s t)). Qed.
Lemma lem8402700 {A B C P : Type'} : (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> C -> (P -> A) -> B)) = (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> C -> (P -> A) -> B))). Qed.
Lemma lem8402701 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) : (term1683 A B C P _115319 s) = (term1655 A B C P _115319 s).
Proof. exact (MK_COMB (@lem8402700 A B C P) (@lem8402699 A B C P _115319 s)). Qed.
Lemma lem8402702 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8402703 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) : (term1684 A B C P _115319 s) = (term1671 A B C P _115319 s).
Proof. exact (MK_COMB (@lem8402702) (@lem8402701 A B C P _115319 s)). Qed.
Lemma lem8402704 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1470 A B C P _115319) = (term1470 A B C P _115319).
Proof. exact (eq_refl (term1470 A B C P _115319)). Qed.
Lemma lem8402705 {A B C P : Type'} (s : type1059 A B C P) (_115319 : type1061 A B C P) : (term1679 A B C P s _115319) = (term1673 A B C P s _115319).
Proof. exact (MK_COMB (@lem8402703 A B C P _115319 s) (@lem8402704 A B C P _115319)). Qed.
Lemma lem8402706 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8402707 {A B C P : Type'} (s : type1059 A B C P) (_115319 : type1061 A B C P) : (term1685 A B C P s _115319) = (term1686 A B C P s _115319).
Proof. exact (MK_COMB (@lem8402706) (@lem8402705 A B C P s _115319)). Qed.
Lemma lem8402708 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) (t : type1060 A B C P) : (term1681 A B C P _115319 s t) = (term1652 A B C P _115319 s t).
Proof. exact (eq_refl (term1681 A B C P _115319 s t)). Qed.
Lemma lem8402709 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8402710 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1059 A B C P) (t : type1060 A B C P) : (term1687 A B C P _115319 s t) = (term1688 A B C P _115319 s t).
Proof. exact (MK_COMB (@lem8402709) (@lem8402708 A B C P _115319 s t)). Qed.
Lemma lem8402711 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1470 A B C P _115319) = (term1470 A B C P _115319).
Proof. exact (eq_refl (term1470 A B C P _115319)). Qed.
Lemma lem8402712 {A B C P : Type'} (s : type1059 A B C P) (t : type1060 A B C P) (_115319 : type1061 A B C P) : (term1689 A B C P s t _115319) = (term1690 A B C P s t _115319).
Proof. exact (MK_COMB (@lem8402710 A B C P _115319 s t) (@lem8402711 A B C P _115319)). Qed.
Lemma lem8402713 {A B C P : Type'} (s : type1059 A B C P) (_115319 : type1061 A B C P) : (term1691 A B C P s _115319) = (term1692 A B C P s _115319).
Proof. exact (fun_ext (fun t : type1060 A B C P => @lem8402712 A B C P s t _115319)). Qed.
Lemma lem8402714 {A B C P : Type'} : (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> C -> (P -> A) -> B)) = (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> C -> (P -> A) -> B))). Qed.
Lemma lem8402715 {A B C P : Type'} (s : type1059 A B C P) (_115319 : type1061 A B C P) : (term1680 A B C P s _115319) = (term1693 A B C P s _115319).
Proof. exact (MK_COMB (@lem8402714 A B C P) (@lem8402713 A B C P s _115319)). Qed.
Lemma lem8402716 {A B C P : Type'} (s : type1059 A B C P) (_115319 : type1061 A B C P) : ((term1679 A B C P s _115319) = (term1680 A B C P s _115319)) = ((term1673 A B C P s _115319) = (term1693 A B C P s _115319)).
Proof. exact (MK_COMB (@lem8402707 A B C P s _115319) (@lem8402715 A B C P s _115319)). Qed.
Lemma lem8402717 {A B C P : Type'} (s : type1059 A B C P) (_115319 : type1061 A B C P) : (term1673 A B C P s _115319) = (term1693 A B C P s _115319).
Proof. exact (EQ_MP (@lem8402716 A B C P s _115319) (@lem8402697 A B C P s _115319)). Qed.
Lemma lem8402718 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1675 A B C P _115319) = (term1694 A B C P _115319).
Proof. exact (fun_ext (fun s : type1059 A B C P => @lem8402717 A B C P s _115319)). Qed.
Lemma lem8402719 {A B C P : Type'} : (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A)) = (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A)).
Proof. exact (eq_refl (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> ((prod ((P -> A) -> A) (C -> (P -> A) -> B)) -> Prop) -> (P -> A) -> A))). Qed.
Lemma lem8402720 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1676 A B C P _115319) = (term1695 A B C P _115319).
Proof. exact (MK_COMB (@lem8402719 A B C P) (@lem8402718 A B C P _115319)). Qed.
Lemma lem8402721 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1659 A B C P _115319) = (term1695 A B C P _115319).
Proof. exact (TRANS (@lem8402693 A B C P _115319) (@lem8402720 A B C P _115319)). Qed.
Lemma lem8402722 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1471 A B C P _115319) = (term1695 A B C P _115319).
Proof. exact (TRANS (@lem8402669 A B C P _115319) (@lem8402721 A B C P _115319)). Qed.
Lemma lem8402723 {A B C P : Type'} (_115319 : type1061 A B C P) : (term1403 A B C P _115319) = (term1695 A B C P _115319).
Proof. exact (TRANS (@lem8402417 A B C P _115319) (@lem8402722 A B C P _115319)). Qed.
Lemma lem8402724 {A B C P : Type'} (_115319 : type1061 A B C P) : (term927 A B C P _115319) = (term1695 A B C P _115319).
Proof. exact (TRANS (@lem8401936 A B C P _115319) (@lem8402723 A B C P _115319)). Qed.
Lemma lem8402725 {A B C P : Type'} (_115319 : type1061 A B C P) (h1 : term927 A B C P _115319) : term1695 A B C P _115319.
Proof. exact (EQ_MP (@lem8402724 A B C P _115319) (@lem8401032 A B C P _115319 h1)). Qed.
Lemma lem8402729 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term330 A B C P f clauses s t c) = (term330 A B C P f clauses s t c).
Proof. exact (eq_refl (term330 A B C P f clauses s t c)). Qed.
Lemma lem8402730 {A B C : Type'} (P : type864 A B C) : (term1696 A B C P) = (term1697 A B C P).
Proof. exact (@lem18392 (type1506 A B C) P). Qed.
Lemma lem8402731 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term1698 A B C P f clauses s c) = (term1699 A B C P f clauses s c).
Proof. exact (@lem8402730 A B C (term331 A B C P f clauses s c)). Qed.
Lemma lem8402732 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term1700 A B C P f clauses s c t) = (term330 A B C P f clauses s t c).
Proof. exact (eq_refl (term1700 A B C P f clauses s c t)). Qed.
Lemma lem8402733 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8402735 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term1701 A B C P f clauses s c t) = (term1702 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8402733) (@lem8402732 A B C P f clauses s t c)). Qed.
Lemma lem8402736 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term1703 A B C P f clauses s c) = (term1704 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8402735 A B C P f clauses s t c)). Qed.
Lemma lem8402737 {A B C : Type'} : (@ex (C -> (A -> B) -> B)) = (@ex (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> B))). Qed.
Lemma lem8402738 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term1699 A B C P f clauses s c) = (term1705 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8402737 A B C) (@lem8402736 A B C P f clauses s c)). Qed.
Lemma lem8402739 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term1698 A B C P f clauses s c) = (term1705 A B C P f clauses s c).
Proof. exact (TRANS (@lem8402731 A B C P f clauses s c) (@lem8402738 A B C P f clauses s c)). Qed.
Lemma lem8402740 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term331 A B C P f clauses s c) = (term331 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8402729 A B C P f clauses s t c)). Qed.
Lemma lem8402741 {A B C : Type'} : (@all (C -> (A -> B) -> B)) = (@all (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@all (C -> (A -> B) -> B))). Qed.
Lemma lem8402742 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term332 A B C P f clauses s c) = (term332 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8402741 A B C) (@lem8402740 A B C P f clauses s c)). Qed.
Lemma lem8402743 {A B P : Type'} (P' : type116 A B P) : (term1706 A B P P') = (term1707 A B P P').
Proof. exact (@lem18392 (type558 A B P) P'). Qed.
Lemma lem8402744 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1708 A B C P f clauses c) = (term1709 A B C P f clauses c).
Proof. exact (@lem8402743 A B P (term333 A B C P f clauses c)). Qed.
Lemma lem8402745 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term1710 A B C P f clauses c s) = (term332 A B C P f clauses s c).
Proof. exact (eq_refl (term1710 A B C P f clauses c s)). Qed.
Lemma lem8402746 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8402747 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term1711 A B C P f clauses c s) = (term1698 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8402746) (@lem8402745 A B C P f clauses s c)). Qed.
Lemma lem8402748 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term1711 A B C P f clauses c s) = (term1705 A B C P f clauses s c).
Proof. exact (TRANS (@lem8402747 A B C P f clauses s c) (@lem8402739 A B C P f clauses s c)). Qed.
Lemma lem8402749 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1712 A B C P f clauses c) = (term1713 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8402748 A B C P f clauses s c)). Qed.
Lemma lem8402750 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8402751 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1709 A B C P f clauses c) = (term1714 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8402750 A B P) (@lem8402749 A B C P f clauses c)). Qed.
Lemma lem8402752 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1708 A B C P f clauses c) = (term1714 A B C P f clauses c).
Proof. exact (TRANS (@lem8402744 A B C P f clauses c) (@lem8402751 A B C P f clauses c)). Qed.
Lemma lem8402753 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term333 A B C P f clauses c) = (term333 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8402742 A B C P f clauses s c)). Qed.
Lemma lem8402754 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8402755 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term334 A B C P f clauses c) = (term334 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8402754 A B P) (@lem8402753 A B C P f clauses c)). Qed.
Lemma lem8402757 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) (f : type1167 A B C P) : (term1715 A B C P _115318 clauses c f) = (term1715 A B C P _115318 clauses c f).
Proof. exact (eq_refl (term1715 A B C P _115318 clauses c f)). Qed.
Lemma lem8402758 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1716 A B C P _115318 f clauses c) = (term1716 A B C P _115318 f clauses c).
Proof. exact (MK_COMB (@lem8402757 A B C P _115318 clauses c f) (@lem8402755 A B C P f clauses c)). Qed.
Lemma lem8402760 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) (f : type1167 A B C P) : (term1717 A B C P _115318 clauses c f) = (term1717 A B C P _115318 clauses c f).
Proof. exact (eq_refl (term1717 A B C P _115318 clauses c f)). Qed.
Lemma lem8402761 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1718 A B C P _115318 f clauses c) = (term1719 A B C P _115318 f clauses c).
Proof. exact (MK_COMB (@lem8402760 A B C P _115318 clauses c f) (@lem8402752 A B C P f clauses c)). Qed.
Lemma lem8402762 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8402763 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1720 A B C P _115318 f clauses c) = (term1721 A B C P _115318 f clauses c).
Proof. exact (MK_COMB (@lem8402762) (@lem8402761 A B C P _115318 f clauses c)). Qed.
Lemma lem8402764 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1722 A B C P _115318 f clauses c) = (term1723 A B C P _115318 f clauses c).
Proof. exact (MK_COMB (@lem8402763 A B C P _115318 f clauses c) (@lem8402758 A B C P _115318 f clauses c)). Qed.
Lemma lem8402765 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : ((_115318 clauses c f) = (term334 A B C P f clauses c)) = (term1722 A B C P _115318 f clauses c).
Proof. exact (@lem17784 (_115318 clauses c f) (term334 A B C P f clauses c)). Qed.
Lemma lem8402766 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : ((_115318 clauses c f) = (term334 A B C P f clauses c)) = (term1723 A B C P _115318 f clauses c).
Proof. exact (TRANS (@lem8402765 A B C P _115318 f clauses c) (@lem8402764 A B C P _115318 f clauses c)). Qed.
Lemma lem8402767 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term821 A B C P _115318 clauses c) = (term1724 A B C P _115318 clauses c).
Proof. exact (fun_ext (fun f : type1167 A B C P => @lem8402766 A B C P _115318 f clauses c)). Qed.
Lemma lem8402768 {A B C P : Type'} : (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)) = (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop))). Qed.
Lemma lem8402769 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term822 A B C P _115318 clauses c) = (term1725 A B C P _115318 clauses c).
Proof. exact (MK_COMB (@lem8402768 A B C P) (@lem8402767 A B C P _115318 clauses c)). Qed.
Lemma lem8402770 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term823 A B C P _115318 clauses) = (term1726 A B C P _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8402769 A B C P _115318 clauses c)). Qed.
Lemma lem8402771 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8402772 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term824 A B C P _115318 clauses) = (term1727 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8402771 C) (@lem8402770 A B C P _115318 clauses)). Qed.
Lemma lem8402773 {A B C P : Type'} (_115318 : type1049 A B C P) : (term825 A B C P _115318) = (term1728 A B C P _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8402772 A B C P _115318 clauses)). Qed.
Lemma lem8402774 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8402775 {A B C P : Type'} (_115318 : type1049 A B C P) : (term826 A B C P _115318) = (term1729 A B C P _115318).
Proof. exact (MK_COMB (@lem8402774 A B C P) (@lem8402773 A B C P _115318)). Qed.
Lemma lem8402785 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term1070 A P Q) = (term1071 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem8402786 {A B C P : Type'} (P' : type290 A B C P) (Q : type290 A B C P) : (term1730 A B C P P' Q) = (term1731 A B C P P' Q).
Proof. exact (@lem8402785 (type1167 A B C P) P' Q). Qed.
Lemma lem8402787 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1732 A B C P _115318 clauses c) = (term1733 A B C P _115318 clauses c).
Proof. exact (@lem8402786 A B C P (term1734 A B C P _115318 clauses c) (term1735 A B C P _115318 clauses c)). Qed.
Lemma lem8402788 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1736 A B C P _115318 clauses c f) = (term1719 A B C P _115318 f clauses c).
Proof. exact (eq_refl (term1736 A B C P _115318 clauses c f)). Qed.
Lemma lem8402789 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8402790 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1737 A B C P _115318 clauses c f) = (term1721 A B C P _115318 f clauses c).
Proof. exact (MK_COMB (@lem8402789) (@lem8402788 A B C P _115318 f clauses c)). Qed.
Lemma lem8402791 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1738 A B C P _115318 clauses c f) = (term1716 A B C P _115318 f clauses c).
Proof. exact (eq_refl (term1738 A B C P _115318 clauses c f)). Qed.
Lemma lem8402792 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1739 A B C P _115318 clauses c f) = (term1723 A B C P _115318 f clauses c).
Proof. exact (MK_COMB (@lem8402790 A B C P _115318 f clauses c) (@lem8402791 A B C P _115318 f clauses c)). Qed.
Lemma lem8402793 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1740 A B C P _115318 clauses c) = (term1724 A B C P _115318 clauses c).
Proof. exact (fun_ext (fun f : type1167 A B C P => @lem8402792 A B C P _115318 f clauses c)). Qed.
Lemma lem8402794 {A B C P : Type'} : (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)) = (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop))). Qed.
Lemma lem8402795 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1732 A B C P _115318 clauses c) = (term1725 A B C P _115318 clauses c).
Proof. exact (MK_COMB (@lem8402794 A B C P) (@lem8402793 A B C P _115318 clauses c)). Qed.
Lemma lem8402796 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8402797 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1741 A B C P _115318 clauses c) = (term1742 A B C P _115318 clauses c).
Proof. exact (MK_COMB (@lem8402796) (@lem8402795 A B C P _115318 clauses c)). Qed.
Lemma lem8402798 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1736 A B C P _115318 clauses c f) = (term1719 A B C P _115318 f clauses c).
Proof. exact (eq_refl (term1736 A B C P _115318 clauses c f)). Qed.
Lemma lem8402799 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1743 A B C P _115318 clauses c) = (term1734 A B C P _115318 clauses c).
Proof. exact (fun_ext (fun f : type1167 A B C P => @lem8402798 A B C P _115318 f clauses c)). Qed.
Lemma lem8402800 {A B C P : Type'} : (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)) = (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop))). Qed.
Lemma lem8402801 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1744 A B C P _115318 clauses c) = (term1745 A B C P _115318 clauses c).
Proof. exact (MK_COMB (@lem8402800 A B C P) (@lem8402799 A B C P _115318 clauses c)). Qed.
Lemma lem8402802 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8402803 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1746 A B C P _115318 clauses c) = (term1747 A B C P _115318 clauses c).
Proof. exact (MK_COMB (@lem8402802) (@lem8402801 A B C P _115318 clauses c)). Qed.
Lemma lem8402804 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1738 A B C P _115318 clauses c f) = (term1716 A B C P _115318 f clauses c).
Proof. exact (eq_refl (term1738 A B C P _115318 clauses c f)). Qed.
Lemma lem8402805 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1748 A B C P _115318 clauses c) = (term1735 A B C P _115318 clauses c).
Proof. exact (fun_ext (fun f : type1167 A B C P => @lem8402804 A B C P _115318 f clauses c)). Qed.
Lemma lem8402806 {A B C P : Type'} : (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)) = (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop))). Qed.
Lemma lem8402807 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1749 A B C P _115318 clauses c) = (term1750 A B C P _115318 clauses c).
Proof. exact (MK_COMB (@lem8402806 A B C P) (@lem8402805 A B C P _115318 clauses c)). Qed.
Lemma lem8402808 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1733 A B C P _115318 clauses c) = (term1751 A B C P _115318 clauses c).
Proof. exact (MK_COMB (@lem8402803 A B C P _115318 clauses c) (@lem8402807 A B C P _115318 clauses c)). Qed.
Lemma lem8402809 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : ((term1732 A B C P _115318 clauses c) = (term1733 A B C P _115318 clauses c)) = ((term1725 A B C P _115318 clauses c) = (term1751 A B C P _115318 clauses c)).
Proof. exact (MK_COMB (@lem8402797 A B C P _115318 clauses c) (@lem8402808 A B C P _115318 clauses c)). Qed.
Lemma lem8402810 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1725 A B C P _115318 clauses c) = (term1751 A B C P _115318 clauses c).
Proof. exact (EQ_MP (@lem8402809 A B C P _115318 clauses c) (@lem8402787 A B C P _115318 clauses c)). Qed.
Lemma lem8402931 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1726 A B C P _115318 clauses) = (term1752 A B C P _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8402810 A B C P _115318 clauses c)). Qed.
Lemma lem8402932 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8402933 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1727 A B C P _115318 clauses) = (term1753 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8402932 C) (@lem8402931 A B C P _115318 clauses)). Qed.
Lemma lem8402935 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term1070 A P Q) = (term1071 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem8402936 {C : Type'} (P : C -> Prop) (Q : C -> Prop) : (term1070 C P Q) = (term1071 C P Q).
Proof. exact (@lem8402935 C P Q). Qed.
Lemma lem8402937 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1754 A B C P _115318 clauses) = (term1755 A B C P _115318 clauses).
Proof. exact (@lem8402936 C (term1756 A B C P _115318 clauses) (term1757 A B C P _115318 clauses)). Qed.
Lemma lem8402938 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1758 A B C P _115318 clauses c) = (term1745 A B C P _115318 clauses c).
Proof. exact (eq_refl (term1758 A B C P _115318 clauses c)). Qed.
Lemma lem8402939 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8402940 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1759 A B C P _115318 clauses c) = (term1747 A B C P _115318 clauses c).
Proof. exact (MK_COMB (@lem8402939) (@lem8402938 A B C P _115318 clauses c)). Qed.
Lemma lem8402941 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1760 A B C P _115318 clauses c) = (term1750 A B C P _115318 clauses c).
Proof. exact (eq_refl (term1760 A B C P _115318 clauses c)). Qed.
Lemma lem8402942 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1761 A B C P _115318 clauses c) = (term1751 A B C P _115318 clauses c).
Proof. exact (MK_COMB (@lem8402940 A B C P _115318 clauses c) (@lem8402941 A B C P _115318 clauses c)). Qed.
Lemma lem8402943 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1762 A B C P _115318 clauses) = (term1752 A B C P _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8402942 A B C P _115318 clauses c)). Qed.
Lemma lem8402944 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8402945 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1754 A B C P _115318 clauses) = (term1753 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8402944 C) (@lem8402943 A B C P _115318 clauses)). Qed.
Lemma lem8402946 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8402947 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1763 A B C P _115318 clauses) = (term1764 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8402946) (@lem8402945 A B C P _115318 clauses)). Qed.
Lemma lem8402948 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1758 A B C P _115318 clauses c) = (term1745 A B C P _115318 clauses c).
Proof. exact (eq_refl (term1758 A B C P _115318 clauses c)). Qed.
Lemma lem8402949 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1765 A B C P _115318 clauses) = (term1756 A B C P _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8402948 A B C P _115318 clauses c)). Qed.
Lemma lem8402950 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8402951 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1766 A B C P _115318 clauses) = (term1767 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8402950 C) (@lem8402949 A B C P _115318 clauses)). Qed.
Lemma lem8402952 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8402953 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1768 A B C P _115318 clauses) = (term1769 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8402952) (@lem8402951 A B C P _115318 clauses)). Qed.
Lemma lem8402954 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1760 A B C P _115318 clauses c) = (term1750 A B C P _115318 clauses c).
Proof. exact (eq_refl (term1760 A B C P _115318 clauses c)). Qed.
Lemma lem8402955 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1770 A B C P _115318 clauses) = (term1757 A B C P _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8402954 A B C P _115318 clauses c)). Qed.
Lemma lem8402956 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8402957 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1771 A B C P _115318 clauses) = (term1772 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8402956 C) (@lem8402955 A B C P _115318 clauses)). Qed.
Lemma lem8402958 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1755 A B C P _115318 clauses) = (term1773 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8402953 A B C P _115318 clauses) (@lem8402957 A B C P _115318 clauses)). Qed.
Lemma lem8402959 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : ((term1754 A B C P _115318 clauses) = (term1755 A B C P _115318 clauses)) = ((term1753 A B C P _115318 clauses) = (term1773 A B C P _115318 clauses)).
Proof. exact (MK_COMB (@lem8402947 A B C P _115318 clauses) (@lem8402958 A B C P _115318 clauses)). Qed.
Lemma lem8402960 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1753 A B C P _115318 clauses) = (term1773 A B C P _115318 clauses).
Proof. exact (EQ_MP (@lem8402959 A B C P _115318 clauses) (@lem8402937 A B C P _115318 clauses)). Qed.
Lemma lem8403089 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1727 A B C P _115318 clauses) = (term1773 A B C P _115318 clauses).
Proof. exact (TRANS (@lem8402933 A B C P _115318 clauses) (@lem8402960 A B C P _115318 clauses)). Qed.
Lemma lem8403090 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1728 A B C P _115318) = (term1774 A B C P _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8403089 A B C P _115318 clauses)). Qed.
Lemma lem8403091 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8403092 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1729 A B C P _115318) = (term1775 A B C P _115318).
Proof. exact (MK_COMB (@lem8403091 A B C P) (@lem8403090 A B C P _115318)). Qed.
Lemma lem8403094 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term1070 A P Q) = (term1071 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem8403095 {A B C P : Type'} (P' : type1053 A B C P) (Q : type1053 A B C P) : (term1776 A B C P P' Q) = (term1777 A B C P P' Q).
Proof. exact (@lem8403094 (type1630 A B C P) P' Q). Qed.
Lemma lem8403096 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1778 A B C P _115318) = (term1779 A B C P _115318).
Proof. exact (@lem8403095 A B C P (term1780 A B C P _115318) (term1781 A B C P _115318)). Qed.
Lemma lem8403097 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1782 A B C P _115318 clauses) = (term1767 A B C P _115318 clauses).
Proof. exact (eq_refl (term1782 A B C P _115318 clauses)). Qed.
Lemma lem8403098 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8403099 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1783 A B C P _115318 clauses) = (term1769 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8403098) (@lem8403097 A B C P _115318 clauses)). Qed.
Lemma lem8403100 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1784 A B C P _115318 clauses) = (term1772 A B C P _115318 clauses).
Proof. exact (eq_refl (term1784 A B C P _115318 clauses)). Qed.
Lemma lem8403101 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1785 A B C P _115318 clauses) = (term1773 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8403099 A B C P _115318 clauses) (@lem8403100 A B C P _115318 clauses)). Qed.
Lemma lem8403102 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1786 A B C P _115318) = (term1774 A B C P _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8403101 A B C P _115318 clauses)). Qed.
Lemma lem8403103 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8403104 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1778 A B C P _115318) = (term1775 A B C P _115318).
Proof. exact (MK_COMB (@lem8403103 A B C P) (@lem8403102 A B C P _115318)). Qed.
Lemma lem8403105 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8403106 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1787 A B C P _115318) = (term1788 A B C P _115318).
Proof. exact (MK_COMB (@lem8403105) (@lem8403104 A B C P _115318)). Qed.
Lemma lem8403107 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1782 A B C P _115318 clauses) = (term1767 A B C P _115318 clauses).
Proof. exact (eq_refl (term1782 A B C P _115318 clauses)). Qed.
Lemma lem8403108 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1789 A B C P _115318) = (term1780 A B C P _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8403107 A B C P _115318 clauses)). Qed.
Lemma lem8403109 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8403110 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1790 A B C P _115318) = (term1791 A B C P _115318).
Proof. exact (MK_COMB (@lem8403109 A B C P) (@lem8403108 A B C P _115318)). Qed.
Lemma lem8403111 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8403112 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1792 A B C P _115318) = (term1793 A B C P _115318).
Proof. exact (MK_COMB (@lem8403111) (@lem8403110 A B C P _115318)). Qed.
Lemma lem8403113 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1784 A B C P _115318 clauses) = (term1772 A B C P _115318 clauses).
Proof. exact (eq_refl (term1784 A B C P _115318 clauses)). Qed.
Lemma lem8403114 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1794 A B C P _115318) = (term1781 A B C P _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8403113 A B C P _115318 clauses)). Qed.
Lemma lem8403115 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8403116 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1795 A B C P _115318) = (term1796 A B C P _115318).
Proof. exact (MK_COMB (@lem8403115 A B C P) (@lem8403114 A B C P _115318)). Qed.
Lemma lem8403117 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1779 A B C P _115318) = (term1797 A B C P _115318).
Proof. exact (MK_COMB (@lem8403112 A B C P _115318) (@lem8403116 A B C P _115318)). Qed.
Lemma lem8403118 {A B C P : Type'} (_115318 : type1049 A B C P) : ((term1778 A B C P _115318) = (term1779 A B C P _115318)) = ((term1775 A B C P _115318) = (term1797 A B C P _115318)).
Proof. exact (MK_COMB (@lem8403106 A B C P _115318) (@lem8403117 A B C P _115318)). Qed.
Lemma lem8403119 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1775 A B C P _115318) = (term1797 A B C P _115318).
Proof. exact (EQ_MP (@lem8403118 A B C P _115318) (@lem8403096 A B C P _115318)). Qed.
Lemma lem8403256 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1729 A B C P _115318) = (term1797 A B C P _115318).
Proof. exact (TRANS (@lem8403092 A B C P _115318) (@lem8403119 A B C P _115318)). Qed.
Lemma lem8403258 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1140 A P Q) = (term1141 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8403259 {A B P : Type'} (P' : Prop) (Q : type116 A B P) : (term1798 A B P P' Q) = (term1799 A B P P' Q).
Proof. exact (@lem8403258 (type558 A B P) P' Q). Qed.
Lemma lem8403260 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1800 A B C P _115318 f clauses c) = (term1801 A B C P _115318 f clauses c).
Proof. exact (@lem8403259 A B P (_115318 clauses c f) (term1713 A B C P f clauses c)). Qed.
Lemma lem8403261 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term1802 A B C P f clauses c s) = (term1705 A B C P f clauses s c).
Proof. exact (eq_refl (term1802 A B C P f clauses c s)). Qed.
Lemma lem8403262 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1803 A B C P f clauses c) = (term1713 A B C P f clauses c).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8403261 A B C P f clauses s c)). Qed.
Lemma lem8403263 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8403264 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1804 A B C P f clauses c) = (term1714 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8403263 A B P) (@lem8403262 A B C P f clauses c)). Qed.
Lemma lem8403265 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) (f : type1167 A B C P) : (term1717 A B C P _115318 clauses c f) = (term1717 A B C P _115318 clauses c f).
Proof. exact (eq_refl (term1717 A B C P _115318 clauses c f)). Qed.
Lemma lem8403266 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1800 A B C P _115318 f clauses c) = (term1719 A B C P _115318 f clauses c).
Proof. exact (MK_COMB (@lem8403265 A B C P _115318 clauses c f) (@lem8403264 A B C P f clauses c)). Qed.
Lemma lem8403267 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8403268 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1805 A B C P _115318 f clauses c) = (term1806 A B C P _115318 f clauses c).
Proof. exact (MK_COMB (@lem8403267) (@lem8403266 A B C P _115318 f clauses c)). Qed.
Lemma lem8403269 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term1802 A B C P f clauses c s) = (term1705 A B C P f clauses s c).
Proof. exact (eq_refl (term1802 A B C P f clauses c s)). Qed.
Lemma lem8403270 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) (f : type1167 A B C P) : (term1717 A B C P _115318 clauses c f) = (term1717 A B C P _115318 clauses c f).
Proof. exact (eq_refl (term1717 A B C P _115318 clauses c f)). Qed.
Lemma lem8403271 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term1807 A B C P _115318 f clauses c s) = (term1808 A B C P _115318 f clauses s c).
Proof. exact (MK_COMB (@lem8403270 A B C P _115318 clauses c f) (@lem8403269 A B C P f clauses s c)). Qed.
Lemma lem8403272 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1809 A B C P _115318 f clauses c) = (term1810 A B C P _115318 f clauses c).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8403271 A B C P _115318 f clauses s c)). Qed.
Lemma lem8403273 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8403274 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1801 A B C P _115318 f clauses c) = (term1811 A B C P _115318 f clauses c).
Proof. exact (MK_COMB (@lem8403273 A B P) (@lem8403272 A B C P _115318 f clauses c)). Qed.
Lemma lem8403275 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : ((term1800 A B C P _115318 f clauses c) = (term1801 A B C P _115318 f clauses c)) = ((term1719 A B C P _115318 f clauses c) = (term1811 A B C P _115318 f clauses c)).
Proof. exact (MK_COMB (@lem8403268 A B C P _115318 f clauses c) (@lem8403274 A B C P _115318 f clauses c)). Qed.
Lemma lem8403276 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1719 A B C P _115318 f clauses c) = (term1811 A B C P _115318 f clauses c).
Proof. exact (EQ_MP (@lem8403275 A B C P _115318 f clauses c) (@lem8403260 A B C P _115318 f clauses c)). Qed.
Lemma lem8403278 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1140 A P Q) = (term1141 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8403279 {A B C : Type'} (P : Prop) (Q : type864 A B C) : (term1812 A B C P Q) = (term1813 A B C P Q).
Proof. exact (@lem8403278 (type1506 A B C) P Q). Qed.
Lemma lem8403280 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term1814 A B C P _115318 f clauses s c) = (term1815 A B C P _115318 f clauses s c).
Proof. exact (@lem8403279 A B C (_115318 clauses c f) (term1704 A B C P f clauses s c)). Qed.
Lemma lem8403281 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term1816 A B C P f clauses s c t) = (term1702 A B C P f clauses s t c).
Proof. exact (eq_refl (term1816 A B C P f clauses s c t)). Qed.
Lemma lem8403282 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term1817 A B C P f clauses s c) = (term1704 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8403281 A B C P f clauses s t c)). Qed.
Lemma lem8403283 {A B C : Type'} : (@ex (C -> (A -> B) -> B)) = (@ex (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> B))). Qed.
Lemma lem8403284 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term1818 A B C P f clauses s c) = (term1705 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8403283 A B C) (@lem8403282 A B C P f clauses s c)). Qed.
Lemma lem8403285 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) (f : type1167 A B C P) : (term1717 A B C P _115318 clauses c f) = (term1717 A B C P _115318 clauses c f).
Proof. exact (eq_refl (term1717 A B C P _115318 clauses c f)). Qed.
Lemma lem8403286 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term1814 A B C P _115318 f clauses s c) = (term1808 A B C P _115318 f clauses s c).
Proof. exact (MK_COMB (@lem8403285 A B C P _115318 clauses c f) (@lem8403284 A B C P f clauses s c)). Qed.
Lemma lem8403287 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8403288 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term1819 A B C P _115318 f clauses s c) = (term1820 A B C P _115318 f clauses s c).
Proof. exact (MK_COMB (@lem8403287) (@lem8403286 A B C P _115318 f clauses s c)). Qed.
Lemma lem8403289 {A B C P : Type'} (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term1816 A B C P f clauses s c t) = (term1702 A B C P f clauses s t c).
Proof. exact (eq_refl (term1816 A B C P f clauses s c t)). Qed.
Lemma lem8403290 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) (f : type1167 A B C P) : (term1717 A B C P _115318 clauses c f) = (term1717 A B C P _115318 clauses c f).
Proof. exact (eq_refl (term1717 A B C P _115318 clauses c f)). Qed.
Lemma lem8403291 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term1821 A B C P _115318 f clauses s c t) = (term1822 A B C P _115318 f clauses s t c).
Proof. exact (MK_COMB (@lem8403290 A B C P _115318 clauses c f) (@lem8403289 A B C P f clauses s t c)). Qed.
Lemma lem8403292 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term1823 A B C P _115318 f clauses s c) = (term1824 A B C P _115318 f clauses s c).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8403291 A B C P _115318 f clauses s t c)). Qed.
Lemma lem8403293 {A B C : Type'} : (@ex (C -> (A -> B) -> B)) = (@ex (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> B))). Qed.
Lemma lem8403294 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term1815 A B C P _115318 f clauses s c) = (term1825 A B C P _115318 f clauses s c).
Proof. exact (MK_COMB (@lem8403293 A B C) (@lem8403292 A B C P _115318 f clauses s c)). Qed.
Lemma lem8403295 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : ((term1814 A B C P _115318 f clauses s c) = (term1815 A B C P _115318 f clauses s c)) = ((term1808 A B C P _115318 f clauses s c) = (term1825 A B C P _115318 f clauses s c)).
Proof. exact (MK_COMB (@lem8403288 A B C P _115318 f clauses s c) (@lem8403294 A B C P _115318 f clauses s c)). Qed.
Lemma lem8403296 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term1808 A B C P _115318 f clauses s c) = (term1825 A B C P _115318 f clauses s c).
Proof. exact (EQ_MP (@lem8403295 A B C P _115318 f clauses s c) (@lem8403280 A B C P _115318 f clauses s c)). Qed.
Lemma lem8403297 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1810 A B C P _115318 f clauses c) = (term1826 A B C P _115318 f clauses c).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8403296 A B C P _115318 f clauses s c)). Qed.
Lemma lem8403298 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8403299 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1811 A B C P _115318 f clauses c) = (term1827 A B C P _115318 f clauses c).
Proof. exact (MK_COMB (@lem8403298 A B P) (@lem8403297 A B C P _115318 f clauses c)). Qed.
Lemma lem8403300 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1719 A B C P _115318 f clauses c) = (term1827 A B C P _115318 f clauses c).
Proof. exact (TRANS (@lem8403276 A B C P _115318 f clauses c) (@lem8403299 A B C P _115318 f clauses c)). Qed.
Lemma lem8403301 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1734 A B C P _115318 clauses c) = (term1828 A B C P _115318 clauses c).
Proof. exact (fun_ext (fun f : type1167 A B C P => @lem8403300 A B C P _115318 f clauses c)). Qed.
Lemma lem8403302 {A B C P : Type'} : (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)) = (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop))). Qed.
Lemma lem8403303 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1745 A B C P _115318 clauses c) = (term1829 A B C P _115318 clauses c).
Proof. exact (MK_COMB (@lem8403302 A B C P) (@lem8403301 A B C P _115318 clauses c)). Qed.
Lemma lem8403305 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8403306 {A B C P : Type'} (P' : type286 A B C P) : (term1830 A B C P P') = (term1831 A B C P P').
Proof. exact (@lem8403305 (type1167 A B C P) (type558 A B P) P'). Qed.
Lemma lem8403307 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1832 A B C P _115318 clauses c) = (term1833 A B C P _115318 clauses c).
Proof. exact (@lem8403306 A B C P (term1834 A B C P _115318 clauses c)). Qed.
Lemma lem8403308 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1835 A B C P _115318 clauses c f) = (term1826 A B C P _115318 f clauses c).
Proof. exact (eq_refl (term1835 A B C P _115318 clauses c f)). Qed.
Lemma lem8403309 {A B P : Type'} (s : type558 A B P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8403310 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) (s : type558 A B P) : (term1836 A B C P _115318 clauses c f s) = (term1837 A B C P _115318 f clauses c s).
Proof. exact (MK_COMB (@lem8403308 A B C P _115318 f clauses c) (@lem8403309 A B P s)). Qed.
Lemma lem8403311 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term1837 A B C P _115318 f clauses c s) = (term1825 A B C P _115318 f clauses s c).
Proof. exact (eq_refl (term1837 A B C P _115318 f clauses c s)). Qed.
Lemma lem8403312 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term1836 A B C P _115318 clauses c f s) = (term1825 A B C P _115318 f clauses s c).
Proof. exact (TRANS (@lem8403310 A B C P _115318 f clauses c s) (@lem8403311 A B C P _115318 f clauses s c)). Qed.
Lemma lem8403313 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1838 A B C P _115318 clauses c f) = (term1826 A B C P _115318 f clauses c).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8403312 A B C P _115318 f clauses s c)). Qed.
Lemma lem8403314 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8403315 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1839 A B C P _115318 clauses c f) = (term1827 A B C P _115318 f clauses c).
Proof. exact (MK_COMB (@lem8403314 A B P) (@lem8403313 A B C P _115318 f clauses c)). Qed.
Lemma lem8403316 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1840 A B C P _115318 clauses c) = (term1828 A B C P _115318 clauses c).
Proof. exact (fun_ext (fun f : type1167 A B C P => @lem8403315 A B C P _115318 f clauses c)). Qed.
Lemma lem8403317 {A B C P : Type'} : (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)) = (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop))). Qed.
Lemma lem8403318 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1832 A B C P _115318 clauses c) = (term1829 A B C P _115318 clauses c).
Proof. exact (MK_COMB (@lem8403317 A B C P) (@lem8403316 A B C P _115318 clauses c)). Qed.
Lemma lem8403319 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8403320 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1841 A B C P _115318 clauses c) = (term1842 A B C P _115318 clauses c).
Proof. exact (MK_COMB (@lem8403319) (@lem8403318 A B C P _115318 clauses c)). Qed.
Lemma lem8403321 {A B C P : Type'} (_115318 : type1049 A B C P) (f : type1167 A B C P) (clauses : type1630 A B C P) (c : C) : (term1835 A B C P _115318 clauses c f) = (term1826 A B C P _115318 f clauses c).
Proof. exact (eq_refl (term1835 A B C P _115318 clauses c f)). Qed.
Lemma lem8403322 {A B C P : Type'} (s : type287 A B C P) (f : type1167 A B C P) : (s f) = (s f).
Proof. exact (eq_refl (s f)). Qed.
Lemma lem8403323 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) (s : type287 A B C P) (f : type1167 A B C P) : (term1843 A B C P _115318 clauses c s f) = (term1844 A B C P _115318 clauses c s f).
Proof. exact (MK_COMB (@lem8403321 A B C P _115318 f clauses c) (@lem8403322 A B C P s f)). Qed.
Lemma lem8403324 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (f : type1167 A B C P) (c : C) : (term1844 A B C P _115318 clauses c s f) = (term1845 A B C P _115318 clauses s f c).
Proof. exact (eq_refl (term1844 A B C P _115318 clauses c s f)). Qed.
Lemma lem8403325 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (f : type1167 A B C P) (c : C) : (term1843 A B C P _115318 clauses c s f) = (term1845 A B C P _115318 clauses s f c).
Proof. exact (TRANS (@lem8403323 A B C P _115318 clauses c s f) (@lem8403324 A B C P _115318 clauses s f c)). Qed.
Lemma lem8403326 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (c : C) : (term1846 A B C P _115318 clauses c s) = (term1847 A B C P _115318 clauses s c).
Proof. exact (fun_ext (fun f : type1167 A B C P => @lem8403325 A B C P _115318 clauses s f c)). Qed.
Lemma lem8403327 {A B C P : Type'} : (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)) = (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop))). Qed.
Lemma lem8403328 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (c : C) : (term1848 A B C P _115318 clauses c s) = (term1849 A B C P _115318 clauses s c).
Proof. exact (MK_COMB (@lem8403327 A B C P) (@lem8403326 A B C P _115318 clauses s c)). Qed.
Lemma lem8403329 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1850 A B C P _115318 clauses c) = (term1851 A B C P _115318 clauses c).
Proof. exact (fun_ext (fun s : type287 A B C P => @lem8403328 A B C P _115318 clauses s c)). Qed.
Lemma lem8403330 {A B C P : Type'} : (@ex (((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B)) = (@ex (((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex (((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B))). Qed.
Lemma lem8403331 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1833 A B C P _115318 clauses c) = (term1852 A B C P _115318 clauses c).
Proof. exact (MK_COMB (@lem8403330 A B C P) (@lem8403329 A B C P _115318 clauses c)). Qed.
Lemma lem8403332 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : ((term1832 A B C P _115318 clauses c) = (term1833 A B C P _115318 clauses c)) = ((term1829 A B C P _115318 clauses c) = (term1852 A B C P _115318 clauses c)).
Proof. exact (MK_COMB (@lem8403320 A B C P _115318 clauses c) (@lem8403331 A B C P _115318 clauses c)). Qed.
Lemma lem8403333 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1829 A B C P _115318 clauses c) = (term1852 A B C P _115318 clauses c).
Proof. exact (EQ_MP (@lem8403332 A B C P _115318 clauses c) (@lem8403307 A B C P _115318 clauses c)). Qed.
Lemma lem8403335 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8403336 {A B C P : Type'} (P' : type288 A B C P) : (term1853 A B C P P') = (term1854 A B C P P').
Proof. exact (@lem8403335 (type1167 A B C P) (type1506 A B C) P'). Qed.
Lemma lem8403337 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (c : C) : (term1855 A B C P _115318 clauses s c) = (term1856 A B C P _115318 clauses s c).
Proof. exact (@lem8403336 A B C P (term1857 A B C P _115318 clauses s c)). Qed.
Lemma lem8403338 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (f : type1167 A B C P) (c : C) : (term1858 A B C P _115318 clauses s c f) = (term1859 A B C P _115318 clauses s f c).
Proof. exact (eq_refl (term1858 A B C P _115318 clauses s c f)). Qed.
Lemma lem8403339 {A B C : Type'} (t : type1506 A B C) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8403340 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (f : type1167 A B C P) (c : C) (t : type1506 A B C) : (term1860 A B C P _115318 clauses s c f t) = (term1861 A B C P _115318 clauses s f c t).
Proof. exact (MK_COMB (@lem8403338 A B C P _115318 clauses s f c) (@lem8403339 A B C t)). Qed.
Lemma lem8403341 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (f : type1167 A B C P) (t : type1506 A B C) (c : C) : (term1861 A B C P _115318 clauses s f c t) = (term1862 A B C P _115318 clauses s f t c).
Proof. exact (eq_refl (term1861 A B C P _115318 clauses s f c t)). Qed.
Lemma lem8403342 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (f : type1167 A B C P) (t : type1506 A B C) (c : C) : (term1860 A B C P _115318 clauses s c f t) = (term1862 A B C P _115318 clauses s f t c).
Proof. exact (TRANS (@lem8403340 A B C P _115318 clauses s f c t) (@lem8403341 A B C P _115318 clauses s f t c)). Qed.
Lemma lem8403343 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (f : type1167 A B C P) (c : C) : (term1863 A B C P _115318 clauses s c f) = (term1859 A B C P _115318 clauses s f c).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8403342 A B C P _115318 clauses s f t c)). Qed.
Lemma lem8403344 {A B C : Type'} : (@ex (C -> (A -> B) -> B)) = (@ex (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> B))). Qed.
Lemma lem8403345 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (f : type1167 A B C P) (c : C) : (term1864 A B C P _115318 clauses s c f) = (term1845 A B C P _115318 clauses s f c).
Proof. exact (MK_COMB (@lem8403344 A B C) (@lem8403343 A B C P _115318 clauses s f c)). Qed.
Lemma lem8403346 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (c : C) : (term1865 A B C P _115318 clauses s c) = (term1847 A B C P _115318 clauses s c).
Proof. exact (fun_ext (fun f : type1167 A B C P => @lem8403345 A B C P _115318 clauses s f c)). Qed.
Lemma lem8403347 {A B C P : Type'} : (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)) = (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop))). Qed.
Lemma lem8403348 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (c : C) : (term1855 A B C P _115318 clauses s c) = (term1849 A B C P _115318 clauses s c).
Proof. exact (MK_COMB (@lem8403347 A B C P) (@lem8403346 A B C P _115318 clauses s c)). Qed.
Lemma lem8403349 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8403350 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (c : C) : (term1866 A B C P _115318 clauses s c) = (term1867 A B C P _115318 clauses s c).
Proof. exact (MK_COMB (@lem8403349) (@lem8403348 A B C P _115318 clauses s c)). Qed.
Lemma lem8403351 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (f : type1167 A B C P) (c : C) : (term1858 A B C P _115318 clauses s c f) = (term1859 A B C P _115318 clauses s f c).
Proof. exact (eq_refl (term1858 A B C P _115318 clauses s c f)). Qed.
Lemma lem8403352 {A B C P : Type'} (t : type289 A B C P) (f : type1167 A B C P) : (t f) = (t f).
Proof. exact (eq_refl (t f)). Qed.
Lemma lem8403353 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (c : C) (t : type289 A B C P) (f : type1167 A B C P) : (term1868 A B C P _115318 clauses s c t f) = (term1869 A B C P _115318 clauses s c t f).
Proof. exact (MK_COMB (@lem8403351 A B C P _115318 clauses s f c) (@lem8403352 A B C P t f)). Qed.
Lemma lem8403354 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (t : type289 A B C P) (f : type1167 A B C P) (c : C) : (term1869 A B C P _115318 clauses s c t f) = (term1870 A B C P _115318 clauses s t f c).
Proof. exact (eq_refl (term1869 A B C P _115318 clauses s c t f)). Qed.
Lemma lem8403355 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (t : type289 A B C P) (f : type1167 A B C P) (c : C) : (term1868 A B C P _115318 clauses s c t f) = (term1870 A B C P _115318 clauses s t f c).
Proof. exact (TRANS (@lem8403353 A B C P _115318 clauses s c t f) (@lem8403354 A B C P _115318 clauses s t f c)). Qed.
Lemma lem8403356 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (t : type289 A B C P) (c : C) : (term1871 A B C P _115318 clauses s c t) = (term1872 A B C P _115318 clauses s t c).
Proof. exact (fun_ext (fun f : type1167 A B C P => @lem8403355 A B C P _115318 clauses s t f c)). Qed.
Lemma lem8403357 {A B C P : Type'} : (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)) = (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop))). Qed.
Lemma lem8403358 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (t : type289 A B C P) (c : C) : (term1873 A B C P _115318 clauses s c t) = (term1874 A B C P _115318 clauses s t c).
Proof. exact (MK_COMB (@lem8403357 A B C P) (@lem8403356 A B C P _115318 clauses s t c)). Qed.
Lemma lem8403359 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (c : C) : (term1875 A B C P _115318 clauses s c) = (term1876 A B C P _115318 clauses s c).
Proof. exact (fun_ext (fun t : type289 A B C P => @lem8403358 A B C P _115318 clauses s t c)). Qed.
Lemma lem8403360 {A B C P : Type'} : (@ex (((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> C -> (A -> B) -> B)) = (@ex (((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> C -> (A -> B) -> B))). Qed.
Lemma lem8403361 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (c : C) : (term1856 A B C P _115318 clauses s c) = (term1877 A B C P _115318 clauses s c).
Proof. exact (MK_COMB (@lem8403360 A B C P) (@lem8403359 A B C P _115318 clauses s c)). Qed.
Lemma lem8403362 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (c : C) : ((term1855 A B C P _115318 clauses s c) = (term1856 A B C P _115318 clauses s c)) = ((term1849 A B C P _115318 clauses s c) = (term1877 A B C P _115318 clauses s c)).
Proof. exact (MK_COMB (@lem8403350 A B C P _115318 clauses s c) (@lem8403361 A B C P _115318 clauses s c)). Qed.
Lemma lem8403363 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (c : C) : (term1849 A B C P _115318 clauses s c) = (term1877 A B C P _115318 clauses s c).
Proof. exact (EQ_MP (@lem8403362 A B C P _115318 clauses s c) (@lem8403337 A B C P _115318 clauses s c)). Qed.
Lemma lem8403364 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1851 A B C P _115318 clauses c) = (term1878 A B C P _115318 clauses c).
Proof. exact (fun_ext (fun s : type287 A B C P => @lem8403363 A B C P _115318 clauses s c)). Qed.
Lemma lem8403365 {A B C P : Type'} : (@ex (((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B)) = (@ex (((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex (((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B))). Qed.
Lemma lem8403366 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1852 A B C P _115318 clauses c) = (term1879 A B C P _115318 clauses c).
Proof. exact (MK_COMB (@lem8403365 A B C P) (@lem8403364 A B C P _115318 clauses c)). Qed.
Lemma lem8403367 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1829 A B C P _115318 clauses c) = (term1879 A B C P _115318 clauses c).
Proof. exact (TRANS (@lem8403333 A B C P _115318 clauses c) (@lem8403366 A B C P _115318 clauses c)). Qed.
Lemma lem8403368 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1745 A B C P _115318 clauses c) = (term1879 A B C P _115318 clauses c).
Proof. exact (TRANS (@lem8403303 A B C P _115318 clauses c) (@lem8403367 A B C P _115318 clauses c)). Qed.
Lemma lem8403369 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1756 A B C P _115318 clauses) = (term1880 A B C P _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8403368 A B C P _115318 clauses c)). Qed.
Lemma lem8403370 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8403371 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1767 A B C P _115318 clauses) = (term1881 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8403370 C) (@lem8403369 A B C P _115318 clauses)). Qed.
Lemma lem8403373 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8403374 {A B C P : Type'} (P' : type1483 A B C P) : (term1882 A B C P P') = (term1883 A B C P P').
Proof. exact (@lem8403373 C (type287 A B C P) P'). Qed.
Lemma lem8403375 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1884 A B C P _115318 clauses) = (term1885 A B C P _115318 clauses).
Proof. exact (@lem8403374 A B C P (term1886 A B C P _115318 clauses)). Qed.
Lemma lem8403376 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1887 A B C P _115318 clauses c) = (term1878 A B C P _115318 clauses c).
Proof. exact (eq_refl (term1887 A B C P _115318 clauses c)). Qed.
Lemma lem8403377 {A B C P : Type'} (s : type287 A B C P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8403378 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) (s : type287 A B C P) : (term1888 A B C P _115318 clauses c s) = (term1889 A B C P _115318 clauses c s).
Proof. exact (MK_COMB (@lem8403376 A B C P _115318 clauses c) (@lem8403377 A B C P s)). Qed.
Lemma lem8403379 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (c : C) : (term1889 A B C P _115318 clauses c s) = (term1877 A B C P _115318 clauses s c).
Proof. exact (eq_refl (term1889 A B C P _115318 clauses c s)). Qed.
Lemma lem8403380 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type287 A B C P) (c : C) : (term1888 A B C P _115318 clauses c s) = (term1877 A B C P _115318 clauses s c).
Proof. exact (TRANS (@lem8403378 A B C P _115318 clauses c s) (@lem8403379 A B C P _115318 clauses s c)). Qed.
Lemma lem8403381 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1890 A B C P _115318 clauses c) = (term1878 A B C P _115318 clauses c).
Proof. exact (fun_ext (fun s : type287 A B C P => @lem8403380 A B C P _115318 clauses s c)). Qed.
Lemma lem8403382 {A B C P : Type'} : (@ex (((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B)) = (@ex (((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex (((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B))). Qed.
Lemma lem8403383 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1891 A B C P _115318 clauses c) = (term1879 A B C P _115318 clauses c).
Proof. exact (MK_COMB (@lem8403382 A B C P) (@lem8403381 A B C P _115318 clauses c)). Qed.
Lemma lem8403384 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1892 A B C P _115318 clauses) = (term1880 A B C P _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8403383 A B C P _115318 clauses c)). Qed.
Lemma lem8403385 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8403386 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1884 A B C P _115318 clauses) = (term1881 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8403385 C) (@lem8403384 A B C P _115318 clauses)). Qed.
Lemma lem8403387 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8403388 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1893 A B C P _115318 clauses) = (term1894 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8403387) (@lem8403386 A B C P _115318 clauses)). Qed.
Lemma lem8403389 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (c : C) : (term1887 A B C P _115318 clauses c) = (term1878 A B C P _115318 clauses c).
Proof. exact (eq_refl (term1887 A B C P _115318 clauses c)). Qed.
Lemma lem8403390 {A B C P : Type'} (s : type1495 A B C P) (c : C) : (s c) = (s c).
Proof. exact (eq_refl (s c)). Qed.
Lemma lem8403391 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) (c : C) : (term1895 A B C P _115318 clauses s c) = (term1896 A B C P _115318 clauses s c).
Proof. exact (MK_COMB (@lem8403389 A B C P _115318 clauses c) (@lem8403390 A B C P s c)). Qed.
Lemma lem8403392 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) (c : C) : (term1896 A B C P _115318 clauses s c) = (term1897 A B C P _115318 clauses s c).
Proof. exact (eq_refl (term1896 A B C P _115318 clauses s c)). Qed.
Lemma lem8403393 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) (c : C) : (term1895 A B C P _115318 clauses s c) = (term1897 A B C P _115318 clauses s c).
Proof. exact (TRANS (@lem8403391 A B C P _115318 clauses s c) (@lem8403392 A B C P _115318 clauses s c)). Qed.
Lemma lem8403394 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) : (term1898 A B C P _115318 clauses s) = (term1899 A B C P _115318 clauses s).
Proof. exact (fun_ext (fun c : C => @lem8403393 A B C P _115318 clauses s c)). Qed.
Lemma lem8403395 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8403396 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) : (term1900 A B C P _115318 clauses s) = (term1901 A B C P _115318 clauses s).
Proof. exact (MK_COMB (@lem8403395 C) (@lem8403394 A B C P _115318 clauses s)). Qed.
Lemma lem8403397 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1902 A B C P _115318 clauses) = (term1903 A B C P _115318 clauses).
Proof. exact (fun_ext (fun s : type1495 A B C P => @lem8403396 A B C P _115318 clauses s)). Qed.
Lemma lem8403398 {A B C P : Type'} : (@ex (C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B)) = (@ex (C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex (C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B))). Qed.
Lemma lem8403399 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1885 A B C P _115318 clauses) = (term1904 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8403398 A B C P) (@lem8403397 A B C P _115318 clauses)). Qed.
Lemma lem8403400 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : ((term1884 A B C P _115318 clauses) = (term1885 A B C P _115318 clauses)) = ((term1881 A B C P _115318 clauses) = (term1904 A B C P _115318 clauses)).
Proof. exact (MK_COMB (@lem8403388 A B C P _115318 clauses) (@lem8403399 A B C P _115318 clauses)). Qed.
Lemma lem8403401 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1881 A B C P _115318 clauses) = (term1904 A B C P _115318 clauses).
Proof. exact (EQ_MP (@lem8403400 A B C P _115318 clauses) (@lem8403375 A B C P _115318 clauses)). Qed.
Lemma lem8403403 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8403404 {A B C P : Type'} (P' : type1484 A B C P) : (term1905 A B C P P') = (term1906 A B C P P').
Proof. exact (@lem8403403 C (type289 A B C P) P'). Qed.
Lemma lem8403405 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) : (term1907 A B C P _115318 clauses s) = (term1908 A B C P _115318 clauses s).
Proof. exact (@lem8403404 A B C P (term1909 A B C P _115318 clauses s)). Qed.
Lemma lem8403406 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) (c : C) : (term1910 A B C P _115318 clauses s c) = (term1911 A B C P _115318 clauses s c).
Proof. exact (eq_refl (term1910 A B C P _115318 clauses s c)). Qed.
Lemma lem8403407 {A B C P : Type'} (t : type289 A B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8403408 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) (c : C) (t : type289 A B C P) : (term1912 A B C P _115318 clauses s c t) = (term1913 A B C P _115318 clauses s c t).
Proof. exact (MK_COMB (@lem8403406 A B C P _115318 clauses s c) (@lem8403407 A B C P t)). Qed.
Lemma lem8403409 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) (t : type289 A B C P) (c : C) : (term1913 A B C P _115318 clauses s c t) = (term1914 A B C P _115318 clauses s t c).
Proof. exact (eq_refl (term1913 A B C P _115318 clauses s c t)). Qed.
Lemma lem8403410 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) (t : type289 A B C P) (c : C) : (term1912 A B C P _115318 clauses s c t) = (term1914 A B C P _115318 clauses s t c).
Proof. exact (TRANS (@lem8403408 A B C P _115318 clauses s c t) (@lem8403409 A B C P _115318 clauses s t c)). Qed.
Lemma lem8403411 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) (c : C) : (term1915 A B C P _115318 clauses s c) = (term1911 A B C P _115318 clauses s c).
Proof. exact (fun_ext (fun t : type289 A B C P => @lem8403410 A B C P _115318 clauses s t c)). Qed.
Lemma lem8403412 {A B C P : Type'} : (@ex (((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> C -> (A -> B) -> B)) = (@ex (((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> C -> (A -> B) -> B))). Qed.
Lemma lem8403413 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) (c : C) : (term1916 A B C P _115318 clauses s c) = (term1897 A B C P _115318 clauses s c).
Proof. exact (MK_COMB (@lem8403412 A B C P) (@lem8403411 A B C P _115318 clauses s c)). Qed.
Lemma lem8403414 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) : (term1917 A B C P _115318 clauses s) = (term1899 A B C P _115318 clauses s).
Proof. exact (fun_ext (fun c : C => @lem8403413 A B C P _115318 clauses s c)). Qed.
Lemma lem8403415 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8403416 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) : (term1907 A B C P _115318 clauses s) = (term1901 A B C P _115318 clauses s).
Proof. exact (MK_COMB (@lem8403415 C) (@lem8403414 A B C P _115318 clauses s)). Qed.
Lemma lem8403417 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8403418 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) : (term1918 A B C P _115318 clauses s) = (term1919 A B C P _115318 clauses s).
Proof. exact (MK_COMB (@lem8403417) (@lem8403416 A B C P _115318 clauses s)). Qed.
Lemma lem8403419 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) (c : C) : (term1910 A B C P _115318 clauses s c) = (term1911 A B C P _115318 clauses s c).
Proof. exact (eq_refl (term1910 A B C P _115318 clauses s c)). Qed.
Lemma lem8403420 {A B C P : Type'} (t : type1496 A B C P) (c : C) : (t c) = (t c).
Proof. exact (eq_refl (t c)). Qed.
Lemma lem8403421 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) (t : type1496 A B C P) (c : C) : (term1920 A B C P _115318 clauses s t c) = (term1921 A B C P _115318 clauses s t c).
Proof. exact (MK_COMB (@lem8403419 A B C P _115318 clauses s c) (@lem8403420 A B C P t c)). Qed.
Lemma lem8403422 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) (t : type1496 A B C P) (c : C) : (term1921 A B C P _115318 clauses s t c) = (term1922 A B C P _115318 clauses s t c).
Proof. exact (eq_refl (term1921 A B C P _115318 clauses s t c)). Qed.
Lemma lem8403423 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) (t : type1496 A B C P) (c : C) : (term1920 A B C P _115318 clauses s t c) = (term1922 A B C P _115318 clauses s t c).
Proof. exact (TRANS (@lem8403421 A B C P _115318 clauses s t c) (@lem8403422 A B C P _115318 clauses s t c)). Qed.
Lemma lem8403424 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) (t : type1496 A B C P) : (term1923 A B C P _115318 clauses s t) = (term1924 A B C P _115318 clauses s t).
Proof. exact (fun_ext (fun c : C => @lem8403423 A B C P _115318 clauses s t c)). Qed.
Lemma lem8403425 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8403426 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) (t : type1496 A B C P) : (term1925 A B C P _115318 clauses s t) = (term1926 A B C P _115318 clauses s t).
Proof. exact (MK_COMB (@lem8403425 C) (@lem8403424 A B C P _115318 clauses s t)). Qed.
Lemma lem8403427 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) : (term1927 A B C P _115318 clauses s) = (term1928 A B C P _115318 clauses s).
Proof. exact (fun_ext (fun t : type1496 A B C P => @lem8403426 A B C P _115318 clauses s t)). Qed.
Lemma lem8403428 {A B C P : Type'} : (@ex (C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> C -> (A -> B) -> B)) = (@ex (C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> C -> (A -> B) -> B))). Qed.
Lemma lem8403429 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) : (term1908 A B C P _115318 clauses s) = (term1929 A B C P _115318 clauses s).
Proof. exact (MK_COMB (@lem8403428 A B C P) (@lem8403427 A B C P _115318 clauses s)). Qed.
Lemma lem8403430 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) : ((term1907 A B C P _115318 clauses s) = (term1908 A B C P _115318 clauses s)) = ((term1901 A B C P _115318 clauses s) = (term1929 A B C P _115318 clauses s)).
Proof. exact (MK_COMB (@lem8403418 A B C P _115318 clauses s) (@lem8403429 A B C P _115318 clauses s)). Qed.
Lemma lem8403431 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) : (term1901 A B C P _115318 clauses s) = (term1929 A B C P _115318 clauses s).
Proof. exact (EQ_MP (@lem8403430 A B C P _115318 clauses s) (@lem8403405 A B C P _115318 clauses s)). Qed.
Lemma lem8403432 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1903 A B C P _115318 clauses) = (term1930 A B C P _115318 clauses).
Proof. exact (fun_ext (fun s : type1495 A B C P => @lem8403431 A B C P _115318 clauses s)). Qed.
Lemma lem8403433 {A B C P : Type'} : (@ex (C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B)) = (@ex (C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex (C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B))). Qed.
Lemma lem8403434 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1904 A B C P _115318 clauses) = (term1931 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8403433 A B C P) (@lem8403432 A B C P _115318 clauses)). Qed.
Lemma lem8403435 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1881 A B C P _115318 clauses) = (term1931 A B C P _115318 clauses).
Proof. exact (TRANS (@lem8403401 A B C P _115318 clauses) (@lem8403434 A B C P _115318 clauses)). Qed.
Lemma lem8403436 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1767 A B C P _115318 clauses) = (term1931 A B C P _115318 clauses).
Proof. exact (TRANS (@lem8403371 A B C P _115318 clauses) (@lem8403435 A B C P _115318 clauses)). Qed.
Lemma lem8403437 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1780 A B C P _115318) = (term1932 A B C P _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8403436 A B C P _115318 clauses)). Qed.
Lemma lem8403438 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8403439 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1791 A B C P _115318) = (term1933 A B C P _115318).
Proof. exact (MK_COMB (@lem8403438 A B C P) (@lem8403437 A B C P _115318)). Qed.
Lemma lem8403441 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8403442 {A B C P : Type'} (P' : type1042 A B C P) : (term1934 A B C P P') = (term1935 A B C P P').
Proof. exact (@lem8403441 (type1630 A B C P) (type1495 A B C P) P'). Qed.
Lemma lem8403443 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1936 A B C P _115318) = (term1937 A B C P _115318).
Proof. exact (@lem8403442 A B C P (term1938 A B C P _115318)). Qed.
Lemma lem8403444 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1939 A B C P _115318 clauses) = (term1930 A B C P _115318 clauses).
Proof. exact (eq_refl (term1939 A B C P _115318 clauses)). Qed.
Lemma lem8403445 {A B C P : Type'} (s : type1495 A B C P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8403446 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) : (term1940 A B C P _115318 clauses s) = (term1941 A B C P _115318 clauses s).
Proof. exact (MK_COMB (@lem8403444 A B C P _115318 clauses) (@lem8403445 A B C P s)). Qed.
Lemma lem8403447 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) : (term1941 A B C P _115318 clauses s) = (term1929 A B C P _115318 clauses s).
Proof. exact (eq_refl (term1941 A B C P _115318 clauses s)). Qed.
Lemma lem8403448 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1495 A B C P) : (term1940 A B C P _115318 clauses s) = (term1929 A B C P _115318 clauses s).
Proof. exact (TRANS (@lem8403446 A B C P _115318 clauses s) (@lem8403447 A B C P _115318 clauses s)). Qed.
Lemma lem8403449 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1942 A B C P _115318 clauses) = (term1930 A B C P _115318 clauses).
Proof. exact (fun_ext (fun s : type1495 A B C P => @lem8403448 A B C P _115318 clauses s)). Qed.
Lemma lem8403450 {A B C P : Type'} : (@ex (C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B)) = (@ex (C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex (C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B))). Qed.
Lemma lem8403451 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1943 A B C P _115318 clauses) = (term1931 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8403450 A B C P) (@lem8403449 A B C P _115318 clauses)). Qed.
Lemma lem8403452 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1944 A B C P _115318) = (term1932 A B C P _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8403451 A B C P _115318 clauses)). Qed.
Lemma lem8403453 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8403454 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1936 A B C P _115318) = (term1933 A B C P _115318).
Proof. exact (MK_COMB (@lem8403453 A B C P) (@lem8403452 A B C P _115318)). Qed.
Lemma lem8403455 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8403456 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1945 A B C P _115318) = (term1946 A B C P _115318).
Proof. exact (MK_COMB (@lem8403455) (@lem8403454 A B C P _115318)). Qed.
Lemma lem8403457 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term1939 A B C P _115318 clauses) = (term1930 A B C P _115318 clauses).
Proof. exact (eq_refl (term1939 A B C P _115318 clauses)). Qed.
Lemma lem8403458 {A B C P : Type'} (s : type1047 A B C P) (clauses : type1630 A B C P) : (s clauses) = (s clauses).
Proof. exact (eq_refl (s clauses)). Qed.
Lemma lem8403459 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) (clauses : type1630 A B C P) : (term1947 A B C P _115318 s clauses) = (term1948 A B C P _115318 s clauses).
Proof. exact (MK_COMB (@lem8403457 A B C P _115318 clauses) (@lem8403458 A B C P s clauses)). Qed.
Lemma lem8403460 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) (clauses : type1630 A B C P) : (term1948 A B C P _115318 s clauses) = (term1949 A B C P _115318 s clauses).
Proof. exact (eq_refl (term1948 A B C P _115318 s clauses)). Qed.
Lemma lem8403461 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) (clauses : type1630 A B C P) : (term1947 A B C P _115318 s clauses) = (term1949 A B C P _115318 s clauses).
Proof. exact (TRANS (@lem8403459 A B C P _115318 s clauses) (@lem8403460 A B C P _115318 s clauses)). Qed.
Lemma lem8403462 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) : (term1950 A B C P _115318 s) = (term1951 A B C P _115318 s).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8403461 A B C P _115318 s clauses)). Qed.
Lemma lem8403463 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8403464 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) : (term1952 A B C P _115318 s) = (term1953 A B C P _115318 s).
Proof. exact (MK_COMB (@lem8403463 A B C P) (@lem8403462 A B C P _115318 s)). Qed.
Lemma lem8403465 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1954 A B C P _115318) = (term1955 A B C P _115318).
Proof. exact (fun_ext (fun s : type1047 A B C P => @lem8403464 A B C P _115318 s)). Qed.
Lemma lem8403466 {A B C P : Type'} : (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B)) = (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B))). Qed.
Lemma lem8403467 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1937 A B C P _115318) = (term1956 A B C P _115318).
Proof. exact (MK_COMB (@lem8403466 A B C P) (@lem8403465 A B C P _115318)). Qed.
Lemma lem8403468 {A B C P : Type'} (_115318 : type1049 A B C P) : ((term1936 A B C P _115318) = (term1937 A B C P _115318)) = ((term1933 A B C P _115318) = (term1956 A B C P _115318)).
Proof. exact (MK_COMB (@lem8403456 A B C P _115318) (@lem8403467 A B C P _115318)). Qed.
Lemma lem8403469 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1933 A B C P _115318) = (term1956 A B C P _115318).
Proof. exact (EQ_MP (@lem8403468 A B C P _115318) (@lem8403443 A B C P _115318)). Qed.
Lemma lem8403471 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8403472 {A B C P : Type'} (P' : type1043 A B C P) : (term1957 A B C P P') = (term1958 A B C P P').
Proof. exact (@lem8403471 (type1630 A B C P) (type1496 A B C P) P'). Qed.
Lemma lem8403473 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) : (term1959 A B C P _115318 s) = (term1960 A B C P _115318 s).
Proof. exact (@lem8403472 A B C P (term1961 A B C P _115318 s)). Qed.
Lemma lem8403474 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) (clauses : type1630 A B C P) : (term1962 A B C P _115318 s clauses) = (term1963 A B C P _115318 s clauses).
Proof. exact (eq_refl (term1962 A B C P _115318 s clauses)). Qed.
Lemma lem8403475 {A B C P : Type'} (t : type1496 A B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8403476 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) (clauses : type1630 A B C P) (t : type1496 A B C P) : (term1964 A B C P _115318 s clauses t) = (term1965 A B C P _115318 s clauses t).
Proof. exact (MK_COMB (@lem8403474 A B C P _115318 s clauses) (@lem8403475 A B C P t)). Qed.
Lemma lem8403477 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) (clauses : type1630 A B C P) (t : type1496 A B C P) : (term1965 A B C P _115318 s clauses t) = (term1966 A B C P _115318 s clauses t).
Proof. exact (eq_refl (term1965 A B C P _115318 s clauses t)). Qed.
Lemma lem8403478 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) (clauses : type1630 A B C P) (t : type1496 A B C P) : (term1964 A B C P _115318 s clauses t) = (term1966 A B C P _115318 s clauses t).
Proof. exact (TRANS (@lem8403476 A B C P _115318 s clauses t) (@lem8403477 A B C P _115318 s clauses t)). Qed.
Lemma lem8403479 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) (clauses : type1630 A B C P) : (term1967 A B C P _115318 s clauses) = (term1963 A B C P _115318 s clauses).
Proof. exact (fun_ext (fun t : type1496 A B C P => @lem8403478 A B C P _115318 s clauses t)). Qed.
Lemma lem8403480 {A B C P : Type'} : (@ex (C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> C -> (A -> B) -> B)) = (@ex (C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> C -> (A -> B) -> B))). Qed.
Lemma lem8403481 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) (clauses : type1630 A B C P) : (term1968 A B C P _115318 s clauses) = (term1949 A B C P _115318 s clauses).
Proof. exact (MK_COMB (@lem8403480 A B C P) (@lem8403479 A B C P _115318 s clauses)). Qed.
Lemma lem8403482 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) : (term1969 A B C P _115318 s) = (term1951 A B C P _115318 s).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8403481 A B C P _115318 s clauses)). Qed.
Lemma lem8403483 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8403484 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) : (term1959 A B C P _115318 s) = (term1953 A B C P _115318 s).
Proof. exact (MK_COMB (@lem8403483 A B C P) (@lem8403482 A B C P _115318 s)). Qed.
Lemma lem8403485 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8403486 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) : (term1970 A B C P _115318 s) = (term1971 A B C P _115318 s).
Proof. exact (MK_COMB (@lem8403485) (@lem8403484 A B C P _115318 s)). Qed.
Lemma lem8403487 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) (clauses : type1630 A B C P) : (term1962 A B C P _115318 s clauses) = (term1963 A B C P _115318 s clauses).
Proof. exact (eq_refl (term1962 A B C P _115318 s clauses)). Qed.
Lemma lem8403488 {A B C P : Type'} (t : type1048 A B C P) (clauses : type1630 A B C P) : (t clauses) = (t clauses).
Proof. exact (eq_refl (t clauses)). Qed.
Lemma lem8403489 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) (t : type1048 A B C P) (clauses : type1630 A B C P) : (term1972 A B C P _115318 s t clauses) = (term1973 A B C P _115318 s t clauses).
Proof. exact (MK_COMB (@lem8403487 A B C P _115318 s clauses) (@lem8403488 A B C P t clauses)). Qed.
Lemma lem8403490 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) (t : type1048 A B C P) (clauses : type1630 A B C P) : (term1973 A B C P _115318 s t clauses) = (term1974 A B C P _115318 s t clauses).
Proof. exact (eq_refl (term1973 A B C P _115318 s t clauses)). Qed.
Lemma lem8403491 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) (t : type1048 A B C P) (clauses : type1630 A B C P) : (term1972 A B C P _115318 s t clauses) = (term1974 A B C P _115318 s t clauses).
Proof. exact (TRANS (@lem8403489 A B C P _115318 s t clauses) (@lem8403490 A B C P _115318 s t clauses)). Qed.
Lemma lem8403492 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) (t : type1048 A B C P) : (term1975 A B C P _115318 s t) = (term1976 A B C P _115318 s t).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8403491 A B C P _115318 s t clauses)). Qed.
Lemma lem8403493 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8403494 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) (t : type1048 A B C P) : (term1977 A B C P _115318 s t) = (term1978 A B C P _115318 s t).
Proof. exact (MK_COMB (@lem8403493 A B C P) (@lem8403492 A B C P _115318 s t)). Qed.
Lemma lem8403495 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) : (term1979 A B C P _115318 s) = (term1980 A B C P _115318 s).
Proof. exact (fun_ext (fun t : type1048 A B C P => @lem8403494 A B C P _115318 s t)). Qed.
Lemma lem8403496 {A B C P : Type'} : (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> C -> (A -> B) -> B)) = (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> C -> (A -> B) -> B))). Qed.
Lemma lem8403497 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) : (term1960 A B C P _115318 s) = (term1981 A B C P _115318 s).
Proof. exact (MK_COMB (@lem8403496 A B C P) (@lem8403495 A B C P _115318 s)). Qed.
Lemma lem8403498 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) : ((term1959 A B C P _115318 s) = (term1960 A B C P _115318 s)) = ((term1953 A B C P _115318 s) = (term1981 A B C P _115318 s)).
Proof. exact (MK_COMB (@lem8403486 A B C P _115318 s) (@lem8403497 A B C P _115318 s)). Qed.
Lemma lem8403499 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) : (term1953 A B C P _115318 s) = (term1981 A B C P _115318 s).
Proof. exact (EQ_MP (@lem8403498 A B C P _115318 s) (@lem8403473 A B C P _115318 s)). Qed.
Lemma lem8403500 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1955 A B C P _115318) = (term1982 A B C P _115318).
Proof. exact (fun_ext (fun s : type1047 A B C P => @lem8403499 A B C P _115318 s)). Qed.
Lemma lem8403501 {A B C P : Type'} : (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B)) = (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B))). Qed.
Lemma lem8403502 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1956 A B C P _115318) = (term1983 A B C P _115318).
Proof. exact (MK_COMB (@lem8403501 A B C P) (@lem8403500 A B C P _115318)). Qed.
Lemma lem8403503 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1933 A B C P _115318) = (term1983 A B C P _115318).
Proof. exact (TRANS (@lem8403469 A B C P _115318) (@lem8403502 A B C P _115318)). Qed.
Lemma lem8403504 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1791 A B C P _115318) = (term1983 A B C P _115318).
Proof. exact (TRANS (@lem8403439 A B C P _115318) (@lem8403503 A B C P _115318)). Qed.
Lemma lem8403505 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8403506 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1793 A B C P _115318) = (term1984 A B C P _115318).
Proof. exact (MK_COMB (@lem8403505) (@lem8403504 A B C P _115318)). Qed.
Lemma lem8403507 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1796 A B C P _115318) = (term1796 A B C P _115318).
Proof. exact (eq_refl (term1796 A B C P _115318)). Qed.
Lemma lem8403508 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1797 A B C P _115318) = (term1985 A B C P _115318).
Proof. exact (MK_COMB (@lem8403506 A B C P _115318) (@lem8403507 A B C P _115318)). Qed.
Lemma lem8403510 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1332 A P Q) = (term1333 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8403511 {A B C P : Type'} (P' : type261 A B C P) (Q : Prop) : (term1986 A B C P P' Q) = (term1987 A B C P P' Q).
Proof. exact (@lem8403510 (type1047 A B C P) P' Q). Qed.
Lemma lem8403512 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1988 A B C P _115318) = (term1989 A B C P _115318).
Proof. exact (@lem8403511 A B C P (term1982 A B C P _115318) (term1796 A B C P _115318)). Qed.
Lemma lem8403513 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) : (term1990 A B C P _115318 s) = (term1981 A B C P _115318 s).
Proof. exact (eq_refl (term1990 A B C P _115318 s)). Qed.
Lemma lem8403514 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1991 A B C P _115318) = (term1982 A B C P _115318).
Proof. exact (fun_ext (fun s : type1047 A B C P => @lem8403513 A B C P _115318 s)). Qed.
Lemma lem8403515 {A B C P : Type'} : (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B)) = (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B))). Qed.
Lemma lem8403516 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1992 A B C P _115318) = (term1983 A B C P _115318).
Proof. exact (MK_COMB (@lem8403515 A B C P) (@lem8403514 A B C P _115318)). Qed.
Lemma lem8403517 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8403518 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1993 A B C P _115318) = (term1984 A B C P _115318).
Proof. exact (MK_COMB (@lem8403517) (@lem8403516 A B C P _115318)). Qed.
Lemma lem8403519 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1796 A B C P _115318) = (term1796 A B C P _115318).
Proof. exact (eq_refl (term1796 A B C P _115318)). Qed.
Lemma lem8403520 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1988 A B C P _115318) = (term1985 A B C P _115318).
Proof. exact (MK_COMB (@lem8403518 A B C P _115318) (@lem8403519 A B C P _115318)). Qed.
Lemma lem8403521 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8403522 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1994 A B C P _115318) = (term1995 A B C P _115318).
Proof. exact (MK_COMB (@lem8403521) (@lem8403520 A B C P _115318)). Qed.
Lemma lem8403523 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) : (term1990 A B C P _115318 s) = (term1981 A B C P _115318 s).
Proof. exact (eq_refl (term1990 A B C P _115318 s)). Qed.
Lemma lem8403524 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8403525 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) : (term1996 A B C P _115318 s) = (term1997 A B C P _115318 s).
Proof. exact (MK_COMB (@lem8403524) (@lem8403523 A B C P _115318 s)). Qed.
Lemma lem8403526 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1796 A B C P _115318) = (term1796 A B C P _115318).
Proof. exact (eq_refl (term1796 A B C P _115318)). Qed.
Lemma lem8403527 {A B C P : Type'} (s : type1047 A B C P) (_115318 : type1049 A B C P) : (term1998 A B C P s _115318) = (term1999 A B C P s _115318).
Proof. exact (MK_COMB (@lem8403525 A B C P _115318 s) (@lem8403526 A B C P _115318)). Qed.
Lemma lem8403528 {A B C P : Type'} (_115318 : type1049 A B C P) : (term2000 A B C P _115318) = (term2001 A B C P _115318).
Proof. exact (fun_ext (fun s : type1047 A B C P => @lem8403527 A B C P s _115318)). Qed.
Lemma lem8403529 {A B C P : Type'} : (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B)) = (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B))). Qed.
Lemma lem8403530 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1989 A B C P _115318) = (term2002 A B C P _115318).
Proof. exact (MK_COMB (@lem8403529 A B C P) (@lem8403528 A B C P _115318)). Qed.
Lemma lem8403531 {A B C P : Type'} (_115318 : type1049 A B C P) : ((term1988 A B C P _115318) = (term1989 A B C P _115318)) = ((term1985 A B C P _115318) = (term2002 A B C P _115318)).
Proof. exact (MK_COMB (@lem8403522 A B C P _115318) (@lem8403530 A B C P _115318)). Qed.
Lemma lem8403532 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1985 A B C P _115318) = (term2002 A B C P _115318).
Proof. exact (EQ_MP (@lem8403531 A B C P _115318) (@lem8403512 A B C P _115318)). Qed.
Lemma lem8403534 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1332 A P Q) = (term1333 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8403535 {A B C P : Type'} (P' : type262 A B C P) (Q : Prop) : (term2003 A B C P P' Q) = (term2004 A B C P P' Q).
Proof. exact (@lem8403534 (type1048 A B C P) P' Q). Qed.
Lemma lem8403536 {A B C P : Type'} (s : type1047 A B C P) (_115318 : type1049 A B C P) : (term2005 A B C P s _115318) = (term2006 A B C P s _115318).
Proof. exact (@lem8403535 A B C P (term1980 A B C P _115318 s) (term1796 A B C P _115318)). Qed.
Lemma lem8403537 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) (t : type1048 A B C P) : (term2007 A B C P _115318 s t) = (term1978 A B C P _115318 s t).
Proof. exact (eq_refl (term2007 A B C P _115318 s t)). Qed.
Lemma lem8403538 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) : (term2008 A B C P _115318 s) = (term1980 A B C P _115318 s).
Proof. exact (fun_ext (fun t : type1048 A B C P => @lem8403537 A B C P _115318 s t)). Qed.
Lemma lem8403539 {A B C P : Type'} : (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> C -> (A -> B) -> B)) = (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> C -> (A -> B) -> B))). Qed.
Lemma lem8403540 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) : (term2009 A B C P _115318 s) = (term1981 A B C P _115318 s).
Proof. exact (MK_COMB (@lem8403539 A B C P) (@lem8403538 A B C P _115318 s)). Qed.
Lemma lem8403541 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8403542 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) : (term2010 A B C P _115318 s) = (term1997 A B C P _115318 s).
Proof. exact (MK_COMB (@lem8403541) (@lem8403540 A B C P _115318 s)). Qed.
Lemma lem8403543 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1796 A B C P _115318) = (term1796 A B C P _115318).
Proof. exact (eq_refl (term1796 A B C P _115318)). Qed.
Lemma lem8403544 {A B C P : Type'} (s : type1047 A B C P) (_115318 : type1049 A B C P) : (term2005 A B C P s _115318) = (term1999 A B C P s _115318).
Proof. exact (MK_COMB (@lem8403542 A B C P _115318 s) (@lem8403543 A B C P _115318)). Qed.
Lemma lem8403545 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8403546 {A B C P : Type'} (s : type1047 A B C P) (_115318 : type1049 A B C P) : (term2011 A B C P s _115318) = (term2012 A B C P s _115318).
Proof. exact (MK_COMB (@lem8403545) (@lem8403544 A B C P s _115318)). Qed.
Lemma lem8403547 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) (t : type1048 A B C P) : (term2007 A B C P _115318 s t) = (term1978 A B C P _115318 s t).
Proof. exact (eq_refl (term2007 A B C P _115318 s t)). Qed.
Lemma lem8403548 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8403549 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1047 A B C P) (t : type1048 A B C P) : (term2013 A B C P _115318 s t) = (term2014 A B C P _115318 s t).
Proof. exact (MK_COMB (@lem8403548) (@lem8403547 A B C P _115318 s t)). Qed.
Lemma lem8403550 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1796 A B C P _115318) = (term1796 A B C P _115318).
Proof. exact (eq_refl (term1796 A B C P _115318)). Qed.
Lemma lem8403551 {A B C P : Type'} (s : type1047 A B C P) (t : type1048 A B C P) (_115318 : type1049 A B C P) : (term2015 A B C P s t _115318) = (term2016 A B C P s t _115318).
Proof. exact (MK_COMB (@lem8403549 A B C P _115318 s t) (@lem8403550 A B C P _115318)). Qed.
Lemma lem8403552 {A B C P : Type'} (s : type1047 A B C P) (_115318 : type1049 A B C P) : (term2017 A B C P s _115318) = (term2018 A B C P s _115318).
Proof. exact (fun_ext (fun t : type1048 A B C P => @lem8403551 A B C P s t _115318)). Qed.
Lemma lem8403553 {A B C P : Type'} : (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> C -> (A -> B) -> B)) = (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> C -> (A -> B) -> B))). Qed.
Lemma lem8403554 {A B C P : Type'} (s : type1047 A B C P) (_115318 : type1049 A B C P) : (term2006 A B C P s _115318) = (term2019 A B C P s _115318).
Proof. exact (MK_COMB (@lem8403553 A B C P) (@lem8403552 A B C P s _115318)). Qed.
Lemma lem8403555 {A B C P : Type'} (s : type1047 A B C P) (_115318 : type1049 A B C P) : ((term2005 A B C P s _115318) = (term2006 A B C P s _115318)) = ((term1999 A B C P s _115318) = (term2019 A B C P s _115318)).
Proof. exact (MK_COMB (@lem8403546 A B C P s _115318) (@lem8403554 A B C P s _115318)). Qed.
Lemma lem8403556 {A B C P : Type'} (s : type1047 A B C P) (_115318 : type1049 A B C P) : (term1999 A B C P s _115318) = (term2019 A B C P s _115318).
Proof. exact (EQ_MP (@lem8403555 A B C P s _115318) (@lem8403536 A B C P s _115318)). Qed.
Lemma lem8403557 {A B C P : Type'} (_115318 : type1049 A B C P) : (term2001 A B C P _115318) = (term2020 A B C P _115318).
Proof. exact (fun_ext (fun s : type1047 A B C P => @lem8403556 A B C P s _115318)). Qed.
Lemma lem8403558 {A B C P : Type'} : (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B)) = (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> ((prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)) -> Prop) -> (A -> B) -> P -> B))). Qed.
Lemma lem8403559 {A B C P : Type'} (_115318 : type1049 A B C P) : (term2002 A B C P _115318) = (term2021 A B C P _115318).
Proof. exact (MK_COMB (@lem8403558 A B C P) (@lem8403557 A B C P _115318)). Qed.
Lemma lem8403560 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1985 A B C P _115318) = (term2021 A B C P _115318).
Proof. exact (TRANS (@lem8403532 A B C P _115318) (@lem8403559 A B C P _115318)). Qed.
Lemma lem8403561 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1797 A B C P _115318) = (term2021 A B C P _115318).
Proof. exact (TRANS (@lem8403508 A B C P _115318) (@lem8403560 A B C P _115318)). Qed.
Lemma lem8403562 {A B C P : Type'} (_115318 : type1049 A B C P) : (term1729 A B C P _115318) = (term2021 A B C P _115318).
Proof. exact (TRANS (@lem8403256 A B C P _115318) (@lem8403561 A B C P _115318)). Qed.
Lemma lem8403563 {A B C P : Type'} (_115318 : type1049 A B C P) : (term826 A B C P _115318) = (term2021 A B C P _115318).
Proof. exact (TRANS (@lem8402775 A B C P _115318) (@lem8403562 A B C P _115318)). Qed.
Lemma lem8403564 {A B C P : Type'} (_115318 : type1049 A B C P) (h1 : term826 A B C P _115318) : term2021 A B C P _115318.
Proof. exact (EQ_MP (@lem8403563 A B C P _115318) (@lem8401033 A B C P _115318 h1)). Qed.
Lemma lem8403568 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term361 B C P f clauses s t c) = (term361 B C P f clauses s t c).
Proof. exact (eq_refl (term361 B C P f clauses s t c)). Qed.
Lemma lem8403569 {B C P : Type'} (P' : type766 B C P) : (term2022 B C P P') = (term2023 B C P P').
Proof. exact (@lem18392 (type1475 B C P) P'). Qed.
Lemma lem8403570 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term2024 B C P f clauses s c) = (term2025 B C P f clauses s c).
Proof. exact (@lem8403569 B C P (term362 B C P f clauses s c)). Qed.
Lemma lem8403571 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term2026 B C P f clauses s c t) = (term361 B C P f clauses s t c).
Proof. exact (eq_refl (term2026 B C P f clauses s c t)). Qed.
Lemma lem8403572 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8403574 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term2027 B C P f clauses s c t) = (term2028 B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8403572) (@lem8403571 B C P f clauses s t c)). Qed.
Lemma lem8403575 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term2029 B C P f clauses s c) = (term2030 B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8403574 B C P f clauses s t c)). Qed.
Lemma lem8403576 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8403577 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term2025 B C P f clauses s c) = (term2031 B C P f clauses s c).
Proof. exact (MK_COMB (@lem8403576 B C P) (@lem8403575 B C P f clauses s c)). Qed.
Lemma lem8403578 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term2024 B C P f clauses s c) = (term2031 B C P f clauses s c).
Proof. exact (TRANS (@lem8403570 B C P f clauses s c) (@lem8403577 B C P f clauses s c)). Qed.
Lemma lem8403579 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term362 B C P f clauses s c) = (term362 B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8403568 B C P f clauses s t c)). Qed.
Lemma lem8403580 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8403581 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term363 B C P f clauses s c) = (term363 B C P f clauses s c).
Proof. exact (MK_COMB (@lem8403580 B C P) (@lem8403579 B C P f clauses s c)). Qed.
Lemma lem8403582 {B P : Type'} (P' : type805 B P) : (term2032 B P P') = (term2033 B P P').
Proof. exact (@lem18392 (P -> B) P'). Qed.
Lemma lem8403583 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2034 B C P f clauses c) = (term2035 B C P f clauses c).
Proof. exact (@lem8403582 B P (term364 B C P f clauses c)). Qed.
Lemma lem8403584 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term2036 B C P f clauses c s) = (term363 B C P f clauses s c).
Proof. exact (eq_refl (term2036 B C P f clauses c s)). Qed.
Lemma lem8403585 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8403586 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term2037 B C P f clauses c s) = (term2024 B C P f clauses s c).
Proof. exact (MK_COMB (@lem8403585) (@lem8403584 B C P f clauses s c)). Qed.
Lemma lem8403587 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term2037 B C P f clauses c s) = (term2031 B C P f clauses s c).
Proof. exact (TRANS (@lem8403586 B C P f clauses s c) (@lem8403578 B C P f clauses s c)). Qed.
Lemma lem8403588 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2038 B C P f clauses c) = (term2039 B C P f clauses c).
Proof. exact (fun_ext (fun s : P -> B => @lem8403587 B C P f clauses s c)). Qed.
Lemma lem8403589 {B P : Type'} : (@ex (P -> B)) = (@ex (P -> B)).
Proof. exact (eq_refl (@ex (P -> B))). Qed.
Lemma lem8403590 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2035 B C P f clauses c) = (term2040 B C P f clauses c).
Proof. exact (MK_COMB (@lem8403589 B P) (@lem8403588 B C P f clauses c)). Qed.
Lemma lem8403591 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2034 B C P f clauses c) = (term2040 B C P f clauses c).
Proof. exact (TRANS (@lem8403583 B C P f clauses c) (@lem8403590 B C P f clauses c)). Qed.
Lemma lem8403592 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term364 B C P f clauses c) = (term364 B C P f clauses c).
Proof. exact (fun_ext (fun s : P -> B => @lem8403581 B C P f clauses s c)). Qed.
Lemma lem8403593 {B P : Type'} : (@all (P -> B)) = (@all (P -> B)).
Proof. exact (eq_refl (@all (P -> B))). Qed.
Lemma lem8403594 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term365 B C P f clauses c) = (term365 B C P f clauses c).
Proof. exact (MK_COMB (@lem8403593 B P) (@lem8403592 B C P f clauses c)). Qed.
Lemma lem8403596 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) (f : type1178 B C P) : (term2041 B C P _115317 clauses c f) = (term2041 B C P _115317 clauses c f).
Proof. exact (eq_refl (term2041 B C P _115317 clauses c f)). Qed.
Lemma lem8403597 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2042 B C P _115317 f clauses c) = (term2042 B C P _115317 f clauses c).
Proof. exact (MK_COMB (@lem8403596 B C P _115317 clauses c f) (@lem8403594 B C P f clauses c)). Qed.
Lemma lem8403599 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) (f : type1178 B C P) : (term2043 B C P _115317 clauses c f) = (term2043 B C P _115317 clauses c f).
Proof. exact (eq_refl (term2043 B C P _115317 clauses c f)). Qed.
Lemma lem8403600 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2044 B C P _115317 f clauses c) = (term2045 B C P _115317 f clauses c).
Proof. exact (MK_COMB (@lem8403599 B C P _115317 clauses c f) (@lem8403591 B C P f clauses c)). Qed.
Lemma lem8403601 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8403602 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2046 B C P _115317 f clauses c) = (term2047 B C P _115317 f clauses c).
Proof. exact (MK_COMB (@lem8403601) (@lem8403600 B C P _115317 f clauses c)). Qed.
Lemma lem8403603 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2048 B C P _115317 f clauses c) = (term2049 B C P _115317 f clauses c).
Proof. exact (MK_COMB (@lem8403602 B C P _115317 f clauses c) (@lem8403597 B C P _115317 f clauses c)). Qed.
Lemma lem8403604 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : ((_115317 clauses c f) = (term365 B C P f clauses c)) = (term2048 B C P _115317 f clauses c).
Proof. exact (@lem17784 (_115317 clauses c f) (term365 B C P f clauses c)). Qed.
Lemma lem8403605 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : ((_115317 clauses c f) = (term365 B C P f clauses c)) = (term2049 B C P _115317 f clauses c).
Proof. exact (TRANS (@lem8403604 B C P _115317 f clauses c) (@lem8403603 B C P _115317 f clauses c)). Qed.
Lemma lem8403606 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term594 B C P _115317 clauses c) = (term2050 B C P _115317 clauses c).
Proof. exact (fun_ext (fun f : type1178 B C P => @lem8403605 B C P _115317 f clauses c)). Qed.
Lemma lem8403607 {B C P : Type'} : (@all ((prod (P -> B) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> B) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> B) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8403608 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term595 B C P _115317 clauses c) = (term2051 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8403607 B C P) (@lem8403606 B C P _115317 clauses c)). Qed.
Lemma lem8403609 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term596 B C P _115317 clauses) = (term2052 B C P _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8403608 B C P _115317 clauses c)). Qed.
Lemma lem8403610 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8403611 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term597 B C P _115317 clauses) = (term2053 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8403610 C) (@lem8403609 B C P _115317 clauses)). Qed.
Lemma lem8403612 {B C P : Type'} (_115317 : type1092 B C P) : (term598 B C P _115317) = (term2054 B C P _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8403611 B C P _115317 clauses)). Qed.
Lemma lem8403613 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8403614 {B C P : Type'} (_115317 : type1092 B C P) : (term599 B C P _115317) = (term2055 B C P _115317).
Proof. exact (MK_COMB (@lem8403613 B C P) (@lem8403612 B C P _115317)). Qed.
Lemma lem8403624 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term1070 A P Q) = (term1071 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem8403625 {B C P : Type'} (P' : type306 B C P) (Q : type306 B C P) : (term2056 B C P P' Q) = (term2057 B C P P' Q).
Proof. exact (@lem8403624 (type1178 B C P) P' Q). Qed.
Lemma lem8403626 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2058 B C P _115317 clauses c) = (term2059 B C P _115317 clauses c).
Proof. exact (@lem8403625 B C P (term2060 B C P _115317 clauses c) (term2061 B C P _115317 clauses c)). Qed.
Lemma lem8403627 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2062 B C P _115317 clauses c f) = (term2045 B C P _115317 f clauses c).
Proof. exact (eq_refl (term2062 B C P _115317 clauses c f)). Qed.
Lemma lem8403628 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8403629 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2063 B C P _115317 clauses c f) = (term2047 B C P _115317 f clauses c).
Proof. exact (MK_COMB (@lem8403628) (@lem8403627 B C P _115317 f clauses c)). Qed.
Lemma lem8403630 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2064 B C P _115317 clauses c f) = (term2042 B C P _115317 f clauses c).
Proof. exact (eq_refl (term2064 B C P _115317 clauses c f)). Qed.
Lemma lem8403631 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2065 B C P _115317 clauses c f) = (term2049 B C P _115317 f clauses c).
Proof. exact (MK_COMB (@lem8403629 B C P _115317 f clauses c) (@lem8403630 B C P _115317 f clauses c)). Qed.
Lemma lem8403632 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2066 B C P _115317 clauses c) = (term2050 B C P _115317 clauses c).
Proof. exact (fun_ext (fun f : type1178 B C P => @lem8403631 B C P _115317 f clauses c)). Qed.
Lemma lem8403633 {B C P : Type'} : (@all ((prod (P -> B) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> B) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> B) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8403634 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2058 B C P _115317 clauses c) = (term2051 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8403633 B C P) (@lem8403632 B C P _115317 clauses c)). Qed.
Lemma lem8403635 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8403636 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2067 B C P _115317 clauses c) = (term2068 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8403635) (@lem8403634 B C P _115317 clauses c)). Qed.
Lemma lem8403637 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2062 B C P _115317 clauses c f) = (term2045 B C P _115317 f clauses c).
Proof. exact (eq_refl (term2062 B C P _115317 clauses c f)). Qed.
Lemma lem8403638 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2069 B C P _115317 clauses c) = (term2060 B C P _115317 clauses c).
Proof. exact (fun_ext (fun f : type1178 B C P => @lem8403637 B C P _115317 f clauses c)). Qed.
Lemma lem8403639 {B C P : Type'} : (@all ((prod (P -> B) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> B) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> B) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8403640 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2070 B C P _115317 clauses c) = (term2071 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8403639 B C P) (@lem8403638 B C P _115317 clauses c)). Qed.
Lemma lem8403641 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8403642 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2072 B C P _115317 clauses c) = (term2073 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8403641) (@lem8403640 B C P _115317 clauses c)). Qed.
Lemma lem8403643 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2064 B C P _115317 clauses c f) = (term2042 B C P _115317 f clauses c).
Proof. exact (eq_refl (term2064 B C P _115317 clauses c f)). Qed.
Lemma lem8403644 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2074 B C P _115317 clauses c) = (term2061 B C P _115317 clauses c).
Proof. exact (fun_ext (fun f : type1178 B C P => @lem8403643 B C P _115317 f clauses c)). Qed.
Lemma lem8403645 {B C P : Type'} : (@all ((prod (P -> B) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> B) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> B) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8403646 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2075 B C P _115317 clauses c) = (term2076 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8403645 B C P) (@lem8403644 B C P _115317 clauses c)). Qed.
Lemma lem8403647 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2059 B C P _115317 clauses c) = (term2077 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8403642 B C P _115317 clauses c) (@lem8403646 B C P _115317 clauses c)). Qed.
Lemma lem8403648 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : ((term2058 B C P _115317 clauses c) = (term2059 B C P _115317 clauses c)) = ((term2051 B C P _115317 clauses c) = (term2077 B C P _115317 clauses c)).
Proof. exact (MK_COMB (@lem8403636 B C P _115317 clauses c) (@lem8403647 B C P _115317 clauses c)). Qed.
Lemma lem8403649 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2051 B C P _115317 clauses c) = (term2077 B C P _115317 clauses c).
Proof. exact (EQ_MP (@lem8403648 B C P _115317 clauses c) (@lem8403626 B C P _115317 clauses c)). Qed.
Lemma lem8403770 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2052 B C P _115317 clauses) = (term2078 B C P _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8403649 B C P _115317 clauses c)). Qed.
Lemma lem8403771 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8403772 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2053 B C P _115317 clauses) = (term2079 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8403771 C) (@lem8403770 B C P _115317 clauses)). Qed.
Lemma lem8403774 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term1070 A P Q) = (term1071 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem8403775 {C : Type'} (P : C -> Prop) (Q : C -> Prop) : (term1070 C P Q) = (term1071 C P Q).
Proof. exact (@lem8403774 C P Q). Qed.
Lemma lem8403776 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2080 B C P _115317 clauses) = (term2081 B C P _115317 clauses).
Proof. exact (@lem8403775 C (term2082 B C P _115317 clauses) (term2083 B C P _115317 clauses)). Qed.
Lemma lem8403777 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2084 B C P _115317 clauses c) = (term2071 B C P _115317 clauses c).
Proof. exact (eq_refl (term2084 B C P _115317 clauses c)). Qed.
Lemma lem8403778 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8403779 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2085 B C P _115317 clauses c) = (term2073 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8403778) (@lem8403777 B C P _115317 clauses c)). Qed.
Lemma lem8403780 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2086 B C P _115317 clauses c) = (term2076 B C P _115317 clauses c).
Proof. exact (eq_refl (term2086 B C P _115317 clauses c)). Qed.
Lemma lem8403781 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2087 B C P _115317 clauses c) = (term2077 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8403779 B C P _115317 clauses c) (@lem8403780 B C P _115317 clauses c)). Qed.
Lemma lem8403782 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2088 B C P _115317 clauses) = (term2078 B C P _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8403781 B C P _115317 clauses c)). Qed.
Lemma lem8403783 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8403784 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2080 B C P _115317 clauses) = (term2079 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8403783 C) (@lem8403782 B C P _115317 clauses)). Qed.
Lemma lem8403785 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8403786 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2089 B C P _115317 clauses) = (term2090 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8403785) (@lem8403784 B C P _115317 clauses)). Qed.
Lemma lem8403787 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2084 B C P _115317 clauses c) = (term2071 B C P _115317 clauses c).
Proof. exact (eq_refl (term2084 B C P _115317 clauses c)). Qed.
Lemma lem8403788 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2091 B C P _115317 clauses) = (term2082 B C P _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8403787 B C P _115317 clauses c)). Qed.
Lemma lem8403789 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8403790 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2092 B C P _115317 clauses) = (term2093 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8403789 C) (@lem8403788 B C P _115317 clauses)). Qed.
Lemma lem8403791 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8403792 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2094 B C P _115317 clauses) = (term2095 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8403791) (@lem8403790 B C P _115317 clauses)). Qed.
Lemma lem8403793 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2086 B C P _115317 clauses c) = (term2076 B C P _115317 clauses c).
Proof. exact (eq_refl (term2086 B C P _115317 clauses c)). Qed.
Lemma lem8403794 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2096 B C P _115317 clauses) = (term2083 B C P _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8403793 B C P _115317 clauses c)). Qed.
Lemma lem8403795 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8403796 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2097 B C P _115317 clauses) = (term2098 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8403795 C) (@lem8403794 B C P _115317 clauses)). Qed.
Lemma lem8403797 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2081 B C P _115317 clauses) = (term2099 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8403792 B C P _115317 clauses) (@lem8403796 B C P _115317 clauses)). Qed.
Lemma lem8403798 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : ((term2080 B C P _115317 clauses) = (term2081 B C P _115317 clauses)) = ((term2079 B C P _115317 clauses) = (term2099 B C P _115317 clauses)).
Proof. exact (MK_COMB (@lem8403786 B C P _115317 clauses) (@lem8403797 B C P _115317 clauses)). Qed.
Lemma lem8403799 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2079 B C P _115317 clauses) = (term2099 B C P _115317 clauses).
Proof. exact (EQ_MP (@lem8403798 B C P _115317 clauses) (@lem8403776 B C P _115317 clauses)). Qed.
Lemma lem8403928 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2053 B C P _115317 clauses) = (term2099 B C P _115317 clauses).
Proof. exact (TRANS (@lem8403772 B C P _115317 clauses) (@lem8403799 B C P _115317 clauses)). Qed.
Lemma lem8403929 {B C P : Type'} (_115317 : type1092 B C P) : (term2054 B C P _115317) = (term2100 B C P _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8403928 B C P _115317 clauses)). Qed.
Lemma lem8403930 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8403931 {B C P : Type'} (_115317 : type1092 B C P) : (term2055 B C P _115317) = (term2101 B C P _115317).
Proof. exact (MK_COMB (@lem8403930 B C P) (@lem8403929 B C P _115317)). Qed.
Lemma lem8403933 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term1070 A P Q) = (term1071 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem8403934 {B C P : Type'} (P' : type1096 B C P) (Q : type1096 B C P) : (term2102 B C P P' Q) = (term2103 B C P P' Q).
Proof. exact (@lem8403933 (type1636 B C P) P' Q). Qed.
Lemma lem8403935 {B C P : Type'} (_115317 : type1092 B C P) : (term2104 B C P _115317) = (term2105 B C P _115317).
Proof. exact (@lem8403934 B C P (term2106 B C P _115317) (term2107 B C P _115317)). Qed.
Lemma lem8403936 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2108 B C P _115317 clauses) = (term2093 B C P _115317 clauses).
Proof. exact (eq_refl (term2108 B C P _115317 clauses)). Qed.
Lemma lem8403937 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8403938 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2109 B C P _115317 clauses) = (term2095 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8403937) (@lem8403936 B C P _115317 clauses)). Qed.
Lemma lem8403939 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2110 B C P _115317 clauses) = (term2098 B C P _115317 clauses).
Proof. exact (eq_refl (term2110 B C P _115317 clauses)). Qed.
Lemma lem8403940 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2111 B C P _115317 clauses) = (term2099 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8403938 B C P _115317 clauses) (@lem8403939 B C P _115317 clauses)). Qed.
Lemma lem8403941 {B C P : Type'} (_115317 : type1092 B C P) : (term2112 B C P _115317) = (term2100 B C P _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8403940 B C P _115317 clauses)). Qed.
Lemma lem8403942 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8403943 {B C P : Type'} (_115317 : type1092 B C P) : (term2104 B C P _115317) = (term2101 B C P _115317).
Proof. exact (MK_COMB (@lem8403942 B C P) (@lem8403941 B C P _115317)). Qed.
Lemma lem8403944 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8403945 {B C P : Type'} (_115317 : type1092 B C P) : (term2113 B C P _115317) = (term2114 B C P _115317).
Proof. exact (MK_COMB (@lem8403944) (@lem8403943 B C P _115317)). Qed.
Lemma lem8403946 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2108 B C P _115317 clauses) = (term2093 B C P _115317 clauses).
Proof. exact (eq_refl (term2108 B C P _115317 clauses)). Qed.
Lemma lem8403947 {B C P : Type'} (_115317 : type1092 B C P) : (term2115 B C P _115317) = (term2106 B C P _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8403946 B C P _115317 clauses)). Qed.
Lemma lem8403948 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8403949 {B C P : Type'} (_115317 : type1092 B C P) : (term2116 B C P _115317) = (term2117 B C P _115317).
Proof. exact (MK_COMB (@lem8403948 B C P) (@lem8403947 B C P _115317)). Qed.
Lemma lem8403950 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8403951 {B C P : Type'} (_115317 : type1092 B C P) : (term2118 B C P _115317) = (term2119 B C P _115317).
Proof. exact (MK_COMB (@lem8403950) (@lem8403949 B C P _115317)). Qed.
Lemma lem8403952 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2110 B C P _115317 clauses) = (term2098 B C P _115317 clauses).
Proof. exact (eq_refl (term2110 B C P _115317 clauses)). Qed.
Lemma lem8403953 {B C P : Type'} (_115317 : type1092 B C P) : (term2120 B C P _115317) = (term2107 B C P _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8403952 B C P _115317 clauses)). Qed.
Lemma lem8403954 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8403955 {B C P : Type'} (_115317 : type1092 B C P) : (term2121 B C P _115317) = (term2122 B C P _115317).
Proof. exact (MK_COMB (@lem8403954 B C P) (@lem8403953 B C P _115317)). Qed.
Lemma lem8403956 {B C P : Type'} (_115317 : type1092 B C P) : (term2105 B C P _115317) = (term2123 B C P _115317).
Proof. exact (MK_COMB (@lem8403951 B C P _115317) (@lem8403955 B C P _115317)). Qed.
Lemma lem8403957 {B C P : Type'} (_115317 : type1092 B C P) : ((term2104 B C P _115317) = (term2105 B C P _115317)) = ((term2101 B C P _115317) = (term2123 B C P _115317)).
Proof. exact (MK_COMB (@lem8403945 B C P _115317) (@lem8403956 B C P _115317)). Qed.
Lemma lem8403958 {B C P : Type'} (_115317 : type1092 B C P) : (term2101 B C P _115317) = (term2123 B C P _115317).
Proof. exact (EQ_MP (@lem8403957 B C P _115317) (@lem8403935 B C P _115317)). Qed.
Lemma lem8404095 {B C P : Type'} (_115317 : type1092 B C P) : (term2055 B C P _115317) = (term2123 B C P _115317).
Proof. exact (TRANS (@lem8403931 B C P _115317) (@lem8403958 B C P _115317)). Qed.
Lemma lem8404097 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1140 A P Q) = (term1141 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8404098 {B P : Type'} (P' : Prop) (Q : type805 B P) : (term2124 B P P' Q) = (term2125 B P P' Q).
Proof. exact (@lem8404097 (P -> B) P' Q). Qed.
Lemma lem8404099 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2126 B C P _115317 f clauses c) = (term2127 B C P _115317 f clauses c).
Proof. exact (@lem8404098 B P (_115317 clauses c f) (term2039 B C P f clauses c)). Qed.
Lemma lem8404100 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term2128 B C P f clauses c s) = (term2031 B C P f clauses s c).
Proof. exact (eq_refl (term2128 B C P f clauses c s)). Qed.
Lemma lem8404101 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2129 B C P f clauses c) = (term2039 B C P f clauses c).
Proof. exact (fun_ext (fun s : P -> B => @lem8404100 B C P f clauses s c)). Qed.
Lemma lem8404102 {B P : Type'} : (@ex (P -> B)) = (@ex (P -> B)).
Proof. exact (eq_refl (@ex (P -> B))). Qed.
Lemma lem8404103 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2130 B C P f clauses c) = (term2040 B C P f clauses c).
Proof. exact (MK_COMB (@lem8404102 B P) (@lem8404101 B C P f clauses c)). Qed.
Lemma lem8404104 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) (f : type1178 B C P) : (term2043 B C P _115317 clauses c f) = (term2043 B C P _115317 clauses c f).
Proof. exact (eq_refl (term2043 B C P _115317 clauses c f)). Qed.
Lemma lem8404105 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2126 B C P _115317 f clauses c) = (term2045 B C P _115317 f clauses c).
Proof. exact (MK_COMB (@lem8404104 B C P _115317 clauses c f) (@lem8404103 B C P f clauses c)). Qed.
Lemma lem8404106 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8404107 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2131 B C P _115317 f clauses c) = (term2132 B C P _115317 f clauses c).
Proof. exact (MK_COMB (@lem8404106) (@lem8404105 B C P _115317 f clauses c)). Qed.
Lemma lem8404108 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term2128 B C P f clauses c s) = (term2031 B C P f clauses s c).
Proof. exact (eq_refl (term2128 B C P f clauses c s)). Qed.
Lemma lem8404109 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) (f : type1178 B C P) : (term2043 B C P _115317 clauses c f) = (term2043 B C P _115317 clauses c f).
Proof. exact (eq_refl (term2043 B C P _115317 clauses c f)). Qed.
Lemma lem8404110 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term2133 B C P _115317 f clauses c s) = (term2134 B C P _115317 f clauses s c).
Proof. exact (MK_COMB (@lem8404109 B C P _115317 clauses c f) (@lem8404108 B C P f clauses s c)). Qed.
Lemma lem8404111 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2135 B C P _115317 f clauses c) = (term2136 B C P _115317 f clauses c).
Proof. exact (fun_ext (fun s : P -> B => @lem8404110 B C P _115317 f clauses s c)). Qed.
Lemma lem8404112 {B P : Type'} : (@ex (P -> B)) = (@ex (P -> B)).
Proof. exact (eq_refl (@ex (P -> B))). Qed.
Lemma lem8404113 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2127 B C P _115317 f clauses c) = (term2137 B C P _115317 f clauses c).
Proof. exact (MK_COMB (@lem8404112 B P) (@lem8404111 B C P _115317 f clauses c)). Qed.
Lemma lem8404114 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : ((term2126 B C P _115317 f clauses c) = (term2127 B C P _115317 f clauses c)) = ((term2045 B C P _115317 f clauses c) = (term2137 B C P _115317 f clauses c)).
Proof. exact (MK_COMB (@lem8404107 B C P _115317 f clauses c) (@lem8404113 B C P _115317 f clauses c)). Qed.
Lemma lem8404115 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2045 B C P _115317 f clauses c) = (term2137 B C P _115317 f clauses c).
Proof. exact (EQ_MP (@lem8404114 B C P _115317 f clauses c) (@lem8404099 B C P _115317 f clauses c)). Qed.
Lemma lem8404117 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1140 A P Q) = (term1141 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8404118 {B C P : Type'} (P' : Prop) (Q : type766 B C P) : (term2138 B C P P' Q) = (term2139 B C P P' Q).
Proof. exact (@lem8404117 (type1475 B C P) P' Q). Qed.
Lemma lem8404119 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term2140 B C P _115317 f clauses s c) = (term2141 B C P _115317 f clauses s c).
Proof. exact (@lem8404118 B C P (_115317 clauses c f) (term2030 B C P f clauses s c)). Qed.
Lemma lem8404120 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term2142 B C P f clauses s c t) = (term2028 B C P f clauses s t c).
Proof. exact (eq_refl (term2142 B C P f clauses s c t)). Qed.
Lemma lem8404121 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term2143 B C P f clauses s c) = (term2030 B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8404120 B C P f clauses s t c)). Qed.
Lemma lem8404122 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8404123 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term2144 B C P f clauses s c) = (term2031 B C P f clauses s c).
Proof. exact (MK_COMB (@lem8404122 B C P) (@lem8404121 B C P f clauses s c)). Qed.
Lemma lem8404124 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) (f : type1178 B C P) : (term2043 B C P _115317 clauses c f) = (term2043 B C P _115317 clauses c f).
Proof. exact (eq_refl (term2043 B C P _115317 clauses c f)). Qed.
Lemma lem8404125 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term2140 B C P _115317 f clauses s c) = (term2134 B C P _115317 f clauses s c).
Proof. exact (MK_COMB (@lem8404124 B C P _115317 clauses c f) (@lem8404123 B C P f clauses s c)). Qed.
Lemma lem8404126 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8404127 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term2145 B C P _115317 f clauses s c) = (term2146 B C P _115317 f clauses s c).
Proof. exact (MK_COMB (@lem8404126) (@lem8404125 B C P _115317 f clauses s c)). Qed.
Lemma lem8404128 {B C P : Type'} (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term2142 B C P f clauses s c t) = (term2028 B C P f clauses s t c).
Proof. exact (eq_refl (term2142 B C P f clauses s c t)). Qed.
Lemma lem8404129 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) (f : type1178 B C P) : (term2043 B C P _115317 clauses c f) = (term2043 B C P _115317 clauses c f).
Proof. exact (eq_refl (term2043 B C P _115317 clauses c f)). Qed.
Lemma lem8404130 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term2147 B C P _115317 f clauses s c t) = (term2148 B C P _115317 f clauses s t c).
Proof. exact (MK_COMB (@lem8404129 B C P _115317 clauses c f) (@lem8404128 B C P f clauses s t c)). Qed.
Lemma lem8404131 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term2149 B C P _115317 f clauses s c) = (term2150 B C P _115317 f clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8404130 B C P _115317 f clauses s t c)). Qed.
Lemma lem8404132 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8404133 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term2141 B C P _115317 f clauses s c) = (term2151 B C P _115317 f clauses s c).
Proof. exact (MK_COMB (@lem8404132 B C P) (@lem8404131 B C P _115317 f clauses s c)). Qed.
Lemma lem8404134 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : ((term2140 B C P _115317 f clauses s c) = (term2141 B C P _115317 f clauses s c)) = ((term2134 B C P _115317 f clauses s c) = (term2151 B C P _115317 f clauses s c)).
Proof. exact (MK_COMB (@lem8404127 B C P _115317 f clauses s c) (@lem8404133 B C P _115317 f clauses s c)). Qed.
Lemma lem8404135 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term2134 B C P _115317 f clauses s c) = (term2151 B C P _115317 f clauses s c).
Proof. exact (EQ_MP (@lem8404134 B C P _115317 f clauses s c) (@lem8404119 B C P _115317 f clauses s c)). Qed.
Lemma lem8404136 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2136 B C P _115317 f clauses c) = (term2152 B C P _115317 f clauses c).
Proof. exact (fun_ext (fun s : P -> B => @lem8404135 B C P _115317 f clauses s c)). Qed.
Lemma lem8404137 {B P : Type'} : (@ex (P -> B)) = (@ex (P -> B)).
Proof. exact (eq_refl (@ex (P -> B))). Qed.
Lemma lem8404138 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2137 B C P _115317 f clauses c) = (term2153 B C P _115317 f clauses c).
Proof. exact (MK_COMB (@lem8404137 B P) (@lem8404136 B C P _115317 f clauses c)). Qed.
Lemma lem8404139 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2045 B C P _115317 f clauses c) = (term2153 B C P _115317 f clauses c).
Proof. exact (TRANS (@lem8404115 B C P _115317 f clauses c) (@lem8404138 B C P _115317 f clauses c)). Qed.
Lemma lem8404140 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2060 B C P _115317 clauses c) = (term2154 B C P _115317 clauses c).
Proof. exact (fun_ext (fun f : type1178 B C P => @lem8404139 B C P _115317 f clauses c)). Qed.
Lemma lem8404141 {B C P : Type'} : (@all ((prod (P -> B) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> B) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> B) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8404142 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2071 B C P _115317 clauses c) = (term2155 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8404141 B C P) (@lem8404140 B C P _115317 clauses c)). Qed.
Lemma lem8404144 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8404145 {B C P : Type'} (P' : type303 B C P) : (term2156 B C P P') = (term2157 B C P P').
Proof. exact (@lem8404144 (type1178 B C P) (P -> B) P'). Qed.
Lemma lem8404146 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2158 B C P _115317 clauses c) = (term2159 B C P _115317 clauses c).
Proof. exact (@lem8404145 B C P (term2160 B C P _115317 clauses c)). Qed.
Lemma lem8404147 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2161 B C P _115317 clauses c f) = (term2152 B C P _115317 f clauses c).
Proof. exact (eq_refl (term2161 B C P _115317 clauses c f)). Qed.
Lemma lem8404148 {B P : Type'} (s : P -> B) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8404149 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) (s : P -> B) : (term2162 B C P _115317 clauses c f s) = (term2163 B C P _115317 f clauses c s).
Proof. exact (MK_COMB (@lem8404147 B C P _115317 f clauses c) (@lem8404148 B P s)). Qed.
Lemma lem8404150 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term2163 B C P _115317 f clauses c s) = (term2151 B C P _115317 f clauses s c).
Proof. exact (eq_refl (term2163 B C P _115317 f clauses c s)). Qed.
Lemma lem8404151 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (s : P -> B) (c : C) : (term2162 B C P _115317 clauses c f s) = (term2151 B C P _115317 f clauses s c).
Proof. exact (TRANS (@lem8404149 B C P _115317 f clauses c s) (@lem8404150 B C P _115317 f clauses s c)). Qed.
Lemma lem8404152 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2164 B C P _115317 clauses c f) = (term2152 B C P _115317 f clauses c).
Proof. exact (fun_ext (fun s : P -> B => @lem8404151 B C P _115317 f clauses s c)). Qed.
Lemma lem8404153 {B P : Type'} : (@ex (P -> B)) = (@ex (P -> B)).
Proof. exact (eq_refl (@ex (P -> B))). Qed.
Lemma lem8404154 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2165 B C P _115317 clauses c f) = (term2153 B C P _115317 f clauses c).
Proof. exact (MK_COMB (@lem8404153 B P) (@lem8404152 B C P _115317 f clauses c)). Qed.
Lemma lem8404155 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2166 B C P _115317 clauses c) = (term2154 B C P _115317 clauses c).
Proof. exact (fun_ext (fun f : type1178 B C P => @lem8404154 B C P _115317 f clauses c)). Qed.
Lemma lem8404156 {B C P : Type'} : (@all ((prod (P -> B) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> B) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> B) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8404157 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2158 B C P _115317 clauses c) = (term2155 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8404156 B C P) (@lem8404155 B C P _115317 clauses c)). Qed.
Lemma lem8404158 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8404159 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2167 B C P _115317 clauses c) = (term2168 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8404158) (@lem8404157 B C P _115317 clauses c)). Qed.
Lemma lem8404160 {B C P : Type'} (_115317 : type1092 B C P) (f : type1178 B C P) (clauses : type1636 B C P) (c : C) : (term2161 B C P _115317 clauses c f) = (term2152 B C P _115317 f clauses c).
Proof. exact (eq_refl (term2161 B C P _115317 clauses c f)). Qed.
Lemma lem8404161 {B C P : Type'} (s : type305 B C P) (f : type1178 B C P) : (s f) = (s f).
Proof. exact (eq_refl (s f)). Qed.
Lemma lem8404162 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) (s : type305 B C P) (f : type1178 B C P) : (term2169 B C P _115317 clauses c s f) = (term2170 B C P _115317 clauses c s f).
Proof. exact (MK_COMB (@lem8404160 B C P _115317 f clauses c) (@lem8404161 B C P s f)). Qed.
Lemma lem8404163 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (f : type1178 B C P) (c : C) : (term2170 B C P _115317 clauses c s f) = (term2171 B C P _115317 clauses s f c).
Proof. exact (eq_refl (term2170 B C P _115317 clauses c s f)). Qed.
Lemma lem8404164 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (f : type1178 B C P) (c : C) : (term2169 B C P _115317 clauses c s f) = (term2171 B C P _115317 clauses s f c).
Proof. exact (TRANS (@lem8404162 B C P _115317 clauses c s f) (@lem8404163 B C P _115317 clauses s f c)). Qed.
Lemma lem8404165 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (c : C) : (term2172 B C P _115317 clauses c s) = (term2173 B C P _115317 clauses s c).
Proof. exact (fun_ext (fun f : type1178 B C P => @lem8404164 B C P _115317 clauses s f c)). Qed.
Lemma lem8404166 {B C P : Type'} : (@all ((prod (P -> B) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> B) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> B) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8404167 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (c : C) : (term2174 B C P _115317 clauses c s) = (term2175 B C P _115317 clauses s c).
Proof. exact (MK_COMB (@lem8404166 B C P) (@lem8404165 B C P _115317 clauses s c)). Qed.
Lemma lem8404168 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2176 B C P _115317 clauses c) = (term2177 B C P _115317 clauses c).
Proof. exact (fun_ext (fun s : type305 B C P => @lem8404167 B C P _115317 clauses s c)). Qed.
Lemma lem8404169 {B C P : Type'} : (@ex (((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B)) = (@ex (((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B)).
Proof. exact (eq_refl (@ex (((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B))). Qed.
Lemma lem8404170 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2159 B C P _115317 clauses c) = (term2178 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8404169 B C P) (@lem8404168 B C P _115317 clauses c)). Qed.
Lemma lem8404171 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : ((term2158 B C P _115317 clauses c) = (term2159 B C P _115317 clauses c)) = ((term2155 B C P _115317 clauses c) = (term2178 B C P _115317 clauses c)).
Proof. exact (MK_COMB (@lem8404159 B C P _115317 clauses c) (@lem8404170 B C P _115317 clauses c)). Qed.
Lemma lem8404172 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2155 B C P _115317 clauses c) = (term2178 B C P _115317 clauses c).
Proof. exact (EQ_MP (@lem8404171 B C P _115317 clauses c) (@lem8404146 B C P _115317 clauses c)). Qed.
Lemma lem8404174 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8404175 {B C P : Type'} (P' : type302 B C P) : (term2179 B C P P') = (term2180 B C P P').
Proof. exact (@lem8404174 (type1178 B C P) (type1475 B C P) P'). Qed.
Lemma lem8404176 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (c : C) : (term2181 B C P _115317 clauses s c) = (term2182 B C P _115317 clauses s c).
Proof. exact (@lem8404175 B C P (term2183 B C P _115317 clauses s c)). Qed.
Lemma lem8404177 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (f : type1178 B C P) (c : C) : (term2184 B C P _115317 clauses s c f) = (term2185 B C P _115317 clauses s f c).
Proof. exact (eq_refl (term2184 B C P _115317 clauses s c f)). Qed.
Lemma lem8404178 {B C P : Type'} (t : type1475 B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8404179 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (f : type1178 B C P) (c : C) (t : type1475 B C P) : (term2186 B C P _115317 clauses s c f t) = (term2187 B C P _115317 clauses s f c t).
Proof. exact (MK_COMB (@lem8404177 B C P _115317 clauses s f c) (@lem8404178 B C P t)). Qed.
Lemma lem8404180 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (f : type1178 B C P) (t : type1475 B C P) (c : C) : (term2187 B C P _115317 clauses s f c t) = (term2188 B C P _115317 clauses s f t c).
Proof. exact (eq_refl (term2187 B C P _115317 clauses s f c t)). Qed.
Lemma lem8404181 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (f : type1178 B C P) (t : type1475 B C P) (c : C) : (term2186 B C P _115317 clauses s c f t) = (term2188 B C P _115317 clauses s f t c).
Proof. exact (TRANS (@lem8404179 B C P _115317 clauses s f c t) (@lem8404180 B C P _115317 clauses s f t c)). Qed.
Lemma lem8404182 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (f : type1178 B C P) (c : C) : (term2189 B C P _115317 clauses s c f) = (term2185 B C P _115317 clauses s f c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8404181 B C P _115317 clauses s f t c)). Qed.
Lemma lem8404183 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8404184 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (f : type1178 B C P) (c : C) : (term2190 B C P _115317 clauses s c f) = (term2171 B C P _115317 clauses s f c).
Proof. exact (MK_COMB (@lem8404183 B C P) (@lem8404182 B C P _115317 clauses s f c)). Qed.
Lemma lem8404185 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (c : C) : (term2191 B C P _115317 clauses s c) = (term2173 B C P _115317 clauses s c).
Proof. exact (fun_ext (fun f : type1178 B C P => @lem8404184 B C P _115317 clauses s f c)). Qed.
Lemma lem8404186 {B C P : Type'} : (@all ((prod (P -> B) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> B) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> B) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8404187 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (c : C) : (term2181 B C P _115317 clauses s c) = (term2175 B C P _115317 clauses s c).
Proof. exact (MK_COMB (@lem8404186 B C P) (@lem8404185 B C P _115317 clauses s c)). Qed.
Lemma lem8404188 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8404189 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (c : C) : (term2192 B C P _115317 clauses s c) = (term2193 B C P _115317 clauses s c).
Proof. exact (MK_COMB (@lem8404188) (@lem8404187 B C P _115317 clauses s c)). Qed.
Lemma lem8404190 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (f : type1178 B C P) (c : C) : (term2184 B C P _115317 clauses s c f) = (term2185 B C P _115317 clauses s f c).
Proof. exact (eq_refl (term2184 B C P _115317 clauses s c f)). Qed.
Lemma lem8404191 {B C P : Type'} (t : type304 B C P) (f : type1178 B C P) : (t f) = (t f).
Proof. exact (eq_refl (t f)). Qed.
Lemma lem8404192 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (c : C) (t : type304 B C P) (f : type1178 B C P) : (term2194 B C P _115317 clauses s c t f) = (term2195 B C P _115317 clauses s c t f).
Proof. exact (MK_COMB (@lem8404190 B C P _115317 clauses s f c) (@lem8404191 B C P t f)). Qed.
Lemma lem8404193 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (t : type304 B C P) (f : type1178 B C P) (c : C) : (term2195 B C P _115317 clauses s c t f) = (term2196 B C P _115317 clauses s t f c).
Proof. exact (eq_refl (term2195 B C P _115317 clauses s c t f)). Qed.
Lemma lem8404194 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (t : type304 B C P) (f : type1178 B C P) (c : C) : (term2194 B C P _115317 clauses s c t f) = (term2196 B C P _115317 clauses s t f c).
Proof. exact (TRANS (@lem8404192 B C P _115317 clauses s c t f) (@lem8404193 B C P _115317 clauses s t f c)). Qed.
Lemma lem8404195 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (t : type304 B C P) (c : C) : (term2197 B C P _115317 clauses s c t) = (term2198 B C P _115317 clauses s t c).
Proof. exact (fun_ext (fun f : type1178 B C P => @lem8404194 B C P _115317 clauses s t f c)). Qed.
Lemma lem8404196 {B C P : Type'} : (@all ((prod (P -> B) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> B) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> B) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8404197 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (t : type304 B C P) (c : C) : (term2199 B C P _115317 clauses s c t) = (term2200 B C P _115317 clauses s t c).
Proof. exact (MK_COMB (@lem8404196 B C P) (@lem8404195 B C P _115317 clauses s t c)). Qed.
Lemma lem8404198 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (c : C) : (term2201 B C P _115317 clauses s c) = (term2202 B C P _115317 clauses s c).
Proof. exact (fun_ext (fun t : type304 B C P => @lem8404197 B C P _115317 clauses s t c)). Qed.
Lemma lem8404199 {B C P : Type'} : (@ex (((prod (P -> B) (C -> P -> B)) -> Prop) -> C -> P -> B)) = (@ex (((prod (P -> B) (C -> P -> B)) -> Prop) -> C -> P -> B)).
Proof. exact (eq_refl (@ex (((prod (P -> B) (C -> P -> B)) -> Prop) -> C -> P -> B))). Qed.
Lemma lem8404200 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (c : C) : (term2182 B C P _115317 clauses s c) = (term2203 B C P _115317 clauses s c).
Proof. exact (MK_COMB (@lem8404199 B C P) (@lem8404198 B C P _115317 clauses s c)). Qed.
Lemma lem8404201 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (c : C) : ((term2181 B C P _115317 clauses s c) = (term2182 B C P _115317 clauses s c)) = ((term2175 B C P _115317 clauses s c) = (term2203 B C P _115317 clauses s c)).
Proof. exact (MK_COMB (@lem8404189 B C P _115317 clauses s c) (@lem8404200 B C P _115317 clauses s c)). Qed.
Lemma lem8404202 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (c : C) : (term2175 B C P _115317 clauses s c) = (term2203 B C P _115317 clauses s c).
Proof. exact (EQ_MP (@lem8404201 B C P _115317 clauses s c) (@lem8404176 B C P _115317 clauses s c)). Qed.
Lemma lem8404203 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2177 B C P _115317 clauses c) = (term2204 B C P _115317 clauses c).
Proof. exact (fun_ext (fun s : type305 B C P => @lem8404202 B C P _115317 clauses s c)). Qed.
Lemma lem8404204 {B C P : Type'} : (@ex (((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B)) = (@ex (((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B)).
Proof. exact (eq_refl (@ex (((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B))). Qed.
Lemma lem8404205 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2178 B C P _115317 clauses c) = (term2205 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8404204 B C P) (@lem8404203 B C P _115317 clauses c)). Qed.
Lemma lem8404206 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2155 B C P _115317 clauses c) = (term2205 B C P _115317 clauses c).
Proof. exact (TRANS (@lem8404172 B C P _115317 clauses c) (@lem8404205 B C P _115317 clauses c)). Qed.
Lemma lem8404207 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2071 B C P _115317 clauses c) = (term2205 B C P _115317 clauses c).
Proof. exact (TRANS (@lem8404142 B C P _115317 clauses c) (@lem8404206 B C P _115317 clauses c)). Qed.
Lemma lem8404208 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2082 B C P _115317 clauses) = (term2206 B C P _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8404207 B C P _115317 clauses c)). Qed.
Lemma lem8404209 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8404210 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2093 B C P _115317 clauses) = (term2207 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8404209 C) (@lem8404208 B C P _115317 clauses)). Qed.
Lemma lem8404212 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8404213 {B C P : Type'} (P' : type1434 B C P) : (term2208 B C P P') = (term2209 B C P P').
Proof. exact (@lem8404212 C (type305 B C P) P'). Qed.
Lemma lem8404214 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2210 B C P _115317 clauses) = (term2211 B C P _115317 clauses).
Proof. exact (@lem8404213 B C P (term2212 B C P _115317 clauses)). Qed.
Lemma lem8404215 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2213 B C P _115317 clauses c) = (term2204 B C P _115317 clauses c).
Proof. exact (eq_refl (term2213 B C P _115317 clauses c)). Qed.
Lemma lem8404216 {B C P : Type'} (s : type305 B C P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8404217 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) (s : type305 B C P) : (term2214 B C P _115317 clauses c s) = (term2215 B C P _115317 clauses c s).
Proof. exact (MK_COMB (@lem8404215 B C P _115317 clauses c) (@lem8404216 B C P s)). Qed.
Lemma lem8404218 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (c : C) : (term2215 B C P _115317 clauses c s) = (term2203 B C P _115317 clauses s c).
Proof. exact (eq_refl (term2215 B C P _115317 clauses c s)). Qed.
Lemma lem8404219 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type305 B C P) (c : C) : (term2214 B C P _115317 clauses c s) = (term2203 B C P _115317 clauses s c).
Proof. exact (TRANS (@lem8404217 B C P _115317 clauses c s) (@lem8404218 B C P _115317 clauses s c)). Qed.
Lemma lem8404220 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2216 B C P _115317 clauses c) = (term2204 B C P _115317 clauses c).
Proof. exact (fun_ext (fun s : type305 B C P => @lem8404219 B C P _115317 clauses s c)). Qed.
Lemma lem8404221 {B C P : Type'} : (@ex (((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B)) = (@ex (((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B)).
Proof. exact (eq_refl (@ex (((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B))). Qed.
Lemma lem8404222 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2217 B C P _115317 clauses c) = (term2205 B C P _115317 clauses c).
Proof. exact (MK_COMB (@lem8404221 B C P) (@lem8404220 B C P _115317 clauses c)). Qed.
Lemma lem8404223 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2218 B C P _115317 clauses) = (term2206 B C P _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8404222 B C P _115317 clauses c)). Qed.
Lemma lem8404224 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8404225 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2210 B C P _115317 clauses) = (term2207 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8404224 C) (@lem8404223 B C P _115317 clauses)). Qed.
Lemma lem8404226 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8404227 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2219 B C P _115317 clauses) = (term2220 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8404226) (@lem8404225 B C P _115317 clauses)). Qed.
Lemma lem8404228 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (c : C) : (term2213 B C P _115317 clauses c) = (term2204 B C P _115317 clauses c).
Proof. exact (eq_refl (term2213 B C P _115317 clauses c)). Qed.
Lemma lem8404229 {B C P : Type'} (s : type1440 B C P) (c : C) : (s c) = (s c).
Proof. exact (eq_refl (s c)). Qed.
Lemma lem8404230 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) (c : C) : (term2221 B C P _115317 clauses s c) = (term2222 B C P _115317 clauses s c).
Proof. exact (MK_COMB (@lem8404228 B C P _115317 clauses c) (@lem8404229 B C P s c)). Qed.
Lemma lem8404231 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) (c : C) : (term2222 B C P _115317 clauses s c) = (term2223 B C P _115317 clauses s c).
Proof. exact (eq_refl (term2222 B C P _115317 clauses s c)). Qed.
Lemma lem8404232 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) (c : C) : (term2221 B C P _115317 clauses s c) = (term2223 B C P _115317 clauses s c).
Proof. exact (TRANS (@lem8404230 B C P _115317 clauses s c) (@lem8404231 B C P _115317 clauses s c)). Qed.
Lemma lem8404233 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) : (term2224 B C P _115317 clauses s) = (term2225 B C P _115317 clauses s).
Proof. exact (fun_ext (fun c : C => @lem8404232 B C P _115317 clauses s c)). Qed.
Lemma lem8404234 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8404235 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) : (term2226 B C P _115317 clauses s) = (term2227 B C P _115317 clauses s).
Proof. exact (MK_COMB (@lem8404234 C) (@lem8404233 B C P _115317 clauses s)). Qed.
Lemma lem8404236 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2228 B C P _115317 clauses) = (term2229 B C P _115317 clauses).
Proof. exact (fun_ext (fun s : type1440 B C P => @lem8404235 B C P _115317 clauses s)). Qed.
Lemma lem8404237 {B C P : Type'} : (@ex (C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B)) = (@ex (C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B)).
Proof. exact (eq_refl (@ex (C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B))). Qed.
Lemma lem8404238 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2211 B C P _115317 clauses) = (term2230 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8404237 B C P) (@lem8404236 B C P _115317 clauses)). Qed.
Lemma lem8404239 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : ((term2210 B C P _115317 clauses) = (term2211 B C P _115317 clauses)) = ((term2207 B C P _115317 clauses) = (term2230 B C P _115317 clauses)).
Proof. exact (MK_COMB (@lem8404227 B C P _115317 clauses) (@lem8404238 B C P _115317 clauses)). Qed.
Lemma lem8404240 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2207 B C P _115317 clauses) = (term2230 B C P _115317 clauses).
Proof. exact (EQ_MP (@lem8404239 B C P _115317 clauses) (@lem8404214 B C P _115317 clauses)). Qed.
Lemma lem8404242 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8404243 {B C P : Type'} (P' : type1433 B C P) : (term2231 B C P P') = (term2232 B C P P').
Proof. exact (@lem8404242 C (type304 B C P) P'). Qed.
Lemma lem8404244 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) : (term2233 B C P _115317 clauses s) = (term2234 B C P _115317 clauses s).
Proof. exact (@lem8404243 B C P (term2235 B C P _115317 clauses s)). Qed.
Lemma lem8404245 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) (c : C) : (term2236 B C P _115317 clauses s c) = (term2237 B C P _115317 clauses s c).
Proof. exact (eq_refl (term2236 B C P _115317 clauses s c)). Qed.
Lemma lem8404246 {B C P : Type'} (t : type304 B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8404247 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) (c : C) (t : type304 B C P) : (term2238 B C P _115317 clauses s c t) = (term2239 B C P _115317 clauses s c t).
Proof. exact (MK_COMB (@lem8404245 B C P _115317 clauses s c) (@lem8404246 B C P t)). Qed.
Lemma lem8404248 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) (t : type304 B C P) (c : C) : (term2239 B C P _115317 clauses s c t) = (term2240 B C P _115317 clauses s t c).
Proof. exact (eq_refl (term2239 B C P _115317 clauses s c t)). Qed.
Lemma lem8404249 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) (t : type304 B C P) (c : C) : (term2238 B C P _115317 clauses s c t) = (term2240 B C P _115317 clauses s t c).
Proof. exact (TRANS (@lem8404247 B C P _115317 clauses s c t) (@lem8404248 B C P _115317 clauses s t c)). Qed.
Lemma lem8404250 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) (c : C) : (term2241 B C P _115317 clauses s c) = (term2237 B C P _115317 clauses s c).
Proof. exact (fun_ext (fun t : type304 B C P => @lem8404249 B C P _115317 clauses s t c)). Qed.
Lemma lem8404251 {B C P : Type'} : (@ex (((prod (P -> B) (C -> P -> B)) -> Prop) -> C -> P -> B)) = (@ex (((prod (P -> B) (C -> P -> B)) -> Prop) -> C -> P -> B)).
Proof. exact (eq_refl (@ex (((prod (P -> B) (C -> P -> B)) -> Prop) -> C -> P -> B))). Qed.
Lemma lem8404252 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) (c : C) : (term2242 B C P _115317 clauses s c) = (term2223 B C P _115317 clauses s c).
Proof. exact (MK_COMB (@lem8404251 B C P) (@lem8404250 B C P _115317 clauses s c)). Qed.
Lemma lem8404253 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) : (term2243 B C P _115317 clauses s) = (term2225 B C P _115317 clauses s).
Proof. exact (fun_ext (fun c : C => @lem8404252 B C P _115317 clauses s c)). Qed.
Lemma lem8404254 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8404255 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) : (term2233 B C P _115317 clauses s) = (term2227 B C P _115317 clauses s).
Proof. exact (MK_COMB (@lem8404254 C) (@lem8404253 B C P _115317 clauses s)). Qed.
Lemma lem8404256 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8404257 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) : (term2244 B C P _115317 clauses s) = (term2245 B C P _115317 clauses s).
Proof. exact (MK_COMB (@lem8404256) (@lem8404255 B C P _115317 clauses s)). Qed.
Lemma lem8404258 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) (c : C) : (term2236 B C P _115317 clauses s c) = (term2237 B C P _115317 clauses s c).
Proof. exact (eq_refl (term2236 B C P _115317 clauses s c)). Qed.
Lemma lem8404259 {B C P : Type'} (t : type1439 B C P) (c : C) : (t c) = (t c).
Proof. exact (eq_refl (t c)). Qed.
Lemma lem8404260 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) (t : type1439 B C P) (c : C) : (term2246 B C P _115317 clauses s t c) = (term2247 B C P _115317 clauses s t c).
Proof. exact (MK_COMB (@lem8404258 B C P _115317 clauses s c) (@lem8404259 B C P t c)). Qed.
Lemma lem8404261 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) (t : type1439 B C P) (c : C) : (term2247 B C P _115317 clauses s t c) = (term2248 B C P _115317 clauses s t c).
Proof. exact (eq_refl (term2247 B C P _115317 clauses s t c)). Qed.
Lemma lem8404262 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) (t : type1439 B C P) (c : C) : (term2246 B C P _115317 clauses s t c) = (term2248 B C P _115317 clauses s t c).
Proof. exact (TRANS (@lem8404260 B C P _115317 clauses s t c) (@lem8404261 B C P _115317 clauses s t c)). Qed.
Lemma lem8404263 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) (t : type1439 B C P) : (term2249 B C P _115317 clauses s t) = (term2250 B C P _115317 clauses s t).
Proof. exact (fun_ext (fun c : C => @lem8404262 B C P _115317 clauses s t c)). Qed.
Lemma lem8404264 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8404265 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) (t : type1439 B C P) : (term2251 B C P _115317 clauses s t) = (term2252 B C P _115317 clauses s t).
Proof. exact (MK_COMB (@lem8404264 C) (@lem8404263 B C P _115317 clauses s t)). Qed.
Lemma lem8404266 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) : (term2253 B C P _115317 clauses s) = (term2254 B C P _115317 clauses s).
Proof. exact (fun_ext (fun t : type1439 B C P => @lem8404265 B C P _115317 clauses s t)). Qed.
Lemma lem8404267 {B C P : Type'} : (@ex (C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> C -> P -> B)) = (@ex (C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> C -> P -> B))). Qed.
Lemma lem8404268 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) : (term2234 B C P _115317 clauses s) = (term2255 B C P _115317 clauses s).
Proof. exact (MK_COMB (@lem8404267 B C P) (@lem8404266 B C P _115317 clauses s)). Qed.
Lemma lem8404269 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) : ((term2233 B C P _115317 clauses s) = (term2234 B C P _115317 clauses s)) = ((term2227 B C P _115317 clauses s) = (term2255 B C P _115317 clauses s)).
Proof. exact (MK_COMB (@lem8404257 B C P _115317 clauses s) (@lem8404268 B C P _115317 clauses s)). Qed.
Lemma lem8404270 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) : (term2227 B C P _115317 clauses s) = (term2255 B C P _115317 clauses s).
Proof. exact (EQ_MP (@lem8404269 B C P _115317 clauses s) (@lem8404244 B C P _115317 clauses s)). Qed.
Lemma lem8404271 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2229 B C P _115317 clauses) = (term2256 B C P _115317 clauses).
Proof. exact (fun_ext (fun s : type1440 B C P => @lem8404270 B C P _115317 clauses s)). Qed.
Lemma lem8404272 {B C P : Type'} : (@ex (C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B)) = (@ex (C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B)).
Proof. exact (eq_refl (@ex (C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B))). Qed.
Lemma lem8404273 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2230 B C P _115317 clauses) = (term2257 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8404272 B C P) (@lem8404271 B C P _115317 clauses)). Qed.
Lemma lem8404274 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2207 B C P _115317 clauses) = (term2257 B C P _115317 clauses).
Proof. exact (TRANS (@lem8404240 B C P _115317 clauses) (@lem8404273 B C P _115317 clauses)). Qed.
Lemma lem8404275 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2093 B C P _115317 clauses) = (term2257 B C P _115317 clauses).
Proof. exact (TRANS (@lem8404210 B C P _115317 clauses) (@lem8404274 B C P _115317 clauses)). Qed.
Lemma lem8404276 {B C P : Type'} (_115317 : type1092 B C P) : (term2106 B C P _115317) = (term2258 B C P _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8404275 B C P _115317 clauses)). Qed.
Lemma lem8404277 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8404278 {B C P : Type'} (_115317 : type1092 B C P) : (term2117 B C P _115317) = (term2259 B C P _115317).
Proof. exact (MK_COMB (@lem8404277 B C P) (@lem8404276 B C P _115317)). Qed.
Lemma lem8404280 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8404281 {B C P : Type'} (P' : type1086 B C P) : (term2260 B C P P') = (term2261 B C P P').
Proof. exact (@lem8404280 (type1636 B C P) (type1440 B C P) P'). Qed.
Lemma lem8404282 {B C P : Type'} (_115317 : type1092 B C P) : (term2262 B C P _115317) = (term2263 B C P _115317).
Proof. exact (@lem8404281 B C P (term2264 B C P _115317)). Qed.
Lemma lem8404283 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2265 B C P _115317 clauses) = (term2256 B C P _115317 clauses).
Proof. exact (eq_refl (term2265 B C P _115317 clauses)). Qed.
Lemma lem8404284 {B C P : Type'} (s : type1440 B C P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8404285 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) : (term2266 B C P _115317 clauses s) = (term2267 B C P _115317 clauses s).
Proof. exact (MK_COMB (@lem8404283 B C P _115317 clauses) (@lem8404284 B C P s)). Qed.
Lemma lem8404286 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) : (term2267 B C P _115317 clauses s) = (term2255 B C P _115317 clauses s).
Proof. exact (eq_refl (term2267 B C P _115317 clauses s)). Qed.
Lemma lem8404287 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1440 B C P) : (term2266 B C P _115317 clauses s) = (term2255 B C P _115317 clauses s).
Proof. exact (TRANS (@lem8404285 B C P _115317 clauses s) (@lem8404286 B C P _115317 clauses s)). Qed.
Lemma lem8404288 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2268 B C P _115317 clauses) = (term2256 B C P _115317 clauses).
Proof. exact (fun_ext (fun s : type1440 B C P => @lem8404287 B C P _115317 clauses s)). Qed.
Lemma lem8404289 {B C P : Type'} : (@ex (C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B)) = (@ex (C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B)).
Proof. exact (eq_refl (@ex (C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B))). Qed.
Lemma lem8404290 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2269 B C P _115317 clauses) = (term2257 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8404289 B C P) (@lem8404288 B C P _115317 clauses)). Qed.
Lemma lem8404291 {B C P : Type'} (_115317 : type1092 B C P) : (term2270 B C P _115317) = (term2258 B C P _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8404290 B C P _115317 clauses)). Qed.
Lemma lem8404292 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8404293 {B C P : Type'} (_115317 : type1092 B C P) : (term2262 B C P _115317) = (term2259 B C P _115317).
Proof. exact (MK_COMB (@lem8404292 B C P) (@lem8404291 B C P _115317)). Qed.
Lemma lem8404294 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8404295 {B C P : Type'} (_115317 : type1092 B C P) : (term2271 B C P _115317) = (term2272 B C P _115317).
Proof. exact (MK_COMB (@lem8404294) (@lem8404293 B C P _115317)). Qed.
Lemma lem8404296 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term2265 B C P _115317 clauses) = (term2256 B C P _115317 clauses).
Proof. exact (eq_refl (term2265 B C P _115317 clauses)). Qed.
Lemma lem8404297 {B C P : Type'} (s : type1091 B C P) (clauses : type1636 B C P) : (s clauses) = (s clauses).
Proof. exact (eq_refl (s clauses)). Qed.
Lemma lem8404298 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) (clauses : type1636 B C P) : (term2273 B C P _115317 s clauses) = (term2274 B C P _115317 s clauses).
Proof. exact (MK_COMB (@lem8404296 B C P _115317 clauses) (@lem8404297 B C P s clauses)). Qed.
Lemma lem8404299 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) (clauses : type1636 B C P) : (term2274 B C P _115317 s clauses) = (term2275 B C P _115317 s clauses).
Proof. exact (eq_refl (term2274 B C P _115317 s clauses)). Qed.
Lemma lem8404300 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) (clauses : type1636 B C P) : (term2273 B C P _115317 s clauses) = (term2275 B C P _115317 s clauses).
Proof. exact (TRANS (@lem8404298 B C P _115317 s clauses) (@lem8404299 B C P _115317 s clauses)). Qed.
Lemma lem8404301 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) : (term2276 B C P _115317 s) = (term2277 B C P _115317 s).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8404300 B C P _115317 s clauses)). Qed.
Lemma lem8404302 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8404303 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) : (term2278 B C P _115317 s) = (term2279 B C P _115317 s).
Proof. exact (MK_COMB (@lem8404302 B C P) (@lem8404301 B C P _115317 s)). Qed.
Lemma lem8404304 {B C P : Type'} (_115317 : type1092 B C P) : (term2280 B C P _115317) = (term2281 B C P _115317).
Proof. exact (fun_ext (fun s : type1091 B C P => @lem8404303 B C P _115317 s)). Qed.
Lemma lem8404305 {B C P : Type'} : (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B)) = (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B))). Qed.
Lemma lem8404306 {B C P : Type'} (_115317 : type1092 B C P) : (term2263 B C P _115317) = (term2282 B C P _115317).
Proof. exact (MK_COMB (@lem8404305 B C P) (@lem8404304 B C P _115317)). Qed.
Lemma lem8404307 {B C P : Type'} (_115317 : type1092 B C P) : ((term2262 B C P _115317) = (term2263 B C P _115317)) = ((term2259 B C P _115317) = (term2282 B C P _115317)).
Proof. exact (MK_COMB (@lem8404295 B C P _115317) (@lem8404306 B C P _115317)). Qed.
Lemma lem8404308 {B C P : Type'} (_115317 : type1092 B C P) : (term2259 B C P _115317) = (term2282 B C P _115317).
Proof. exact (EQ_MP (@lem8404307 B C P _115317) (@lem8404282 B C P _115317)). Qed.
Lemma lem8404310 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8404311 {B C P : Type'} (P' : type1085 B C P) : (term2283 B C P P') = (term2284 B C P P').
Proof. exact (@lem8404310 (type1636 B C P) (type1439 B C P) P'). Qed.
Lemma lem8404312 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) : (term2285 B C P _115317 s) = (term2286 B C P _115317 s).
Proof. exact (@lem8404311 B C P (term2287 B C P _115317 s)). Qed.
Lemma lem8404313 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) (clauses : type1636 B C P) : (term2288 B C P _115317 s clauses) = (term2289 B C P _115317 s clauses).
Proof. exact (eq_refl (term2288 B C P _115317 s clauses)). Qed.
Lemma lem8404314 {B C P : Type'} (t : type1439 B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8404315 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) (clauses : type1636 B C P) (t : type1439 B C P) : (term2290 B C P _115317 s clauses t) = (term2291 B C P _115317 s clauses t).
Proof. exact (MK_COMB (@lem8404313 B C P _115317 s clauses) (@lem8404314 B C P t)). Qed.
Lemma lem8404316 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) (clauses : type1636 B C P) (t : type1439 B C P) : (term2291 B C P _115317 s clauses t) = (term2292 B C P _115317 s clauses t).
Proof. exact (eq_refl (term2291 B C P _115317 s clauses t)). Qed.
Lemma lem8404317 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) (clauses : type1636 B C P) (t : type1439 B C P) : (term2290 B C P _115317 s clauses t) = (term2292 B C P _115317 s clauses t).
Proof. exact (TRANS (@lem8404315 B C P _115317 s clauses t) (@lem8404316 B C P _115317 s clauses t)). Qed.
Lemma lem8404318 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) (clauses : type1636 B C P) : (term2293 B C P _115317 s clauses) = (term2289 B C P _115317 s clauses).
Proof. exact (fun_ext (fun t : type1439 B C P => @lem8404317 B C P _115317 s clauses t)). Qed.
Lemma lem8404319 {B C P : Type'} : (@ex (C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> C -> P -> B)) = (@ex (C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> C -> P -> B))). Qed.
Lemma lem8404320 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) (clauses : type1636 B C P) : (term2294 B C P _115317 s clauses) = (term2275 B C P _115317 s clauses).
Proof. exact (MK_COMB (@lem8404319 B C P) (@lem8404318 B C P _115317 s clauses)). Qed.
Lemma lem8404321 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) : (term2295 B C P _115317 s) = (term2277 B C P _115317 s).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8404320 B C P _115317 s clauses)). Qed.
Lemma lem8404322 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8404323 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) : (term2285 B C P _115317 s) = (term2279 B C P _115317 s).
Proof. exact (MK_COMB (@lem8404322 B C P) (@lem8404321 B C P _115317 s)). Qed.
Lemma lem8404324 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8404325 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) : (term2296 B C P _115317 s) = (term2297 B C P _115317 s).
Proof. exact (MK_COMB (@lem8404324) (@lem8404323 B C P _115317 s)). Qed.
Lemma lem8404326 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) (clauses : type1636 B C P) : (term2288 B C P _115317 s clauses) = (term2289 B C P _115317 s clauses).
Proof. exact (eq_refl (term2288 B C P _115317 s clauses)). Qed.
Lemma lem8404327 {B C P : Type'} (t : type1090 B C P) (clauses : type1636 B C P) : (t clauses) = (t clauses).
Proof. exact (eq_refl (t clauses)). Qed.
Lemma lem8404328 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) (t : type1090 B C P) (clauses : type1636 B C P) : (term2298 B C P _115317 s t clauses) = (term2299 B C P _115317 s t clauses).
Proof. exact (MK_COMB (@lem8404326 B C P _115317 s clauses) (@lem8404327 B C P t clauses)). Qed.
Lemma lem8404329 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) (t : type1090 B C P) (clauses : type1636 B C P) : (term2299 B C P _115317 s t clauses) = (term2300 B C P _115317 s t clauses).
Proof. exact (eq_refl (term2299 B C P _115317 s t clauses)). Qed.
Lemma lem8404330 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) (t : type1090 B C P) (clauses : type1636 B C P) : (term2298 B C P _115317 s t clauses) = (term2300 B C P _115317 s t clauses).
Proof. exact (TRANS (@lem8404328 B C P _115317 s t clauses) (@lem8404329 B C P _115317 s t clauses)). Qed.
Lemma lem8404331 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) (t : type1090 B C P) : (term2301 B C P _115317 s t) = (term2302 B C P _115317 s t).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8404330 B C P _115317 s t clauses)). Qed.
Lemma lem8404332 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8404333 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) (t : type1090 B C P) : (term2303 B C P _115317 s t) = (term2304 B C P _115317 s t).
Proof. exact (MK_COMB (@lem8404332 B C P) (@lem8404331 B C P _115317 s t)). Qed.
Lemma lem8404334 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) : (term2305 B C P _115317 s) = (term2306 B C P _115317 s).
Proof. exact (fun_ext (fun t : type1090 B C P => @lem8404333 B C P _115317 s t)). Qed.
Lemma lem8404335 {B C P : Type'} : (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> C -> P -> B)) = (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> C -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> C -> P -> B))). Qed.
Lemma lem8404336 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) : (term2286 B C P _115317 s) = (term2307 B C P _115317 s).
Proof. exact (MK_COMB (@lem8404335 B C P) (@lem8404334 B C P _115317 s)). Qed.
Lemma lem8404337 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) : ((term2285 B C P _115317 s) = (term2286 B C P _115317 s)) = ((term2279 B C P _115317 s) = (term2307 B C P _115317 s)).
Proof. exact (MK_COMB (@lem8404325 B C P _115317 s) (@lem8404336 B C P _115317 s)). Qed.
Lemma lem8404338 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) : (term2279 B C P _115317 s) = (term2307 B C P _115317 s).
Proof. exact (EQ_MP (@lem8404337 B C P _115317 s) (@lem8404312 B C P _115317 s)). Qed.
Lemma lem8404339 {B C P : Type'} (_115317 : type1092 B C P) : (term2281 B C P _115317) = (term2308 B C P _115317).
Proof. exact (fun_ext (fun s : type1091 B C P => @lem8404338 B C P _115317 s)). Qed.
Lemma lem8404340 {B C P : Type'} : (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B)) = (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B))). Qed.
Lemma lem8404341 {B C P : Type'} (_115317 : type1092 B C P) : (term2282 B C P _115317) = (term2309 B C P _115317).
Proof. exact (MK_COMB (@lem8404340 B C P) (@lem8404339 B C P _115317)). Qed.
Lemma lem8404342 {B C P : Type'} (_115317 : type1092 B C P) : (term2259 B C P _115317) = (term2309 B C P _115317).
Proof. exact (TRANS (@lem8404308 B C P _115317) (@lem8404341 B C P _115317)). Qed.
Lemma lem8404343 {B C P : Type'} (_115317 : type1092 B C P) : (term2117 B C P _115317) = (term2309 B C P _115317).
Proof. exact (TRANS (@lem8404278 B C P _115317) (@lem8404342 B C P _115317)). Qed.
Lemma lem8404344 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8404345 {B C P : Type'} (_115317 : type1092 B C P) : (term2119 B C P _115317) = (term2310 B C P _115317).
Proof. exact (MK_COMB (@lem8404344) (@lem8404343 B C P _115317)). Qed.
Lemma lem8404346 {B C P : Type'} (_115317 : type1092 B C P) : (term2122 B C P _115317) = (term2122 B C P _115317).
Proof. exact (eq_refl (term2122 B C P _115317)). Qed.
Lemma lem8404347 {B C P : Type'} (_115317 : type1092 B C P) : (term2123 B C P _115317) = (term2311 B C P _115317).
Proof. exact (MK_COMB (@lem8404345 B C P _115317) (@lem8404346 B C P _115317)). Qed.
Lemma lem8404349 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1332 A P Q) = (term1333 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8404350 {B C P : Type'} (P' : type271 B C P) (Q : Prop) : (term2312 B C P P' Q) = (term2313 B C P P' Q).
Proof. exact (@lem8404349 (type1091 B C P) P' Q). Qed.
Lemma lem8404351 {B C P : Type'} (_115317 : type1092 B C P) : (term2314 B C P _115317) = (term2315 B C P _115317).
Proof. exact (@lem8404350 B C P (term2308 B C P _115317) (term2122 B C P _115317)). Qed.
Lemma lem8404352 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) : (term2316 B C P _115317 s) = (term2307 B C P _115317 s).
Proof. exact (eq_refl (term2316 B C P _115317 s)). Qed.
Lemma lem8404353 {B C P : Type'} (_115317 : type1092 B C P) : (term2317 B C P _115317) = (term2308 B C P _115317).
Proof. exact (fun_ext (fun s : type1091 B C P => @lem8404352 B C P _115317 s)). Qed.
Lemma lem8404354 {B C P : Type'} : (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B)) = (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B))). Qed.
Lemma lem8404355 {B C P : Type'} (_115317 : type1092 B C P) : (term2318 B C P _115317) = (term2309 B C P _115317).
Proof. exact (MK_COMB (@lem8404354 B C P) (@lem8404353 B C P _115317)). Qed.
Lemma lem8404356 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8404357 {B C P : Type'} (_115317 : type1092 B C P) : (term2319 B C P _115317) = (term2310 B C P _115317).
Proof. exact (MK_COMB (@lem8404356) (@lem8404355 B C P _115317)). Qed.
Lemma lem8404358 {B C P : Type'} (_115317 : type1092 B C P) : (term2122 B C P _115317) = (term2122 B C P _115317).
Proof. exact (eq_refl (term2122 B C P _115317)). Qed.
Lemma lem8404359 {B C P : Type'} (_115317 : type1092 B C P) : (term2314 B C P _115317) = (term2311 B C P _115317).
Proof. exact (MK_COMB (@lem8404357 B C P _115317) (@lem8404358 B C P _115317)). Qed.
Lemma lem8404360 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8404361 {B C P : Type'} (_115317 : type1092 B C P) : (term2320 B C P _115317) = (term2321 B C P _115317).
Proof. exact (MK_COMB (@lem8404360) (@lem8404359 B C P _115317)). Qed.
Lemma lem8404362 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) : (term2316 B C P _115317 s) = (term2307 B C P _115317 s).
Proof. exact (eq_refl (term2316 B C P _115317 s)). Qed.
Lemma lem8404363 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8404364 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) : (term2322 B C P _115317 s) = (term2323 B C P _115317 s).
Proof. exact (MK_COMB (@lem8404363) (@lem8404362 B C P _115317 s)). Qed.
Lemma lem8404365 {B C P : Type'} (_115317 : type1092 B C P) : (term2122 B C P _115317) = (term2122 B C P _115317).
Proof. exact (eq_refl (term2122 B C P _115317)). Qed.
Lemma lem8404366 {B C P : Type'} (s : type1091 B C P) (_115317 : type1092 B C P) : (term2324 B C P s _115317) = (term2325 B C P s _115317).
Proof. exact (MK_COMB (@lem8404364 B C P _115317 s) (@lem8404365 B C P _115317)). Qed.
Lemma lem8404367 {B C P : Type'} (_115317 : type1092 B C P) : (term2326 B C P _115317) = (term2327 B C P _115317).
Proof. exact (fun_ext (fun s : type1091 B C P => @lem8404366 B C P s _115317)). Qed.
Lemma lem8404368 {B C P : Type'} : (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B)) = (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B))). Qed.
Lemma lem8404369 {B C P : Type'} (_115317 : type1092 B C P) : (term2315 B C P _115317) = (term2328 B C P _115317).
Proof. exact (MK_COMB (@lem8404368 B C P) (@lem8404367 B C P _115317)). Qed.
Lemma lem8404370 {B C P : Type'} (_115317 : type1092 B C P) : ((term2314 B C P _115317) = (term2315 B C P _115317)) = ((term2311 B C P _115317) = (term2328 B C P _115317)).
Proof. exact (MK_COMB (@lem8404361 B C P _115317) (@lem8404369 B C P _115317)). Qed.
Lemma lem8404371 {B C P : Type'} (_115317 : type1092 B C P) : (term2311 B C P _115317) = (term2328 B C P _115317).
Proof. exact (EQ_MP (@lem8404370 B C P _115317) (@lem8404351 B C P _115317)). Qed.
Lemma lem8404373 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1332 A P Q) = (term1333 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8404374 {B C P : Type'} (P' : type270 B C P) (Q : Prop) : (term2329 B C P P' Q) = (term2330 B C P P' Q).
Proof. exact (@lem8404373 (type1090 B C P) P' Q). Qed.
Lemma lem8404375 {B C P : Type'} (s : type1091 B C P) (_115317 : type1092 B C P) : (term2331 B C P s _115317) = (term2332 B C P s _115317).
Proof. exact (@lem8404374 B C P (term2306 B C P _115317 s) (term2122 B C P _115317)). Qed.
Lemma lem8404376 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) (t : type1090 B C P) : (term2333 B C P _115317 s t) = (term2304 B C P _115317 s t).
Proof. exact (eq_refl (term2333 B C P _115317 s t)). Qed.
Lemma lem8404377 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) : (term2334 B C P _115317 s) = (term2306 B C P _115317 s).
Proof. exact (fun_ext (fun t : type1090 B C P => @lem8404376 B C P _115317 s t)). Qed.
Lemma lem8404378 {B C P : Type'} : (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> C -> P -> B)) = (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> C -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> C -> P -> B))). Qed.
Lemma lem8404379 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) : (term2335 B C P _115317 s) = (term2307 B C P _115317 s).
Proof. exact (MK_COMB (@lem8404378 B C P) (@lem8404377 B C P _115317 s)). Qed.
Lemma lem8404380 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8404381 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) : (term2336 B C P _115317 s) = (term2323 B C P _115317 s).
Proof. exact (MK_COMB (@lem8404380) (@lem8404379 B C P _115317 s)). Qed.
Lemma lem8404382 {B C P : Type'} (_115317 : type1092 B C P) : (term2122 B C P _115317) = (term2122 B C P _115317).
Proof. exact (eq_refl (term2122 B C P _115317)). Qed.
Lemma lem8404383 {B C P : Type'} (s : type1091 B C P) (_115317 : type1092 B C P) : (term2331 B C P s _115317) = (term2325 B C P s _115317).
Proof. exact (MK_COMB (@lem8404381 B C P _115317 s) (@lem8404382 B C P _115317)). Qed.
Lemma lem8404384 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8404385 {B C P : Type'} (s : type1091 B C P) (_115317 : type1092 B C P) : (term2337 B C P s _115317) = (term2338 B C P s _115317).
Proof. exact (MK_COMB (@lem8404384) (@lem8404383 B C P s _115317)). Qed.
Lemma lem8404386 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) (t : type1090 B C P) : (term2333 B C P _115317 s t) = (term2304 B C P _115317 s t).
Proof. exact (eq_refl (term2333 B C P _115317 s t)). Qed.
Lemma lem8404387 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8404388 {B C P : Type'} (_115317 : type1092 B C P) (s : type1091 B C P) (t : type1090 B C P) : (term2339 B C P _115317 s t) = (term2340 B C P _115317 s t).
Proof. exact (MK_COMB (@lem8404387) (@lem8404386 B C P _115317 s t)). Qed.
Lemma lem8404389 {B C P : Type'} (_115317 : type1092 B C P) : (term2122 B C P _115317) = (term2122 B C P _115317).
Proof. exact (eq_refl (term2122 B C P _115317)). Qed.
Lemma lem8404390 {B C P : Type'} (s : type1091 B C P) (t : type1090 B C P) (_115317 : type1092 B C P) : (term2341 B C P s t _115317) = (term2342 B C P s t _115317).
Proof. exact (MK_COMB (@lem8404388 B C P _115317 s t) (@lem8404389 B C P _115317)). Qed.
Lemma lem8404391 {B C P : Type'} (s : type1091 B C P) (_115317 : type1092 B C P) : (term2343 B C P s _115317) = (term2344 B C P s _115317).
Proof. exact (fun_ext (fun t : type1090 B C P => @lem8404390 B C P s t _115317)). Qed.
Lemma lem8404392 {B C P : Type'} : (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> C -> P -> B)) = (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> C -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> C -> P -> B))). Qed.
Lemma lem8404393 {B C P : Type'} (s : type1091 B C P) (_115317 : type1092 B C P) : (term2332 B C P s _115317) = (term2345 B C P s _115317).
Proof. exact (MK_COMB (@lem8404392 B C P) (@lem8404391 B C P s _115317)). Qed.
Lemma lem8404394 {B C P : Type'} (s : type1091 B C P) (_115317 : type1092 B C P) : ((term2331 B C P s _115317) = (term2332 B C P s _115317)) = ((term2325 B C P s _115317) = (term2345 B C P s _115317)).
Proof. exact (MK_COMB (@lem8404385 B C P s _115317) (@lem8404393 B C P s _115317)). Qed.
Lemma lem8404395 {B C P : Type'} (s : type1091 B C P) (_115317 : type1092 B C P) : (term2325 B C P s _115317) = (term2345 B C P s _115317).
Proof. exact (EQ_MP (@lem8404394 B C P s _115317) (@lem8404375 B C P s _115317)). Qed.
Lemma lem8404396 {B C P : Type'} (_115317 : type1092 B C P) : (term2327 B C P _115317) = (term2346 B C P _115317).
Proof. exact (fun_ext (fun s : type1091 B C P => @lem8404395 B C P s _115317)). Qed.
Lemma lem8404397 {B C P : Type'} : (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B)) = (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> ((prod (P -> B) (C -> P -> B)) -> Prop) -> P -> B))). Qed.
Lemma lem8404398 {B C P : Type'} (_115317 : type1092 B C P) : (term2328 B C P _115317) = (term2347 B C P _115317).
Proof. exact (MK_COMB (@lem8404397 B C P) (@lem8404396 B C P _115317)). Qed.
Lemma lem8404399 {B C P : Type'} (_115317 : type1092 B C P) : (term2311 B C P _115317) = (term2347 B C P _115317).
Proof. exact (TRANS (@lem8404371 B C P _115317) (@lem8404398 B C P _115317)). Qed.
Lemma lem8404400 {B C P : Type'} (_115317 : type1092 B C P) : (term2123 B C P _115317) = (term2347 B C P _115317).
Proof. exact (TRANS (@lem8404347 B C P _115317) (@lem8404399 B C P _115317)). Qed.
Lemma lem8404401 {B C P : Type'} (_115317 : type1092 B C P) : (term2055 B C P _115317) = (term2347 B C P _115317).
Proof. exact (TRANS (@lem8404095 B C P _115317) (@lem8404400 B C P _115317)). Qed.
Lemma lem8404402 {B C P : Type'} (_115317 : type1092 B C P) : (term599 B C P _115317) = (term2347 B C P _115317).
Proof. exact (TRANS (@lem8403614 B C P _115317) (@lem8404401 B C P _115317)). Qed.
Lemma lem8404403 {B C P : Type'} (_115317 : type1092 B C P) (h1 : term599 B C P _115317) : term2347 B C P _115317.
Proof. exact (EQ_MP (@lem8404402 B C P _115317) (@lem8401034 B C P _115317 h1)). Qed.
Lemma lem8404407 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term420 A B C P f clauses s t c) = (term420 A B C P f clauses s t c).
Proof. exact (eq_refl (term420 A B C P f clauses s t c)). Qed.
Lemma lem8404408 {B C P : Type'} (P' : type766 B C P) : (term2022 B C P P') = (term2023 B C P P').
Proof. exact (@lem18392 (type1475 B C P) P'). Qed.
Lemma lem8404409 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term2348 A B C P f clauses s c) = (term2349 A B C P f clauses s c).
Proof. exact (@lem8404408 B C P (term421 A B C P f clauses s c)). Qed.
Lemma lem8404410 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term2350 A B C P f clauses s c t) = (term420 A B C P f clauses s t c).
Proof. exact (eq_refl (term2350 A B C P f clauses s c t)). Qed.
Lemma lem8404411 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8404413 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term2351 A B C P f clauses s c t) = (term2352 A B C P f clauses s t c).
Proof. exact (MK_COMB (@lem8404411) (@lem8404410 A B C P f clauses s t c)). Qed.
Lemma lem8404414 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term2353 A B C P f clauses s c) = (term2354 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8404413 A B C P f clauses s t c)). Qed.
Lemma lem8404415 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8404416 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term2349 A B C P f clauses s c) = (term2355 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8404415 B C P) (@lem8404414 A B C P f clauses s c)). Qed.
Lemma lem8404417 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term2348 A B C P f clauses s c) = (term2355 A B C P f clauses s c).
Proof. exact (TRANS (@lem8404409 A B C P f clauses s c) (@lem8404416 A B C P f clauses s c)). Qed.
Lemma lem8404418 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term421 A B C P f clauses s c) = (term421 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8404407 A B C P f clauses s t c)). Qed.
Lemma lem8404419 {B C P : Type'} : (@all (C -> P -> B)) = (@all (C -> P -> B)).
Proof. exact (eq_refl (@all (C -> P -> B))). Qed.
Lemma lem8404420 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term422 A B C P f clauses s c) = (term422 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8404419 B C P) (@lem8404418 A B C P f clauses s c)). Qed.
Lemma lem8404421 {A P : Type'} (P' : type805 A P) : (term2032 A P P') = (term2033 A P P').
Proof. exact (@lem18392 (P -> A) P'). Qed.
Lemma lem8404422 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2356 A B C P f clauses c) = (term2357 A B C P f clauses c).
Proof. exact (@lem8404421 A P (term423 A B C P f clauses c)). Qed.
Lemma lem8404423 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term2358 A B C P f clauses c s) = (term422 A B C P f clauses s c).
Proof. exact (eq_refl (term2358 A B C P f clauses c s)). Qed.
Lemma lem8404424 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8404425 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term2359 A B C P f clauses c s) = (term2348 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8404424) (@lem8404423 A B C P f clauses s c)). Qed.
Lemma lem8404426 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term2359 A B C P f clauses c s) = (term2355 A B C P f clauses s c).
Proof. exact (TRANS (@lem8404425 A B C P f clauses s c) (@lem8404417 A B C P f clauses s c)). Qed.
Lemma lem8404427 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2360 A B C P f clauses c) = (term2361 A B C P f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8404426 A B C P f clauses s c)). Qed.
Lemma lem8404428 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8404429 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2357 A B C P f clauses c) = (term2362 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8404428 A P) (@lem8404427 A B C P f clauses c)). Qed.
Lemma lem8404430 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2356 A B C P f clauses c) = (term2362 A B C P f clauses c).
Proof. exact (TRANS (@lem8404422 A B C P f clauses c) (@lem8404429 A B C P f clauses c)). Qed.
Lemma lem8404431 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term423 A B C P f clauses c) = (term423 A B C P f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8404420 A B C P f clauses s c)). Qed.
Lemma lem8404432 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8404433 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term424 A B C P f clauses c) = (term424 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8404432 A P) (@lem8404431 A B C P f clauses c)). Qed.
Lemma lem8404435 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) (f : type1185 A B C P) : (term2363 A B C P _115316 clauses c f) = (term2363 A B C P _115316 clauses c f).
Proof. exact (eq_refl (term2363 A B C P _115316 clauses c f)). Qed.
Lemma lem8404436 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2364 A B C P _115316 f clauses c) = (term2364 A B C P _115316 f clauses c).
Proof. exact (MK_COMB (@lem8404435 A B C P _115316 clauses c f) (@lem8404433 A B C P f clauses c)). Qed.
Lemma lem8404438 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) (f : type1185 A B C P) : (term2365 A B C P _115316 clauses c f) = (term2365 A B C P _115316 clauses c f).
Proof. exact (eq_refl (term2365 A B C P _115316 clauses c f)). Qed.
Lemma lem8404439 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2366 A B C P _115316 f clauses c) = (term2367 A B C P _115316 f clauses c).
Proof. exact (MK_COMB (@lem8404438 A B C P _115316 clauses c f) (@lem8404430 A B C P f clauses c)). Qed.
Lemma lem8404440 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8404441 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2368 A B C P _115316 f clauses c) = (term2369 A B C P _115316 f clauses c).
Proof. exact (MK_COMB (@lem8404440) (@lem8404439 A B C P _115316 f clauses c)). Qed.
Lemma lem8404442 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2370 A B C P _115316 f clauses c) = (term2371 A B C P _115316 f clauses c).
Proof. exact (MK_COMB (@lem8404441 A B C P _115316 f clauses c) (@lem8404436 A B C P _115316 f clauses c)). Qed.
Lemma lem8404443 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : ((_115316 clauses c f) = (term424 A B C P f clauses c)) = (term2370 A B C P _115316 f clauses c).
Proof. exact (@lem17784 (_115316 clauses c f) (term424 A B C P f clauses c)). Qed.
Lemma lem8404444 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : ((_115316 clauses c f) = (term424 A B C P f clauses c)) = (term2371 A B C P _115316 f clauses c).
Proof. exact (TRANS (@lem8404443 A B C P _115316 f clauses c) (@lem8404442 A B C P _115316 f clauses c)). Qed.
Lemma lem8404445 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term682 A B C P _115316 clauses c) = (term2372 A B C P _115316 clauses c).
Proof. exact (fun_ext (fun f : type1185 A B C P => @lem8404444 A B C P _115316 f clauses c)). Qed.
Lemma lem8404446 {A B C P : Type'} : (@all ((prod (P -> A) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8404447 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term683 A B C P _115316 clauses c) = (term2373 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8404446 A B C P) (@lem8404445 A B C P _115316 clauses c)). Qed.
Lemma lem8404448 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term684 A B C P _115316 clauses) = (term2374 A B C P _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8404447 A B C P _115316 clauses c)). Qed.
Lemma lem8404449 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8404450 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term685 A B C P _115316 clauses) = (term2375 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8404449 C) (@lem8404448 A B C P _115316 clauses)). Qed.
Lemma lem8404451 {A B C P : Type'} (_115316 : type1115 A B C P) : (term686 A B C P _115316) = (term2376 A B C P _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8404450 A B C P _115316 clauses)). Qed.
Lemma lem8404452 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8404453 {A B C P : Type'} (_115316 : type1115 A B C P) : (term687 A B C P _115316) = (term2377 A B C P _115316).
Proof. exact (MK_COMB (@lem8404452 A B C P) (@lem8404451 A B C P _115316)). Qed.
Lemma lem8404463 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term1070 A P Q) = (term1071 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem8404464 {A B C P : Type'} (P' : type312 A B C P) (Q : type312 A B C P) : (term2378 A B C P P' Q) = (term2379 A B C P P' Q).
Proof. exact (@lem8404463 (type1185 A B C P) P' Q). Qed.
Lemma lem8404465 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2380 A B C P _115316 clauses c) = (term2381 A B C P _115316 clauses c).
Proof. exact (@lem8404464 A B C P (term2382 A B C P _115316 clauses c) (term2383 A B C P _115316 clauses c)). Qed.
Lemma lem8404466 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2384 A B C P _115316 clauses c f) = (term2367 A B C P _115316 f clauses c).
Proof. exact (eq_refl (term2384 A B C P _115316 clauses c f)). Qed.
Lemma lem8404467 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8404468 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2385 A B C P _115316 clauses c f) = (term2369 A B C P _115316 f clauses c).
Proof. exact (MK_COMB (@lem8404467) (@lem8404466 A B C P _115316 f clauses c)). Qed.
Lemma lem8404469 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2386 A B C P _115316 clauses c f) = (term2364 A B C P _115316 f clauses c).
Proof. exact (eq_refl (term2386 A B C P _115316 clauses c f)). Qed.
Lemma lem8404470 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2387 A B C P _115316 clauses c f) = (term2371 A B C P _115316 f clauses c).
Proof. exact (MK_COMB (@lem8404468 A B C P _115316 f clauses c) (@lem8404469 A B C P _115316 f clauses c)). Qed.
Lemma lem8404471 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2388 A B C P _115316 clauses c) = (term2372 A B C P _115316 clauses c).
Proof. exact (fun_ext (fun f : type1185 A B C P => @lem8404470 A B C P _115316 f clauses c)). Qed.
Lemma lem8404472 {A B C P : Type'} : (@all ((prod (P -> A) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8404473 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2380 A B C P _115316 clauses c) = (term2373 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8404472 A B C P) (@lem8404471 A B C P _115316 clauses c)). Qed.
Lemma lem8404474 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8404475 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2389 A B C P _115316 clauses c) = (term2390 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8404474) (@lem8404473 A B C P _115316 clauses c)). Qed.
Lemma lem8404476 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2384 A B C P _115316 clauses c f) = (term2367 A B C P _115316 f clauses c).
Proof. exact (eq_refl (term2384 A B C P _115316 clauses c f)). Qed.
Lemma lem8404477 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2391 A B C P _115316 clauses c) = (term2382 A B C P _115316 clauses c).
Proof. exact (fun_ext (fun f : type1185 A B C P => @lem8404476 A B C P _115316 f clauses c)). Qed.
Lemma lem8404478 {A B C P : Type'} : (@all ((prod (P -> A) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8404479 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2392 A B C P _115316 clauses c) = (term2393 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8404478 A B C P) (@lem8404477 A B C P _115316 clauses c)). Qed.
Lemma lem8404480 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8404481 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2394 A B C P _115316 clauses c) = (term2395 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8404480) (@lem8404479 A B C P _115316 clauses c)). Qed.
Lemma lem8404482 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2386 A B C P _115316 clauses c f) = (term2364 A B C P _115316 f clauses c).
Proof. exact (eq_refl (term2386 A B C P _115316 clauses c f)). Qed.
Lemma lem8404483 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2396 A B C P _115316 clauses c) = (term2383 A B C P _115316 clauses c).
Proof. exact (fun_ext (fun f : type1185 A B C P => @lem8404482 A B C P _115316 f clauses c)). Qed.
Lemma lem8404484 {A B C P : Type'} : (@all ((prod (P -> A) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8404485 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2397 A B C P _115316 clauses c) = (term2398 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8404484 A B C P) (@lem8404483 A B C P _115316 clauses c)). Qed.
Lemma lem8404486 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2381 A B C P _115316 clauses c) = (term2399 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8404481 A B C P _115316 clauses c) (@lem8404485 A B C P _115316 clauses c)). Qed.
Lemma lem8404487 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : ((term2380 A B C P _115316 clauses c) = (term2381 A B C P _115316 clauses c)) = ((term2373 A B C P _115316 clauses c) = (term2399 A B C P _115316 clauses c)).
Proof. exact (MK_COMB (@lem8404475 A B C P _115316 clauses c) (@lem8404486 A B C P _115316 clauses c)). Qed.
Lemma lem8404488 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2373 A B C P _115316 clauses c) = (term2399 A B C P _115316 clauses c).
Proof. exact (EQ_MP (@lem8404487 A B C P _115316 clauses c) (@lem8404465 A B C P _115316 clauses c)). Qed.
Lemma lem8404609 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2374 A B C P _115316 clauses) = (term2400 A B C P _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8404488 A B C P _115316 clauses c)). Qed.
Lemma lem8404610 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8404611 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2375 A B C P _115316 clauses) = (term2401 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8404610 C) (@lem8404609 A B C P _115316 clauses)). Qed.
Lemma lem8404613 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term1070 A P Q) = (term1071 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem8404614 {C : Type'} (P : C -> Prop) (Q : C -> Prop) : (term1070 C P Q) = (term1071 C P Q).
Proof. exact (@lem8404613 C P Q). Qed.
Lemma lem8404615 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2402 A B C P _115316 clauses) = (term2403 A B C P _115316 clauses).
Proof. exact (@lem8404614 C (term2404 A B C P _115316 clauses) (term2405 A B C P _115316 clauses)). Qed.
Lemma lem8404616 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2406 A B C P _115316 clauses c) = (term2393 A B C P _115316 clauses c).
Proof. exact (eq_refl (term2406 A B C P _115316 clauses c)). Qed.
Lemma lem8404617 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8404618 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2407 A B C P _115316 clauses c) = (term2395 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8404617) (@lem8404616 A B C P _115316 clauses c)). Qed.
Lemma lem8404619 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2408 A B C P _115316 clauses c) = (term2398 A B C P _115316 clauses c).
Proof. exact (eq_refl (term2408 A B C P _115316 clauses c)). Qed.
Lemma lem8404620 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2409 A B C P _115316 clauses c) = (term2399 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8404618 A B C P _115316 clauses c) (@lem8404619 A B C P _115316 clauses c)). Qed.
Lemma lem8404621 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2410 A B C P _115316 clauses) = (term2400 A B C P _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8404620 A B C P _115316 clauses c)). Qed.
Lemma lem8404622 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8404623 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2402 A B C P _115316 clauses) = (term2401 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8404622 C) (@lem8404621 A B C P _115316 clauses)). Qed.
Lemma lem8404624 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8404625 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2411 A B C P _115316 clauses) = (term2412 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8404624) (@lem8404623 A B C P _115316 clauses)). Qed.
Lemma lem8404626 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2406 A B C P _115316 clauses c) = (term2393 A B C P _115316 clauses c).
Proof. exact (eq_refl (term2406 A B C P _115316 clauses c)). Qed.
Lemma lem8404627 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2413 A B C P _115316 clauses) = (term2404 A B C P _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8404626 A B C P _115316 clauses c)). Qed.
Lemma lem8404628 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8404629 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2414 A B C P _115316 clauses) = (term2415 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8404628 C) (@lem8404627 A B C P _115316 clauses)). Qed.
Lemma lem8404630 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8404631 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2416 A B C P _115316 clauses) = (term2417 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8404630) (@lem8404629 A B C P _115316 clauses)). Qed.
Lemma lem8404632 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2408 A B C P _115316 clauses c) = (term2398 A B C P _115316 clauses c).
Proof. exact (eq_refl (term2408 A B C P _115316 clauses c)). Qed.
Lemma lem8404633 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2418 A B C P _115316 clauses) = (term2405 A B C P _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8404632 A B C P _115316 clauses c)). Qed.
Lemma lem8404634 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8404635 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2419 A B C P _115316 clauses) = (term2420 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8404634 C) (@lem8404633 A B C P _115316 clauses)). Qed.
Lemma lem8404636 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2403 A B C P _115316 clauses) = (term2421 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8404631 A B C P _115316 clauses) (@lem8404635 A B C P _115316 clauses)). Qed.
Lemma lem8404637 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : ((term2402 A B C P _115316 clauses) = (term2403 A B C P _115316 clauses)) = ((term2401 A B C P _115316 clauses) = (term2421 A B C P _115316 clauses)).
Proof. exact (MK_COMB (@lem8404625 A B C P _115316 clauses) (@lem8404636 A B C P _115316 clauses)). Qed.
Lemma lem8404638 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2401 A B C P _115316 clauses) = (term2421 A B C P _115316 clauses).
Proof. exact (EQ_MP (@lem8404637 A B C P _115316 clauses) (@lem8404615 A B C P _115316 clauses)). Qed.
Lemma lem8404767 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2375 A B C P _115316 clauses) = (term2421 A B C P _115316 clauses).
Proof. exact (TRANS (@lem8404611 A B C P _115316 clauses) (@lem8404638 A B C P _115316 clauses)). Qed.
Lemma lem8404768 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2376 A B C P _115316) = (term2422 A B C P _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8404767 A B C P _115316 clauses)). Qed.
Lemma lem8404769 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8404770 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2377 A B C P _115316) = (term2423 A B C P _115316).
Proof. exact (MK_COMB (@lem8404769 A B C P) (@lem8404768 A B C P _115316)). Qed.
Lemma lem8404772 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term1070 A P Q) = (term1071 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem8404773 {A B C P : Type'} (P' : type1123 A B C P) (Q : type1123 A B C P) : (term2424 A B C P P' Q) = (term2425 A B C P P' Q).
Proof. exact (@lem8404772 (type1638 A B C P) P' Q). Qed.
Lemma lem8404774 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2426 A B C P _115316) = (term2427 A B C P _115316).
Proof. exact (@lem8404773 A B C P (term2428 A B C P _115316) (term2429 A B C P _115316)). Qed.
Lemma lem8404775 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2430 A B C P _115316 clauses) = (term2415 A B C P _115316 clauses).
Proof. exact (eq_refl (term2430 A B C P _115316 clauses)). Qed.
Lemma lem8404776 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8404777 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2431 A B C P _115316 clauses) = (term2417 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8404776) (@lem8404775 A B C P _115316 clauses)). Qed.
Lemma lem8404778 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2432 A B C P _115316 clauses) = (term2420 A B C P _115316 clauses).
Proof. exact (eq_refl (term2432 A B C P _115316 clauses)). Qed.
Lemma lem8404779 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2433 A B C P _115316 clauses) = (term2421 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8404777 A B C P _115316 clauses) (@lem8404778 A B C P _115316 clauses)). Qed.
Lemma lem8404780 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2434 A B C P _115316) = (term2422 A B C P _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8404779 A B C P _115316 clauses)). Qed.
Lemma lem8404781 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8404782 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2426 A B C P _115316) = (term2423 A B C P _115316).
Proof. exact (MK_COMB (@lem8404781 A B C P) (@lem8404780 A B C P _115316)). Qed.
Lemma lem8404783 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8404784 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2435 A B C P _115316) = (term2436 A B C P _115316).
Proof. exact (MK_COMB (@lem8404783) (@lem8404782 A B C P _115316)). Qed.
Lemma lem8404785 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2430 A B C P _115316 clauses) = (term2415 A B C P _115316 clauses).
Proof. exact (eq_refl (term2430 A B C P _115316 clauses)). Qed.
Lemma lem8404786 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2437 A B C P _115316) = (term2428 A B C P _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8404785 A B C P _115316 clauses)). Qed.
Lemma lem8404787 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8404788 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2438 A B C P _115316) = (term2439 A B C P _115316).
Proof. exact (MK_COMB (@lem8404787 A B C P) (@lem8404786 A B C P _115316)). Qed.
Lemma lem8404789 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8404790 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2440 A B C P _115316) = (term2441 A B C P _115316).
Proof. exact (MK_COMB (@lem8404789) (@lem8404788 A B C P _115316)). Qed.
Lemma lem8404791 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2432 A B C P _115316 clauses) = (term2420 A B C P _115316 clauses).
Proof. exact (eq_refl (term2432 A B C P _115316 clauses)). Qed.
Lemma lem8404792 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2442 A B C P _115316) = (term2429 A B C P _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8404791 A B C P _115316 clauses)). Qed.
Lemma lem8404793 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8404794 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2443 A B C P _115316) = (term2444 A B C P _115316).
Proof. exact (MK_COMB (@lem8404793 A B C P) (@lem8404792 A B C P _115316)). Qed.
Lemma lem8404795 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2427 A B C P _115316) = (term2445 A B C P _115316).
Proof. exact (MK_COMB (@lem8404790 A B C P _115316) (@lem8404794 A B C P _115316)). Qed.
Lemma lem8404796 {A B C P : Type'} (_115316 : type1115 A B C P) : ((term2426 A B C P _115316) = (term2427 A B C P _115316)) = ((term2423 A B C P _115316) = (term2445 A B C P _115316)).
Proof. exact (MK_COMB (@lem8404784 A B C P _115316) (@lem8404795 A B C P _115316)). Qed.
Lemma lem8404797 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2423 A B C P _115316) = (term2445 A B C P _115316).
Proof. exact (EQ_MP (@lem8404796 A B C P _115316) (@lem8404774 A B C P _115316)). Qed.
Lemma lem8404934 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2377 A B C P _115316) = (term2445 A B C P _115316).
Proof. exact (TRANS (@lem8404770 A B C P _115316) (@lem8404797 A B C P _115316)). Qed.
Lemma lem8404936 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1140 A P Q) = (term1141 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8404937 {A P : Type'} (P' : Prop) (Q : type805 A P) : (term2124 A P P' Q) = (term2125 A P P' Q).
Proof. exact (@lem8404936 (P -> A) P' Q). Qed.
Lemma lem8404938 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2446 A B C P _115316 f clauses c) = (term2447 A B C P _115316 f clauses c).
Proof. exact (@lem8404937 A P (_115316 clauses c f) (term2361 A B C P f clauses c)). Qed.
Lemma lem8404939 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term2448 A B C P f clauses c s) = (term2355 A B C P f clauses s c).
Proof. exact (eq_refl (term2448 A B C P f clauses c s)). Qed.
Lemma lem8404940 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2449 A B C P f clauses c) = (term2361 A B C P f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8404939 A B C P f clauses s c)). Qed.
Lemma lem8404941 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8404942 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2450 A B C P f clauses c) = (term2362 A B C P f clauses c).
Proof. exact (MK_COMB (@lem8404941 A P) (@lem8404940 A B C P f clauses c)). Qed.
Lemma lem8404943 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) (f : type1185 A B C P) : (term2365 A B C P _115316 clauses c f) = (term2365 A B C P _115316 clauses c f).
Proof. exact (eq_refl (term2365 A B C P _115316 clauses c f)). Qed.
Lemma lem8404944 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2446 A B C P _115316 f clauses c) = (term2367 A B C P _115316 f clauses c).
Proof. exact (MK_COMB (@lem8404943 A B C P _115316 clauses c f) (@lem8404942 A B C P f clauses c)). Qed.
Lemma lem8404945 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8404946 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2451 A B C P _115316 f clauses c) = (term2452 A B C P _115316 f clauses c).
Proof. exact (MK_COMB (@lem8404945) (@lem8404944 A B C P _115316 f clauses c)). Qed.
Lemma lem8404947 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term2448 A B C P f clauses c s) = (term2355 A B C P f clauses s c).
Proof. exact (eq_refl (term2448 A B C P f clauses c s)). Qed.
Lemma lem8404948 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) (f : type1185 A B C P) : (term2365 A B C P _115316 clauses c f) = (term2365 A B C P _115316 clauses c f).
Proof. exact (eq_refl (term2365 A B C P _115316 clauses c f)). Qed.
Lemma lem8404949 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term2453 A B C P _115316 f clauses c s) = (term2454 A B C P _115316 f clauses s c).
Proof. exact (MK_COMB (@lem8404948 A B C P _115316 clauses c f) (@lem8404947 A B C P f clauses s c)). Qed.
Lemma lem8404950 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2455 A B C P _115316 f clauses c) = (term2456 A B C P _115316 f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8404949 A B C P _115316 f clauses s c)). Qed.
Lemma lem8404951 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8404952 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2447 A B C P _115316 f clauses c) = (term2457 A B C P _115316 f clauses c).
Proof. exact (MK_COMB (@lem8404951 A P) (@lem8404950 A B C P _115316 f clauses c)). Qed.
Lemma lem8404953 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : ((term2446 A B C P _115316 f clauses c) = (term2447 A B C P _115316 f clauses c)) = ((term2367 A B C P _115316 f clauses c) = (term2457 A B C P _115316 f clauses c)).
Proof. exact (MK_COMB (@lem8404946 A B C P _115316 f clauses c) (@lem8404952 A B C P _115316 f clauses c)). Qed.
Lemma lem8404954 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2367 A B C P _115316 f clauses c) = (term2457 A B C P _115316 f clauses c).
Proof. exact (EQ_MP (@lem8404953 A B C P _115316 f clauses c) (@lem8404938 A B C P _115316 f clauses c)). Qed.
Lemma lem8404956 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1140 A P Q) = (term1141 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8404957 {B C P : Type'} (P' : Prop) (Q : type766 B C P) : (term2138 B C P P' Q) = (term2139 B C P P' Q).
Proof. exact (@lem8404956 (type1475 B C P) P' Q). Qed.
Lemma lem8404958 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term2458 A B C P _115316 f clauses s c) = (term2459 A B C P _115316 f clauses s c).
Proof. exact (@lem8404957 B C P (_115316 clauses c f) (term2354 A B C P f clauses s c)). Qed.
Lemma lem8404959 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term2460 A B C P f clauses s c t) = (term2352 A B C P f clauses s t c).
Proof. exact (eq_refl (term2460 A B C P f clauses s c t)). Qed.
Lemma lem8404960 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term2461 A B C P f clauses s c) = (term2354 A B C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8404959 A B C P f clauses s t c)). Qed.
Lemma lem8404961 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8404962 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term2462 A B C P f clauses s c) = (term2355 A B C P f clauses s c).
Proof. exact (MK_COMB (@lem8404961 B C P) (@lem8404960 A B C P f clauses s c)). Qed.
Lemma lem8404963 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) (f : type1185 A B C P) : (term2365 A B C P _115316 clauses c f) = (term2365 A B C P _115316 clauses c f).
Proof. exact (eq_refl (term2365 A B C P _115316 clauses c f)). Qed.
Lemma lem8404964 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term2458 A B C P _115316 f clauses s c) = (term2454 A B C P _115316 f clauses s c).
Proof. exact (MK_COMB (@lem8404963 A B C P _115316 clauses c f) (@lem8404962 A B C P f clauses s c)). Qed.
Lemma lem8404965 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8404966 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term2463 A B C P _115316 f clauses s c) = (term2464 A B C P _115316 f clauses s c).
Proof. exact (MK_COMB (@lem8404965) (@lem8404964 A B C P _115316 f clauses s c)). Qed.
Lemma lem8404967 {A B C P : Type'} (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term2460 A B C P f clauses s c t) = (term2352 A B C P f clauses s t c).
Proof. exact (eq_refl (term2460 A B C P f clauses s c t)). Qed.
Lemma lem8404968 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) (f : type1185 A B C P) : (term2365 A B C P _115316 clauses c f) = (term2365 A B C P _115316 clauses c f).
Proof. exact (eq_refl (term2365 A B C P _115316 clauses c f)). Qed.
Lemma lem8404969 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term2465 A B C P _115316 f clauses s c t) = (term2466 A B C P _115316 f clauses s t c).
Proof. exact (MK_COMB (@lem8404968 A B C P _115316 clauses c f) (@lem8404967 A B C P f clauses s t c)). Qed.
Lemma lem8404970 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term2467 A B C P _115316 f clauses s c) = (term2468 A B C P _115316 f clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8404969 A B C P _115316 f clauses s t c)). Qed.
Lemma lem8404971 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8404972 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term2459 A B C P _115316 f clauses s c) = (term2469 A B C P _115316 f clauses s c).
Proof. exact (MK_COMB (@lem8404971 B C P) (@lem8404970 A B C P _115316 f clauses s c)). Qed.
Lemma lem8404973 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : ((term2458 A B C P _115316 f clauses s c) = (term2459 A B C P _115316 f clauses s c)) = ((term2454 A B C P _115316 f clauses s c) = (term2469 A B C P _115316 f clauses s c)).
Proof. exact (MK_COMB (@lem8404966 A B C P _115316 f clauses s c) (@lem8404972 A B C P _115316 f clauses s c)). Qed.
Lemma lem8404974 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term2454 A B C P _115316 f clauses s c) = (term2469 A B C P _115316 f clauses s c).
Proof. exact (EQ_MP (@lem8404973 A B C P _115316 f clauses s c) (@lem8404958 A B C P _115316 f clauses s c)). Qed.
Lemma lem8404975 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2456 A B C P _115316 f clauses c) = (term2470 A B C P _115316 f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8404974 A B C P _115316 f clauses s c)). Qed.
Lemma lem8404976 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8404977 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2457 A B C P _115316 f clauses c) = (term2471 A B C P _115316 f clauses c).
Proof. exact (MK_COMB (@lem8404976 A P) (@lem8404975 A B C P _115316 f clauses c)). Qed.
Lemma lem8404978 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2367 A B C P _115316 f clauses c) = (term2471 A B C P _115316 f clauses c).
Proof. exact (TRANS (@lem8404954 A B C P _115316 f clauses c) (@lem8404977 A B C P _115316 f clauses c)). Qed.
Lemma lem8404979 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2382 A B C P _115316 clauses c) = (term2472 A B C P _115316 clauses c).
Proof. exact (fun_ext (fun f : type1185 A B C P => @lem8404978 A B C P _115316 f clauses c)). Qed.
Lemma lem8404980 {A B C P : Type'} : (@all ((prod (P -> A) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8404981 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2393 A B C P _115316 clauses c) = (term2473 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8404980 A B C P) (@lem8404979 A B C P _115316 clauses c)). Qed.
Lemma lem8404983 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8404984 {A B C P : Type'} (P' : type309 A B C P) : (term2474 A B C P P') = (term2475 A B C P P').
Proof. exact (@lem8404983 (type1185 A B C P) (P -> A) P'). Qed.
Lemma lem8404985 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2476 A B C P _115316 clauses c) = (term2477 A B C P _115316 clauses c).
Proof. exact (@lem8404984 A B C P (term2478 A B C P _115316 clauses c)). Qed.
Lemma lem8404986 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2479 A B C P _115316 clauses c f) = (term2470 A B C P _115316 f clauses c).
Proof. exact (eq_refl (term2479 A B C P _115316 clauses c f)). Qed.
Lemma lem8404987 {A P : Type'} (s : P -> A) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8404988 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) (s : P -> A) : (term2480 A B C P _115316 clauses c f s) = (term2481 A B C P _115316 f clauses c s).
Proof. exact (MK_COMB (@lem8404986 A B C P _115316 f clauses c) (@lem8404987 A P s)). Qed.
Lemma lem8404989 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term2481 A B C P _115316 f clauses c s) = (term2469 A B C P _115316 f clauses s c).
Proof. exact (eq_refl (term2481 A B C P _115316 f clauses c s)). Qed.
Lemma lem8404990 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term2480 A B C P _115316 clauses c f s) = (term2469 A B C P _115316 f clauses s c).
Proof. exact (TRANS (@lem8404988 A B C P _115316 f clauses c s) (@lem8404989 A B C P _115316 f clauses s c)). Qed.
Lemma lem8404991 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2482 A B C P _115316 clauses c f) = (term2470 A B C P _115316 f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8404990 A B C P _115316 f clauses s c)). Qed.
Lemma lem8404992 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8404993 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2483 A B C P _115316 clauses c f) = (term2471 A B C P _115316 f clauses c).
Proof. exact (MK_COMB (@lem8404992 A P) (@lem8404991 A B C P _115316 f clauses c)). Qed.
Lemma lem8404994 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2484 A B C P _115316 clauses c) = (term2472 A B C P _115316 clauses c).
Proof. exact (fun_ext (fun f : type1185 A B C P => @lem8404993 A B C P _115316 f clauses c)). Qed.
Lemma lem8404995 {A B C P : Type'} : (@all ((prod (P -> A) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8404996 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2476 A B C P _115316 clauses c) = (term2473 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8404995 A B C P) (@lem8404994 A B C P _115316 clauses c)). Qed.
Lemma lem8404997 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8404998 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2485 A B C P _115316 clauses c) = (term2486 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8404997) (@lem8404996 A B C P _115316 clauses c)). Qed.
Lemma lem8404999 {A B C P : Type'} (_115316 : type1115 A B C P) (f : type1185 A B C P) (clauses : type1638 A B C P) (c : C) : (term2479 A B C P _115316 clauses c f) = (term2470 A B C P _115316 f clauses c).
Proof. exact (eq_refl (term2479 A B C P _115316 clauses c f)). Qed.
Lemma lem8405000 {A B C P : Type'} (s : type311 A B C P) (f : type1185 A B C P) : (s f) = (s f).
Proof. exact (eq_refl (s f)). Qed.
Lemma lem8405001 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) (s : type311 A B C P) (f : type1185 A B C P) : (term2487 A B C P _115316 clauses c s f) = (term2488 A B C P _115316 clauses c s f).
Proof. exact (MK_COMB (@lem8404999 A B C P _115316 f clauses c) (@lem8405000 A B C P s f)). Qed.
Lemma lem8405002 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (f : type1185 A B C P) (c : C) : (term2488 A B C P _115316 clauses c s f) = (term2489 A B C P _115316 clauses s f c).
Proof. exact (eq_refl (term2488 A B C P _115316 clauses c s f)). Qed.
Lemma lem8405003 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (f : type1185 A B C P) (c : C) : (term2487 A B C P _115316 clauses c s f) = (term2489 A B C P _115316 clauses s f c).
Proof. exact (TRANS (@lem8405001 A B C P _115316 clauses c s f) (@lem8405002 A B C P _115316 clauses s f c)). Qed.
Lemma lem8405004 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (c : C) : (term2490 A B C P _115316 clauses c s) = (term2491 A B C P _115316 clauses s c).
Proof. exact (fun_ext (fun f : type1185 A B C P => @lem8405003 A B C P _115316 clauses s f c)). Qed.
Lemma lem8405005 {A B C P : Type'} : (@all ((prod (P -> A) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8405006 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (c : C) : (term2492 A B C P _115316 clauses c s) = (term2493 A B C P _115316 clauses s c).
Proof. exact (MK_COMB (@lem8405005 A B C P) (@lem8405004 A B C P _115316 clauses s c)). Qed.
Lemma lem8405007 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2494 A B C P _115316 clauses c) = (term2495 A B C P _115316 clauses c).
Proof. exact (fun_ext (fun s : type311 A B C P => @lem8405006 A B C P _115316 clauses s c)). Qed.
Lemma lem8405008 {A B C P : Type'} : (@ex (((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A)) = (@ex (((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex (((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A))). Qed.
Lemma lem8405009 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2477 A B C P _115316 clauses c) = (term2496 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8405008 A B C P) (@lem8405007 A B C P _115316 clauses c)). Qed.
Lemma lem8405010 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : ((term2476 A B C P _115316 clauses c) = (term2477 A B C P _115316 clauses c)) = ((term2473 A B C P _115316 clauses c) = (term2496 A B C P _115316 clauses c)).
Proof. exact (MK_COMB (@lem8404998 A B C P _115316 clauses c) (@lem8405009 A B C P _115316 clauses c)). Qed.
Lemma lem8405011 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2473 A B C P _115316 clauses c) = (term2496 A B C P _115316 clauses c).
Proof. exact (EQ_MP (@lem8405010 A B C P _115316 clauses c) (@lem8404985 A B C P _115316 clauses c)). Qed.
Lemma lem8405013 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8405014 {A B C P : Type'} (P' : type308 A B C P) : (term2497 A B C P P') = (term2498 A B C P P').
Proof. exact (@lem8405013 (type1185 A B C P) (type1475 B C P) P'). Qed.
Lemma lem8405015 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (c : C) : (term2499 A B C P _115316 clauses s c) = (term2500 A B C P _115316 clauses s c).
Proof. exact (@lem8405014 A B C P (term2501 A B C P _115316 clauses s c)). Qed.
Lemma lem8405016 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (f : type1185 A B C P) (c : C) : (term2502 A B C P _115316 clauses s c f) = (term2503 A B C P _115316 clauses s f c).
Proof. exact (eq_refl (term2502 A B C P _115316 clauses s c f)). Qed.
Lemma lem8405017 {B C P : Type'} (t : type1475 B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8405018 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (f : type1185 A B C P) (c : C) (t : type1475 B C P) : (term2504 A B C P _115316 clauses s c f t) = (term2505 A B C P _115316 clauses s f c t).
Proof. exact (MK_COMB (@lem8405016 A B C P _115316 clauses s f c) (@lem8405017 B C P t)). Qed.
Lemma lem8405019 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (f : type1185 A B C P) (t : type1475 B C P) (c : C) : (term2505 A B C P _115316 clauses s f c t) = (term2506 A B C P _115316 clauses s f t c).
Proof. exact (eq_refl (term2505 A B C P _115316 clauses s f c t)). Qed.
Lemma lem8405020 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (f : type1185 A B C P) (t : type1475 B C P) (c : C) : (term2504 A B C P _115316 clauses s c f t) = (term2506 A B C P _115316 clauses s f t c).
Proof. exact (TRANS (@lem8405018 A B C P _115316 clauses s f c t) (@lem8405019 A B C P _115316 clauses s f t c)). Qed.
Lemma lem8405021 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (f : type1185 A B C P) (c : C) : (term2507 A B C P _115316 clauses s c f) = (term2503 A B C P _115316 clauses s f c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8405020 A B C P _115316 clauses s f t c)). Qed.
Lemma lem8405022 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8405023 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (f : type1185 A B C P) (c : C) : (term2508 A B C P _115316 clauses s c f) = (term2489 A B C P _115316 clauses s f c).
Proof. exact (MK_COMB (@lem8405022 B C P) (@lem8405021 A B C P _115316 clauses s f c)). Qed.
Lemma lem8405024 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (c : C) : (term2509 A B C P _115316 clauses s c) = (term2491 A B C P _115316 clauses s c).
Proof. exact (fun_ext (fun f : type1185 A B C P => @lem8405023 A B C P _115316 clauses s f c)). Qed.
Lemma lem8405025 {A B C P : Type'} : (@all ((prod (P -> A) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8405026 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (c : C) : (term2499 A B C P _115316 clauses s c) = (term2493 A B C P _115316 clauses s c).
Proof. exact (MK_COMB (@lem8405025 A B C P) (@lem8405024 A B C P _115316 clauses s c)). Qed.
Lemma lem8405027 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8405028 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (c : C) : (term2510 A B C P _115316 clauses s c) = (term2511 A B C P _115316 clauses s c).
Proof. exact (MK_COMB (@lem8405027) (@lem8405026 A B C P _115316 clauses s c)). Qed.
Lemma lem8405029 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (f : type1185 A B C P) (c : C) : (term2502 A B C P _115316 clauses s c f) = (term2503 A B C P _115316 clauses s f c).
Proof. exact (eq_refl (term2502 A B C P _115316 clauses s c f)). Qed.
Lemma lem8405030 {A B C P : Type'} (t : type310 A B C P) (f : type1185 A B C P) : (t f) = (t f).
Proof. exact (eq_refl (t f)). Qed.
Lemma lem8405031 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (c : C) (t : type310 A B C P) (f : type1185 A B C P) : (term2512 A B C P _115316 clauses s c t f) = (term2513 A B C P _115316 clauses s c t f).
Proof. exact (MK_COMB (@lem8405029 A B C P _115316 clauses s f c) (@lem8405030 A B C P t f)). Qed.
Lemma lem8405032 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (t : type310 A B C P) (f : type1185 A B C P) (c : C) : (term2513 A B C P _115316 clauses s c t f) = (term2514 A B C P _115316 clauses s t f c).
Proof. exact (eq_refl (term2513 A B C P _115316 clauses s c t f)). Qed.
Lemma lem8405033 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (t : type310 A B C P) (f : type1185 A B C P) (c : C) : (term2512 A B C P _115316 clauses s c t f) = (term2514 A B C P _115316 clauses s t f c).
Proof. exact (TRANS (@lem8405031 A B C P _115316 clauses s c t f) (@lem8405032 A B C P _115316 clauses s t f c)). Qed.
Lemma lem8405034 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (t : type310 A B C P) (c : C) : (term2515 A B C P _115316 clauses s c t) = (term2516 A B C P _115316 clauses s t c).
Proof. exact (fun_ext (fun f : type1185 A B C P => @lem8405033 A B C P _115316 clauses s t f c)). Qed.
Lemma lem8405035 {A B C P : Type'} : (@all ((prod (P -> A) (C -> P -> B)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> B)) -> Prop))). Qed.
Lemma lem8405036 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (t : type310 A B C P) (c : C) : (term2517 A B C P _115316 clauses s c t) = (term2518 A B C P _115316 clauses s t c).
Proof. exact (MK_COMB (@lem8405035 A B C P) (@lem8405034 A B C P _115316 clauses s t c)). Qed.
Lemma lem8405037 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (c : C) : (term2519 A B C P _115316 clauses s c) = (term2520 A B C P _115316 clauses s c).
Proof. exact (fun_ext (fun t : type310 A B C P => @lem8405036 A B C P _115316 clauses s t c)). Qed.
Lemma lem8405038 {A B C P : Type'} : (@ex (((prod (P -> A) (C -> P -> B)) -> Prop) -> C -> P -> B)) = (@ex (((prod (P -> A) (C -> P -> B)) -> Prop) -> C -> P -> B)).
Proof. exact (eq_refl (@ex (((prod (P -> A) (C -> P -> B)) -> Prop) -> C -> P -> B))). Qed.
Lemma lem8405039 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (c : C) : (term2500 A B C P _115316 clauses s c) = (term2521 A B C P _115316 clauses s c).
Proof. exact (MK_COMB (@lem8405038 A B C P) (@lem8405037 A B C P _115316 clauses s c)). Qed.
Lemma lem8405040 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (c : C) : ((term2499 A B C P _115316 clauses s c) = (term2500 A B C P _115316 clauses s c)) = ((term2493 A B C P _115316 clauses s c) = (term2521 A B C P _115316 clauses s c)).
Proof. exact (MK_COMB (@lem8405028 A B C P _115316 clauses s c) (@lem8405039 A B C P _115316 clauses s c)). Qed.
Lemma lem8405041 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (c : C) : (term2493 A B C P _115316 clauses s c) = (term2521 A B C P _115316 clauses s c).
Proof. exact (EQ_MP (@lem8405040 A B C P _115316 clauses s c) (@lem8405015 A B C P _115316 clauses s c)). Qed.
Lemma lem8405042 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2495 A B C P _115316 clauses c) = (term2522 A B C P _115316 clauses c).
Proof. exact (fun_ext (fun s : type311 A B C P => @lem8405041 A B C P _115316 clauses s c)). Qed.
Lemma lem8405043 {A B C P : Type'} : (@ex (((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A)) = (@ex (((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex (((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A))). Qed.
Lemma lem8405044 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2496 A B C P _115316 clauses c) = (term2523 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8405043 A B C P) (@lem8405042 A B C P _115316 clauses c)). Qed.
Lemma lem8405045 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2473 A B C P _115316 clauses c) = (term2523 A B C P _115316 clauses c).
Proof. exact (TRANS (@lem8405011 A B C P _115316 clauses c) (@lem8405044 A B C P _115316 clauses c)). Qed.
Lemma lem8405046 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2393 A B C P _115316 clauses c) = (term2523 A B C P _115316 clauses c).
Proof. exact (TRANS (@lem8404981 A B C P _115316 clauses c) (@lem8405045 A B C P _115316 clauses c)). Qed.
Lemma lem8405047 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2404 A B C P _115316 clauses) = (term2524 A B C P _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8405046 A B C P _115316 clauses c)). Qed.
Lemma lem8405048 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8405049 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2415 A B C P _115316 clauses) = (term2525 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8405048 C) (@lem8405047 A B C P _115316 clauses)). Qed.
Lemma lem8405051 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8405052 {A B C P : Type'} (P' : type1488 A B C P) : (term2526 A B C P P') = (term2527 A B C P P').
Proof. exact (@lem8405051 C (type311 A B C P) P'). Qed.
Lemma lem8405053 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2528 A B C P _115316 clauses) = (term2529 A B C P _115316 clauses).
Proof. exact (@lem8405052 A B C P (term2530 A B C P _115316 clauses)). Qed.
Lemma lem8405054 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2531 A B C P _115316 clauses c) = (term2522 A B C P _115316 clauses c).
Proof. exact (eq_refl (term2531 A B C P _115316 clauses c)). Qed.
Lemma lem8405055 {A B C P : Type'} (s : type311 A B C P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8405056 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) (s : type311 A B C P) : (term2532 A B C P _115316 clauses c s) = (term2533 A B C P _115316 clauses c s).
Proof. exact (MK_COMB (@lem8405054 A B C P _115316 clauses c) (@lem8405055 A B C P s)). Qed.
Lemma lem8405057 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (c : C) : (term2533 A B C P _115316 clauses c s) = (term2521 A B C P _115316 clauses s c).
Proof. exact (eq_refl (term2533 A B C P _115316 clauses c s)). Qed.
Lemma lem8405058 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type311 A B C P) (c : C) : (term2532 A B C P _115316 clauses c s) = (term2521 A B C P _115316 clauses s c).
Proof. exact (TRANS (@lem8405056 A B C P _115316 clauses c s) (@lem8405057 A B C P _115316 clauses s c)). Qed.
Lemma lem8405059 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2534 A B C P _115316 clauses c) = (term2522 A B C P _115316 clauses c).
Proof. exact (fun_ext (fun s : type311 A B C P => @lem8405058 A B C P _115316 clauses s c)). Qed.
Lemma lem8405060 {A B C P : Type'} : (@ex (((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A)) = (@ex (((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex (((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A))). Qed.
Lemma lem8405061 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2535 A B C P _115316 clauses c) = (term2523 A B C P _115316 clauses c).
Proof. exact (MK_COMB (@lem8405060 A B C P) (@lem8405059 A B C P _115316 clauses c)). Qed.
Lemma lem8405062 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2536 A B C P _115316 clauses) = (term2524 A B C P _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8405061 A B C P _115316 clauses c)). Qed.
Lemma lem8405063 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8405064 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2528 A B C P _115316 clauses) = (term2525 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8405063 C) (@lem8405062 A B C P _115316 clauses)). Qed.
Lemma lem8405065 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8405066 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2537 A B C P _115316 clauses) = (term2538 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8405065) (@lem8405064 A B C P _115316 clauses)). Qed.
Lemma lem8405067 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (c : C) : (term2531 A B C P _115316 clauses c) = (term2522 A B C P _115316 clauses c).
Proof. exact (eq_refl (term2531 A B C P _115316 clauses c)). Qed.
Lemma lem8405068 {A B C P : Type'} (s : type1502 A B C P) (c : C) : (s c) = (s c).
Proof. exact (eq_refl (s c)). Qed.
Lemma lem8405069 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) (c : C) : (term2539 A B C P _115316 clauses s c) = (term2540 A B C P _115316 clauses s c).
Proof. exact (MK_COMB (@lem8405067 A B C P _115316 clauses c) (@lem8405068 A B C P s c)). Qed.
Lemma lem8405070 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) (c : C) : (term2540 A B C P _115316 clauses s c) = (term2541 A B C P _115316 clauses s c).
Proof. exact (eq_refl (term2540 A B C P _115316 clauses s c)). Qed.
Lemma lem8405071 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) (c : C) : (term2539 A B C P _115316 clauses s c) = (term2541 A B C P _115316 clauses s c).
Proof. exact (TRANS (@lem8405069 A B C P _115316 clauses s c) (@lem8405070 A B C P _115316 clauses s c)). Qed.
Lemma lem8405072 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) : (term2542 A B C P _115316 clauses s) = (term2543 A B C P _115316 clauses s).
Proof. exact (fun_ext (fun c : C => @lem8405071 A B C P _115316 clauses s c)). Qed.
Lemma lem8405073 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8405074 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) : (term2544 A B C P _115316 clauses s) = (term2545 A B C P _115316 clauses s).
Proof. exact (MK_COMB (@lem8405073 C) (@lem8405072 A B C P _115316 clauses s)). Qed.
Lemma lem8405075 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2546 A B C P _115316 clauses) = (term2547 A B C P _115316 clauses).
Proof. exact (fun_ext (fun s : type1502 A B C P => @lem8405074 A B C P _115316 clauses s)). Qed.
Lemma lem8405076 {A B C P : Type'} : (@ex (C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A)) = (@ex (C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex (C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A))). Qed.
Lemma lem8405077 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2529 A B C P _115316 clauses) = (term2548 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8405076 A B C P) (@lem8405075 A B C P _115316 clauses)). Qed.
Lemma lem8405078 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : ((term2528 A B C P _115316 clauses) = (term2529 A B C P _115316 clauses)) = ((term2525 A B C P _115316 clauses) = (term2548 A B C P _115316 clauses)).
Proof. exact (MK_COMB (@lem8405066 A B C P _115316 clauses) (@lem8405077 A B C P _115316 clauses)). Qed.
Lemma lem8405079 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2525 A B C P _115316 clauses) = (term2548 A B C P _115316 clauses).
Proof. exact (EQ_MP (@lem8405078 A B C P _115316 clauses) (@lem8405053 A B C P _115316 clauses)). Qed.
Lemma lem8405081 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8405082 {A B C P : Type'} (P' : type1487 A B C P) : (term2549 A B C P P') = (term2550 A B C P P').
Proof. exact (@lem8405081 C (type310 A B C P) P'). Qed.
Lemma lem8405083 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) : (term2551 A B C P _115316 clauses s) = (term2552 A B C P _115316 clauses s).
Proof. exact (@lem8405082 A B C P (term2553 A B C P _115316 clauses s)). Qed.
Lemma lem8405084 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) (c : C) : (term2554 A B C P _115316 clauses s c) = (term2555 A B C P _115316 clauses s c).
Proof. exact (eq_refl (term2554 A B C P _115316 clauses s c)). Qed.
Lemma lem8405085 {A B C P : Type'} (t : type310 A B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8405086 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) (c : C) (t : type310 A B C P) : (term2556 A B C P _115316 clauses s c t) = (term2557 A B C P _115316 clauses s c t).
Proof. exact (MK_COMB (@lem8405084 A B C P _115316 clauses s c) (@lem8405085 A B C P t)). Qed.
Lemma lem8405087 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) (t : type310 A B C P) (c : C) : (term2557 A B C P _115316 clauses s c t) = (term2558 A B C P _115316 clauses s t c).
Proof. exact (eq_refl (term2557 A B C P _115316 clauses s c t)). Qed.
Lemma lem8405088 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) (t : type310 A B C P) (c : C) : (term2556 A B C P _115316 clauses s c t) = (term2558 A B C P _115316 clauses s t c).
Proof. exact (TRANS (@lem8405086 A B C P _115316 clauses s c t) (@lem8405087 A B C P _115316 clauses s t c)). Qed.
Lemma lem8405089 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) (c : C) : (term2559 A B C P _115316 clauses s c) = (term2555 A B C P _115316 clauses s c).
Proof. exact (fun_ext (fun t : type310 A B C P => @lem8405088 A B C P _115316 clauses s t c)). Qed.
Lemma lem8405090 {A B C P : Type'} : (@ex (((prod (P -> A) (C -> P -> B)) -> Prop) -> C -> P -> B)) = (@ex (((prod (P -> A) (C -> P -> B)) -> Prop) -> C -> P -> B)).
Proof. exact (eq_refl (@ex (((prod (P -> A) (C -> P -> B)) -> Prop) -> C -> P -> B))). Qed.
Lemma lem8405091 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) (c : C) : (term2560 A B C P _115316 clauses s c) = (term2541 A B C P _115316 clauses s c).
Proof. exact (MK_COMB (@lem8405090 A B C P) (@lem8405089 A B C P _115316 clauses s c)). Qed.
Lemma lem8405092 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) : (term2561 A B C P _115316 clauses s) = (term2543 A B C P _115316 clauses s).
Proof. exact (fun_ext (fun c : C => @lem8405091 A B C P _115316 clauses s c)). Qed.
Lemma lem8405093 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8405094 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) : (term2551 A B C P _115316 clauses s) = (term2545 A B C P _115316 clauses s).
Proof. exact (MK_COMB (@lem8405093 C) (@lem8405092 A B C P _115316 clauses s)). Qed.
Lemma lem8405095 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8405096 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) : (term2562 A B C P _115316 clauses s) = (term2563 A B C P _115316 clauses s).
Proof. exact (MK_COMB (@lem8405095) (@lem8405094 A B C P _115316 clauses s)). Qed.
Lemma lem8405097 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) (c : C) : (term2554 A B C P _115316 clauses s c) = (term2555 A B C P _115316 clauses s c).
Proof. exact (eq_refl (term2554 A B C P _115316 clauses s c)). Qed.
Lemma lem8405098 {A B C P : Type'} (t : type1501 A B C P) (c : C) : (t c) = (t c).
Proof. exact (eq_refl (t c)). Qed.
Lemma lem8405099 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) (t : type1501 A B C P) (c : C) : (term2564 A B C P _115316 clauses s t c) = (term2565 A B C P _115316 clauses s t c).
Proof. exact (MK_COMB (@lem8405097 A B C P _115316 clauses s c) (@lem8405098 A B C P t c)). Qed.
Lemma lem8405100 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) (t : type1501 A B C P) (c : C) : (term2565 A B C P _115316 clauses s t c) = (term2566 A B C P _115316 clauses s t c).
Proof. exact (eq_refl (term2565 A B C P _115316 clauses s t c)). Qed.
Lemma lem8405101 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) (t : type1501 A B C P) (c : C) : (term2564 A B C P _115316 clauses s t c) = (term2566 A B C P _115316 clauses s t c).
Proof. exact (TRANS (@lem8405099 A B C P _115316 clauses s t c) (@lem8405100 A B C P _115316 clauses s t c)). Qed.
Lemma lem8405102 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) (t : type1501 A B C P) : (term2567 A B C P _115316 clauses s t) = (term2568 A B C P _115316 clauses s t).
Proof. exact (fun_ext (fun c : C => @lem8405101 A B C P _115316 clauses s t c)). Qed.
Lemma lem8405103 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8405104 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) (t : type1501 A B C P) : (term2569 A B C P _115316 clauses s t) = (term2570 A B C P _115316 clauses s t).
Proof. exact (MK_COMB (@lem8405103 C) (@lem8405102 A B C P _115316 clauses s t)). Qed.
Lemma lem8405105 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) : (term2571 A B C P _115316 clauses s) = (term2572 A B C P _115316 clauses s).
Proof. exact (fun_ext (fun t : type1501 A B C P => @lem8405104 A B C P _115316 clauses s t)). Qed.
Lemma lem8405106 {A B C P : Type'} : (@ex (C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> C -> P -> B)) = (@ex (C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> C -> P -> B))). Qed.
Lemma lem8405107 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) : (term2552 A B C P _115316 clauses s) = (term2573 A B C P _115316 clauses s).
Proof. exact (MK_COMB (@lem8405106 A B C P) (@lem8405105 A B C P _115316 clauses s)). Qed.
Lemma lem8405108 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) : ((term2551 A B C P _115316 clauses s) = (term2552 A B C P _115316 clauses s)) = ((term2545 A B C P _115316 clauses s) = (term2573 A B C P _115316 clauses s)).
Proof. exact (MK_COMB (@lem8405096 A B C P _115316 clauses s) (@lem8405107 A B C P _115316 clauses s)). Qed.
Lemma lem8405109 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) : (term2545 A B C P _115316 clauses s) = (term2573 A B C P _115316 clauses s).
Proof. exact (EQ_MP (@lem8405108 A B C P _115316 clauses s) (@lem8405083 A B C P _115316 clauses s)). Qed.
Lemma lem8405110 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2547 A B C P _115316 clauses) = (term2574 A B C P _115316 clauses).
Proof. exact (fun_ext (fun s : type1502 A B C P => @lem8405109 A B C P _115316 clauses s)). Qed.
Lemma lem8405111 {A B C P : Type'} : (@ex (C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A)) = (@ex (C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex (C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A))). Qed.
Lemma lem8405112 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2548 A B C P _115316 clauses) = (term2575 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8405111 A B C P) (@lem8405110 A B C P _115316 clauses)). Qed.
Lemma lem8405113 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2525 A B C P _115316 clauses) = (term2575 A B C P _115316 clauses).
Proof. exact (TRANS (@lem8405079 A B C P _115316 clauses) (@lem8405112 A B C P _115316 clauses)). Qed.
Lemma lem8405114 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2415 A B C P _115316 clauses) = (term2575 A B C P _115316 clauses).
Proof. exact (TRANS (@lem8405049 A B C P _115316 clauses) (@lem8405113 A B C P _115316 clauses)). Qed.
Lemma lem8405115 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2428 A B C P _115316) = (term2576 A B C P _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8405114 A B C P _115316 clauses)). Qed.
Lemma lem8405116 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8405117 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2439 A B C P _115316) = (term2577 A B C P _115316).
Proof. exact (MK_COMB (@lem8405116 A B C P) (@lem8405115 A B C P _115316)). Qed.
Lemma lem8405119 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8405120 {A B C P : Type'} (P' : type1106 A B C P) : (term2578 A B C P P') = (term2579 A B C P P').
Proof. exact (@lem8405119 (type1638 A B C P) (type1502 A B C P) P'). Qed.
Lemma lem8405121 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2580 A B C P _115316) = (term2581 A B C P _115316).
Proof. exact (@lem8405120 A B C P (term2582 A B C P _115316)). Qed.
Lemma lem8405122 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2583 A B C P _115316 clauses) = (term2574 A B C P _115316 clauses).
Proof. exact (eq_refl (term2583 A B C P _115316 clauses)). Qed.
Lemma lem8405123 {A B C P : Type'} (s : type1502 A B C P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8405124 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) : (term2584 A B C P _115316 clauses s) = (term2585 A B C P _115316 clauses s).
Proof. exact (MK_COMB (@lem8405122 A B C P _115316 clauses) (@lem8405123 A B C P s)). Qed.
Lemma lem8405125 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) : (term2585 A B C P _115316 clauses s) = (term2573 A B C P _115316 clauses s).
Proof. exact (eq_refl (term2585 A B C P _115316 clauses s)). Qed.
Lemma lem8405126 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1502 A B C P) : (term2584 A B C P _115316 clauses s) = (term2573 A B C P _115316 clauses s).
Proof. exact (TRANS (@lem8405124 A B C P _115316 clauses s) (@lem8405125 A B C P _115316 clauses s)). Qed.
Lemma lem8405127 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2586 A B C P _115316 clauses) = (term2574 A B C P _115316 clauses).
Proof. exact (fun_ext (fun s : type1502 A B C P => @lem8405126 A B C P _115316 clauses s)). Qed.
Lemma lem8405128 {A B C P : Type'} : (@ex (C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A)) = (@ex (C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex (C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A))). Qed.
Lemma lem8405129 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2587 A B C P _115316 clauses) = (term2575 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8405128 A B C P) (@lem8405127 A B C P _115316 clauses)). Qed.
Lemma lem8405130 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2588 A B C P _115316) = (term2576 A B C P _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8405129 A B C P _115316 clauses)). Qed.
Lemma lem8405131 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8405132 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2580 A B C P _115316) = (term2577 A B C P _115316).
Proof. exact (MK_COMB (@lem8405131 A B C P) (@lem8405130 A B C P _115316)). Qed.
Lemma lem8405133 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8405134 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2589 A B C P _115316) = (term2590 A B C P _115316).
Proof. exact (MK_COMB (@lem8405133) (@lem8405132 A B C P _115316)). Qed.
Lemma lem8405135 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term2583 A B C P _115316 clauses) = (term2574 A B C P _115316 clauses).
Proof. exact (eq_refl (term2583 A B C P _115316 clauses)). Qed.
Lemma lem8405136 {A B C P : Type'} (s : type1114 A B C P) (clauses : type1638 A B C P) : (s clauses) = (s clauses).
Proof. exact (eq_refl (s clauses)). Qed.
Lemma lem8405137 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) (clauses : type1638 A B C P) : (term2591 A B C P _115316 s clauses) = (term2592 A B C P _115316 s clauses).
Proof. exact (MK_COMB (@lem8405135 A B C P _115316 clauses) (@lem8405136 A B C P s clauses)). Qed.
Lemma lem8405138 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) (clauses : type1638 A B C P) : (term2592 A B C P _115316 s clauses) = (term2593 A B C P _115316 s clauses).
Proof. exact (eq_refl (term2592 A B C P _115316 s clauses)). Qed.
Lemma lem8405139 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) (clauses : type1638 A B C P) : (term2591 A B C P _115316 s clauses) = (term2593 A B C P _115316 s clauses).
Proof. exact (TRANS (@lem8405137 A B C P _115316 s clauses) (@lem8405138 A B C P _115316 s clauses)). Qed.
Lemma lem8405140 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) : (term2594 A B C P _115316 s) = (term2595 A B C P _115316 s).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8405139 A B C P _115316 s clauses)). Qed.
Lemma lem8405141 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8405142 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) : (term2596 A B C P _115316 s) = (term2597 A B C P _115316 s).
Proof. exact (MK_COMB (@lem8405141 A B C P) (@lem8405140 A B C P _115316 s)). Qed.
Lemma lem8405143 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2598 A B C P _115316) = (term2599 A B C P _115316).
Proof. exact (fun_ext (fun s : type1114 A B C P => @lem8405142 A B C P _115316 s)). Qed.
Lemma lem8405144 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A))). Qed.
Lemma lem8405145 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2581 A B C P _115316) = (term2600 A B C P _115316).
Proof. exact (MK_COMB (@lem8405144 A B C P) (@lem8405143 A B C P _115316)). Qed.
Lemma lem8405146 {A B C P : Type'} (_115316 : type1115 A B C P) : ((term2580 A B C P _115316) = (term2581 A B C P _115316)) = ((term2577 A B C P _115316) = (term2600 A B C P _115316)).
Proof. exact (MK_COMB (@lem8405134 A B C P _115316) (@lem8405145 A B C P _115316)). Qed.
Lemma lem8405147 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2577 A B C P _115316) = (term2600 A B C P _115316).
Proof. exact (EQ_MP (@lem8405146 A B C P _115316) (@lem8405121 A B C P _115316)). Qed.
Lemma lem8405149 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8405150 {A B C P : Type'} (P' : type1105 A B C P) : (term2601 A B C P P') = (term2602 A B C P P').
Proof. exact (@lem8405149 (type1638 A B C P) (type1501 A B C P) P'). Qed.
Lemma lem8405151 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) : (term2603 A B C P _115316 s) = (term2604 A B C P _115316 s).
Proof. exact (@lem8405150 A B C P (term2605 A B C P _115316 s)). Qed.
Lemma lem8405152 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) (clauses : type1638 A B C P) : (term2606 A B C P _115316 s clauses) = (term2607 A B C P _115316 s clauses).
Proof. exact (eq_refl (term2606 A B C P _115316 s clauses)). Qed.
Lemma lem8405153 {A B C P : Type'} (t : type1501 A B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8405154 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) (clauses : type1638 A B C P) (t : type1501 A B C P) : (term2608 A B C P _115316 s clauses t) = (term2609 A B C P _115316 s clauses t).
Proof. exact (MK_COMB (@lem8405152 A B C P _115316 s clauses) (@lem8405153 A B C P t)). Qed.
Lemma lem8405155 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) (clauses : type1638 A B C P) (t : type1501 A B C P) : (term2609 A B C P _115316 s clauses t) = (term2610 A B C P _115316 s clauses t).
Proof. exact (eq_refl (term2609 A B C P _115316 s clauses t)). Qed.
Lemma lem8405156 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) (clauses : type1638 A B C P) (t : type1501 A B C P) : (term2608 A B C P _115316 s clauses t) = (term2610 A B C P _115316 s clauses t).
Proof. exact (TRANS (@lem8405154 A B C P _115316 s clauses t) (@lem8405155 A B C P _115316 s clauses t)). Qed.
Lemma lem8405157 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) (clauses : type1638 A B C P) : (term2611 A B C P _115316 s clauses) = (term2607 A B C P _115316 s clauses).
Proof. exact (fun_ext (fun t : type1501 A B C P => @lem8405156 A B C P _115316 s clauses t)). Qed.
Lemma lem8405158 {A B C P : Type'} : (@ex (C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> C -> P -> B)) = (@ex (C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> C -> P -> B))). Qed.
Lemma lem8405159 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) (clauses : type1638 A B C P) : (term2612 A B C P _115316 s clauses) = (term2593 A B C P _115316 s clauses).
Proof. exact (MK_COMB (@lem8405158 A B C P) (@lem8405157 A B C P _115316 s clauses)). Qed.
Lemma lem8405160 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) : (term2613 A B C P _115316 s) = (term2595 A B C P _115316 s).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8405159 A B C P _115316 s clauses)). Qed.
Lemma lem8405161 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8405162 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) : (term2603 A B C P _115316 s) = (term2597 A B C P _115316 s).
Proof. exact (MK_COMB (@lem8405161 A B C P) (@lem8405160 A B C P _115316 s)). Qed.
Lemma lem8405163 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8405164 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) : (term2614 A B C P _115316 s) = (term2615 A B C P _115316 s).
Proof. exact (MK_COMB (@lem8405163) (@lem8405162 A B C P _115316 s)). Qed.
Lemma lem8405165 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) (clauses : type1638 A B C P) : (term2606 A B C P _115316 s clauses) = (term2607 A B C P _115316 s clauses).
Proof. exact (eq_refl (term2606 A B C P _115316 s clauses)). Qed.
Lemma lem8405166 {A B C P : Type'} (t : type1113 A B C P) (clauses : type1638 A B C P) : (t clauses) = (t clauses).
Proof. exact (eq_refl (t clauses)). Qed.
Lemma lem8405167 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) (t : type1113 A B C P) (clauses : type1638 A B C P) : (term2616 A B C P _115316 s t clauses) = (term2617 A B C P _115316 s t clauses).
Proof. exact (MK_COMB (@lem8405165 A B C P _115316 s clauses) (@lem8405166 A B C P t clauses)). Qed.
Lemma lem8405168 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) (t : type1113 A B C P) (clauses : type1638 A B C P) : (term2617 A B C P _115316 s t clauses) = (term2618 A B C P _115316 s t clauses).
Proof. exact (eq_refl (term2617 A B C P _115316 s t clauses)). Qed.
Lemma lem8405169 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) (t : type1113 A B C P) (clauses : type1638 A B C P) : (term2616 A B C P _115316 s t clauses) = (term2618 A B C P _115316 s t clauses).
Proof. exact (TRANS (@lem8405167 A B C P _115316 s t clauses) (@lem8405168 A B C P _115316 s t clauses)). Qed.
Lemma lem8405170 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) (t : type1113 A B C P) : (term2619 A B C P _115316 s t) = (term2620 A B C P _115316 s t).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8405169 A B C P _115316 s t clauses)). Qed.
Lemma lem8405171 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8405172 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) (t : type1113 A B C P) : (term2621 A B C P _115316 s t) = (term2622 A B C P _115316 s t).
Proof. exact (MK_COMB (@lem8405171 A B C P) (@lem8405170 A B C P _115316 s t)). Qed.
Lemma lem8405173 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) : (term2623 A B C P _115316 s) = (term2624 A B C P _115316 s).
Proof. exact (fun_ext (fun t : type1113 A B C P => @lem8405172 A B C P _115316 s t)). Qed.
Lemma lem8405174 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> C -> P -> B)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> C -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> C -> P -> B))). Qed.
Lemma lem8405175 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) : (term2604 A B C P _115316 s) = (term2625 A B C P _115316 s).
Proof. exact (MK_COMB (@lem8405174 A B C P) (@lem8405173 A B C P _115316 s)). Qed.
Lemma lem8405176 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) : ((term2603 A B C P _115316 s) = (term2604 A B C P _115316 s)) = ((term2597 A B C P _115316 s) = (term2625 A B C P _115316 s)).
Proof. exact (MK_COMB (@lem8405164 A B C P _115316 s) (@lem8405175 A B C P _115316 s)). Qed.
Lemma lem8405177 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) : (term2597 A B C P _115316 s) = (term2625 A B C P _115316 s).
Proof. exact (EQ_MP (@lem8405176 A B C P _115316 s) (@lem8405151 A B C P _115316 s)). Qed.
Lemma lem8405178 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2599 A B C P _115316) = (term2626 A B C P _115316).
Proof. exact (fun_ext (fun s : type1114 A B C P => @lem8405177 A B C P _115316 s)). Qed.
Lemma lem8405179 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A))). Qed.
Lemma lem8405180 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2600 A B C P _115316) = (term2627 A B C P _115316).
Proof. exact (MK_COMB (@lem8405179 A B C P) (@lem8405178 A B C P _115316)). Qed.
Lemma lem8405181 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2577 A B C P _115316) = (term2627 A B C P _115316).
Proof. exact (TRANS (@lem8405147 A B C P _115316) (@lem8405180 A B C P _115316)). Qed.
Lemma lem8405182 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2439 A B C P _115316) = (term2627 A B C P _115316).
Proof. exact (TRANS (@lem8405117 A B C P _115316) (@lem8405181 A B C P _115316)). Qed.
Lemma lem8405183 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8405184 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2441 A B C P _115316) = (term2628 A B C P _115316).
Proof. exact (MK_COMB (@lem8405183) (@lem8405182 A B C P _115316)). Qed.
Lemma lem8405185 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2444 A B C P _115316) = (term2444 A B C P _115316).
Proof. exact (eq_refl (term2444 A B C P _115316)). Qed.
Lemma lem8405186 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2445 A B C P _115316) = (term2629 A B C P _115316).
Proof. exact (MK_COMB (@lem8405184 A B C P _115316) (@lem8405185 A B C P _115316)). Qed.
Lemma lem8405188 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1332 A P Q) = (term1333 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8405189 {A B C P : Type'} (P' : type274 A B C P) (Q : Prop) : (term2630 A B C P P' Q) = (term2631 A B C P P' Q).
Proof. exact (@lem8405188 (type1114 A B C P) P' Q). Qed.
Lemma lem8405190 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2632 A B C P _115316) = (term2633 A B C P _115316).
Proof. exact (@lem8405189 A B C P (term2626 A B C P _115316) (term2444 A B C P _115316)). Qed.
Lemma lem8405191 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) : (term2634 A B C P _115316 s) = (term2625 A B C P _115316 s).
Proof. exact (eq_refl (term2634 A B C P _115316 s)). Qed.
Lemma lem8405192 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2635 A B C P _115316) = (term2626 A B C P _115316).
Proof. exact (fun_ext (fun s : type1114 A B C P => @lem8405191 A B C P _115316 s)). Qed.
Lemma lem8405193 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A))). Qed.
Lemma lem8405194 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2636 A B C P _115316) = (term2627 A B C P _115316).
Proof. exact (MK_COMB (@lem8405193 A B C P) (@lem8405192 A B C P _115316)). Qed.
Lemma lem8405195 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8405196 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2637 A B C P _115316) = (term2628 A B C P _115316).
Proof. exact (MK_COMB (@lem8405195) (@lem8405194 A B C P _115316)). Qed.
Lemma lem8405197 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2444 A B C P _115316) = (term2444 A B C P _115316).
Proof. exact (eq_refl (term2444 A B C P _115316)). Qed.
Lemma lem8405198 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2632 A B C P _115316) = (term2629 A B C P _115316).
Proof. exact (MK_COMB (@lem8405196 A B C P _115316) (@lem8405197 A B C P _115316)). Qed.
Lemma lem8405199 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8405200 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2638 A B C P _115316) = (term2639 A B C P _115316).
Proof. exact (MK_COMB (@lem8405199) (@lem8405198 A B C P _115316)). Qed.
Lemma lem8405201 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) : (term2634 A B C P _115316 s) = (term2625 A B C P _115316 s).
Proof. exact (eq_refl (term2634 A B C P _115316 s)). Qed.
Lemma lem8405202 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8405203 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) : (term2640 A B C P _115316 s) = (term2641 A B C P _115316 s).
Proof. exact (MK_COMB (@lem8405202) (@lem8405201 A B C P _115316 s)). Qed.
Lemma lem8405204 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2444 A B C P _115316) = (term2444 A B C P _115316).
Proof. exact (eq_refl (term2444 A B C P _115316)). Qed.
Lemma lem8405205 {A B C P : Type'} (s : type1114 A B C P) (_115316 : type1115 A B C P) : (term2642 A B C P s _115316) = (term2643 A B C P s _115316).
Proof. exact (MK_COMB (@lem8405203 A B C P _115316 s) (@lem8405204 A B C P _115316)). Qed.
Lemma lem8405206 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2644 A B C P _115316) = (term2645 A B C P _115316).
Proof. exact (fun_ext (fun s : type1114 A B C P => @lem8405205 A B C P s _115316)). Qed.
Lemma lem8405207 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A))). Qed.
Lemma lem8405208 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2633 A B C P _115316) = (term2646 A B C P _115316).
Proof. exact (MK_COMB (@lem8405207 A B C P) (@lem8405206 A B C P _115316)). Qed.
Lemma lem8405209 {A B C P : Type'} (_115316 : type1115 A B C P) : ((term2632 A B C P _115316) = (term2633 A B C P _115316)) = ((term2629 A B C P _115316) = (term2646 A B C P _115316)).
Proof. exact (MK_COMB (@lem8405200 A B C P _115316) (@lem8405208 A B C P _115316)). Qed.
Lemma lem8405210 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2629 A B C P _115316) = (term2646 A B C P _115316).
Proof. exact (EQ_MP (@lem8405209 A B C P _115316) (@lem8405190 A B C P _115316)). Qed.
Lemma lem8405212 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1332 A P Q) = (term1333 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8405213 {A B C P : Type'} (P' : type273 A B C P) (Q : Prop) : (term2647 A B C P P' Q) = (term2648 A B C P P' Q).
Proof. exact (@lem8405212 (type1113 A B C P) P' Q). Qed.
Lemma lem8405214 {A B C P : Type'} (s : type1114 A B C P) (_115316 : type1115 A B C P) : (term2649 A B C P s _115316) = (term2650 A B C P s _115316).
Proof. exact (@lem8405213 A B C P (term2624 A B C P _115316 s) (term2444 A B C P _115316)). Qed.
Lemma lem8405215 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) (t : type1113 A B C P) : (term2651 A B C P _115316 s t) = (term2622 A B C P _115316 s t).
Proof. exact (eq_refl (term2651 A B C P _115316 s t)). Qed.
Lemma lem8405216 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) : (term2652 A B C P _115316 s) = (term2624 A B C P _115316 s).
Proof. exact (fun_ext (fun t : type1113 A B C P => @lem8405215 A B C P _115316 s t)). Qed.
Lemma lem8405217 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> C -> P -> B)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> C -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> C -> P -> B))). Qed.
Lemma lem8405218 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) : (term2653 A B C P _115316 s) = (term2625 A B C P _115316 s).
Proof. exact (MK_COMB (@lem8405217 A B C P) (@lem8405216 A B C P _115316 s)). Qed.
Lemma lem8405219 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8405220 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) : (term2654 A B C P _115316 s) = (term2641 A B C P _115316 s).
Proof. exact (MK_COMB (@lem8405219) (@lem8405218 A B C P _115316 s)). Qed.
Lemma lem8405221 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2444 A B C P _115316) = (term2444 A B C P _115316).
Proof. exact (eq_refl (term2444 A B C P _115316)). Qed.
Lemma lem8405222 {A B C P : Type'} (s : type1114 A B C P) (_115316 : type1115 A B C P) : (term2649 A B C P s _115316) = (term2643 A B C P s _115316).
Proof. exact (MK_COMB (@lem8405220 A B C P _115316 s) (@lem8405221 A B C P _115316)). Qed.
Lemma lem8405223 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8405224 {A B C P : Type'} (s : type1114 A B C P) (_115316 : type1115 A B C P) : (term2655 A B C P s _115316) = (term2656 A B C P s _115316).
Proof. exact (MK_COMB (@lem8405223) (@lem8405222 A B C P s _115316)). Qed.
Lemma lem8405225 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) (t : type1113 A B C P) : (term2651 A B C P _115316 s t) = (term2622 A B C P _115316 s t).
Proof. exact (eq_refl (term2651 A B C P _115316 s t)). Qed.
Lemma lem8405226 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8405227 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1114 A B C P) (t : type1113 A B C P) : (term2657 A B C P _115316 s t) = (term2658 A B C P _115316 s t).
Proof. exact (MK_COMB (@lem8405226) (@lem8405225 A B C P _115316 s t)). Qed.
Lemma lem8405228 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2444 A B C P _115316) = (term2444 A B C P _115316).
Proof. exact (eq_refl (term2444 A B C P _115316)). Qed.
Lemma lem8405229 {A B C P : Type'} (s : type1114 A B C P) (t : type1113 A B C P) (_115316 : type1115 A B C P) : (term2659 A B C P s t _115316) = (term2660 A B C P s t _115316).
Proof. exact (MK_COMB (@lem8405227 A B C P _115316 s t) (@lem8405228 A B C P _115316)). Qed.
Lemma lem8405230 {A B C P : Type'} (s : type1114 A B C P) (_115316 : type1115 A B C P) : (term2661 A B C P s _115316) = (term2662 A B C P s _115316).
Proof. exact (fun_ext (fun t : type1113 A B C P => @lem8405229 A B C P s t _115316)). Qed.
Lemma lem8405231 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> C -> P -> B)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> C -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> C -> P -> B))). Qed.
Lemma lem8405232 {A B C P : Type'} (s : type1114 A B C P) (_115316 : type1115 A B C P) : (term2650 A B C P s _115316) = (term2663 A B C P s _115316).
Proof. exact (MK_COMB (@lem8405231 A B C P) (@lem8405230 A B C P s _115316)). Qed.
Lemma lem8405233 {A B C P : Type'} (s : type1114 A B C P) (_115316 : type1115 A B C P) : ((term2649 A B C P s _115316) = (term2650 A B C P s _115316)) = ((term2643 A B C P s _115316) = (term2663 A B C P s _115316)).
Proof. exact (MK_COMB (@lem8405224 A B C P s _115316) (@lem8405232 A B C P s _115316)). Qed.
Lemma lem8405234 {A B C P : Type'} (s : type1114 A B C P) (_115316 : type1115 A B C P) : (term2643 A B C P s _115316) = (term2663 A B C P s _115316).
Proof. exact (EQ_MP (@lem8405233 A B C P s _115316) (@lem8405214 A B C P s _115316)). Qed.
Lemma lem8405235 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2645 A B C P _115316) = (term2664 A B C P _115316).
Proof. exact (fun_ext (fun s : type1114 A B C P => @lem8405234 A B C P s _115316)). Qed.
Lemma lem8405236 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> ((prod (P -> A) (C -> P -> B)) -> Prop) -> P -> A))). Qed.
Lemma lem8405237 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2646 A B C P _115316) = (term2665 A B C P _115316).
Proof. exact (MK_COMB (@lem8405236 A B C P) (@lem8405235 A B C P _115316)). Qed.
Lemma lem8405238 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2629 A B C P _115316) = (term2665 A B C P _115316).
Proof. exact (TRANS (@lem8405210 A B C P _115316) (@lem8405237 A B C P _115316)). Qed.
Lemma lem8405239 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2445 A B C P _115316) = (term2665 A B C P _115316).
Proof. exact (TRANS (@lem8405186 A B C P _115316) (@lem8405238 A B C P _115316)). Qed.
Lemma lem8405240 {A B C P : Type'} (_115316 : type1115 A B C P) : (term2377 A B C P _115316) = (term2665 A B C P _115316).
Proof. exact (TRANS (@lem8404934 A B C P _115316) (@lem8405239 A B C P _115316)). Qed.
Lemma lem8405241 {A B C P : Type'} (_115316 : type1115 A B C P) : (term687 A B C P _115316) = (term2665 A B C P _115316).
Proof. exact (TRANS (@lem8404453 A B C P _115316) (@lem8405240 A B C P _115316)). Qed.
Lemma lem8405242 {A B C P : Type'} (_115316 : type1115 A B C P) (h1 : term687 A B C P _115316) : term2665 A B C P _115316.
Proof. exact (EQ_MP (@lem8405241 A B C P _115316) (@lem8401035 A B C P _115316 h1)). Qed.
Lemma lem8405246 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term361 A C P f clauses s t c) = (term361 A C P f clauses s t c).
Proof. exact (eq_refl (term361 A C P f clauses s t c)). Qed.
Lemma lem8405247 {A C P : Type'} (P' : type766 A C P) : (term2022 A C P P') = (term2023 A C P P').
Proof. exact (@lem18392 (type1475 A C P) P'). Qed.
Lemma lem8405248 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term2024 A C P f clauses s c) = (term2025 A C P f clauses s c).
Proof. exact (@lem8405247 A C P (term362 A C P f clauses s c)). Qed.
Lemma lem8405249 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term2026 A C P f clauses s c t) = (term361 A C P f clauses s t c).
Proof. exact (eq_refl (term2026 A C P f clauses s c t)). Qed.
Lemma lem8405250 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8405252 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term2027 A C P f clauses s c t) = (term2028 A C P f clauses s t c).
Proof. exact (MK_COMB (@lem8405250) (@lem8405249 A C P f clauses s t c)). Qed.
Lemma lem8405253 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term2029 A C P f clauses s c) = (term2030 A C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8405252 A C P f clauses s t c)). Qed.
Lemma lem8405254 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8405255 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term2025 A C P f clauses s c) = (term2031 A C P f clauses s c).
Proof. exact (MK_COMB (@lem8405254 A C P) (@lem8405253 A C P f clauses s c)). Qed.
Lemma lem8405256 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term2024 A C P f clauses s c) = (term2031 A C P f clauses s c).
Proof. exact (TRANS (@lem8405248 A C P f clauses s c) (@lem8405255 A C P f clauses s c)). Qed.
Lemma lem8405257 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term362 A C P f clauses s c) = (term362 A C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8405246 A C P f clauses s t c)). Qed.
Lemma lem8405258 {A C P : Type'} : (@all (C -> P -> A)) = (@all (C -> P -> A)).
Proof. exact (eq_refl (@all (C -> P -> A))). Qed.
Lemma lem8405259 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term363 A C P f clauses s c) = (term363 A C P f clauses s c).
Proof. exact (MK_COMB (@lem8405258 A C P) (@lem8405257 A C P f clauses s c)). Qed.
Lemma lem8405260 {A P : Type'} (P' : type805 A P) : (term2032 A P P') = (term2033 A P P').
Proof. exact (@lem18392 (P -> A) P'). Qed.
Lemma lem8405261 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2034 A C P f clauses c) = (term2035 A C P f clauses c).
Proof. exact (@lem8405260 A P (term364 A C P f clauses c)). Qed.
Lemma lem8405262 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term2036 A C P f clauses c s) = (term363 A C P f clauses s c).
Proof. exact (eq_refl (term2036 A C P f clauses c s)). Qed.
Lemma lem8405263 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8405264 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term2037 A C P f clauses c s) = (term2024 A C P f clauses s c).
Proof. exact (MK_COMB (@lem8405263) (@lem8405262 A C P f clauses s c)). Qed.
Lemma lem8405265 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term2037 A C P f clauses c s) = (term2031 A C P f clauses s c).
Proof. exact (TRANS (@lem8405264 A C P f clauses s c) (@lem8405256 A C P f clauses s c)). Qed.
Lemma lem8405266 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2038 A C P f clauses c) = (term2039 A C P f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8405265 A C P f clauses s c)). Qed.
Lemma lem8405267 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8405268 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2035 A C P f clauses c) = (term2040 A C P f clauses c).
Proof. exact (MK_COMB (@lem8405267 A P) (@lem8405266 A C P f clauses c)). Qed.
Lemma lem8405269 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2034 A C P f clauses c) = (term2040 A C P f clauses c).
Proof. exact (TRANS (@lem8405261 A C P f clauses c) (@lem8405268 A C P f clauses c)). Qed.
Lemma lem8405270 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term364 A C P f clauses c) = (term364 A C P f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8405259 A C P f clauses s c)). Qed.
Lemma lem8405271 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8405272 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term365 A C P f clauses c) = (term365 A C P f clauses c).
Proof. exact (MK_COMB (@lem8405271 A P) (@lem8405270 A C P f clauses c)). Qed.
Lemma lem8405274 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) (f : type1178 A C P) : (term2041 A C P _115315 clauses c f) = (term2041 A C P _115315 clauses c f).
Proof. exact (eq_refl (term2041 A C P _115315 clauses c f)). Qed.
Lemma lem8405275 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2042 A C P _115315 f clauses c) = (term2042 A C P _115315 f clauses c).
Proof. exact (MK_COMB (@lem8405274 A C P _115315 clauses c f) (@lem8405272 A C P f clauses c)). Qed.
Lemma lem8405277 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) (f : type1178 A C P) : (term2043 A C P _115315 clauses c f) = (term2043 A C P _115315 clauses c f).
Proof. exact (eq_refl (term2043 A C P _115315 clauses c f)). Qed.
Lemma lem8405278 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2044 A C P _115315 f clauses c) = (term2045 A C P _115315 f clauses c).
Proof. exact (MK_COMB (@lem8405277 A C P _115315 clauses c f) (@lem8405269 A C P f clauses c)). Qed.
Lemma lem8405279 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8405280 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2046 A C P _115315 f clauses c) = (term2047 A C P _115315 f clauses c).
Proof. exact (MK_COMB (@lem8405279) (@lem8405278 A C P _115315 f clauses c)). Qed.
Lemma lem8405281 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2048 A C P _115315 f clauses c) = (term2049 A C P _115315 f clauses c).
Proof. exact (MK_COMB (@lem8405280 A C P _115315 f clauses c) (@lem8405275 A C P _115315 f clauses c)). Qed.
Lemma lem8405282 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : ((_115315 clauses c f) = (term365 A C P f clauses c)) = (term2048 A C P _115315 f clauses c).
Proof. exact (@lem17784 (_115315 clauses c f) (term365 A C P f clauses c)). Qed.
Lemma lem8405283 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : ((_115315 clauses c f) = (term365 A C P f clauses c)) = (term2049 A C P _115315 f clauses c).
Proof. exact (TRANS (@lem8405282 A C P _115315 f clauses c) (@lem8405281 A C P _115315 f clauses c)). Qed.
Lemma lem8405284 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term594 A C P _115315 clauses c) = (term2050 A C P _115315 clauses c).
Proof. exact (fun_ext (fun f : type1178 A C P => @lem8405283 A C P _115315 f clauses c)). Qed.
Lemma lem8405285 {A C P : Type'} : (@all ((prod (P -> A) (C -> P -> A)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> A)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> A)) -> Prop))). Qed.
Lemma lem8405286 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term595 A C P _115315 clauses c) = (term2051 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8405285 A C P) (@lem8405284 A C P _115315 clauses c)). Qed.
Lemma lem8405287 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term596 A C P _115315 clauses) = (term2052 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8405286 A C P _115315 clauses c)). Qed.
Lemma lem8405288 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8405289 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term597 A C P _115315 clauses) = (term2053 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8405288 C) (@lem8405287 A C P _115315 clauses)). Qed.
Lemma lem8405290 {A C P : Type'} (_115315 : type1092 A C P) : (term598 A C P _115315) = (term2054 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8405289 A C P _115315 clauses)). Qed.
Lemma lem8405291 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8405292 {A C P : Type'} (_115315 : type1092 A C P) : (term599 A C P _115315) = (term2055 A C P _115315).
Proof. exact (MK_COMB (@lem8405291 A C P) (@lem8405290 A C P _115315)). Qed.
Lemma lem8405302 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term1070 A P Q) = (term1071 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem8405303 {A C P : Type'} (P' : type306 A C P) (Q : type306 A C P) : (term2056 A C P P' Q) = (term2057 A C P P' Q).
Proof. exact (@lem8405302 (type1178 A C P) P' Q). Qed.
Lemma lem8405304 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2058 A C P _115315 clauses c) = (term2059 A C P _115315 clauses c).
Proof. exact (@lem8405303 A C P (term2060 A C P _115315 clauses c) (term2061 A C P _115315 clauses c)). Qed.
Lemma lem8405305 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2062 A C P _115315 clauses c f) = (term2045 A C P _115315 f clauses c).
Proof. exact (eq_refl (term2062 A C P _115315 clauses c f)). Qed.
Lemma lem8405306 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8405307 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2063 A C P _115315 clauses c f) = (term2047 A C P _115315 f clauses c).
Proof. exact (MK_COMB (@lem8405306) (@lem8405305 A C P _115315 f clauses c)). Qed.
Lemma lem8405308 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2064 A C P _115315 clauses c f) = (term2042 A C P _115315 f clauses c).
Proof. exact (eq_refl (term2064 A C P _115315 clauses c f)). Qed.
Lemma lem8405309 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2065 A C P _115315 clauses c f) = (term2049 A C P _115315 f clauses c).
Proof. exact (MK_COMB (@lem8405307 A C P _115315 f clauses c) (@lem8405308 A C P _115315 f clauses c)). Qed.
Lemma lem8405310 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2066 A C P _115315 clauses c) = (term2050 A C P _115315 clauses c).
Proof. exact (fun_ext (fun f : type1178 A C P => @lem8405309 A C P _115315 f clauses c)). Qed.
Lemma lem8405311 {A C P : Type'} : (@all ((prod (P -> A) (C -> P -> A)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> A)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> A)) -> Prop))). Qed.
Lemma lem8405312 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2058 A C P _115315 clauses c) = (term2051 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8405311 A C P) (@lem8405310 A C P _115315 clauses c)). Qed.
Lemma lem8405313 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8405314 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2067 A C P _115315 clauses c) = (term2068 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8405313) (@lem8405312 A C P _115315 clauses c)). Qed.
Lemma lem8405315 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2062 A C P _115315 clauses c f) = (term2045 A C P _115315 f clauses c).
Proof. exact (eq_refl (term2062 A C P _115315 clauses c f)). Qed.
Lemma lem8405316 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2069 A C P _115315 clauses c) = (term2060 A C P _115315 clauses c).
Proof. exact (fun_ext (fun f : type1178 A C P => @lem8405315 A C P _115315 f clauses c)). Qed.
Lemma lem8405317 {A C P : Type'} : (@all ((prod (P -> A) (C -> P -> A)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> A)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> A)) -> Prop))). Qed.
Lemma lem8405318 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2070 A C P _115315 clauses c) = (term2071 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8405317 A C P) (@lem8405316 A C P _115315 clauses c)). Qed.
Lemma lem8405319 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8405320 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2072 A C P _115315 clauses c) = (term2073 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8405319) (@lem8405318 A C P _115315 clauses c)). Qed.
Lemma lem8405321 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2064 A C P _115315 clauses c f) = (term2042 A C P _115315 f clauses c).
Proof. exact (eq_refl (term2064 A C P _115315 clauses c f)). Qed.
Lemma lem8405322 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2074 A C P _115315 clauses c) = (term2061 A C P _115315 clauses c).
Proof. exact (fun_ext (fun f : type1178 A C P => @lem8405321 A C P _115315 f clauses c)). Qed.
Lemma lem8405323 {A C P : Type'} : (@all ((prod (P -> A) (C -> P -> A)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> A)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> A)) -> Prop))). Qed.
Lemma lem8405324 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2075 A C P _115315 clauses c) = (term2076 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8405323 A C P) (@lem8405322 A C P _115315 clauses c)). Qed.
Lemma lem8405325 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2059 A C P _115315 clauses c) = (term2077 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8405320 A C P _115315 clauses c) (@lem8405324 A C P _115315 clauses c)). Qed.
Lemma lem8405326 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : ((term2058 A C P _115315 clauses c) = (term2059 A C P _115315 clauses c)) = ((term2051 A C P _115315 clauses c) = (term2077 A C P _115315 clauses c)).
Proof. exact (MK_COMB (@lem8405314 A C P _115315 clauses c) (@lem8405325 A C P _115315 clauses c)). Qed.
Lemma lem8405327 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2051 A C P _115315 clauses c) = (term2077 A C P _115315 clauses c).
Proof. exact (EQ_MP (@lem8405326 A C P _115315 clauses c) (@lem8405304 A C P _115315 clauses c)). Qed.
Lemma lem8405448 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2052 A C P _115315 clauses) = (term2078 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8405327 A C P _115315 clauses c)). Qed.
Lemma lem8405449 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8405450 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2053 A C P _115315 clauses) = (term2079 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8405449 C) (@lem8405448 A C P _115315 clauses)). Qed.
Lemma lem8405452 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term1070 A P Q) = (term1071 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem8405453 {C : Type'} (P : C -> Prop) (Q : C -> Prop) : (term1070 C P Q) = (term1071 C P Q).
Proof. exact (@lem8405452 C P Q). Qed.
Lemma lem8405454 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2080 A C P _115315 clauses) = (term2081 A C P _115315 clauses).
Proof. exact (@lem8405453 C (term2082 A C P _115315 clauses) (term2083 A C P _115315 clauses)). Qed.
Lemma lem8405455 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2084 A C P _115315 clauses c) = (term2071 A C P _115315 clauses c).
Proof. exact (eq_refl (term2084 A C P _115315 clauses c)). Qed.
Lemma lem8405456 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8405457 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2085 A C P _115315 clauses c) = (term2073 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8405456) (@lem8405455 A C P _115315 clauses c)). Qed.
Lemma lem8405458 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2086 A C P _115315 clauses c) = (term2076 A C P _115315 clauses c).
Proof. exact (eq_refl (term2086 A C P _115315 clauses c)). Qed.
Lemma lem8405459 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2087 A C P _115315 clauses c) = (term2077 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8405457 A C P _115315 clauses c) (@lem8405458 A C P _115315 clauses c)). Qed.
Lemma lem8405460 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2088 A C P _115315 clauses) = (term2078 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8405459 A C P _115315 clauses c)). Qed.
Lemma lem8405461 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8405462 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2080 A C P _115315 clauses) = (term2079 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8405461 C) (@lem8405460 A C P _115315 clauses)). Qed.
Lemma lem8405463 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8405464 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2089 A C P _115315 clauses) = (term2090 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8405463) (@lem8405462 A C P _115315 clauses)). Qed.
Lemma lem8405465 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2084 A C P _115315 clauses c) = (term2071 A C P _115315 clauses c).
Proof. exact (eq_refl (term2084 A C P _115315 clauses c)). Qed.
Lemma lem8405466 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2091 A C P _115315 clauses) = (term2082 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8405465 A C P _115315 clauses c)). Qed.
Lemma lem8405467 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8405468 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2092 A C P _115315 clauses) = (term2093 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8405467 C) (@lem8405466 A C P _115315 clauses)). Qed.
Lemma lem8405469 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8405470 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2094 A C P _115315 clauses) = (term2095 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8405469) (@lem8405468 A C P _115315 clauses)). Qed.
Lemma lem8405471 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2086 A C P _115315 clauses c) = (term2076 A C P _115315 clauses c).
Proof. exact (eq_refl (term2086 A C P _115315 clauses c)). Qed.
Lemma lem8405472 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2096 A C P _115315 clauses) = (term2083 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8405471 A C P _115315 clauses c)). Qed.
Lemma lem8405473 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8405474 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2097 A C P _115315 clauses) = (term2098 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8405473 C) (@lem8405472 A C P _115315 clauses)). Qed.
Lemma lem8405475 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2081 A C P _115315 clauses) = (term2099 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8405470 A C P _115315 clauses) (@lem8405474 A C P _115315 clauses)). Qed.
Lemma lem8405476 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : ((term2080 A C P _115315 clauses) = (term2081 A C P _115315 clauses)) = ((term2079 A C P _115315 clauses) = (term2099 A C P _115315 clauses)).
Proof. exact (MK_COMB (@lem8405464 A C P _115315 clauses) (@lem8405475 A C P _115315 clauses)). Qed.
Lemma lem8405477 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2079 A C P _115315 clauses) = (term2099 A C P _115315 clauses).
Proof. exact (EQ_MP (@lem8405476 A C P _115315 clauses) (@lem8405454 A C P _115315 clauses)). Qed.
Lemma lem8405606 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2053 A C P _115315 clauses) = (term2099 A C P _115315 clauses).
Proof. exact (TRANS (@lem8405450 A C P _115315 clauses) (@lem8405477 A C P _115315 clauses)). Qed.
Lemma lem8405607 {A C P : Type'} (_115315 : type1092 A C P) : (term2054 A C P _115315) = (term2100 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8405606 A C P _115315 clauses)). Qed.
Lemma lem8405608 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8405609 {A C P : Type'} (_115315 : type1092 A C P) : (term2055 A C P _115315) = (term2101 A C P _115315).
Proof. exact (MK_COMB (@lem8405608 A C P) (@lem8405607 A C P _115315)). Qed.
Lemma lem8405611 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term1070 A P Q) = (term1071 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem8405612 {A C P : Type'} (P' : type1096 A C P) (Q : type1096 A C P) : (term2102 A C P P' Q) = (term2103 A C P P' Q).
Proof. exact (@lem8405611 (type1636 A C P) P' Q). Qed.
Lemma lem8405613 {A C P : Type'} (_115315 : type1092 A C P) : (term2104 A C P _115315) = (term2105 A C P _115315).
Proof. exact (@lem8405612 A C P (term2106 A C P _115315) (term2107 A C P _115315)). Qed.
Lemma lem8405614 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2108 A C P _115315 clauses) = (term2093 A C P _115315 clauses).
Proof. exact (eq_refl (term2108 A C P _115315 clauses)). Qed.
Lemma lem8405615 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8405616 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2109 A C P _115315 clauses) = (term2095 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8405615) (@lem8405614 A C P _115315 clauses)). Qed.
Lemma lem8405617 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2110 A C P _115315 clauses) = (term2098 A C P _115315 clauses).
Proof. exact (eq_refl (term2110 A C P _115315 clauses)). Qed.
Lemma lem8405618 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2111 A C P _115315 clauses) = (term2099 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8405616 A C P _115315 clauses) (@lem8405617 A C P _115315 clauses)). Qed.
Lemma lem8405619 {A C P : Type'} (_115315 : type1092 A C P) : (term2112 A C P _115315) = (term2100 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8405618 A C P _115315 clauses)). Qed.
Lemma lem8405620 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8405621 {A C P : Type'} (_115315 : type1092 A C P) : (term2104 A C P _115315) = (term2101 A C P _115315).
Proof. exact (MK_COMB (@lem8405620 A C P) (@lem8405619 A C P _115315)). Qed.
Lemma lem8405622 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8405623 {A C P : Type'} (_115315 : type1092 A C P) : (term2113 A C P _115315) = (term2114 A C P _115315).
Proof. exact (MK_COMB (@lem8405622) (@lem8405621 A C P _115315)). Qed.
Lemma lem8405624 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2108 A C P _115315 clauses) = (term2093 A C P _115315 clauses).
Proof. exact (eq_refl (term2108 A C P _115315 clauses)). Qed.
Lemma lem8405625 {A C P : Type'} (_115315 : type1092 A C P) : (term2115 A C P _115315) = (term2106 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8405624 A C P _115315 clauses)). Qed.
Lemma lem8405626 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8405627 {A C P : Type'} (_115315 : type1092 A C P) : (term2116 A C P _115315) = (term2117 A C P _115315).
Proof. exact (MK_COMB (@lem8405626 A C P) (@lem8405625 A C P _115315)). Qed.
Lemma lem8405628 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8405629 {A C P : Type'} (_115315 : type1092 A C P) : (term2118 A C P _115315) = (term2119 A C P _115315).
Proof. exact (MK_COMB (@lem8405628) (@lem8405627 A C P _115315)). Qed.
Lemma lem8405630 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2110 A C P _115315 clauses) = (term2098 A C P _115315 clauses).
Proof. exact (eq_refl (term2110 A C P _115315 clauses)). Qed.
Lemma lem8405631 {A C P : Type'} (_115315 : type1092 A C P) : (term2120 A C P _115315) = (term2107 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8405630 A C P _115315 clauses)). Qed.
Lemma lem8405632 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8405633 {A C P : Type'} (_115315 : type1092 A C P) : (term2121 A C P _115315) = (term2122 A C P _115315).
Proof. exact (MK_COMB (@lem8405632 A C P) (@lem8405631 A C P _115315)). Qed.
Lemma lem8405634 {A C P : Type'} (_115315 : type1092 A C P) : (term2105 A C P _115315) = (term2123 A C P _115315).
Proof. exact (MK_COMB (@lem8405629 A C P _115315) (@lem8405633 A C P _115315)). Qed.
Lemma lem8405635 {A C P : Type'} (_115315 : type1092 A C P) : ((term2104 A C P _115315) = (term2105 A C P _115315)) = ((term2101 A C P _115315) = (term2123 A C P _115315)).
Proof. exact (MK_COMB (@lem8405623 A C P _115315) (@lem8405634 A C P _115315)). Qed.
Lemma lem8405636 {A C P : Type'} (_115315 : type1092 A C P) : (term2101 A C P _115315) = (term2123 A C P _115315).
Proof. exact (EQ_MP (@lem8405635 A C P _115315) (@lem8405613 A C P _115315)). Qed.
Lemma lem8405773 {A C P : Type'} (_115315 : type1092 A C P) : (term2055 A C P _115315) = (term2123 A C P _115315).
Proof. exact (TRANS (@lem8405609 A C P _115315) (@lem8405636 A C P _115315)). Qed.
Lemma lem8405775 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1140 A P Q) = (term1141 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8405776 {A P : Type'} (P' : Prop) (Q : type805 A P) : (term2124 A P P' Q) = (term2125 A P P' Q).
Proof. exact (@lem8405775 (P -> A) P' Q). Qed.
Lemma lem8405777 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2126 A C P _115315 f clauses c) = (term2127 A C P _115315 f clauses c).
Proof. exact (@lem8405776 A P (_115315 clauses c f) (term2039 A C P f clauses c)). Qed.
Lemma lem8405778 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term2128 A C P f clauses c s) = (term2031 A C P f clauses s c).
Proof. exact (eq_refl (term2128 A C P f clauses c s)). Qed.
Lemma lem8405779 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2129 A C P f clauses c) = (term2039 A C P f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8405778 A C P f clauses s c)). Qed.
Lemma lem8405780 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8405781 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2130 A C P f clauses c) = (term2040 A C P f clauses c).
Proof. exact (MK_COMB (@lem8405780 A P) (@lem8405779 A C P f clauses c)). Qed.
Lemma lem8405782 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) (f : type1178 A C P) : (term2043 A C P _115315 clauses c f) = (term2043 A C P _115315 clauses c f).
Proof. exact (eq_refl (term2043 A C P _115315 clauses c f)). Qed.
Lemma lem8405783 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2126 A C P _115315 f clauses c) = (term2045 A C P _115315 f clauses c).
Proof. exact (MK_COMB (@lem8405782 A C P _115315 clauses c f) (@lem8405781 A C P f clauses c)). Qed.
Lemma lem8405784 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8405785 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2131 A C P _115315 f clauses c) = (term2132 A C P _115315 f clauses c).
Proof. exact (MK_COMB (@lem8405784) (@lem8405783 A C P _115315 f clauses c)). Qed.
Lemma lem8405786 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term2128 A C P f clauses c s) = (term2031 A C P f clauses s c).
Proof. exact (eq_refl (term2128 A C P f clauses c s)). Qed.
Lemma lem8405787 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) (f : type1178 A C P) : (term2043 A C P _115315 clauses c f) = (term2043 A C P _115315 clauses c f).
Proof. exact (eq_refl (term2043 A C P _115315 clauses c f)). Qed.
Lemma lem8405788 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term2133 A C P _115315 f clauses c s) = (term2134 A C P _115315 f clauses s c).
Proof. exact (MK_COMB (@lem8405787 A C P _115315 clauses c f) (@lem8405786 A C P f clauses s c)). Qed.
Lemma lem8405789 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2135 A C P _115315 f clauses c) = (term2136 A C P _115315 f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8405788 A C P _115315 f clauses s c)). Qed.
Lemma lem8405790 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8405791 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2127 A C P _115315 f clauses c) = (term2137 A C P _115315 f clauses c).
Proof. exact (MK_COMB (@lem8405790 A P) (@lem8405789 A C P _115315 f clauses c)). Qed.
Lemma lem8405792 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : ((term2126 A C P _115315 f clauses c) = (term2127 A C P _115315 f clauses c)) = ((term2045 A C P _115315 f clauses c) = (term2137 A C P _115315 f clauses c)).
Proof. exact (MK_COMB (@lem8405785 A C P _115315 f clauses c) (@lem8405791 A C P _115315 f clauses c)). Qed.
Lemma lem8405793 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2045 A C P _115315 f clauses c) = (term2137 A C P _115315 f clauses c).
Proof. exact (EQ_MP (@lem8405792 A C P _115315 f clauses c) (@lem8405777 A C P _115315 f clauses c)). Qed.
Lemma lem8405795 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1140 A P Q) = (term1141 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8405796 {A C P : Type'} (P' : Prop) (Q : type766 A C P) : (term2138 A C P P' Q) = (term2139 A C P P' Q).
Proof. exact (@lem8405795 (type1475 A C P) P' Q). Qed.
Lemma lem8405797 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term2140 A C P _115315 f clauses s c) = (term2141 A C P _115315 f clauses s c).
Proof. exact (@lem8405796 A C P (_115315 clauses c f) (term2030 A C P f clauses s c)). Qed.
Lemma lem8405798 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term2142 A C P f clauses s c t) = (term2028 A C P f clauses s t c).
Proof. exact (eq_refl (term2142 A C P f clauses s c t)). Qed.
Lemma lem8405799 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term2143 A C P f clauses s c) = (term2030 A C P f clauses s c).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8405798 A C P f clauses s t c)). Qed.
Lemma lem8405800 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8405801 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term2144 A C P f clauses s c) = (term2031 A C P f clauses s c).
Proof. exact (MK_COMB (@lem8405800 A C P) (@lem8405799 A C P f clauses s c)). Qed.
Lemma lem8405802 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) (f : type1178 A C P) : (term2043 A C P _115315 clauses c f) = (term2043 A C P _115315 clauses c f).
Proof. exact (eq_refl (term2043 A C P _115315 clauses c f)). Qed.
Lemma lem8405803 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term2140 A C P _115315 f clauses s c) = (term2134 A C P _115315 f clauses s c).
Proof. exact (MK_COMB (@lem8405802 A C P _115315 clauses c f) (@lem8405801 A C P f clauses s c)). Qed.
Lemma lem8405804 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8405805 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term2145 A C P _115315 f clauses s c) = (term2146 A C P _115315 f clauses s c).
Proof. exact (MK_COMB (@lem8405804) (@lem8405803 A C P _115315 f clauses s c)). Qed.
Lemma lem8405806 {A C P : Type'} (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term2142 A C P f clauses s c t) = (term2028 A C P f clauses s t c).
Proof. exact (eq_refl (term2142 A C P f clauses s c t)). Qed.
Lemma lem8405807 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) (f : type1178 A C P) : (term2043 A C P _115315 clauses c f) = (term2043 A C P _115315 clauses c f).
Proof. exact (eq_refl (term2043 A C P _115315 clauses c f)). Qed.
Lemma lem8405808 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term2147 A C P _115315 f clauses s c t) = (term2148 A C P _115315 f clauses s t c).
Proof. exact (MK_COMB (@lem8405807 A C P _115315 clauses c f) (@lem8405806 A C P f clauses s t c)). Qed.
Lemma lem8405809 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term2149 A C P _115315 f clauses s c) = (term2150 A C P _115315 f clauses s c).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8405808 A C P _115315 f clauses s t c)). Qed.
Lemma lem8405810 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8405811 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term2141 A C P _115315 f clauses s c) = (term2151 A C P _115315 f clauses s c).
Proof. exact (MK_COMB (@lem8405810 A C P) (@lem8405809 A C P _115315 f clauses s c)). Qed.
Lemma lem8405812 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : ((term2140 A C P _115315 f clauses s c) = (term2141 A C P _115315 f clauses s c)) = ((term2134 A C P _115315 f clauses s c) = (term2151 A C P _115315 f clauses s c)).
Proof. exact (MK_COMB (@lem8405805 A C P _115315 f clauses s c) (@lem8405811 A C P _115315 f clauses s c)). Qed.
Lemma lem8405813 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term2134 A C P _115315 f clauses s c) = (term2151 A C P _115315 f clauses s c).
Proof. exact (EQ_MP (@lem8405812 A C P _115315 f clauses s c) (@lem8405797 A C P _115315 f clauses s c)). Qed.
Lemma lem8405814 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2136 A C P _115315 f clauses c) = (term2152 A C P _115315 f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8405813 A C P _115315 f clauses s c)). Qed.
Lemma lem8405815 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8405816 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2137 A C P _115315 f clauses c) = (term2153 A C P _115315 f clauses c).
Proof. exact (MK_COMB (@lem8405815 A P) (@lem8405814 A C P _115315 f clauses c)). Qed.
Lemma lem8405817 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2045 A C P _115315 f clauses c) = (term2153 A C P _115315 f clauses c).
Proof. exact (TRANS (@lem8405793 A C P _115315 f clauses c) (@lem8405816 A C P _115315 f clauses c)). Qed.
Lemma lem8405818 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2060 A C P _115315 clauses c) = (term2154 A C P _115315 clauses c).
Proof. exact (fun_ext (fun f : type1178 A C P => @lem8405817 A C P _115315 f clauses c)). Qed.
Lemma lem8405819 {A C P : Type'} : (@all ((prod (P -> A) (C -> P -> A)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> A)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> A)) -> Prop))). Qed.
Lemma lem8405820 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2071 A C P _115315 clauses c) = (term2155 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8405819 A C P) (@lem8405818 A C P _115315 clauses c)). Qed.
Lemma lem8405822 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8405823 {A C P : Type'} (P' : type303 A C P) : (term2156 A C P P') = (term2157 A C P P').
Proof. exact (@lem8405822 (type1178 A C P) (P -> A) P'). Qed.
Lemma lem8405824 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2158 A C P _115315 clauses c) = (term2159 A C P _115315 clauses c).
Proof. exact (@lem8405823 A C P (term2160 A C P _115315 clauses c)). Qed.
Lemma lem8405825 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2161 A C P _115315 clauses c f) = (term2152 A C P _115315 f clauses c).
Proof. exact (eq_refl (term2161 A C P _115315 clauses c f)). Qed.
Lemma lem8405826 {A P : Type'} (s : P -> A) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8405827 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) (s : P -> A) : (term2162 A C P _115315 clauses c f s) = (term2163 A C P _115315 f clauses c s).
Proof. exact (MK_COMB (@lem8405825 A C P _115315 f clauses c) (@lem8405826 A P s)). Qed.
Lemma lem8405828 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term2163 A C P _115315 f clauses c s) = (term2151 A C P _115315 f clauses s c).
Proof. exact (eq_refl (term2163 A C P _115315 f clauses c s)). Qed.
Lemma lem8405829 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (s : P -> A) (c : C) : (term2162 A C P _115315 clauses c f s) = (term2151 A C P _115315 f clauses s c).
Proof. exact (TRANS (@lem8405827 A C P _115315 f clauses c s) (@lem8405828 A C P _115315 f clauses s c)). Qed.
Lemma lem8405830 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2164 A C P _115315 clauses c f) = (term2152 A C P _115315 f clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8405829 A C P _115315 f clauses s c)). Qed.
Lemma lem8405831 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8405832 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2165 A C P _115315 clauses c f) = (term2153 A C P _115315 f clauses c).
Proof. exact (MK_COMB (@lem8405831 A P) (@lem8405830 A C P _115315 f clauses c)). Qed.
Lemma lem8405833 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2166 A C P _115315 clauses c) = (term2154 A C P _115315 clauses c).
Proof. exact (fun_ext (fun f : type1178 A C P => @lem8405832 A C P _115315 f clauses c)). Qed.
Lemma lem8405834 {A C P : Type'} : (@all ((prod (P -> A) (C -> P -> A)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> A)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> A)) -> Prop))). Qed.
Lemma lem8405835 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2158 A C P _115315 clauses c) = (term2155 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8405834 A C P) (@lem8405833 A C P _115315 clauses c)). Qed.
Lemma lem8405836 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8405837 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2167 A C P _115315 clauses c) = (term2168 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8405836) (@lem8405835 A C P _115315 clauses c)). Qed.
Lemma lem8405838 {A C P : Type'} (_115315 : type1092 A C P) (f : type1178 A C P) (clauses : type1636 A C P) (c : C) : (term2161 A C P _115315 clauses c f) = (term2152 A C P _115315 f clauses c).
Proof. exact (eq_refl (term2161 A C P _115315 clauses c f)). Qed.
Lemma lem8405839 {A C P : Type'} (s : type305 A C P) (f : type1178 A C P) : (s f) = (s f).
Proof. exact (eq_refl (s f)). Qed.
Lemma lem8405840 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) (s : type305 A C P) (f : type1178 A C P) : (term2169 A C P _115315 clauses c s f) = (term2170 A C P _115315 clauses c s f).
Proof. exact (MK_COMB (@lem8405838 A C P _115315 f clauses c) (@lem8405839 A C P s f)). Qed.
Lemma lem8405841 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (f : type1178 A C P) (c : C) : (term2170 A C P _115315 clauses c s f) = (term2171 A C P _115315 clauses s f c).
Proof. exact (eq_refl (term2170 A C P _115315 clauses c s f)). Qed.
Lemma lem8405842 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (f : type1178 A C P) (c : C) : (term2169 A C P _115315 clauses c s f) = (term2171 A C P _115315 clauses s f c).
Proof. exact (TRANS (@lem8405840 A C P _115315 clauses c s f) (@lem8405841 A C P _115315 clauses s f c)). Qed.
Lemma lem8405843 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (c : C) : (term2172 A C P _115315 clauses c s) = (term2173 A C P _115315 clauses s c).
Proof. exact (fun_ext (fun f : type1178 A C P => @lem8405842 A C P _115315 clauses s f c)). Qed.
Lemma lem8405844 {A C P : Type'} : (@all ((prod (P -> A) (C -> P -> A)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> A)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> A)) -> Prop))). Qed.
Lemma lem8405845 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (c : C) : (term2174 A C P _115315 clauses c s) = (term2175 A C P _115315 clauses s c).
Proof. exact (MK_COMB (@lem8405844 A C P) (@lem8405843 A C P _115315 clauses s c)). Qed.
Lemma lem8405846 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2176 A C P _115315 clauses c) = (term2177 A C P _115315 clauses c).
Proof. exact (fun_ext (fun s : type305 A C P => @lem8405845 A C P _115315 clauses s c)). Qed.
Lemma lem8405847 {A C P : Type'} : (@ex (((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A)) = (@ex (((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex (((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A))). Qed.
Lemma lem8405848 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2159 A C P _115315 clauses c) = (term2178 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8405847 A C P) (@lem8405846 A C P _115315 clauses c)). Qed.
Lemma lem8405849 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : ((term2158 A C P _115315 clauses c) = (term2159 A C P _115315 clauses c)) = ((term2155 A C P _115315 clauses c) = (term2178 A C P _115315 clauses c)).
Proof. exact (MK_COMB (@lem8405837 A C P _115315 clauses c) (@lem8405848 A C P _115315 clauses c)). Qed.
Lemma lem8405850 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2155 A C P _115315 clauses c) = (term2178 A C P _115315 clauses c).
Proof. exact (EQ_MP (@lem8405849 A C P _115315 clauses c) (@lem8405824 A C P _115315 clauses c)). Qed.
Lemma lem8405852 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8405853 {A C P : Type'} (P' : type302 A C P) : (term2179 A C P P') = (term2180 A C P P').
Proof. exact (@lem8405852 (type1178 A C P) (type1475 A C P) P'). Qed.
Lemma lem8405854 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (c : C) : (term2181 A C P _115315 clauses s c) = (term2182 A C P _115315 clauses s c).
Proof. exact (@lem8405853 A C P (term2183 A C P _115315 clauses s c)). Qed.
Lemma lem8405855 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (f : type1178 A C P) (c : C) : (term2184 A C P _115315 clauses s c f) = (term2185 A C P _115315 clauses s f c).
Proof. exact (eq_refl (term2184 A C P _115315 clauses s c f)). Qed.
Lemma lem8405856 {A C P : Type'} (t : type1475 A C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8405857 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (f : type1178 A C P) (c : C) (t : type1475 A C P) : (term2186 A C P _115315 clauses s c f t) = (term2187 A C P _115315 clauses s f c t).
Proof. exact (MK_COMB (@lem8405855 A C P _115315 clauses s f c) (@lem8405856 A C P t)). Qed.
Lemma lem8405858 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (f : type1178 A C P) (t : type1475 A C P) (c : C) : (term2187 A C P _115315 clauses s f c t) = (term2188 A C P _115315 clauses s f t c).
Proof. exact (eq_refl (term2187 A C P _115315 clauses s f c t)). Qed.
Lemma lem8405859 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (f : type1178 A C P) (t : type1475 A C P) (c : C) : (term2186 A C P _115315 clauses s c f t) = (term2188 A C P _115315 clauses s f t c).
Proof. exact (TRANS (@lem8405857 A C P _115315 clauses s f c t) (@lem8405858 A C P _115315 clauses s f t c)). Qed.
Lemma lem8405860 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (f : type1178 A C P) (c : C) : (term2189 A C P _115315 clauses s c f) = (term2185 A C P _115315 clauses s f c).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8405859 A C P _115315 clauses s f t c)). Qed.
Lemma lem8405861 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8405862 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (f : type1178 A C P) (c : C) : (term2190 A C P _115315 clauses s c f) = (term2171 A C P _115315 clauses s f c).
Proof. exact (MK_COMB (@lem8405861 A C P) (@lem8405860 A C P _115315 clauses s f c)). Qed.
Lemma lem8405863 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (c : C) : (term2191 A C P _115315 clauses s c) = (term2173 A C P _115315 clauses s c).
Proof. exact (fun_ext (fun f : type1178 A C P => @lem8405862 A C P _115315 clauses s f c)). Qed.
Lemma lem8405864 {A C P : Type'} : (@all ((prod (P -> A) (C -> P -> A)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> A)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> A)) -> Prop))). Qed.
Lemma lem8405865 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (c : C) : (term2181 A C P _115315 clauses s c) = (term2175 A C P _115315 clauses s c).
Proof. exact (MK_COMB (@lem8405864 A C P) (@lem8405863 A C P _115315 clauses s c)). Qed.
Lemma lem8405866 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8405867 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (c : C) : (term2192 A C P _115315 clauses s c) = (term2193 A C P _115315 clauses s c).
Proof. exact (MK_COMB (@lem8405866) (@lem8405865 A C P _115315 clauses s c)). Qed.
Lemma lem8405868 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (f : type1178 A C P) (c : C) : (term2184 A C P _115315 clauses s c f) = (term2185 A C P _115315 clauses s f c).
Proof. exact (eq_refl (term2184 A C P _115315 clauses s c f)). Qed.
Lemma lem8405869 {A C P : Type'} (t : type304 A C P) (f : type1178 A C P) : (t f) = (t f).
Proof. exact (eq_refl (t f)). Qed.
Lemma lem8405870 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (c : C) (t : type304 A C P) (f : type1178 A C P) : (term2194 A C P _115315 clauses s c t f) = (term2195 A C P _115315 clauses s c t f).
Proof. exact (MK_COMB (@lem8405868 A C P _115315 clauses s f c) (@lem8405869 A C P t f)). Qed.
Lemma lem8405871 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (t : type304 A C P) (f : type1178 A C P) (c : C) : (term2195 A C P _115315 clauses s c t f) = (term2196 A C P _115315 clauses s t f c).
Proof. exact (eq_refl (term2195 A C P _115315 clauses s c t f)). Qed.
Lemma lem8405872 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (t : type304 A C P) (f : type1178 A C P) (c : C) : (term2194 A C P _115315 clauses s c t f) = (term2196 A C P _115315 clauses s t f c).
Proof. exact (TRANS (@lem8405870 A C P _115315 clauses s c t f) (@lem8405871 A C P _115315 clauses s t f c)). Qed.
Lemma lem8405873 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (t : type304 A C P) (c : C) : (term2197 A C P _115315 clauses s c t) = (term2198 A C P _115315 clauses s t c).
Proof. exact (fun_ext (fun f : type1178 A C P => @lem8405872 A C P _115315 clauses s t f c)). Qed.
Lemma lem8405874 {A C P : Type'} : (@all ((prod (P -> A) (C -> P -> A)) -> Prop)) = (@all ((prod (P -> A) (C -> P -> A)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) (C -> P -> A)) -> Prop))). Qed.
Lemma lem8405875 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (t : type304 A C P) (c : C) : (term2199 A C P _115315 clauses s c t) = (term2200 A C P _115315 clauses s t c).
Proof. exact (MK_COMB (@lem8405874 A C P) (@lem8405873 A C P _115315 clauses s t c)). Qed.
Lemma lem8405876 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (c : C) : (term2201 A C P _115315 clauses s c) = (term2202 A C P _115315 clauses s c).
Proof. exact (fun_ext (fun t : type304 A C P => @lem8405875 A C P _115315 clauses s t c)). Qed.
Lemma lem8405877 {A C P : Type'} : (@ex (((prod (P -> A) (C -> P -> A)) -> Prop) -> C -> P -> A)) = (@ex (((prod (P -> A) (C -> P -> A)) -> Prop) -> C -> P -> A)).
Proof. exact (eq_refl (@ex (((prod (P -> A) (C -> P -> A)) -> Prop) -> C -> P -> A))). Qed.
Lemma lem8405878 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (c : C) : (term2182 A C P _115315 clauses s c) = (term2203 A C P _115315 clauses s c).
Proof. exact (MK_COMB (@lem8405877 A C P) (@lem8405876 A C P _115315 clauses s c)). Qed.
Lemma lem8405879 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (c : C) : ((term2181 A C P _115315 clauses s c) = (term2182 A C P _115315 clauses s c)) = ((term2175 A C P _115315 clauses s c) = (term2203 A C P _115315 clauses s c)).
Proof. exact (MK_COMB (@lem8405867 A C P _115315 clauses s c) (@lem8405878 A C P _115315 clauses s c)). Qed.
Lemma lem8405880 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (c : C) : (term2175 A C P _115315 clauses s c) = (term2203 A C P _115315 clauses s c).
Proof. exact (EQ_MP (@lem8405879 A C P _115315 clauses s c) (@lem8405854 A C P _115315 clauses s c)). Qed.
Lemma lem8405881 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2177 A C P _115315 clauses c) = (term2204 A C P _115315 clauses c).
Proof. exact (fun_ext (fun s : type305 A C P => @lem8405880 A C P _115315 clauses s c)). Qed.
Lemma lem8405882 {A C P : Type'} : (@ex (((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A)) = (@ex (((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex (((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A))). Qed.
Lemma lem8405883 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2178 A C P _115315 clauses c) = (term2205 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8405882 A C P) (@lem8405881 A C P _115315 clauses c)). Qed.
Lemma lem8405884 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2155 A C P _115315 clauses c) = (term2205 A C P _115315 clauses c).
Proof. exact (TRANS (@lem8405850 A C P _115315 clauses c) (@lem8405883 A C P _115315 clauses c)). Qed.
Lemma lem8405885 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2071 A C P _115315 clauses c) = (term2205 A C P _115315 clauses c).
Proof. exact (TRANS (@lem8405820 A C P _115315 clauses c) (@lem8405884 A C P _115315 clauses c)). Qed.
Lemma lem8405886 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2082 A C P _115315 clauses) = (term2206 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8405885 A C P _115315 clauses c)). Qed.
Lemma lem8405887 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8405888 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2093 A C P _115315 clauses) = (term2207 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8405887 C) (@lem8405886 A C P _115315 clauses)). Qed.
Lemma lem8405890 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8405891 {A C P : Type'} (P' : type1434 A C P) : (term2208 A C P P') = (term2209 A C P P').
Proof. exact (@lem8405890 C (type305 A C P) P'). Qed.
Lemma lem8405892 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2210 A C P _115315 clauses) = (term2211 A C P _115315 clauses).
Proof. exact (@lem8405891 A C P (term2212 A C P _115315 clauses)). Qed.
Lemma lem8405893 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2213 A C P _115315 clauses c) = (term2204 A C P _115315 clauses c).
Proof. exact (eq_refl (term2213 A C P _115315 clauses c)). Qed.
Lemma lem8405894 {A C P : Type'} (s : type305 A C P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8405895 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) (s : type305 A C P) : (term2214 A C P _115315 clauses c s) = (term2215 A C P _115315 clauses c s).
Proof. exact (MK_COMB (@lem8405893 A C P _115315 clauses c) (@lem8405894 A C P s)). Qed.
Lemma lem8405896 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (c : C) : (term2215 A C P _115315 clauses c s) = (term2203 A C P _115315 clauses s c).
Proof. exact (eq_refl (term2215 A C P _115315 clauses c s)). Qed.
Lemma lem8405897 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type305 A C P) (c : C) : (term2214 A C P _115315 clauses c s) = (term2203 A C P _115315 clauses s c).
Proof. exact (TRANS (@lem8405895 A C P _115315 clauses c s) (@lem8405896 A C P _115315 clauses s c)). Qed.
Lemma lem8405898 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2216 A C P _115315 clauses c) = (term2204 A C P _115315 clauses c).
Proof. exact (fun_ext (fun s : type305 A C P => @lem8405897 A C P _115315 clauses s c)). Qed.
Lemma lem8405899 {A C P : Type'} : (@ex (((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A)) = (@ex (((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex (((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A))). Qed.
Lemma lem8405900 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2217 A C P _115315 clauses c) = (term2205 A C P _115315 clauses c).
Proof. exact (MK_COMB (@lem8405899 A C P) (@lem8405898 A C P _115315 clauses c)). Qed.
Lemma lem8405901 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2218 A C P _115315 clauses) = (term2206 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8405900 A C P _115315 clauses c)). Qed.
Lemma lem8405902 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8405903 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2210 A C P _115315 clauses) = (term2207 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8405902 C) (@lem8405901 A C P _115315 clauses)). Qed.
Lemma lem8405904 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8405905 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2219 A C P _115315 clauses) = (term2220 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8405904) (@lem8405903 A C P _115315 clauses)). Qed.
Lemma lem8405906 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (c : C) : (term2213 A C P _115315 clauses c) = (term2204 A C P _115315 clauses c).
Proof. exact (eq_refl (term2213 A C P _115315 clauses c)). Qed.
Lemma lem8405907 {A C P : Type'} (s : type1440 A C P) (c : C) : (s c) = (s c).
Proof. exact (eq_refl (s c)). Qed.
Lemma lem8405908 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) (c : C) : (term2221 A C P _115315 clauses s c) = (term2222 A C P _115315 clauses s c).
Proof. exact (MK_COMB (@lem8405906 A C P _115315 clauses c) (@lem8405907 A C P s c)). Qed.
Lemma lem8405909 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) (c : C) : (term2222 A C P _115315 clauses s c) = (term2223 A C P _115315 clauses s c).
Proof. exact (eq_refl (term2222 A C P _115315 clauses s c)). Qed.
Lemma lem8405910 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) (c : C) : (term2221 A C P _115315 clauses s c) = (term2223 A C P _115315 clauses s c).
Proof. exact (TRANS (@lem8405908 A C P _115315 clauses s c) (@lem8405909 A C P _115315 clauses s c)). Qed.
Lemma lem8405911 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) : (term2224 A C P _115315 clauses s) = (term2225 A C P _115315 clauses s).
Proof. exact (fun_ext (fun c : C => @lem8405910 A C P _115315 clauses s c)). Qed.
Lemma lem8405912 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8405913 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) : (term2226 A C P _115315 clauses s) = (term2227 A C P _115315 clauses s).
Proof. exact (MK_COMB (@lem8405912 C) (@lem8405911 A C P _115315 clauses s)). Qed.
Lemma lem8405914 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2228 A C P _115315 clauses) = (term2229 A C P _115315 clauses).
Proof. exact (fun_ext (fun s : type1440 A C P => @lem8405913 A C P _115315 clauses s)). Qed.
Lemma lem8405915 {A C P : Type'} : (@ex (C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A)) = (@ex (C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex (C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A))). Qed.
Lemma lem8405916 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2211 A C P _115315 clauses) = (term2230 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8405915 A C P) (@lem8405914 A C P _115315 clauses)). Qed.
Lemma lem8405917 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : ((term2210 A C P _115315 clauses) = (term2211 A C P _115315 clauses)) = ((term2207 A C P _115315 clauses) = (term2230 A C P _115315 clauses)).
Proof. exact (MK_COMB (@lem8405905 A C P _115315 clauses) (@lem8405916 A C P _115315 clauses)). Qed.
Lemma lem8405918 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2207 A C P _115315 clauses) = (term2230 A C P _115315 clauses).
Proof. exact (EQ_MP (@lem8405917 A C P _115315 clauses) (@lem8405892 A C P _115315 clauses)). Qed.
Lemma lem8405920 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8405921 {A C P : Type'} (P' : type1433 A C P) : (term2231 A C P P') = (term2232 A C P P').
Proof. exact (@lem8405920 C (type304 A C P) P'). Qed.
Lemma lem8405922 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) : (term2233 A C P _115315 clauses s) = (term2234 A C P _115315 clauses s).
Proof. exact (@lem8405921 A C P (term2235 A C P _115315 clauses s)). Qed.
Lemma lem8405923 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) (c : C) : (term2236 A C P _115315 clauses s c) = (term2237 A C P _115315 clauses s c).
Proof. exact (eq_refl (term2236 A C P _115315 clauses s c)). Qed.
Lemma lem8405924 {A C P : Type'} (t : type304 A C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8405925 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) (c : C) (t : type304 A C P) : (term2238 A C P _115315 clauses s c t) = (term2239 A C P _115315 clauses s c t).
Proof. exact (MK_COMB (@lem8405923 A C P _115315 clauses s c) (@lem8405924 A C P t)). Qed.
Lemma lem8405926 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) (t : type304 A C P) (c : C) : (term2239 A C P _115315 clauses s c t) = (term2240 A C P _115315 clauses s t c).
Proof. exact (eq_refl (term2239 A C P _115315 clauses s c t)). Qed.
Lemma lem8405927 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) (t : type304 A C P) (c : C) : (term2238 A C P _115315 clauses s c t) = (term2240 A C P _115315 clauses s t c).
Proof. exact (TRANS (@lem8405925 A C P _115315 clauses s c t) (@lem8405926 A C P _115315 clauses s t c)). Qed.
Lemma lem8405928 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) (c : C) : (term2241 A C P _115315 clauses s c) = (term2237 A C P _115315 clauses s c).
Proof. exact (fun_ext (fun t : type304 A C P => @lem8405927 A C P _115315 clauses s t c)). Qed.
Lemma lem8405929 {A C P : Type'} : (@ex (((prod (P -> A) (C -> P -> A)) -> Prop) -> C -> P -> A)) = (@ex (((prod (P -> A) (C -> P -> A)) -> Prop) -> C -> P -> A)).
Proof. exact (eq_refl (@ex (((prod (P -> A) (C -> P -> A)) -> Prop) -> C -> P -> A))). Qed.
Lemma lem8405930 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) (c : C) : (term2242 A C P _115315 clauses s c) = (term2223 A C P _115315 clauses s c).
Proof. exact (MK_COMB (@lem8405929 A C P) (@lem8405928 A C P _115315 clauses s c)). Qed.
Lemma lem8405931 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) : (term2243 A C P _115315 clauses s) = (term2225 A C P _115315 clauses s).
Proof. exact (fun_ext (fun c : C => @lem8405930 A C P _115315 clauses s c)). Qed.
Lemma lem8405932 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8405933 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) : (term2233 A C P _115315 clauses s) = (term2227 A C P _115315 clauses s).
Proof. exact (MK_COMB (@lem8405932 C) (@lem8405931 A C P _115315 clauses s)). Qed.
Lemma lem8405934 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8405935 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) : (term2244 A C P _115315 clauses s) = (term2245 A C P _115315 clauses s).
Proof. exact (MK_COMB (@lem8405934) (@lem8405933 A C P _115315 clauses s)). Qed.
Lemma lem8405936 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) (c : C) : (term2236 A C P _115315 clauses s c) = (term2237 A C P _115315 clauses s c).
Proof. exact (eq_refl (term2236 A C P _115315 clauses s c)). Qed.
Lemma lem8405937 {A C P : Type'} (t : type1439 A C P) (c : C) : (t c) = (t c).
Proof. exact (eq_refl (t c)). Qed.
Lemma lem8405938 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) (t : type1439 A C P) (c : C) : (term2246 A C P _115315 clauses s t c) = (term2247 A C P _115315 clauses s t c).
Proof. exact (MK_COMB (@lem8405936 A C P _115315 clauses s c) (@lem8405937 A C P t c)). Qed.
Lemma lem8405939 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) (t : type1439 A C P) (c : C) : (term2247 A C P _115315 clauses s t c) = (term2248 A C P _115315 clauses s t c).
Proof. exact (eq_refl (term2247 A C P _115315 clauses s t c)). Qed.
Lemma lem8405940 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) (t : type1439 A C P) (c : C) : (term2246 A C P _115315 clauses s t c) = (term2248 A C P _115315 clauses s t c).
Proof. exact (TRANS (@lem8405938 A C P _115315 clauses s t c) (@lem8405939 A C P _115315 clauses s t c)). Qed.
Lemma lem8405941 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) (t : type1439 A C P) : (term2249 A C P _115315 clauses s t) = (term2250 A C P _115315 clauses s t).
Proof. exact (fun_ext (fun c : C => @lem8405940 A C P _115315 clauses s t c)). Qed.
Lemma lem8405942 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8405943 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) (t : type1439 A C P) : (term2251 A C P _115315 clauses s t) = (term2252 A C P _115315 clauses s t).
Proof. exact (MK_COMB (@lem8405942 C) (@lem8405941 A C P _115315 clauses s t)). Qed.
Lemma lem8405944 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) : (term2253 A C P _115315 clauses s) = (term2254 A C P _115315 clauses s).
Proof. exact (fun_ext (fun t : type1439 A C P => @lem8405943 A C P _115315 clauses s t)). Qed.
Lemma lem8405945 {A C P : Type'} : (@ex (C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> C -> P -> A)) = (@ex (C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> C -> P -> A))). Qed.
Lemma lem8405946 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) : (term2234 A C P _115315 clauses s) = (term2255 A C P _115315 clauses s).
Proof. exact (MK_COMB (@lem8405945 A C P) (@lem8405944 A C P _115315 clauses s)). Qed.
Lemma lem8405947 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) : ((term2233 A C P _115315 clauses s) = (term2234 A C P _115315 clauses s)) = ((term2227 A C P _115315 clauses s) = (term2255 A C P _115315 clauses s)).
Proof. exact (MK_COMB (@lem8405935 A C P _115315 clauses s) (@lem8405946 A C P _115315 clauses s)). Qed.
Lemma lem8405948 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) : (term2227 A C P _115315 clauses s) = (term2255 A C P _115315 clauses s).
Proof. exact (EQ_MP (@lem8405947 A C P _115315 clauses s) (@lem8405922 A C P _115315 clauses s)). Qed.
Lemma lem8405949 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2229 A C P _115315 clauses) = (term2256 A C P _115315 clauses).
Proof. exact (fun_ext (fun s : type1440 A C P => @lem8405948 A C P _115315 clauses s)). Qed.
Lemma lem8405950 {A C P : Type'} : (@ex (C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A)) = (@ex (C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex (C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A))). Qed.
Lemma lem8405951 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2230 A C P _115315 clauses) = (term2257 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8405950 A C P) (@lem8405949 A C P _115315 clauses)). Qed.
Lemma lem8405952 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2207 A C P _115315 clauses) = (term2257 A C P _115315 clauses).
Proof. exact (TRANS (@lem8405918 A C P _115315 clauses) (@lem8405951 A C P _115315 clauses)). Qed.
Lemma lem8405953 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2093 A C P _115315 clauses) = (term2257 A C P _115315 clauses).
Proof. exact (TRANS (@lem8405888 A C P _115315 clauses) (@lem8405952 A C P _115315 clauses)). Qed.
Lemma lem8405954 {A C P : Type'} (_115315 : type1092 A C P) : (term2106 A C P _115315) = (term2258 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8405953 A C P _115315 clauses)). Qed.
Lemma lem8405955 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8405956 {A C P : Type'} (_115315 : type1092 A C P) : (term2117 A C P _115315) = (term2259 A C P _115315).
Proof. exact (MK_COMB (@lem8405955 A C P) (@lem8405954 A C P _115315)). Qed.
Lemma lem8405958 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8405959 {A C P : Type'} (P' : type1086 A C P) : (term2260 A C P P') = (term2261 A C P P').
Proof. exact (@lem8405958 (type1636 A C P) (type1440 A C P) P'). Qed.
Lemma lem8405960 {A C P : Type'} (_115315 : type1092 A C P) : (term2262 A C P _115315) = (term2263 A C P _115315).
Proof. exact (@lem8405959 A C P (term2264 A C P _115315)). Qed.
Lemma lem8405961 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2265 A C P _115315 clauses) = (term2256 A C P _115315 clauses).
Proof. exact (eq_refl (term2265 A C P _115315 clauses)). Qed.
Lemma lem8405962 {A C P : Type'} (s : type1440 A C P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8405963 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) : (term2266 A C P _115315 clauses s) = (term2267 A C P _115315 clauses s).
Proof. exact (MK_COMB (@lem8405961 A C P _115315 clauses) (@lem8405962 A C P s)). Qed.
Lemma lem8405964 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) : (term2267 A C P _115315 clauses s) = (term2255 A C P _115315 clauses s).
Proof. exact (eq_refl (term2267 A C P _115315 clauses s)). Qed.
Lemma lem8405965 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1440 A C P) : (term2266 A C P _115315 clauses s) = (term2255 A C P _115315 clauses s).
Proof. exact (TRANS (@lem8405963 A C P _115315 clauses s) (@lem8405964 A C P _115315 clauses s)). Qed.
Lemma lem8405966 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2268 A C P _115315 clauses) = (term2256 A C P _115315 clauses).
Proof. exact (fun_ext (fun s : type1440 A C P => @lem8405965 A C P _115315 clauses s)). Qed.
Lemma lem8405967 {A C P : Type'} : (@ex (C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A)) = (@ex (C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex (C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A))). Qed.
Lemma lem8405968 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2269 A C P _115315 clauses) = (term2257 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8405967 A C P) (@lem8405966 A C P _115315 clauses)). Qed.
Lemma lem8405969 {A C P : Type'} (_115315 : type1092 A C P) : (term2270 A C P _115315) = (term2258 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8405968 A C P _115315 clauses)). Qed.
Lemma lem8405970 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8405971 {A C P : Type'} (_115315 : type1092 A C P) : (term2262 A C P _115315) = (term2259 A C P _115315).
Proof. exact (MK_COMB (@lem8405970 A C P) (@lem8405969 A C P _115315)). Qed.
Lemma lem8405972 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8405973 {A C P : Type'} (_115315 : type1092 A C P) : (term2271 A C P _115315) = (term2272 A C P _115315).
Proof. exact (MK_COMB (@lem8405972) (@lem8405971 A C P _115315)). Qed.
Lemma lem8405974 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term2265 A C P _115315 clauses) = (term2256 A C P _115315 clauses).
Proof. exact (eq_refl (term2265 A C P _115315 clauses)). Qed.
Lemma lem8405975 {A C P : Type'} (s : type1091 A C P) (clauses : type1636 A C P) : (s clauses) = (s clauses).
Proof. exact (eq_refl (s clauses)). Qed.
Lemma lem8405976 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) (clauses : type1636 A C P) : (term2273 A C P _115315 s clauses) = (term2274 A C P _115315 s clauses).
Proof. exact (MK_COMB (@lem8405974 A C P _115315 clauses) (@lem8405975 A C P s clauses)). Qed.
Lemma lem8405977 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) (clauses : type1636 A C P) : (term2274 A C P _115315 s clauses) = (term2275 A C P _115315 s clauses).
Proof. exact (eq_refl (term2274 A C P _115315 s clauses)). Qed.
Lemma lem8405978 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) (clauses : type1636 A C P) : (term2273 A C P _115315 s clauses) = (term2275 A C P _115315 s clauses).
Proof. exact (TRANS (@lem8405976 A C P _115315 s clauses) (@lem8405977 A C P _115315 s clauses)). Qed.
Lemma lem8405979 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) : (term2276 A C P _115315 s) = (term2277 A C P _115315 s).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8405978 A C P _115315 s clauses)). Qed.
Lemma lem8405980 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8405981 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) : (term2278 A C P _115315 s) = (term2279 A C P _115315 s).
Proof. exact (MK_COMB (@lem8405980 A C P) (@lem8405979 A C P _115315 s)). Qed.
Lemma lem8405982 {A C P : Type'} (_115315 : type1092 A C P) : (term2280 A C P _115315) = (term2281 A C P _115315).
Proof. exact (fun_ext (fun s : type1091 A C P => @lem8405981 A C P _115315 s)). Qed.
Lemma lem8405983 {A C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A))). Qed.
Lemma lem8405984 {A C P : Type'} (_115315 : type1092 A C P) : (term2263 A C P _115315) = (term2282 A C P _115315).
Proof. exact (MK_COMB (@lem8405983 A C P) (@lem8405982 A C P _115315)). Qed.
Lemma lem8405985 {A C P : Type'} (_115315 : type1092 A C P) : ((term2262 A C P _115315) = (term2263 A C P _115315)) = ((term2259 A C P _115315) = (term2282 A C P _115315)).
Proof. exact (MK_COMB (@lem8405973 A C P _115315) (@lem8405984 A C P _115315)). Qed.
Lemma lem8405986 {A C P : Type'} (_115315 : type1092 A C P) : (term2259 A C P _115315) = (term2282 A C P _115315).
Proof. exact (EQ_MP (@lem8405985 A C P _115315) (@lem8405960 A C P _115315)). Qed.
Lemma lem8405988 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8405989 {A C P : Type'} (P' : type1085 A C P) : (term2283 A C P P') = (term2284 A C P P').
Proof. exact (@lem8405988 (type1636 A C P) (type1439 A C P) P'). Qed.
Lemma lem8405990 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) : (term2285 A C P _115315 s) = (term2286 A C P _115315 s).
Proof. exact (@lem8405989 A C P (term2287 A C P _115315 s)). Qed.
Lemma lem8405991 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) (clauses : type1636 A C P) : (term2288 A C P _115315 s clauses) = (term2289 A C P _115315 s clauses).
Proof. exact (eq_refl (term2288 A C P _115315 s clauses)). Qed.
Lemma lem8405992 {A C P : Type'} (t : type1439 A C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8405993 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) (clauses : type1636 A C P) (t : type1439 A C P) : (term2290 A C P _115315 s clauses t) = (term2291 A C P _115315 s clauses t).
Proof. exact (MK_COMB (@lem8405991 A C P _115315 s clauses) (@lem8405992 A C P t)). Qed.
Lemma lem8405994 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) (clauses : type1636 A C P) (t : type1439 A C P) : (term2291 A C P _115315 s clauses t) = (term2292 A C P _115315 s clauses t).
Proof. exact (eq_refl (term2291 A C P _115315 s clauses t)). Qed.
Lemma lem8405995 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) (clauses : type1636 A C P) (t : type1439 A C P) : (term2290 A C P _115315 s clauses t) = (term2292 A C P _115315 s clauses t).
Proof. exact (TRANS (@lem8405993 A C P _115315 s clauses t) (@lem8405994 A C P _115315 s clauses t)). Qed.
Lemma lem8405996 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) (clauses : type1636 A C P) : (term2293 A C P _115315 s clauses) = (term2289 A C P _115315 s clauses).
Proof. exact (fun_ext (fun t : type1439 A C P => @lem8405995 A C P _115315 s clauses t)). Qed.
Lemma lem8405997 {A C P : Type'} : (@ex (C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> C -> P -> A)) = (@ex (C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> C -> P -> A))). Qed.
Lemma lem8405998 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) (clauses : type1636 A C P) : (term2294 A C P _115315 s clauses) = (term2275 A C P _115315 s clauses).
Proof. exact (MK_COMB (@lem8405997 A C P) (@lem8405996 A C P _115315 s clauses)). Qed.
Lemma lem8405999 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) : (term2295 A C P _115315 s) = (term2277 A C P _115315 s).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8405998 A C P _115315 s clauses)). Qed.
Lemma lem8406000 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8406001 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) : (term2285 A C P _115315 s) = (term2279 A C P _115315 s).
Proof. exact (MK_COMB (@lem8406000 A C P) (@lem8405999 A C P _115315 s)). Qed.
Lemma lem8406002 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8406003 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) : (term2296 A C P _115315 s) = (term2297 A C P _115315 s).
Proof. exact (MK_COMB (@lem8406002) (@lem8406001 A C P _115315 s)). Qed.
Lemma lem8406004 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) (clauses : type1636 A C P) : (term2288 A C P _115315 s clauses) = (term2289 A C P _115315 s clauses).
Proof. exact (eq_refl (term2288 A C P _115315 s clauses)). Qed.
Lemma lem8406005 {A C P : Type'} (t : type1090 A C P) (clauses : type1636 A C P) : (t clauses) = (t clauses).
Proof. exact (eq_refl (t clauses)). Qed.
Lemma lem8406006 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) (t : type1090 A C P) (clauses : type1636 A C P) : (term2298 A C P _115315 s t clauses) = (term2299 A C P _115315 s t clauses).
Proof. exact (MK_COMB (@lem8406004 A C P _115315 s clauses) (@lem8406005 A C P t clauses)). Qed.
Lemma lem8406007 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) (t : type1090 A C P) (clauses : type1636 A C P) : (term2299 A C P _115315 s t clauses) = (term2300 A C P _115315 s t clauses).
Proof. exact (eq_refl (term2299 A C P _115315 s t clauses)). Qed.
Lemma lem8406008 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) (t : type1090 A C P) (clauses : type1636 A C P) : (term2298 A C P _115315 s t clauses) = (term2300 A C P _115315 s t clauses).
Proof. exact (TRANS (@lem8406006 A C P _115315 s t clauses) (@lem8406007 A C P _115315 s t clauses)). Qed.
Lemma lem8406009 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) (t : type1090 A C P) : (term2301 A C P _115315 s t) = (term2302 A C P _115315 s t).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8406008 A C P _115315 s t clauses)). Qed.
Lemma lem8406010 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8406011 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) (t : type1090 A C P) : (term2303 A C P _115315 s t) = (term2304 A C P _115315 s t).
Proof. exact (MK_COMB (@lem8406010 A C P) (@lem8406009 A C P _115315 s t)). Qed.
Lemma lem8406012 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) : (term2305 A C P _115315 s) = (term2306 A C P _115315 s).
Proof. exact (fun_ext (fun t : type1090 A C P => @lem8406011 A C P _115315 s t)). Qed.
Lemma lem8406013 {A C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> C -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> C -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> C -> P -> A))). Qed.
Lemma lem8406014 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) : (term2286 A C P _115315 s) = (term2307 A C P _115315 s).
Proof. exact (MK_COMB (@lem8406013 A C P) (@lem8406012 A C P _115315 s)). Qed.
Lemma lem8406015 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) : ((term2285 A C P _115315 s) = (term2286 A C P _115315 s)) = ((term2279 A C P _115315 s) = (term2307 A C P _115315 s)).
Proof. exact (MK_COMB (@lem8406003 A C P _115315 s) (@lem8406014 A C P _115315 s)). Qed.
Lemma lem8406016 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) : (term2279 A C P _115315 s) = (term2307 A C P _115315 s).
Proof. exact (EQ_MP (@lem8406015 A C P _115315 s) (@lem8405990 A C P _115315 s)). Qed.
Lemma lem8406017 {A C P : Type'} (_115315 : type1092 A C P) : (term2281 A C P _115315) = (term2308 A C P _115315).
Proof. exact (fun_ext (fun s : type1091 A C P => @lem8406016 A C P _115315 s)). Qed.
Lemma lem8406018 {A C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A))). Qed.
Lemma lem8406019 {A C P : Type'} (_115315 : type1092 A C P) : (term2282 A C P _115315) = (term2309 A C P _115315).
Proof. exact (MK_COMB (@lem8406018 A C P) (@lem8406017 A C P _115315)). Qed.
Lemma lem8406020 {A C P : Type'} (_115315 : type1092 A C P) : (term2259 A C P _115315) = (term2309 A C P _115315).
Proof. exact (TRANS (@lem8405986 A C P _115315) (@lem8406019 A C P _115315)). Qed.
Lemma lem8406021 {A C P : Type'} (_115315 : type1092 A C P) : (term2117 A C P _115315) = (term2309 A C P _115315).
Proof. exact (TRANS (@lem8405956 A C P _115315) (@lem8406020 A C P _115315)). Qed.
Lemma lem8406022 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8406023 {A C P : Type'} (_115315 : type1092 A C P) : (term2119 A C P _115315) = (term2310 A C P _115315).
Proof. exact (MK_COMB (@lem8406022) (@lem8406021 A C P _115315)). Qed.
Lemma lem8406024 {A C P : Type'} (_115315 : type1092 A C P) : (term2122 A C P _115315) = (term2122 A C P _115315).
Proof. exact (eq_refl (term2122 A C P _115315)). Qed.
Lemma lem8406025 {A C P : Type'} (_115315 : type1092 A C P) : (term2123 A C P _115315) = (term2311 A C P _115315).
Proof. exact (MK_COMB (@lem8406023 A C P _115315) (@lem8406024 A C P _115315)). Qed.
Lemma lem8406027 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1332 A P Q) = (term1333 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8406028 {A C P : Type'} (P' : type271 A C P) (Q : Prop) : (term2312 A C P P' Q) = (term2313 A C P P' Q).
Proof. exact (@lem8406027 (type1091 A C P) P' Q). Qed.
Lemma lem8406029 {A C P : Type'} (_115315 : type1092 A C P) : (term2314 A C P _115315) = (term2315 A C P _115315).
Proof. exact (@lem8406028 A C P (term2308 A C P _115315) (term2122 A C P _115315)). Qed.
Lemma lem8406030 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) : (term2316 A C P _115315 s) = (term2307 A C P _115315 s).
Proof. exact (eq_refl (term2316 A C P _115315 s)). Qed.
Lemma lem8406031 {A C P : Type'} (_115315 : type1092 A C P) : (term2317 A C P _115315) = (term2308 A C P _115315).
Proof. exact (fun_ext (fun s : type1091 A C P => @lem8406030 A C P _115315 s)). Qed.
Lemma lem8406032 {A C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A))). Qed.
Lemma lem8406033 {A C P : Type'} (_115315 : type1092 A C P) : (term2318 A C P _115315) = (term2309 A C P _115315).
Proof. exact (MK_COMB (@lem8406032 A C P) (@lem8406031 A C P _115315)). Qed.
Lemma lem8406034 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8406035 {A C P : Type'} (_115315 : type1092 A C P) : (term2319 A C P _115315) = (term2310 A C P _115315).
Proof. exact (MK_COMB (@lem8406034) (@lem8406033 A C P _115315)). Qed.
Lemma lem8406036 {A C P : Type'} (_115315 : type1092 A C P) : (term2122 A C P _115315) = (term2122 A C P _115315).
Proof. exact (eq_refl (term2122 A C P _115315)). Qed.
Lemma lem8406037 {A C P : Type'} (_115315 : type1092 A C P) : (term2314 A C P _115315) = (term2311 A C P _115315).
Proof. exact (MK_COMB (@lem8406035 A C P _115315) (@lem8406036 A C P _115315)). Qed.
Lemma lem8406038 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8406039 {A C P : Type'} (_115315 : type1092 A C P) : (term2320 A C P _115315) = (term2321 A C P _115315).
Proof. exact (MK_COMB (@lem8406038) (@lem8406037 A C P _115315)). Qed.
Lemma lem8406040 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) : (term2316 A C P _115315 s) = (term2307 A C P _115315 s).
Proof. exact (eq_refl (term2316 A C P _115315 s)). Qed.
Lemma lem8406041 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8406042 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) : (term2322 A C P _115315 s) = (term2323 A C P _115315 s).
Proof. exact (MK_COMB (@lem8406041) (@lem8406040 A C P _115315 s)). Qed.
Lemma lem8406043 {A C P : Type'} (_115315 : type1092 A C P) : (term2122 A C P _115315) = (term2122 A C P _115315).
Proof. exact (eq_refl (term2122 A C P _115315)). Qed.
Lemma lem8406044 {A C P : Type'} (s : type1091 A C P) (_115315 : type1092 A C P) : (term2324 A C P s _115315) = (term2325 A C P s _115315).
Proof. exact (MK_COMB (@lem8406042 A C P _115315 s) (@lem8406043 A C P _115315)). Qed.
Lemma lem8406045 {A C P : Type'} (_115315 : type1092 A C P) : (term2326 A C P _115315) = (term2327 A C P _115315).
Proof. exact (fun_ext (fun s : type1091 A C P => @lem8406044 A C P s _115315)). Qed.
Lemma lem8406046 {A C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A))). Qed.
Lemma lem8406047 {A C P : Type'} (_115315 : type1092 A C P) : (term2315 A C P _115315) = (term2328 A C P _115315).
Proof. exact (MK_COMB (@lem8406046 A C P) (@lem8406045 A C P _115315)). Qed.
Lemma lem8406048 {A C P : Type'} (_115315 : type1092 A C P) : ((term2314 A C P _115315) = (term2315 A C P _115315)) = ((term2311 A C P _115315) = (term2328 A C P _115315)).
Proof. exact (MK_COMB (@lem8406039 A C P _115315) (@lem8406047 A C P _115315)). Qed.
Lemma lem8406049 {A C P : Type'} (_115315 : type1092 A C P) : (term2311 A C P _115315) = (term2328 A C P _115315).
Proof. exact (EQ_MP (@lem8406048 A C P _115315) (@lem8406029 A C P _115315)). Qed.
Lemma lem8406051 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1332 A P Q) = (term1333 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8406052 {A C P : Type'} (P' : type270 A C P) (Q : Prop) : (term2329 A C P P' Q) = (term2330 A C P P' Q).
Proof. exact (@lem8406051 (type1090 A C P) P' Q). Qed.
Lemma lem8406053 {A C P : Type'} (s : type1091 A C P) (_115315 : type1092 A C P) : (term2331 A C P s _115315) = (term2332 A C P s _115315).
Proof. exact (@lem8406052 A C P (term2306 A C P _115315 s) (term2122 A C P _115315)). Qed.
Lemma lem8406054 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) (t : type1090 A C P) : (term2333 A C P _115315 s t) = (term2304 A C P _115315 s t).
Proof. exact (eq_refl (term2333 A C P _115315 s t)). Qed.
Lemma lem8406055 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) : (term2334 A C P _115315 s) = (term2306 A C P _115315 s).
Proof. exact (fun_ext (fun t : type1090 A C P => @lem8406054 A C P _115315 s t)). Qed.
Lemma lem8406056 {A C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> C -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> C -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> C -> P -> A))). Qed.
Lemma lem8406057 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) : (term2335 A C P _115315 s) = (term2307 A C P _115315 s).
Proof. exact (MK_COMB (@lem8406056 A C P) (@lem8406055 A C P _115315 s)). Qed.
Lemma lem8406058 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8406059 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) : (term2336 A C P _115315 s) = (term2323 A C P _115315 s).
Proof. exact (MK_COMB (@lem8406058) (@lem8406057 A C P _115315 s)). Qed.
Lemma lem8406060 {A C P : Type'} (_115315 : type1092 A C P) : (term2122 A C P _115315) = (term2122 A C P _115315).
Proof. exact (eq_refl (term2122 A C P _115315)). Qed.
Lemma lem8406061 {A C P : Type'} (s : type1091 A C P) (_115315 : type1092 A C P) : (term2331 A C P s _115315) = (term2325 A C P s _115315).
Proof. exact (MK_COMB (@lem8406059 A C P _115315 s) (@lem8406060 A C P _115315)). Qed.
Lemma lem8406062 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8406063 {A C P : Type'} (s : type1091 A C P) (_115315 : type1092 A C P) : (term2337 A C P s _115315) = (term2338 A C P s _115315).
Proof. exact (MK_COMB (@lem8406062) (@lem8406061 A C P s _115315)). Qed.
Lemma lem8406064 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) (t : type1090 A C P) : (term2333 A C P _115315 s t) = (term2304 A C P _115315 s t).
Proof. exact (eq_refl (term2333 A C P _115315 s t)). Qed.
Lemma lem8406065 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8406066 {A C P : Type'} (_115315 : type1092 A C P) (s : type1091 A C P) (t : type1090 A C P) : (term2339 A C P _115315 s t) = (term2340 A C P _115315 s t).
Proof. exact (MK_COMB (@lem8406065) (@lem8406064 A C P _115315 s t)). Qed.
Lemma lem8406067 {A C P : Type'} (_115315 : type1092 A C P) : (term2122 A C P _115315) = (term2122 A C P _115315).
Proof. exact (eq_refl (term2122 A C P _115315)). Qed.
Lemma lem8406068 {A C P : Type'} (s : type1091 A C P) (t : type1090 A C P) (_115315 : type1092 A C P) : (term2341 A C P s t _115315) = (term2342 A C P s t _115315).
Proof. exact (MK_COMB (@lem8406066 A C P _115315 s t) (@lem8406067 A C P _115315)). Qed.
Lemma lem8406069 {A C P : Type'} (s : type1091 A C P) (_115315 : type1092 A C P) : (term2343 A C P s _115315) = (term2344 A C P s _115315).
Proof. exact (fun_ext (fun t : type1090 A C P => @lem8406068 A C P s t _115315)). Qed.
Lemma lem8406070 {A C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> C -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> C -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> C -> P -> A))). Qed.
Lemma lem8406071 {A C P : Type'} (s : type1091 A C P) (_115315 : type1092 A C P) : (term2332 A C P s _115315) = (term2345 A C P s _115315).
Proof. exact (MK_COMB (@lem8406070 A C P) (@lem8406069 A C P s _115315)). Qed.
Lemma lem8406072 {A C P : Type'} (s : type1091 A C P) (_115315 : type1092 A C P) : ((term2331 A C P s _115315) = (term2332 A C P s _115315)) = ((term2325 A C P s _115315) = (term2345 A C P s _115315)).
Proof. exact (MK_COMB (@lem8406063 A C P s _115315) (@lem8406071 A C P s _115315)). Qed.
Lemma lem8406073 {A C P : Type'} (s : type1091 A C P) (_115315 : type1092 A C P) : (term2325 A C P s _115315) = (term2345 A C P s _115315).
Proof. exact (EQ_MP (@lem8406072 A C P s _115315) (@lem8406053 A C P s _115315)). Qed.
Lemma lem8406074 {A C P : Type'} (_115315 : type1092 A C P) : (term2327 A C P _115315) = (term2346 A C P _115315).
Proof. exact (fun_ext (fun s : type1091 A C P => @lem8406073 A C P s _115315)). Qed.
Lemma lem8406075 {A C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> ((prod (P -> A) (C -> P -> A)) -> Prop) -> P -> A))). Qed.
Lemma lem8406076 {A C P : Type'} (_115315 : type1092 A C P) : (term2328 A C P _115315) = (term2347 A C P _115315).
Proof. exact (MK_COMB (@lem8406075 A C P) (@lem8406074 A C P _115315)). Qed.
Lemma lem8406077 {A C P : Type'} (_115315 : type1092 A C P) : (term2311 A C P _115315) = (term2347 A C P _115315).
Proof. exact (TRANS (@lem8406049 A C P _115315) (@lem8406076 A C P _115315)). Qed.
Lemma lem8406078 {A C P : Type'} (_115315 : type1092 A C P) : (term2123 A C P _115315) = (term2347 A C P _115315).
Proof. exact (TRANS (@lem8406025 A C P _115315) (@lem8406077 A C P _115315)). Qed.
Lemma lem8406079 {A C P : Type'} (_115315 : type1092 A C P) : (term2055 A C P _115315) = (term2347 A C P _115315).
Proof. exact (TRANS (@lem8405773 A C P _115315) (@lem8406078 A C P _115315)). Qed.
Lemma lem8406080 {A C P : Type'} (_115315 : type1092 A C P) : (term599 A C P _115315) = (term2347 A C P _115315).
Proof. exact (TRANS (@lem8405292 A C P _115315) (@lem8406079 A C P _115315)). Qed.
Lemma lem8406081 {A C P : Type'} (_115315 : type1092 A C P) (h1 : term599 A C P _115315) : term2347 A C P _115315.
Proof. exact (EQ_MP (@lem8406080 A C P _115315) (@lem8401036 A C P _115315 h1)). Qed.
Lemma lem8406085 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f' : A -> B) : (term195 A B P f clauses s t f') = (term195 A B P f clauses s t f').
Proof. exact (eq_refl (term195 A B P f clauses s t f')). Qed.
Lemma lem8406086 {A B P : Type'} (P' : type116 A B P) : (term1706 A B P P') = (term1707 A B P P').
Proof. exact (@lem18392 (type558 A B P) P'). Qed.
Lemma lem8406087 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term2666 A B P f clauses s f') = (term2667 A B P f clauses s f').
Proof. exact (@lem8406086 A B P (term197 A B P f clauses s f')). Qed.
Lemma lem8406088 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f' : A -> B) : (term2668 A B P f clauses s f' t) = (term195 A B P f clauses s t f').
Proof. exact (eq_refl (term2668 A B P f clauses s f' t)). Qed.
Lemma lem8406089 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8406091 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f' : A -> B) : (term2669 A B P f clauses s f' t) = (term2670 A B P f clauses s t f').
Proof. exact (MK_COMB (@lem8406089) (@lem8406088 A B P f clauses s t f')). Qed.
Lemma lem8406092 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term2671 A B P f clauses s f') = (term2672 A B P f clauses s f').
Proof. exact (fun_ext (fun t : type558 A B P => @lem8406091 A B P f clauses s t f')). Qed.
Lemma lem8406093 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8406094 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term2667 A B P f clauses s f') = (term2673 A B P f clauses s f').
Proof. exact (MK_COMB (@lem8406093 A B P) (@lem8406092 A B P f clauses s f')). Qed.
Lemma lem8406095 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term2666 A B P f clauses s f') = (term2673 A B P f clauses s f').
Proof. exact (TRANS (@lem8406087 A B P f clauses s f') (@lem8406094 A B P f clauses s f')). Qed.
Lemma lem8406096 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term197 A B P f clauses s f') = (term197 A B P f clauses s f').
Proof. exact (fun_ext (fun t : type558 A B P => @lem8406085 A B P f clauses s t f')). Qed.
Lemma lem8406097 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8406098 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term199 A B P f clauses s f') = (term199 A B P f clauses s f').
Proof. exact (MK_COMB (@lem8406097 A B P) (@lem8406096 A B P f clauses s f')). Qed.
Lemma lem8406099 {A P : Type'} (P' : type805 A P) : (term2032 A P P') = (term2033 A P P').
Proof. exact (@lem18392 (P -> A) P'). Qed.
Lemma lem8406100 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2674 A B P f clauses f') = (term2675 A B P f clauses f').
Proof. exact (@lem8406099 A P (term201 A B P f clauses f')). Qed.
Lemma lem8406101 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term2676 A B P f clauses f' s) = (term199 A B P f clauses s f').
Proof. exact (eq_refl (term2676 A B P f clauses f' s)). Qed.
Lemma lem8406102 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8406103 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term2677 A B P f clauses f' s) = (term2666 A B P f clauses s f').
Proof. exact (MK_COMB (@lem8406102) (@lem8406101 A B P f clauses s f')). Qed.
Lemma lem8406104 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term2677 A B P f clauses f' s) = (term2673 A B P f clauses s f').
Proof. exact (TRANS (@lem8406103 A B P f clauses s f') (@lem8406095 A B P f clauses s f')). Qed.
Lemma lem8406105 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2678 A B P f clauses f') = (term2679 A B P f clauses f').
Proof. exact (fun_ext (fun s : P -> A => @lem8406104 A B P f clauses s f')). Qed.
Lemma lem8406106 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8406107 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2675 A B P f clauses f') = (term2680 A B P f clauses f').
Proof. exact (MK_COMB (@lem8406106 A P) (@lem8406105 A B P f clauses f')). Qed.
Lemma lem8406108 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2674 A B P f clauses f') = (term2680 A B P f clauses f').
Proof. exact (TRANS (@lem8406100 A B P f clauses f') (@lem8406107 A B P f clauses f')). Qed.
Lemma lem8406109 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term201 A B P f clauses f') = (term201 A B P f clauses f').
Proof. exact (fun_ext (fun s : P -> A => @lem8406098 A B P f clauses s f')). Qed.
Lemma lem8406110 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8406111 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term203 A B P f clauses f') = (term203 A B P f clauses f').
Proof. exact (MK_COMB (@lem8406110 A P) (@lem8406109 A B P f clauses f')). Qed.
Lemma lem8406113 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) (f' : type1177 A B P) : (term2681 A B P _115314 clauses f f') = (term2681 A B P _115314 clauses f f').
Proof. exact (eq_refl (term2681 A B P _115314 clauses f f')). Qed.
Lemma lem8406114 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2682 A B P _115314 f clauses f') = (term2682 A B P _115314 f clauses f').
Proof. exact (MK_COMB (@lem8406113 A B P _115314 clauses f' f) (@lem8406111 A B P f clauses f')). Qed.
Lemma lem8406116 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) (f' : type1177 A B P) : (term2683 A B P _115314 clauses f f') = (term2683 A B P _115314 clauses f f').
Proof. exact (eq_refl (term2683 A B P _115314 clauses f f')). Qed.
Lemma lem8406117 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2684 A B P _115314 f clauses f') = (term2685 A B P _115314 f clauses f').
Proof. exact (MK_COMB (@lem8406116 A B P _115314 clauses f' f) (@lem8406108 A B P f clauses f')). Qed.
Lemma lem8406118 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8406119 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2686 A B P _115314 f clauses f') = (term2687 A B P _115314 f clauses f').
Proof. exact (MK_COMB (@lem8406118) (@lem8406117 A B P _115314 f clauses f')). Qed.
Lemma lem8406120 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2688 A B P _115314 f clauses f') = (term2689 A B P _115314 f clauses f').
Proof. exact (MK_COMB (@lem8406119 A B P _115314 f clauses f') (@lem8406114 A B P _115314 f clauses f')). Qed.
Lemma lem8406121 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : ((_115314 clauses f' f) = (term203 A B P f clauses f')) = (term2688 A B P _115314 f clauses f').
Proof. exact (@lem17784 (_115314 clauses f' f) (term203 A B P f clauses f')). Qed.
Lemma lem8406122 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : ((_115314 clauses f' f) = (term203 A B P f clauses f')) = (term2689 A B P _115314 f clauses f').
Proof. exact (TRANS (@lem8406121 A B P _115314 f clauses f') (@lem8406120 A B P _115314 f clauses f')). Qed.
Lemma lem8406123 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term510 A B P _115314 clauses f) = (term2690 A B P _115314 clauses f).
Proof. exact (fun_ext (fun f' : type1177 A B P => @lem8406122 A B P _115314 f' clauses f)). Qed.
Lemma lem8406124 {A B P : Type'} : (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) = (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop))). Qed.
Lemma lem8406125 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term511 A B P _115314 clauses f) = (term2691 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8406124 A B P) (@lem8406123 A B P _115314 clauses f)). Qed.
Lemma lem8406126 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term512 A B P _115314 clauses) = (term2692 A B P _115314 clauses).
Proof. exact (fun_ext (fun f : A -> B => @lem8406125 A B P _115314 clauses f)). Qed.
Lemma lem8406127 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8406128 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term513 A B P _115314 clauses) = (term2693 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8406127 A B) (@lem8406126 A B P _115314 clauses)). Qed.
Lemma lem8406129 {A B P : Type'} (_115314 : type1080 A B P) : (term514 A B P _115314) = (term2694 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8406128 A B P _115314 clauses)). Qed.
Lemma lem8406130 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8406131 {A B P : Type'} (_115314 : type1080 A B P) : (term515 A B P _115314) = (term2695 A B P _115314).
Proof. exact (MK_COMB (@lem8406130 A B P) (@lem8406129 A B P _115314)). Qed.
Lemma lem8406141 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term1070 A P Q) = (term1071 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem8406142 {A B P : Type'} (P' : type301 A B P) (Q : type301 A B P) : (term2696 A B P P' Q) = (term2697 A B P P' Q).
Proof. exact (@lem8406141 (type1177 A B P) P' Q). Qed.
Lemma lem8406143 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2698 A B P _115314 clauses f) = (term2699 A B P _115314 clauses f).
Proof. exact (@lem8406142 A B P (term2700 A B P _115314 clauses f) (term2701 A B P _115314 clauses f)). Qed.
Lemma lem8406144 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2702 A B P _115314 clauses f' f) = (term2685 A B P _115314 f clauses f').
Proof. exact (eq_refl (term2702 A B P _115314 clauses f' f)). Qed.
Lemma lem8406145 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8406146 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2703 A B P _115314 clauses f' f) = (term2687 A B P _115314 f clauses f').
Proof. exact (MK_COMB (@lem8406145) (@lem8406144 A B P _115314 f clauses f')). Qed.
Lemma lem8406147 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2704 A B P _115314 clauses f' f) = (term2682 A B P _115314 f clauses f').
Proof. exact (eq_refl (term2704 A B P _115314 clauses f' f)). Qed.
Lemma lem8406148 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2705 A B P _115314 clauses f' f) = (term2689 A B P _115314 f clauses f').
Proof. exact (MK_COMB (@lem8406146 A B P _115314 f clauses f') (@lem8406147 A B P _115314 f clauses f')). Qed.
Lemma lem8406149 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2706 A B P _115314 clauses f) = (term2690 A B P _115314 clauses f).
Proof. exact (fun_ext (fun f' : type1177 A B P => @lem8406148 A B P _115314 f' clauses f)). Qed.
Lemma lem8406150 {A B P : Type'} : (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) = (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop))). Qed.
Lemma lem8406151 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2698 A B P _115314 clauses f) = (term2691 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8406150 A B P) (@lem8406149 A B P _115314 clauses f)). Qed.
Lemma lem8406152 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8406153 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2707 A B P _115314 clauses f) = (term2708 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8406152) (@lem8406151 A B P _115314 clauses f)). Qed.
Lemma lem8406154 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2702 A B P _115314 clauses f' f) = (term2685 A B P _115314 f clauses f').
Proof. exact (eq_refl (term2702 A B P _115314 clauses f' f)). Qed.
Lemma lem8406155 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2709 A B P _115314 clauses f) = (term2700 A B P _115314 clauses f).
Proof. exact (fun_ext (fun f' : type1177 A B P => @lem8406154 A B P _115314 f' clauses f)). Qed.
Lemma lem8406156 {A B P : Type'} : (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) = (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop))). Qed.
Lemma lem8406157 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2710 A B P _115314 clauses f) = (term2711 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8406156 A B P) (@lem8406155 A B P _115314 clauses f)). Qed.
Lemma lem8406158 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8406159 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2712 A B P _115314 clauses f) = (term2713 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8406158) (@lem8406157 A B P _115314 clauses f)). Qed.
Lemma lem8406160 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2704 A B P _115314 clauses f' f) = (term2682 A B P _115314 f clauses f').
Proof. exact (eq_refl (term2704 A B P _115314 clauses f' f)). Qed.
Lemma lem8406161 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2714 A B P _115314 clauses f) = (term2701 A B P _115314 clauses f).
Proof. exact (fun_ext (fun f' : type1177 A B P => @lem8406160 A B P _115314 f' clauses f)). Qed.
Lemma lem8406162 {A B P : Type'} : (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) = (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop))). Qed.
Lemma lem8406163 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2715 A B P _115314 clauses f) = (term2716 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8406162 A B P) (@lem8406161 A B P _115314 clauses f)). Qed.
Lemma lem8406164 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2699 A B P _115314 clauses f) = (term2717 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8406159 A B P _115314 clauses f) (@lem8406163 A B P _115314 clauses f)). Qed.
Lemma lem8406165 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : ((term2698 A B P _115314 clauses f) = (term2699 A B P _115314 clauses f)) = ((term2691 A B P _115314 clauses f) = (term2717 A B P _115314 clauses f)).
Proof. exact (MK_COMB (@lem8406153 A B P _115314 clauses f) (@lem8406164 A B P _115314 clauses f)). Qed.
Lemma lem8406166 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2691 A B P _115314 clauses f) = (term2717 A B P _115314 clauses f).
Proof. exact (EQ_MP (@lem8406165 A B P _115314 clauses f) (@lem8406143 A B P _115314 clauses f)). Qed.
Lemma lem8406287 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2692 A B P _115314 clauses) = (term2718 A B P _115314 clauses).
Proof. exact (fun_ext (fun f : A -> B => @lem8406166 A B P _115314 clauses f)). Qed.
Lemma lem8406288 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8406289 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2693 A B P _115314 clauses) = (term2719 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8406288 A B) (@lem8406287 A B P _115314 clauses)). Qed.
Lemma lem8406291 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term1070 A P Q) = (term1071 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem8406292 {A B : Type'} (P : type572 A B) (Q : type572 A B) : (term2720 A B P Q) = (term2721 A B P Q).
Proof. exact (@lem8406291 (A -> B) P Q). Qed.
Lemma lem8406293 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2722 A B P _115314 clauses) = (term2723 A B P _115314 clauses).
Proof. exact (@lem8406292 A B (term2724 A B P _115314 clauses) (term2725 A B P _115314 clauses)). Qed.
Lemma lem8406294 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2726 A B P _115314 clauses f) = (term2711 A B P _115314 clauses f).
Proof. exact (eq_refl (term2726 A B P _115314 clauses f)). Qed.
Lemma lem8406295 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8406296 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2727 A B P _115314 clauses f) = (term2713 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8406295) (@lem8406294 A B P _115314 clauses f)). Qed.
Lemma lem8406297 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2728 A B P _115314 clauses f) = (term2716 A B P _115314 clauses f).
Proof. exact (eq_refl (term2728 A B P _115314 clauses f)). Qed.
Lemma lem8406298 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2729 A B P _115314 clauses f) = (term2717 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8406296 A B P _115314 clauses f) (@lem8406297 A B P _115314 clauses f)). Qed.
Lemma lem8406299 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2730 A B P _115314 clauses) = (term2718 A B P _115314 clauses).
Proof. exact (fun_ext (fun f : A -> B => @lem8406298 A B P _115314 clauses f)). Qed.
Lemma lem8406300 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8406301 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2722 A B P _115314 clauses) = (term2719 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8406300 A B) (@lem8406299 A B P _115314 clauses)). Qed.
Lemma lem8406302 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8406303 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2731 A B P _115314 clauses) = (term2732 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8406302) (@lem8406301 A B P _115314 clauses)). Qed.
Lemma lem8406304 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2726 A B P _115314 clauses f) = (term2711 A B P _115314 clauses f).
Proof. exact (eq_refl (term2726 A B P _115314 clauses f)). Qed.
Lemma lem8406305 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2733 A B P _115314 clauses) = (term2724 A B P _115314 clauses).
Proof. exact (fun_ext (fun f : A -> B => @lem8406304 A B P _115314 clauses f)). Qed.
Lemma lem8406306 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8406307 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2734 A B P _115314 clauses) = (term2735 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8406306 A B) (@lem8406305 A B P _115314 clauses)). Qed.
Lemma lem8406308 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8406309 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2736 A B P _115314 clauses) = (term2737 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8406308) (@lem8406307 A B P _115314 clauses)). Qed.
Lemma lem8406310 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2728 A B P _115314 clauses f) = (term2716 A B P _115314 clauses f).
Proof. exact (eq_refl (term2728 A B P _115314 clauses f)). Qed.
Lemma lem8406311 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2738 A B P _115314 clauses) = (term2725 A B P _115314 clauses).
Proof. exact (fun_ext (fun f : A -> B => @lem8406310 A B P _115314 clauses f)). Qed.
Lemma lem8406312 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8406313 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2739 A B P _115314 clauses) = (term2740 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8406312 A B) (@lem8406311 A B P _115314 clauses)). Qed.
Lemma lem8406314 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2723 A B P _115314 clauses) = (term2741 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8406309 A B P _115314 clauses) (@lem8406313 A B P _115314 clauses)). Qed.
Lemma lem8406315 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : ((term2722 A B P _115314 clauses) = (term2723 A B P _115314 clauses)) = ((term2719 A B P _115314 clauses) = (term2741 A B P _115314 clauses)).
Proof. exact (MK_COMB (@lem8406303 A B P _115314 clauses) (@lem8406314 A B P _115314 clauses)). Qed.
Lemma lem8406316 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2719 A B P _115314 clauses) = (term2741 A B P _115314 clauses).
Proof. exact (EQ_MP (@lem8406315 A B P _115314 clauses) (@lem8406293 A B P _115314 clauses)). Qed.
Lemma lem8406445 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2693 A B P _115314 clauses) = (term2741 A B P _115314 clauses).
Proof. exact (TRANS (@lem8406289 A B P _115314 clauses) (@lem8406316 A B P _115314 clauses)). Qed.
Lemma lem8406446 {A B P : Type'} (_115314 : type1080 A B P) : (term2694 A B P _115314) = (term2742 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8406445 A B P _115314 clauses)). Qed.
Lemma lem8406447 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8406448 {A B P : Type'} (_115314 : type1080 A B P) : (term2695 A B P _115314) = (term2743 A B P _115314).
Proof. exact (MK_COMB (@lem8406447 A B P) (@lem8406446 A B P _115314)). Qed.
Lemma lem8406450 {A : Type'} (P : A -> Prop) (Q : A -> Prop) : (term1070 A P Q) = (term1071 A P Q).
Proof. exact (EQ_MP (@lem18953 A P Q) (@lem18952 A P Q)). Qed.
Lemma lem8406451 {A B P : Type'} (P' : type1084 A B P) (Q : type1084 A B P) : (term2744 A B P P' Q) = (term2745 A B P P' Q).
Proof. exact (@lem8406450 (type1635 A B P) P' Q). Qed.
Lemma lem8406452 {A B P : Type'} (_115314 : type1080 A B P) : (term2746 A B P _115314) = (term2747 A B P _115314).
Proof. exact (@lem8406451 A B P (term2748 A B P _115314) (term2749 A B P _115314)). Qed.
Lemma lem8406453 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2750 A B P _115314 clauses) = (term2735 A B P _115314 clauses).
Proof. exact (eq_refl (term2750 A B P _115314 clauses)). Qed.
Lemma lem8406454 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8406455 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2751 A B P _115314 clauses) = (term2737 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8406454) (@lem8406453 A B P _115314 clauses)). Qed.
Lemma lem8406456 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2752 A B P _115314 clauses) = (term2740 A B P _115314 clauses).
Proof. exact (eq_refl (term2752 A B P _115314 clauses)). Qed.
Lemma lem8406457 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2753 A B P _115314 clauses) = (term2741 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8406455 A B P _115314 clauses) (@lem8406456 A B P _115314 clauses)). Qed.
Lemma lem8406458 {A B P : Type'} (_115314 : type1080 A B P) : (term2754 A B P _115314) = (term2742 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8406457 A B P _115314 clauses)). Qed.
Lemma lem8406459 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8406460 {A B P : Type'} (_115314 : type1080 A B P) : (term2746 A B P _115314) = (term2743 A B P _115314).
Proof. exact (MK_COMB (@lem8406459 A B P) (@lem8406458 A B P _115314)). Qed.
Lemma lem8406461 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8406462 {A B P : Type'} (_115314 : type1080 A B P) : (term2755 A B P _115314) = (term2756 A B P _115314).
Proof. exact (MK_COMB (@lem8406461) (@lem8406460 A B P _115314)). Qed.
Lemma lem8406463 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2750 A B P _115314 clauses) = (term2735 A B P _115314 clauses).
Proof. exact (eq_refl (term2750 A B P _115314 clauses)). Qed.
Lemma lem8406464 {A B P : Type'} (_115314 : type1080 A B P) : (term2757 A B P _115314) = (term2748 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8406463 A B P _115314 clauses)). Qed.
Lemma lem8406465 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8406466 {A B P : Type'} (_115314 : type1080 A B P) : (term2758 A B P _115314) = (term2759 A B P _115314).
Proof. exact (MK_COMB (@lem8406465 A B P) (@lem8406464 A B P _115314)). Qed.
Lemma lem8406467 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8406468 {A B P : Type'} (_115314 : type1080 A B P) : (term2760 A B P _115314) = (term2761 A B P _115314).
Proof. exact (MK_COMB (@lem8406467) (@lem8406466 A B P _115314)). Qed.
Lemma lem8406469 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2752 A B P _115314 clauses) = (term2740 A B P _115314 clauses).
Proof. exact (eq_refl (term2752 A B P _115314 clauses)). Qed.
Lemma lem8406470 {A B P : Type'} (_115314 : type1080 A B P) : (term2762 A B P _115314) = (term2749 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8406469 A B P _115314 clauses)). Qed.
Lemma lem8406471 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8406472 {A B P : Type'} (_115314 : type1080 A B P) : (term2763 A B P _115314) = (term2764 A B P _115314).
Proof. exact (MK_COMB (@lem8406471 A B P) (@lem8406470 A B P _115314)). Qed.
Lemma lem8406473 {A B P : Type'} (_115314 : type1080 A B P) : (term2747 A B P _115314) = (term2765 A B P _115314).
Proof. exact (MK_COMB (@lem8406468 A B P _115314) (@lem8406472 A B P _115314)). Qed.
Lemma lem8406474 {A B P : Type'} (_115314 : type1080 A B P) : ((term2746 A B P _115314) = (term2747 A B P _115314)) = ((term2743 A B P _115314) = (term2765 A B P _115314)).
Proof. exact (MK_COMB (@lem8406462 A B P _115314) (@lem8406473 A B P _115314)). Qed.
Lemma lem8406475 {A B P : Type'} (_115314 : type1080 A B P) : (term2743 A B P _115314) = (term2765 A B P _115314).
Proof. exact (EQ_MP (@lem8406474 A B P _115314) (@lem8406452 A B P _115314)). Qed.
Lemma lem8406612 {A B P : Type'} (_115314 : type1080 A B P) : (term2695 A B P _115314) = (term2765 A B P _115314).
Proof. exact (TRANS (@lem8406448 A B P _115314) (@lem8406475 A B P _115314)). Qed.
Lemma lem8406614 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1140 A P Q) = (term1141 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8406615 {A P : Type'} (P' : Prop) (Q : type805 A P) : (term2124 A P P' Q) = (term2125 A P P' Q).
Proof. exact (@lem8406614 (P -> A) P' Q). Qed.
Lemma lem8406616 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2766 A B P _115314 f clauses f') = (term2767 A B P _115314 f clauses f').
Proof. exact (@lem8406615 A P (_115314 clauses f' f) (term2679 A B P f clauses f')). Qed.
Lemma lem8406617 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term2768 A B P f clauses f' s) = (term2673 A B P f clauses s f').
Proof. exact (eq_refl (term2768 A B P f clauses f' s)). Qed.
Lemma lem8406618 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2769 A B P f clauses f') = (term2679 A B P f clauses f').
Proof. exact (fun_ext (fun s : P -> A => @lem8406617 A B P f clauses s f')). Qed.
Lemma lem8406619 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8406620 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2770 A B P f clauses f') = (term2680 A B P f clauses f').
Proof. exact (MK_COMB (@lem8406619 A P) (@lem8406618 A B P f clauses f')). Qed.
Lemma lem8406621 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) (f' : type1177 A B P) : (term2683 A B P _115314 clauses f f') = (term2683 A B P _115314 clauses f f').
Proof. exact (eq_refl (term2683 A B P _115314 clauses f f')). Qed.
Lemma lem8406622 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2766 A B P _115314 f clauses f') = (term2685 A B P _115314 f clauses f').
Proof. exact (MK_COMB (@lem8406621 A B P _115314 clauses f' f) (@lem8406620 A B P f clauses f')). Qed.
Lemma lem8406623 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8406624 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2771 A B P _115314 f clauses f') = (term2772 A B P _115314 f clauses f').
Proof. exact (MK_COMB (@lem8406623) (@lem8406622 A B P _115314 f clauses f')). Qed.
Lemma lem8406625 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term2768 A B P f clauses f' s) = (term2673 A B P f clauses s f').
Proof. exact (eq_refl (term2768 A B P f clauses f' s)). Qed.
Lemma lem8406626 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) (f' : type1177 A B P) : (term2683 A B P _115314 clauses f f') = (term2683 A B P _115314 clauses f f').
Proof. exact (eq_refl (term2683 A B P _115314 clauses f f')). Qed.
Lemma lem8406627 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term2773 A B P _115314 f clauses f' s) = (term2774 A B P _115314 f clauses s f').
Proof. exact (MK_COMB (@lem8406626 A B P _115314 clauses f' f) (@lem8406625 A B P f clauses s f')). Qed.
Lemma lem8406628 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2775 A B P _115314 f clauses f') = (term2776 A B P _115314 f clauses f').
Proof. exact (fun_ext (fun s : P -> A => @lem8406627 A B P _115314 f clauses s f')). Qed.
Lemma lem8406629 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8406630 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2767 A B P _115314 f clauses f') = (term2777 A B P _115314 f clauses f').
Proof. exact (MK_COMB (@lem8406629 A P) (@lem8406628 A B P _115314 f clauses f')). Qed.
Lemma lem8406631 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : ((term2766 A B P _115314 f clauses f') = (term2767 A B P _115314 f clauses f')) = ((term2685 A B P _115314 f clauses f') = (term2777 A B P _115314 f clauses f')).
Proof. exact (MK_COMB (@lem8406624 A B P _115314 f clauses f') (@lem8406630 A B P _115314 f clauses f')). Qed.
Lemma lem8406632 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2685 A B P _115314 f clauses f') = (term2777 A B P _115314 f clauses f').
Proof. exact (EQ_MP (@lem8406631 A B P _115314 f clauses f') (@lem8406616 A B P _115314 f clauses f')). Qed.
Lemma lem8406634 {A : Type'} (P : Prop) (Q : A -> Prop) : (term1140 A P Q) = (term1141 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8406635 {A B P : Type'} (P' : Prop) (Q : type116 A B P) : (term1798 A B P P' Q) = (term1799 A B P P' Q).
Proof. exact (@lem8406634 (type558 A B P) P' Q). Qed.
Lemma lem8406636 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term2778 A B P _115314 f clauses s f') = (term2779 A B P _115314 f clauses s f').
Proof. exact (@lem8406635 A B P (_115314 clauses f' f) (term2672 A B P f clauses s f')). Qed.
Lemma lem8406637 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f' : A -> B) : (term2780 A B P f clauses s f' t) = (term2670 A B P f clauses s t f').
Proof. exact (eq_refl (term2780 A B P f clauses s f' t)). Qed.
Lemma lem8406638 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term2781 A B P f clauses s f') = (term2672 A B P f clauses s f').
Proof. exact (fun_ext (fun t : type558 A B P => @lem8406637 A B P f clauses s t f')). Qed.
Lemma lem8406639 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8406640 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term2782 A B P f clauses s f') = (term2673 A B P f clauses s f').
Proof. exact (MK_COMB (@lem8406639 A B P) (@lem8406638 A B P f clauses s f')). Qed.
Lemma lem8406641 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) (f' : type1177 A B P) : (term2683 A B P _115314 clauses f f') = (term2683 A B P _115314 clauses f f').
Proof. exact (eq_refl (term2683 A B P _115314 clauses f f')). Qed.
Lemma lem8406642 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term2778 A B P _115314 f clauses s f') = (term2774 A B P _115314 f clauses s f').
Proof. exact (MK_COMB (@lem8406641 A B P _115314 clauses f' f) (@lem8406640 A B P f clauses s f')). Qed.
Lemma lem8406643 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8406644 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term2783 A B P _115314 f clauses s f') = (term2784 A B P _115314 f clauses s f').
Proof. exact (MK_COMB (@lem8406643) (@lem8406642 A B P _115314 f clauses s f')). Qed.
Lemma lem8406645 {A B P : Type'} (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f' : A -> B) : (term2780 A B P f clauses s f' t) = (term2670 A B P f clauses s t f').
Proof. exact (eq_refl (term2780 A B P f clauses s f' t)). Qed.
Lemma lem8406646 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) (f' : type1177 A B P) : (term2683 A B P _115314 clauses f f') = (term2683 A B P _115314 clauses f f').
Proof. exact (eq_refl (term2683 A B P _115314 clauses f f')). Qed.
Lemma lem8406647 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (f' : A -> B) : (term2785 A B P _115314 f clauses s f' t) = (term2786 A B P _115314 f clauses s t f').
Proof. exact (MK_COMB (@lem8406646 A B P _115314 clauses f' f) (@lem8406645 A B P f clauses s t f')). Qed.
Lemma lem8406648 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term2787 A B P _115314 f clauses s f') = (term2788 A B P _115314 f clauses s f').
Proof. exact (fun_ext (fun t : type558 A B P => @lem8406647 A B P _115314 f clauses s t f')). Qed.
Lemma lem8406649 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8406650 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term2779 A B P _115314 f clauses s f') = (term2789 A B P _115314 f clauses s f').
Proof. exact (MK_COMB (@lem8406649 A B P) (@lem8406648 A B P _115314 f clauses s f')). Qed.
Lemma lem8406651 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : ((term2778 A B P _115314 f clauses s f') = (term2779 A B P _115314 f clauses s f')) = ((term2774 A B P _115314 f clauses s f') = (term2789 A B P _115314 f clauses s f')).
Proof. exact (MK_COMB (@lem8406644 A B P _115314 f clauses s f') (@lem8406650 A B P _115314 f clauses s f')). Qed.
Lemma lem8406652 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term2774 A B P _115314 f clauses s f') = (term2789 A B P _115314 f clauses s f').
Proof. exact (EQ_MP (@lem8406651 A B P _115314 f clauses s f') (@lem8406636 A B P _115314 f clauses s f')). Qed.
Lemma lem8406653 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2776 A B P _115314 f clauses f') = (term2790 A B P _115314 f clauses f').
Proof. exact (fun_ext (fun s : P -> A => @lem8406652 A B P _115314 f clauses s f')). Qed.
Lemma lem8406654 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8406655 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2777 A B P _115314 f clauses f') = (term2791 A B P _115314 f clauses f').
Proof. exact (MK_COMB (@lem8406654 A P) (@lem8406653 A B P _115314 f clauses f')). Qed.
Lemma lem8406656 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2685 A B P _115314 f clauses f') = (term2791 A B P _115314 f clauses f').
Proof. exact (TRANS (@lem8406632 A B P _115314 f clauses f') (@lem8406655 A B P _115314 f clauses f')). Qed.
Lemma lem8406657 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2700 A B P _115314 clauses f) = (term2792 A B P _115314 clauses f).
Proof. exact (fun_ext (fun f' : type1177 A B P => @lem8406656 A B P _115314 f' clauses f)). Qed.
Lemma lem8406658 {A B P : Type'} : (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) = (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop))). Qed.
Lemma lem8406659 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2711 A B P _115314 clauses f) = (term2793 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8406658 A B P) (@lem8406657 A B P _115314 clauses f)). Qed.
Lemma lem8406661 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8406662 {A B P : Type'} (P' : type298 A B P) : (term2794 A B P P') = (term2795 A B P P').
Proof. exact (@lem8406661 (type1177 A B P) (P -> A) P'). Qed.
Lemma lem8406663 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2796 A B P _115314 clauses f) = (term2797 A B P _115314 clauses f).
Proof. exact (@lem8406662 A B P (term2798 A B P _115314 clauses f)). Qed.
Lemma lem8406664 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2799 A B P _115314 clauses f' f) = (term2790 A B P _115314 f clauses f').
Proof. exact (eq_refl (term2799 A B P _115314 clauses f' f)). Qed.
Lemma lem8406665 {A P : Type'} (s : P -> A) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8406666 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) (s : P -> A) : (term2800 A B P _115314 clauses f' f s) = (term2801 A B P _115314 f clauses f' s).
Proof. exact (MK_COMB (@lem8406664 A B P _115314 f clauses f') (@lem8406665 A P s)). Qed.
Lemma lem8406667 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term2801 A B P _115314 f clauses f' s) = (term2789 A B P _115314 f clauses s f').
Proof. exact (eq_refl (term2801 A B P _115314 f clauses f' s)). Qed.
Lemma lem8406668 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (s : P -> A) (f' : A -> B) : (term2800 A B P _115314 clauses f' f s) = (term2789 A B P _115314 f clauses s f').
Proof. exact (TRANS (@lem8406666 A B P _115314 f clauses f' s) (@lem8406667 A B P _115314 f clauses s f')). Qed.
Lemma lem8406669 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2802 A B P _115314 clauses f' f) = (term2790 A B P _115314 f clauses f').
Proof. exact (fun_ext (fun s : P -> A => @lem8406668 A B P _115314 f clauses s f')). Qed.
Lemma lem8406670 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8406671 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2803 A B P _115314 clauses f' f) = (term2791 A B P _115314 f clauses f').
Proof. exact (MK_COMB (@lem8406670 A P) (@lem8406669 A B P _115314 f clauses f')). Qed.
Lemma lem8406672 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2804 A B P _115314 clauses f) = (term2792 A B P _115314 clauses f).
Proof. exact (fun_ext (fun f' : type1177 A B P => @lem8406671 A B P _115314 f' clauses f)). Qed.
Lemma lem8406673 {A B P : Type'} : (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) = (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop))). Qed.
Lemma lem8406674 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2796 A B P _115314 clauses f) = (term2793 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8406673 A B P) (@lem8406672 A B P _115314 clauses f)). Qed.
Lemma lem8406675 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8406676 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2805 A B P _115314 clauses f) = (term2806 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8406675) (@lem8406674 A B P _115314 clauses f)). Qed.
Lemma lem8406677 {A B P : Type'} (_115314 : type1080 A B P) (f : type1177 A B P) (clauses : type1635 A B P) (f' : A -> B) : (term2799 A B P _115314 clauses f' f) = (term2790 A B P _115314 f clauses f').
Proof. exact (eq_refl (term2799 A B P _115314 clauses f' f)). Qed.
Lemma lem8406678 {A B P : Type'} (s : type300 A B P) (f : type1177 A B P) : (s f) = (s f).
Proof. exact (eq_refl (s f)). Qed.
Lemma lem8406679 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) (s : type300 A B P) (f' : type1177 A B P) : (term2807 A B P _115314 clauses f s f') = (term2808 A B P _115314 clauses f s f').
Proof. exact (MK_COMB (@lem8406677 A B P _115314 f' clauses f) (@lem8406678 A B P s f')). Qed.
Lemma lem8406680 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (f : type1177 A B P) (f' : A -> B) : (term2808 A B P _115314 clauses f' s f) = (term2809 A B P _115314 clauses s f f').
Proof. exact (eq_refl (term2808 A B P _115314 clauses f' s f)). Qed.
Lemma lem8406681 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (f : type1177 A B P) (f' : A -> B) : (term2807 A B P _115314 clauses f' s f) = (term2809 A B P _115314 clauses s f f').
Proof. exact (TRANS (@lem8406679 A B P _115314 clauses f' s f) (@lem8406680 A B P _115314 clauses s f f')). Qed.
Lemma lem8406682 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (f : A -> B) : (term2810 A B P _115314 clauses f s) = (term2811 A B P _115314 clauses s f).
Proof. exact (fun_ext (fun f' : type1177 A B P => @lem8406681 A B P _115314 clauses s f' f)). Qed.
Lemma lem8406683 {A B P : Type'} : (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) = (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop))). Qed.
Lemma lem8406684 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (f : A -> B) : (term2812 A B P _115314 clauses f s) = (term2813 A B P _115314 clauses s f).
Proof. exact (MK_COMB (@lem8406683 A B P) (@lem8406682 A B P _115314 clauses s f)). Qed.
Lemma lem8406685 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2814 A B P _115314 clauses f) = (term2815 A B P _115314 clauses f).
Proof. exact (fun_ext (fun s : type300 A B P => @lem8406684 A B P _115314 clauses s f)). Qed.
Lemma lem8406686 {A B P : Type'} : (@ex (((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A)) = (@ex (((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex (((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A))). Qed.
Lemma lem8406687 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2797 A B P _115314 clauses f) = (term2816 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8406686 A B P) (@lem8406685 A B P _115314 clauses f)). Qed.
Lemma lem8406688 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : ((term2796 A B P _115314 clauses f) = (term2797 A B P _115314 clauses f)) = ((term2793 A B P _115314 clauses f) = (term2816 A B P _115314 clauses f)).
Proof. exact (MK_COMB (@lem8406676 A B P _115314 clauses f) (@lem8406687 A B P _115314 clauses f)). Qed.
Lemma lem8406689 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2793 A B P _115314 clauses f) = (term2816 A B P _115314 clauses f).
Proof. exact (EQ_MP (@lem8406688 A B P _115314 clauses f) (@lem8406663 A B P _115314 clauses f)). Qed.
Lemma lem8406691 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8406692 {A B P : Type'} (P' : type296 A B P) : (term2817 A B P P') = (term2818 A B P P').
Proof. exact (@lem8406691 (type1177 A B P) (type558 A B P) P'). Qed.
Lemma lem8406693 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (f : A -> B) : (term2819 A B P _115314 clauses s f) = (term2820 A B P _115314 clauses s f).
Proof. exact (@lem8406692 A B P (term2821 A B P _115314 clauses s f)). Qed.
Lemma lem8406694 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (f : type1177 A B P) (f' : A -> B) : (term2822 A B P _115314 clauses s f' f) = (term2823 A B P _115314 clauses s f f').
Proof. exact (eq_refl (term2822 A B P _115314 clauses s f' f)). Qed.
Lemma lem8406695 {A B P : Type'} (t : type558 A B P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8406696 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (f : type1177 A B P) (f' : A -> B) (t : type558 A B P) : (term2824 A B P _115314 clauses s f' f t) = (term2825 A B P _115314 clauses s f f' t).
Proof. exact (MK_COMB (@lem8406694 A B P _115314 clauses s f f') (@lem8406695 A B P t)). Qed.
Lemma lem8406697 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (f : type1177 A B P) (t : type558 A B P) (f' : A -> B) : (term2825 A B P _115314 clauses s f f' t) = (term2826 A B P _115314 clauses s f t f').
Proof. exact (eq_refl (term2825 A B P _115314 clauses s f f' t)). Qed.
Lemma lem8406698 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (f : type1177 A B P) (t : type558 A B P) (f' : A -> B) : (term2824 A B P _115314 clauses s f' f t) = (term2826 A B P _115314 clauses s f t f').
Proof. exact (TRANS (@lem8406696 A B P _115314 clauses s f f' t) (@lem8406697 A B P _115314 clauses s f t f')). Qed.
Lemma lem8406699 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (f : type1177 A B P) (f' : A -> B) : (term2827 A B P _115314 clauses s f' f) = (term2823 A B P _115314 clauses s f f').
Proof. exact (fun_ext (fun t : type558 A B P => @lem8406698 A B P _115314 clauses s f t f')). Qed.
Lemma lem8406700 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8406701 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (f : type1177 A B P) (f' : A -> B) : (term2828 A B P _115314 clauses s f' f) = (term2809 A B P _115314 clauses s f f').
Proof. exact (MK_COMB (@lem8406700 A B P) (@lem8406699 A B P _115314 clauses s f f')). Qed.
Lemma lem8406702 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (f : A -> B) : (term2829 A B P _115314 clauses s f) = (term2811 A B P _115314 clauses s f).
Proof. exact (fun_ext (fun f' : type1177 A B P => @lem8406701 A B P _115314 clauses s f' f)). Qed.
Lemma lem8406703 {A B P : Type'} : (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) = (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop))). Qed.
Lemma lem8406704 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (f : A -> B) : (term2819 A B P _115314 clauses s f) = (term2813 A B P _115314 clauses s f).
Proof. exact (MK_COMB (@lem8406703 A B P) (@lem8406702 A B P _115314 clauses s f)). Qed.
Lemma lem8406705 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8406706 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (f : A -> B) : (term2830 A B P _115314 clauses s f) = (term2831 A B P _115314 clauses s f).
Proof. exact (MK_COMB (@lem8406705) (@lem8406704 A B P _115314 clauses s f)). Qed.
Lemma lem8406707 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (f : type1177 A B P) (f' : A -> B) : (term2822 A B P _115314 clauses s f' f) = (term2823 A B P _115314 clauses s f f').
Proof. exact (eq_refl (term2822 A B P _115314 clauses s f' f)). Qed.
Lemma lem8406708 {A B P : Type'} (t : type297 A B P) (f : type1177 A B P) : (t f) = (t f).
Proof. exact (eq_refl (t f)). Qed.
Lemma lem8406709 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (f : A -> B) (t : type297 A B P) (f' : type1177 A B P) : (term2832 A B P _115314 clauses s f t f') = (term2833 A B P _115314 clauses s f t f').
Proof. exact (MK_COMB (@lem8406707 A B P _115314 clauses s f' f) (@lem8406708 A B P t f')). Qed.
Lemma lem8406710 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (t : type297 A B P) (f : type1177 A B P) (f' : A -> B) : (term2833 A B P _115314 clauses s f' t f) = (term2834 A B P _115314 clauses s t f f').
Proof. exact (eq_refl (term2833 A B P _115314 clauses s f' t f)). Qed.
Lemma lem8406711 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (t : type297 A B P) (f : type1177 A B P) (f' : A -> B) : (term2832 A B P _115314 clauses s f' t f) = (term2834 A B P _115314 clauses s t f f').
Proof. exact (TRANS (@lem8406709 A B P _115314 clauses s f' t f) (@lem8406710 A B P _115314 clauses s t f f')). Qed.
Lemma lem8406712 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (t : type297 A B P) (f : A -> B) : (term2835 A B P _115314 clauses s f t) = (term2836 A B P _115314 clauses s t f).
Proof. exact (fun_ext (fun f' : type1177 A B P => @lem8406711 A B P _115314 clauses s t f' f)). Qed.
Lemma lem8406713 {A B P : Type'} : (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) = (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@all ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop))). Qed.
Lemma lem8406714 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (t : type297 A B P) (f : A -> B) : (term2837 A B P _115314 clauses s f t) = (term2838 A B P _115314 clauses s t f).
Proof. exact (MK_COMB (@lem8406713 A B P) (@lem8406712 A B P _115314 clauses s t f)). Qed.
Lemma lem8406715 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (f : A -> B) : (term2839 A B P _115314 clauses s f) = (term2840 A B P _115314 clauses s f).
Proof. exact (fun_ext (fun t : type297 A B P => @lem8406714 A B P _115314 clauses s t f)). Qed.
Lemma lem8406716 {A B P : Type'} : (@ex (((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> (A -> B) -> P -> B)) = (@ex (((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex (((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> (A -> B) -> P -> B))). Qed.
Lemma lem8406717 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (f : A -> B) : (term2820 A B P _115314 clauses s f) = (term2841 A B P _115314 clauses s f).
Proof. exact (MK_COMB (@lem8406716 A B P) (@lem8406715 A B P _115314 clauses s f)). Qed.
Lemma lem8406718 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (f : A -> B) : ((term2819 A B P _115314 clauses s f) = (term2820 A B P _115314 clauses s f)) = ((term2813 A B P _115314 clauses s f) = (term2841 A B P _115314 clauses s f)).
Proof. exact (MK_COMB (@lem8406706 A B P _115314 clauses s f) (@lem8406717 A B P _115314 clauses s f)). Qed.
Lemma lem8406719 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (f : A -> B) : (term2813 A B P _115314 clauses s f) = (term2841 A B P _115314 clauses s f).
Proof. exact (EQ_MP (@lem8406718 A B P _115314 clauses s f) (@lem8406693 A B P _115314 clauses s f)). Qed.
Lemma lem8406720 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2815 A B P _115314 clauses f) = (term2842 A B P _115314 clauses f).
Proof. exact (fun_ext (fun s : type300 A B P => @lem8406719 A B P _115314 clauses s f)). Qed.
Lemma lem8406721 {A B P : Type'} : (@ex (((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A)) = (@ex (((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex (((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A))). Qed.
Lemma lem8406722 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2816 A B P _115314 clauses f) = (term2843 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8406721 A B P) (@lem8406720 A B P _115314 clauses f)). Qed.
Lemma lem8406723 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2793 A B P _115314 clauses f) = (term2843 A B P _115314 clauses f).
Proof. exact (TRANS (@lem8406689 A B P _115314 clauses f) (@lem8406722 A B P _115314 clauses f)). Qed.
Lemma lem8406724 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2711 A B P _115314 clauses f) = (term2843 A B P _115314 clauses f).
Proof. exact (TRANS (@lem8406659 A B P _115314 clauses f) (@lem8406723 A B P _115314 clauses f)). Qed.
Lemma lem8406725 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2724 A B P _115314 clauses) = (term2844 A B P _115314 clauses).
Proof. exact (fun_ext (fun f : A -> B => @lem8406724 A B P _115314 clauses f)). Qed.
Lemma lem8406726 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8406727 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2735 A B P _115314 clauses) = (term2845 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8406726 A B) (@lem8406725 A B P _115314 clauses)). Qed.
Lemma lem8406729 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8406730 {A B P : Type'} (P' : type491 A B P) : (term2846 A B P P') = (term2847 A B P P').
Proof. exact (@lem8406729 (A -> B) (type300 A B P) P'). Qed.
Lemma lem8406731 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2848 A B P _115314 clauses) = (term2849 A B P _115314 clauses).
Proof. exact (@lem8406730 A B P (term2850 A B P _115314 clauses)). Qed.
Lemma lem8406732 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2851 A B P _115314 clauses f) = (term2842 A B P _115314 clauses f).
Proof. exact (eq_refl (term2851 A B P _115314 clauses f)). Qed.
Lemma lem8406733 {A B P : Type'} (s : type300 A B P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8406734 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) (s : type300 A B P) : (term2852 A B P _115314 clauses f s) = (term2853 A B P _115314 clauses f s).
Proof. exact (MK_COMB (@lem8406732 A B P _115314 clauses f) (@lem8406733 A B P s)). Qed.
Lemma lem8406735 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (f : A -> B) : (term2853 A B P _115314 clauses f s) = (term2841 A B P _115314 clauses s f).
Proof. exact (eq_refl (term2853 A B P _115314 clauses f s)). Qed.
Lemma lem8406736 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type300 A B P) (f : A -> B) : (term2852 A B P _115314 clauses f s) = (term2841 A B P _115314 clauses s f).
Proof. exact (TRANS (@lem8406734 A B P _115314 clauses f s) (@lem8406735 A B P _115314 clauses s f)). Qed.
Lemma lem8406737 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2854 A B P _115314 clauses f) = (term2842 A B P _115314 clauses f).
Proof. exact (fun_ext (fun s : type300 A B P => @lem8406736 A B P _115314 clauses s f)). Qed.
Lemma lem8406738 {A B P : Type'} : (@ex (((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A)) = (@ex (((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex (((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A))). Qed.
Lemma lem8406739 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2855 A B P _115314 clauses f) = (term2843 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8406738 A B P) (@lem8406737 A B P _115314 clauses f)). Qed.
Lemma lem8406740 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2856 A B P _115314 clauses) = (term2844 A B P _115314 clauses).
Proof. exact (fun_ext (fun f : A -> B => @lem8406739 A B P _115314 clauses f)). Qed.
Lemma lem8406741 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8406742 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2848 A B P _115314 clauses) = (term2845 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8406741 A B) (@lem8406740 A B P _115314 clauses)). Qed.
Lemma lem8406743 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8406744 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2857 A B P _115314 clauses) = (term2858 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8406743) (@lem8406742 A B P _115314 clauses)). Qed.
Lemma lem8406745 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term2851 A B P _115314 clauses f) = (term2842 A B P _115314 clauses f).
Proof. exact (eq_refl (term2851 A B P _115314 clauses f)). Qed.
Lemma lem8406746 {A B P : Type'} (s : type511 A B P) (f : A -> B) : (s f) = (s f).
Proof. exact (eq_refl (s f)). Qed.
Lemma lem8406747 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) (f : A -> B) : (term2859 A B P _115314 clauses s f) = (term2860 A B P _115314 clauses s f).
Proof. exact (MK_COMB (@lem8406745 A B P _115314 clauses f) (@lem8406746 A B P s f)). Qed.
Lemma lem8406748 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) (f : A -> B) : (term2860 A B P _115314 clauses s f) = (term2861 A B P _115314 clauses s f).
Proof. exact (eq_refl (term2860 A B P _115314 clauses s f)). Qed.
Lemma lem8406749 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) (f : A -> B) : (term2859 A B P _115314 clauses s f) = (term2861 A B P _115314 clauses s f).
Proof. exact (TRANS (@lem8406747 A B P _115314 clauses s f) (@lem8406748 A B P _115314 clauses s f)). Qed.
Lemma lem8406750 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) : (term2862 A B P _115314 clauses s) = (term2863 A B P _115314 clauses s).
Proof. exact (fun_ext (fun f : A -> B => @lem8406749 A B P _115314 clauses s f)). Qed.
Lemma lem8406751 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8406752 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) : (term2864 A B P _115314 clauses s) = (term2865 A B P _115314 clauses s).
Proof. exact (MK_COMB (@lem8406751 A B) (@lem8406750 A B P _115314 clauses s)). Qed.
Lemma lem8406753 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2866 A B P _115314 clauses) = (term2867 A B P _115314 clauses).
Proof. exact (fun_ext (fun s : type511 A B P => @lem8406752 A B P _115314 clauses s)). Qed.
Lemma lem8406754 {A B P : Type'} : (@ex ((A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A)) = (@ex ((A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex ((A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A))). Qed.
Lemma lem8406755 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2849 A B P _115314 clauses) = (term2868 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8406754 A B P) (@lem8406753 A B P _115314 clauses)). Qed.
Lemma lem8406756 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : ((term2848 A B P _115314 clauses) = (term2849 A B P _115314 clauses)) = ((term2845 A B P _115314 clauses) = (term2868 A B P _115314 clauses)).
Proof. exact (MK_COMB (@lem8406744 A B P _115314 clauses) (@lem8406755 A B P _115314 clauses)). Qed.
Lemma lem8406757 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2845 A B P _115314 clauses) = (term2868 A B P _115314 clauses).
Proof. exact (EQ_MP (@lem8406756 A B P _115314 clauses) (@lem8406731 A B P _115314 clauses)). Qed.
Lemma lem8406759 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8406760 {A B P : Type'} (P' : type490 A B P) : (term2869 A B P P') = (term2870 A B P P').
Proof. exact (@lem8406759 (A -> B) (type297 A B P) P'). Qed.
Lemma lem8406761 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) : (term2871 A B P _115314 clauses s) = (term2872 A B P _115314 clauses s).
Proof. exact (@lem8406760 A B P (term2873 A B P _115314 clauses s)). Qed.
Lemma lem8406762 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) (f : A -> B) : (term2874 A B P _115314 clauses s f) = (term2875 A B P _115314 clauses s f).
Proof. exact (eq_refl (term2874 A B P _115314 clauses s f)). Qed.
Lemma lem8406763 {A B P : Type'} (t : type297 A B P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8406764 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) (f : A -> B) (t : type297 A B P) : (term2876 A B P _115314 clauses s f t) = (term2877 A B P _115314 clauses s f t).
Proof. exact (MK_COMB (@lem8406762 A B P _115314 clauses s f) (@lem8406763 A B P t)). Qed.
Lemma lem8406765 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) (t : type297 A B P) (f : A -> B) : (term2877 A B P _115314 clauses s f t) = (term2878 A B P _115314 clauses s t f).
Proof. exact (eq_refl (term2877 A B P _115314 clauses s f t)). Qed.
Lemma lem8406766 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) (t : type297 A B P) (f : A -> B) : (term2876 A B P _115314 clauses s f t) = (term2878 A B P _115314 clauses s t f).
Proof. exact (TRANS (@lem8406764 A B P _115314 clauses s f t) (@lem8406765 A B P _115314 clauses s t f)). Qed.
Lemma lem8406767 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) (f : A -> B) : (term2879 A B P _115314 clauses s f) = (term2875 A B P _115314 clauses s f).
Proof. exact (fun_ext (fun t : type297 A B P => @lem8406766 A B P _115314 clauses s t f)). Qed.
Lemma lem8406768 {A B P : Type'} : (@ex (((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> (A -> B) -> P -> B)) = (@ex (((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex (((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> (A -> B) -> P -> B))). Qed.
Lemma lem8406769 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) (f : A -> B) : (term2880 A B P _115314 clauses s f) = (term2861 A B P _115314 clauses s f).
Proof. exact (MK_COMB (@lem8406768 A B P) (@lem8406767 A B P _115314 clauses s f)). Qed.
Lemma lem8406770 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) : (term2881 A B P _115314 clauses s) = (term2863 A B P _115314 clauses s).
Proof. exact (fun_ext (fun f : A -> B => @lem8406769 A B P _115314 clauses s f)). Qed.
Lemma lem8406771 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8406772 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) : (term2871 A B P _115314 clauses s) = (term2865 A B P _115314 clauses s).
Proof. exact (MK_COMB (@lem8406771 A B) (@lem8406770 A B P _115314 clauses s)). Qed.
Lemma lem8406773 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8406774 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) : (term2882 A B P _115314 clauses s) = (term2883 A B P _115314 clauses s).
Proof. exact (MK_COMB (@lem8406773) (@lem8406772 A B P _115314 clauses s)). Qed.
Lemma lem8406775 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) (f : A -> B) : (term2874 A B P _115314 clauses s f) = (term2875 A B P _115314 clauses s f).
Proof. exact (eq_refl (term2874 A B P _115314 clauses s f)). Qed.
Lemma lem8406776 {A B P : Type'} (t : type510 A B P) (f : A -> B) : (t f) = (t f).
Proof. exact (eq_refl (t f)). Qed.
Lemma lem8406777 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) (t : type510 A B P) (f : A -> B) : (term2884 A B P _115314 clauses s t f) = (term2885 A B P _115314 clauses s t f).
Proof. exact (MK_COMB (@lem8406775 A B P _115314 clauses s f) (@lem8406776 A B P t f)). Qed.
Lemma lem8406778 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) (t : type510 A B P) (f : A -> B) : (term2885 A B P _115314 clauses s t f) = (term2886 A B P _115314 clauses s t f).
Proof. exact (eq_refl (term2885 A B P _115314 clauses s t f)). Qed.
Lemma lem8406779 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) (t : type510 A B P) (f : A -> B) : (term2884 A B P _115314 clauses s t f) = (term2886 A B P _115314 clauses s t f).
Proof. exact (TRANS (@lem8406777 A B P _115314 clauses s t f) (@lem8406778 A B P _115314 clauses s t f)). Qed.
Lemma lem8406780 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) (t : type510 A B P) : (term2887 A B P _115314 clauses s t) = (term2888 A B P _115314 clauses s t).
Proof. exact (fun_ext (fun f : A -> B => @lem8406779 A B P _115314 clauses s t f)). Qed.
Lemma lem8406781 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8406782 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) (t : type510 A B P) : (term2889 A B P _115314 clauses s t) = (term2890 A B P _115314 clauses s t).
Proof. exact (MK_COMB (@lem8406781 A B) (@lem8406780 A B P _115314 clauses s t)). Qed.
Lemma lem8406783 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) : (term2891 A B P _115314 clauses s) = (term2892 A B P _115314 clauses s).
Proof. exact (fun_ext (fun t : type510 A B P => @lem8406782 A B P _115314 clauses s t)). Qed.
Lemma lem8406784 {A B P : Type'} : (@ex ((A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> (A -> B) -> P -> B)) = (@ex ((A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> (A -> B) -> P -> B))). Qed.
Lemma lem8406785 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) : (term2872 A B P _115314 clauses s) = (term2893 A B P _115314 clauses s).
Proof. exact (MK_COMB (@lem8406784 A B P) (@lem8406783 A B P _115314 clauses s)). Qed.
Lemma lem8406786 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) : ((term2871 A B P _115314 clauses s) = (term2872 A B P _115314 clauses s)) = ((term2865 A B P _115314 clauses s) = (term2893 A B P _115314 clauses s)).
Proof. exact (MK_COMB (@lem8406774 A B P _115314 clauses s) (@lem8406785 A B P _115314 clauses s)). Qed.
Lemma lem8406787 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) : (term2865 A B P _115314 clauses s) = (term2893 A B P _115314 clauses s).
Proof. exact (EQ_MP (@lem8406786 A B P _115314 clauses s) (@lem8406761 A B P _115314 clauses s)). Qed.
Lemma lem8406788 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2867 A B P _115314 clauses) = (term2894 A B P _115314 clauses).
Proof. exact (fun_ext (fun s : type511 A B P => @lem8406787 A B P _115314 clauses s)). Qed.
Lemma lem8406789 {A B P : Type'} : (@ex ((A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A)) = (@ex ((A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex ((A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A))). Qed.
Lemma lem8406790 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2868 A B P _115314 clauses) = (term2895 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8406789 A B P) (@lem8406788 A B P _115314 clauses)). Qed.
Lemma lem8406791 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2845 A B P _115314 clauses) = (term2895 A B P _115314 clauses).
Proof. exact (TRANS (@lem8406757 A B P _115314 clauses) (@lem8406790 A B P _115314 clauses)). Qed.
Lemma lem8406792 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2735 A B P _115314 clauses) = (term2895 A B P _115314 clauses).
Proof. exact (TRANS (@lem8406727 A B P _115314 clauses) (@lem8406791 A B P _115314 clauses)). Qed.
Lemma lem8406793 {A B P : Type'} (_115314 : type1080 A B P) : (term2748 A B P _115314) = (term2896 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8406792 A B P _115314 clauses)). Qed.
Lemma lem8406794 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8406795 {A B P : Type'} (_115314 : type1080 A B P) : (term2759 A B P _115314) = (term2897 A B P _115314).
Proof. exact (MK_COMB (@lem8406794 A B P) (@lem8406793 A B P _115314)). Qed.
Lemma lem8406797 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8406798 {A B P : Type'} (P' : type1074 A B P) : (term2898 A B P P') = (term2899 A B P P').
Proof. exact (@lem8406797 (type1635 A B P) (type511 A B P) P'). Qed.
Lemma lem8406799 {A B P : Type'} (_115314 : type1080 A B P) : (term2900 A B P _115314) = (term2901 A B P _115314).
Proof. exact (@lem8406798 A B P (term2902 A B P _115314)). Qed.
Lemma lem8406800 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2903 A B P _115314 clauses) = (term2894 A B P _115314 clauses).
Proof. exact (eq_refl (term2903 A B P _115314 clauses)). Qed.
Lemma lem8406801 {A B P : Type'} (s : type511 A B P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8406802 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) : (term2904 A B P _115314 clauses s) = (term2905 A B P _115314 clauses s).
Proof. exact (MK_COMB (@lem8406800 A B P _115314 clauses) (@lem8406801 A B P s)). Qed.
Lemma lem8406803 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) : (term2905 A B P _115314 clauses s) = (term2893 A B P _115314 clauses s).
Proof. exact (eq_refl (term2905 A B P _115314 clauses s)). Qed.
Lemma lem8406804 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type511 A B P) : (term2904 A B P _115314 clauses s) = (term2893 A B P _115314 clauses s).
Proof. exact (TRANS (@lem8406802 A B P _115314 clauses s) (@lem8406803 A B P _115314 clauses s)). Qed.
Lemma lem8406805 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2906 A B P _115314 clauses) = (term2894 A B P _115314 clauses).
Proof. exact (fun_ext (fun s : type511 A B P => @lem8406804 A B P _115314 clauses s)). Qed.
Lemma lem8406806 {A B P : Type'} : (@ex ((A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A)) = (@ex ((A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex ((A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A))). Qed.
Lemma lem8406807 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2907 A B P _115314 clauses) = (term2895 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8406806 A B P) (@lem8406805 A B P _115314 clauses)). Qed.
Lemma lem8406808 {A B P : Type'} (_115314 : type1080 A B P) : (term2908 A B P _115314) = (term2896 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8406807 A B P _115314 clauses)). Qed.
Lemma lem8406809 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8406810 {A B P : Type'} (_115314 : type1080 A B P) : (term2900 A B P _115314) = (term2897 A B P _115314).
Proof. exact (MK_COMB (@lem8406809 A B P) (@lem8406808 A B P _115314)). Qed.
Lemma lem8406811 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8406812 {A B P : Type'} (_115314 : type1080 A B P) : (term2909 A B P _115314) = (term2910 A B P _115314).
Proof. exact (MK_COMB (@lem8406811) (@lem8406810 A B P _115314)). Qed.
Lemma lem8406813 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term2903 A B P _115314 clauses) = (term2894 A B P _115314 clauses).
Proof. exact (eq_refl (term2903 A B P _115314 clauses)). Qed.
Lemma lem8406814 {A B P : Type'} (s : type1079 A B P) (clauses : type1635 A B P) : (s clauses) = (s clauses).
Proof. exact (eq_refl (s clauses)). Qed.
Lemma lem8406815 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) (clauses : type1635 A B P) : (term2911 A B P _115314 s clauses) = (term2912 A B P _115314 s clauses).
Proof. exact (MK_COMB (@lem8406813 A B P _115314 clauses) (@lem8406814 A B P s clauses)). Qed.
Lemma lem8406816 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) (clauses : type1635 A B P) : (term2912 A B P _115314 s clauses) = (term2913 A B P _115314 s clauses).
Proof. exact (eq_refl (term2912 A B P _115314 s clauses)). Qed.
Lemma lem8406817 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) (clauses : type1635 A B P) : (term2911 A B P _115314 s clauses) = (term2913 A B P _115314 s clauses).
Proof. exact (TRANS (@lem8406815 A B P _115314 s clauses) (@lem8406816 A B P _115314 s clauses)). Qed.
Lemma lem8406818 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) : (term2914 A B P _115314 s) = (term2915 A B P _115314 s).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8406817 A B P _115314 s clauses)). Qed.
Lemma lem8406819 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8406820 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) : (term2916 A B P _115314 s) = (term2917 A B P _115314 s).
Proof. exact (MK_COMB (@lem8406819 A B P) (@lem8406818 A B P _115314 s)). Qed.
Lemma lem8406821 {A B P : Type'} (_115314 : type1080 A B P) : (term2918 A B P _115314) = (term2919 A B P _115314).
Proof. exact (fun_ext (fun s : type1079 A B P => @lem8406820 A B P _115314 s)). Qed.
Lemma lem8406822 {A B P : Type'} : (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A)) = (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A))). Qed.
Lemma lem8406823 {A B P : Type'} (_115314 : type1080 A B P) : (term2901 A B P _115314) = (term2920 A B P _115314).
Proof. exact (MK_COMB (@lem8406822 A B P) (@lem8406821 A B P _115314)). Qed.
Lemma lem8406824 {A B P : Type'} (_115314 : type1080 A B P) : ((term2900 A B P _115314) = (term2901 A B P _115314)) = ((term2897 A B P _115314) = (term2920 A B P _115314)).
Proof. exact (MK_COMB (@lem8406812 A B P _115314) (@lem8406823 A B P _115314)). Qed.
Lemma lem8406825 {A B P : Type'} (_115314 : type1080 A B P) : (term2897 A B P _115314) = (term2920 A B P _115314).
Proof. exact (EQ_MP (@lem8406824 A B P _115314) (@lem8406799 A B P _115314)). Qed.
Lemma lem8406827 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8406828 {A B P : Type'} (P' : type1073 A B P) : (term2921 A B P P') = (term2922 A B P P').
Proof. exact (@lem8406827 (type1635 A B P) (type510 A B P) P'). Qed.
Lemma lem8406829 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) : (term2923 A B P _115314 s) = (term2924 A B P _115314 s).
Proof. exact (@lem8406828 A B P (term2925 A B P _115314 s)). Qed.
Lemma lem8406830 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) (clauses : type1635 A B P) : (term2926 A B P _115314 s clauses) = (term2927 A B P _115314 s clauses).
Proof. exact (eq_refl (term2926 A B P _115314 s clauses)). Qed.
Lemma lem8406831 {A B P : Type'} (t : type510 A B P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8406832 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) (clauses : type1635 A B P) (t : type510 A B P) : (term2928 A B P _115314 s clauses t) = (term2929 A B P _115314 s clauses t).
Proof. exact (MK_COMB (@lem8406830 A B P _115314 s clauses) (@lem8406831 A B P t)). Qed.
Lemma lem8406833 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) (clauses : type1635 A B P) (t : type510 A B P) : (term2929 A B P _115314 s clauses t) = (term2930 A B P _115314 s clauses t).
Proof. exact (eq_refl (term2929 A B P _115314 s clauses t)). Qed.
Lemma lem8406834 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) (clauses : type1635 A B P) (t : type510 A B P) : (term2928 A B P _115314 s clauses t) = (term2930 A B P _115314 s clauses t).
Proof. exact (TRANS (@lem8406832 A B P _115314 s clauses t) (@lem8406833 A B P _115314 s clauses t)). Qed.
Lemma lem8406835 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) (clauses : type1635 A B P) : (term2931 A B P _115314 s clauses) = (term2927 A B P _115314 s clauses).
Proof. exact (fun_ext (fun t : type510 A B P => @lem8406834 A B P _115314 s clauses t)). Qed.
Lemma lem8406836 {A B P : Type'} : (@ex ((A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> (A -> B) -> P -> B)) = (@ex ((A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> (A -> B) -> P -> B))). Qed.
Lemma lem8406837 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) (clauses : type1635 A B P) : (term2932 A B P _115314 s clauses) = (term2913 A B P _115314 s clauses).
Proof. exact (MK_COMB (@lem8406836 A B P) (@lem8406835 A B P _115314 s clauses)). Qed.
Lemma lem8406838 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) : (term2933 A B P _115314 s) = (term2915 A B P _115314 s).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8406837 A B P _115314 s clauses)). Qed.
Lemma lem8406839 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8406840 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) : (term2923 A B P _115314 s) = (term2917 A B P _115314 s).
Proof. exact (MK_COMB (@lem8406839 A B P) (@lem8406838 A B P _115314 s)). Qed.
Lemma lem8406841 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8406842 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) : (term2934 A B P _115314 s) = (term2935 A B P _115314 s).
Proof. exact (MK_COMB (@lem8406841) (@lem8406840 A B P _115314 s)). Qed.
Lemma lem8406843 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) (clauses : type1635 A B P) : (term2926 A B P _115314 s clauses) = (term2927 A B P _115314 s clauses).
Proof. exact (eq_refl (term2926 A B P _115314 s clauses)). Qed.
Lemma lem8406844 {A B P : Type'} (t : type1078 A B P) (clauses : type1635 A B P) : (t clauses) = (t clauses).
Proof. exact (eq_refl (t clauses)). Qed.
Lemma lem8406845 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) (t : type1078 A B P) (clauses : type1635 A B P) : (term2936 A B P _115314 s t clauses) = (term2937 A B P _115314 s t clauses).
Proof. exact (MK_COMB (@lem8406843 A B P _115314 s clauses) (@lem8406844 A B P t clauses)). Qed.
Lemma lem8406846 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) (t : type1078 A B P) (clauses : type1635 A B P) : (term2937 A B P _115314 s t clauses) = (term2938 A B P _115314 s t clauses).
Proof. exact (eq_refl (term2937 A B P _115314 s t clauses)). Qed.
Lemma lem8406847 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) (t : type1078 A B P) (clauses : type1635 A B P) : (term2936 A B P _115314 s t clauses) = (term2938 A B P _115314 s t clauses).
Proof. exact (TRANS (@lem8406845 A B P _115314 s t clauses) (@lem8406846 A B P _115314 s t clauses)). Qed.
Lemma lem8406848 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) (t : type1078 A B P) : (term2939 A B P _115314 s t) = (term2940 A B P _115314 s t).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8406847 A B P _115314 s t clauses)). Qed.
Lemma lem8406849 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8406850 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) (t : type1078 A B P) : (term2941 A B P _115314 s t) = (term2942 A B P _115314 s t).
Proof. exact (MK_COMB (@lem8406849 A B P) (@lem8406848 A B P _115314 s t)). Qed.
Lemma lem8406851 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) : (term2943 A B P _115314 s) = (term2944 A B P _115314 s).
Proof. exact (fun_ext (fun t : type1078 A B P => @lem8406850 A B P _115314 s t)). Qed.
Lemma lem8406852 {A B P : Type'} : (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> (A -> B) -> P -> B)) = (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> (A -> B) -> P -> B))). Qed.
Lemma lem8406853 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) : (term2924 A B P _115314 s) = (term2945 A B P _115314 s).
Proof. exact (MK_COMB (@lem8406852 A B P) (@lem8406851 A B P _115314 s)). Qed.
Lemma lem8406854 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) : ((term2923 A B P _115314 s) = (term2924 A B P _115314 s)) = ((term2917 A B P _115314 s) = (term2945 A B P _115314 s)).
Proof. exact (MK_COMB (@lem8406842 A B P _115314 s) (@lem8406853 A B P _115314 s)). Qed.
Lemma lem8406855 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) : (term2917 A B P _115314 s) = (term2945 A B P _115314 s).
Proof. exact (EQ_MP (@lem8406854 A B P _115314 s) (@lem8406829 A B P _115314 s)). Qed.
Lemma lem8406856 {A B P : Type'} (_115314 : type1080 A B P) : (term2919 A B P _115314) = (term2946 A B P _115314).
Proof. exact (fun_ext (fun s : type1079 A B P => @lem8406855 A B P _115314 s)). Qed.
Lemma lem8406857 {A B P : Type'} : (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A)) = (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A))). Qed.
Lemma lem8406858 {A B P : Type'} (_115314 : type1080 A B P) : (term2920 A B P _115314) = (term2947 A B P _115314).
Proof. exact (MK_COMB (@lem8406857 A B P) (@lem8406856 A B P _115314)). Qed.
Lemma lem8406859 {A B P : Type'} (_115314 : type1080 A B P) : (term2897 A B P _115314) = (term2947 A B P _115314).
Proof. exact (TRANS (@lem8406825 A B P _115314) (@lem8406858 A B P _115314)). Qed.
Lemma lem8406860 {A B P : Type'} (_115314 : type1080 A B P) : (term2759 A B P _115314) = (term2947 A B P _115314).
Proof. exact (TRANS (@lem8406795 A B P _115314) (@lem8406859 A B P _115314)). Qed.
Lemma lem8406861 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8406862 {A B P : Type'} (_115314 : type1080 A B P) : (term2761 A B P _115314) = (term2948 A B P _115314).
Proof. exact (MK_COMB (@lem8406861) (@lem8406860 A B P _115314)). Qed.
Lemma lem8406863 {A B P : Type'} (_115314 : type1080 A B P) : (term2764 A B P _115314) = (term2764 A B P _115314).
Proof. exact (eq_refl (term2764 A B P _115314)). Qed.
Lemma lem8406864 {A B P : Type'} (_115314 : type1080 A B P) : (term2765 A B P _115314) = (term2949 A B P _115314).
Proof. exact (MK_COMB (@lem8406862 A B P _115314) (@lem8406863 A B P _115314)). Qed.
Lemma lem8406866 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1332 A P Q) = (term1333 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8406867 {A B P : Type'} (P' : type268 A B P) (Q : Prop) : (term2950 A B P P' Q) = (term2951 A B P P' Q).
Proof. exact (@lem8406866 (type1079 A B P) P' Q). Qed.
Lemma lem8406868 {A B P : Type'} (_115314 : type1080 A B P) : (term2952 A B P _115314) = (term2953 A B P _115314).
Proof. exact (@lem8406867 A B P (term2946 A B P _115314) (term2764 A B P _115314)). Qed.
Lemma lem8406869 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) : (term2954 A B P _115314 s) = (term2945 A B P _115314 s).
Proof. exact (eq_refl (term2954 A B P _115314 s)). Qed.
Lemma lem8406870 {A B P : Type'} (_115314 : type1080 A B P) : (term2955 A B P _115314) = (term2946 A B P _115314).
Proof. exact (fun_ext (fun s : type1079 A B P => @lem8406869 A B P _115314 s)). Qed.
Lemma lem8406871 {A B P : Type'} : (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A)) = (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A))). Qed.
Lemma lem8406872 {A B P : Type'} (_115314 : type1080 A B P) : (term2956 A B P _115314) = (term2947 A B P _115314).
Proof. exact (MK_COMB (@lem8406871 A B P) (@lem8406870 A B P _115314)). Qed.
Lemma lem8406873 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8406874 {A B P : Type'} (_115314 : type1080 A B P) : (term2957 A B P _115314) = (term2948 A B P _115314).
Proof. exact (MK_COMB (@lem8406873) (@lem8406872 A B P _115314)). Qed.
Lemma lem8406875 {A B P : Type'} (_115314 : type1080 A B P) : (term2764 A B P _115314) = (term2764 A B P _115314).
Proof. exact (eq_refl (term2764 A B P _115314)). Qed.
Lemma lem8406876 {A B P : Type'} (_115314 : type1080 A B P) : (term2952 A B P _115314) = (term2949 A B P _115314).
Proof. exact (MK_COMB (@lem8406874 A B P _115314) (@lem8406875 A B P _115314)). Qed.
Lemma lem8406877 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8406878 {A B P : Type'} (_115314 : type1080 A B P) : (term2958 A B P _115314) = (term2959 A B P _115314).
Proof. exact (MK_COMB (@lem8406877) (@lem8406876 A B P _115314)). Qed.
Lemma lem8406879 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) : (term2954 A B P _115314 s) = (term2945 A B P _115314 s).
Proof. exact (eq_refl (term2954 A B P _115314 s)). Qed.
Lemma lem8406880 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8406881 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) : (term2960 A B P _115314 s) = (term2961 A B P _115314 s).
Proof. exact (MK_COMB (@lem8406880) (@lem8406879 A B P _115314 s)). Qed.
Lemma lem8406882 {A B P : Type'} (_115314 : type1080 A B P) : (term2764 A B P _115314) = (term2764 A B P _115314).
Proof. exact (eq_refl (term2764 A B P _115314)). Qed.
Lemma lem8406883 {A B P : Type'} (s : type1079 A B P) (_115314 : type1080 A B P) : (term2962 A B P s _115314) = (term2963 A B P s _115314).
Proof. exact (MK_COMB (@lem8406881 A B P _115314 s) (@lem8406882 A B P _115314)). Qed.
Lemma lem8406884 {A B P : Type'} (_115314 : type1080 A B P) : (term2964 A B P _115314) = (term2965 A B P _115314).
Proof. exact (fun_ext (fun s : type1079 A B P => @lem8406883 A B P s _115314)). Qed.
Lemma lem8406885 {A B P : Type'} : (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A)) = (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A))). Qed.
Lemma lem8406886 {A B P : Type'} (_115314 : type1080 A B P) : (term2953 A B P _115314) = (term2966 A B P _115314).
Proof. exact (MK_COMB (@lem8406885 A B P) (@lem8406884 A B P _115314)). Qed.
Lemma lem8406887 {A B P : Type'} (_115314 : type1080 A B P) : ((term2952 A B P _115314) = (term2953 A B P _115314)) = ((term2949 A B P _115314) = (term2966 A B P _115314)).
Proof. exact (MK_COMB (@lem8406878 A B P _115314) (@lem8406886 A B P _115314)). Qed.
Lemma lem8406888 {A B P : Type'} (_115314 : type1080 A B P) : (term2949 A B P _115314) = (term2966 A B P _115314).
Proof. exact (EQ_MP (@lem8406887 A B P _115314) (@lem8406868 A B P _115314)). Qed.
Lemma lem8406890 {A : Type'} (P : A -> Prop) (Q : Prop) : (term1332 A P Q) = (term1333 A P Q).
Proof. exact (EQ_MP (@lem18923 A P Q) (@lem18922 A P Q)). Qed.
Lemma lem8406891 {A B P : Type'} (P' : type267 A B P) (Q : Prop) : (term2967 A B P P' Q) = (term2968 A B P P' Q).
Proof. exact (@lem8406890 (type1078 A B P) P' Q). Qed.
Lemma lem8406892 {A B P : Type'} (s : type1079 A B P) (_115314 : type1080 A B P) : (term2969 A B P s _115314) = (term2970 A B P s _115314).
Proof. exact (@lem8406891 A B P (term2944 A B P _115314 s) (term2764 A B P _115314)). Qed.
Lemma lem8406893 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) (t : type1078 A B P) : (term2971 A B P _115314 s t) = (term2942 A B P _115314 s t).
Proof. exact (eq_refl (term2971 A B P _115314 s t)). Qed.
Lemma lem8406894 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) : (term2972 A B P _115314 s) = (term2944 A B P _115314 s).
Proof. exact (fun_ext (fun t : type1078 A B P => @lem8406893 A B P _115314 s t)). Qed.
Lemma lem8406895 {A B P : Type'} : (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> (A -> B) -> P -> B)) = (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> (A -> B) -> P -> B))). Qed.
Lemma lem8406896 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) : (term2973 A B P _115314 s) = (term2945 A B P _115314 s).
Proof. exact (MK_COMB (@lem8406895 A B P) (@lem8406894 A B P _115314 s)). Qed.
Lemma lem8406897 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8406898 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) : (term2974 A B P _115314 s) = (term2961 A B P _115314 s).
Proof. exact (MK_COMB (@lem8406897) (@lem8406896 A B P _115314 s)). Qed.
Lemma lem8406899 {A B P : Type'} (_115314 : type1080 A B P) : (term2764 A B P _115314) = (term2764 A B P _115314).
Proof. exact (eq_refl (term2764 A B P _115314)). Qed.
Lemma lem8406900 {A B P : Type'} (s : type1079 A B P) (_115314 : type1080 A B P) : (term2969 A B P s _115314) = (term2963 A B P s _115314).
Proof. exact (MK_COMB (@lem8406898 A B P _115314 s) (@lem8406899 A B P _115314)). Qed.
Lemma lem8406901 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8406902 {A B P : Type'} (s : type1079 A B P) (_115314 : type1080 A B P) : (term2975 A B P s _115314) = (term2976 A B P s _115314).
Proof. exact (MK_COMB (@lem8406901) (@lem8406900 A B P s _115314)). Qed.
Lemma lem8406903 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) (t : type1078 A B P) : (term2971 A B P _115314 s t) = (term2942 A B P _115314 s t).
Proof. exact (eq_refl (term2971 A B P _115314 s t)). Qed.
Lemma lem8406904 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8406905 {A B P : Type'} (_115314 : type1080 A B P) (s : type1079 A B P) (t : type1078 A B P) : (term2977 A B P _115314 s t) = (term2978 A B P _115314 s t).
Proof. exact (MK_COMB (@lem8406904) (@lem8406903 A B P _115314 s t)). Qed.
Lemma lem8406906 {A B P : Type'} (_115314 : type1080 A B P) : (term2764 A B P _115314) = (term2764 A B P _115314).
Proof. exact (eq_refl (term2764 A B P _115314)). Qed.
Lemma lem8406907 {A B P : Type'} (s : type1079 A B P) (t : type1078 A B P) (_115314 : type1080 A B P) : (term2979 A B P s t _115314) = (term2980 A B P s t _115314).
Proof. exact (MK_COMB (@lem8406905 A B P _115314 s t) (@lem8406906 A B P _115314)). Qed.
Lemma lem8406908 {A B P : Type'} (s : type1079 A B P) (_115314 : type1080 A B P) : (term2981 A B P s _115314) = (term2982 A B P s _115314).
Proof. exact (fun_ext (fun t : type1078 A B P => @lem8406907 A B P s t _115314)). Qed.
Lemma lem8406909 {A B P : Type'} : (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> (A -> B) -> P -> B)) = (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> (A -> B) -> P -> B))). Qed.
Lemma lem8406910 {A B P : Type'} (s : type1079 A B P) (_115314 : type1080 A B P) : (term2970 A B P s _115314) = (term2983 A B P s _115314).
Proof. exact (MK_COMB (@lem8406909 A B P) (@lem8406908 A B P s _115314)). Qed.
Lemma lem8406911 {A B P : Type'} (s : type1079 A B P) (_115314 : type1080 A B P) : ((term2969 A B P s _115314) = (term2970 A B P s _115314)) = ((term2963 A B P s _115314) = (term2983 A B P s _115314)).
Proof. exact (MK_COMB (@lem8406902 A B P s _115314) (@lem8406910 A B P s _115314)). Qed.
Lemma lem8406912 {A B P : Type'} (s : type1079 A B P) (_115314 : type1080 A B P) : (term2963 A B P s _115314) = (term2983 A B P s _115314).
Proof. exact (EQ_MP (@lem8406911 A B P s _115314) (@lem8406892 A B P s _115314)). Qed.
Lemma lem8406913 {A B P : Type'} (_115314 : type1080 A B P) : (term2965 A B P _115314) = (term2984 A B P _115314).
Proof. exact (fun_ext (fun s : type1079 A B P => @lem8406912 A B P s _115314)). Qed.
Lemma lem8406914 {A B P : Type'} : (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A)) = (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> P -> A))). Qed.
Lemma lem8406915 {A B P : Type'} (_115314 : type1080 A B P) : (term2966 A B P _115314) = (term2985 A B P _115314).
Proof. exact (MK_COMB (@lem8406914 A B P) (@lem8406913 A B P _115314)). Qed.
Lemma lem8406916 {A B P : Type'} (_115314 : type1080 A B P) : (term2949 A B P _115314) = (term2985 A B P _115314).
Proof. exact (TRANS (@lem8406888 A B P _115314) (@lem8406915 A B P _115314)). Qed.
Lemma lem8406917 {A B P : Type'} (_115314 : type1080 A B P) : (term2765 A B P _115314) = (term2985 A B P _115314).
Proof. exact (TRANS (@lem8406864 A B P _115314) (@lem8406916 A B P _115314)). Qed.
Lemma lem8406918 {A B P : Type'} (_115314 : type1080 A B P) : (term2695 A B P _115314) = (term2985 A B P _115314).
Proof. exact (TRANS (@lem8406612 A B P _115314) (@lem8406917 A B P _115314)). Qed.
Lemma lem8406919 {A B P : Type'} (_115314 : type1080 A B P) : (term515 A B P _115314) = (term2985 A B P _115314).
Proof. exact (TRANS (@lem8406131 A B P _115314) (@lem8406918 A B P _115314)). Qed.
Lemma lem8406920 {A B P : Type'} (_115314 : type1080 A B P) (h1 : term515 A B P _115314) : term2985 A B P _115314.
Proof. exact (EQ_MP (@lem8406919 A B P _115314) (@lem8401037 A B P _115314 h1)). Qed.
Lemma lem8406927 {A B P : Type'} (s : P -> A) (t : type558 A B P) (s' : P -> A) (t' : type558 A B P) (clauses : type1635 A B P) : (term2986 A B P s t s' t' clauses) = (term2987 A B P s t s' t' clauses).
Proof. exact (@lem17045 (term2988 A B P s t clauses) (term2988 A B P s' t' clauses)). Qed.
Lemma lem8406928 {A P : Type'} (s : P -> A) (x : P) (s' : P -> A) (y : P) : (term2989 A P s x s' y) = (term2989 A P s x s' y).
Proof. exact (eq_refl (term2989 A P s x s' y)). Qed.
Lemma lem8406929 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8406930 {A B P : Type'} (s : P -> A) (t : type558 A B P) (s' : P -> A) (t' : type558 A B P) (clauses : type1635 A B P) : (term2990 A B P s t s' t' clauses) = (term2991 A B P s t s' t' clauses).
Proof. exact (MK_COMB (@lem8406929) (@lem8406927 A B P s t s' t' clauses)). Qed.
Lemma lem8406931 {A B P : Type'} (t : type558 A B P) (t' : type558 A B P) (clauses : type1635 A B P) (s : P -> A) (x : P) (s' : P -> A) (y : P) : (term2992 A B P t t' clauses s x s' y) = (term2993 A B P t t' clauses s x s' y).
Proof. exact (MK_COMB (@lem8406930 A B P s t s' t' clauses) (@lem8406928 A P s x s' y)). Qed.
Lemma lem8406932 {A B P : Type'} (t : type558 A B P) (t' : type558 A B P) (clauses : type1635 A B P) (s : P -> A) (x : P) (s' : P -> A) (y : P) : (term2994 A B P t t' clauses s x s' y) = (term2992 A B P t t' clauses s x s' y).
Proof. exact (@lem17045 (term116 A B P s t s' t' clauses) ((s x) = (s' y))). Qed.
Lemma lem8406933 {A B P : Type'} (t : type558 A B P) (t' : type558 A B P) (clauses : type1635 A B P) (s : P -> A) (x : P) (s' : P -> A) (y : P) : (term2994 A B P t t' clauses s x s' y) = (term2993 A B P t t' clauses s x s' y).
Proof. exact (TRANS (@lem8406932 A B P t t' clauses s x s' y) (@lem8406931 A B P t t' clauses s x s' y)). Qed.
Lemma lem8406934 {A B P : Type'} (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) (y : P) : ((t f x) = (t' f y)) = ((t f x) = (t' f y)).
Proof. exact (eq_refl ((t f x) = (t' f y))). Qed.
Lemma lem8406935 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8406936 {A B P : Type'} (t : type558 A B P) (t' : type558 A B P) (clauses : type1635 A B P) (s : P -> A) (x : P) (s' : P -> A) (y : P) : (term2995 A B P t t' clauses s x s' y) = (term2996 A B P t t' clauses s x s' y).
Proof. exact (MK_COMB (@lem8406935) (@lem8406933 A B P t t' clauses s x s' y)). Qed.
Lemma lem8406937 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) (y : P) : (term2997 A B P clauses s s' t x t' f y) = (term2998 A B P clauses s s' t x t' f y).
Proof. exact (MK_COMB (@lem8406936 A B P t t' clauses s x s' y) (@lem8406934 A B P t x t' f y)). Qed.
Lemma lem8406938 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) (y : P) : (term115 A B P clauses s s' t x t' f y) = (term2997 A B P clauses s s' t x t' f y).
Proof. exact (@lem17265 (term2999 A B P t t' clauses s x s' y) ((t f x) = (t' f y))). Qed.
Lemma lem8406939 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) (y : P) : (term115 A B P clauses s s' t x t' f y) = (term2998 A B P clauses s s' t x t' f y).
Proof. exact (TRANS (@lem8406938 A B P clauses s s' t x t' f y) (@lem8406937 A B P clauses s s' t x t' f y)). Qed.
Lemma lem8406940 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term118 A B P clauses s s' t x t' f) = (term3000 A B P clauses s s' t x t' f).
Proof. exact (fun_ext (fun y : P => @lem8406939 A B P clauses s s' t x t' f y)). Qed.
Lemma lem8406941 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8406942 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term120 A B P clauses s s' t x t' f) = (term3001 A B P clauses s s' t x t' f).
Proof. exact (MK_COMB (@lem8406941 P) (@lem8406940 A B P clauses s s' t x t' f)). Qed.
Lemma lem8406943 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term122 A B P clauses s s' t t' f) = (term3002 A B P clauses s s' t t' f).
Proof. exact (fun_ext (fun x : P => @lem8406942 A B P clauses s s' t x t' f)). Qed.
Lemma lem8406944 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8406945 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term124 A B P clauses s s' t t' f) = (term3003 A B P clauses s s' t t' f).
Proof. exact (MK_COMB (@lem8406944 P) (@lem8406943 A B P clauses s s' t t' f)). Qed.
Lemma lem8406946 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term126 A B P clauses s s' t t') = (term3004 A B P clauses s s' t t').
Proof. exact (fun_ext (fun f : A -> B => @lem8406945 A B P clauses s s' t t' f)). Qed.
Lemma lem8406947 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8406948 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term128 A B P clauses s s' t t') = (term3005 A B P clauses s s' t t').
Proof. exact (MK_COMB (@lem8406947 A B) (@lem8406946 A B P clauses s s' t t')). Qed.
Lemma lem8406949 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term130 A B P clauses s s' t) = (term3006 A B P clauses s s' t).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8406948 A B P clauses s s' t t')). Qed.
Lemma lem8406950 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8406951 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term132 A B P clauses s s' t) = (term3007 A B P clauses s s' t).
Proof. exact (MK_COMB (@lem8406950 A B P) (@lem8406949 A B P clauses s s' t)). Qed.
Lemma lem8406952 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term134 A B P clauses s t) = (term3008 A B P clauses s t).
Proof. exact (fun_ext (fun s' : P -> A => @lem8406951 A B P clauses s s' t)). Qed.
Lemma lem8406953 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8406954 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term136 A B P clauses s t) = (term3009 A B P clauses s t).
Proof. exact (MK_COMB (@lem8406953 A P) (@lem8406952 A B P clauses s t)). Qed.
Lemma lem8406955 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term138 A B P clauses s) = (term3010 A B P clauses s).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8406954 A B P clauses s t)). Qed.
Lemma lem8406956 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8406957 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term140 A B P clauses s) = (term3011 A B P clauses s).
Proof. exact (MK_COMB (@lem8406956 A B P) (@lem8406955 A B P clauses s)). Qed.
Lemma lem8406958 {A B P : Type'} (clauses : type1635 A B P) : (term142 A B P clauses) = (term3012 A B P clauses).
Proof. exact (fun_ext (fun s : P -> A => @lem8406957 A B P clauses s)). Qed.
Lemma lem8406959 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8407036 {A B P : Type'} (clauses : type1635 A B P) : (term144 A B P clauses) = (term3013 A B P clauses).
Proof. exact (MK_COMB (@lem8406959 A P) (@lem8406958 A B P clauses)). Qed.
Lemma lem8407037 {A B P : Type'} (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term3013 A B P clauses.
Proof. exact (EQ_MP (@lem8407036 A B P clauses) (@lem8401038 A B P clauses h1)). Qed.
Lemma lem8407056 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term449 A B P _115314 f clauses) : term449 A B P _115314 f clauses.
Proof. exact (h1). Qed.
Lemma lem8407071 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) (y : P) : (term3014 A C P clauses s s' t x t' c y) = (term3015 A C P clauses s s' t x t' c y).
Proof. exact (@lem17362 (term3016 A C P t t' clauses s x s' y) ((t c x) = (t' c y))). Qed.
Lemma lem8407072 {P : Type'} (P' : P -> Prop) : (term3017 P P') = (term3018 P P').
Proof. exact (@lem18392 P P'). Qed.
Lemma lem8407073 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term3019 A C P clauses s s' t x t' c) = (term3020 A C P clauses s s' t x t' c).
Proof. exact (@lem8407072 P (term371 A C P clauses s s' t x t' c)). Qed.
Lemma lem8407074 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) (y : P) : (term3021 A C P clauses s s' t x t' c y) = (term370 A C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term3021 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8407075 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8407076 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) (y : P) : (term3022 A C P clauses s s' t x t' c y) = (term3014 A C P clauses s s' t x t' c y).
Proof. exact (MK_COMB (@lem8407075) (@lem8407074 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8407077 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) (y : P) : (term3022 A C P clauses s s' t x t' c y) = (term3015 A C P clauses s s' t x t' c y).
Proof. exact (TRANS (@lem8407076 A C P clauses s s' t x t' c y) (@lem8407071 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8407078 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term3023 A C P clauses s s' t x t' c) = (term3024 A C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8407077 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8407079 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8407080 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term3020 A C P clauses s s' t x t' c) = (term3025 A C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8407079 P) (@lem8407078 A C P clauses s s' t x t' c)). Qed.
Lemma lem8407081 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term3019 A C P clauses s s' t x t' c) = (term3025 A C P clauses s s' t x t' c).
Proof. exact (TRANS (@lem8407073 A C P clauses s s' t x t' c) (@lem8407080 A C P clauses s s' t x t' c)). Qed.
Lemma lem8407082 {P : Type'} (P' : P -> Prop) : (term3017 P P') = (term3018 P P').
Proof. exact (@lem18392 P P'). Qed.
Lemma lem8407083 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term3026 A C P clauses s s' t t' c) = (term3027 A C P clauses s s' t t' c).
Proof. exact (@lem8407082 P (term373 A C P clauses s s' t t' c)). Qed.
Lemma lem8407084 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term3028 A C P clauses s s' t t' c x) = (term372 A C P clauses s s' t x t' c).
Proof. exact (eq_refl (term3028 A C P clauses s s' t t' c x)). Qed.
Lemma lem8407085 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8407086 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term3029 A C P clauses s s' t t' c x) = (term3019 A C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8407085) (@lem8407084 A C P clauses s s' t x t' c)). Qed.
Lemma lem8407087 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term3029 A C P clauses s s' t t' c x) = (term3025 A C P clauses s s' t x t' c).
Proof. exact (TRANS (@lem8407086 A C P clauses s s' t x t' c) (@lem8407081 A C P clauses s s' t x t' c)). Qed.
Lemma lem8407088 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term3030 A C P clauses s s' t t' c) = (term3031 A C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8407087 A C P clauses s s' t x t' c)). Qed.
Lemma lem8407089 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8407090 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term3027 A C P clauses s s' t t' c) = (term3032 A C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8407089 P) (@lem8407088 A C P clauses s s' t t' c)). Qed.
Lemma lem8407091 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term3026 A C P clauses s s' t t' c) = (term3032 A C P clauses s s' t t' c).
Proof. exact (TRANS (@lem8407083 A C P clauses s s' t t' c) (@lem8407090 A C P clauses s s' t t' c)). Qed.
Lemma lem8407092 {A C P : Type'} (P' : type766 A C P) : (term2022 A C P P') = (term2023 A C P P').
Proof. exact (@lem18392 (type1475 A C P) P'). Qed.
Lemma lem8407093 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term3033 A C P clauses s s' t c) = (term3034 A C P clauses s s' t c).
Proof. exact (@lem8407092 A C P (term375 A C P clauses s s' t c)). Qed.
Lemma lem8407094 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term3035 A C P clauses s s' t c t') = (term374 A C P clauses s s' t t' c).
Proof. exact (eq_refl (term3035 A C P clauses s s' t c t')). Qed.
Lemma lem8407095 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8407096 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term3036 A C P clauses s s' t c t') = (term3026 A C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8407095) (@lem8407094 A C P clauses s s' t t' c)). Qed.
Lemma lem8407097 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term3036 A C P clauses s s' t c t') = (term3032 A C P clauses s s' t t' c).
Proof. exact (TRANS (@lem8407096 A C P clauses s s' t t' c) (@lem8407091 A C P clauses s s' t t' c)). Qed.
Lemma lem8407098 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term3037 A C P clauses s s' t c) = (term3038 A C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 A C P => @lem8407097 A C P clauses s s' t t' c)). Qed.
Lemma lem8407099 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8407100 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term3034 A C P clauses s s' t c) = (term3039 A C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8407099 A C P) (@lem8407098 A C P clauses s s' t c)). Qed.
Lemma lem8407101 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term3033 A C P clauses s s' t c) = (term3039 A C P clauses s s' t c).
Proof. exact (TRANS (@lem8407093 A C P clauses s s' t c) (@lem8407100 A C P clauses s s' t c)). Qed.
Lemma lem8407102 {A P : Type'} (P' : type805 A P) : (term2032 A P P') = (term2033 A P P').
Proof. exact (@lem18392 (P -> A) P'). Qed.
Lemma lem8407103 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term3040 A C P clauses s t c) = (term3041 A C P clauses s t c).
Proof. exact (@lem8407102 A P (term377 A C P clauses s t c)). Qed.
Lemma lem8407104 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term3042 A C P clauses s t c s') = (term376 A C P clauses s s' t c).
Proof. exact (eq_refl (term3042 A C P clauses s t c s')). Qed.
Lemma lem8407105 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8407106 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term3043 A C P clauses s t c s') = (term3033 A C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8407105) (@lem8407104 A C P clauses s s' t c)). Qed.
Lemma lem8407107 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term3043 A C P clauses s t c s') = (term3039 A C P clauses s s' t c).
Proof. exact (TRANS (@lem8407106 A C P clauses s s' t c) (@lem8407101 A C P clauses s s' t c)). Qed.
Lemma lem8407108 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term3044 A C P clauses s t c) = (term3045 A C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8407107 A C P clauses s s' t c)). Qed.
Lemma lem8407109 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8407110 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term3041 A C P clauses s t c) = (term3046 A C P clauses s t c).
Proof. exact (MK_COMB (@lem8407109 A P) (@lem8407108 A C P clauses s t c)). Qed.
Lemma lem8407111 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term3040 A C P clauses s t c) = (term3046 A C P clauses s t c).
Proof. exact (TRANS (@lem8407103 A C P clauses s t c) (@lem8407110 A C P clauses s t c)). Qed.
Lemma lem8407112 {A C P : Type'} (P' : type766 A C P) : (term2022 A C P P') = (term2023 A C P P').
Proof. exact (@lem18392 (type1475 A C P) P'). Qed.
Lemma lem8407113 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term3047 A C P clauses s c) = (term3048 A C P clauses s c).
Proof. exact (@lem8407112 A C P (term379 A C P clauses s c)). Qed.
Lemma lem8407114 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term3049 A C P clauses s c t) = (term378 A C P clauses s t c).
Proof. exact (eq_refl (term3049 A C P clauses s c t)). Qed.
Lemma lem8407115 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8407116 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term3050 A C P clauses s c t) = (term3040 A C P clauses s t c).
Proof. exact (MK_COMB (@lem8407115) (@lem8407114 A C P clauses s t c)). Qed.
Lemma lem8407117 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term3050 A C P clauses s c t) = (term3046 A C P clauses s t c).
Proof. exact (TRANS (@lem8407116 A C P clauses s t c) (@lem8407111 A C P clauses s t c)). Qed.
Lemma lem8407118 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term3051 A C P clauses s c) = (term3052 A C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8407117 A C P clauses s t c)). Qed.
Lemma lem8407119 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8407120 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term3048 A C P clauses s c) = (term3053 A C P clauses s c).
Proof. exact (MK_COMB (@lem8407119 A C P) (@lem8407118 A C P clauses s c)). Qed.
Lemma lem8407121 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term3047 A C P clauses s c) = (term3053 A C P clauses s c).
Proof. exact (TRANS (@lem8407113 A C P clauses s c) (@lem8407120 A C P clauses s c)). Qed.
Lemma lem8407122 {A P : Type'} (P' : type805 A P) : (term2032 A P P') = (term2033 A P P').
Proof. exact (@lem18392 (P -> A) P'). Qed.
Lemma lem8407123 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term3054 A C P clauses c) = (term3055 A C P clauses c).
Proof. exact (@lem8407122 A P (term381 A C P clauses c)). Qed.
Lemma lem8407124 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term3056 A C P clauses c s) = (term380 A C P clauses s c).
Proof. exact (eq_refl (term3056 A C P clauses c s)). Qed.
Lemma lem8407125 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8407126 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term3057 A C P clauses c s) = (term3047 A C P clauses s c).
Proof. exact (MK_COMB (@lem8407125) (@lem8407124 A C P clauses s c)). Qed.
Lemma lem8407127 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term3057 A C P clauses c s) = (term3053 A C P clauses s c).
Proof. exact (TRANS (@lem8407126 A C P clauses s c) (@lem8407121 A C P clauses s c)). Qed.
Lemma lem8407128 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term3058 A C P clauses c) = (term3059 A C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8407127 A C P clauses s c)). Qed.
Lemma lem8407129 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8407130 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term3055 A C P clauses c) = (term3060 A C P clauses c).
Proof. exact (MK_COMB (@lem8407129 A P) (@lem8407128 A C P clauses c)). Qed.
Lemma lem8407131 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term3054 A C P clauses c) = (term3060 A C P clauses c).
Proof. exact (TRANS (@lem8407123 A C P clauses c) (@lem8407130 A C P clauses c)). Qed.
Lemma lem8407132 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term528 A C P _115315 c clauses) = (term528 A C P _115315 c clauses).
Proof. exact (eq_refl (term528 A C P _115315 c clauses)). Qed.
Lemma lem8407133 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8407134 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term3061 A C P clauses c) = (term3062 A C P clauses c).
Proof. exact (MK_COMB (@lem8407133) (@lem8407131 A C P clauses c)). Qed.
Lemma lem8407135 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3063 A C P _115315 c clauses) = (term3064 A C P _115315 c clauses).
Proof. exact (MK_COMB (@lem8407134 A C P clauses c) (@lem8407132 A C P _115315 c clauses)). Qed.
Lemma lem8407136 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term529 A C P _115315 c clauses) = (term3063 A C P _115315 c clauses).
Proof. exact (@lem17265 (term382 A C P clauses c) (term528 A C P _115315 c clauses)). Qed.
Lemma lem8407137 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term529 A C P _115315 c clauses) = (term3064 A C P _115315 c clauses).
Proof. exact (TRANS (@lem8407136 A C P _115315 c clauses) (@lem8407135 A C P _115315 c clauses)). Qed.
Lemma lem8407138 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term530 A C P _115315 clauses) = (term3065 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8407137 A C P _115315 c clauses)). Qed.
Lemma lem8407139 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8407140 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term531 A C P _115315 clauses) = (term3066 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8407139 C) (@lem8407138 A C P _115315 clauses)). Qed.
Lemma lem8407141 {A C P : Type'} (_115315 : type1092 A C P) : (term532 A C P _115315) = (term3067 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8407140 A C P _115315 clauses)). Qed.
Lemma lem8407142 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8407143 {A C P : Type'} (_115315 : type1092 A C P) : (term533 A C P _115315) = (term3068 A C P _115315).
Proof. exact (MK_COMB (@lem8407142 A C P) (@lem8407141 A C P _115315)). Qed.
Lemma lem8407266 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8407267 {A P : Type'} (P' : type805 A P) (Q : Prop) : (term3071 A P P' Q) = (term3072 A P P' Q).
Proof. exact (@lem8407266 (P -> A) P' Q). Qed.
Lemma lem8407268 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3073 A C P _115315 c clauses) = (term3074 A C P _115315 c clauses).
Proof. exact (@lem8407267 A P (term3059 A C P clauses c) (term528 A C P _115315 c clauses)). Qed.
Lemma lem8407269 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term3075 A C P clauses c s) = (term3053 A C P clauses s c).
Proof. exact (eq_refl (term3075 A C P clauses c s)). Qed.
Lemma lem8407270 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term3076 A C P clauses c) = (term3059 A C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8407269 A C P clauses s c)). Qed.
Lemma lem8407271 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8407272 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term3077 A C P clauses c) = (term3060 A C P clauses c).
Proof. exact (MK_COMB (@lem8407271 A P) (@lem8407270 A C P clauses c)). Qed.
Lemma lem8407273 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8407274 {A C P : Type'} (clauses : type1636 A C P) (c : C) : (term3078 A C P clauses c) = (term3062 A C P clauses c).
Proof. exact (MK_COMB (@lem8407273) (@lem8407272 A C P clauses c)). Qed.
Lemma lem8407275 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term528 A C P _115315 c clauses) = (term528 A C P _115315 c clauses).
Proof. exact (eq_refl (term528 A C P _115315 c clauses)). Qed.
Lemma lem8407276 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3073 A C P _115315 c clauses) = (term3064 A C P _115315 c clauses).
Proof. exact (MK_COMB (@lem8407274 A C P clauses c) (@lem8407275 A C P _115315 c clauses)). Qed.
Lemma lem8407277 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8407278 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3079 A C P _115315 c clauses) = (term3080 A C P _115315 c clauses).
Proof. exact (MK_COMB (@lem8407277) (@lem8407276 A C P _115315 c clauses)). Qed.
Lemma lem8407279 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term3075 A C P clauses c s) = (term3053 A C P clauses s c).
Proof. exact (eq_refl (term3075 A C P clauses c s)). Qed.
Lemma lem8407280 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8407281 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term3081 A C P clauses c s) = (term3082 A C P clauses s c).
Proof. exact (MK_COMB (@lem8407280) (@lem8407279 A C P clauses s c)). Qed.
Lemma lem8407282 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term528 A C P _115315 c clauses) = (term528 A C P _115315 c clauses).
Proof. exact (eq_refl (term528 A C P _115315 c clauses)). Qed.
Lemma lem8407283 {A C P : Type'} (s : P -> A) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3083 A C P s _115315 c clauses) = (term3084 A C P s _115315 c clauses).
Proof. exact (MK_COMB (@lem8407281 A C P clauses s c) (@lem8407282 A C P _115315 c clauses)). Qed.
Lemma lem8407284 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3085 A C P _115315 c clauses) = (term3086 A C P _115315 c clauses).
Proof. exact (fun_ext (fun s : P -> A => @lem8407283 A C P s _115315 c clauses)). Qed.
Lemma lem8407285 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8407286 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3074 A C P _115315 c clauses) = (term3087 A C P _115315 c clauses).
Proof. exact (MK_COMB (@lem8407285 A P) (@lem8407284 A C P _115315 c clauses)). Qed.
Lemma lem8407287 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : ((term3073 A C P _115315 c clauses) = (term3074 A C P _115315 c clauses)) = ((term3064 A C P _115315 c clauses) = (term3087 A C P _115315 c clauses)).
Proof. exact (MK_COMB (@lem8407278 A C P _115315 c clauses) (@lem8407286 A C P _115315 c clauses)). Qed.
Lemma lem8407288 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3064 A C P _115315 c clauses) = (term3087 A C P _115315 c clauses).
Proof. exact (EQ_MP (@lem8407287 A C P _115315 c clauses) (@lem8407268 A C P _115315 c clauses)). Qed.
Lemma lem8407290 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8407291 {A C P : Type'} (P' : type766 A C P) (Q : Prop) : (term3088 A C P P' Q) = (term3089 A C P P' Q).
Proof. exact (@lem8407290 (type1475 A C P) P' Q). Qed.
Lemma lem8407292 {A C P : Type'} (s : P -> A) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3090 A C P s _115315 c clauses) = (term3091 A C P s _115315 c clauses).
Proof. exact (@lem8407291 A C P (term3052 A C P clauses s c) (term528 A C P _115315 c clauses)). Qed.
Lemma lem8407293 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term3092 A C P clauses s c t) = (term3046 A C P clauses s t c).
Proof. exact (eq_refl (term3092 A C P clauses s c t)). Qed.
Lemma lem8407294 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term3093 A C P clauses s c) = (term3052 A C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8407293 A C P clauses s t c)). Qed.
Lemma lem8407295 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8407296 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term3094 A C P clauses s c) = (term3053 A C P clauses s c).
Proof. exact (MK_COMB (@lem8407295 A C P) (@lem8407294 A C P clauses s c)). Qed.
Lemma lem8407297 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8407298 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (c : C) : (term3095 A C P clauses s c) = (term3082 A C P clauses s c).
Proof. exact (MK_COMB (@lem8407297) (@lem8407296 A C P clauses s c)). Qed.
Lemma lem8407299 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term528 A C P _115315 c clauses) = (term528 A C P _115315 c clauses).
Proof. exact (eq_refl (term528 A C P _115315 c clauses)). Qed.
Lemma lem8407300 {A C P : Type'} (s : P -> A) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3090 A C P s _115315 c clauses) = (term3084 A C P s _115315 c clauses).
Proof. exact (MK_COMB (@lem8407298 A C P clauses s c) (@lem8407299 A C P _115315 c clauses)). Qed.
Lemma lem8407301 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8407302 {A C P : Type'} (s : P -> A) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3096 A C P s _115315 c clauses) = (term3097 A C P s _115315 c clauses).
Proof. exact (MK_COMB (@lem8407301) (@lem8407300 A C P s _115315 c clauses)). Qed.
Lemma lem8407303 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term3092 A C P clauses s c t) = (term3046 A C P clauses s t c).
Proof. exact (eq_refl (term3092 A C P clauses s c t)). Qed.
Lemma lem8407304 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8407305 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term3098 A C P clauses s c t) = (term3099 A C P clauses s t c).
Proof. exact (MK_COMB (@lem8407304) (@lem8407303 A C P clauses s t c)). Qed.
Lemma lem8407306 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term528 A C P _115315 c clauses) = (term528 A C P _115315 c clauses).
Proof. exact (eq_refl (term528 A C P _115315 c clauses)). Qed.
Lemma lem8407307 {A C P : Type'} (s : P -> A) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3100 A C P s t _115315 c clauses) = (term3101 A C P s t _115315 c clauses).
Proof. exact (MK_COMB (@lem8407305 A C P clauses s t c) (@lem8407306 A C P _115315 c clauses)). Qed.
Lemma lem8407308 {A C P : Type'} (s : P -> A) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3102 A C P s _115315 c clauses) = (term3103 A C P s _115315 c clauses).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8407307 A C P s t _115315 c clauses)). Qed.
Lemma lem8407309 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8407310 {A C P : Type'} (s : P -> A) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3091 A C P s _115315 c clauses) = (term3104 A C P s _115315 c clauses).
Proof. exact (MK_COMB (@lem8407309 A C P) (@lem8407308 A C P s _115315 c clauses)). Qed.
Lemma lem8407311 {A C P : Type'} (s : P -> A) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : ((term3090 A C P s _115315 c clauses) = (term3091 A C P s _115315 c clauses)) = ((term3084 A C P s _115315 c clauses) = (term3104 A C P s _115315 c clauses)).
Proof. exact (MK_COMB (@lem8407302 A C P s _115315 c clauses) (@lem8407310 A C P s _115315 c clauses)). Qed.
Lemma lem8407312 {A C P : Type'} (s : P -> A) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3084 A C P s _115315 c clauses) = (term3104 A C P s _115315 c clauses).
Proof. exact (EQ_MP (@lem8407311 A C P s _115315 c clauses) (@lem8407292 A C P s _115315 c clauses)). Qed.
Lemma lem8407314 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8407315 {A P : Type'} (P' : type805 A P) (Q : Prop) : (term3071 A P P' Q) = (term3072 A P P' Q).
Proof. exact (@lem8407314 (P -> A) P' Q). Qed.
Lemma lem8407316 {A C P : Type'} (s : P -> A) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3105 A C P s t _115315 c clauses) = (term3106 A C P s t _115315 c clauses).
Proof. exact (@lem8407315 A P (term3045 A C P clauses s t c) (term528 A C P _115315 c clauses)). Qed.
Lemma lem8407317 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term3107 A C P clauses s t c s') = (term3039 A C P clauses s s' t c).
Proof. exact (eq_refl (term3107 A C P clauses s t c s')). Qed.
Lemma lem8407318 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term3108 A C P clauses s t c) = (term3045 A C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8407317 A C P clauses s s' t c)). Qed.
Lemma lem8407319 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8407320 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term3109 A C P clauses s t c) = (term3046 A C P clauses s t c).
Proof. exact (MK_COMB (@lem8407319 A P) (@lem8407318 A C P clauses s t c)). Qed.
Lemma lem8407321 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8407322 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (t : type1475 A C P) (c : C) : (term3110 A C P clauses s t c) = (term3099 A C P clauses s t c).
Proof. exact (MK_COMB (@lem8407321) (@lem8407320 A C P clauses s t c)). Qed.
Lemma lem8407323 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term528 A C P _115315 c clauses) = (term528 A C P _115315 c clauses).
Proof. exact (eq_refl (term528 A C P _115315 c clauses)). Qed.
Lemma lem8407324 {A C P : Type'} (s : P -> A) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3105 A C P s t _115315 c clauses) = (term3101 A C P s t _115315 c clauses).
Proof. exact (MK_COMB (@lem8407322 A C P clauses s t c) (@lem8407323 A C P _115315 c clauses)). Qed.
Lemma lem8407325 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8407326 {A C P : Type'} (s : P -> A) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3111 A C P s t _115315 c clauses) = (term3112 A C P s t _115315 c clauses).
Proof. exact (MK_COMB (@lem8407325) (@lem8407324 A C P s t _115315 c clauses)). Qed.
Lemma lem8407327 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term3107 A C P clauses s t c s') = (term3039 A C P clauses s s' t c).
Proof. exact (eq_refl (term3107 A C P clauses s t c s')). Qed.
Lemma lem8407328 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8407329 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term3113 A C P clauses s t c s') = (term3114 A C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8407328) (@lem8407327 A C P clauses s s' t c)). Qed.
Lemma lem8407330 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term528 A C P _115315 c clauses) = (term528 A C P _115315 c clauses).
Proof. exact (eq_refl (term528 A C P _115315 c clauses)). Qed.
Lemma lem8407331 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3115 A C P s t s' _115315 c clauses) = (term3116 A C P s s' t _115315 c clauses).
Proof. exact (MK_COMB (@lem8407329 A C P clauses s s' t c) (@lem8407330 A C P _115315 c clauses)). Qed.
Lemma lem8407332 {A C P : Type'} (s : P -> A) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3117 A C P s t _115315 c clauses) = (term3118 A C P s t _115315 c clauses).
Proof. exact (fun_ext (fun s' : P -> A => @lem8407331 A C P s s' t _115315 c clauses)). Qed.
Lemma lem8407333 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8407334 {A C P : Type'} (s : P -> A) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3106 A C P s t _115315 c clauses) = (term3119 A C P s t _115315 c clauses).
Proof. exact (MK_COMB (@lem8407333 A P) (@lem8407332 A C P s t _115315 c clauses)). Qed.
Lemma lem8407335 {A C P : Type'} (s : P -> A) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : ((term3105 A C P s t _115315 c clauses) = (term3106 A C P s t _115315 c clauses)) = ((term3101 A C P s t _115315 c clauses) = (term3119 A C P s t _115315 c clauses)).
Proof. exact (MK_COMB (@lem8407326 A C P s t _115315 c clauses) (@lem8407334 A C P s t _115315 c clauses)). Qed.
Lemma lem8407336 {A C P : Type'} (s : P -> A) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3101 A C P s t _115315 c clauses) = (term3119 A C P s t _115315 c clauses).
Proof. exact (EQ_MP (@lem8407335 A C P s t _115315 c clauses) (@lem8407316 A C P s t _115315 c clauses)). Qed.
Lemma lem8407338 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8407339 {A C P : Type'} (P' : type766 A C P) (Q : Prop) : (term3088 A C P P' Q) = (term3089 A C P P' Q).
Proof. exact (@lem8407338 (type1475 A C P) P' Q). Qed.
Lemma lem8407340 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3120 A C P s s' t _115315 c clauses) = (term3121 A C P s s' t _115315 c clauses).
Proof. exact (@lem8407339 A C P (term3038 A C P clauses s s' t c) (term528 A C P _115315 c clauses)). Qed.
Lemma lem8407341 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term3122 A C P clauses s s' t c t') = (term3032 A C P clauses s s' t t' c).
Proof. exact (eq_refl (term3122 A C P clauses s s' t c t')). Qed.
Lemma lem8407342 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term3123 A C P clauses s s' t c) = (term3038 A C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 A C P => @lem8407341 A C P clauses s s' t t' c)). Qed.
Lemma lem8407343 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8407344 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term3124 A C P clauses s s' t c) = (term3039 A C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8407343 A C P) (@lem8407342 A C P clauses s s' t c)). Qed.
Lemma lem8407345 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8407346 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (c : C) : (term3125 A C P clauses s s' t c) = (term3114 A C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8407345) (@lem8407344 A C P clauses s s' t c)). Qed.
Lemma lem8407347 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term528 A C P _115315 c clauses) = (term528 A C P _115315 c clauses).
Proof. exact (eq_refl (term528 A C P _115315 c clauses)). Qed.
Lemma lem8407348 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3120 A C P s s' t _115315 c clauses) = (term3116 A C P s s' t _115315 c clauses).
Proof. exact (MK_COMB (@lem8407346 A C P clauses s s' t c) (@lem8407347 A C P _115315 c clauses)). Qed.
Lemma lem8407349 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8407350 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3126 A C P s s' t _115315 c clauses) = (term3127 A C P s s' t _115315 c clauses).
Proof. exact (MK_COMB (@lem8407349) (@lem8407348 A C P s s' t _115315 c clauses)). Qed.
Lemma lem8407351 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term3122 A C P clauses s s' t c t') = (term3032 A C P clauses s s' t t' c).
Proof. exact (eq_refl (term3122 A C P clauses s s' t c t')). Qed.
Lemma lem8407352 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8407353 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term3128 A C P clauses s s' t c t') = (term3129 A C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8407352) (@lem8407351 A C P clauses s s' t t' c)). Qed.
Lemma lem8407354 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term528 A C P _115315 c clauses) = (term528 A C P _115315 c clauses).
Proof. exact (eq_refl (term528 A C P _115315 c clauses)). Qed.
Lemma lem8407355 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3130 A C P s s' t t' _115315 c clauses) = (term3131 A C P s s' t t' _115315 c clauses).
Proof. exact (MK_COMB (@lem8407353 A C P clauses s s' t t' c) (@lem8407354 A C P _115315 c clauses)). Qed.
Lemma lem8407356 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3132 A C P s s' t _115315 c clauses) = (term3133 A C P s s' t _115315 c clauses).
Proof. exact (fun_ext (fun t' : type1475 A C P => @lem8407355 A C P s s' t t' _115315 c clauses)). Qed.
Lemma lem8407357 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8407358 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3121 A C P s s' t _115315 c clauses) = (term3134 A C P s s' t _115315 c clauses).
Proof. exact (MK_COMB (@lem8407357 A C P) (@lem8407356 A C P s s' t _115315 c clauses)). Qed.
Lemma lem8407359 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : ((term3120 A C P s s' t _115315 c clauses) = (term3121 A C P s s' t _115315 c clauses)) = ((term3116 A C P s s' t _115315 c clauses) = (term3134 A C P s s' t _115315 c clauses)).
Proof. exact (MK_COMB (@lem8407350 A C P s s' t _115315 c clauses) (@lem8407358 A C P s s' t _115315 c clauses)). Qed.
Lemma lem8407360 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3116 A C P s s' t _115315 c clauses) = (term3134 A C P s s' t _115315 c clauses).
Proof. exact (EQ_MP (@lem8407359 A C P s s' t _115315 c clauses) (@lem8407340 A C P s s' t _115315 c clauses)). Qed.
Lemma lem8407362 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8407363 {P : Type'} (P' : P -> Prop) (Q : Prop) : (term3069 P P' Q) = (term3070 P P' Q).
Proof. exact (@lem8407362 P P' Q). Qed.
Lemma lem8407364 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3135 A C P s s' t t' _115315 c clauses) = (term3136 A C P s s' t t' _115315 c clauses).
Proof. exact (@lem8407363 P (term3031 A C P clauses s s' t t' c) (term528 A C P _115315 c clauses)). Qed.
Lemma lem8407365 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term3137 A C P clauses s s' t t' c x) = (term3025 A C P clauses s s' t x t' c).
Proof. exact (eq_refl (term3137 A C P clauses s s' t t' c x)). Qed.
Lemma lem8407366 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term3138 A C P clauses s s' t t' c) = (term3031 A C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8407365 A C P clauses s s' t x t' c)). Qed.
Lemma lem8407367 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8407368 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term3139 A C P clauses s s' t t' c) = (term3032 A C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8407367 P) (@lem8407366 A C P clauses s s' t t' c)). Qed.
Lemma lem8407369 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8407370 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (c : C) : (term3140 A C P clauses s s' t t' c) = (term3129 A C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8407369) (@lem8407368 A C P clauses s s' t t' c)). Qed.
Lemma lem8407371 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term528 A C P _115315 c clauses) = (term528 A C P _115315 c clauses).
Proof. exact (eq_refl (term528 A C P _115315 c clauses)). Qed.
Lemma lem8407372 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3135 A C P s s' t t' _115315 c clauses) = (term3131 A C P s s' t t' _115315 c clauses).
Proof. exact (MK_COMB (@lem8407370 A C P clauses s s' t t' c) (@lem8407371 A C P _115315 c clauses)). Qed.
Lemma lem8407373 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8407374 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3141 A C P s s' t t' _115315 c clauses) = (term3142 A C P s s' t t' _115315 c clauses).
Proof. exact (MK_COMB (@lem8407373) (@lem8407372 A C P s s' t t' _115315 c clauses)). Qed.
Lemma lem8407375 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term3137 A C P clauses s s' t t' c x) = (term3025 A C P clauses s s' t x t' c).
Proof. exact (eq_refl (term3137 A C P clauses s s' t t' c x)). Qed.
Lemma lem8407376 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8407377 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term3143 A C P clauses s s' t t' c x) = (term3144 A C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8407376) (@lem8407375 A C P clauses s s' t x t' c)). Qed.
Lemma lem8407378 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term528 A C P _115315 c clauses) = (term528 A C P _115315 c clauses).
Proof. exact (eq_refl (term528 A C P _115315 c clauses)). Qed.
Lemma lem8407379 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3145 A C P s s' t t' x _115315 c clauses) = (term3146 A C P s s' t x t' _115315 c clauses).
Proof. exact (MK_COMB (@lem8407377 A C P clauses s s' t x t' c) (@lem8407378 A C P _115315 c clauses)). Qed.
Lemma lem8407380 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3147 A C P s s' t t' _115315 c clauses) = (term3148 A C P s s' t t' _115315 c clauses).
Proof. exact (fun_ext (fun x : P => @lem8407379 A C P s s' t x t' _115315 c clauses)). Qed.
Lemma lem8407381 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8407382 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3136 A C P s s' t t' _115315 c clauses) = (term3149 A C P s s' t t' _115315 c clauses).
Proof. exact (MK_COMB (@lem8407381 P) (@lem8407380 A C P s s' t t' _115315 c clauses)). Qed.
Lemma lem8407383 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : ((term3135 A C P s s' t t' _115315 c clauses) = (term3136 A C P s s' t t' _115315 c clauses)) = ((term3131 A C P s s' t t' _115315 c clauses) = (term3149 A C P s s' t t' _115315 c clauses)).
Proof. exact (MK_COMB (@lem8407374 A C P s s' t t' _115315 c clauses) (@lem8407382 A C P s s' t t' _115315 c clauses)). Qed.
Lemma lem8407384 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3131 A C P s s' t t' _115315 c clauses) = (term3149 A C P s s' t t' _115315 c clauses).
Proof. exact (EQ_MP (@lem8407383 A C P s s' t t' _115315 c clauses) (@lem8407364 A C P s s' t t' _115315 c clauses)). Qed.
Lemma lem8407386 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8407387 {P : Type'} (P' : P -> Prop) (Q : Prop) : (term3069 P P' Q) = (term3070 P P' Q).
Proof. exact (@lem8407386 P P' Q). Qed.
Lemma lem8407388 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3150 A C P s s' t x t' _115315 c clauses) = (term3151 A C P s s' t x t' _115315 c clauses).
Proof. exact (@lem8407387 P (term3024 A C P clauses s s' t x t' c) (term528 A C P _115315 c clauses)). Qed.
Lemma lem8407389 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) (y : P) : (term3152 A C P clauses s s' t x t' c y) = (term3015 A C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term3152 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8407390 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term3153 A C P clauses s s' t x t' c) = (term3024 A C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8407389 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8407391 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8407392 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term3154 A C P clauses s s' t x t' c) = (term3025 A C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8407391 P) (@lem8407390 A C P clauses s s' t x t' c)). Qed.
Lemma lem8407393 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8407394 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) : (term3155 A C P clauses s s' t x t' c) = (term3144 A C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8407393) (@lem8407392 A C P clauses s s' t x t' c)). Qed.
Lemma lem8407395 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term528 A C P _115315 c clauses) = (term528 A C P _115315 c clauses).
Proof. exact (eq_refl (term528 A C P _115315 c clauses)). Qed.
Lemma lem8407396 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3150 A C P s s' t x t' _115315 c clauses) = (term3146 A C P s s' t x t' _115315 c clauses).
Proof. exact (MK_COMB (@lem8407394 A C P clauses s s' t x t' c) (@lem8407395 A C P _115315 c clauses)). Qed.
Lemma lem8407397 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8407398 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3156 A C P s s' t x t' _115315 c clauses) = (term3157 A C P s s' t x t' _115315 c clauses).
Proof. exact (MK_COMB (@lem8407397) (@lem8407396 A C P s s' t x t' _115315 c clauses)). Qed.
Lemma lem8407399 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) (y : P) : (term3152 A C P clauses s s' t x t' c y) = (term3015 A C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term3152 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8407400 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8407401 {A C P : Type'} (clauses : type1636 A C P) (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (c : C) (y : P) : (term3158 A C P clauses s s' t x t' c y) = (term3159 A C P clauses s s' t x t' c y).
Proof. exact (MK_COMB (@lem8407400) (@lem8407399 A C P clauses s s' t x t' c y)). Qed.
Lemma lem8407402 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term528 A C P _115315 c clauses) = (term528 A C P _115315 c clauses).
Proof. exact (eq_refl (term528 A C P _115315 c clauses)). Qed.
Lemma lem8407403 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (y : P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3160 A C P s s' t x t' y _115315 c clauses) = (term3161 A C P s s' t x t' y _115315 c clauses).
Proof. exact (MK_COMB (@lem8407401 A C P clauses s s' t x t' c y) (@lem8407402 A C P _115315 c clauses)). Qed.
Lemma lem8407404 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3162 A C P s s' t x t' _115315 c clauses) = (term3163 A C P s s' t x t' _115315 c clauses).
Proof. exact (fun_ext (fun y : P => @lem8407403 A C P s s' t x t' y _115315 c clauses)). Qed.
Lemma lem8407405 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8407406 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3151 A C P s s' t x t' _115315 c clauses) = (term3164 A C P s s' t x t' _115315 c clauses).
Proof. exact (MK_COMB (@lem8407405 P) (@lem8407404 A C P s s' t x t' _115315 c clauses)). Qed.
Lemma lem8407407 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : ((term3150 A C P s s' t x t' _115315 c clauses) = (term3151 A C P s s' t x t' _115315 c clauses)) = ((term3146 A C P s s' t x t' _115315 c clauses) = (term3164 A C P s s' t x t' _115315 c clauses)).
Proof. exact (MK_COMB (@lem8407398 A C P s s' t x t' _115315 c clauses) (@lem8407406 A C P s s' t x t' _115315 c clauses)). Qed.
Lemma lem8407408 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (x : P) (t' : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3146 A C P s s' t x t' _115315 c clauses) = (term3164 A C P s s' t x t' _115315 c clauses).
Proof. exact (EQ_MP (@lem8407407 A C P s s' t x t' _115315 c clauses) (@lem8407388 A C P s s' t x t' _115315 c clauses)). Qed.
Lemma lem8407409 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3148 A C P s s' t t' _115315 c clauses) = (term3165 A C P s s' t t' _115315 c clauses).
Proof. exact (fun_ext (fun x : P => @lem8407408 A C P s s' t x t' _115315 c clauses)). Qed.
Lemma lem8407410 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8407411 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3149 A C P s s' t t' _115315 c clauses) = (term3166 A C P s s' t t' _115315 c clauses).
Proof. exact (MK_COMB (@lem8407410 P) (@lem8407409 A C P s s' t t' _115315 c clauses)). Qed.
Lemma lem8407412 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (t' : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3131 A C P s s' t t' _115315 c clauses) = (term3166 A C P s s' t t' _115315 c clauses).
Proof. exact (TRANS (@lem8407384 A C P s s' t t' _115315 c clauses) (@lem8407411 A C P s s' t t' _115315 c clauses)). Qed.
Lemma lem8407413 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3133 A C P s s' t _115315 c clauses) = (term3167 A C P s s' t _115315 c clauses).
Proof. exact (fun_ext (fun t' : type1475 A C P => @lem8407412 A C P s s' t t' _115315 c clauses)). Qed.
Lemma lem8407414 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8407415 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3134 A C P s s' t _115315 c clauses) = (term3168 A C P s s' t _115315 c clauses).
Proof. exact (MK_COMB (@lem8407414 A C P) (@lem8407413 A C P s s' t _115315 c clauses)). Qed.
Lemma lem8407416 {A C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3116 A C P s s' t _115315 c clauses) = (term3168 A C P s s' t _115315 c clauses).
Proof. exact (TRANS (@lem8407360 A C P s s' t _115315 c clauses) (@lem8407415 A C P s s' t _115315 c clauses)). Qed.
Lemma lem8407417 {A C P : Type'} (s : P -> A) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3118 A C P s t _115315 c clauses) = (term3169 A C P s t _115315 c clauses).
Proof. exact (fun_ext (fun s' : P -> A => @lem8407416 A C P s s' t _115315 c clauses)). Qed.
Lemma lem8407418 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8407419 {A C P : Type'} (s : P -> A) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3119 A C P s t _115315 c clauses) = (term3170 A C P s t _115315 c clauses).
Proof. exact (MK_COMB (@lem8407418 A P) (@lem8407417 A C P s t _115315 c clauses)). Qed.
Lemma lem8407420 {A C P : Type'} (s : P -> A) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3101 A C P s t _115315 c clauses) = (term3170 A C P s t _115315 c clauses).
Proof. exact (TRANS (@lem8407336 A C P s t _115315 c clauses) (@lem8407419 A C P s t _115315 c clauses)). Qed.
Lemma lem8407421 {A C P : Type'} (s : P -> A) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3103 A C P s _115315 c clauses) = (term3171 A C P s _115315 c clauses).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8407420 A C P s t _115315 c clauses)). Qed.
Lemma lem8407422 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8407423 {A C P : Type'} (s : P -> A) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3104 A C P s _115315 c clauses) = (term3172 A C P s _115315 c clauses).
Proof. exact (MK_COMB (@lem8407422 A C P) (@lem8407421 A C P s _115315 c clauses)). Qed.
Lemma lem8407424 {A C P : Type'} (s : P -> A) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3084 A C P s _115315 c clauses) = (term3172 A C P s _115315 c clauses).
Proof. exact (TRANS (@lem8407312 A C P s _115315 c clauses) (@lem8407423 A C P s _115315 c clauses)). Qed.
Lemma lem8407425 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3086 A C P _115315 c clauses) = (term3173 A C P _115315 c clauses).
Proof. exact (fun_ext (fun s : P -> A => @lem8407424 A C P s _115315 c clauses)). Qed.
Lemma lem8407426 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8407427 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3087 A C P _115315 c clauses) = (term3174 A C P _115315 c clauses).
Proof. exact (MK_COMB (@lem8407426 A P) (@lem8407425 A C P _115315 c clauses)). Qed.
Lemma lem8407428 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3064 A C P _115315 c clauses) = (term3174 A C P _115315 c clauses).
Proof. exact (TRANS (@lem8407288 A C P _115315 c clauses) (@lem8407427 A C P _115315 c clauses)). Qed.
Lemma lem8407429 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3065 A C P _115315 clauses) = (term3175 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8407428 A C P _115315 c clauses)). Qed.
Lemma lem8407430 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8407431 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3066 A C P _115315 clauses) = (term3176 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8407430 C) (@lem8407429 A C P _115315 clauses)). Qed.
Lemma lem8407433 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8407434 {A C P : Type'} (P' : type1455 A C P) : (term3177 A C P P') = (term3178 A C P P').
Proof. exact (@lem8407433 C (P -> A) P'). Qed.
Lemma lem8407435 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3179 A C P _115315 clauses) = (term3180 A C P _115315 clauses).
Proof. exact (@lem8407434 A C P (term3181 A C P _115315 clauses)). Qed.
Lemma lem8407436 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3182 A C P _115315 clauses c) = (term3173 A C P _115315 c clauses).
Proof. exact (eq_refl (term3182 A C P _115315 clauses c)). Qed.
Lemma lem8407437 {A P : Type'} (s : P -> A) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8407438 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) (s : P -> A) : (term3183 A C P _115315 clauses c s) = (term3184 A C P _115315 c clauses s).
Proof. exact (MK_COMB (@lem8407436 A C P _115315 c clauses) (@lem8407437 A P s)). Qed.
Lemma lem8407439 {A C P : Type'} (s : P -> A) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3184 A C P _115315 c clauses s) = (term3172 A C P s _115315 c clauses).
Proof. exact (eq_refl (term3184 A C P _115315 c clauses s)). Qed.
Lemma lem8407440 {A C P : Type'} (s : P -> A) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3183 A C P _115315 clauses c s) = (term3172 A C P s _115315 c clauses).
Proof. exact (TRANS (@lem8407438 A C P _115315 c clauses s) (@lem8407439 A C P s _115315 c clauses)). Qed.
Lemma lem8407441 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3185 A C P _115315 clauses c) = (term3173 A C P _115315 c clauses).
Proof. exact (fun_ext (fun s : P -> A => @lem8407440 A C P s _115315 c clauses)). Qed.
Lemma lem8407442 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8407443 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3186 A C P _115315 clauses c) = (term3174 A C P _115315 c clauses).
Proof. exact (MK_COMB (@lem8407442 A P) (@lem8407441 A C P _115315 c clauses)). Qed.
Lemma lem8407444 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3187 A C P _115315 clauses) = (term3175 A C P _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8407443 A C P _115315 c clauses)). Qed.
Lemma lem8407445 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8407446 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3179 A C P _115315 clauses) = (term3176 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8407445 C) (@lem8407444 A C P _115315 clauses)). Qed.
Lemma lem8407447 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8407448 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3188 A C P _115315 clauses) = (term3189 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8407447) (@lem8407446 A C P _115315 clauses)). Qed.
Lemma lem8407449 {A C P : Type'} (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3182 A C P _115315 clauses c) = (term3173 A C P _115315 c clauses).
Proof. exact (eq_refl (term3182 A C P _115315 clauses c)). Qed.
Lemma lem8407450 {A C P : Type'} (s : type1475 A C P) (c : C) : (s c) = (s c).
Proof. exact (eq_refl (s c)). Qed.
Lemma lem8407451 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1475 A C P) (c : C) : (term3190 A C P _115315 clauses s c) = (term3191 A C P _115315 clauses s c).
Proof. exact (MK_COMB (@lem8407449 A C P _115315 c clauses) (@lem8407450 A C P s c)). Qed.
Lemma lem8407452 {A C P : Type'} (s : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3191 A C P _115315 clauses s c) = (term3192 A C P s _115315 c clauses).
Proof. exact (eq_refl (term3191 A C P _115315 clauses s c)). Qed.
Lemma lem8407453 {A C P : Type'} (s : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3190 A C P _115315 clauses s c) = (term3192 A C P s _115315 c clauses).
Proof. exact (TRANS (@lem8407451 A C P _115315 clauses s c) (@lem8407452 A C P s _115315 c clauses)). Qed.
Lemma lem8407454 {A C P : Type'} (s : type1475 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3193 A C P _115315 clauses s) = (term3194 A C P s _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8407453 A C P s _115315 c clauses)). Qed.
Lemma lem8407455 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8407456 {A C P : Type'} (s : type1475 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3195 A C P _115315 clauses s) = (term3196 A C P s _115315 clauses).
Proof. exact (MK_COMB (@lem8407455 C) (@lem8407454 A C P s _115315 clauses)). Qed.
Lemma lem8407457 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3197 A C P _115315 clauses) = (term3198 A C P _115315 clauses).
Proof. exact (fun_ext (fun s : type1475 A C P => @lem8407456 A C P s _115315 clauses)). Qed.
Lemma lem8407458 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8407459 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3180 A C P _115315 clauses) = (term3199 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8407458 A C P) (@lem8407457 A C P _115315 clauses)). Qed.
Lemma lem8407460 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : ((term3179 A C P _115315 clauses) = (term3180 A C P _115315 clauses)) = ((term3176 A C P _115315 clauses) = (term3199 A C P _115315 clauses)).
Proof. exact (MK_COMB (@lem8407448 A C P _115315 clauses) (@lem8407459 A C P _115315 clauses)). Qed.
Lemma lem8407461 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3176 A C P _115315 clauses) = (term3199 A C P _115315 clauses).
Proof. exact (EQ_MP (@lem8407460 A C P _115315 clauses) (@lem8407435 A C P _115315 clauses)). Qed.
Lemma lem8407463 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8407464 {A C P : Type'} (P' : type1451 A C P) : (term3200 A C P P') = (term3201 A C P P').
Proof. exact (@lem8407463 C (type1475 A C P) P'). Qed.
Lemma lem8407465 {A C P : Type'} (s : type1475 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3202 A C P s _115315 clauses) = (term3203 A C P s _115315 clauses).
Proof. exact (@lem8407464 A C P (term3204 A C P s _115315 clauses)). Qed.
Lemma lem8407466 {A C P : Type'} (s : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3205 A C P s _115315 clauses c) = (term3206 A C P s _115315 c clauses).
Proof. exact (eq_refl (term3205 A C P s _115315 clauses c)). Qed.
Lemma lem8407467 {A C P : Type'} (t : type1475 A C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8407468 {A C P : Type'} (s : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) (t : type1475 A C P) : (term3207 A C P s _115315 clauses c t) = (term3208 A C P s _115315 c clauses t).
Proof. exact (MK_COMB (@lem8407466 A C P s _115315 c clauses) (@lem8407467 A C P t)). Qed.
Lemma lem8407469 {A C P : Type'} (s : type1475 A C P) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3208 A C P s _115315 c clauses t) = (term3209 A C P s t _115315 c clauses).
Proof. exact (eq_refl (term3208 A C P s _115315 c clauses t)). Qed.
Lemma lem8407470 {A C P : Type'} (s : type1475 A C P) (t : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3207 A C P s _115315 clauses c t) = (term3209 A C P s t _115315 c clauses).
Proof. exact (TRANS (@lem8407468 A C P s _115315 c clauses t) (@lem8407469 A C P s t _115315 c clauses)). Qed.
Lemma lem8407471 {A C P : Type'} (s : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3210 A C P s _115315 clauses c) = (term3206 A C P s _115315 c clauses).
Proof. exact (fun_ext (fun t : type1475 A C P => @lem8407470 A C P s t _115315 c clauses)). Qed.
Lemma lem8407472 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8407473 {A C P : Type'} (s : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3211 A C P s _115315 clauses c) = (term3192 A C P s _115315 c clauses).
Proof. exact (MK_COMB (@lem8407472 A C P) (@lem8407471 A C P s _115315 c clauses)). Qed.
Lemma lem8407474 {A C P : Type'} (s : type1475 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3212 A C P s _115315 clauses) = (term3194 A C P s _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8407473 A C P s _115315 c clauses)). Qed.
Lemma lem8407475 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8407476 {A C P : Type'} (s : type1475 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3202 A C P s _115315 clauses) = (term3196 A C P s _115315 clauses).
Proof. exact (MK_COMB (@lem8407475 C) (@lem8407474 A C P s _115315 clauses)). Qed.
Lemma lem8407477 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8407478 {A C P : Type'} (s : type1475 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3213 A C P s _115315 clauses) = (term3214 A C P s _115315 clauses).
Proof. exact (MK_COMB (@lem8407477) (@lem8407476 A C P s _115315 clauses)). Qed.
Lemma lem8407479 {A C P : Type'} (s : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3205 A C P s _115315 clauses c) = (term3206 A C P s _115315 c clauses).
Proof. exact (eq_refl (term3205 A C P s _115315 clauses c)). Qed.
Lemma lem8407480 {A C P : Type'} (t : type1473 A C P) (c : C) : (t c) = (t c).
Proof. exact (eq_refl (t c)). Qed.
Lemma lem8407481 {A C P : Type'} (s : type1475 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) (t : type1473 A C P) (c : C) : (term3215 A C P s _115315 clauses t c) = (term3216 A C P s _115315 clauses t c).
Proof. exact (MK_COMB (@lem8407479 A C P s _115315 c clauses) (@lem8407480 A C P t c)). Qed.
Lemma lem8407482 {A C P : Type'} (s : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3216 A C P s _115315 clauses t c) = (term3217 A C P s t _115315 c clauses).
Proof. exact (eq_refl (term3216 A C P s _115315 clauses t c)). Qed.
Lemma lem8407483 {A C P : Type'} (s : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3215 A C P s _115315 clauses t c) = (term3217 A C P s t _115315 c clauses).
Proof. exact (TRANS (@lem8407481 A C P s _115315 clauses t c) (@lem8407482 A C P s t _115315 c clauses)). Qed.
Lemma lem8407484 {A C P : Type'} (s : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3218 A C P s _115315 clauses t) = (term3219 A C P s t _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8407483 A C P s t _115315 c clauses)). Qed.
Lemma lem8407485 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8407486 {A C P : Type'} (s : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3220 A C P s _115315 clauses t) = (term3221 A C P s t _115315 clauses).
Proof. exact (MK_COMB (@lem8407485 C) (@lem8407484 A C P s t _115315 clauses)). Qed.
Lemma lem8407487 {A C P : Type'} (s : type1475 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3222 A C P s _115315 clauses) = (term3223 A C P s _115315 clauses).
Proof. exact (fun_ext (fun t : type1473 A C P => @lem8407486 A C P s t _115315 clauses)). Qed.
Lemma lem8407488 {A C P : Type'} : (@ex (C -> C -> P -> A)) = (@ex (C -> C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> C -> P -> A))). Qed.
Lemma lem8407489 {A C P : Type'} (s : type1475 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3203 A C P s _115315 clauses) = (term3224 A C P s _115315 clauses).
Proof. exact (MK_COMB (@lem8407488 A C P) (@lem8407487 A C P s _115315 clauses)). Qed.
Lemma lem8407490 {A C P : Type'} (s : type1475 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : ((term3202 A C P s _115315 clauses) = (term3203 A C P s _115315 clauses)) = ((term3196 A C P s _115315 clauses) = (term3224 A C P s _115315 clauses)).
Proof. exact (MK_COMB (@lem8407478 A C P s _115315 clauses) (@lem8407489 A C P s _115315 clauses)). Qed.
Lemma lem8407491 {A C P : Type'} (s : type1475 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3196 A C P s _115315 clauses) = (term3224 A C P s _115315 clauses).
Proof. exact (EQ_MP (@lem8407490 A C P s _115315 clauses) (@lem8407465 A C P s _115315 clauses)). Qed.
Lemma lem8407493 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8407494 {A C P : Type'} (P' : type1455 A C P) : (term3177 A C P P') = (term3178 A C P P').
Proof. exact (@lem8407493 C (P -> A) P'). Qed.
Lemma lem8407495 {A C P : Type'} (s : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3225 A C P s t _115315 clauses) = (term3226 A C P s t _115315 clauses).
Proof. exact (@lem8407494 A C P (term3227 A C P s t _115315 clauses)). Qed.
Lemma lem8407496 {A C P : Type'} (s : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3228 A C P s t _115315 clauses c) = (term3229 A C P s t _115315 c clauses).
Proof. exact (eq_refl (term3228 A C P s t _115315 clauses c)). Qed.
Lemma lem8407497 {A P : Type'} (s' : P -> A) : s' = s'.
Proof. exact (eq_refl s'). Qed.
Lemma lem8407498 {A C P : Type'} (s : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) (s' : P -> A) : (term3230 A C P s t _115315 clauses c s') = (term3231 A C P s t _115315 c clauses s').
Proof. exact (MK_COMB (@lem8407496 A C P s t _115315 c clauses) (@lem8407497 A P s')). Qed.
Lemma lem8407499 {A C P : Type'} (s : type1475 A C P) (s' : P -> A) (t : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3231 A C P s t _115315 c clauses s') = (term3232 A C P s s' t _115315 c clauses).
Proof. exact (eq_refl (term3231 A C P s t _115315 c clauses s')). Qed.
Lemma lem8407500 {A C P : Type'} (s : type1475 A C P) (s' : P -> A) (t : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3230 A C P s t _115315 clauses c s') = (term3232 A C P s s' t _115315 c clauses).
Proof. exact (TRANS (@lem8407498 A C P s t _115315 c clauses s') (@lem8407499 A C P s s' t _115315 c clauses)). Qed.
Lemma lem8407501 {A C P : Type'} (s : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3233 A C P s t _115315 clauses c) = (term3229 A C P s t _115315 c clauses).
Proof. exact (fun_ext (fun s' : P -> A => @lem8407500 A C P s s' t _115315 c clauses)). Qed.
Lemma lem8407502 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8407503 {A C P : Type'} (s : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3234 A C P s t _115315 clauses c) = (term3217 A C P s t _115315 c clauses).
Proof. exact (MK_COMB (@lem8407502 A P) (@lem8407501 A C P s t _115315 c clauses)). Qed.
Lemma lem8407504 {A C P : Type'} (s : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3235 A C P s t _115315 clauses) = (term3219 A C P s t _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8407503 A C P s t _115315 c clauses)). Qed.
Lemma lem8407505 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8407506 {A C P : Type'} (s : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3225 A C P s t _115315 clauses) = (term3221 A C P s t _115315 clauses).
Proof. exact (MK_COMB (@lem8407505 C) (@lem8407504 A C P s t _115315 clauses)). Qed.
Lemma lem8407507 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8407508 {A C P : Type'} (s : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3236 A C P s t _115315 clauses) = (term3237 A C P s t _115315 clauses).
Proof. exact (MK_COMB (@lem8407507) (@lem8407506 A C P s t _115315 clauses)). Qed.
Lemma lem8407509 {A C P : Type'} (s : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3228 A C P s t _115315 clauses c) = (term3229 A C P s t _115315 c clauses).
Proof. exact (eq_refl (term3228 A C P s t _115315 clauses c)). Qed.
Lemma lem8407510 {A C P : Type'} (s' : type1475 A C P) (c : C) : (s' c) = (s' c).
Proof. exact (eq_refl (s' c)). Qed.
Lemma lem8407511 {A C P : Type'} (s : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) (s' : type1475 A C P) (c : C) : (term3238 A C P s t _115315 clauses s' c) = (term3239 A C P s t _115315 clauses s' c).
Proof. exact (MK_COMB (@lem8407509 A C P s t _115315 c clauses) (@lem8407510 A C P s' c)). Qed.
Lemma lem8407512 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3239 A C P s t _115315 clauses s' c) = (term3240 A C P s s' t _115315 c clauses).
Proof. exact (eq_refl (term3239 A C P s t _115315 clauses s' c)). Qed.
Lemma lem8407513 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3238 A C P s t _115315 clauses s' c) = (term3240 A C P s s' t _115315 c clauses).
Proof. exact (TRANS (@lem8407511 A C P s t _115315 clauses s' c) (@lem8407512 A C P s s' t _115315 c clauses)). Qed.
Lemma lem8407514 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3241 A C P s t _115315 clauses s') = (term3242 A C P s s' t _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8407513 A C P s s' t _115315 c clauses)). Qed.
Lemma lem8407515 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8407516 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3243 A C P s t _115315 clauses s') = (term3244 A C P s s' t _115315 clauses).
Proof. exact (MK_COMB (@lem8407515 C) (@lem8407514 A C P s s' t _115315 clauses)). Qed.
Lemma lem8407517 {A C P : Type'} (s : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3245 A C P s t _115315 clauses) = (term3246 A C P s t _115315 clauses).
Proof. exact (fun_ext (fun s' : type1475 A C P => @lem8407516 A C P s s' t _115315 clauses)). Qed.
Lemma lem8407518 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8407519 {A C P : Type'} (s : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3226 A C P s t _115315 clauses) = (term3247 A C P s t _115315 clauses).
Proof. exact (MK_COMB (@lem8407518 A C P) (@lem8407517 A C P s t _115315 clauses)). Qed.
Lemma lem8407520 {A C P : Type'} (s : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : ((term3225 A C P s t _115315 clauses) = (term3226 A C P s t _115315 clauses)) = ((term3221 A C P s t _115315 clauses) = (term3247 A C P s t _115315 clauses)).
Proof. exact (MK_COMB (@lem8407508 A C P s t _115315 clauses) (@lem8407519 A C P s t _115315 clauses)). Qed.
Lemma lem8407521 {A C P : Type'} (s : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3221 A C P s t _115315 clauses) = (term3247 A C P s t _115315 clauses).
Proof. exact (EQ_MP (@lem8407520 A C P s t _115315 clauses) (@lem8407495 A C P s t _115315 clauses)). Qed.
Lemma lem8407523 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8407524 {A C P : Type'} (P' : type1451 A C P) : (term3200 A C P P') = (term3201 A C P P').
Proof. exact (@lem8407523 C (type1475 A C P) P'). Qed.
Lemma lem8407525 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3248 A C P s s' t _115315 clauses) = (term3249 A C P s s' t _115315 clauses).
Proof. exact (@lem8407524 A C P (term3250 A C P s s' t _115315 clauses)). Qed.
Lemma lem8407526 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3251 A C P s s' t _115315 clauses c) = (term3252 A C P s s' t _115315 c clauses).
Proof. exact (eq_refl (term3251 A C P s s' t _115315 clauses c)). Qed.
Lemma lem8407527 {A C P : Type'} (t' : type1475 A C P) : t' = t'.
Proof. exact (eq_refl t'). Qed.
Lemma lem8407528 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) (t' : type1475 A C P) : (term3253 A C P s s' t _115315 clauses c t') = (term3254 A C P s s' t _115315 c clauses t').
Proof. exact (MK_COMB (@lem8407526 A C P s s' t _115315 c clauses) (@lem8407527 A C P t')). Qed.
Lemma lem8407529 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (t' : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3254 A C P s s' t _115315 c clauses t') = (term3255 A C P s s' t t' _115315 c clauses).
Proof. exact (eq_refl (term3254 A C P s s' t _115315 c clauses t')). Qed.
Lemma lem8407530 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (t' : type1475 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3253 A C P s s' t _115315 clauses c t') = (term3255 A C P s s' t t' _115315 c clauses).
Proof. exact (TRANS (@lem8407528 A C P s s' t _115315 c clauses t') (@lem8407529 A C P s s' t t' _115315 c clauses)). Qed.
Lemma lem8407531 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3256 A C P s s' t _115315 clauses c) = (term3252 A C P s s' t _115315 c clauses).
Proof. exact (fun_ext (fun t' : type1475 A C P => @lem8407530 A C P s s' t t' _115315 c clauses)). Qed.
Lemma lem8407532 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8407533 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3257 A C P s s' t _115315 clauses c) = (term3240 A C P s s' t _115315 c clauses).
Proof. exact (MK_COMB (@lem8407532 A C P) (@lem8407531 A C P s s' t _115315 c clauses)). Qed.
Lemma lem8407534 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3258 A C P s s' t _115315 clauses) = (term3242 A C P s s' t _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8407533 A C P s s' t _115315 c clauses)). Qed.
Lemma lem8407535 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8407536 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3248 A C P s s' t _115315 clauses) = (term3244 A C P s s' t _115315 clauses).
Proof. exact (MK_COMB (@lem8407535 C) (@lem8407534 A C P s s' t _115315 clauses)). Qed.
Lemma lem8407537 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8407538 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3259 A C P s s' t _115315 clauses) = (term3260 A C P s s' t _115315 clauses).
Proof. exact (MK_COMB (@lem8407537) (@lem8407536 A C P s s' t _115315 clauses)). Qed.
Lemma lem8407539 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3251 A C P s s' t _115315 clauses c) = (term3252 A C P s s' t _115315 c clauses).
Proof. exact (eq_refl (term3251 A C P s s' t _115315 clauses c)). Qed.
Lemma lem8407540 {A C P : Type'} (t' : type1473 A C P) (c : C) : (t' c) = (t' c).
Proof. exact (eq_refl (t' c)). Qed.
Lemma lem8407541 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) (t' : type1473 A C P) (c : C) : (term3261 A C P s s' t _115315 clauses t' c) = (term3262 A C P s s' t _115315 clauses t' c).
Proof. exact (MK_COMB (@lem8407539 A C P s s' t _115315 c clauses) (@lem8407540 A C P t' c)). Qed.
Lemma lem8407542 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (t' : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3262 A C P s s' t _115315 clauses t' c) = (term3263 A C P s s' t t' _115315 c clauses).
Proof. exact (eq_refl (term3262 A C P s s' t _115315 clauses t' c)). Qed.
Lemma lem8407543 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (t' : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3261 A C P s s' t _115315 clauses t' c) = (term3263 A C P s s' t t' _115315 c clauses).
Proof. exact (TRANS (@lem8407541 A C P s s' t _115315 clauses t' c) (@lem8407542 A C P s s' t t' _115315 c clauses)). Qed.
Lemma lem8407544 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3264 A C P s s' t _115315 clauses t') = (term3265 A C P s s' t t' _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8407543 A C P s s' t t' _115315 c clauses)). Qed.
Lemma lem8407545 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8407546 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3266 A C P s s' t _115315 clauses t') = (term3267 A C P s s' t t' _115315 clauses).
Proof. exact (MK_COMB (@lem8407545 C) (@lem8407544 A C P s s' t t' _115315 clauses)). Qed.
Lemma lem8407547 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3268 A C P s s' t _115315 clauses) = (term3269 A C P s s' t _115315 clauses).
Proof. exact (fun_ext (fun t' : type1473 A C P => @lem8407546 A C P s s' t t' _115315 clauses)). Qed.
Lemma lem8407548 {A C P : Type'} : (@ex (C -> C -> P -> A)) = (@ex (C -> C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> C -> P -> A))). Qed.
Lemma lem8407549 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3249 A C P s s' t _115315 clauses) = (term3270 A C P s s' t _115315 clauses).
Proof. exact (MK_COMB (@lem8407548 A C P) (@lem8407547 A C P s s' t _115315 clauses)). Qed.
Lemma lem8407550 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : ((term3248 A C P s s' t _115315 clauses) = (term3249 A C P s s' t _115315 clauses)) = ((term3244 A C P s s' t _115315 clauses) = (term3270 A C P s s' t _115315 clauses)).
Proof. exact (MK_COMB (@lem8407538 A C P s s' t _115315 clauses) (@lem8407549 A C P s s' t _115315 clauses)). Qed.
Lemma lem8407551 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3244 A C P s s' t _115315 clauses) = (term3270 A C P s s' t _115315 clauses).
Proof. exact (EQ_MP (@lem8407550 A C P s s' t _115315 clauses) (@lem8407525 A C P s s' t _115315 clauses)). Qed.
Lemma lem8407553 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8407554 {C P : Type'} (P' : type1413 C P) : (term1174 C P P') = (term1175 C P P').
Proof. exact (@lem8407553 C P P'). Qed.
Lemma lem8407555 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3271 A C P s s' t t' _115315 clauses) = (term3272 A C P s s' t t' _115315 clauses).
Proof. exact (@lem8407554 C P (term3273 A C P s s' t t' _115315 clauses)). Qed.
Lemma lem8407556 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (t' : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3274 A C P s s' t t' _115315 clauses c) = (term3275 A C P s s' t t' _115315 c clauses).
Proof. exact (eq_refl (term3274 A C P s s' t t' _115315 clauses c)). Qed.
Lemma lem8407557 {P : Type'} (x : P) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8407558 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (t' : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) (x : P) : (term3276 A C P s s' t t' _115315 clauses c x) = (term3277 A C P s s' t t' _115315 c clauses x).
Proof. exact (MK_COMB (@lem8407556 A C P s s' t t' _115315 c clauses) (@lem8407557 P x)). Qed.
Lemma lem8407559 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : P) (t' : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3277 A C P s s' t t' _115315 c clauses x) = (term3278 A C P s s' t x t' _115315 c clauses).
Proof. exact (eq_refl (term3277 A C P s s' t t' _115315 c clauses x)). Qed.
Lemma lem8407560 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : P) (t' : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3276 A C P s s' t t' _115315 clauses c x) = (term3278 A C P s s' t x t' _115315 c clauses).
Proof. exact (TRANS (@lem8407558 A C P s s' t t' _115315 c clauses x) (@lem8407559 A C P s s' t x t' _115315 c clauses)). Qed.
Lemma lem8407561 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (t' : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3279 A C P s s' t t' _115315 clauses c) = (term3275 A C P s s' t t' _115315 c clauses).
Proof. exact (fun_ext (fun x : P => @lem8407560 A C P s s' t x t' _115315 c clauses)). Qed.
Lemma lem8407562 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8407563 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (t' : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3280 A C P s s' t t' _115315 clauses c) = (term3263 A C P s s' t t' _115315 c clauses).
Proof. exact (MK_COMB (@lem8407562 P) (@lem8407561 A C P s s' t t' _115315 c clauses)). Qed.
Lemma lem8407564 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3281 A C P s s' t t' _115315 clauses) = (term3265 A C P s s' t t' _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8407563 A C P s s' t t' _115315 c clauses)). Qed.
Lemma lem8407565 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8407566 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3271 A C P s s' t t' _115315 clauses) = (term3267 A C P s s' t t' _115315 clauses).
Proof. exact (MK_COMB (@lem8407565 C) (@lem8407564 A C P s s' t t' _115315 clauses)). Qed.
Lemma lem8407567 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8407568 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3282 A C P s s' t t' _115315 clauses) = (term3283 A C P s s' t t' _115315 clauses).
Proof. exact (MK_COMB (@lem8407567) (@lem8407566 A C P s s' t t' _115315 clauses)). Qed.
Lemma lem8407569 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (t' : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3274 A C P s s' t t' _115315 clauses c) = (term3275 A C P s s' t t' _115315 c clauses).
Proof. exact (eq_refl (term3274 A C P s s' t t' _115315 clauses c)). Qed.
Lemma lem8407570 {C P : Type'} (x : C -> P) (c : C) : (x c) = (x c).
Proof. exact (eq_refl (x c)). Qed.
Lemma lem8407571 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) (x : C -> P) (c : C) : (term3284 A C P s s' t t' _115315 clauses x c) = (term3285 A C P s s' t t' _115315 clauses x c).
Proof. exact (MK_COMB (@lem8407569 A C P s s' t t' _115315 c clauses) (@lem8407570 C P x c)). Qed.
Lemma lem8407572 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3285 A C P s s' t t' _115315 clauses x c) = (term3286 A C P s s' t x t' _115315 c clauses).
Proof. exact (eq_refl (term3285 A C P s s' t t' _115315 clauses x c)). Qed.
Lemma lem8407573 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3284 A C P s s' t t' _115315 clauses x c) = (term3286 A C P s s' t x t' _115315 c clauses).
Proof. exact (TRANS (@lem8407571 A C P s s' t t' _115315 clauses x c) (@lem8407572 A C P s s' t x t' _115315 c clauses)). Qed.
Lemma lem8407574 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3287 A C P s s' t t' _115315 clauses x) = (term3288 A C P s s' t x t' _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8407573 A C P s s' t x t' _115315 c clauses)). Qed.
Lemma lem8407575 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8407576 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3289 A C P s s' t t' _115315 clauses x) = (term3290 A C P s s' t x t' _115315 clauses).
Proof. exact (MK_COMB (@lem8407575 C) (@lem8407574 A C P s s' t x t' _115315 clauses)). Qed.
Lemma lem8407577 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3291 A C P s s' t t' _115315 clauses) = (term3292 A C P s s' t t' _115315 clauses).
Proof. exact (fun_ext (fun x : C -> P => @lem8407576 A C P s s' t x t' _115315 clauses)). Qed.
Lemma lem8407578 {C P : Type'} : (@ex (C -> P)) = (@ex (C -> P)).
Proof. exact (eq_refl (@ex (C -> P))). Qed.
Lemma lem8407579 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3272 A C P s s' t t' _115315 clauses) = (term3293 A C P s s' t t' _115315 clauses).
Proof. exact (MK_COMB (@lem8407578 C P) (@lem8407577 A C P s s' t t' _115315 clauses)). Qed.
Lemma lem8407580 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : ((term3271 A C P s s' t t' _115315 clauses) = (term3272 A C P s s' t t' _115315 clauses)) = ((term3267 A C P s s' t t' _115315 clauses) = (term3293 A C P s s' t t' _115315 clauses)).
Proof. exact (MK_COMB (@lem8407568 A C P s s' t t' _115315 clauses) (@lem8407579 A C P s s' t t' _115315 clauses)). Qed.
Lemma lem8407581 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3267 A C P s s' t t' _115315 clauses) = (term3293 A C P s s' t t' _115315 clauses).
Proof. exact (EQ_MP (@lem8407580 A C P s s' t t' _115315 clauses) (@lem8407555 A C P s s' t t' _115315 clauses)). Qed.
Lemma lem8407583 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8407584 {C P : Type'} (P' : type1413 C P) : (term1174 C P P') = (term1175 C P P').
Proof. exact (@lem8407583 C P P'). Qed.
Lemma lem8407585 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3294 A C P s s' t x t' _115315 clauses) = (term3295 A C P s s' t x t' _115315 clauses).
Proof. exact (@lem8407584 C P (term3296 A C P s s' t x t' _115315 clauses)). Qed.
Lemma lem8407586 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3297 A C P s s' t x t' _115315 clauses c) = (term3298 A C P s s' t x t' _115315 c clauses).
Proof. exact (eq_refl (term3297 A C P s s' t x t' _115315 clauses c)). Qed.
Lemma lem8407587 {P : Type'} (y : P) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem8407588 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) (y : P) : (term3299 A C P s s' t x t' _115315 clauses c y) = (term3300 A C P s s' t x t' _115315 c clauses y).
Proof. exact (MK_COMB (@lem8407586 A C P s s' t x t' _115315 c clauses) (@lem8407587 P y)). Qed.
Lemma lem8407589 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (y : P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3300 A C P s s' t x t' _115315 c clauses y) = (term3301 A C P s s' t x t' y _115315 c clauses).
Proof. exact (eq_refl (term3300 A C P s s' t x t' _115315 c clauses y)). Qed.
Lemma lem8407590 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (y : P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3299 A C P s s' t x t' _115315 clauses c y) = (term3301 A C P s s' t x t' y _115315 c clauses).
Proof. exact (TRANS (@lem8407588 A C P s s' t x t' _115315 c clauses y) (@lem8407589 A C P s s' t x t' y _115315 c clauses)). Qed.
Lemma lem8407591 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3302 A C P s s' t x t' _115315 clauses c) = (term3298 A C P s s' t x t' _115315 c clauses).
Proof. exact (fun_ext (fun y : P => @lem8407590 A C P s s' t x t' y _115315 c clauses)). Qed.
Lemma lem8407592 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8407593 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3303 A C P s s' t x t' _115315 clauses c) = (term3286 A C P s s' t x t' _115315 c clauses).
Proof. exact (MK_COMB (@lem8407592 P) (@lem8407591 A C P s s' t x t' _115315 c clauses)). Qed.
Lemma lem8407594 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3304 A C P s s' t x t' _115315 clauses) = (term3288 A C P s s' t x t' _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8407593 A C P s s' t x t' _115315 c clauses)). Qed.
Lemma lem8407595 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8407596 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3294 A C P s s' t x t' _115315 clauses) = (term3290 A C P s s' t x t' _115315 clauses).
Proof. exact (MK_COMB (@lem8407595 C) (@lem8407594 A C P s s' t x t' _115315 clauses)). Qed.
Lemma lem8407597 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8407598 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3305 A C P s s' t x t' _115315 clauses) = (term3306 A C P s s' t x t' _115315 clauses).
Proof. exact (MK_COMB (@lem8407597) (@lem8407596 A C P s s' t x t' _115315 clauses)). Qed.
Lemma lem8407599 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3297 A C P s s' t x t' _115315 clauses c) = (term3298 A C P s s' t x t' _115315 c clauses).
Proof. exact (eq_refl (term3297 A C P s s' t x t' _115315 clauses c)). Qed.
Lemma lem8407600 {C P : Type'} (y : C -> P) (c : C) : (y c) = (y c).
Proof. exact (eq_refl (y c)). Qed.
Lemma lem8407601 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) (y : C -> P) (c : C) : (term3307 A C P s s' t x t' _115315 clauses y c) = (term3308 A C P s s' t x t' _115315 clauses y c).
Proof. exact (MK_COMB (@lem8407599 A C P s s' t x t' _115315 c clauses) (@lem8407600 C P y c)). Qed.
Lemma lem8407602 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (y : C -> P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3308 A C P s s' t x t' _115315 clauses y c) = (term3309 A C P s s' t x t' y _115315 c clauses).
Proof. exact (eq_refl (term3308 A C P s s' t x t' _115315 clauses y c)). Qed.
Lemma lem8407603 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (y : C -> P) (_115315 : type1092 A C P) (c : C) (clauses : type1636 A C P) : (term3307 A C P s s' t x t' _115315 clauses y c) = (term3309 A C P s s' t x t' y _115315 c clauses).
Proof. exact (TRANS (@lem8407601 A C P s s' t x t' _115315 clauses y c) (@lem8407602 A C P s s' t x t' y _115315 c clauses)). Qed.
Lemma lem8407604 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (y : C -> P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3310 A C P s s' t x t' _115315 clauses y) = (term3311 A C P s s' t x t' y _115315 clauses).
Proof. exact (fun_ext (fun c : C => @lem8407603 A C P s s' t x t' y _115315 c clauses)). Qed.
Lemma lem8407605 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8407606 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (y : C -> P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3312 A C P s s' t x t' _115315 clauses y) = (term3313 A C P s s' t x t' y _115315 clauses).
Proof. exact (MK_COMB (@lem8407605 C) (@lem8407604 A C P s s' t x t' y _115315 clauses)). Qed.
Lemma lem8407607 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3314 A C P s s' t x t' _115315 clauses) = (term3315 A C P s s' t x t' _115315 clauses).
Proof. exact (fun_ext (fun y : C -> P => @lem8407606 A C P s s' t x t' y _115315 clauses)). Qed.
Lemma lem8407608 {C P : Type'} : (@ex (C -> P)) = (@ex (C -> P)).
Proof. exact (eq_refl (@ex (C -> P))). Qed.
Lemma lem8407609 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3295 A C P s s' t x t' _115315 clauses) = (term3316 A C P s s' t x t' _115315 clauses).
Proof. exact (MK_COMB (@lem8407608 C P) (@lem8407607 A C P s s' t x t' _115315 clauses)). Qed.
Lemma lem8407610 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : ((term3294 A C P s s' t x t' _115315 clauses) = (term3295 A C P s s' t x t' _115315 clauses)) = ((term3290 A C P s s' t x t' _115315 clauses) = (term3316 A C P s s' t x t' _115315 clauses)).
Proof. exact (MK_COMB (@lem8407598 A C P s s' t x t' _115315 clauses) (@lem8407609 A C P s s' t x t' _115315 clauses)). Qed.
Lemma lem8407611 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (x : C -> P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3290 A C P s s' t x t' _115315 clauses) = (term3316 A C P s s' t x t' _115315 clauses).
Proof. exact (EQ_MP (@lem8407610 A C P s s' t x t' _115315 clauses) (@lem8407585 A C P s s' t x t' _115315 clauses)). Qed.
Lemma lem8407612 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3292 A C P s s' t t' _115315 clauses) = (term3317 A C P s s' t t' _115315 clauses).
Proof. exact (fun_ext (fun x : C -> P => @lem8407611 A C P s s' t x t' _115315 clauses)). Qed.
Lemma lem8407613 {C P : Type'} : (@ex (C -> P)) = (@ex (C -> P)).
Proof. exact (eq_refl (@ex (C -> P))). Qed.
Lemma lem8407614 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3293 A C P s s' t t' _115315 clauses) = (term3318 A C P s s' t t' _115315 clauses).
Proof. exact (MK_COMB (@lem8407613 C P) (@lem8407612 A C P s s' t t' _115315 clauses)). Qed.
Lemma lem8407615 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3267 A C P s s' t t' _115315 clauses) = (term3318 A C P s s' t t' _115315 clauses).
Proof. exact (TRANS (@lem8407581 A C P s s' t t' _115315 clauses) (@lem8407614 A C P s s' t t' _115315 clauses)). Qed.
Lemma lem8407616 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3269 A C P s s' t _115315 clauses) = (term3319 A C P s s' t _115315 clauses).
Proof. exact (fun_ext (fun t' : type1473 A C P => @lem8407615 A C P s s' t t' _115315 clauses)). Qed.
Lemma lem8407617 {A C P : Type'} : (@ex (C -> C -> P -> A)) = (@ex (C -> C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> C -> P -> A))). Qed.
Lemma lem8407618 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3270 A C P s s' t _115315 clauses) = (term3320 A C P s s' t _115315 clauses).
Proof. exact (MK_COMB (@lem8407617 A C P) (@lem8407616 A C P s s' t _115315 clauses)). Qed.
Lemma lem8407619 {A C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3244 A C P s s' t _115315 clauses) = (term3320 A C P s s' t _115315 clauses).
Proof. exact (TRANS (@lem8407551 A C P s s' t _115315 clauses) (@lem8407618 A C P s s' t _115315 clauses)). Qed.
Lemma lem8407620 {A C P : Type'} (s : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3246 A C P s t _115315 clauses) = (term3321 A C P s t _115315 clauses).
Proof. exact (fun_ext (fun s' : type1475 A C P => @lem8407619 A C P s s' t _115315 clauses)). Qed.
Lemma lem8407621 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8407622 {A C P : Type'} (s : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3247 A C P s t _115315 clauses) = (term3322 A C P s t _115315 clauses).
Proof. exact (MK_COMB (@lem8407621 A C P) (@lem8407620 A C P s t _115315 clauses)). Qed.
Lemma lem8407623 {A C P : Type'} (s : type1475 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3221 A C P s t _115315 clauses) = (term3322 A C P s t _115315 clauses).
Proof. exact (TRANS (@lem8407521 A C P s t _115315 clauses) (@lem8407622 A C P s t _115315 clauses)). Qed.
Lemma lem8407624 {A C P : Type'} (s : type1475 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3223 A C P s _115315 clauses) = (term3323 A C P s _115315 clauses).
Proof. exact (fun_ext (fun t : type1473 A C P => @lem8407623 A C P s t _115315 clauses)). Qed.
Lemma lem8407625 {A C P : Type'} : (@ex (C -> C -> P -> A)) = (@ex (C -> C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> C -> P -> A))). Qed.
Lemma lem8407626 {A C P : Type'} (s : type1475 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3224 A C P s _115315 clauses) = (term3324 A C P s _115315 clauses).
Proof. exact (MK_COMB (@lem8407625 A C P) (@lem8407624 A C P s _115315 clauses)). Qed.
Lemma lem8407627 {A C P : Type'} (s : type1475 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3196 A C P s _115315 clauses) = (term3324 A C P s _115315 clauses).
Proof. exact (TRANS (@lem8407491 A C P s _115315 clauses) (@lem8407626 A C P s _115315 clauses)). Qed.
Lemma lem8407628 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3198 A C P _115315 clauses) = (term3325 A C P _115315 clauses).
Proof. exact (fun_ext (fun s : type1475 A C P => @lem8407627 A C P s _115315 clauses)). Qed.
Lemma lem8407629 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8407630 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3199 A C P _115315 clauses) = (term3326 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8407629 A C P) (@lem8407628 A C P _115315 clauses)). Qed.
Lemma lem8407631 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3176 A C P _115315 clauses) = (term3326 A C P _115315 clauses).
Proof. exact (TRANS (@lem8407461 A C P _115315 clauses) (@lem8407630 A C P _115315 clauses)). Qed.
Lemma lem8407632 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3066 A C P _115315 clauses) = (term3326 A C P _115315 clauses).
Proof. exact (TRANS (@lem8407431 A C P _115315 clauses) (@lem8407631 A C P _115315 clauses)). Qed.
Lemma lem8407633 {A C P : Type'} (_115315 : type1092 A C P) : (term3067 A C P _115315) = (term3327 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8407632 A C P _115315 clauses)). Qed.
Lemma lem8407634 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8407635 {A C P : Type'} (_115315 : type1092 A C P) : (term3068 A C P _115315) = (term3328 A C P _115315).
Proof. exact (MK_COMB (@lem8407634 A C P) (@lem8407633 A C P _115315)). Qed.
Lemma lem8407637 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8407638 {A C P : Type'} (P' : type1088 A C P) : (term3329 A C P P') = (term3330 A C P P').
Proof. exact (@lem8407637 (type1636 A C P) (type1475 A C P) P'). Qed.
Lemma lem8407639 {A C P : Type'} (_115315 : type1092 A C P) : (term3331 A C P _115315) = (term3332 A C P _115315).
Proof. exact (@lem8407638 A C P (term3333 A C P _115315)). Qed.
Lemma lem8407640 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3334 A C P _115315 clauses) = (term3325 A C P _115315 clauses).
Proof. exact (eq_refl (term3334 A C P _115315 clauses)). Qed.
Lemma lem8407641 {A C P : Type'} (s : type1475 A C P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8407642 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) (s : type1475 A C P) : (term3335 A C P _115315 clauses s) = (term3336 A C P _115315 clauses s).
Proof. exact (MK_COMB (@lem8407640 A C P _115315 clauses) (@lem8407641 A C P s)). Qed.
Lemma lem8407643 {A C P : Type'} (s : type1475 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3336 A C P _115315 clauses s) = (term3324 A C P s _115315 clauses).
Proof. exact (eq_refl (term3336 A C P _115315 clauses s)). Qed.
Lemma lem8407644 {A C P : Type'} (s : type1475 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3335 A C P _115315 clauses s) = (term3324 A C P s _115315 clauses).
Proof. exact (TRANS (@lem8407642 A C P _115315 clauses s) (@lem8407643 A C P s _115315 clauses)). Qed.
Lemma lem8407645 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3337 A C P _115315 clauses) = (term3325 A C P _115315 clauses).
Proof. exact (fun_ext (fun s : type1475 A C P => @lem8407644 A C P s _115315 clauses)). Qed.
Lemma lem8407646 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8407647 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3338 A C P _115315 clauses) = (term3326 A C P _115315 clauses).
Proof. exact (MK_COMB (@lem8407646 A C P) (@lem8407645 A C P _115315 clauses)). Qed.
Lemma lem8407648 {A C P : Type'} (_115315 : type1092 A C P) : (term3339 A C P _115315) = (term3327 A C P _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8407647 A C P _115315 clauses)). Qed.
Lemma lem8407649 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8407650 {A C P : Type'} (_115315 : type1092 A C P) : (term3331 A C P _115315) = (term3328 A C P _115315).
Proof. exact (MK_COMB (@lem8407649 A C P) (@lem8407648 A C P _115315)). Qed.
Lemma lem8407651 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8407652 {A C P : Type'} (_115315 : type1092 A C P) : (term3340 A C P _115315) = (term3341 A C P _115315).
Proof. exact (MK_COMB (@lem8407651) (@lem8407650 A C P _115315)). Qed.
Lemma lem8407653 {A C P : Type'} (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3334 A C P _115315 clauses) = (term3325 A C P _115315 clauses).
Proof. exact (eq_refl (term3334 A C P _115315 clauses)). Qed.
Lemma lem8407654 {A C P : Type'} (s : type1094 A C P) (clauses : type1636 A C P) : (s clauses) = (s clauses).
Proof. exact (eq_refl (s clauses)). Qed.
Lemma lem8407655 {A C P : Type'} (_115315 : type1092 A C P) (s : type1094 A C P) (clauses : type1636 A C P) : (term3342 A C P _115315 s clauses) = (term3343 A C P _115315 s clauses).
Proof. exact (MK_COMB (@lem8407653 A C P _115315 clauses) (@lem8407654 A C P s clauses)). Qed.
Lemma lem8407656 {A C P : Type'} (s : type1094 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3343 A C P _115315 s clauses) = (term3344 A C P s _115315 clauses).
Proof. exact (eq_refl (term3343 A C P _115315 s clauses)). Qed.
Lemma lem8407657 {A C P : Type'} (s : type1094 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3342 A C P _115315 s clauses) = (term3344 A C P s _115315 clauses).
Proof. exact (TRANS (@lem8407655 A C P _115315 s clauses) (@lem8407656 A C P s _115315 clauses)). Qed.
Lemma lem8407658 {A C P : Type'} (s : type1094 A C P) (_115315 : type1092 A C P) : (term3345 A C P _115315 s) = (term3346 A C P s _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8407657 A C P s _115315 clauses)). Qed.
Lemma lem8407659 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8407660 {A C P : Type'} (s : type1094 A C P) (_115315 : type1092 A C P) : (term3347 A C P _115315 s) = (term3348 A C P s _115315).
Proof. exact (MK_COMB (@lem8407659 A C P) (@lem8407658 A C P s _115315)). Qed.
Lemma lem8407661 {A C P : Type'} (_115315 : type1092 A C P) : (term3349 A C P _115315) = (term3350 A C P _115315).
Proof. exact (fun_ext (fun s : type1094 A C P => @lem8407660 A C P s _115315)). Qed.
Lemma lem8407662 {A C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> P -> A))). Qed.
Lemma lem8407663 {A C P : Type'} (_115315 : type1092 A C P) : (term3332 A C P _115315) = (term3351 A C P _115315).
Proof. exact (MK_COMB (@lem8407662 A C P) (@lem8407661 A C P _115315)). Qed.
Lemma lem8407664 {A C P : Type'} (_115315 : type1092 A C P) : ((term3331 A C P _115315) = (term3332 A C P _115315)) = ((term3328 A C P _115315) = (term3351 A C P _115315)).
Proof. exact (MK_COMB (@lem8407652 A C P _115315) (@lem8407663 A C P _115315)). Qed.
Lemma lem8407665 {A C P : Type'} (_115315 : type1092 A C P) : (term3328 A C P _115315) = (term3351 A C P _115315).
Proof. exact (EQ_MP (@lem8407664 A C P _115315) (@lem8407639 A C P _115315)). Qed.
Lemma lem8407667 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8407668 {A C P : Type'} (P' : type1087 A C P) : (term3352 A C P P') = (term3353 A C P P').
Proof. exact (@lem8407667 (type1636 A C P) (type1473 A C P) P'). Qed.
Lemma lem8407669 {A C P : Type'} (s : type1094 A C P) (_115315 : type1092 A C P) : (term3354 A C P s _115315) = (term3355 A C P s _115315).
Proof. exact (@lem8407668 A C P (term3356 A C P s _115315)). Qed.
Lemma lem8407670 {A C P : Type'} (s : type1094 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3357 A C P s _115315 clauses) = (term3358 A C P s _115315 clauses).
Proof. exact (eq_refl (term3357 A C P s _115315 clauses)). Qed.
Lemma lem8407671 {A C P : Type'} (t : type1473 A C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8407672 {A C P : Type'} (s : type1094 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) (t : type1473 A C P) : (term3359 A C P s _115315 clauses t) = (term3360 A C P s _115315 clauses t).
Proof. exact (MK_COMB (@lem8407670 A C P s _115315 clauses) (@lem8407671 A C P t)). Qed.
Lemma lem8407673 {A C P : Type'} (s : type1094 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3360 A C P s _115315 clauses t) = (term3361 A C P s t _115315 clauses).
Proof. exact (eq_refl (term3360 A C P s _115315 clauses t)). Qed.
Lemma lem8407674 {A C P : Type'} (s : type1094 A C P) (t : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3359 A C P s _115315 clauses t) = (term3361 A C P s t _115315 clauses).
Proof. exact (TRANS (@lem8407672 A C P s _115315 clauses t) (@lem8407673 A C P s t _115315 clauses)). Qed.
Lemma lem8407675 {A C P : Type'} (s : type1094 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3362 A C P s _115315 clauses) = (term3358 A C P s _115315 clauses).
Proof. exact (fun_ext (fun t : type1473 A C P => @lem8407674 A C P s t _115315 clauses)). Qed.
Lemma lem8407676 {A C P : Type'} : (@ex (C -> C -> P -> A)) = (@ex (C -> C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> C -> P -> A))). Qed.
Lemma lem8407677 {A C P : Type'} (s : type1094 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3363 A C P s _115315 clauses) = (term3344 A C P s _115315 clauses).
Proof. exact (MK_COMB (@lem8407676 A C P) (@lem8407675 A C P s _115315 clauses)). Qed.
Lemma lem8407678 {A C P : Type'} (s : type1094 A C P) (_115315 : type1092 A C P) : (term3364 A C P s _115315) = (term3346 A C P s _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8407677 A C P s _115315 clauses)). Qed.
Lemma lem8407679 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8407680 {A C P : Type'} (s : type1094 A C P) (_115315 : type1092 A C P) : (term3354 A C P s _115315) = (term3348 A C P s _115315).
Proof. exact (MK_COMB (@lem8407679 A C P) (@lem8407678 A C P s _115315)). Qed.
Lemma lem8407681 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8407682 {A C P : Type'} (s : type1094 A C P) (_115315 : type1092 A C P) : (term3365 A C P s _115315) = (term3366 A C P s _115315).
Proof. exact (MK_COMB (@lem8407681) (@lem8407680 A C P s _115315)). Qed.
Lemma lem8407683 {A C P : Type'} (s : type1094 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3357 A C P s _115315 clauses) = (term3358 A C P s _115315 clauses).
Proof. exact (eq_refl (term3357 A C P s _115315 clauses)). Qed.
Lemma lem8407684 {A C P : Type'} (t : type1093 A C P) (clauses : type1636 A C P) : (t clauses) = (t clauses).
Proof. exact (eq_refl (t clauses)). Qed.
Lemma lem8407685 {A C P : Type'} (s : type1094 A C P) (_115315 : type1092 A C P) (t : type1093 A C P) (clauses : type1636 A C P) : (term3367 A C P s _115315 t clauses) = (term3368 A C P s _115315 t clauses).
Proof. exact (MK_COMB (@lem8407683 A C P s _115315 clauses) (@lem8407684 A C P t clauses)). Qed.
Lemma lem8407686 {A C P : Type'} (s : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3368 A C P s _115315 t clauses) = (term3369 A C P s t _115315 clauses).
Proof. exact (eq_refl (term3368 A C P s _115315 t clauses)). Qed.
Lemma lem8407687 {A C P : Type'} (s : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3367 A C P s _115315 t clauses) = (term3369 A C P s t _115315 clauses).
Proof. exact (TRANS (@lem8407685 A C P s _115315 t clauses) (@lem8407686 A C P s t _115315 clauses)). Qed.
Lemma lem8407688 {A C P : Type'} (s : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3370 A C P s _115315 t) = (term3371 A C P s t _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8407687 A C P s t _115315 clauses)). Qed.
Lemma lem8407689 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8407690 {A C P : Type'} (s : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3372 A C P s _115315 t) = (term3373 A C P s t _115315).
Proof. exact (MK_COMB (@lem8407689 A C P) (@lem8407688 A C P s t _115315)). Qed.
Lemma lem8407691 {A C P : Type'} (s : type1094 A C P) (_115315 : type1092 A C P) : (term3374 A C P s _115315) = (term3375 A C P s _115315).
Proof. exact (fun_ext (fun t : type1093 A C P => @lem8407690 A C P s t _115315)). Qed.
Lemma lem8407692 {A C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> C -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> C -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> C -> P -> A))). Qed.
Lemma lem8407693 {A C P : Type'} (s : type1094 A C P) (_115315 : type1092 A C P) : (term3355 A C P s _115315) = (term3376 A C P s _115315).
Proof. exact (MK_COMB (@lem8407692 A C P) (@lem8407691 A C P s _115315)). Qed.
Lemma lem8407694 {A C P : Type'} (s : type1094 A C P) (_115315 : type1092 A C P) : ((term3354 A C P s _115315) = (term3355 A C P s _115315)) = ((term3348 A C P s _115315) = (term3376 A C P s _115315)).
Proof. exact (MK_COMB (@lem8407682 A C P s _115315) (@lem8407693 A C P s _115315)). Qed.
Lemma lem8407695 {A C P : Type'} (s : type1094 A C P) (_115315 : type1092 A C P) : (term3348 A C P s _115315) = (term3376 A C P s _115315).
Proof. exact (EQ_MP (@lem8407694 A C P s _115315) (@lem8407669 A C P s _115315)). Qed.
Lemma lem8407697 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8407698 {A C P : Type'} (P' : type1088 A C P) : (term3329 A C P P') = (term3330 A C P P').
Proof. exact (@lem8407697 (type1636 A C P) (type1475 A C P) P'). Qed.
Lemma lem8407699 {A C P : Type'} (s : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3377 A C P s t _115315) = (term3378 A C P s t _115315).
Proof. exact (@lem8407698 A C P (term3379 A C P s t _115315)). Qed.
Lemma lem8407700 {A C P : Type'} (s : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3380 A C P s t _115315 clauses) = (term3381 A C P s t _115315 clauses).
Proof. exact (eq_refl (term3380 A C P s t _115315 clauses)). Qed.
Lemma lem8407701 {A C P : Type'} (s' : type1475 A C P) : s' = s'.
Proof. exact (eq_refl s'). Qed.
Lemma lem8407702 {A C P : Type'} (s : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) (s' : type1475 A C P) : (term3382 A C P s t _115315 clauses s') = (term3383 A C P s t _115315 clauses s').
Proof. exact (MK_COMB (@lem8407700 A C P s t _115315 clauses) (@lem8407701 A C P s')). Qed.
Lemma lem8407703 {A C P : Type'} (s : type1094 A C P) (s' : type1475 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3383 A C P s t _115315 clauses s') = (term3384 A C P s s' t _115315 clauses).
Proof. exact (eq_refl (term3383 A C P s t _115315 clauses s')). Qed.
Lemma lem8407704 {A C P : Type'} (s : type1094 A C P) (s' : type1475 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3382 A C P s t _115315 clauses s') = (term3384 A C P s s' t _115315 clauses).
Proof. exact (TRANS (@lem8407702 A C P s t _115315 clauses s') (@lem8407703 A C P s s' t _115315 clauses)). Qed.
Lemma lem8407705 {A C P : Type'} (s : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3385 A C P s t _115315 clauses) = (term3381 A C P s t _115315 clauses).
Proof. exact (fun_ext (fun s' : type1475 A C P => @lem8407704 A C P s s' t _115315 clauses)). Qed.
Lemma lem8407706 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8407707 {A C P : Type'} (s : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3386 A C P s t _115315 clauses) = (term3369 A C P s t _115315 clauses).
Proof. exact (MK_COMB (@lem8407706 A C P) (@lem8407705 A C P s t _115315 clauses)). Qed.
Lemma lem8407708 {A C P : Type'} (s : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3387 A C P s t _115315) = (term3371 A C P s t _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8407707 A C P s t _115315 clauses)). Qed.
Lemma lem8407709 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8407710 {A C P : Type'} (s : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3377 A C P s t _115315) = (term3373 A C P s t _115315).
Proof. exact (MK_COMB (@lem8407709 A C P) (@lem8407708 A C P s t _115315)). Qed.
Lemma lem8407711 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8407712 {A C P : Type'} (s : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3388 A C P s t _115315) = (term3389 A C P s t _115315).
Proof. exact (MK_COMB (@lem8407711) (@lem8407710 A C P s t _115315)). Qed.
Lemma lem8407713 {A C P : Type'} (s : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3380 A C P s t _115315 clauses) = (term3381 A C P s t _115315 clauses).
Proof. exact (eq_refl (term3380 A C P s t _115315 clauses)). Qed.
Lemma lem8407714 {A C P : Type'} (s' : type1094 A C P) (clauses : type1636 A C P) : (s' clauses) = (s' clauses).
Proof. exact (eq_refl (s' clauses)). Qed.
Lemma lem8407715 {A C P : Type'} (s : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) (s' : type1094 A C P) (clauses : type1636 A C P) : (term3390 A C P s t _115315 s' clauses) = (term3391 A C P s t _115315 s' clauses).
Proof. exact (MK_COMB (@lem8407713 A C P s t _115315 clauses) (@lem8407714 A C P s' clauses)). Qed.
Lemma lem8407716 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3391 A C P s t _115315 s' clauses) = (term3392 A C P s s' t _115315 clauses).
Proof. exact (eq_refl (term3391 A C P s t _115315 s' clauses)). Qed.
Lemma lem8407717 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3390 A C P s t _115315 s' clauses) = (term3392 A C P s s' t _115315 clauses).
Proof. exact (TRANS (@lem8407715 A C P s t _115315 s' clauses) (@lem8407716 A C P s s' t _115315 clauses)). Qed.
Lemma lem8407718 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3393 A C P s t _115315 s') = (term3394 A C P s s' t _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8407717 A C P s s' t _115315 clauses)). Qed.
Lemma lem8407719 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8407720 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3395 A C P s t _115315 s') = (term3396 A C P s s' t _115315).
Proof. exact (MK_COMB (@lem8407719 A C P) (@lem8407718 A C P s s' t _115315)). Qed.
Lemma lem8407721 {A C P : Type'} (s : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3397 A C P s t _115315) = (term3398 A C P s t _115315).
Proof. exact (fun_ext (fun s' : type1094 A C P => @lem8407720 A C P s s' t _115315)). Qed.
Lemma lem8407722 {A C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> P -> A))). Qed.
Lemma lem8407723 {A C P : Type'} (s : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3378 A C P s t _115315) = (term3399 A C P s t _115315).
Proof. exact (MK_COMB (@lem8407722 A C P) (@lem8407721 A C P s t _115315)). Qed.
Lemma lem8407724 {A C P : Type'} (s : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : ((term3377 A C P s t _115315) = (term3378 A C P s t _115315)) = ((term3373 A C P s t _115315) = (term3399 A C P s t _115315)).
Proof. exact (MK_COMB (@lem8407712 A C P s t _115315) (@lem8407723 A C P s t _115315)). Qed.
Lemma lem8407725 {A C P : Type'} (s : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3373 A C P s t _115315) = (term3399 A C P s t _115315).
Proof. exact (EQ_MP (@lem8407724 A C P s t _115315) (@lem8407699 A C P s t _115315)). Qed.
Lemma lem8407727 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8407728 {A C P : Type'} (P' : type1087 A C P) : (term3352 A C P P') = (term3353 A C P P').
Proof. exact (@lem8407727 (type1636 A C P) (type1473 A C P) P'). Qed.
Lemma lem8407729 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3400 A C P s s' t _115315) = (term3401 A C P s s' t _115315).
Proof. exact (@lem8407728 A C P (term3402 A C P s s' t _115315)). Qed.
Lemma lem8407730 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3403 A C P s s' t _115315 clauses) = (term3404 A C P s s' t _115315 clauses).
Proof. exact (eq_refl (term3403 A C P s s' t _115315 clauses)). Qed.
Lemma lem8407731 {A C P : Type'} (t' : type1473 A C P) : t' = t'.
Proof. exact (eq_refl t'). Qed.
Lemma lem8407732 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) (t' : type1473 A C P) : (term3405 A C P s s' t _115315 clauses t') = (term3406 A C P s s' t _115315 clauses t').
Proof. exact (MK_COMB (@lem8407730 A C P s s' t _115315 clauses) (@lem8407731 A C P t')). Qed.
Lemma lem8407733 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3406 A C P s s' t _115315 clauses t') = (term3407 A C P s s' t t' _115315 clauses).
Proof. exact (eq_refl (term3406 A C P s s' t _115315 clauses t')). Qed.
Lemma lem8407734 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (t' : type1473 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3405 A C P s s' t _115315 clauses t') = (term3407 A C P s s' t t' _115315 clauses).
Proof. exact (TRANS (@lem8407732 A C P s s' t _115315 clauses t') (@lem8407733 A C P s s' t t' _115315 clauses)). Qed.
Lemma lem8407735 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3408 A C P s s' t _115315 clauses) = (term3404 A C P s s' t _115315 clauses).
Proof. exact (fun_ext (fun t' : type1473 A C P => @lem8407734 A C P s s' t t' _115315 clauses)). Qed.
Lemma lem8407736 {A C P : Type'} : (@ex (C -> C -> P -> A)) = (@ex (C -> C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> C -> P -> A))). Qed.
Lemma lem8407737 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3409 A C P s s' t _115315 clauses) = (term3392 A C P s s' t _115315 clauses).
Proof. exact (MK_COMB (@lem8407736 A C P) (@lem8407735 A C P s s' t _115315 clauses)). Qed.
Lemma lem8407738 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3410 A C P s s' t _115315) = (term3394 A C P s s' t _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8407737 A C P s s' t _115315 clauses)). Qed.
Lemma lem8407739 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8407740 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3400 A C P s s' t _115315) = (term3396 A C P s s' t _115315).
Proof. exact (MK_COMB (@lem8407739 A C P) (@lem8407738 A C P s s' t _115315)). Qed.
Lemma lem8407741 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8407742 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3411 A C P s s' t _115315) = (term3412 A C P s s' t _115315).
Proof. exact (MK_COMB (@lem8407741) (@lem8407740 A C P s s' t _115315)). Qed.
Lemma lem8407743 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3403 A C P s s' t _115315 clauses) = (term3404 A C P s s' t _115315 clauses).
Proof. exact (eq_refl (term3403 A C P s s' t _115315 clauses)). Qed.
Lemma lem8407744 {A C P : Type'} (t' : type1093 A C P) (clauses : type1636 A C P) : (t' clauses) = (t' clauses).
Proof. exact (eq_refl (t' clauses)). Qed.
Lemma lem8407745 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) (t' : type1093 A C P) (clauses : type1636 A C P) : (term3413 A C P s s' t _115315 t' clauses) = (term3414 A C P s s' t _115315 t' clauses).
Proof. exact (MK_COMB (@lem8407743 A C P s s' t _115315 clauses) (@lem8407744 A C P t' clauses)). Qed.
Lemma lem8407746 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3414 A C P s s' t _115315 t' clauses) = (term3415 A C P s s' t t' _115315 clauses).
Proof. exact (eq_refl (term3414 A C P s s' t _115315 t' clauses)). Qed.
Lemma lem8407747 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3413 A C P s s' t _115315 t' clauses) = (term3415 A C P s s' t t' _115315 clauses).
Proof. exact (TRANS (@lem8407745 A C P s s' t _115315 t' clauses) (@lem8407746 A C P s s' t t' _115315 clauses)). Qed.
Lemma lem8407748 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) : (term3416 A C P s s' t _115315 t') = (term3417 A C P s s' t t' _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8407747 A C P s s' t t' _115315 clauses)). Qed.
Lemma lem8407749 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8407750 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) : (term3418 A C P s s' t _115315 t') = (term3419 A C P s s' t t' _115315).
Proof. exact (MK_COMB (@lem8407749 A C P) (@lem8407748 A C P s s' t t' _115315)). Qed.
Lemma lem8407751 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3420 A C P s s' t _115315) = (term3421 A C P s s' t _115315).
Proof. exact (fun_ext (fun t' : type1093 A C P => @lem8407750 A C P s s' t t' _115315)). Qed.
Lemma lem8407752 {A C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> C -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> C -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> C -> P -> A))). Qed.
Lemma lem8407753 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3401 A C P s s' t _115315) = (term3422 A C P s s' t _115315).
Proof. exact (MK_COMB (@lem8407752 A C P) (@lem8407751 A C P s s' t _115315)). Qed.
Lemma lem8407754 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : ((term3400 A C P s s' t _115315) = (term3401 A C P s s' t _115315)) = ((term3396 A C P s s' t _115315) = (term3422 A C P s s' t _115315)).
Proof. exact (MK_COMB (@lem8407742 A C P s s' t _115315) (@lem8407753 A C P s s' t _115315)). Qed.
Lemma lem8407755 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3396 A C P s s' t _115315) = (term3422 A C P s s' t _115315).
Proof. exact (EQ_MP (@lem8407754 A C P s s' t _115315) (@lem8407729 A C P s s' t _115315)). Qed.
Lemma lem8407757 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8407758 {A C P : Type'} (P' : type1089 A C P) : (term3423 A C P P') = (term3424 A C P P').
Proof. exact (@lem8407757 (type1636 A C P) (C -> P) P'). Qed.
Lemma lem8407759 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) : (term3425 A C P s s' t t' _115315) = (term3426 A C P s s' t t' _115315).
Proof. exact (@lem8407758 A C P (term3427 A C P s s' t t' _115315)). Qed.
Lemma lem8407760 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3428 A C P s s' t t' _115315 clauses) = (term3429 A C P s s' t t' _115315 clauses).
Proof. exact (eq_refl (term3428 A C P s s' t t' _115315 clauses)). Qed.
Lemma lem8407761 {C P : Type'} (x : C -> P) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8407762 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) (x : C -> P) : (term3430 A C P s s' t t' _115315 clauses x) = (term3431 A C P s s' t t' _115315 clauses x).
Proof. exact (MK_COMB (@lem8407760 A C P s s' t t' _115315 clauses) (@lem8407761 C P x)). Qed.
Lemma lem8407763 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : C -> P) (t' : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3431 A C P s s' t t' _115315 clauses x) = (term3432 A C P s s' t x t' _115315 clauses).
Proof. exact (eq_refl (term3431 A C P s s' t t' _115315 clauses x)). Qed.
Lemma lem8407764 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : C -> P) (t' : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3430 A C P s s' t t' _115315 clauses x) = (term3432 A C P s s' t x t' _115315 clauses).
Proof. exact (TRANS (@lem8407762 A C P s s' t t' _115315 clauses x) (@lem8407763 A C P s s' t x t' _115315 clauses)). Qed.
Lemma lem8407765 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3433 A C P s s' t t' _115315 clauses) = (term3429 A C P s s' t t' _115315 clauses).
Proof. exact (fun_ext (fun x : C -> P => @lem8407764 A C P s s' t x t' _115315 clauses)). Qed.
Lemma lem8407766 {C P : Type'} : (@ex (C -> P)) = (@ex (C -> P)).
Proof. exact (eq_refl (@ex (C -> P))). Qed.
Lemma lem8407767 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3434 A C P s s' t t' _115315 clauses) = (term3415 A C P s s' t t' _115315 clauses).
Proof. exact (MK_COMB (@lem8407766 C P) (@lem8407765 A C P s s' t t' _115315 clauses)). Qed.
Lemma lem8407768 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) : (term3435 A C P s s' t t' _115315) = (term3417 A C P s s' t t' _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8407767 A C P s s' t t' _115315 clauses)). Qed.
Lemma lem8407769 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8407770 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) : (term3425 A C P s s' t t' _115315) = (term3419 A C P s s' t t' _115315).
Proof. exact (MK_COMB (@lem8407769 A C P) (@lem8407768 A C P s s' t t' _115315)). Qed.
Lemma lem8407771 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8407772 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) : (term3436 A C P s s' t t' _115315) = (term3437 A C P s s' t t' _115315).
Proof. exact (MK_COMB (@lem8407771) (@lem8407770 A C P s s' t t' _115315)). Qed.
Lemma lem8407773 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3428 A C P s s' t t' _115315 clauses) = (term3429 A C P s s' t t' _115315 clauses).
Proof. exact (eq_refl (term3428 A C P s s' t t' _115315 clauses)). Qed.
Lemma lem8407774 {A C P : Type'} (x : type1095 A C P) (clauses : type1636 A C P) : (x clauses) = (x clauses).
Proof. exact (eq_refl (x clauses)). Qed.
Lemma lem8407775 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) (x : type1095 A C P) (clauses : type1636 A C P) : (term3438 A C P s s' t t' _115315 x clauses) = (term3439 A C P s s' t t' _115315 x clauses).
Proof. exact (MK_COMB (@lem8407773 A C P s s' t t' _115315 clauses) (@lem8407774 A C P x clauses)). Qed.
Lemma lem8407776 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3439 A C P s s' t t' _115315 x clauses) = (term3440 A C P s s' t x t' _115315 clauses).
Proof. exact (eq_refl (term3439 A C P s s' t t' _115315 x clauses)). Qed.
Lemma lem8407777 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3438 A C P s s' t t' _115315 x clauses) = (term3440 A C P s s' t x t' _115315 clauses).
Proof. exact (TRANS (@lem8407775 A C P s s' t t' _115315 x clauses) (@lem8407776 A C P s s' t x t' _115315 clauses)). Qed.
Lemma lem8407778 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) : (term3441 A C P s s' t t' _115315 x) = (term3442 A C P s s' t x t' _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8407777 A C P s s' t x t' _115315 clauses)). Qed.
Lemma lem8407779 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8407780 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) : (term3443 A C P s s' t t' _115315 x) = (term3444 A C P s s' t x t' _115315).
Proof. exact (MK_COMB (@lem8407779 A C P) (@lem8407778 A C P s s' t x t' _115315)). Qed.
Lemma lem8407781 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) : (term3445 A C P s s' t t' _115315) = (term3446 A C P s s' t t' _115315).
Proof. exact (fun_ext (fun x : type1095 A C P => @lem8407780 A C P s s' t x t' _115315)). Qed.
Lemma lem8407782 {A C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> P)) = (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> P)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> P))). Qed.
Lemma lem8407783 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) : (term3426 A C P s s' t t' _115315) = (term3447 A C P s s' t t' _115315).
Proof. exact (MK_COMB (@lem8407782 A C P) (@lem8407781 A C P s s' t t' _115315)). Qed.
Lemma lem8407784 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) : ((term3425 A C P s s' t t' _115315) = (term3426 A C P s s' t t' _115315)) = ((term3419 A C P s s' t t' _115315) = (term3447 A C P s s' t t' _115315)).
Proof. exact (MK_COMB (@lem8407772 A C P s s' t t' _115315) (@lem8407783 A C P s s' t t' _115315)). Qed.
Lemma lem8407785 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) : (term3419 A C P s s' t t' _115315) = (term3447 A C P s s' t t' _115315).
Proof. exact (EQ_MP (@lem8407784 A C P s s' t t' _115315) (@lem8407759 A C P s s' t t' _115315)). Qed.
Lemma lem8407787 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8407788 {A C P : Type'} (P' : type1089 A C P) : (term3423 A C P P') = (term3424 A C P P').
Proof. exact (@lem8407787 (type1636 A C P) (C -> P) P'). Qed.
Lemma lem8407789 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) : (term3448 A C P s s' t x t' _115315) = (term3449 A C P s s' t x t' _115315).
Proof. exact (@lem8407788 A C P (term3450 A C P s s' t x t' _115315)). Qed.
Lemma lem8407790 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3451 A C P s s' t x t' _115315 clauses) = (term3452 A C P s s' t x t' _115315 clauses).
Proof. exact (eq_refl (term3451 A C P s s' t x t' _115315 clauses)). Qed.
Lemma lem8407791 {C P : Type'} (y : C -> P) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem8407792 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) (y : C -> P) : (term3453 A C P s s' t x t' _115315 clauses y) = (term3454 A C P s s' t x t' _115315 clauses y).
Proof. exact (MK_COMB (@lem8407790 A C P s s' t x t' _115315 clauses) (@lem8407791 C P y)). Qed.
Lemma lem8407793 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (y : C -> P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3454 A C P s s' t x t' _115315 clauses y) = (term3455 A C P s s' t x t' y _115315 clauses).
Proof. exact (eq_refl (term3454 A C P s s' t x t' _115315 clauses y)). Qed.
Lemma lem8407794 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (y : C -> P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3453 A C P s s' t x t' _115315 clauses y) = (term3455 A C P s s' t x t' y _115315 clauses).
Proof. exact (TRANS (@lem8407792 A C P s s' t x t' _115315 clauses y) (@lem8407793 A C P s s' t x t' y _115315 clauses)). Qed.
Lemma lem8407795 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3456 A C P s s' t x t' _115315 clauses) = (term3452 A C P s s' t x t' _115315 clauses).
Proof. exact (fun_ext (fun y : C -> P => @lem8407794 A C P s s' t x t' y _115315 clauses)). Qed.
Lemma lem8407796 {C P : Type'} : (@ex (C -> P)) = (@ex (C -> P)).
Proof. exact (eq_refl (@ex (C -> P))). Qed.
Lemma lem8407797 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3457 A C P s s' t x t' _115315 clauses) = (term3440 A C P s s' t x t' _115315 clauses).
Proof. exact (MK_COMB (@lem8407796 C P) (@lem8407795 A C P s s' t x t' _115315 clauses)). Qed.
Lemma lem8407798 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) : (term3458 A C P s s' t x t' _115315) = (term3442 A C P s s' t x t' _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8407797 A C P s s' t x t' _115315 clauses)). Qed.
Lemma lem8407799 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8407800 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) : (term3448 A C P s s' t x t' _115315) = (term3444 A C P s s' t x t' _115315).
Proof. exact (MK_COMB (@lem8407799 A C P) (@lem8407798 A C P s s' t x t' _115315)). Qed.
Lemma lem8407801 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8407802 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) : (term3459 A C P s s' t x t' _115315) = (term3460 A C P s s' t x t' _115315).
Proof. exact (MK_COMB (@lem8407801) (@lem8407800 A C P s s' t x t' _115315)). Qed.
Lemma lem8407803 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3451 A C P s s' t x t' _115315 clauses) = (term3452 A C P s s' t x t' _115315 clauses).
Proof. exact (eq_refl (term3451 A C P s s' t x t' _115315 clauses)). Qed.
Lemma lem8407804 {A C P : Type'} (y : type1095 A C P) (clauses : type1636 A C P) : (y clauses) = (y clauses).
Proof. exact (eq_refl (y clauses)). Qed.
Lemma lem8407805 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) (y : type1095 A C P) (clauses : type1636 A C P) : (term3461 A C P s s' t x t' _115315 y clauses) = (term3462 A C P s s' t x t' _115315 y clauses).
Proof. exact (MK_COMB (@lem8407803 A C P s s' t x t' _115315 clauses) (@lem8407804 A C P y clauses)). Qed.
Lemma lem8407806 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (y : type1095 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3462 A C P s s' t x t' _115315 y clauses) = (term3463 A C P s s' t x t' y _115315 clauses).
Proof. exact (eq_refl (term3462 A C P s s' t x t' _115315 y clauses)). Qed.
Lemma lem8407807 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (y : type1095 A C P) (_115315 : type1092 A C P) (clauses : type1636 A C P) : (term3461 A C P s s' t x t' _115315 y clauses) = (term3463 A C P s s' t x t' y _115315 clauses).
Proof. exact (TRANS (@lem8407805 A C P s s' t x t' _115315 y clauses) (@lem8407806 A C P s s' t x t' y _115315 clauses)). Qed.
Lemma lem8407808 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (y : type1095 A C P) (_115315 : type1092 A C P) : (term3464 A C P s s' t x t' _115315 y) = (term3465 A C P s s' t x t' y _115315).
Proof. exact (fun_ext (fun clauses : type1636 A C P => @lem8407807 A C P s s' t x t' y _115315 clauses)). Qed.
Lemma lem8407809 {A C P : Type'} : (@all (list (prod (P -> A) (C -> P -> A)))) = (@all (list (prod (P -> A) (C -> P -> A)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> A))))). Qed.
Lemma lem8407810 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (y : type1095 A C P) (_115315 : type1092 A C P) : (term3466 A C P s s' t x t' _115315 y) = (term3467 A C P s s' t x t' y _115315).
Proof. exact (MK_COMB (@lem8407809 A C P) (@lem8407808 A C P s s' t x t' y _115315)). Qed.
Lemma lem8407811 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) : (term3468 A C P s s' t x t' _115315) = (term3469 A C P s s' t x t' _115315).
Proof. exact (fun_ext (fun y : type1095 A C P => @lem8407810 A C P s s' t x t' y _115315)). Qed.
Lemma lem8407812 {A C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> P)) = (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> P)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> P))). Qed.
Lemma lem8407813 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) : (term3449 A C P s s' t x t' _115315) = (term3470 A C P s s' t x t' _115315).
Proof. exact (MK_COMB (@lem8407812 A C P) (@lem8407811 A C P s s' t x t' _115315)). Qed.
Lemma lem8407814 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) : ((term3448 A C P s s' t x t' _115315) = (term3449 A C P s s' t x t' _115315)) = ((term3444 A C P s s' t x t' _115315) = (term3470 A C P s s' t x t' _115315)).
Proof. exact (MK_COMB (@lem8407802 A C P s s' t x t' _115315) (@lem8407813 A C P s s' t x t' _115315)). Qed.
Lemma lem8407815 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (x : type1095 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) : (term3444 A C P s s' t x t' _115315) = (term3470 A C P s s' t x t' _115315).
Proof. exact (EQ_MP (@lem8407814 A C P s s' t x t' _115315) (@lem8407789 A C P s s' t x t' _115315)). Qed.
Lemma lem8407816 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) : (term3446 A C P s s' t t' _115315) = (term3471 A C P s s' t t' _115315).
Proof. exact (fun_ext (fun x : type1095 A C P => @lem8407815 A C P s s' t x t' _115315)). Qed.
Lemma lem8407817 {A C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> P)) = (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> P)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> P))). Qed.
Lemma lem8407818 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) : (term3447 A C P s s' t t' _115315) = (term3472 A C P s s' t t' _115315).
Proof. exact (MK_COMB (@lem8407817 A C P) (@lem8407816 A C P s s' t t' _115315)). Qed.
Lemma lem8407819 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (t' : type1093 A C P) (_115315 : type1092 A C P) : (term3419 A C P s s' t t' _115315) = (term3472 A C P s s' t t' _115315).
Proof. exact (TRANS (@lem8407785 A C P s s' t t' _115315) (@lem8407818 A C P s s' t t' _115315)). Qed.
Lemma lem8407820 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3421 A C P s s' t _115315) = (term3473 A C P s s' t _115315).
Proof. exact (fun_ext (fun t' : type1093 A C P => @lem8407819 A C P s s' t t' _115315)). Qed.
Lemma lem8407821 {A C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> C -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> C -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> C -> P -> A))). Qed.
Lemma lem8407822 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3422 A C P s s' t _115315) = (term3474 A C P s s' t _115315).
Proof. exact (MK_COMB (@lem8407821 A C P) (@lem8407820 A C P s s' t _115315)). Qed.
Lemma lem8407823 {A C P : Type'} (s : type1094 A C P) (s' : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3396 A C P s s' t _115315) = (term3474 A C P s s' t _115315).
Proof. exact (TRANS (@lem8407755 A C P s s' t _115315) (@lem8407822 A C P s s' t _115315)). Qed.
Lemma lem8407824 {A C P : Type'} (s : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3398 A C P s t _115315) = (term3475 A C P s t _115315).
Proof. exact (fun_ext (fun s' : type1094 A C P => @lem8407823 A C P s s' t _115315)). Qed.
Lemma lem8407825 {A C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> P -> A))). Qed.
Lemma lem8407826 {A C P : Type'} (s : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3399 A C P s t _115315) = (term3476 A C P s t _115315).
Proof. exact (MK_COMB (@lem8407825 A C P) (@lem8407824 A C P s t _115315)). Qed.
Lemma lem8407827 {A C P : Type'} (s : type1094 A C P) (t : type1093 A C P) (_115315 : type1092 A C P) : (term3373 A C P s t _115315) = (term3476 A C P s t _115315).
Proof. exact (TRANS (@lem8407725 A C P s t _115315) (@lem8407826 A C P s t _115315)). Qed.
Lemma lem8407828 {A C P : Type'} (s : type1094 A C P) (_115315 : type1092 A C P) : (term3375 A C P s _115315) = (term3477 A C P s _115315).
Proof. exact (fun_ext (fun t : type1093 A C P => @lem8407827 A C P s t _115315)). Qed.
Lemma lem8407829 {A C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> C -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> C -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> C -> P -> A))). Qed.
Lemma lem8407830 {A C P : Type'} (s : type1094 A C P) (_115315 : type1092 A C P) : (term3376 A C P s _115315) = (term3478 A C P s _115315).
Proof. exact (MK_COMB (@lem8407829 A C P) (@lem8407828 A C P s _115315)). Qed.
Lemma lem8407831 {A C P : Type'} (s : type1094 A C P) (_115315 : type1092 A C P) : (term3348 A C P s _115315) = (term3478 A C P s _115315).
Proof. exact (TRANS (@lem8407695 A C P s _115315) (@lem8407830 A C P s _115315)). Qed.
Lemma lem8407832 {A C P : Type'} (_115315 : type1092 A C P) : (term3350 A C P _115315) = (term3479 A C P _115315).
Proof. exact (fun_ext (fun s : type1094 A C P => @lem8407831 A C P s _115315)). Qed.
Lemma lem8407833 {A C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> A))) -> C -> P -> A))). Qed.
Lemma lem8407834 {A C P : Type'} (_115315 : type1092 A C P) : (term3351 A C P _115315) = (term3480 A C P _115315).
Proof. exact (MK_COMB (@lem8407833 A C P) (@lem8407832 A C P _115315)). Qed.
Lemma lem8407835 {A C P : Type'} (_115315 : type1092 A C P) : (term3328 A C P _115315) = (term3480 A C P _115315).
Proof. exact (TRANS (@lem8407665 A C P _115315) (@lem8407834 A C P _115315)). Qed.
Lemma lem8407837 {A C P : Type'} (_115315 : type1092 A C P) : (term3068 A C P _115315) = (term3480 A C P _115315).
Proof. exact (TRANS (@lem8407635 A C P _115315) (@lem8407835 A C P _115315)). Qed.
Lemma lem8407838 {A C P : Type'} (_115315 : type1092 A C P) : (term533 A C P _115315) = (term3480 A C P _115315).
Proof. exact (TRANS (@lem8407143 A C P _115315) (@lem8407837 A C P _115315)). Qed.
Lemma lem8407839 {A C P : Type'} (_115315 : type1092 A C P) (h1 : term533 A C P _115315) : term3480 A C P _115315.
Proof. exact (EQ_MP (@lem8407838 A C P _115315) (@lem8401041 A C P _115315 h1)). Qed.
Lemma lem8407854 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term3481 A B C P clauses s s' t x t' c y) = (term3482 A B C P clauses s s' t x t' c y).
Proof. exact (@lem17362 (term3483 A B C P t t' clauses s x s' y) ((t c x) = (t' c y))). Qed.
Lemma lem8407855 {P : Type'} (P' : P -> Prop) : (term3017 P P') = (term3018 P P').
Proof. exact (@lem18392 P P'). Qed.
Lemma lem8407856 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3484 A B C P clauses s s' t x t' c) = (term3485 A B C P clauses s s' t x t' c).
Proof. exact (@lem8407855 P (term430 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8407857 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term3486 A B C P clauses s s' t x t' c y) = (term429 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term3486 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8407858 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8407859 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term3487 A B C P clauses s s' t x t' c y) = (term3481 A B C P clauses s s' t x t' c y).
Proof. exact (MK_COMB (@lem8407858) (@lem8407857 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8407860 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term3487 A B C P clauses s s' t x t' c y) = (term3482 A B C P clauses s s' t x t' c y).
Proof. exact (TRANS (@lem8407859 A B C P clauses s s' t x t' c y) (@lem8407854 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8407861 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3488 A B C P clauses s s' t x t' c) = (term3489 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8407860 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8407862 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8407863 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3485 A B C P clauses s s' t x t' c) = (term3490 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8407862 P) (@lem8407861 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8407864 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3484 A B C P clauses s s' t x t' c) = (term3490 A B C P clauses s s' t x t' c).
Proof. exact (TRANS (@lem8407856 A B C P clauses s s' t x t' c) (@lem8407863 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8407865 {P : Type'} (P' : P -> Prop) : (term3017 P P') = (term3018 P P').
Proof. exact (@lem18392 P P'). Qed.
Lemma lem8407866 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3491 A B C P clauses s s' t t' c) = (term3492 A B C P clauses s s' t t' c).
Proof. exact (@lem8407865 P (term432 A B C P clauses s s' t t' c)). Qed.
Lemma lem8407867 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3493 A B C P clauses s s' t t' c x) = (term431 A B C P clauses s s' t x t' c).
Proof. exact (eq_refl (term3493 A B C P clauses s s' t t' c x)). Qed.
Lemma lem8407868 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8407869 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3494 A B C P clauses s s' t t' c x) = (term3484 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8407868) (@lem8407867 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8407870 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3494 A B C P clauses s s' t t' c x) = (term3490 A B C P clauses s s' t x t' c).
Proof. exact (TRANS (@lem8407869 A B C P clauses s s' t x t' c) (@lem8407864 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8407871 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3495 A B C P clauses s s' t t' c) = (term3496 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8407870 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8407872 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8407873 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3492 A B C P clauses s s' t t' c) = (term3497 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8407872 P) (@lem8407871 A B C P clauses s s' t t' c)). Qed.
Lemma lem8407874 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3491 A B C P clauses s s' t t' c) = (term3497 A B C P clauses s s' t t' c).
Proof. exact (TRANS (@lem8407866 A B C P clauses s s' t t' c) (@lem8407873 A B C P clauses s s' t t' c)). Qed.
Lemma lem8407875 {B C P : Type'} (P' : type766 B C P) : (term2022 B C P P') = (term2023 B C P P').
Proof. exact (@lem18392 (type1475 B C P) P'). Qed.
Lemma lem8407876 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term3498 A B C P clauses s s' t c) = (term3499 A B C P clauses s s' t c).
Proof. exact (@lem8407875 B C P (term434 A B C P clauses s s' t c)). Qed.
Lemma lem8407877 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3500 A B C P clauses s s' t c t') = (term433 A B C P clauses s s' t t' c).
Proof. exact (eq_refl (term3500 A B C P clauses s s' t c t')). Qed.
Lemma lem8407878 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8407879 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3501 A B C P clauses s s' t c t') = (term3491 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8407878) (@lem8407877 A B C P clauses s s' t t' c)). Qed.
Lemma lem8407880 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3501 A B C P clauses s s' t c t') = (term3497 A B C P clauses s s' t t' c).
Proof. exact (TRANS (@lem8407879 A B C P clauses s s' t t' c) (@lem8407874 A B C P clauses s s' t t' c)). Qed.
Lemma lem8407881 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term3502 A B C P clauses s s' t c) = (term3503 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8407880 A B C P clauses s s' t t' c)). Qed.
Lemma lem8407882 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8407883 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term3499 A B C P clauses s s' t c) = (term3504 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8407882 B C P) (@lem8407881 A B C P clauses s s' t c)). Qed.
Lemma lem8407884 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term3498 A B C P clauses s s' t c) = (term3504 A B C P clauses s s' t c).
Proof. exact (TRANS (@lem8407876 A B C P clauses s s' t c) (@lem8407883 A B C P clauses s s' t c)). Qed.
Lemma lem8407885 {A P : Type'} (P' : type805 A P) : (term2032 A P P') = (term2033 A P P').
Proof. exact (@lem18392 (P -> A) P'). Qed.
Lemma lem8407886 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term3505 A B C P clauses s t c) = (term3506 A B C P clauses s t c).
Proof. exact (@lem8407885 A P (term436 A B C P clauses s t c)). Qed.
Lemma lem8407887 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term3507 A B C P clauses s t c s') = (term435 A B C P clauses s s' t c).
Proof. exact (eq_refl (term3507 A B C P clauses s t c s')). Qed.
Lemma lem8407888 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8407889 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term3508 A B C P clauses s t c s') = (term3498 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8407888) (@lem8407887 A B C P clauses s s' t c)). Qed.
Lemma lem8407890 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term3508 A B C P clauses s t c s') = (term3504 A B C P clauses s s' t c).
Proof. exact (TRANS (@lem8407889 A B C P clauses s s' t c) (@lem8407884 A B C P clauses s s' t c)). Qed.
Lemma lem8407891 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term3509 A B C P clauses s t c) = (term3510 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8407890 A B C P clauses s s' t c)). Qed.
Lemma lem8407892 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8407893 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term3506 A B C P clauses s t c) = (term3511 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8407892 A P) (@lem8407891 A B C P clauses s t c)). Qed.
Lemma lem8407894 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term3505 A B C P clauses s t c) = (term3511 A B C P clauses s t c).
Proof. exact (TRANS (@lem8407886 A B C P clauses s t c) (@lem8407893 A B C P clauses s t c)). Qed.
Lemma lem8407895 {B C P : Type'} (P' : type766 B C P) : (term2022 B C P P') = (term2023 B C P P').
Proof. exact (@lem18392 (type1475 B C P) P'). Qed.
Lemma lem8407896 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term3512 A B C P clauses s c) = (term3513 A B C P clauses s c).
Proof. exact (@lem8407895 B C P (term438 A B C P clauses s c)). Qed.
Lemma lem8407897 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term3514 A B C P clauses s c t) = (term437 A B C P clauses s t c).
Proof. exact (eq_refl (term3514 A B C P clauses s c t)). Qed.
Lemma lem8407898 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8407899 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term3515 A B C P clauses s c t) = (term3505 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8407898) (@lem8407897 A B C P clauses s t c)). Qed.
Lemma lem8407900 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term3515 A B C P clauses s c t) = (term3511 A B C P clauses s t c).
Proof. exact (TRANS (@lem8407899 A B C P clauses s t c) (@lem8407894 A B C P clauses s t c)). Qed.
Lemma lem8407901 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term3516 A B C P clauses s c) = (term3517 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8407900 A B C P clauses s t c)). Qed.
Lemma lem8407902 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8407903 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term3513 A B C P clauses s c) = (term3518 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8407902 B C P) (@lem8407901 A B C P clauses s c)). Qed.
Lemma lem8407904 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term3512 A B C P clauses s c) = (term3518 A B C P clauses s c).
Proof. exact (TRANS (@lem8407896 A B C P clauses s c) (@lem8407903 A B C P clauses s c)). Qed.
Lemma lem8407905 {A P : Type'} (P' : type805 A P) : (term2032 A P P') = (term2033 A P P').
Proof. exact (@lem18392 (P -> A) P'). Qed.
Lemma lem8407906 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term3519 A B C P clauses c) = (term3520 A B C P clauses c).
Proof. exact (@lem8407905 A P (term440 A B C P clauses c)). Qed.
Lemma lem8407907 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term3521 A B C P clauses c s) = (term439 A B C P clauses s c).
Proof. exact (eq_refl (term3521 A B C P clauses c s)). Qed.
Lemma lem8407908 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8407909 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term3522 A B C P clauses c s) = (term3512 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8407908) (@lem8407907 A B C P clauses s c)). Qed.
Lemma lem8407910 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term3522 A B C P clauses c s) = (term3518 A B C P clauses s c).
Proof. exact (TRANS (@lem8407909 A B C P clauses s c) (@lem8407904 A B C P clauses s c)). Qed.
Lemma lem8407911 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term3523 A B C P clauses c) = (term3524 A B C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8407910 A B C P clauses s c)). Qed.
Lemma lem8407912 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8407913 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term3520 A B C P clauses c) = (term3525 A B C P clauses c).
Proof. exact (MK_COMB (@lem8407912 A P) (@lem8407911 A B C P clauses c)). Qed.
Lemma lem8407914 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term3519 A B C P clauses c) = (term3525 A B C P clauses c).
Proof. exact (TRANS (@lem8407906 A B C P clauses c) (@lem8407913 A B C P clauses c)). Qed.
Lemma lem8407915 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term612 A B C P _115316 c clauses) = (term612 A B C P _115316 c clauses).
Proof. exact (eq_refl (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8407916 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8407917 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term3526 A B C P clauses c) = (term3527 A B C P clauses c).
Proof. exact (MK_COMB (@lem8407916) (@lem8407914 A B C P clauses c)). Qed.
Lemma lem8407918 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3528 A B C P _115316 c clauses) = (term3529 A B C P _115316 c clauses).
Proof. exact (MK_COMB (@lem8407917 A B C P clauses c) (@lem8407915 A B C P _115316 c clauses)). Qed.
Lemma lem8407919 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term613 A B C P _115316 c clauses) = (term3528 A B C P _115316 c clauses).
Proof. exact (@lem17265 (term441 A B C P clauses c) (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8407920 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term613 A B C P _115316 c clauses) = (term3529 A B C P _115316 c clauses).
Proof. exact (TRANS (@lem8407919 A B C P _115316 c clauses) (@lem8407918 A B C P _115316 c clauses)). Qed.
Lemma lem8407921 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term614 A B C P _115316 clauses) = (term3530 A B C P _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8407920 A B C P _115316 c clauses)). Qed.
Lemma lem8407922 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8407923 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term615 A B C P _115316 clauses) = (term3531 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8407922 C) (@lem8407921 A B C P _115316 clauses)). Qed.
Lemma lem8407924 {A B C P : Type'} (_115316 : type1115 A B C P) : (term616 A B C P _115316) = (term3532 A B C P _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8407923 A B C P _115316 clauses)). Qed.
Lemma lem8407925 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8407926 {A B C P : Type'} (_115316 : type1115 A B C P) : (term617 A B C P _115316) = (term3533 A B C P _115316).
Proof. exact (MK_COMB (@lem8407925 A B C P) (@lem8407924 A B C P _115316)). Qed.
Lemma lem8408049 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8408050 {A P : Type'} (P' : type805 A P) (Q : Prop) : (term3071 A P P' Q) = (term3072 A P P' Q).
Proof. exact (@lem8408049 (P -> A) P' Q). Qed.
Lemma lem8408051 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3534 A B C P _115316 c clauses) = (term3535 A B C P _115316 c clauses).
Proof. exact (@lem8408050 A P (term3524 A B C P clauses c) (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8408052 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term3536 A B C P clauses c s) = (term3518 A B C P clauses s c).
Proof. exact (eq_refl (term3536 A B C P clauses c s)). Qed.
Lemma lem8408053 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term3537 A B C P clauses c) = (term3524 A B C P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8408052 A B C P clauses s c)). Qed.
Lemma lem8408054 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8408055 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term3538 A B C P clauses c) = (term3525 A B C P clauses c).
Proof. exact (MK_COMB (@lem8408054 A P) (@lem8408053 A B C P clauses c)). Qed.
Lemma lem8408056 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408057 {A B C P : Type'} (clauses : type1638 A B C P) (c : C) : (term3539 A B C P clauses c) = (term3527 A B C P clauses c).
Proof. exact (MK_COMB (@lem8408056) (@lem8408055 A B C P clauses c)). Qed.
Lemma lem8408058 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term612 A B C P _115316 c clauses) = (term612 A B C P _115316 c clauses).
Proof. exact (eq_refl (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8408059 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3534 A B C P _115316 c clauses) = (term3529 A B C P _115316 c clauses).
Proof. exact (MK_COMB (@lem8408057 A B C P clauses c) (@lem8408058 A B C P _115316 c clauses)). Qed.
Lemma lem8408060 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408061 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3540 A B C P _115316 c clauses) = (term3541 A B C P _115316 c clauses).
Proof. exact (MK_COMB (@lem8408060) (@lem8408059 A B C P _115316 c clauses)). Qed.
Lemma lem8408062 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term3536 A B C P clauses c s) = (term3518 A B C P clauses s c).
Proof. exact (eq_refl (term3536 A B C P clauses c s)). Qed.
Lemma lem8408063 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408064 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term3542 A B C P clauses c s) = (term3543 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8408063) (@lem8408062 A B C P clauses s c)). Qed.
Lemma lem8408065 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term612 A B C P _115316 c clauses) = (term612 A B C P _115316 c clauses).
Proof. exact (eq_refl (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8408066 {A B C P : Type'} (s : P -> A) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3544 A B C P s _115316 c clauses) = (term3545 A B C P s _115316 c clauses).
Proof. exact (MK_COMB (@lem8408064 A B C P clauses s c) (@lem8408065 A B C P _115316 c clauses)). Qed.
Lemma lem8408067 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3546 A B C P _115316 c clauses) = (term3547 A B C P _115316 c clauses).
Proof. exact (fun_ext (fun s : P -> A => @lem8408066 A B C P s _115316 c clauses)). Qed.
Lemma lem8408068 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8408069 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3535 A B C P _115316 c clauses) = (term3548 A B C P _115316 c clauses).
Proof. exact (MK_COMB (@lem8408068 A P) (@lem8408067 A B C P _115316 c clauses)). Qed.
Lemma lem8408070 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : ((term3534 A B C P _115316 c clauses) = (term3535 A B C P _115316 c clauses)) = ((term3529 A B C P _115316 c clauses) = (term3548 A B C P _115316 c clauses)).
Proof. exact (MK_COMB (@lem8408061 A B C P _115316 c clauses) (@lem8408069 A B C P _115316 c clauses)). Qed.
Lemma lem8408071 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3529 A B C P _115316 c clauses) = (term3548 A B C P _115316 c clauses).
Proof. exact (EQ_MP (@lem8408070 A B C P _115316 c clauses) (@lem8408051 A B C P _115316 c clauses)). Qed.
Lemma lem8408073 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8408074 {B C P : Type'} (P' : type766 B C P) (Q : Prop) : (term3088 B C P P' Q) = (term3089 B C P P' Q).
Proof. exact (@lem8408073 (type1475 B C P) P' Q). Qed.
Lemma lem8408075 {A B C P : Type'} (s : P -> A) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3549 A B C P s _115316 c clauses) = (term3550 A B C P s _115316 c clauses).
Proof. exact (@lem8408074 B C P (term3517 A B C P clauses s c) (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8408076 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term3551 A B C P clauses s c t) = (term3511 A B C P clauses s t c).
Proof. exact (eq_refl (term3551 A B C P clauses s c t)). Qed.
Lemma lem8408077 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term3552 A B C P clauses s c) = (term3517 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8408076 A B C P clauses s t c)). Qed.
Lemma lem8408078 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8408079 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term3553 A B C P clauses s c) = (term3518 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8408078 B C P) (@lem8408077 A B C P clauses s c)). Qed.
Lemma lem8408080 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408081 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (c : C) : (term3554 A B C P clauses s c) = (term3543 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8408080) (@lem8408079 A B C P clauses s c)). Qed.
Lemma lem8408082 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term612 A B C P _115316 c clauses) = (term612 A B C P _115316 c clauses).
Proof. exact (eq_refl (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8408083 {A B C P : Type'} (s : P -> A) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3549 A B C P s _115316 c clauses) = (term3545 A B C P s _115316 c clauses).
Proof. exact (MK_COMB (@lem8408081 A B C P clauses s c) (@lem8408082 A B C P _115316 c clauses)). Qed.
Lemma lem8408084 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408085 {A B C P : Type'} (s : P -> A) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3555 A B C P s _115316 c clauses) = (term3556 A B C P s _115316 c clauses).
Proof. exact (MK_COMB (@lem8408084) (@lem8408083 A B C P s _115316 c clauses)). Qed.
Lemma lem8408086 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term3551 A B C P clauses s c t) = (term3511 A B C P clauses s t c).
Proof. exact (eq_refl (term3551 A B C P clauses s c t)). Qed.
Lemma lem8408087 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408088 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term3557 A B C P clauses s c t) = (term3558 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8408087) (@lem8408086 A B C P clauses s t c)). Qed.
Lemma lem8408089 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term612 A B C P _115316 c clauses) = (term612 A B C P _115316 c clauses).
Proof. exact (eq_refl (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8408090 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3559 A B C P s t _115316 c clauses) = (term3560 A B C P s t _115316 c clauses).
Proof. exact (MK_COMB (@lem8408088 A B C P clauses s t c) (@lem8408089 A B C P _115316 c clauses)). Qed.
Lemma lem8408091 {A B C P : Type'} (s : P -> A) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3561 A B C P s _115316 c clauses) = (term3562 A B C P s _115316 c clauses).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8408090 A B C P s t _115316 c clauses)). Qed.
Lemma lem8408092 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8408093 {A B C P : Type'} (s : P -> A) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3550 A B C P s _115316 c clauses) = (term3563 A B C P s _115316 c clauses).
Proof. exact (MK_COMB (@lem8408092 B C P) (@lem8408091 A B C P s _115316 c clauses)). Qed.
Lemma lem8408094 {A B C P : Type'} (s : P -> A) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : ((term3549 A B C P s _115316 c clauses) = (term3550 A B C P s _115316 c clauses)) = ((term3545 A B C P s _115316 c clauses) = (term3563 A B C P s _115316 c clauses)).
Proof. exact (MK_COMB (@lem8408085 A B C P s _115316 c clauses) (@lem8408093 A B C P s _115316 c clauses)). Qed.
Lemma lem8408095 {A B C P : Type'} (s : P -> A) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3545 A B C P s _115316 c clauses) = (term3563 A B C P s _115316 c clauses).
Proof. exact (EQ_MP (@lem8408094 A B C P s _115316 c clauses) (@lem8408075 A B C P s _115316 c clauses)). Qed.
Lemma lem8408097 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8408098 {A P : Type'} (P' : type805 A P) (Q : Prop) : (term3071 A P P' Q) = (term3072 A P P' Q).
Proof. exact (@lem8408097 (P -> A) P' Q). Qed.
Lemma lem8408099 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3564 A B C P s t _115316 c clauses) = (term3565 A B C P s t _115316 c clauses).
Proof. exact (@lem8408098 A P (term3510 A B C P clauses s t c) (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8408100 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term3566 A B C P clauses s t c s') = (term3504 A B C P clauses s s' t c).
Proof. exact (eq_refl (term3566 A B C P clauses s t c s')). Qed.
Lemma lem8408101 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term3567 A B C P clauses s t c) = (term3510 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8408100 A B C P clauses s s' t c)). Qed.
Lemma lem8408102 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8408103 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term3568 A B C P clauses s t c) = (term3511 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8408102 A P) (@lem8408101 A B C P clauses s t c)). Qed.
Lemma lem8408104 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408105 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (t : type1475 B C P) (c : C) : (term3569 A B C P clauses s t c) = (term3558 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8408104) (@lem8408103 A B C P clauses s t c)). Qed.
Lemma lem8408106 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term612 A B C P _115316 c clauses) = (term612 A B C P _115316 c clauses).
Proof. exact (eq_refl (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8408107 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3564 A B C P s t _115316 c clauses) = (term3560 A B C P s t _115316 c clauses).
Proof. exact (MK_COMB (@lem8408105 A B C P clauses s t c) (@lem8408106 A B C P _115316 c clauses)). Qed.
Lemma lem8408108 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408109 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3570 A B C P s t _115316 c clauses) = (term3571 A B C P s t _115316 c clauses).
Proof. exact (MK_COMB (@lem8408108) (@lem8408107 A B C P s t _115316 c clauses)). Qed.
Lemma lem8408110 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term3566 A B C P clauses s t c s') = (term3504 A B C P clauses s s' t c).
Proof. exact (eq_refl (term3566 A B C P clauses s t c s')). Qed.
Lemma lem8408111 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408112 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term3572 A B C P clauses s t c s') = (term3573 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8408111) (@lem8408110 A B C P clauses s s' t c)). Qed.
Lemma lem8408113 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term612 A B C P _115316 c clauses) = (term612 A B C P _115316 c clauses).
Proof. exact (eq_refl (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8408114 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3574 A B C P s t s' _115316 c clauses) = (term3575 A B C P s s' t _115316 c clauses).
Proof. exact (MK_COMB (@lem8408112 A B C P clauses s s' t c) (@lem8408113 A B C P _115316 c clauses)). Qed.
Lemma lem8408115 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3576 A B C P s t _115316 c clauses) = (term3577 A B C P s t _115316 c clauses).
Proof. exact (fun_ext (fun s' : P -> A => @lem8408114 A B C P s s' t _115316 c clauses)). Qed.
Lemma lem8408116 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8408117 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3565 A B C P s t _115316 c clauses) = (term3578 A B C P s t _115316 c clauses).
Proof. exact (MK_COMB (@lem8408116 A P) (@lem8408115 A B C P s t _115316 c clauses)). Qed.
Lemma lem8408118 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : ((term3564 A B C P s t _115316 c clauses) = (term3565 A B C P s t _115316 c clauses)) = ((term3560 A B C P s t _115316 c clauses) = (term3578 A B C P s t _115316 c clauses)).
Proof. exact (MK_COMB (@lem8408109 A B C P s t _115316 c clauses) (@lem8408117 A B C P s t _115316 c clauses)). Qed.
Lemma lem8408119 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3560 A B C P s t _115316 c clauses) = (term3578 A B C P s t _115316 c clauses).
Proof. exact (EQ_MP (@lem8408118 A B C P s t _115316 c clauses) (@lem8408099 A B C P s t _115316 c clauses)). Qed.
Lemma lem8408121 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8408122 {B C P : Type'} (P' : type766 B C P) (Q : Prop) : (term3088 B C P P' Q) = (term3089 B C P P' Q).
Proof. exact (@lem8408121 (type1475 B C P) P' Q). Qed.
Lemma lem8408123 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3579 A B C P s s' t _115316 c clauses) = (term3580 A B C P s s' t _115316 c clauses).
Proof. exact (@lem8408122 B C P (term3503 A B C P clauses s s' t c) (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8408124 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3581 A B C P clauses s s' t c t') = (term3497 A B C P clauses s s' t t' c).
Proof. exact (eq_refl (term3581 A B C P clauses s s' t c t')). Qed.
Lemma lem8408125 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term3582 A B C P clauses s s' t c) = (term3503 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8408124 A B C P clauses s s' t t' c)). Qed.
Lemma lem8408126 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8408127 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term3583 A B C P clauses s s' t c) = (term3504 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8408126 B C P) (@lem8408125 A B C P clauses s s' t c)). Qed.
Lemma lem8408128 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408129 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (c : C) : (term3584 A B C P clauses s s' t c) = (term3573 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8408128) (@lem8408127 A B C P clauses s s' t c)). Qed.
Lemma lem8408130 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term612 A B C P _115316 c clauses) = (term612 A B C P _115316 c clauses).
Proof. exact (eq_refl (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8408131 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3579 A B C P s s' t _115316 c clauses) = (term3575 A B C P s s' t _115316 c clauses).
Proof. exact (MK_COMB (@lem8408129 A B C P clauses s s' t c) (@lem8408130 A B C P _115316 c clauses)). Qed.
Lemma lem8408132 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408133 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3585 A B C P s s' t _115316 c clauses) = (term3586 A B C P s s' t _115316 c clauses).
Proof. exact (MK_COMB (@lem8408132) (@lem8408131 A B C P s s' t _115316 c clauses)). Qed.
Lemma lem8408134 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3581 A B C P clauses s s' t c t') = (term3497 A B C P clauses s s' t t' c).
Proof. exact (eq_refl (term3581 A B C P clauses s s' t c t')). Qed.
Lemma lem8408135 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408136 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3587 A B C P clauses s s' t c t') = (term3588 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8408135) (@lem8408134 A B C P clauses s s' t t' c)). Qed.
Lemma lem8408137 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term612 A B C P _115316 c clauses) = (term612 A B C P _115316 c clauses).
Proof. exact (eq_refl (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8408138 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3589 A B C P s s' t t' _115316 c clauses) = (term3590 A B C P s s' t t' _115316 c clauses).
Proof. exact (MK_COMB (@lem8408136 A B C P clauses s s' t t' c) (@lem8408137 A B C P _115316 c clauses)). Qed.
Lemma lem8408139 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3591 A B C P s s' t _115316 c clauses) = (term3592 A B C P s s' t _115316 c clauses).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8408138 A B C P s s' t t' _115316 c clauses)). Qed.
Lemma lem8408140 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8408141 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3580 A B C P s s' t _115316 c clauses) = (term3593 A B C P s s' t _115316 c clauses).
Proof. exact (MK_COMB (@lem8408140 B C P) (@lem8408139 A B C P s s' t _115316 c clauses)). Qed.
Lemma lem8408142 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : ((term3579 A B C P s s' t _115316 c clauses) = (term3580 A B C P s s' t _115316 c clauses)) = ((term3575 A B C P s s' t _115316 c clauses) = (term3593 A B C P s s' t _115316 c clauses)).
Proof. exact (MK_COMB (@lem8408133 A B C P s s' t _115316 c clauses) (@lem8408141 A B C P s s' t _115316 c clauses)). Qed.
Lemma lem8408143 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3575 A B C P s s' t _115316 c clauses) = (term3593 A B C P s s' t _115316 c clauses).
Proof. exact (EQ_MP (@lem8408142 A B C P s s' t _115316 c clauses) (@lem8408123 A B C P s s' t _115316 c clauses)). Qed.
Lemma lem8408145 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8408146 {P : Type'} (P' : P -> Prop) (Q : Prop) : (term3069 P P' Q) = (term3070 P P' Q).
Proof. exact (@lem8408145 P P' Q). Qed.
Lemma lem8408147 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3594 A B C P s s' t t' _115316 c clauses) = (term3595 A B C P s s' t t' _115316 c clauses).
Proof. exact (@lem8408146 P (term3496 A B C P clauses s s' t t' c) (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8408148 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3596 A B C P clauses s s' t t' c x) = (term3490 A B C P clauses s s' t x t' c).
Proof. exact (eq_refl (term3596 A B C P clauses s s' t t' c x)). Qed.
Lemma lem8408149 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3597 A B C P clauses s s' t t' c) = (term3496 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8408148 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8408150 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8408151 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3598 A B C P clauses s s' t t' c) = (term3497 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8408150 P) (@lem8408149 A B C P clauses s s' t t' c)). Qed.
Lemma lem8408152 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408153 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3599 A B C P clauses s s' t t' c) = (term3588 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8408152) (@lem8408151 A B C P clauses s s' t t' c)). Qed.
Lemma lem8408154 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term612 A B C P _115316 c clauses) = (term612 A B C P _115316 c clauses).
Proof. exact (eq_refl (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8408155 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3594 A B C P s s' t t' _115316 c clauses) = (term3590 A B C P s s' t t' _115316 c clauses).
Proof. exact (MK_COMB (@lem8408153 A B C P clauses s s' t t' c) (@lem8408154 A B C P _115316 c clauses)). Qed.
Lemma lem8408156 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408157 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3600 A B C P s s' t t' _115316 c clauses) = (term3601 A B C P s s' t t' _115316 c clauses).
Proof. exact (MK_COMB (@lem8408156) (@lem8408155 A B C P s s' t t' _115316 c clauses)). Qed.
Lemma lem8408158 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3596 A B C P clauses s s' t t' c x) = (term3490 A B C P clauses s s' t x t' c).
Proof. exact (eq_refl (term3596 A B C P clauses s s' t t' c x)). Qed.
Lemma lem8408159 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408160 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3602 A B C P clauses s s' t t' c x) = (term3603 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8408159) (@lem8408158 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8408161 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term612 A B C P _115316 c clauses) = (term612 A B C P _115316 c clauses).
Proof. exact (eq_refl (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8408162 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3604 A B C P s s' t t' x _115316 c clauses) = (term3605 A B C P s s' t x t' _115316 c clauses).
Proof. exact (MK_COMB (@lem8408160 A B C P clauses s s' t x t' c) (@lem8408161 A B C P _115316 c clauses)). Qed.
Lemma lem8408163 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3606 A B C P s s' t t' _115316 c clauses) = (term3607 A B C P s s' t t' _115316 c clauses).
Proof. exact (fun_ext (fun x : P => @lem8408162 A B C P s s' t x t' _115316 c clauses)). Qed.
Lemma lem8408164 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8408165 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3595 A B C P s s' t t' _115316 c clauses) = (term3608 A B C P s s' t t' _115316 c clauses).
Proof. exact (MK_COMB (@lem8408164 P) (@lem8408163 A B C P s s' t t' _115316 c clauses)). Qed.
Lemma lem8408166 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : ((term3594 A B C P s s' t t' _115316 c clauses) = (term3595 A B C P s s' t t' _115316 c clauses)) = ((term3590 A B C P s s' t t' _115316 c clauses) = (term3608 A B C P s s' t t' _115316 c clauses)).
Proof. exact (MK_COMB (@lem8408157 A B C P s s' t t' _115316 c clauses) (@lem8408165 A B C P s s' t t' _115316 c clauses)). Qed.
Lemma lem8408167 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3590 A B C P s s' t t' _115316 c clauses) = (term3608 A B C P s s' t t' _115316 c clauses).
Proof. exact (EQ_MP (@lem8408166 A B C P s s' t t' _115316 c clauses) (@lem8408147 A B C P s s' t t' _115316 c clauses)). Qed.
Lemma lem8408169 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8408170 {P : Type'} (P' : P -> Prop) (Q : Prop) : (term3069 P P' Q) = (term3070 P P' Q).
Proof. exact (@lem8408169 P P' Q). Qed.
Lemma lem8408171 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3609 A B C P s s' t x t' _115316 c clauses) = (term3610 A B C P s s' t x t' _115316 c clauses).
Proof. exact (@lem8408170 P (term3489 A B C P clauses s s' t x t' c) (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8408172 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term3611 A B C P clauses s s' t x t' c y) = (term3482 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term3611 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8408173 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3612 A B C P clauses s s' t x t' c) = (term3489 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8408172 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8408174 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8408175 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3613 A B C P clauses s s' t x t' c) = (term3490 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8408174 P) (@lem8408173 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8408176 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408177 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3614 A B C P clauses s s' t x t' c) = (term3603 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8408176) (@lem8408175 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8408178 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term612 A B C P _115316 c clauses) = (term612 A B C P _115316 c clauses).
Proof. exact (eq_refl (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8408179 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3609 A B C P s s' t x t' _115316 c clauses) = (term3605 A B C P s s' t x t' _115316 c clauses).
Proof. exact (MK_COMB (@lem8408177 A B C P clauses s s' t x t' c) (@lem8408178 A B C P _115316 c clauses)). Qed.
Lemma lem8408180 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408181 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3615 A B C P s s' t x t' _115316 c clauses) = (term3616 A B C P s s' t x t' _115316 c clauses).
Proof. exact (MK_COMB (@lem8408180) (@lem8408179 A B C P s s' t x t' _115316 c clauses)). Qed.
Lemma lem8408182 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term3611 A B C P clauses s s' t x t' c y) = (term3482 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term3611 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8408183 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408184 {A B C P : Type'} (clauses : type1638 A B C P) (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term3617 A B C P clauses s s' t x t' c y) = (term3618 A B C P clauses s s' t x t' c y).
Proof. exact (MK_COMB (@lem8408183) (@lem8408182 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8408185 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term612 A B C P _115316 c clauses) = (term612 A B C P _115316 c clauses).
Proof. exact (eq_refl (term612 A B C P _115316 c clauses)). Qed.
Lemma lem8408186 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (y : P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3619 A B C P s s' t x t' y _115316 c clauses) = (term3620 A B C P s s' t x t' y _115316 c clauses).
Proof. exact (MK_COMB (@lem8408184 A B C P clauses s s' t x t' c y) (@lem8408185 A B C P _115316 c clauses)). Qed.
Lemma lem8408187 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3621 A B C P s s' t x t' _115316 c clauses) = (term3622 A B C P s s' t x t' _115316 c clauses).
Proof. exact (fun_ext (fun y : P => @lem8408186 A B C P s s' t x t' y _115316 c clauses)). Qed.
Lemma lem8408188 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8408189 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3610 A B C P s s' t x t' _115316 c clauses) = (term3623 A B C P s s' t x t' _115316 c clauses).
Proof. exact (MK_COMB (@lem8408188 P) (@lem8408187 A B C P s s' t x t' _115316 c clauses)). Qed.
Lemma lem8408190 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : ((term3609 A B C P s s' t x t' _115316 c clauses) = (term3610 A B C P s s' t x t' _115316 c clauses)) = ((term3605 A B C P s s' t x t' _115316 c clauses) = (term3623 A B C P s s' t x t' _115316 c clauses)).
Proof. exact (MK_COMB (@lem8408181 A B C P s s' t x t' _115316 c clauses) (@lem8408189 A B C P s s' t x t' _115316 c clauses)). Qed.
Lemma lem8408191 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3605 A B C P s s' t x t' _115316 c clauses) = (term3623 A B C P s s' t x t' _115316 c clauses).
Proof. exact (EQ_MP (@lem8408190 A B C P s s' t x t' _115316 c clauses) (@lem8408171 A B C P s s' t x t' _115316 c clauses)). Qed.
Lemma lem8408192 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3607 A B C P s s' t t' _115316 c clauses) = (term3624 A B C P s s' t t' _115316 c clauses).
Proof. exact (fun_ext (fun x : P => @lem8408191 A B C P s s' t x t' _115316 c clauses)). Qed.
Lemma lem8408193 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8408194 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3608 A B C P s s' t t' _115316 c clauses) = (term3625 A B C P s s' t t' _115316 c clauses).
Proof. exact (MK_COMB (@lem8408193 P) (@lem8408192 A B C P s s' t t' _115316 c clauses)). Qed.
Lemma lem8408195 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (t' : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3590 A B C P s s' t t' _115316 c clauses) = (term3625 A B C P s s' t t' _115316 c clauses).
Proof. exact (TRANS (@lem8408167 A B C P s s' t t' _115316 c clauses) (@lem8408194 A B C P s s' t t' _115316 c clauses)). Qed.
Lemma lem8408196 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3592 A B C P s s' t _115316 c clauses) = (term3626 A B C P s s' t _115316 c clauses).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8408195 A B C P s s' t t' _115316 c clauses)). Qed.
Lemma lem8408197 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8408198 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3593 A B C P s s' t _115316 c clauses) = (term3627 A B C P s s' t _115316 c clauses).
Proof. exact (MK_COMB (@lem8408197 B C P) (@lem8408196 A B C P s s' t _115316 c clauses)). Qed.
Lemma lem8408199 {A B C P : Type'} (s : P -> A) (s' : P -> A) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3575 A B C P s s' t _115316 c clauses) = (term3627 A B C P s s' t _115316 c clauses).
Proof. exact (TRANS (@lem8408143 A B C P s s' t _115316 c clauses) (@lem8408198 A B C P s s' t _115316 c clauses)). Qed.
Lemma lem8408200 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3577 A B C P s t _115316 c clauses) = (term3628 A B C P s t _115316 c clauses).
Proof. exact (fun_ext (fun s' : P -> A => @lem8408199 A B C P s s' t _115316 c clauses)). Qed.
Lemma lem8408201 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8408202 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3578 A B C P s t _115316 c clauses) = (term3629 A B C P s t _115316 c clauses).
Proof. exact (MK_COMB (@lem8408201 A P) (@lem8408200 A B C P s t _115316 c clauses)). Qed.
Lemma lem8408203 {A B C P : Type'} (s : P -> A) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3560 A B C P s t _115316 c clauses) = (term3629 A B C P s t _115316 c clauses).
Proof. exact (TRANS (@lem8408119 A B C P s t _115316 c clauses) (@lem8408202 A B C P s t _115316 c clauses)). Qed.
Lemma lem8408204 {A B C P : Type'} (s : P -> A) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3562 A B C P s _115316 c clauses) = (term3630 A B C P s _115316 c clauses).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8408203 A B C P s t _115316 c clauses)). Qed.
Lemma lem8408205 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8408206 {A B C P : Type'} (s : P -> A) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3563 A B C P s _115316 c clauses) = (term3631 A B C P s _115316 c clauses).
Proof. exact (MK_COMB (@lem8408205 B C P) (@lem8408204 A B C P s _115316 c clauses)). Qed.
Lemma lem8408207 {A B C P : Type'} (s : P -> A) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3545 A B C P s _115316 c clauses) = (term3631 A B C P s _115316 c clauses).
Proof. exact (TRANS (@lem8408095 A B C P s _115316 c clauses) (@lem8408206 A B C P s _115316 c clauses)). Qed.
Lemma lem8408208 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3547 A B C P _115316 c clauses) = (term3632 A B C P _115316 c clauses).
Proof. exact (fun_ext (fun s : P -> A => @lem8408207 A B C P s _115316 c clauses)). Qed.
Lemma lem8408209 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8408210 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3548 A B C P _115316 c clauses) = (term3633 A B C P _115316 c clauses).
Proof. exact (MK_COMB (@lem8408209 A P) (@lem8408208 A B C P _115316 c clauses)). Qed.
Lemma lem8408211 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3529 A B C P _115316 c clauses) = (term3633 A B C P _115316 c clauses).
Proof. exact (TRANS (@lem8408071 A B C P _115316 c clauses) (@lem8408210 A B C P _115316 c clauses)). Qed.
Lemma lem8408212 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3530 A B C P _115316 clauses) = (term3634 A B C P _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8408211 A B C P _115316 c clauses)). Qed.
Lemma lem8408213 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8408214 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3531 A B C P _115316 clauses) = (term3635 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8408213 C) (@lem8408212 A B C P _115316 clauses)). Qed.
Lemma lem8408216 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8408217 {A C P : Type'} (P' : type1455 A C P) : (term3177 A C P P') = (term3178 A C P P').
Proof. exact (@lem8408216 C (P -> A) P'). Qed.
Lemma lem8408218 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3636 A B C P _115316 clauses) = (term3637 A B C P _115316 clauses).
Proof. exact (@lem8408217 A C P (term3638 A B C P _115316 clauses)). Qed.
Lemma lem8408219 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3639 A B C P _115316 clauses c) = (term3632 A B C P _115316 c clauses).
Proof. exact (eq_refl (term3639 A B C P _115316 clauses c)). Qed.
Lemma lem8408220 {A P : Type'} (s : P -> A) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8408221 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) (s : P -> A) : (term3640 A B C P _115316 clauses c s) = (term3641 A B C P _115316 c clauses s).
Proof. exact (MK_COMB (@lem8408219 A B C P _115316 c clauses) (@lem8408220 A P s)). Qed.
Lemma lem8408222 {A B C P : Type'} (s : P -> A) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3641 A B C P _115316 c clauses s) = (term3631 A B C P s _115316 c clauses).
Proof. exact (eq_refl (term3641 A B C P _115316 c clauses s)). Qed.
Lemma lem8408223 {A B C P : Type'} (s : P -> A) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3640 A B C P _115316 clauses c s) = (term3631 A B C P s _115316 c clauses).
Proof. exact (TRANS (@lem8408221 A B C P _115316 c clauses s) (@lem8408222 A B C P s _115316 c clauses)). Qed.
Lemma lem8408224 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3642 A B C P _115316 clauses c) = (term3632 A B C P _115316 c clauses).
Proof. exact (fun_ext (fun s : P -> A => @lem8408223 A B C P s _115316 c clauses)). Qed.
Lemma lem8408225 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8408226 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3643 A B C P _115316 clauses c) = (term3633 A B C P _115316 c clauses).
Proof. exact (MK_COMB (@lem8408225 A P) (@lem8408224 A B C P _115316 c clauses)). Qed.
Lemma lem8408227 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3644 A B C P _115316 clauses) = (term3634 A B C P _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8408226 A B C P _115316 c clauses)). Qed.
Lemma lem8408228 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8408229 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3636 A B C P _115316 clauses) = (term3635 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8408228 C) (@lem8408227 A B C P _115316 clauses)). Qed.
Lemma lem8408230 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408231 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3645 A B C P _115316 clauses) = (term3646 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8408230) (@lem8408229 A B C P _115316 clauses)). Qed.
Lemma lem8408232 {A B C P : Type'} (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3639 A B C P _115316 clauses c) = (term3632 A B C P _115316 c clauses).
Proof. exact (eq_refl (term3639 A B C P _115316 clauses c)). Qed.
Lemma lem8408233 {A C P : Type'} (s : type1475 A C P) (c : C) : (s c) = (s c).
Proof. exact (eq_refl (s c)). Qed.
Lemma lem8408234 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1475 A C P) (c : C) : (term3647 A B C P _115316 clauses s c) = (term3648 A B C P _115316 clauses s c).
Proof. exact (MK_COMB (@lem8408232 A B C P _115316 c clauses) (@lem8408233 A C P s c)). Qed.
Lemma lem8408235 {A B C P : Type'} (s : type1475 A C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3648 A B C P _115316 clauses s c) = (term3649 A B C P s _115316 c clauses).
Proof. exact (eq_refl (term3648 A B C P _115316 clauses s c)). Qed.
Lemma lem8408236 {A B C P : Type'} (s : type1475 A C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3647 A B C P _115316 clauses s c) = (term3649 A B C P s _115316 c clauses).
Proof. exact (TRANS (@lem8408234 A B C P _115316 clauses s c) (@lem8408235 A B C P s _115316 c clauses)). Qed.
Lemma lem8408237 {A B C P : Type'} (s : type1475 A C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3650 A B C P _115316 clauses s) = (term3651 A B C P s _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8408236 A B C P s _115316 c clauses)). Qed.
Lemma lem8408238 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8408239 {A B C P : Type'} (s : type1475 A C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3652 A B C P _115316 clauses s) = (term3653 A B C P s _115316 clauses).
Proof. exact (MK_COMB (@lem8408238 C) (@lem8408237 A B C P s _115316 clauses)). Qed.
Lemma lem8408240 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3654 A B C P _115316 clauses) = (term3655 A B C P _115316 clauses).
Proof. exact (fun_ext (fun s : type1475 A C P => @lem8408239 A B C P s _115316 clauses)). Qed.
Lemma lem8408241 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8408242 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3637 A B C P _115316 clauses) = (term3656 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8408241 A C P) (@lem8408240 A B C P _115316 clauses)). Qed.
Lemma lem8408243 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : ((term3636 A B C P _115316 clauses) = (term3637 A B C P _115316 clauses)) = ((term3635 A B C P _115316 clauses) = (term3656 A B C P _115316 clauses)).
Proof. exact (MK_COMB (@lem8408231 A B C P _115316 clauses) (@lem8408242 A B C P _115316 clauses)). Qed.
Lemma lem8408244 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3635 A B C P _115316 clauses) = (term3656 A B C P _115316 clauses).
Proof. exact (EQ_MP (@lem8408243 A B C P _115316 clauses) (@lem8408218 A B C P _115316 clauses)). Qed.
Lemma lem8408246 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8408247 {B C P : Type'} (P' : type1451 B C P) : (term3200 B C P P') = (term3201 B C P P').
Proof. exact (@lem8408246 C (type1475 B C P) P'). Qed.
Lemma lem8408248 {A B C P : Type'} (s : type1475 A C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3657 A B C P s _115316 clauses) = (term3658 A B C P s _115316 clauses).
Proof. exact (@lem8408247 B C P (term3659 A B C P s _115316 clauses)). Qed.
Lemma lem8408249 {A B C P : Type'} (s : type1475 A C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3660 A B C P s _115316 clauses c) = (term3661 A B C P s _115316 c clauses).
Proof. exact (eq_refl (term3660 A B C P s _115316 clauses c)). Qed.
Lemma lem8408250 {B C P : Type'} (t : type1475 B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8408251 {A B C P : Type'} (s : type1475 A C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) (t : type1475 B C P) : (term3662 A B C P s _115316 clauses c t) = (term3663 A B C P s _115316 c clauses t).
Proof. exact (MK_COMB (@lem8408249 A B C P s _115316 c clauses) (@lem8408250 B C P t)). Qed.
Lemma lem8408252 {A B C P : Type'} (s : type1475 A C P) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3663 A B C P s _115316 c clauses t) = (term3664 A B C P s t _115316 c clauses).
Proof. exact (eq_refl (term3663 A B C P s _115316 c clauses t)). Qed.
Lemma lem8408253 {A B C P : Type'} (s : type1475 A C P) (t : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3662 A B C P s _115316 clauses c t) = (term3664 A B C P s t _115316 c clauses).
Proof. exact (TRANS (@lem8408251 A B C P s _115316 c clauses t) (@lem8408252 A B C P s t _115316 c clauses)). Qed.
Lemma lem8408254 {A B C P : Type'} (s : type1475 A C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3665 A B C P s _115316 clauses c) = (term3661 A B C P s _115316 c clauses).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8408253 A B C P s t _115316 c clauses)). Qed.
Lemma lem8408255 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8408256 {A B C P : Type'} (s : type1475 A C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3666 A B C P s _115316 clauses c) = (term3649 A B C P s _115316 c clauses).
Proof. exact (MK_COMB (@lem8408255 B C P) (@lem8408254 A B C P s _115316 c clauses)). Qed.
Lemma lem8408257 {A B C P : Type'} (s : type1475 A C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3667 A B C P s _115316 clauses) = (term3651 A B C P s _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8408256 A B C P s _115316 c clauses)). Qed.
Lemma lem8408258 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8408259 {A B C P : Type'} (s : type1475 A C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3657 A B C P s _115316 clauses) = (term3653 A B C P s _115316 clauses).
Proof. exact (MK_COMB (@lem8408258 C) (@lem8408257 A B C P s _115316 clauses)). Qed.
Lemma lem8408260 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408261 {A B C P : Type'} (s : type1475 A C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3668 A B C P s _115316 clauses) = (term3669 A B C P s _115316 clauses).
Proof. exact (MK_COMB (@lem8408260) (@lem8408259 A B C P s _115316 clauses)). Qed.
Lemma lem8408262 {A B C P : Type'} (s : type1475 A C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3660 A B C P s _115316 clauses c) = (term3661 A B C P s _115316 c clauses).
Proof. exact (eq_refl (term3660 A B C P s _115316 clauses c)). Qed.
Lemma lem8408263 {B C P : Type'} (t : type1473 B C P) (c : C) : (t c) = (t c).
Proof. exact (eq_refl (t c)). Qed.
Lemma lem8408264 {A B C P : Type'} (s : type1475 A C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (t : type1473 B C P) (c : C) : (term3670 A B C P s _115316 clauses t c) = (term3671 A B C P s _115316 clauses t c).
Proof. exact (MK_COMB (@lem8408262 A B C P s _115316 c clauses) (@lem8408263 B C P t c)). Qed.
Lemma lem8408265 {A B C P : Type'} (s : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3671 A B C P s _115316 clauses t c) = (term3672 A B C P s t _115316 c clauses).
Proof. exact (eq_refl (term3671 A B C P s _115316 clauses t c)). Qed.
Lemma lem8408266 {A B C P : Type'} (s : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3670 A B C P s _115316 clauses t c) = (term3672 A B C P s t _115316 c clauses).
Proof. exact (TRANS (@lem8408264 A B C P s _115316 clauses t c) (@lem8408265 A B C P s t _115316 c clauses)). Qed.
Lemma lem8408267 {A B C P : Type'} (s : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3673 A B C P s _115316 clauses t) = (term3674 A B C P s t _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8408266 A B C P s t _115316 c clauses)). Qed.
Lemma lem8408268 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8408269 {A B C P : Type'} (s : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3675 A B C P s _115316 clauses t) = (term3676 A B C P s t _115316 clauses).
Proof. exact (MK_COMB (@lem8408268 C) (@lem8408267 A B C P s t _115316 clauses)). Qed.
Lemma lem8408270 {A B C P : Type'} (s : type1475 A C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3677 A B C P s _115316 clauses) = (term3678 A B C P s _115316 clauses).
Proof. exact (fun_ext (fun t : type1473 B C P => @lem8408269 A B C P s t _115316 clauses)). Qed.
Lemma lem8408271 {B C P : Type'} : (@ex (C -> C -> P -> B)) = (@ex (C -> C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> C -> P -> B))). Qed.
Lemma lem8408272 {A B C P : Type'} (s : type1475 A C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3658 A B C P s _115316 clauses) = (term3679 A B C P s _115316 clauses).
Proof. exact (MK_COMB (@lem8408271 B C P) (@lem8408270 A B C P s _115316 clauses)). Qed.
Lemma lem8408273 {A B C P : Type'} (s : type1475 A C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : ((term3657 A B C P s _115316 clauses) = (term3658 A B C P s _115316 clauses)) = ((term3653 A B C P s _115316 clauses) = (term3679 A B C P s _115316 clauses)).
Proof. exact (MK_COMB (@lem8408261 A B C P s _115316 clauses) (@lem8408272 A B C P s _115316 clauses)). Qed.
Lemma lem8408274 {A B C P : Type'} (s : type1475 A C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3653 A B C P s _115316 clauses) = (term3679 A B C P s _115316 clauses).
Proof. exact (EQ_MP (@lem8408273 A B C P s _115316 clauses) (@lem8408248 A B C P s _115316 clauses)). Qed.
Lemma lem8408276 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8408277 {A C P : Type'} (P' : type1455 A C P) : (term3177 A C P P') = (term3178 A C P P').
Proof. exact (@lem8408276 C (P -> A) P'). Qed.
Lemma lem8408278 {A B C P : Type'} (s : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3680 A B C P s t _115316 clauses) = (term3681 A B C P s t _115316 clauses).
Proof. exact (@lem8408277 A C P (term3682 A B C P s t _115316 clauses)). Qed.
Lemma lem8408279 {A B C P : Type'} (s : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3683 A B C P s t _115316 clauses c) = (term3684 A B C P s t _115316 c clauses).
Proof. exact (eq_refl (term3683 A B C P s t _115316 clauses c)). Qed.
Lemma lem8408280 {A P : Type'} (s' : P -> A) : s' = s'.
Proof. exact (eq_refl s'). Qed.
Lemma lem8408281 {A B C P : Type'} (s : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) (s' : P -> A) : (term3685 A B C P s t _115316 clauses c s') = (term3686 A B C P s t _115316 c clauses s').
Proof. exact (MK_COMB (@lem8408279 A B C P s t _115316 c clauses) (@lem8408280 A P s')). Qed.
Lemma lem8408282 {A B C P : Type'} (s : type1475 A C P) (s' : P -> A) (t : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3686 A B C P s t _115316 c clauses s') = (term3687 A B C P s s' t _115316 c clauses).
Proof. exact (eq_refl (term3686 A B C P s t _115316 c clauses s')). Qed.
Lemma lem8408283 {A B C P : Type'} (s : type1475 A C P) (s' : P -> A) (t : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3685 A B C P s t _115316 clauses c s') = (term3687 A B C P s s' t _115316 c clauses).
Proof. exact (TRANS (@lem8408281 A B C P s t _115316 c clauses s') (@lem8408282 A B C P s s' t _115316 c clauses)). Qed.
Lemma lem8408284 {A B C P : Type'} (s : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3688 A B C P s t _115316 clauses c) = (term3684 A B C P s t _115316 c clauses).
Proof. exact (fun_ext (fun s' : P -> A => @lem8408283 A B C P s s' t _115316 c clauses)). Qed.
Lemma lem8408285 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8408286 {A B C P : Type'} (s : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3689 A B C P s t _115316 clauses c) = (term3672 A B C P s t _115316 c clauses).
Proof. exact (MK_COMB (@lem8408285 A P) (@lem8408284 A B C P s t _115316 c clauses)). Qed.
Lemma lem8408287 {A B C P : Type'} (s : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3690 A B C P s t _115316 clauses) = (term3674 A B C P s t _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8408286 A B C P s t _115316 c clauses)). Qed.
Lemma lem8408288 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8408289 {A B C P : Type'} (s : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3680 A B C P s t _115316 clauses) = (term3676 A B C P s t _115316 clauses).
Proof. exact (MK_COMB (@lem8408288 C) (@lem8408287 A B C P s t _115316 clauses)). Qed.
Lemma lem8408290 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408291 {A B C P : Type'} (s : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3691 A B C P s t _115316 clauses) = (term3692 A B C P s t _115316 clauses).
Proof. exact (MK_COMB (@lem8408290) (@lem8408289 A B C P s t _115316 clauses)). Qed.
Lemma lem8408292 {A B C P : Type'} (s : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3683 A B C P s t _115316 clauses c) = (term3684 A B C P s t _115316 c clauses).
Proof. exact (eq_refl (term3683 A B C P s t _115316 clauses c)). Qed.
Lemma lem8408293 {A C P : Type'} (s' : type1475 A C P) (c : C) : (s' c) = (s' c).
Proof. exact (eq_refl (s' c)). Qed.
Lemma lem8408294 {A B C P : Type'} (s : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s' : type1475 A C P) (c : C) : (term3693 A B C P s t _115316 clauses s' c) = (term3694 A B C P s t _115316 clauses s' c).
Proof. exact (MK_COMB (@lem8408292 A B C P s t _115316 c clauses) (@lem8408293 A C P s' c)). Qed.
Lemma lem8408295 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3694 A B C P s t _115316 clauses s' c) = (term3695 A B C P s s' t _115316 c clauses).
Proof. exact (eq_refl (term3694 A B C P s t _115316 clauses s' c)). Qed.
Lemma lem8408296 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3693 A B C P s t _115316 clauses s' c) = (term3695 A B C P s s' t _115316 c clauses).
Proof. exact (TRANS (@lem8408294 A B C P s t _115316 clauses s' c) (@lem8408295 A B C P s s' t _115316 c clauses)). Qed.
Lemma lem8408297 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3696 A B C P s t _115316 clauses s') = (term3697 A B C P s s' t _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8408296 A B C P s s' t _115316 c clauses)). Qed.
Lemma lem8408298 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8408299 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3698 A B C P s t _115316 clauses s') = (term3699 A B C P s s' t _115316 clauses).
Proof. exact (MK_COMB (@lem8408298 C) (@lem8408297 A B C P s s' t _115316 clauses)). Qed.
Lemma lem8408300 {A B C P : Type'} (s : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3700 A B C P s t _115316 clauses) = (term3701 A B C P s t _115316 clauses).
Proof. exact (fun_ext (fun s' : type1475 A C P => @lem8408299 A B C P s s' t _115316 clauses)). Qed.
Lemma lem8408301 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8408302 {A B C P : Type'} (s : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3681 A B C P s t _115316 clauses) = (term3702 A B C P s t _115316 clauses).
Proof. exact (MK_COMB (@lem8408301 A C P) (@lem8408300 A B C P s t _115316 clauses)). Qed.
Lemma lem8408303 {A B C P : Type'} (s : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : ((term3680 A B C P s t _115316 clauses) = (term3681 A B C P s t _115316 clauses)) = ((term3676 A B C P s t _115316 clauses) = (term3702 A B C P s t _115316 clauses)).
Proof. exact (MK_COMB (@lem8408291 A B C P s t _115316 clauses) (@lem8408302 A B C P s t _115316 clauses)). Qed.
Lemma lem8408304 {A B C P : Type'} (s : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3676 A B C P s t _115316 clauses) = (term3702 A B C P s t _115316 clauses).
Proof. exact (EQ_MP (@lem8408303 A B C P s t _115316 clauses) (@lem8408278 A B C P s t _115316 clauses)). Qed.
Lemma lem8408306 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8408307 {B C P : Type'} (P' : type1451 B C P) : (term3200 B C P P') = (term3201 B C P P').
Proof. exact (@lem8408306 C (type1475 B C P) P'). Qed.
Lemma lem8408308 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3703 A B C P s s' t _115316 clauses) = (term3704 A B C P s s' t _115316 clauses).
Proof. exact (@lem8408307 B C P (term3705 A B C P s s' t _115316 clauses)). Qed.
Lemma lem8408309 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3706 A B C P s s' t _115316 clauses c) = (term3707 A B C P s s' t _115316 c clauses).
Proof. exact (eq_refl (term3706 A B C P s s' t _115316 clauses c)). Qed.
Lemma lem8408310 {B C P : Type'} (t' : type1475 B C P) : t' = t'.
Proof. exact (eq_refl t'). Qed.
Lemma lem8408311 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) (t' : type1475 B C P) : (term3708 A B C P s s' t _115316 clauses c t') = (term3709 A B C P s s' t _115316 c clauses t').
Proof. exact (MK_COMB (@lem8408309 A B C P s s' t _115316 c clauses) (@lem8408310 B C P t')). Qed.
Lemma lem8408312 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (t' : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3709 A B C P s s' t _115316 c clauses t') = (term3710 A B C P s s' t t' _115316 c clauses).
Proof. exact (eq_refl (term3709 A B C P s s' t _115316 c clauses t')). Qed.
Lemma lem8408313 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (t' : type1475 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3708 A B C P s s' t _115316 clauses c t') = (term3710 A B C P s s' t t' _115316 c clauses).
Proof. exact (TRANS (@lem8408311 A B C P s s' t _115316 c clauses t') (@lem8408312 A B C P s s' t t' _115316 c clauses)). Qed.
Lemma lem8408314 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3711 A B C P s s' t _115316 clauses c) = (term3707 A B C P s s' t _115316 c clauses).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8408313 A B C P s s' t t' _115316 c clauses)). Qed.
Lemma lem8408315 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8408316 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3712 A B C P s s' t _115316 clauses c) = (term3695 A B C P s s' t _115316 c clauses).
Proof. exact (MK_COMB (@lem8408315 B C P) (@lem8408314 A B C P s s' t _115316 c clauses)). Qed.
Lemma lem8408317 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3713 A B C P s s' t _115316 clauses) = (term3697 A B C P s s' t _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8408316 A B C P s s' t _115316 c clauses)). Qed.
Lemma lem8408318 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8408319 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3703 A B C P s s' t _115316 clauses) = (term3699 A B C P s s' t _115316 clauses).
Proof. exact (MK_COMB (@lem8408318 C) (@lem8408317 A B C P s s' t _115316 clauses)). Qed.
Lemma lem8408320 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408321 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3714 A B C P s s' t _115316 clauses) = (term3715 A B C P s s' t _115316 clauses).
Proof. exact (MK_COMB (@lem8408320) (@lem8408319 A B C P s s' t _115316 clauses)). Qed.
Lemma lem8408322 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3706 A B C P s s' t _115316 clauses c) = (term3707 A B C P s s' t _115316 c clauses).
Proof. exact (eq_refl (term3706 A B C P s s' t _115316 clauses c)). Qed.
Lemma lem8408323 {B C P : Type'} (t' : type1473 B C P) (c : C) : (t' c) = (t' c).
Proof. exact (eq_refl (t' c)). Qed.
Lemma lem8408324 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (t' : type1473 B C P) (c : C) : (term3716 A B C P s s' t _115316 clauses t' c) = (term3717 A B C P s s' t _115316 clauses t' c).
Proof. exact (MK_COMB (@lem8408322 A B C P s s' t _115316 c clauses) (@lem8408323 B C P t' c)). Qed.
Lemma lem8408325 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3717 A B C P s s' t _115316 clauses t' c) = (term3718 A B C P s s' t t' _115316 c clauses).
Proof. exact (eq_refl (term3717 A B C P s s' t _115316 clauses t' c)). Qed.
Lemma lem8408326 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3716 A B C P s s' t _115316 clauses t' c) = (term3718 A B C P s s' t t' _115316 c clauses).
Proof. exact (TRANS (@lem8408324 A B C P s s' t _115316 clauses t' c) (@lem8408325 A B C P s s' t t' _115316 c clauses)). Qed.
Lemma lem8408327 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3719 A B C P s s' t _115316 clauses t') = (term3720 A B C P s s' t t' _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8408326 A B C P s s' t t' _115316 c clauses)). Qed.
Lemma lem8408328 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8408329 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3721 A B C P s s' t _115316 clauses t') = (term3722 A B C P s s' t t' _115316 clauses).
Proof. exact (MK_COMB (@lem8408328 C) (@lem8408327 A B C P s s' t t' _115316 clauses)). Qed.
Lemma lem8408330 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3723 A B C P s s' t _115316 clauses) = (term3724 A B C P s s' t _115316 clauses).
Proof. exact (fun_ext (fun t' : type1473 B C P => @lem8408329 A B C P s s' t t' _115316 clauses)). Qed.
Lemma lem8408331 {B C P : Type'} : (@ex (C -> C -> P -> B)) = (@ex (C -> C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> C -> P -> B))). Qed.
Lemma lem8408332 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3704 A B C P s s' t _115316 clauses) = (term3725 A B C P s s' t _115316 clauses).
Proof. exact (MK_COMB (@lem8408331 B C P) (@lem8408330 A B C P s s' t _115316 clauses)). Qed.
Lemma lem8408333 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : ((term3703 A B C P s s' t _115316 clauses) = (term3704 A B C P s s' t _115316 clauses)) = ((term3699 A B C P s s' t _115316 clauses) = (term3725 A B C P s s' t _115316 clauses)).
Proof. exact (MK_COMB (@lem8408321 A B C P s s' t _115316 clauses) (@lem8408332 A B C P s s' t _115316 clauses)). Qed.
Lemma lem8408334 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3699 A B C P s s' t _115316 clauses) = (term3725 A B C P s s' t _115316 clauses).
Proof. exact (EQ_MP (@lem8408333 A B C P s s' t _115316 clauses) (@lem8408308 A B C P s s' t _115316 clauses)). Qed.
Lemma lem8408336 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8408337 {C P : Type'} (P' : type1413 C P) : (term1174 C P P') = (term1175 C P P').
Proof. exact (@lem8408336 C P P'). Qed.
Lemma lem8408338 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3726 A B C P s s' t t' _115316 clauses) = (term3727 A B C P s s' t t' _115316 clauses).
Proof. exact (@lem8408337 C P (term3728 A B C P s s' t t' _115316 clauses)). Qed.
Lemma lem8408339 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3729 A B C P s s' t t' _115316 clauses c) = (term3730 A B C P s s' t t' _115316 c clauses).
Proof. exact (eq_refl (term3729 A B C P s s' t t' _115316 clauses c)). Qed.
Lemma lem8408340 {P : Type'} (x : P) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8408341 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) (x : P) : (term3731 A B C P s s' t t' _115316 clauses c x) = (term3732 A B C P s s' t t' _115316 c clauses x).
Proof. exact (MK_COMB (@lem8408339 A B C P s s' t t' _115316 c clauses) (@lem8408340 P x)). Qed.
Lemma lem8408342 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3732 A B C P s s' t t' _115316 c clauses x) = (term3733 A B C P s s' t x t' _115316 c clauses).
Proof. exact (eq_refl (term3732 A B C P s s' t t' _115316 c clauses x)). Qed.
Lemma lem8408343 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3731 A B C P s s' t t' _115316 clauses c x) = (term3733 A B C P s s' t x t' _115316 c clauses).
Proof. exact (TRANS (@lem8408341 A B C P s s' t t' _115316 c clauses x) (@lem8408342 A B C P s s' t x t' _115316 c clauses)). Qed.
Lemma lem8408344 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3734 A B C P s s' t t' _115316 clauses c) = (term3730 A B C P s s' t t' _115316 c clauses).
Proof. exact (fun_ext (fun x : P => @lem8408343 A B C P s s' t x t' _115316 c clauses)). Qed.
Lemma lem8408345 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8408346 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3735 A B C P s s' t t' _115316 clauses c) = (term3718 A B C P s s' t t' _115316 c clauses).
Proof. exact (MK_COMB (@lem8408345 P) (@lem8408344 A B C P s s' t t' _115316 c clauses)). Qed.
Lemma lem8408347 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3736 A B C P s s' t t' _115316 clauses) = (term3720 A B C P s s' t t' _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8408346 A B C P s s' t t' _115316 c clauses)). Qed.
Lemma lem8408348 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8408349 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3726 A B C P s s' t t' _115316 clauses) = (term3722 A B C P s s' t t' _115316 clauses).
Proof. exact (MK_COMB (@lem8408348 C) (@lem8408347 A B C P s s' t t' _115316 clauses)). Qed.
Lemma lem8408350 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408351 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3737 A B C P s s' t t' _115316 clauses) = (term3738 A B C P s s' t t' _115316 clauses).
Proof. exact (MK_COMB (@lem8408350) (@lem8408349 A B C P s s' t t' _115316 clauses)). Qed.
Lemma lem8408352 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3729 A B C P s s' t t' _115316 clauses c) = (term3730 A B C P s s' t t' _115316 c clauses).
Proof. exact (eq_refl (term3729 A B C P s s' t t' _115316 clauses c)). Qed.
Lemma lem8408353 {C P : Type'} (x : C -> P) (c : C) : (x c) = (x c).
Proof. exact (eq_refl (x c)). Qed.
Lemma lem8408354 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (x : C -> P) (c : C) : (term3739 A B C P s s' t t' _115316 clauses x c) = (term3740 A B C P s s' t t' _115316 clauses x c).
Proof. exact (MK_COMB (@lem8408352 A B C P s s' t t' _115316 c clauses) (@lem8408353 C P x c)). Qed.
Lemma lem8408355 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3740 A B C P s s' t t' _115316 clauses x c) = (term3741 A B C P s s' t x t' _115316 c clauses).
Proof. exact (eq_refl (term3740 A B C P s s' t t' _115316 clauses x c)). Qed.
Lemma lem8408356 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3739 A B C P s s' t t' _115316 clauses x c) = (term3741 A B C P s s' t x t' _115316 c clauses).
Proof. exact (TRANS (@lem8408354 A B C P s s' t t' _115316 clauses x c) (@lem8408355 A B C P s s' t x t' _115316 c clauses)). Qed.
Lemma lem8408357 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3742 A B C P s s' t t' _115316 clauses x) = (term3743 A B C P s s' t x t' _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8408356 A B C P s s' t x t' _115316 c clauses)). Qed.
Lemma lem8408358 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8408359 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3744 A B C P s s' t t' _115316 clauses x) = (term3745 A B C P s s' t x t' _115316 clauses).
Proof. exact (MK_COMB (@lem8408358 C) (@lem8408357 A B C P s s' t x t' _115316 clauses)). Qed.
Lemma lem8408360 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3746 A B C P s s' t t' _115316 clauses) = (term3747 A B C P s s' t t' _115316 clauses).
Proof. exact (fun_ext (fun x : C -> P => @lem8408359 A B C P s s' t x t' _115316 clauses)). Qed.
Lemma lem8408361 {C P : Type'} : (@ex (C -> P)) = (@ex (C -> P)).
Proof. exact (eq_refl (@ex (C -> P))). Qed.
Lemma lem8408362 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3727 A B C P s s' t t' _115316 clauses) = (term3748 A B C P s s' t t' _115316 clauses).
Proof. exact (MK_COMB (@lem8408361 C P) (@lem8408360 A B C P s s' t t' _115316 clauses)). Qed.
Lemma lem8408363 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : ((term3726 A B C P s s' t t' _115316 clauses) = (term3727 A B C P s s' t t' _115316 clauses)) = ((term3722 A B C P s s' t t' _115316 clauses) = (term3748 A B C P s s' t t' _115316 clauses)).
Proof. exact (MK_COMB (@lem8408351 A B C P s s' t t' _115316 clauses) (@lem8408362 A B C P s s' t t' _115316 clauses)). Qed.
Lemma lem8408364 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3722 A B C P s s' t t' _115316 clauses) = (term3748 A B C P s s' t t' _115316 clauses).
Proof. exact (EQ_MP (@lem8408363 A B C P s s' t t' _115316 clauses) (@lem8408338 A B C P s s' t t' _115316 clauses)). Qed.
Lemma lem8408366 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8408367 {C P : Type'} (P' : type1413 C P) : (term1174 C P P') = (term1175 C P P').
Proof. exact (@lem8408366 C P P'). Qed.
Lemma lem8408368 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3749 A B C P s s' t x t' _115316 clauses) = (term3750 A B C P s s' t x t' _115316 clauses).
Proof. exact (@lem8408367 C P (term3751 A B C P s s' t x t' _115316 clauses)). Qed.
Lemma lem8408369 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3752 A B C P s s' t x t' _115316 clauses c) = (term3753 A B C P s s' t x t' _115316 c clauses).
Proof. exact (eq_refl (term3752 A B C P s s' t x t' _115316 clauses c)). Qed.
Lemma lem8408370 {P : Type'} (y : P) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem8408371 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) (y : P) : (term3754 A B C P s s' t x t' _115316 clauses c y) = (term3755 A B C P s s' t x t' _115316 c clauses y).
Proof. exact (MK_COMB (@lem8408369 A B C P s s' t x t' _115316 c clauses) (@lem8408370 P y)). Qed.
Lemma lem8408372 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (y : P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3755 A B C P s s' t x t' _115316 c clauses y) = (term3756 A B C P s s' t x t' y _115316 c clauses).
Proof. exact (eq_refl (term3755 A B C P s s' t x t' _115316 c clauses y)). Qed.
Lemma lem8408373 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (y : P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3754 A B C P s s' t x t' _115316 clauses c y) = (term3756 A B C P s s' t x t' y _115316 c clauses).
Proof. exact (TRANS (@lem8408371 A B C P s s' t x t' _115316 c clauses y) (@lem8408372 A B C P s s' t x t' y _115316 c clauses)). Qed.
Lemma lem8408374 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3757 A B C P s s' t x t' _115316 clauses c) = (term3753 A B C P s s' t x t' _115316 c clauses).
Proof. exact (fun_ext (fun y : P => @lem8408373 A B C P s s' t x t' y _115316 c clauses)). Qed.
Lemma lem8408375 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8408376 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3758 A B C P s s' t x t' _115316 clauses c) = (term3741 A B C P s s' t x t' _115316 c clauses).
Proof. exact (MK_COMB (@lem8408375 P) (@lem8408374 A B C P s s' t x t' _115316 c clauses)). Qed.
Lemma lem8408377 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3759 A B C P s s' t x t' _115316 clauses) = (term3743 A B C P s s' t x t' _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8408376 A B C P s s' t x t' _115316 c clauses)). Qed.
Lemma lem8408378 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8408379 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3749 A B C P s s' t x t' _115316 clauses) = (term3745 A B C P s s' t x t' _115316 clauses).
Proof. exact (MK_COMB (@lem8408378 C) (@lem8408377 A B C P s s' t x t' _115316 clauses)). Qed.
Lemma lem8408380 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408381 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3760 A B C P s s' t x t' _115316 clauses) = (term3761 A B C P s s' t x t' _115316 clauses).
Proof. exact (MK_COMB (@lem8408380) (@lem8408379 A B C P s s' t x t' _115316 clauses)). Qed.
Lemma lem8408382 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3752 A B C P s s' t x t' _115316 clauses c) = (term3753 A B C P s s' t x t' _115316 c clauses).
Proof. exact (eq_refl (term3752 A B C P s s' t x t' _115316 clauses c)). Qed.
Lemma lem8408383 {C P : Type'} (y : C -> P) (c : C) : (y c) = (y c).
Proof. exact (eq_refl (y c)). Qed.
Lemma lem8408384 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (y : C -> P) (c : C) : (term3762 A B C P s s' t x t' _115316 clauses y c) = (term3763 A B C P s s' t x t' _115316 clauses y c).
Proof. exact (MK_COMB (@lem8408382 A B C P s s' t x t' _115316 c clauses) (@lem8408383 C P y c)). Qed.
Lemma lem8408385 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (y : C -> P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3763 A B C P s s' t x t' _115316 clauses y c) = (term3764 A B C P s s' t x t' y _115316 c clauses).
Proof. exact (eq_refl (term3763 A B C P s s' t x t' _115316 clauses y c)). Qed.
Lemma lem8408386 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (y : C -> P) (_115316 : type1115 A B C P) (c : C) (clauses : type1638 A B C P) : (term3762 A B C P s s' t x t' _115316 clauses y c) = (term3764 A B C P s s' t x t' y _115316 c clauses).
Proof. exact (TRANS (@lem8408384 A B C P s s' t x t' _115316 clauses y c) (@lem8408385 A B C P s s' t x t' y _115316 c clauses)). Qed.
Lemma lem8408387 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (y : C -> P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3765 A B C P s s' t x t' _115316 clauses y) = (term3766 A B C P s s' t x t' y _115316 clauses).
Proof. exact (fun_ext (fun c : C => @lem8408386 A B C P s s' t x t' y _115316 c clauses)). Qed.
Lemma lem8408388 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8408389 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (y : C -> P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3767 A B C P s s' t x t' _115316 clauses y) = (term3768 A B C P s s' t x t' y _115316 clauses).
Proof. exact (MK_COMB (@lem8408388 C) (@lem8408387 A B C P s s' t x t' y _115316 clauses)). Qed.
Lemma lem8408390 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3769 A B C P s s' t x t' _115316 clauses) = (term3770 A B C P s s' t x t' _115316 clauses).
Proof. exact (fun_ext (fun y : C -> P => @lem8408389 A B C P s s' t x t' y _115316 clauses)). Qed.
Lemma lem8408391 {C P : Type'} : (@ex (C -> P)) = (@ex (C -> P)).
Proof. exact (eq_refl (@ex (C -> P))). Qed.
Lemma lem8408392 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3750 A B C P s s' t x t' _115316 clauses) = (term3771 A B C P s s' t x t' _115316 clauses).
Proof. exact (MK_COMB (@lem8408391 C P) (@lem8408390 A B C P s s' t x t' _115316 clauses)). Qed.
Lemma lem8408393 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : ((term3749 A B C P s s' t x t' _115316 clauses) = (term3750 A B C P s s' t x t' _115316 clauses)) = ((term3745 A B C P s s' t x t' _115316 clauses) = (term3771 A B C P s s' t x t' _115316 clauses)).
Proof. exact (MK_COMB (@lem8408381 A B C P s s' t x t' _115316 clauses) (@lem8408392 A B C P s s' t x t' _115316 clauses)). Qed.
Lemma lem8408394 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3745 A B C P s s' t x t' _115316 clauses) = (term3771 A B C P s s' t x t' _115316 clauses).
Proof. exact (EQ_MP (@lem8408393 A B C P s s' t x t' _115316 clauses) (@lem8408368 A B C P s s' t x t' _115316 clauses)). Qed.
Lemma lem8408395 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3747 A B C P s s' t t' _115316 clauses) = (term3772 A B C P s s' t t' _115316 clauses).
Proof. exact (fun_ext (fun x : C -> P => @lem8408394 A B C P s s' t x t' _115316 clauses)). Qed.
Lemma lem8408396 {C P : Type'} : (@ex (C -> P)) = (@ex (C -> P)).
Proof. exact (eq_refl (@ex (C -> P))). Qed.
Lemma lem8408397 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3748 A B C P s s' t t' _115316 clauses) = (term3773 A B C P s s' t t' _115316 clauses).
Proof. exact (MK_COMB (@lem8408396 C P) (@lem8408395 A B C P s s' t t' _115316 clauses)). Qed.
Lemma lem8408398 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3722 A B C P s s' t t' _115316 clauses) = (term3773 A B C P s s' t t' _115316 clauses).
Proof. exact (TRANS (@lem8408364 A B C P s s' t t' _115316 clauses) (@lem8408397 A B C P s s' t t' _115316 clauses)). Qed.
Lemma lem8408399 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3724 A B C P s s' t _115316 clauses) = (term3774 A B C P s s' t _115316 clauses).
Proof. exact (fun_ext (fun t' : type1473 B C P => @lem8408398 A B C P s s' t t' _115316 clauses)). Qed.
Lemma lem8408400 {B C P : Type'} : (@ex (C -> C -> P -> B)) = (@ex (C -> C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> C -> P -> B))). Qed.
Lemma lem8408401 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3725 A B C P s s' t _115316 clauses) = (term3775 A B C P s s' t _115316 clauses).
Proof. exact (MK_COMB (@lem8408400 B C P) (@lem8408399 A B C P s s' t _115316 clauses)). Qed.
Lemma lem8408402 {A B C P : Type'} (s : type1475 A C P) (s' : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3699 A B C P s s' t _115316 clauses) = (term3775 A B C P s s' t _115316 clauses).
Proof. exact (TRANS (@lem8408334 A B C P s s' t _115316 clauses) (@lem8408401 A B C P s s' t _115316 clauses)). Qed.
Lemma lem8408403 {A B C P : Type'} (s : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3701 A B C P s t _115316 clauses) = (term3776 A B C P s t _115316 clauses).
Proof. exact (fun_ext (fun s' : type1475 A C P => @lem8408402 A B C P s s' t _115316 clauses)). Qed.
Lemma lem8408404 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8408405 {A B C P : Type'} (s : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3702 A B C P s t _115316 clauses) = (term3777 A B C P s t _115316 clauses).
Proof. exact (MK_COMB (@lem8408404 A C P) (@lem8408403 A B C P s t _115316 clauses)). Qed.
Lemma lem8408406 {A B C P : Type'} (s : type1475 A C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3676 A B C P s t _115316 clauses) = (term3777 A B C P s t _115316 clauses).
Proof. exact (TRANS (@lem8408304 A B C P s t _115316 clauses) (@lem8408405 A B C P s t _115316 clauses)). Qed.
Lemma lem8408407 {A B C P : Type'} (s : type1475 A C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3678 A B C P s _115316 clauses) = (term3778 A B C P s _115316 clauses).
Proof. exact (fun_ext (fun t : type1473 B C P => @lem8408406 A B C P s t _115316 clauses)). Qed.
Lemma lem8408408 {B C P : Type'} : (@ex (C -> C -> P -> B)) = (@ex (C -> C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> C -> P -> B))). Qed.
Lemma lem8408409 {A B C P : Type'} (s : type1475 A C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3679 A B C P s _115316 clauses) = (term3779 A B C P s _115316 clauses).
Proof. exact (MK_COMB (@lem8408408 B C P) (@lem8408407 A B C P s _115316 clauses)). Qed.
Lemma lem8408410 {A B C P : Type'} (s : type1475 A C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3653 A B C P s _115316 clauses) = (term3779 A B C P s _115316 clauses).
Proof. exact (TRANS (@lem8408274 A B C P s _115316 clauses) (@lem8408409 A B C P s _115316 clauses)). Qed.
Lemma lem8408411 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3655 A B C P _115316 clauses) = (term3780 A B C P _115316 clauses).
Proof. exact (fun_ext (fun s : type1475 A C P => @lem8408410 A B C P s _115316 clauses)). Qed.
Lemma lem8408412 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8408413 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3656 A B C P _115316 clauses) = (term3781 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8408412 A C P) (@lem8408411 A B C P _115316 clauses)). Qed.
Lemma lem8408414 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3635 A B C P _115316 clauses) = (term3781 A B C P _115316 clauses).
Proof. exact (TRANS (@lem8408244 A B C P _115316 clauses) (@lem8408413 A B C P _115316 clauses)). Qed.
Lemma lem8408415 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3531 A B C P _115316 clauses) = (term3781 A B C P _115316 clauses).
Proof. exact (TRANS (@lem8408214 A B C P _115316 clauses) (@lem8408414 A B C P _115316 clauses)). Qed.
Lemma lem8408416 {A B C P : Type'} (_115316 : type1115 A B C P) : (term3532 A B C P _115316) = (term3782 A B C P _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8408415 A B C P _115316 clauses)). Qed.
Lemma lem8408417 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8408418 {A B C P : Type'} (_115316 : type1115 A B C P) : (term3533 A B C P _115316) = (term3783 A B C P _115316).
Proof. exact (MK_COMB (@lem8408417 A B C P) (@lem8408416 A B C P _115316)). Qed.
Lemma lem8408420 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8408421 {A B C P : Type'} (P' : type1111 A B C P) : (term3784 A B C P P') = (term3785 A B C P P').
Proof. exact (@lem8408420 (type1638 A B C P) (type1475 A C P) P'). Qed.
Lemma lem8408422 {A B C P : Type'} (_115316 : type1115 A B C P) : (term3786 A B C P _115316) = (term3787 A B C P _115316).
Proof. exact (@lem8408421 A B C P (term3788 A B C P _115316)). Qed.
Lemma lem8408423 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3789 A B C P _115316 clauses) = (term3780 A B C P _115316 clauses).
Proof. exact (eq_refl (term3789 A B C P _115316 clauses)). Qed.
Lemma lem8408424 {A C P : Type'} (s : type1475 A C P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8408425 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s : type1475 A C P) : (term3790 A B C P _115316 clauses s) = (term3791 A B C P _115316 clauses s).
Proof. exact (MK_COMB (@lem8408423 A B C P _115316 clauses) (@lem8408424 A C P s)). Qed.
Lemma lem8408426 {A B C P : Type'} (s : type1475 A C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3791 A B C P _115316 clauses s) = (term3779 A B C P s _115316 clauses).
Proof. exact (eq_refl (term3791 A B C P _115316 clauses s)). Qed.
Lemma lem8408427 {A B C P : Type'} (s : type1475 A C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3790 A B C P _115316 clauses s) = (term3779 A B C P s _115316 clauses).
Proof. exact (TRANS (@lem8408425 A B C P _115316 clauses s) (@lem8408426 A B C P s _115316 clauses)). Qed.
Lemma lem8408428 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3792 A B C P _115316 clauses) = (term3780 A B C P _115316 clauses).
Proof. exact (fun_ext (fun s : type1475 A C P => @lem8408427 A B C P s _115316 clauses)). Qed.
Lemma lem8408429 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8408430 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3793 A B C P _115316 clauses) = (term3781 A B C P _115316 clauses).
Proof. exact (MK_COMB (@lem8408429 A C P) (@lem8408428 A B C P _115316 clauses)). Qed.
Lemma lem8408431 {A B C P : Type'} (_115316 : type1115 A B C P) : (term3794 A B C P _115316) = (term3782 A B C P _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8408430 A B C P _115316 clauses)). Qed.
Lemma lem8408432 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8408433 {A B C P : Type'} (_115316 : type1115 A B C P) : (term3786 A B C P _115316) = (term3783 A B C P _115316).
Proof. exact (MK_COMB (@lem8408432 A B C P) (@lem8408431 A B C P _115316)). Qed.
Lemma lem8408434 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408435 {A B C P : Type'} (_115316 : type1115 A B C P) : (term3795 A B C P _115316) = (term3796 A B C P _115316).
Proof. exact (MK_COMB (@lem8408434) (@lem8408433 A B C P _115316)). Qed.
Lemma lem8408436 {A B C P : Type'} (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3789 A B C P _115316 clauses) = (term3780 A B C P _115316 clauses).
Proof. exact (eq_refl (term3789 A B C P _115316 clauses)). Qed.
Lemma lem8408437 {A B C P : Type'} (s : type1121 A B C P) (clauses : type1638 A B C P) : (s clauses) = (s clauses).
Proof. exact (eq_refl (s clauses)). Qed.
Lemma lem8408438 {A B C P : Type'} (_115316 : type1115 A B C P) (s : type1121 A B C P) (clauses : type1638 A B C P) : (term3797 A B C P _115316 s clauses) = (term3798 A B C P _115316 s clauses).
Proof. exact (MK_COMB (@lem8408436 A B C P _115316 clauses) (@lem8408437 A B C P s clauses)). Qed.
Lemma lem8408439 {A B C P : Type'} (s : type1121 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3798 A B C P _115316 s clauses) = (term3799 A B C P s _115316 clauses).
Proof. exact (eq_refl (term3798 A B C P _115316 s clauses)). Qed.
Lemma lem8408440 {A B C P : Type'} (s : type1121 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3797 A B C P _115316 s clauses) = (term3799 A B C P s _115316 clauses).
Proof. exact (TRANS (@lem8408438 A B C P _115316 s clauses) (@lem8408439 A B C P s _115316 clauses)). Qed.
Lemma lem8408441 {A B C P : Type'} (s : type1121 A B C P) (_115316 : type1115 A B C P) : (term3800 A B C P _115316 s) = (term3801 A B C P s _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8408440 A B C P s _115316 clauses)). Qed.
Lemma lem8408442 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8408443 {A B C P : Type'} (s : type1121 A B C P) (_115316 : type1115 A B C P) : (term3802 A B C P _115316 s) = (term3803 A B C P s _115316).
Proof. exact (MK_COMB (@lem8408442 A B C P) (@lem8408441 A B C P s _115316)). Qed.
Lemma lem8408444 {A B C P : Type'} (_115316 : type1115 A B C P) : (term3804 A B C P _115316) = (term3805 A B C P _115316).
Proof. exact (fun_ext (fun s : type1121 A B C P => @lem8408443 A B C P s _115316)). Qed.
Lemma lem8408445 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> P -> A))). Qed.
Lemma lem8408446 {A B C P : Type'} (_115316 : type1115 A B C P) : (term3787 A B C P _115316) = (term3806 A B C P _115316).
Proof. exact (MK_COMB (@lem8408445 A B C P) (@lem8408444 A B C P _115316)). Qed.
Lemma lem8408447 {A B C P : Type'} (_115316 : type1115 A B C P) : ((term3786 A B C P _115316) = (term3787 A B C P _115316)) = ((term3783 A B C P _115316) = (term3806 A B C P _115316)).
Proof. exact (MK_COMB (@lem8408435 A B C P _115316) (@lem8408446 A B C P _115316)). Qed.
Lemma lem8408448 {A B C P : Type'} (_115316 : type1115 A B C P) : (term3783 A B C P _115316) = (term3806 A B C P _115316).
Proof. exact (EQ_MP (@lem8408447 A B C P _115316) (@lem8408422 A B C P _115316)). Qed.
Lemma lem8408450 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8408451 {A B C P : Type'} (P' : type1110 A B C P) : (term3807 A B C P P') = (term3808 A B C P P').
Proof. exact (@lem8408450 (type1638 A B C P) (type1473 B C P) P'). Qed.
Lemma lem8408452 {A B C P : Type'} (s : type1121 A B C P) (_115316 : type1115 A B C P) : (term3809 A B C P s _115316) = (term3810 A B C P s _115316).
Proof. exact (@lem8408451 A B C P (term3811 A B C P s _115316)). Qed.
Lemma lem8408453 {A B C P : Type'} (s : type1121 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3812 A B C P s _115316 clauses) = (term3813 A B C P s _115316 clauses).
Proof. exact (eq_refl (term3812 A B C P s _115316 clauses)). Qed.
Lemma lem8408454 {B C P : Type'} (t : type1473 B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8408455 {A B C P : Type'} (s : type1121 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (t : type1473 B C P) : (term3814 A B C P s _115316 clauses t) = (term3815 A B C P s _115316 clauses t).
Proof. exact (MK_COMB (@lem8408453 A B C P s _115316 clauses) (@lem8408454 B C P t)). Qed.
Lemma lem8408456 {A B C P : Type'} (s : type1121 A B C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3815 A B C P s _115316 clauses t) = (term3816 A B C P s t _115316 clauses).
Proof. exact (eq_refl (term3815 A B C P s _115316 clauses t)). Qed.
Lemma lem8408457 {A B C P : Type'} (s : type1121 A B C P) (t : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3814 A B C P s _115316 clauses t) = (term3816 A B C P s t _115316 clauses).
Proof. exact (TRANS (@lem8408455 A B C P s _115316 clauses t) (@lem8408456 A B C P s t _115316 clauses)). Qed.
Lemma lem8408458 {A B C P : Type'} (s : type1121 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3817 A B C P s _115316 clauses) = (term3813 A B C P s _115316 clauses).
Proof. exact (fun_ext (fun t : type1473 B C P => @lem8408457 A B C P s t _115316 clauses)). Qed.
Lemma lem8408459 {B C P : Type'} : (@ex (C -> C -> P -> B)) = (@ex (C -> C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> C -> P -> B))). Qed.
Lemma lem8408460 {A B C P : Type'} (s : type1121 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3818 A B C P s _115316 clauses) = (term3799 A B C P s _115316 clauses).
Proof. exact (MK_COMB (@lem8408459 B C P) (@lem8408458 A B C P s _115316 clauses)). Qed.
Lemma lem8408461 {A B C P : Type'} (s : type1121 A B C P) (_115316 : type1115 A B C P) : (term3819 A B C P s _115316) = (term3801 A B C P s _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8408460 A B C P s _115316 clauses)). Qed.
Lemma lem8408462 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8408463 {A B C P : Type'} (s : type1121 A B C P) (_115316 : type1115 A B C P) : (term3809 A B C P s _115316) = (term3803 A B C P s _115316).
Proof. exact (MK_COMB (@lem8408462 A B C P) (@lem8408461 A B C P s _115316)). Qed.
Lemma lem8408464 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408465 {A B C P : Type'} (s : type1121 A B C P) (_115316 : type1115 A B C P) : (term3820 A B C P s _115316) = (term3821 A B C P s _115316).
Proof. exact (MK_COMB (@lem8408464) (@lem8408463 A B C P s _115316)). Qed.
Lemma lem8408466 {A B C P : Type'} (s : type1121 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3812 A B C P s _115316 clauses) = (term3813 A B C P s _115316 clauses).
Proof. exact (eq_refl (term3812 A B C P s _115316 clauses)). Qed.
Lemma lem8408467 {A B C P : Type'} (t : type1120 A B C P) (clauses : type1638 A B C P) : (t clauses) = (t clauses).
Proof. exact (eq_refl (t clauses)). Qed.
Lemma lem8408468 {A B C P : Type'} (s : type1121 A B C P) (_115316 : type1115 A B C P) (t : type1120 A B C P) (clauses : type1638 A B C P) : (term3822 A B C P s _115316 t clauses) = (term3823 A B C P s _115316 t clauses).
Proof. exact (MK_COMB (@lem8408466 A B C P s _115316 clauses) (@lem8408467 A B C P t clauses)). Qed.
Lemma lem8408469 {A B C P : Type'} (s : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3823 A B C P s _115316 t clauses) = (term3824 A B C P s t _115316 clauses).
Proof. exact (eq_refl (term3823 A B C P s _115316 t clauses)). Qed.
Lemma lem8408470 {A B C P : Type'} (s : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3822 A B C P s _115316 t clauses) = (term3824 A B C P s t _115316 clauses).
Proof. exact (TRANS (@lem8408468 A B C P s _115316 t clauses) (@lem8408469 A B C P s t _115316 clauses)). Qed.
Lemma lem8408471 {A B C P : Type'} (s : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3825 A B C P s _115316 t) = (term3826 A B C P s t _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8408470 A B C P s t _115316 clauses)). Qed.
Lemma lem8408472 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8408473 {A B C P : Type'} (s : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3827 A B C P s _115316 t) = (term3828 A B C P s t _115316).
Proof. exact (MK_COMB (@lem8408472 A B C P) (@lem8408471 A B C P s t _115316)). Qed.
Lemma lem8408474 {A B C P : Type'} (s : type1121 A B C P) (_115316 : type1115 A B C P) : (term3829 A B C P s _115316) = (term3830 A B C P s _115316).
Proof. exact (fun_ext (fun t : type1120 A B C P => @lem8408473 A B C P s t _115316)). Qed.
Lemma lem8408475 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> C -> P -> B)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> C -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> C -> P -> B))). Qed.
Lemma lem8408476 {A B C P : Type'} (s : type1121 A B C P) (_115316 : type1115 A B C P) : (term3810 A B C P s _115316) = (term3831 A B C P s _115316).
Proof. exact (MK_COMB (@lem8408475 A B C P) (@lem8408474 A B C P s _115316)). Qed.
Lemma lem8408477 {A B C P : Type'} (s : type1121 A B C P) (_115316 : type1115 A B C P) : ((term3809 A B C P s _115316) = (term3810 A B C P s _115316)) = ((term3803 A B C P s _115316) = (term3831 A B C P s _115316)).
Proof. exact (MK_COMB (@lem8408465 A B C P s _115316) (@lem8408476 A B C P s _115316)). Qed.
Lemma lem8408478 {A B C P : Type'} (s : type1121 A B C P) (_115316 : type1115 A B C P) : (term3803 A B C P s _115316) = (term3831 A B C P s _115316).
Proof. exact (EQ_MP (@lem8408477 A B C P s _115316) (@lem8408452 A B C P s _115316)). Qed.
Lemma lem8408480 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8408481 {A B C P : Type'} (P' : type1111 A B C P) : (term3784 A B C P P') = (term3785 A B C P P').
Proof. exact (@lem8408480 (type1638 A B C P) (type1475 A C P) P'). Qed.
Lemma lem8408482 {A B C P : Type'} (s : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3832 A B C P s t _115316) = (term3833 A B C P s t _115316).
Proof. exact (@lem8408481 A B C P (term3834 A B C P s t _115316)). Qed.
Lemma lem8408483 {A B C P : Type'} (s : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3835 A B C P s t _115316 clauses) = (term3836 A B C P s t _115316 clauses).
Proof. exact (eq_refl (term3835 A B C P s t _115316 clauses)). Qed.
Lemma lem8408484 {A C P : Type'} (s' : type1475 A C P) : s' = s'.
Proof. exact (eq_refl s'). Qed.
Lemma lem8408485 {A B C P : Type'} (s : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (s' : type1475 A C P) : (term3837 A B C P s t _115316 clauses s') = (term3838 A B C P s t _115316 clauses s').
Proof. exact (MK_COMB (@lem8408483 A B C P s t _115316 clauses) (@lem8408484 A C P s')). Qed.
Lemma lem8408486 {A B C P : Type'} (s : type1121 A B C P) (s' : type1475 A C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3838 A B C P s t _115316 clauses s') = (term3839 A B C P s s' t _115316 clauses).
Proof. exact (eq_refl (term3838 A B C P s t _115316 clauses s')). Qed.
Lemma lem8408487 {A B C P : Type'} (s : type1121 A B C P) (s' : type1475 A C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3837 A B C P s t _115316 clauses s') = (term3839 A B C P s s' t _115316 clauses).
Proof. exact (TRANS (@lem8408485 A B C P s t _115316 clauses s') (@lem8408486 A B C P s s' t _115316 clauses)). Qed.
Lemma lem8408488 {A B C P : Type'} (s : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3840 A B C P s t _115316 clauses) = (term3836 A B C P s t _115316 clauses).
Proof. exact (fun_ext (fun s' : type1475 A C P => @lem8408487 A B C P s s' t _115316 clauses)). Qed.
Lemma lem8408489 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8408490 {A B C P : Type'} (s : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3841 A B C P s t _115316 clauses) = (term3824 A B C P s t _115316 clauses).
Proof. exact (MK_COMB (@lem8408489 A C P) (@lem8408488 A B C P s t _115316 clauses)). Qed.
Lemma lem8408491 {A B C P : Type'} (s : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3842 A B C P s t _115316) = (term3826 A B C P s t _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8408490 A B C P s t _115316 clauses)). Qed.
Lemma lem8408492 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8408493 {A B C P : Type'} (s : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3832 A B C P s t _115316) = (term3828 A B C P s t _115316).
Proof. exact (MK_COMB (@lem8408492 A B C P) (@lem8408491 A B C P s t _115316)). Qed.
Lemma lem8408494 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408495 {A B C P : Type'} (s : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3843 A B C P s t _115316) = (term3844 A B C P s t _115316).
Proof. exact (MK_COMB (@lem8408494) (@lem8408493 A B C P s t _115316)). Qed.
Lemma lem8408496 {A B C P : Type'} (s : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3835 A B C P s t _115316 clauses) = (term3836 A B C P s t _115316 clauses).
Proof. exact (eq_refl (term3835 A B C P s t _115316 clauses)). Qed.
Lemma lem8408497 {A B C P : Type'} (s' : type1121 A B C P) (clauses : type1638 A B C P) : (s' clauses) = (s' clauses).
Proof. exact (eq_refl (s' clauses)). Qed.
Lemma lem8408498 {A B C P : Type'} (s : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) (s' : type1121 A B C P) (clauses : type1638 A B C P) : (term3845 A B C P s t _115316 s' clauses) = (term3846 A B C P s t _115316 s' clauses).
Proof. exact (MK_COMB (@lem8408496 A B C P s t _115316 clauses) (@lem8408497 A B C P s' clauses)). Qed.
Lemma lem8408499 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3846 A B C P s t _115316 s' clauses) = (term3847 A B C P s s' t _115316 clauses).
Proof. exact (eq_refl (term3846 A B C P s t _115316 s' clauses)). Qed.
Lemma lem8408500 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3845 A B C P s t _115316 s' clauses) = (term3847 A B C P s s' t _115316 clauses).
Proof. exact (TRANS (@lem8408498 A B C P s t _115316 s' clauses) (@lem8408499 A B C P s s' t _115316 clauses)). Qed.
Lemma lem8408501 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3848 A B C P s t _115316 s') = (term3849 A B C P s s' t _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8408500 A B C P s s' t _115316 clauses)). Qed.
Lemma lem8408502 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8408503 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3850 A B C P s t _115316 s') = (term3851 A B C P s s' t _115316).
Proof. exact (MK_COMB (@lem8408502 A B C P) (@lem8408501 A B C P s s' t _115316)). Qed.
Lemma lem8408504 {A B C P : Type'} (s : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3852 A B C P s t _115316) = (term3853 A B C P s t _115316).
Proof. exact (fun_ext (fun s' : type1121 A B C P => @lem8408503 A B C P s s' t _115316)). Qed.
Lemma lem8408505 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> P -> A))). Qed.
Lemma lem8408506 {A B C P : Type'} (s : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3833 A B C P s t _115316) = (term3854 A B C P s t _115316).
Proof. exact (MK_COMB (@lem8408505 A B C P) (@lem8408504 A B C P s t _115316)). Qed.
Lemma lem8408507 {A B C P : Type'} (s : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : ((term3832 A B C P s t _115316) = (term3833 A B C P s t _115316)) = ((term3828 A B C P s t _115316) = (term3854 A B C P s t _115316)).
Proof. exact (MK_COMB (@lem8408495 A B C P s t _115316) (@lem8408506 A B C P s t _115316)). Qed.
Lemma lem8408508 {A B C P : Type'} (s : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3828 A B C P s t _115316) = (term3854 A B C P s t _115316).
Proof. exact (EQ_MP (@lem8408507 A B C P s t _115316) (@lem8408482 A B C P s t _115316)). Qed.
Lemma lem8408510 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8408511 {A B C P : Type'} (P' : type1110 A B C P) : (term3807 A B C P P') = (term3808 A B C P P').
Proof. exact (@lem8408510 (type1638 A B C P) (type1473 B C P) P'). Qed.
Lemma lem8408512 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3855 A B C P s s' t _115316) = (term3856 A B C P s s' t _115316).
Proof. exact (@lem8408511 A B C P (term3857 A B C P s s' t _115316)). Qed.
Lemma lem8408513 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3858 A B C P s s' t _115316 clauses) = (term3859 A B C P s s' t _115316 clauses).
Proof. exact (eq_refl (term3858 A B C P s s' t _115316 clauses)). Qed.
Lemma lem8408514 {B C P : Type'} (t' : type1473 B C P) : t' = t'.
Proof. exact (eq_refl t'). Qed.
Lemma lem8408515 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (t' : type1473 B C P) : (term3860 A B C P s s' t _115316 clauses t') = (term3861 A B C P s s' t _115316 clauses t').
Proof. exact (MK_COMB (@lem8408513 A B C P s s' t _115316 clauses) (@lem8408514 B C P t')). Qed.
Lemma lem8408516 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3861 A B C P s s' t _115316 clauses t') = (term3862 A B C P s s' t t' _115316 clauses).
Proof. exact (eq_refl (term3861 A B C P s s' t _115316 clauses t')). Qed.
Lemma lem8408517 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (t' : type1473 B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3860 A B C P s s' t _115316 clauses t') = (term3862 A B C P s s' t t' _115316 clauses).
Proof. exact (TRANS (@lem8408515 A B C P s s' t _115316 clauses t') (@lem8408516 A B C P s s' t t' _115316 clauses)). Qed.
Lemma lem8408518 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3863 A B C P s s' t _115316 clauses) = (term3859 A B C P s s' t _115316 clauses).
Proof. exact (fun_ext (fun t' : type1473 B C P => @lem8408517 A B C P s s' t t' _115316 clauses)). Qed.
Lemma lem8408519 {B C P : Type'} : (@ex (C -> C -> P -> B)) = (@ex (C -> C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> C -> P -> B))). Qed.
Lemma lem8408520 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3864 A B C P s s' t _115316 clauses) = (term3847 A B C P s s' t _115316 clauses).
Proof. exact (MK_COMB (@lem8408519 B C P) (@lem8408518 A B C P s s' t _115316 clauses)). Qed.
Lemma lem8408521 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3865 A B C P s s' t _115316) = (term3849 A B C P s s' t _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8408520 A B C P s s' t _115316 clauses)). Qed.
Lemma lem8408522 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8408523 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3855 A B C P s s' t _115316) = (term3851 A B C P s s' t _115316).
Proof. exact (MK_COMB (@lem8408522 A B C P) (@lem8408521 A B C P s s' t _115316)). Qed.
Lemma lem8408524 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408525 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3866 A B C P s s' t _115316) = (term3867 A B C P s s' t _115316).
Proof. exact (MK_COMB (@lem8408524) (@lem8408523 A B C P s s' t _115316)). Qed.
Lemma lem8408526 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3858 A B C P s s' t _115316 clauses) = (term3859 A B C P s s' t _115316 clauses).
Proof. exact (eq_refl (term3858 A B C P s s' t _115316 clauses)). Qed.
Lemma lem8408527 {A B C P : Type'} (t' : type1120 A B C P) (clauses : type1638 A B C P) : (t' clauses) = (t' clauses).
Proof. exact (eq_refl (t' clauses)). Qed.
Lemma lem8408528 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) (t' : type1120 A B C P) (clauses : type1638 A B C P) : (term3868 A B C P s s' t _115316 t' clauses) = (term3869 A B C P s s' t _115316 t' clauses).
Proof. exact (MK_COMB (@lem8408526 A B C P s s' t _115316 clauses) (@lem8408527 A B C P t' clauses)). Qed.
Lemma lem8408529 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3869 A B C P s s' t _115316 t' clauses) = (term3870 A B C P s s' t t' _115316 clauses).
Proof. exact (eq_refl (term3869 A B C P s s' t _115316 t' clauses)). Qed.
Lemma lem8408530 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3868 A B C P s s' t _115316 t' clauses) = (term3870 A B C P s s' t t' _115316 clauses).
Proof. exact (TRANS (@lem8408528 A B C P s s' t _115316 t' clauses) (@lem8408529 A B C P s s' t t' _115316 clauses)). Qed.
Lemma lem8408531 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) : (term3871 A B C P s s' t _115316 t') = (term3872 A B C P s s' t t' _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8408530 A B C P s s' t t' _115316 clauses)). Qed.
Lemma lem8408532 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8408533 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) : (term3873 A B C P s s' t _115316 t') = (term3874 A B C P s s' t t' _115316).
Proof. exact (MK_COMB (@lem8408532 A B C P) (@lem8408531 A B C P s s' t t' _115316)). Qed.
Lemma lem8408534 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3875 A B C P s s' t _115316) = (term3876 A B C P s s' t _115316).
Proof. exact (fun_ext (fun t' : type1120 A B C P => @lem8408533 A B C P s s' t t' _115316)). Qed.
Lemma lem8408535 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> C -> P -> B)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> C -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> C -> P -> B))). Qed.
Lemma lem8408536 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3856 A B C P s s' t _115316) = (term3877 A B C P s s' t _115316).
Proof. exact (MK_COMB (@lem8408535 A B C P) (@lem8408534 A B C P s s' t _115316)). Qed.
Lemma lem8408537 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : ((term3855 A B C P s s' t _115316) = (term3856 A B C P s s' t _115316)) = ((term3851 A B C P s s' t _115316) = (term3877 A B C P s s' t _115316)).
Proof. exact (MK_COMB (@lem8408525 A B C P s s' t _115316) (@lem8408536 A B C P s s' t _115316)). Qed.
Lemma lem8408538 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3851 A B C P s s' t _115316) = (term3877 A B C P s s' t _115316).
Proof. exact (EQ_MP (@lem8408537 A B C P s s' t _115316) (@lem8408512 A B C P s s' t _115316)). Qed.
Lemma lem8408540 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8408541 {A B C P : Type'} (P' : type1112 A B C P) : (term3878 A B C P P') = (term3879 A B C P P').
Proof. exact (@lem8408540 (type1638 A B C P) (C -> P) P'). Qed.
Lemma lem8408542 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) : (term3880 A B C P s s' t t' _115316) = (term3881 A B C P s s' t t' _115316).
Proof. exact (@lem8408541 A B C P (term3882 A B C P s s' t t' _115316)). Qed.
Lemma lem8408543 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3883 A B C P s s' t t' _115316 clauses) = (term3884 A B C P s s' t t' _115316 clauses).
Proof. exact (eq_refl (term3883 A B C P s s' t t' _115316 clauses)). Qed.
Lemma lem8408544 {C P : Type'} (x : C -> P) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8408545 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (x : C -> P) : (term3885 A B C P s s' t t' _115316 clauses x) = (term3886 A B C P s s' t t' _115316 clauses x).
Proof. exact (MK_COMB (@lem8408543 A B C P s s' t t' _115316 clauses) (@lem8408544 C P x)). Qed.
Lemma lem8408546 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : C -> P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3886 A B C P s s' t t' _115316 clauses x) = (term3887 A B C P s s' t x t' _115316 clauses).
Proof. exact (eq_refl (term3886 A B C P s s' t t' _115316 clauses x)). Qed.
Lemma lem8408547 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : C -> P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3885 A B C P s s' t t' _115316 clauses x) = (term3887 A B C P s s' t x t' _115316 clauses).
Proof. exact (TRANS (@lem8408545 A B C P s s' t t' _115316 clauses x) (@lem8408546 A B C P s s' t x t' _115316 clauses)). Qed.
Lemma lem8408548 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3888 A B C P s s' t t' _115316 clauses) = (term3884 A B C P s s' t t' _115316 clauses).
Proof. exact (fun_ext (fun x : C -> P => @lem8408547 A B C P s s' t x t' _115316 clauses)). Qed.
Lemma lem8408549 {C P : Type'} : (@ex (C -> P)) = (@ex (C -> P)).
Proof. exact (eq_refl (@ex (C -> P))). Qed.
Lemma lem8408550 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3889 A B C P s s' t t' _115316 clauses) = (term3870 A B C P s s' t t' _115316 clauses).
Proof. exact (MK_COMB (@lem8408549 C P) (@lem8408548 A B C P s s' t t' _115316 clauses)). Qed.
Lemma lem8408551 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) : (term3890 A B C P s s' t t' _115316) = (term3872 A B C P s s' t t' _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8408550 A B C P s s' t t' _115316 clauses)). Qed.
Lemma lem8408552 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8408553 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) : (term3880 A B C P s s' t t' _115316) = (term3874 A B C P s s' t t' _115316).
Proof. exact (MK_COMB (@lem8408552 A B C P) (@lem8408551 A B C P s s' t t' _115316)). Qed.
Lemma lem8408554 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408555 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) : (term3891 A B C P s s' t t' _115316) = (term3892 A B C P s s' t t' _115316).
Proof. exact (MK_COMB (@lem8408554) (@lem8408553 A B C P s s' t t' _115316)). Qed.
Lemma lem8408556 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3883 A B C P s s' t t' _115316 clauses) = (term3884 A B C P s s' t t' _115316 clauses).
Proof. exact (eq_refl (term3883 A B C P s s' t t' _115316 clauses)). Qed.
Lemma lem8408557 {A B C P : Type'} (x : type1122 A B C P) (clauses : type1638 A B C P) : (x clauses) = (x clauses).
Proof. exact (eq_refl (x clauses)). Qed.
Lemma lem8408558 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) (x : type1122 A B C P) (clauses : type1638 A B C P) : (term3893 A B C P s s' t t' _115316 x clauses) = (term3894 A B C P s s' t t' _115316 x clauses).
Proof. exact (MK_COMB (@lem8408556 A B C P s s' t t' _115316 clauses) (@lem8408557 A B C P x clauses)). Qed.
Lemma lem8408559 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3894 A B C P s s' t t' _115316 x clauses) = (term3895 A B C P s s' t x t' _115316 clauses).
Proof. exact (eq_refl (term3894 A B C P s s' t t' _115316 x clauses)). Qed.
Lemma lem8408560 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3893 A B C P s s' t t' _115316 x clauses) = (term3895 A B C P s s' t x t' _115316 clauses).
Proof. exact (TRANS (@lem8408558 A B C P s s' t t' _115316 x clauses) (@lem8408559 A B C P s s' t x t' _115316 clauses)). Qed.
Lemma lem8408561 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) : (term3896 A B C P s s' t t' _115316 x) = (term3897 A B C P s s' t x t' _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8408560 A B C P s s' t x t' _115316 clauses)). Qed.
Lemma lem8408562 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8408563 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) : (term3898 A B C P s s' t t' _115316 x) = (term3899 A B C P s s' t x t' _115316).
Proof. exact (MK_COMB (@lem8408562 A B C P) (@lem8408561 A B C P s s' t x t' _115316)). Qed.
Lemma lem8408564 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) : (term3900 A B C P s s' t t' _115316) = (term3901 A B C P s s' t t' _115316).
Proof. exact (fun_ext (fun x : type1122 A B C P => @lem8408563 A B C P s s' t x t' _115316)). Qed.
Lemma lem8408565 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> P)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> P)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> P))). Qed.
Lemma lem8408566 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) : (term3881 A B C P s s' t t' _115316) = (term3902 A B C P s s' t t' _115316).
Proof. exact (MK_COMB (@lem8408565 A B C P) (@lem8408564 A B C P s s' t t' _115316)). Qed.
Lemma lem8408567 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) : ((term3880 A B C P s s' t t' _115316) = (term3881 A B C P s s' t t' _115316)) = ((term3874 A B C P s s' t t' _115316) = (term3902 A B C P s s' t t' _115316)).
Proof. exact (MK_COMB (@lem8408555 A B C P s s' t t' _115316) (@lem8408566 A B C P s s' t t' _115316)). Qed.
Lemma lem8408568 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) : (term3874 A B C P s s' t t' _115316) = (term3902 A B C P s s' t t' _115316).
Proof. exact (EQ_MP (@lem8408567 A B C P s s' t t' _115316) (@lem8408542 A B C P s s' t t' _115316)). Qed.
Lemma lem8408570 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8408571 {A B C P : Type'} (P' : type1112 A B C P) : (term3878 A B C P P') = (term3879 A B C P P').
Proof. exact (@lem8408570 (type1638 A B C P) (C -> P) P'). Qed.
Lemma lem8408572 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) : (term3903 A B C P s s' t x t' _115316) = (term3904 A B C P s s' t x t' _115316).
Proof. exact (@lem8408571 A B C P (term3905 A B C P s s' t x t' _115316)). Qed.
Lemma lem8408573 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3906 A B C P s s' t x t' _115316 clauses) = (term3907 A B C P s s' t x t' _115316 clauses).
Proof. exact (eq_refl (term3906 A B C P s s' t x t' _115316 clauses)). Qed.
Lemma lem8408574 {C P : Type'} (y : C -> P) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem8408575 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) (y : C -> P) : (term3908 A B C P s s' t x t' _115316 clauses y) = (term3909 A B C P s s' t x t' _115316 clauses y).
Proof. exact (MK_COMB (@lem8408573 A B C P s s' t x t' _115316 clauses) (@lem8408574 C P y)). Qed.
Lemma lem8408576 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (y : C -> P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3909 A B C P s s' t x t' _115316 clauses y) = (term3910 A B C P s s' t x t' y _115316 clauses).
Proof. exact (eq_refl (term3909 A B C P s s' t x t' _115316 clauses y)). Qed.
Lemma lem8408577 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (y : C -> P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3908 A B C P s s' t x t' _115316 clauses y) = (term3910 A B C P s s' t x t' y _115316 clauses).
Proof. exact (TRANS (@lem8408575 A B C P s s' t x t' _115316 clauses y) (@lem8408576 A B C P s s' t x t' y _115316 clauses)). Qed.
Lemma lem8408578 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3911 A B C P s s' t x t' _115316 clauses) = (term3907 A B C P s s' t x t' _115316 clauses).
Proof. exact (fun_ext (fun y : C -> P => @lem8408577 A B C P s s' t x t' y _115316 clauses)). Qed.
Lemma lem8408579 {C P : Type'} : (@ex (C -> P)) = (@ex (C -> P)).
Proof. exact (eq_refl (@ex (C -> P))). Qed.
Lemma lem8408580 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3912 A B C P s s' t x t' _115316 clauses) = (term3895 A B C P s s' t x t' _115316 clauses).
Proof. exact (MK_COMB (@lem8408579 C P) (@lem8408578 A B C P s s' t x t' _115316 clauses)). Qed.
Lemma lem8408581 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) : (term3913 A B C P s s' t x t' _115316) = (term3897 A B C P s s' t x t' _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8408580 A B C P s s' t x t' _115316 clauses)). Qed.
Lemma lem8408582 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8408583 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) : (term3903 A B C P s s' t x t' _115316) = (term3899 A B C P s s' t x t' _115316).
Proof. exact (MK_COMB (@lem8408582 A B C P) (@lem8408581 A B C P s s' t x t' _115316)). Qed.
Lemma lem8408584 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408585 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) : (term3914 A B C P s s' t x t' _115316) = (term3915 A B C P s s' t x t' _115316).
Proof. exact (MK_COMB (@lem8408584) (@lem8408583 A B C P s s' t x t' _115316)). Qed.
Lemma lem8408586 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3906 A B C P s s' t x t' _115316 clauses) = (term3907 A B C P s s' t x t' _115316 clauses).
Proof. exact (eq_refl (term3906 A B C P s s' t x t' _115316 clauses)). Qed.
Lemma lem8408587 {A B C P : Type'} (y : type1122 A B C P) (clauses : type1638 A B C P) : (y clauses) = (y clauses).
Proof. exact (eq_refl (y clauses)). Qed.
Lemma lem8408588 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) (y : type1122 A B C P) (clauses : type1638 A B C P) : (term3916 A B C P s s' t x t' _115316 y clauses) = (term3917 A B C P s s' t x t' _115316 y clauses).
Proof. exact (MK_COMB (@lem8408586 A B C P s s' t x t' _115316 clauses) (@lem8408587 A B C P y clauses)). Qed.
Lemma lem8408589 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (y : type1122 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3917 A B C P s s' t x t' _115316 y clauses) = (term3918 A B C P s s' t x t' y _115316 clauses).
Proof. exact (eq_refl (term3917 A B C P s s' t x t' _115316 y clauses)). Qed.
Lemma lem8408590 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (y : type1122 A B C P) (_115316 : type1115 A B C P) (clauses : type1638 A B C P) : (term3916 A B C P s s' t x t' _115316 y clauses) = (term3918 A B C P s s' t x t' y _115316 clauses).
Proof. exact (TRANS (@lem8408588 A B C P s s' t x t' _115316 y clauses) (@lem8408589 A B C P s s' t x t' y _115316 clauses)). Qed.
Lemma lem8408591 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (y : type1122 A B C P) (_115316 : type1115 A B C P) : (term3919 A B C P s s' t x t' _115316 y) = (term3920 A B C P s s' t x t' y _115316).
Proof. exact (fun_ext (fun clauses : type1638 A B C P => @lem8408590 A B C P s s' t x t' y _115316 clauses)). Qed.
Lemma lem8408592 {A B C P : Type'} : (@all (list (prod (P -> A) (C -> P -> B)))) = (@all (list (prod (P -> A) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) (C -> P -> B))))). Qed.
Lemma lem8408593 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (y : type1122 A B C P) (_115316 : type1115 A B C P) : (term3921 A B C P s s' t x t' _115316 y) = (term3922 A B C P s s' t x t' y _115316).
Proof. exact (MK_COMB (@lem8408592 A B C P) (@lem8408591 A B C P s s' t x t' y _115316)). Qed.
Lemma lem8408594 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) : (term3923 A B C P s s' t x t' _115316) = (term3924 A B C P s s' t x t' _115316).
Proof. exact (fun_ext (fun y : type1122 A B C P => @lem8408593 A B C P s s' t x t' y _115316)). Qed.
Lemma lem8408595 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> P)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> P)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> P))). Qed.
Lemma lem8408596 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) : (term3904 A B C P s s' t x t' _115316) = (term3925 A B C P s s' t x t' _115316).
Proof. exact (MK_COMB (@lem8408595 A B C P) (@lem8408594 A B C P s s' t x t' _115316)). Qed.
Lemma lem8408597 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) : ((term3903 A B C P s s' t x t' _115316) = (term3904 A B C P s s' t x t' _115316)) = ((term3899 A B C P s s' t x t' _115316) = (term3925 A B C P s s' t x t' _115316)).
Proof. exact (MK_COMB (@lem8408585 A B C P s s' t x t' _115316) (@lem8408596 A B C P s s' t x t' _115316)). Qed.
Lemma lem8408598 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (x : type1122 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) : (term3899 A B C P s s' t x t' _115316) = (term3925 A B C P s s' t x t' _115316).
Proof. exact (EQ_MP (@lem8408597 A B C P s s' t x t' _115316) (@lem8408572 A B C P s s' t x t' _115316)). Qed.
Lemma lem8408599 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) : (term3901 A B C P s s' t t' _115316) = (term3926 A B C P s s' t t' _115316).
Proof. exact (fun_ext (fun x : type1122 A B C P => @lem8408598 A B C P s s' t x t' _115316)). Qed.
Lemma lem8408600 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> P)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> P)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> P))). Qed.
Lemma lem8408601 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) : (term3902 A B C P s s' t t' _115316) = (term3927 A B C P s s' t t' _115316).
Proof. exact (MK_COMB (@lem8408600 A B C P) (@lem8408599 A B C P s s' t t' _115316)). Qed.
Lemma lem8408602 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (t' : type1120 A B C P) (_115316 : type1115 A B C P) : (term3874 A B C P s s' t t' _115316) = (term3927 A B C P s s' t t' _115316).
Proof. exact (TRANS (@lem8408568 A B C P s s' t t' _115316) (@lem8408601 A B C P s s' t t' _115316)). Qed.
Lemma lem8408603 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3876 A B C P s s' t _115316) = (term3928 A B C P s s' t _115316).
Proof. exact (fun_ext (fun t' : type1120 A B C P => @lem8408602 A B C P s s' t t' _115316)). Qed.
Lemma lem8408604 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> C -> P -> B)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> C -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> C -> P -> B))). Qed.
Lemma lem8408605 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3877 A B C P s s' t _115316) = (term3929 A B C P s s' t _115316).
Proof. exact (MK_COMB (@lem8408604 A B C P) (@lem8408603 A B C P s s' t _115316)). Qed.
Lemma lem8408606 {A B C P : Type'} (s : type1121 A B C P) (s' : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3851 A B C P s s' t _115316) = (term3929 A B C P s s' t _115316).
Proof. exact (TRANS (@lem8408538 A B C P s s' t _115316) (@lem8408605 A B C P s s' t _115316)). Qed.
Lemma lem8408607 {A B C P : Type'} (s : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3853 A B C P s t _115316) = (term3930 A B C P s t _115316).
Proof. exact (fun_ext (fun s' : type1121 A B C P => @lem8408606 A B C P s s' t _115316)). Qed.
Lemma lem8408608 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> P -> A))). Qed.
Lemma lem8408609 {A B C P : Type'} (s : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3854 A B C P s t _115316) = (term3931 A B C P s t _115316).
Proof. exact (MK_COMB (@lem8408608 A B C P) (@lem8408607 A B C P s t _115316)). Qed.
Lemma lem8408610 {A B C P : Type'} (s : type1121 A B C P) (t : type1120 A B C P) (_115316 : type1115 A B C P) : (term3828 A B C P s t _115316) = (term3931 A B C P s t _115316).
Proof. exact (TRANS (@lem8408508 A B C P s t _115316) (@lem8408609 A B C P s t _115316)). Qed.
Lemma lem8408611 {A B C P : Type'} (s : type1121 A B C P) (_115316 : type1115 A B C P) : (term3830 A B C P s _115316) = (term3932 A B C P s _115316).
Proof. exact (fun_ext (fun t : type1120 A B C P => @lem8408610 A B C P s t _115316)). Qed.
Lemma lem8408612 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> C -> P -> B)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> C -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> C -> P -> B))). Qed.
Lemma lem8408613 {A B C P : Type'} (s : type1121 A B C P) (_115316 : type1115 A B C P) : (term3831 A B C P s _115316) = (term3933 A B C P s _115316).
Proof. exact (MK_COMB (@lem8408612 A B C P) (@lem8408611 A B C P s _115316)). Qed.
Lemma lem8408614 {A B C P : Type'} (s : type1121 A B C P) (_115316 : type1115 A B C P) : (term3803 A B C P s _115316) = (term3933 A B C P s _115316).
Proof. exact (TRANS (@lem8408478 A B C P s _115316) (@lem8408613 A B C P s _115316)). Qed.
Lemma lem8408615 {A B C P : Type'} (_115316 : type1115 A B C P) : (term3805 A B C P _115316) = (term3934 A B C P _115316).
Proof. exact (fun_ext (fun s : type1121 A B C P => @lem8408614 A B C P s _115316)). Qed.
Lemma lem8408616 {A B C P : Type'} : (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> P -> A)) = (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) (C -> P -> B))) -> C -> P -> A))). Qed.
Lemma lem8408617 {A B C P : Type'} (_115316 : type1115 A B C P) : (term3806 A B C P _115316) = (term3935 A B C P _115316).
Proof. exact (MK_COMB (@lem8408616 A B C P) (@lem8408615 A B C P _115316)). Qed.
Lemma lem8408618 {A B C P : Type'} (_115316 : type1115 A B C P) : (term3783 A B C P _115316) = (term3935 A B C P _115316).
Proof. exact (TRANS (@lem8408448 A B C P _115316) (@lem8408617 A B C P _115316)). Qed.
Lemma lem8408620 {A B C P : Type'} (_115316 : type1115 A B C P) : (term3533 A B C P _115316) = (term3935 A B C P _115316).
Proof. exact (TRANS (@lem8408418 A B C P _115316) (@lem8408618 A B C P _115316)). Qed.
Lemma lem8408621 {A B C P : Type'} (_115316 : type1115 A B C P) : (term617 A B C P _115316) = (term3935 A B C P _115316).
Proof. exact (TRANS (@lem8407926 A B C P _115316) (@lem8408620 A B C P _115316)). Qed.
Lemma lem8408622 {A B C P : Type'} (_115316 : type1115 A B C P) (h1 : term617 A B C P _115316) : term3935 A B C P _115316.
Proof. exact (EQ_MP (@lem8408621 A B C P _115316) (@lem8401042 A B C P _115316 h1)). Qed.
Lemma lem8408637 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) (y : P) : (term3936 A B P clauses s s' t x t' c y) = (term3937 A B P clauses s s' t x t' c y).
Proof. exact (@lem17362 (term3938 A B P t t' clauses s x s' y) ((t c x) = (t' c y))). Qed.
Lemma lem8408638 {P : Type'} (P' : P -> Prop) : (term3017 P P') = (term3018 P P').
Proof. exact (@lem18392 P P'). Qed.
Lemma lem8408639 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term3939 A B P clauses s s' t x t' c) = (term3940 A B P clauses s s' t x t' c).
Proof. exact (@lem8408638 P (term392 A B P clauses s s' t x t' c)). Qed.
Lemma lem8408640 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) (y : P) : (term3941 A B P clauses s s' t x t' c y) = (term391 A B P clauses s s' t x t' c y).
Proof. exact (eq_refl (term3941 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8408641 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8408642 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) (y : P) : (term3942 A B P clauses s s' t x t' c y) = (term3936 A B P clauses s s' t x t' c y).
Proof. exact (MK_COMB (@lem8408641) (@lem8408640 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8408643 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) (y : P) : (term3942 A B P clauses s s' t x t' c y) = (term3937 A B P clauses s s' t x t' c y).
Proof. exact (TRANS (@lem8408642 A B P clauses s s' t x t' c y) (@lem8408637 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8408644 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term3943 A B P clauses s s' t x t' c) = (term3944 A B P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8408643 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8408645 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8408646 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term3940 A B P clauses s s' t x t' c) = (term3945 A B P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8408645 P) (@lem8408644 A B P clauses s s' t x t' c)). Qed.
Lemma lem8408647 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term3939 A B P clauses s s' t x t' c) = (term3945 A B P clauses s s' t x t' c).
Proof. exact (TRANS (@lem8408639 A B P clauses s s' t x t' c) (@lem8408646 A B P clauses s s' t x t' c)). Qed.
Lemma lem8408648 {P : Type'} (P' : P -> Prop) : (term3017 P P') = (term3018 P P').
Proof. exact (@lem18392 P P'). Qed.
Lemma lem8408649 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term3946 A B P clauses s s' t t' c) = (term3947 A B P clauses s s' t t' c).
Proof. exact (@lem8408648 P (term394 A B P clauses s s' t t' c)). Qed.
Lemma lem8408650 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term3948 A B P clauses s s' t t' c x) = (term393 A B P clauses s s' t x t' c).
Proof. exact (eq_refl (term3948 A B P clauses s s' t t' c x)). Qed.
Lemma lem8408651 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8408652 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term3949 A B P clauses s s' t t' c x) = (term3939 A B P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8408651) (@lem8408650 A B P clauses s s' t x t' c)). Qed.
Lemma lem8408653 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term3949 A B P clauses s s' t t' c x) = (term3945 A B P clauses s s' t x t' c).
Proof. exact (TRANS (@lem8408652 A B P clauses s s' t x t' c) (@lem8408647 A B P clauses s s' t x t' c)). Qed.
Lemma lem8408654 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term3950 A B P clauses s s' t t' c) = (term3951 A B P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8408653 A B P clauses s s' t x t' c)). Qed.
Lemma lem8408655 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8408656 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term3947 A B P clauses s s' t t' c) = (term3952 A B P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8408655 P) (@lem8408654 A B P clauses s s' t t' c)). Qed.
Lemma lem8408657 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term3946 A B P clauses s s' t t' c) = (term3952 A B P clauses s s' t t' c).
Proof. exact (TRANS (@lem8408649 A B P clauses s s' t t' c) (@lem8408656 A B P clauses s s' t t' c)). Qed.
Lemma lem8408658 {A B P : Type'} (P' : type116 A B P) : (term1706 A B P P') = (term1707 A B P P').
Proof. exact (@lem18392 (type558 A B P) P'). Qed.
Lemma lem8408659 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term3953 A B P clauses s s' t c) = (term3954 A B P clauses s s' t c).
Proof. exact (@lem8408658 A B P (term396 A B P clauses s s' t c)). Qed.
Lemma lem8408660 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term3955 A B P clauses s s' t c t') = (term395 A B P clauses s s' t t' c).
Proof. exact (eq_refl (term3955 A B P clauses s s' t c t')). Qed.
Lemma lem8408661 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8408662 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term3956 A B P clauses s s' t c t') = (term3946 A B P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8408661) (@lem8408660 A B P clauses s s' t t' c)). Qed.
Lemma lem8408663 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term3956 A B P clauses s s' t c t') = (term3952 A B P clauses s s' t t' c).
Proof. exact (TRANS (@lem8408662 A B P clauses s s' t t' c) (@lem8408657 A B P clauses s s' t t' c)). Qed.
Lemma lem8408664 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term3957 A B P clauses s s' t c) = (term3958 A B P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8408663 A B P clauses s s' t t' c)). Qed.
Lemma lem8408665 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8408666 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term3954 A B P clauses s s' t c) = (term3959 A B P clauses s s' t c).
Proof. exact (MK_COMB (@lem8408665 A B P) (@lem8408664 A B P clauses s s' t c)). Qed.
Lemma lem8408667 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term3953 A B P clauses s s' t c) = (term3959 A B P clauses s s' t c).
Proof. exact (TRANS (@lem8408659 A B P clauses s s' t c) (@lem8408666 A B P clauses s s' t c)). Qed.
Lemma lem8408668 {A P : Type'} (P' : type805 A P) : (term2032 A P P') = (term2033 A P P').
Proof. exact (@lem18392 (P -> A) P'). Qed.
Lemma lem8408669 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term3960 A B P clauses s t c) = (term3961 A B P clauses s t c).
Proof. exact (@lem8408668 A P (term398 A B P clauses s t c)). Qed.
Lemma lem8408670 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term3962 A B P clauses s t c s') = (term397 A B P clauses s s' t c).
Proof. exact (eq_refl (term3962 A B P clauses s t c s')). Qed.
Lemma lem8408671 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8408672 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term3963 A B P clauses s t c s') = (term3953 A B P clauses s s' t c).
Proof. exact (MK_COMB (@lem8408671) (@lem8408670 A B P clauses s s' t c)). Qed.
Lemma lem8408673 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term3963 A B P clauses s t c s') = (term3959 A B P clauses s s' t c).
Proof. exact (TRANS (@lem8408672 A B P clauses s s' t c) (@lem8408667 A B P clauses s s' t c)). Qed.
Lemma lem8408674 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term3964 A B P clauses s t c) = (term3965 A B P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8408673 A B P clauses s s' t c)). Qed.
Lemma lem8408675 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8408676 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term3961 A B P clauses s t c) = (term3966 A B P clauses s t c).
Proof. exact (MK_COMB (@lem8408675 A P) (@lem8408674 A B P clauses s t c)). Qed.
Lemma lem8408677 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term3960 A B P clauses s t c) = (term3966 A B P clauses s t c).
Proof. exact (TRANS (@lem8408669 A B P clauses s t c) (@lem8408676 A B P clauses s t c)). Qed.
Lemma lem8408678 {A B P : Type'} (P' : type116 A B P) : (term1706 A B P P') = (term1707 A B P P').
Proof. exact (@lem18392 (type558 A B P) P'). Qed.
Lemma lem8408679 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term3967 A B P clauses s c) = (term3968 A B P clauses s c).
Proof. exact (@lem8408678 A B P (term400 A B P clauses s c)). Qed.
Lemma lem8408680 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term3969 A B P clauses s c t) = (term399 A B P clauses s t c).
Proof. exact (eq_refl (term3969 A B P clauses s c t)). Qed.
Lemma lem8408681 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8408682 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term3970 A B P clauses s c t) = (term3960 A B P clauses s t c).
Proof. exact (MK_COMB (@lem8408681) (@lem8408680 A B P clauses s t c)). Qed.
Lemma lem8408683 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term3970 A B P clauses s c t) = (term3966 A B P clauses s t c).
Proof. exact (TRANS (@lem8408682 A B P clauses s t c) (@lem8408677 A B P clauses s t c)). Qed.
Lemma lem8408684 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term3971 A B P clauses s c) = (term3972 A B P clauses s c).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8408683 A B P clauses s t c)). Qed.
Lemma lem8408685 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8408686 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term3968 A B P clauses s c) = (term3973 A B P clauses s c).
Proof. exact (MK_COMB (@lem8408685 A B P) (@lem8408684 A B P clauses s c)). Qed.
Lemma lem8408687 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term3967 A B P clauses s c) = (term3973 A B P clauses s c).
Proof. exact (TRANS (@lem8408679 A B P clauses s c) (@lem8408686 A B P clauses s c)). Qed.
Lemma lem8408688 {A P : Type'} (P' : type805 A P) : (term2032 A P P') = (term2033 A P P').
Proof. exact (@lem18392 (P -> A) P'). Qed.
Lemma lem8408689 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term3974 A B P clauses c) = (term3975 A B P clauses c).
Proof. exact (@lem8408688 A P (term402 A B P clauses c)). Qed.
Lemma lem8408690 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term3976 A B P clauses c s) = (term401 A B P clauses s c).
Proof. exact (eq_refl (term3976 A B P clauses c s)). Qed.
Lemma lem8408691 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8408692 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term3977 A B P clauses c s) = (term3967 A B P clauses s c).
Proof. exact (MK_COMB (@lem8408691) (@lem8408690 A B P clauses s c)). Qed.
Lemma lem8408693 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term3977 A B P clauses c s) = (term3973 A B P clauses s c).
Proof. exact (TRANS (@lem8408692 A B P clauses s c) (@lem8408687 A B P clauses s c)). Qed.
Lemma lem8408694 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term3978 A B P clauses c) = (term3979 A B P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8408693 A B P clauses s c)). Qed.
Lemma lem8408695 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8408696 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term3975 A B P clauses c) = (term3980 A B P clauses c).
Proof. exact (MK_COMB (@lem8408695 A P) (@lem8408694 A B P clauses c)). Qed.
Lemma lem8408697 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term3974 A B P clauses c) = (term3980 A B P clauses c).
Proof. exact (TRANS (@lem8408689 A B P clauses c) (@lem8408696 A B P clauses c)). Qed.
Lemma lem8408698 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 c clauses) = (term390 A B P _115314 c clauses).
Proof. exact (eq_refl (term390 A B P _115314 c clauses)). Qed.
Lemma lem8408699 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408700 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term3981 A B P clauses c) = (term3982 A B P clauses c).
Proof. exact (MK_COMB (@lem8408699) (@lem8408697 A B P clauses c)). Qed.
Lemma lem8408701 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term3983 A B P _115314 c clauses) = (term3984 A B P _115314 c clauses).
Proof. exact (MK_COMB (@lem8408700 A B P clauses c) (@lem8408698 A B P _115314 c clauses)). Qed.
Lemma lem8408702 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term406 A B P _115314 c clauses) = (term3983 A B P _115314 c clauses).
Proof. exact (@lem17265 (term403 A B P clauses c) (term390 A B P _115314 c clauses)). Qed.
Lemma lem8408703 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term406 A B P _115314 c clauses) = (term3984 A B P _115314 c clauses).
Proof. exact (TRANS (@lem8408702 A B P _115314 c clauses) (@lem8408701 A B P _115314 c clauses)). Qed.
Lemma lem8408704 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term408 A B P _115314 clauses) = (term3985 A B P _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8408703 A B P _115314 c clauses)). Qed.
Lemma lem8408705 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8408706 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term410 A B P _115314 clauses) = (term3986 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8408705 A B) (@lem8408704 A B P _115314 clauses)). Qed.
Lemma lem8408707 {A B P : Type'} (_115314 : type1080 A B P) : (term412 A B P _115314) = (term3987 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8408706 A B P _115314 clauses)). Qed.
Lemma lem8408708 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8408709 {A B P : Type'} (_115314 : type1080 A B P) : (term413 A B P _115314) = (term3988 A B P _115314).
Proof. exact (MK_COMB (@lem8408708 A B P) (@lem8408707 A B P _115314)). Qed.
Lemma lem8408832 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8408833 {A P : Type'} (P' : type805 A P) (Q : Prop) : (term3071 A P P' Q) = (term3072 A P P' Q).
Proof. exact (@lem8408832 (P -> A) P' Q). Qed.
Lemma lem8408834 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term3989 A B P _115314 c clauses) = (term3990 A B P _115314 c clauses).
Proof. exact (@lem8408833 A P (term3979 A B P clauses c) (term390 A B P _115314 c clauses)). Qed.
Lemma lem8408835 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term3991 A B P clauses c s) = (term3973 A B P clauses s c).
Proof. exact (eq_refl (term3991 A B P clauses c s)). Qed.
Lemma lem8408836 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term3992 A B P clauses c) = (term3979 A B P clauses c).
Proof. exact (fun_ext (fun s : P -> A => @lem8408835 A B P clauses s c)). Qed.
Lemma lem8408837 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8408838 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term3993 A B P clauses c) = (term3980 A B P clauses c).
Proof. exact (MK_COMB (@lem8408837 A P) (@lem8408836 A B P clauses c)). Qed.
Lemma lem8408839 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408840 {A B P : Type'} (clauses : type1635 A B P) (c : A -> B) : (term3994 A B P clauses c) = (term3982 A B P clauses c).
Proof. exact (MK_COMB (@lem8408839) (@lem8408838 A B P clauses c)). Qed.
Lemma lem8408841 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 c clauses) = (term390 A B P _115314 c clauses).
Proof. exact (eq_refl (term390 A B P _115314 c clauses)). Qed.
Lemma lem8408842 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term3989 A B P _115314 c clauses) = (term3984 A B P _115314 c clauses).
Proof. exact (MK_COMB (@lem8408840 A B P clauses c) (@lem8408841 A B P _115314 c clauses)). Qed.
Lemma lem8408843 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408844 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term3995 A B P _115314 c clauses) = (term3996 A B P _115314 c clauses).
Proof. exact (MK_COMB (@lem8408843) (@lem8408842 A B P _115314 c clauses)). Qed.
Lemma lem8408845 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term3991 A B P clauses c s) = (term3973 A B P clauses s c).
Proof. exact (eq_refl (term3991 A B P clauses c s)). Qed.
Lemma lem8408846 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408847 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term3997 A B P clauses c s) = (term3998 A B P clauses s c).
Proof. exact (MK_COMB (@lem8408846) (@lem8408845 A B P clauses s c)). Qed.
Lemma lem8408848 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 c clauses) = (term390 A B P _115314 c clauses).
Proof. exact (eq_refl (term390 A B P _115314 c clauses)). Qed.
Lemma lem8408849 {A B P : Type'} (s : P -> A) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term3999 A B P s _115314 c clauses) = (term4000 A B P s _115314 c clauses).
Proof. exact (MK_COMB (@lem8408847 A B P clauses s c) (@lem8408848 A B P _115314 c clauses)). Qed.
Lemma lem8408850 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4001 A B P _115314 c clauses) = (term4002 A B P _115314 c clauses).
Proof. exact (fun_ext (fun s : P -> A => @lem8408849 A B P s _115314 c clauses)). Qed.
Lemma lem8408851 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8408852 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term3990 A B P _115314 c clauses) = (term4003 A B P _115314 c clauses).
Proof. exact (MK_COMB (@lem8408851 A P) (@lem8408850 A B P _115314 c clauses)). Qed.
Lemma lem8408853 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : ((term3989 A B P _115314 c clauses) = (term3990 A B P _115314 c clauses)) = ((term3984 A B P _115314 c clauses) = (term4003 A B P _115314 c clauses)).
Proof. exact (MK_COMB (@lem8408844 A B P _115314 c clauses) (@lem8408852 A B P _115314 c clauses)). Qed.
Lemma lem8408854 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term3984 A B P _115314 c clauses) = (term4003 A B P _115314 c clauses).
Proof. exact (EQ_MP (@lem8408853 A B P _115314 c clauses) (@lem8408834 A B P _115314 c clauses)). Qed.
Lemma lem8408856 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8408857 {A B P : Type'} (P' : type116 A B P) (Q : Prop) : (term4004 A B P P' Q) = (term4005 A B P P' Q).
Proof. exact (@lem8408856 (type558 A B P) P' Q). Qed.
Lemma lem8408858 {A B P : Type'} (s : P -> A) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4006 A B P s _115314 c clauses) = (term4007 A B P s _115314 c clauses).
Proof. exact (@lem8408857 A B P (term3972 A B P clauses s c) (term390 A B P _115314 c clauses)). Qed.
Lemma lem8408859 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term4008 A B P clauses s c t) = (term3966 A B P clauses s t c).
Proof. exact (eq_refl (term4008 A B P clauses s c t)). Qed.
Lemma lem8408860 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term4009 A B P clauses s c) = (term3972 A B P clauses s c).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8408859 A B P clauses s t c)). Qed.
Lemma lem8408861 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8408862 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term4010 A B P clauses s c) = (term3973 A B P clauses s c).
Proof. exact (MK_COMB (@lem8408861 A B P) (@lem8408860 A B P clauses s c)). Qed.
Lemma lem8408863 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408864 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (c : A -> B) : (term4011 A B P clauses s c) = (term3998 A B P clauses s c).
Proof. exact (MK_COMB (@lem8408863) (@lem8408862 A B P clauses s c)). Qed.
Lemma lem8408865 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 c clauses) = (term390 A B P _115314 c clauses).
Proof. exact (eq_refl (term390 A B P _115314 c clauses)). Qed.
Lemma lem8408866 {A B P : Type'} (s : P -> A) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4006 A B P s _115314 c clauses) = (term4000 A B P s _115314 c clauses).
Proof. exact (MK_COMB (@lem8408864 A B P clauses s c) (@lem8408865 A B P _115314 c clauses)). Qed.
Lemma lem8408867 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408868 {A B P : Type'} (s : P -> A) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4012 A B P s _115314 c clauses) = (term4013 A B P s _115314 c clauses).
Proof. exact (MK_COMB (@lem8408867) (@lem8408866 A B P s _115314 c clauses)). Qed.
Lemma lem8408869 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term4008 A B P clauses s c t) = (term3966 A B P clauses s t c).
Proof. exact (eq_refl (term4008 A B P clauses s c t)). Qed.
Lemma lem8408870 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408871 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term4014 A B P clauses s c t) = (term4015 A B P clauses s t c).
Proof. exact (MK_COMB (@lem8408870) (@lem8408869 A B P clauses s t c)). Qed.
Lemma lem8408872 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 c clauses) = (term390 A B P _115314 c clauses).
Proof. exact (eq_refl (term390 A B P _115314 c clauses)). Qed.
Lemma lem8408873 {A B P : Type'} (s : P -> A) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4016 A B P s t _115314 c clauses) = (term4017 A B P s t _115314 c clauses).
Proof. exact (MK_COMB (@lem8408871 A B P clauses s t c) (@lem8408872 A B P _115314 c clauses)). Qed.
Lemma lem8408874 {A B P : Type'} (s : P -> A) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4018 A B P s _115314 c clauses) = (term4019 A B P s _115314 c clauses).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8408873 A B P s t _115314 c clauses)). Qed.
Lemma lem8408875 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8408876 {A B P : Type'} (s : P -> A) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4007 A B P s _115314 c clauses) = (term4020 A B P s _115314 c clauses).
Proof. exact (MK_COMB (@lem8408875 A B P) (@lem8408874 A B P s _115314 c clauses)). Qed.
Lemma lem8408877 {A B P : Type'} (s : P -> A) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : ((term4006 A B P s _115314 c clauses) = (term4007 A B P s _115314 c clauses)) = ((term4000 A B P s _115314 c clauses) = (term4020 A B P s _115314 c clauses)).
Proof. exact (MK_COMB (@lem8408868 A B P s _115314 c clauses) (@lem8408876 A B P s _115314 c clauses)). Qed.
Lemma lem8408878 {A B P : Type'} (s : P -> A) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4000 A B P s _115314 c clauses) = (term4020 A B P s _115314 c clauses).
Proof. exact (EQ_MP (@lem8408877 A B P s _115314 c clauses) (@lem8408858 A B P s _115314 c clauses)). Qed.
Lemma lem8408880 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8408881 {A P : Type'} (P' : type805 A P) (Q : Prop) : (term3071 A P P' Q) = (term3072 A P P' Q).
Proof. exact (@lem8408880 (P -> A) P' Q). Qed.
Lemma lem8408882 {A B P : Type'} (s : P -> A) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4021 A B P s t _115314 c clauses) = (term4022 A B P s t _115314 c clauses).
Proof. exact (@lem8408881 A P (term3965 A B P clauses s t c) (term390 A B P _115314 c clauses)). Qed.
Lemma lem8408883 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term4023 A B P clauses s t c s') = (term3959 A B P clauses s s' t c).
Proof. exact (eq_refl (term4023 A B P clauses s t c s')). Qed.
Lemma lem8408884 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term4024 A B P clauses s t c) = (term3965 A B P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> A => @lem8408883 A B P clauses s s' t c)). Qed.
Lemma lem8408885 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8408886 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term4025 A B P clauses s t c) = (term3966 A B P clauses s t c).
Proof. exact (MK_COMB (@lem8408885 A P) (@lem8408884 A B P clauses s t c)). Qed.
Lemma lem8408887 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408888 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) (c : A -> B) : (term4026 A B P clauses s t c) = (term4015 A B P clauses s t c).
Proof. exact (MK_COMB (@lem8408887) (@lem8408886 A B P clauses s t c)). Qed.
Lemma lem8408889 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 c clauses) = (term390 A B P _115314 c clauses).
Proof. exact (eq_refl (term390 A B P _115314 c clauses)). Qed.
Lemma lem8408890 {A B P : Type'} (s : P -> A) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4021 A B P s t _115314 c clauses) = (term4017 A B P s t _115314 c clauses).
Proof. exact (MK_COMB (@lem8408888 A B P clauses s t c) (@lem8408889 A B P _115314 c clauses)). Qed.
Lemma lem8408891 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408892 {A B P : Type'} (s : P -> A) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4027 A B P s t _115314 c clauses) = (term4028 A B P s t _115314 c clauses).
Proof. exact (MK_COMB (@lem8408891) (@lem8408890 A B P s t _115314 c clauses)). Qed.
Lemma lem8408893 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term4023 A B P clauses s t c s') = (term3959 A B P clauses s s' t c).
Proof. exact (eq_refl (term4023 A B P clauses s t c s')). Qed.
Lemma lem8408894 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408895 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term4029 A B P clauses s t c s') = (term4030 A B P clauses s s' t c).
Proof. exact (MK_COMB (@lem8408894) (@lem8408893 A B P clauses s s' t c)). Qed.
Lemma lem8408896 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 c clauses) = (term390 A B P _115314 c clauses).
Proof. exact (eq_refl (term390 A B P _115314 c clauses)). Qed.
Lemma lem8408897 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4031 A B P s t s' _115314 c clauses) = (term4032 A B P s s' t _115314 c clauses).
Proof. exact (MK_COMB (@lem8408895 A B P clauses s s' t c) (@lem8408896 A B P _115314 c clauses)). Qed.
Lemma lem8408898 {A B P : Type'} (s : P -> A) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4033 A B P s t _115314 c clauses) = (term4034 A B P s t _115314 c clauses).
Proof. exact (fun_ext (fun s' : P -> A => @lem8408897 A B P s s' t _115314 c clauses)). Qed.
Lemma lem8408899 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8408900 {A B P : Type'} (s : P -> A) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4022 A B P s t _115314 c clauses) = (term4035 A B P s t _115314 c clauses).
Proof. exact (MK_COMB (@lem8408899 A P) (@lem8408898 A B P s t _115314 c clauses)). Qed.
Lemma lem8408901 {A B P : Type'} (s : P -> A) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : ((term4021 A B P s t _115314 c clauses) = (term4022 A B P s t _115314 c clauses)) = ((term4017 A B P s t _115314 c clauses) = (term4035 A B P s t _115314 c clauses)).
Proof. exact (MK_COMB (@lem8408892 A B P s t _115314 c clauses) (@lem8408900 A B P s t _115314 c clauses)). Qed.
Lemma lem8408902 {A B P : Type'} (s : P -> A) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4017 A B P s t _115314 c clauses) = (term4035 A B P s t _115314 c clauses).
Proof. exact (EQ_MP (@lem8408901 A B P s t _115314 c clauses) (@lem8408882 A B P s t _115314 c clauses)). Qed.
Lemma lem8408904 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8408905 {A B P : Type'} (P' : type116 A B P) (Q : Prop) : (term4004 A B P P' Q) = (term4005 A B P P' Q).
Proof. exact (@lem8408904 (type558 A B P) P' Q). Qed.
Lemma lem8408906 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4036 A B P s s' t _115314 c clauses) = (term4037 A B P s s' t _115314 c clauses).
Proof. exact (@lem8408905 A B P (term3958 A B P clauses s s' t c) (term390 A B P _115314 c clauses)). Qed.
Lemma lem8408907 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term4038 A B P clauses s s' t c t') = (term3952 A B P clauses s s' t t' c).
Proof. exact (eq_refl (term4038 A B P clauses s s' t c t')). Qed.
Lemma lem8408908 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term4039 A B P clauses s s' t c) = (term3958 A B P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8408907 A B P clauses s s' t t' c)). Qed.
Lemma lem8408909 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8408910 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term4040 A B P clauses s s' t c) = (term3959 A B P clauses s s' t c).
Proof. exact (MK_COMB (@lem8408909 A B P) (@lem8408908 A B P clauses s s' t c)). Qed.
Lemma lem8408911 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408912 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (c : A -> B) : (term4041 A B P clauses s s' t c) = (term4030 A B P clauses s s' t c).
Proof. exact (MK_COMB (@lem8408911) (@lem8408910 A B P clauses s s' t c)). Qed.
Lemma lem8408913 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 c clauses) = (term390 A B P _115314 c clauses).
Proof. exact (eq_refl (term390 A B P _115314 c clauses)). Qed.
Lemma lem8408914 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4036 A B P s s' t _115314 c clauses) = (term4032 A B P s s' t _115314 c clauses).
Proof. exact (MK_COMB (@lem8408912 A B P clauses s s' t c) (@lem8408913 A B P _115314 c clauses)). Qed.
Lemma lem8408915 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408916 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4042 A B P s s' t _115314 c clauses) = (term4043 A B P s s' t _115314 c clauses).
Proof. exact (MK_COMB (@lem8408915) (@lem8408914 A B P s s' t _115314 c clauses)). Qed.
Lemma lem8408917 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term4038 A B P clauses s s' t c t') = (term3952 A B P clauses s s' t t' c).
Proof. exact (eq_refl (term4038 A B P clauses s s' t c t')). Qed.
Lemma lem8408918 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408919 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term4044 A B P clauses s s' t c t') = (term4045 A B P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8408918) (@lem8408917 A B P clauses s s' t t' c)). Qed.
Lemma lem8408920 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 c clauses) = (term390 A B P _115314 c clauses).
Proof. exact (eq_refl (term390 A B P _115314 c clauses)). Qed.
Lemma lem8408921 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4046 A B P s s' t t' _115314 c clauses) = (term4047 A B P s s' t t' _115314 c clauses).
Proof. exact (MK_COMB (@lem8408919 A B P clauses s s' t t' c) (@lem8408920 A B P _115314 c clauses)). Qed.
Lemma lem8408922 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4048 A B P s s' t _115314 c clauses) = (term4049 A B P s s' t _115314 c clauses).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8408921 A B P s s' t t' _115314 c clauses)). Qed.
Lemma lem8408923 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8408924 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4037 A B P s s' t _115314 c clauses) = (term4050 A B P s s' t _115314 c clauses).
Proof. exact (MK_COMB (@lem8408923 A B P) (@lem8408922 A B P s s' t _115314 c clauses)). Qed.
Lemma lem8408925 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : ((term4036 A B P s s' t _115314 c clauses) = (term4037 A B P s s' t _115314 c clauses)) = ((term4032 A B P s s' t _115314 c clauses) = (term4050 A B P s s' t _115314 c clauses)).
Proof. exact (MK_COMB (@lem8408916 A B P s s' t _115314 c clauses) (@lem8408924 A B P s s' t _115314 c clauses)). Qed.
Lemma lem8408926 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4032 A B P s s' t _115314 c clauses) = (term4050 A B P s s' t _115314 c clauses).
Proof. exact (EQ_MP (@lem8408925 A B P s s' t _115314 c clauses) (@lem8408906 A B P s s' t _115314 c clauses)). Qed.
Lemma lem8408928 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8408929 {P : Type'} (P' : P -> Prop) (Q : Prop) : (term3069 P P' Q) = (term3070 P P' Q).
Proof. exact (@lem8408928 P P' Q). Qed.
Lemma lem8408930 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4051 A B P s s' t t' _115314 c clauses) = (term4052 A B P s s' t t' _115314 c clauses).
Proof. exact (@lem8408929 P (term3951 A B P clauses s s' t t' c) (term390 A B P _115314 c clauses)). Qed.
Lemma lem8408931 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term4053 A B P clauses s s' t t' c x) = (term3945 A B P clauses s s' t x t' c).
Proof. exact (eq_refl (term4053 A B P clauses s s' t t' c x)). Qed.
Lemma lem8408932 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term4054 A B P clauses s s' t t' c) = (term3951 A B P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8408931 A B P clauses s s' t x t' c)). Qed.
Lemma lem8408933 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8408934 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term4055 A B P clauses s s' t t' c) = (term3952 A B P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8408933 P) (@lem8408932 A B P clauses s s' t t' c)). Qed.
Lemma lem8408935 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408936 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (c : A -> B) : (term4056 A B P clauses s s' t t' c) = (term4045 A B P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8408935) (@lem8408934 A B P clauses s s' t t' c)). Qed.
Lemma lem8408937 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 c clauses) = (term390 A B P _115314 c clauses).
Proof. exact (eq_refl (term390 A B P _115314 c clauses)). Qed.
Lemma lem8408938 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4051 A B P s s' t t' _115314 c clauses) = (term4047 A B P s s' t t' _115314 c clauses).
Proof. exact (MK_COMB (@lem8408936 A B P clauses s s' t t' c) (@lem8408937 A B P _115314 c clauses)). Qed.
Lemma lem8408939 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408940 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4057 A B P s s' t t' _115314 c clauses) = (term4058 A B P s s' t t' _115314 c clauses).
Proof. exact (MK_COMB (@lem8408939) (@lem8408938 A B P s s' t t' _115314 c clauses)). Qed.
Lemma lem8408941 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term4053 A B P clauses s s' t t' c x) = (term3945 A B P clauses s s' t x t' c).
Proof. exact (eq_refl (term4053 A B P clauses s s' t t' c x)). Qed.
Lemma lem8408942 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408943 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term4059 A B P clauses s s' t t' c x) = (term4060 A B P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8408942) (@lem8408941 A B P clauses s s' t x t' c)). Qed.
Lemma lem8408944 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 c clauses) = (term390 A B P _115314 c clauses).
Proof. exact (eq_refl (term390 A B P _115314 c clauses)). Qed.
Lemma lem8408945 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4061 A B P s s' t t' x _115314 c clauses) = (term4062 A B P s s' t x t' _115314 c clauses).
Proof. exact (MK_COMB (@lem8408943 A B P clauses s s' t x t' c) (@lem8408944 A B P _115314 c clauses)). Qed.
Lemma lem8408946 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4063 A B P s s' t t' _115314 c clauses) = (term4064 A B P s s' t t' _115314 c clauses).
Proof. exact (fun_ext (fun x : P => @lem8408945 A B P s s' t x t' _115314 c clauses)). Qed.
Lemma lem8408947 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8408948 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4052 A B P s s' t t' _115314 c clauses) = (term4065 A B P s s' t t' _115314 c clauses).
Proof. exact (MK_COMB (@lem8408947 P) (@lem8408946 A B P s s' t t' _115314 c clauses)). Qed.
Lemma lem8408949 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : ((term4051 A B P s s' t t' _115314 c clauses) = (term4052 A B P s s' t t' _115314 c clauses)) = ((term4047 A B P s s' t t' _115314 c clauses) = (term4065 A B P s s' t t' _115314 c clauses)).
Proof. exact (MK_COMB (@lem8408940 A B P s s' t t' _115314 c clauses) (@lem8408948 A B P s s' t t' _115314 c clauses)). Qed.
Lemma lem8408950 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4047 A B P s s' t t' _115314 c clauses) = (term4065 A B P s s' t t' _115314 c clauses).
Proof. exact (EQ_MP (@lem8408949 A B P s s' t t' _115314 c clauses) (@lem8408930 A B P s s' t t' _115314 c clauses)). Qed.
Lemma lem8408952 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8408953 {P : Type'} (P' : P -> Prop) (Q : Prop) : (term3069 P P' Q) = (term3070 P P' Q).
Proof. exact (@lem8408952 P P' Q). Qed.
Lemma lem8408954 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4066 A B P s s' t x t' _115314 c clauses) = (term4067 A B P s s' t x t' _115314 c clauses).
Proof. exact (@lem8408953 P (term3944 A B P clauses s s' t x t' c) (term390 A B P _115314 c clauses)). Qed.
Lemma lem8408955 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) (y : P) : (term4068 A B P clauses s s' t x t' c y) = (term3937 A B P clauses s s' t x t' c y).
Proof. exact (eq_refl (term4068 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8408956 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term4069 A B P clauses s s' t x t' c) = (term3944 A B P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8408955 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8408957 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8408958 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term4070 A B P clauses s s' t x t' c) = (term3945 A B P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8408957 P) (@lem8408956 A B P clauses s s' t x t' c)). Qed.
Lemma lem8408959 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408960 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) : (term4071 A B P clauses s s' t x t' c) = (term4060 A B P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8408959) (@lem8408958 A B P clauses s s' t x t' c)). Qed.
Lemma lem8408961 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 c clauses) = (term390 A B P _115314 c clauses).
Proof. exact (eq_refl (term390 A B P _115314 c clauses)). Qed.
Lemma lem8408962 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4066 A B P s s' t x t' _115314 c clauses) = (term4062 A B P s s' t x t' _115314 c clauses).
Proof. exact (MK_COMB (@lem8408960 A B P clauses s s' t x t' c) (@lem8408961 A B P _115314 c clauses)). Qed.
Lemma lem8408963 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8408964 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4072 A B P s s' t x t' _115314 c clauses) = (term4073 A B P s s' t x t' _115314 c clauses).
Proof. exact (MK_COMB (@lem8408963) (@lem8408962 A B P s s' t x t' _115314 c clauses)). Qed.
Lemma lem8408965 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) (y : P) : (term4068 A B P clauses s s' t x t' c y) = (term3937 A B P clauses s s' t x t' c y).
Proof. exact (eq_refl (term4068 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8408966 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8408967 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (c : A -> B) (y : P) : (term4074 A B P clauses s s' t x t' c y) = (term4075 A B P clauses s s' t x t' c y).
Proof. exact (MK_COMB (@lem8408966) (@lem8408965 A B P clauses s s' t x t' c y)). Qed.
Lemma lem8408968 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 c clauses) = (term390 A B P _115314 c clauses).
Proof. exact (eq_refl (term390 A B P _115314 c clauses)). Qed.
Lemma lem8408969 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (y : P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4076 A B P s s' t x t' y _115314 c clauses) = (term4077 A B P s s' t x t' y _115314 c clauses).
Proof. exact (MK_COMB (@lem8408967 A B P clauses s s' t x t' c y) (@lem8408968 A B P _115314 c clauses)). Qed.
Lemma lem8408970 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4078 A B P s s' t x t' _115314 c clauses) = (term4079 A B P s s' t x t' _115314 c clauses).
Proof. exact (fun_ext (fun y : P => @lem8408969 A B P s s' t x t' y _115314 c clauses)). Qed.
Lemma lem8408971 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8408972 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4067 A B P s s' t x t' _115314 c clauses) = (term4080 A B P s s' t x t' _115314 c clauses).
Proof. exact (MK_COMB (@lem8408971 P) (@lem8408970 A B P s s' t x t' _115314 c clauses)). Qed.
Lemma lem8408973 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : ((term4066 A B P s s' t x t' _115314 c clauses) = (term4067 A B P s s' t x t' _115314 c clauses)) = ((term4062 A B P s s' t x t' _115314 c clauses) = (term4080 A B P s s' t x t' _115314 c clauses)).
Proof. exact (MK_COMB (@lem8408964 A B P s s' t x t' _115314 c clauses) (@lem8408972 A B P s s' t x t' _115314 c clauses)). Qed.
Lemma lem8408974 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4062 A B P s s' t x t' _115314 c clauses) = (term4080 A B P s s' t x t' _115314 c clauses).
Proof. exact (EQ_MP (@lem8408973 A B P s s' t x t' _115314 c clauses) (@lem8408954 A B P s s' t x t' _115314 c clauses)). Qed.
Lemma lem8408975 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4064 A B P s s' t t' _115314 c clauses) = (term4081 A B P s s' t t' _115314 c clauses).
Proof. exact (fun_ext (fun x : P => @lem8408974 A B P s s' t x t' _115314 c clauses)). Qed.
Lemma lem8408976 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8408977 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4065 A B P s s' t t' _115314 c clauses) = (term4082 A B P s s' t t' _115314 c clauses).
Proof. exact (MK_COMB (@lem8408976 P) (@lem8408975 A B P s s' t t' _115314 c clauses)). Qed.
Lemma lem8408978 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4047 A B P s s' t t' _115314 c clauses) = (term4082 A B P s s' t t' _115314 c clauses).
Proof. exact (TRANS (@lem8408950 A B P s s' t t' _115314 c clauses) (@lem8408977 A B P s s' t t' _115314 c clauses)). Qed.
Lemma lem8408979 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4049 A B P s s' t _115314 c clauses) = (term4083 A B P s s' t _115314 c clauses).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8408978 A B P s s' t t' _115314 c clauses)). Qed.
Lemma lem8408980 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8408981 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4050 A B P s s' t _115314 c clauses) = (term4084 A B P s s' t _115314 c clauses).
Proof. exact (MK_COMB (@lem8408980 A B P) (@lem8408979 A B P s s' t _115314 c clauses)). Qed.
Lemma lem8408982 {A B P : Type'} (s : P -> A) (s' : P -> A) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4032 A B P s s' t _115314 c clauses) = (term4084 A B P s s' t _115314 c clauses).
Proof. exact (TRANS (@lem8408926 A B P s s' t _115314 c clauses) (@lem8408981 A B P s s' t _115314 c clauses)). Qed.
Lemma lem8408983 {A B P : Type'} (s : P -> A) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4034 A B P s t _115314 c clauses) = (term4085 A B P s t _115314 c clauses).
Proof. exact (fun_ext (fun s' : P -> A => @lem8408982 A B P s s' t _115314 c clauses)). Qed.
Lemma lem8408984 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8408985 {A B P : Type'} (s : P -> A) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4035 A B P s t _115314 c clauses) = (term4086 A B P s t _115314 c clauses).
Proof. exact (MK_COMB (@lem8408984 A P) (@lem8408983 A B P s t _115314 c clauses)). Qed.
Lemma lem8408986 {A B P : Type'} (s : P -> A) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4017 A B P s t _115314 c clauses) = (term4086 A B P s t _115314 c clauses).
Proof. exact (TRANS (@lem8408902 A B P s t _115314 c clauses) (@lem8408985 A B P s t _115314 c clauses)). Qed.
Lemma lem8408987 {A B P : Type'} (s : P -> A) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4019 A B P s _115314 c clauses) = (term4087 A B P s _115314 c clauses).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8408986 A B P s t _115314 c clauses)). Qed.
Lemma lem8408988 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8408989 {A B P : Type'} (s : P -> A) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4020 A B P s _115314 c clauses) = (term4088 A B P s _115314 c clauses).
Proof. exact (MK_COMB (@lem8408988 A B P) (@lem8408987 A B P s _115314 c clauses)). Qed.
Lemma lem8408990 {A B P : Type'} (s : P -> A) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4000 A B P s _115314 c clauses) = (term4088 A B P s _115314 c clauses).
Proof. exact (TRANS (@lem8408878 A B P s _115314 c clauses) (@lem8408989 A B P s _115314 c clauses)). Qed.
Lemma lem8408991 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4002 A B P _115314 c clauses) = (term4089 A B P _115314 c clauses).
Proof. exact (fun_ext (fun s : P -> A => @lem8408990 A B P s _115314 c clauses)). Qed.
Lemma lem8408992 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8408993 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4003 A B P _115314 c clauses) = (term4090 A B P _115314 c clauses).
Proof. exact (MK_COMB (@lem8408992 A P) (@lem8408991 A B P _115314 c clauses)). Qed.
Lemma lem8408994 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term3984 A B P _115314 c clauses) = (term4090 A B P _115314 c clauses).
Proof. exact (TRANS (@lem8408854 A B P _115314 c clauses) (@lem8408993 A B P _115314 c clauses)). Qed.
Lemma lem8408995 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term3985 A B P _115314 clauses) = (term4091 A B P _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8408994 A B P _115314 c clauses)). Qed.
Lemma lem8408996 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8408997 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term3986 A B P _115314 clauses) = (term4092 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8408996 A B) (@lem8408995 A B P _115314 clauses)). Qed.
Lemma lem8408999 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8409000 {A B P : Type'} (P' : type537 A B P) : (term4093 A B P P') = (term4094 A B P P').
Proof. exact (@lem8408999 (A -> B) (P -> A) P'). Qed.
Lemma lem8409001 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4095 A B P _115314 clauses) = (term4096 A B P _115314 clauses).
Proof. exact (@lem8409000 A B P (term4097 A B P _115314 clauses)). Qed.
Lemma lem8409002 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4098 A B P _115314 clauses c) = (term4089 A B P _115314 c clauses).
Proof. exact (eq_refl (term4098 A B P _115314 clauses c)). Qed.
Lemma lem8409003 {A P : Type'} (s : P -> A) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8409004 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) (s : P -> A) : (term4099 A B P _115314 clauses c s) = (term4100 A B P _115314 c clauses s).
Proof. exact (MK_COMB (@lem8409002 A B P _115314 c clauses) (@lem8409003 A P s)). Qed.
Lemma lem8409005 {A B P : Type'} (s : P -> A) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4100 A B P _115314 c clauses s) = (term4088 A B P s _115314 c clauses).
Proof. exact (eq_refl (term4100 A B P _115314 c clauses s)). Qed.
Lemma lem8409006 {A B P : Type'} (s : P -> A) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4099 A B P _115314 clauses c s) = (term4088 A B P s _115314 c clauses).
Proof. exact (TRANS (@lem8409004 A B P _115314 c clauses s) (@lem8409005 A B P s _115314 c clauses)). Qed.
Lemma lem8409007 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4101 A B P _115314 clauses c) = (term4089 A B P _115314 c clauses).
Proof. exact (fun_ext (fun s : P -> A => @lem8409006 A B P s _115314 c clauses)). Qed.
Lemma lem8409008 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8409009 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4102 A B P _115314 clauses c) = (term4090 A B P _115314 c clauses).
Proof. exact (MK_COMB (@lem8409008 A P) (@lem8409007 A B P _115314 c clauses)). Qed.
Lemma lem8409010 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4103 A B P _115314 clauses) = (term4091 A B P _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8409009 A B P _115314 c clauses)). Qed.
Lemma lem8409011 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8409012 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4095 A B P _115314 clauses) = (term4092 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8409011 A B) (@lem8409010 A B P _115314 clauses)). Qed.
Lemma lem8409013 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409014 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4104 A B P _115314 clauses) = (term4105 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8409013) (@lem8409012 A B P _115314 clauses)). Qed.
Lemma lem8409015 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4098 A B P _115314 clauses c) = (term4089 A B P _115314 c clauses).
Proof. exact (eq_refl (term4098 A B P _115314 clauses c)). Qed.
Lemma lem8409016 {A B P : Type'} (s : type557 A B P) (c : A -> B) : (s c) = (s c).
Proof. exact (eq_refl (s c)). Qed.
Lemma lem8409017 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type557 A B P) (c : A -> B) : (term4106 A B P _115314 clauses s c) = (term4107 A B P _115314 clauses s c).
Proof. exact (MK_COMB (@lem8409015 A B P _115314 c clauses) (@lem8409016 A B P s c)). Qed.
Lemma lem8409018 {A B P : Type'} (s : type557 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4107 A B P _115314 clauses s c) = (term4108 A B P s _115314 c clauses).
Proof. exact (eq_refl (term4107 A B P _115314 clauses s c)). Qed.
Lemma lem8409019 {A B P : Type'} (s : type557 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4106 A B P _115314 clauses s c) = (term4108 A B P s _115314 c clauses).
Proof. exact (TRANS (@lem8409017 A B P _115314 clauses s c) (@lem8409018 A B P s _115314 c clauses)). Qed.
Lemma lem8409020 {A B P : Type'} (s : type557 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4109 A B P _115314 clauses s) = (term4110 A B P s _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8409019 A B P s _115314 c clauses)). Qed.
Lemma lem8409021 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8409022 {A B P : Type'} (s : type557 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4111 A B P _115314 clauses s) = (term4112 A B P s _115314 clauses).
Proof. exact (MK_COMB (@lem8409021 A B) (@lem8409020 A B P s _115314 clauses)). Qed.
Lemma lem8409023 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4113 A B P _115314 clauses) = (term4114 A B P _115314 clauses).
Proof. exact (fun_ext (fun s : type557 A B P => @lem8409022 A B P s _115314 clauses)). Qed.
Lemma lem8409024 {A B P : Type'} : (@ex ((A -> B) -> P -> A)) = (@ex ((A -> B) -> P -> A)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> A))). Qed.
Lemma lem8409025 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4096 A B P _115314 clauses) = (term4115 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8409024 A B P) (@lem8409023 A B P _115314 clauses)). Qed.
Lemma lem8409026 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : ((term4095 A B P _115314 clauses) = (term4096 A B P _115314 clauses)) = ((term4092 A B P _115314 clauses) = (term4115 A B P _115314 clauses)).
Proof. exact (MK_COMB (@lem8409014 A B P _115314 clauses) (@lem8409025 A B P _115314 clauses)). Qed.
Lemma lem8409027 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4092 A B P _115314 clauses) = (term4115 A B P _115314 clauses).
Proof. exact (EQ_MP (@lem8409026 A B P _115314 clauses) (@lem8409001 A B P _115314 clauses)). Qed.
Lemma lem8409029 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8409030 {A B P : Type'} (P' : type496 A B P) : (term4116 A B P P') = (term4117 A B P P').
Proof. exact (@lem8409029 (A -> B) (type558 A B P) P'). Qed.
Lemma lem8409031 {A B P : Type'} (s : type557 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4118 A B P s _115314 clauses) = (term4119 A B P s _115314 clauses).
Proof. exact (@lem8409030 A B P (term4120 A B P s _115314 clauses)). Qed.
Lemma lem8409032 {A B P : Type'} (s : type557 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4121 A B P s _115314 clauses c) = (term4122 A B P s _115314 c clauses).
Proof. exact (eq_refl (term4121 A B P s _115314 clauses c)). Qed.
Lemma lem8409033 {A B P : Type'} (t : type558 A B P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8409034 {A B P : Type'} (s : type557 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) (t : type558 A B P) : (term4123 A B P s _115314 clauses c t) = (term4124 A B P s _115314 c clauses t).
Proof. exact (MK_COMB (@lem8409032 A B P s _115314 c clauses) (@lem8409033 A B P t)). Qed.
Lemma lem8409035 {A B P : Type'} (s : type557 A B P) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4124 A B P s _115314 c clauses t) = (term4125 A B P s t _115314 c clauses).
Proof. exact (eq_refl (term4124 A B P s _115314 c clauses t)). Qed.
Lemma lem8409036 {A B P : Type'} (s : type557 A B P) (t : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4123 A B P s _115314 clauses c t) = (term4125 A B P s t _115314 c clauses).
Proof. exact (TRANS (@lem8409034 A B P s _115314 c clauses t) (@lem8409035 A B P s t _115314 c clauses)). Qed.
Lemma lem8409037 {A B P : Type'} (s : type557 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4126 A B P s _115314 clauses c) = (term4122 A B P s _115314 c clauses).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8409036 A B P s t _115314 c clauses)). Qed.
Lemma lem8409038 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8409039 {A B P : Type'} (s : type557 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4127 A B P s _115314 clauses c) = (term4108 A B P s _115314 c clauses).
Proof. exact (MK_COMB (@lem8409038 A B P) (@lem8409037 A B P s _115314 c clauses)). Qed.
Lemma lem8409040 {A B P : Type'} (s : type557 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4128 A B P s _115314 clauses) = (term4110 A B P s _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8409039 A B P s _115314 c clauses)). Qed.
Lemma lem8409041 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8409042 {A B P : Type'} (s : type557 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4118 A B P s _115314 clauses) = (term4112 A B P s _115314 clauses).
Proof. exact (MK_COMB (@lem8409041 A B) (@lem8409040 A B P s _115314 clauses)). Qed.
Lemma lem8409043 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409044 {A B P : Type'} (s : type557 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4129 A B P s _115314 clauses) = (term4130 A B P s _115314 clauses).
Proof. exact (MK_COMB (@lem8409043) (@lem8409042 A B P s _115314 clauses)). Qed.
Lemma lem8409045 {A B P : Type'} (s : type557 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4121 A B P s _115314 clauses c) = (term4122 A B P s _115314 c clauses).
Proof. exact (eq_refl (term4121 A B P s _115314 clauses c)). Qed.
Lemma lem8409046 {A B P : Type'} (t : type519 A B P) (c : A -> B) : (t c) = (t c).
Proof. exact (eq_refl (t c)). Qed.
Lemma lem8409047 {A B P : Type'} (s : type557 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) (t : type519 A B P) (c : A -> B) : (term4131 A B P s _115314 clauses t c) = (term4132 A B P s _115314 clauses t c).
Proof. exact (MK_COMB (@lem8409045 A B P s _115314 c clauses) (@lem8409046 A B P t c)). Qed.
Lemma lem8409048 {A B P : Type'} (s : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4132 A B P s _115314 clauses t c) = (term4133 A B P s t _115314 c clauses).
Proof. exact (eq_refl (term4132 A B P s _115314 clauses t c)). Qed.
Lemma lem8409049 {A B P : Type'} (s : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4131 A B P s _115314 clauses t c) = (term4133 A B P s t _115314 c clauses).
Proof. exact (TRANS (@lem8409047 A B P s _115314 clauses t c) (@lem8409048 A B P s t _115314 c clauses)). Qed.
Lemma lem8409050 {A B P : Type'} (s : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4134 A B P s _115314 clauses t) = (term4135 A B P s t _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8409049 A B P s t _115314 c clauses)). Qed.
Lemma lem8409051 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8409052 {A B P : Type'} (s : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4136 A B P s _115314 clauses t) = (term4137 A B P s t _115314 clauses).
Proof. exact (MK_COMB (@lem8409051 A B) (@lem8409050 A B P s t _115314 clauses)). Qed.
Lemma lem8409053 {A B P : Type'} (s : type557 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4138 A B P s _115314 clauses) = (term4139 A B P s _115314 clauses).
Proof. exact (fun_ext (fun t : type519 A B P => @lem8409052 A B P s t _115314 clauses)). Qed.
Lemma lem8409054 {A B P : Type'} : (@ex ((A -> B) -> (A -> B) -> P -> B)) = (@ex ((A -> B) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> (A -> B) -> P -> B))). Qed.
Lemma lem8409055 {A B P : Type'} (s : type557 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4119 A B P s _115314 clauses) = (term4140 A B P s _115314 clauses).
Proof. exact (MK_COMB (@lem8409054 A B P) (@lem8409053 A B P s _115314 clauses)). Qed.
Lemma lem8409056 {A B P : Type'} (s : type557 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : ((term4118 A B P s _115314 clauses) = (term4119 A B P s _115314 clauses)) = ((term4112 A B P s _115314 clauses) = (term4140 A B P s _115314 clauses)).
Proof. exact (MK_COMB (@lem8409044 A B P s _115314 clauses) (@lem8409055 A B P s _115314 clauses)). Qed.
Lemma lem8409057 {A B P : Type'} (s : type557 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4112 A B P s _115314 clauses) = (term4140 A B P s _115314 clauses).
Proof. exact (EQ_MP (@lem8409056 A B P s _115314 clauses) (@lem8409031 A B P s _115314 clauses)). Qed.
Lemma lem8409059 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8409060 {A B P : Type'} (P' : type537 A B P) : (term4093 A B P P') = (term4094 A B P P').
Proof. exact (@lem8409059 (A -> B) (P -> A) P'). Qed.
Lemma lem8409061 {A B P : Type'} (s : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4141 A B P s t _115314 clauses) = (term4142 A B P s t _115314 clauses).
Proof. exact (@lem8409060 A B P (term4143 A B P s t _115314 clauses)). Qed.
Lemma lem8409062 {A B P : Type'} (s : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4144 A B P s t _115314 clauses c) = (term4145 A B P s t _115314 c clauses).
Proof. exact (eq_refl (term4144 A B P s t _115314 clauses c)). Qed.
Lemma lem8409063 {A P : Type'} (s' : P -> A) : s' = s'.
Proof. exact (eq_refl s'). Qed.
Lemma lem8409064 {A B P : Type'} (s : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) (s' : P -> A) : (term4146 A B P s t _115314 clauses c s') = (term4147 A B P s t _115314 c clauses s').
Proof. exact (MK_COMB (@lem8409062 A B P s t _115314 c clauses) (@lem8409063 A P s')). Qed.
Lemma lem8409065 {A B P : Type'} (s : type557 A B P) (s' : P -> A) (t : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4147 A B P s t _115314 c clauses s') = (term4148 A B P s s' t _115314 c clauses).
Proof. exact (eq_refl (term4147 A B P s t _115314 c clauses s')). Qed.
Lemma lem8409066 {A B P : Type'} (s : type557 A B P) (s' : P -> A) (t : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4146 A B P s t _115314 clauses c s') = (term4148 A B P s s' t _115314 c clauses).
Proof. exact (TRANS (@lem8409064 A B P s t _115314 c clauses s') (@lem8409065 A B P s s' t _115314 c clauses)). Qed.
Lemma lem8409067 {A B P : Type'} (s : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4149 A B P s t _115314 clauses c) = (term4145 A B P s t _115314 c clauses).
Proof. exact (fun_ext (fun s' : P -> A => @lem8409066 A B P s s' t _115314 c clauses)). Qed.
Lemma lem8409068 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8409069 {A B P : Type'} (s : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4150 A B P s t _115314 clauses c) = (term4133 A B P s t _115314 c clauses).
Proof. exact (MK_COMB (@lem8409068 A P) (@lem8409067 A B P s t _115314 c clauses)). Qed.
Lemma lem8409070 {A B P : Type'} (s : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4151 A B P s t _115314 clauses) = (term4135 A B P s t _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8409069 A B P s t _115314 c clauses)). Qed.
Lemma lem8409071 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8409072 {A B P : Type'} (s : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4141 A B P s t _115314 clauses) = (term4137 A B P s t _115314 clauses).
Proof. exact (MK_COMB (@lem8409071 A B) (@lem8409070 A B P s t _115314 clauses)). Qed.
Lemma lem8409073 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409074 {A B P : Type'} (s : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4152 A B P s t _115314 clauses) = (term4153 A B P s t _115314 clauses).
Proof. exact (MK_COMB (@lem8409073) (@lem8409072 A B P s t _115314 clauses)). Qed.
Lemma lem8409075 {A B P : Type'} (s : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4144 A B P s t _115314 clauses c) = (term4145 A B P s t _115314 c clauses).
Proof. exact (eq_refl (term4144 A B P s t _115314 clauses c)). Qed.
Lemma lem8409076 {A B P : Type'} (s' : type557 A B P) (c : A -> B) : (s' c) = (s' c).
Proof. exact (eq_refl (s' c)). Qed.
Lemma lem8409077 {A B P : Type'} (s : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) (s' : type557 A B P) (c : A -> B) : (term4154 A B P s t _115314 clauses s' c) = (term4155 A B P s t _115314 clauses s' c).
Proof. exact (MK_COMB (@lem8409075 A B P s t _115314 c clauses) (@lem8409076 A B P s' c)). Qed.
Lemma lem8409078 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4155 A B P s t _115314 clauses s' c) = (term4156 A B P s s' t _115314 c clauses).
Proof. exact (eq_refl (term4155 A B P s t _115314 clauses s' c)). Qed.
Lemma lem8409079 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4154 A B P s t _115314 clauses s' c) = (term4156 A B P s s' t _115314 c clauses).
Proof. exact (TRANS (@lem8409077 A B P s t _115314 clauses s' c) (@lem8409078 A B P s s' t _115314 c clauses)). Qed.
Lemma lem8409080 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4157 A B P s t _115314 clauses s') = (term4158 A B P s s' t _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8409079 A B P s s' t _115314 c clauses)). Qed.
Lemma lem8409081 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8409082 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4159 A B P s t _115314 clauses s') = (term4160 A B P s s' t _115314 clauses).
Proof. exact (MK_COMB (@lem8409081 A B) (@lem8409080 A B P s s' t _115314 clauses)). Qed.
Lemma lem8409083 {A B P : Type'} (s : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4161 A B P s t _115314 clauses) = (term4162 A B P s t _115314 clauses).
Proof. exact (fun_ext (fun s' : type557 A B P => @lem8409082 A B P s s' t _115314 clauses)). Qed.
Lemma lem8409084 {A B P : Type'} : (@ex ((A -> B) -> P -> A)) = (@ex ((A -> B) -> P -> A)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> A))). Qed.
Lemma lem8409085 {A B P : Type'} (s : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4142 A B P s t _115314 clauses) = (term4163 A B P s t _115314 clauses).
Proof. exact (MK_COMB (@lem8409084 A B P) (@lem8409083 A B P s t _115314 clauses)). Qed.
Lemma lem8409086 {A B P : Type'} (s : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : ((term4141 A B P s t _115314 clauses) = (term4142 A B P s t _115314 clauses)) = ((term4137 A B P s t _115314 clauses) = (term4163 A B P s t _115314 clauses)).
Proof. exact (MK_COMB (@lem8409074 A B P s t _115314 clauses) (@lem8409085 A B P s t _115314 clauses)). Qed.
Lemma lem8409087 {A B P : Type'} (s : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4137 A B P s t _115314 clauses) = (term4163 A B P s t _115314 clauses).
Proof. exact (EQ_MP (@lem8409086 A B P s t _115314 clauses) (@lem8409061 A B P s t _115314 clauses)). Qed.
Lemma lem8409089 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8409090 {A B P : Type'} (P' : type496 A B P) : (term4116 A B P P') = (term4117 A B P P').
Proof. exact (@lem8409089 (A -> B) (type558 A B P) P'). Qed.
Lemma lem8409091 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4164 A B P s s' t _115314 clauses) = (term4165 A B P s s' t _115314 clauses).
Proof. exact (@lem8409090 A B P (term4166 A B P s s' t _115314 clauses)). Qed.
Lemma lem8409092 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4167 A B P s s' t _115314 clauses c) = (term4168 A B P s s' t _115314 c clauses).
Proof. exact (eq_refl (term4167 A B P s s' t _115314 clauses c)). Qed.
Lemma lem8409093 {A B P : Type'} (t' : type558 A B P) : t' = t'.
Proof. exact (eq_refl t'). Qed.
Lemma lem8409094 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) (t' : type558 A B P) : (term4169 A B P s s' t _115314 clauses c t') = (term4170 A B P s s' t _115314 c clauses t').
Proof. exact (MK_COMB (@lem8409092 A B P s s' t _115314 c clauses) (@lem8409093 A B P t')). Qed.
Lemma lem8409095 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (t' : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4170 A B P s s' t _115314 c clauses t') = (term4171 A B P s s' t t' _115314 c clauses).
Proof. exact (eq_refl (term4170 A B P s s' t _115314 c clauses t')). Qed.
Lemma lem8409096 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (t' : type558 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4169 A B P s s' t _115314 clauses c t') = (term4171 A B P s s' t t' _115314 c clauses).
Proof. exact (TRANS (@lem8409094 A B P s s' t _115314 c clauses t') (@lem8409095 A B P s s' t t' _115314 c clauses)). Qed.
Lemma lem8409097 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4172 A B P s s' t _115314 clauses c) = (term4168 A B P s s' t _115314 c clauses).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8409096 A B P s s' t t' _115314 c clauses)). Qed.
Lemma lem8409098 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8409099 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4173 A B P s s' t _115314 clauses c) = (term4156 A B P s s' t _115314 c clauses).
Proof. exact (MK_COMB (@lem8409098 A B P) (@lem8409097 A B P s s' t _115314 c clauses)). Qed.
Lemma lem8409100 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4174 A B P s s' t _115314 clauses) = (term4158 A B P s s' t _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8409099 A B P s s' t _115314 c clauses)). Qed.
Lemma lem8409101 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8409102 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4164 A B P s s' t _115314 clauses) = (term4160 A B P s s' t _115314 clauses).
Proof. exact (MK_COMB (@lem8409101 A B) (@lem8409100 A B P s s' t _115314 clauses)). Qed.
Lemma lem8409103 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409104 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4175 A B P s s' t _115314 clauses) = (term4176 A B P s s' t _115314 clauses).
Proof. exact (MK_COMB (@lem8409103) (@lem8409102 A B P s s' t _115314 clauses)). Qed.
Lemma lem8409105 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4167 A B P s s' t _115314 clauses c) = (term4168 A B P s s' t _115314 c clauses).
Proof. exact (eq_refl (term4167 A B P s s' t _115314 clauses c)). Qed.
Lemma lem8409106 {A B P : Type'} (t' : type519 A B P) (c : A -> B) : (t' c) = (t' c).
Proof. exact (eq_refl (t' c)). Qed.
Lemma lem8409107 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) (t' : type519 A B P) (c : A -> B) : (term4177 A B P s s' t _115314 clauses t' c) = (term4178 A B P s s' t _115314 clauses t' c).
Proof. exact (MK_COMB (@lem8409105 A B P s s' t _115314 c clauses) (@lem8409106 A B P t' c)). Qed.
Lemma lem8409108 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4178 A B P s s' t _115314 clauses t' c) = (term4179 A B P s s' t t' _115314 c clauses).
Proof. exact (eq_refl (term4178 A B P s s' t _115314 clauses t' c)). Qed.
Lemma lem8409109 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4177 A B P s s' t _115314 clauses t' c) = (term4179 A B P s s' t t' _115314 c clauses).
Proof. exact (TRANS (@lem8409107 A B P s s' t _115314 clauses t' c) (@lem8409108 A B P s s' t t' _115314 c clauses)). Qed.
Lemma lem8409110 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4180 A B P s s' t _115314 clauses t') = (term4181 A B P s s' t t' _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8409109 A B P s s' t t' _115314 c clauses)). Qed.
Lemma lem8409111 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8409112 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4182 A B P s s' t _115314 clauses t') = (term4183 A B P s s' t t' _115314 clauses).
Proof. exact (MK_COMB (@lem8409111 A B) (@lem8409110 A B P s s' t t' _115314 clauses)). Qed.
Lemma lem8409113 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4184 A B P s s' t _115314 clauses) = (term4185 A B P s s' t _115314 clauses).
Proof. exact (fun_ext (fun t' : type519 A B P => @lem8409112 A B P s s' t t' _115314 clauses)). Qed.
Lemma lem8409114 {A B P : Type'} : (@ex ((A -> B) -> (A -> B) -> P -> B)) = (@ex ((A -> B) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> (A -> B) -> P -> B))). Qed.
Lemma lem8409115 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4165 A B P s s' t _115314 clauses) = (term4186 A B P s s' t _115314 clauses).
Proof. exact (MK_COMB (@lem8409114 A B P) (@lem8409113 A B P s s' t _115314 clauses)). Qed.
Lemma lem8409116 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : ((term4164 A B P s s' t _115314 clauses) = (term4165 A B P s s' t _115314 clauses)) = ((term4160 A B P s s' t _115314 clauses) = (term4186 A B P s s' t _115314 clauses)).
Proof. exact (MK_COMB (@lem8409104 A B P s s' t _115314 clauses) (@lem8409115 A B P s s' t _115314 clauses)). Qed.
Lemma lem8409117 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4160 A B P s s' t _115314 clauses) = (term4186 A B P s s' t _115314 clauses).
Proof. exact (EQ_MP (@lem8409116 A B P s s' t _115314 clauses) (@lem8409091 A B P s s' t _115314 clauses)). Qed.
Lemma lem8409119 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8409120 {A B P : Type'} (P' : type560 A B P) : (term4187 A B P P') = (term4188 A B P P').
Proof. exact (@lem8409119 (A -> B) P P'). Qed.
Lemma lem8409121 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4189 A B P s s' t t' _115314 clauses) = (term4190 A B P s s' t t' _115314 clauses).
Proof. exact (@lem8409120 A B P (term4191 A B P s s' t t' _115314 clauses)). Qed.
Lemma lem8409122 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4192 A B P s s' t t' _115314 clauses c) = (term4193 A B P s s' t t' _115314 c clauses).
Proof. exact (eq_refl (term4192 A B P s s' t t' _115314 clauses c)). Qed.
Lemma lem8409123 {P : Type'} (x : P) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8409124 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) (x : P) : (term4194 A B P s s' t t' _115314 clauses c x) = (term4195 A B P s s' t t' _115314 c clauses x).
Proof. exact (MK_COMB (@lem8409122 A B P s s' t t' _115314 c clauses) (@lem8409123 P x)). Qed.
Lemma lem8409125 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : P) (t' : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4195 A B P s s' t t' _115314 c clauses x) = (term4196 A B P s s' t x t' _115314 c clauses).
Proof. exact (eq_refl (term4195 A B P s s' t t' _115314 c clauses x)). Qed.
Lemma lem8409126 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : P) (t' : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4194 A B P s s' t t' _115314 clauses c x) = (term4196 A B P s s' t x t' _115314 c clauses).
Proof. exact (TRANS (@lem8409124 A B P s s' t t' _115314 c clauses x) (@lem8409125 A B P s s' t x t' _115314 c clauses)). Qed.
Lemma lem8409127 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4197 A B P s s' t t' _115314 clauses c) = (term4193 A B P s s' t t' _115314 c clauses).
Proof. exact (fun_ext (fun x : P => @lem8409126 A B P s s' t x t' _115314 c clauses)). Qed.
Lemma lem8409128 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8409129 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4198 A B P s s' t t' _115314 clauses c) = (term4179 A B P s s' t t' _115314 c clauses).
Proof. exact (MK_COMB (@lem8409128 P) (@lem8409127 A B P s s' t t' _115314 c clauses)). Qed.
Lemma lem8409130 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4199 A B P s s' t t' _115314 clauses) = (term4181 A B P s s' t t' _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8409129 A B P s s' t t' _115314 c clauses)). Qed.
Lemma lem8409131 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8409132 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4189 A B P s s' t t' _115314 clauses) = (term4183 A B P s s' t t' _115314 clauses).
Proof. exact (MK_COMB (@lem8409131 A B) (@lem8409130 A B P s s' t t' _115314 clauses)). Qed.
Lemma lem8409133 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409134 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4200 A B P s s' t t' _115314 clauses) = (term4201 A B P s s' t t' _115314 clauses).
Proof. exact (MK_COMB (@lem8409133) (@lem8409132 A B P s s' t t' _115314 clauses)). Qed.
Lemma lem8409135 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4192 A B P s s' t t' _115314 clauses c) = (term4193 A B P s s' t t' _115314 c clauses).
Proof. exact (eq_refl (term4192 A B P s s' t t' _115314 clauses c)). Qed.
Lemma lem8409136 {A B P : Type'} (x : type571 A B P) (c : A -> B) : (x c) = (x c).
Proof. exact (eq_refl (x c)). Qed.
Lemma lem8409137 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) (x : type571 A B P) (c : A -> B) : (term4202 A B P s s' t t' _115314 clauses x c) = (term4203 A B P s s' t t' _115314 clauses x c).
Proof. exact (MK_COMB (@lem8409135 A B P s s' t t' _115314 c clauses) (@lem8409136 A B P x c)). Qed.
Lemma lem8409138 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4203 A B P s s' t t' _115314 clauses x c) = (term4204 A B P s s' t x t' _115314 c clauses).
Proof. exact (eq_refl (term4203 A B P s s' t t' _115314 clauses x c)). Qed.
Lemma lem8409139 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4202 A B P s s' t t' _115314 clauses x c) = (term4204 A B P s s' t x t' _115314 c clauses).
Proof. exact (TRANS (@lem8409137 A B P s s' t t' _115314 clauses x c) (@lem8409138 A B P s s' t x t' _115314 c clauses)). Qed.
Lemma lem8409140 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4205 A B P s s' t t' _115314 clauses x) = (term4206 A B P s s' t x t' _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8409139 A B P s s' t x t' _115314 c clauses)). Qed.
Lemma lem8409141 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8409142 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4207 A B P s s' t t' _115314 clauses x) = (term4208 A B P s s' t x t' _115314 clauses).
Proof. exact (MK_COMB (@lem8409141 A B) (@lem8409140 A B P s s' t x t' _115314 clauses)). Qed.
Lemma lem8409143 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4209 A B P s s' t t' _115314 clauses) = (term4210 A B P s s' t t' _115314 clauses).
Proof. exact (fun_ext (fun x : type571 A B P => @lem8409142 A B P s s' t x t' _115314 clauses)). Qed.
Lemma lem8409144 {A B P : Type'} : (@ex ((A -> B) -> P)) = (@ex ((A -> B) -> P)).
Proof. exact (eq_refl (@ex ((A -> B) -> P))). Qed.
Lemma lem8409145 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4190 A B P s s' t t' _115314 clauses) = (term4211 A B P s s' t t' _115314 clauses).
Proof. exact (MK_COMB (@lem8409144 A B P) (@lem8409143 A B P s s' t t' _115314 clauses)). Qed.
Lemma lem8409146 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : ((term4189 A B P s s' t t' _115314 clauses) = (term4190 A B P s s' t t' _115314 clauses)) = ((term4183 A B P s s' t t' _115314 clauses) = (term4211 A B P s s' t t' _115314 clauses)).
Proof. exact (MK_COMB (@lem8409134 A B P s s' t t' _115314 clauses) (@lem8409145 A B P s s' t t' _115314 clauses)). Qed.
Lemma lem8409147 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4183 A B P s s' t t' _115314 clauses) = (term4211 A B P s s' t t' _115314 clauses).
Proof. exact (EQ_MP (@lem8409146 A B P s s' t t' _115314 clauses) (@lem8409121 A B P s s' t t' _115314 clauses)). Qed.
Lemma lem8409149 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8409150 {A B P : Type'} (P' : type560 A B P) : (term4187 A B P P') = (term4188 A B P P').
Proof. exact (@lem8409149 (A -> B) P P'). Qed.
Lemma lem8409151 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4212 A B P s s' t x t' _115314 clauses) = (term4213 A B P s s' t x t' _115314 clauses).
Proof. exact (@lem8409150 A B P (term4214 A B P s s' t x t' _115314 clauses)). Qed.
Lemma lem8409152 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4215 A B P s s' t x t' _115314 clauses c) = (term4216 A B P s s' t x t' _115314 c clauses).
Proof. exact (eq_refl (term4215 A B P s s' t x t' _115314 clauses c)). Qed.
Lemma lem8409153 {P : Type'} (y : P) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem8409154 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) (y : P) : (term4217 A B P s s' t x t' _115314 clauses c y) = (term4218 A B P s s' t x t' _115314 c clauses y).
Proof. exact (MK_COMB (@lem8409152 A B P s s' t x t' _115314 c clauses) (@lem8409153 P y)). Qed.
Lemma lem8409155 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (y : P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4218 A B P s s' t x t' _115314 c clauses y) = (term4219 A B P s s' t x t' y _115314 c clauses).
Proof. exact (eq_refl (term4218 A B P s s' t x t' _115314 c clauses y)). Qed.
Lemma lem8409156 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (y : P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4217 A B P s s' t x t' _115314 clauses c y) = (term4219 A B P s s' t x t' y _115314 c clauses).
Proof. exact (TRANS (@lem8409154 A B P s s' t x t' _115314 c clauses y) (@lem8409155 A B P s s' t x t' y _115314 c clauses)). Qed.
Lemma lem8409157 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4220 A B P s s' t x t' _115314 clauses c) = (term4216 A B P s s' t x t' _115314 c clauses).
Proof. exact (fun_ext (fun y : P => @lem8409156 A B P s s' t x t' y _115314 c clauses)). Qed.
Lemma lem8409158 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8409159 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4221 A B P s s' t x t' _115314 clauses c) = (term4204 A B P s s' t x t' _115314 c clauses).
Proof. exact (MK_COMB (@lem8409158 P) (@lem8409157 A B P s s' t x t' _115314 c clauses)). Qed.
Lemma lem8409160 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4222 A B P s s' t x t' _115314 clauses) = (term4206 A B P s s' t x t' _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8409159 A B P s s' t x t' _115314 c clauses)). Qed.
Lemma lem8409161 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8409162 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4212 A B P s s' t x t' _115314 clauses) = (term4208 A B P s s' t x t' _115314 clauses).
Proof. exact (MK_COMB (@lem8409161 A B) (@lem8409160 A B P s s' t x t' _115314 clauses)). Qed.
Lemma lem8409163 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409164 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4223 A B P s s' t x t' _115314 clauses) = (term4224 A B P s s' t x t' _115314 clauses).
Proof. exact (MK_COMB (@lem8409163) (@lem8409162 A B P s s' t x t' _115314 clauses)). Qed.
Lemma lem8409165 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4215 A B P s s' t x t' _115314 clauses c) = (term4216 A B P s s' t x t' _115314 c clauses).
Proof. exact (eq_refl (term4215 A B P s s' t x t' _115314 clauses c)). Qed.
Lemma lem8409166 {A B P : Type'} (y : type571 A B P) (c : A -> B) : (y c) = (y c).
Proof. exact (eq_refl (y c)). Qed.
Lemma lem8409167 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) (y : type571 A B P) (c : A -> B) : (term4225 A B P s s' t x t' _115314 clauses y c) = (term4226 A B P s s' t x t' _115314 clauses y c).
Proof. exact (MK_COMB (@lem8409165 A B P s s' t x t' _115314 c clauses) (@lem8409166 A B P y c)). Qed.
Lemma lem8409168 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (y : type571 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4226 A B P s s' t x t' _115314 clauses y c) = (term4227 A B P s s' t x t' y _115314 c clauses).
Proof. exact (eq_refl (term4226 A B P s s' t x t' _115314 clauses y c)). Qed.
Lemma lem8409169 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (y : type571 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term4225 A B P s s' t x t' _115314 clauses y c) = (term4227 A B P s s' t x t' y _115314 c clauses).
Proof. exact (TRANS (@lem8409167 A B P s s' t x t' _115314 clauses y c) (@lem8409168 A B P s s' t x t' y _115314 c clauses)). Qed.
Lemma lem8409170 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (y : type571 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4228 A B P s s' t x t' _115314 clauses y) = (term4229 A B P s s' t x t' y _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8409169 A B P s s' t x t' y _115314 c clauses)). Qed.
Lemma lem8409171 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8409172 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (y : type571 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4230 A B P s s' t x t' _115314 clauses y) = (term4231 A B P s s' t x t' y _115314 clauses).
Proof. exact (MK_COMB (@lem8409171 A B) (@lem8409170 A B P s s' t x t' y _115314 clauses)). Qed.
Lemma lem8409173 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4232 A B P s s' t x t' _115314 clauses) = (term4233 A B P s s' t x t' _115314 clauses).
Proof. exact (fun_ext (fun y : type571 A B P => @lem8409172 A B P s s' t x t' y _115314 clauses)). Qed.
Lemma lem8409174 {A B P : Type'} : (@ex ((A -> B) -> P)) = (@ex ((A -> B) -> P)).
Proof. exact (eq_refl (@ex ((A -> B) -> P))). Qed.
Lemma lem8409175 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4213 A B P s s' t x t' _115314 clauses) = (term4234 A B P s s' t x t' _115314 clauses).
Proof. exact (MK_COMB (@lem8409174 A B P) (@lem8409173 A B P s s' t x t' _115314 clauses)). Qed.
Lemma lem8409176 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : ((term4212 A B P s s' t x t' _115314 clauses) = (term4213 A B P s s' t x t' _115314 clauses)) = ((term4208 A B P s s' t x t' _115314 clauses) = (term4234 A B P s s' t x t' _115314 clauses)).
Proof. exact (MK_COMB (@lem8409164 A B P s s' t x t' _115314 clauses) (@lem8409175 A B P s s' t x t' _115314 clauses)). Qed.
Lemma lem8409177 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (x : type571 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4208 A B P s s' t x t' _115314 clauses) = (term4234 A B P s s' t x t' _115314 clauses).
Proof. exact (EQ_MP (@lem8409176 A B P s s' t x t' _115314 clauses) (@lem8409151 A B P s s' t x t' _115314 clauses)). Qed.
Lemma lem8409178 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4210 A B P s s' t t' _115314 clauses) = (term4235 A B P s s' t t' _115314 clauses).
Proof. exact (fun_ext (fun x : type571 A B P => @lem8409177 A B P s s' t x t' _115314 clauses)). Qed.
Lemma lem8409179 {A B P : Type'} : (@ex ((A -> B) -> P)) = (@ex ((A -> B) -> P)).
Proof. exact (eq_refl (@ex ((A -> B) -> P))). Qed.
Lemma lem8409180 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4211 A B P s s' t t' _115314 clauses) = (term4236 A B P s s' t t' _115314 clauses).
Proof. exact (MK_COMB (@lem8409179 A B P) (@lem8409178 A B P s s' t t' _115314 clauses)). Qed.
Lemma lem8409181 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4183 A B P s s' t t' _115314 clauses) = (term4236 A B P s s' t t' _115314 clauses).
Proof. exact (TRANS (@lem8409147 A B P s s' t t' _115314 clauses) (@lem8409180 A B P s s' t t' _115314 clauses)). Qed.
Lemma lem8409182 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4185 A B P s s' t _115314 clauses) = (term4237 A B P s s' t _115314 clauses).
Proof. exact (fun_ext (fun t' : type519 A B P => @lem8409181 A B P s s' t t' _115314 clauses)). Qed.
Lemma lem8409183 {A B P : Type'} : (@ex ((A -> B) -> (A -> B) -> P -> B)) = (@ex ((A -> B) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> (A -> B) -> P -> B))). Qed.
Lemma lem8409184 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4186 A B P s s' t _115314 clauses) = (term4238 A B P s s' t _115314 clauses).
Proof. exact (MK_COMB (@lem8409183 A B P) (@lem8409182 A B P s s' t _115314 clauses)). Qed.
Lemma lem8409185 {A B P : Type'} (s : type557 A B P) (s' : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4160 A B P s s' t _115314 clauses) = (term4238 A B P s s' t _115314 clauses).
Proof. exact (TRANS (@lem8409117 A B P s s' t _115314 clauses) (@lem8409184 A B P s s' t _115314 clauses)). Qed.
Lemma lem8409186 {A B P : Type'} (s : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4162 A B P s t _115314 clauses) = (term4239 A B P s t _115314 clauses).
Proof. exact (fun_ext (fun s' : type557 A B P => @lem8409185 A B P s s' t _115314 clauses)). Qed.
Lemma lem8409187 {A B P : Type'} : (@ex ((A -> B) -> P -> A)) = (@ex ((A -> B) -> P -> A)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> A))). Qed.
Lemma lem8409188 {A B P : Type'} (s : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4163 A B P s t _115314 clauses) = (term4240 A B P s t _115314 clauses).
Proof. exact (MK_COMB (@lem8409187 A B P) (@lem8409186 A B P s t _115314 clauses)). Qed.
Lemma lem8409189 {A B P : Type'} (s : type557 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4137 A B P s t _115314 clauses) = (term4240 A B P s t _115314 clauses).
Proof. exact (TRANS (@lem8409087 A B P s t _115314 clauses) (@lem8409188 A B P s t _115314 clauses)). Qed.
Lemma lem8409190 {A B P : Type'} (s : type557 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4139 A B P s _115314 clauses) = (term4241 A B P s _115314 clauses).
Proof. exact (fun_ext (fun t : type519 A B P => @lem8409189 A B P s t _115314 clauses)). Qed.
Lemma lem8409191 {A B P : Type'} : (@ex ((A -> B) -> (A -> B) -> P -> B)) = (@ex ((A -> B) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> (A -> B) -> P -> B))). Qed.
Lemma lem8409192 {A B P : Type'} (s : type557 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4140 A B P s _115314 clauses) = (term4242 A B P s _115314 clauses).
Proof. exact (MK_COMB (@lem8409191 A B P) (@lem8409190 A B P s _115314 clauses)). Qed.
Lemma lem8409193 {A B P : Type'} (s : type557 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4112 A B P s _115314 clauses) = (term4242 A B P s _115314 clauses).
Proof. exact (TRANS (@lem8409057 A B P s _115314 clauses) (@lem8409192 A B P s _115314 clauses)). Qed.
Lemma lem8409194 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4114 A B P _115314 clauses) = (term4243 A B P _115314 clauses).
Proof. exact (fun_ext (fun s : type557 A B P => @lem8409193 A B P s _115314 clauses)). Qed.
Lemma lem8409195 {A B P : Type'} : (@ex ((A -> B) -> P -> A)) = (@ex ((A -> B) -> P -> A)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> A))). Qed.
Lemma lem8409196 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4115 A B P _115314 clauses) = (term4244 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8409195 A B P) (@lem8409194 A B P _115314 clauses)). Qed.
Lemma lem8409197 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4092 A B P _115314 clauses) = (term4244 A B P _115314 clauses).
Proof. exact (TRANS (@lem8409027 A B P _115314 clauses) (@lem8409196 A B P _115314 clauses)). Qed.
Lemma lem8409198 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term3986 A B P _115314 clauses) = (term4244 A B P _115314 clauses).
Proof. exact (TRANS (@lem8408997 A B P _115314 clauses) (@lem8409197 A B P _115314 clauses)). Qed.
Lemma lem8409199 {A B P : Type'} (_115314 : type1080 A B P) : (term3987 A B P _115314) = (term4245 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8409198 A B P _115314 clauses)). Qed.
Lemma lem8409200 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8409201 {A B P : Type'} (_115314 : type1080 A B P) : (term3988 A B P _115314) = (term4246 A B P _115314).
Proof. exact (MK_COMB (@lem8409200 A B P) (@lem8409199 A B P _115314)). Qed.
Lemma lem8409203 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8409204 {A B P : Type'} (P' : type1076 A B P) : (term4247 A B P P') = (term4248 A B P P').
Proof. exact (@lem8409203 (type1635 A B P) (type557 A B P) P'). Qed.
Lemma lem8409205 {A B P : Type'} (_115314 : type1080 A B P) : (term4249 A B P _115314) = (term4250 A B P _115314).
Proof. exact (@lem8409204 A B P (term4251 A B P _115314)). Qed.
Lemma lem8409206 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4252 A B P _115314 clauses) = (term4243 A B P _115314 clauses).
Proof. exact (eq_refl (term4252 A B P _115314 clauses)). Qed.
Lemma lem8409207 {A B P : Type'} (s : type557 A B P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8409208 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (s : type557 A B P) : (term4253 A B P _115314 clauses s) = (term4254 A B P _115314 clauses s).
Proof. exact (MK_COMB (@lem8409206 A B P _115314 clauses) (@lem8409207 A B P s)). Qed.
Lemma lem8409209 {A B P : Type'} (s : type557 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4254 A B P _115314 clauses s) = (term4242 A B P s _115314 clauses).
Proof. exact (eq_refl (term4254 A B P _115314 clauses s)). Qed.
Lemma lem8409210 {A B P : Type'} (s : type557 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4253 A B P _115314 clauses s) = (term4242 A B P s _115314 clauses).
Proof. exact (TRANS (@lem8409208 A B P _115314 clauses s) (@lem8409209 A B P s _115314 clauses)). Qed.
Lemma lem8409211 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4255 A B P _115314 clauses) = (term4243 A B P _115314 clauses).
Proof. exact (fun_ext (fun s : type557 A B P => @lem8409210 A B P s _115314 clauses)). Qed.
Lemma lem8409212 {A B P : Type'} : (@ex ((A -> B) -> P -> A)) = (@ex ((A -> B) -> P -> A)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> A))). Qed.
Lemma lem8409213 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4256 A B P _115314 clauses) = (term4244 A B P _115314 clauses).
Proof. exact (MK_COMB (@lem8409212 A B P) (@lem8409211 A B P _115314 clauses)). Qed.
Lemma lem8409214 {A B P : Type'} (_115314 : type1080 A B P) : (term4257 A B P _115314) = (term4245 A B P _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8409213 A B P _115314 clauses)). Qed.
Lemma lem8409215 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8409216 {A B P : Type'} (_115314 : type1080 A B P) : (term4249 A B P _115314) = (term4246 A B P _115314).
Proof. exact (MK_COMB (@lem8409215 A B P) (@lem8409214 A B P _115314)). Qed.
Lemma lem8409217 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409218 {A B P : Type'} (_115314 : type1080 A B P) : (term4258 A B P _115314) = (term4259 A B P _115314).
Proof. exact (MK_COMB (@lem8409217) (@lem8409216 A B P _115314)). Qed.
Lemma lem8409219 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4252 A B P _115314 clauses) = (term4243 A B P _115314 clauses).
Proof. exact (eq_refl (term4252 A B P _115314 clauses)). Qed.
Lemma lem8409220 {A B P : Type'} (s : type1082 A B P) (clauses : type1635 A B P) : (s clauses) = (s clauses).
Proof. exact (eq_refl (s clauses)). Qed.
Lemma lem8409221 {A B P : Type'} (_115314 : type1080 A B P) (s : type1082 A B P) (clauses : type1635 A B P) : (term4260 A B P _115314 s clauses) = (term4261 A B P _115314 s clauses).
Proof. exact (MK_COMB (@lem8409219 A B P _115314 clauses) (@lem8409220 A B P s clauses)). Qed.
Lemma lem8409222 {A B P : Type'} (s : type1082 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4261 A B P _115314 s clauses) = (term4262 A B P s _115314 clauses).
Proof. exact (eq_refl (term4261 A B P _115314 s clauses)). Qed.
Lemma lem8409223 {A B P : Type'} (s : type1082 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4260 A B P _115314 s clauses) = (term4262 A B P s _115314 clauses).
Proof. exact (TRANS (@lem8409221 A B P _115314 s clauses) (@lem8409222 A B P s _115314 clauses)). Qed.
Lemma lem8409224 {A B P : Type'} (s : type1082 A B P) (_115314 : type1080 A B P) : (term4263 A B P _115314 s) = (term4264 A B P s _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8409223 A B P s _115314 clauses)). Qed.
Lemma lem8409225 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8409226 {A B P : Type'} (s : type1082 A B P) (_115314 : type1080 A B P) : (term4265 A B P _115314 s) = (term4266 A B P s _115314).
Proof. exact (MK_COMB (@lem8409225 A B P) (@lem8409224 A B P s _115314)). Qed.
Lemma lem8409227 {A B P : Type'} (_115314 : type1080 A B P) : (term4267 A B P _115314) = (term4268 A B P _115314).
Proof. exact (fun_ext (fun s : type1082 A B P => @lem8409226 A B P s _115314)). Qed.
Lemma lem8409228 {A B P : Type'} : (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A)) = (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A))). Qed.
Lemma lem8409229 {A B P : Type'} (_115314 : type1080 A B P) : (term4250 A B P _115314) = (term4269 A B P _115314).
Proof. exact (MK_COMB (@lem8409228 A B P) (@lem8409227 A B P _115314)). Qed.
Lemma lem8409230 {A B P : Type'} (_115314 : type1080 A B P) : ((term4249 A B P _115314) = (term4250 A B P _115314)) = ((term4246 A B P _115314) = (term4269 A B P _115314)).
Proof. exact (MK_COMB (@lem8409218 A B P _115314) (@lem8409229 A B P _115314)). Qed.
Lemma lem8409231 {A B P : Type'} (_115314 : type1080 A B P) : (term4246 A B P _115314) = (term4269 A B P _115314).
Proof. exact (EQ_MP (@lem8409230 A B P _115314) (@lem8409205 A B P _115314)). Qed.
Lemma lem8409233 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8409234 {A B P : Type'} (P' : type1075 A B P) : (term4270 A B P P') = (term4271 A B P P').
Proof. exact (@lem8409233 (type1635 A B P) (type519 A B P) P'). Qed.
Lemma lem8409235 {A B P : Type'} (s : type1082 A B P) (_115314 : type1080 A B P) : (term4272 A B P s _115314) = (term4273 A B P s _115314).
Proof. exact (@lem8409234 A B P (term4274 A B P s _115314)). Qed.
Lemma lem8409236 {A B P : Type'} (s : type1082 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4275 A B P s _115314 clauses) = (term4276 A B P s _115314 clauses).
Proof. exact (eq_refl (term4275 A B P s _115314 clauses)). Qed.
Lemma lem8409237 {A B P : Type'} (t : type519 A B P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8409238 {A B P : Type'} (s : type1082 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) (t : type519 A B P) : (term4277 A B P s _115314 clauses t) = (term4278 A B P s _115314 clauses t).
Proof. exact (MK_COMB (@lem8409236 A B P s _115314 clauses) (@lem8409237 A B P t)). Qed.
Lemma lem8409239 {A B P : Type'} (s : type1082 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4278 A B P s _115314 clauses t) = (term4279 A B P s t _115314 clauses).
Proof. exact (eq_refl (term4278 A B P s _115314 clauses t)). Qed.
Lemma lem8409240 {A B P : Type'} (s : type1082 A B P) (t : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4277 A B P s _115314 clauses t) = (term4279 A B P s t _115314 clauses).
Proof. exact (TRANS (@lem8409238 A B P s _115314 clauses t) (@lem8409239 A B P s t _115314 clauses)). Qed.
Lemma lem8409241 {A B P : Type'} (s : type1082 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4280 A B P s _115314 clauses) = (term4276 A B P s _115314 clauses).
Proof. exact (fun_ext (fun t : type519 A B P => @lem8409240 A B P s t _115314 clauses)). Qed.
Lemma lem8409242 {A B P : Type'} : (@ex ((A -> B) -> (A -> B) -> P -> B)) = (@ex ((A -> B) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> (A -> B) -> P -> B))). Qed.
Lemma lem8409243 {A B P : Type'} (s : type1082 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4281 A B P s _115314 clauses) = (term4262 A B P s _115314 clauses).
Proof. exact (MK_COMB (@lem8409242 A B P) (@lem8409241 A B P s _115314 clauses)). Qed.
Lemma lem8409244 {A B P : Type'} (s : type1082 A B P) (_115314 : type1080 A B P) : (term4282 A B P s _115314) = (term4264 A B P s _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8409243 A B P s _115314 clauses)). Qed.
Lemma lem8409245 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8409246 {A B P : Type'} (s : type1082 A B P) (_115314 : type1080 A B P) : (term4272 A B P s _115314) = (term4266 A B P s _115314).
Proof. exact (MK_COMB (@lem8409245 A B P) (@lem8409244 A B P s _115314)). Qed.
Lemma lem8409247 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409248 {A B P : Type'} (s : type1082 A B P) (_115314 : type1080 A B P) : (term4283 A B P s _115314) = (term4284 A B P s _115314).
Proof. exact (MK_COMB (@lem8409247) (@lem8409246 A B P s _115314)). Qed.
Lemma lem8409249 {A B P : Type'} (s : type1082 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4275 A B P s _115314 clauses) = (term4276 A B P s _115314 clauses).
Proof. exact (eq_refl (term4275 A B P s _115314 clauses)). Qed.
Lemma lem8409250 {A B P : Type'} (t : type1081 A B P) (clauses : type1635 A B P) : (t clauses) = (t clauses).
Proof. exact (eq_refl (t clauses)). Qed.
Lemma lem8409251 {A B P : Type'} (s : type1082 A B P) (_115314 : type1080 A B P) (t : type1081 A B P) (clauses : type1635 A B P) : (term4285 A B P s _115314 t clauses) = (term4286 A B P s _115314 t clauses).
Proof. exact (MK_COMB (@lem8409249 A B P s _115314 clauses) (@lem8409250 A B P t clauses)). Qed.
Lemma lem8409252 {A B P : Type'} (s : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4286 A B P s _115314 t clauses) = (term4287 A B P s t _115314 clauses).
Proof. exact (eq_refl (term4286 A B P s _115314 t clauses)). Qed.
Lemma lem8409253 {A B P : Type'} (s : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4285 A B P s _115314 t clauses) = (term4287 A B P s t _115314 clauses).
Proof. exact (TRANS (@lem8409251 A B P s _115314 t clauses) (@lem8409252 A B P s t _115314 clauses)). Qed.
Lemma lem8409254 {A B P : Type'} (s : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4288 A B P s _115314 t) = (term4289 A B P s t _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8409253 A B P s t _115314 clauses)). Qed.
Lemma lem8409255 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8409256 {A B P : Type'} (s : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4290 A B P s _115314 t) = (term4291 A B P s t _115314).
Proof. exact (MK_COMB (@lem8409255 A B P) (@lem8409254 A B P s t _115314)). Qed.
Lemma lem8409257 {A B P : Type'} (s : type1082 A B P) (_115314 : type1080 A B P) : (term4292 A B P s _115314) = (term4293 A B P s _115314).
Proof. exact (fun_ext (fun t : type1081 A B P => @lem8409256 A B P s t _115314)). Qed.
Lemma lem8409258 {A B P : Type'} : (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B)) = (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B))). Qed.
Lemma lem8409259 {A B P : Type'} (s : type1082 A B P) (_115314 : type1080 A B P) : (term4273 A B P s _115314) = (term4294 A B P s _115314).
Proof. exact (MK_COMB (@lem8409258 A B P) (@lem8409257 A B P s _115314)). Qed.
Lemma lem8409260 {A B P : Type'} (s : type1082 A B P) (_115314 : type1080 A B P) : ((term4272 A B P s _115314) = (term4273 A B P s _115314)) = ((term4266 A B P s _115314) = (term4294 A B P s _115314)).
Proof. exact (MK_COMB (@lem8409248 A B P s _115314) (@lem8409259 A B P s _115314)). Qed.
Lemma lem8409261 {A B P : Type'} (s : type1082 A B P) (_115314 : type1080 A B P) : (term4266 A B P s _115314) = (term4294 A B P s _115314).
Proof. exact (EQ_MP (@lem8409260 A B P s _115314) (@lem8409235 A B P s _115314)). Qed.
Lemma lem8409263 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8409264 {A B P : Type'} (P' : type1076 A B P) : (term4247 A B P P') = (term4248 A B P P').
Proof. exact (@lem8409263 (type1635 A B P) (type557 A B P) P'). Qed.
Lemma lem8409265 {A B P : Type'} (s : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4295 A B P s t _115314) = (term4296 A B P s t _115314).
Proof. exact (@lem8409264 A B P (term4297 A B P s t _115314)). Qed.
Lemma lem8409266 {A B P : Type'} (s : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4298 A B P s t _115314 clauses) = (term4299 A B P s t _115314 clauses).
Proof. exact (eq_refl (term4298 A B P s t _115314 clauses)). Qed.
Lemma lem8409267 {A B P : Type'} (s' : type557 A B P) : s' = s'.
Proof. exact (eq_refl s'). Qed.
Lemma lem8409268 {A B P : Type'} (s : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) (s' : type557 A B P) : (term4300 A B P s t _115314 clauses s') = (term4301 A B P s t _115314 clauses s').
Proof. exact (MK_COMB (@lem8409266 A B P s t _115314 clauses) (@lem8409267 A B P s')). Qed.
Lemma lem8409269 {A B P : Type'} (s : type1082 A B P) (s' : type557 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4301 A B P s t _115314 clauses s') = (term4302 A B P s s' t _115314 clauses).
Proof. exact (eq_refl (term4301 A B P s t _115314 clauses s')). Qed.
Lemma lem8409270 {A B P : Type'} (s : type1082 A B P) (s' : type557 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4300 A B P s t _115314 clauses s') = (term4302 A B P s s' t _115314 clauses).
Proof. exact (TRANS (@lem8409268 A B P s t _115314 clauses s') (@lem8409269 A B P s s' t _115314 clauses)). Qed.
Lemma lem8409271 {A B P : Type'} (s : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4303 A B P s t _115314 clauses) = (term4299 A B P s t _115314 clauses).
Proof. exact (fun_ext (fun s' : type557 A B P => @lem8409270 A B P s s' t _115314 clauses)). Qed.
Lemma lem8409272 {A B P : Type'} : (@ex ((A -> B) -> P -> A)) = (@ex ((A -> B) -> P -> A)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> A))). Qed.
Lemma lem8409273 {A B P : Type'} (s : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4304 A B P s t _115314 clauses) = (term4287 A B P s t _115314 clauses).
Proof. exact (MK_COMB (@lem8409272 A B P) (@lem8409271 A B P s t _115314 clauses)). Qed.
Lemma lem8409274 {A B P : Type'} (s : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4305 A B P s t _115314) = (term4289 A B P s t _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8409273 A B P s t _115314 clauses)). Qed.
Lemma lem8409275 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8409276 {A B P : Type'} (s : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4295 A B P s t _115314) = (term4291 A B P s t _115314).
Proof. exact (MK_COMB (@lem8409275 A B P) (@lem8409274 A B P s t _115314)). Qed.
Lemma lem8409277 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409278 {A B P : Type'} (s : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4306 A B P s t _115314) = (term4307 A B P s t _115314).
Proof. exact (MK_COMB (@lem8409277) (@lem8409276 A B P s t _115314)). Qed.
Lemma lem8409279 {A B P : Type'} (s : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4298 A B P s t _115314 clauses) = (term4299 A B P s t _115314 clauses).
Proof. exact (eq_refl (term4298 A B P s t _115314 clauses)). Qed.
Lemma lem8409280 {A B P : Type'} (s' : type1082 A B P) (clauses : type1635 A B P) : (s' clauses) = (s' clauses).
Proof. exact (eq_refl (s' clauses)). Qed.
Lemma lem8409281 {A B P : Type'} (s : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) (s' : type1082 A B P) (clauses : type1635 A B P) : (term4308 A B P s t _115314 s' clauses) = (term4309 A B P s t _115314 s' clauses).
Proof. exact (MK_COMB (@lem8409279 A B P s t _115314 clauses) (@lem8409280 A B P s' clauses)). Qed.
Lemma lem8409282 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4309 A B P s t _115314 s' clauses) = (term4310 A B P s s' t _115314 clauses).
Proof. exact (eq_refl (term4309 A B P s t _115314 s' clauses)). Qed.
Lemma lem8409283 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4308 A B P s t _115314 s' clauses) = (term4310 A B P s s' t _115314 clauses).
Proof. exact (TRANS (@lem8409281 A B P s t _115314 s' clauses) (@lem8409282 A B P s s' t _115314 clauses)). Qed.
Lemma lem8409284 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4311 A B P s t _115314 s') = (term4312 A B P s s' t _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8409283 A B P s s' t _115314 clauses)). Qed.
Lemma lem8409285 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8409286 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4313 A B P s t _115314 s') = (term4314 A B P s s' t _115314).
Proof. exact (MK_COMB (@lem8409285 A B P) (@lem8409284 A B P s s' t _115314)). Qed.
Lemma lem8409287 {A B P : Type'} (s : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4315 A B P s t _115314) = (term4316 A B P s t _115314).
Proof. exact (fun_ext (fun s' : type1082 A B P => @lem8409286 A B P s s' t _115314)). Qed.
Lemma lem8409288 {A B P : Type'} : (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A)) = (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A))). Qed.
Lemma lem8409289 {A B P : Type'} (s : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4296 A B P s t _115314) = (term4317 A B P s t _115314).
Proof. exact (MK_COMB (@lem8409288 A B P) (@lem8409287 A B P s t _115314)). Qed.
Lemma lem8409290 {A B P : Type'} (s : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : ((term4295 A B P s t _115314) = (term4296 A B P s t _115314)) = ((term4291 A B P s t _115314) = (term4317 A B P s t _115314)).
Proof. exact (MK_COMB (@lem8409278 A B P s t _115314) (@lem8409289 A B P s t _115314)). Qed.
Lemma lem8409291 {A B P : Type'} (s : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4291 A B P s t _115314) = (term4317 A B P s t _115314).
Proof. exact (EQ_MP (@lem8409290 A B P s t _115314) (@lem8409265 A B P s t _115314)). Qed.
Lemma lem8409293 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8409294 {A B P : Type'} (P' : type1075 A B P) : (term4270 A B P P') = (term4271 A B P P').
Proof. exact (@lem8409293 (type1635 A B P) (type519 A B P) P'). Qed.
Lemma lem8409295 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4318 A B P s s' t _115314) = (term4319 A B P s s' t _115314).
Proof. exact (@lem8409294 A B P (term4320 A B P s s' t _115314)). Qed.
Lemma lem8409296 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4321 A B P s s' t _115314 clauses) = (term4322 A B P s s' t _115314 clauses).
Proof. exact (eq_refl (term4321 A B P s s' t _115314 clauses)). Qed.
Lemma lem8409297 {A B P : Type'} (t' : type519 A B P) : t' = t'.
Proof. exact (eq_refl t'). Qed.
Lemma lem8409298 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) (t' : type519 A B P) : (term4323 A B P s s' t _115314 clauses t') = (term4324 A B P s s' t _115314 clauses t').
Proof. exact (MK_COMB (@lem8409296 A B P s s' t _115314 clauses) (@lem8409297 A B P t')). Qed.
Lemma lem8409299 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4324 A B P s s' t _115314 clauses t') = (term4325 A B P s s' t t' _115314 clauses).
Proof. exact (eq_refl (term4324 A B P s s' t _115314 clauses t')). Qed.
Lemma lem8409300 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (t' : type519 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4323 A B P s s' t _115314 clauses t') = (term4325 A B P s s' t t' _115314 clauses).
Proof. exact (TRANS (@lem8409298 A B P s s' t _115314 clauses t') (@lem8409299 A B P s s' t t' _115314 clauses)). Qed.
Lemma lem8409301 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4326 A B P s s' t _115314 clauses) = (term4322 A B P s s' t _115314 clauses).
Proof. exact (fun_ext (fun t' : type519 A B P => @lem8409300 A B P s s' t t' _115314 clauses)). Qed.
Lemma lem8409302 {A B P : Type'} : (@ex ((A -> B) -> (A -> B) -> P -> B)) = (@ex ((A -> B) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> (A -> B) -> P -> B))). Qed.
Lemma lem8409303 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4327 A B P s s' t _115314 clauses) = (term4310 A B P s s' t _115314 clauses).
Proof. exact (MK_COMB (@lem8409302 A B P) (@lem8409301 A B P s s' t _115314 clauses)). Qed.
Lemma lem8409304 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4328 A B P s s' t _115314) = (term4312 A B P s s' t _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8409303 A B P s s' t _115314 clauses)). Qed.
Lemma lem8409305 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8409306 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4318 A B P s s' t _115314) = (term4314 A B P s s' t _115314).
Proof. exact (MK_COMB (@lem8409305 A B P) (@lem8409304 A B P s s' t _115314)). Qed.
Lemma lem8409307 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409308 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4329 A B P s s' t _115314) = (term4330 A B P s s' t _115314).
Proof. exact (MK_COMB (@lem8409307) (@lem8409306 A B P s s' t _115314)). Qed.
Lemma lem8409309 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4321 A B P s s' t _115314 clauses) = (term4322 A B P s s' t _115314 clauses).
Proof. exact (eq_refl (term4321 A B P s s' t _115314 clauses)). Qed.
Lemma lem8409310 {A B P : Type'} (t' : type1081 A B P) (clauses : type1635 A B P) : (t' clauses) = (t' clauses).
Proof. exact (eq_refl (t' clauses)). Qed.
Lemma lem8409311 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) (t' : type1081 A B P) (clauses : type1635 A B P) : (term4331 A B P s s' t _115314 t' clauses) = (term4332 A B P s s' t _115314 t' clauses).
Proof. exact (MK_COMB (@lem8409309 A B P s s' t _115314 clauses) (@lem8409310 A B P t' clauses)). Qed.
Lemma lem8409312 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4332 A B P s s' t _115314 t' clauses) = (term4333 A B P s s' t t' _115314 clauses).
Proof. exact (eq_refl (term4332 A B P s s' t _115314 t' clauses)). Qed.
Lemma lem8409313 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4331 A B P s s' t _115314 t' clauses) = (term4333 A B P s s' t t' _115314 clauses).
Proof. exact (TRANS (@lem8409311 A B P s s' t _115314 t' clauses) (@lem8409312 A B P s s' t t' _115314 clauses)). Qed.
Lemma lem8409314 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) : (term4334 A B P s s' t _115314 t') = (term4335 A B P s s' t t' _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8409313 A B P s s' t t' _115314 clauses)). Qed.
Lemma lem8409315 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8409316 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) : (term4336 A B P s s' t _115314 t') = (term4337 A B P s s' t t' _115314).
Proof. exact (MK_COMB (@lem8409315 A B P) (@lem8409314 A B P s s' t t' _115314)). Qed.
Lemma lem8409317 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4338 A B P s s' t _115314) = (term4339 A B P s s' t _115314).
Proof. exact (fun_ext (fun t' : type1081 A B P => @lem8409316 A B P s s' t t' _115314)). Qed.
Lemma lem8409318 {A B P : Type'} : (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B)) = (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B))). Qed.
Lemma lem8409319 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4319 A B P s s' t _115314) = (term4340 A B P s s' t _115314).
Proof. exact (MK_COMB (@lem8409318 A B P) (@lem8409317 A B P s s' t _115314)). Qed.
Lemma lem8409320 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : ((term4318 A B P s s' t _115314) = (term4319 A B P s s' t _115314)) = ((term4314 A B P s s' t _115314) = (term4340 A B P s s' t _115314)).
Proof. exact (MK_COMB (@lem8409308 A B P s s' t _115314) (@lem8409319 A B P s s' t _115314)). Qed.
Lemma lem8409321 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4314 A B P s s' t _115314) = (term4340 A B P s s' t _115314).
Proof. exact (EQ_MP (@lem8409320 A B P s s' t _115314) (@lem8409295 A B P s s' t _115314)). Qed.
Lemma lem8409323 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8409324 {A B P : Type'} (P' : type1077 A B P) : (term4341 A B P P') = (term4342 A B P P').
Proof. exact (@lem8409323 (type1635 A B P) (type571 A B P) P'). Qed.
Lemma lem8409325 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) : (term4343 A B P s s' t t' _115314) = (term4344 A B P s s' t t' _115314).
Proof. exact (@lem8409324 A B P (term4345 A B P s s' t t' _115314)). Qed.
Lemma lem8409326 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4346 A B P s s' t t' _115314 clauses) = (term4347 A B P s s' t t' _115314 clauses).
Proof. exact (eq_refl (term4346 A B P s s' t t' _115314 clauses)). Qed.
Lemma lem8409327 {A B P : Type'} (x : type571 A B P) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8409328 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) (x : type571 A B P) : (term4348 A B P s s' t t' _115314 clauses x) = (term4349 A B P s s' t t' _115314 clauses x).
Proof. exact (MK_COMB (@lem8409326 A B P s s' t t' _115314 clauses) (@lem8409327 A B P x)). Qed.
Lemma lem8409329 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type571 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4349 A B P s s' t t' _115314 clauses x) = (term4350 A B P s s' t x t' _115314 clauses).
Proof. exact (eq_refl (term4349 A B P s s' t t' _115314 clauses x)). Qed.
Lemma lem8409330 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type571 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4348 A B P s s' t t' _115314 clauses x) = (term4350 A B P s s' t x t' _115314 clauses).
Proof. exact (TRANS (@lem8409328 A B P s s' t t' _115314 clauses x) (@lem8409329 A B P s s' t x t' _115314 clauses)). Qed.
Lemma lem8409331 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4351 A B P s s' t t' _115314 clauses) = (term4347 A B P s s' t t' _115314 clauses).
Proof. exact (fun_ext (fun x : type571 A B P => @lem8409330 A B P s s' t x t' _115314 clauses)). Qed.
Lemma lem8409332 {A B P : Type'} : (@ex ((A -> B) -> P)) = (@ex ((A -> B) -> P)).
Proof. exact (eq_refl (@ex ((A -> B) -> P))). Qed.
Lemma lem8409333 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4352 A B P s s' t t' _115314 clauses) = (term4333 A B P s s' t t' _115314 clauses).
Proof. exact (MK_COMB (@lem8409332 A B P) (@lem8409331 A B P s s' t t' _115314 clauses)). Qed.
Lemma lem8409334 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) : (term4353 A B P s s' t t' _115314) = (term4335 A B P s s' t t' _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8409333 A B P s s' t t' _115314 clauses)). Qed.
Lemma lem8409335 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8409336 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) : (term4343 A B P s s' t t' _115314) = (term4337 A B P s s' t t' _115314).
Proof. exact (MK_COMB (@lem8409335 A B P) (@lem8409334 A B P s s' t t' _115314)). Qed.
Lemma lem8409337 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409338 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) : (term4354 A B P s s' t t' _115314) = (term4355 A B P s s' t t' _115314).
Proof. exact (MK_COMB (@lem8409337) (@lem8409336 A B P s s' t t' _115314)). Qed.
Lemma lem8409339 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4346 A B P s s' t t' _115314 clauses) = (term4347 A B P s s' t t' _115314 clauses).
Proof. exact (eq_refl (term4346 A B P s s' t t' _115314 clauses)). Qed.
Lemma lem8409340 {A B P : Type'} (x : type1083 A B P) (clauses : type1635 A B P) : (x clauses) = (x clauses).
Proof. exact (eq_refl (x clauses)). Qed.
Lemma lem8409341 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) (x : type1083 A B P) (clauses : type1635 A B P) : (term4356 A B P s s' t t' _115314 x clauses) = (term4357 A B P s s' t t' _115314 x clauses).
Proof. exact (MK_COMB (@lem8409339 A B P s s' t t' _115314 clauses) (@lem8409340 A B P x clauses)). Qed.
Lemma lem8409342 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4357 A B P s s' t t' _115314 x clauses) = (term4358 A B P s s' t x t' _115314 clauses).
Proof. exact (eq_refl (term4357 A B P s s' t t' _115314 x clauses)). Qed.
Lemma lem8409343 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4356 A B P s s' t t' _115314 x clauses) = (term4358 A B P s s' t x t' _115314 clauses).
Proof. exact (TRANS (@lem8409341 A B P s s' t t' _115314 x clauses) (@lem8409342 A B P s s' t x t' _115314 clauses)). Qed.
Lemma lem8409344 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) : (term4359 A B P s s' t t' _115314 x) = (term4360 A B P s s' t x t' _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8409343 A B P s s' t x t' _115314 clauses)). Qed.
Lemma lem8409345 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8409346 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) : (term4361 A B P s s' t t' _115314 x) = (term4362 A B P s s' t x t' _115314).
Proof. exact (MK_COMB (@lem8409345 A B P) (@lem8409344 A B P s s' t x t' _115314)). Qed.
Lemma lem8409347 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) : (term4363 A B P s s' t t' _115314) = (term4364 A B P s s' t t' _115314).
Proof. exact (fun_ext (fun x : type1083 A B P => @lem8409346 A B P s s' t x t' _115314)). Qed.
Lemma lem8409348 {A B P : Type'} : (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P)) = (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P))). Qed.
Lemma lem8409349 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) : (term4344 A B P s s' t t' _115314) = (term4365 A B P s s' t t' _115314).
Proof. exact (MK_COMB (@lem8409348 A B P) (@lem8409347 A B P s s' t t' _115314)). Qed.
Lemma lem8409350 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) : ((term4343 A B P s s' t t' _115314) = (term4344 A B P s s' t t' _115314)) = ((term4337 A B P s s' t t' _115314) = (term4365 A B P s s' t t' _115314)).
Proof. exact (MK_COMB (@lem8409338 A B P s s' t t' _115314) (@lem8409349 A B P s s' t t' _115314)). Qed.
Lemma lem8409351 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) : (term4337 A B P s s' t t' _115314) = (term4365 A B P s s' t t' _115314).
Proof. exact (EQ_MP (@lem8409350 A B P s s' t t' _115314) (@lem8409325 A B P s s' t t' _115314)). Qed.
Lemma lem8409353 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8409354 {A B P : Type'} (P' : type1077 A B P) : (term4341 A B P P') = (term4342 A B P P').
Proof. exact (@lem8409353 (type1635 A B P) (type571 A B P) P'). Qed.
Lemma lem8409355 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) : (term4366 A B P s s' t x t' _115314) = (term4367 A B P s s' t x t' _115314).
Proof. exact (@lem8409354 A B P (term4368 A B P s s' t x t' _115314)). Qed.
Lemma lem8409356 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4369 A B P s s' t x t' _115314 clauses) = (term4370 A B P s s' t x t' _115314 clauses).
Proof. exact (eq_refl (term4369 A B P s s' t x t' _115314 clauses)). Qed.
Lemma lem8409357 {A B P : Type'} (y : type571 A B P) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem8409358 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) (y : type571 A B P) : (term4371 A B P s s' t x t' _115314 clauses y) = (term4372 A B P s s' t x t' _115314 clauses y).
Proof. exact (MK_COMB (@lem8409356 A B P s s' t x t' _115314 clauses) (@lem8409357 A B P y)). Qed.
Lemma lem8409359 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (y : type571 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4372 A B P s s' t x t' _115314 clauses y) = (term4373 A B P s s' t x t' y _115314 clauses).
Proof. exact (eq_refl (term4372 A B P s s' t x t' _115314 clauses y)). Qed.
Lemma lem8409360 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (y : type571 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4371 A B P s s' t x t' _115314 clauses y) = (term4373 A B P s s' t x t' y _115314 clauses).
Proof. exact (TRANS (@lem8409358 A B P s s' t x t' _115314 clauses y) (@lem8409359 A B P s s' t x t' y _115314 clauses)). Qed.
Lemma lem8409361 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4374 A B P s s' t x t' _115314 clauses) = (term4370 A B P s s' t x t' _115314 clauses).
Proof. exact (fun_ext (fun y : type571 A B P => @lem8409360 A B P s s' t x t' y _115314 clauses)). Qed.
Lemma lem8409362 {A B P : Type'} : (@ex ((A -> B) -> P)) = (@ex ((A -> B) -> P)).
Proof. exact (eq_refl (@ex ((A -> B) -> P))). Qed.
Lemma lem8409363 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4375 A B P s s' t x t' _115314 clauses) = (term4358 A B P s s' t x t' _115314 clauses).
Proof. exact (MK_COMB (@lem8409362 A B P) (@lem8409361 A B P s s' t x t' _115314 clauses)). Qed.
Lemma lem8409364 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) : (term4376 A B P s s' t x t' _115314) = (term4360 A B P s s' t x t' _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8409363 A B P s s' t x t' _115314 clauses)). Qed.
Lemma lem8409365 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8409366 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) : (term4366 A B P s s' t x t' _115314) = (term4362 A B P s s' t x t' _115314).
Proof. exact (MK_COMB (@lem8409365 A B P) (@lem8409364 A B P s s' t x t' _115314)). Qed.
Lemma lem8409367 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409368 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) : (term4377 A B P s s' t x t' _115314) = (term4378 A B P s s' t x t' _115314).
Proof. exact (MK_COMB (@lem8409367) (@lem8409366 A B P s s' t x t' _115314)). Qed.
Lemma lem8409369 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4369 A B P s s' t x t' _115314 clauses) = (term4370 A B P s s' t x t' _115314 clauses).
Proof. exact (eq_refl (term4369 A B P s s' t x t' _115314 clauses)). Qed.
Lemma lem8409370 {A B P : Type'} (y : type1083 A B P) (clauses : type1635 A B P) : (y clauses) = (y clauses).
Proof. exact (eq_refl (y clauses)). Qed.
Lemma lem8409371 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) (y : type1083 A B P) (clauses : type1635 A B P) : (term4379 A B P s s' t x t' _115314 y clauses) = (term4380 A B P s s' t x t' _115314 y clauses).
Proof. exact (MK_COMB (@lem8409369 A B P s s' t x t' _115314 clauses) (@lem8409370 A B P y clauses)). Qed.
Lemma lem8409372 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (y : type1083 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4380 A B P s s' t x t' _115314 y clauses) = (term4381 A B P s s' t x t' y _115314 clauses).
Proof. exact (eq_refl (term4380 A B P s s' t x t' _115314 y clauses)). Qed.
Lemma lem8409373 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (y : type1083 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4379 A B P s s' t x t' _115314 y clauses) = (term4381 A B P s s' t x t' y _115314 clauses).
Proof. exact (TRANS (@lem8409371 A B P s s' t x t' _115314 y clauses) (@lem8409372 A B P s s' t x t' y _115314 clauses)). Qed.
Lemma lem8409374 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (y : type1083 A B P) (_115314 : type1080 A B P) : (term4382 A B P s s' t x t' _115314 y) = (term4383 A B P s s' t x t' y _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8409373 A B P s s' t x t' y _115314 clauses)). Qed.
Lemma lem8409375 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8409376 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (y : type1083 A B P) (_115314 : type1080 A B P) : (term4384 A B P s s' t x t' _115314 y) = (term4385 A B P s s' t x t' y _115314).
Proof. exact (MK_COMB (@lem8409375 A B P) (@lem8409374 A B P s s' t x t' y _115314)). Qed.
Lemma lem8409377 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) : (term4386 A B P s s' t x t' _115314) = (term4387 A B P s s' t x t' _115314).
Proof. exact (fun_ext (fun y : type1083 A B P => @lem8409376 A B P s s' t x t' y _115314)). Qed.
Lemma lem8409378 {A B P : Type'} : (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P)) = (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P))). Qed.
Lemma lem8409379 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) : (term4367 A B P s s' t x t' _115314) = (term4388 A B P s s' t x t' _115314).
Proof. exact (MK_COMB (@lem8409378 A B P) (@lem8409377 A B P s s' t x t' _115314)). Qed.
Lemma lem8409380 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) : ((term4366 A B P s s' t x t' _115314) = (term4367 A B P s s' t x t' _115314)) = ((term4362 A B P s s' t x t' _115314) = (term4388 A B P s s' t x t' _115314)).
Proof. exact (MK_COMB (@lem8409368 A B P s s' t x t' _115314) (@lem8409379 A B P s s' t x t' _115314)). Qed.
Lemma lem8409381 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (x : type1083 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) : (term4362 A B P s s' t x t' _115314) = (term4388 A B P s s' t x t' _115314).
Proof. exact (EQ_MP (@lem8409380 A B P s s' t x t' _115314) (@lem8409355 A B P s s' t x t' _115314)). Qed.
Lemma lem8409382 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) : (term4364 A B P s s' t t' _115314) = (term4389 A B P s s' t t' _115314).
Proof. exact (fun_ext (fun x : type1083 A B P => @lem8409381 A B P s s' t x t' _115314)). Qed.
Lemma lem8409383 {A B P : Type'} : (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P)) = (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P))). Qed.
Lemma lem8409384 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) : (term4365 A B P s s' t t' _115314) = (term4390 A B P s s' t t' _115314).
Proof. exact (MK_COMB (@lem8409383 A B P) (@lem8409382 A B P s s' t t' _115314)). Qed.
Lemma lem8409385 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (t' : type1081 A B P) (_115314 : type1080 A B P) : (term4337 A B P s s' t t' _115314) = (term4390 A B P s s' t t' _115314).
Proof. exact (TRANS (@lem8409351 A B P s s' t t' _115314) (@lem8409384 A B P s s' t t' _115314)). Qed.
Lemma lem8409386 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4339 A B P s s' t _115314) = (term4391 A B P s s' t _115314).
Proof. exact (fun_ext (fun t' : type1081 A B P => @lem8409385 A B P s s' t t' _115314)). Qed.
Lemma lem8409387 {A B P : Type'} : (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B)) = (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B))). Qed.
Lemma lem8409388 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4340 A B P s s' t _115314) = (term4392 A B P s s' t _115314).
Proof. exact (MK_COMB (@lem8409387 A B P) (@lem8409386 A B P s s' t _115314)). Qed.
Lemma lem8409389 {A B P : Type'} (s : type1082 A B P) (s' : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4314 A B P s s' t _115314) = (term4392 A B P s s' t _115314).
Proof. exact (TRANS (@lem8409321 A B P s s' t _115314) (@lem8409388 A B P s s' t _115314)). Qed.
Lemma lem8409390 {A B P : Type'} (s : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4316 A B P s t _115314) = (term4393 A B P s t _115314).
Proof. exact (fun_ext (fun s' : type1082 A B P => @lem8409389 A B P s s' t _115314)). Qed.
Lemma lem8409391 {A B P : Type'} : (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A)) = (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A))). Qed.
Lemma lem8409392 {A B P : Type'} (s : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4317 A B P s t _115314) = (term4394 A B P s t _115314).
Proof. exact (MK_COMB (@lem8409391 A B P) (@lem8409390 A B P s t _115314)). Qed.
Lemma lem8409393 {A B P : Type'} (s : type1082 A B P) (t : type1081 A B P) (_115314 : type1080 A B P) : (term4291 A B P s t _115314) = (term4394 A B P s t _115314).
Proof. exact (TRANS (@lem8409291 A B P s t _115314) (@lem8409392 A B P s t _115314)). Qed.
Lemma lem8409394 {A B P : Type'} (s : type1082 A B P) (_115314 : type1080 A B P) : (term4293 A B P s _115314) = (term4395 A B P s _115314).
Proof. exact (fun_ext (fun t : type1081 A B P => @lem8409393 A B P s t _115314)). Qed.
Lemma lem8409395 {A B P : Type'} : (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B)) = (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B))). Qed.
Lemma lem8409396 {A B P : Type'} (s : type1082 A B P) (_115314 : type1080 A B P) : (term4294 A B P s _115314) = (term4396 A B P s _115314).
Proof. exact (MK_COMB (@lem8409395 A B P) (@lem8409394 A B P s _115314)). Qed.
Lemma lem8409397 {A B P : Type'} (s : type1082 A B P) (_115314 : type1080 A B P) : (term4266 A B P s _115314) = (term4396 A B P s _115314).
Proof. exact (TRANS (@lem8409261 A B P s _115314) (@lem8409396 A B P s _115314)). Qed.
Lemma lem8409398 {A B P : Type'} (_115314 : type1080 A B P) : (term4268 A B P _115314) = (term4397 A B P _115314).
Proof. exact (fun_ext (fun s : type1082 A B P => @lem8409397 A B P s _115314)). Qed.
Lemma lem8409399 {A B P : Type'} : (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A)) = (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A))). Qed.
Lemma lem8409400 {A B P : Type'} (_115314 : type1080 A B P) : (term4269 A B P _115314) = (term4398 A B P _115314).
Proof. exact (MK_COMB (@lem8409399 A B P) (@lem8409398 A B P _115314)). Qed.
Lemma lem8409401 {A B P : Type'} (_115314 : type1080 A B P) : (term4246 A B P _115314) = (term4398 A B P _115314).
Proof. exact (TRANS (@lem8409231 A B P _115314) (@lem8409400 A B P _115314)). Qed.
Lemma lem8409403 {A B P : Type'} (_115314 : type1080 A B P) : (term3988 A B P _115314) = (term4398 A B P _115314).
Proof. exact (TRANS (@lem8409201 A B P _115314) (@lem8409401 A B P _115314)). Qed.
Lemma lem8409404 {A B P : Type'} (_115314 : type1080 A B P) : (term413 A B P _115314) = (term4398 A B P _115314).
Proof. exact (TRANS (@lem8408709 A B P _115314) (@lem8409403 A B P _115314)). Qed.
Lemma lem8409405 {A B P : Type'} (_115314 : type1080 A B P) (h1 : term413 A B P _115314) : term4398 A B P _115314.
Proof. exact (EQ_MP (@lem8409404 A B P _115314) (@lem8401043 A B P _115314 h1)). Qed.
Lemma lem8409420 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term3014 B C P clauses s s' t x t' c y) = (term3015 B C P clauses s s' t x t' c y).
Proof. exact (@lem17362 (term3016 B C P t t' clauses s x s' y) ((t c x) = (t' c y))). Qed.
Lemma lem8409421 {P : Type'} (P' : P -> Prop) : (term3017 P P') = (term3018 P P').
Proof. exact (@lem18392 P P'). Qed.
Lemma lem8409422 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3019 B C P clauses s s' t x t' c) = (term3020 B C P clauses s s' t x t' c).
Proof. exact (@lem8409421 P (term371 B C P clauses s s' t x t' c)). Qed.
Lemma lem8409423 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term3021 B C P clauses s s' t x t' c y) = (term370 B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term3021 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8409424 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8409425 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term3022 B C P clauses s s' t x t' c y) = (term3014 B C P clauses s s' t x t' c y).
Proof. exact (MK_COMB (@lem8409424) (@lem8409423 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8409426 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term3022 B C P clauses s s' t x t' c y) = (term3015 B C P clauses s s' t x t' c y).
Proof. exact (TRANS (@lem8409425 B C P clauses s s' t x t' c y) (@lem8409420 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8409427 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3023 B C P clauses s s' t x t' c) = (term3024 B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8409426 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8409428 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8409429 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3020 B C P clauses s s' t x t' c) = (term3025 B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8409428 P) (@lem8409427 B C P clauses s s' t x t' c)). Qed.
Lemma lem8409430 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3019 B C P clauses s s' t x t' c) = (term3025 B C P clauses s s' t x t' c).
Proof. exact (TRANS (@lem8409422 B C P clauses s s' t x t' c) (@lem8409429 B C P clauses s s' t x t' c)). Qed.
Lemma lem8409431 {P : Type'} (P' : P -> Prop) : (term3017 P P') = (term3018 P P').
Proof. exact (@lem18392 P P'). Qed.
Lemma lem8409432 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3026 B C P clauses s s' t t' c) = (term3027 B C P clauses s s' t t' c).
Proof. exact (@lem8409431 P (term373 B C P clauses s s' t t' c)). Qed.
Lemma lem8409433 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3028 B C P clauses s s' t t' c x) = (term372 B C P clauses s s' t x t' c).
Proof. exact (eq_refl (term3028 B C P clauses s s' t t' c x)). Qed.
Lemma lem8409434 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8409435 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3029 B C P clauses s s' t t' c x) = (term3019 B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8409434) (@lem8409433 B C P clauses s s' t x t' c)). Qed.
Lemma lem8409436 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3029 B C P clauses s s' t t' c x) = (term3025 B C P clauses s s' t x t' c).
Proof. exact (TRANS (@lem8409435 B C P clauses s s' t x t' c) (@lem8409430 B C P clauses s s' t x t' c)). Qed.
Lemma lem8409437 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3030 B C P clauses s s' t t' c) = (term3031 B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8409436 B C P clauses s s' t x t' c)). Qed.
Lemma lem8409438 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8409439 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3027 B C P clauses s s' t t' c) = (term3032 B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8409438 P) (@lem8409437 B C P clauses s s' t t' c)). Qed.
Lemma lem8409440 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3026 B C P clauses s s' t t' c) = (term3032 B C P clauses s s' t t' c).
Proof. exact (TRANS (@lem8409432 B C P clauses s s' t t' c) (@lem8409439 B C P clauses s s' t t' c)). Qed.
Lemma lem8409441 {B C P : Type'} (P' : type766 B C P) : (term2022 B C P P') = (term2023 B C P P').
Proof. exact (@lem18392 (type1475 B C P) P'). Qed.
Lemma lem8409442 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term3033 B C P clauses s s' t c) = (term3034 B C P clauses s s' t c).
Proof. exact (@lem8409441 B C P (term375 B C P clauses s s' t c)). Qed.
Lemma lem8409443 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3035 B C P clauses s s' t c t') = (term374 B C P clauses s s' t t' c).
Proof. exact (eq_refl (term3035 B C P clauses s s' t c t')). Qed.
Lemma lem8409444 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8409445 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3036 B C P clauses s s' t c t') = (term3026 B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8409444) (@lem8409443 B C P clauses s s' t t' c)). Qed.
Lemma lem8409446 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3036 B C P clauses s s' t c t') = (term3032 B C P clauses s s' t t' c).
Proof. exact (TRANS (@lem8409445 B C P clauses s s' t t' c) (@lem8409440 B C P clauses s s' t t' c)). Qed.
Lemma lem8409447 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term3037 B C P clauses s s' t c) = (term3038 B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8409446 B C P clauses s s' t t' c)). Qed.
Lemma lem8409448 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8409449 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term3034 B C P clauses s s' t c) = (term3039 B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8409448 B C P) (@lem8409447 B C P clauses s s' t c)). Qed.
Lemma lem8409450 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term3033 B C P clauses s s' t c) = (term3039 B C P clauses s s' t c).
Proof. exact (TRANS (@lem8409442 B C P clauses s s' t c) (@lem8409449 B C P clauses s s' t c)). Qed.
Lemma lem8409451 {B P : Type'} (P' : type805 B P) : (term2032 B P P') = (term2033 B P P').
Proof. exact (@lem18392 (P -> B) P'). Qed.
Lemma lem8409452 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term3040 B C P clauses s t c) = (term3041 B C P clauses s t c).
Proof. exact (@lem8409451 B P (term377 B C P clauses s t c)). Qed.
Lemma lem8409453 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term3042 B C P clauses s t c s') = (term376 B C P clauses s s' t c).
Proof. exact (eq_refl (term3042 B C P clauses s t c s')). Qed.
Lemma lem8409454 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8409455 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term3043 B C P clauses s t c s') = (term3033 B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8409454) (@lem8409453 B C P clauses s s' t c)). Qed.
Lemma lem8409456 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term3043 B C P clauses s t c s') = (term3039 B C P clauses s s' t c).
Proof. exact (TRANS (@lem8409455 B C P clauses s s' t c) (@lem8409450 B C P clauses s s' t c)). Qed.
Lemma lem8409457 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term3044 B C P clauses s t c) = (term3045 B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> B => @lem8409456 B C P clauses s s' t c)). Qed.
Lemma lem8409458 {B P : Type'} : (@ex (P -> B)) = (@ex (P -> B)).
Proof. exact (eq_refl (@ex (P -> B))). Qed.
Lemma lem8409459 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term3041 B C P clauses s t c) = (term3046 B C P clauses s t c).
Proof. exact (MK_COMB (@lem8409458 B P) (@lem8409457 B C P clauses s t c)). Qed.
Lemma lem8409460 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term3040 B C P clauses s t c) = (term3046 B C P clauses s t c).
Proof. exact (TRANS (@lem8409452 B C P clauses s t c) (@lem8409459 B C P clauses s t c)). Qed.
Lemma lem8409461 {B C P : Type'} (P' : type766 B C P) : (term2022 B C P P') = (term2023 B C P P').
Proof. exact (@lem18392 (type1475 B C P) P'). Qed.
Lemma lem8409462 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term3047 B C P clauses s c) = (term3048 B C P clauses s c).
Proof. exact (@lem8409461 B C P (term379 B C P clauses s c)). Qed.
Lemma lem8409463 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term3049 B C P clauses s c t) = (term378 B C P clauses s t c).
Proof. exact (eq_refl (term3049 B C P clauses s c t)). Qed.
Lemma lem8409464 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8409465 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term3050 B C P clauses s c t) = (term3040 B C P clauses s t c).
Proof. exact (MK_COMB (@lem8409464) (@lem8409463 B C P clauses s t c)). Qed.
Lemma lem8409466 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term3050 B C P clauses s c t) = (term3046 B C P clauses s t c).
Proof. exact (TRANS (@lem8409465 B C P clauses s t c) (@lem8409460 B C P clauses s t c)). Qed.
Lemma lem8409467 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term3051 B C P clauses s c) = (term3052 B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8409466 B C P clauses s t c)). Qed.
Lemma lem8409468 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8409469 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term3048 B C P clauses s c) = (term3053 B C P clauses s c).
Proof. exact (MK_COMB (@lem8409468 B C P) (@lem8409467 B C P clauses s c)). Qed.
Lemma lem8409470 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term3047 B C P clauses s c) = (term3053 B C P clauses s c).
Proof. exact (TRANS (@lem8409462 B C P clauses s c) (@lem8409469 B C P clauses s c)). Qed.
Lemma lem8409471 {B P : Type'} (P' : type805 B P) : (term2032 B P P') = (term2033 B P P').
Proof. exact (@lem18392 (P -> B) P'). Qed.
Lemma lem8409472 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term3054 B C P clauses c) = (term3055 B C P clauses c).
Proof. exact (@lem8409471 B P (term381 B C P clauses c)). Qed.
Lemma lem8409473 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term3056 B C P clauses c s) = (term380 B C P clauses s c).
Proof. exact (eq_refl (term3056 B C P clauses c s)). Qed.
Lemma lem8409474 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8409475 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term3057 B C P clauses c s) = (term3047 B C P clauses s c).
Proof. exact (MK_COMB (@lem8409474) (@lem8409473 B C P clauses s c)). Qed.
Lemma lem8409476 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term3057 B C P clauses c s) = (term3053 B C P clauses s c).
Proof. exact (TRANS (@lem8409475 B C P clauses s c) (@lem8409470 B C P clauses s c)). Qed.
Lemma lem8409477 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term3058 B C P clauses c) = (term3059 B C P clauses c).
Proof. exact (fun_ext (fun s : P -> B => @lem8409476 B C P clauses s c)). Qed.
Lemma lem8409478 {B P : Type'} : (@ex (P -> B)) = (@ex (P -> B)).
Proof. exact (eq_refl (@ex (P -> B))). Qed.
Lemma lem8409479 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term3055 B C P clauses c) = (term3060 B C P clauses c).
Proof. exact (MK_COMB (@lem8409478 B P) (@lem8409477 B C P clauses c)). Qed.
Lemma lem8409480 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term3054 B C P clauses c) = (term3060 B C P clauses c).
Proof. exact (TRANS (@lem8409472 B C P clauses c) (@lem8409479 B C P clauses c)). Qed.
Lemma lem8409481 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term528 B C P _115317 c clauses) = (term528 B C P _115317 c clauses).
Proof. exact (eq_refl (term528 B C P _115317 c clauses)). Qed.
Lemma lem8409482 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8409483 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term3061 B C P clauses c) = (term3062 B C P clauses c).
Proof. exact (MK_COMB (@lem8409482) (@lem8409480 B C P clauses c)). Qed.
Lemma lem8409484 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3063 B C P _115317 c clauses) = (term3064 B C P _115317 c clauses).
Proof. exact (MK_COMB (@lem8409483 B C P clauses c) (@lem8409481 B C P _115317 c clauses)). Qed.
Lemma lem8409485 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term529 B C P _115317 c clauses) = (term3063 B C P _115317 c clauses).
Proof. exact (@lem17265 (term382 B C P clauses c) (term528 B C P _115317 c clauses)). Qed.
Lemma lem8409486 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term529 B C P _115317 c clauses) = (term3064 B C P _115317 c clauses).
Proof. exact (TRANS (@lem8409485 B C P _115317 c clauses) (@lem8409484 B C P _115317 c clauses)). Qed.
Lemma lem8409487 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term530 B C P _115317 clauses) = (term3065 B C P _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8409486 B C P _115317 c clauses)). Qed.
Lemma lem8409488 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8409489 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term531 B C P _115317 clauses) = (term3066 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8409488 C) (@lem8409487 B C P _115317 clauses)). Qed.
Lemma lem8409490 {B C P : Type'} (_115317 : type1092 B C P) : (term532 B C P _115317) = (term3067 B C P _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8409489 B C P _115317 clauses)). Qed.
Lemma lem8409491 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8409492 {B C P : Type'} (_115317 : type1092 B C P) : (term533 B C P _115317) = (term3068 B C P _115317).
Proof. exact (MK_COMB (@lem8409491 B C P) (@lem8409490 B C P _115317)). Qed.
Lemma lem8409615 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8409616 {B P : Type'} (P' : type805 B P) (Q : Prop) : (term3071 B P P' Q) = (term3072 B P P' Q).
Proof. exact (@lem8409615 (P -> B) P' Q). Qed.
Lemma lem8409617 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3073 B C P _115317 c clauses) = (term3074 B C P _115317 c clauses).
Proof. exact (@lem8409616 B P (term3059 B C P clauses c) (term528 B C P _115317 c clauses)). Qed.
Lemma lem8409618 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term3075 B C P clauses c s) = (term3053 B C P clauses s c).
Proof. exact (eq_refl (term3075 B C P clauses c s)). Qed.
Lemma lem8409619 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term3076 B C P clauses c) = (term3059 B C P clauses c).
Proof. exact (fun_ext (fun s : P -> B => @lem8409618 B C P clauses s c)). Qed.
Lemma lem8409620 {B P : Type'} : (@ex (P -> B)) = (@ex (P -> B)).
Proof. exact (eq_refl (@ex (P -> B))). Qed.
Lemma lem8409621 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term3077 B C P clauses c) = (term3060 B C P clauses c).
Proof. exact (MK_COMB (@lem8409620 B P) (@lem8409619 B C P clauses c)). Qed.
Lemma lem8409622 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8409623 {B C P : Type'} (clauses : type1636 B C P) (c : C) : (term3078 B C P clauses c) = (term3062 B C P clauses c).
Proof. exact (MK_COMB (@lem8409622) (@lem8409621 B C P clauses c)). Qed.
Lemma lem8409624 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term528 B C P _115317 c clauses) = (term528 B C P _115317 c clauses).
Proof. exact (eq_refl (term528 B C P _115317 c clauses)). Qed.
Lemma lem8409625 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3073 B C P _115317 c clauses) = (term3064 B C P _115317 c clauses).
Proof. exact (MK_COMB (@lem8409623 B C P clauses c) (@lem8409624 B C P _115317 c clauses)). Qed.
Lemma lem8409626 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409627 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3079 B C P _115317 c clauses) = (term3080 B C P _115317 c clauses).
Proof. exact (MK_COMB (@lem8409626) (@lem8409625 B C P _115317 c clauses)). Qed.
Lemma lem8409628 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term3075 B C P clauses c s) = (term3053 B C P clauses s c).
Proof. exact (eq_refl (term3075 B C P clauses c s)). Qed.
Lemma lem8409629 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8409630 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term3081 B C P clauses c s) = (term3082 B C P clauses s c).
Proof. exact (MK_COMB (@lem8409629) (@lem8409628 B C P clauses s c)). Qed.
Lemma lem8409631 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term528 B C P _115317 c clauses) = (term528 B C P _115317 c clauses).
Proof. exact (eq_refl (term528 B C P _115317 c clauses)). Qed.
Lemma lem8409632 {B C P : Type'} (s : P -> B) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3083 B C P s _115317 c clauses) = (term3084 B C P s _115317 c clauses).
Proof. exact (MK_COMB (@lem8409630 B C P clauses s c) (@lem8409631 B C P _115317 c clauses)). Qed.
Lemma lem8409633 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3085 B C P _115317 c clauses) = (term3086 B C P _115317 c clauses).
Proof. exact (fun_ext (fun s : P -> B => @lem8409632 B C P s _115317 c clauses)). Qed.
Lemma lem8409634 {B P : Type'} : (@ex (P -> B)) = (@ex (P -> B)).
Proof. exact (eq_refl (@ex (P -> B))). Qed.
Lemma lem8409635 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3074 B C P _115317 c clauses) = (term3087 B C P _115317 c clauses).
Proof. exact (MK_COMB (@lem8409634 B P) (@lem8409633 B C P _115317 c clauses)). Qed.
Lemma lem8409636 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : ((term3073 B C P _115317 c clauses) = (term3074 B C P _115317 c clauses)) = ((term3064 B C P _115317 c clauses) = (term3087 B C P _115317 c clauses)).
Proof. exact (MK_COMB (@lem8409627 B C P _115317 c clauses) (@lem8409635 B C P _115317 c clauses)). Qed.
Lemma lem8409637 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3064 B C P _115317 c clauses) = (term3087 B C P _115317 c clauses).
Proof. exact (EQ_MP (@lem8409636 B C P _115317 c clauses) (@lem8409617 B C P _115317 c clauses)). Qed.
Lemma lem8409639 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8409640 {B C P : Type'} (P' : type766 B C P) (Q : Prop) : (term3088 B C P P' Q) = (term3089 B C P P' Q).
Proof. exact (@lem8409639 (type1475 B C P) P' Q). Qed.
Lemma lem8409641 {B C P : Type'} (s : P -> B) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3090 B C P s _115317 c clauses) = (term3091 B C P s _115317 c clauses).
Proof. exact (@lem8409640 B C P (term3052 B C P clauses s c) (term528 B C P _115317 c clauses)). Qed.
Lemma lem8409642 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term3092 B C P clauses s c t) = (term3046 B C P clauses s t c).
Proof. exact (eq_refl (term3092 B C P clauses s c t)). Qed.
Lemma lem8409643 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term3093 B C P clauses s c) = (term3052 B C P clauses s c).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8409642 B C P clauses s t c)). Qed.
Lemma lem8409644 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8409645 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term3094 B C P clauses s c) = (term3053 B C P clauses s c).
Proof. exact (MK_COMB (@lem8409644 B C P) (@lem8409643 B C P clauses s c)). Qed.
Lemma lem8409646 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8409647 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (c : C) : (term3095 B C P clauses s c) = (term3082 B C P clauses s c).
Proof. exact (MK_COMB (@lem8409646) (@lem8409645 B C P clauses s c)). Qed.
Lemma lem8409648 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term528 B C P _115317 c clauses) = (term528 B C P _115317 c clauses).
Proof. exact (eq_refl (term528 B C P _115317 c clauses)). Qed.
Lemma lem8409649 {B C P : Type'} (s : P -> B) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3090 B C P s _115317 c clauses) = (term3084 B C P s _115317 c clauses).
Proof. exact (MK_COMB (@lem8409647 B C P clauses s c) (@lem8409648 B C P _115317 c clauses)). Qed.
Lemma lem8409650 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409651 {B C P : Type'} (s : P -> B) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3096 B C P s _115317 c clauses) = (term3097 B C P s _115317 c clauses).
Proof. exact (MK_COMB (@lem8409650) (@lem8409649 B C P s _115317 c clauses)). Qed.
Lemma lem8409652 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term3092 B C P clauses s c t) = (term3046 B C P clauses s t c).
Proof. exact (eq_refl (term3092 B C P clauses s c t)). Qed.
Lemma lem8409653 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8409654 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term3098 B C P clauses s c t) = (term3099 B C P clauses s t c).
Proof. exact (MK_COMB (@lem8409653) (@lem8409652 B C P clauses s t c)). Qed.
Lemma lem8409655 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term528 B C P _115317 c clauses) = (term528 B C P _115317 c clauses).
Proof. exact (eq_refl (term528 B C P _115317 c clauses)). Qed.
Lemma lem8409656 {B C P : Type'} (s : P -> B) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3100 B C P s t _115317 c clauses) = (term3101 B C P s t _115317 c clauses).
Proof. exact (MK_COMB (@lem8409654 B C P clauses s t c) (@lem8409655 B C P _115317 c clauses)). Qed.
Lemma lem8409657 {B C P : Type'} (s : P -> B) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3102 B C P s _115317 c clauses) = (term3103 B C P s _115317 c clauses).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8409656 B C P s t _115317 c clauses)). Qed.
Lemma lem8409658 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8409659 {B C P : Type'} (s : P -> B) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3091 B C P s _115317 c clauses) = (term3104 B C P s _115317 c clauses).
Proof. exact (MK_COMB (@lem8409658 B C P) (@lem8409657 B C P s _115317 c clauses)). Qed.
Lemma lem8409660 {B C P : Type'} (s : P -> B) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : ((term3090 B C P s _115317 c clauses) = (term3091 B C P s _115317 c clauses)) = ((term3084 B C P s _115317 c clauses) = (term3104 B C P s _115317 c clauses)).
Proof. exact (MK_COMB (@lem8409651 B C P s _115317 c clauses) (@lem8409659 B C P s _115317 c clauses)). Qed.
Lemma lem8409661 {B C P : Type'} (s : P -> B) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3084 B C P s _115317 c clauses) = (term3104 B C P s _115317 c clauses).
Proof. exact (EQ_MP (@lem8409660 B C P s _115317 c clauses) (@lem8409641 B C P s _115317 c clauses)). Qed.
Lemma lem8409663 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8409664 {B P : Type'} (P' : type805 B P) (Q : Prop) : (term3071 B P P' Q) = (term3072 B P P' Q).
Proof. exact (@lem8409663 (P -> B) P' Q). Qed.
Lemma lem8409665 {B C P : Type'} (s : P -> B) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3105 B C P s t _115317 c clauses) = (term3106 B C P s t _115317 c clauses).
Proof. exact (@lem8409664 B P (term3045 B C P clauses s t c) (term528 B C P _115317 c clauses)). Qed.
Lemma lem8409666 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term3107 B C P clauses s t c s') = (term3039 B C P clauses s s' t c).
Proof. exact (eq_refl (term3107 B C P clauses s t c s')). Qed.
Lemma lem8409667 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term3108 B C P clauses s t c) = (term3045 B C P clauses s t c).
Proof. exact (fun_ext (fun s' : P -> B => @lem8409666 B C P clauses s s' t c)). Qed.
Lemma lem8409668 {B P : Type'} : (@ex (P -> B)) = (@ex (P -> B)).
Proof. exact (eq_refl (@ex (P -> B))). Qed.
Lemma lem8409669 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term3109 B C P clauses s t c) = (term3046 B C P clauses s t c).
Proof. exact (MK_COMB (@lem8409668 B P) (@lem8409667 B C P clauses s t c)). Qed.
Lemma lem8409670 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8409671 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (t : type1475 B C P) (c : C) : (term3110 B C P clauses s t c) = (term3099 B C P clauses s t c).
Proof. exact (MK_COMB (@lem8409670) (@lem8409669 B C P clauses s t c)). Qed.
Lemma lem8409672 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term528 B C P _115317 c clauses) = (term528 B C P _115317 c clauses).
Proof. exact (eq_refl (term528 B C P _115317 c clauses)). Qed.
Lemma lem8409673 {B C P : Type'} (s : P -> B) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3105 B C P s t _115317 c clauses) = (term3101 B C P s t _115317 c clauses).
Proof. exact (MK_COMB (@lem8409671 B C P clauses s t c) (@lem8409672 B C P _115317 c clauses)). Qed.
Lemma lem8409674 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409675 {B C P : Type'} (s : P -> B) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3111 B C P s t _115317 c clauses) = (term3112 B C P s t _115317 c clauses).
Proof. exact (MK_COMB (@lem8409674) (@lem8409673 B C P s t _115317 c clauses)). Qed.
Lemma lem8409676 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term3107 B C P clauses s t c s') = (term3039 B C P clauses s s' t c).
Proof. exact (eq_refl (term3107 B C P clauses s t c s')). Qed.
Lemma lem8409677 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8409678 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term3113 B C P clauses s t c s') = (term3114 B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8409677) (@lem8409676 B C P clauses s s' t c)). Qed.
Lemma lem8409679 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term528 B C P _115317 c clauses) = (term528 B C P _115317 c clauses).
Proof. exact (eq_refl (term528 B C P _115317 c clauses)). Qed.
Lemma lem8409680 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3115 B C P s t s' _115317 c clauses) = (term3116 B C P s s' t _115317 c clauses).
Proof. exact (MK_COMB (@lem8409678 B C P clauses s s' t c) (@lem8409679 B C P _115317 c clauses)). Qed.
Lemma lem8409681 {B C P : Type'} (s : P -> B) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3117 B C P s t _115317 c clauses) = (term3118 B C P s t _115317 c clauses).
Proof. exact (fun_ext (fun s' : P -> B => @lem8409680 B C P s s' t _115317 c clauses)). Qed.
Lemma lem8409682 {B P : Type'} : (@ex (P -> B)) = (@ex (P -> B)).
Proof. exact (eq_refl (@ex (P -> B))). Qed.
Lemma lem8409683 {B C P : Type'} (s : P -> B) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3106 B C P s t _115317 c clauses) = (term3119 B C P s t _115317 c clauses).
Proof. exact (MK_COMB (@lem8409682 B P) (@lem8409681 B C P s t _115317 c clauses)). Qed.
Lemma lem8409684 {B C P : Type'} (s : P -> B) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : ((term3105 B C P s t _115317 c clauses) = (term3106 B C P s t _115317 c clauses)) = ((term3101 B C P s t _115317 c clauses) = (term3119 B C P s t _115317 c clauses)).
Proof. exact (MK_COMB (@lem8409675 B C P s t _115317 c clauses) (@lem8409683 B C P s t _115317 c clauses)). Qed.
Lemma lem8409685 {B C P : Type'} (s : P -> B) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3101 B C P s t _115317 c clauses) = (term3119 B C P s t _115317 c clauses).
Proof. exact (EQ_MP (@lem8409684 B C P s t _115317 c clauses) (@lem8409665 B C P s t _115317 c clauses)). Qed.
Lemma lem8409687 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8409688 {B C P : Type'} (P' : type766 B C P) (Q : Prop) : (term3088 B C P P' Q) = (term3089 B C P P' Q).
Proof. exact (@lem8409687 (type1475 B C P) P' Q). Qed.
Lemma lem8409689 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3120 B C P s s' t _115317 c clauses) = (term3121 B C P s s' t _115317 c clauses).
Proof. exact (@lem8409688 B C P (term3038 B C P clauses s s' t c) (term528 B C P _115317 c clauses)). Qed.
Lemma lem8409690 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3122 B C P clauses s s' t c t') = (term3032 B C P clauses s s' t t' c).
Proof. exact (eq_refl (term3122 B C P clauses s s' t c t')). Qed.
Lemma lem8409691 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term3123 B C P clauses s s' t c) = (term3038 B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8409690 B C P clauses s s' t t' c)). Qed.
Lemma lem8409692 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8409693 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term3124 B C P clauses s s' t c) = (term3039 B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8409692 B C P) (@lem8409691 B C P clauses s s' t c)). Qed.
Lemma lem8409694 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8409695 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (c : C) : (term3125 B C P clauses s s' t c) = (term3114 B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8409694) (@lem8409693 B C P clauses s s' t c)). Qed.
Lemma lem8409696 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term528 B C P _115317 c clauses) = (term528 B C P _115317 c clauses).
Proof. exact (eq_refl (term528 B C P _115317 c clauses)). Qed.
Lemma lem8409697 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3120 B C P s s' t _115317 c clauses) = (term3116 B C P s s' t _115317 c clauses).
Proof. exact (MK_COMB (@lem8409695 B C P clauses s s' t c) (@lem8409696 B C P _115317 c clauses)). Qed.
Lemma lem8409698 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409699 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3126 B C P s s' t _115317 c clauses) = (term3127 B C P s s' t _115317 c clauses).
Proof. exact (MK_COMB (@lem8409698) (@lem8409697 B C P s s' t _115317 c clauses)). Qed.
Lemma lem8409700 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3122 B C P clauses s s' t c t') = (term3032 B C P clauses s s' t t' c).
Proof. exact (eq_refl (term3122 B C P clauses s s' t c t')). Qed.
Lemma lem8409701 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8409702 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3128 B C P clauses s s' t c t') = (term3129 B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8409701) (@lem8409700 B C P clauses s s' t t' c)). Qed.
Lemma lem8409703 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term528 B C P _115317 c clauses) = (term528 B C P _115317 c clauses).
Proof. exact (eq_refl (term528 B C P _115317 c clauses)). Qed.
Lemma lem8409704 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3130 B C P s s' t t' _115317 c clauses) = (term3131 B C P s s' t t' _115317 c clauses).
Proof. exact (MK_COMB (@lem8409702 B C P clauses s s' t t' c) (@lem8409703 B C P _115317 c clauses)). Qed.
Lemma lem8409705 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3132 B C P s s' t _115317 c clauses) = (term3133 B C P s s' t _115317 c clauses).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8409704 B C P s s' t t' _115317 c clauses)). Qed.
Lemma lem8409706 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8409707 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3121 B C P s s' t _115317 c clauses) = (term3134 B C P s s' t _115317 c clauses).
Proof. exact (MK_COMB (@lem8409706 B C P) (@lem8409705 B C P s s' t _115317 c clauses)). Qed.
Lemma lem8409708 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : ((term3120 B C P s s' t _115317 c clauses) = (term3121 B C P s s' t _115317 c clauses)) = ((term3116 B C P s s' t _115317 c clauses) = (term3134 B C P s s' t _115317 c clauses)).
Proof. exact (MK_COMB (@lem8409699 B C P s s' t _115317 c clauses) (@lem8409707 B C P s s' t _115317 c clauses)). Qed.
Lemma lem8409709 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3116 B C P s s' t _115317 c clauses) = (term3134 B C P s s' t _115317 c clauses).
Proof. exact (EQ_MP (@lem8409708 B C P s s' t _115317 c clauses) (@lem8409689 B C P s s' t _115317 c clauses)). Qed.
Lemma lem8409711 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8409712 {P : Type'} (P' : P -> Prop) (Q : Prop) : (term3069 P P' Q) = (term3070 P P' Q).
Proof. exact (@lem8409711 P P' Q). Qed.
Lemma lem8409713 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3135 B C P s s' t t' _115317 c clauses) = (term3136 B C P s s' t t' _115317 c clauses).
Proof. exact (@lem8409712 P (term3031 B C P clauses s s' t t' c) (term528 B C P _115317 c clauses)). Qed.
Lemma lem8409714 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3137 B C P clauses s s' t t' c x) = (term3025 B C P clauses s s' t x t' c).
Proof. exact (eq_refl (term3137 B C P clauses s s' t t' c x)). Qed.
Lemma lem8409715 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3138 B C P clauses s s' t t' c) = (term3031 B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P => @lem8409714 B C P clauses s s' t x t' c)). Qed.
Lemma lem8409716 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8409717 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3139 B C P clauses s s' t t' c) = (term3032 B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8409716 P) (@lem8409715 B C P clauses s s' t t' c)). Qed.
Lemma lem8409718 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8409719 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (c : C) : (term3140 B C P clauses s s' t t' c) = (term3129 B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8409718) (@lem8409717 B C P clauses s s' t t' c)). Qed.
Lemma lem8409720 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term528 B C P _115317 c clauses) = (term528 B C P _115317 c clauses).
Proof. exact (eq_refl (term528 B C P _115317 c clauses)). Qed.
Lemma lem8409721 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3135 B C P s s' t t' _115317 c clauses) = (term3131 B C P s s' t t' _115317 c clauses).
Proof. exact (MK_COMB (@lem8409719 B C P clauses s s' t t' c) (@lem8409720 B C P _115317 c clauses)). Qed.
Lemma lem8409722 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409723 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3141 B C P s s' t t' _115317 c clauses) = (term3142 B C P s s' t t' _115317 c clauses).
Proof. exact (MK_COMB (@lem8409722) (@lem8409721 B C P s s' t t' _115317 c clauses)). Qed.
Lemma lem8409724 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3137 B C P clauses s s' t t' c x) = (term3025 B C P clauses s s' t x t' c).
Proof. exact (eq_refl (term3137 B C P clauses s s' t t' c x)). Qed.
Lemma lem8409725 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8409726 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3143 B C P clauses s s' t t' c x) = (term3144 B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8409725) (@lem8409724 B C P clauses s s' t x t' c)). Qed.
Lemma lem8409727 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term528 B C P _115317 c clauses) = (term528 B C P _115317 c clauses).
Proof. exact (eq_refl (term528 B C P _115317 c clauses)). Qed.
Lemma lem8409728 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3145 B C P s s' t t' x _115317 c clauses) = (term3146 B C P s s' t x t' _115317 c clauses).
Proof. exact (MK_COMB (@lem8409726 B C P clauses s s' t x t' c) (@lem8409727 B C P _115317 c clauses)). Qed.
Lemma lem8409729 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3147 B C P s s' t t' _115317 c clauses) = (term3148 B C P s s' t t' _115317 c clauses).
Proof. exact (fun_ext (fun x : P => @lem8409728 B C P s s' t x t' _115317 c clauses)). Qed.
Lemma lem8409730 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8409731 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3136 B C P s s' t t' _115317 c clauses) = (term3149 B C P s s' t t' _115317 c clauses).
Proof. exact (MK_COMB (@lem8409730 P) (@lem8409729 B C P s s' t t' _115317 c clauses)). Qed.
Lemma lem8409732 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : ((term3135 B C P s s' t t' _115317 c clauses) = (term3136 B C P s s' t t' _115317 c clauses)) = ((term3131 B C P s s' t t' _115317 c clauses) = (term3149 B C P s s' t t' _115317 c clauses)).
Proof. exact (MK_COMB (@lem8409723 B C P s s' t t' _115317 c clauses) (@lem8409731 B C P s s' t t' _115317 c clauses)). Qed.
Lemma lem8409733 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3131 B C P s s' t t' _115317 c clauses) = (term3149 B C P s s' t t' _115317 c clauses).
Proof. exact (EQ_MP (@lem8409732 B C P s s' t t' _115317 c clauses) (@lem8409713 B C P s s' t t' _115317 c clauses)). Qed.
Lemma lem8409735 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8409736 {P : Type'} (P' : P -> Prop) (Q : Prop) : (term3069 P P' Q) = (term3070 P P' Q).
Proof. exact (@lem8409735 P P' Q). Qed.
Lemma lem8409737 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3150 B C P s s' t x t' _115317 c clauses) = (term3151 B C P s s' t x t' _115317 c clauses).
Proof. exact (@lem8409736 P (term3024 B C P clauses s s' t x t' c) (term528 B C P _115317 c clauses)). Qed.
Lemma lem8409738 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term3152 B C P clauses s s' t x t' c y) = (term3015 B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term3152 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8409739 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3153 B C P clauses s s' t x t' c) = (term3024 B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P => @lem8409738 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8409740 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8409741 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3154 B C P clauses s s' t x t' c) = (term3025 B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8409740 P) (@lem8409739 B C P clauses s s' t x t' c)). Qed.
Lemma lem8409742 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8409743 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) : (term3155 B C P clauses s s' t x t' c) = (term3144 B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8409742) (@lem8409741 B C P clauses s s' t x t' c)). Qed.
Lemma lem8409744 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term528 B C P _115317 c clauses) = (term528 B C P _115317 c clauses).
Proof. exact (eq_refl (term528 B C P _115317 c clauses)). Qed.
Lemma lem8409745 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3150 B C P s s' t x t' _115317 c clauses) = (term3146 B C P s s' t x t' _115317 c clauses).
Proof. exact (MK_COMB (@lem8409743 B C P clauses s s' t x t' c) (@lem8409744 B C P _115317 c clauses)). Qed.
Lemma lem8409746 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409747 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3156 B C P s s' t x t' _115317 c clauses) = (term3157 B C P s s' t x t' _115317 c clauses).
Proof. exact (MK_COMB (@lem8409746) (@lem8409745 B C P s s' t x t' _115317 c clauses)). Qed.
Lemma lem8409748 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term3152 B C P clauses s s' t x t' c y) = (term3015 B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term3152 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8409749 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8409750 {B C P : Type'} (clauses : type1636 B C P) (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (c : C) (y : P) : (term3158 B C P clauses s s' t x t' c y) = (term3159 B C P clauses s s' t x t' c y).
Proof. exact (MK_COMB (@lem8409749) (@lem8409748 B C P clauses s s' t x t' c y)). Qed.
Lemma lem8409751 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term528 B C P _115317 c clauses) = (term528 B C P _115317 c clauses).
Proof. exact (eq_refl (term528 B C P _115317 c clauses)). Qed.
Lemma lem8409752 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (y : P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3160 B C P s s' t x t' y _115317 c clauses) = (term3161 B C P s s' t x t' y _115317 c clauses).
Proof. exact (MK_COMB (@lem8409750 B C P clauses s s' t x t' c y) (@lem8409751 B C P _115317 c clauses)). Qed.
Lemma lem8409753 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3162 B C P s s' t x t' _115317 c clauses) = (term3163 B C P s s' t x t' _115317 c clauses).
Proof. exact (fun_ext (fun y : P => @lem8409752 B C P s s' t x t' y _115317 c clauses)). Qed.
Lemma lem8409754 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8409755 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3151 B C P s s' t x t' _115317 c clauses) = (term3164 B C P s s' t x t' _115317 c clauses).
Proof. exact (MK_COMB (@lem8409754 P) (@lem8409753 B C P s s' t x t' _115317 c clauses)). Qed.
Lemma lem8409756 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : ((term3150 B C P s s' t x t' _115317 c clauses) = (term3151 B C P s s' t x t' _115317 c clauses)) = ((term3146 B C P s s' t x t' _115317 c clauses) = (term3164 B C P s s' t x t' _115317 c clauses)).
Proof. exact (MK_COMB (@lem8409747 B C P s s' t x t' _115317 c clauses) (@lem8409755 B C P s s' t x t' _115317 c clauses)). Qed.
Lemma lem8409757 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (x : P) (t' : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3146 B C P s s' t x t' _115317 c clauses) = (term3164 B C P s s' t x t' _115317 c clauses).
Proof. exact (EQ_MP (@lem8409756 B C P s s' t x t' _115317 c clauses) (@lem8409737 B C P s s' t x t' _115317 c clauses)). Qed.
Lemma lem8409758 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3148 B C P s s' t t' _115317 c clauses) = (term3165 B C P s s' t t' _115317 c clauses).
Proof. exact (fun_ext (fun x : P => @lem8409757 B C P s s' t x t' _115317 c clauses)). Qed.
Lemma lem8409759 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8409760 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3149 B C P s s' t t' _115317 c clauses) = (term3166 B C P s s' t t' _115317 c clauses).
Proof. exact (MK_COMB (@lem8409759 P) (@lem8409758 B C P s s' t t' _115317 c clauses)). Qed.
Lemma lem8409761 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (t' : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3131 B C P s s' t t' _115317 c clauses) = (term3166 B C P s s' t t' _115317 c clauses).
Proof. exact (TRANS (@lem8409733 B C P s s' t t' _115317 c clauses) (@lem8409760 B C P s s' t t' _115317 c clauses)). Qed.
Lemma lem8409762 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3133 B C P s s' t _115317 c clauses) = (term3167 B C P s s' t _115317 c clauses).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8409761 B C P s s' t t' _115317 c clauses)). Qed.
Lemma lem8409763 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8409764 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3134 B C P s s' t _115317 c clauses) = (term3168 B C P s s' t _115317 c clauses).
Proof. exact (MK_COMB (@lem8409763 B C P) (@lem8409762 B C P s s' t _115317 c clauses)). Qed.
Lemma lem8409765 {B C P : Type'} (s : P -> B) (s' : P -> B) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3116 B C P s s' t _115317 c clauses) = (term3168 B C P s s' t _115317 c clauses).
Proof. exact (TRANS (@lem8409709 B C P s s' t _115317 c clauses) (@lem8409764 B C P s s' t _115317 c clauses)). Qed.
Lemma lem8409766 {B C P : Type'} (s : P -> B) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3118 B C P s t _115317 c clauses) = (term3169 B C P s t _115317 c clauses).
Proof. exact (fun_ext (fun s' : P -> B => @lem8409765 B C P s s' t _115317 c clauses)). Qed.
Lemma lem8409767 {B P : Type'} : (@ex (P -> B)) = (@ex (P -> B)).
Proof. exact (eq_refl (@ex (P -> B))). Qed.
Lemma lem8409768 {B C P : Type'} (s : P -> B) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3119 B C P s t _115317 c clauses) = (term3170 B C P s t _115317 c clauses).
Proof. exact (MK_COMB (@lem8409767 B P) (@lem8409766 B C P s t _115317 c clauses)). Qed.
Lemma lem8409769 {B C P : Type'} (s : P -> B) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3101 B C P s t _115317 c clauses) = (term3170 B C P s t _115317 c clauses).
Proof. exact (TRANS (@lem8409685 B C P s t _115317 c clauses) (@lem8409768 B C P s t _115317 c clauses)). Qed.
Lemma lem8409770 {B C P : Type'} (s : P -> B) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3103 B C P s _115317 c clauses) = (term3171 B C P s _115317 c clauses).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8409769 B C P s t _115317 c clauses)). Qed.
Lemma lem8409771 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8409772 {B C P : Type'} (s : P -> B) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3104 B C P s _115317 c clauses) = (term3172 B C P s _115317 c clauses).
Proof. exact (MK_COMB (@lem8409771 B C P) (@lem8409770 B C P s _115317 c clauses)). Qed.
Lemma lem8409773 {B C P : Type'} (s : P -> B) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3084 B C P s _115317 c clauses) = (term3172 B C P s _115317 c clauses).
Proof. exact (TRANS (@lem8409661 B C P s _115317 c clauses) (@lem8409772 B C P s _115317 c clauses)). Qed.
Lemma lem8409774 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3086 B C P _115317 c clauses) = (term3173 B C P _115317 c clauses).
Proof. exact (fun_ext (fun s : P -> B => @lem8409773 B C P s _115317 c clauses)). Qed.
Lemma lem8409775 {B P : Type'} : (@ex (P -> B)) = (@ex (P -> B)).
Proof. exact (eq_refl (@ex (P -> B))). Qed.
Lemma lem8409776 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3087 B C P _115317 c clauses) = (term3174 B C P _115317 c clauses).
Proof. exact (MK_COMB (@lem8409775 B P) (@lem8409774 B C P _115317 c clauses)). Qed.
Lemma lem8409777 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3064 B C P _115317 c clauses) = (term3174 B C P _115317 c clauses).
Proof. exact (TRANS (@lem8409637 B C P _115317 c clauses) (@lem8409776 B C P _115317 c clauses)). Qed.
Lemma lem8409778 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3065 B C P _115317 clauses) = (term3175 B C P _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8409777 B C P _115317 c clauses)). Qed.
Lemma lem8409779 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8409780 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3066 B C P _115317 clauses) = (term3176 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8409779 C) (@lem8409778 B C P _115317 clauses)). Qed.
Lemma lem8409782 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8409783 {B C P : Type'} (P' : type1455 B C P) : (term3177 B C P P') = (term3178 B C P P').
Proof. exact (@lem8409782 C (P -> B) P'). Qed.
Lemma lem8409784 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3179 B C P _115317 clauses) = (term3180 B C P _115317 clauses).
Proof. exact (@lem8409783 B C P (term3181 B C P _115317 clauses)). Qed.
Lemma lem8409785 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3182 B C P _115317 clauses c) = (term3173 B C P _115317 c clauses).
Proof. exact (eq_refl (term3182 B C P _115317 clauses c)). Qed.
Lemma lem8409786 {B P : Type'} (s : P -> B) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8409787 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) (s : P -> B) : (term3183 B C P _115317 clauses c s) = (term3184 B C P _115317 c clauses s).
Proof. exact (MK_COMB (@lem8409785 B C P _115317 c clauses) (@lem8409786 B P s)). Qed.
Lemma lem8409788 {B C P : Type'} (s : P -> B) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3184 B C P _115317 c clauses s) = (term3172 B C P s _115317 c clauses).
Proof. exact (eq_refl (term3184 B C P _115317 c clauses s)). Qed.
Lemma lem8409789 {B C P : Type'} (s : P -> B) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3183 B C P _115317 clauses c s) = (term3172 B C P s _115317 c clauses).
Proof. exact (TRANS (@lem8409787 B C P _115317 c clauses s) (@lem8409788 B C P s _115317 c clauses)). Qed.
Lemma lem8409790 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3185 B C P _115317 clauses c) = (term3173 B C P _115317 c clauses).
Proof. exact (fun_ext (fun s : P -> B => @lem8409789 B C P s _115317 c clauses)). Qed.
Lemma lem8409791 {B P : Type'} : (@ex (P -> B)) = (@ex (P -> B)).
Proof. exact (eq_refl (@ex (P -> B))). Qed.
Lemma lem8409792 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3186 B C P _115317 clauses c) = (term3174 B C P _115317 c clauses).
Proof. exact (MK_COMB (@lem8409791 B P) (@lem8409790 B C P _115317 c clauses)). Qed.
Lemma lem8409793 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3187 B C P _115317 clauses) = (term3175 B C P _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8409792 B C P _115317 c clauses)). Qed.
Lemma lem8409794 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8409795 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3179 B C P _115317 clauses) = (term3176 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8409794 C) (@lem8409793 B C P _115317 clauses)). Qed.
Lemma lem8409796 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409797 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3188 B C P _115317 clauses) = (term3189 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8409796) (@lem8409795 B C P _115317 clauses)). Qed.
Lemma lem8409798 {B C P : Type'} (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3182 B C P _115317 clauses c) = (term3173 B C P _115317 c clauses).
Proof. exact (eq_refl (term3182 B C P _115317 clauses c)). Qed.
Lemma lem8409799 {B C P : Type'} (s : type1475 B C P) (c : C) : (s c) = (s c).
Proof. exact (eq_refl (s c)). Qed.
Lemma lem8409800 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1475 B C P) (c : C) : (term3190 B C P _115317 clauses s c) = (term3191 B C P _115317 clauses s c).
Proof. exact (MK_COMB (@lem8409798 B C P _115317 c clauses) (@lem8409799 B C P s c)). Qed.
Lemma lem8409801 {B C P : Type'} (s : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3191 B C P _115317 clauses s c) = (term3192 B C P s _115317 c clauses).
Proof. exact (eq_refl (term3191 B C P _115317 clauses s c)). Qed.
Lemma lem8409802 {B C P : Type'} (s : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3190 B C P _115317 clauses s c) = (term3192 B C P s _115317 c clauses).
Proof. exact (TRANS (@lem8409800 B C P _115317 clauses s c) (@lem8409801 B C P s _115317 c clauses)). Qed.
Lemma lem8409803 {B C P : Type'} (s : type1475 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3193 B C P _115317 clauses s) = (term3194 B C P s _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8409802 B C P s _115317 c clauses)). Qed.
Lemma lem8409804 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8409805 {B C P : Type'} (s : type1475 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3195 B C P _115317 clauses s) = (term3196 B C P s _115317 clauses).
Proof. exact (MK_COMB (@lem8409804 C) (@lem8409803 B C P s _115317 clauses)). Qed.
Lemma lem8409806 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3197 B C P _115317 clauses) = (term3198 B C P _115317 clauses).
Proof. exact (fun_ext (fun s : type1475 B C P => @lem8409805 B C P s _115317 clauses)). Qed.
Lemma lem8409807 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8409808 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3180 B C P _115317 clauses) = (term3199 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8409807 B C P) (@lem8409806 B C P _115317 clauses)). Qed.
Lemma lem8409809 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : ((term3179 B C P _115317 clauses) = (term3180 B C P _115317 clauses)) = ((term3176 B C P _115317 clauses) = (term3199 B C P _115317 clauses)).
Proof. exact (MK_COMB (@lem8409797 B C P _115317 clauses) (@lem8409808 B C P _115317 clauses)). Qed.
Lemma lem8409810 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3176 B C P _115317 clauses) = (term3199 B C P _115317 clauses).
Proof. exact (EQ_MP (@lem8409809 B C P _115317 clauses) (@lem8409784 B C P _115317 clauses)). Qed.
Lemma lem8409812 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8409813 {B C P : Type'} (P' : type1451 B C P) : (term3200 B C P P') = (term3201 B C P P').
Proof. exact (@lem8409812 C (type1475 B C P) P'). Qed.
Lemma lem8409814 {B C P : Type'} (s : type1475 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3202 B C P s _115317 clauses) = (term3203 B C P s _115317 clauses).
Proof. exact (@lem8409813 B C P (term3204 B C P s _115317 clauses)). Qed.
Lemma lem8409815 {B C P : Type'} (s : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3205 B C P s _115317 clauses c) = (term3206 B C P s _115317 c clauses).
Proof. exact (eq_refl (term3205 B C P s _115317 clauses c)). Qed.
Lemma lem8409816 {B C P : Type'} (t : type1475 B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8409817 {B C P : Type'} (s : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) (t : type1475 B C P) : (term3207 B C P s _115317 clauses c t) = (term3208 B C P s _115317 c clauses t).
Proof. exact (MK_COMB (@lem8409815 B C P s _115317 c clauses) (@lem8409816 B C P t)). Qed.
Lemma lem8409818 {B C P : Type'} (s : type1475 B C P) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3208 B C P s _115317 c clauses t) = (term3209 B C P s t _115317 c clauses).
Proof. exact (eq_refl (term3208 B C P s _115317 c clauses t)). Qed.
Lemma lem8409819 {B C P : Type'} (s : type1475 B C P) (t : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3207 B C P s _115317 clauses c t) = (term3209 B C P s t _115317 c clauses).
Proof. exact (TRANS (@lem8409817 B C P s _115317 c clauses t) (@lem8409818 B C P s t _115317 c clauses)). Qed.
Lemma lem8409820 {B C P : Type'} (s : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3210 B C P s _115317 clauses c) = (term3206 B C P s _115317 c clauses).
Proof. exact (fun_ext (fun t : type1475 B C P => @lem8409819 B C P s t _115317 c clauses)). Qed.
Lemma lem8409821 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8409822 {B C P : Type'} (s : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3211 B C P s _115317 clauses c) = (term3192 B C P s _115317 c clauses).
Proof. exact (MK_COMB (@lem8409821 B C P) (@lem8409820 B C P s _115317 c clauses)). Qed.
Lemma lem8409823 {B C P : Type'} (s : type1475 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3212 B C P s _115317 clauses) = (term3194 B C P s _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8409822 B C P s _115317 c clauses)). Qed.
Lemma lem8409824 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8409825 {B C P : Type'} (s : type1475 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3202 B C P s _115317 clauses) = (term3196 B C P s _115317 clauses).
Proof. exact (MK_COMB (@lem8409824 C) (@lem8409823 B C P s _115317 clauses)). Qed.
Lemma lem8409826 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409827 {B C P : Type'} (s : type1475 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3213 B C P s _115317 clauses) = (term3214 B C P s _115317 clauses).
Proof. exact (MK_COMB (@lem8409826) (@lem8409825 B C P s _115317 clauses)). Qed.
Lemma lem8409828 {B C P : Type'} (s : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3205 B C P s _115317 clauses c) = (term3206 B C P s _115317 c clauses).
Proof. exact (eq_refl (term3205 B C P s _115317 clauses c)). Qed.
Lemma lem8409829 {B C P : Type'} (t : type1473 B C P) (c : C) : (t c) = (t c).
Proof. exact (eq_refl (t c)). Qed.
Lemma lem8409830 {B C P : Type'} (s : type1475 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) (t : type1473 B C P) (c : C) : (term3215 B C P s _115317 clauses t c) = (term3216 B C P s _115317 clauses t c).
Proof. exact (MK_COMB (@lem8409828 B C P s _115317 c clauses) (@lem8409829 B C P t c)). Qed.
Lemma lem8409831 {B C P : Type'} (s : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3216 B C P s _115317 clauses t c) = (term3217 B C P s t _115317 c clauses).
Proof. exact (eq_refl (term3216 B C P s _115317 clauses t c)). Qed.
Lemma lem8409832 {B C P : Type'} (s : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3215 B C P s _115317 clauses t c) = (term3217 B C P s t _115317 c clauses).
Proof. exact (TRANS (@lem8409830 B C P s _115317 clauses t c) (@lem8409831 B C P s t _115317 c clauses)). Qed.
Lemma lem8409833 {B C P : Type'} (s : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3218 B C P s _115317 clauses t) = (term3219 B C P s t _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8409832 B C P s t _115317 c clauses)). Qed.
Lemma lem8409834 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8409835 {B C P : Type'} (s : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3220 B C P s _115317 clauses t) = (term3221 B C P s t _115317 clauses).
Proof. exact (MK_COMB (@lem8409834 C) (@lem8409833 B C P s t _115317 clauses)). Qed.
Lemma lem8409836 {B C P : Type'} (s : type1475 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3222 B C P s _115317 clauses) = (term3223 B C P s _115317 clauses).
Proof. exact (fun_ext (fun t : type1473 B C P => @lem8409835 B C P s t _115317 clauses)). Qed.
Lemma lem8409837 {B C P : Type'} : (@ex (C -> C -> P -> B)) = (@ex (C -> C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> C -> P -> B))). Qed.
Lemma lem8409838 {B C P : Type'} (s : type1475 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3203 B C P s _115317 clauses) = (term3224 B C P s _115317 clauses).
Proof. exact (MK_COMB (@lem8409837 B C P) (@lem8409836 B C P s _115317 clauses)). Qed.
Lemma lem8409839 {B C P : Type'} (s : type1475 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : ((term3202 B C P s _115317 clauses) = (term3203 B C P s _115317 clauses)) = ((term3196 B C P s _115317 clauses) = (term3224 B C P s _115317 clauses)).
Proof. exact (MK_COMB (@lem8409827 B C P s _115317 clauses) (@lem8409838 B C P s _115317 clauses)). Qed.
Lemma lem8409840 {B C P : Type'} (s : type1475 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3196 B C P s _115317 clauses) = (term3224 B C P s _115317 clauses).
Proof. exact (EQ_MP (@lem8409839 B C P s _115317 clauses) (@lem8409814 B C P s _115317 clauses)). Qed.
Lemma lem8409842 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8409843 {B C P : Type'} (P' : type1455 B C P) : (term3177 B C P P') = (term3178 B C P P').
Proof. exact (@lem8409842 C (P -> B) P'). Qed.
Lemma lem8409844 {B C P : Type'} (s : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3225 B C P s t _115317 clauses) = (term3226 B C P s t _115317 clauses).
Proof. exact (@lem8409843 B C P (term3227 B C P s t _115317 clauses)). Qed.
Lemma lem8409845 {B C P : Type'} (s : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3228 B C P s t _115317 clauses c) = (term3229 B C P s t _115317 c clauses).
Proof. exact (eq_refl (term3228 B C P s t _115317 clauses c)). Qed.
Lemma lem8409846 {B P : Type'} (s' : P -> B) : s' = s'.
Proof. exact (eq_refl s'). Qed.
Lemma lem8409847 {B C P : Type'} (s : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) (s' : P -> B) : (term3230 B C P s t _115317 clauses c s') = (term3231 B C P s t _115317 c clauses s').
Proof. exact (MK_COMB (@lem8409845 B C P s t _115317 c clauses) (@lem8409846 B P s')). Qed.
Lemma lem8409848 {B C P : Type'} (s : type1475 B C P) (s' : P -> B) (t : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3231 B C P s t _115317 c clauses s') = (term3232 B C P s s' t _115317 c clauses).
Proof. exact (eq_refl (term3231 B C P s t _115317 c clauses s')). Qed.
Lemma lem8409849 {B C P : Type'} (s : type1475 B C P) (s' : P -> B) (t : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3230 B C P s t _115317 clauses c s') = (term3232 B C P s s' t _115317 c clauses).
Proof. exact (TRANS (@lem8409847 B C P s t _115317 c clauses s') (@lem8409848 B C P s s' t _115317 c clauses)). Qed.
Lemma lem8409850 {B C P : Type'} (s : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3233 B C P s t _115317 clauses c) = (term3229 B C P s t _115317 c clauses).
Proof. exact (fun_ext (fun s' : P -> B => @lem8409849 B C P s s' t _115317 c clauses)). Qed.
Lemma lem8409851 {B P : Type'} : (@ex (P -> B)) = (@ex (P -> B)).
Proof. exact (eq_refl (@ex (P -> B))). Qed.
Lemma lem8409852 {B C P : Type'} (s : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3234 B C P s t _115317 clauses c) = (term3217 B C P s t _115317 c clauses).
Proof. exact (MK_COMB (@lem8409851 B P) (@lem8409850 B C P s t _115317 c clauses)). Qed.
Lemma lem8409853 {B C P : Type'} (s : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3235 B C P s t _115317 clauses) = (term3219 B C P s t _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8409852 B C P s t _115317 c clauses)). Qed.
Lemma lem8409854 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8409855 {B C P : Type'} (s : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3225 B C P s t _115317 clauses) = (term3221 B C P s t _115317 clauses).
Proof. exact (MK_COMB (@lem8409854 C) (@lem8409853 B C P s t _115317 clauses)). Qed.
Lemma lem8409856 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409857 {B C P : Type'} (s : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3236 B C P s t _115317 clauses) = (term3237 B C P s t _115317 clauses).
Proof. exact (MK_COMB (@lem8409856) (@lem8409855 B C P s t _115317 clauses)). Qed.
Lemma lem8409858 {B C P : Type'} (s : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3228 B C P s t _115317 clauses c) = (term3229 B C P s t _115317 c clauses).
Proof. exact (eq_refl (term3228 B C P s t _115317 clauses c)). Qed.
Lemma lem8409859 {B C P : Type'} (s' : type1475 B C P) (c : C) : (s' c) = (s' c).
Proof. exact (eq_refl (s' c)). Qed.
Lemma lem8409860 {B C P : Type'} (s : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) (s' : type1475 B C P) (c : C) : (term3238 B C P s t _115317 clauses s' c) = (term3239 B C P s t _115317 clauses s' c).
Proof. exact (MK_COMB (@lem8409858 B C P s t _115317 c clauses) (@lem8409859 B C P s' c)). Qed.
Lemma lem8409861 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3239 B C P s t _115317 clauses s' c) = (term3240 B C P s s' t _115317 c clauses).
Proof. exact (eq_refl (term3239 B C P s t _115317 clauses s' c)). Qed.
Lemma lem8409862 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3238 B C P s t _115317 clauses s' c) = (term3240 B C P s s' t _115317 c clauses).
Proof. exact (TRANS (@lem8409860 B C P s t _115317 clauses s' c) (@lem8409861 B C P s s' t _115317 c clauses)). Qed.
Lemma lem8409863 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3241 B C P s t _115317 clauses s') = (term3242 B C P s s' t _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8409862 B C P s s' t _115317 c clauses)). Qed.
Lemma lem8409864 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8409865 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3243 B C P s t _115317 clauses s') = (term3244 B C P s s' t _115317 clauses).
Proof. exact (MK_COMB (@lem8409864 C) (@lem8409863 B C P s s' t _115317 clauses)). Qed.
Lemma lem8409866 {B C P : Type'} (s : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3245 B C P s t _115317 clauses) = (term3246 B C P s t _115317 clauses).
Proof. exact (fun_ext (fun s' : type1475 B C P => @lem8409865 B C P s s' t _115317 clauses)). Qed.
Lemma lem8409867 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8409868 {B C P : Type'} (s : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3226 B C P s t _115317 clauses) = (term3247 B C P s t _115317 clauses).
Proof. exact (MK_COMB (@lem8409867 B C P) (@lem8409866 B C P s t _115317 clauses)). Qed.
Lemma lem8409869 {B C P : Type'} (s : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : ((term3225 B C P s t _115317 clauses) = (term3226 B C P s t _115317 clauses)) = ((term3221 B C P s t _115317 clauses) = (term3247 B C P s t _115317 clauses)).
Proof. exact (MK_COMB (@lem8409857 B C P s t _115317 clauses) (@lem8409868 B C P s t _115317 clauses)). Qed.
Lemma lem8409870 {B C P : Type'} (s : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3221 B C P s t _115317 clauses) = (term3247 B C P s t _115317 clauses).
Proof. exact (EQ_MP (@lem8409869 B C P s t _115317 clauses) (@lem8409844 B C P s t _115317 clauses)). Qed.
Lemma lem8409872 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8409873 {B C P : Type'} (P' : type1451 B C P) : (term3200 B C P P') = (term3201 B C P P').
Proof. exact (@lem8409872 C (type1475 B C P) P'). Qed.
Lemma lem8409874 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3248 B C P s s' t _115317 clauses) = (term3249 B C P s s' t _115317 clauses).
Proof. exact (@lem8409873 B C P (term3250 B C P s s' t _115317 clauses)). Qed.
Lemma lem8409875 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3251 B C P s s' t _115317 clauses c) = (term3252 B C P s s' t _115317 c clauses).
Proof. exact (eq_refl (term3251 B C P s s' t _115317 clauses c)). Qed.
Lemma lem8409876 {B C P : Type'} (t' : type1475 B C P) : t' = t'.
Proof. exact (eq_refl t'). Qed.
Lemma lem8409877 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) (t' : type1475 B C P) : (term3253 B C P s s' t _115317 clauses c t') = (term3254 B C P s s' t _115317 c clauses t').
Proof. exact (MK_COMB (@lem8409875 B C P s s' t _115317 c clauses) (@lem8409876 B C P t')). Qed.
Lemma lem8409878 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (t' : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3254 B C P s s' t _115317 c clauses t') = (term3255 B C P s s' t t' _115317 c clauses).
Proof. exact (eq_refl (term3254 B C P s s' t _115317 c clauses t')). Qed.
Lemma lem8409879 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (t' : type1475 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3253 B C P s s' t _115317 clauses c t') = (term3255 B C P s s' t t' _115317 c clauses).
Proof. exact (TRANS (@lem8409877 B C P s s' t _115317 c clauses t') (@lem8409878 B C P s s' t t' _115317 c clauses)). Qed.
Lemma lem8409880 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3256 B C P s s' t _115317 clauses c) = (term3252 B C P s s' t _115317 c clauses).
Proof. exact (fun_ext (fun t' : type1475 B C P => @lem8409879 B C P s s' t t' _115317 c clauses)). Qed.
Lemma lem8409881 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8409882 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3257 B C P s s' t _115317 clauses c) = (term3240 B C P s s' t _115317 c clauses).
Proof. exact (MK_COMB (@lem8409881 B C P) (@lem8409880 B C P s s' t _115317 c clauses)). Qed.
Lemma lem8409883 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3258 B C P s s' t _115317 clauses) = (term3242 B C P s s' t _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8409882 B C P s s' t _115317 c clauses)). Qed.
Lemma lem8409884 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8409885 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3248 B C P s s' t _115317 clauses) = (term3244 B C P s s' t _115317 clauses).
Proof. exact (MK_COMB (@lem8409884 C) (@lem8409883 B C P s s' t _115317 clauses)). Qed.
Lemma lem8409886 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409887 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3259 B C P s s' t _115317 clauses) = (term3260 B C P s s' t _115317 clauses).
Proof. exact (MK_COMB (@lem8409886) (@lem8409885 B C P s s' t _115317 clauses)). Qed.
Lemma lem8409888 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3251 B C P s s' t _115317 clauses c) = (term3252 B C P s s' t _115317 c clauses).
Proof. exact (eq_refl (term3251 B C P s s' t _115317 clauses c)). Qed.
Lemma lem8409889 {B C P : Type'} (t' : type1473 B C P) (c : C) : (t' c) = (t' c).
Proof. exact (eq_refl (t' c)). Qed.
Lemma lem8409890 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) (t' : type1473 B C P) (c : C) : (term3261 B C P s s' t _115317 clauses t' c) = (term3262 B C P s s' t _115317 clauses t' c).
Proof. exact (MK_COMB (@lem8409888 B C P s s' t _115317 c clauses) (@lem8409889 B C P t' c)). Qed.
Lemma lem8409891 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (t' : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3262 B C P s s' t _115317 clauses t' c) = (term3263 B C P s s' t t' _115317 c clauses).
Proof. exact (eq_refl (term3262 B C P s s' t _115317 clauses t' c)). Qed.
Lemma lem8409892 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (t' : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3261 B C P s s' t _115317 clauses t' c) = (term3263 B C P s s' t t' _115317 c clauses).
Proof. exact (TRANS (@lem8409890 B C P s s' t _115317 clauses t' c) (@lem8409891 B C P s s' t t' _115317 c clauses)). Qed.
Lemma lem8409893 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3264 B C P s s' t _115317 clauses t') = (term3265 B C P s s' t t' _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8409892 B C P s s' t t' _115317 c clauses)). Qed.
Lemma lem8409894 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8409895 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3266 B C P s s' t _115317 clauses t') = (term3267 B C P s s' t t' _115317 clauses).
Proof. exact (MK_COMB (@lem8409894 C) (@lem8409893 B C P s s' t t' _115317 clauses)). Qed.
Lemma lem8409896 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3268 B C P s s' t _115317 clauses) = (term3269 B C P s s' t _115317 clauses).
Proof. exact (fun_ext (fun t' : type1473 B C P => @lem8409895 B C P s s' t t' _115317 clauses)). Qed.
Lemma lem8409897 {B C P : Type'} : (@ex (C -> C -> P -> B)) = (@ex (C -> C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> C -> P -> B))). Qed.
Lemma lem8409898 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3249 B C P s s' t _115317 clauses) = (term3270 B C P s s' t _115317 clauses).
Proof. exact (MK_COMB (@lem8409897 B C P) (@lem8409896 B C P s s' t _115317 clauses)). Qed.
Lemma lem8409899 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : ((term3248 B C P s s' t _115317 clauses) = (term3249 B C P s s' t _115317 clauses)) = ((term3244 B C P s s' t _115317 clauses) = (term3270 B C P s s' t _115317 clauses)).
Proof. exact (MK_COMB (@lem8409887 B C P s s' t _115317 clauses) (@lem8409898 B C P s s' t _115317 clauses)). Qed.
Lemma lem8409900 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3244 B C P s s' t _115317 clauses) = (term3270 B C P s s' t _115317 clauses).
Proof. exact (EQ_MP (@lem8409899 B C P s s' t _115317 clauses) (@lem8409874 B C P s s' t _115317 clauses)). Qed.
Lemma lem8409902 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8409903 {C P : Type'} (P' : type1413 C P) : (term1174 C P P') = (term1175 C P P').
Proof. exact (@lem8409902 C P P'). Qed.
Lemma lem8409904 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3271 B C P s s' t t' _115317 clauses) = (term3272 B C P s s' t t' _115317 clauses).
Proof. exact (@lem8409903 C P (term3273 B C P s s' t t' _115317 clauses)). Qed.
Lemma lem8409905 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (t' : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3274 B C P s s' t t' _115317 clauses c) = (term3275 B C P s s' t t' _115317 c clauses).
Proof. exact (eq_refl (term3274 B C P s s' t t' _115317 clauses c)). Qed.
Lemma lem8409906 {P : Type'} (x : P) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8409907 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (t' : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) (x : P) : (term3276 B C P s s' t t' _115317 clauses c x) = (term3277 B C P s s' t t' _115317 c clauses x).
Proof. exact (MK_COMB (@lem8409905 B C P s s' t t' _115317 c clauses) (@lem8409906 P x)). Qed.
Lemma lem8409908 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : P) (t' : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3277 B C P s s' t t' _115317 c clauses x) = (term3278 B C P s s' t x t' _115317 c clauses).
Proof. exact (eq_refl (term3277 B C P s s' t t' _115317 c clauses x)). Qed.
Lemma lem8409909 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : P) (t' : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3276 B C P s s' t t' _115317 clauses c x) = (term3278 B C P s s' t x t' _115317 c clauses).
Proof. exact (TRANS (@lem8409907 B C P s s' t t' _115317 c clauses x) (@lem8409908 B C P s s' t x t' _115317 c clauses)). Qed.
Lemma lem8409910 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (t' : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3279 B C P s s' t t' _115317 clauses c) = (term3275 B C P s s' t t' _115317 c clauses).
Proof. exact (fun_ext (fun x : P => @lem8409909 B C P s s' t x t' _115317 c clauses)). Qed.
Lemma lem8409911 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8409912 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (t' : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3280 B C P s s' t t' _115317 clauses c) = (term3263 B C P s s' t t' _115317 c clauses).
Proof. exact (MK_COMB (@lem8409911 P) (@lem8409910 B C P s s' t t' _115317 c clauses)). Qed.
Lemma lem8409913 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3281 B C P s s' t t' _115317 clauses) = (term3265 B C P s s' t t' _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8409912 B C P s s' t t' _115317 c clauses)). Qed.
Lemma lem8409914 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8409915 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3271 B C P s s' t t' _115317 clauses) = (term3267 B C P s s' t t' _115317 clauses).
Proof. exact (MK_COMB (@lem8409914 C) (@lem8409913 B C P s s' t t' _115317 clauses)). Qed.
Lemma lem8409916 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409917 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3282 B C P s s' t t' _115317 clauses) = (term3283 B C P s s' t t' _115317 clauses).
Proof. exact (MK_COMB (@lem8409916) (@lem8409915 B C P s s' t t' _115317 clauses)). Qed.
Lemma lem8409918 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (t' : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3274 B C P s s' t t' _115317 clauses c) = (term3275 B C P s s' t t' _115317 c clauses).
Proof. exact (eq_refl (term3274 B C P s s' t t' _115317 clauses c)). Qed.
Lemma lem8409919 {C P : Type'} (x : C -> P) (c : C) : (x c) = (x c).
Proof. exact (eq_refl (x c)). Qed.
Lemma lem8409920 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) (x : C -> P) (c : C) : (term3284 B C P s s' t t' _115317 clauses x c) = (term3285 B C P s s' t t' _115317 clauses x c).
Proof. exact (MK_COMB (@lem8409918 B C P s s' t t' _115317 c clauses) (@lem8409919 C P x c)). Qed.
Lemma lem8409921 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3285 B C P s s' t t' _115317 clauses x c) = (term3286 B C P s s' t x t' _115317 c clauses).
Proof. exact (eq_refl (term3285 B C P s s' t t' _115317 clauses x c)). Qed.
Lemma lem8409922 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3284 B C P s s' t t' _115317 clauses x c) = (term3286 B C P s s' t x t' _115317 c clauses).
Proof. exact (TRANS (@lem8409920 B C P s s' t t' _115317 clauses x c) (@lem8409921 B C P s s' t x t' _115317 c clauses)). Qed.
Lemma lem8409923 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3287 B C P s s' t t' _115317 clauses x) = (term3288 B C P s s' t x t' _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8409922 B C P s s' t x t' _115317 c clauses)). Qed.
Lemma lem8409924 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8409925 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3289 B C P s s' t t' _115317 clauses x) = (term3290 B C P s s' t x t' _115317 clauses).
Proof. exact (MK_COMB (@lem8409924 C) (@lem8409923 B C P s s' t x t' _115317 clauses)). Qed.
Lemma lem8409926 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3291 B C P s s' t t' _115317 clauses) = (term3292 B C P s s' t t' _115317 clauses).
Proof. exact (fun_ext (fun x : C -> P => @lem8409925 B C P s s' t x t' _115317 clauses)). Qed.
Lemma lem8409927 {C P : Type'} : (@ex (C -> P)) = (@ex (C -> P)).
Proof. exact (eq_refl (@ex (C -> P))). Qed.
Lemma lem8409928 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3272 B C P s s' t t' _115317 clauses) = (term3293 B C P s s' t t' _115317 clauses).
Proof. exact (MK_COMB (@lem8409927 C P) (@lem8409926 B C P s s' t t' _115317 clauses)). Qed.
Lemma lem8409929 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : ((term3271 B C P s s' t t' _115317 clauses) = (term3272 B C P s s' t t' _115317 clauses)) = ((term3267 B C P s s' t t' _115317 clauses) = (term3293 B C P s s' t t' _115317 clauses)).
Proof. exact (MK_COMB (@lem8409917 B C P s s' t t' _115317 clauses) (@lem8409928 B C P s s' t t' _115317 clauses)). Qed.
Lemma lem8409930 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3267 B C P s s' t t' _115317 clauses) = (term3293 B C P s s' t t' _115317 clauses).
Proof. exact (EQ_MP (@lem8409929 B C P s s' t t' _115317 clauses) (@lem8409904 B C P s s' t t' _115317 clauses)). Qed.
Lemma lem8409932 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8409933 {C P : Type'} (P' : type1413 C P) : (term1174 C P P') = (term1175 C P P').
Proof. exact (@lem8409932 C P P'). Qed.
Lemma lem8409934 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3294 B C P s s' t x t' _115317 clauses) = (term3295 B C P s s' t x t' _115317 clauses).
Proof. exact (@lem8409933 C P (term3296 B C P s s' t x t' _115317 clauses)). Qed.
Lemma lem8409935 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3297 B C P s s' t x t' _115317 clauses c) = (term3298 B C P s s' t x t' _115317 c clauses).
Proof. exact (eq_refl (term3297 B C P s s' t x t' _115317 clauses c)). Qed.
Lemma lem8409936 {P : Type'} (y : P) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem8409937 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) (y : P) : (term3299 B C P s s' t x t' _115317 clauses c y) = (term3300 B C P s s' t x t' _115317 c clauses y).
Proof. exact (MK_COMB (@lem8409935 B C P s s' t x t' _115317 c clauses) (@lem8409936 P y)). Qed.
Lemma lem8409938 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (y : P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3300 B C P s s' t x t' _115317 c clauses y) = (term3301 B C P s s' t x t' y _115317 c clauses).
Proof. exact (eq_refl (term3300 B C P s s' t x t' _115317 c clauses y)). Qed.
Lemma lem8409939 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (y : P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3299 B C P s s' t x t' _115317 clauses c y) = (term3301 B C P s s' t x t' y _115317 c clauses).
Proof. exact (TRANS (@lem8409937 B C P s s' t x t' _115317 c clauses y) (@lem8409938 B C P s s' t x t' y _115317 c clauses)). Qed.
Lemma lem8409940 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3302 B C P s s' t x t' _115317 clauses c) = (term3298 B C P s s' t x t' _115317 c clauses).
Proof. exact (fun_ext (fun y : P => @lem8409939 B C P s s' t x t' y _115317 c clauses)). Qed.
Lemma lem8409941 {P : Type'} : (@ex P) = (@ex P).
Proof. exact (eq_refl (@ex P)). Qed.
Lemma lem8409942 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3303 B C P s s' t x t' _115317 clauses c) = (term3286 B C P s s' t x t' _115317 c clauses).
Proof. exact (MK_COMB (@lem8409941 P) (@lem8409940 B C P s s' t x t' _115317 c clauses)). Qed.
Lemma lem8409943 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3304 B C P s s' t x t' _115317 clauses) = (term3288 B C P s s' t x t' _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8409942 B C P s s' t x t' _115317 c clauses)). Qed.
Lemma lem8409944 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8409945 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3294 B C P s s' t x t' _115317 clauses) = (term3290 B C P s s' t x t' _115317 clauses).
Proof. exact (MK_COMB (@lem8409944 C) (@lem8409943 B C P s s' t x t' _115317 clauses)). Qed.
Lemma lem8409946 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8409947 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3305 B C P s s' t x t' _115317 clauses) = (term3306 B C P s s' t x t' _115317 clauses).
Proof. exact (MK_COMB (@lem8409946) (@lem8409945 B C P s s' t x t' _115317 clauses)). Qed.
Lemma lem8409948 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3297 B C P s s' t x t' _115317 clauses c) = (term3298 B C P s s' t x t' _115317 c clauses).
Proof. exact (eq_refl (term3297 B C P s s' t x t' _115317 clauses c)). Qed.
Lemma lem8409949 {C P : Type'} (y : C -> P) (c : C) : (y c) = (y c).
Proof. exact (eq_refl (y c)). Qed.
Lemma lem8409950 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) (y : C -> P) (c : C) : (term3307 B C P s s' t x t' _115317 clauses y c) = (term3308 B C P s s' t x t' _115317 clauses y c).
Proof. exact (MK_COMB (@lem8409948 B C P s s' t x t' _115317 c clauses) (@lem8409949 C P y c)). Qed.
Lemma lem8409951 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (y : C -> P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3308 B C P s s' t x t' _115317 clauses y c) = (term3309 B C P s s' t x t' y _115317 c clauses).
Proof. exact (eq_refl (term3308 B C P s s' t x t' _115317 clauses y c)). Qed.
Lemma lem8409952 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (y : C -> P) (_115317 : type1092 B C P) (c : C) (clauses : type1636 B C P) : (term3307 B C P s s' t x t' _115317 clauses y c) = (term3309 B C P s s' t x t' y _115317 c clauses).
Proof. exact (TRANS (@lem8409950 B C P s s' t x t' _115317 clauses y c) (@lem8409951 B C P s s' t x t' y _115317 c clauses)). Qed.
Lemma lem8409953 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (y : C -> P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3310 B C P s s' t x t' _115317 clauses y) = (term3311 B C P s s' t x t' y _115317 clauses).
Proof. exact (fun_ext (fun c : C => @lem8409952 B C P s s' t x t' y _115317 c clauses)). Qed.
Lemma lem8409954 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8409955 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (y : C -> P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3312 B C P s s' t x t' _115317 clauses y) = (term3313 B C P s s' t x t' y _115317 clauses).
Proof. exact (MK_COMB (@lem8409954 C) (@lem8409953 B C P s s' t x t' y _115317 clauses)). Qed.
Lemma lem8409956 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3314 B C P s s' t x t' _115317 clauses) = (term3315 B C P s s' t x t' _115317 clauses).
Proof. exact (fun_ext (fun y : C -> P => @lem8409955 B C P s s' t x t' y _115317 clauses)). Qed.
Lemma lem8409957 {C P : Type'} : (@ex (C -> P)) = (@ex (C -> P)).
Proof. exact (eq_refl (@ex (C -> P))). Qed.
Lemma lem8409958 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3295 B C P s s' t x t' _115317 clauses) = (term3316 B C P s s' t x t' _115317 clauses).
Proof. exact (MK_COMB (@lem8409957 C P) (@lem8409956 B C P s s' t x t' _115317 clauses)). Qed.
Lemma lem8409959 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : ((term3294 B C P s s' t x t' _115317 clauses) = (term3295 B C P s s' t x t' _115317 clauses)) = ((term3290 B C P s s' t x t' _115317 clauses) = (term3316 B C P s s' t x t' _115317 clauses)).
Proof. exact (MK_COMB (@lem8409947 B C P s s' t x t' _115317 clauses) (@lem8409958 B C P s s' t x t' _115317 clauses)). Qed.
Lemma lem8409960 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (x : C -> P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3290 B C P s s' t x t' _115317 clauses) = (term3316 B C P s s' t x t' _115317 clauses).
Proof. exact (EQ_MP (@lem8409959 B C P s s' t x t' _115317 clauses) (@lem8409934 B C P s s' t x t' _115317 clauses)). Qed.
Lemma lem8409961 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3292 B C P s s' t t' _115317 clauses) = (term3317 B C P s s' t t' _115317 clauses).
Proof. exact (fun_ext (fun x : C -> P => @lem8409960 B C P s s' t x t' _115317 clauses)). Qed.
Lemma lem8409962 {C P : Type'} : (@ex (C -> P)) = (@ex (C -> P)).
Proof. exact (eq_refl (@ex (C -> P))). Qed.
Lemma lem8409963 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3293 B C P s s' t t' _115317 clauses) = (term3318 B C P s s' t t' _115317 clauses).
Proof. exact (MK_COMB (@lem8409962 C P) (@lem8409961 B C P s s' t t' _115317 clauses)). Qed.
Lemma lem8409964 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3267 B C P s s' t t' _115317 clauses) = (term3318 B C P s s' t t' _115317 clauses).
Proof. exact (TRANS (@lem8409930 B C P s s' t t' _115317 clauses) (@lem8409963 B C P s s' t t' _115317 clauses)). Qed.
Lemma lem8409965 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3269 B C P s s' t _115317 clauses) = (term3319 B C P s s' t _115317 clauses).
Proof. exact (fun_ext (fun t' : type1473 B C P => @lem8409964 B C P s s' t t' _115317 clauses)). Qed.
Lemma lem8409966 {B C P : Type'} : (@ex (C -> C -> P -> B)) = (@ex (C -> C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> C -> P -> B))). Qed.
Lemma lem8409967 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3270 B C P s s' t _115317 clauses) = (term3320 B C P s s' t _115317 clauses).
Proof. exact (MK_COMB (@lem8409966 B C P) (@lem8409965 B C P s s' t _115317 clauses)). Qed.
Lemma lem8409968 {B C P : Type'} (s : type1475 B C P) (s' : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3244 B C P s s' t _115317 clauses) = (term3320 B C P s s' t _115317 clauses).
Proof. exact (TRANS (@lem8409900 B C P s s' t _115317 clauses) (@lem8409967 B C P s s' t _115317 clauses)). Qed.
Lemma lem8409969 {B C P : Type'} (s : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3246 B C P s t _115317 clauses) = (term3321 B C P s t _115317 clauses).
Proof. exact (fun_ext (fun s' : type1475 B C P => @lem8409968 B C P s s' t _115317 clauses)). Qed.
Lemma lem8409970 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8409971 {B C P : Type'} (s : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3247 B C P s t _115317 clauses) = (term3322 B C P s t _115317 clauses).
Proof. exact (MK_COMB (@lem8409970 B C P) (@lem8409969 B C P s t _115317 clauses)). Qed.
Lemma lem8409972 {B C P : Type'} (s : type1475 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3221 B C P s t _115317 clauses) = (term3322 B C P s t _115317 clauses).
Proof. exact (TRANS (@lem8409870 B C P s t _115317 clauses) (@lem8409971 B C P s t _115317 clauses)). Qed.
Lemma lem8409973 {B C P : Type'} (s : type1475 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3223 B C P s _115317 clauses) = (term3323 B C P s _115317 clauses).
Proof. exact (fun_ext (fun t : type1473 B C P => @lem8409972 B C P s t _115317 clauses)). Qed.
Lemma lem8409974 {B C P : Type'} : (@ex (C -> C -> P -> B)) = (@ex (C -> C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> C -> P -> B))). Qed.
Lemma lem8409975 {B C P : Type'} (s : type1475 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3224 B C P s _115317 clauses) = (term3324 B C P s _115317 clauses).
Proof. exact (MK_COMB (@lem8409974 B C P) (@lem8409973 B C P s _115317 clauses)). Qed.
Lemma lem8409976 {B C P : Type'} (s : type1475 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3196 B C P s _115317 clauses) = (term3324 B C P s _115317 clauses).
Proof. exact (TRANS (@lem8409840 B C P s _115317 clauses) (@lem8409975 B C P s _115317 clauses)). Qed.
Lemma lem8409977 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3198 B C P _115317 clauses) = (term3325 B C P _115317 clauses).
Proof. exact (fun_ext (fun s : type1475 B C P => @lem8409976 B C P s _115317 clauses)). Qed.
Lemma lem8409978 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8409979 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3199 B C P _115317 clauses) = (term3326 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8409978 B C P) (@lem8409977 B C P _115317 clauses)). Qed.
Lemma lem8409980 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3176 B C P _115317 clauses) = (term3326 B C P _115317 clauses).
Proof. exact (TRANS (@lem8409810 B C P _115317 clauses) (@lem8409979 B C P _115317 clauses)). Qed.
Lemma lem8409981 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3066 B C P _115317 clauses) = (term3326 B C P _115317 clauses).
Proof. exact (TRANS (@lem8409780 B C P _115317 clauses) (@lem8409980 B C P _115317 clauses)). Qed.
Lemma lem8409982 {B C P : Type'} (_115317 : type1092 B C P) : (term3067 B C P _115317) = (term3327 B C P _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8409981 B C P _115317 clauses)). Qed.
Lemma lem8409983 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8409984 {B C P : Type'} (_115317 : type1092 B C P) : (term3068 B C P _115317) = (term3328 B C P _115317).
Proof. exact (MK_COMB (@lem8409983 B C P) (@lem8409982 B C P _115317)). Qed.
Lemma lem8409986 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8409987 {B C P : Type'} (P' : type1088 B C P) : (term3329 B C P P') = (term3330 B C P P').
Proof. exact (@lem8409986 (type1636 B C P) (type1475 B C P) P'). Qed.
Lemma lem8409988 {B C P : Type'} (_115317 : type1092 B C P) : (term3331 B C P _115317) = (term3332 B C P _115317).
Proof. exact (@lem8409987 B C P (term3333 B C P _115317)). Qed.
Lemma lem8409989 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3334 B C P _115317 clauses) = (term3325 B C P _115317 clauses).
Proof. exact (eq_refl (term3334 B C P _115317 clauses)). Qed.
Lemma lem8409990 {B C P : Type'} (s : type1475 B C P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8409991 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) (s : type1475 B C P) : (term3335 B C P _115317 clauses s) = (term3336 B C P _115317 clauses s).
Proof. exact (MK_COMB (@lem8409989 B C P _115317 clauses) (@lem8409990 B C P s)). Qed.
Lemma lem8409992 {B C P : Type'} (s : type1475 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3336 B C P _115317 clauses s) = (term3324 B C P s _115317 clauses).
Proof. exact (eq_refl (term3336 B C P _115317 clauses s)). Qed.
Lemma lem8409993 {B C P : Type'} (s : type1475 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3335 B C P _115317 clauses s) = (term3324 B C P s _115317 clauses).
Proof. exact (TRANS (@lem8409991 B C P _115317 clauses s) (@lem8409992 B C P s _115317 clauses)). Qed.
Lemma lem8409994 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3337 B C P _115317 clauses) = (term3325 B C P _115317 clauses).
Proof. exact (fun_ext (fun s : type1475 B C P => @lem8409993 B C P s _115317 clauses)). Qed.
Lemma lem8409995 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8409996 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3338 B C P _115317 clauses) = (term3326 B C P _115317 clauses).
Proof. exact (MK_COMB (@lem8409995 B C P) (@lem8409994 B C P _115317 clauses)). Qed.
Lemma lem8409997 {B C P : Type'} (_115317 : type1092 B C P) : (term3339 B C P _115317) = (term3327 B C P _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8409996 B C P _115317 clauses)). Qed.
Lemma lem8409998 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8409999 {B C P : Type'} (_115317 : type1092 B C P) : (term3331 B C P _115317) = (term3328 B C P _115317).
Proof. exact (MK_COMB (@lem8409998 B C P) (@lem8409997 B C P _115317)). Qed.
Lemma lem8410000 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410001 {B C P : Type'} (_115317 : type1092 B C P) : (term3340 B C P _115317) = (term3341 B C P _115317).
Proof. exact (MK_COMB (@lem8410000) (@lem8409999 B C P _115317)). Qed.
Lemma lem8410002 {B C P : Type'} (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3334 B C P _115317 clauses) = (term3325 B C P _115317 clauses).
Proof. exact (eq_refl (term3334 B C P _115317 clauses)). Qed.
Lemma lem8410003 {B C P : Type'} (s : type1094 B C P) (clauses : type1636 B C P) : (s clauses) = (s clauses).
Proof. exact (eq_refl (s clauses)). Qed.
Lemma lem8410004 {B C P : Type'} (_115317 : type1092 B C P) (s : type1094 B C P) (clauses : type1636 B C P) : (term3342 B C P _115317 s clauses) = (term3343 B C P _115317 s clauses).
Proof. exact (MK_COMB (@lem8410002 B C P _115317 clauses) (@lem8410003 B C P s clauses)). Qed.
Lemma lem8410005 {B C P : Type'} (s : type1094 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3343 B C P _115317 s clauses) = (term3344 B C P s _115317 clauses).
Proof. exact (eq_refl (term3343 B C P _115317 s clauses)). Qed.
Lemma lem8410006 {B C P : Type'} (s : type1094 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3342 B C P _115317 s clauses) = (term3344 B C P s _115317 clauses).
Proof. exact (TRANS (@lem8410004 B C P _115317 s clauses) (@lem8410005 B C P s _115317 clauses)). Qed.
Lemma lem8410007 {B C P : Type'} (s : type1094 B C P) (_115317 : type1092 B C P) : (term3345 B C P _115317 s) = (term3346 B C P s _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8410006 B C P s _115317 clauses)). Qed.
Lemma lem8410008 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8410009 {B C P : Type'} (s : type1094 B C P) (_115317 : type1092 B C P) : (term3347 B C P _115317 s) = (term3348 B C P s _115317).
Proof. exact (MK_COMB (@lem8410008 B C P) (@lem8410007 B C P s _115317)). Qed.
Lemma lem8410010 {B C P : Type'} (_115317 : type1092 B C P) : (term3349 B C P _115317) = (term3350 B C P _115317).
Proof. exact (fun_ext (fun s : type1094 B C P => @lem8410009 B C P s _115317)). Qed.
Lemma lem8410011 {B C P : Type'} : (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> P -> B)) = (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> P -> B))). Qed.
Lemma lem8410012 {B C P : Type'} (_115317 : type1092 B C P) : (term3332 B C P _115317) = (term3351 B C P _115317).
Proof. exact (MK_COMB (@lem8410011 B C P) (@lem8410010 B C P _115317)). Qed.
Lemma lem8410013 {B C P : Type'} (_115317 : type1092 B C P) : ((term3331 B C P _115317) = (term3332 B C P _115317)) = ((term3328 B C P _115317) = (term3351 B C P _115317)).
Proof. exact (MK_COMB (@lem8410001 B C P _115317) (@lem8410012 B C P _115317)). Qed.
Lemma lem8410014 {B C P : Type'} (_115317 : type1092 B C P) : (term3328 B C P _115317) = (term3351 B C P _115317).
Proof. exact (EQ_MP (@lem8410013 B C P _115317) (@lem8409988 B C P _115317)). Qed.
Lemma lem8410016 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8410017 {B C P : Type'} (P' : type1087 B C P) : (term3352 B C P P') = (term3353 B C P P').
Proof. exact (@lem8410016 (type1636 B C P) (type1473 B C P) P'). Qed.
Lemma lem8410018 {B C P : Type'} (s : type1094 B C P) (_115317 : type1092 B C P) : (term3354 B C P s _115317) = (term3355 B C P s _115317).
Proof. exact (@lem8410017 B C P (term3356 B C P s _115317)). Qed.
Lemma lem8410019 {B C P : Type'} (s : type1094 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3357 B C P s _115317 clauses) = (term3358 B C P s _115317 clauses).
Proof. exact (eq_refl (term3357 B C P s _115317 clauses)). Qed.
Lemma lem8410020 {B C P : Type'} (t : type1473 B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8410021 {B C P : Type'} (s : type1094 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) (t : type1473 B C P) : (term3359 B C P s _115317 clauses t) = (term3360 B C P s _115317 clauses t).
Proof. exact (MK_COMB (@lem8410019 B C P s _115317 clauses) (@lem8410020 B C P t)). Qed.
Lemma lem8410022 {B C P : Type'} (s : type1094 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3360 B C P s _115317 clauses t) = (term3361 B C P s t _115317 clauses).
Proof. exact (eq_refl (term3360 B C P s _115317 clauses t)). Qed.
Lemma lem8410023 {B C P : Type'} (s : type1094 B C P) (t : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3359 B C P s _115317 clauses t) = (term3361 B C P s t _115317 clauses).
Proof. exact (TRANS (@lem8410021 B C P s _115317 clauses t) (@lem8410022 B C P s t _115317 clauses)). Qed.
Lemma lem8410024 {B C P : Type'} (s : type1094 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3362 B C P s _115317 clauses) = (term3358 B C P s _115317 clauses).
Proof. exact (fun_ext (fun t : type1473 B C P => @lem8410023 B C P s t _115317 clauses)). Qed.
Lemma lem8410025 {B C P : Type'} : (@ex (C -> C -> P -> B)) = (@ex (C -> C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> C -> P -> B))). Qed.
Lemma lem8410026 {B C P : Type'} (s : type1094 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3363 B C P s _115317 clauses) = (term3344 B C P s _115317 clauses).
Proof. exact (MK_COMB (@lem8410025 B C P) (@lem8410024 B C P s _115317 clauses)). Qed.
Lemma lem8410027 {B C P : Type'} (s : type1094 B C P) (_115317 : type1092 B C P) : (term3364 B C P s _115317) = (term3346 B C P s _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8410026 B C P s _115317 clauses)). Qed.
Lemma lem8410028 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8410029 {B C P : Type'} (s : type1094 B C P) (_115317 : type1092 B C P) : (term3354 B C P s _115317) = (term3348 B C P s _115317).
Proof. exact (MK_COMB (@lem8410028 B C P) (@lem8410027 B C P s _115317)). Qed.
Lemma lem8410030 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410031 {B C P : Type'} (s : type1094 B C P) (_115317 : type1092 B C P) : (term3365 B C P s _115317) = (term3366 B C P s _115317).
Proof. exact (MK_COMB (@lem8410030) (@lem8410029 B C P s _115317)). Qed.
Lemma lem8410032 {B C P : Type'} (s : type1094 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3357 B C P s _115317 clauses) = (term3358 B C P s _115317 clauses).
Proof. exact (eq_refl (term3357 B C P s _115317 clauses)). Qed.
Lemma lem8410033 {B C P : Type'} (t : type1093 B C P) (clauses : type1636 B C P) : (t clauses) = (t clauses).
Proof. exact (eq_refl (t clauses)). Qed.
Lemma lem8410034 {B C P : Type'} (s : type1094 B C P) (_115317 : type1092 B C P) (t : type1093 B C P) (clauses : type1636 B C P) : (term3367 B C P s _115317 t clauses) = (term3368 B C P s _115317 t clauses).
Proof. exact (MK_COMB (@lem8410032 B C P s _115317 clauses) (@lem8410033 B C P t clauses)). Qed.
Lemma lem8410035 {B C P : Type'} (s : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3368 B C P s _115317 t clauses) = (term3369 B C P s t _115317 clauses).
Proof. exact (eq_refl (term3368 B C P s _115317 t clauses)). Qed.
Lemma lem8410036 {B C P : Type'} (s : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3367 B C P s _115317 t clauses) = (term3369 B C P s t _115317 clauses).
Proof. exact (TRANS (@lem8410034 B C P s _115317 t clauses) (@lem8410035 B C P s t _115317 clauses)). Qed.
Lemma lem8410037 {B C P : Type'} (s : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3370 B C P s _115317 t) = (term3371 B C P s t _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8410036 B C P s t _115317 clauses)). Qed.
Lemma lem8410038 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8410039 {B C P : Type'} (s : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3372 B C P s _115317 t) = (term3373 B C P s t _115317).
Proof. exact (MK_COMB (@lem8410038 B C P) (@lem8410037 B C P s t _115317)). Qed.
Lemma lem8410040 {B C P : Type'} (s : type1094 B C P) (_115317 : type1092 B C P) : (term3374 B C P s _115317) = (term3375 B C P s _115317).
Proof. exact (fun_ext (fun t : type1093 B C P => @lem8410039 B C P s t _115317)). Qed.
Lemma lem8410041 {B C P : Type'} : (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> C -> P -> B)) = (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> C -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> C -> P -> B))). Qed.
Lemma lem8410042 {B C P : Type'} (s : type1094 B C P) (_115317 : type1092 B C P) : (term3355 B C P s _115317) = (term3376 B C P s _115317).
Proof. exact (MK_COMB (@lem8410041 B C P) (@lem8410040 B C P s _115317)). Qed.
Lemma lem8410043 {B C P : Type'} (s : type1094 B C P) (_115317 : type1092 B C P) : ((term3354 B C P s _115317) = (term3355 B C P s _115317)) = ((term3348 B C P s _115317) = (term3376 B C P s _115317)).
Proof. exact (MK_COMB (@lem8410031 B C P s _115317) (@lem8410042 B C P s _115317)). Qed.
Lemma lem8410044 {B C P : Type'} (s : type1094 B C P) (_115317 : type1092 B C P) : (term3348 B C P s _115317) = (term3376 B C P s _115317).
Proof. exact (EQ_MP (@lem8410043 B C P s _115317) (@lem8410018 B C P s _115317)). Qed.
Lemma lem8410046 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8410047 {B C P : Type'} (P' : type1088 B C P) : (term3329 B C P P') = (term3330 B C P P').
Proof. exact (@lem8410046 (type1636 B C P) (type1475 B C P) P'). Qed.
Lemma lem8410048 {B C P : Type'} (s : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3377 B C P s t _115317) = (term3378 B C P s t _115317).
Proof. exact (@lem8410047 B C P (term3379 B C P s t _115317)). Qed.
Lemma lem8410049 {B C P : Type'} (s : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3380 B C P s t _115317 clauses) = (term3381 B C P s t _115317 clauses).
Proof. exact (eq_refl (term3380 B C P s t _115317 clauses)). Qed.
Lemma lem8410050 {B C P : Type'} (s' : type1475 B C P) : s' = s'.
Proof. exact (eq_refl s'). Qed.
Lemma lem8410051 {B C P : Type'} (s : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) (s' : type1475 B C P) : (term3382 B C P s t _115317 clauses s') = (term3383 B C P s t _115317 clauses s').
Proof. exact (MK_COMB (@lem8410049 B C P s t _115317 clauses) (@lem8410050 B C P s')). Qed.
Lemma lem8410052 {B C P : Type'} (s : type1094 B C P) (s' : type1475 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3383 B C P s t _115317 clauses s') = (term3384 B C P s s' t _115317 clauses).
Proof. exact (eq_refl (term3383 B C P s t _115317 clauses s')). Qed.
Lemma lem8410053 {B C P : Type'} (s : type1094 B C P) (s' : type1475 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3382 B C P s t _115317 clauses s') = (term3384 B C P s s' t _115317 clauses).
Proof. exact (TRANS (@lem8410051 B C P s t _115317 clauses s') (@lem8410052 B C P s s' t _115317 clauses)). Qed.
Lemma lem8410054 {B C P : Type'} (s : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3385 B C P s t _115317 clauses) = (term3381 B C P s t _115317 clauses).
Proof. exact (fun_ext (fun s' : type1475 B C P => @lem8410053 B C P s s' t _115317 clauses)). Qed.
Lemma lem8410055 {B C P : Type'} : (@ex (C -> P -> B)) = (@ex (C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> P -> B))). Qed.
Lemma lem8410056 {B C P : Type'} (s : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3386 B C P s t _115317 clauses) = (term3369 B C P s t _115317 clauses).
Proof. exact (MK_COMB (@lem8410055 B C P) (@lem8410054 B C P s t _115317 clauses)). Qed.
Lemma lem8410057 {B C P : Type'} (s : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3387 B C P s t _115317) = (term3371 B C P s t _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8410056 B C P s t _115317 clauses)). Qed.
Lemma lem8410058 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8410059 {B C P : Type'} (s : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3377 B C P s t _115317) = (term3373 B C P s t _115317).
Proof. exact (MK_COMB (@lem8410058 B C P) (@lem8410057 B C P s t _115317)). Qed.
Lemma lem8410060 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410061 {B C P : Type'} (s : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3388 B C P s t _115317) = (term3389 B C P s t _115317).
Proof. exact (MK_COMB (@lem8410060) (@lem8410059 B C P s t _115317)). Qed.
Lemma lem8410062 {B C P : Type'} (s : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3380 B C P s t _115317 clauses) = (term3381 B C P s t _115317 clauses).
Proof. exact (eq_refl (term3380 B C P s t _115317 clauses)). Qed.
Lemma lem8410063 {B C P : Type'} (s' : type1094 B C P) (clauses : type1636 B C P) : (s' clauses) = (s' clauses).
Proof. exact (eq_refl (s' clauses)). Qed.
Lemma lem8410064 {B C P : Type'} (s : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) (s' : type1094 B C P) (clauses : type1636 B C P) : (term3390 B C P s t _115317 s' clauses) = (term3391 B C P s t _115317 s' clauses).
Proof. exact (MK_COMB (@lem8410062 B C P s t _115317 clauses) (@lem8410063 B C P s' clauses)). Qed.
Lemma lem8410065 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3391 B C P s t _115317 s' clauses) = (term3392 B C P s s' t _115317 clauses).
Proof. exact (eq_refl (term3391 B C P s t _115317 s' clauses)). Qed.
Lemma lem8410066 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3390 B C P s t _115317 s' clauses) = (term3392 B C P s s' t _115317 clauses).
Proof. exact (TRANS (@lem8410064 B C P s t _115317 s' clauses) (@lem8410065 B C P s s' t _115317 clauses)). Qed.
Lemma lem8410067 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3393 B C P s t _115317 s') = (term3394 B C P s s' t _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8410066 B C P s s' t _115317 clauses)). Qed.
Lemma lem8410068 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8410069 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3395 B C P s t _115317 s') = (term3396 B C P s s' t _115317).
Proof. exact (MK_COMB (@lem8410068 B C P) (@lem8410067 B C P s s' t _115317)). Qed.
Lemma lem8410070 {B C P : Type'} (s : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3397 B C P s t _115317) = (term3398 B C P s t _115317).
Proof. exact (fun_ext (fun s' : type1094 B C P => @lem8410069 B C P s s' t _115317)). Qed.
Lemma lem8410071 {B C P : Type'} : (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> P -> B)) = (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> P -> B))). Qed.
Lemma lem8410072 {B C P : Type'} (s : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3378 B C P s t _115317) = (term3399 B C P s t _115317).
Proof. exact (MK_COMB (@lem8410071 B C P) (@lem8410070 B C P s t _115317)). Qed.
Lemma lem8410073 {B C P : Type'} (s : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : ((term3377 B C P s t _115317) = (term3378 B C P s t _115317)) = ((term3373 B C P s t _115317) = (term3399 B C P s t _115317)).
Proof. exact (MK_COMB (@lem8410061 B C P s t _115317) (@lem8410072 B C P s t _115317)). Qed.
Lemma lem8410074 {B C P : Type'} (s : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3373 B C P s t _115317) = (term3399 B C P s t _115317).
Proof. exact (EQ_MP (@lem8410073 B C P s t _115317) (@lem8410048 B C P s t _115317)). Qed.
Lemma lem8410076 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8410077 {B C P : Type'} (P' : type1087 B C P) : (term3352 B C P P') = (term3353 B C P P').
Proof. exact (@lem8410076 (type1636 B C P) (type1473 B C P) P'). Qed.
Lemma lem8410078 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3400 B C P s s' t _115317) = (term3401 B C P s s' t _115317).
Proof. exact (@lem8410077 B C P (term3402 B C P s s' t _115317)). Qed.
Lemma lem8410079 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3403 B C P s s' t _115317 clauses) = (term3404 B C P s s' t _115317 clauses).
Proof. exact (eq_refl (term3403 B C P s s' t _115317 clauses)). Qed.
Lemma lem8410080 {B C P : Type'} (t' : type1473 B C P) : t' = t'.
Proof. exact (eq_refl t'). Qed.
Lemma lem8410081 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) (t' : type1473 B C P) : (term3405 B C P s s' t _115317 clauses t') = (term3406 B C P s s' t _115317 clauses t').
Proof. exact (MK_COMB (@lem8410079 B C P s s' t _115317 clauses) (@lem8410080 B C P t')). Qed.
Lemma lem8410082 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3406 B C P s s' t _115317 clauses t') = (term3407 B C P s s' t t' _115317 clauses).
Proof. exact (eq_refl (term3406 B C P s s' t _115317 clauses t')). Qed.
Lemma lem8410083 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (t' : type1473 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3405 B C P s s' t _115317 clauses t') = (term3407 B C P s s' t t' _115317 clauses).
Proof. exact (TRANS (@lem8410081 B C P s s' t _115317 clauses t') (@lem8410082 B C P s s' t t' _115317 clauses)). Qed.
Lemma lem8410084 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3408 B C P s s' t _115317 clauses) = (term3404 B C P s s' t _115317 clauses).
Proof. exact (fun_ext (fun t' : type1473 B C P => @lem8410083 B C P s s' t t' _115317 clauses)). Qed.
Lemma lem8410085 {B C P : Type'} : (@ex (C -> C -> P -> B)) = (@ex (C -> C -> P -> B)).
Proof. exact (eq_refl (@ex (C -> C -> P -> B))). Qed.
Lemma lem8410086 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3409 B C P s s' t _115317 clauses) = (term3392 B C P s s' t _115317 clauses).
Proof. exact (MK_COMB (@lem8410085 B C P) (@lem8410084 B C P s s' t _115317 clauses)). Qed.
Lemma lem8410087 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3410 B C P s s' t _115317) = (term3394 B C P s s' t _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8410086 B C P s s' t _115317 clauses)). Qed.
Lemma lem8410088 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8410089 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3400 B C P s s' t _115317) = (term3396 B C P s s' t _115317).
Proof. exact (MK_COMB (@lem8410088 B C P) (@lem8410087 B C P s s' t _115317)). Qed.
Lemma lem8410090 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410091 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3411 B C P s s' t _115317) = (term3412 B C P s s' t _115317).
Proof. exact (MK_COMB (@lem8410090) (@lem8410089 B C P s s' t _115317)). Qed.
Lemma lem8410092 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3403 B C P s s' t _115317 clauses) = (term3404 B C P s s' t _115317 clauses).
Proof. exact (eq_refl (term3403 B C P s s' t _115317 clauses)). Qed.
Lemma lem8410093 {B C P : Type'} (t' : type1093 B C P) (clauses : type1636 B C P) : (t' clauses) = (t' clauses).
Proof. exact (eq_refl (t' clauses)). Qed.
Lemma lem8410094 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) (t' : type1093 B C P) (clauses : type1636 B C P) : (term3413 B C P s s' t _115317 t' clauses) = (term3414 B C P s s' t _115317 t' clauses).
Proof. exact (MK_COMB (@lem8410092 B C P s s' t _115317 clauses) (@lem8410093 B C P t' clauses)). Qed.
Lemma lem8410095 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3414 B C P s s' t _115317 t' clauses) = (term3415 B C P s s' t t' _115317 clauses).
Proof. exact (eq_refl (term3414 B C P s s' t _115317 t' clauses)). Qed.
Lemma lem8410096 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3413 B C P s s' t _115317 t' clauses) = (term3415 B C P s s' t t' _115317 clauses).
Proof. exact (TRANS (@lem8410094 B C P s s' t _115317 t' clauses) (@lem8410095 B C P s s' t t' _115317 clauses)). Qed.
Lemma lem8410097 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) : (term3416 B C P s s' t _115317 t') = (term3417 B C P s s' t t' _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8410096 B C P s s' t t' _115317 clauses)). Qed.
Lemma lem8410098 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8410099 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) : (term3418 B C P s s' t _115317 t') = (term3419 B C P s s' t t' _115317).
Proof. exact (MK_COMB (@lem8410098 B C P) (@lem8410097 B C P s s' t t' _115317)). Qed.
Lemma lem8410100 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3420 B C P s s' t _115317) = (term3421 B C P s s' t _115317).
Proof. exact (fun_ext (fun t' : type1093 B C P => @lem8410099 B C P s s' t t' _115317)). Qed.
Lemma lem8410101 {B C P : Type'} : (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> C -> P -> B)) = (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> C -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> C -> P -> B))). Qed.
Lemma lem8410102 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3401 B C P s s' t _115317) = (term3422 B C P s s' t _115317).
Proof. exact (MK_COMB (@lem8410101 B C P) (@lem8410100 B C P s s' t _115317)). Qed.
Lemma lem8410103 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : ((term3400 B C P s s' t _115317) = (term3401 B C P s s' t _115317)) = ((term3396 B C P s s' t _115317) = (term3422 B C P s s' t _115317)).
Proof. exact (MK_COMB (@lem8410091 B C P s s' t _115317) (@lem8410102 B C P s s' t _115317)). Qed.
Lemma lem8410104 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3396 B C P s s' t _115317) = (term3422 B C P s s' t _115317).
Proof. exact (EQ_MP (@lem8410103 B C P s s' t _115317) (@lem8410078 B C P s s' t _115317)). Qed.
Lemma lem8410106 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8410107 {B C P : Type'} (P' : type1089 B C P) : (term3423 B C P P') = (term3424 B C P P').
Proof. exact (@lem8410106 (type1636 B C P) (C -> P) P'). Qed.
Lemma lem8410108 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) : (term3425 B C P s s' t t' _115317) = (term3426 B C P s s' t t' _115317).
Proof. exact (@lem8410107 B C P (term3427 B C P s s' t t' _115317)). Qed.
Lemma lem8410109 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3428 B C P s s' t t' _115317 clauses) = (term3429 B C P s s' t t' _115317 clauses).
Proof. exact (eq_refl (term3428 B C P s s' t t' _115317 clauses)). Qed.
Lemma lem8410110 {C P : Type'} (x : C -> P) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8410111 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) (x : C -> P) : (term3430 B C P s s' t t' _115317 clauses x) = (term3431 B C P s s' t t' _115317 clauses x).
Proof. exact (MK_COMB (@lem8410109 B C P s s' t t' _115317 clauses) (@lem8410110 C P x)). Qed.
Lemma lem8410112 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : C -> P) (t' : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3431 B C P s s' t t' _115317 clauses x) = (term3432 B C P s s' t x t' _115317 clauses).
Proof. exact (eq_refl (term3431 B C P s s' t t' _115317 clauses x)). Qed.
Lemma lem8410113 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : C -> P) (t' : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3430 B C P s s' t t' _115317 clauses x) = (term3432 B C P s s' t x t' _115317 clauses).
Proof. exact (TRANS (@lem8410111 B C P s s' t t' _115317 clauses x) (@lem8410112 B C P s s' t x t' _115317 clauses)). Qed.
Lemma lem8410114 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3433 B C P s s' t t' _115317 clauses) = (term3429 B C P s s' t t' _115317 clauses).
Proof. exact (fun_ext (fun x : C -> P => @lem8410113 B C P s s' t x t' _115317 clauses)). Qed.
Lemma lem8410115 {C P : Type'} : (@ex (C -> P)) = (@ex (C -> P)).
Proof. exact (eq_refl (@ex (C -> P))). Qed.
Lemma lem8410116 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3434 B C P s s' t t' _115317 clauses) = (term3415 B C P s s' t t' _115317 clauses).
Proof. exact (MK_COMB (@lem8410115 C P) (@lem8410114 B C P s s' t t' _115317 clauses)). Qed.
Lemma lem8410117 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) : (term3435 B C P s s' t t' _115317) = (term3417 B C P s s' t t' _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8410116 B C P s s' t t' _115317 clauses)). Qed.
Lemma lem8410118 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8410119 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) : (term3425 B C P s s' t t' _115317) = (term3419 B C P s s' t t' _115317).
Proof. exact (MK_COMB (@lem8410118 B C P) (@lem8410117 B C P s s' t t' _115317)). Qed.
Lemma lem8410120 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410121 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) : (term3436 B C P s s' t t' _115317) = (term3437 B C P s s' t t' _115317).
Proof. exact (MK_COMB (@lem8410120) (@lem8410119 B C P s s' t t' _115317)). Qed.
Lemma lem8410122 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3428 B C P s s' t t' _115317 clauses) = (term3429 B C P s s' t t' _115317 clauses).
Proof. exact (eq_refl (term3428 B C P s s' t t' _115317 clauses)). Qed.
Lemma lem8410123 {B C P : Type'} (x : type1095 B C P) (clauses : type1636 B C P) : (x clauses) = (x clauses).
Proof. exact (eq_refl (x clauses)). Qed.
Lemma lem8410124 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) (x : type1095 B C P) (clauses : type1636 B C P) : (term3438 B C P s s' t t' _115317 x clauses) = (term3439 B C P s s' t t' _115317 x clauses).
Proof. exact (MK_COMB (@lem8410122 B C P s s' t t' _115317 clauses) (@lem8410123 B C P x clauses)). Qed.
Lemma lem8410125 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3439 B C P s s' t t' _115317 x clauses) = (term3440 B C P s s' t x t' _115317 clauses).
Proof. exact (eq_refl (term3439 B C P s s' t t' _115317 x clauses)). Qed.
Lemma lem8410126 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3438 B C P s s' t t' _115317 x clauses) = (term3440 B C P s s' t x t' _115317 clauses).
Proof. exact (TRANS (@lem8410124 B C P s s' t t' _115317 x clauses) (@lem8410125 B C P s s' t x t' _115317 clauses)). Qed.
Lemma lem8410127 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) : (term3441 B C P s s' t t' _115317 x) = (term3442 B C P s s' t x t' _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8410126 B C P s s' t x t' _115317 clauses)). Qed.
Lemma lem8410128 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8410129 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) : (term3443 B C P s s' t t' _115317 x) = (term3444 B C P s s' t x t' _115317).
Proof. exact (MK_COMB (@lem8410128 B C P) (@lem8410127 B C P s s' t x t' _115317)). Qed.
Lemma lem8410130 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) : (term3445 B C P s s' t t' _115317) = (term3446 B C P s s' t t' _115317).
Proof. exact (fun_ext (fun x : type1095 B C P => @lem8410129 B C P s s' t x t' _115317)). Qed.
Lemma lem8410131 {B C P : Type'} : (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> P)) = (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> P)).
Proof. exact (eq_refl (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> P))). Qed.
Lemma lem8410132 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) : (term3426 B C P s s' t t' _115317) = (term3447 B C P s s' t t' _115317).
Proof. exact (MK_COMB (@lem8410131 B C P) (@lem8410130 B C P s s' t t' _115317)). Qed.
Lemma lem8410133 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) : ((term3425 B C P s s' t t' _115317) = (term3426 B C P s s' t t' _115317)) = ((term3419 B C P s s' t t' _115317) = (term3447 B C P s s' t t' _115317)).
Proof. exact (MK_COMB (@lem8410121 B C P s s' t t' _115317) (@lem8410132 B C P s s' t t' _115317)). Qed.
Lemma lem8410134 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) : (term3419 B C P s s' t t' _115317) = (term3447 B C P s s' t t' _115317).
Proof. exact (EQ_MP (@lem8410133 B C P s s' t t' _115317) (@lem8410108 B C P s s' t t' _115317)). Qed.
Lemma lem8410136 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8410137 {B C P : Type'} (P' : type1089 B C P) : (term3423 B C P P') = (term3424 B C P P').
Proof. exact (@lem8410136 (type1636 B C P) (C -> P) P'). Qed.
Lemma lem8410138 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) : (term3448 B C P s s' t x t' _115317) = (term3449 B C P s s' t x t' _115317).
Proof. exact (@lem8410137 B C P (term3450 B C P s s' t x t' _115317)). Qed.
Lemma lem8410139 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3451 B C P s s' t x t' _115317 clauses) = (term3452 B C P s s' t x t' _115317 clauses).
Proof. exact (eq_refl (term3451 B C P s s' t x t' _115317 clauses)). Qed.
Lemma lem8410140 {C P : Type'} (y : C -> P) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem8410141 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) (y : C -> P) : (term3453 B C P s s' t x t' _115317 clauses y) = (term3454 B C P s s' t x t' _115317 clauses y).
Proof. exact (MK_COMB (@lem8410139 B C P s s' t x t' _115317 clauses) (@lem8410140 C P y)). Qed.
Lemma lem8410142 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (y : C -> P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3454 B C P s s' t x t' _115317 clauses y) = (term3455 B C P s s' t x t' y _115317 clauses).
Proof. exact (eq_refl (term3454 B C P s s' t x t' _115317 clauses y)). Qed.
Lemma lem8410143 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (y : C -> P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3453 B C P s s' t x t' _115317 clauses y) = (term3455 B C P s s' t x t' y _115317 clauses).
Proof. exact (TRANS (@lem8410141 B C P s s' t x t' _115317 clauses y) (@lem8410142 B C P s s' t x t' y _115317 clauses)). Qed.
Lemma lem8410144 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3456 B C P s s' t x t' _115317 clauses) = (term3452 B C P s s' t x t' _115317 clauses).
Proof. exact (fun_ext (fun y : C -> P => @lem8410143 B C P s s' t x t' y _115317 clauses)). Qed.
Lemma lem8410145 {C P : Type'} : (@ex (C -> P)) = (@ex (C -> P)).
Proof. exact (eq_refl (@ex (C -> P))). Qed.
Lemma lem8410146 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3457 B C P s s' t x t' _115317 clauses) = (term3440 B C P s s' t x t' _115317 clauses).
Proof. exact (MK_COMB (@lem8410145 C P) (@lem8410144 B C P s s' t x t' _115317 clauses)). Qed.
Lemma lem8410147 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) : (term3458 B C P s s' t x t' _115317) = (term3442 B C P s s' t x t' _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8410146 B C P s s' t x t' _115317 clauses)). Qed.
Lemma lem8410148 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8410149 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) : (term3448 B C P s s' t x t' _115317) = (term3444 B C P s s' t x t' _115317).
Proof. exact (MK_COMB (@lem8410148 B C P) (@lem8410147 B C P s s' t x t' _115317)). Qed.
Lemma lem8410150 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410151 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) : (term3459 B C P s s' t x t' _115317) = (term3460 B C P s s' t x t' _115317).
Proof. exact (MK_COMB (@lem8410150) (@lem8410149 B C P s s' t x t' _115317)). Qed.
Lemma lem8410152 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3451 B C P s s' t x t' _115317 clauses) = (term3452 B C P s s' t x t' _115317 clauses).
Proof. exact (eq_refl (term3451 B C P s s' t x t' _115317 clauses)). Qed.
Lemma lem8410153 {B C P : Type'} (y : type1095 B C P) (clauses : type1636 B C P) : (y clauses) = (y clauses).
Proof. exact (eq_refl (y clauses)). Qed.
Lemma lem8410154 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) (y : type1095 B C P) (clauses : type1636 B C P) : (term3461 B C P s s' t x t' _115317 y clauses) = (term3462 B C P s s' t x t' _115317 y clauses).
Proof. exact (MK_COMB (@lem8410152 B C P s s' t x t' _115317 clauses) (@lem8410153 B C P y clauses)). Qed.
Lemma lem8410155 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (y : type1095 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3462 B C P s s' t x t' _115317 y clauses) = (term3463 B C P s s' t x t' y _115317 clauses).
Proof. exact (eq_refl (term3462 B C P s s' t x t' _115317 y clauses)). Qed.
Lemma lem8410156 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (y : type1095 B C P) (_115317 : type1092 B C P) (clauses : type1636 B C P) : (term3461 B C P s s' t x t' _115317 y clauses) = (term3463 B C P s s' t x t' y _115317 clauses).
Proof. exact (TRANS (@lem8410154 B C P s s' t x t' _115317 y clauses) (@lem8410155 B C P s s' t x t' y _115317 clauses)). Qed.
Lemma lem8410157 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (y : type1095 B C P) (_115317 : type1092 B C P) : (term3464 B C P s s' t x t' _115317 y) = (term3465 B C P s s' t x t' y _115317).
Proof. exact (fun_ext (fun clauses : type1636 B C P => @lem8410156 B C P s s' t x t' y _115317 clauses)). Qed.
Lemma lem8410158 {B C P : Type'} : (@all (list (prod (P -> B) (C -> P -> B)))) = (@all (list (prod (P -> B) (C -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> B) (C -> P -> B))))). Qed.
Lemma lem8410159 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (y : type1095 B C P) (_115317 : type1092 B C P) : (term3466 B C P s s' t x t' _115317 y) = (term3467 B C P s s' t x t' y _115317).
Proof. exact (MK_COMB (@lem8410158 B C P) (@lem8410157 B C P s s' t x t' y _115317)). Qed.
Lemma lem8410160 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) : (term3468 B C P s s' t x t' _115317) = (term3469 B C P s s' t x t' _115317).
Proof. exact (fun_ext (fun y : type1095 B C P => @lem8410159 B C P s s' t x t' y _115317)). Qed.
Lemma lem8410161 {B C P : Type'} : (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> P)) = (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> P)).
Proof. exact (eq_refl (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> P))). Qed.
Lemma lem8410162 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) : (term3449 B C P s s' t x t' _115317) = (term3470 B C P s s' t x t' _115317).
Proof. exact (MK_COMB (@lem8410161 B C P) (@lem8410160 B C P s s' t x t' _115317)). Qed.
Lemma lem8410163 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) : ((term3448 B C P s s' t x t' _115317) = (term3449 B C P s s' t x t' _115317)) = ((term3444 B C P s s' t x t' _115317) = (term3470 B C P s s' t x t' _115317)).
Proof. exact (MK_COMB (@lem8410151 B C P s s' t x t' _115317) (@lem8410162 B C P s s' t x t' _115317)). Qed.
Lemma lem8410164 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (x : type1095 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) : (term3444 B C P s s' t x t' _115317) = (term3470 B C P s s' t x t' _115317).
Proof. exact (EQ_MP (@lem8410163 B C P s s' t x t' _115317) (@lem8410138 B C P s s' t x t' _115317)). Qed.
Lemma lem8410165 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) : (term3446 B C P s s' t t' _115317) = (term3471 B C P s s' t t' _115317).
Proof. exact (fun_ext (fun x : type1095 B C P => @lem8410164 B C P s s' t x t' _115317)). Qed.
Lemma lem8410166 {B C P : Type'} : (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> P)) = (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> P)).
Proof. exact (eq_refl (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> P))). Qed.
Lemma lem8410167 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) : (term3447 B C P s s' t t' _115317) = (term3472 B C P s s' t t' _115317).
Proof. exact (MK_COMB (@lem8410166 B C P) (@lem8410165 B C P s s' t t' _115317)). Qed.
Lemma lem8410168 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (t' : type1093 B C P) (_115317 : type1092 B C P) : (term3419 B C P s s' t t' _115317) = (term3472 B C P s s' t t' _115317).
Proof. exact (TRANS (@lem8410134 B C P s s' t t' _115317) (@lem8410167 B C P s s' t t' _115317)). Qed.
Lemma lem8410169 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3421 B C P s s' t _115317) = (term3473 B C P s s' t _115317).
Proof. exact (fun_ext (fun t' : type1093 B C P => @lem8410168 B C P s s' t t' _115317)). Qed.
Lemma lem8410170 {B C P : Type'} : (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> C -> P -> B)) = (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> C -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> C -> P -> B))). Qed.
Lemma lem8410171 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3422 B C P s s' t _115317) = (term3474 B C P s s' t _115317).
Proof. exact (MK_COMB (@lem8410170 B C P) (@lem8410169 B C P s s' t _115317)). Qed.
Lemma lem8410172 {B C P : Type'} (s : type1094 B C P) (s' : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3396 B C P s s' t _115317) = (term3474 B C P s s' t _115317).
Proof. exact (TRANS (@lem8410104 B C P s s' t _115317) (@lem8410171 B C P s s' t _115317)). Qed.
Lemma lem8410173 {B C P : Type'} (s : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3398 B C P s t _115317) = (term3475 B C P s t _115317).
Proof. exact (fun_ext (fun s' : type1094 B C P => @lem8410172 B C P s s' t _115317)). Qed.
Lemma lem8410174 {B C P : Type'} : (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> P -> B)) = (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> P -> B))). Qed.
Lemma lem8410175 {B C P : Type'} (s : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3399 B C P s t _115317) = (term3476 B C P s t _115317).
Proof. exact (MK_COMB (@lem8410174 B C P) (@lem8410173 B C P s t _115317)). Qed.
Lemma lem8410176 {B C P : Type'} (s : type1094 B C P) (t : type1093 B C P) (_115317 : type1092 B C P) : (term3373 B C P s t _115317) = (term3476 B C P s t _115317).
Proof. exact (TRANS (@lem8410074 B C P s t _115317) (@lem8410175 B C P s t _115317)). Qed.
Lemma lem8410177 {B C P : Type'} (s : type1094 B C P) (_115317 : type1092 B C P) : (term3375 B C P s _115317) = (term3477 B C P s _115317).
Proof. exact (fun_ext (fun t : type1093 B C P => @lem8410176 B C P s t _115317)). Qed.
Lemma lem8410178 {B C P : Type'} : (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> C -> P -> B)) = (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> C -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> C -> P -> B))). Qed.
Lemma lem8410179 {B C P : Type'} (s : type1094 B C P) (_115317 : type1092 B C P) : (term3376 B C P s _115317) = (term3478 B C P s _115317).
Proof. exact (MK_COMB (@lem8410178 B C P) (@lem8410177 B C P s _115317)). Qed.
Lemma lem8410180 {B C P : Type'} (s : type1094 B C P) (_115317 : type1092 B C P) : (term3348 B C P s _115317) = (term3478 B C P s _115317).
Proof. exact (TRANS (@lem8410044 B C P s _115317) (@lem8410179 B C P s _115317)). Qed.
Lemma lem8410181 {B C P : Type'} (_115317 : type1092 B C P) : (term3350 B C P _115317) = (term3479 B C P _115317).
Proof. exact (fun_ext (fun s : type1094 B C P => @lem8410180 B C P s _115317)). Qed.
Lemma lem8410182 {B C P : Type'} : (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> P -> B)) = (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (P -> B) (C -> P -> B))) -> C -> P -> B))). Qed.
Lemma lem8410183 {B C P : Type'} (_115317 : type1092 B C P) : (term3351 B C P _115317) = (term3480 B C P _115317).
Proof. exact (MK_COMB (@lem8410182 B C P) (@lem8410181 B C P _115317)). Qed.
Lemma lem8410184 {B C P : Type'} (_115317 : type1092 B C P) : (term3328 B C P _115317) = (term3480 B C P _115317).
Proof. exact (TRANS (@lem8410014 B C P _115317) (@lem8410183 B C P _115317)). Qed.
Lemma lem8410186 {B C P : Type'} (_115317 : type1092 B C P) : (term3068 B C P _115317) = (term3480 B C P _115317).
Proof. exact (TRANS (@lem8409984 B C P _115317) (@lem8410184 B C P _115317)). Qed.
Lemma lem8410187 {B C P : Type'} (_115317 : type1092 B C P) : (term533 B C P _115317) = (term3480 B C P _115317).
Proof. exact (TRANS (@lem8409492 B C P _115317) (@lem8410186 B C P _115317)). Qed.
Lemma lem8410188 {B C P : Type'} (_115317 : type1092 B C P) (h1 : term533 B C P _115317) : term3480 B C P _115317.
Proof. exact (EQ_MP (@lem8410187 B C P _115317) (@lem8401044 B C P _115317 h1)). Qed.
Lemma lem8410203 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) (y : A -> B) : (term4399 A B C P clauses s s' t x t' c y) = (term4400 A B C P clauses s s' t x t' c y).
Proof. exact (@lem17362 (term4401 A B C P t t' clauses s x s' y) ((t c x) = (t' c y))). Qed.
Lemma lem8410204 {A B : Type'} (P : type572 A B) : (term4402 A B P) = (term4403 A B P).
Proof. exact (@lem18392 (A -> B) P). Qed.
Lemma lem8410205 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term4404 A B C P clauses s s' t x t' c) = (term4405 A B C P clauses s s' t x t' c).
Proof. exact (@lem8410204 A B (term340 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8410206 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) (y : A -> B) : (term4406 A B C P clauses s s' t x t' c y) = (term339 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term4406 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8410207 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8410208 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) (y : A -> B) : (term4407 A B C P clauses s s' t x t' c y) = (term4399 A B C P clauses s s' t x t' c y).
Proof. exact (MK_COMB (@lem8410207) (@lem8410206 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8410209 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) (y : A -> B) : (term4407 A B C P clauses s s' t x t' c y) = (term4400 A B C P clauses s s' t x t' c y).
Proof. exact (TRANS (@lem8410208 A B C P clauses s s' t x t' c y) (@lem8410203 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8410210 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term4408 A B C P clauses s s' t x t' c) = (term4409 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : A -> B => @lem8410209 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8410211 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8410212 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term4405 A B C P clauses s s' t x t' c) = (term4410 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8410211 A B) (@lem8410210 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8410213 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term4404 A B C P clauses s s' t x t' c) = (term4410 A B C P clauses s s' t x t' c).
Proof. exact (TRANS (@lem8410205 A B C P clauses s s' t x t' c) (@lem8410212 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8410214 {A B : Type'} (P : type572 A B) : (term4402 A B P) = (term4403 A B P).
Proof. exact (@lem18392 (A -> B) P). Qed.
Lemma lem8410215 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term4411 A B C P clauses s s' t t' c) = (term4412 A B C P clauses s s' t t' c).
Proof. exact (@lem8410214 A B (term342 A B C P clauses s s' t t' c)). Qed.
Lemma lem8410216 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term4413 A B C P clauses s s' t t' c x) = (term341 A B C P clauses s s' t x t' c).
Proof. exact (eq_refl (term4413 A B C P clauses s s' t t' c x)). Qed.
Lemma lem8410217 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8410218 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term4414 A B C P clauses s s' t t' c x) = (term4404 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8410217) (@lem8410216 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8410219 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term4414 A B C P clauses s s' t t' c x) = (term4410 A B C P clauses s s' t x t' c).
Proof. exact (TRANS (@lem8410218 A B C P clauses s s' t x t' c) (@lem8410213 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8410220 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term4415 A B C P clauses s s' t t' c) = (term4416 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : A -> B => @lem8410219 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8410221 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8410222 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term4412 A B C P clauses s s' t t' c) = (term4417 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8410221 A B) (@lem8410220 A B C P clauses s s' t t' c)). Qed.
Lemma lem8410223 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term4411 A B C P clauses s s' t t' c) = (term4417 A B C P clauses s s' t t' c).
Proof. exact (TRANS (@lem8410215 A B C P clauses s s' t t' c) (@lem8410222 A B C P clauses s s' t t' c)). Qed.
Lemma lem8410224 {A B C : Type'} (P : type864 A B C) : (term1696 A B C P) = (term1697 A B C P).
Proof. exact (@lem18392 (type1506 A B C) P). Qed.
Lemma lem8410225 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term4418 A B C P clauses s s' t c) = (term4419 A B C P clauses s s' t c).
Proof. exact (@lem8410224 A B C (term344 A B C P clauses s s' t c)). Qed.
Lemma lem8410226 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term4420 A B C P clauses s s' t c t') = (term343 A B C P clauses s s' t t' c).
Proof. exact (eq_refl (term4420 A B C P clauses s s' t c t')). Qed.
Lemma lem8410227 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8410228 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term4421 A B C P clauses s s' t c t') = (term4411 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8410227) (@lem8410226 A B C P clauses s s' t t' c)). Qed.
Lemma lem8410229 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term4421 A B C P clauses s s' t c t') = (term4417 A B C P clauses s s' t t' c).
Proof. exact (TRANS (@lem8410228 A B C P clauses s s' t t' c) (@lem8410223 A B C P clauses s s' t t' c)). Qed.
Lemma lem8410230 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term4422 A B C P clauses s s' t c) = (term4423 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1506 A B C => @lem8410229 A B C P clauses s s' t t' c)). Qed.
Lemma lem8410231 {A B C : Type'} : (@ex (C -> (A -> B) -> B)) = (@ex (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> B))). Qed.
Lemma lem8410232 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term4419 A B C P clauses s s' t c) = (term4424 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8410231 A B C) (@lem8410230 A B C P clauses s s' t c)). Qed.
Lemma lem8410233 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term4418 A B C P clauses s s' t c) = (term4424 A B C P clauses s s' t c).
Proof. exact (TRANS (@lem8410225 A B C P clauses s s' t c) (@lem8410232 A B C P clauses s s' t c)). Qed.
Lemma lem8410234 {A B P : Type'} (P' : type116 A B P) : (term1706 A B P P') = (term1707 A B P P').
Proof. exact (@lem18392 (type558 A B P) P'). Qed.
Lemma lem8410235 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term4425 A B C P clauses s t c) = (term4426 A B C P clauses s t c).
Proof. exact (@lem8410234 A B P (term346 A B C P clauses s t c)). Qed.
Lemma lem8410236 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term4427 A B C P clauses s t c s') = (term345 A B C P clauses s s' t c).
Proof. exact (eq_refl (term4427 A B C P clauses s t c s')). Qed.
Lemma lem8410237 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8410238 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term4428 A B C P clauses s t c s') = (term4418 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8410237) (@lem8410236 A B C P clauses s s' t c)). Qed.
Lemma lem8410239 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term4428 A B C P clauses s t c s') = (term4424 A B C P clauses s s' t c).
Proof. exact (TRANS (@lem8410238 A B C P clauses s s' t c) (@lem8410233 A B C P clauses s s' t c)). Qed.
Lemma lem8410240 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term4429 A B C P clauses s t c) = (term4430 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type558 A B P => @lem8410239 A B C P clauses s s' t c)). Qed.
Lemma lem8410241 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8410242 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term4426 A B C P clauses s t c) = (term4431 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8410241 A B P) (@lem8410240 A B C P clauses s t c)). Qed.
Lemma lem8410243 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term4425 A B C P clauses s t c) = (term4431 A B C P clauses s t c).
Proof. exact (TRANS (@lem8410235 A B C P clauses s t c) (@lem8410242 A B C P clauses s t c)). Qed.
Lemma lem8410244 {A B C : Type'} (P : type864 A B C) : (term1696 A B C P) = (term1697 A B C P).
Proof. exact (@lem18392 (type1506 A B C) P). Qed.
Lemma lem8410245 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term4432 A B C P clauses s c) = (term4433 A B C P clauses s c).
Proof. exact (@lem8410244 A B C (term348 A B C P clauses s c)). Qed.
Lemma lem8410246 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term4434 A B C P clauses s c t) = (term347 A B C P clauses s t c).
Proof. exact (eq_refl (term4434 A B C P clauses s c t)). Qed.
Lemma lem8410247 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8410248 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term4435 A B C P clauses s c t) = (term4425 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8410247) (@lem8410246 A B C P clauses s t c)). Qed.
Lemma lem8410249 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term4435 A B C P clauses s c t) = (term4431 A B C P clauses s t c).
Proof. exact (TRANS (@lem8410248 A B C P clauses s t c) (@lem8410243 A B C P clauses s t c)). Qed.
Lemma lem8410250 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term4436 A B C P clauses s c) = (term4437 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8410249 A B C P clauses s t c)). Qed.
Lemma lem8410251 {A B C : Type'} : (@ex (C -> (A -> B) -> B)) = (@ex (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> B))). Qed.
Lemma lem8410252 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term4433 A B C P clauses s c) = (term4438 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8410251 A B C) (@lem8410250 A B C P clauses s c)). Qed.
Lemma lem8410253 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term4432 A B C P clauses s c) = (term4438 A B C P clauses s c).
Proof. exact (TRANS (@lem8410245 A B C P clauses s c) (@lem8410252 A B C P clauses s c)). Qed.
Lemma lem8410254 {A B P : Type'} (P' : type116 A B P) : (term1706 A B P P') = (term1707 A B P P').
Proof. exact (@lem18392 (type558 A B P) P'). Qed.
Lemma lem8410255 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term4439 A B C P clauses c) = (term4440 A B C P clauses c).
Proof. exact (@lem8410254 A B P (term350 A B C P clauses c)). Qed.
Lemma lem8410256 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term4441 A B C P clauses c s) = (term349 A B C P clauses s c).
Proof. exact (eq_refl (term4441 A B C P clauses c s)). Qed.
Lemma lem8410257 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8410258 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term4442 A B C P clauses c s) = (term4432 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8410257) (@lem8410256 A B C P clauses s c)). Qed.
Lemma lem8410259 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term4442 A B C P clauses c s) = (term4438 A B C P clauses s c).
Proof. exact (TRANS (@lem8410258 A B C P clauses s c) (@lem8410253 A B C P clauses s c)). Qed.
Lemma lem8410260 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term4443 A B C P clauses c) = (term4444 A B C P clauses c).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8410259 A B C P clauses s c)). Qed.
Lemma lem8410261 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8410262 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term4440 A B C P clauses c) = (term4445 A B C P clauses c).
Proof. exact (MK_COMB (@lem8410261 A B P) (@lem8410260 A B C P clauses c)). Qed.
Lemma lem8410263 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term4439 A B C P clauses c) = (term4445 A B C P clauses c).
Proof. exact (TRANS (@lem8410255 A B C P clauses c) (@lem8410262 A B C P clauses c)). Qed.
Lemma lem8410264 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term742 A B C P _115318 c clauses) = (term742 A B C P _115318 c clauses).
Proof. exact (eq_refl (term742 A B C P _115318 c clauses)). Qed.
Lemma lem8410265 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8410266 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term4446 A B C P clauses c) = (term4447 A B C P clauses c).
Proof. exact (MK_COMB (@lem8410265) (@lem8410263 A B C P clauses c)). Qed.
Lemma lem8410267 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4448 A B C P _115318 c clauses) = (term4449 A B C P _115318 c clauses).
Proof. exact (MK_COMB (@lem8410266 A B C P clauses c) (@lem8410264 A B C P _115318 c clauses)). Qed.
Lemma lem8410268 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term743 A B C P _115318 c clauses) = (term4448 A B C P _115318 c clauses).
Proof. exact (@lem17265 (term351 A B C P clauses c) (term742 A B C P _115318 c clauses)). Qed.
Lemma lem8410269 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term743 A B C P _115318 c clauses) = (term4449 A B C P _115318 c clauses).
Proof. exact (TRANS (@lem8410268 A B C P _115318 c clauses) (@lem8410267 A B C P _115318 c clauses)). Qed.
Lemma lem8410270 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term744 A B C P _115318 clauses) = (term4450 A B C P _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8410269 A B C P _115318 c clauses)). Qed.
Lemma lem8410271 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8410272 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term745 A B C P _115318 clauses) = (term4451 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8410271 C) (@lem8410270 A B C P _115318 clauses)). Qed.
Lemma lem8410273 {A B C P : Type'} (_115318 : type1049 A B C P) : (term746 A B C P _115318) = (term4452 A B C P _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8410272 A B C P _115318 clauses)). Qed.
Lemma lem8410274 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8410275 {A B C P : Type'} (_115318 : type1049 A B C P) : (term747 A B C P _115318) = (term4453 A B C P _115318).
Proof. exact (MK_COMB (@lem8410274 A B C P) (@lem8410273 A B C P _115318)). Qed.
Lemma lem8410398 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8410399 {A B P : Type'} (P' : type116 A B P) (Q : Prop) : (term4004 A B P P' Q) = (term4005 A B P P' Q).
Proof. exact (@lem8410398 (type558 A B P) P' Q). Qed.
Lemma lem8410400 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4454 A B C P _115318 c clauses) = (term4455 A B C P _115318 c clauses).
Proof. exact (@lem8410399 A B P (term4444 A B C P clauses c) (term742 A B C P _115318 c clauses)). Qed.
Lemma lem8410401 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term4456 A B C P clauses c s) = (term4438 A B C P clauses s c).
Proof. exact (eq_refl (term4456 A B C P clauses c s)). Qed.
Lemma lem8410402 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term4457 A B C P clauses c) = (term4444 A B C P clauses c).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8410401 A B C P clauses s c)). Qed.
Lemma lem8410403 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8410404 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term4458 A B C P clauses c) = (term4445 A B C P clauses c).
Proof. exact (MK_COMB (@lem8410403 A B P) (@lem8410402 A B C P clauses c)). Qed.
Lemma lem8410405 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8410406 {A B C P : Type'} (clauses : type1630 A B C P) (c : C) : (term4459 A B C P clauses c) = (term4447 A B C P clauses c).
Proof. exact (MK_COMB (@lem8410405) (@lem8410404 A B C P clauses c)). Qed.
Lemma lem8410407 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term742 A B C P _115318 c clauses) = (term742 A B C P _115318 c clauses).
Proof. exact (eq_refl (term742 A B C P _115318 c clauses)). Qed.
Lemma lem8410408 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4454 A B C P _115318 c clauses) = (term4449 A B C P _115318 c clauses).
Proof. exact (MK_COMB (@lem8410406 A B C P clauses c) (@lem8410407 A B C P _115318 c clauses)). Qed.
Lemma lem8410409 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410410 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4460 A B C P _115318 c clauses) = (term4461 A B C P _115318 c clauses).
Proof. exact (MK_COMB (@lem8410409) (@lem8410408 A B C P _115318 c clauses)). Qed.
Lemma lem8410411 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term4456 A B C P clauses c s) = (term4438 A B C P clauses s c).
Proof. exact (eq_refl (term4456 A B C P clauses c s)). Qed.
Lemma lem8410412 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8410413 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term4462 A B C P clauses c s) = (term4463 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8410412) (@lem8410411 A B C P clauses s c)). Qed.
Lemma lem8410414 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term742 A B C P _115318 c clauses) = (term742 A B C P _115318 c clauses).
Proof. exact (eq_refl (term742 A B C P _115318 c clauses)). Qed.
Lemma lem8410415 {A B C P : Type'} (s : type558 A B P) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4464 A B C P s _115318 c clauses) = (term4465 A B C P s _115318 c clauses).
Proof. exact (MK_COMB (@lem8410413 A B C P clauses s c) (@lem8410414 A B C P _115318 c clauses)). Qed.
Lemma lem8410416 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4466 A B C P _115318 c clauses) = (term4467 A B C P _115318 c clauses).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8410415 A B C P s _115318 c clauses)). Qed.
Lemma lem8410417 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8410418 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4455 A B C P _115318 c clauses) = (term4468 A B C P _115318 c clauses).
Proof. exact (MK_COMB (@lem8410417 A B P) (@lem8410416 A B C P _115318 c clauses)). Qed.
Lemma lem8410419 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : ((term4454 A B C P _115318 c clauses) = (term4455 A B C P _115318 c clauses)) = ((term4449 A B C P _115318 c clauses) = (term4468 A B C P _115318 c clauses)).
Proof. exact (MK_COMB (@lem8410410 A B C P _115318 c clauses) (@lem8410418 A B C P _115318 c clauses)). Qed.
Lemma lem8410420 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4449 A B C P _115318 c clauses) = (term4468 A B C P _115318 c clauses).
Proof. exact (EQ_MP (@lem8410419 A B C P _115318 c clauses) (@lem8410400 A B C P _115318 c clauses)). Qed.
Lemma lem8410422 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8410423 {A B C : Type'} (P : type864 A B C) (Q : Prop) : (term4469 A B C P Q) = (term4470 A B C P Q).
Proof. exact (@lem8410422 (type1506 A B C) P Q). Qed.
Lemma lem8410424 {A B C P : Type'} (s : type558 A B P) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4471 A B C P s _115318 c clauses) = (term4472 A B C P s _115318 c clauses).
Proof. exact (@lem8410423 A B C (term4437 A B C P clauses s c) (term742 A B C P _115318 c clauses)). Qed.
Lemma lem8410425 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term4473 A B C P clauses s c t) = (term4431 A B C P clauses s t c).
Proof. exact (eq_refl (term4473 A B C P clauses s c t)). Qed.
Lemma lem8410426 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term4474 A B C P clauses s c) = (term4437 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8410425 A B C P clauses s t c)). Qed.
Lemma lem8410427 {A B C : Type'} : (@ex (C -> (A -> B) -> B)) = (@ex (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> B))). Qed.
Lemma lem8410428 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term4475 A B C P clauses s c) = (term4438 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8410427 A B C) (@lem8410426 A B C P clauses s c)). Qed.
Lemma lem8410429 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8410430 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (c : C) : (term4476 A B C P clauses s c) = (term4463 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8410429) (@lem8410428 A B C P clauses s c)). Qed.
Lemma lem8410431 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term742 A B C P _115318 c clauses) = (term742 A B C P _115318 c clauses).
Proof. exact (eq_refl (term742 A B C P _115318 c clauses)). Qed.
Lemma lem8410432 {A B C P : Type'} (s : type558 A B P) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4471 A B C P s _115318 c clauses) = (term4465 A B C P s _115318 c clauses).
Proof. exact (MK_COMB (@lem8410430 A B C P clauses s c) (@lem8410431 A B C P _115318 c clauses)). Qed.
Lemma lem8410433 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410434 {A B C P : Type'} (s : type558 A B P) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4477 A B C P s _115318 c clauses) = (term4478 A B C P s _115318 c clauses).
Proof. exact (MK_COMB (@lem8410433) (@lem8410432 A B C P s _115318 c clauses)). Qed.
Lemma lem8410435 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term4473 A B C P clauses s c t) = (term4431 A B C P clauses s t c).
Proof. exact (eq_refl (term4473 A B C P clauses s c t)). Qed.
Lemma lem8410436 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8410437 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term4479 A B C P clauses s c t) = (term4480 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8410436) (@lem8410435 A B C P clauses s t c)). Qed.
Lemma lem8410438 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term742 A B C P _115318 c clauses) = (term742 A B C P _115318 c clauses).
Proof. exact (eq_refl (term742 A B C P _115318 c clauses)). Qed.
Lemma lem8410439 {A B C P : Type'} (s : type558 A B P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4481 A B C P s t _115318 c clauses) = (term4482 A B C P s t _115318 c clauses).
Proof. exact (MK_COMB (@lem8410437 A B C P clauses s t c) (@lem8410438 A B C P _115318 c clauses)). Qed.
Lemma lem8410440 {A B C P : Type'} (s : type558 A B P) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4483 A B C P s _115318 c clauses) = (term4484 A B C P s _115318 c clauses).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8410439 A B C P s t _115318 c clauses)). Qed.
Lemma lem8410441 {A B C : Type'} : (@ex (C -> (A -> B) -> B)) = (@ex (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> B))). Qed.
Lemma lem8410442 {A B C P : Type'} (s : type558 A B P) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4472 A B C P s _115318 c clauses) = (term4485 A B C P s _115318 c clauses).
Proof. exact (MK_COMB (@lem8410441 A B C) (@lem8410440 A B C P s _115318 c clauses)). Qed.
Lemma lem8410443 {A B C P : Type'} (s : type558 A B P) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : ((term4471 A B C P s _115318 c clauses) = (term4472 A B C P s _115318 c clauses)) = ((term4465 A B C P s _115318 c clauses) = (term4485 A B C P s _115318 c clauses)).
Proof. exact (MK_COMB (@lem8410434 A B C P s _115318 c clauses) (@lem8410442 A B C P s _115318 c clauses)). Qed.
Lemma lem8410444 {A B C P : Type'} (s : type558 A B P) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4465 A B C P s _115318 c clauses) = (term4485 A B C P s _115318 c clauses).
Proof. exact (EQ_MP (@lem8410443 A B C P s _115318 c clauses) (@lem8410424 A B C P s _115318 c clauses)). Qed.
Lemma lem8410446 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8410447 {A B P : Type'} (P' : type116 A B P) (Q : Prop) : (term4004 A B P P' Q) = (term4005 A B P P' Q).
Proof. exact (@lem8410446 (type558 A B P) P' Q). Qed.
Lemma lem8410448 {A B C P : Type'} (s : type558 A B P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4486 A B C P s t _115318 c clauses) = (term4487 A B C P s t _115318 c clauses).
Proof. exact (@lem8410447 A B P (term4430 A B C P clauses s t c) (term742 A B C P _115318 c clauses)). Qed.
Lemma lem8410449 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term4488 A B C P clauses s t c s') = (term4424 A B C P clauses s s' t c).
Proof. exact (eq_refl (term4488 A B C P clauses s t c s')). Qed.
Lemma lem8410450 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term4489 A B C P clauses s t c) = (term4430 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type558 A B P => @lem8410449 A B C P clauses s s' t c)). Qed.
Lemma lem8410451 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8410452 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term4490 A B C P clauses s t c) = (term4431 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8410451 A B P) (@lem8410450 A B C P clauses s t c)). Qed.
Lemma lem8410453 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8410454 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (t : type1506 A B C) (c : C) : (term4491 A B C P clauses s t c) = (term4480 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8410453) (@lem8410452 A B C P clauses s t c)). Qed.
Lemma lem8410455 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term742 A B C P _115318 c clauses) = (term742 A B C P _115318 c clauses).
Proof. exact (eq_refl (term742 A B C P _115318 c clauses)). Qed.
Lemma lem8410456 {A B C P : Type'} (s : type558 A B P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4486 A B C P s t _115318 c clauses) = (term4482 A B C P s t _115318 c clauses).
Proof. exact (MK_COMB (@lem8410454 A B C P clauses s t c) (@lem8410455 A B C P _115318 c clauses)). Qed.
Lemma lem8410457 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410458 {A B C P : Type'} (s : type558 A B P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4492 A B C P s t _115318 c clauses) = (term4493 A B C P s t _115318 c clauses).
Proof. exact (MK_COMB (@lem8410457) (@lem8410456 A B C P s t _115318 c clauses)). Qed.
Lemma lem8410459 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term4488 A B C P clauses s t c s') = (term4424 A B C P clauses s s' t c).
Proof. exact (eq_refl (term4488 A B C P clauses s t c s')). Qed.
Lemma lem8410460 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8410461 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term4494 A B C P clauses s t c s') = (term4495 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8410460) (@lem8410459 A B C P clauses s s' t c)). Qed.
Lemma lem8410462 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term742 A B C P _115318 c clauses) = (term742 A B C P _115318 c clauses).
Proof. exact (eq_refl (term742 A B C P _115318 c clauses)). Qed.
Lemma lem8410463 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4496 A B C P s t s' _115318 c clauses) = (term4497 A B C P s s' t _115318 c clauses).
Proof. exact (MK_COMB (@lem8410461 A B C P clauses s s' t c) (@lem8410462 A B C P _115318 c clauses)). Qed.
Lemma lem8410464 {A B C P : Type'} (s : type558 A B P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4498 A B C P s t _115318 c clauses) = (term4499 A B C P s t _115318 c clauses).
Proof. exact (fun_ext (fun s' : type558 A B P => @lem8410463 A B C P s s' t _115318 c clauses)). Qed.
Lemma lem8410465 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8410466 {A B C P : Type'} (s : type558 A B P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4487 A B C P s t _115318 c clauses) = (term4500 A B C P s t _115318 c clauses).
Proof. exact (MK_COMB (@lem8410465 A B P) (@lem8410464 A B C P s t _115318 c clauses)). Qed.
Lemma lem8410467 {A B C P : Type'} (s : type558 A B P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : ((term4486 A B C P s t _115318 c clauses) = (term4487 A B C P s t _115318 c clauses)) = ((term4482 A B C P s t _115318 c clauses) = (term4500 A B C P s t _115318 c clauses)).
Proof. exact (MK_COMB (@lem8410458 A B C P s t _115318 c clauses) (@lem8410466 A B C P s t _115318 c clauses)). Qed.
Lemma lem8410468 {A B C P : Type'} (s : type558 A B P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4482 A B C P s t _115318 c clauses) = (term4500 A B C P s t _115318 c clauses).
Proof. exact (EQ_MP (@lem8410467 A B C P s t _115318 c clauses) (@lem8410448 A B C P s t _115318 c clauses)). Qed.
Lemma lem8410470 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8410471 {A B C : Type'} (P : type864 A B C) (Q : Prop) : (term4469 A B C P Q) = (term4470 A B C P Q).
Proof. exact (@lem8410470 (type1506 A B C) P Q). Qed.
Lemma lem8410472 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4501 A B C P s s' t _115318 c clauses) = (term4502 A B C P s s' t _115318 c clauses).
Proof. exact (@lem8410471 A B C (term4423 A B C P clauses s s' t c) (term742 A B C P _115318 c clauses)). Qed.
Lemma lem8410473 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term4503 A B C P clauses s s' t c t') = (term4417 A B C P clauses s s' t t' c).
Proof. exact (eq_refl (term4503 A B C P clauses s s' t c t')). Qed.
Lemma lem8410474 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term4504 A B C P clauses s s' t c) = (term4423 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1506 A B C => @lem8410473 A B C P clauses s s' t t' c)). Qed.
Lemma lem8410475 {A B C : Type'} : (@ex (C -> (A -> B) -> B)) = (@ex (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> B))). Qed.
Lemma lem8410476 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term4505 A B C P clauses s s' t c) = (term4424 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8410475 A B C) (@lem8410474 A B C P clauses s s' t c)). Qed.
Lemma lem8410477 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8410478 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (c : C) : (term4506 A B C P clauses s s' t c) = (term4495 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8410477) (@lem8410476 A B C P clauses s s' t c)). Qed.
Lemma lem8410479 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term742 A B C P _115318 c clauses) = (term742 A B C P _115318 c clauses).
Proof. exact (eq_refl (term742 A B C P _115318 c clauses)). Qed.
Lemma lem8410480 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4501 A B C P s s' t _115318 c clauses) = (term4497 A B C P s s' t _115318 c clauses).
Proof. exact (MK_COMB (@lem8410478 A B C P clauses s s' t c) (@lem8410479 A B C P _115318 c clauses)). Qed.
Lemma lem8410481 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410482 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4507 A B C P s s' t _115318 c clauses) = (term4508 A B C P s s' t _115318 c clauses).
Proof. exact (MK_COMB (@lem8410481) (@lem8410480 A B C P s s' t _115318 c clauses)). Qed.
Lemma lem8410483 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term4503 A B C P clauses s s' t c t') = (term4417 A B C P clauses s s' t t' c).
Proof. exact (eq_refl (term4503 A B C P clauses s s' t c t')). Qed.
Lemma lem8410484 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8410485 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term4509 A B C P clauses s s' t c t') = (term4510 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8410484) (@lem8410483 A B C P clauses s s' t t' c)). Qed.
Lemma lem8410486 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term742 A B C P _115318 c clauses) = (term742 A B C P _115318 c clauses).
Proof. exact (eq_refl (term742 A B C P _115318 c clauses)). Qed.
Lemma lem8410487 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4511 A B C P s s' t t' _115318 c clauses) = (term4512 A B C P s s' t t' _115318 c clauses).
Proof. exact (MK_COMB (@lem8410485 A B C P clauses s s' t t' c) (@lem8410486 A B C P _115318 c clauses)). Qed.
Lemma lem8410488 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4513 A B C P s s' t _115318 c clauses) = (term4514 A B C P s s' t _115318 c clauses).
Proof. exact (fun_ext (fun t' : type1506 A B C => @lem8410487 A B C P s s' t t' _115318 c clauses)). Qed.
Lemma lem8410489 {A B C : Type'} : (@ex (C -> (A -> B) -> B)) = (@ex (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> B))). Qed.
Lemma lem8410490 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4502 A B C P s s' t _115318 c clauses) = (term4515 A B C P s s' t _115318 c clauses).
Proof. exact (MK_COMB (@lem8410489 A B C) (@lem8410488 A B C P s s' t _115318 c clauses)). Qed.
Lemma lem8410491 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : ((term4501 A B C P s s' t _115318 c clauses) = (term4502 A B C P s s' t _115318 c clauses)) = ((term4497 A B C P s s' t _115318 c clauses) = (term4515 A B C P s s' t _115318 c clauses)).
Proof. exact (MK_COMB (@lem8410482 A B C P s s' t _115318 c clauses) (@lem8410490 A B C P s s' t _115318 c clauses)). Qed.
Lemma lem8410492 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4497 A B C P s s' t _115318 c clauses) = (term4515 A B C P s s' t _115318 c clauses).
Proof. exact (EQ_MP (@lem8410491 A B C P s s' t _115318 c clauses) (@lem8410472 A B C P s s' t _115318 c clauses)). Qed.
Lemma lem8410494 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8410495 {A B : Type'} (P : type572 A B) (Q : Prop) : (term4516 A B P Q) = (term4517 A B P Q).
Proof. exact (@lem8410494 (A -> B) P Q). Qed.
Lemma lem8410496 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4518 A B C P s s' t t' _115318 c clauses) = (term4519 A B C P s s' t t' _115318 c clauses).
Proof. exact (@lem8410495 A B (term4416 A B C P clauses s s' t t' c) (term742 A B C P _115318 c clauses)). Qed.
Lemma lem8410497 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term4520 A B C P clauses s s' t t' c x) = (term4410 A B C P clauses s s' t x t' c).
Proof. exact (eq_refl (term4520 A B C P clauses s s' t t' c x)). Qed.
Lemma lem8410498 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term4521 A B C P clauses s s' t t' c) = (term4416 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : A -> B => @lem8410497 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8410499 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8410500 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term4522 A B C P clauses s s' t t' c) = (term4417 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8410499 A B) (@lem8410498 A B C P clauses s s' t t' c)). Qed.
Lemma lem8410501 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8410502 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (c : C) : (term4523 A B C P clauses s s' t t' c) = (term4510 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8410501) (@lem8410500 A B C P clauses s s' t t' c)). Qed.
Lemma lem8410503 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term742 A B C P _115318 c clauses) = (term742 A B C P _115318 c clauses).
Proof. exact (eq_refl (term742 A B C P _115318 c clauses)). Qed.
Lemma lem8410504 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4518 A B C P s s' t t' _115318 c clauses) = (term4512 A B C P s s' t t' _115318 c clauses).
Proof. exact (MK_COMB (@lem8410502 A B C P clauses s s' t t' c) (@lem8410503 A B C P _115318 c clauses)). Qed.
Lemma lem8410505 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410506 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4524 A B C P s s' t t' _115318 c clauses) = (term4525 A B C P s s' t t' _115318 c clauses).
Proof. exact (MK_COMB (@lem8410505) (@lem8410504 A B C P s s' t t' _115318 c clauses)). Qed.
Lemma lem8410507 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term4520 A B C P clauses s s' t t' c x) = (term4410 A B C P clauses s s' t x t' c).
Proof. exact (eq_refl (term4520 A B C P clauses s s' t t' c x)). Qed.
Lemma lem8410508 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8410509 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term4526 A B C P clauses s s' t t' c x) = (term4527 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8410508) (@lem8410507 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8410510 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term742 A B C P _115318 c clauses) = (term742 A B C P _115318 c clauses).
Proof. exact (eq_refl (term742 A B C P _115318 c clauses)). Qed.
Lemma lem8410511 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4528 A B C P s s' t t' x _115318 c clauses) = (term4529 A B C P s s' t x t' _115318 c clauses).
Proof. exact (MK_COMB (@lem8410509 A B C P clauses s s' t x t' c) (@lem8410510 A B C P _115318 c clauses)). Qed.
Lemma lem8410512 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4530 A B C P s s' t t' _115318 c clauses) = (term4531 A B C P s s' t t' _115318 c clauses).
Proof. exact (fun_ext (fun x : A -> B => @lem8410511 A B C P s s' t x t' _115318 c clauses)). Qed.
Lemma lem8410513 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8410514 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4519 A B C P s s' t t' _115318 c clauses) = (term4532 A B C P s s' t t' _115318 c clauses).
Proof. exact (MK_COMB (@lem8410513 A B) (@lem8410512 A B C P s s' t t' _115318 c clauses)). Qed.
Lemma lem8410515 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : ((term4518 A B C P s s' t t' _115318 c clauses) = (term4519 A B C P s s' t t' _115318 c clauses)) = ((term4512 A B C P s s' t t' _115318 c clauses) = (term4532 A B C P s s' t t' _115318 c clauses)).
Proof. exact (MK_COMB (@lem8410506 A B C P s s' t t' _115318 c clauses) (@lem8410514 A B C P s s' t t' _115318 c clauses)). Qed.
Lemma lem8410516 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4512 A B C P s s' t t' _115318 c clauses) = (term4532 A B C P s s' t t' _115318 c clauses).
Proof. exact (EQ_MP (@lem8410515 A B C P s s' t t' _115318 c clauses) (@lem8410496 A B C P s s' t t' _115318 c clauses)). Qed.
Lemma lem8410518 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8410519 {A B : Type'} (P : type572 A B) (Q : Prop) : (term4516 A B P Q) = (term4517 A B P Q).
Proof. exact (@lem8410518 (A -> B) P Q). Qed.
Lemma lem8410520 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4533 A B C P s s' t x t' _115318 c clauses) = (term4534 A B C P s s' t x t' _115318 c clauses).
Proof. exact (@lem8410519 A B (term4409 A B C P clauses s s' t x t' c) (term742 A B C P _115318 c clauses)). Qed.
Lemma lem8410521 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) (y : A -> B) : (term4535 A B C P clauses s s' t x t' c y) = (term4400 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term4535 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8410522 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term4536 A B C P clauses s s' t x t' c) = (term4409 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : A -> B => @lem8410521 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8410523 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8410524 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term4537 A B C P clauses s s' t x t' c) = (term4410 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8410523 A B) (@lem8410522 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8410525 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8410526 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) : (term4538 A B C P clauses s s' t x t' c) = (term4527 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8410525) (@lem8410524 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8410527 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term742 A B C P _115318 c clauses) = (term742 A B C P _115318 c clauses).
Proof. exact (eq_refl (term742 A B C P _115318 c clauses)). Qed.
Lemma lem8410528 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4533 A B C P s s' t x t' _115318 c clauses) = (term4529 A B C P s s' t x t' _115318 c clauses).
Proof. exact (MK_COMB (@lem8410526 A B C P clauses s s' t x t' c) (@lem8410527 A B C P _115318 c clauses)). Qed.
Lemma lem8410529 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410530 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4539 A B C P s s' t x t' _115318 c clauses) = (term4540 A B C P s s' t x t' _115318 c clauses).
Proof. exact (MK_COMB (@lem8410529) (@lem8410528 A B C P s s' t x t' _115318 c clauses)). Qed.
Lemma lem8410531 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) (y : A -> B) : (term4535 A B C P clauses s s' t x t' c y) = (term4400 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term4535 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8410532 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8410533 {A B C P : Type'} (clauses : type1630 A B C P) (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (c : C) (y : A -> B) : (term4541 A B C P clauses s s' t x t' c y) = (term4542 A B C P clauses s s' t x t' c y).
Proof. exact (MK_COMB (@lem8410532) (@lem8410531 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8410534 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term742 A B C P _115318 c clauses) = (term742 A B C P _115318 c clauses).
Proof. exact (eq_refl (term742 A B C P _115318 c clauses)). Qed.
Lemma lem8410535 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (y : A -> B) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4543 A B C P s s' t x t' y _115318 c clauses) = (term4544 A B C P s s' t x t' y _115318 c clauses).
Proof. exact (MK_COMB (@lem8410533 A B C P clauses s s' t x t' c y) (@lem8410534 A B C P _115318 c clauses)). Qed.
Lemma lem8410536 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4545 A B C P s s' t x t' _115318 c clauses) = (term4546 A B C P s s' t x t' _115318 c clauses).
Proof. exact (fun_ext (fun y : A -> B => @lem8410535 A B C P s s' t x t' y _115318 c clauses)). Qed.
Lemma lem8410537 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8410538 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4534 A B C P s s' t x t' _115318 c clauses) = (term4547 A B C P s s' t x t' _115318 c clauses).
Proof. exact (MK_COMB (@lem8410537 A B) (@lem8410536 A B C P s s' t x t' _115318 c clauses)). Qed.
Lemma lem8410539 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : ((term4533 A B C P s s' t x t' _115318 c clauses) = (term4534 A B C P s s' t x t' _115318 c clauses)) = ((term4529 A B C P s s' t x t' _115318 c clauses) = (term4547 A B C P s s' t x t' _115318 c clauses)).
Proof. exact (MK_COMB (@lem8410530 A B C P s s' t x t' _115318 c clauses) (@lem8410538 A B C P s s' t x t' _115318 c clauses)). Qed.
Lemma lem8410540 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (x : A -> B) (t' : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4529 A B C P s s' t x t' _115318 c clauses) = (term4547 A B C P s s' t x t' _115318 c clauses).
Proof. exact (EQ_MP (@lem8410539 A B C P s s' t x t' _115318 c clauses) (@lem8410520 A B C P s s' t x t' _115318 c clauses)). Qed.
Lemma lem8410541 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4531 A B C P s s' t t' _115318 c clauses) = (term4548 A B C P s s' t t' _115318 c clauses).
Proof. exact (fun_ext (fun x : A -> B => @lem8410540 A B C P s s' t x t' _115318 c clauses)). Qed.
Lemma lem8410542 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8410543 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4532 A B C P s s' t t' _115318 c clauses) = (term4549 A B C P s s' t t' _115318 c clauses).
Proof. exact (MK_COMB (@lem8410542 A B) (@lem8410541 A B C P s s' t t' _115318 c clauses)). Qed.
Lemma lem8410544 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (t' : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4512 A B C P s s' t t' _115318 c clauses) = (term4549 A B C P s s' t t' _115318 c clauses).
Proof. exact (TRANS (@lem8410516 A B C P s s' t t' _115318 c clauses) (@lem8410543 A B C P s s' t t' _115318 c clauses)). Qed.
Lemma lem8410545 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4514 A B C P s s' t _115318 c clauses) = (term4550 A B C P s s' t _115318 c clauses).
Proof. exact (fun_ext (fun t' : type1506 A B C => @lem8410544 A B C P s s' t t' _115318 c clauses)). Qed.
Lemma lem8410546 {A B C : Type'} : (@ex (C -> (A -> B) -> B)) = (@ex (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> B))). Qed.
Lemma lem8410547 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4515 A B C P s s' t _115318 c clauses) = (term4551 A B C P s s' t _115318 c clauses).
Proof. exact (MK_COMB (@lem8410546 A B C) (@lem8410545 A B C P s s' t _115318 c clauses)). Qed.
Lemma lem8410548 {A B C P : Type'} (s : type558 A B P) (s' : type558 A B P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4497 A B C P s s' t _115318 c clauses) = (term4551 A B C P s s' t _115318 c clauses).
Proof. exact (TRANS (@lem8410492 A B C P s s' t _115318 c clauses) (@lem8410547 A B C P s s' t _115318 c clauses)). Qed.
Lemma lem8410549 {A B C P : Type'} (s : type558 A B P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4499 A B C P s t _115318 c clauses) = (term4552 A B C P s t _115318 c clauses).
Proof. exact (fun_ext (fun s' : type558 A B P => @lem8410548 A B C P s s' t _115318 c clauses)). Qed.
Lemma lem8410550 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8410551 {A B C P : Type'} (s : type558 A B P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4500 A B C P s t _115318 c clauses) = (term4553 A B C P s t _115318 c clauses).
Proof. exact (MK_COMB (@lem8410550 A B P) (@lem8410549 A B C P s t _115318 c clauses)). Qed.
Lemma lem8410552 {A B C P : Type'} (s : type558 A B P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4482 A B C P s t _115318 c clauses) = (term4553 A B C P s t _115318 c clauses).
Proof. exact (TRANS (@lem8410468 A B C P s t _115318 c clauses) (@lem8410551 A B C P s t _115318 c clauses)). Qed.
Lemma lem8410553 {A B C P : Type'} (s : type558 A B P) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4484 A B C P s _115318 c clauses) = (term4554 A B C P s _115318 c clauses).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8410552 A B C P s t _115318 c clauses)). Qed.
Lemma lem8410554 {A B C : Type'} : (@ex (C -> (A -> B) -> B)) = (@ex (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> B))). Qed.
Lemma lem8410555 {A B C P : Type'} (s : type558 A B P) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4485 A B C P s _115318 c clauses) = (term4555 A B C P s _115318 c clauses).
Proof. exact (MK_COMB (@lem8410554 A B C) (@lem8410553 A B C P s _115318 c clauses)). Qed.
Lemma lem8410556 {A B C P : Type'} (s : type558 A B P) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4465 A B C P s _115318 c clauses) = (term4555 A B C P s _115318 c clauses).
Proof. exact (TRANS (@lem8410444 A B C P s _115318 c clauses) (@lem8410555 A B C P s _115318 c clauses)). Qed.
Lemma lem8410557 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4467 A B C P _115318 c clauses) = (term4556 A B C P _115318 c clauses).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8410556 A B C P s _115318 c clauses)). Qed.
Lemma lem8410558 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8410559 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4468 A B C P _115318 c clauses) = (term4557 A B C P _115318 c clauses).
Proof. exact (MK_COMB (@lem8410558 A B P) (@lem8410557 A B C P _115318 c clauses)). Qed.
Lemma lem8410560 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4449 A B C P _115318 c clauses) = (term4557 A B C P _115318 c clauses).
Proof. exact (TRANS (@lem8410420 A B C P _115318 c clauses) (@lem8410559 A B C P _115318 c clauses)). Qed.
Lemma lem8410561 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4450 A B C P _115318 clauses) = (term4558 A B C P _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8410560 A B C P _115318 c clauses)). Qed.
Lemma lem8410562 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8410563 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4451 A B C P _115318 clauses) = (term4559 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8410562 C) (@lem8410561 A B C P _115318 clauses)). Qed.
Lemma lem8410565 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8410566 {A B C P : Type'} (P' : type1491 A B C P) : (term4560 A B C P P') = (term4561 A B C P P').
Proof. exact (@lem8410565 C (type558 A B P) P'). Qed.
Lemma lem8410567 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4562 A B C P _115318 clauses) = (term4563 A B C P _115318 clauses).
Proof. exact (@lem8410566 A B C P (term4564 A B C P _115318 clauses)). Qed.
Lemma lem8410568 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4565 A B C P _115318 clauses c) = (term4556 A B C P _115318 c clauses).
Proof. exact (eq_refl (term4565 A B C P _115318 clauses c)). Qed.
Lemma lem8410569 {A B P : Type'} (s : type558 A B P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8410570 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) (s : type558 A B P) : (term4566 A B C P _115318 clauses c s) = (term4567 A B C P _115318 c clauses s).
Proof. exact (MK_COMB (@lem8410568 A B C P _115318 c clauses) (@lem8410569 A B P s)). Qed.
Lemma lem8410571 {A B C P : Type'} (s : type558 A B P) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4567 A B C P _115318 c clauses s) = (term4555 A B C P s _115318 c clauses).
Proof. exact (eq_refl (term4567 A B C P _115318 c clauses s)). Qed.
Lemma lem8410572 {A B C P : Type'} (s : type558 A B P) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4566 A B C P _115318 clauses c s) = (term4555 A B C P s _115318 c clauses).
Proof. exact (TRANS (@lem8410570 A B C P _115318 c clauses s) (@lem8410571 A B C P s _115318 c clauses)). Qed.
Lemma lem8410573 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4568 A B C P _115318 clauses c) = (term4556 A B C P _115318 c clauses).
Proof. exact (fun_ext (fun s : type558 A B P => @lem8410572 A B C P s _115318 c clauses)). Qed.
Lemma lem8410574 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8410575 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4569 A B C P _115318 clauses c) = (term4557 A B C P _115318 c clauses).
Proof. exact (MK_COMB (@lem8410574 A B P) (@lem8410573 A B C P _115318 c clauses)). Qed.
Lemma lem8410576 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4570 A B C P _115318 clauses) = (term4558 A B C P _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8410575 A B C P _115318 c clauses)). Qed.
Lemma lem8410577 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8410578 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4562 A B C P _115318 clauses) = (term4559 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8410577 C) (@lem8410576 A B C P _115318 clauses)). Qed.
Lemma lem8410579 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410580 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4571 A B C P _115318 clauses) = (term4572 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8410579) (@lem8410578 A B C P _115318 clauses)). Qed.
Lemma lem8410581 {A B C P : Type'} (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4565 A B C P _115318 clauses c) = (term4556 A B C P _115318 c clauses).
Proof. exact (eq_refl (term4565 A B C P _115318 clauses c)). Qed.
Lemma lem8410582 {A B C P : Type'} (s : type1505 A B C P) (c : C) : (s c) = (s c).
Proof. exact (eq_refl (s c)). Qed.
Lemma lem8410583 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1505 A B C P) (c : C) : (term4573 A B C P _115318 clauses s c) = (term4574 A B C P _115318 clauses s c).
Proof. exact (MK_COMB (@lem8410581 A B C P _115318 c clauses) (@lem8410582 A B C P s c)). Qed.
Lemma lem8410584 {A B C P : Type'} (s : type1505 A B C P) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4574 A B C P _115318 clauses s c) = (term4575 A B C P s _115318 c clauses).
Proof. exact (eq_refl (term4574 A B C P _115318 clauses s c)). Qed.
Lemma lem8410585 {A B C P : Type'} (s : type1505 A B C P) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4573 A B C P _115318 clauses s c) = (term4575 A B C P s _115318 c clauses).
Proof. exact (TRANS (@lem8410583 A B C P _115318 clauses s c) (@lem8410584 A B C P s _115318 c clauses)). Qed.
Lemma lem8410586 {A B C P : Type'} (s : type1505 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4576 A B C P _115318 clauses s) = (term4577 A B C P s _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8410585 A B C P s _115318 c clauses)). Qed.
Lemma lem8410587 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8410588 {A B C P : Type'} (s : type1505 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4578 A B C P _115318 clauses s) = (term4579 A B C P s _115318 clauses).
Proof. exact (MK_COMB (@lem8410587 C) (@lem8410586 A B C P s _115318 clauses)). Qed.
Lemma lem8410589 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4580 A B C P _115318 clauses) = (term4581 A B C P _115318 clauses).
Proof. exact (fun_ext (fun s : type1505 A B C P => @lem8410588 A B C P s _115318 clauses)). Qed.
Lemma lem8410590 {A B C P : Type'} : (@ex (C -> (A -> B) -> P -> B)) = (@ex (C -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> P -> B))). Qed.
Lemma lem8410591 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4563 A B C P _115318 clauses) = (term4582 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8410590 A B C P) (@lem8410589 A B C P _115318 clauses)). Qed.
Lemma lem8410592 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : ((term4562 A B C P _115318 clauses) = (term4563 A B C P _115318 clauses)) = ((term4559 A B C P _115318 clauses) = (term4582 A B C P _115318 clauses)).
Proof. exact (MK_COMB (@lem8410580 A B C P _115318 clauses) (@lem8410591 A B C P _115318 clauses)). Qed.
Lemma lem8410593 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4559 A B C P _115318 clauses) = (term4582 A B C P _115318 clauses).
Proof. exact (EQ_MP (@lem8410592 A B C P _115318 clauses) (@lem8410567 A B C P _115318 clauses)). Qed.
Lemma lem8410595 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8410596 {A B C : Type'} (P : type1510 A B C) : (term4583 A B C P) = (term4584 A B C P).
Proof. exact (@lem8410595 C (type1506 A B C) P). Qed.
Lemma lem8410597 {A B C P : Type'} (s : type1505 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4585 A B C P s _115318 clauses) = (term4586 A B C P s _115318 clauses).
Proof. exact (@lem8410596 A B C (term4587 A B C P s _115318 clauses)). Qed.
Lemma lem8410598 {A B C P : Type'} (s : type1505 A B C P) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4588 A B C P s _115318 clauses c) = (term4589 A B C P s _115318 c clauses).
Proof. exact (eq_refl (term4588 A B C P s _115318 clauses c)). Qed.
Lemma lem8410599 {A B C : Type'} (t : type1506 A B C) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8410600 {A B C P : Type'} (s : type1505 A B C P) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) (t : type1506 A B C) : (term4590 A B C P s _115318 clauses c t) = (term4591 A B C P s _115318 c clauses t).
Proof. exact (MK_COMB (@lem8410598 A B C P s _115318 c clauses) (@lem8410599 A B C t)). Qed.
Lemma lem8410601 {A B C P : Type'} (s : type1505 A B C P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4591 A B C P s _115318 c clauses t) = (term4592 A B C P s t _115318 c clauses).
Proof. exact (eq_refl (term4591 A B C P s _115318 c clauses t)). Qed.
Lemma lem8410602 {A B C P : Type'} (s : type1505 A B C P) (t : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4590 A B C P s _115318 clauses c t) = (term4592 A B C P s t _115318 c clauses).
Proof. exact (TRANS (@lem8410600 A B C P s _115318 c clauses t) (@lem8410601 A B C P s t _115318 c clauses)). Qed.
Lemma lem8410603 {A B C P : Type'} (s : type1505 A B C P) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4593 A B C P s _115318 clauses c) = (term4589 A B C P s _115318 c clauses).
Proof. exact (fun_ext (fun t : type1506 A B C => @lem8410602 A B C P s t _115318 c clauses)). Qed.
Lemma lem8410604 {A B C : Type'} : (@ex (C -> (A -> B) -> B)) = (@ex (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> B))). Qed.
Lemma lem8410605 {A B C P : Type'} (s : type1505 A B C P) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4594 A B C P s _115318 clauses c) = (term4575 A B C P s _115318 c clauses).
Proof. exact (MK_COMB (@lem8410604 A B C) (@lem8410603 A B C P s _115318 c clauses)). Qed.
Lemma lem8410606 {A B C P : Type'} (s : type1505 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4595 A B C P s _115318 clauses) = (term4577 A B C P s _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8410605 A B C P s _115318 c clauses)). Qed.
Lemma lem8410607 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8410608 {A B C P : Type'} (s : type1505 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4585 A B C P s _115318 clauses) = (term4579 A B C P s _115318 clauses).
Proof. exact (MK_COMB (@lem8410607 C) (@lem8410606 A B C P s _115318 clauses)). Qed.
Lemma lem8410609 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410610 {A B C P : Type'} (s : type1505 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4596 A B C P s _115318 clauses) = (term4597 A B C P s _115318 clauses).
Proof. exact (MK_COMB (@lem8410609) (@lem8410608 A B C P s _115318 clauses)). Qed.
Lemma lem8410611 {A B C P : Type'} (s : type1505 A B C P) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4588 A B C P s _115318 clauses c) = (term4589 A B C P s _115318 c clauses).
Proof. exact (eq_refl (term4588 A B C P s _115318 clauses c)). Qed.
Lemma lem8410612 {A B C : Type'} (t : type1520 A B C) (c : C) : (t c) = (t c).
Proof. exact (eq_refl (t c)). Qed.
Lemma lem8410613 {A B C P : Type'} (s : type1505 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (t : type1520 A B C) (c : C) : (term4598 A B C P s _115318 clauses t c) = (term4599 A B C P s _115318 clauses t c).
Proof. exact (MK_COMB (@lem8410611 A B C P s _115318 c clauses) (@lem8410612 A B C t c)). Qed.
Lemma lem8410614 {A B C P : Type'} (s : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4599 A B C P s _115318 clauses t c) = (term4600 A B C P s t _115318 c clauses).
Proof. exact (eq_refl (term4599 A B C P s _115318 clauses t c)). Qed.
Lemma lem8410615 {A B C P : Type'} (s : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4598 A B C P s _115318 clauses t c) = (term4600 A B C P s t _115318 c clauses).
Proof. exact (TRANS (@lem8410613 A B C P s _115318 clauses t c) (@lem8410614 A B C P s t _115318 c clauses)). Qed.
Lemma lem8410616 {A B C P : Type'} (s : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4601 A B C P s _115318 clauses t) = (term4602 A B C P s t _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8410615 A B C P s t _115318 c clauses)). Qed.
Lemma lem8410617 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8410618 {A B C P : Type'} (s : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4603 A B C P s _115318 clauses t) = (term4604 A B C P s t _115318 clauses).
Proof. exact (MK_COMB (@lem8410617 C) (@lem8410616 A B C P s t _115318 clauses)). Qed.
Lemma lem8410619 {A B C P : Type'} (s : type1505 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4605 A B C P s _115318 clauses) = (term4606 A B C P s _115318 clauses).
Proof. exact (fun_ext (fun t : type1520 A B C => @lem8410618 A B C P s t _115318 clauses)). Qed.
Lemma lem8410620 {A B C : Type'} : (@ex (C -> C -> (A -> B) -> B)) = (@ex (C -> C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> C -> (A -> B) -> B))). Qed.
Lemma lem8410621 {A B C P : Type'} (s : type1505 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4586 A B C P s _115318 clauses) = (term4607 A B C P s _115318 clauses).
Proof. exact (MK_COMB (@lem8410620 A B C) (@lem8410619 A B C P s _115318 clauses)). Qed.
Lemma lem8410622 {A B C P : Type'} (s : type1505 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : ((term4585 A B C P s _115318 clauses) = (term4586 A B C P s _115318 clauses)) = ((term4579 A B C P s _115318 clauses) = (term4607 A B C P s _115318 clauses)).
Proof. exact (MK_COMB (@lem8410610 A B C P s _115318 clauses) (@lem8410621 A B C P s _115318 clauses)). Qed.
Lemma lem8410623 {A B C P : Type'} (s : type1505 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4579 A B C P s _115318 clauses) = (term4607 A B C P s _115318 clauses).
Proof. exact (EQ_MP (@lem8410622 A B C P s _115318 clauses) (@lem8410597 A B C P s _115318 clauses)). Qed.
Lemma lem8410625 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8410626 {A B C P : Type'} (P' : type1491 A B C P) : (term4560 A B C P P') = (term4561 A B C P P').
Proof. exact (@lem8410625 C (type558 A B P) P'). Qed.
Lemma lem8410627 {A B C P : Type'} (s : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4608 A B C P s t _115318 clauses) = (term4609 A B C P s t _115318 clauses).
Proof. exact (@lem8410626 A B C P (term4610 A B C P s t _115318 clauses)). Qed.
Lemma lem8410628 {A B C P : Type'} (s : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4611 A B C P s t _115318 clauses c) = (term4612 A B C P s t _115318 c clauses).
Proof. exact (eq_refl (term4611 A B C P s t _115318 clauses c)). Qed.
Lemma lem8410629 {A B P : Type'} (s' : type558 A B P) : s' = s'.
Proof. exact (eq_refl s'). Qed.
Lemma lem8410630 {A B C P : Type'} (s : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) (s' : type558 A B P) : (term4613 A B C P s t _115318 clauses c s') = (term4614 A B C P s t _115318 c clauses s').
Proof. exact (MK_COMB (@lem8410628 A B C P s t _115318 c clauses) (@lem8410629 A B P s')). Qed.
Lemma lem8410631 {A B C P : Type'} (s : type1505 A B C P) (s' : type558 A B P) (t : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4614 A B C P s t _115318 c clauses s') = (term4615 A B C P s s' t _115318 c clauses).
Proof. exact (eq_refl (term4614 A B C P s t _115318 c clauses s')). Qed.
Lemma lem8410632 {A B C P : Type'} (s : type1505 A B C P) (s' : type558 A B P) (t : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4613 A B C P s t _115318 clauses c s') = (term4615 A B C P s s' t _115318 c clauses).
Proof. exact (TRANS (@lem8410630 A B C P s t _115318 c clauses s') (@lem8410631 A B C P s s' t _115318 c clauses)). Qed.
Lemma lem8410633 {A B C P : Type'} (s : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4616 A B C P s t _115318 clauses c) = (term4612 A B C P s t _115318 c clauses).
Proof. exact (fun_ext (fun s' : type558 A B P => @lem8410632 A B C P s s' t _115318 c clauses)). Qed.
Lemma lem8410634 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8410635 {A B C P : Type'} (s : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4617 A B C P s t _115318 clauses c) = (term4600 A B C P s t _115318 c clauses).
Proof. exact (MK_COMB (@lem8410634 A B P) (@lem8410633 A B C P s t _115318 c clauses)). Qed.
Lemma lem8410636 {A B C P : Type'} (s : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4618 A B C P s t _115318 clauses) = (term4602 A B C P s t _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8410635 A B C P s t _115318 c clauses)). Qed.
Lemma lem8410637 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8410638 {A B C P : Type'} (s : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4608 A B C P s t _115318 clauses) = (term4604 A B C P s t _115318 clauses).
Proof. exact (MK_COMB (@lem8410637 C) (@lem8410636 A B C P s t _115318 clauses)). Qed.
Lemma lem8410639 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410640 {A B C P : Type'} (s : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4619 A B C P s t _115318 clauses) = (term4620 A B C P s t _115318 clauses).
Proof. exact (MK_COMB (@lem8410639) (@lem8410638 A B C P s t _115318 clauses)). Qed.
Lemma lem8410641 {A B C P : Type'} (s : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4611 A B C P s t _115318 clauses c) = (term4612 A B C P s t _115318 c clauses).
Proof. exact (eq_refl (term4611 A B C P s t _115318 clauses c)). Qed.
Lemma lem8410642 {A B C P : Type'} (s' : type1505 A B C P) (c : C) : (s' c) = (s' c).
Proof. exact (eq_refl (s' c)). Qed.
Lemma lem8410643 {A B C P : Type'} (s : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s' : type1505 A B C P) (c : C) : (term4621 A B C P s t _115318 clauses s' c) = (term4622 A B C P s t _115318 clauses s' c).
Proof. exact (MK_COMB (@lem8410641 A B C P s t _115318 c clauses) (@lem8410642 A B C P s' c)). Qed.
Lemma lem8410644 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4622 A B C P s t _115318 clauses s' c) = (term4623 A B C P s s' t _115318 c clauses).
Proof. exact (eq_refl (term4622 A B C P s t _115318 clauses s' c)). Qed.
Lemma lem8410645 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4621 A B C P s t _115318 clauses s' c) = (term4623 A B C P s s' t _115318 c clauses).
Proof. exact (TRANS (@lem8410643 A B C P s t _115318 clauses s' c) (@lem8410644 A B C P s s' t _115318 c clauses)). Qed.
Lemma lem8410646 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4624 A B C P s t _115318 clauses s') = (term4625 A B C P s s' t _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8410645 A B C P s s' t _115318 c clauses)). Qed.
Lemma lem8410647 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8410648 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4626 A B C P s t _115318 clauses s') = (term4627 A B C P s s' t _115318 clauses).
Proof. exact (MK_COMB (@lem8410647 C) (@lem8410646 A B C P s s' t _115318 clauses)). Qed.
Lemma lem8410649 {A B C P : Type'} (s : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4628 A B C P s t _115318 clauses) = (term4629 A B C P s t _115318 clauses).
Proof. exact (fun_ext (fun s' : type1505 A B C P => @lem8410648 A B C P s s' t _115318 clauses)). Qed.
Lemma lem8410650 {A B C P : Type'} : (@ex (C -> (A -> B) -> P -> B)) = (@ex (C -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> P -> B))). Qed.
Lemma lem8410651 {A B C P : Type'} (s : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4609 A B C P s t _115318 clauses) = (term4630 A B C P s t _115318 clauses).
Proof. exact (MK_COMB (@lem8410650 A B C P) (@lem8410649 A B C P s t _115318 clauses)). Qed.
Lemma lem8410652 {A B C P : Type'} (s : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : ((term4608 A B C P s t _115318 clauses) = (term4609 A B C P s t _115318 clauses)) = ((term4604 A B C P s t _115318 clauses) = (term4630 A B C P s t _115318 clauses)).
Proof. exact (MK_COMB (@lem8410640 A B C P s t _115318 clauses) (@lem8410651 A B C P s t _115318 clauses)). Qed.
Lemma lem8410653 {A B C P : Type'} (s : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4604 A B C P s t _115318 clauses) = (term4630 A B C P s t _115318 clauses).
Proof. exact (EQ_MP (@lem8410652 A B C P s t _115318 clauses) (@lem8410627 A B C P s t _115318 clauses)). Qed.
Lemma lem8410655 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8410656 {A B C : Type'} (P : type1510 A B C) : (term4583 A B C P) = (term4584 A B C P).
Proof. exact (@lem8410655 C (type1506 A B C) P). Qed.
Lemma lem8410657 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4631 A B C P s s' t _115318 clauses) = (term4632 A B C P s s' t _115318 clauses).
Proof. exact (@lem8410656 A B C (term4633 A B C P s s' t _115318 clauses)). Qed.
Lemma lem8410658 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4634 A B C P s s' t _115318 clauses c) = (term4635 A B C P s s' t _115318 c clauses).
Proof. exact (eq_refl (term4634 A B C P s s' t _115318 clauses c)). Qed.
Lemma lem8410659 {A B C : Type'} (t' : type1506 A B C) : t' = t'.
Proof. exact (eq_refl t'). Qed.
Lemma lem8410660 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) (t' : type1506 A B C) : (term4636 A B C P s s' t _115318 clauses c t') = (term4637 A B C P s s' t _115318 c clauses t').
Proof. exact (MK_COMB (@lem8410658 A B C P s s' t _115318 c clauses) (@lem8410659 A B C t')). Qed.
Lemma lem8410661 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (t' : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4637 A B C P s s' t _115318 c clauses t') = (term4638 A B C P s s' t t' _115318 c clauses).
Proof. exact (eq_refl (term4637 A B C P s s' t _115318 c clauses t')). Qed.
Lemma lem8410662 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (t' : type1506 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4636 A B C P s s' t _115318 clauses c t') = (term4638 A B C P s s' t t' _115318 c clauses).
Proof. exact (TRANS (@lem8410660 A B C P s s' t _115318 c clauses t') (@lem8410661 A B C P s s' t t' _115318 c clauses)). Qed.
Lemma lem8410663 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4639 A B C P s s' t _115318 clauses c) = (term4635 A B C P s s' t _115318 c clauses).
Proof. exact (fun_ext (fun t' : type1506 A B C => @lem8410662 A B C P s s' t t' _115318 c clauses)). Qed.
Lemma lem8410664 {A B C : Type'} : (@ex (C -> (A -> B) -> B)) = (@ex (C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> B))). Qed.
Lemma lem8410665 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4640 A B C P s s' t _115318 clauses c) = (term4623 A B C P s s' t _115318 c clauses).
Proof. exact (MK_COMB (@lem8410664 A B C) (@lem8410663 A B C P s s' t _115318 c clauses)). Qed.
Lemma lem8410666 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4641 A B C P s s' t _115318 clauses) = (term4625 A B C P s s' t _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8410665 A B C P s s' t _115318 c clauses)). Qed.
Lemma lem8410667 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8410668 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4631 A B C P s s' t _115318 clauses) = (term4627 A B C P s s' t _115318 clauses).
Proof. exact (MK_COMB (@lem8410667 C) (@lem8410666 A B C P s s' t _115318 clauses)). Qed.
Lemma lem8410669 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410670 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4642 A B C P s s' t _115318 clauses) = (term4643 A B C P s s' t _115318 clauses).
Proof. exact (MK_COMB (@lem8410669) (@lem8410668 A B C P s s' t _115318 clauses)). Qed.
Lemma lem8410671 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4634 A B C P s s' t _115318 clauses c) = (term4635 A B C P s s' t _115318 c clauses).
Proof. exact (eq_refl (term4634 A B C P s s' t _115318 clauses c)). Qed.
Lemma lem8410672 {A B C : Type'} (t' : type1520 A B C) (c : C) : (t' c) = (t' c).
Proof. exact (eq_refl (t' c)). Qed.
Lemma lem8410673 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (t' : type1520 A B C) (c : C) : (term4644 A B C P s s' t _115318 clauses t' c) = (term4645 A B C P s s' t _115318 clauses t' c).
Proof. exact (MK_COMB (@lem8410671 A B C P s s' t _115318 c clauses) (@lem8410672 A B C t' c)). Qed.
Lemma lem8410674 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4645 A B C P s s' t _115318 clauses t' c) = (term4646 A B C P s s' t t' _115318 c clauses).
Proof. exact (eq_refl (term4645 A B C P s s' t _115318 clauses t' c)). Qed.
Lemma lem8410675 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4644 A B C P s s' t _115318 clauses t' c) = (term4646 A B C P s s' t t' _115318 c clauses).
Proof. exact (TRANS (@lem8410673 A B C P s s' t _115318 clauses t' c) (@lem8410674 A B C P s s' t t' _115318 c clauses)). Qed.
Lemma lem8410676 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4647 A B C P s s' t _115318 clauses t') = (term4648 A B C P s s' t t' _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8410675 A B C P s s' t t' _115318 c clauses)). Qed.
Lemma lem8410677 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8410678 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4649 A B C P s s' t _115318 clauses t') = (term4650 A B C P s s' t t' _115318 clauses).
Proof. exact (MK_COMB (@lem8410677 C) (@lem8410676 A B C P s s' t t' _115318 clauses)). Qed.
Lemma lem8410679 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4651 A B C P s s' t _115318 clauses) = (term4652 A B C P s s' t _115318 clauses).
Proof. exact (fun_ext (fun t' : type1520 A B C => @lem8410678 A B C P s s' t t' _115318 clauses)). Qed.
Lemma lem8410680 {A B C : Type'} : (@ex (C -> C -> (A -> B) -> B)) = (@ex (C -> C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> C -> (A -> B) -> B))). Qed.
Lemma lem8410681 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4632 A B C P s s' t _115318 clauses) = (term4653 A B C P s s' t _115318 clauses).
Proof. exact (MK_COMB (@lem8410680 A B C) (@lem8410679 A B C P s s' t _115318 clauses)). Qed.
Lemma lem8410682 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : ((term4631 A B C P s s' t _115318 clauses) = (term4632 A B C P s s' t _115318 clauses)) = ((term4627 A B C P s s' t _115318 clauses) = (term4653 A B C P s s' t _115318 clauses)).
Proof. exact (MK_COMB (@lem8410670 A B C P s s' t _115318 clauses) (@lem8410681 A B C P s s' t _115318 clauses)). Qed.
Lemma lem8410683 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4627 A B C P s s' t _115318 clauses) = (term4653 A B C P s s' t _115318 clauses).
Proof. exact (EQ_MP (@lem8410682 A B C P s s' t _115318 clauses) (@lem8410657 A B C P s s' t _115318 clauses)). Qed.
Lemma lem8410685 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8410686 {A B C : Type'} (P : type1507 A B C) : (term4654 A B C P) = (term4655 A B C P).
Proof. exact (@lem8410685 C (A -> B) P). Qed.
Lemma lem8410687 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4656 A B C P s s' t t' _115318 clauses) = (term4657 A B C P s s' t t' _115318 clauses).
Proof. exact (@lem8410686 A B C (term4658 A B C P s s' t t' _115318 clauses)). Qed.
Lemma lem8410688 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4659 A B C P s s' t t' _115318 clauses c) = (term4660 A B C P s s' t t' _115318 c clauses).
Proof. exact (eq_refl (term4659 A B C P s s' t t' _115318 clauses c)). Qed.
Lemma lem8410689 {A B : Type'} (x : A -> B) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8410690 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) (x : A -> B) : (term4661 A B C P s s' t t' _115318 clauses c x) = (term4662 A B C P s s' t t' _115318 c clauses x).
Proof. exact (MK_COMB (@lem8410688 A B C P s s' t t' _115318 c clauses) (@lem8410689 A B x)). Qed.
Lemma lem8410691 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : A -> B) (t' : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4662 A B C P s s' t t' _115318 c clauses x) = (term4663 A B C P s s' t x t' _115318 c clauses).
Proof. exact (eq_refl (term4662 A B C P s s' t t' _115318 c clauses x)). Qed.
Lemma lem8410692 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : A -> B) (t' : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4661 A B C P s s' t t' _115318 clauses c x) = (term4663 A B C P s s' t x t' _115318 c clauses).
Proof. exact (TRANS (@lem8410690 A B C P s s' t t' _115318 c clauses x) (@lem8410691 A B C P s s' t x t' _115318 c clauses)). Qed.
Lemma lem8410693 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4664 A B C P s s' t t' _115318 clauses c) = (term4660 A B C P s s' t t' _115318 c clauses).
Proof. exact (fun_ext (fun x : A -> B => @lem8410692 A B C P s s' t x t' _115318 c clauses)). Qed.
Lemma lem8410694 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8410695 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4665 A B C P s s' t t' _115318 clauses c) = (term4646 A B C P s s' t t' _115318 c clauses).
Proof. exact (MK_COMB (@lem8410694 A B) (@lem8410693 A B C P s s' t t' _115318 c clauses)). Qed.
Lemma lem8410696 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4666 A B C P s s' t t' _115318 clauses) = (term4648 A B C P s s' t t' _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8410695 A B C P s s' t t' _115318 c clauses)). Qed.
Lemma lem8410697 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8410698 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4656 A B C P s s' t t' _115318 clauses) = (term4650 A B C P s s' t t' _115318 clauses).
Proof. exact (MK_COMB (@lem8410697 C) (@lem8410696 A B C P s s' t t' _115318 clauses)). Qed.
Lemma lem8410699 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410700 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4667 A B C P s s' t t' _115318 clauses) = (term4668 A B C P s s' t t' _115318 clauses).
Proof. exact (MK_COMB (@lem8410699) (@lem8410698 A B C P s s' t t' _115318 clauses)). Qed.
Lemma lem8410701 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4659 A B C P s s' t t' _115318 clauses c) = (term4660 A B C P s s' t t' _115318 c clauses).
Proof. exact (eq_refl (term4659 A B C P s s' t t' _115318 clauses c)). Qed.
Lemma lem8410702 {A B C : Type'} (x : type1514 A B C) (c : C) : (x c) = (x c).
Proof. exact (eq_refl (x c)). Qed.
Lemma lem8410703 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (x : type1514 A B C) (c : C) : (term4669 A B C P s s' t t' _115318 clauses x c) = (term4670 A B C P s s' t t' _115318 clauses x c).
Proof. exact (MK_COMB (@lem8410701 A B C P s s' t t' _115318 c clauses) (@lem8410702 A B C x c)). Qed.
Lemma lem8410704 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4670 A B C P s s' t t' _115318 clauses x c) = (term4671 A B C P s s' t x t' _115318 c clauses).
Proof. exact (eq_refl (term4670 A B C P s s' t t' _115318 clauses x c)). Qed.
Lemma lem8410705 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4669 A B C P s s' t t' _115318 clauses x c) = (term4671 A B C P s s' t x t' _115318 c clauses).
Proof. exact (TRANS (@lem8410703 A B C P s s' t t' _115318 clauses x c) (@lem8410704 A B C P s s' t x t' _115318 c clauses)). Qed.
Lemma lem8410706 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4672 A B C P s s' t t' _115318 clauses x) = (term4673 A B C P s s' t x t' _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8410705 A B C P s s' t x t' _115318 c clauses)). Qed.
Lemma lem8410707 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8410708 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4674 A B C P s s' t t' _115318 clauses x) = (term4675 A B C P s s' t x t' _115318 clauses).
Proof. exact (MK_COMB (@lem8410707 C) (@lem8410706 A B C P s s' t x t' _115318 clauses)). Qed.
Lemma lem8410709 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4676 A B C P s s' t t' _115318 clauses) = (term4677 A B C P s s' t t' _115318 clauses).
Proof. exact (fun_ext (fun x : type1514 A B C => @lem8410708 A B C P s s' t x t' _115318 clauses)). Qed.
Lemma lem8410710 {A B C : Type'} : (@ex (C -> A -> B)) = (@ex (C -> A -> B)).
Proof. exact (eq_refl (@ex (C -> A -> B))). Qed.
Lemma lem8410711 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4657 A B C P s s' t t' _115318 clauses) = (term4678 A B C P s s' t t' _115318 clauses).
Proof. exact (MK_COMB (@lem8410710 A B C) (@lem8410709 A B C P s s' t t' _115318 clauses)). Qed.
Lemma lem8410712 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : ((term4656 A B C P s s' t t' _115318 clauses) = (term4657 A B C P s s' t t' _115318 clauses)) = ((term4650 A B C P s s' t t' _115318 clauses) = (term4678 A B C P s s' t t' _115318 clauses)).
Proof. exact (MK_COMB (@lem8410700 A B C P s s' t t' _115318 clauses) (@lem8410711 A B C P s s' t t' _115318 clauses)). Qed.
Lemma lem8410713 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4650 A B C P s s' t t' _115318 clauses) = (term4678 A B C P s s' t t' _115318 clauses).
Proof. exact (EQ_MP (@lem8410712 A B C P s s' t t' _115318 clauses) (@lem8410687 A B C P s s' t t' _115318 clauses)). Qed.
Lemma lem8410715 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8410716 {A B C : Type'} (P : type1507 A B C) : (term4654 A B C P) = (term4655 A B C P).
Proof. exact (@lem8410715 C (A -> B) P). Qed.
Lemma lem8410717 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4679 A B C P s s' t x t' _115318 clauses) = (term4680 A B C P s s' t x t' _115318 clauses).
Proof. exact (@lem8410716 A B C (term4681 A B C P s s' t x t' _115318 clauses)). Qed.
Lemma lem8410718 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4682 A B C P s s' t x t' _115318 clauses c) = (term4683 A B C P s s' t x t' _115318 c clauses).
Proof. exact (eq_refl (term4682 A B C P s s' t x t' _115318 clauses c)). Qed.
Lemma lem8410719 {A B : Type'} (y : A -> B) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem8410720 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) (y : A -> B) : (term4684 A B C P s s' t x t' _115318 clauses c y) = (term4685 A B C P s s' t x t' _115318 c clauses y).
Proof. exact (MK_COMB (@lem8410718 A B C P s s' t x t' _115318 c clauses) (@lem8410719 A B y)). Qed.
Lemma lem8410721 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (y : A -> B) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4685 A B C P s s' t x t' _115318 c clauses y) = (term4686 A B C P s s' t x t' y _115318 c clauses).
Proof. exact (eq_refl (term4685 A B C P s s' t x t' _115318 c clauses y)). Qed.
Lemma lem8410722 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (y : A -> B) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4684 A B C P s s' t x t' _115318 clauses c y) = (term4686 A B C P s s' t x t' y _115318 c clauses).
Proof. exact (TRANS (@lem8410720 A B C P s s' t x t' _115318 c clauses y) (@lem8410721 A B C P s s' t x t' y _115318 c clauses)). Qed.
Lemma lem8410723 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4687 A B C P s s' t x t' _115318 clauses c) = (term4683 A B C P s s' t x t' _115318 c clauses).
Proof. exact (fun_ext (fun y : A -> B => @lem8410722 A B C P s s' t x t' y _115318 c clauses)). Qed.
Lemma lem8410724 {A B : Type'} : (@ex (A -> B)) = (@ex (A -> B)).
Proof. exact (eq_refl (@ex (A -> B))). Qed.
Lemma lem8410725 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4688 A B C P s s' t x t' _115318 clauses c) = (term4671 A B C P s s' t x t' _115318 c clauses).
Proof. exact (MK_COMB (@lem8410724 A B) (@lem8410723 A B C P s s' t x t' _115318 c clauses)). Qed.
Lemma lem8410726 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4689 A B C P s s' t x t' _115318 clauses) = (term4673 A B C P s s' t x t' _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8410725 A B C P s s' t x t' _115318 c clauses)). Qed.
Lemma lem8410727 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8410728 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4679 A B C P s s' t x t' _115318 clauses) = (term4675 A B C P s s' t x t' _115318 clauses).
Proof. exact (MK_COMB (@lem8410727 C) (@lem8410726 A B C P s s' t x t' _115318 clauses)). Qed.
Lemma lem8410729 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410730 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4690 A B C P s s' t x t' _115318 clauses) = (term4691 A B C P s s' t x t' _115318 clauses).
Proof. exact (MK_COMB (@lem8410729) (@lem8410728 A B C P s s' t x t' _115318 clauses)). Qed.
Lemma lem8410731 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4682 A B C P s s' t x t' _115318 clauses c) = (term4683 A B C P s s' t x t' _115318 c clauses).
Proof. exact (eq_refl (term4682 A B C P s s' t x t' _115318 clauses c)). Qed.
Lemma lem8410732 {A B C : Type'} (y : type1514 A B C) (c : C) : (y c) = (y c).
Proof. exact (eq_refl (y c)). Qed.
Lemma lem8410733 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (y : type1514 A B C) (c : C) : (term4692 A B C P s s' t x t' _115318 clauses y c) = (term4693 A B C P s s' t x t' _115318 clauses y c).
Proof. exact (MK_COMB (@lem8410731 A B C P s s' t x t' _115318 c clauses) (@lem8410732 A B C y c)). Qed.
Lemma lem8410734 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (y : type1514 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4693 A B C P s s' t x t' _115318 clauses y c) = (term4694 A B C P s s' t x t' y _115318 c clauses).
Proof. exact (eq_refl (term4693 A B C P s s' t x t' _115318 clauses y c)). Qed.
Lemma lem8410735 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (y : type1514 A B C) (_115318 : type1049 A B C P) (c : C) (clauses : type1630 A B C P) : (term4692 A B C P s s' t x t' _115318 clauses y c) = (term4694 A B C P s s' t x t' y _115318 c clauses).
Proof. exact (TRANS (@lem8410733 A B C P s s' t x t' _115318 clauses y c) (@lem8410734 A B C P s s' t x t' y _115318 c clauses)). Qed.
Lemma lem8410736 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (y : type1514 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4695 A B C P s s' t x t' _115318 clauses y) = (term4696 A B C P s s' t x t' y _115318 clauses).
Proof. exact (fun_ext (fun c : C => @lem8410735 A B C P s s' t x t' y _115318 c clauses)). Qed.
Lemma lem8410737 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8410738 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (y : type1514 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4697 A B C P s s' t x t' _115318 clauses y) = (term4698 A B C P s s' t x t' y _115318 clauses).
Proof. exact (MK_COMB (@lem8410737 C) (@lem8410736 A B C P s s' t x t' y _115318 clauses)). Qed.
Lemma lem8410739 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4699 A B C P s s' t x t' _115318 clauses) = (term4700 A B C P s s' t x t' _115318 clauses).
Proof. exact (fun_ext (fun y : type1514 A B C => @lem8410738 A B C P s s' t x t' y _115318 clauses)). Qed.
Lemma lem8410740 {A B C : Type'} : (@ex (C -> A -> B)) = (@ex (C -> A -> B)).
Proof. exact (eq_refl (@ex (C -> A -> B))). Qed.
Lemma lem8410741 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4680 A B C P s s' t x t' _115318 clauses) = (term4701 A B C P s s' t x t' _115318 clauses).
Proof. exact (MK_COMB (@lem8410740 A B C) (@lem8410739 A B C P s s' t x t' _115318 clauses)). Qed.
Lemma lem8410742 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : ((term4679 A B C P s s' t x t' _115318 clauses) = (term4680 A B C P s s' t x t' _115318 clauses)) = ((term4675 A B C P s s' t x t' _115318 clauses) = (term4701 A B C P s s' t x t' _115318 clauses)).
Proof. exact (MK_COMB (@lem8410730 A B C P s s' t x t' _115318 clauses) (@lem8410741 A B C P s s' t x t' _115318 clauses)). Qed.
Lemma lem8410743 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (x : type1514 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4675 A B C P s s' t x t' _115318 clauses) = (term4701 A B C P s s' t x t' _115318 clauses).
Proof. exact (EQ_MP (@lem8410742 A B C P s s' t x t' _115318 clauses) (@lem8410717 A B C P s s' t x t' _115318 clauses)). Qed.
Lemma lem8410744 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4677 A B C P s s' t t' _115318 clauses) = (term4702 A B C P s s' t t' _115318 clauses).
Proof. exact (fun_ext (fun x : type1514 A B C => @lem8410743 A B C P s s' t x t' _115318 clauses)). Qed.
Lemma lem8410745 {A B C : Type'} : (@ex (C -> A -> B)) = (@ex (C -> A -> B)).
Proof. exact (eq_refl (@ex (C -> A -> B))). Qed.
Lemma lem8410746 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4678 A B C P s s' t t' _115318 clauses) = (term4703 A B C P s s' t t' _115318 clauses).
Proof. exact (MK_COMB (@lem8410745 A B C) (@lem8410744 A B C P s s' t t' _115318 clauses)). Qed.
Lemma lem8410747 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4650 A B C P s s' t t' _115318 clauses) = (term4703 A B C P s s' t t' _115318 clauses).
Proof. exact (TRANS (@lem8410713 A B C P s s' t t' _115318 clauses) (@lem8410746 A B C P s s' t t' _115318 clauses)). Qed.
Lemma lem8410748 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4652 A B C P s s' t _115318 clauses) = (term4704 A B C P s s' t _115318 clauses).
Proof. exact (fun_ext (fun t' : type1520 A B C => @lem8410747 A B C P s s' t t' _115318 clauses)). Qed.
Lemma lem8410749 {A B C : Type'} : (@ex (C -> C -> (A -> B) -> B)) = (@ex (C -> C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> C -> (A -> B) -> B))). Qed.
Lemma lem8410750 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4653 A B C P s s' t _115318 clauses) = (term4705 A B C P s s' t _115318 clauses).
Proof. exact (MK_COMB (@lem8410749 A B C) (@lem8410748 A B C P s s' t _115318 clauses)). Qed.
Lemma lem8410751 {A B C P : Type'} (s : type1505 A B C P) (s' : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4627 A B C P s s' t _115318 clauses) = (term4705 A B C P s s' t _115318 clauses).
Proof. exact (TRANS (@lem8410683 A B C P s s' t _115318 clauses) (@lem8410750 A B C P s s' t _115318 clauses)). Qed.
Lemma lem8410752 {A B C P : Type'} (s : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4629 A B C P s t _115318 clauses) = (term4706 A B C P s t _115318 clauses).
Proof. exact (fun_ext (fun s' : type1505 A B C P => @lem8410751 A B C P s s' t _115318 clauses)). Qed.
Lemma lem8410753 {A B C P : Type'} : (@ex (C -> (A -> B) -> P -> B)) = (@ex (C -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> P -> B))). Qed.
Lemma lem8410754 {A B C P : Type'} (s : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4630 A B C P s t _115318 clauses) = (term4707 A B C P s t _115318 clauses).
Proof. exact (MK_COMB (@lem8410753 A B C P) (@lem8410752 A B C P s t _115318 clauses)). Qed.
Lemma lem8410755 {A B C P : Type'} (s : type1505 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4604 A B C P s t _115318 clauses) = (term4707 A B C P s t _115318 clauses).
Proof. exact (TRANS (@lem8410653 A B C P s t _115318 clauses) (@lem8410754 A B C P s t _115318 clauses)). Qed.
Lemma lem8410756 {A B C P : Type'} (s : type1505 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4606 A B C P s _115318 clauses) = (term4708 A B C P s _115318 clauses).
Proof. exact (fun_ext (fun t : type1520 A B C => @lem8410755 A B C P s t _115318 clauses)). Qed.
Lemma lem8410757 {A B C : Type'} : (@ex (C -> C -> (A -> B) -> B)) = (@ex (C -> C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> C -> (A -> B) -> B))). Qed.
Lemma lem8410758 {A B C P : Type'} (s : type1505 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4607 A B C P s _115318 clauses) = (term4709 A B C P s _115318 clauses).
Proof. exact (MK_COMB (@lem8410757 A B C) (@lem8410756 A B C P s _115318 clauses)). Qed.
Lemma lem8410759 {A B C P : Type'} (s : type1505 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4579 A B C P s _115318 clauses) = (term4709 A B C P s _115318 clauses).
Proof. exact (TRANS (@lem8410623 A B C P s _115318 clauses) (@lem8410758 A B C P s _115318 clauses)). Qed.
Lemma lem8410760 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4581 A B C P _115318 clauses) = (term4710 A B C P _115318 clauses).
Proof. exact (fun_ext (fun s : type1505 A B C P => @lem8410759 A B C P s _115318 clauses)). Qed.
Lemma lem8410761 {A B C P : Type'} : (@ex (C -> (A -> B) -> P -> B)) = (@ex (C -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> P -> B))). Qed.
Lemma lem8410762 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4582 A B C P _115318 clauses) = (term4711 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8410761 A B C P) (@lem8410760 A B C P _115318 clauses)). Qed.
Lemma lem8410763 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4559 A B C P _115318 clauses) = (term4711 A B C P _115318 clauses).
Proof. exact (TRANS (@lem8410593 A B C P _115318 clauses) (@lem8410762 A B C P _115318 clauses)). Qed.
Lemma lem8410764 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4451 A B C P _115318 clauses) = (term4711 A B C P _115318 clauses).
Proof. exact (TRANS (@lem8410563 A B C P _115318 clauses) (@lem8410763 A B C P _115318 clauses)). Qed.
Lemma lem8410765 {A B C P : Type'} (_115318 : type1049 A B C P) : (term4452 A B C P _115318) = (term4712 A B C P _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8410764 A B C P _115318 clauses)). Qed.
Lemma lem8410766 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8410767 {A B C P : Type'} (_115318 : type1049 A B C P) : (term4453 A B C P _115318) = (term4713 A B C P _115318).
Proof. exact (MK_COMB (@lem8410766 A B C P) (@lem8410765 A B C P _115318)). Qed.
Lemma lem8410769 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8410770 {A B C P : Type'} (P' : type1044 A B C P) : (term4714 A B C P P') = (term4715 A B C P P').
Proof. exact (@lem8410769 (type1630 A B C P) (type1505 A B C P) P'). Qed.
Lemma lem8410771 {A B C P : Type'} (_115318 : type1049 A B C P) : (term4716 A B C P _115318) = (term4717 A B C P _115318).
Proof. exact (@lem8410770 A B C P (term4718 A B C P _115318)). Qed.
Lemma lem8410772 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4719 A B C P _115318 clauses) = (term4710 A B C P _115318 clauses).
Proof. exact (eq_refl (term4719 A B C P _115318 clauses)). Qed.
Lemma lem8410773 {A B C P : Type'} (s : type1505 A B C P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8410774 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s : type1505 A B C P) : (term4720 A B C P _115318 clauses s) = (term4721 A B C P _115318 clauses s).
Proof. exact (MK_COMB (@lem8410772 A B C P _115318 clauses) (@lem8410773 A B C P s)). Qed.
Lemma lem8410775 {A B C P : Type'} (s : type1505 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4721 A B C P _115318 clauses s) = (term4709 A B C P s _115318 clauses).
Proof. exact (eq_refl (term4721 A B C P _115318 clauses s)). Qed.
Lemma lem8410776 {A B C P : Type'} (s : type1505 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4720 A B C P _115318 clauses s) = (term4709 A B C P s _115318 clauses).
Proof. exact (TRANS (@lem8410774 A B C P _115318 clauses s) (@lem8410775 A B C P s _115318 clauses)). Qed.
Lemma lem8410777 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4722 A B C P _115318 clauses) = (term4710 A B C P _115318 clauses).
Proof. exact (fun_ext (fun s : type1505 A B C P => @lem8410776 A B C P s _115318 clauses)). Qed.
Lemma lem8410778 {A B C P : Type'} : (@ex (C -> (A -> B) -> P -> B)) = (@ex (C -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> P -> B))). Qed.
Lemma lem8410779 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4723 A B C P _115318 clauses) = (term4711 A B C P _115318 clauses).
Proof. exact (MK_COMB (@lem8410778 A B C P) (@lem8410777 A B C P _115318 clauses)). Qed.
Lemma lem8410780 {A B C P : Type'} (_115318 : type1049 A B C P) : (term4724 A B C P _115318) = (term4712 A B C P _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8410779 A B C P _115318 clauses)). Qed.
Lemma lem8410781 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8410782 {A B C P : Type'} (_115318 : type1049 A B C P) : (term4716 A B C P _115318) = (term4713 A B C P _115318).
Proof. exact (MK_COMB (@lem8410781 A B C P) (@lem8410780 A B C P _115318)). Qed.
Lemma lem8410783 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410784 {A B C P : Type'} (_115318 : type1049 A B C P) : (term4725 A B C P _115318) = (term4726 A B C P _115318).
Proof. exact (MK_COMB (@lem8410783) (@lem8410782 A B C P _115318)). Qed.
Lemma lem8410785 {A B C P : Type'} (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4719 A B C P _115318 clauses) = (term4710 A B C P _115318 clauses).
Proof. exact (eq_refl (term4719 A B C P _115318 clauses)). Qed.
Lemma lem8410786 {A B C P : Type'} (s : type1050 A B C P) (clauses : type1630 A B C P) : (s clauses) = (s clauses).
Proof. exact (eq_refl (s clauses)). Qed.
Lemma lem8410787 {A B C P : Type'} (_115318 : type1049 A B C P) (s : type1050 A B C P) (clauses : type1630 A B C P) : (term4727 A B C P _115318 s clauses) = (term4728 A B C P _115318 s clauses).
Proof. exact (MK_COMB (@lem8410785 A B C P _115318 clauses) (@lem8410786 A B C P s clauses)). Qed.
Lemma lem8410788 {A B C P : Type'} (s : type1050 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4728 A B C P _115318 s clauses) = (term4729 A B C P s _115318 clauses).
Proof. exact (eq_refl (term4728 A B C P _115318 s clauses)). Qed.
Lemma lem8410789 {A B C P : Type'} (s : type1050 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4727 A B C P _115318 s clauses) = (term4729 A B C P s _115318 clauses).
Proof. exact (TRANS (@lem8410787 A B C P _115318 s clauses) (@lem8410788 A B C P s _115318 clauses)). Qed.
Lemma lem8410790 {A B C P : Type'} (s : type1050 A B C P) (_115318 : type1049 A B C P) : (term4730 A B C P _115318 s) = (term4731 A B C P s _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8410789 A B C P s _115318 clauses)). Qed.
Lemma lem8410791 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8410792 {A B C P : Type'} (s : type1050 A B C P) (_115318 : type1049 A B C P) : (term4732 A B C P _115318 s) = (term4733 A B C P s _115318).
Proof. exact (MK_COMB (@lem8410791 A B C P) (@lem8410790 A B C P s _115318)). Qed.
Lemma lem8410793 {A B C P : Type'} (_115318 : type1049 A B C P) : (term4734 A B C P _115318) = (term4735 A B C P _115318).
Proof. exact (fun_ext (fun s : type1050 A B C P => @lem8410792 A B C P s _115318)). Qed.
Lemma lem8410794 {A B C P : Type'} : (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> (A -> B) -> P -> B)) = (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> (A -> B) -> P -> B))). Qed.
Lemma lem8410795 {A B C P : Type'} (_115318 : type1049 A B C P) : (term4717 A B C P _115318) = (term4736 A B C P _115318).
Proof. exact (MK_COMB (@lem8410794 A B C P) (@lem8410793 A B C P _115318)). Qed.
Lemma lem8410796 {A B C P : Type'} (_115318 : type1049 A B C P) : ((term4716 A B C P _115318) = (term4717 A B C P _115318)) = ((term4713 A B C P _115318) = (term4736 A B C P _115318)).
Proof. exact (MK_COMB (@lem8410784 A B C P _115318) (@lem8410795 A B C P _115318)). Qed.
Lemma lem8410797 {A B C P : Type'} (_115318 : type1049 A B C P) : (term4713 A B C P _115318) = (term4736 A B C P _115318).
Proof. exact (EQ_MP (@lem8410796 A B C P _115318) (@lem8410771 A B C P _115318)). Qed.
Lemma lem8410799 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8410800 {A B C P : Type'} (P' : type1046 A B C P) : (term4737 A B C P P') = (term4738 A B C P P').
Proof. exact (@lem8410799 (type1630 A B C P) (type1520 A B C) P'). Qed.
Lemma lem8410801 {A B C P : Type'} (s : type1050 A B C P) (_115318 : type1049 A B C P) : (term4739 A B C P s _115318) = (term4740 A B C P s _115318).
Proof. exact (@lem8410800 A B C P (term4741 A B C P s _115318)). Qed.
Lemma lem8410802 {A B C P : Type'} (s : type1050 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4742 A B C P s _115318 clauses) = (term4743 A B C P s _115318 clauses).
Proof. exact (eq_refl (term4742 A B C P s _115318 clauses)). Qed.
Lemma lem8410803 {A B C : Type'} (t : type1520 A B C) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8410804 {A B C P : Type'} (s : type1050 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (t : type1520 A B C) : (term4744 A B C P s _115318 clauses t) = (term4745 A B C P s _115318 clauses t).
Proof. exact (MK_COMB (@lem8410802 A B C P s _115318 clauses) (@lem8410803 A B C t)). Qed.
Lemma lem8410805 {A B C P : Type'} (s : type1050 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4745 A B C P s _115318 clauses t) = (term4746 A B C P s t _115318 clauses).
Proof. exact (eq_refl (term4745 A B C P s _115318 clauses t)). Qed.
Lemma lem8410806 {A B C P : Type'} (s : type1050 A B C P) (t : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4744 A B C P s _115318 clauses t) = (term4746 A B C P s t _115318 clauses).
Proof. exact (TRANS (@lem8410804 A B C P s _115318 clauses t) (@lem8410805 A B C P s t _115318 clauses)). Qed.
Lemma lem8410807 {A B C P : Type'} (s : type1050 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4747 A B C P s _115318 clauses) = (term4743 A B C P s _115318 clauses).
Proof. exact (fun_ext (fun t : type1520 A B C => @lem8410806 A B C P s t _115318 clauses)). Qed.
Lemma lem8410808 {A B C : Type'} : (@ex (C -> C -> (A -> B) -> B)) = (@ex (C -> C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> C -> (A -> B) -> B))). Qed.
Lemma lem8410809 {A B C P : Type'} (s : type1050 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4748 A B C P s _115318 clauses) = (term4729 A B C P s _115318 clauses).
Proof. exact (MK_COMB (@lem8410808 A B C) (@lem8410807 A B C P s _115318 clauses)). Qed.
Lemma lem8410810 {A B C P : Type'} (s : type1050 A B C P) (_115318 : type1049 A B C P) : (term4749 A B C P s _115318) = (term4731 A B C P s _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8410809 A B C P s _115318 clauses)). Qed.
Lemma lem8410811 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8410812 {A B C P : Type'} (s : type1050 A B C P) (_115318 : type1049 A B C P) : (term4739 A B C P s _115318) = (term4733 A B C P s _115318).
Proof. exact (MK_COMB (@lem8410811 A B C P) (@lem8410810 A B C P s _115318)). Qed.
Lemma lem8410813 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410814 {A B C P : Type'} (s : type1050 A B C P) (_115318 : type1049 A B C P) : (term4750 A B C P s _115318) = (term4751 A B C P s _115318).
Proof. exact (MK_COMB (@lem8410813) (@lem8410812 A B C P s _115318)). Qed.
Lemma lem8410815 {A B C P : Type'} (s : type1050 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4742 A B C P s _115318 clauses) = (term4743 A B C P s _115318 clauses).
Proof. exact (eq_refl (term4742 A B C P s _115318 clauses)). Qed.
Lemma lem8410816 {A B C P : Type'} (t : type1052 A B C P) (clauses : type1630 A B C P) : (t clauses) = (t clauses).
Proof. exact (eq_refl (t clauses)). Qed.
Lemma lem8410817 {A B C P : Type'} (s : type1050 A B C P) (_115318 : type1049 A B C P) (t : type1052 A B C P) (clauses : type1630 A B C P) : (term4752 A B C P s _115318 t clauses) = (term4753 A B C P s _115318 t clauses).
Proof. exact (MK_COMB (@lem8410815 A B C P s _115318 clauses) (@lem8410816 A B C P t clauses)). Qed.
Lemma lem8410818 {A B C P : Type'} (s : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4753 A B C P s _115318 t clauses) = (term4754 A B C P s t _115318 clauses).
Proof. exact (eq_refl (term4753 A B C P s _115318 t clauses)). Qed.
Lemma lem8410819 {A B C P : Type'} (s : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4752 A B C P s _115318 t clauses) = (term4754 A B C P s t _115318 clauses).
Proof. exact (TRANS (@lem8410817 A B C P s _115318 t clauses) (@lem8410818 A B C P s t _115318 clauses)). Qed.
Lemma lem8410820 {A B C P : Type'} (s : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4755 A B C P s _115318 t) = (term4756 A B C P s t _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8410819 A B C P s t _115318 clauses)). Qed.
Lemma lem8410821 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8410822 {A B C P : Type'} (s : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4757 A B C P s _115318 t) = (term4758 A B C P s t _115318).
Proof. exact (MK_COMB (@lem8410821 A B C P) (@lem8410820 A B C P s t _115318)). Qed.
Lemma lem8410823 {A B C P : Type'} (s : type1050 A B C P) (_115318 : type1049 A B C P) : (term4759 A B C P s _115318) = (term4760 A B C P s _115318).
Proof. exact (fun_ext (fun t : type1052 A B C P => @lem8410822 A B C P s t _115318)). Qed.
Lemma lem8410824 {A B C P : Type'} : (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> C -> (A -> B) -> B)) = (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> C -> (A -> B) -> B))). Qed.
Lemma lem8410825 {A B C P : Type'} (s : type1050 A B C P) (_115318 : type1049 A B C P) : (term4740 A B C P s _115318) = (term4761 A B C P s _115318).
Proof. exact (MK_COMB (@lem8410824 A B C P) (@lem8410823 A B C P s _115318)). Qed.
Lemma lem8410826 {A B C P : Type'} (s : type1050 A B C P) (_115318 : type1049 A B C P) : ((term4739 A B C P s _115318) = (term4740 A B C P s _115318)) = ((term4733 A B C P s _115318) = (term4761 A B C P s _115318)).
Proof. exact (MK_COMB (@lem8410814 A B C P s _115318) (@lem8410825 A B C P s _115318)). Qed.
Lemma lem8410827 {A B C P : Type'} (s : type1050 A B C P) (_115318 : type1049 A B C P) : (term4733 A B C P s _115318) = (term4761 A B C P s _115318).
Proof. exact (EQ_MP (@lem8410826 A B C P s _115318) (@lem8410801 A B C P s _115318)). Qed.
Lemma lem8410829 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8410830 {A B C P : Type'} (P' : type1044 A B C P) : (term4714 A B C P P') = (term4715 A B C P P').
Proof. exact (@lem8410829 (type1630 A B C P) (type1505 A B C P) P'). Qed.
Lemma lem8410831 {A B C P : Type'} (s : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4762 A B C P s t _115318) = (term4763 A B C P s t _115318).
Proof. exact (@lem8410830 A B C P (term4764 A B C P s t _115318)). Qed.
Lemma lem8410832 {A B C P : Type'} (s : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4765 A B C P s t _115318 clauses) = (term4766 A B C P s t _115318 clauses).
Proof. exact (eq_refl (term4765 A B C P s t _115318 clauses)). Qed.
Lemma lem8410833 {A B C P : Type'} (s' : type1505 A B C P) : s' = s'.
Proof. exact (eq_refl s'). Qed.
Lemma lem8410834 {A B C P : Type'} (s : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (s' : type1505 A B C P) : (term4767 A B C P s t _115318 clauses s') = (term4768 A B C P s t _115318 clauses s').
Proof. exact (MK_COMB (@lem8410832 A B C P s t _115318 clauses) (@lem8410833 A B C P s')). Qed.
Lemma lem8410835 {A B C P : Type'} (s : type1050 A B C P) (s' : type1505 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4768 A B C P s t _115318 clauses s') = (term4769 A B C P s s' t _115318 clauses).
Proof. exact (eq_refl (term4768 A B C P s t _115318 clauses s')). Qed.
Lemma lem8410836 {A B C P : Type'} (s : type1050 A B C P) (s' : type1505 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4767 A B C P s t _115318 clauses s') = (term4769 A B C P s s' t _115318 clauses).
Proof. exact (TRANS (@lem8410834 A B C P s t _115318 clauses s') (@lem8410835 A B C P s s' t _115318 clauses)). Qed.
Lemma lem8410837 {A B C P : Type'} (s : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4770 A B C P s t _115318 clauses) = (term4766 A B C P s t _115318 clauses).
Proof. exact (fun_ext (fun s' : type1505 A B C P => @lem8410836 A B C P s s' t _115318 clauses)). Qed.
Lemma lem8410838 {A B C P : Type'} : (@ex (C -> (A -> B) -> P -> B)) = (@ex (C -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> P -> B))). Qed.
Lemma lem8410839 {A B C P : Type'} (s : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4771 A B C P s t _115318 clauses) = (term4754 A B C P s t _115318 clauses).
Proof. exact (MK_COMB (@lem8410838 A B C P) (@lem8410837 A B C P s t _115318 clauses)). Qed.
Lemma lem8410840 {A B C P : Type'} (s : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4772 A B C P s t _115318) = (term4756 A B C P s t _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8410839 A B C P s t _115318 clauses)). Qed.
Lemma lem8410841 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8410842 {A B C P : Type'} (s : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4762 A B C P s t _115318) = (term4758 A B C P s t _115318).
Proof. exact (MK_COMB (@lem8410841 A B C P) (@lem8410840 A B C P s t _115318)). Qed.
Lemma lem8410843 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410844 {A B C P : Type'} (s : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4773 A B C P s t _115318) = (term4774 A B C P s t _115318).
Proof. exact (MK_COMB (@lem8410843) (@lem8410842 A B C P s t _115318)). Qed.
Lemma lem8410845 {A B C P : Type'} (s : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4765 A B C P s t _115318 clauses) = (term4766 A B C P s t _115318 clauses).
Proof. exact (eq_refl (term4765 A B C P s t _115318 clauses)). Qed.
Lemma lem8410846 {A B C P : Type'} (s' : type1050 A B C P) (clauses : type1630 A B C P) : (s' clauses) = (s' clauses).
Proof. exact (eq_refl (s' clauses)). Qed.
Lemma lem8410847 {A B C P : Type'} (s : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) (s' : type1050 A B C P) (clauses : type1630 A B C P) : (term4775 A B C P s t _115318 s' clauses) = (term4776 A B C P s t _115318 s' clauses).
Proof. exact (MK_COMB (@lem8410845 A B C P s t _115318 clauses) (@lem8410846 A B C P s' clauses)). Qed.
Lemma lem8410848 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4776 A B C P s t _115318 s' clauses) = (term4777 A B C P s s' t _115318 clauses).
Proof. exact (eq_refl (term4776 A B C P s t _115318 s' clauses)). Qed.
Lemma lem8410849 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4775 A B C P s t _115318 s' clauses) = (term4777 A B C P s s' t _115318 clauses).
Proof. exact (TRANS (@lem8410847 A B C P s t _115318 s' clauses) (@lem8410848 A B C P s s' t _115318 clauses)). Qed.
Lemma lem8410850 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4778 A B C P s t _115318 s') = (term4779 A B C P s s' t _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8410849 A B C P s s' t _115318 clauses)). Qed.
Lemma lem8410851 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8410852 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4780 A B C P s t _115318 s') = (term4781 A B C P s s' t _115318).
Proof. exact (MK_COMB (@lem8410851 A B C P) (@lem8410850 A B C P s s' t _115318)). Qed.
Lemma lem8410853 {A B C P : Type'} (s : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4782 A B C P s t _115318) = (term4783 A B C P s t _115318).
Proof. exact (fun_ext (fun s' : type1050 A B C P => @lem8410852 A B C P s s' t _115318)). Qed.
Lemma lem8410854 {A B C P : Type'} : (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> (A -> B) -> P -> B)) = (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> (A -> B) -> P -> B))). Qed.
Lemma lem8410855 {A B C P : Type'} (s : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4763 A B C P s t _115318) = (term4784 A B C P s t _115318).
Proof. exact (MK_COMB (@lem8410854 A B C P) (@lem8410853 A B C P s t _115318)). Qed.
Lemma lem8410856 {A B C P : Type'} (s : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : ((term4762 A B C P s t _115318) = (term4763 A B C P s t _115318)) = ((term4758 A B C P s t _115318) = (term4784 A B C P s t _115318)).
Proof. exact (MK_COMB (@lem8410844 A B C P s t _115318) (@lem8410855 A B C P s t _115318)). Qed.
Lemma lem8410857 {A B C P : Type'} (s : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4758 A B C P s t _115318) = (term4784 A B C P s t _115318).
Proof. exact (EQ_MP (@lem8410856 A B C P s t _115318) (@lem8410831 A B C P s t _115318)). Qed.
Lemma lem8410859 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8410860 {A B C P : Type'} (P' : type1046 A B C P) : (term4737 A B C P P') = (term4738 A B C P P').
Proof. exact (@lem8410859 (type1630 A B C P) (type1520 A B C) P'). Qed.
Lemma lem8410861 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4785 A B C P s s' t _115318) = (term4786 A B C P s s' t _115318).
Proof. exact (@lem8410860 A B C P (term4787 A B C P s s' t _115318)). Qed.
Lemma lem8410862 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4788 A B C P s s' t _115318 clauses) = (term4789 A B C P s s' t _115318 clauses).
Proof. exact (eq_refl (term4788 A B C P s s' t _115318 clauses)). Qed.
Lemma lem8410863 {A B C : Type'} (t' : type1520 A B C) : t' = t'.
Proof. exact (eq_refl t'). Qed.
Lemma lem8410864 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (t' : type1520 A B C) : (term4790 A B C P s s' t _115318 clauses t') = (term4791 A B C P s s' t _115318 clauses t').
Proof. exact (MK_COMB (@lem8410862 A B C P s s' t _115318 clauses) (@lem8410863 A B C t')). Qed.
Lemma lem8410865 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4791 A B C P s s' t _115318 clauses t') = (term4792 A B C P s s' t t' _115318 clauses).
Proof. exact (eq_refl (term4791 A B C P s s' t _115318 clauses t')). Qed.
Lemma lem8410866 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (t' : type1520 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4790 A B C P s s' t _115318 clauses t') = (term4792 A B C P s s' t t' _115318 clauses).
Proof. exact (TRANS (@lem8410864 A B C P s s' t _115318 clauses t') (@lem8410865 A B C P s s' t t' _115318 clauses)). Qed.
Lemma lem8410867 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4793 A B C P s s' t _115318 clauses) = (term4789 A B C P s s' t _115318 clauses).
Proof. exact (fun_ext (fun t' : type1520 A B C => @lem8410866 A B C P s s' t t' _115318 clauses)). Qed.
Lemma lem8410868 {A B C : Type'} : (@ex (C -> C -> (A -> B) -> B)) = (@ex (C -> C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> C -> (A -> B) -> B))). Qed.
Lemma lem8410869 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4794 A B C P s s' t _115318 clauses) = (term4777 A B C P s s' t _115318 clauses).
Proof. exact (MK_COMB (@lem8410868 A B C) (@lem8410867 A B C P s s' t _115318 clauses)). Qed.
Lemma lem8410870 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4795 A B C P s s' t _115318) = (term4779 A B C P s s' t _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8410869 A B C P s s' t _115318 clauses)). Qed.
Lemma lem8410871 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8410872 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4785 A B C P s s' t _115318) = (term4781 A B C P s s' t _115318).
Proof. exact (MK_COMB (@lem8410871 A B C P) (@lem8410870 A B C P s s' t _115318)). Qed.
Lemma lem8410873 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410874 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4796 A B C P s s' t _115318) = (term4797 A B C P s s' t _115318).
Proof. exact (MK_COMB (@lem8410873) (@lem8410872 A B C P s s' t _115318)). Qed.
Lemma lem8410875 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4788 A B C P s s' t _115318 clauses) = (term4789 A B C P s s' t _115318 clauses).
Proof. exact (eq_refl (term4788 A B C P s s' t _115318 clauses)). Qed.
Lemma lem8410876 {A B C P : Type'} (t' : type1052 A B C P) (clauses : type1630 A B C P) : (t' clauses) = (t' clauses).
Proof. exact (eq_refl (t' clauses)). Qed.
Lemma lem8410877 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) (t' : type1052 A B C P) (clauses : type1630 A B C P) : (term4798 A B C P s s' t _115318 t' clauses) = (term4799 A B C P s s' t _115318 t' clauses).
Proof. exact (MK_COMB (@lem8410875 A B C P s s' t _115318 clauses) (@lem8410876 A B C P t' clauses)). Qed.
Lemma lem8410878 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4799 A B C P s s' t _115318 t' clauses) = (term4800 A B C P s s' t t' _115318 clauses).
Proof. exact (eq_refl (term4799 A B C P s s' t _115318 t' clauses)). Qed.
Lemma lem8410879 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4798 A B C P s s' t _115318 t' clauses) = (term4800 A B C P s s' t t' _115318 clauses).
Proof. exact (TRANS (@lem8410877 A B C P s s' t _115318 t' clauses) (@lem8410878 A B C P s s' t t' _115318 clauses)). Qed.
Lemma lem8410880 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) : (term4801 A B C P s s' t _115318 t') = (term4802 A B C P s s' t t' _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8410879 A B C P s s' t t' _115318 clauses)). Qed.
Lemma lem8410881 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8410882 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) : (term4803 A B C P s s' t _115318 t') = (term4804 A B C P s s' t t' _115318).
Proof. exact (MK_COMB (@lem8410881 A B C P) (@lem8410880 A B C P s s' t t' _115318)). Qed.
Lemma lem8410883 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4805 A B C P s s' t _115318) = (term4806 A B C P s s' t _115318).
Proof. exact (fun_ext (fun t' : type1052 A B C P => @lem8410882 A B C P s s' t t' _115318)). Qed.
Lemma lem8410884 {A B C P : Type'} : (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> C -> (A -> B) -> B)) = (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> C -> (A -> B) -> B))). Qed.
Lemma lem8410885 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4786 A B C P s s' t _115318) = (term4807 A B C P s s' t _115318).
Proof. exact (MK_COMB (@lem8410884 A B C P) (@lem8410883 A B C P s s' t _115318)). Qed.
Lemma lem8410886 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : ((term4785 A B C P s s' t _115318) = (term4786 A B C P s s' t _115318)) = ((term4781 A B C P s s' t _115318) = (term4807 A B C P s s' t _115318)).
Proof. exact (MK_COMB (@lem8410874 A B C P s s' t _115318) (@lem8410885 A B C P s s' t _115318)). Qed.
Lemma lem8410887 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4781 A B C P s s' t _115318) = (term4807 A B C P s s' t _115318).
Proof. exact (EQ_MP (@lem8410886 A B C P s s' t _115318) (@lem8410861 A B C P s s' t _115318)). Qed.
Lemma lem8410889 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8410890 {A B C P : Type'} (P' : type1045 A B C P) : (term4808 A B C P P') = (term4809 A B C P P').
Proof. exact (@lem8410889 (type1630 A B C P) (type1514 A B C) P'). Qed.
Lemma lem8410891 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) : (term4810 A B C P s s' t t' _115318) = (term4811 A B C P s s' t t' _115318).
Proof. exact (@lem8410890 A B C P (term4812 A B C P s s' t t' _115318)). Qed.
Lemma lem8410892 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4813 A B C P s s' t t' _115318 clauses) = (term4814 A B C P s s' t t' _115318 clauses).
Proof. exact (eq_refl (term4813 A B C P s s' t t' _115318 clauses)). Qed.
Lemma lem8410893 {A B C : Type'} (x : type1514 A B C) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8410894 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (x : type1514 A B C) : (term4815 A B C P s s' t t' _115318 clauses x) = (term4816 A B C P s s' t t' _115318 clauses x).
Proof. exact (MK_COMB (@lem8410892 A B C P s s' t t' _115318 clauses) (@lem8410893 A B C x)). Qed.
Lemma lem8410895 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1514 A B C) (t' : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4816 A B C P s s' t t' _115318 clauses x) = (term4817 A B C P s s' t x t' _115318 clauses).
Proof. exact (eq_refl (term4816 A B C P s s' t t' _115318 clauses x)). Qed.
Lemma lem8410896 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1514 A B C) (t' : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4815 A B C P s s' t t' _115318 clauses x) = (term4817 A B C P s s' t x t' _115318 clauses).
Proof. exact (TRANS (@lem8410894 A B C P s s' t t' _115318 clauses x) (@lem8410895 A B C P s s' t x t' _115318 clauses)). Qed.
Lemma lem8410897 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4818 A B C P s s' t t' _115318 clauses) = (term4814 A B C P s s' t t' _115318 clauses).
Proof. exact (fun_ext (fun x : type1514 A B C => @lem8410896 A B C P s s' t x t' _115318 clauses)). Qed.
Lemma lem8410898 {A B C : Type'} : (@ex (C -> A -> B)) = (@ex (C -> A -> B)).
Proof. exact (eq_refl (@ex (C -> A -> B))). Qed.
Lemma lem8410899 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4819 A B C P s s' t t' _115318 clauses) = (term4800 A B C P s s' t t' _115318 clauses).
Proof. exact (MK_COMB (@lem8410898 A B C) (@lem8410897 A B C P s s' t t' _115318 clauses)). Qed.
Lemma lem8410900 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) : (term4820 A B C P s s' t t' _115318) = (term4802 A B C P s s' t t' _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8410899 A B C P s s' t t' _115318 clauses)). Qed.
Lemma lem8410901 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8410902 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) : (term4810 A B C P s s' t t' _115318) = (term4804 A B C P s s' t t' _115318).
Proof. exact (MK_COMB (@lem8410901 A B C P) (@lem8410900 A B C P s s' t t' _115318)). Qed.
Lemma lem8410903 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410904 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) : (term4821 A B C P s s' t t' _115318) = (term4822 A B C P s s' t t' _115318).
Proof. exact (MK_COMB (@lem8410903) (@lem8410902 A B C P s s' t t' _115318)). Qed.
Lemma lem8410905 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4813 A B C P s s' t t' _115318 clauses) = (term4814 A B C P s s' t t' _115318 clauses).
Proof. exact (eq_refl (term4813 A B C P s s' t t' _115318 clauses)). Qed.
Lemma lem8410906 {A B C P : Type'} (x : type1051 A B C P) (clauses : type1630 A B C P) : (x clauses) = (x clauses).
Proof. exact (eq_refl (x clauses)). Qed.
Lemma lem8410907 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) (x : type1051 A B C P) (clauses : type1630 A B C P) : (term4823 A B C P s s' t t' _115318 x clauses) = (term4824 A B C P s s' t t' _115318 x clauses).
Proof. exact (MK_COMB (@lem8410905 A B C P s s' t t' _115318 clauses) (@lem8410906 A B C P x clauses)). Qed.
Lemma lem8410908 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4824 A B C P s s' t t' _115318 x clauses) = (term4825 A B C P s s' t x t' _115318 clauses).
Proof. exact (eq_refl (term4824 A B C P s s' t t' _115318 x clauses)). Qed.
Lemma lem8410909 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4823 A B C P s s' t t' _115318 x clauses) = (term4825 A B C P s s' t x t' _115318 clauses).
Proof. exact (TRANS (@lem8410907 A B C P s s' t t' _115318 x clauses) (@lem8410908 A B C P s s' t x t' _115318 clauses)). Qed.
Lemma lem8410910 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) : (term4826 A B C P s s' t t' _115318 x) = (term4827 A B C P s s' t x t' _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8410909 A B C P s s' t x t' _115318 clauses)). Qed.
Lemma lem8410911 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8410912 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) : (term4828 A B C P s s' t t' _115318 x) = (term4829 A B C P s s' t x t' _115318).
Proof. exact (MK_COMB (@lem8410911 A B C P) (@lem8410910 A B C P s s' t x t' _115318)). Qed.
Lemma lem8410913 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) : (term4830 A B C P s s' t t' _115318) = (term4831 A B C P s s' t t' _115318).
Proof. exact (fun_ext (fun x : type1051 A B C P => @lem8410912 A B C P s s' t x t' _115318)). Qed.
Lemma lem8410914 {A B C P : Type'} : (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> A -> B)) = (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> A -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> A -> B))). Qed.
Lemma lem8410915 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) : (term4811 A B C P s s' t t' _115318) = (term4832 A B C P s s' t t' _115318).
Proof. exact (MK_COMB (@lem8410914 A B C P) (@lem8410913 A B C P s s' t t' _115318)). Qed.
Lemma lem8410916 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) : ((term4810 A B C P s s' t t' _115318) = (term4811 A B C P s s' t t' _115318)) = ((term4804 A B C P s s' t t' _115318) = (term4832 A B C P s s' t t' _115318)).
Proof. exact (MK_COMB (@lem8410904 A B C P s s' t t' _115318) (@lem8410915 A B C P s s' t t' _115318)). Qed.
Lemma lem8410917 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) : (term4804 A B C P s s' t t' _115318) = (term4832 A B C P s s' t t' _115318).
Proof. exact (EQ_MP (@lem8410916 A B C P s s' t t' _115318) (@lem8410891 A B C P s s' t t' _115318)). Qed.
Lemma lem8410919 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8410920 {A B C P : Type'} (P' : type1045 A B C P) : (term4808 A B C P P') = (term4809 A B C P P').
Proof. exact (@lem8410919 (type1630 A B C P) (type1514 A B C) P'). Qed.
Lemma lem8410921 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) : (term4833 A B C P s s' t x t' _115318) = (term4834 A B C P s s' t x t' _115318).
Proof. exact (@lem8410920 A B C P (term4835 A B C P s s' t x t' _115318)). Qed.
Lemma lem8410922 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4836 A B C P s s' t x t' _115318 clauses) = (term4837 A B C P s s' t x t' _115318 clauses).
Proof. exact (eq_refl (term4836 A B C P s s' t x t' _115318 clauses)). Qed.
Lemma lem8410923 {A B C : Type'} (y : type1514 A B C) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem8410924 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) (y : type1514 A B C) : (term4838 A B C P s s' t x t' _115318 clauses y) = (term4839 A B C P s s' t x t' _115318 clauses y).
Proof. exact (MK_COMB (@lem8410922 A B C P s s' t x t' _115318 clauses) (@lem8410923 A B C y)). Qed.
Lemma lem8410925 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (y : type1514 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4839 A B C P s s' t x t' _115318 clauses y) = (term4840 A B C P s s' t x t' y _115318 clauses).
Proof. exact (eq_refl (term4839 A B C P s s' t x t' _115318 clauses y)). Qed.
Lemma lem8410926 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (y : type1514 A B C) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4838 A B C P s s' t x t' _115318 clauses y) = (term4840 A B C P s s' t x t' y _115318 clauses).
Proof. exact (TRANS (@lem8410924 A B C P s s' t x t' _115318 clauses y) (@lem8410925 A B C P s s' t x t' y _115318 clauses)). Qed.
Lemma lem8410927 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4841 A B C P s s' t x t' _115318 clauses) = (term4837 A B C P s s' t x t' _115318 clauses).
Proof. exact (fun_ext (fun y : type1514 A B C => @lem8410926 A B C P s s' t x t' y _115318 clauses)). Qed.
Lemma lem8410928 {A B C : Type'} : (@ex (C -> A -> B)) = (@ex (C -> A -> B)).
Proof. exact (eq_refl (@ex (C -> A -> B))). Qed.
Lemma lem8410929 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4842 A B C P s s' t x t' _115318 clauses) = (term4825 A B C P s s' t x t' _115318 clauses).
Proof. exact (MK_COMB (@lem8410928 A B C) (@lem8410927 A B C P s s' t x t' _115318 clauses)). Qed.
Lemma lem8410930 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) : (term4843 A B C P s s' t x t' _115318) = (term4827 A B C P s s' t x t' _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8410929 A B C P s s' t x t' _115318 clauses)). Qed.
Lemma lem8410931 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8410932 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) : (term4833 A B C P s s' t x t' _115318) = (term4829 A B C P s s' t x t' _115318).
Proof. exact (MK_COMB (@lem8410931 A B C P) (@lem8410930 A B C P s s' t x t' _115318)). Qed.
Lemma lem8410933 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8410934 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) : (term4844 A B C P s s' t x t' _115318) = (term4845 A B C P s s' t x t' _115318).
Proof. exact (MK_COMB (@lem8410933) (@lem8410932 A B C P s s' t x t' _115318)). Qed.
Lemma lem8410935 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4836 A B C P s s' t x t' _115318 clauses) = (term4837 A B C P s s' t x t' _115318 clauses).
Proof. exact (eq_refl (term4836 A B C P s s' t x t' _115318 clauses)). Qed.
Lemma lem8410936 {A B C P : Type'} (y : type1051 A B C P) (clauses : type1630 A B C P) : (y clauses) = (y clauses).
Proof. exact (eq_refl (y clauses)). Qed.
Lemma lem8410937 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) (y : type1051 A B C P) (clauses : type1630 A B C P) : (term4846 A B C P s s' t x t' _115318 y clauses) = (term4847 A B C P s s' t x t' _115318 y clauses).
Proof. exact (MK_COMB (@lem8410935 A B C P s s' t x t' _115318 clauses) (@lem8410936 A B C P y clauses)). Qed.
Lemma lem8410938 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (y : type1051 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4847 A B C P s s' t x t' _115318 y clauses) = (term4848 A B C P s s' t x t' y _115318 clauses).
Proof. exact (eq_refl (term4847 A B C P s s' t x t' _115318 y clauses)). Qed.
Lemma lem8410939 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (y : type1051 A B C P) (_115318 : type1049 A B C P) (clauses : type1630 A B C P) : (term4846 A B C P s s' t x t' _115318 y clauses) = (term4848 A B C P s s' t x t' y _115318 clauses).
Proof. exact (TRANS (@lem8410937 A B C P s s' t x t' _115318 y clauses) (@lem8410938 A B C P s s' t x t' y _115318 clauses)). Qed.
Lemma lem8410940 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (y : type1051 A B C P) (_115318 : type1049 A B C P) : (term4849 A B C P s s' t x t' _115318 y) = (term4850 A B C P s s' t x t' y _115318).
Proof. exact (fun_ext (fun clauses : type1630 A B C P => @lem8410939 A B C P s s' t x t' y _115318 clauses)). Qed.
Lemma lem8410941 {A B C P : Type'} : (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))) = (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))))). Qed.
Lemma lem8410942 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (y : type1051 A B C P) (_115318 : type1049 A B C P) : (term4851 A B C P s s' t x t' _115318 y) = (term4852 A B C P s s' t x t' y _115318).
Proof. exact (MK_COMB (@lem8410941 A B C P) (@lem8410940 A B C P s s' t x t' y _115318)). Qed.
Lemma lem8410943 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) : (term4853 A B C P s s' t x t' _115318) = (term4854 A B C P s s' t x t' _115318).
Proof. exact (fun_ext (fun y : type1051 A B C P => @lem8410942 A B C P s s' t x t' y _115318)). Qed.
Lemma lem8410944 {A B C P : Type'} : (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> A -> B)) = (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> A -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> A -> B))). Qed.
Lemma lem8410945 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) : (term4834 A B C P s s' t x t' _115318) = (term4855 A B C P s s' t x t' _115318).
Proof. exact (MK_COMB (@lem8410944 A B C P) (@lem8410943 A B C P s s' t x t' _115318)). Qed.
Lemma lem8410946 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) : ((term4833 A B C P s s' t x t' _115318) = (term4834 A B C P s s' t x t' _115318)) = ((term4829 A B C P s s' t x t' _115318) = (term4855 A B C P s s' t x t' _115318)).
Proof. exact (MK_COMB (@lem8410934 A B C P s s' t x t' _115318) (@lem8410945 A B C P s s' t x t' _115318)). Qed.
Lemma lem8410947 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (x : type1051 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) : (term4829 A B C P s s' t x t' _115318) = (term4855 A B C P s s' t x t' _115318).
Proof. exact (EQ_MP (@lem8410946 A B C P s s' t x t' _115318) (@lem8410921 A B C P s s' t x t' _115318)). Qed.
Lemma lem8410948 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) : (term4831 A B C P s s' t t' _115318) = (term4856 A B C P s s' t t' _115318).
Proof. exact (fun_ext (fun x : type1051 A B C P => @lem8410947 A B C P s s' t x t' _115318)). Qed.
Lemma lem8410949 {A B C P : Type'} : (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> A -> B)) = (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> A -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> A -> B))). Qed.
Lemma lem8410950 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) : (term4832 A B C P s s' t t' _115318) = (term4857 A B C P s s' t t' _115318).
Proof. exact (MK_COMB (@lem8410949 A B C P) (@lem8410948 A B C P s s' t t' _115318)). Qed.
Lemma lem8410951 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (t' : type1052 A B C P) (_115318 : type1049 A B C P) : (term4804 A B C P s s' t t' _115318) = (term4857 A B C P s s' t t' _115318).
Proof. exact (TRANS (@lem8410917 A B C P s s' t t' _115318) (@lem8410950 A B C P s s' t t' _115318)). Qed.
Lemma lem8410952 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4806 A B C P s s' t _115318) = (term4858 A B C P s s' t _115318).
Proof. exact (fun_ext (fun t' : type1052 A B C P => @lem8410951 A B C P s s' t t' _115318)). Qed.
Lemma lem8410953 {A B C P : Type'} : (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> C -> (A -> B) -> B)) = (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> C -> (A -> B) -> B))). Qed.
Lemma lem8410954 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4807 A B C P s s' t _115318) = (term4859 A B C P s s' t _115318).
Proof. exact (MK_COMB (@lem8410953 A B C P) (@lem8410952 A B C P s s' t _115318)). Qed.
Lemma lem8410955 {A B C P : Type'} (s : type1050 A B C P) (s' : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4781 A B C P s s' t _115318) = (term4859 A B C P s s' t _115318).
Proof. exact (TRANS (@lem8410887 A B C P s s' t _115318) (@lem8410954 A B C P s s' t _115318)). Qed.
Lemma lem8410956 {A B C P : Type'} (s : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4783 A B C P s t _115318) = (term4860 A B C P s t _115318).
Proof. exact (fun_ext (fun s' : type1050 A B C P => @lem8410955 A B C P s s' t _115318)). Qed.
Lemma lem8410957 {A B C P : Type'} : (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> (A -> B) -> P -> B)) = (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> (A -> B) -> P -> B))). Qed.
Lemma lem8410958 {A B C P : Type'} (s : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4784 A B C P s t _115318) = (term4861 A B C P s t _115318).
Proof. exact (MK_COMB (@lem8410957 A B C P) (@lem8410956 A B C P s t _115318)). Qed.
Lemma lem8410959 {A B C P : Type'} (s : type1050 A B C P) (t : type1052 A B C P) (_115318 : type1049 A B C P) : (term4758 A B C P s t _115318) = (term4861 A B C P s t _115318).
Proof. exact (TRANS (@lem8410857 A B C P s t _115318) (@lem8410958 A B C P s t _115318)). Qed.
Lemma lem8410960 {A B C P : Type'} (s : type1050 A B C P) (_115318 : type1049 A B C P) : (term4760 A B C P s _115318) = (term4862 A B C P s _115318).
Proof. exact (fun_ext (fun t : type1052 A B C P => @lem8410959 A B C P s t _115318)). Qed.
Lemma lem8410961 {A B C P : Type'} : (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> C -> (A -> B) -> B)) = (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> C -> (A -> B) -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> C -> (A -> B) -> B))). Qed.
Lemma lem8410962 {A B C P : Type'} (s : type1050 A B C P) (_115318 : type1049 A B C P) : (term4761 A B C P s _115318) = (term4863 A B C P s _115318).
Proof. exact (MK_COMB (@lem8410961 A B C P) (@lem8410960 A B C P s _115318)). Qed.
Lemma lem8410963 {A B C P : Type'} (s : type1050 A B C P) (_115318 : type1049 A B C P) : (term4733 A B C P s _115318) = (term4863 A B C P s _115318).
Proof. exact (TRANS (@lem8410827 A B C P s _115318) (@lem8410962 A B C P s _115318)). Qed.
Lemma lem8410964 {A B C P : Type'} (_115318 : type1049 A B C P) : (term4735 A B C P _115318) = (term4864 A B C P _115318).
Proof. exact (fun_ext (fun s : type1050 A B C P => @lem8410963 A B C P s _115318)). Qed.
Lemma lem8410965 {A B C P : Type'} : (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> (A -> B) -> P -> B)) = (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((A -> B) -> P -> B) (C -> (A -> B) -> B))) -> C -> (A -> B) -> P -> B))). Qed.
Lemma lem8410966 {A B C P : Type'} (_115318 : type1049 A B C P) : (term4736 A B C P _115318) = (term4865 A B C P _115318).
Proof. exact (MK_COMB (@lem8410965 A B C P) (@lem8410964 A B C P _115318)). Qed.
Lemma lem8410967 {A B C P : Type'} (_115318 : type1049 A B C P) : (term4713 A B C P _115318) = (term4865 A B C P _115318).
Proof. exact (TRANS (@lem8410797 A B C P _115318) (@lem8410966 A B C P _115318)). Qed.
Lemma lem8410969 {A B C P : Type'} (_115318 : type1049 A B C P) : (term4453 A B C P _115318) = (term4865 A B C P _115318).
Proof. exact (TRANS (@lem8410767 A B C P _115318) (@lem8410967 A B C P _115318)). Qed.
Lemma lem8410970 {A B C P : Type'} (_115318 : type1049 A B C P) : (term747 A B C P _115318) = (term4865 A B C P _115318).
Proof. exact (TRANS (@lem8410275 A B C P _115318) (@lem8410969 A B C P _115318)). Qed.
Lemma lem8410971 {A B C P : Type'} (_115318 : type1049 A B C P) (h1 : term747 A B C P _115318) : term4865 A B C P _115318.
Proof. exact (EQ_MP (@lem8410970 A B C P _115318) (@lem8401045 A B C P _115318 h1)). Qed.
Lemma lem8410986 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) (y : P -> A) : (term4866 A B C P clauses s s' t x t' c y) = (term4867 A B C P clauses s s' t x t' c y).
Proof. exact (@lem17362 (term4868 A B C P t t' clauses s x s' y) ((t c x) = (t' c y))). Qed.
Lemma lem8410987 {A P : Type'} (P' : type805 A P) : (term2032 A P P') = (term2033 A P P').
Proof. exact (@lem18392 (P -> A) P'). Qed.
Lemma lem8410988 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term4869 A B C P clauses s s' t x t' c) = (term4870 A B C P clauses s s' t x t' c).
Proof. exact (@lem8410987 A P (term309 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8410989 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) (y : P -> A) : (term4871 A B C P clauses s s' t x t' c y) = (term308 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term4871 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8410990 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8410991 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) (y : P -> A) : (term4872 A B C P clauses s s' t x t' c y) = (term4866 A B C P clauses s s' t x t' c y).
Proof. exact (MK_COMB (@lem8410990) (@lem8410989 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8410992 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) (y : P -> A) : (term4872 A B C P clauses s s' t x t' c y) = (term4867 A B C P clauses s s' t x t' c y).
Proof. exact (TRANS (@lem8410991 A B C P clauses s s' t x t' c y) (@lem8410986 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8410993 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term4873 A B C P clauses s s' t x t' c) = (term4874 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P -> A => @lem8410992 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8410994 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8410995 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term4870 A B C P clauses s s' t x t' c) = (term4875 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8410994 A P) (@lem8410993 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8410996 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term4869 A B C P clauses s s' t x t' c) = (term4875 A B C P clauses s s' t x t' c).
Proof. exact (TRANS (@lem8410988 A B C P clauses s s' t x t' c) (@lem8410995 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8410997 {A P : Type'} (P' : type805 A P) : (term2032 A P P') = (term2033 A P P').
Proof. exact (@lem18392 (P -> A) P'). Qed.
Lemma lem8410998 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term4876 A B C P clauses s s' t t' c) = (term4877 A B C P clauses s s' t t' c).
Proof. exact (@lem8410997 A P (term311 A B C P clauses s s' t t' c)). Qed.
Lemma lem8410999 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term4878 A B C P clauses s s' t t' c x) = (term310 A B C P clauses s s' t x t' c).
Proof. exact (eq_refl (term4878 A B C P clauses s s' t t' c x)). Qed.
Lemma lem8411000 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8411001 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term4879 A B C P clauses s s' t t' c x) = (term4869 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8411000) (@lem8410999 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8411002 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term4879 A B C P clauses s s' t t' c x) = (term4875 A B C P clauses s s' t x t' c).
Proof. exact (TRANS (@lem8411001 A B C P clauses s s' t x t' c) (@lem8410996 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8411003 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term4880 A B C P clauses s s' t t' c) = (term4881 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P -> A => @lem8411002 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8411004 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8411005 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term4877 A B C P clauses s s' t t' c) = (term4882 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8411004 A P) (@lem8411003 A B C P clauses s s' t t' c)). Qed.
Lemma lem8411006 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term4876 A B C P clauses s s' t t' c) = (term4882 A B C P clauses s s' t t' c).
Proof. exact (TRANS (@lem8410998 A B C P clauses s s' t t' c) (@lem8411005 A B C P clauses s s' t t' c)). Qed.
Lemma lem8411007 {A B C P : Type'} (P' : type867 A B C P) : (term1370 A B C P P') = (term1371 A B C P P').
Proof. exact (@lem18392 (type1512 A B C P) P'). Qed.
Lemma lem8411008 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term4883 A B C P clauses s s' t c) = (term4884 A B C P clauses s s' t c).
Proof. exact (@lem8411007 A B C P (term313 A B C P clauses s s' t c)). Qed.
Lemma lem8411009 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term4885 A B C P clauses s s' t c t') = (term312 A B C P clauses s s' t t' c).
Proof. exact (eq_refl (term4885 A B C P clauses s s' t c t')). Qed.
Lemma lem8411010 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8411011 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term4886 A B C P clauses s s' t c t') = (term4876 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8411010) (@lem8411009 A B C P clauses s s' t t' c)). Qed.
Lemma lem8411012 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term4886 A B C P clauses s s' t c t') = (term4882 A B C P clauses s s' t t' c).
Proof. exact (TRANS (@lem8411011 A B C P clauses s s' t t' c) (@lem8411006 A B C P clauses s s' t t' c)). Qed.
Lemma lem8411013 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term4887 A B C P clauses s s' t c) = (term4888 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1512 A B C P => @lem8411012 A B C P clauses s s' t t' c)). Qed.
Lemma lem8411014 {A B C P : Type'} : (@ex (C -> (P -> A) -> B)) = (@ex (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (C -> (P -> A) -> B))). Qed.
Lemma lem8411015 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term4884 A B C P clauses s s' t c) = (term4889 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8411014 A B C P) (@lem8411013 A B C P clauses s s' t c)). Qed.
Lemma lem8411016 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term4883 A B C P clauses s s' t c) = (term4889 A B C P clauses s s' t c).
Proof. exact (TRANS (@lem8411008 A B C P clauses s s' t c) (@lem8411015 A B C P clauses s s' t c)). Qed.
Lemma lem8411017 {A P : Type'} (P' : type197 A P) : (term1380 A P P') = (term1381 A P P').
Proof. exact (@lem18392 (type802 A P) P'). Qed.
Lemma lem8411018 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term4890 A B C P clauses s t c) = (term4891 A B C P clauses s t c).
Proof. exact (@lem8411017 A P (term315 A B C P clauses s t c)). Qed.
Lemma lem8411019 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term4892 A B C P clauses s t c s') = (term314 A B C P clauses s s' t c).
Proof. exact (eq_refl (term4892 A B C P clauses s t c s')). Qed.
Lemma lem8411020 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8411021 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term4893 A B C P clauses s t c s') = (term4883 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8411020) (@lem8411019 A B C P clauses s s' t c)). Qed.
Lemma lem8411022 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term4893 A B C P clauses s t c s') = (term4889 A B C P clauses s s' t c).
Proof. exact (TRANS (@lem8411021 A B C P clauses s s' t c) (@lem8411016 A B C P clauses s s' t c)). Qed.
Lemma lem8411023 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term4894 A B C P clauses s t c) = (term4895 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type802 A P => @lem8411022 A B C P clauses s s' t c)). Qed.
Lemma lem8411024 {A P : Type'} : (@ex ((P -> A) -> A)) = (@ex ((P -> A) -> A)).
Proof. exact (eq_refl (@ex ((P -> A) -> A))). Qed.
Lemma lem8411025 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term4891 A B C P clauses s t c) = (term4896 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8411024 A P) (@lem8411023 A B C P clauses s t c)). Qed.
Lemma lem8411026 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term4890 A B C P clauses s t c) = (term4896 A B C P clauses s t c).
Proof. exact (TRANS (@lem8411018 A B C P clauses s t c) (@lem8411025 A B C P clauses s t c)). Qed.
Lemma lem8411027 {A B C P : Type'} (P' : type867 A B C P) : (term1370 A B C P P') = (term1371 A B C P P').
Proof. exact (@lem18392 (type1512 A B C P) P'). Qed.
Lemma lem8411028 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term4897 A B C P clauses s c) = (term4898 A B C P clauses s c).
Proof. exact (@lem8411027 A B C P (term317 A B C P clauses s c)). Qed.
Lemma lem8411029 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term4899 A B C P clauses s c t) = (term316 A B C P clauses s t c).
Proof. exact (eq_refl (term4899 A B C P clauses s c t)). Qed.
Lemma lem8411030 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8411031 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term4900 A B C P clauses s c t) = (term4890 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8411030) (@lem8411029 A B C P clauses s t c)). Qed.
Lemma lem8411032 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term4900 A B C P clauses s c t) = (term4896 A B C P clauses s t c).
Proof. exact (TRANS (@lem8411031 A B C P clauses s t c) (@lem8411026 A B C P clauses s t c)). Qed.
Lemma lem8411033 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term4901 A B C P clauses s c) = (term4902 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8411032 A B C P clauses s t c)). Qed.
Lemma lem8411034 {A B C P : Type'} : (@ex (C -> (P -> A) -> B)) = (@ex (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (C -> (P -> A) -> B))). Qed.
Lemma lem8411035 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term4898 A B C P clauses s c) = (term4903 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8411034 A B C P) (@lem8411033 A B C P clauses s c)). Qed.
Lemma lem8411036 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term4897 A B C P clauses s c) = (term4903 A B C P clauses s c).
Proof. exact (TRANS (@lem8411028 A B C P clauses s c) (@lem8411035 A B C P clauses s c)). Qed.
Lemma lem8411037 {A P : Type'} (P' : type197 A P) : (term1380 A P P') = (term1381 A P P').
Proof. exact (@lem18392 (type802 A P) P'). Qed.
Lemma lem8411038 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term4904 A B C P clauses c) = (term4905 A B C P clauses c).
Proof. exact (@lem8411037 A P (term319 A B C P clauses c)). Qed.
Lemma lem8411039 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term4906 A B C P clauses c s) = (term318 A B C P clauses s c).
Proof. exact (eq_refl (term4906 A B C P clauses c s)). Qed.
Lemma lem8411040 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8411041 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term4907 A B C P clauses c s) = (term4897 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8411040) (@lem8411039 A B C P clauses s c)). Qed.
Lemma lem8411042 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term4907 A B C P clauses c s) = (term4903 A B C P clauses s c).
Proof. exact (TRANS (@lem8411041 A B C P clauses s c) (@lem8411036 A B C P clauses s c)). Qed.
Lemma lem8411043 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term4908 A B C P clauses c) = (term4909 A B C P clauses c).
Proof. exact (fun_ext (fun s : type802 A P => @lem8411042 A B C P clauses s c)). Qed.
Lemma lem8411044 {A P : Type'} : (@ex ((P -> A) -> A)) = (@ex ((P -> A) -> A)).
Proof. exact (eq_refl (@ex ((P -> A) -> A))). Qed.
Lemma lem8411045 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term4905 A B C P clauses c) = (term4910 A B C P clauses c).
Proof. exact (MK_COMB (@lem8411044 A P) (@lem8411043 A B C P clauses c)). Qed.
Lemma lem8411046 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term4904 A B C P clauses c) = (term4910 A B C P clauses c).
Proof. exact (TRANS (@lem8411038 A B C P clauses c) (@lem8411045 A B C P clauses c)). Qed.
Lemma lem8411047 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term839 A B C P _115319 c clauses) = (term839 A B C P _115319 c clauses).
Proof. exact (eq_refl (term839 A B C P _115319 c clauses)). Qed.
Lemma lem8411048 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8411049 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term4911 A B C P clauses c) = (term4912 A B C P clauses c).
Proof. exact (MK_COMB (@lem8411048) (@lem8411046 A B C P clauses c)). Qed.
Lemma lem8411050 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4913 A B C P _115319 c clauses) = (term4914 A B C P _115319 c clauses).
Proof. exact (MK_COMB (@lem8411049 A B C P clauses c) (@lem8411047 A B C P _115319 c clauses)). Qed.
Lemma lem8411051 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term840 A B C P _115319 c clauses) = (term4913 A B C P _115319 c clauses).
Proof. exact (@lem17265 (term320 A B C P clauses c) (term839 A B C P _115319 c clauses)). Qed.
Lemma lem8411052 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term840 A B C P _115319 c clauses) = (term4914 A B C P _115319 c clauses).
Proof. exact (TRANS (@lem8411051 A B C P _115319 c clauses) (@lem8411050 A B C P _115319 c clauses)). Qed.
Lemma lem8411053 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term841 A B C P _115319 clauses) = (term4915 A B C P _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8411052 A B C P _115319 c clauses)). Qed.
Lemma lem8411054 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8411055 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term842 A B C P _115319 clauses) = (term4916 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8411054 C) (@lem8411053 A B C P _115319 clauses)). Qed.
Lemma lem8411056 {A B C P : Type'} (_115319 : type1061 A B C P) : (term843 A B C P _115319) = (term4917 A B C P _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8411055 A B C P _115319 clauses)). Qed.
Lemma lem8411057 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8411058 {A B C P : Type'} (_115319 : type1061 A B C P) : (term844 A B C P _115319) = (term4918 A B C P _115319).
Proof. exact (MK_COMB (@lem8411057 A B C P) (@lem8411056 A B C P _115319)). Qed.
Lemma lem8411181 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8411182 {A P : Type'} (P' : type197 A P) (Q : Prop) : (term4919 A P P' Q) = (term4920 A P P' Q).
Proof. exact (@lem8411181 (type802 A P) P' Q). Qed.
Lemma lem8411183 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4921 A B C P _115319 c clauses) = (term4922 A B C P _115319 c clauses).
Proof. exact (@lem8411182 A P (term4909 A B C P clauses c) (term839 A B C P _115319 c clauses)). Qed.
Lemma lem8411184 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term4923 A B C P clauses c s) = (term4903 A B C P clauses s c).
Proof. exact (eq_refl (term4923 A B C P clauses c s)). Qed.
Lemma lem8411185 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term4924 A B C P clauses c) = (term4909 A B C P clauses c).
Proof. exact (fun_ext (fun s : type802 A P => @lem8411184 A B C P clauses s c)). Qed.
Lemma lem8411186 {A P : Type'} : (@ex ((P -> A) -> A)) = (@ex ((P -> A) -> A)).
Proof. exact (eq_refl (@ex ((P -> A) -> A))). Qed.
Lemma lem8411187 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term4925 A B C P clauses c) = (term4910 A B C P clauses c).
Proof. exact (MK_COMB (@lem8411186 A P) (@lem8411185 A B C P clauses c)). Qed.
Lemma lem8411188 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8411189 {A B C P : Type'} (clauses : type1631 A B C P) (c : C) : (term4926 A B C P clauses c) = (term4912 A B C P clauses c).
Proof. exact (MK_COMB (@lem8411188) (@lem8411187 A B C P clauses c)). Qed.
Lemma lem8411190 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term839 A B C P _115319 c clauses) = (term839 A B C P _115319 c clauses).
Proof. exact (eq_refl (term839 A B C P _115319 c clauses)). Qed.
Lemma lem8411191 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4921 A B C P _115319 c clauses) = (term4914 A B C P _115319 c clauses).
Proof. exact (MK_COMB (@lem8411189 A B C P clauses c) (@lem8411190 A B C P _115319 c clauses)). Qed.
Lemma lem8411192 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8411193 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4927 A B C P _115319 c clauses) = (term4928 A B C P _115319 c clauses).
Proof. exact (MK_COMB (@lem8411192) (@lem8411191 A B C P _115319 c clauses)). Qed.
Lemma lem8411194 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term4923 A B C P clauses c s) = (term4903 A B C P clauses s c).
Proof. exact (eq_refl (term4923 A B C P clauses c s)). Qed.
Lemma lem8411195 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8411196 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term4929 A B C P clauses c s) = (term4930 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8411195) (@lem8411194 A B C P clauses s c)). Qed.
Lemma lem8411197 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term839 A B C P _115319 c clauses) = (term839 A B C P _115319 c clauses).
Proof. exact (eq_refl (term839 A B C P _115319 c clauses)). Qed.
Lemma lem8411198 {A B C P : Type'} (s : type802 A P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4931 A B C P s _115319 c clauses) = (term4932 A B C P s _115319 c clauses).
Proof. exact (MK_COMB (@lem8411196 A B C P clauses s c) (@lem8411197 A B C P _115319 c clauses)). Qed.
Lemma lem8411199 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4933 A B C P _115319 c clauses) = (term4934 A B C P _115319 c clauses).
Proof. exact (fun_ext (fun s : type802 A P => @lem8411198 A B C P s _115319 c clauses)). Qed.
Lemma lem8411200 {A P : Type'} : (@ex ((P -> A) -> A)) = (@ex ((P -> A) -> A)).
Proof. exact (eq_refl (@ex ((P -> A) -> A))). Qed.
Lemma lem8411201 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4922 A B C P _115319 c clauses) = (term4935 A B C P _115319 c clauses).
Proof. exact (MK_COMB (@lem8411200 A P) (@lem8411199 A B C P _115319 c clauses)). Qed.
Lemma lem8411202 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : ((term4921 A B C P _115319 c clauses) = (term4922 A B C P _115319 c clauses)) = ((term4914 A B C P _115319 c clauses) = (term4935 A B C P _115319 c clauses)).
Proof. exact (MK_COMB (@lem8411193 A B C P _115319 c clauses) (@lem8411201 A B C P _115319 c clauses)). Qed.
Lemma lem8411203 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4914 A B C P _115319 c clauses) = (term4935 A B C P _115319 c clauses).
Proof. exact (EQ_MP (@lem8411202 A B C P _115319 c clauses) (@lem8411183 A B C P _115319 c clauses)). Qed.
Lemma lem8411205 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8411206 {A B C P : Type'} (P' : type867 A B C P) (Q : Prop) : (term4936 A B C P P' Q) = (term4937 A B C P P' Q).
Proof. exact (@lem8411205 (type1512 A B C P) P' Q). Qed.
Lemma lem8411207 {A B C P : Type'} (s : type802 A P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4938 A B C P s _115319 c clauses) = (term4939 A B C P s _115319 c clauses).
Proof. exact (@lem8411206 A B C P (term4902 A B C P clauses s c) (term839 A B C P _115319 c clauses)). Qed.
Lemma lem8411208 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term4940 A B C P clauses s c t) = (term4896 A B C P clauses s t c).
Proof. exact (eq_refl (term4940 A B C P clauses s c t)). Qed.
Lemma lem8411209 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term4941 A B C P clauses s c) = (term4902 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8411208 A B C P clauses s t c)). Qed.
Lemma lem8411210 {A B C P : Type'} : (@ex (C -> (P -> A) -> B)) = (@ex (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (C -> (P -> A) -> B))). Qed.
Lemma lem8411211 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term4942 A B C P clauses s c) = (term4903 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8411210 A B C P) (@lem8411209 A B C P clauses s c)). Qed.
Lemma lem8411212 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8411213 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (c : C) : (term4943 A B C P clauses s c) = (term4930 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8411212) (@lem8411211 A B C P clauses s c)). Qed.
Lemma lem8411214 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term839 A B C P _115319 c clauses) = (term839 A B C P _115319 c clauses).
Proof. exact (eq_refl (term839 A B C P _115319 c clauses)). Qed.
Lemma lem8411215 {A B C P : Type'} (s : type802 A P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4938 A B C P s _115319 c clauses) = (term4932 A B C P s _115319 c clauses).
Proof. exact (MK_COMB (@lem8411213 A B C P clauses s c) (@lem8411214 A B C P _115319 c clauses)). Qed.
Lemma lem8411216 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8411217 {A B C P : Type'} (s : type802 A P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4944 A B C P s _115319 c clauses) = (term4945 A B C P s _115319 c clauses).
Proof. exact (MK_COMB (@lem8411216) (@lem8411215 A B C P s _115319 c clauses)). Qed.
Lemma lem8411218 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term4940 A B C P clauses s c t) = (term4896 A B C P clauses s t c).
Proof. exact (eq_refl (term4940 A B C P clauses s c t)). Qed.
Lemma lem8411219 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8411220 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term4946 A B C P clauses s c t) = (term4947 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8411219) (@lem8411218 A B C P clauses s t c)). Qed.
Lemma lem8411221 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term839 A B C P _115319 c clauses) = (term839 A B C P _115319 c clauses).
Proof. exact (eq_refl (term839 A B C P _115319 c clauses)). Qed.
Lemma lem8411222 {A B C P : Type'} (s : type802 A P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4948 A B C P s t _115319 c clauses) = (term4949 A B C P s t _115319 c clauses).
Proof. exact (MK_COMB (@lem8411220 A B C P clauses s t c) (@lem8411221 A B C P _115319 c clauses)). Qed.
Lemma lem8411223 {A B C P : Type'} (s : type802 A P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4950 A B C P s _115319 c clauses) = (term4951 A B C P s _115319 c clauses).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8411222 A B C P s t _115319 c clauses)). Qed.
Lemma lem8411224 {A B C P : Type'} : (@ex (C -> (P -> A) -> B)) = (@ex (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (C -> (P -> A) -> B))). Qed.
Lemma lem8411225 {A B C P : Type'} (s : type802 A P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4939 A B C P s _115319 c clauses) = (term4952 A B C P s _115319 c clauses).
Proof. exact (MK_COMB (@lem8411224 A B C P) (@lem8411223 A B C P s _115319 c clauses)). Qed.
Lemma lem8411226 {A B C P : Type'} (s : type802 A P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : ((term4938 A B C P s _115319 c clauses) = (term4939 A B C P s _115319 c clauses)) = ((term4932 A B C P s _115319 c clauses) = (term4952 A B C P s _115319 c clauses)).
Proof. exact (MK_COMB (@lem8411217 A B C P s _115319 c clauses) (@lem8411225 A B C P s _115319 c clauses)). Qed.
Lemma lem8411227 {A B C P : Type'} (s : type802 A P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4932 A B C P s _115319 c clauses) = (term4952 A B C P s _115319 c clauses).
Proof. exact (EQ_MP (@lem8411226 A B C P s _115319 c clauses) (@lem8411207 A B C P s _115319 c clauses)). Qed.
Lemma lem8411229 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8411230 {A P : Type'} (P' : type197 A P) (Q : Prop) : (term4919 A P P' Q) = (term4920 A P P' Q).
Proof. exact (@lem8411229 (type802 A P) P' Q). Qed.
Lemma lem8411231 {A B C P : Type'} (s : type802 A P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4953 A B C P s t _115319 c clauses) = (term4954 A B C P s t _115319 c clauses).
Proof. exact (@lem8411230 A P (term4895 A B C P clauses s t c) (term839 A B C P _115319 c clauses)). Qed.
Lemma lem8411232 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term4955 A B C P clauses s t c s') = (term4889 A B C P clauses s s' t c).
Proof. exact (eq_refl (term4955 A B C P clauses s t c s')). Qed.
Lemma lem8411233 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term4956 A B C P clauses s t c) = (term4895 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type802 A P => @lem8411232 A B C P clauses s s' t c)). Qed.
Lemma lem8411234 {A P : Type'} : (@ex ((P -> A) -> A)) = (@ex ((P -> A) -> A)).
Proof. exact (eq_refl (@ex ((P -> A) -> A))). Qed.
Lemma lem8411235 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term4957 A B C P clauses s t c) = (term4896 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8411234 A P) (@lem8411233 A B C P clauses s t c)). Qed.
Lemma lem8411236 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8411237 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (t : type1512 A B C P) (c : C) : (term4958 A B C P clauses s t c) = (term4947 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8411236) (@lem8411235 A B C P clauses s t c)). Qed.
Lemma lem8411238 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term839 A B C P _115319 c clauses) = (term839 A B C P _115319 c clauses).
Proof. exact (eq_refl (term839 A B C P _115319 c clauses)). Qed.
Lemma lem8411239 {A B C P : Type'} (s : type802 A P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4953 A B C P s t _115319 c clauses) = (term4949 A B C P s t _115319 c clauses).
Proof. exact (MK_COMB (@lem8411237 A B C P clauses s t c) (@lem8411238 A B C P _115319 c clauses)). Qed.
Lemma lem8411240 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8411241 {A B C P : Type'} (s : type802 A P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4959 A B C P s t _115319 c clauses) = (term4960 A B C P s t _115319 c clauses).
Proof. exact (MK_COMB (@lem8411240) (@lem8411239 A B C P s t _115319 c clauses)). Qed.
Lemma lem8411242 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term4955 A B C P clauses s t c s') = (term4889 A B C P clauses s s' t c).
Proof. exact (eq_refl (term4955 A B C P clauses s t c s')). Qed.
Lemma lem8411243 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8411244 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term4961 A B C P clauses s t c s') = (term4962 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8411243) (@lem8411242 A B C P clauses s s' t c)). Qed.
Lemma lem8411245 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term839 A B C P _115319 c clauses) = (term839 A B C P _115319 c clauses).
Proof. exact (eq_refl (term839 A B C P _115319 c clauses)). Qed.
Lemma lem8411246 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4963 A B C P s t s' _115319 c clauses) = (term4964 A B C P s s' t _115319 c clauses).
Proof. exact (MK_COMB (@lem8411244 A B C P clauses s s' t c) (@lem8411245 A B C P _115319 c clauses)). Qed.
Lemma lem8411247 {A B C P : Type'} (s : type802 A P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4965 A B C P s t _115319 c clauses) = (term4966 A B C P s t _115319 c clauses).
Proof. exact (fun_ext (fun s' : type802 A P => @lem8411246 A B C P s s' t _115319 c clauses)). Qed.
Lemma lem8411248 {A P : Type'} : (@ex ((P -> A) -> A)) = (@ex ((P -> A) -> A)).
Proof. exact (eq_refl (@ex ((P -> A) -> A))). Qed.
Lemma lem8411249 {A B C P : Type'} (s : type802 A P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4954 A B C P s t _115319 c clauses) = (term4967 A B C P s t _115319 c clauses).
Proof. exact (MK_COMB (@lem8411248 A P) (@lem8411247 A B C P s t _115319 c clauses)). Qed.
Lemma lem8411250 {A B C P : Type'} (s : type802 A P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : ((term4953 A B C P s t _115319 c clauses) = (term4954 A B C P s t _115319 c clauses)) = ((term4949 A B C P s t _115319 c clauses) = (term4967 A B C P s t _115319 c clauses)).
Proof. exact (MK_COMB (@lem8411241 A B C P s t _115319 c clauses) (@lem8411249 A B C P s t _115319 c clauses)). Qed.
Lemma lem8411251 {A B C P : Type'} (s : type802 A P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4949 A B C P s t _115319 c clauses) = (term4967 A B C P s t _115319 c clauses).
Proof. exact (EQ_MP (@lem8411250 A B C P s t _115319 c clauses) (@lem8411231 A B C P s t _115319 c clauses)). Qed.
Lemma lem8411253 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8411254 {A B C P : Type'} (P' : type867 A B C P) (Q : Prop) : (term4936 A B C P P' Q) = (term4937 A B C P P' Q).
Proof. exact (@lem8411253 (type1512 A B C P) P' Q). Qed.
Lemma lem8411255 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4968 A B C P s s' t _115319 c clauses) = (term4969 A B C P s s' t _115319 c clauses).
Proof. exact (@lem8411254 A B C P (term4888 A B C P clauses s s' t c) (term839 A B C P _115319 c clauses)). Qed.
Lemma lem8411256 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term4970 A B C P clauses s s' t c t') = (term4882 A B C P clauses s s' t t' c).
Proof. exact (eq_refl (term4970 A B C P clauses s s' t c t')). Qed.
Lemma lem8411257 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term4971 A B C P clauses s s' t c) = (term4888 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1512 A B C P => @lem8411256 A B C P clauses s s' t t' c)). Qed.
Lemma lem8411258 {A B C P : Type'} : (@ex (C -> (P -> A) -> B)) = (@ex (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (C -> (P -> A) -> B))). Qed.
Lemma lem8411259 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term4972 A B C P clauses s s' t c) = (term4889 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8411258 A B C P) (@lem8411257 A B C P clauses s s' t c)). Qed.
Lemma lem8411260 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8411261 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (c : C) : (term4973 A B C P clauses s s' t c) = (term4962 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8411260) (@lem8411259 A B C P clauses s s' t c)). Qed.
Lemma lem8411262 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term839 A B C P _115319 c clauses) = (term839 A B C P _115319 c clauses).
Proof. exact (eq_refl (term839 A B C P _115319 c clauses)). Qed.
Lemma lem8411263 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4968 A B C P s s' t _115319 c clauses) = (term4964 A B C P s s' t _115319 c clauses).
Proof. exact (MK_COMB (@lem8411261 A B C P clauses s s' t c) (@lem8411262 A B C P _115319 c clauses)). Qed.
Lemma lem8411264 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8411265 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4974 A B C P s s' t _115319 c clauses) = (term4975 A B C P s s' t _115319 c clauses).
Proof. exact (MK_COMB (@lem8411264) (@lem8411263 A B C P s s' t _115319 c clauses)). Qed.
Lemma lem8411266 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term4970 A B C P clauses s s' t c t') = (term4882 A B C P clauses s s' t t' c).
Proof. exact (eq_refl (term4970 A B C P clauses s s' t c t')). Qed.
Lemma lem8411267 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8411268 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term4976 A B C P clauses s s' t c t') = (term4977 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8411267) (@lem8411266 A B C P clauses s s' t t' c)). Qed.
Lemma lem8411269 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term839 A B C P _115319 c clauses) = (term839 A B C P _115319 c clauses).
Proof. exact (eq_refl (term839 A B C P _115319 c clauses)). Qed.
Lemma lem8411270 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4978 A B C P s s' t t' _115319 c clauses) = (term4979 A B C P s s' t t' _115319 c clauses).
Proof. exact (MK_COMB (@lem8411268 A B C P clauses s s' t t' c) (@lem8411269 A B C P _115319 c clauses)). Qed.
Lemma lem8411271 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4980 A B C P s s' t _115319 c clauses) = (term4981 A B C P s s' t _115319 c clauses).
Proof. exact (fun_ext (fun t' : type1512 A B C P => @lem8411270 A B C P s s' t t' _115319 c clauses)). Qed.
Lemma lem8411272 {A B C P : Type'} : (@ex (C -> (P -> A) -> B)) = (@ex (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (C -> (P -> A) -> B))). Qed.
Lemma lem8411273 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4969 A B C P s s' t _115319 c clauses) = (term4982 A B C P s s' t _115319 c clauses).
Proof. exact (MK_COMB (@lem8411272 A B C P) (@lem8411271 A B C P s s' t _115319 c clauses)). Qed.
Lemma lem8411274 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : ((term4968 A B C P s s' t _115319 c clauses) = (term4969 A B C P s s' t _115319 c clauses)) = ((term4964 A B C P s s' t _115319 c clauses) = (term4982 A B C P s s' t _115319 c clauses)).
Proof. exact (MK_COMB (@lem8411265 A B C P s s' t _115319 c clauses) (@lem8411273 A B C P s s' t _115319 c clauses)). Qed.
Lemma lem8411275 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4964 A B C P s s' t _115319 c clauses) = (term4982 A B C P s s' t _115319 c clauses).
Proof. exact (EQ_MP (@lem8411274 A B C P s s' t _115319 c clauses) (@lem8411255 A B C P s s' t _115319 c clauses)). Qed.
Lemma lem8411277 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8411278 {A P : Type'} (P' : type805 A P) (Q : Prop) : (term3071 A P P' Q) = (term3072 A P P' Q).
Proof. exact (@lem8411277 (P -> A) P' Q). Qed.
Lemma lem8411279 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4983 A B C P s s' t t' _115319 c clauses) = (term4984 A B C P s s' t t' _115319 c clauses).
Proof. exact (@lem8411278 A P (term4881 A B C P clauses s s' t t' c) (term839 A B C P _115319 c clauses)). Qed.
Lemma lem8411280 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term4985 A B C P clauses s s' t t' c x) = (term4875 A B C P clauses s s' t x t' c).
Proof. exact (eq_refl (term4985 A B C P clauses s s' t t' c x)). Qed.
Lemma lem8411281 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term4986 A B C P clauses s s' t t' c) = (term4881 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : P -> A => @lem8411280 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8411282 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8411283 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term4987 A B C P clauses s s' t t' c) = (term4882 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8411282 A P) (@lem8411281 A B C P clauses s s' t t' c)). Qed.
Lemma lem8411284 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8411285 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (c : C) : (term4988 A B C P clauses s s' t t' c) = (term4977 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8411284) (@lem8411283 A B C P clauses s s' t t' c)). Qed.
Lemma lem8411286 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term839 A B C P _115319 c clauses) = (term839 A B C P _115319 c clauses).
Proof. exact (eq_refl (term839 A B C P _115319 c clauses)). Qed.
Lemma lem8411287 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4983 A B C P s s' t t' _115319 c clauses) = (term4979 A B C P s s' t t' _115319 c clauses).
Proof. exact (MK_COMB (@lem8411285 A B C P clauses s s' t t' c) (@lem8411286 A B C P _115319 c clauses)). Qed.
Lemma lem8411288 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8411289 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4989 A B C P s s' t t' _115319 c clauses) = (term4990 A B C P s s' t t' _115319 c clauses).
Proof. exact (MK_COMB (@lem8411288) (@lem8411287 A B C P s s' t t' _115319 c clauses)). Qed.
Lemma lem8411290 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term4985 A B C P clauses s s' t t' c x) = (term4875 A B C P clauses s s' t x t' c).
Proof. exact (eq_refl (term4985 A B C P clauses s s' t t' c x)). Qed.
Lemma lem8411291 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8411292 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term4991 A B C P clauses s s' t t' c x) = (term4992 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8411291) (@lem8411290 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8411293 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term839 A B C P _115319 c clauses) = (term839 A B C P _115319 c clauses).
Proof. exact (eq_refl (term839 A B C P _115319 c clauses)). Qed.
Lemma lem8411294 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4993 A B C P s s' t t' x _115319 c clauses) = (term4994 A B C P s s' t x t' _115319 c clauses).
Proof. exact (MK_COMB (@lem8411292 A B C P clauses s s' t x t' c) (@lem8411293 A B C P _115319 c clauses)). Qed.
Lemma lem8411295 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4995 A B C P s s' t t' _115319 c clauses) = (term4996 A B C P s s' t t' _115319 c clauses).
Proof. exact (fun_ext (fun x : P -> A => @lem8411294 A B C P s s' t x t' _115319 c clauses)). Qed.
Lemma lem8411296 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8411297 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4984 A B C P s s' t t' _115319 c clauses) = (term4997 A B C P s s' t t' _115319 c clauses).
Proof. exact (MK_COMB (@lem8411296 A P) (@lem8411295 A B C P s s' t t' _115319 c clauses)). Qed.
Lemma lem8411298 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : ((term4983 A B C P s s' t t' _115319 c clauses) = (term4984 A B C P s s' t t' _115319 c clauses)) = ((term4979 A B C P s s' t t' _115319 c clauses) = (term4997 A B C P s s' t t' _115319 c clauses)).
Proof. exact (MK_COMB (@lem8411289 A B C P s s' t t' _115319 c clauses) (@lem8411297 A B C P s s' t t' _115319 c clauses)). Qed.
Lemma lem8411299 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4979 A B C P s s' t t' _115319 c clauses) = (term4997 A B C P s s' t t' _115319 c clauses).
Proof. exact (EQ_MP (@lem8411298 A B C P s s' t t' _115319 c clauses) (@lem8411279 A B C P s s' t t' _115319 c clauses)). Qed.
Lemma lem8411301 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8411302 {A P : Type'} (P' : type805 A P) (Q : Prop) : (term3071 A P P' Q) = (term3072 A P P' Q).
Proof. exact (@lem8411301 (P -> A) P' Q). Qed.
Lemma lem8411303 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4998 A B C P s s' t x t' _115319 c clauses) = (term4999 A B C P s s' t x t' _115319 c clauses).
Proof. exact (@lem8411302 A P (term4874 A B C P clauses s s' t x t' c) (term839 A B C P _115319 c clauses)). Qed.
Lemma lem8411304 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) (y : P -> A) : (term5000 A B C P clauses s s' t x t' c y) = (term4867 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term5000 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8411305 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term5001 A B C P clauses s s' t x t' c) = (term4874 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : P -> A => @lem8411304 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8411306 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8411307 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term5002 A B C P clauses s s' t x t' c) = (term4875 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8411306 A P) (@lem8411305 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8411308 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8411309 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) : (term5003 A B C P clauses s s' t x t' c) = (term4992 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8411308) (@lem8411307 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8411310 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term839 A B C P _115319 c clauses) = (term839 A B C P _115319 c clauses).
Proof. exact (eq_refl (term839 A B C P _115319 c clauses)). Qed.
Lemma lem8411311 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4998 A B C P s s' t x t' _115319 c clauses) = (term4994 A B C P s s' t x t' _115319 c clauses).
Proof. exact (MK_COMB (@lem8411309 A B C P clauses s s' t x t' c) (@lem8411310 A B C P _115319 c clauses)). Qed.
Lemma lem8411312 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8411313 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5004 A B C P s s' t x t' _115319 c clauses) = (term5005 A B C P s s' t x t' _115319 c clauses).
Proof. exact (MK_COMB (@lem8411312) (@lem8411311 A B C P s s' t x t' _115319 c clauses)). Qed.
Lemma lem8411314 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) (y : P -> A) : (term5000 A B C P clauses s s' t x t' c y) = (term4867 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term5000 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8411315 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8411316 {A B C P : Type'} (clauses : type1631 A B C P) (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (c : C) (y : P -> A) : (term5006 A B C P clauses s s' t x t' c y) = (term5007 A B C P clauses s s' t x t' c y).
Proof. exact (MK_COMB (@lem8411315) (@lem8411314 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8411317 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term839 A B C P _115319 c clauses) = (term839 A B C P _115319 c clauses).
Proof. exact (eq_refl (term839 A B C P _115319 c clauses)). Qed.
Lemma lem8411318 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (y : P -> A) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5008 A B C P s s' t x t' y _115319 c clauses) = (term5009 A B C P s s' t x t' y _115319 c clauses).
Proof. exact (MK_COMB (@lem8411316 A B C P clauses s s' t x t' c y) (@lem8411317 A B C P _115319 c clauses)). Qed.
Lemma lem8411319 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5010 A B C P s s' t x t' _115319 c clauses) = (term5011 A B C P s s' t x t' _115319 c clauses).
Proof. exact (fun_ext (fun y : P -> A => @lem8411318 A B C P s s' t x t' y _115319 c clauses)). Qed.
Lemma lem8411320 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8411321 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4999 A B C P s s' t x t' _115319 c clauses) = (term5012 A B C P s s' t x t' _115319 c clauses).
Proof. exact (MK_COMB (@lem8411320 A P) (@lem8411319 A B C P s s' t x t' _115319 c clauses)). Qed.
Lemma lem8411322 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : ((term4998 A B C P s s' t x t' _115319 c clauses) = (term4999 A B C P s s' t x t' _115319 c clauses)) = ((term4994 A B C P s s' t x t' _115319 c clauses) = (term5012 A B C P s s' t x t' _115319 c clauses)).
Proof. exact (MK_COMB (@lem8411313 A B C P s s' t x t' _115319 c clauses) (@lem8411321 A B C P s s' t x t' _115319 c clauses)). Qed.
Lemma lem8411323 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (x : P -> A) (t' : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4994 A B C P s s' t x t' _115319 c clauses) = (term5012 A B C P s s' t x t' _115319 c clauses).
Proof. exact (EQ_MP (@lem8411322 A B C P s s' t x t' _115319 c clauses) (@lem8411303 A B C P s s' t x t' _115319 c clauses)). Qed.
Lemma lem8411324 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4996 A B C P s s' t t' _115319 c clauses) = (term5013 A B C P s s' t t' _115319 c clauses).
Proof. exact (fun_ext (fun x : P -> A => @lem8411323 A B C P s s' t x t' _115319 c clauses)). Qed.
Lemma lem8411325 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8411326 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4997 A B C P s s' t t' _115319 c clauses) = (term5014 A B C P s s' t t' _115319 c clauses).
Proof. exact (MK_COMB (@lem8411325 A P) (@lem8411324 A B C P s s' t t' _115319 c clauses)). Qed.
Lemma lem8411327 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (t' : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4979 A B C P s s' t t' _115319 c clauses) = (term5014 A B C P s s' t t' _115319 c clauses).
Proof. exact (TRANS (@lem8411299 A B C P s s' t t' _115319 c clauses) (@lem8411326 A B C P s s' t t' _115319 c clauses)). Qed.
Lemma lem8411328 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4981 A B C P s s' t _115319 c clauses) = (term5015 A B C P s s' t _115319 c clauses).
Proof. exact (fun_ext (fun t' : type1512 A B C P => @lem8411327 A B C P s s' t t' _115319 c clauses)). Qed.
Lemma lem8411329 {A B C P : Type'} : (@ex (C -> (P -> A) -> B)) = (@ex (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (C -> (P -> A) -> B))). Qed.
Lemma lem8411330 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4982 A B C P s s' t _115319 c clauses) = (term5016 A B C P s s' t _115319 c clauses).
Proof. exact (MK_COMB (@lem8411329 A B C P) (@lem8411328 A B C P s s' t _115319 c clauses)). Qed.
Lemma lem8411331 {A B C P : Type'} (s : type802 A P) (s' : type802 A P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4964 A B C P s s' t _115319 c clauses) = (term5016 A B C P s s' t _115319 c clauses).
Proof. exact (TRANS (@lem8411275 A B C P s s' t _115319 c clauses) (@lem8411330 A B C P s s' t _115319 c clauses)). Qed.
Lemma lem8411332 {A B C P : Type'} (s : type802 A P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4966 A B C P s t _115319 c clauses) = (term5017 A B C P s t _115319 c clauses).
Proof. exact (fun_ext (fun s' : type802 A P => @lem8411331 A B C P s s' t _115319 c clauses)). Qed.
Lemma lem8411333 {A P : Type'} : (@ex ((P -> A) -> A)) = (@ex ((P -> A) -> A)).
Proof. exact (eq_refl (@ex ((P -> A) -> A))). Qed.
Lemma lem8411334 {A B C P : Type'} (s : type802 A P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4967 A B C P s t _115319 c clauses) = (term5018 A B C P s t _115319 c clauses).
Proof. exact (MK_COMB (@lem8411333 A P) (@lem8411332 A B C P s t _115319 c clauses)). Qed.
Lemma lem8411335 {A B C P : Type'} (s : type802 A P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4949 A B C P s t _115319 c clauses) = (term5018 A B C P s t _115319 c clauses).
Proof. exact (TRANS (@lem8411251 A B C P s t _115319 c clauses) (@lem8411334 A B C P s t _115319 c clauses)). Qed.
Lemma lem8411336 {A B C P : Type'} (s : type802 A P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4951 A B C P s _115319 c clauses) = (term5019 A B C P s _115319 c clauses).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8411335 A B C P s t _115319 c clauses)). Qed.
Lemma lem8411337 {A B C P : Type'} : (@ex (C -> (P -> A) -> B)) = (@ex (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (C -> (P -> A) -> B))). Qed.
Lemma lem8411338 {A B C P : Type'} (s : type802 A P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4952 A B C P s _115319 c clauses) = (term5020 A B C P s _115319 c clauses).
Proof. exact (MK_COMB (@lem8411337 A B C P) (@lem8411336 A B C P s _115319 c clauses)). Qed.
Lemma lem8411339 {A B C P : Type'} (s : type802 A P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4932 A B C P s _115319 c clauses) = (term5020 A B C P s _115319 c clauses).
Proof. exact (TRANS (@lem8411227 A B C P s _115319 c clauses) (@lem8411338 A B C P s _115319 c clauses)). Qed.
Lemma lem8411340 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4934 A B C P _115319 c clauses) = (term5021 A B C P _115319 c clauses).
Proof. exact (fun_ext (fun s : type802 A P => @lem8411339 A B C P s _115319 c clauses)). Qed.
Lemma lem8411341 {A P : Type'} : (@ex ((P -> A) -> A)) = (@ex ((P -> A) -> A)).
Proof. exact (eq_refl (@ex ((P -> A) -> A))). Qed.
Lemma lem8411342 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4935 A B C P _115319 c clauses) = (term5022 A B C P _115319 c clauses).
Proof. exact (MK_COMB (@lem8411341 A P) (@lem8411340 A B C P _115319 c clauses)). Qed.
Lemma lem8411343 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term4914 A B C P _115319 c clauses) = (term5022 A B C P _115319 c clauses).
Proof. exact (TRANS (@lem8411203 A B C P _115319 c clauses) (@lem8411342 A B C P _115319 c clauses)). Qed.
Lemma lem8411344 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term4915 A B C P _115319 clauses) = (term5023 A B C P _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8411343 A B C P _115319 c clauses)). Qed.
Lemma lem8411345 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8411346 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term4916 A B C P _115319 clauses) = (term5024 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8411345 C) (@lem8411344 A B C P _115319 clauses)). Qed.
Lemma lem8411348 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8411349 {A C P : Type'} (P' : type1438 A C P) : (term5025 A C P P') = (term5026 A C P P').
Proof. exact (@lem8411348 C (type802 A P) P'). Qed.
Lemma lem8411350 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5027 A B C P _115319 clauses) = (term5028 A B C P _115319 clauses).
Proof. exact (@lem8411349 A C P (term5029 A B C P _115319 clauses)). Qed.
Lemma lem8411351 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5030 A B C P _115319 clauses c) = (term5021 A B C P _115319 c clauses).
Proof. exact (eq_refl (term5030 A B C P _115319 clauses c)). Qed.
Lemma lem8411352 {A P : Type'} (s : type802 A P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8411353 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) (s : type802 A P) : (term5031 A B C P _115319 clauses c s) = (term5032 A B C P _115319 c clauses s).
Proof. exact (MK_COMB (@lem8411351 A B C P _115319 c clauses) (@lem8411352 A P s)). Qed.
Lemma lem8411354 {A B C P : Type'} (s : type802 A P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5032 A B C P _115319 c clauses s) = (term5020 A B C P s _115319 c clauses).
Proof. exact (eq_refl (term5032 A B C P _115319 c clauses s)). Qed.
Lemma lem8411355 {A B C P : Type'} (s : type802 A P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5031 A B C P _115319 clauses c s) = (term5020 A B C P s _115319 c clauses).
Proof. exact (TRANS (@lem8411353 A B C P _115319 c clauses s) (@lem8411354 A B C P s _115319 c clauses)). Qed.
Lemma lem8411356 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5033 A B C P _115319 clauses c) = (term5021 A B C P _115319 c clauses).
Proof. exact (fun_ext (fun s : type802 A P => @lem8411355 A B C P s _115319 c clauses)). Qed.
Lemma lem8411357 {A P : Type'} : (@ex ((P -> A) -> A)) = (@ex ((P -> A) -> A)).
Proof. exact (eq_refl (@ex ((P -> A) -> A))). Qed.
Lemma lem8411358 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5034 A B C P _115319 clauses c) = (term5022 A B C P _115319 c clauses).
Proof. exact (MK_COMB (@lem8411357 A P) (@lem8411356 A B C P _115319 c clauses)). Qed.
Lemma lem8411359 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5035 A B C P _115319 clauses) = (term5023 A B C P _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8411358 A B C P _115319 c clauses)). Qed.
Lemma lem8411360 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8411361 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5027 A B C P _115319 clauses) = (term5024 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8411360 C) (@lem8411359 A B C P _115319 clauses)). Qed.
Lemma lem8411362 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8411363 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5036 A B C P _115319 clauses) = (term5037 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8411362) (@lem8411361 A B C P _115319 clauses)). Qed.
Lemma lem8411364 {A B C P : Type'} (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5030 A B C P _115319 clauses c) = (term5021 A B C P _115319 c clauses).
Proof. exact (eq_refl (term5030 A B C P _115319 clauses c)). Qed.
Lemma lem8411365 {A C P : Type'} (s : type1454 A C P) (c : C) : (s c) = (s c).
Proof. exact (eq_refl (s c)). Qed.
Lemma lem8411366 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1454 A C P) (c : C) : (term5038 A B C P _115319 clauses s c) = (term5039 A B C P _115319 clauses s c).
Proof. exact (MK_COMB (@lem8411364 A B C P _115319 c clauses) (@lem8411365 A C P s c)). Qed.
Lemma lem8411367 {A B C P : Type'} (s : type1454 A C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5039 A B C P _115319 clauses s c) = (term5040 A B C P s _115319 c clauses).
Proof. exact (eq_refl (term5039 A B C P _115319 clauses s c)). Qed.
Lemma lem8411368 {A B C P : Type'} (s : type1454 A C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5038 A B C P _115319 clauses s c) = (term5040 A B C P s _115319 c clauses).
Proof. exact (TRANS (@lem8411366 A B C P _115319 clauses s c) (@lem8411367 A B C P s _115319 c clauses)). Qed.
Lemma lem8411369 {A B C P : Type'} (s : type1454 A C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5041 A B C P _115319 clauses s) = (term5042 A B C P s _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8411368 A B C P s _115319 c clauses)). Qed.
Lemma lem8411370 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8411371 {A B C P : Type'} (s : type1454 A C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5043 A B C P _115319 clauses s) = (term5044 A B C P s _115319 clauses).
Proof. exact (MK_COMB (@lem8411370 C) (@lem8411369 A B C P s _115319 clauses)). Qed.
Lemma lem8411372 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5045 A B C P _115319 clauses) = (term5046 A B C P _115319 clauses).
Proof. exact (fun_ext (fun s : type1454 A C P => @lem8411371 A B C P s _115319 clauses)). Qed.
Lemma lem8411373 {A C P : Type'} : (@ex (C -> (P -> A) -> A)) = (@ex (C -> (P -> A) -> A)).
Proof. exact (eq_refl (@ex (C -> (P -> A) -> A))). Qed.
Lemma lem8411374 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5028 A B C P _115319 clauses) = (term5047 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8411373 A C P) (@lem8411372 A B C P _115319 clauses)). Qed.
Lemma lem8411375 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : ((term5027 A B C P _115319 clauses) = (term5028 A B C P _115319 clauses)) = ((term5024 A B C P _115319 clauses) = (term5047 A B C P _115319 clauses)).
Proof. exact (MK_COMB (@lem8411363 A B C P _115319 clauses) (@lem8411374 A B C P _115319 clauses)). Qed.
Lemma lem8411376 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5024 A B C P _115319 clauses) = (term5047 A B C P _115319 clauses).
Proof. exact (EQ_MP (@lem8411375 A B C P _115319 clauses) (@lem8411350 A B C P _115319 clauses)). Qed.
Lemma lem8411378 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8411379 {A B C P : Type'} (P' : type1511 A B C P) : (term5048 A B C P P') = (term5049 A B C P P').
Proof. exact (@lem8411378 C (type1512 A B C P) P'). Qed.
Lemma lem8411380 {A B C P : Type'} (s : type1454 A C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5050 A B C P s _115319 clauses) = (term5051 A B C P s _115319 clauses).
Proof. exact (@lem8411379 A B C P (term5052 A B C P s _115319 clauses)). Qed.
Lemma lem8411381 {A B C P : Type'} (s : type1454 A C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5053 A B C P s _115319 clauses c) = (term5054 A B C P s _115319 c clauses).
Proof. exact (eq_refl (term5053 A B C P s _115319 clauses c)). Qed.
Lemma lem8411382 {A B C P : Type'} (t : type1512 A B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8411383 {A B C P : Type'} (s : type1454 A C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) (t : type1512 A B C P) : (term5055 A B C P s _115319 clauses c t) = (term5056 A B C P s _115319 c clauses t).
Proof. exact (MK_COMB (@lem8411381 A B C P s _115319 c clauses) (@lem8411382 A B C P t)). Qed.
Lemma lem8411384 {A B C P : Type'} (s : type1454 A C P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5056 A B C P s _115319 c clauses t) = (term5057 A B C P s t _115319 c clauses).
Proof. exact (eq_refl (term5056 A B C P s _115319 c clauses t)). Qed.
Lemma lem8411385 {A B C P : Type'} (s : type1454 A C P) (t : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5055 A B C P s _115319 clauses c t) = (term5057 A B C P s t _115319 c clauses).
Proof. exact (TRANS (@lem8411383 A B C P s _115319 c clauses t) (@lem8411384 A B C P s t _115319 c clauses)). Qed.
Lemma lem8411386 {A B C P : Type'} (s : type1454 A C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5058 A B C P s _115319 clauses c) = (term5054 A B C P s _115319 c clauses).
Proof. exact (fun_ext (fun t : type1512 A B C P => @lem8411385 A B C P s t _115319 c clauses)). Qed.
Lemma lem8411387 {A B C P : Type'} : (@ex (C -> (P -> A) -> B)) = (@ex (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (C -> (P -> A) -> B))). Qed.
Lemma lem8411388 {A B C P : Type'} (s : type1454 A C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5059 A B C P s _115319 clauses c) = (term5040 A B C P s _115319 c clauses).
Proof. exact (MK_COMB (@lem8411387 A B C P) (@lem8411386 A B C P s _115319 c clauses)). Qed.
Lemma lem8411389 {A B C P : Type'} (s : type1454 A C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5060 A B C P s _115319 clauses) = (term5042 A B C P s _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8411388 A B C P s _115319 c clauses)). Qed.
Lemma lem8411390 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8411391 {A B C P : Type'} (s : type1454 A C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5050 A B C P s _115319 clauses) = (term5044 A B C P s _115319 clauses).
Proof. exact (MK_COMB (@lem8411390 C) (@lem8411389 A B C P s _115319 clauses)). Qed.
Lemma lem8411392 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8411393 {A B C P : Type'} (s : type1454 A C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5061 A B C P s _115319 clauses) = (term5062 A B C P s _115319 clauses).
Proof. exact (MK_COMB (@lem8411392) (@lem8411391 A B C P s _115319 clauses)). Qed.
Lemma lem8411394 {A B C P : Type'} (s : type1454 A C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5053 A B C P s _115319 clauses c) = (term5054 A B C P s _115319 c clauses).
Proof. exact (eq_refl (term5053 A B C P s _115319 clauses c)). Qed.
Lemma lem8411395 {A B C P : Type'} (t : type1521 A B C P) (c : C) : (t c) = (t c).
Proof. exact (eq_refl (t c)). Qed.
Lemma lem8411396 {A B C P : Type'} (s : type1454 A C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (t : type1521 A B C P) (c : C) : (term5063 A B C P s _115319 clauses t c) = (term5064 A B C P s _115319 clauses t c).
Proof. exact (MK_COMB (@lem8411394 A B C P s _115319 c clauses) (@lem8411395 A B C P t c)). Qed.
Lemma lem8411397 {A B C P : Type'} (s : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5064 A B C P s _115319 clauses t c) = (term5065 A B C P s t _115319 c clauses).
Proof. exact (eq_refl (term5064 A B C P s _115319 clauses t c)). Qed.
Lemma lem8411398 {A B C P : Type'} (s : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5063 A B C P s _115319 clauses t c) = (term5065 A B C P s t _115319 c clauses).
Proof. exact (TRANS (@lem8411396 A B C P s _115319 clauses t c) (@lem8411397 A B C P s t _115319 c clauses)). Qed.
Lemma lem8411399 {A B C P : Type'} (s : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5066 A B C P s _115319 clauses t) = (term5067 A B C P s t _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8411398 A B C P s t _115319 c clauses)). Qed.
Lemma lem8411400 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8411401 {A B C P : Type'} (s : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5068 A B C P s _115319 clauses t) = (term5069 A B C P s t _115319 clauses).
Proof. exact (MK_COMB (@lem8411400 C) (@lem8411399 A B C P s t _115319 clauses)). Qed.
Lemma lem8411402 {A B C P : Type'} (s : type1454 A C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5070 A B C P s _115319 clauses) = (term5071 A B C P s _115319 clauses).
Proof. exact (fun_ext (fun t : type1521 A B C P => @lem8411401 A B C P s t _115319 clauses)). Qed.
Lemma lem8411403 {A B C P : Type'} : (@ex (C -> C -> (P -> A) -> B)) = (@ex (C -> C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (C -> C -> (P -> A) -> B))). Qed.
Lemma lem8411404 {A B C P : Type'} (s : type1454 A C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5051 A B C P s _115319 clauses) = (term5072 A B C P s _115319 clauses).
Proof. exact (MK_COMB (@lem8411403 A B C P) (@lem8411402 A B C P s _115319 clauses)). Qed.
Lemma lem8411405 {A B C P : Type'} (s : type1454 A C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : ((term5050 A B C P s _115319 clauses) = (term5051 A B C P s _115319 clauses)) = ((term5044 A B C P s _115319 clauses) = (term5072 A B C P s _115319 clauses)).
Proof. exact (MK_COMB (@lem8411393 A B C P s _115319 clauses) (@lem8411404 A B C P s _115319 clauses)). Qed.
Lemma lem8411406 {A B C P : Type'} (s : type1454 A C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5044 A B C P s _115319 clauses) = (term5072 A B C P s _115319 clauses).
Proof. exact (EQ_MP (@lem8411405 A B C P s _115319 clauses) (@lem8411380 A B C P s _115319 clauses)). Qed.
Lemma lem8411408 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8411409 {A C P : Type'} (P' : type1438 A C P) : (term5025 A C P P') = (term5026 A C P P').
Proof. exact (@lem8411408 C (type802 A P) P'). Qed.
Lemma lem8411410 {A B C P : Type'} (s : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5073 A B C P s t _115319 clauses) = (term5074 A B C P s t _115319 clauses).
Proof. exact (@lem8411409 A C P (term5075 A B C P s t _115319 clauses)). Qed.
Lemma lem8411411 {A B C P : Type'} (s : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5076 A B C P s t _115319 clauses c) = (term5077 A B C P s t _115319 c clauses).
Proof. exact (eq_refl (term5076 A B C P s t _115319 clauses c)). Qed.
Lemma lem8411412 {A P : Type'} (s' : type802 A P) : s' = s'.
Proof. exact (eq_refl s'). Qed.
Lemma lem8411413 {A B C P : Type'} (s : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) (s' : type802 A P) : (term5078 A B C P s t _115319 clauses c s') = (term5079 A B C P s t _115319 c clauses s').
Proof. exact (MK_COMB (@lem8411411 A B C P s t _115319 c clauses) (@lem8411412 A P s')). Qed.
Lemma lem8411414 {A B C P : Type'} (s : type1454 A C P) (s' : type802 A P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5079 A B C P s t _115319 c clauses s') = (term5080 A B C P s s' t _115319 c clauses).
Proof. exact (eq_refl (term5079 A B C P s t _115319 c clauses s')). Qed.
Lemma lem8411415 {A B C P : Type'} (s : type1454 A C P) (s' : type802 A P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5078 A B C P s t _115319 clauses c s') = (term5080 A B C P s s' t _115319 c clauses).
Proof. exact (TRANS (@lem8411413 A B C P s t _115319 c clauses s') (@lem8411414 A B C P s s' t _115319 c clauses)). Qed.
Lemma lem8411416 {A B C P : Type'} (s : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5081 A B C P s t _115319 clauses c) = (term5077 A B C P s t _115319 c clauses).
Proof. exact (fun_ext (fun s' : type802 A P => @lem8411415 A B C P s s' t _115319 c clauses)). Qed.
Lemma lem8411417 {A P : Type'} : (@ex ((P -> A) -> A)) = (@ex ((P -> A) -> A)).
Proof. exact (eq_refl (@ex ((P -> A) -> A))). Qed.
Lemma lem8411418 {A B C P : Type'} (s : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5082 A B C P s t _115319 clauses c) = (term5065 A B C P s t _115319 c clauses).
Proof. exact (MK_COMB (@lem8411417 A P) (@lem8411416 A B C P s t _115319 c clauses)). Qed.
Lemma lem8411419 {A B C P : Type'} (s : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5083 A B C P s t _115319 clauses) = (term5067 A B C P s t _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8411418 A B C P s t _115319 c clauses)). Qed.
Lemma lem8411420 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8411421 {A B C P : Type'} (s : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5073 A B C P s t _115319 clauses) = (term5069 A B C P s t _115319 clauses).
Proof. exact (MK_COMB (@lem8411420 C) (@lem8411419 A B C P s t _115319 clauses)). Qed.
Lemma lem8411422 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8411423 {A B C P : Type'} (s : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5084 A B C P s t _115319 clauses) = (term5085 A B C P s t _115319 clauses).
Proof. exact (MK_COMB (@lem8411422) (@lem8411421 A B C P s t _115319 clauses)). Qed.
Lemma lem8411424 {A B C P : Type'} (s : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5076 A B C P s t _115319 clauses c) = (term5077 A B C P s t _115319 c clauses).
Proof. exact (eq_refl (term5076 A B C P s t _115319 clauses c)). Qed.
Lemma lem8411425 {A C P : Type'} (s' : type1454 A C P) (c : C) : (s' c) = (s' c).
Proof. exact (eq_refl (s' c)). Qed.
Lemma lem8411426 {A B C P : Type'} (s : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s' : type1454 A C P) (c : C) : (term5086 A B C P s t _115319 clauses s' c) = (term5087 A B C P s t _115319 clauses s' c).
Proof. exact (MK_COMB (@lem8411424 A B C P s t _115319 c clauses) (@lem8411425 A C P s' c)). Qed.
Lemma lem8411427 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5087 A B C P s t _115319 clauses s' c) = (term5088 A B C P s s' t _115319 c clauses).
Proof. exact (eq_refl (term5087 A B C P s t _115319 clauses s' c)). Qed.
Lemma lem8411428 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5086 A B C P s t _115319 clauses s' c) = (term5088 A B C P s s' t _115319 c clauses).
Proof. exact (TRANS (@lem8411426 A B C P s t _115319 clauses s' c) (@lem8411427 A B C P s s' t _115319 c clauses)). Qed.
Lemma lem8411429 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5089 A B C P s t _115319 clauses s') = (term5090 A B C P s s' t _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8411428 A B C P s s' t _115319 c clauses)). Qed.
Lemma lem8411430 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8411431 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5091 A B C P s t _115319 clauses s') = (term5092 A B C P s s' t _115319 clauses).
Proof. exact (MK_COMB (@lem8411430 C) (@lem8411429 A B C P s s' t _115319 clauses)). Qed.
Lemma lem8411432 {A B C P : Type'} (s : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5093 A B C P s t _115319 clauses) = (term5094 A B C P s t _115319 clauses).
Proof. exact (fun_ext (fun s' : type1454 A C P => @lem8411431 A B C P s s' t _115319 clauses)). Qed.
Lemma lem8411433 {A C P : Type'} : (@ex (C -> (P -> A) -> A)) = (@ex (C -> (P -> A) -> A)).
Proof. exact (eq_refl (@ex (C -> (P -> A) -> A))). Qed.
Lemma lem8411434 {A B C P : Type'} (s : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5074 A B C P s t _115319 clauses) = (term5095 A B C P s t _115319 clauses).
Proof. exact (MK_COMB (@lem8411433 A C P) (@lem8411432 A B C P s t _115319 clauses)). Qed.
Lemma lem8411435 {A B C P : Type'} (s : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : ((term5073 A B C P s t _115319 clauses) = (term5074 A B C P s t _115319 clauses)) = ((term5069 A B C P s t _115319 clauses) = (term5095 A B C P s t _115319 clauses)).
Proof. exact (MK_COMB (@lem8411423 A B C P s t _115319 clauses) (@lem8411434 A B C P s t _115319 clauses)). Qed.
Lemma lem8411436 {A B C P : Type'} (s : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5069 A B C P s t _115319 clauses) = (term5095 A B C P s t _115319 clauses).
Proof. exact (EQ_MP (@lem8411435 A B C P s t _115319 clauses) (@lem8411410 A B C P s t _115319 clauses)). Qed.
Lemma lem8411438 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8411439 {A B C P : Type'} (P' : type1511 A B C P) : (term5048 A B C P P') = (term5049 A B C P P').
Proof. exact (@lem8411438 C (type1512 A B C P) P'). Qed.
Lemma lem8411440 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5096 A B C P s s' t _115319 clauses) = (term5097 A B C P s s' t _115319 clauses).
Proof. exact (@lem8411439 A B C P (term5098 A B C P s s' t _115319 clauses)). Qed.
Lemma lem8411441 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5099 A B C P s s' t _115319 clauses c) = (term5100 A B C P s s' t _115319 c clauses).
Proof. exact (eq_refl (term5099 A B C P s s' t _115319 clauses c)). Qed.
Lemma lem8411442 {A B C P : Type'} (t' : type1512 A B C P) : t' = t'.
Proof. exact (eq_refl t'). Qed.
Lemma lem8411443 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) (t' : type1512 A B C P) : (term5101 A B C P s s' t _115319 clauses c t') = (term5102 A B C P s s' t _115319 c clauses t').
Proof. exact (MK_COMB (@lem8411441 A B C P s s' t _115319 c clauses) (@lem8411442 A B C P t')). Qed.
Lemma lem8411444 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (t' : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5102 A B C P s s' t _115319 c clauses t') = (term5103 A B C P s s' t t' _115319 c clauses).
Proof. exact (eq_refl (term5102 A B C P s s' t _115319 c clauses t')). Qed.
Lemma lem8411445 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (t' : type1512 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5101 A B C P s s' t _115319 clauses c t') = (term5103 A B C P s s' t t' _115319 c clauses).
Proof. exact (TRANS (@lem8411443 A B C P s s' t _115319 c clauses t') (@lem8411444 A B C P s s' t t' _115319 c clauses)). Qed.
Lemma lem8411446 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5104 A B C P s s' t _115319 clauses c) = (term5100 A B C P s s' t _115319 c clauses).
Proof. exact (fun_ext (fun t' : type1512 A B C P => @lem8411445 A B C P s s' t t' _115319 c clauses)). Qed.
Lemma lem8411447 {A B C P : Type'} : (@ex (C -> (P -> A) -> B)) = (@ex (C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (C -> (P -> A) -> B))). Qed.
Lemma lem8411448 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5105 A B C P s s' t _115319 clauses c) = (term5088 A B C P s s' t _115319 c clauses).
Proof. exact (MK_COMB (@lem8411447 A B C P) (@lem8411446 A B C P s s' t _115319 c clauses)). Qed.
Lemma lem8411449 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5106 A B C P s s' t _115319 clauses) = (term5090 A B C P s s' t _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8411448 A B C P s s' t _115319 c clauses)). Qed.
Lemma lem8411450 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8411451 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5096 A B C P s s' t _115319 clauses) = (term5092 A B C P s s' t _115319 clauses).
Proof. exact (MK_COMB (@lem8411450 C) (@lem8411449 A B C P s s' t _115319 clauses)). Qed.
Lemma lem8411452 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8411453 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5107 A B C P s s' t _115319 clauses) = (term5108 A B C P s s' t _115319 clauses).
Proof. exact (MK_COMB (@lem8411452) (@lem8411451 A B C P s s' t _115319 clauses)). Qed.
Lemma lem8411454 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5099 A B C P s s' t _115319 clauses c) = (term5100 A B C P s s' t _115319 c clauses).
Proof. exact (eq_refl (term5099 A B C P s s' t _115319 clauses c)). Qed.
Lemma lem8411455 {A B C P : Type'} (t' : type1521 A B C P) (c : C) : (t' c) = (t' c).
Proof. exact (eq_refl (t' c)). Qed.
Lemma lem8411456 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (t' : type1521 A B C P) (c : C) : (term5109 A B C P s s' t _115319 clauses t' c) = (term5110 A B C P s s' t _115319 clauses t' c).
Proof. exact (MK_COMB (@lem8411454 A B C P s s' t _115319 c clauses) (@lem8411455 A B C P t' c)). Qed.
Lemma lem8411457 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5110 A B C P s s' t _115319 clauses t' c) = (term5111 A B C P s s' t t' _115319 c clauses).
Proof. exact (eq_refl (term5110 A B C P s s' t _115319 clauses t' c)). Qed.
Lemma lem8411458 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5109 A B C P s s' t _115319 clauses t' c) = (term5111 A B C P s s' t t' _115319 c clauses).
Proof. exact (TRANS (@lem8411456 A B C P s s' t _115319 clauses t' c) (@lem8411457 A B C P s s' t t' _115319 c clauses)). Qed.
Lemma lem8411459 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5112 A B C P s s' t _115319 clauses t') = (term5113 A B C P s s' t t' _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8411458 A B C P s s' t t' _115319 c clauses)). Qed.
Lemma lem8411460 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8411461 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5114 A B C P s s' t _115319 clauses t') = (term5115 A B C P s s' t t' _115319 clauses).
Proof. exact (MK_COMB (@lem8411460 C) (@lem8411459 A B C P s s' t t' _115319 clauses)). Qed.
Lemma lem8411462 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5116 A B C P s s' t _115319 clauses) = (term5117 A B C P s s' t _115319 clauses).
Proof. exact (fun_ext (fun t' : type1521 A B C P => @lem8411461 A B C P s s' t t' _115319 clauses)). Qed.
Lemma lem8411463 {A B C P : Type'} : (@ex (C -> C -> (P -> A) -> B)) = (@ex (C -> C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (C -> C -> (P -> A) -> B))). Qed.
Lemma lem8411464 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5097 A B C P s s' t _115319 clauses) = (term5118 A B C P s s' t _115319 clauses).
Proof. exact (MK_COMB (@lem8411463 A B C P) (@lem8411462 A B C P s s' t _115319 clauses)). Qed.
Lemma lem8411465 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : ((term5096 A B C P s s' t _115319 clauses) = (term5097 A B C P s s' t _115319 clauses)) = ((term5092 A B C P s s' t _115319 clauses) = (term5118 A B C P s s' t _115319 clauses)).
Proof. exact (MK_COMB (@lem8411453 A B C P s s' t _115319 clauses) (@lem8411464 A B C P s s' t _115319 clauses)). Qed.
Lemma lem8411466 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5092 A B C P s s' t _115319 clauses) = (term5118 A B C P s s' t _115319 clauses).
Proof. exact (EQ_MP (@lem8411465 A B C P s s' t _115319 clauses) (@lem8411440 A B C P s s' t _115319 clauses)). Qed.
Lemma lem8411468 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8411469 {A C P : Type'} (P' : type1455 A C P) : (term3177 A C P P') = (term3178 A C P P').
Proof. exact (@lem8411468 C (P -> A) P'). Qed.
Lemma lem8411470 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5119 A B C P s s' t t' _115319 clauses) = (term5120 A B C P s s' t t' _115319 clauses).
Proof. exact (@lem8411469 A C P (term5121 A B C P s s' t t' _115319 clauses)). Qed.
Lemma lem8411471 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5122 A B C P s s' t t' _115319 clauses c) = (term5123 A B C P s s' t t' _115319 c clauses).
Proof. exact (eq_refl (term5122 A B C P s s' t t' _115319 clauses c)). Qed.
Lemma lem8411472 {A P : Type'} (x : P -> A) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8411473 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) (x : P -> A) : (term5124 A B C P s s' t t' _115319 clauses c x) = (term5125 A B C P s s' t t' _115319 c clauses x).
Proof. exact (MK_COMB (@lem8411471 A B C P s s' t t' _115319 c clauses) (@lem8411472 A P x)). Qed.
Lemma lem8411474 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : P -> A) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5125 A B C P s s' t t' _115319 c clauses x) = (term5126 A B C P s s' t x t' _115319 c clauses).
Proof. exact (eq_refl (term5125 A B C P s s' t t' _115319 c clauses x)). Qed.
Lemma lem8411475 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : P -> A) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5124 A B C P s s' t t' _115319 clauses c x) = (term5126 A B C P s s' t x t' _115319 c clauses).
Proof. exact (TRANS (@lem8411473 A B C P s s' t t' _115319 c clauses x) (@lem8411474 A B C P s s' t x t' _115319 c clauses)). Qed.
Lemma lem8411476 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5127 A B C P s s' t t' _115319 clauses c) = (term5123 A B C P s s' t t' _115319 c clauses).
Proof. exact (fun_ext (fun x : P -> A => @lem8411475 A B C P s s' t x t' _115319 c clauses)). Qed.
Lemma lem8411477 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8411478 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5128 A B C P s s' t t' _115319 clauses c) = (term5111 A B C P s s' t t' _115319 c clauses).
Proof. exact (MK_COMB (@lem8411477 A P) (@lem8411476 A B C P s s' t t' _115319 c clauses)). Qed.
Lemma lem8411479 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5129 A B C P s s' t t' _115319 clauses) = (term5113 A B C P s s' t t' _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8411478 A B C P s s' t t' _115319 c clauses)). Qed.
Lemma lem8411480 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8411481 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5119 A B C P s s' t t' _115319 clauses) = (term5115 A B C P s s' t t' _115319 clauses).
Proof. exact (MK_COMB (@lem8411480 C) (@lem8411479 A B C P s s' t t' _115319 clauses)). Qed.
Lemma lem8411482 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8411483 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5130 A B C P s s' t t' _115319 clauses) = (term5131 A B C P s s' t t' _115319 clauses).
Proof. exact (MK_COMB (@lem8411482) (@lem8411481 A B C P s s' t t' _115319 clauses)). Qed.
Lemma lem8411484 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5122 A B C P s s' t t' _115319 clauses c) = (term5123 A B C P s s' t t' _115319 c clauses).
Proof. exact (eq_refl (term5122 A B C P s s' t t' _115319 clauses c)). Qed.
Lemma lem8411485 {A C P : Type'} (x : type1475 A C P) (c : C) : (x c) = (x c).
Proof. exact (eq_refl (x c)). Qed.
Lemma lem8411486 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (x : type1475 A C P) (c : C) : (term5132 A B C P s s' t t' _115319 clauses x c) = (term5133 A B C P s s' t t' _115319 clauses x c).
Proof. exact (MK_COMB (@lem8411484 A B C P s s' t t' _115319 c clauses) (@lem8411485 A C P x c)). Qed.
Lemma lem8411487 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5133 A B C P s s' t t' _115319 clauses x c) = (term5134 A B C P s s' t x t' _115319 c clauses).
Proof. exact (eq_refl (term5133 A B C P s s' t t' _115319 clauses x c)). Qed.
Lemma lem8411488 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5132 A B C P s s' t t' _115319 clauses x c) = (term5134 A B C P s s' t x t' _115319 c clauses).
Proof. exact (TRANS (@lem8411486 A B C P s s' t t' _115319 clauses x c) (@lem8411487 A B C P s s' t x t' _115319 c clauses)). Qed.
Lemma lem8411489 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5135 A B C P s s' t t' _115319 clauses x) = (term5136 A B C P s s' t x t' _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8411488 A B C P s s' t x t' _115319 c clauses)). Qed.
Lemma lem8411490 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8411491 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5137 A B C P s s' t t' _115319 clauses x) = (term5138 A B C P s s' t x t' _115319 clauses).
Proof. exact (MK_COMB (@lem8411490 C) (@lem8411489 A B C P s s' t x t' _115319 clauses)). Qed.
Lemma lem8411492 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5139 A B C P s s' t t' _115319 clauses) = (term5140 A B C P s s' t t' _115319 clauses).
Proof. exact (fun_ext (fun x : type1475 A C P => @lem8411491 A B C P s s' t x t' _115319 clauses)). Qed.
Lemma lem8411493 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8411494 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5120 A B C P s s' t t' _115319 clauses) = (term5141 A B C P s s' t t' _115319 clauses).
Proof. exact (MK_COMB (@lem8411493 A C P) (@lem8411492 A B C P s s' t t' _115319 clauses)). Qed.
Lemma lem8411495 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : ((term5119 A B C P s s' t t' _115319 clauses) = (term5120 A B C P s s' t t' _115319 clauses)) = ((term5115 A B C P s s' t t' _115319 clauses) = (term5141 A B C P s s' t t' _115319 clauses)).
Proof. exact (MK_COMB (@lem8411483 A B C P s s' t t' _115319 clauses) (@lem8411494 A B C P s s' t t' _115319 clauses)). Qed.
Lemma lem8411496 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5115 A B C P s s' t t' _115319 clauses) = (term5141 A B C P s s' t t' _115319 clauses).
Proof. exact (EQ_MP (@lem8411495 A B C P s s' t t' _115319 clauses) (@lem8411470 A B C P s s' t t' _115319 clauses)). Qed.
Lemma lem8411498 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8411499 {A C P : Type'} (P' : type1455 A C P) : (term3177 A C P P') = (term3178 A C P P').
Proof. exact (@lem8411498 C (P -> A) P'). Qed.
Lemma lem8411500 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5142 A B C P s s' t x t' _115319 clauses) = (term5143 A B C P s s' t x t' _115319 clauses).
Proof. exact (@lem8411499 A C P (term5144 A B C P s s' t x t' _115319 clauses)). Qed.
Lemma lem8411501 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5145 A B C P s s' t x t' _115319 clauses c) = (term5146 A B C P s s' t x t' _115319 c clauses).
Proof. exact (eq_refl (term5145 A B C P s s' t x t' _115319 clauses c)). Qed.
Lemma lem8411502 {A P : Type'} (y : P -> A) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem8411503 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) (y : P -> A) : (term5147 A B C P s s' t x t' _115319 clauses c y) = (term5148 A B C P s s' t x t' _115319 c clauses y).
Proof. exact (MK_COMB (@lem8411501 A B C P s s' t x t' _115319 c clauses) (@lem8411502 A P y)). Qed.
Lemma lem8411504 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (y : P -> A) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5148 A B C P s s' t x t' _115319 c clauses y) = (term5149 A B C P s s' t x t' y _115319 c clauses).
Proof. exact (eq_refl (term5148 A B C P s s' t x t' _115319 c clauses y)). Qed.
Lemma lem8411505 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (y : P -> A) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5147 A B C P s s' t x t' _115319 clauses c y) = (term5149 A B C P s s' t x t' y _115319 c clauses).
Proof. exact (TRANS (@lem8411503 A B C P s s' t x t' _115319 c clauses y) (@lem8411504 A B C P s s' t x t' y _115319 c clauses)). Qed.
Lemma lem8411506 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5150 A B C P s s' t x t' _115319 clauses c) = (term5146 A B C P s s' t x t' _115319 c clauses).
Proof. exact (fun_ext (fun y : P -> A => @lem8411505 A B C P s s' t x t' y _115319 c clauses)). Qed.
Lemma lem8411507 {A P : Type'} : (@ex (P -> A)) = (@ex (P -> A)).
Proof. exact (eq_refl (@ex (P -> A))). Qed.
Lemma lem8411508 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5151 A B C P s s' t x t' _115319 clauses c) = (term5134 A B C P s s' t x t' _115319 c clauses).
Proof. exact (MK_COMB (@lem8411507 A P) (@lem8411506 A B C P s s' t x t' _115319 c clauses)). Qed.
Lemma lem8411509 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5152 A B C P s s' t x t' _115319 clauses) = (term5136 A B C P s s' t x t' _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8411508 A B C P s s' t x t' _115319 c clauses)). Qed.
Lemma lem8411510 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8411511 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5142 A B C P s s' t x t' _115319 clauses) = (term5138 A B C P s s' t x t' _115319 clauses).
Proof. exact (MK_COMB (@lem8411510 C) (@lem8411509 A B C P s s' t x t' _115319 clauses)). Qed.
Lemma lem8411512 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8411513 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5153 A B C P s s' t x t' _115319 clauses) = (term5154 A B C P s s' t x t' _115319 clauses).
Proof. exact (MK_COMB (@lem8411512) (@lem8411511 A B C P s s' t x t' _115319 clauses)). Qed.
Lemma lem8411514 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5145 A B C P s s' t x t' _115319 clauses c) = (term5146 A B C P s s' t x t' _115319 c clauses).
Proof. exact (eq_refl (term5145 A B C P s s' t x t' _115319 clauses c)). Qed.
Lemma lem8411515 {A C P : Type'} (y : type1475 A C P) (c : C) : (y c) = (y c).
Proof. exact (eq_refl (y c)). Qed.
Lemma lem8411516 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (y : type1475 A C P) (c : C) : (term5155 A B C P s s' t x t' _115319 clauses y c) = (term5156 A B C P s s' t x t' _115319 clauses y c).
Proof. exact (MK_COMB (@lem8411514 A B C P s s' t x t' _115319 c clauses) (@lem8411515 A C P y c)). Qed.
Lemma lem8411517 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (y : type1475 A C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5156 A B C P s s' t x t' _115319 clauses y c) = (term5157 A B C P s s' t x t' y _115319 c clauses).
Proof. exact (eq_refl (term5156 A B C P s s' t x t' _115319 clauses y c)). Qed.
Lemma lem8411518 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (y : type1475 A C P) (_115319 : type1061 A B C P) (c : C) (clauses : type1631 A B C P) : (term5155 A B C P s s' t x t' _115319 clauses y c) = (term5157 A B C P s s' t x t' y _115319 c clauses).
Proof. exact (TRANS (@lem8411516 A B C P s s' t x t' _115319 clauses y c) (@lem8411517 A B C P s s' t x t' y _115319 c clauses)). Qed.
Lemma lem8411519 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (y : type1475 A C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5158 A B C P s s' t x t' _115319 clauses y) = (term5159 A B C P s s' t x t' y _115319 clauses).
Proof. exact (fun_ext (fun c : C => @lem8411518 A B C P s s' t x t' y _115319 c clauses)). Qed.
Lemma lem8411520 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8411521 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (y : type1475 A C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5160 A B C P s s' t x t' _115319 clauses y) = (term5161 A B C P s s' t x t' y _115319 clauses).
Proof. exact (MK_COMB (@lem8411520 C) (@lem8411519 A B C P s s' t x t' y _115319 clauses)). Qed.
Lemma lem8411522 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5162 A B C P s s' t x t' _115319 clauses) = (term5163 A B C P s s' t x t' _115319 clauses).
Proof. exact (fun_ext (fun y : type1475 A C P => @lem8411521 A B C P s s' t x t' y _115319 clauses)). Qed.
Lemma lem8411523 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8411524 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5143 A B C P s s' t x t' _115319 clauses) = (term5164 A B C P s s' t x t' _115319 clauses).
Proof. exact (MK_COMB (@lem8411523 A C P) (@lem8411522 A B C P s s' t x t' _115319 clauses)). Qed.
Lemma lem8411525 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : ((term5142 A B C P s s' t x t' _115319 clauses) = (term5143 A B C P s s' t x t' _115319 clauses)) = ((term5138 A B C P s s' t x t' _115319 clauses) = (term5164 A B C P s s' t x t' _115319 clauses)).
Proof. exact (MK_COMB (@lem8411513 A B C P s s' t x t' _115319 clauses) (@lem8411524 A B C P s s' t x t' _115319 clauses)). Qed.
Lemma lem8411526 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (x : type1475 A C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5138 A B C P s s' t x t' _115319 clauses) = (term5164 A B C P s s' t x t' _115319 clauses).
Proof. exact (EQ_MP (@lem8411525 A B C P s s' t x t' _115319 clauses) (@lem8411500 A B C P s s' t x t' _115319 clauses)). Qed.
Lemma lem8411527 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5140 A B C P s s' t t' _115319 clauses) = (term5165 A B C P s s' t t' _115319 clauses).
Proof. exact (fun_ext (fun x : type1475 A C P => @lem8411526 A B C P s s' t x t' _115319 clauses)). Qed.
Lemma lem8411528 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8411529 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5141 A B C P s s' t t' _115319 clauses) = (term5166 A B C P s s' t t' _115319 clauses).
Proof. exact (MK_COMB (@lem8411528 A C P) (@lem8411527 A B C P s s' t t' _115319 clauses)). Qed.
Lemma lem8411530 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5115 A B C P s s' t t' _115319 clauses) = (term5166 A B C P s s' t t' _115319 clauses).
Proof. exact (TRANS (@lem8411496 A B C P s s' t t' _115319 clauses) (@lem8411529 A B C P s s' t t' _115319 clauses)). Qed.
Lemma lem8411531 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5117 A B C P s s' t _115319 clauses) = (term5167 A B C P s s' t _115319 clauses).
Proof. exact (fun_ext (fun t' : type1521 A B C P => @lem8411530 A B C P s s' t t' _115319 clauses)). Qed.
Lemma lem8411532 {A B C P : Type'} : (@ex (C -> C -> (P -> A) -> B)) = (@ex (C -> C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (C -> C -> (P -> A) -> B))). Qed.
Lemma lem8411533 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5118 A B C P s s' t _115319 clauses) = (term5168 A B C P s s' t _115319 clauses).
Proof. exact (MK_COMB (@lem8411532 A B C P) (@lem8411531 A B C P s s' t _115319 clauses)). Qed.
Lemma lem8411534 {A B C P : Type'} (s : type1454 A C P) (s' : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5092 A B C P s s' t _115319 clauses) = (term5168 A B C P s s' t _115319 clauses).
Proof. exact (TRANS (@lem8411466 A B C P s s' t _115319 clauses) (@lem8411533 A B C P s s' t _115319 clauses)). Qed.
Lemma lem8411535 {A B C P : Type'} (s : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5094 A B C P s t _115319 clauses) = (term5169 A B C P s t _115319 clauses).
Proof. exact (fun_ext (fun s' : type1454 A C P => @lem8411534 A B C P s s' t _115319 clauses)). Qed.
Lemma lem8411536 {A C P : Type'} : (@ex (C -> (P -> A) -> A)) = (@ex (C -> (P -> A) -> A)).
Proof. exact (eq_refl (@ex (C -> (P -> A) -> A))). Qed.
Lemma lem8411537 {A B C P : Type'} (s : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5095 A B C P s t _115319 clauses) = (term5170 A B C P s t _115319 clauses).
Proof. exact (MK_COMB (@lem8411536 A C P) (@lem8411535 A B C P s t _115319 clauses)). Qed.
Lemma lem8411538 {A B C P : Type'} (s : type1454 A C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5069 A B C P s t _115319 clauses) = (term5170 A B C P s t _115319 clauses).
Proof. exact (TRANS (@lem8411436 A B C P s t _115319 clauses) (@lem8411537 A B C P s t _115319 clauses)). Qed.
Lemma lem8411539 {A B C P : Type'} (s : type1454 A C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5071 A B C P s _115319 clauses) = (term5171 A B C P s _115319 clauses).
Proof. exact (fun_ext (fun t : type1521 A B C P => @lem8411538 A B C P s t _115319 clauses)). Qed.
Lemma lem8411540 {A B C P : Type'} : (@ex (C -> C -> (P -> A) -> B)) = (@ex (C -> C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (C -> C -> (P -> A) -> B))). Qed.
Lemma lem8411541 {A B C P : Type'} (s : type1454 A C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5072 A B C P s _115319 clauses) = (term5172 A B C P s _115319 clauses).
Proof. exact (MK_COMB (@lem8411540 A B C P) (@lem8411539 A B C P s _115319 clauses)). Qed.
Lemma lem8411542 {A B C P : Type'} (s : type1454 A C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5044 A B C P s _115319 clauses) = (term5172 A B C P s _115319 clauses).
Proof. exact (TRANS (@lem8411406 A B C P s _115319 clauses) (@lem8411541 A B C P s _115319 clauses)). Qed.
Lemma lem8411543 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5046 A B C P _115319 clauses) = (term5173 A B C P _115319 clauses).
Proof. exact (fun_ext (fun s : type1454 A C P => @lem8411542 A B C P s _115319 clauses)). Qed.
Lemma lem8411544 {A C P : Type'} : (@ex (C -> (P -> A) -> A)) = (@ex (C -> (P -> A) -> A)).
Proof. exact (eq_refl (@ex (C -> (P -> A) -> A))). Qed.
Lemma lem8411545 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5047 A B C P _115319 clauses) = (term5174 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8411544 A C P) (@lem8411543 A B C P _115319 clauses)). Qed.
Lemma lem8411546 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5024 A B C P _115319 clauses) = (term5174 A B C P _115319 clauses).
Proof. exact (TRANS (@lem8411376 A B C P _115319 clauses) (@lem8411545 A B C P _115319 clauses)). Qed.
Lemma lem8411547 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term4916 A B C P _115319 clauses) = (term5174 A B C P _115319 clauses).
Proof. exact (TRANS (@lem8411346 A B C P _115319 clauses) (@lem8411546 A B C P _115319 clauses)). Qed.
Lemma lem8411548 {A B C P : Type'} (_115319 : type1061 A B C P) : (term4917 A B C P _115319) = (term5175 A B C P _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8411547 A B C P _115319 clauses)). Qed.
Lemma lem8411549 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8411550 {A B C P : Type'} (_115319 : type1061 A B C P) : (term4918 A B C P _115319) = (term5176 A B C P _115319).
Proof. exact (MK_COMB (@lem8411549 A B C P) (@lem8411548 A B C P _115319)). Qed.
Lemma lem8411552 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8411553 {A B C P : Type'} (P' : type1056 A B C P) : (term5177 A B C P P') = (term5178 A B C P P').
Proof. exact (@lem8411552 (type1631 A B C P) (type1454 A C P) P'). Qed.
Lemma lem8411554 {A B C P : Type'} (_115319 : type1061 A B C P) : (term5179 A B C P _115319) = (term5180 A B C P _115319).
Proof. exact (@lem8411553 A B C P (term5181 A B C P _115319)). Qed.
Lemma lem8411555 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5182 A B C P _115319 clauses) = (term5173 A B C P _115319 clauses).
Proof. exact (eq_refl (term5182 A B C P _115319 clauses)). Qed.
Lemma lem8411556 {A C P : Type'} (s : type1454 A C P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8411557 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s : type1454 A C P) : (term5183 A B C P _115319 clauses s) = (term5184 A B C P _115319 clauses s).
Proof. exact (MK_COMB (@lem8411555 A B C P _115319 clauses) (@lem8411556 A C P s)). Qed.
Lemma lem8411558 {A B C P : Type'} (s : type1454 A C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5184 A B C P _115319 clauses s) = (term5172 A B C P s _115319 clauses).
Proof. exact (eq_refl (term5184 A B C P _115319 clauses s)). Qed.
Lemma lem8411559 {A B C P : Type'} (s : type1454 A C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5183 A B C P _115319 clauses s) = (term5172 A B C P s _115319 clauses).
Proof. exact (TRANS (@lem8411557 A B C P _115319 clauses s) (@lem8411558 A B C P s _115319 clauses)). Qed.
Lemma lem8411560 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5185 A B C P _115319 clauses) = (term5173 A B C P _115319 clauses).
Proof. exact (fun_ext (fun s : type1454 A C P => @lem8411559 A B C P s _115319 clauses)). Qed.
Lemma lem8411561 {A C P : Type'} : (@ex (C -> (P -> A) -> A)) = (@ex (C -> (P -> A) -> A)).
Proof. exact (eq_refl (@ex (C -> (P -> A) -> A))). Qed.
Lemma lem8411562 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5186 A B C P _115319 clauses) = (term5174 A B C P _115319 clauses).
Proof. exact (MK_COMB (@lem8411561 A C P) (@lem8411560 A B C P _115319 clauses)). Qed.
Lemma lem8411563 {A B C P : Type'} (_115319 : type1061 A B C P) : (term5187 A B C P _115319) = (term5175 A B C P _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8411562 A B C P _115319 clauses)). Qed.
Lemma lem8411564 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8411565 {A B C P : Type'} (_115319 : type1061 A B C P) : (term5179 A B C P _115319) = (term5176 A B C P _115319).
Proof. exact (MK_COMB (@lem8411564 A B C P) (@lem8411563 A B C P _115319)). Qed.
Lemma lem8411566 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8411567 {A B C P : Type'} (_115319 : type1061 A B C P) : (term5188 A B C P _115319) = (term5189 A B C P _115319).
Proof. exact (MK_COMB (@lem8411566) (@lem8411565 A B C P _115319)). Qed.
Lemma lem8411568 {A B C P : Type'} (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5182 A B C P _115319 clauses) = (term5173 A B C P _115319 clauses).
Proof. exact (eq_refl (term5182 A B C P _115319 clauses)). Qed.
Lemma lem8411569 {A B C P : Type'} (s : type1062 A B C P) (clauses : type1631 A B C P) : (s clauses) = (s clauses).
Proof. exact (eq_refl (s clauses)). Qed.
Lemma lem8411570 {A B C P : Type'} (_115319 : type1061 A B C P) (s : type1062 A B C P) (clauses : type1631 A B C P) : (term5190 A B C P _115319 s clauses) = (term5191 A B C P _115319 s clauses).
Proof. exact (MK_COMB (@lem8411568 A B C P _115319 clauses) (@lem8411569 A B C P s clauses)). Qed.
Lemma lem8411571 {A B C P : Type'} (s : type1062 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5191 A B C P _115319 s clauses) = (term5192 A B C P s _115319 clauses).
Proof. exact (eq_refl (term5191 A B C P _115319 s clauses)). Qed.
Lemma lem8411572 {A B C P : Type'} (s : type1062 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5190 A B C P _115319 s clauses) = (term5192 A B C P s _115319 clauses).
Proof. exact (TRANS (@lem8411570 A B C P _115319 s clauses) (@lem8411571 A B C P s _115319 clauses)). Qed.
Lemma lem8411573 {A B C P : Type'} (s : type1062 A B C P) (_115319 : type1061 A B C P) : (term5193 A B C P _115319 s) = (term5194 A B C P s _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8411572 A B C P s _115319 clauses)). Qed.
Lemma lem8411574 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8411575 {A B C P : Type'} (s : type1062 A B C P) (_115319 : type1061 A B C P) : (term5195 A B C P _115319 s) = (term5196 A B C P s _115319).
Proof. exact (MK_COMB (@lem8411574 A B C P) (@lem8411573 A B C P s _115319)). Qed.
Lemma lem8411576 {A B C P : Type'} (_115319 : type1061 A B C P) : (term5197 A B C P _115319) = (term5198 A B C P _115319).
Proof. exact (fun_ext (fun s : type1062 A B C P => @lem8411575 A B C P s _115319)). Qed.
Lemma lem8411577 {A B C P : Type'} : (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> (P -> A) -> A)) = (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> (P -> A) -> A)).
Proof. exact (eq_refl (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> (P -> A) -> A))). Qed.
Lemma lem8411578 {A B C P : Type'} (_115319 : type1061 A B C P) : (term5180 A B C P _115319) = (term5199 A B C P _115319).
Proof. exact (MK_COMB (@lem8411577 A B C P) (@lem8411576 A B C P _115319)). Qed.
Lemma lem8411579 {A B C P : Type'} (_115319 : type1061 A B C P) : ((term5179 A B C P _115319) = (term5180 A B C P _115319)) = ((term5176 A B C P _115319) = (term5199 A B C P _115319)).
Proof. exact (MK_COMB (@lem8411567 A B C P _115319) (@lem8411578 A B C P _115319)). Qed.
Lemma lem8411580 {A B C P : Type'} (_115319 : type1061 A B C P) : (term5176 A B C P _115319) = (term5199 A B C P _115319).
Proof. exact (EQ_MP (@lem8411579 A B C P _115319) (@lem8411554 A B C P _115319)). Qed.
Lemma lem8411582 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8411583 {A B C P : Type'} (P' : type1057 A B C P) : (term5200 A B C P P') = (term5201 A B C P P').
Proof. exact (@lem8411582 (type1631 A B C P) (type1521 A B C P) P'). Qed.
Lemma lem8411584 {A B C P : Type'} (s : type1062 A B C P) (_115319 : type1061 A B C P) : (term5202 A B C P s _115319) = (term5203 A B C P s _115319).
Proof. exact (@lem8411583 A B C P (term5204 A B C P s _115319)). Qed.
Lemma lem8411585 {A B C P : Type'} (s : type1062 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5205 A B C P s _115319 clauses) = (term5206 A B C P s _115319 clauses).
Proof. exact (eq_refl (term5205 A B C P s _115319 clauses)). Qed.
Lemma lem8411586 {A B C P : Type'} (t : type1521 A B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8411587 {A B C P : Type'} (s : type1062 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (t : type1521 A B C P) : (term5207 A B C P s _115319 clauses t) = (term5208 A B C P s _115319 clauses t).
Proof. exact (MK_COMB (@lem8411585 A B C P s _115319 clauses) (@lem8411586 A B C P t)). Qed.
Lemma lem8411588 {A B C P : Type'} (s : type1062 A B C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5208 A B C P s _115319 clauses t) = (term5209 A B C P s t _115319 clauses).
Proof. exact (eq_refl (term5208 A B C P s _115319 clauses t)). Qed.
Lemma lem8411589 {A B C P : Type'} (s : type1062 A B C P) (t : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5207 A B C P s _115319 clauses t) = (term5209 A B C P s t _115319 clauses).
Proof. exact (TRANS (@lem8411587 A B C P s _115319 clauses t) (@lem8411588 A B C P s t _115319 clauses)). Qed.
Lemma lem8411590 {A B C P : Type'} (s : type1062 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5210 A B C P s _115319 clauses) = (term5206 A B C P s _115319 clauses).
Proof. exact (fun_ext (fun t : type1521 A B C P => @lem8411589 A B C P s t _115319 clauses)). Qed.
Lemma lem8411591 {A B C P : Type'} : (@ex (C -> C -> (P -> A) -> B)) = (@ex (C -> C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (C -> C -> (P -> A) -> B))). Qed.
Lemma lem8411592 {A B C P : Type'} (s : type1062 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5211 A B C P s _115319 clauses) = (term5192 A B C P s _115319 clauses).
Proof. exact (MK_COMB (@lem8411591 A B C P) (@lem8411590 A B C P s _115319 clauses)). Qed.
Lemma lem8411593 {A B C P : Type'} (s : type1062 A B C P) (_115319 : type1061 A B C P) : (term5212 A B C P s _115319) = (term5194 A B C P s _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8411592 A B C P s _115319 clauses)). Qed.
Lemma lem8411594 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8411595 {A B C P : Type'} (s : type1062 A B C P) (_115319 : type1061 A B C P) : (term5202 A B C P s _115319) = (term5196 A B C P s _115319).
Proof. exact (MK_COMB (@lem8411594 A B C P) (@lem8411593 A B C P s _115319)). Qed.
Lemma lem8411596 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8411597 {A B C P : Type'} (s : type1062 A B C P) (_115319 : type1061 A B C P) : (term5213 A B C P s _115319) = (term5214 A B C P s _115319).
Proof. exact (MK_COMB (@lem8411596) (@lem8411595 A B C P s _115319)). Qed.
Lemma lem8411598 {A B C P : Type'} (s : type1062 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5205 A B C P s _115319 clauses) = (term5206 A B C P s _115319 clauses).
Proof. exact (eq_refl (term5205 A B C P s _115319 clauses)). Qed.
Lemma lem8411599 {A B C P : Type'} (t : type1063 A B C P) (clauses : type1631 A B C P) : (t clauses) = (t clauses).
Proof. exact (eq_refl (t clauses)). Qed.
Lemma lem8411600 {A B C P : Type'} (s : type1062 A B C P) (_115319 : type1061 A B C P) (t : type1063 A B C P) (clauses : type1631 A B C P) : (term5215 A B C P s _115319 t clauses) = (term5216 A B C P s _115319 t clauses).
Proof. exact (MK_COMB (@lem8411598 A B C P s _115319 clauses) (@lem8411599 A B C P t clauses)). Qed.
Lemma lem8411601 {A B C P : Type'} (s : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5216 A B C P s _115319 t clauses) = (term5217 A B C P s t _115319 clauses).
Proof. exact (eq_refl (term5216 A B C P s _115319 t clauses)). Qed.
Lemma lem8411602 {A B C P : Type'} (s : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5215 A B C P s _115319 t clauses) = (term5217 A B C P s t _115319 clauses).
Proof. exact (TRANS (@lem8411600 A B C P s _115319 t clauses) (@lem8411601 A B C P s t _115319 clauses)). Qed.
Lemma lem8411603 {A B C P : Type'} (s : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5218 A B C P s _115319 t) = (term5219 A B C P s t _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8411602 A B C P s t _115319 clauses)). Qed.
Lemma lem8411604 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8411605 {A B C P : Type'} (s : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5220 A B C P s _115319 t) = (term5221 A B C P s t _115319).
Proof. exact (MK_COMB (@lem8411604 A B C P) (@lem8411603 A B C P s t _115319)). Qed.
Lemma lem8411606 {A B C P : Type'} (s : type1062 A B C P) (_115319 : type1061 A B C P) : (term5222 A B C P s _115319) = (term5223 A B C P s _115319).
Proof. exact (fun_ext (fun t : type1063 A B C P => @lem8411605 A B C P s t _115319)). Qed.
Lemma lem8411607 {A B C P : Type'} : (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> C -> (P -> A) -> B)) = (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> C -> (P -> A) -> B))). Qed.
Lemma lem8411608 {A B C P : Type'} (s : type1062 A B C P) (_115319 : type1061 A B C P) : (term5203 A B C P s _115319) = (term5224 A B C P s _115319).
Proof. exact (MK_COMB (@lem8411607 A B C P) (@lem8411606 A B C P s _115319)). Qed.
Lemma lem8411609 {A B C P : Type'} (s : type1062 A B C P) (_115319 : type1061 A B C P) : ((term5202 A B C P s _115319) = (term5203 A B C P s _115319)) = ((term5196 A B C P s _115319) = (term5224 A B C P s _115319)).
Proof. exact (MK_COMB (@lem8411597 A B C P s _115319) (@lem8411608 A B C P s _115319)). Qed.
Lemma lem8411610 {A B C P : Type'} (s : type1062 A B C P) (_115319 : type1061 A B C P) : (term5196 A B C P s _115319) = (term5224 A B C P s _115319).
Proof. exact (EQ_MP (@lem8411609 A B C P s _115319) (@lem8411584 A B C P s _115319)). Qed.
Lemma lem8411612 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8411613 {A B C P : Type'} (P' : type1056 A B C P) : (term5177 A B C P P') = (term5178 A B C P P').
Proof. exact (@lem8411612 (type1631 A B C P) (type1454 A C P) P'). Qed.
Lemma lem8411614 {A B C P : Type'} (s : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5225 A B C P s t _115319) = (term5226 A B C P s t _115319).
Proof. exact (@lem8411613 A B C P (term5227 A B C P s t _115319)). Qed.
Lemma lem8411615 {A B C P : Type'} (s : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5228 A B C P s t _115319 clauses) = (term5229 A B C P s t _115319 clauses).
Proof. exact (eq_refl (term5228 A B C P s t _115319 clauses)). Qed.
Lemma lem8411616 {A C P : Type'} (s' : type1454 A C P) : s' = s'.
Proof. exact (eq_refl s'). Qed.
Lemma lem8411617 {A B C P : Type'} (s : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (s' : type1454 A C P) : (term5230 A B C P s t _115319 clauses s') = (term5231 A B C P s t _115319 clauses s').
Proof. exact (MK_COMB (@lem8411615 A B C P s t _115319 clauses) (@lem8411616 A C P s')). Qed.
Lemma lem8411618 {A B C P : Type'} (s : type1062 A B C P) (s' : type1454 A C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5231 A B C P s t _115319 clauses s') = (term5232 A B C P s s' t _115319 clauses).
Proof. exact (eq_refl (term5231 A B C P s t _115319 clauses s')). Qed.
Lemma lem8411619 {A B C P : Type'} (s : type1062 A B C P) (s' : type1454 A C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5230 A B C P s t _115319 clauses s') = (term5232 A B C P s s' t _115319 clauses).
Proof. exact (TRANS (@lem8411617 A B C P s t _115319 clauses s') (@lem8411618 A B C P s s' t _115319 clauses)). Qed.
Lemma lem8411620 {A B C P : Type'} (s : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5233 A B C P s t _115319 clauses) = (term5229 A B C P s t _115319 clauses).
Proof. exact (fun_ext (fun s' : type1454 A C P => @lem8411619 A B C P s s' t _115319 clauses)). Qed.
Lemma lem8411621 {A C P : Type'} : (@ex (C -> (P -> A) -> A)) = (@ex (C -> (P -> A) -> A)).
Proof. exact (eq_refl (@ex (C -> (P -> A) -> A))). Qed.
Lemma lem8411622 {A B C P : Type'} (s : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5234 A B C P s t _115319 clauses) = (term5217 A B C P s t _115319 clauses).
Proof. exact (MK_COMB (@lem8411621 A C P) (@lem8411620 A B C P s t _115319 clauses)). Qed.
Lemma lem8411623 {A B C P : Type'} (s : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5235 A B C P s t _115319) = (term5219 A B C P s t _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8411622 A B C P s t _115319 clauses)). Qed.
Lemma lem8411624 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8411625 {A B C P : Type'} (s : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5225 A B C P s t _115319) = (term5221 A B C P s t _115319).
Proof. exact (MK_COMB (@lem8411624 A B C P) (@lem8411623 A B C P s t _115319)). Qed.
Lemma lem8411626 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8411627 {A B C P : Type'} (s : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5236 A B C P s t _115319) = (term5237 A B C P s t _115319).
Proof. exact (MK_COMB (@lem8411626) (@lem8411625 A B C P s t _115319)). Qed.
Lemma lem8411628 {A B C P : Type'} (s : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5228 A B C P s t _115319 clauses) = (term5229 A B C P s t _115319 clauses).
Proof. exact (eq_refl (term5228 A B C P s t _115319 clauses)). Qed.
Lemma lem8411629 {A B C P : Type'} (s' : type1062 A B C P) (clauses : type1631 A B C P) : (s' clauses) = (s' clauses).
Proof. exact (eq_refl (s' clauses)). Qed.
Lemma lem8411630 {A B C P : Type'} (s : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) (s' : type1062 A B C P) (clauses : type1631 A B C P) : (term5238 A B C P s t _115319 s' clauses) = (term5239 A B C P s t _115319 s' clauses).
Proof. exact (MK_COMB (@lem8411628 A B C P s t _115319 clauses) (@lem8411629 A B C P s' clauses)). Qed.
Lemma lem8411631 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5239 A B C P s t _115319 s' clauses) = (term5240 A B C P s s' t _115319 clauses).
Proof. exact (eq_refl (term5239 A B C P s t _115319 s' clauses)). Qed.
Lemma lem8411632 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5238 A B C P s t _115319 s' clauses) = (term5240 A B C P s s' t _115319 clauses).
Proof. exact (TRANS (@lem8411630 A B C P s t _115319 s' clauses) (@lem8411631 A B C P s s' t _115319 clauses)). Qed.
Lemma lem8411633 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5241 A B C P s t _115319 s') = (term5242 A B C P s s' t _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8411632 A B C P s s' t _115319 clauses)). Qed.
Lemma lem8411634 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8411635 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5243 A B C P s t _115319 s') = (term5244 A B C P s s' t _115319).
Proof. exact (MK_COMB (@lem8411634 A B C P) (@lem8411633 A B C P s s' t _115319)). Qed.
Lemma lem8411636 {A B C P : Type'} (s : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5245 A B C P s t _115319) = (term5246 A B C P s t _115319).
Proof. exact (fun_ext (fun s' : type1062 A B C P => @lem8411635 A B C P s s' t _115319)). Qed.
Lemma lem8411637 {A B C P : Type'} : (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> (P -> A) -> A)) = (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> (P -> A) -> A)).
Proof. exact (eq_refl (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> (P -> A) -> A))). Qed.
Lemma lem8411638 {A B C P : Type'} (s : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5226 A B C P s t _115319) = (term5247 A B C P s t _115319).
Proof. exact (MK_COMB (@lem8411637 A B C P) (@lem8411636 A B C P s t _115319)). Qed.
Lemma lem8411639 {A B C P : Type'} (s : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : ((term5225 A B C P s t _115319) = (term5226 A B C P s t _115319)) = ((term5221 A B C P s t _115319) = (term5247 A B C P s t _115319)).
Proof. exact (MK_COMB (@lem8411627 A B C P s t _115319) (@lem8411638 A B C P s t _115319)). Qed.
Lemma lem8411640 {A B C P : Type'} (s : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5221 A B C P s t _115319) = (term5247 A B C P s t _115319).
Proof. exact (EQ_MP (@lem8411639 A B C P s t _115319) (@lem8411614 A B C P s t _115319)). Qed.
Lemma lem8411642 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8411643 {A B C P : Type'} (P' : type1057 A B C P) : (term5200 A B C P P') = (term5201 A B C P P').
Proof. exact (@lem8411642 (type1631 A B C P) (type1521 A B C P) P'). Qed.
Lemma lem8411644 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5248 A B C P s s' t _115319) = (term5249 A B C P s s' t _115319).
Proof. exact (@lem8411643 A B C P (term5250 A B C P s s' t _115319)). Qed.
Lemma lem8411645 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5251 A B C P s s' t _115319 clauses) = (term5252 A B C P s s' t _115319 clauses).
Proof. exact (eq_refl (term5251 A B C P s s' t _115319 clauses)). Qed.
Lemma lem8411646 {A B C P : Type'} (t' : type1521 A B C P) : t' = t'.
Proof. exact (eq_refl t'). Qed.
Lemma lem8411647 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (t' : type1521 A B C P) : (term5253 A B C P s s' t _115319 clauses t') = (term5254 A B C P s s' t _115319 clauses t').
Proof. exact (MK_COMB (@lem8411645 A B C P s s' t _115319 clauses) (@lem8411646 A B C P t')). Qed.
Lemma lem8411648 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5254 A B C P s s' t _115319 clauses t') = (term5255 A B C P s s' t t' _115319 clauses).
Proof. exact (eq_refl (term5254 A B C P s s' t _115319 clauses t')). Qed.
Lemma lem8411649 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (t' : type1521 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5253 A B C P s s' t _115319 clauses t') = (term5255 A B C P s s' t t' _115319 clauses).
Proof. exact (TRANS (@lem8411647 A B C P s s' t _115319 clauses t') (@lem8411648 A B C P s s' t t' _115319 clauses)). Qed.
Lemma lem8411650 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5256 A B C P s s' t _115319 clauses) = (term5252 A B C P s s' t _115319 clauses).
Proof. exact (fun_ext (fun t' : type1521 A B C P => @lem8411649 A B C P s s' t t' _115319 clauses)). Qed.
Lemma lem8411651 {A B C P : Type'} : (@ex (C -> C -> (P -> A) -> B)) = (@ex (C -> C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex (C -> C -> (P -> A) -> B))). Qed.
Lemma lem8411652 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5257 A B C P s s' t _115319 clauses) = (term5240 A B C P s s' t _115319 clauses).
Proof. exact (MK_COMB (@lem8411651 A B C P) (@lem8411650 A B C P s s' t _115319 clauses)). Qed.
Lemma lem8411653 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5258 A B C P s s' t _115319) = (term5242 A B C P s s' t _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8411652 A B C P s s' t _115319 clauses)). Qed.
Lemma lem8411654 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8411655 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5248 A B C P s s' t _115319) = (term5244 A B C P s s' t _115319).
Proof. exact (MK_COMB (@lem8411654 A B C P) (@lem8411653 A B C P s s' t _115319)). Qed.
Lemma lem8411656 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8411657 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5259 A B C P s s' t _115319) = (term5260 A B C P s s' t _115319).
Proof. exact (MK_COMB (@lem8411656) (@lem8411655 A B C P s s' t _115319)). Qed.
Lemma lem8411658 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5251 A B C P s s' t _115319 clauses) = (term5252 A B C P s s' t _115319 clauses).
Proof. exact (eq_refl (term5251 A B C P s s' t _115319 clauses)). Qed.
Lemma lem8411659 {A B C P : Type'} (t' : type1063 A B C P) (clauses : type1631 A B C P) : (t' clauses) = (t' clauses).
Proof. exact (eq_refl (t' clauses)). Qed.
Lemma lem8411660 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) (t' : type1063 A B C P) (clauses : type1631 A B C P) : (term5261 A B C P s s' t _115319 t' clauses) = (term5262 A B C P s s' t _115319 t' clauses).
Proof. exact (MK_COMB (@lem8411658 A B C P s s' t _115319 clauses) (@lem8411659 A B C P t' clauses)). Qed.
Lemma lem8411661 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5262 A B C P s s' t _115319 t' clauses) = (term5263 A B C P s s' t t' _115319 clauses).
Proof. exact (eq_refl (term5262 A B C P s s' t _115319 t' clauses)). Qed.
Lemma lem8411662 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5261 A B C P s s' t _115319 t' clauses) = (term5263 A B C P s s' t t' _115319 clauses).
Proof. exact (TRANS (@lem8411660 A B C P s s' t _115319 t' clauses) (@lem8411661 A B C P s s' t t' _115319 clauses)). Qed.
Lemma lem8411663 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) : (term5264 A B C P s s' t _115319 t') = (term5265 A B C P s s' t t' _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8411662 A B C P s s' t t' _115319 clauses)). Qed.
Lemma lem8411664 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8411665 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) : (term5266 A B C P s s' t _115319 t') = (term5267 A B C P s s' t t' _115319).
Proof. exact (MK_COMB (@lem8411664 A B C P) (@lem8411663 A B C P s s' t t' _115319)). Qed.
Lemma lem8411666 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5268 A B C P s s' t _115319) = (term5269 A B C P s s' t _115319).
Proof. exact (fun_ext (fun t' : type1063 A B C P => @lem8411665 A B C P s s' t t' _115319)). Qed.
Lemma lem8411667 {A B C P : Type'} : (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> C -> (P -> A) -> B)) = (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> C -> (P -> A) -> B))). Qed.
Lemma lem8411668 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5249 A B C P s s' t _115319) = (term5270 A B C P s s' t _115319).
Proof. exact (MK_COMB (@lem8411667 A B C P) (@lem8411666 A B C P s s' t _115319)). Qed.
Lemma lem8411669 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : ((term5248 A B C P s s' t _115319) = (term5249 A B C P s s' t _115319)) = ((term5244 A B C P s s' t _115319) = (term5270 A B C P s s' t _115319)).
Proof. exact (MK_COMB (@lem8411657 A B C P s s' t _115319) (@lem8411668 A B C P s s' t _115319)). Qed.
Lemma lem8411670 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5244 A B C P s s' t _115319) = (term5270 A B C P s s' t _115319).
Proof. exact (EQ_MP (@lem8411669 A B C P s s' t _115319) (@lem8411644 A B C P s s' t _115319)). Qed.
Lemma lem8411672 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8411673 {A B C P : Type'} (P' : type1058 A B C P) : (term5271 A B C P P') = (term5272 A B C P P').
Proof. exact (@lem8411672 (type1631 A B C P) (type1475 A C P) P'). Qed.
Lemma lem8411674 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) : (term5273 A B C P s s' t t' _115319) = (term5274 A B C P s s' t t' _115319).
Proof. exact (@lem8411673 A B C P (term5275 A B C P s s' t t' _115319)). Qed.
Lemma lem8411675 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5276 A B C P s s' t t' _115319 clauses) = (term5277 A B C P s s' t t' _115319 clauses).
Proof. exact (eq_refl (term5276 A B C P s s' t t' _115319 clauses)). Qed.
Lemma lem8411676 {A C P : Type'} (x : type1475 A C P) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8411677 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (x : type1475 A C P) : (term5278 A B C P s s' t t' _115319 clauses x) = (term5279 A B C P s s' t t' _115319 clauses x).
Proof. exact (MK_COMB (@lem8411675 A B C P s s' t t' _115319 clauses) (@lem8411676 A C P x)). Qed.
Lemma lem8411678 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1475 A C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5279 A B C P s s' t t' _115319 clauses x) = (term5280 A B C P s s' t x t' _115319 clauses).
Proof. exact (eq_refl (term5279 A B C P s s' t t' _115319 clauses x)). Qed.
Lemma lem8411679 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1475 A C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5278 A B C P s s' t t' _115319 clauses x) = (term5280 A B C P s s' t x t' _115319 clauses).
Proof. exact (TRANS (@lem8411677 A B C P s s' t t' _115319 clauses x) (@lem8411678 A B C P s s' t x t' _115319 clauses)). Qed.
Lemma lem8411680 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5281 A B C P s s' t t' _115319 clauses) = (term5277 A B C P s s' t t' _115319 clauses).
Proof. exact (fun_ext (fun x : type1475 A C P => @lem8411679 A B C P s s' t x t' _115319 clauses)). Qed.
Lemma lem8411681 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8411682 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5282 A B C P s s' t t' _115319 clauses) = (term5263 A B C P s s' t t' _115319 clauses).
Proof. exact (MK_COMB (@lem8411681 A C P) (@lem8411680 A B C P s s' t t' _115319 clauses)). Qed.
Lemma lem8411683 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) : (term5283 A B C P s s' t t' _115319) = (term5265 A B C P s s' t t' _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8411682 A B C P s s' t t' _115319 clauses)). Qed.
Lemma lem8411684 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8411685 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) : (term5273 A B C P s s' t t' _115319) = (term5267 A B C P s s' t t' _115319).
Proof. exact (MK_COMB (@lem8411684 A B C P) (@lem8411683 A B C P s s' t t' _115319)). Qed.
Lemma lem8411686 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8411687 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) : (term5284 A B C P s s' t t' _115319) = (term5285 A B C P s s' t t' _115319).
Proof. exact (MK_COMB (@lem8411686) (@lem8411685 A B C P s s' t t' _115319)). Qed.
Lemma lem8411688 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5276 A B C P s s' t t' _115319 clauses) = (term5277 A B C P s s' t t' _115319 clauses).
Proof. exact (eq_refl (term5276 A B C P s s' t t' _115319 clauses)). Qed.
Lemma lem8411689 {A B C P : Type'} (x : type1064 A B C P) (clauses : type1631 A B C P) : (x clauses) = (x clauses).
Proof. exact (eq_refl (x clauses)). Qed.
Lemma lem8411690 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) (x : type1064 A B C P) (clauses : type1631 A B C P) : (term5286 A B C P s s' t t' _115319 x clauses) = (term5287 A B C P s s' t t' _115319 x clauses).
Proof. exact (MK_COMB (@lem8411688 A B C P s s' t t' _115319 clauses) (@lem8411689 A B C P x clauses)). Qed.
Lemma lem8411691 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5287 A B C P s s' t t' _115319 x clauses) = (term5288 A B C P s s' t x t' _115319 clauses).
Proof. exact (eq_refl (term5287 A B C P s s' t t' _115319 x clauses)). Qed.
Lemma lem8411692 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5286 A B C P s s' t t' _115319 x clauses) = (term5288 A B C P s s' t x t' _115319 clauses).
Proof. exact (TRANS (@lem8411690 A B C P s s' t t' _115319 x clauses) (@lem8411691 A B C P s s' t x t' _115319 clauses)). Qed.
Lemma lem8411693 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) : (term5289 A B C P s s' t t' _115319 x) = (term5290 A B C P s s' t x t' _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8411692 A B C P s s' t x t' _115319 clauses)). Qed.
Lemma lem8411694 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8411695 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) : (term5291 A B C P s s' t t' _115319 x) = (term5292 A B C P s s' t x t' _115319).
Proof. exact (MK_COMB (@lem8411694 A B C P) (@lem8411693 A B C P s s' t x t' _115319)). Qed.
Lemma lem8411696 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) : (term5293 A B C P s s' t t' _115319) = (term5294 A B C P s s' t t' _115319).
Proof. exact (fun_ext (fun x : type1064 A B C P => @lem8411695 A B C P s s' t x t' _115319)). Qed.
Lemma lem8411697 {A B C P : Type'} : (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> P -> A)) = (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> P -> A))). Qed.
Lemma lem8411698 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) : (term5274 A B C P s s' t t' _115319) = (term5295 A B C P s s' t t' _115319).
Proof. exact (MK_COMB (@lem8411697 A B C P) (@lem8411696 A B C P s s' t t' _115319)). Qed.
Lemma lem8411699 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) : ((term5273 A B C P s s' t t' _115319) = (term5274 A B C P s s' t t' _115319)) = ((term5267 A B C P s s' t t' _115319) = (term5295 A B C P s s' t t' _115319)).
Proof. exact (MK_COMB (@lem8411687 A B C P s s' t t' _115319) (@lem8411698 A B C P s s' t t' _115319)). Qed.
Lemma lem8411700 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) : (term5267 A B C P s s' t t' _115319) = (term5295 A B C P s s' t t' _115319).
Proof. exact (EQ_MP (@lem8411699 A B C P s s' t t' _115319) (@lem8411674 A B C P s s' t t' _115319)). Qed.
Lemma lem8411702 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8411703 {A B C P : Type'} (P' : type1058 A B C P) : (term5271 A B C P P') = (term5272 A B C P P').
Proof. exact (@lem8411702 (type1631 A B C P) (type1475 A C P) P'). Qed.
Lemma lem8411704 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) : (term5296 A B C P s s' t x t' _115319) = (term5297 A B C P s s' t x t' _115319).
Proof. exact (@lem8411703 A B C P (term5298 A B C P s s' t x t' _115319)). Qed.
Lemma lem8411705 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5299 A B C P s s' t x t' _115319 clauses) = (term5300 A B C P s s' t x t' _115319 clauses).
Proof. exact (eq_refl (term5299 A B C P s s' t x t' _115319 clauses)). Qed.
Lemma lem8411706 {A C P : Type'} (y : type1475 A C P) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem8411707 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) (y : type1475 A C P) : (term5301 A B C P s s' t x t' _115319 clauses y) = (term5302 A B C P s s' t x t' _115319 clauses y).
Proof. exact (MK_COMB (@lem8411705 A B C P s s' t x t' _115319 clauses) (@lem8411706 A C P y)). Qed.
Lemma lem8411708 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (y : type1475 A C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5302 A B C P s s' t x t' _115319 clauses y) = (term5303 A B C P s s' t x t' y _115319 clauses).
Proof. exact (eq_refl (term5302 A B C P s s' t x t' _115319 clauses y)). Qed.
Lemma lem8411709 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (y : type1475 A C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5301 A B C P s s' t x t' _115319 clauses y) = (term5303 A B C P s s' t x t' y _115319 clauses).
Proof. exact (TRANS (@lem8411707 A B C P s s' t x t' _115319 clauses y) (@lem8411708 A B C P s s' t x t' y _115319 clauses)). Qed.
Lemma lem8411710 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5304 A B C P s s' t x t' _115319 clauses) = (term5300 A B C P s s' t x t' _115319 clauses).
Proof. exact (fun_ext (fun y : type1475 A C P => @lem8411709 A B C P s s' t x t' y _115319 clauses)). Qed.
Lemma lem8411711 {A C P : Type'} : (@ex (C -> P -> A)) = (@ex (C -> P -> A)).
Proof. exact (eq_refl (@ex (C -> P -> A))). Qed.
Lemma lem8411712 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5305 A B C P s s' t x t' _115319 clauses) = (term5288 A B C P s s' t x t' _115319 clauses).
Proof. exact (MK_COMB (@lem8411711 A C P) (@lem8411710 A B C P s s' t x t' _115319 clauses)). Qed.
Lemma lem8411713 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) : (term5306 A B C P s s' t x t' _115319) = (term5290 A B C P s s' t x t' _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8411712 A B C P s s' t x t' _115319 clauses)). Qed.
Lemma lem8411714 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8411715 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) : (term5296 A B C P s s' t x t' _115319) = (term5292 A B C P s s' t x t' _115319).
Proof. exact (MK_COMB (@lem8411714 A B C P) (@lem8411713 A B C P s s' t x t' _115319)). Qed.
Lemma lem8411716 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8411717 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) : (term5307 A B C P s s' t x t' _115319) = (term5308 A B C P s s' t x t' _115319).
Proof. exact (MK_COMB (@lem8411716) (@lem8411715 A B C P s s' t x t' _115319)). Qed.
Lemma lem8411718 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5299 A B C P s s' t x t' _115319 clauses) = (term5300 A B C P s s' t x t' _115319 clauses).
Proof. exact (eq_refl (term5299 A B C P s s' t x t' _115319 clauses)). Qed.
Lemma lem8411719 {A B C P : Type'} (y : type1064 A B C P) (clauses : type1631 A B C P) : (y clauses) = (y clauses).
Proof. exact (eq_refl (y clauses)). Qed.
Lemma lem8411720 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) (y : type1064 A B C P) (clauses : type1631 A B C P) : (term5309 A B C P s s' t x t' _115319 y clauses) = (term5310 A B C P s s' t x t' _115319 y clauses).
Proof. exact (MK_COMB (@lem8411718 A B C P s s' t x t' _115319 clauses) (@lem8411719 A B C P y clauses)). Qed.
Lemma lem8411721 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (y : type1064 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5310 A B C P s s' t x t' _115319 y clauses) = (term5311 A B C P s s' t x t' y _115319 clauses).
Proof. exact (eq_refl (term5310 A B C P s s' t x t' _115319 y clauses)). Qed.
Lemma lem8411722 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (y : type1064 A B C P) (_115319 : type1061 A B C P) (clauses : type1631 A B C P) : (term5309 A B C P s s' t x t' _115319 y clauses) = (term5311 A B C P s s' t x t' y _115319 clauses).
Proof. exact (TRANS (@lem8411720 A B C P s s' t x t' _115319 y clauses) (@lem8411721 A B C P s s' t x t' y _115319 clauses)). Qed.
Lemma lem8411723 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (y : type1064 A B C P) (_115319 : type1061 A B C P) : (term5312 A B C P s s' t x t' _115319 y) = (term5313 A B C P s s' t x t' y _115319).
Proof. exact (fun_ext (fun clauses : type1631 A B C P => @lem8411722 A B C P s s' t x t' y _115319 clauses)). Qed.
Lemma lem8411724 {A B C P : Type'} : (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))) = (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B)))).
Proof. exact (eq_refl (@all (list (prod ((P -> A) -> A) (C -> (P -> A) -> B))))). Qed.
Lemma lem8411725 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (y : type1064 A B C P) (_115319 : type1061 A B C P) : (term5314 A B C P s s' t x t' _115319 y) = (term5315 A B C P s s' t x t' y _115319).
Proof. exact (MK_COMB (@lem8411724 A B C P) (@lem8411723 A B C P s s' t x t' y _115319)). Qed.
Lemma lem8411726 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) : (term5316 A B C P s s' t x t' _115319) = (term5317 A B C P s s' t x t' _115319).
Proof. exact (fun_ext (fun y : type1064 A B C P => @lem8411725 A B C P s s' t x t' y _115319)). Qed.
Lemma lem8411727 {A B C P : Type'} : (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> P -> A)) = (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> P -> A))). Qed.
Lemma lem8411728 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) : (term5297 A B C P s s' t x t' _115319) = (term5318 A B C P s s' t x t' _115319).
Proof. exact (MK_COMB (@lem8411727 A B C P) (@lem8411726 A B C P s s' t x t' _115319)). Qed.
Lemma lem8411729 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) : ((term5296 A B C P s s' t x t' _115319) = (term5297 A B C P s s' t x t' _115319)) = ((term5292 A B C P s s' t x t' _115319) = (term5318 A B C P s s' t x t' _115319)).
Proof. exact (MK_COMB (@lem8411717 A B C P s s' t x t' _115319) (@lem8411728 A B C P s s' t x t' _115319)). Qed.
Lemma lem8411730 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (x : type1064 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) : (term5292 A B C P s s' t x t' _115319) = (term5318 A B C P s s' t x t' _115319).
Proof. exact (EQ_MP (@lem8411729 A B C P s s' t x t' _115319) (@lem8411704 A B C P s s' t x t' _115319)). Qed.
Lemma lem8411731 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) : (term5294 A B C P s s' t t' _115319) = (term5319 A B C P s s' t t' _115319).
Proof. exact (fun_ext (fun x : type1064 A B C P => @lem8411730 A B C P s s' t x t' _115319)). Qed.
Lemma lem8411732 {A B C P : Type'} : (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> P -> A)) = (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> P -> A)).
Proof. exact (eq_refl (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> P -> A))). Qed.
Lemma lem8411733 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) : (term5295 A B C P s s' t t' _115319) = (term5320 A B C P s s' t t' _115319).
Proof. exact (MK_COMB (@lem8411732 A B C P) (@lem8411731 A B C P s s' t t' _115319)). Qed.
Lemma lem8411734 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (t' : type1063 A B C P) (_115319 : type1061 A B C P) : (term5267 A B C P s s' t t' _115319) = (term5320 A B C P s s' t t' _115319).
Proof. exact (TRANS (@lem8411700 A B C P s s' t t' _115319) (@lem8411733 A B C P s s' t t' _115319)). Qed.
Lemma lem8411735 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5269 A B C P s s' t _115319) = (term5321 A B C P s s' t _115319).
Proof. exact (fun_ext (fun t' : type1063 A B C P => @lem8411734 A B C P s s' t t' _115319)). Qed.
Lemma lem8411736 {A B C P : Type'} : (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> C -> (P -> A) -> B)) = (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> C -> (P -> A) -> B))). Qed.
Lemma lem8411737 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5270 A B C P s s' t _115319) = (term5322 A B C P s s' t _115319).
Proof. exact (MK_COMB (@lem8411736 A B C P) (@lem8411735 A B C P s s' t _115319)). Qed.
Lemma lem8411738 {A B C P : Type'} (s : type1062 A B C P) (s' : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5244 A B C P s s' t _115319) = (term5322 A B C P s s' t _115319).
Proof. exact (TRANS (@lem8411670 A B C P s s' t _115319) (@lem8411737 A B C P s s' t _115319)). Qed.
Lemma lem8411739 {A B C P : Type'} (s : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5246 A B C P s t _115319) = (term5323 A B C P s t _115319).
Proof. exact (fun_ext (fun s' : type1062 A B C P => @lem8411738 A B C P s s' t _115319)). Qed.
Lemma lem8411740 {A B C P : Type'} : (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> (P -> A) -> A)) = (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> (P -> A) -> A)).
Proof. exact (eq_refl (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> (P -> A) -> A))). Qed.
Lemma lem8411741 {A B C P : Type'} (s : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5247 A B C P s t _115319) = (term5324 A B C P s t _115319).
Proof. exact (MK_COMB (@lem8411740 A B C P) (@lem8411739 A B C P s t _115319)). Qed.
Lemma lem8411742 {A B C P : Type'} (s : type1062 A B C P) (t : type1063 A B C P) (_115319 : type1061 A B C P) : (term5221 A B C P s t _115319) = (term5324 A B C P s t _115319).
Proof. exact (TRANS (@lem8411640 A B C P s t _115319) (@lem8411741 A B C P s t _115319)). Qed.
Lemma lem8411743 {A B C P : Type'} (s : type1062 A B C P) (_115319 : type1061 A B C P) : (term5223 A B C P s _115319) = (term5325 A B C P s _115319).
Proof. exact (fun_ext (fun t : type1063 A B C P => @lem8411742 A B C P s t _115319)). Qed.
Lemma lem8411744 {A B C P : Type'} : (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> C -> (P -> A) -> B)) = (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> C -> (P -> A) -> B)).
Proof. exact (eq_refl (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> C -> (P -> A) -> B))). Qed.
Lemma lem8411745 {A B C P : Type'} (s : type1062 A B C P) (_115319 : type1061 A B C P) : (term5224 A B C P s _115319) = (term5326 A B C P s _115319).
Proof. exact (MK_COMB (@lem8411744 A B C P) (@lem8411743 A B C P s _115319)). Qed.
Lemma lem8411746 {A B C P : Type'} (s : type1062 A B C P) (_115319 : type1061 A B C P) : (term5196 A B C P s _115319) = (term5326 A B C P s _115319).
Proof. exact (TRANS (@lem8411610 A B C P s _115319) (@lem8411745 A B C P s _115319)). Qed.
Lemma lem8411747 {A B C P : Type'} (_115319 : type1061 A B C P) : (term5198 A B C P _115319) = (term5327 A B C P _115319).
Proof. exact (fun_ext (fun s : type1062 A B C P => @lem8411746 A B C P s _115319)). Qed.
Lemma lem8411748 {A B C P : Type'} : (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> (P -> A) -> A)) = (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> (P -> A) -> A)).
Proof. exact (eq_refl (@ex ((list (prod ((P -> A) -> A) (C -> (P -> A) -> B))) -> C -> (P -> A) -> A))). Qed.
Lemma lem8411749 {A B C P : Type'} (_115319 : type1061 A B C P) : (term5199 A B C P _115319) = (term5328 A B C P _115319).
Proof. exact (MK_COMB (@lem8411748 A B C P) (@lem8411747 A B C P _115319)). Qed.
Lemma lem8411750 {A B C P : Type'} (_115319 : type1061 A B C P) : (term5176 A B C P _115319) = (term5328 A B C P _115319).
Proof. exact (TRANS (@lem8411580 A B C P _115319) (@lem8411749 A B C P _115319)). Qed.
Lemma lem8411752 {A B C P : Type'} (_115319 : type1061 A B C P) : (term4918 A B C P _115319) = (term5328 A B C P _115319).
Proof. exact (TRANS (@lem8411550 A B C P _115319) (@lem8411750 A B C P _115319)). Qed.
Lemma lem8411753 {A B C P : Type'} (_115319 : type1061 A B C P) : (term844 A B C P _115319) = (term5328 A B C P _115319).
Proof. exact (TRANS (@lem8411058 A B C P _115319) (@lem8411752 A B C P _115319)). Qed.
Lemma lem8411754 {A B C P : Type'} (_115319 : type1061 A B C P) (h1 : term844 A B C P _115319) : term5328 A B C P _115319.
Proof. exact (EQ_MP (@lem8411753 A B C P _115319) (@lem8401046 A B C P _115319 h1)). Qed.
Lemma lem8411769 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) (y : type558 A B P) : (term5329 A B C P clauses s s' t x t' c y) = (term5330 A B C P clauses s s' t x t' c y).
Proof. exact (@lem17362 (term5331 A B C P t t' clauses s x s' y) ((t c x) = (t' c y))). Qed.
Lemma lem8411770 {A B P : Type'} (P' : type116 A B P) : (term1706 A B P P') = (term1707 A B P P').
Proof. exact (@lem18392 (type558 A B P) P'). Qed.
Lemma lem8411771 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term5332 A B C P clauses s s' t x t' c) = (term5333 A B C P clauses s s' t x t' c).
Proof. exact (@lem8411770 A B P (term278 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8411772 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) (y : type558 A B P) : (term5334 A B C P clauses s s' t x t' c y) = (term277 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term5334 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8411773 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8411774 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) (y : type558 A B P) : (term5335 A B C P clauses s s' t x t' c y) = (term5329 A B C P clauses s s' t x t' c y).
Proof. exact (MK_COMB (@lem8411773) (@lem8411772 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8411775 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) (y : type558 A B P) : (term5335 A B C P clauses s s' t x t' c y) = (term5330 A B C P clauses s s' t x t' c y).
Proof. exact (TRANS (@lem8411774 A B C P clauses s s' t x t' c y) (@lem8411769 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8411776 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term5336 A B C P clauses s s' t x t' c) = (term5337 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : type558 A B P => @lem8411775 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8411777 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8411778 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term5333 A B C P clauses s s' t x t' c) = (term5338 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8411777 A B P) (@lem8411776 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8411779 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term5332 A B C P clauses s s' t x t' c) = (term5338 A B C P clauses s s' t x t' c).
Proof. exact (TRANS (@lem8411771 A B C P clauses s s' t x t' c) (@lem8411778 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8411780 {A B P : Type'} (P' : type116 A B P) : (term1706 A B P P') = (term1707 A B P P').
Proof. exact (@lem18392 (type558 A B P) P'). Qed.
Lemma lem8411781 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term5339 A B C P clauses s s' t t' c) = (term5340 A B C P clauses s s' t t' c).
Proof. exact (@lem8411780 A B P (term280 A B C P clauses s s' t t' c)). Qed.
Lemma lem8411782 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term5341 A B C P clauses s s' t t' c x) = (term279 A B C P clauses s s' t x t' c).
Proof. exact (eq_refl (term5341 A B C P clauses s s' t t' c x)). Qed.
Lemma lem8411783 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8411784 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term5342 A B C P clauses s s' t t' c x) = (term5332 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8411783) (@lem8411782 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8411785 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term5342 A B C P clauses s s' t t' c x) = (term5338 A B C P clauses s s' t x t' c).
Proof. exact (TRANS (@lem8411784 A B C P clauses s s' t x t' c) (@lem8411779 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8411786 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term5343 A B C P clauses s s' t t' c) = (term5344 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : type558 A B P => @lem8411785 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8411787 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8411788 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term5340 A B C P clauses s s' t t' c) = (term5345 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8411787 A B P) (@lem8411786 A B C P clauses s s' t t' c)). Qed.
Lemma lem8411789 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term5339 A B C P clauses s s' t t' c) = (term5345 A B C P clauses s s' t t' c).
Proof. exact (TRANS (@lem8411781 A B C P clauses s s' t t' c) (@lem8411788 A B C P clauses s s' t t' c)). Qed.
Lemma lem8411790 {A B C P : Type'} (P' : type863 A B C P) : (term1036 A B C P P') = (term1037 A B C P P').
Proof. exact (@lem18392 (type1490 A B C P) P'). Qed.
Lemma lem8411791 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term5346 A B C P clauses s s' t c) = (term5347 A B C P clauses s s' t c).
Proof. exact (@lem8411790 A B C P (term282 A B C P clauses s s' t c)). Qed.
Lemma lem8411792 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term5348 A B C P clauses s s' t c t') = (term281 A B C P clauses s s' t t' c).
Proof. exact (eq_refl (term5348 A B C P clauses s s' t c t')). Qed.
Lemma lem8411793 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8411794 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term5349 A B C P clauses s s' t c t') = (term5339 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8411793) (@lem8411792 A B C P clauses s s' t t' c)). Qed.
Lemma lem8411795 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term5349 A B C P clauses s s' t c t') = (term5345 A B C P clauses s s' t t' c).
Proof. exact (TRANS (@lem8411794 A B C P clauses s s' t t' c) (@lem8411789 A B C P clauses s s' t t' c)). Qed.
Lemma lem8411796 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term5350 A B C P clauses s s' t c) = (term5351 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1490 A B C P => @lem8411795 A B C P clauses s s' t t' c)). Qed.
Lemma lem8411797 {A B C P : Type'} : (@ex (C -> ((A -> B) -> P -> B) -> B)) = (@ex (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8411798 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term5347 A B C P clauses s s' t c) = (term5352 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8411797 A B C P) (@lem8411796 A B C P clauses s s' t c)). Qed.
Lemma lem8411799 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term5346 A B C P clauses s s' t c) = (term5352 A B C P clauses s s' t c).
Proof. exact (TRANS (@lem8411791 A B C P clauses s s' t c) (@lem8411798 A B C P clauses s s' t c)). Qed.
Lemma lem8411800 {A B P : Type'} (P' : type68 A B P) : (term1046 A B P P') = (term1047 A B P P').
Proof. exact (@lem18392 (type115 A B P) P'). Qed.
Lemma lem8411801 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term5353 A B C P clauses s t c) = (term5354 A B C P clauses s t c).
Proof. exact (@lem8411800 A B P (term284 A B C P clauses s t c)). Qed.
Lemma lem8411802 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term5355 A B C P clauses s t c s') = (term283 A B C P clauses s s' t c).
Proof. exact (eq_refl (term5355 A B C P clauses s t c s')). Qed.
Lemma lem8411803 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8411804 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term5356 A B C P clauses s t c s') = (term5346 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8411803) (@lem8411802 A B C P clauses s s' t c)). Qed.
Lemma lem8411805 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term5356 A B C P clauses s t c s') = (term5352 A B C P clauses s s' t c).
Proof. exact (TRANS (@lem8411804 A B C P clauses s s' t c) (@lem8411799 A B C P clauses s s' t c)). Qed.
Lemma lem8411806 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term5357 A B C P clauses s t c) = (term5358 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type115 A B P => @lem8411805 A B C P clauses s s' t c)). Qed.
Lemma lem8411807 {A B P : Type'} : (@ex (((A -> B) -> P -> B) -> A)) = (@ex (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8411808 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term5354 A B C P clauses s t c) = (term5359 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8411807 A B P) (@lem8411806 A B C P clauses s t c)). Qed.
Lemma lem8411809 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term5353 A B C P clauses s t c) = (term5359 A B C P clauses s t c).
Proof. exact (TRANS (@lem8411801 A B C P clauses s t c) (@lem8411808 A B C P clauses s t c)). Qed.
Lemma lem8411810 {A B C P : Type'} (P' : type863 A B C P) : (term1036 A B C P P') = (term1037 A B C P P').
Proof. exact (@lem18392 (type1490 A B C P) P'). Qed.
Lemma lem8411811 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term5360 A B C P clauses s c) = (term5361 A B C P clauses s c).
Proof. exact (@lem8411810 A B C P (term286 A B C P clauses s c)). Qed.
Lemma lem8411812 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term5362 A B C P clauses s c t) = (term285 A B C P clauses s t c).
Proof. exact (eq_refl (term5362 A B C P clauses s c t)). Qed.
Lemma lem8411813 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8411814 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term5363 A B C P clauses s c t) = (term5353 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8411813) (@lem8411812 A B C P clauses s t c)). Qed.
Lemma lem8411815 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term5363 A B C P clauses s c t) = (term5359 A B C P clauses s t c).
Proof. exact (TRANS (@lem8411814 A B C P clauses s t c) (@lem8411809 A B C P clauses s t c)). Qed.
Lemma lem8411816 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term5364 A B C P clauses s c) = (term5365 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8411815 A B C P clauses s t c)). Qed.
Lemma lem8411817 {A B C P : Type'} : (@ex (C -> ((A -> B) -> P -> B) -> B)) = (@ex (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8411818 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term5361 A B C P clauses s c) = (term5366 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8411817 A B C P) (@lem8411816 A B C P clauses s c)). Qed.
Lemma lem8411819 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term5360 A B C P clauses s c) = (term5366 A B C P clauses s c).
Proof. exact (TRANS (@lem8411811 A B C P clauses s c) (@lem8411818 A B C P clauses s c)). Qed.
Lemma lem8411820 {A B P : Type'} (P' : type68 A B P) : (term1046 A B P P') = (term1047 A B P P').
Proof. exact (@lem18392 (type115 A B P) P'). Qed.
Lemma lem8411821 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term5367 A B C P clauses c) = (term5368 A B C P clauses c).
Proof. exact (@lem8411820 A B P (term288 A B C P clauses c)). Qed.
Lemma lem8411822 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term5369 A B C P clauses c s) = (term287 A B C P clauses s c).
Proof. exact (eq_refl (term5369 A B C P clauses c s)). Qed.
Lemma lem8411823 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8411824 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term5370 A B C P clauses c s) = (term5360 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8411823) (@lem8411822 A B C P clauses s c)). Qed.
Lemma lem8411825 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term5370 A B C P clauses c s) = (term5366 A B C P clauses s c).
Proof. exact (TRANS (@lem8411824 A B C P clauses s c) (@lem8411819 A B C P clauses s c)). Qed.
Lemma lem8411826 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term5371 A B C P clauses c) = (term5372 A B C P clauses c).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8411825 A B C P clauses s c)). Qed.
Lemma lem8411827 {A B P : Type'} : (@ex (((A -> B) -> P -> B) -> A)) = (@ex (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8411828 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term5368 A B C P clauses c) = (term5373 A B C P clauses c).
Proof. exact (MK_COMB (@lem8411827 A B P) (@lem8411826 A B C P clauses c)). Qed.
Lemma lem8411829 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term5367 A B C P clauses c) = (term5373 A B C P clauses c).
Proof. exact (TRANS (@lem8411821 A B C P clauses c) (@lem8411828 A B C P clauses c)). Qed.
Lemma lem8411830 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term940 A B C P _115320 c clauses) = (term940 A B C P _115320 c clauses).
Proof. exact (eq_refl (term940 A B C P _115320 c clauses)). Qed.
Lemma lem8411831 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8411832 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term5374 A B C P clauses c) = (term5375 A B C P clauses c).
Proof. exact (MK_COMB (@lem8411831) (@lem8411829 A B C P clauses c)). Qed.
Lemma lem8411833 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5376 A B C P _115320 c clauses) = (term5377 A B C P _115320 c clauses).
Proof. exact (MK_COMB (@lem8411832 A B C P clauses c) (@lem8411830 A B C P _115320 c clauses)). Qed.
Lemma lem8411834 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term941 A B C P _115320 c clauses) = (term5376 A B C P _115320 c clauses).
Proof. exact (@lem17265 (term289 A B C P clauses c) (term940 A B C P _115320 c clauses)). Qed.
Lemma lem8411835 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term941 A B C P _115320 c clauses) = (term5377 A B C P _115320 c clauses).
Proof. exact (TRANS (@lem8411834 A B C P _115320 c clauses) (@lem8411833 A B C P _115320 c clauses)). Qed.
Lemma lem8411836 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term942 A B C P _115320 clauses) = (term5378 A B C P _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8411835 A B C P _115320 c clauses)). Qed.
Lemma lem8411837 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8411838 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term943 A B C P _115320 clauses) = (term5379 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8411837 C) (@lem8411836 A B C P _115320 clauses)). Qed.
Lemma lem8411839 {A B C P : Type'} (_115320 : type1038 A B C P) : (term944 A B C P _115320) = (term5380 A B C P _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8411838 A B C P _115320 clauses)). Qed.
Lemma lem8411840 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8411841 {A B C P : Type'} (_115320 : type1038 A B C P) : (term945 A B C P _115320) = (term5381 A B C P _115320).
Proof. exact (MK_COMB (@lem8411840 A B C P) (@lem8411839 A B C P _115320)). Qed.
Lemma lem8411964 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8411965 {A B P : Type'} (P' : type68 A B P) (Q : Prop) : (term5382 A B P P' Q) = (term5383 A B P P' Q).
Proof. exact (@lem8411964 (type115 A B P) P' Q). Qed.
Lemma lem8411966 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5384 A B C P _115320 c clauses) = (term5385 A B C P _115320 c clauses).
Proof. exact (@lem8411965 A B P (term5372 A B C P clauses c) (term940 A B C P _115320 c clauses)). Qed.
Lemma lem8411967 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term5386 A B C P clauses c s) = (term5366 A B C P clauses s c).
Proof. exact (eq_refl (term5386 A B C P clauses c s)). Qed.
Lemma lem8411968 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term5387 A B C P clauses c) = (term5372 A B C P clauses c).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8411967 A B C P clauses s c)). Qed.
Lemma lem8411969 {A B P : Type'} : (@ex (((A -> B) -> P -> B) -> A)) = (@ex (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8411970 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term5388 A B C P clauses c) = (term5373 A B C P clauses c).
Proof. exact (MK_COMB (@lem8411969 A B P) (@lem8411968 A B C P clauses c)). Qed.
Lemma lem8411971 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8411972 {A B C P : Type'} (clauses : type1629 A B C P) (c : C) : (term5389 A B C P clauses c) = (term5375 A B C P clauses c).
Proof. exact (MK_COMB (@lem8411971) (@lem8411970 A B C P clauses c)). Qed.
Lemma lem8411973 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term940 A B C P _115320 c clauses) = (term940 A B C P _115320 c clauses).
Proof. exact (eq_refl (term940 A B C P _115320 c clauses)). Qed.
Lemma lem8411974 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5384 A B C P _115320 c clauses) = (term5377 A B C P _115320 c clauses).
Proof. exact (MK_COMB (@lem8411972 A B C P clauses c) (@lem8411973 A B C P _115320 c clauses)). Qed.
Lemma lem8411975 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8411976 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5390 A B C P _115320 c clauses) = (term5391 A B C P _115320 c clauses).
Proof. exact (MK_COMB (@lem8411975) (@lem8411974 A B C P _115320 c clauses)). Qed.
Lemma lem8411977 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term5386 A B C P clauses c s) = (term5366 A B C P clauses s c).
Proof. exact (eq_refl (term5386 A B C P clauses c s)). Qed.
Lemma lem8411978 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8411979 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term5392 A B C P clauses c s) = (term5393 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8411978) (@lem8411977 A B C P clauses s c)). Qed.
Lemma lem8411980 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term940 A B C P _115320 c clauses) = (term940 A B C P _115320 c clauses).
Proof. exact (eq_refl (term940 A B C P _115320 c clauses)). Qed.
Lemma lem8411981 {A B C P : Type'} (s : type115 A B P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5394 A B C P s _115320 c clauses) = (term5395 A B C P s _115320 c clauses).
Proof. exact (MK_COMB (@lem8411979 A B C P clauses s c) (@lem8411980 A B C P _115320 c clauses)). Qed.
Lemma lem8411982 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5396 A B C P _115320 c clauses) = (term5397 A B C P _115320 c clauses).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8411981 A B C P s _115320 c clauses)). Qed.
Lemma lem8411983 {A B P : Type'} : (@ex (((A -> B) -> P -> B) -> A)) = (@ex (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8411984 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5385 A B C P _115320 c clauses) = (term5398 A B C P _115320 c clauses).
Proof. exact (MK_COMB (@lem8411983 A B P) (@lem8411982 A B C P _115320 c clauses)). Qed.
Lemma lem8411985 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : ((term5384 A B C P _115320 c clauses) = (term5385 A B C P _115320 c clauses)) = ((term5377 A B C P _115320 c clauses) = (term5398 A B C P _115320 c clauses)).
Proof. exact (MK_COMB (@lem8411976 A B C P _115320 c clauses) (@lem8411984 A B C P _115320 c clauses)). Qed.
Lemma lem8411986 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5377 A B C P _115320 c clauses) = (term5398 A B C P _115320 c clauses).
Proof. exact (EQ_MP (@lem8411985 A B C P _115320 c clauses) (@lem8411966 A B C P _115320 c clauses)). Qed.
Lemma lem8411988 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8411989 {A B C P : Type'} (P' : type863 A B C P) (Q : Prop) : (term5399 A B C P P' Q) = (term5400 A B C P P' Q).
Proof. exact (@lem8411988 (type1490 A B C P) P' Q). Qed.
Lemma lem8411990 {A B C P : Type'} (s : type115 A B P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5401 A B C P s _115320 c clauses) = (term5402 A B C P s _115320 c clauses).
Proof. exact (@lem8411989 A B C P (term5365 A B C P clauses s c) (term940 A B C P _115320 c clauses)). Qed.
Lemma lem8411991 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term5403 A B C P clauses s c t) = (term5359 A B C P clauses s t c).
Proof. exact (eq_refl (term5403 A B C P clauses s c t)). Qed.
Lemma lem8411992 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term5404 A B C P clauses s c) = (term5365 A B C P clauses s c).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8411991 A B C P clauses s t c)). Qed.
Lemma lem8411993 {A B C P : Type'} : (@ex (C -> ((A -> B) -> P -> B) -> B)) = (@ex (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8411994 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term5405 A B C P clauses s c) = (term5366 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8411993 A B C P) (@lem8411992 A B C P clauses s c)). Qed.
Lemma lem8411995 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8411996 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (c : C) : (term5406 A B C P clauses s c) = (term5393 A B C P clauses s c).
Proof. exact (MK_COMB (@lem8411995) (@lem8411994 A B C P clauses s c)). Qed.
Lemma lem8411997 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term940 A B C P _115320 c clauses) = (term940 A B C P _115320 c clauses).
Proof. exact (eq_refl (term940 A B C P _115320 c clauses)). Qed.
Lemma lem8411998 {A B C P : Type'} (s : type115 A B P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5401 A B C P s _115320 c clauses) = (term5395 A B C P s _115320 c clauses).
Proof. exact (MK_COMB (@lem8411996 A B C P clauses s c) (@lem8411997 A B C P _115320 c clauses)). Qed.
Lemma lem8411999 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8412000 {A B C P : Type'} (s : type115 A B P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5407 A B C P s _115320 c clauses) = (term5408 A B C P s _115320 c clauses).
Proof. exact (MK_COMB (@lem8411999) (@lem8411998 A B C P s _115320 c clauses)). Qed.
Lemma lem8412001 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term5403 A B C P clauses s c t) = (term5359 A B C P clauses s t c).
Proof. exact (eq_refl (term5403 A B C P clauses s c t)). Qed.
Lemma lem8412002 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8412003 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term5409 A B C P clauses s c t) = (term5410 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8412002) (@lem8412001 A B C P clauses s t c)). Qed.
Lemma lem8412004 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term940 A B C P _115320 c clauses) = (term940 A B C P _115320 c clauses).
Proof. exact (eq_refl (term940 A B C P _115320 c clauses)). Qed.
Lemma lem8412005 {A B C P : Type'} (s : type115 A B P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5411 A B C P s t _115320 c clauses) = (term5412 A B C P s t _115320 c clauses).
Proof. exact (MK_COMB (@lem8412003 A B C P clauses s t c) (@lem8412004 A B C P _115320 c clauses)). Qed.
Lemma lem8412006 {A B C P : Type'} (s : type115 A B P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5413 A B C P s _115320 c clauses) = (term5414 A B C P s _115320 c clauses).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8412005 A B C P s t _115320 c clauses)). Qed.
Lemma lem8412007 {A B C P : Type'} : (@ex (C -> ((A -> B) -> P -> B) -> B)) = (@ex (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8412008 {A B C P : Type'} (s : type115 A B P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5402 A B C P s _115320 c clauses) = (term5415 A B C P s _115320 c clauses).
Proof. exact (MK_COMB (@lem8412007 A B C P) (@lem8412006 A B C P s _115320 c clauses)). Qed.
Lemma lem8412009 {A B C P : Type'} (s : type115 A B P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : ((term5401 A B C P s _115320 c clauses) = (term5402 A B C P s _115320 c clauses)) = ((term5395 A B C P s _115320 c clauses) = (term5415 A B C P s _115320 c clauses)).
Proof. exact (MK_COMB (@lem8412000 A B C P s _115320 c clauses) (@lem8412008 A B C P s _115320 c clauses)). Qed.
Lemma lem8412010 {A B C P : Type'} (s : type115 A B P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5395 A B C P s _115320 c clauses) = (term5415 A B C P s _115320 c clauses).
Proof. exact (EQ_MP (@lem8412009 A B C P s _115320 c clauses) (@lem8411990 A B C P s _115320 c clauses)). Qed.
Lemma lem8412012 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8412013 {A B P : Type'} (P' : type68 A B P) (Q : Prop) : (term5382 A B P P' Q) = (term5383 A B P P' Q).
Proof. exact (@lem8412012 (type115 A B P) P' Q). Qed.
Lemma lem8412014 {A B C P : Type'} (s : type115 A B P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5416 A B C P s t _115320 c clauses) = (term5417 A B C P s t _115320 c clauses).
Proof. exact (@lem8412013 A B P (term5358 A B C P clauses s t c) (term940 A B C P _115320 c clauses)). Qed.
Lemma lem8412015 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term5418 A B C P clauses s t c s') = (term5352 A B C P clauses s s' t c).
Proof. exact (eq_refl (term5418 A B C P clauses s t c s')). Qed.
Lemma lem8412016 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term5419 A B C P clauses s t c) = (term5358 A B C P clauses s t c).
Proof. exact (fun_ext (fun s' : type115 A B P => @lem8412015 A B C P clauses s s' t c)). Qed.
Lemma lem8412017 {A B P : Type'} : (@ex (((A -> B) -> P -> B) -> A)) = (@ex (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8412018 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term5420 A B C P clauses s t c) = (term5359 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8412017 A B P) (@lem8412016 A B C P clauses s t c)). Qed.
Lemma lem8412019 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8412020 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (t : type1490 A B C P) (c : C) : (term5421 A B C P clauses s t c) = (term5410 A B C P clauses s t c).
Proof. exact (MK_COMB (@lem8412019) (@lem8412018 A B C P clauses s t c)). Qed.
Lemma lem8412021 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term940 A B C P _115320 c clauses) = (term940 A B C P _115320 c clauses).
Proof. exact (eq_refl (term940 A B C P _115320 c clauses)). Qed.
Lemma lem8412022 {A B C P : Type'} (s : type115 A B P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5416 A B C P s t _115320 c clauses) = (term5412 A B C P s t _115320 c clauses).
Proof. exact (MK_COMB (@lem8412020 A B C P clauses s t c) (@lem8412021 A B C P _115320 c clauses)). Qed.
Lemma lem8412023 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8412024 {A B C P : Type'} (s : type115 A B P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5422 A B C P s t _115320 c clauses) = (term5423 A B C P s t _115320 c clauses).
Proof. exact (MK_COMB (@lem8412023) (@lem8412022 A B C P s t _115320 c clauses)). Qed.
Lemma lem8412025 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term5418 A B C P clauses s t c s') = (term5352 A B C P clauses s s' t c).
Proof. exact (eq_refl (term5418 A B C P clauses s t c s')). Qed.
Lemma lem8412026 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8412027 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term5424 A B C P clauses s t c s') = (term5425 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8412026) (@lem8412025 A B C P clauses s s' t c)). Qed.
Lemma lem8412028 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term940 A B C P _115320 c clauses) = (term940 A B C P _115320 c clauses).
Proof. exact (eq_refl (term940 A B C P _115320 c clauses)). Qed.
Lemma lem8412029 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5426 A B C P s t s' _115320 c clauses) = (term5427 A B C P s s' t _115320 c clauses).
Proof. exact (MK_COMB (@lem8412027 A B C P clauses s s' t c) (@lem8412028 A B C P _115320 c clauses)). Qed.
Lemma lem8412030 {A B C P : Type'} (s : type115 A B P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5428 A B C P s t _115320 c clauses) = (term5429 A B C P s t _115320 c clauses).
Proof. exact (fun_ext (fun s' : type115 A B P => @lem8412029 A B C P s s' t _115320 c clauses)). Qed.
Lemma lem8412031 {A B P : Type'} : (@ex (((A -> B) -> P -> B) -> A)) = (@ex (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8412032 {A B C P : Type'} (s : type115 A B P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5417 A B C P s t _115320 c clauses) = (term5430 A B C P s t _115320 c clauses).
Proof. exact (MK_COMB (@lem8412031 A B P) (@lem8412030 A B C P s t _115320 c clauses)). Qed.
Lemma lem8412033 {A B C P : Type'} (s : type115 A B P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : ((term5416 A B C P s t _115320 c clauses) = (term5417 A B C P s t _115320 c clauses)) = ((term5412 A B C P s t _115320 c clauses) = (term5430 A B C P s t _115320 c clauses)).
Proof. exact (MK_COMB (@lem8412024 A B C P s t _115320 c clauses) (@lem8412032 A B C P s t _115320 c clauses)). Qed.
Lemma lem8412034 {A B C P : Type'} (s : type115 A B P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5412 A B C P s t _115320 c clauses) = (term5430 A B C P s t _115320 c clauses).
Proof. exact (EQ_MP (@lem8412033 A B C P s t _115320 c clauses) (@lem8412014 A B C P s t _115320 c clauses)). Qed.
Lemma lem8412036 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8412037 {A B C P : Type'} (P' : type863 A B C P) (Q : Prop) : (term5399 A B C P P' Q) = (term5400 A B C P P' Q).
Proof. exact (@lem8412036 (type1490 A B C P) P' Q). Qed.
Lemma lem8412038 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5431 A B C P s s' t _115320 c clauses) = (term5432 A B C P s s' t _115320 c clauses).
Proof. exact (@lem8412037 A B C P (term5351 A B C P clauses s s' t c) (term940 A B C P _115320 c clauses)). Qed.
Lemma lem8412039 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term5433 A B C P clauses s s' t c t') = (term5345 A B C P clauses s s' t t' c).
Proof. exact (eq_refl (term5433 A B C P clauses s s' t c t')). Qed.
Lemma lem8412040 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term5434 A B C P clauses s s' t c) = (term5351 A B C P clauses s s' t c).
Proof. exact (fun_ext (fun t' : type1490 A B C P => @lem8412039 A B C P clauses s s' t t' c)). Qed.
Lemma lem8412041 {A B C P : Type'} : (@ex (C -> ((A -> B) -> P -> B) -> B)) = (@ex (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8412042 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term5435 A B C P clauses s s' t c) = (term5352 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8412041 A B C P) (@lem8412040 A B C P clauses s s' t c)). Qed.
Lemma lem8412043 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8412044 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (c : C) : (term5436 A B C P clauses s s' t c) = (term5425 A B C P clauses s s' t c).
Proof. exact (MK_COMB (@lem8412043) (@lem8412042 A B C P clauses s s' t c)). Qed.
Lemma lem8412045 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term940 A B C P _115320 c clauses) = (term940 A B C P _115320 c clauses).
Proof. exact (eq_refl (term940 A B C P _115320 c clauses)). Qed.
Lemma lem8412046 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5431 A B C P s s' t _115320 c clauses) = (term5427 A B C P s s' t _115320 c clauses).
Proof. exact (MK_COMB (@lem8412044 A B C P clauses s s' t c) (@lem8412045 A B C P _115320 c clauses)). Qed.
Lemma lem8412047 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8412048 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5437 A B C P s s' t _115320 c clauses) = (term5438 A B C P s s' t _115320 c clauses).
Proof. exact (MK_COMB (@lem8412047) (@lem8412046 A B C P s s' t _115320 c clauses)). Qed.
Lemma lem8412049 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term5433 A B C P clauses s s' t c t') = (term5345 A B C P clauses s s' t t' c).
Proof. exact (eq_refl (term5433 A B C P clauses s s' t c t')). Qed.
Lemma lem8412050 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8412051 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term5439 A B C P clauses s s' t c t') = (term5440 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8412050) (@lem8412049 A B C P clauses s s' t t' c)). Qed.
Lemma lem8412052 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term940 A B C P _115320 c clauses) = (term940 A B C P _115320 c clauses).
Proof. exact (eq_refl (term940 A B C P _115320 c clauses)). Qed.
Lemma lem8412053 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5441 A B C P s s' t t' _115320 c clauses) = (term5442 A B C P s s' t t' _115320 c clauses).
Proof. exact (MK_COMB (@lem8412051 A B C P clauses s s' t t' c) (@lem8412052 A B C P _115320 c clauses)). Qed.
Lemma lem8412054 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5443 A B C P s s' t _115320 c clauses) = (term5444 A B C P s s' t _115320 c clauses).
Proof. exact (fun_ext (fun t' : type1490 A B C P => @lem8412053 A B C P s s' t t' _115320 c clauses)). Qed.
Lemma lem8412055 {A B C P : Type'} : (@ex (C -> ((A -> B) -> P -> B) -> B)) = (@ex (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8412056 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5432 A B C P s s' t _115320 c clauses) = (term5445 A B C P s s' t _115320 c clauses).
Proof. exact (MK_COMB (@lem8412055 A B C P) (@lem8412054 A B C P s s' t _115320 c clauses)). Qed.
Lemma lem8412057 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : ((term5431 A B C P s s' t _115320 c clauses) = (term5432 A B C P s s' t _115320 c clauses)) = ((term5427 A B C P s s' t _115320 c clauses) = (term5445 A B C P s s' t _115320 c clauses)).
Proof. exact (MK_COMB (@lem8412048 A B C P s s' t _115320 c clauses) (@lem8412056 A B C P s s' t _115320 c clauses)). Qed.
Lemma lem8412058 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5427 A B C P s s' t _115320 c clauses) = (term5445 A B C P s s' t _115320 c clauses).
Proof. exact (EQ_MP (@lem8412057 A B C P s s' t _115320 c clauses) (@lem8412038 A B C P s s' t _115320 c clauses)). Qed.
Lemma lem8412060 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8412061 {A B P : Type'} (P' : type116 A B P) (Q : Prop) : (term4004 A B P P' Q) = (term4005 A B P P' Q).
Proof. exact (@lem8412060 (type558 A B P) P' Q). Qed.
Lemma lem8412062 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5446 A B C P s s' t t' _115320 c clauses) = (term5447 A B C P s s' t t' _115320 c clauses).
Proof. exact (@lem8412061 A B P (term5344 A B C P clauses s s' t t' c) (term940 A B C P _115320 c clauses)). Qed.
Lemma lem8412063 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term5448 A B C P clauses s s' t t' c x) = (term5338 A B C P clauses s s' t x t' c).
Proof. exact (eq_refl (term5448 A B C P clauses s s' t t' c x)). Qed.
Lemma lem8412064 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term5449 A B C P clauses s s' t t' c) = (term5344 A B C P clauses s s' t t' c).
Proof. exact (fun_ext (fun x : type558 A B P => @lem8412063 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8412065 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8412066 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term5450 A B C P clauses s s' t t' c) = (term5345 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8412065 A B P) (@lem8412064 A B C P clauses s s' t t' c)). Qed.
Lemma lem8412067 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8412068 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (c : C) : (term5451 A B C P clauses s s' t t' c) = (term5440 A B C P clauses s s' t t' c).
Proof. exact (MK_COMB (@lem8412067) (@lem8412066 A B C P clauses s s' t t' c)). Qed.
Lemma lem8412069 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term940 A B C P _115320 c clauses) = (term940 A B C P _115320 c clauses).
Proof. exact (eq_refl (term940 A B C P _115320 c clauses)). Qed.
Lemma lem8412070 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5446 A B C P s s' t t' _115320 c clauses) = (term5442 A B C P s s' t t' _115320 c clauses).
Proof. exact (MK_COMB (@lem8412068 A B C P clauses s s' t t' c) (@lem8412069 A B C P _115320 c clauses)). Qed.
Lemma lem8412071 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8412072 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5452 A B C P s s' t t' _115320 c clauses) = (term5453 A B C P s s' t t' _115320 c clauses).
Proof. exact (MK_COMB (@lem8412071) (@lem8412070 A B C P s s' t t' _115320 c clauses)). Qed.
Lemma lem8412073 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term5448 A B C P clauses s s' t t' c x) = (term5338 A B C P clauses s s' t x t' c).
Proof. exact (eq_refl (term5448 A B C P clauses s s' t t' c x)). Qed.
Lemma lem8412074 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8412075 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term5454 A B C P clauses s s' t t' c x) = (term5455 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8412074) (@lem8412073 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8412076 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term940 A B C P _115320 c clauses) = (term940 A B C P _115320 c clauses).
Proof. exact (eq_refl (term940 A B C P _115320 c clauses)). Qed.
Lemma lem8412077 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5456 A B C P s s' t t' x _115320 c clauses) = (term5457 A B C P s s' t x t' _115320 c clauses).
Proof. exact (MK_COMB (@lem8412075 A B C P clauses s s' t x t' c) (@lem8412076 A B C P _115320 c clauses)). Qed.
Lemma lem8412078 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5458 A B C P s s' t t' _115320 c clauses) = (term5459 A B C P s s' t t' _115320 c clauses).
Proof. exact (fun_ext (fun x : type558 A B P => @lem8412077 A B C P s s' t x t' _115320 c clauses)). Qed.
Lemma lem8412079 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8412080 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5447 A B C P s s' t t' _115320 c clauses) = (term5460 A B C P s s' t t' _115320 c clauses).
Proof. exact (MK_COMB (@lem8412079 A B P) (@lem8412078 A B C P s s' t t' _115320 c clauses)). Qed.
Lemma lem8412081 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : ((term5446 A B C P s s' t t' _115320 c clauses) = (term5447 A B C P s s' t t' _115320 c clauses)) = ((term5442 A B C P s s' t t' _115320 c clauses) = (term5460 A B C P s s' t t' _115320 c clauses)).
Proof. exact (MK_COMB (@lem8412072 A B C P s s' t t' _115320 c clauses) (@lem8412080 A B C P s s' t t' _115320 c clauses)). Qed.
Lemma lem8412082 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5442 A B C P s s' t t' _115320 c clauses) = (term5460 A B C P s s' t t' _115320 c clauses).
Proof. exact (EQ_MP (@lem8412081 A B C P s s' t t' _115320 c clauses) (@lem8412062 A B C P s s' t t' _115320 c clauses)). Qed.
Lemma lem8412084 {A : Type'} (P : A -> Prop) (Q : Prop) : (term3069 A P Q) = (term3070 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8412085 {A B P : Type'} (P' : type116 A B P) (Q : Prop) : (term4004 A B P P' Q) = (term4005 A B P P' Q).
Proof. exact (@lem8412084 (type558 A B P) P' Q). Qed.
Lemma lem8412086 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5461 A B C P s s' t x t' _115320 c clauses) = (term5462 A B C P s s' t x t' _115320 c clauses).
Proof. exact (@lem8412085 A B P (term5337 A B C P clauses s s' t x t' c) (term940 A B C P _115320 c clauses)). Qed.
Lemma lem8412087 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) (y : type558 A B P) : (term5463 A B C P clauses s s' t x t' c y) = (term5330 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term5463 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8412088 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term5464 A B C P clauses s s' t x t' c) = (term5337 A B C P clauses s s' t x t' c).
Proof. exact (fun_ext (fun y : type558 A B P => @lem8412087 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8412089 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8412090 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term5465 A B C P clauses s s' t x t' c) = (term5338 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8412089 A B P) (@lem8412088 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8412091 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8412092 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) : (term5466 A B C P clauses s s' t x t' c) = (term5455 A B C P clauses s s' t x t' c).
Proof. exact (MK_COMB (@lem8412091) (@lem8412090 A B C P clauses s s' t x t' c)). Qed.
Lemma lem8412093 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term940 A B C P _115320 c clauses) = (term940 A B C P _115320 c clauses).
Proof. exact (eq_refl (term940 A B C P _115320 c clauses)). Qed.
Lemma lem8412094 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5461 A B C P s s' t x t' _115320 c clauses) = (term5457 A B C P s s' t x t' _115320 c clauses).
Proof. exact (MK_COMB (@lem8412092 A B C P clauses s s' t x t' c) (@lem8412093 A B C P _115320 c clauses)). Qed.
Lemma lem8412095 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8412096 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5467 A B C P s s' t x t' _115320 c clauses) = (term5468 A B C P s s' t x t' _115320 c clauses).
Proof. exact (MK_COMB (@lem8412095) (@lem8412094 A B C P s s' t x t' _115320 c clauses)). Qed.
Lemma lem8412097 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) (y : type558 A B P) : (term5463 A B C P clauses s s' t x t' c y) = (term5330 A B C P clauses s s' t x t' c y).
Proof. exact (eq_refl (term5463 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8412098 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8412099 {A B C P : Type'} (clauses : type1629 A B C P) (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (c : C) (y : type558 A B P) : (term5469 A B C P clauses s s' t x t' c y) = (term5470 A B C P clauses s s' t x t' c y).
Proof. exact (MK_COMB (@lem8412098) (@lem8412097 A B C P clauses s s' t x t' c y)). Qed.
Lemma lem8412100 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term940 A B C P _115320 c clauses) = (term940 A B C P _115320 c clauses).
Proof. exact (eq_refl (term940 A B C P _115320 c clauses)). Qed.
Lemma lem8412101 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (y : type558 A B P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5471 A B C P s s' t x t' y _115320 c clauses) = (term5472 A B C P s s' t x t' y _115320 c clauses).
Proof. exact (MK_COMB (@lem8412099 A B C P clauses s s' t x t' c y) (@lem8412100 A B C P _115320 c clauses)). Qed.
Lemma lem8412102 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5473 A B C P s s' t x t' _115320 c clauses) = (term5474 A B C P s s' t x t' _115320 c clauses).
Proof. exact (fun_ext (fun y : type558 A B P => @lem8412101 A B C P s s' t x t' y _115320 c clauses)). Qed.
Lemma lem8412103 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8412104 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5462 A B C P s s' t x t' _115320 c clauses) = (term5475 A B C P s s' t x t' _115320 c clauses).
Proof. exact (MK_COMB (@lem8412103 A B P) (@lem8412102 A B C P s s' t x t' _115320 c clauses)). Qed.
Lemma lem8412105 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : ((term5461 A B C P s s' t x t' _115320 c clauses) = (term5462 A B C P s s' t x t' _115320 c clauses)) = ((term5457 A B C P s s' t x t' _115320 c clauses) = (term5475 A B C P s s' t x t' _115320 c clauses)).
Proof. exact (MK_COMB (@lem8412096 A B C P s s' t x t' _115320 c clauses) (@lem8412104 A B C P s s' t x t' _115320 c clauses)). Qed.
Lemma lem8412106 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (x : type558 A B P) (t' : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5457 A B C P s s' t x t' _115320 c clauses) = (term5475 A B C P s s' t x t' _115320 c clauses).
Proof. exact (EQ_MP (@lem8412105 A B C P s s' t x t' _115320 c clauses) (@lem8412086 A B C P s s' t x t' _115320 c clauses)). Qed.
Lemma lem8412107 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5459 A B C P s s' t t' _115320 c clauses) = (term5476 A B C P s s' t t' _115320 c clauses).
Proof. exact (fun_ext (fun x : type558 A B P => @lem8412106 A B C P s s' t x t' _115320 c clauses)). Qed.
Lemma lem8412108 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8412109 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5460 A B C P s s' t t' _115320 c clauses) = (term5477 A B C P s s' t t' _115320 c clauses).
Proof. exact (MK_COMB (@lem8412108 A B P) (@lem8412107 A B C P s s' t t' _115320 c clauses)). Qed.
Lemma lem8412110 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (t' : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5442 A B C P s s' t t' _115320 c clauses) = (term5477 A B C P s s' t t' _115320 c clauses).
Proof. exact (TRANS (@lem8412082 A B C P s s' t t' _115320 c clauses) (@lem8412109 A B C P s s' t t' _115320 c clauses)). Qed.
Lemma lem8412111 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5444 A B C P s s' t _115320 c clauses) = (term5478 A B C P s s' t _115320 c clauses).
Proof. exact (fun_ext (fun t' : type1490 A B C P => @lem8412110 A B C P s s' t t' _115320 c clauses)). Qed.
Lemma lem8412112 {A B C P : Type'} : (@ex (C -> ((A -> B) -> P -> B) -> B)) = (@ex (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8412113 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5445 A B C P s s' t _115320 c clauses) = (term5479 A B C P s s' t _115320 c clauses).
Proof. exact (MK_COMB (@lem8412112 A B C P) (@lem8412111 A B C P s s' t _115320 c clauses)). Qed.
Lemma lem8412114 {A B C P : Type'} (s : type115 A B P) (s' : type115 A B P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5427 A B C P s s' t _115320 c clauses) = (term5479 A B C P s s' t _115320 c clauses).
Proof. exact (TRANS (@lem8412058 A B C P s s' t _115320 c clauses) (@lem8412113 A B C P s s' t _115320 c clauses)). Qed.
Lemma lem8412115 {A B C P : Type'} (s : type115 A B P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5429 A B C P s t _115320 c clauses) = (term5480 A B C P s t _115320 c clauses).
Proof. exact (fun_ext (fun s' : type115 A B P => @lem8412114 A B C P s s' t _115320 c clauses)). Qed.
Lemma lem8412116 {A B P : Type'} : (@ex (((A -> B) -> P -> B) -> A)) = (@ex (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8412117 {A B C P : Type'} (s : type115 A B P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5430 A B C P s t _115320 c clauses) = (term5481 A B C P s t _115320 c clauses).
Proof. exact (MK_COMB (@lem8412116 A B P) (@lem8412115 A B C P s t _115320 c clauses)). Qed.
Lemma lem8412118 {A B C P : Type'} (s : type115 A B P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5412 A B C P s t _115320 c clauses) = (term5481 A B C P s t _115320 c clauses).
Proof. exact (TRANS (@lem8412034 A B C P s t _115320 c clauses) (@lem8412117 A B C P s t _115320 c clauses)). Qed.
Lemma lem8412119 {A B C P : Type'} (s : type115 A B P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5414 A B C P s _115320 c clauses) = (term5482 A B C P s _115320 c clauses).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8412118 A B C P s t _115320 c clauses)). Qed.
Lemma lem8412120 {A B C P : Type'} : (@ex (C -> ((A -> B) -> P -> B) -> B)) = (@ex (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8412121 {A B C P : Type'} (s : type115 A B P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5415 A B C P s _115320 c clauses) = (term5483 A B C P s _115320 c clauses).
Proof. exact (MK_COMB (@lem8412120 A B C P) (@lem8412119 A B C P s _115320 c clauses)). Qed.
Lemma lem8412122 {A B C P : Type'} (s : type115 A B P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5395 A B C P s _115320 c clauses) = (term5483 A B C P s _115320 c clauses).
Proof. exact (TRANS (@lem8412010 A B C P s _115320 c clauses) (@lem8412121 A B C P s _115320 c clauses)). Qed.
Lemma lem8412123 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5397 A B C P _115320 c clauses) = (term5484 A B C P _115320 c clauses).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8412122 A B C P s _115320 c clauses)). Qed.
Lemma lem8412124 {A B P : Type'} : (@ex (((A -> B) -> P -> B) -> A)) = (@ex (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8412125 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5398 A B C P _115320 c clauses) = (term5485 A B C P _115320 c clauses).
Proof. exact (MK_COMB (@lem8412124 A B P) (@lem8412123 A B C P _115320 c clauses)). Qed.
Lemma lem8412126 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5377 A B C P _115320 c clauses) = (term5485 A B C P _115320 c clauses).
Proof. exact (TRANS (@lem8411986 A B C P _115320 c clauses) (@lem8412125 A B C P _115320 c clauses)). Qed.
Lemma lem8412127 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5378 A B C P _115320 clauses) = (term5486 A B C P _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8412126 A B C P _115320 c clauses)). Qed.
Lemma lem8412128 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8412129 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5379 A B C P _115320 clauses) = (term5487 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8412128 C) (@lem8412127 A B C P _115320 clauses)). Qed.
Lemma lem8412131 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8412132 {A B C P : Type'} (P' : type1480 A B C P) : (term5488 A B C P P') = (term5489 A B C P P').
Proof. exact (@lem8412131 C (type115 A B P) P'). Qed.
Lemma lem8412133 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5490 A B C P _115320 clauses) = (term5491 A B C P _115320 clauses).
Proof. exact (@lem8412132 A B C P (term5492 A B C P _115320 clauses)). Qed.
Lemma lem8412134 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5493 A B C P _115320 clauses c) = (term5484 A B C P _115320 c clauses).
Proof. exact (eq_refl (term5493 A B C P _115320 clauses c)). Qed.
Lemma lem8412135 {A B P : Type'} (s : type115 A B P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8412136 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) (s : type115 A B P) : (term5494 A B C P _115320 clauses c s) = (term5495 A B C P _115320 c clauses s).
Proof. exact (MK_COMB (@lem8412134 A B C P _115320 c clauses) (@lem8412135 A B P s)). Qed.
Lemma lem8412137 {A B C P : Type'} (s : type115 A B P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5495 A B C P _115320 c clauses s) = (term5483 A B C P s _115320 c clauses).
Proof. exact (eq_refl (term5495 A B C P _115320 c clauses s)). Qed.
Lemma lem8412138 {A B C P : Type'} (s : type115 A B P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5494 A B C P _115320 clauses c s) = (term5483 A B C P s _115320 c clauses).
Proof. exact (TRANS (@lem8412136 A B C P _115320 c clauses s) (@lem8412137 A B C P s _115320 c clauses)). Qed.
Lemma lem8412139 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5496 A B C P _115320 clauses c) = (term5484 A B C P _115320 c clauses).
Proof. exact (fun_ext (fun s : type115 A B P => @lem8412138 A B C P s _115320 c clauses)). Qed.
Lemma lem8412140 {A B P : Type'} : (@ex (((A -> B) -> P -> B) -> A)) = (@ex (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8412141 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5497 A B C P _115320 clauses c) = (term5485 A B C P _115320 c clauses).
Proof. exact (MK_COMB (@lem8412140 A B P) (@lem8412139 A B C P _115320 c clauses)). Qed.
Lemma lem8412142 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5498 A B C P _115320 clauses) = (term5486 A B C P _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8412141 A B C P _115320 c clauses)). Qed.
Lemma lem8412143 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8412144 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5490 A B C P _115320 clauses) = (term5487 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8412143 C) (@lem8412142 A B C P _115320 clauses)). Qed.
Lemma lem8412145 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8412146 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5499 A B C P _115320 clauses) = (term5500 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8412145) (@lem8412144 A B C P _115320 clauses)). Qed.
Lemma lem8412147 {A B C P : Type'} (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5493 A B C P _115320 clauses c) = (term5484 A B C P _115320 c clauses).
Proof. exact (eq_refl (term5493 A B C P _115320 clauses c)). Qed.
Lemma lem8412148 {A B C P : Type'} (s : type1489 A B C P) (c : C) : (s c) = (s c).
Proof. exact (eq_refl (s c)). Qed.
Lemma lem8412149 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1489 A B C P) (c : C) : (term5501 A B C P _115320 clauses s c) = (term5502 A B C P _115320 clauses s c).
Proof. exact (MK_COMB (@lem8412147 A B C P _115320 c clauses) (@lem8412148 A B C P s c)). Qed.
Lemma lem8412150 {A B C P : Type'} (s : type1489 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5502 A B C P _115320 clauses s c) = (term5503 A B C P s _115320 c clauses).
Proof. exact (eq_refl (term5502 A B C P _115320 clauses s c)). Qed.
Lemma lem8412151 {A B C P : Type'} (s : type1489 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5501 A B C P _115320 clauses s c) = (term5503 A B C P s _115320 c clauses).
Proof. exact (TRANS (@lem8412149 A B C P _115320 clauses s c) (@lem8412150 A B C P s _115320 c clauses)). Qed.
Lemma lem8412152 {A B C P : Type'} (s : type1489 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5504 A B C P _115320 clauses s) = (term5505 A B C P s _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8412151 A B C P s _115320 c clauses)). Qed.
Lemma lem8412153 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8412154 {A B C P : Type'} (s : type1489 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5506 A B C P _115320 clauses s) = (term5507 A B C P s _115320 clauses).
Proof. exact (MK_COMB (@lem8412153 C) (@lem8412152 A B C P s _115320 clauses)). Qed.
Lemma lem8412155 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5508 A B C P _115320 clauses) = (term5509 A B C P _115320 clauses).
Proof. exact (fun_ext (fun s : type1489 A B C P => @lem8412154 A B C P s _115320 clauses)). Qed.
Lemma lem8412156 {A B C P : Type'} : (@ex (C -> ((A -> B) -> P -> B) -> A)) = (@ex (C -> ((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (C -> ((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8412157 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5491 A B C P _115320 clauses) = (term5510 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8412156 A B C P) (@lem8412155 A B C P _115320 clauses)). Qed.
Lemma lem8412158 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : ((term5490 A B C P _115320 clauses) = (term5491 A B C P _115320 clauses)) = ((term5487 A B C P _115320 clauses) = (term5510 A B C P _115320 clauses)).
Proof. exact (MK_COMB (@lem8412146 A B C P _115320 clauses) (@lem8412157 A B C P _115320 clauses)). Qed.
Lemma lem8412159 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5487 A B C P _115320 clauses) = (term5510 A B C P _115320 clauses).
Proof. exact (EQ_MP (@lem8412158 A B C P _115320 clauses) (@lem8412133 A B C P _115320 clauses)). Qed.
Lemma lem8412161 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8412162 {A B C P : Type'} (P' : type1509 A B C P) : (term5511 A B C P P') = (term5512 A B C P P').
Proof. exact (@lem8412161 C (type1490 A B C P) P'). Qed.
Lemma lem8412163 {A B C P : Type'} (s : type1489 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5513 A B C P s _115320 clauses) = (term5514 A B C P s _115320 clauses).
Proof. exact (@lem8412162 A B C P (term5515 A B C P s _115320 clauses)). Qed.
Lemma lem8412164 {A B C P : Type'} (s : type1489 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5516 A B C P s _115320 clauses c) = (term5517 A B C P s _115320 c clauses).
Proof. exact (eq_refl (term5516 A B C P s _115320 clauses c)). Qed.
Lemma lem8412165 {A B C P : Type'} (t : type1490 A B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8412166 {A B C P : Type'} (s : type1489 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) (t : type1490 A B C P) : (term5518 A B C P s _115320 clauses c t) = (term5519 A B C P s _115320 c clauses t).
Proof. exact (MK_COMB (@lem8412164 A B C P s _115320 c clauses) (@lem8412165 A B C P t)). Qed.
Lemma lem8412167 {A B C P : Type'} (s : type1489 A B C P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5519 A B C P s _115320 c clauses t) = (term5520 A B C P s t _115320 c clauses).
Proof. exact (eq_refl (term5519 A B C P s _115320 c clauses t)). Qed.
Lemma lem8412168 {A B C P : Type'} (s : type1489 A B C P) (t : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5518 A B C P s _115320 clauses c t) = (term5520 A B C P s t _115320 c clauses).
Proof. exact (TRANS (@lem8412166 A B C P s _115320 c clauses t) (@lem8412167 A B C P s t _115320 c clauses)). Qed.
Lemma lem8412169 {A B C P : Type'} (s : type1489 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5521 A B C P s _115320 clauses c) = (term5517 A B C P s _115320 c clauses).
Proof. exact (fun_ext (fun t : type1490 A B C P => @lem8412168 A B C P s t _115320 c clauses)). Qed.
Lemma lem8412170 {A B C P : Type'} : (@ex (C -> ((A -> B) -> P -> B) -> B)) = (@ex (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8412171 {A B C P : Type'} (s : type1489 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5522 A B C P s _115320 clauses c) = (term5503 A B C P s _115320 c clauses).
Proof. exact (MK_COMB (@lem8412170 A B C P) (@lem8412169 A B C P s _115320 c clauses)). Qed.
Lemma lem8412172 {A B C P : Type'} (s : type1489 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5523 A B C P s _115320 clauses) = (term5505 A B C P s _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8412171 A B C P s _115320 c clauses)). Qed.
Lemma lem8412173 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8412174 {A B C P : Type'} (s : type1489 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5513 A B C P s _115320 clauses) = (term5507 A B C P s _115320 clauses).
Proof. exact (MK_COMB (@lem8412173 C) (@lem8412172 A B C P s _115320 clauses)). Qed.
Lemma lem8412175 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8412176 {A B C P : Type'} (s : type1489 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5524 A B C P s _115320 clauses) = (term5525 A B C P s _115320 clauses).
Proof. exact (MK_COMB (@lem8412175) (@lem8412174 A B C P s _115320 clauses)). Qed.
Lemma lem8412177 {A B C P : Type'} (s : type1489 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5516 A B C P s _115320 clauses c) = (term5517 A B C P s _115320 c clauses).
Proof. exact (eq_refl (term5516 A B C P s _115320 clauses c)). Qed.
Lemma lem8412178 {A B C P : Type'} (t : type1519 A B C P) (c : C) : (t c) = (t c).
Proof. exact (eq_refl (t c)). Qed.
Lemma lem8412179 {A B C P : Type'} (s : type1489 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (t : type1519 A B C P) (c : C) : (term5526 A B C P s _115320 clauses t c) = (term5527 A B C P s _115320 clauses t c).
Proof. exact (MK_COMB (@lem8412177 A B C P s _115320 c clauses) (@lem8412178 A B C P t c)). Qed.
Lemma lem8412180 {A B C P : Type'} (s : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5527 A B C P s _115320 clauses t c) = (term5528 A B C P s t _115320 c clauses).
Proof. exact (eq_refl (term5527 A B C P s _115320 clauses t c)). Qed.
Lemma lem8412181 {A B C P : Type'} (s : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5526 A B C P s _115320 clauses t c) = (term5528 A B C P s t _115320 c clauses).
Proof. exact (TRANS (@lem8412179 A B C P s _115320 clauses t c) (@lem8412180 A B C P s t _115320 c clauses)). Qed.
Lemma lem8412182 {A B C P : Type'} (s : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5529 A B C P s _115320 clauses t) = (term5530 A B C P s t _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8412181 A B C P s t _115320 c clauses)). Qed.
Lemma lem8412183 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8412184 {A B C P : Type'} (s : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5531 A B C P s _115320 clauses t) = (term5532 A B C P s t _115320 clauses).
Proof. exact (MK_COMB (@lem8412183 C) (@lem8412182 A B C P s t _115320 clauses)). Qed.
Lemma lem8412185 {A B C P : Type'} (s : type1489 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5533 A B C P s _115320 clauses) = (term5534 A B C P s _115320 clauses).
Proof. exact (fun_ext (fun t : type1519 A B C P => @lem8412184 A B C P s t _115320 clauses)). Qed.
Lemma lem8412186 {A B C P : Type'} : (@ex (C -> C -> ((A -> B) -> P -> B) -> B)) = (@ex (C -> C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8412187 {A B C P : Type'} (s : type1489 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5514 A B C P s _115320 clauses) = (term5535 A B C P s _115320 clauses).
Proof. exact (MK_COMB (@lem8412186 A B C P) (@lem8412185 A B C P s _115320 clauses)). Qed.
Lemma lem8412188 {A B C P : Type'} (s : type1489 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : ((term5513 A B C P s _115320 clauses) = (term5514 A B C P s _115320 clauses)) = ((term5507 A B C P s _115320 clauses) = (term5535 A B C P s _115320 clauses)).
Proof. exact (MK_COMB (@lem8412176 A B C P s _115320 clauses) (@lem8412187 A B C P s _115320 clauses)). Qed.
Lemma lem8412189 {A B C P : Type'} (s : type1489 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5507 A B C P s _115320 clauses) = (term5535 A B C P s _115320 clauses).
Proof. exact (EQ_MP (@lem8412188 A B C P s _115320 clauses) (@lem8412163 A B C P s _115320 clauses)). Qed.
Lemma lem8412191 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8412192 {A B C P : Type'} (P' : type1480 A B C P) : (term5488 A B C P P') = (term5489 A B C P P').
Proof. exact (@lem8412191 C (type115 A B P) P'). Qed.
Lemma lem8412193 {A B C P : Type'} (s : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5536 A B C P s t _115320 clauses) = (term5537 A B C P s t _115320 clauses).
Proof. exact (@lem8412192 A B C P (term5538 A B C P s t _115320 clauses)). Qed.
Lemma lem8412194 {A B C P : Type'} (s : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5539 A B C P s t _115320 clauses c) = (term5540 A B C P s t _115320 c clauses).
Proof. exact (eq_refl (term5539 A B C P s t _115320 clauses c)). Qed.
Lemma lem8412195 {A B P : Type'} (s' : type115 A B P) : s' = s'.
Proof. exact (eq_refl s'). Qed.
Lemma lem8412196 {A B C P : Type'} (s : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) (s' : type115 A B P) : (term5541 A B C P s t _115320 clauses c s') = (term5542 A B C P s t _115320 c clauses s').
Proof. exact (MK_COMB (@lem8412194 A B C P s t _115320 c clauses) (@lem8412195 A B P s')). Qed.
Lemma lem8412197 {A B C P : Type'} (s : type1489 A B C P) (s' : type115 A B P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5542 A B C P s t _115320 c clauses s') = (term5543 A B C P s s' t _115320 c clauses).
Proof. exact (eq_refl (term5542 A B C P s t _115320 c clauses s')). Qed.
Lemma lem8412198 {A B C P : Type'} (s : type1489 A B C P) (s' : type115 A B P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5541 A B C P s t _115320 clauses c s') = (term5543 A B C P s s' t _115320 c clauses).
Proof. exact (TRANS (@lem8412196 A B C P s t _115320 c clauses s') (@lem8412197 A B C P s s' t _115320 c clauses)). Qed.
Lemma lem8412199 {A B C P : Type'} (s : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5544 A B C P s t _115320 clauses c) = (term5540 A B C P s t _115320 c clauses).
Proof. exact (fun_ext (fun s' : type115 A B P => @lem8412198 A B C P s s' t _115320 c clauses)). Qed.
Lemma lem8412200 {A B P : Type'} : (@ex (((A -> B) -> P -> B) -> A)) = (@ex (((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8412201 {A B C P : Type'} (s : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5545 A B C P s t _115320 clauses c) = (term5528 A B C P s t _115320 c clauses).
Proof. exact (MK_COMB (@lem8412200 A B P) (@lem8412199 A B C P s t _115320 c clauses)). Qed.
Lemma lem8412202 {A B C P : Type'} (s : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5546 A B C P s t _115320 clauses) = (term5530 A B C P s t _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8412201 A B C P s t _115320 c clauses)). Qed.
Lemma lem8412203 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8412204 {A B C P : Type'} (s : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5536 A B C P s t _115320 clauses) = (term5532 A B C P s t _115320 clauses).
Proof. exact (MK_COMB (@lem8412203 C) (@lem8412202 A B C P s t _115320 clauses)). Qed.
Lemma lem8412205 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8412206 {A B C P : Type'} (s : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5547 A B C P s t _115320 clauses) = (term5548 A B C P s t _115320 clauses).
Proof. exact (MK_COMB (@lem8412205) (@lem8412204 A B C P s t _115320 clauses)). Qed.
Lemma lem8412207 {A B C P : Type'} (s : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5539 A B C P s t _115320 clauses c) = (term5540 A B C P s t _115320 c clauses).
Proof. exact (eq_refl (term5539 A B C P s t _115320 clauses c)). Qed.
Lemma lem8412208 {A B C P : Type'} (s' : type1489 A B C P) (c : C) : (s' c) = (s' c).
Proof. exact (eq_refl (s' c)). Qed.
Lemma lem8412209 {A B C P : Type'} (s : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s' : type1489 A B C P) (c : C) : (term5549 A B C P s t _115320 clauses s' c) = (term5550 A B C P s t _115320 clauses s' c).
Proof. exact (MK_COMB (@lem8412207 A B C P s t _115320 c clauses) (@lem8412208 A B C P s' c)). Qed.
Lemma lem8412210 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5550 A B C P s t _115320 clauses s' c) = (term5551 A B C P s s' t _115320 c clauses).
Proof. exact (eq_refl (term5550 A B C P s t _115320 clauses s' c)). Qed.
Lemma lem8412211 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5549 A B C P s t _115320 clauses s' c) = (term5551 A B C P s s' t _115320 c clauses).
Proof. exact (TRANS (@lem8412209 A B C P s t _115320 clauses s' c) (@lem8412210 A B C P s s' t _115320 c clauses)). Qed.
Lemma lem8412212 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5552 A B C P s t _115320 clauses s') = (term5553 A B C P s s' t _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8412211 A B C P s s' t _115320 c clauses)). Qed.
Lemma lem8412213 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8412214 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5554 A B C P s t _115320 clauses s') = (term5555 A B C P s s' t _115320 clauses).
Proof. exact (MK_COMB (@lem8412213 C) (@lem8412212 A B C P s s' t _115320 clauses)). Qed.
Lemma lem8412215 {A B C P : Type'} (s : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5556 A B C P s t _115320 clauses) = (term5557 A B C P s t _115320 clauses).
Proof. exact (fun_ext (fun s' : type1489 A B C P => @lem8412214 A B C P s s' t _115320 clauses)). Qed.
Lemma lem8412216 {A B C P : Type'} : (@ex (C -> ((A -> B) -> P -> B) -> A)) = (@ex (C -> ((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (C -> ((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8412217 {A B C P : Type'} (s : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5537 A B C P s t _115320 clauses) = (term5558 A B C P s t _115320 clauses).
Proof. exact (MK_COMB (@lem8412216 A B C P) (@lem8412215 A B C P s t _115320 clauses)). Qed.
Lemma lem8412218 {A B C P : Type'} (s : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : ((term5536 A B C P s t _115320 clauses) = (term5537 A B C P s t _115320 clauses)) = ((term5532 A B C P s t _115320 clauses) = (term5558 A B C P s t _115320 clauses)).
Proof. exact (MK_COMB (@lem8412206 A B C P s t _115320 clauses) (@lem8412217 A B C P s t _115320 clauses)). Qed.
Lemma lem8412219 {A B C P : Type'} (s : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5532 A B C P s t _115320 clauses) = (term5558 A B C P s t _115320 clauses).
Proof. exact (EQ_MP (@lem8412218 A B C P s t _115320 clauses) (@lem8412193 A B C P s t _115320 clauses)). Qed.
Lemma lem8412221 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8412222 {A B C P : Type'} (P' : type1509 A B C P) : (term5511 A B C P P') = (term5512 A B C P P').
Proof. exact (@lem8412221 C (type1490 A B C P) P'). Qed.
Lemma lem8412223 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5559 A B C P s s' t _115320 clauses) = (term5560 A B C P s s' t _115320 clauses).
Proof. exact (@lem8412222 A B C P (term5561 A B C P s s' t _115320 clauses)). Qed.
Lemma lem8412224 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5562 A B C P s s' t _115320 clauses c) = (term5563 A B C P s s' t _115320 c clauses).
Proof. exact (eq_refl (term5562 A B C P s s' t _115320 clauses c)). Qed.
Lemma lem8412225 {A B C P : Type'} (t' : type1490 A B C P) : t' = t'.
Proof. exact (eq_refl t'). Qed.
Lemma lem8412226 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) (t' : type1490 A B C P) : (term5564 A B C P s s' t _115320 clauses c t') = (term5565 A B C P s s' t _115320 c clauses t').
Proof. exact (MK_COMB (@lem8412224 A B C P s s' t _115320 c clauses) (@lem8412225 A B C P t')). Qed.
Lemma lem8412227 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (t' : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5565 A B C P s s' t _115320 c clauses t') = (term5566 A B C P s s' t t' _115320 c clauses).
Proof. exact (eq_refl (term5565 A B C P s s' t _115320 c clauses t')). Qed.
Lemma lem8412228 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (t' : type1490 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5564 A B C P s s' t _115320 clauses c t') = (term5566 A B C P s s' t t' _115320 c clauses).
Proof. exact (TRANS (@lem8412226 A B C P s s' t _115320 c clauses t') (@lem8412227 A B C P s s' t t' _115320 c clauses)). Qed.
Lemma lem8412229 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5567 A B C P s s' t _115320 clauses c) = (term5563 A B C P s s' t _115320 c clauses).
Proof. exact (fun_ext (fun t' : type1490 A B C P => @lem8412228 A B C P s s' t t' _115320 c clauses)). Qed.
Lemma lem8412230 {A B C P : Type'} : (@ex (C -> ((A -> B) -> P -> B) -> B)) = (@ex (C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8412231 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5568 A B C P s s' t _115320 clauses c) = (term5551 A B C P s s' t _115320 c clauses).
Proof. exact (MK_COMB (@lem8412230 A B C P) (@lem8412229 A B C P s s' t _115320 c clauses)). Qed.
Lemma lem8412232 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5569 A B C P s s' t _115320 clauses) = (term5553 A B C P s s' t _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8412231 A B C P s s' t _115320 c clauses)). Qed.
Lemma lem8412233 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8412234 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5559 A B C P s s' t _115320 clauses) = (term5555 A B C P s s' t _115320 clauses).
Proof. exact (MK_COMB (@lem8412233 C) (@lem8412232 A B C P s s' t _115320 clauses)). Qed.
Lemma lem8412235 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8412236 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5570 A B C P s s' t _115320 clauses) = (term5571 A B C P s s' t _115320 clauses).
Proof. exact (MK_COMB (@lem8412235) (@lem8412234 A B C P s s' t _115320 clauses)). Qed.
Lemma lem8412237 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5562 A B C P s s' t _115320 clauses c) = (term5563 A B C P s s' t _115320 c clauses).
Proof. exact (eq_refl (term5562 A B C P s s' t _115320 clauses c)). Qed.
Lemma lem8412238 {A B C P : Type'} (t' : type1519 A B C P) (c : C) : (t' c) = (t' c).
Proof. exact (eq_refl (t' c)). Qed.
Lemma lem8412239 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (t' : type1519 A B C P) (c : C) : (term5572 A B C P s s' t _115320 clauses t' c) = (term5573 A B C P s s' t _115320 clauses t' c).
Proof. exact (MK_COMB (@lem8412237 A B C P s s' t _115320 c clauses) (@lem8412238 A B C P t' c)). Qed.
Lemma lem8412240 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5573 A B C P s s' t _115320 clauses t' c) = (term5574 A B C P s s' t t' _115320 c clauses).
Proof. exact (eq_refl (term5573 A B C P s s' t _115320 clauses t' c)). Qed.
Lemma lem8412241 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5572 A B C P s s' t _115320 clauses t' c) = (term5574 A B C P s s' t t' _115320 c clauses).
Proof. exact (TRANS (@lem8412239 A B C P s s' t _115320 clauses t' c) (@lem8412240 A B C P s s' t t' _115320 c clauses)). Qed.
Lemma lem8412242 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5575 A B C P s s' t _115320 clauses t') = (term5576 A B C P s s' t t' _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8412241 A B C P s s' t t' _115320 c clauses)). Qed.
Lemma lem8412243 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8412244 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5577 A B C P s s' t _115320 clauses t') = (term5578 A B C P s s' t t' _115320 clauses).
Proof. exact (MK_COMB (@lem8412243 C) (@lem8412242 A B C P s s' t t' _115320 clauses)). Qed.
Lemma lem8412245 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5579 A B C P s s' t _115320 clauses) = (term5580 A B C P s s' t _115320 clauses).
Proof. exact (fun_ext (fun t' : type1519 A B C P => @lem8412244 A B C P s s' t t' _115320 clauses)). Qed.
Lemma lem8412246 {A B C P : Type'} : (@ex (C -> C -> ((A -> B) -> P -> B) -> B)) = (@ex (C -> C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8412247 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5560 A B C P s s' t _115320 clauses) = (term5581 A B C P s s' t _115320 clauses).
Proof. exact (MK_COMB (@lem8412246 A B C P) (@lem8412245 A B C P s s' t _115320 clauses)). Qed.
Lemma lem8412248 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : ((term5559 A B C P s s' t _115320 clauses) = (term5560 A B C P s s' t _115320 clauses)) = ((term5555 A B C P s s' t _115320 clauses) = (term5581 A B C P s s' t _115320 clauses)).
Proof. exact (MK_COMB (@lem8412236 A B C P s s' t _115320 clauses) (@lem8412247 A B C P s s' t _115320 clauses)). Qed.
Lemma lem8412249 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5555 A B C P s s' t _115320 clauses) = (term5581 A B C P s s' t _115320 clauses).
Proof. exact (EQ_MP (@lem8412248 A B C P s s' t _115320 clauses) (@lem8412223 A B C P s s' t _115320 clauses)). Qed.
Lemma lem8412251 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8412252 {A B C P : Type'} (P' : type1491 A B C P) : (term4560 A B C P P') = (term4561 A B C P P').
Proof. exact (@lem8412251 C (type558 A B P) P'). Qed.
Lemma lem8412253 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5582 A B C P s s' t t' _115320 clauses) = (term5583 A B C P s s' t t' _115320 clauses).
Proof. exact (@lem8412252 A B C P (term5584 A B C P s s' t t' _115320 clauses)). Qed.
Lemma lem8412254 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5585 A B C P s s' t t' _115320 clauses c) = (term5586 A B C P s s' t t' _115320 c clauses).
Proof. exact (eq_refl (term5585 A B C P s s' t t' _115320 clauses c)). Qed.
Lemma lem8412255 {A B P : Type'} (x : type558 A B P) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8412256 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) (x : type558 A B P) : (term5587 A B C P s s' t t' _115320 clauses c x) = (term5588 A B C P s s' t t' _115320 c clauses x).
Proof. exact (MK_COMB (@lem8412254 A B C P s s' t t' _115320 c clauses) (@lem8412255 A B P x)). Qed.
Lemma lem8412257 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type558 A B P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5588 A B C P s s' t t' _115320 c clauses x) = (term5589 A B C P s s' t x t' _115320 c clauses).
Proof. exact (eq_refl (term5588 A B C P s s' t t' _115320 c clauses x)). Qed.
Lemma lem8412258 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type558 A B P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5587 A B C P s s' t t' _115320 clauses c x) = (term5589 A B C P s s' t x t' _115320 c clauses).
Proof. exact (TRANS (@lem8412256 A B C P s s' t t' _115320 c clauses x) (@lem8412257 A B C P s s' t x t' _115320 c clauses)). Qed.
Lemma lem8412259 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5590 A B C P s s' t t' _115320 clauses c) = (term5586 A B C P s s' t t' _115320 c clauses).
Proof. exact (fun_ext (fun x : type558 A B P => @lem8412258 A B C P s s' t x t' _115320 c clauses)). Qed.
Lemma lem8412260 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8412261 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5591 A B C P s s' t t' _115320 clauses c) = (term5574 A B C P s s' t t' _115320 c clauses).
Proof. exact (MK_COMB (@lem8412260 A B P) (@lem8412259 A B C P s s' t t' _115320 c clauses)). Qed.
Lemma lem8412262 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5592 A B C P s s' t t' _115320 clauses) = (term5576 A B C P s s' t t' _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8412261 A B C P s s' t t' _115320 c clauses)). Qed.
Lemma lem8412263 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8412264 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5582 A B C P s s' t t' _115320 clauses) = (term5578 A B C P s s' t t' _115320 clauses).
Proof. exact (MK_COMB (@lem8412263 C) (@lem8412262 A B C P s s' t t' _115320 clauses)). Qed.
Lemma lem8412265 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8412266 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5593 A B C P s s' t t' _115320 clauses) = (term5594 A B C P s s' t t' _115320 clauses).
Proof. exact (MK_COMB (@lem8412265) (@lem8412264 A B C P s s' t t' _115320 clauses)). Qed.
Lemma lem8412267 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5585 A B C P s s' t t' _115320 clauses c) = (term5586 A B C P s s' t t' _115320 c clauses).
Proof. exact (eq_refl (term5585 A B C P s s' t t' _115320 clauses c)). Qed.
Lemma lem8412268 {A B C P : Type'} (x : type1505 A B C P) (c : C) : (x c) = (x c).
Proof. exact (eq_refl (x c)). Qed.
Lemma lem8412269 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (x : type1505 A B C P) (c : C) : (term5595 A B C P s s' t t' _115320 clauses x c) = (term5596 A B C P s s' t t' _115320 clauses x c).
Proof. exact (MK_COMB (@lem8412267 A B C P s s' t t' _115320 c clauses) (@lem8412268 A B C P x c)). Qed.
Lemma lem8412270 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5596 A B C P s s' t t' _115320 clauses x c) = (term5597 A B C P s s' t x t' _115320 c clauses).
Proof. exact (eq_refl (term5596 A B C P s s' t t' _115320 clauses x c)). Qed.
Lemma lem8412271 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5595 A B C P s s' t t' _115320 clauses x c) = (term5597 A B C P s s' t x t' _115320 c clauses).
Proof. exact (TRANS (@lem8412269 A B C P s s' t t' _115320 clauses x c) (@lem8412270 A B C P s s' t x t' _115320 c clauses)). Qed.
Lemma lem8412272 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5598 A B C P s s' t t' _115320 clauses x) = (term5599 A B C P s s' t x t' _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8412271 A B C P s s' t x t' _115320 c clauses)). Qed.
Lemma lem8412273 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8412274 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5600 A B C P s s' t t' _115320 clauses x) = (term5601 A B C P s s' t x t' _115320 clauses).
Proof. exact (MK_COMB (@lem8412273 C) (@lem8412272 A B C P s s' t x t' _115320 clauses)). Qed.
Lemma lem8412275 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5602 A B C P s s' t t' _115320 clauses) = (term5603 A B C P s s' t t' _115320 clauses).
Proof. exact (fun_ext (fun x : type1505 A B C P => @lem8412274 A B C P s s' t x t' _115320 clauses)). Qed.
Lemma lem8412276 {A B C P : Type'} : (@ex (C -> (A -> B) -> P -> B)) = (@ex (C -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> P -> B))). Qed.
Lemma lem8412277 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5583 A B C P s s' t t' _115320 clauses) = (term5604 A B C P s s' t t' _115320 clauses).
Proof. exact (MK_COMB (@lem8412276 A B C P) (@lem8412275 A B C P s s' t t' _115320 clauses)). Qed.
Lemma lem8412278 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : ((term5582 A B C P s s' t t' _115320 clauses) = (term5583 A B C P s s' t t' _115320 clauses)) = ((term5578 A B C P s s' t t' _115320 clauses) = (term5604 A B C P s s' t t' _115320 clauses)).
Proof. exact (MK_COMB (@lem8412266 A B C P s s' t t' _115320 clauses) (@lem8412277 A B C P s s' t t' _115320 clauses)). Qed.
Lemma lem8412279 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5578 A B C P s s' t t' _115320 clauses) = (term5604 A B C P s s' t t' _115320 clauses).
Proof. exact (EQ_MP (@lem8412278 A B C P s s' t t' _115320 clauses) (@lem8412253 A B C P s s' t t' _115320 clauses)). Qed.
Lemma lem8412281 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8412282 {A B C P : Type'} (P' : type1491 A B C P) : (term4560 A B C P P') = (term4561 A B C P P').
Proof. exact (@lem8412281 C (type558 A B P) P'). Qed.
Lemma lem8412283 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5605 A B C P s s' t x t' _115320 clauses) = (term5606 A B C P s s' t x t' _115320 clauses).
Proof. exact (@lem8412282 A B C P (term5607 A B C P s s' t x t' _115320 clauses)). Qed.
Lemma lem8412284 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5608 A B C P s s' t x t' _115320 clauses c) = (term5609 A B C P s s' t x t' _115320 c clauses).
Proof. exact (eq_refl (term5608 A B C P s s' t x t' _115320 clauses c)). Qed.
Lemma lem8412285 {A B P : Type'} (y : type558 A B P) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem8412286 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) (y : type558 A B P) : (term5610 A B C P s s' t x t' _115320 clauses c y) = (term5611 A B C P s s' t x t' _115320 c clauses y).
Proof. exact (MK_COMB (@lem8412284 A B C P s s' t x t' _115320 c clauses) (@lem8412285 A B P y)). Qed.
Lemma lem8412287 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (y : type558 A B P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5611 A B C P s s' t x t' _115320 c clauses y) = (term5612 A B C P s s' t x t' y _115320 c clauses).
Proof. exact (eq_refl (term5611 A B C P s s' t x t' _115320 c clauses y)). Qed.
Lemma lem8412288 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (y : type558 A B P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5610 A B C P s s' t x t' _115320 clauses c y) = (term5612 A B C P s s' t x t' y _115320 c clauses).
Proof. exact (TRANS (@lem8412286 A B C P s s' t x t' _115320 c clauses y) (@lem8412287 A B C P s s' t x t' y _115320 c clauses)). Qed.
Lemma lem8412289 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5613 A B C P s s' t x t' _115320 clauses c) = (term5609 A B C P s s' t x t' _115320 c clauses).
Proof. exact (fun_ext (fun y : type558 A B P => @lem8412288 A B C P s s' t x t' y _115320 c clauses)). Qed.
Lemma lem8412290 {A B P : Type'} : (@ex ((A -> B) -> P -> B)) = (@ex ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((A -> B) -> P -> B))). Qed.
Lemma lem8412291 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5614 A B C P s s' t x t' _115320 clauses c) = (term5597 A B C P s s' t x t' _115320 c clauses).
Proof. exact (MK_COMB (@lem8412290 A B P) (@lem8412289 A B C P s s' t x t' _115320 c clauses)). Qed.
Lemma lem8412292 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5615 A B C P s s' t x t' _115320 clauses) = (term5599 A B C P s s' t x t' _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8412291 A B C P s s' t x t' _115320 c clauses)). Qed.
Lemma lem8412293 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8412294 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5605 A B C P s s' t x t' _115320 clauses) = (term5601 A B C P s s' t x t' _115320 clauses).
Proof. exact (MK_COMB (@lem8412293 C) (@lem8412292 A B C P s s' t x t' _115320 clauses)). Qed.
Lemma lem8412295 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8412296 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5616 A B C P s s' t x t' _115320 clauses) = (term5617 A B C P s s' t x t' _115320 clauses).
Proof. exact (MK_COMB (@lem8412295) (@lem8412294 A B C P s s' t x t' _115320 clauses)). Qed.
Lemma lem8412297 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5608 A B C P s s' t x t' _115320 clauses c) = (term5609 A B C P s s' t x t' _115320 c clauses).
Proof. exact (eq_refl (term5608 A B C P s s' t x t' _115320 clauses c)). Qed.
Lemma lem8412298 {A B C P : Type'} (y : type1505 A B C P) (c : C) : (y c) = (y c).
Proof. exact (eq_refl (y c)). Qed.
Lemma lem8412299 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (y : type1505 A B C P) (c : C) : (term5618 A B C P s s' t x t' _115320 clauses y c) = (term5619 A B C P s s' t x t' _115320 clauses y c).
Proof. exact (MK_COMB (@lem8412297 A B C P s s' t x t' _115320 c clauses) (@lem8412298 A B C P y c)). Qed.
Lemma lem8412300 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (y : type1505 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5619 A B C P s s' t x t' _115320 clauses y c) = (term5620 A B C P s s' t x t' y _115320 c clauses).
Proof. exact (eq_refl (term5619 A B C P s s' t x t' _115320 clauses y c)). Qed.
Lemma lem8412301 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (y : type1505 A B C P) (_115320 : type1038 A B C P) (c : C) (clauses : type1629 A B C P) : (term5618 A B C P s s' t x t' _115320 clauses y c) = (term5620 A B C P s s' t x t' y _115320 c clauses).
Proof. exact (TRANS (@lem8412299 A B C P s s' t x t' _115320 clauses y c) (@lem8412300 A B C P s s' t x t' y _115320 c clauses)). Qed.
Lemma lem8412302 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (y : type1505 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5621 A B C P s s' t x t' _115320 clauses y) = (term5622 A B C P s s' t x t' y _115320 clauses).
Proof. exact (fun_ext (fun c : C => @lem8412301 A B C P s s' t x t' y _115320 c clauses)). Qed.
Lemma lem8412303 {C : Type'} : (@all C) = (@all C).
Proof. exact (eq_refl (@all C)). Qed.
Lemma lem8412304 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (y : type1505 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5623 A B C P s s' t x t' _115320 clauses y) = (term5624 A B C P s s' t x t' y _115320 clauses).
Proof. exact (MK_COMB (@lem8412303 C) (@lem8412302 A B C P s s' t x t' y _115320 clauses)). Qed.
Lemma lem8412305 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5625 A B C P s s' t x t' _115320 clauses) = (term5626 A B C P s s' t x t' _115320 clauses).
Proof. exact (fun_ext (fun y : type1505 A B C P => @lem8412304 A B C P s s' t x t' y _115320 clauses)). Qed.
Lemma lem8412306 {A B C P : Type'} : (@ex (C -> (A -> B) -> P -> B)) = (@ex (C -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> P -> B))). Qed.
Lemma lem8412307 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5606 A B C P s s' t x t' _115320 clauses) = (term5627 A B C P s s' t x t' _115320 clauses).
Proof. exact (MK_COMB (@lem8412306 A B C P) (@lem8412305 A B C P s s' t x t' _115320 clauses)). Qed.
Lemma lem8412308 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : ((term5605 A B C P s s' t x t' _115320 clauses) = (term5606 A B C P s s' t x t' _115320 clauses)) = ((term5601 A B C P s s' t x t' _115320 clauses) = (term5627 A B C P s s' t x t' _115320 clauses)).
Proof. exact (MK_COMB (@lem8412296 A B C P s s' t x t' _115320 clauses) (@lem8412307 A B C P s s' t x t' _115320 clauses)). Qed.
Lemma lem8412309 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (x : type1505 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5601 A B C P s s' t x t' _115320 clauses) = (term5627 A B C P s s' t x t' _115320 clauses).
Proof. exact (EQ_MP (@lem8412308 A B C P s s' t x t' _115320 clauses) (@lem8412283 A B C P s s' t x t' _115320 clauses)). Qed.
Lemma lem8412310 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5603 A B C P s s' t t' _115320 clauses) = (term5628 A B C P s s' t t' _115320 clauses).
Proof. exact (fun_ext (fun x : type1505 A B C P => @lem8412309 A B C P s s' t x t' _115320 clauses)). Qed.
Lemma lem8412311 {A B C P : Type'} : (@ex (C -> (A -> B) -> P -> B)) = (@ex (C -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> P -> B))). Qed.
Lemma lem8412312 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5604 A B C P s s' t t' _115320 clauses) = (term5629 A B C P s s' t t' _115320 clauses).
Proof. exact (MK_COMB (@lem8412311 A B C P) (@lem8412310 A B C P s s' t t' _115320 clauses)). Qed.
Lemma lem8412313 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5578 A B C P s s' t t' _115320 clauses) = (term5629 A B C P s s' t t' _115320 clauses).
Proof. exact (TRANS (@lem8412279 A B C P s s' t t' _115320 clauses) (@lem8412312 A B C P s s' t t' _115320 clauses)). Qed.
Lemma lem8412314 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5580 A B C P s s' t _115320 clauses) = (term5630 A B C P s s' t _115320 clauses).
Proof. exact (fun_ext (fun t' : type1519 A B C P => @lem8412313 A B C P s s' t t' _115320 clauses)). Qed.
Lemma lem8412315 {A B C P : Type'} : (@ex (C -> C -> ((A -> B) -> P -> B) -> B)) = (@ex (C -> C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8412316 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5581 A B C P s s' t _115320 clauses) = (term5631 A B C P s s' t _115320 clauses).
Proof. exact (MK_COMB (@lem8412315 A B C P) (@lem8412314 A B C P s s' t _115320 clauses)). Qed.
Lemma lem8412317 {A B C P : Type'} (s : type1489 A B C P) (s' : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5555 A B C P s s' t _115320 clauses) = (term5631 A B C P s s' t _115320 clauses).
Proof. exact (TRANS (@lem8412249 A B C P s s' t _115320 clauses) (@lem8412316 A B C P s s' t _115320 clauses)). Qed.
Lemma lem8412318 {A B C P : Type'} (s : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5557 A B C P s t _115320 clauses) = (term5632 A B C P s t _115320 clauses).
Proof. exact (fun_ext (fun s' : type1489 A B C P => @lem8412317 A B C P s s' t _115320 clauses)). Qed.
Lemma lem8412319 {A B C P : Type'} : (@ex (C -> ((A -> B) -> P -> B) -> A)) = (@ex (C -> ((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (C -> ((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8412320 {A B C P : Type'} (s : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5558 A B C P s t _115320 clauses) = (term5633 A B C P s t _115320 clauses).
Proof. exact (MK_COMB (@lem8412319 A B C P) (@lem8412318 A B C P s t _115320 clauses)). Qed.
Lemma lem8412321 {A B C P : Type'} (s : type1489 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5532 A B C P s t _115320 clauses) = (term5633 A B C P s t _115320 clauses).
Proof. exact (TRANS (@lem8412219 A B C P s t _115320 clauses) (@lem8412320 A B C P s t _115320 clauses)). Qed.
Lemma lem8412322 {A B C P : Type'} (s : type1489 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5534 A B C P s _115320 clauses) = (term5634 A B C P s _115320 clauses).
Proof. exact (fun_ext (fun t : type1519 A B C P => @lem8412321 A B C P s t _115320 clauses)). Qed.
Lemma lem8412323 {A B C P : Type'} : (@ex (C -> C -> ((A -> B) -> P -> B) -> B)) = (@ex (C -> C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8412324 {A B C P : Type'} (s : type1489 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5535 A B C P s _115320 clauses) = (term5635 A B C P s _115320 clauses).
Proof. exact (MK_COMB (@lem8412323 A B C P) (@lem8412322 A B C P s _115320 clauses)). Qed.
Lemma lem8412325 {A B C P : Type'} (s : type1489 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5507 A B C P s _115320 clauses) = (term5635 A B C P s _115320 clauses).
Proof. exact (TRANS (@lem8412189 A B C P s _115320 clauses) (@lem8412324 A B C P s _115320 clauses)). Qed.
Lemma lem8412326 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5509 A B C P _115320 clauses) = (term5636 A B C P _115320 clauses).
Proof. exact (fun_ext (fun s : type1489 A B C P => @lem8412325 A B C P s _115320 clauses)). Qed.
Lemma lem8412327 {A B C P : Type'} : (@ex (C -> ((A -> B) -> P -> B) -> A)) = (@ex (C -> ((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (C -> ((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8412328 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5510 A B C P _115320 clauses) = (term5637 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8412327 A B C P) (@lem8412326 A B C P _115320 clauses)). Qed.
Lemma lem8412329 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5487 A B C P _115320 clauses) = (term5637 A B C P _115320 clauses).
Proof. exact (TRANS (@lem8412159 A B C P _115320 clauses) (@lem8412328 A B C P _115320 clauses)). Qed.
Lemma lem8412330 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5379 A B C P _115320 clauses) = (term5637 A B C P _115320 clauses).
Proof. exact (TRANS (@lem8412129 A B C P _115320 clauses) (@lem8412329 A B C P _115320 clauses)). Qed.
Lemma lem8412331 {A B C P : Type'} (_115320 : type1038 A B C P) : (term5380 A B C P _115320) = (term5638 A B C P _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8412330 A B C P _115320 clauses)). Qed.
Lemma lem8412332 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8412333 {A B C P : Type'} (_115320 : type1038 A B C P) : (term5381 A B C P _115320) = (term5639 A B C P _115320).
Proof. exact (MK_COMB (@lem8412332 A B C P) (@lem8412331 A B C P _115320)). Qed.
Lemma lem8412335 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8412336 {A B C P : Type'} (P' : type1030 A B C P) : (term5640 A B C P P') = (term5641 A B C P P').
Proof. exact (@lem8412335 (type1629 A B C P) (type1489 A B C P) P'). Qed.
Lemma lem8412337 {A B C P : Type'} (_115320 : type1038 A B C P) : (term5642 A B C P _115320) = (term5643 A B C P _115320).
Proof. exact (@lem8412336 A B C P (term5644 A B C P _115320)). Qed.
Lemma lem8412338 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5645 A B C P _115320 clauses) = (term5636 A B C P _115320 clauses).
Proof. exact (eq_refl (term5645 A B C P _115320 clauses)). Qed.
Lemma lem8412339 {A B C P : Type'} (s : type1489 A B C P) : s = s.
Proof. exact (eq_refl s). Qed.
Lemma lem8412340 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s : type1489 A B C P) : (term5646 A B C P _115320 clauses s) = (term5647 A B C P _115320 clauses s).
Proof. exact (MK_COMB (@lem8412338 A B C P _115320 clauses) (@lem8412339 A B C P s)). Qed.
Lemma lem8412341 {A B C P : Type'} (s : type1489 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5647 A B C P _115320 clauses s) = (term5635 A B C P s _115320 clauses).
Proof. exact (eq_refl (term5647 A B C P _115320 clauses s)). Qed.
Lemma lem8412342 {A B C P : Type'} (s : type1489 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5646 A B C P _115320 clauses s) = (term5635 A B C P s _115320 clauses).
Proof. exact (TRANS (@lem8412340 A B C P _115320 clauses s) (@lem8412341 A B C P s _115320 clauses)). Qed.
Lemma lem8412343 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5648 A B C P _115320 clauses) = (term5636 A B C P _115320 clauses).
Proof. exact (fun_ext (fun s : type1489 A B C P => @lem8412342 A B C P s _115320 clauses)). Qed.
Lemma lem8412344 {A B C P : Type'} : (@ex (C -> ((A -> B) -> P -> B) -> A)) = (@ex (C -> ((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (C -> ((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8412345 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5649 A B C P _115320 clauses) = (term5637 A B C P _115320 clauses).
Proof. exact (MK_COMB (@lem8412344 A B C P) (@lem8412343 A B C P _115320 clauses)). Qed.
Lemma lem8412346 {A B C P : Type'} (_115320 : type1038 A B C P) : (term5650 A B C P _115320) = (term5638 A B C P _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8412345 A B C P _115320 clauses)). Qed.
Lemma lem8412347 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8412348 {A B C P : Type'} (_115320 : type1038 A B C P) : (term5642 A B C P _115320) = (term5639 A B C P _115320).
Proof. exact (MK_COMB (@lem8412347 A B C P) (@lem8412346 A B C P _115320)). Qed.
Lemma lem8412349 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8412350 {A B C P : Type'} (_115320 : type1038 A B C P) : (term5651 A B C P _115320) = (term5652 A B C P _115320).
Proof. exact (MK_COMB (@lem8412349) (@lem8412348 A B C P _115320)). Qed.
Lemma lem8412351 {A B C P : Type'} (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5645 A B C P _115320 clauses) = (term5636 A B C P _115320 clauses).
Proof. exact (eq_refl (term5645 A B C P _115320 clauses)). Qed.
Lemma lem8412352 {A B C P : Type'} (s : type1035 A B C P) (clauses : type1629 A B C P) : (s clauses) = (s clauses).
Proof. exact (eq_refl (s clauses)). Qed.
Lemma lem8412353 {A B C P : Type'} (_115320 : type1038 A B C P) (s : type1035 A B C P) (clauses : type1629 A B C P) : (term5653 A B C P _115320 s clauses) = (term5654 A B C P _115320 s clauses).
Proof. exact (MK_COMB (@lem8412351 A B C P _115320 clauses) (@lem8412352 A B C P s clauses)). Qed.
Lemma lem8412354 {A B C P : Type'} (s : type1035 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5654 A B C P _115320 s clauses) = (term5655 A B C P s _115320 clauses).
Proof. exact (eq_refl (term5654 A B C P _115320 s clauses)). Qed.
Lemma lem8412355 {A B C P : Type'} (s : type1035 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5653 A B C P _115320 s clauses) = (term5655 A B C P s _115320 clauses).
Proof. exact (TRANS (@lem8412353 A B C P _115320 s clauses) (@lem8412354 A B C P s _115320 clauses)). Qed.
Lemma lem8412356 {A B C P : Type'} (s : type1035 A B C P) (_115320 : type1038 A B C P) : (term5656 A B C P _115320 s) = (term5657 A B C P s _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8412355 A B C P s _115320 clauses)). Qed.
Lemma lem8412357 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8412358 {A B C P : Type'} (s : type1035 A B C P) (_115320 : type1038 A B C P) : (term5658 A B C P _115320 s) = (term5659 A B C P s _115320).
Proof. exact (MK_COMB (@lem8412357 A B C P) (@lem8412356 A B C P s _115320)). Qed.
Lemma lem8412359 {A B C P : Type'} (_115320 : type1038 A B C P) : (term5660 A B C P _115320) = (term5661 A B C P _115320).
Proof. exact (fun_ext (fun s : type1035 A B C P => @lem8412358 A B C P s _115320)). Qed.
Lemma lem8412360 {A B C P : Type'} : (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((A -> B) -> P -> B) -> A)) = (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8412361 {A B C P : Type'} (_115320 : type1038 A B C P) : (term5643 A B C P _115320) = (term5662 A B C P _115320).
Proof. exact (MK_COMB (@lem8412360 A B C P) (@lem8412359 A B C P _115320)). Qed.
Lemma lem8412362 {A B C P : Type'} (_115320 : type1038 A B C P) : ((term5642 A B C P _115320) = (term5643 A B C P _115320)) = ((term5639 A B C P _115320) = (term5662 A B C P _115320)).
Proof. exact (MK_COMB (@lem8412350 A B C P _115320) (@lem8412361 A B C P _115320)). Qed.
Lemma lem8412363 {A B C P : Type'} (_115320 : type1038 A B C P) : (term5639 A B C P _115320) = (term5662 A B C P _115320).
Proof. exact (EQ_MP (@lem8412362 A B C P _115320) (@lem8412337 A B C P _115320)). Qed.
Lemma lem8412365 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8412366 {A B C P : Type'} (P' : type1034 A B C P) : (term5663 A B C P P') = (term5664 A B C P P').
Proof. exact (@lem8412365 (type1629 A B C P) (type1519 A B C P) P'). Qed.
Lemma lem8412367 {A B C P : Type'} (s : type1035 A B C P) (_115320 : type1038 A B C P) : (term5665 A B C P s _115320) = (term5666 A B C P s _115320).
Proof. exact (@lem8412366 A B C P (term5667 A B C P s _115320)). Qed.
Lemma lem8412368 {A B C P : Type'} (s : type1035 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5668 A B C P s _115320 clauses) = (term5669 A B C P s _115320 clauses).
Proof. exact (eq_refl (term5668 A B C P s _115320 clauses)). Qed.
Lemma lem8412369 {A B C P : Type'} (t : type1519 A B C P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8412370 {A B C P : Type'} (s : type1035 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (t : type1519 A B C P) : (term5670 A B C P s _115320 clauses t) = (term5671 A B C P s _115320 clauses t).
Proof. exact (MK_COMB (@lem8412368 A B C P s _115320 clauses) (@lem8412369 A B C P t)). Qed.
Lemma lem8412371 {A B C P : Type'} (s : type1035 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5671 A B C P s _115320 clauses t) = (term5672 A B C P s t _115320 clauses).
Proof. exact (eq_refl (term5671 A B C P s _115320 clauses t)). Qed.
Lemma lem8412372 {A B C P : Type'} (s : type1035 A B C P) (t : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5670 A B C P s _115320 clauses t) = (term5672 A B C P s t _115320 clauses).
Proof. exact (TRANS (@lem8412370 A B C P s _115320 clauses t) (@lem8412371 A B C P s t _115320 clauses)). Qed.
Lemma lem8412373 {A B C P : Type'} (s : type1035 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5673 A B C P s _115320 clauses) = (term5669 A B C P s _115320 clauses).
Proof. exact (fun_ext (fun t : type1519 A B C P => @lem8412372 A B C P s t _115320 clauses)). Qed.
Lemma lem8412374 {A B C P : Type'} : (@ex (C -> C -> ((A -> B) -> P -> B) -> B)) = (@ex (C -> C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8412375 {A B C P : Type'} (s : type1035 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5674 A B C P s _115320 clauses) = (term5655 A B C P s _115320 clauses).
Proof. exact (MK_COMB (@lem8412374 A B C P) (@lem8412373 A B C P s _115320 clauses)). Qed.
Lemma lem8412376 {A B C P : Type'} (s : type1035 A B C P) (_115320 : type1038 A B C P) : (term5675 A B C P s _115320) = (term5657 A B C P s _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8412375 A B C P s _115320 clauses)). Qed.
Lemma lem8412377 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8412378 {A B C P : Type'} (s : type1035 A B C P) (_115320 : type1038 A B C P) : (term5665 A B C P s _115320) = (term5659 A B C P s _115320).
Proof. exact (MK_COMB (@lem8412377 A B C P) (@lem8412376 A B C P s _115320)). Qed.
Lemma lem8412379 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8412380 {A B C P : Type'} (s : type1035 A B C P) (_115320 : type1038 A B C P) : (term5676 A B C P s _115320) = (term5677 A B C P s _115320).
Proof. exact (MK_COMB (@lem8412379) (@lem8412378 A B C P s _115320)). Qed.
Lemma lem8412381 {A B C P : Type'} (s : type1035 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5668 A B C P s _115320 clauses) = (term5669 A B C P s _115320 clauses).
Proof. exact (eq_refl (term5668 A B C P s _115320 clauses)). Qed.
Lemma lem8412382 {A B C P : Type'} (t : type1040 A B C P) (clauses : type1629 A B C P) : (t clauses) = (t clauses).
Proof. exact (eq_refl (t clauses)). Qed.
Lemma lem8412383 {A B C P : Type'} (s : type1035 A B C P) (_115320 : type1038 A B C P) (t : type1040 A B C P) (clauses : type1629 A B C P) : (term5678 A B C P s _115320 t clauses) = (term5679 A B C P s _115320 t clauses).
Proof. exact (MK_COMB (@lem8412381 A B C P s _115320 clauses) (@lem8412382 A B C P t clauses)). Qed.
Lemma lem8412384 {A B C P : Type'} (s : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5679 A B C P s _115320 t clauses) = (term5680 A B C P s t _115320 clauses).
Proof. exact (eq_refl (term5679 A B C P s _115320 t clauses)). Qed.
Lemma lem8412385 {A B C P : Type'} (s : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5678 A B C P s _115320 t clauses) = (term5680 A B C P s t _115320 clauses).
Proof. exact (TRANS (@lem8412383 A B C P s _115320 t clauses) (@lem8412384 A B C P s t _115320 clauses)). Qed.
Lemma lem8412386 {A B C P : Type'} (s : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5681 A B C P s _115320 t) = (term5682 A B C P s t _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8412385 A B C P s t _115320 clauses)). Qed.
Lemma lem8412387 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8412388 {A B C P : Type'} (s : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5683 A B C P s _115320 t) = (term5684 A B C P s t _115320).
Proof. exact (MK_COMB (@lem8412387 A B C P) (@lem8412386 A B C P s t _115320)). Qed.
Lemma lem8412389 {A B C P : Type'} (s : type1035 A B C P) (_115320 : type1038 A B C P) : (term5685 A B C P s _115320) = (term5686 A B C P s _115320).
Proof. exact (fun_ext (fun t : type1040 A B C P => @lem8412388 A B C P s t _115320)). Qed.
Lemma lem8412390 {A B C P : Type'} : (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> C -> ((A -> B) -> P -> B) -> B)) = (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8412391 {A B C P : Type'} (s : type1035 A B C P) (_115320 : type1038 A B C P) : (term5666 A B C P s _115320) = (term5687 A B C P s _115320).
Proof. exact (MK_COMB (@lem8412390 A B C P) (@lem8412389 A B C P s _115320)). Qed.
Lemma lem8412392 {A B C P : Type'} (s : type1035 A B C P) (_115320 : type1038 A B C P) : ((term5665 A B C P s _115320) = (term5666 A B C P s _115320)) = ((term5659 A B C P s _115320) = (term5687 A B C P s _115320)).
Proof. exact (MK_COMB (@lem8412380 A B C P s _115320) (@lem8412391 A B C P s _115320)). Qed.
Lemma lem8412393 {A B C P : Type'} (s : type1035 A B C P) (_115320 : type1038 A B C P) : (term5659 A B C P s _115320) = (term5687 A B C P s _115320).
Proof. exact (EQ_MP (@lem8412392 A B C P s _115320) (@lem8412367 A B C P s _115320)). Qed.
Lemma lem8412395 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8412396 {A B C P : Type'} (P' : type1030 A B C P) : (term5640 A B C P P') = (term5641 A B C P P').
Proof. exact (@lem8412395 (type1629 A B C P) (type1489 A B C P) P'). Qed.
Lemma lem8412397 {A B C P : Type'} (s : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5688 A B C P s t _115320) = (term5689 A B C P s t _115320).
Proof. exact (@lem8412396 A B C P (term5690 A B C P s t _115320)). Qed.
Lemma lem8412398 {A B C P : Type'} (s : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5691 A B C P s t _115320 clauses) = (term5692 A B C P s t _115320 clauses).
Proof. exact (eq_refl (term5691 A B C P s t _115320 clauses)). Qed.
Lemma lem8412399 {A B C P : Type'} (s' : type1489 A B C P) : s' = s'.
Proof. exact (eq_refl s'). Qed.
Lemma lem8412400 {A B C P : Type'} (s : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (s' : type1489 A B C P) : (term5693 A B C P s t _115320 clauses s') = (term5694 A B C P s t _115320 clauses s').
Proof. exact (MK_COMB (@lem8412398 A B C P s t _115320 clauses) (@lem8412399 A B C P s')). Qed.
Lemma lem8412401 {A B C P : Type'} (s : type1035 A B C P) (s' : type1489 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5694 A B C P s t _115320 clauses s') = (term5695 A B C P s s' t _115320 clauses).
Proof. exact (eq_refl (term5694 A B C P s t _115320 clauses s')). Qed.
Lemma lem8412402 {A B C P : Type'} (s : type1035 A B C P) (s' : type1489 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5693 A B C P s t _115320 clauses s') = (term5695 A B C P s s' t _115320 clauses).
Proof. exact (TRANS (@lem8412400 A B C P s t _115320 clauses s') (@lem8412401 A B C P s s' t _115320 clauses)). Qed.
Lemma lem8412403 {A B C P : Type'} (s : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5696 A B C P s t _115320 clauses) = (term5692 A B C P s t _115320 clauses).
Proof. exact (fun_ext (fun s' : type1489 A B C P => @lem8412402 A B C P s s' t _115320 clauses)). Qed.
Lemma lem8412404 {A B C P : Type'} : (@ex (C -> ((A -> B) -> P -> B) -> A)) = (@ex (C -> ((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex (C -> ((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8412405 {A B C P : Type'} (s : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5697 A B C P s t _115320 clauses) = (term5680 A B C P s t _115320 clauses).
Proof. exact (MK_COMB (@lem8412404 A B C P) (@lem8412403 A B C P s t _115320 clauses)). Qed.
Lemma lem8412406 {A B C P : Type'} (s : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5698 A B C P s t _115320) = (term5682 A B C P s t _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8412405 A B C P s t _115320 clauses)). Qed.
Lemma lem8412407 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8412408 {A B C P : Type'} (s : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5688 A B C P s t _115320) = (term5684 A B C P s t _115320).
Proof. exact (MK_COMB (@lem8412407 A B C P) (@lem8412406 A B C P s t _115320)). Qed.
Lemma lem8412409 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8412410 {A B C P : Type'} (s : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5699 A B C P s t _115320) = (term5700 A B C P s t _115320).
Proof. exact (MK_COMB (@lem8412409) (@lem8412408 A B C P s t _115320)). Qed.
Lemma lem8412411 {A B C P : Type'} (s : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5691 A B C P s t _115320 clauses) = (term5692 A B C P s t _115320 clauses).
Proof. exact (eq_refl (term5691 A B C P s t _115320 clauses)). Qed.
Lemma lem8412412 {A B C P : Type'} (s' : type1035 A B C P) (clauses : type1629 A B C P) : (s' clauses) = (s' clauses).
Proof. exact (eq_refl (s' clauses)). Qed.
Lemma lem8412413 {A B C P : Type'} (s : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) (s' : type1035 A B C P) (clauses : type1629 A B C P) : (term5701 A B C P s t _115320 s' clauses) = (term5702 A B C P s t _115320 s' clauses).
Proof. exact (MK_COMB (@lem8412411 A B C P s t _115320 clauses) (@lem8412412 A B C P s' clauses)). Qed.
Lemma lem8412414 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5702 A B C P s t _115320 s' clauses) = (term5703 A B C P s s' t _115320 clauses).
Proof. exact (eq_refl (term5702 A B C P s t _115320 s' clauses)). Qed.
Lemma lem8412415 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5701 A B C P s t _115320 s' clauses) = (term5703 A B C P s s' t _115320 clauses).
Proof. exact (TRANS (@lem8412413 A B C P s t _115320 s' clauses) (@lem8412414 A B C P s s' t _115320 clauses)). Qed.
Lemma lem8412416 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5704 A B C P s t _115320 s') = (term5705 A B C P s s' t _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8412415 A B C P s s' t _115320 clauses)). Qed.
Lemma lem8412417 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8412418 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5706 A B C P s t _115320 s') = (term5707 A B C P s s' t _115320).
Proof. exact (MK_COMB (@lem8412417 A B C P) (@lem8412416 A B C P s s' t _115320)). Qed.
Lemma lem8412419 {A B C P : Type'} (s : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5708 A B C P s t _115320) = (term5709 A B C P s t _115320).
Proof. exact (fun_ext (fun s' : type1035 A B C P => @lem8412418 A B C P s s' t _115320)). Qed.
Lemma lem8412420 {A B C P : Type'} : (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((A -> B) -> P -> B) -> A)) = (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8412421 {A B C P : Type'} (s : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5689 A B C P s t _115320) = (term5710 A B C P s t _115320).
Proof. exact (MK_COMB (@lem8412420 A B C P) (@lem8412419 A B C P s t _115320)). Qed.
Lemma lem8412422 {A B C P : Type'} (s : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : ((term5688 A B C P s t _115320) = (term5689 A B C P s t _115320)) = ((term5684 A B C P s t _115320) = (term5710 A B C P s t _115320)).
Proof. exact (MK_COMB (@lem8412410 A B C P s t _115320) (@lem8412421 A B C P s t _115320)). Qed.
Lemma lem8412423 {A B C P : Type'} (s : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5684 A B C P s t _115320) = (term5710 A B C P s t _115320).
Proof. exact (EQ_MP (@lem8412422 A B C P s t _115320) (@lem8412397 A B C P s t _115320)). Qed.
Lemma lem8412425 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8412426 {A B C P : Type'} (P' : type1034 A B C P) : (term5663 A B C P P') = (term5664 A B C P P').
Proof. exact (@lem8412425 (type1629 A B C P) (type1519 A B C P) P'). Qed.
Lemma lem8412427 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5711 A B C P s s' t _115320) = (term5712 A B C P s s' t _115320).
Proof. exact (@lem8412426 A B C P (term5713 A B C P s s' t _115320)). Qed.
Lemma lem8412428 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5714 A B C P s s' t _115320 clauses) = (term5715 A B C P s s' t _115320 clauses).
Proof. exact (eq_refl (term5714 A B C P s s' t _115320 clauses)). Qed.
Lemma lem8412429 {A B C P : Type'} (t' : type1519 A B C P) : t' = t'.
Proof. exact (eq_refl t'). Qed.
Lemma lem8412430 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (t' : type1519 A B C P) : (term5716 A B C P s s' t _115320 clauses t') = (term5717 A B C P s s' t _115320 clauses t').
Proof. exact (MK_COMB (@lem8412428 A B C P s s' t _115320 clauses) (@lem8412429 A B C P t')). Qed.
Lemma lem8412431 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5717 A B C P s s' t _115320 clauses t') = (term5718 A B C P s s' t t' _115320 clauses).
Proof. exact (eq_refl (term5717 A B C P s s' t _115320 clauses t')). Qed.
Lemma lem8412432 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1519 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5716 A B C P s s' t _115320 clauses t') = (term5718 A B C P s s' t t' _115320 clauses).
Proof. exact (TRANS (@lem8412430 A B C P s s' t _115320 clauses t') (@lem8412431 A B C P s s' t t' _115320 clauses)). Qed.
Lemma lem8412433 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5719 A B C P s s' t _115320 clauses) = (term5715 A B C P s s' t _115320 clauses).
Proof. exact (fun_ext (fun t' : type1519 A B C P => @lem8412432 A B C P s s' t t' _115320 clauses)). Qed.
Lemma lem8412434 {A B C P : Type'} : (@ex (C -> C -> ((A -> B) -> P -> B) -> B)) = (@ex (C -> C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex (C -> C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8412435 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5720 A B C P s s' t _115320 clauses) = (term5703 A B C P s s' t _115320 clauses).
Proof. exact (MK_COMB (@lem8412434 A B C P) (@lem8412433 A B C P s s' t _115320 clauses)). Qed.
Lemma lem8412436 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5721 A B C P s s' t _115320) = (term5705 A B C P s s' t _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8412435 A B C P s s' t _115320 clauses)). Qed.
Lemma lem8412437 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8412438 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5711 A B C P s s' t _115320) = (term5707 A B C P s s' t _115320).
Proof. exact (MK_COMB (@lem8412437 A B C P) (@lem8412436 A B C P s s' t _115320)). Qed.
Lemma lem8412439 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8412440 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5722 A B C P s s' t _115320) = (term5723 A B C P s s' t _115320).
Proof. exact (MK_COMB (@lem8412439) (@lem8412438 A B C P s s' t _115320)). Qed.
Lemma lem8412441 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5714 A B C P s s' t _115320 clauses) = (term5715 A B C P s s' t _115320 clauses).
Proof. exact (eq_refl (term5714 A B C P s s' t _115320 clauses)). Qed.
Lemma lem8412442 {A B C P : Type'} (t' : type1040 A B C P) (clauses : type1629 A B C P) : (t' clauses) = (t' clauses).
Proof. exact (eq_refl (t' clauses)). Qed.
Lemma lem8412443 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) (t' : type1040 A B C P) (clauses : type1629 A B C P) : (term5724 A B C P s s' t _115320 t' clauses) = (term5725 A B C P s s' t _115320 t' clauses).
Proof. exact (MK_COMB (@lem8412441 A B C P s s' t _115320 clauses) (@lem8412442 A B C P t' clauses)). Qed.
Lemma lem8412444 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5725 A B C P s s' t _115320 t' clauses) = (term5726 A B C P s s' t t' _115320 clauses).
Proof. exact (eq_refl (term5725 A B C P s s' t _115320 t' clauses)). Qed.
Lemma lem8412445 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5724 A B C P s s' t _115320 t' clauses) = (term5726 A B C P s s' t t' _115320 clauses).
Proof. exact (TRANS (@lem8412443 A B C P s s' t _115320 t' clauses) (@lem8412444 A B C P s s' t t' _115320 clauses)). Qed.
Lemma lem8412446 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) : (term5727 A B C P s s' t _115320 t') = (term5728 A B C P s s' t t' _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8412445 A B C P s s' t t' _115320 clauses)). Qed.
Lemma lem8412447 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8412448 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) : (term5729 A B C P s s' t _115320 t') = (term5730 A B C P s s' t t' _115320).
Proof. exact (MK_COMB (@lem8412447 A B C P) (@lem8412446 A B C P s s' t t' _115320)). Qed.
Lemma lem8412449 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5731 A B C P s s' t _115320) = (term5732 A B C P s s' t _115320).
Proof. exact (fun_ext (fun t' : type1040 A B C P => @lem8412448 A B C P s s' t t' _115320)). Qed.
Lemma lem8412450 {A B C P : Type'} : (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> C -> ((A -> B) -> P -> B) -> B)) = (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8412451 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5712 A B C P s s' t _115320) = (term5733 A B C P s s' t _115320).
Proof. exact (MK_COMB (@lem8412450 A B C P) (@lem8412449 A B C P s s' t _115320)). Qed.
Lemma lem8412452 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : ((term5711 A B C P s s' t _115320) = (term5712 A B C P s s' t _115320)) = ((term5707 A B C P s s' t _115320) = (term5733 A B C P s s' t _115320)).
Proof. exact (MK_COMB (@lem8412440 A B C P s s' t _115320) (@lem8412451 A B C P s s' t _115320)). Qed.
Lemma lem8412453 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5707 A B C P s s' t _115320) = (term5733 A B C P s s' t _115320).
Proof. exact (EQ_MP (@lem8412452 A B C P s s' t _115320) (@lem8412427 A B C P s s' t _115320)). Qed.
Lemma lem8412455 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8412456 {A B C P : Type'} (P' : type1033 A B C P) : (term5734 A B C P P') = (term5735 A B C P P').
Proof. exact (@lem8412455 (type1629 A B C P) (type1505 A B C P) P'). Qed.
Lemma lem8412457 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) : (term5736 A B C P s s' t t' _115320) = (term5737 A B C P s s' t t' _115320).
Proof. exact (@lem8412456 A B C P (term5738 A B C P s s' t t' _115320)). Qed.
Lemma lem8412458 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5739 A B C P s s' t t' _115320 clauses) = (term5740 A B C P s s' t t' _115320 clauses).
Proof. exact (eq_refl (term5739 A B C P s s' t t' _115320 clauses)). Qed.
Lemma lem8412459 {A B C P : Type'} (x : type1505 A B C P) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8412460 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (x : type1505 A B C P) : (term5741 A B C P s s' t t' _115320 clauses x) = (term5742 A B C P s s' t t' _115320 clauses x).
Proof. exact (MK_COMB (@lem8412458 A B C P s s' t t' _115320 clauses) (@lem8412459 A B C P x)). Qed.
Lemma lem8412461 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1505 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5742 A B C P s s' t t' _115320 clauses x) = (term5743 A B C P s s' t x t' _115320 clauses).
Proof. exact (eq_refl (term5742 A B C P s s' t t' _115320 clauses x)). Qed.
Lemma lem8412462 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1505 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5741 A B C P s s' t t' _115320 clauses x) = (term5743 A B C P s s' t x t' _115320 clauses).
Proof. exact (TRANS (@lem8412460 A B C P s s' t t' _115320 clauses x) (@lem8412461 A B C P s s' t x t' _115320 clauses)). Qed.
Lemma lem8412463 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5744 A B C P s s' t t' _115320 clauses) = (term5740 A B C P s s' t t' _115320 clauses).
Proof. exact (fun_ext (fun x : type1505 A B C P => @lem8412462 A B C P s s' t x t' _115320 clauses)). Qed.
Lemma lem8412464 {A B C P : Type'} : (@ex (C -> (A -> B) -> P -> B)) = (@ex (C -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> P -> B))). Qed.
Lemma lem8412465 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5745 A B C P s s' t t' _115320 clauses) = (term5726 A B C P s s' t t' _115320 clauses).
Proof. exact (MK_COMB (@lem8412464 A B C P) (@lem8412463 A B C P s s' t t' _115320 clauses)). Qed.
Lemma lem8412466 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) : (term5746 A B C P s s' t t' _115320) = (term5728 A B C P s s' t t' _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8412465 A B C P s s' t t' _115320 clauses)). Qed.
Lemma lem8412467 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8412468 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) : (term5736 A B C P s s' t t' _115320) = (term5730 A B C P s s' t t' _115320).
Proof. exact (MK_COMB (@lem8412467 A B C P) (@lem8412466 A B C P s s' t t' _115320)). Qed.
Lemma lem8412469 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8412470 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) : (term5747 A B C P s s' t t' _115320) = (term5748 A B C P s s' t t' _115320).
Proof. exact (MK_COMB (@lem8412469) (@lem8412468 A B C P s s' t t' _115320)). Qed.
Lemma lem8412471 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5739 A B C P s s' t t' _115320 clauses) = (term5740 A B C P s s' t t' _115320 clauses).
Proof. exact (eq_refl (term5739 A B C P s s' t t' _115320 clauses)). Qed.
Lemma lem8412472 {A B C P : Type'} (x : type1039 A B C P) (clauses : type1629 A B C P) : (x clauses) = (x clauses).
Proof. exact (eq_refl (x clauses)). Qed.
Lemma lem8412473 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) (x : type1039 A B C P) (clauses : type1629 A B C P) : (term5749 A B C P s s' t t' _115320 x clauses) = (term5750 A B C P s s' t t' _115320 x clauses).
Proof. exact (MK_COMB (@lem8412471 A B C P s s' t t' _115320 clauses) (@lem8412472 A B C P x clauses)). Qed.
Lemma lem8412474 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5750 A B C P s s' t t' _115320 x clauses) = (term5751 A B C P s s' t x t' _115320 clauses).
Proof. exact (eq_refl (term5750 A B C P s s' t t' _115320 x clauses)). Qed.
Lemma lem8412475 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5749 A B C P s s' t t' _115320 x clauses) = (term5751 A B C P s s' t x t' _115320 clauses).
Proof. exact (TRANS (@lem8412473 A B C P s s' t t' _115320 x clauses) (@lem8412474 A B C P s s' t x t' _115320 clauses)). Qed.
Lemma lem8412476 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) : (term5752 A B C P s s' t t' _115320 x) = (term5753 A B C P s s' t x t' _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8412475 A B C P s s' t x t' _115320 clauses)). Qed.
Lemma lem8412477 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8412478 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) : (term5754 A B C P s s' t t' _115320 x) = (term5755 A B C P s s' t x t' _115320).
Proof. exact (MK_COMB (@lem8412477 A B C P) (@lem8412476 A B C P s s' t x t' _115320)). Qed.
Lemma lem8412479 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) : (term5756 A B C P s s' t t' _115320) = (term5757 A B C P s s' t t' _115320).
Proof. exact (fun_ext (fun x : type1039 A B C P => @lem8412478 A B C P s s' t x t' _115320)). Qed.
Lemma lem8412480 {A B C P : Type'} : (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> (A -> B) -> P -> B)) = (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> (A -> B) -> P -> B))). Qed.
Lemma lem8412481 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) : (term5737 A B C P s s' t t' _115320) = (term5758 A B C P s s' t t' _115320).
Proof. exact (MK_COMB (@lem8412480 A B C P) (@lem8412479 A B C P s s' t t' _115320)). Qed.
Lemma lem8412482 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) : ((term5736 A B C P s s' t t' _115320) = (term5737 A B C P s s' t t' _115320)) = ((term5730 A B C P s s' t t' _115320) = (term5758 A B C P s s' t t' _115320)).
Proof. exact (MK_COMB (@lem8412470 A B C P s s' t t' _115320) (@lem8412481 A B C P s s' t t' _115320)). Qed.
Lemma lem8412483 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) : (term5730 A B C P s s' t t' _115320) = (term5758 A B C P s s' t t' _115320).
Proof. exact (EQ_MP (@lem8412482 A B C P s s' t t' _115320) (@lem8412457 A B C P s s' t t' _115320)). Qed.
Lemma lem8412485 {A B : Type'} (P : type1413 A B) : (term1174 A B P) = (term1175 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8412486 {A B C P : Type'} (P' : type1033 A B C P) : (term5734 A B C P P') = (term5735 A B C P P').
Proof. exact (@lem8412485 (type1629 A B C P) (type1505 A B C P) P'). Qed.
Lemma lem8412487 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) : (term5759 A B C P s s' t x t' _115320) = (term5760 A B C P s s' t x t' _115320).
Proof. exact (@lem8412486 A B C P (term5761 A B C P s s' t x t' _115320)). Qed.
Lemma lem8412488 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5762 A B C P s s' t x t' _115320 clauses) = (term5763 A B C P s s' t x t' _115320 clauses).
Proof. exact (eq_refl (term5762 A B C P s s' t x t' _115320 clauses)). Qed.
Lemma lem8412489 {A B C P : Type'} (y : type1505 A B C P) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem8412490 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) (y : type1505 A B C P) : (term5764 A B C P s s' t x t' _115320 clauses y) = (term5765 A B C P s s' t x t' _115320 clauses y).
Proof. exact (MK_COMB (@lem8412488 A B C P s s' t x t' _115320 clauses) (@lem8412489 A B C P y)). Qed.
Lemma lem8412491 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (y : type1505 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5765 A B C P s s' t x t' _115320 clauses y) = (term5766 A B C P s s' t x t' y _115320 clauses).
Proof. exact (eq_refl (term5765 A B C P s s' t x t' _115320 clauses y)). Qed.
Lemma lem8412492 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (y : type1505 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5764 A B C P s s' t x t' _115320 clauses y) = (term5766 A B C P s s' t x t' y _115320 clauses).
Proof. exact (TRANS (@lem8412490 A B C P s s' t x t' _115320 clauses y) (@lem8412491 A B C P s s' t x t' y _115320 clauses)). Qed.
Lemma lem8412493 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5767 A B C P s s' t x t' _115320 clauses) = (term5763 A B C P s s' t x t' _115320 clauses).
Proof. exact (fun_ext (fun y : type1505 A B C P => @lem8412492 A B C P s s' t x t' y _115320 clauses)). Qed.
Lemma lem8412494 {A B C P : Type'} : (@ex (C -> (A -> B) -> P -> B)) = (@ex (C -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex (C -> (A -> B) -> P -> B))). Qed.
Lemma lem8412495 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5768 A B C P s s' t x t' _115320 clauses) = (term5751 A B C P s s' t x t' _115320 clauses).
Proof. exact (MK_COMB (@lem8412494 A B C P) (@lem8412493 A B C P s s' t x t' _115320 clauses)). Qed.
Lemma lem8412496 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) : (term5769 A B C P s s' t x t' _115320) = (term5753 A B C P s s' t x t' _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8412495 A B C P s s' t x t' _115320 clauses)). Qed.
Lemma lem8412497 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8412498 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) : (term5759 A B C P s s' t x t' _115320) = (term5755 A B C P s s' t x t' _115320).
Proof. exact (MK_COMB (@lem8412497 A B C P) (@lem8412496 A B C P s s' t x t' _115320)). Qed.
Lemma lem8412499 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8412500 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) : (term5770 A B C P s s' t x t' _115320) = (term5771 A B C P s s' t x t' _115320).
Proof. exact (MK_COMB (@lem8412499) (@lem8412498 A B C P s s' t x t' _115320)). Qed.
Lemma lem8412501 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5762 A B C P s s' t x t' _115320 clauses) = (term5763 A B C P s s' t x t' _115320 clauses).
Proof. exact (eq_refl (term5762 A B C P s s' t x t' _115320 clauses)). Qed.
Lemma lem8412502 {A B C P : Type'} (y : type1039 A B C P) (clauses : type1629 A B C P) : (y clauses) = (y clauses).
Proof. exact (eq_refl (y clauses)). Qed.
Lemma lem8412503 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) (y : type1039 A B C P) (clauses : type1629 A B C P) : (term5772 A B C P s s' t x t' _115320 y clauses) = (term5773 A B C P s s' t x t' _115320 y clauses).
Proof. exact (MK_COMB (@lem8412501 A B C P s s' t x t' _115320 clauses) (@lem8412502 A B C P y clauses)). Qed.
Lemma lem8412504 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (y : type1039 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5773 A B C P s s' t x t' _115320 y clauses) = (term5774 A B C P s s' t x t' y _115320 clauses).
Proof. exact (eq_refl (term5773 A B C P s s' t x t' _115320 y clauses)). Qed.
Lemma lem8412505 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (y : type1039 A B C P) (_115320 : type1038 A B C P) (clauses : type1629 A B C P) : (term5772 A B C P s s' t x t' _115320 y clauses) = (term5774 A B C P s s' t x t' y _115320 clauses).
Proof. exact (TRANS (@lem8412503 A B C P s s' t x t' _115320 y clauses) (@lem8412504 A B C P s s' t x t' y _115320 clauses)). Qed.
Lemma lem8412506 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (y : type1039 A B C P) (_115320 : type1038 A B C P) : (term5775 A B C P s s' t x t' _115320 y) = (term5776 A B C P s s' t x t' y _115320).
Proof. exact (fun_ext (fun clauses : type1629 A B C P => @lem8412505 A B C P s s' t x t' y _115320 clauses)). Qed.
Lemma lem8412507 {A B C P : Type'} : (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))) = (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B)))).
Proof. exact (eq_refl (@all (list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))))). Qed.
Lemma lem8412508 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (y : type1039 A B C P) (_115320 : type1038 A B C P) : (term5777 A B C P s s' t x t' _115320 y) = (term5778 A B C P s s' t x t' y _115320).
Proof. exact (MK_COMB (@lem8412507 A B C P) (@lem8412506 A B C P s s' t x t' y _115320)). Qed.
Lemma lem8412509 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) : (term5779 A B C P s s' t x t' _115320) = (term5780 A B C P s s' t x t' _115320).
Proof. exact (fun_ext (fun y : type1039 A B C P => @lem8412508 A B C P s s' t x t' y _115320)). Qed.
Lemma lem8412510 {A B C P : Type'} : (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> (A -> B) -> P -> B)) = (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> (A -> B) -> P -> B))). Qed.
Lemma lem8412511 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) : (term5760 A B C P s s' t x t' _115320) = (term5781 A B C P s s' t x t' _115320).
Proof. exact (MK_COMB (@lem8412510 A B C P) (@lem8412509 A B C P s s' t x t' _115320)). Qed.
Lemma lem8412512 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) : ((term5759 A B C P s s' t x t' _115320) = (term5760 A B C P s s' t x t' _115320)) = ((term5755 A B C P s s' t x t' _115320) = (term5781 A B C P s s' t x t' _115320)).
Proof. exact (MK_COMB (@lem8412500 A B C P s s' t x t' _115320) (@lem8412511 A B C P s s' t x t' _115320)). Qed.
Lemma lem8412513 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) : (term5755 A B C P s s' t x t' _115320) = (term5781 A B C P s s' t x t' _115320).
Proof. exact (EQ_MP (@lem8412512 A B C P s s' t x t' _115320) (@lem8412487 A B C P s s' t x t' _115320)). Qed.
Lemma lem8412514 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) : (term5757 A B C P s s' t t' _115320) = (term5782 A B C P s s' t t' _115320).
Proof. exact (fun_ext (fun x : type1039 A B C P => @lem8412513 A B C P s s' t x t' _115320)). Qed.
Lemma lem8412515 {A B C P : Type'} : (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> (A -> B) -> P -> B)) = (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> (A -> B) -> P -> B)).
Proof. exact (eq_refl (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> (A -> B) -> P -> B))). Qed.
Lemma lem8412516 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) : (term5758 A B C P s s' t t' _115320) = (term5783 A B C P s s' t t' _115320).
Proof. exact (MK_COMB (@lem8412515 A B C P) (@lem8412514 A B C P s s' t t' _115320)). Qed.
Lemma lem8412517 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) : (term5730 A B C P s s' t t' _115320) = (term5783 A B C P s s' t t' _115320).
Proof. exact (TRANS (@lem8412483 A B C P s s' t t' _115320) (@lem8412516 A B C P s s' t t' _115320)). Qed.
Lemma lem8412518 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5732 A B C P s s' t _115320) = (term5784 A B C P s s' t _115320).
Proof. exact (fun_ext (fun t' : type1040 A B C P => @lem8412517 A B C P s s' t t' _115320)). Qed.
Lemma lem8412519 {A B C P : Type'} : (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> C -> ((A -> B) -> P -> B) -> B)) = (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8412520 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5733 A B C P s s' t _115320) = (term5785 A B C P s s' t _115320).
Proof. exact (MK_COMB (@lem8412519 A B C P) (@lem8412518 A B C P s s' t _115320)). Qed.
Lemma lem8412521 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5707 A B C P s s' t _115320) = (term5785 A B C P s s' t _115320).
Proof. exact (TRANS (@lem8412453 A B C P s s' t _115320) (@lem8412520 A B C P s s' t _115320)). Qed.
Lemma lem8412522 {A B C P : Type'} (s : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5709 A B C P s t _115320) = (term5786 A B C P s t _115320).
Proof. exact (fun_ext (fun s' : type1035 A B C P => @lem8412521 A B C P s s' t _115320)). Qed.
Lemma lem8412523 {A B C P : Type'} : (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((A -> B) -> P -> B) -> A)) = (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8412524 {A B C P : Type'} (s : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5710 A B C P s t _115320) = (term5787 A B C P s t _115320).
Proof. exact (MK_COMB (@lem8412523 A B C P) (@lem8412522 A B C P s t _115320)). Qed.
Lemma lem8412525 {A B C P : Type'} (s : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) : (term5684 A B C P s t _115320) = (term5787 A B C P s t _115320).
Proof. exact (TRANS (@lem8412423 A B C P s t _115320) (@lem8412524 A B C P s t _115320)). Qed.
Lemma lem8412526 {A B C P : Type'} (s : type1035 A B C P) (_115320 : type1038 A B C P) : (term5686 A B C P s _115320) = (term5788 A B C P s _115320).
Proof. exact (fun_ext (fun t : type1040 A B C P => @lem8412525 A B C P s t _115320)). Qed.
Lemma lem8412527 {A B C P : Type'} : (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> C -> ((A -> B) -> P -> B) -> B)) = (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> C -> ((A -> B) -> P -> B) -> B)).
Proof. exact (eq_refl (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> C -> ((A -> B) -> P -> B) -> B))). Qed.
Lemma lem8412528 {A B C P : Type'} (s : type1035 A B C P) (_115320 : type1038 A B C P) : (term5687 A B C P s _115320) = (term5789 A B C P s _115320).
Proof. exact (MK_COMB (@lem8412527 A B C P) (@lem8412526 A B C P s _115320)). Qed.
Lemma lem8412529 {A B C P : Type'} (s : type1035 A B C P) (_115320 : type1038 A B C P) : (term5659 A B C P s _115320) = (term5789 A B C P s _115320).
Proof. exact (TRANS (@lem8412393 A B C P s _115320) (@lem8412528 A B C P s _115320)). Qed.
Lemma lem8412530 {A B C P : Type'} (_115320 : type1038 A B C P) : (term5661 A B C P _115320) = (term5790 A B C P _115320).
Proof. exact (fun_ext (fun s : type1035 A B C P => @lem8412529 A B C P s _115320)). Qed.
Lemma lem8412531 {A B C P : Type'} : (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((A -> B) -> P -> B) -> A)) = (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((A -> B) -> P -> B) -> A)).
Proof. exact (eq_refl (@ex ((list (prod (((A -> B) -> P -> B) -> A) (C -> ((A -> B) -> P -> B) -> B))) -> C -> ((A -> B) -> P -> B) -> A))). Qed.
Lemma lem8412532 {A B C P : Type'} (_115320 : type1038 A B C P) : (term5662 A B C P _115320) = (term5791 A B C P _115320).
Proof. exact (MK_COMB (@lem8412531 A B C P) (@lem8412530 A B C P _115320)). Qed.
Lemma lem8412533 {A B C P : Type'} (_115320 : type1038 A B C P) : (term5639 A B C P _115320) = (term5791 A B C P _115320).
Proof. exact (TRANS (@lem8412363 A B C P _115320) (@lem8412532 A B C P _115320)). Qed.
Lemma lem8412535 {A B C P : Type'} (_115320 : type1038 A B C P) : (term5381 A B C P _115320) = (term5791 A B C P _115320).
Proof. exact (TRANS (@lem8412333 A B C P _115320) (@lem8412533 A B C P _115320)). Qed.
Lemma lem8412536 {A B C P : Type'} (_115320 : type1038 A B C P) : (term945 A B C P _115320) = (term5791 A B C P _115320).
Proof. exact (TRANS (@lem8411841 A B C P _115320) (@lem8412535 A B C P _115320)). Qed.
Lemma lem8412537 {A B C P : Type'} (_115320 : type1038 A B C P) (h1 : term945 A B C P _115320) : term5791 A B C P _115320.
Proof. exact (EQ_MP (@lem8412536 A B C P _115320) (@lem8401047 A B C P _115320 h1)). Qed.
Lemma lem8412538 {A B C P : Type'} (s : type1035 A B C P) (_115320 : type1038 A B C P) (h1 : term5789 A B C P s _115320) : term5789 A B C P s _115320.
Proof. exact (h1). Qed.
Lemma lem8412539 {A B C P : Type'} (s : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) (h1 : term5787 A B C P s t _115320) : term5787 A B C P s t _115320.
Proof. exact (h1). Qed.
Lemma lem8412540 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) (h1 : term5785 A B C P s s' t _115320) : term5785 A B C P s s' t _115320.
Proof. exact (h1). Qed.
Lemma lem8412541 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) (h1 : term5783 A B C P s s' t t' _115320) : term5783 A B C P s s' t t' _115320.
Proof. exact (h1). Qed.
Lemma lem8412542 {A B C P : Type'} (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) (h1 : term5781 A B C P s s' t x t' _115320) : term5781 A B C P s s' t x t' _115320.
Proof. exact (h1). Qed.
Lemma lem8412544 {A B C P : Type'} (s'' : type1062 A B C P) (_115319 : type1061 A B C P) (h1 : term5326 A B C P s'' _115319) : term5326 A B C P s'' _115319.
Proof. exact (h1). Qed.
Lemma lem8412545 {A B C P : Type'} (s'' : type1062 A B C P) (t'' : type1063 A B C P) (_115319 : type1061 A B C P) (h1 : term5324 A B C P s'' t'' _115319) : term5324 A B C P s'' t'' _115319.
Proof. exact (h1). Qed.
Lemma lem8412546 {A B C P : Type'} (s'' : type1062 A B C P) (s''' : type1062 A B C P) (t'' : type1063 A B C P) (_115319 : type1061 A B C P) (h1 : term5322 A B C P s'' s''' t'' _115319) : term5322 A B C P s'' s''' t'' _115319.
Proof. exact (h1). Qed.
Lemma lem8412547 {A B C P : Type'} (s'' : type1062 A B C P) (s''' : type1062 A B C P) (t'' : type1063 A B C P) (t''' : type1063 A B C P) (_115319 : type1061 A B C P) (h1 : term5320 A B C P s'' s''' t'' t''' _115319) : term5320 A B C P s'' s''' t'' t''' _115319.
Proof. exact (h1). Qed.
Lemma lem8412548 {A B C P : Type'} (s'' : type1062 A B C P) (s''' : type1062 A B C P) (t'' : type1063 A B C P) (x' : type1064 A B C P) (t''' : type1063 A B C P) (_115319 : type1061 A B C P) (h1 : term5318 A B C P s'' s''' t'' x' t''' _115319) : term5318 A B C P s'' s''' t'' x' t''' _115319.
Proof. exact (h1). Qed.
Lemma lem8412550 {A B C P : Type'} (s'''' : type1050 A B C P) (_115318 : type1049 A B C P) (h1 : term4863 A B C P s'''' _115318) : term4863 A B C P s'''' _115318.
Proof. exact (h1). Qed.
Lemma lem8412551 {A B C P : Type'} (s'''' : type1050 A B C P) (t'''' : type1052 A B C P) (_115318 : type1049 A B C P) (h1 : term4861 A B C P s'''' t'''' _115318) : term4861 A B C P s'''' t'''' _115318.
Proof. exact (h1). Qed.
Lemma lem8412552 {A B C P : Type'} (s'''' : type1050 A B C P) (s''''' : type1050 A B C P) (t'''' : type1052 A B C P) (_115318 : type1049 A B C P) (h1 : term4859 A B C P s'''' s''''' t'''' _115318) : term4859 A B C P s'''' s''''' t'''' _115318.
Proof. exact (h1). Qed.
Lemma lem8412553 {A B C P : Type'} (s'''' : type1050 A B C P) (s''''' : type1050 A B C P) (t'''' : type1052 A B C P) (t''''' : type1052 A B C P) (_115318 : type1049 A B C P) (h1 : term4857 A B C P s'''' s''''' t'''' t''''' _115318) : term4857 A B C P s'''' s''''' t'''' t''''' _115318.
Proof. exact (h1). Qed.
Lemma lem8412554 {A B C P : Type'} (s'''' : type1050 A B C P) (s''''' : type1050 A B C P) (t'''' : type1052 A B C P) (x'' : type1051 A B C P) (t''''' : type1052 A B C P) (_115318 : type1049 A B C P) (h1 : term4855 A B C P s'''' s''''' t'''' x'' t''''' _115318) : term4855 A B C P s'''' s''''' t'''' x'' t''''' _115318.
Proof. exact (h1). Qed.
Lemma lem8412556 {B C P : Type'} (s'''''' : type1094 B C P) (_115317 : type1092 B C P) (h1 : term3478 B C P s'''''' _115317) : term3478 B C P s'''''' _115317.
Proof. exact (h1). Qed.
Lemma lem8412557 {B C P : Type'} (s'''''' : type1094 B C P) (t'''''' : type1093 B C P) (_115317 : type1092 B C P) (h1 : term3476 B C P s'''''' t'''''' _115317) : term3476 B C P s'''''' t'''''' _115317.
Proof. exact (h1). Qed.
Lemma lem8412558 {B C P : Type'} (s'''''' : type1094 B C P) (s''''''' : type1094 B C P) (t'''''' : type1093 B C P) (_115317 : type1092 B C P) (h1 : term3474 B C P s'''''' s''''''' t'''''' _115317) : term3474 B C P s'''''' s''''''' t'''''' _115317.
Proof. exact (h1). Qed.
Lemma lem8412559 {B C P : Type'} (s'''''' : type1094 B C P) (s''''''' : type1094 B C P) (t'''''' : type1093 B C P) (t''''''' : type1093 B C P) (_115317 : type1092 B C P) (h1 : term3472 B C P s'''''' s''''''' t'''''' t''''''' _115317) : term3472 B C P s'''''' s''''''' t'''''' t''''''' _115317.
Proof. exact (h1). Qed.
Lemma lem8412560 {B C P : Type'} (s'''''' : type1094 B C P) (s''''''' : type1094 B C P) (t'''''' : type1093 B C P) (x''' : type1095 B C P) (t''''''' : type1093 B C P) (_115317 : type1092 B C P) (h1 : term3470 B C P s'''''' s''''''' t'''''' x''' t''''''' _115317) : term3470 B C P s'''''' s''''''' t'''''' x''' t''''''' _115317.
Proof. exact (h1). Qed.
Lemma lem8412562 {A B P : Type'} (s'''''''' : type1082 A B P) (_115314 : type1080 A B P) (h1 : term4396 A B P s'''''''' _115314) : term4396 A B P s'''''''' _115314.
Proof. exact (h1). Qed.
Lemma lem8412563 {A B P : Type'} (s'''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (_115314 : type1080 A B P) (h1 : term4394 A B P s'''''''' t'''''''' _115314) : term4394 A B P s'''''''' t'''''''' _115314.
Proof. exact (h1). Qed.
Lemma lem8412564 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (_115314 : type1080 A B P) (h1 : term4392 A B P s'''''''' s''''''''' t'''''''' _115314) : term4392 A B P s'''''''' s''''''''' t'''''''' _115314.
Proof. exact (h1). Qed.
Lemma lem8412565 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (t''''''''' : type1081 A B P) (_115314 : type1080 A B P) (h1 : term4390 A B P s'''''''' s''''''''' t'''''''' t''''''''' _115314) : term4390 A B P s'''''''' s''''''''' t'''''''' t''''''''' _115314.
Proof. exact (h1). Qed.
Lemma lem8412566 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (_115314 : type1080 A B P) (h1 : term4388 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' _115314) : term4388 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' _115314.
Proof. exact (h1). Qed.
Lemma lem8412567 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314.
Proof. exact (h1). Qed.
Lemma lem8412568 {A B C P : Type'} (s'''''''''' : type1121 A B C P) (_115316 : type1115 A B C P) (h1 : term3933 A B C P s'''''''''' _115316) : term3933 A B C P s'''''''''' _115316.
Proof. exact (h1). Qed.
Lemma lem8412569 {A B C P : Type'} (s'''''''''' : type1121 A B C P) (t'''''''''' : type1120 A B C P) (_115316 : type1115 A B C P) (h1 : term3931 A B C P s'''''''''' t'''''''''' _115316) : term3931 A B C P s'''''''''' t'''''''''' _115316.
Proof. exact (h1). Qed.
Lemma lem8412570 {A B C P : Type'} (s'''''''''' : type1121 A B C P) (s''''''''''' : type1121 A B C P) (t'''''''''' : type1120 A B C P) (_115316 : type1115 A B C P) (h1 : term3929 A B C P s'''''''''' s''''''''''' t'''''''''' _115316) : term3929 A B C P s'''''''''' s''''''''''' t'''''''''' _115316.
Proof. exact (h1). Qed.
Lemma lem8412571 {A B C P : Type'} (s'''''''''' : type1121 A B C P) (s''''''''''' : type1121 A B C P) (t'''''''''' : type1120 A B C P) (t''''''''''' : type1120 A B C P) (_115316 : type1115 A B C P) (h1 : term3927 A B C P s'''''''''' s''''''''''' t'''''''''' t''''''''''' _115316) : term3927 A B C P s'''''''''' s''''''''''' t'''''''''' t''''''''''' _115316.
Proof. exact (h1). Qed.
Lemma lem8412572 {A B C P : Type'} (s'''''''''' : type1121 A B C P) (s''''''''''' : type1121 A B C P) (t'''''''''' : type1120 A B C P) (x''''' : type1122 A B C P) (t''''''''''' : type1120 A B C P) (_115316 : type1115 A B C P) (h1 : term3925 A B C P s'''''''''' s''''''''''' t'''''''''' x''''' t''''''''''' _115316) : term3925 A B C P s'''''''''' s''''''''''' t'''''''''' x''''' t''''''''''' _115316.
Proof. exact (h1). Qed.
Lemma lem8412574 {A C P : Type'} (s'''''''''''' : type1094 A C P) (_115315 : type1092 A C P) (h1 : term3478 A C P s'''''''''''' _115315) : term3478 A C P s'''''''''''' _115315.
Proof. exact (h1). Qed.
Lemma lem8412575 {A C P : Type'} (s'''''''''''' : type1094 A C P) (t'''''''''''' : type1093 A C P) (_115315 : type1092 A C P) (h1 : term3476 A C P s'''''''''''' t'''''''''''' _115315) : term3476 A C P s'''''''''''' t'''''''''''' _115315.
Proof. exact (h1). Qed.
Lemma lem8412576 {A C P : Type'} (s'''''''''''' : type1094 A C P) (s''''''''''''' : type1094 A C P) (t'''''''''''' : type1093 A C P) (_115315 : type1092 A C P) (h1 : term3474 A C P s'''''''''''' s''''''''''''' t'''''''''''' _115315) : term3474 A C P s'''''''''''' s''''''''''''' t'''''''''''' _115315.
Proof. exact (h1). Qed.
Lemma lem8412577 {A C P : Type'} (s'''''''''''' : type1094 A C P) (s''''''''''''' : type1094 A C P) (t'''''''''''' : type1093 A C P) (t''''''''''''' : type1093 A C P) (_115315 : type1092 A C P) (h1 : term3472 A C P s'''''''''''' s''''''''''''' t'''''''''''' t''''''''''''' _115315) : term3472 A C P s'''''''''''' s''''''''''''' t'''''''''''' t''''''''''''' _115315.
Proof. exact (h1). Qed.
Lemma lem8412578 {A C P : Type'} (s'''''''''''' : type1094 A C P) (s''''''''''''' : type1094 A C P) (t'''''''''''' : type1093 A C P) (x'''''' : type1095 A C P) (t''''''''''''' : type1093 A C P) (_115315 : type1092 A C P) (h1 : term3470 A C P s'''''''''''' s''''''''''''' t'''''''''''' x'''''' t''''''''''''' _115315) : term3470 A C P s'''''''''''' s''''''''''''' t'''''''''''' x'''''' t''''''''''''' _115315.
Proof. exact (h1). Qed.
Lemma lem8412580 {A B P : Type'} (s'''''''''''''' : type1079 A B P) (_115314 : type1080 A B P) (h1 : term2983 A B P s'''''''''''''' _115314) : term2983 A B P s'''''''''''''' _115314.
Proof. exact (h1). Qed.
Lemma lem8412582 {A C P : Type'} (s''''''''''''''' : type1091 A C P) (_115315 : type1092 A C P) (h1 : term2345 A C P s''''''''''''''' _115315) : term2345 A C P s''''''''''''''' _115315.
Proof. exact (h1). Qed.
Lemma lem8412584 {A B C P : Type'} (s'''''''''''''''' : type1114 A B C P) (_115316 : type1115 A B C P) (h1 : term2663 A B C P s'''''''''''''''' _115316) : term2663 A B C P s'''''''''''''''' _115316.
Proof. exact (h1). Qed.
Lemma lem8412586 {B C P : Type'} (s''''''''''''''''' : type1091 B C P) (_115317 : type1092 B C P) (h1 : term2345 B C P s''''''''''''''''' _115317) : term2345 B C P s''''''''''''''''' _115317.
Proof. exact (h1). Qed.
Lemma lem8412588 {A B C P : Type'} (s'''''''''''''''''' : type1047 A B C P) (_115318 : type1049 A B C P) (h1 : term2019 A B C P s'''''''''''''''''' _115318) : term2019 A B C P s'''''''''''''''''' _115318.
Proof. exact (h1). Qed.
Lemma lem8412590 {A B C P : Type'} (s''''''''''''''''''' : type1059 A B C P) (_115319 : type1061 A B C P) (h1 : term1693 A B C P s''''''''''''''''''' _115319) : term1693 A B C P s''''''''''''''''''' _115319.
Proof. exact (h1). Qed.
Lemma lem8412592 {A B C P : Type'} (s'''''''''''''''''''' : type1036 A B C P) (_115320 : type1038 A B C P) (h1 : term1367 A B C P s'''''''''''''''''''' _115320) : term1367 A B C P s'''''''''''''''''''' _115320.
Proof. exact (h1). Qed.
Lemma lem8412594 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8412601 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8412602 {A B P : Type'} (f : type558 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> B) f x).
Proof. exact (@lem8412601 (A -> B) (P -> B) f x). Qed.
Lemma lem8412603 {A B P : Type'} (t : type558 A B P) (f : A -> B) : (t f) = (@I ((A -> B) -> P -> B) t f).
Proof. exact (@lem8412602 A B P t f). Qed.
Lemma lem8412604 {P : Type'} (x : P) : x = x.
Proof. exact (eq_refl x). Qed.
Lemma lem8412605 {A B P : Type'} (t : type558 A B P) (f : A -> B) (x : P) : (t f x) = (@I ((A -> B) -> P -> B) t f x).
Proof. exact (MK_COMB (@lem8412603 A B P t f) (@lem8412604 P x)). Qed.
Lemma lem8412607 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8412608 {B P : Type'} (f : P -> B) (x : P) : (f x) = (@I (P -> B) f x).
Proof. exact (@lem8412607 P B f x). Qed.
Lemma lem8412609 {A B P : Type'} (t : type558 A B P) (f : A -> B) (x : P) : (@I ((A -> B) -> P -> B) t f x) = (term5792 A B P t f x).
Proof. exact (@lem8412608 B P (@I ((A -> B) -> P -> B) t f) x). Qed.
Lemma lem8412611 {A B P : Type'} (t : type558 A B P) (f : A -> B) (x : P) : (t f x) = (term5792 A B P t f x).
Proof. exact (TRANS (@lem8412605 A B P t f x) (@lem8412609 A B P t f x)). Qed.
Lemma lem8412618 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8412619 {A B P : Type'} (f : type558 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> B) f x).
Proof. exact (@lem8412618 (A -> B) (P -> B) f x). Qed.
Lemma lem8412620 {A B P : Type'} (t' : type558 A B P) (f : A -> B) : (t' f) = (@I ((A -> B) -> P -> B) t' f).
Proof. exact (@lem8412619 A B P t' f). Qed.
Lemma lem8412621 {P : Type'} (y : P) : y = y.
Proof. exact (eq_refl y). Qed.
Lemma lem8412622 {A B P : Type'} (t' : type558 A B P) (f : A -> B) (y : P) : (t' f y) = (@I ((A -> B) -> P -> B) t' f y).
Proof. exact (MK_COMB (@lem8412620 A B P t' f) (@lem8412621 P y)). Qed.
Lemma lem8412624 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8412625 {B P : Type'} (f : P -> B) (x : P) : (f x) = (@I (P -> B) f x).
Proof. exact (@lem8412624 P B f x). Qed.
Lemma lem8412626 {A B P : Type'} (t' : type558 A B P) (f : A -> B) (y : P) : (@I ((A -> B) -> P -> B) t' f y) = (term5792 A B P t' f y).
Proof. exact (@lem8412625 B P (@I ((A -> B) -> P -> B) t' f) y). Qed.
Lemma lem8412628 {A B P : Type'} (t' : type558 A B P) (f : A -> B) (y : P) : (t' f y) = (term5792 A B P t' f y).
Proof. exact (TRANS (@lem8412622 A B P t' f y) (@lem8412626 A B P t' f y)). Qed.
Lemma lem8412629 {A B P : Type'} (t : type558 A B P) (f : A -> B) (x : P) : (term5793 A B P t f x) = (term5794 A B P t f x).
Proof. exact (MK_COMB (@lem8412594 B) (@lem8412611 A B P t f x)). Qed.
Lemma lem8412630 {A B P : Type'} (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) (y : P) : ((t f x) = (t' f y)) = ((term5792 A B P t f x) = (term5792 A B P t' f y)).
Proof. exact (MK_COMB (@lem8412629 A B P t f x) (@lem8412628 A B P t' f y)). Qed.
Lemma lem8412631 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8412632 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem8412637 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8412638 {A P : Type'} (f : P -> A) (x : P) : (f x) = (@I (P -> A) f x).
Proof. exact (@lem8412637 P A f x). Qed.
Lemma lem8412640 {A P : Type'} (s : P -> A) (x : P) : (s x) = (@I (P -> A) s x).
Proof. exact (@lem8412638 A P s x). Qed.
Lemma lem8412645 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8412646 {A P : Type'} (f : P -> A) (x : P) : (f x) = (@I (P -> A) f x).
Proof. exact (@lem8412645 P A f x). Qed.
Lemma lem8412648 {A P : Type'} (s' : P -> A) (y : P) : (s' y) = (@I (P -> A) s' y).
Proof. exact (@lem8412646 A P s' y). Qed.
Lemma lem8412649 {A P : Type'} (s : P -> A) (x : P) : (term5795 A P s x) = (term5796 A P s x).
Proof. exact (MK_COMB (@lem8412632 A) (@lem8412640 A P s x)). Qed.
Lemma lem8412650 {A P : Type'} (s : P -> A) (x : P) (s' : P -> A) (y : P) : ((s x) = (s' y)) = ((@I (P -> A) s x) = (@I (P -> A) s' y)).
Proof. exact (MK_COMB (@lem8412649 A P s x) (@lem8412648 A P s' y)). Qed.
Lemma lem8412651 {A P : Type'} (s : P -> A) (x : P) (s' : P -> A) (y : P) : (term2989 A P s x s' y) = (term5797 A P s x s' y).
Proof. exact (MK_COMB (@lem8412631) (@lem8412650 A P s x s' y)). Qed.
Lemma lem8412652 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8412653 {A B P : Type'} : (@List.In (prod (P -> A) ((A -> B) -> P -> B))) = (@List.In (prod (P -> A) ((A -> B) -> P -> B))).
Proof. exact (eq_refl (@List.In (prod (P -> A) ((A -> B) -> P -> B)))). Qed.
Lemma lem8412660 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8412661 {A B P : Type'} (f : type883 A B P) (x : P -> A) : (f x) = (@I ((P -> A) -> ((A -> B) -> P -> B) -> prod (P -> A) ((A -> B) -> P -> B)) f x).
Proof. exact (@lem8412660 (P -> A) (type114 A B P) f x). Qed.
Lemma lem8412662 {A B P : Type'} (s' : P -> A) : (@pair (P -> A) ((A -> B) -> P -> B) s') = (@I ((P -> A) -> ((A -> B) -> P -> B) -> prod (P -> A) ((A -> B) -> P -> B)) (@pair (P -> A) ((A -> B) -> P -> B)) s').
Proof. exact (@lem8412661 A B P (@pair (P -> A) ((A -> B) -> P -> B)) s'). Qed.
Lemma lem8412663 {A B P : Type'} (t' : type558 A B P) : t' = t'.
Proof. exact (eq_refl t'). Qed.
Lemma lem8412664 {A B P : Type'} (s' : P -> A) (t' : type558 A B P) : (@pair (P -> A) ((A -> B) -> P -> B) s' t') = (@I ((P -> A) -> ((A -> B) -> P -> B) -> prod (P -> A) ((A -> B) -> P -> B)) (@pair (P -> A) ((A -> B) -> P -> B)) s' t').
Proof. exact (MK_COMB (@lem8412662 A B P s') (@lem8412663 A B P t')). Qed.
Lemma lem8412666 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8412667 {A B P : Type'} (f : type114 A B P) (x : type558 A B P) : (f x) = (@I (((A -> B) -> P -> B) -> prod (P -> A) ((A -> B) -> P -> B)) f x).
Proof. exact (@lem8412666 (type558 A B P) (type1645 A B P) f x). Qed.
Lemma lem8412668 {A B P : Type'} (s' : P -> A) (t' : type558 A B P) : (@I ((P -> A) -> ((A -> B) -> P -> B) -> prod (P -> A) ((A -> B) -> P -> B)) (@pair (P -> A) ((A -> B) -> P -> B)) s' t') = (term5798 A B P s' t').
Proof. exact (@lem8412667 A B P (@I ((P -> A) -> ((A -> B) -> P -> B) -> prod (P -> A) ((A -> B) -> P -> B)) (@pair (P -> A) ((A -> B) -> P -> B)) s') t'). Qed.
Lemma lem8412670 {A B P : Type'} (s' : P -> A) (t' : type558 A B P) : (@pair (P -> A) ((A -> B) -> P -> B) s' t') = (term5798 A B P s' t').
Proof. exact (TRANS (@lem8412664 A B P s' t') (@lem8412668 A B P s' t')). Qed.
Lemma lem8412671 {A B P : Type'} (clauses : type1635 A B P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8412672 {A B P : Type'} (s' : P -> A) (t' : type558 A B P) : (term5799 A B P s' t') = (term5800 A B P s' t').
Proof. exact (MK_COMB (@lem8412653 A B P) (@lem8412670 A B P s' t')). Qed.
Lemma lem8412673 {A B P : Type'} (s' : P -> A) (t' : type558 A B P) (clauses : type1635 A B P) : (term2988 A B P s' t' clauses) = (term5801 A B P s' t' clauses).
Proof. exact (MK_COMB (@lem8412672 A B P s' t') (@lem8412671 A B P clauses)). Qed.
Lemma lem8412675 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8412676 {A B P : Type'} (f : type1174 A B P) (x : type1645 A B P) : (f x) = (@I ((prod (P -> A) ((A -> B) -> P -> B)) -> (list (prod (P -> A) ((A -> B) -> P -> B))) -> Prop) f x).
Proof. exact (@lem8412675 (type1645 A B P) (type1084 A B P) f x). Qed.
Lemma lem8412677 {A B P : Type'} (s' : P -> A) (t' : type558 A B P) : (term5800 A B P s' t') = (term5802 A B P s' t').
Proof. exact (@lem8412676 A B P (@List.In (prod (P -> A) ((A -> B) -> P -> B))) (term5798 A B P s' t')). Qed.
Lemma lem8412678 {A B P : Type'} (clauses : type1635 A B P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8412679 {A B P : Type'} (s' : P -> A) (t' : type558 A B P) (clauses : type1635 A B P) : (term5801 A B P s' t' clauses) = (term5803 A B P s' t' clauses).
Proof. exact (MK_COMB (@lem8412677 A B P s' t') (@lem8412678 A B P clauses)). Qed.
Lemma lem8412681 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8412682 {A B P : Type'} (f : type1084 A B P) (x : type1635 A B P) : (f x) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> Prop) f x).
Proof. exact (@lem8412681 (type1635 A B P) Prop f x). Qed.
Lemma lem8412683 {A B P : Type'} (s' : P -> A) (t' : type558 A B P) (clauses : type1635 A B P) : (term5803 A B P s' t' clauses) = (term5804 A B P s' t' clauses).
Proof. exact (@lem8412682 A B P (term5802 A B P s' t') clauses). Qed.
Lemma lem8412684 {A B P : Type'} (s' : P -> A) (t' : type558 A B P) (clauses : type1635 A B P) : (term5801 A B P s' t' clauses) = (term5804 A B P s' t' clauses).
Proof. exact (TRANS (@lem8412679 A B P s' t' clauses) (@lem8412683 A B P s' t' clauses)). Qed.
Lemma lem8412685 {A B P : Type'} (s' : P -> A) (t' : type558 A B P) (clauses : type1635 A B P) : (term2988 A B P s' t' clauses) = (term5804 A B P s' t' clauses).
Proof. exact (TRANS (@lem8412673 A B P s' t' clauses) (@lem8412684 A B P s' t' clauses)). Qed.
Lemma lem8412686 {A B P : Type'} (s' : P -> A) (t' : type558 A B P) (clauses : type1635 A B P) : (term5805 A B P s' t' clauses) = (term5806 A B P s' t' clauses).
Proof. exact (MK_COMB (@lem8412652) (@lem8412685 A B P s' t' clauses)). Qed.
Lemma lem8412687 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8412688 {A B P : Type'} : (@List.In (prod (P -> A) ((A -> B) -> P -> B))) = (@List.In (prod (P -> A) ((A -> B) -> P -> B))).
Proof. exact (eq_refl (@List.In (prod (P -> A) ((A -> B) -> P -> B)))). Qed.
Lemma lem8412695 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8412696 {A B P : Type'} (f : type883 A B P) (x : P -> A) : (f x) = (@I ((P -> A) -> ((A -> B) -> P -> B) -> prod (P -> A) ((A -> B) -> P -> B)) f x).
Proof. exact (@lem8412695 (P -> A) (type114 A B P) f x). Qed.
Lemma lem8412697 {A B P : Type'} (s : P -> A) : (@pair (P -> A) ((A -> B) -> P -> B) s) = (@I ((P -> A) -> ((A -> B) -> P -> B) -> prod (P -> A) ((A -> B) -> P -> B)) (@pair (P -> A) ((A -> B) -> P -> B)) s).
Proof. exact (@lem8412696 A B P (@pair (P -> A) ((A -> B) -> P -> B)) s). Qed.
Lemma lem8412698 {A B P : Type'} (t : type558 A B P) : t = t.
Proof. exact (eq_refl t). Qed.
Lemma lem8412699 {A B P : Type'} (s : P -> A) (t : type558 A B P) : (@pair (P -> A) ((A -> B) -> P -> B) s t) = (@I ((P -> A) -> ((A -> B) -> P -> B) -> prod (P -> A) ((A -> B) -> P -> B)) (@pair (P -> A) ((A -> B) -> P -> B)) s t).
Proof. exact (MK_COMB (@lem8412697 A B P s) (@lem8412698 A B P t)). Qed.
Lemma lem8412701 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8412702 {A B P : Type'} (f : type114 A B P) (x : type558 A B P) : (f x) = (@I (((A -> B) -> P -> B) -> prod (P -> A) ((A -> B) -> P -> B)) f x).
Proof. exact (@lem8412701 (type558 A B P) (type1645 A B P) f x). Qed.
Lemma lem8412703 {A B P : Type'} (s : P -> A) (t : type558 A B P) : (@I ((P -> A) -> ((A -> B) -> P -> B) -> prod (P -> A) ((A -> B) -> P -> B)) (@pair (P -> A) ((A -> B) -> P -> B)) s t) = (term5798 A B P s t).
Proof. exact (@lem8412702 A B P (@I ((P -> A) -> ((A -> B) -> P -> B) -> prod (P -> A) ((A -> B) -> P -> B)) (@pair (P -> A) ((A -> B) -> P -> B)) s) t). Qed.
Lemma lem8412705 {A B P : Type'} (s : P -> A) (t : type558 A B P) : (@pair (P -> A) ((A -> B) -> P -> B) s t) = (term5798 A B P s t).
Proof. exact (TRANS (@lem8412699 A B P s t) (@lem8412703 A B P s t)). Qed.
Lemma lem8412706 {A B P : Type'} (clauses : type1635 A B P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8412707 {A B P : Type'} (s : P -> A) (t : type558 A B P) : (term5799 A B P s t) = (term5800 A B P s t).
Proof. exact (MK_COMB (@lem8412688 A B P) (@lem8412705 A B P s t)). Qed.
Lemma lem8412708 {A B P : Type'} (s : P -> A) (t : type558 A B P) (clauses : type1635 A B P) : (term2988 A B P s t clauses) = (term5801 A B P s t clauses).
Proof. exact (MK_COMB (@lem8412707 A B P s t) (@lem8412706 A B P clauses)). Qed.
Lemma lem8412710 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8412711 {A B P : Type'} (f : type1174 A B P) (x : type1645 A B P) : (f x) = (@I ((prod (P -> A) ((A -> B) -> P -> B)) -> (list (prod (P -> A) ((A -> B) -> P -> B))) -> Prop) f x).
Proof. exact (@lem8412710 (type1645 A B P) (type1084 A B P) f x). Qed.
Lemma lem8412712 {A B P : Type'} (s : P -> A) (t : type558 A B P) : (term5800 A B P s t) = (term5802 A B P s t).
Proof. exact (@lem8412711 A B P (@List.In (prod (P -> A) ((A -> B) -> P -> B))) (term5798 A B P s t)). Qed.
Lemma lem8412713 {A B P : Type'} (clauses : type1635 A B P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8412714 {A B P : Type'} (s : P -> A) (t : type558 A B P) (clauses : type1635 A B P) : (term5801 A B P s t clauses) = (term5803 A B P s t clauses).
Proof. exact (MK_COMB (@lem8412712 A B P s t) (@lem8412713 A B P clauses)). Qed.
Lemma lem8412716 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8412717 {A B P : Type'} (f : type1084 A B P) (x : type1635 A B P) : (f x) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> Prop) f x).
Proof. exact (@lem8412716 (type1635 A B P) Prop f x). Qed.
Lemma lem8412718 {A B P : Type'} (s : P -> A) (t : type558 A B P) (clauses : type1635 A B P) : (term5803 A B P s t clauses) = (term5804 A B P s t clauses).
Proof. exact (@lem8412717 A B P (term5802 A B P s t) clauses). Qed.
Lemma lem8412719 {A B P : Type'} (s : P -> A) (t : type558 A B P) (clauses : type1635 A B P) : (term5801 A B P s t clauses) = (term5804 A B P s t clauses).
Proof. exact (TRANS (@lem8412714 A B P s t clauses) (@lem8412718 A B P s t clauses)). Qed.
Lemma lem8412720 {A B P : Type'} (s : P -> A) (t : type558 A B P) (clauses : type1635 A B P) : (term2988 A B P s t clauses) = (term5804 A B P s t clauses).
Proof. exact (TRANS (@lem8412708 A B P s t clauses) (@lem8412719 A B P s t clauses)). Qed.
Lemma lem8412721 {A B P : Type'} (s : P -> A) (t : type558 A B P) (clauses : type1635 A B P) : (term5805 A B P s t clauses) = (term5806 A B P s t clauses).
Proof. exact (MK_COMB (@lem8412687) (@lem8412720 A B P s t clauses)). Qed.
Lemma lem8412722 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8412723 {A B P : Type'} (s : P -> A) (t : type558 A B P) (clauses : type1635 A B P) : (term5807 A B P s t clauses) = (term5808 A B P s t clauses).
Proof. exact (MK_COMB (@lem8412722) (@lem8412721 A B P s t clauses)). Qed.
Lemma lem8412724 {A B P : Type'} (s : P -> A) (t : type558 A B P) (s' : P -> A) (t' : type558 A B P) (clauses : type1635 A B P) : (term2987 A B P s t s' t' clauses) = (term5809 A B P s t s' t' clauses).
Proof. exact (MK_COMB (@lem8412723 A B P s t clauses) (@lem8412686 A B P s' t' clauses)). Qed.
Lemma lem8412725 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8412726 {A B P : Type'} (s : P -> A) (t : type558 A B P) (s' : P -> A) (t' : type558 A B P) (clauses : type1635 A B P) : (term2991 A B P s t s' t' clauses) = (term5810 A B P s t s' t' clauses).
Proof. exact (MK_COMB (@lem8412725) (@lem8412724 A B P s t s' t' clauses)). Qed.
Lemma lem8412727 {A B P : Type'} (t : type558 A B P) (t' : type558 A B P) (clauses : type1635 A B P) (s : P -> A) (x : P) (s' : P -> A) (y : P) : (term2993 A B P t t' clauses s x s' y) = (term5811 A B P t t' clauses s x s' y).
Proof. exact (MK_COMB (@lem8412726 A B P s t s' t' clauses) (@lem8412651 A P s x s' y)). Qed.
Lemma lem8412728 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8412729 {A B P : Type'} (t : type558 A B P) (t' : type558 A B P) (clauses : type1635 A B P) (s : P -> A) (x : P) (s' : P -> A) (y : P) : (term2996 A B P t t' clauses s x s' y) = (term5812 A B P t t' clauses s x s' y).
Proof. exact (MK_COMB (@lem8412728) (@lem8412727 A B P t t' clauses s x s' y)). Qed.
Lemma lem8412730 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) (y : P) : (term2998 A B P clauses s s' t x t' f y) = (term5813 A B P clauses s s' t x t' f y).
Proof. exact (MK_COMB (@lem8412729 A B P t t' clauses s x s' y) (@lem8412630 A B P t x t' f y)). Qed.
Lemma lem8412731 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term3000 A B P clauses s s' t x t' f) = (term5814 A B P clauses s s' t x t' f).
Proof. exact (fun_ext (fun y : P => @lem8412730 A B P clauses s s' t x t' f y)). Qed.
Lemma lem8412732 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8412733 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term3001 A B P clauses s s' t x t' f) = (term5815 A B P clauses s s' t x t' f).
Proof. exact (MK_COMB (@lem8412732 P) (@lem8412731 A B P clauses s s' t x t' f)). Qed.
Lemma lem8412734 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term3002 A B P clauses s s' t t' f) = (term5816 A B P clauses s s' t t' f).
Proof. exact (fun_ext (fun x : P => @lem8412733 A B P clauses s s' t x t' f)). Qed.
Lemma lem8412735 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8412736 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term3003 A B P clauses s s' t t' f) = (term5817 A B P clauses s s' t t' f).
Proof. exact (MK_COMB (@lem8412735 P) (@lem8412734 A B P clauses s s' t t' f)). Qed.
Lemma lem8412737 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term3004 A B P clauses s s' t t') = (term5818 A B P clauses s s' t t').
Proof. exact (fun_ext (fun f : A -> B => @lem8412736 A B P clauses s s' t t' f)). Qed.
Lemma lem8412738 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8412739 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term3005 A B P clauses s s' t t') = (term5819 A B P clauses s s' t t').
Proof. exact (MK_COMB (@lem8412738 A B) (@lem8412737 A B P clauses s s' t t')). Qed.
Lemma lem8412740 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term3006 A B P clauses s s' t) = (term5820 A B P clauses s s' t).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8412739 A B P clauses s s' t t')). Qed.
Lemma lem8412741 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8412742 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term3007 A B P clauses s s' t) = (term5821 A B P clauses s s' t).
Proof. exact (MK_COMB (@lem8412741 A B P) (@lem8412740 A B P clauses s s' t)). Qed.
Lemma lem8412743 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term3008 A B P clauses s t) = (term5822 A B P clauses s t).
Proof. exact (fun_ext (fun s' : P -> A => @lem8412742 A B P clauses s s' t)). Qed.
Lemma lem8412744 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8412745 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term3009 A B P clauses s t) = (term5823 A B P clauses s t).
Proof. exact (MK_COMB (@lem8412744 A P) (@lem8412743 A B P clauses s t)). Qed.
Lemma lem8412746 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term3010 A B P clauses s) = (term5824 A B P clauses s).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8412745 A B P clauses s t)). Qed.
Lemma lem8412747 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8412748 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term3011 A B P clauses s) = (term5825 A B P clauses s).
Proof. exact (MK_COMB (@lem8412747 A B P) (@lem8412746 A B P clauses s)). Qed.
Lemma lem8412749 {A B P : Type'} (clauses : type1635 A B P) : (term3012 A B P clauses) = (term5826 A B P clauses).
Proof. exact (fun_ext (fun s : P -> A => @lem8412748 A B P clauses s)). Qed.
Lemma lem8412750 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8412751 {A B P : Type'} (clauses : type1635 A B P) : (term3013 A B P clauses) = (term5827 A B P clauses).
Proof. exact (MK_COMB (@lem8412750 A P) (@lem8412749 A B P clauses)). Qed.
Lemma lem8412752 {A B P : Type'} (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term5827 A B P clauses.
Proof. exact (EQ_MP (@lem8412751 A B P clauses) (@lem8407037 A B P clauses h1)). Qed.
Lemma lem8412793 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8412794 {A B P : Type'} : (@List.Forall (prod (P -> A) ((A -> B) -> P -> B))) = (@List.Forall (prod (P -> A) ((A -> B) -> P -> B))).
Proof. exact (eq_refl (@List.Forall (prod (P -> A) ((A -> B) -> P -> B)))). Qed.
Lemma lem8412795 {A B P : Type'} : (@GABS ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) = (@GABS ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop))). Qed.
Lemma lem8412802 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8412803 {A B P : Type'} (f : type1080 A B P) (x : type1635 A B P) : (f x) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop) f x).
Proof. exact (@lem8412802 (type1635 A B P) (type512 A B P) f x). Qed.
Lemma lem8412804 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (_115314 clauses) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop) _115314 clauses).
Proof. exact (@lem8412803 A B P _115314 clauses). Qed.
Lemma lem8412805 {A B : Type'} (f : A -> B) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8412806 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (_115314 clauses f) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop) _115314 clauses f).
Proof. exact (MK_COMB (@lem8412804 A B P _115314 clauses) (@lem8412805 A B f)). Qed.
Lemma lem8412808 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8412809 {A B P : Type'} (f : type512 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop) f x).
Proof. exact (@lem8412808 (A -> B) (type301 A B P) f x). Qed.
Lemma lem8412810 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop) _115314 clauses f) = (term5828 A B P _115314 clauses f).
Proof. exact (@lem8412809 A B P (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop) _115314 clauses) f). Qed.
Lemma lem8412812 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (_115314 clauses f) = (term5828 A B P _115314 clauses f).
Proof. exact (TRANS (@lem8412806 A B P _115314 clauses f) (@lem8412810 A B P _115314 clauses f)). Qed.
Lemma lem8412813 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term388 A B P _115314 clauses f) = (term5829 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8412795 A B P) (@lem8412812 A B P _115314 clauses f)). Qed.
Lemma lem8412815 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8412816 {A B P : Type'} (f : type79 A B P) (x : type301 A B P) : (f x) = (@I ((((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop) -> (prod (P -> A) ((A -> B) -> P -> B)) -> Prop) f x).
Proof. exact (@lem8412815 (type301 A B P) (type1177 A B P) f x). Qed.
Lemma lem8412817 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term5829 A B P _115314 clauses f) = (term5830 A B P _115314 clauses f).
Proof. exact (@lem8412816 A B P (@GABS ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) (term5828 A B P _115314 clauses f)). Qed.
Lemma lem8412818 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term388 A B P _115314 clauses f) = (term5830 A B P _115314 clauses f).
Proof. exact (TRANS (@lem8412813 A B P _115314 clauses f) (@lem8412817 A B P _115314 clauses f)). Qed.
Lemma lem8412819 {A B P : Type'} (clauses : type1635 A B P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8412820 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term389 A B P _115314 clauses f) = (term5831 A B P _115314 clauses f).
Proof. exact (MK_COMB (@lem8412794 A B P) (@lem8412818 A B P _115314 clauses f)). Qed.
Lemma lem8412821 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 f clauses) = (term5832 A B P _115314 f clauses).
Proof. exact (MK_COMB (@lem8412820 A B P _115314 clauses f) (@lem8412819 A B P clauses)). Qed.
Lemma lem8412823 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8412824 {A B P : Type'} (f : type299 A B P) (x : type1177 A B P) : (f x) = (@I (((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> (list (prod (P -> A) ((A -> B) -> P -> B))) -> Prop) f x).
Proof. exact (@lem8412823 (type1177 A B P) (type1084 A B P) f x). Qed.
Lemma lem8412825 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (f : A -> B) : (term5831 A B P _115314 clauses f) = (term5833 A B P _115314 clauses f).
Proof. exact (@lem8412824 A B P (@List.Forall (prod (P -> A) ((A -> B) -> P -> B))) (term5830 A B P _115314 clauses f)). Qed.
Lemma lem8412826 {A B P : Type'} (clauses : type1635 A B P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8412827 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) : (term5832 A B P _115314 f clauses) = (term5834 A B P _115314 f clauses).
Proof. exact (MK_COMB (@lem8412825 A B P _115314 clauses f) (@lem8412826 A B P clauses)). Qed.
Lemma lem8412829 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8412830 {A B P : Type'} (f : type1084 A B P) (x : type1635 A B P) : (f x) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> Prop) f x).
Proof. exact (@lem8412829 (type1635 A B P) Prop f x). Qed.
Lemma lem8412831 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) : (term5834 A B P _115314 f clauses) = (term5835 A B P _115314 f clauses).
Proof. exact (@lem8412830 A B P (term5833 A B P _115314 clauses f) clauses). Qed.
Lemma lem8412832 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) : (term5832 A B P _115314 f clauses) = (term5835 A B P _115314 f clauses).
Proof. exact (TRANS (@lem8412827 A B P _115314 f clauses) (@lem8412831 A B P _115314 f clauses)). Qed.
Lemma lem8412833 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 f clauses) = (term5835 A B P _115314 f clauses).
Proof. exact (TRANS (@lem8412821 A B P _115314 f clauses) (@lem8412832 A B P _115314 f clauses)). Qed.
Lemma lem8412834 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) : (term449 A B P _115314 f clauses) = (term5836 A B P _115314 f clauses).
Proof. exact (MK_COMB (@lem8412793) (@lem8412833 A B P _115314 f clauses)). Qed.
Lemma lem8414368 {A B P : Type'} : (@List.Forall (prod (P -> A) ((A -> B) -> P -> B))) = (@List.Forall (prod (P -> A) ((A -> B) -> P -> B))).
Proof. exact (eq_refl (@List.Forall (prod (P -> A) ((A -> B) -> P -> B)))). Qed.
Lemma lem8414369 {A B P : Type'} : (@GABS ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) = (@GABS ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)).
Proof. exact (eq_refl (@GABS ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop))). Qed.
Lemma lem8414376 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414377 {A B P : Type'} (f : type1080 A B P) (x : type1635 A B P) : (f x) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop) f x).
Proof. exact (@lem8414376 (type1635 A B P) (type512 A B P) f x). Qed.
Lemma lem8414378 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) : (_115314 clauses) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop) _115314 clauses).
Proof. exact (@lem8414377 A B P _115314 clauses). Qed.
Lemma lem8414379 {A B : Type'} (c : A -> B) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8414380 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (c : A -> B) : (_115314 clauses c) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop) _115314 clauses c).
Proof. exact (MK_COMB (@lem8414378 A B P _115314 clauses) (@lem8414379 A B c)). Qed.
Lemma lem8414382 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414383 {A B P : Type'} (f : type512 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop) f x).
Proof. exact (@lem8414382 (A -> B) (type301 A B P) f x). Qed.
Lemma lem8414384 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (c : A -> B) : (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop) _115314 clauses c) = (term5828 A B P _115314 clauses c).
Proof. exact (@lem8414383 A B P (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop) _115314 clauses) c). Qed.
Lemma lem8414386 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (c : A -> B) : (_115314 clauses c) = (term5828 A B P _115314 clauses c).
Proof. exact (TRANS (@lem8414380 A B P _115314 clauses c) (@lem8414384 A B P _115314 clauses c)). Qed.
Lemma lem8414387 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (c : A -> B) : (term388 A B P _115314 clauses c) = (term5829 A B P _115314 clauses c).
Proof. exact (MK_COMB (@lem8414369 A B P) (@lem8414386 A B P _115314 clauses c)). Qed.
Lemma lem8414389 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414390 {A B P : Type'} (f : type79 A B P) (x : type301 A B P) : (f x) = (@I ((((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> Prop) -> (prod (P -> A) ((A -> B) -> P -> B)) -> Prop) f x).
Proof. exact (@lem8414389 (type301 A B P) (type1177 A B P) f x). Qed.
Lemma lem8414391 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5829 A B P _115314 clauses c) = (term5830 A B P _115314 clauses c).
Proof. exact (@lem8414390 A B P (@GABS ((prod (P -> A) ((A -> B) -> P -> B)) -> Prop)) (term5828 A B P _115314 clauses c)). Qed.
Lemma lem8414392 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (c : A -> B) : (term388 A B P _115314 clauses c) = (term5830 A B P _115314 clauses c).
Proof. exact (TRANS (@lem8414387 A B P _115314 clauses c) (@lem8414391 A B P _115314 clauses c)). Qed.
Lemma lem8414393 {A B P : Type'} (clauses : type1635 A B P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8414394 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (c : A -> B) : (term389 A B P _115314 clauses c) = (term5831 A B P _115314 clauses c).
Proof. exact (MK_COMB (@lem8414368 A B P) (@lem8414392 A B P _115314 clauses c)). Qed.
Lemma lem8414395 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 c clauses) = (term5832 A B P _115314 c clauses).
Proof. exact (MK_COMB (@lem8414394 A B P _115314 clauses c) (@lem8414393 A B P clauses)). Qed.
Lemma lem8414397 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414398 {A B P : Type'} (f : type299 A B P) (x : type1177 A B P) : (f x) = (@I (((prod (P -> A) ((A -> B) -> P -> B)) -> Prop) -> (list (prod (P -> A) ((A -> B) -> P -> B))) -> Prop) f x).
Proof. exact (@lem8414397 (type1177 A B P) (type1084 A B P) f x). Qed.
Lemma lem8414399 {A B P : Type'} (_115314 : type1080 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5831 A B P _115314 clauses c) = (term5833 A B P _115314 clauses c).
Proof. exact (@lem8414398 A B P (@List.Forall (prod (P -> A) ((A -> B) -> P -> B))) (term5830 A B P _115314 clauses c)). Qed.
Lemma lem8414400 {A B P : Type'} (clauses : type1635 A B P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8414401 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5832 A B P _115314 c clauses) = (term5834 A B P _115314 c clauses).
Proof. exact (MK_COMB (@lem8414399 A B P _115314 clauses c) (@lem8414400 A B P clauses)). Qed.
Lemma lem8414403 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414404 {A B P : Type'} (f : type1084 A B P) (x : type1635 A B P) : (f x) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> Prop) f x).
Proof. exact (@lem8414403 (type1635 A B P) Prop f x). Qed.
Lemma lem8414405 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5834 A B P _115314 c clauses) = (term5835 A B P _115314 c clauses).
Proof. exact (@lem8414404 A B P (term5833 A B P _115314 clauses c) clauses). Qed.
Lemma lem8414406 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5832 A B P _115314 c clauses) = (term5835 A B P _115314 c clauses).
Proof. exact (TRANS (@lem8414401 A B P _115314 c clauses) (@lem8414405 A B P _115314 c clauses)). Qed.
Lemma lem8414407 {A B P : Type'} (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term390 A B P _115314 c clauses) = (term5835 A B P _115314 c clauses).
Proof. exact (TRANS (@lem8414395 A B P _115314 c clauses) (@lem8414406 A B P _115314 c clauses)). Qed.
Lemma lem8414408 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8414409 {B : Type'} : (@eq B) = (@eq B).
Proof. exact (eq_refl (@eq B)). Qed.
Lemma lem8414420 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414421 {A B P : Type'} (f : type1083 A B P) (x : type1635 A B P) : (f x) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P) f x).
Proof. exact (@lem8414420 (type1635 A B P) (type571 A B P) f x). Qed.
Lemma lem8414422 {A B P : Type'} (x'''' : type1083 A B P) (clauses : type1635 A B P) : (x'''' clauses) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P) x'''' clauses).
Proof. exact (@lem8414421 A B P x'''' clauses). Qed.
Lemma lem8414423 {A B : Type'} (c : A -> B) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8414424 {A B P : Type'} (x'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (x'''' clauses c) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P) x'''' clauses c).
Proof. exact (MK_COMB (@lem8414422 A B P x'''' clauses) (@lem8414423 A B c)). Qed.
Lemma lem8414426 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414427 {A B P : Type'} (f : type571 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P) f x).
Proof. exact (@lem8414426 (A -> B) P f x). Qed.
Lemma lem8414428 {A B P : Type'} (x'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P) x'''' clauses c) = (term5837 A B P x'''' clauses c).
Proof. exact (@lem8414427 A B P (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P) x'''' clauses) c). Qed.
Lemma lem8414430 {A B P : Type'} (x'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (x'''' clauses c) = (term5837 A B P x'''' clauses c).
Proof. exact (TRANS (@lem8414424 A B P x'''' clauses c) (@lem8414428 A B P x'''' clauses c)). Qed.
Lemma lem8414433 {A B P : Type'} (t'''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (t'''''''' clauses c c) = (t'''''''' clauses c c).
Proof. exact (eq_refl (t'''''''' clauses c c)). Qed.
Lemma lem8414434 {A B P : Type'} (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5838 A B P t'''''''' x'''' clauses c) = (term5839 A B P t'''''''' x'''' clauses c).
Proof. exact (MK_COMB (@lem8414433 A B P t'''''''' clauses c) (@lem8414430 A B P x'''' clauses c)). Qed.
Lemma lem8414436 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414437 {A B P : Type'} (f : type1081 A B P) (x : type1635 A B P) : (f x) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B) f x).
Proof. exact (@lem8414436 (type1635 A B P) (type519 A B P) f x). Qed.
Lemma lem8414438 {A B P : Type'} (t'''''''' : type1081 A B P) (clauses : type1635 A B P) : (t'''''''' clauses) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B) t'''''''' clauses).
Proof. exact (@lem8414437 A B P t'''''''' clauses). Qed.
Lemma lem8414439 {A B : Type'} (c : A -> B) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8414440 {A B P : Type'} (t'''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (t'''''''' clauses c) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B) t'''''''' clauses c).
Proof. exact (MK_COMB (@lem8414438 A B P t'''''''' clauses) (@lem8414439 A B c)). Qed.
Lemma lem8414442 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414443 {A B P : Type'} (f : type519 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> (A -> B) -> P -> B) f x).
Proof. exact (@lem8414442 (A -> B) (type558 A B P) f x). Qed.
Lemma lem8414444 {A B P : Type'} (t'''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B) t'''''''' clauses c) = (term5840 A B P t'''''''' clauses c).
Proof. exact (@lem8414443 A B P (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B) t'''''''' clauses) c). Qed.
Lemma lem8414445 {A B P : Type'} (t'''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (t'''''''' clauses c) = (term5840 A B P t'''''''' clauses c).
Proof. exact (TRANS (@lem8414440 A B P t'''''''' clauses c) (@lem8414444 A B P t'''''''' clauses c)). Qed.
Lemma lem8414446 {A B : Type'} (c : A -> B) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8414447 {A B P : Type'} (t'''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (t'''''''' clauses c c) = (term5841 A B P t'''''''' clauses c).
Proof. exact (MK_COMB (@lem8414445 A B P t'''''''' clauses c) (@lem8414446 A B c)). Qed.
Lemma lem8414449 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414450 {A B P : Type'} (f : type558 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> B) f x).
Proof. exact (@lem8414449 (A -> B) (P -> B) f x). Qed.
Lemma lem8414451 {A B P : Type'} (t'''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5841 A B P t'''''''' clauses c) = (term5842 A B P t'''''''' clauses c).
Proof. exact (@lem8414450 A B P (term5840 A B P t'''''''' clauses c) c). Qed.
Lemma lem8414452 {A B P : Type'} (t'''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (t'''''''' clauses c c) = (term5842 A B P t'''''''' clauses c).
Proof. exact (TRANS (@lem8414447 A B P t'''''''' clauses c) (@lem8414451 A B P t'''''''' clauses c)). Qed.
Lemma lem8414453 {A B P : Type'} (x'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5837 A B P x'''' clauses c) = (term5837 A B P x'''' clauses c).
Proof. exact (eq_refl (term5837 A B P x'''' clauses c)). Qed.
Lemma lem8414454 {A B P : Type'} (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5839 A B P t'''''''' x'''' clauses c) = (term5843 A B P t'''''''' x'''' clauses c).
Proof. exact (MK_COMB (@lem8414452 A B P t'''''''' clauses c) (@lem8414453 A B P x'''' clauses c)). Qed.
Lemma lem8414456 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414457 {B P : Type'} (f : P -> B) (x : P) : (f x) = (@I (P -> B) f x).
Proof. exact (@lem8414456 P B f x). Qed.
Lemma lem8414458 {A B P : Type'} (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5843 A B P t'''''''' x'''' clauses c) = (term5844 A B P t'''''''' x'''' clauses c).
Proof. exact (@lem8414457 B P (term5842 A B P t'''''''' clauses c) (term5837 A B P x'''' clauses c)). Qed.
Lemma lem8414459 {A B P : Type'} (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5839 A B P t'''''''' x'''' clauses c) = (term5844 A B P t'''''''' x'''' clauses c).
Proof. exact (TRANS (@lem8414454 A B P t'''''''' x'''' clauses c) (@lem8414458 A B P t'''''''' x'''' clauses c)). Qed.
Lemma lem8414460 {A B P : Type'} (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5838 A B P t'''''''' x'''' clauses c) = (term5844 A B P t'''''''' x'''' clauses c).
Proof. exact (TRANS (@lem8414434 A B P t'''''''' x'''' clauses c) (@lem8414459 A B P t'''''''' x'''' clauses c)). Qed.
Lemma lem8414471 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414472 {A B P : Type'} (f : type1083 A B P) (x : type1635 A B P) : (f x) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P) f x).
Proof. exact (@lem8414471 (type1635 A B P) (type571 A B P) f x). Qed.
Lemma lem8414473 {A B P : Type'} (y'''' : type1083 A B P) (clauses : type1635 A B P) : (y'''' clauses) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P) y'''' clauses).
Proof. exact (@lem8414472 A B P y'''' clauses). Qed.
Lemma lem8414474 {A B : Type'} (c : A -> B) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8414475 {A B P : Type'} (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (y'''' clauses c) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P) y'''' clauses c).
Proof. exact (MK_COMB (@lem8414473 A B P y'''' clauses) (@lem8414474 A B c)). Qed.
Lemma lem8414477 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414478 {A B P : Type'} (f : type571 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P) f x).
Proof. exact (@lem8414477 (A -> B) P f x). Qed.
Lemma lem8414479 {A B P : Type'} (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P) y'''' clauses c) = (term5837 A B P y'''' clauses c).
Proof. exact (@lem8414478 A B P (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P) y'''' clauses) c). Qed.
Lemma lem8414481 {A B P : Type'} (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (y'''' clauses c) = (term5837 A B P y'''' clauses c).
Proof. exact (TRANS (@lem8414475 A B P y'''' clauses c) (@lem8414479 A B P y'''' clauses c)). Qed.
Lemma lem8414484 {A B P : Type'} (t''''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (t''''''''' clauses c c) = (t''''''''' clauses c c).
Proof. exact (eq_refl (t''''''''' clauses c c)). Qed.
Lemma lem8414485 {A B P : Type'} (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5838 A B P t''''''''' y'''' clauses c) = (term5839 A B P t''''''''' y'''' clauses c).
Proof. exact (MK_COMB (@lem8414484 A B P t''''''''' clauses c) (@lem8414481 A B P y'''' clauses c)). Qed.
Lemma lem8414487 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414488 {A B P : Type'} (f : type1081 A B P) (x : type1635 A B P) : (f x) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B) f x).
Proof. exact (@lem8414487 (type1635 A B P) (type519 A B P) f x). Qed.
Lemma lem8414489 {A B P : Type'} (t''''''''' : type1081 A B P) (clauses : type1635 A B P) : (t''''''''' clauses) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B) t''''''''' clauses).
Proof. exact (@lem8414488 A B P t''''''''' clauses). Qed.
Lemma lem8414490 {A B : Type'} (c : A -> B) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8414491 {A B P : Type'} (t''''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (t''''''''' clauses c) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B) t''''''''' clauses c).
Proof. exact (MK_COMB (@lem8414489 A B P t''''''''' clauses) (@lem8414490 A B c)). Qed.
Lemma lem8414493 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414494 {A B P : Type'} (f : type519 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> (A -> B) -> P -> B) f x).
Proof. exact (@lem8414493 (A -> B) (type558 A B P) f x). Qed.
Lemma lem8414495 {A B P : Type'} (t''''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B) t''''''''' clauses c) = (term5840 A B P t''''''''' clauses c).
Proof. exact (@lem8414494 A B P (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B) t''''''''' clauses) c). Qed.
Lemma lem8414496 {A B P : Type'} (t''''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (t''''''''' clauses c) = (term5840 A B P t''''''''' clauses c).
Proof. exact (TRANS (@lem8414491 A B P t''''''''' clauses c) (@lem8414495 A B P t''''''''' clauses c)). Qed.
Lemma lem8414497 {A B : Type'} (c : A -> B) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8414498 {A B P : Type'} (t''''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (t''''''''' clauses c c) = (term5841 A B P t''''''''' clauses c).
Proof. exact (MK_COMB (@lem8414496 A B P t''''''''' clauses c) (@lem8414497 A B c)). Qed.
Lemma lem8414500 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414501 {A B P : Type'} (f : type558 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> B) f x).
Proof. exact (@lem8414500 (A -> B) (P -> B) f x). Qed.
Lemma lem8414502 {A B P : Type'} (t''''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5841 A B P t''''''''' clauses c) = (term5842 A B P t''''''''' clauses c).
Proof. exact (@lem8414501 A B P (term5840 A B P t''''''''' clauses c) c). Qed.
Lemma lem8414503 {A B P : Type'} (t''''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (t''''''''' clauses c c) = (term5842 A B P t''''''''' clauses c).
Proof. exact (TRANS (@lem8414498 A B P t''''''''' clauses c) (@lem8414502 A B P t''''''''' clauses c)). Qed.
Lemma lem8414504 {A B P : Type'} (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5837 A B P y'''' clauses c) = (term5837 A B P y'''' clauses c).
Proof. exact (eq_refl (term5837 A B P y'''' clauses c)). Qed.
Lemma lem8414505 {A B P : Type'} (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5839 A B P t''''''''' y'''' clauses c) = (term5843 A B P t''''''''' y'''' clauses c).
Proof. exact (MK_COMB (@lem8414503 A B P t''''''''' clauses c) (@lem8414504 A B P y'''' clauses c)). Qed.
Lemma lem8414507 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414508 {B P : Type'} (f : P -> B) (x : P) : (f x) = (@I (P -> B) f x).
Proof. exact (@lem8414507 P B f x). Qed.
Lemma lem8414509 {A B P : Type'} (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5843 A B P t''''''''' y'''' clauses c) = (term5844 A B P t''''''''' y'''' clauses c).
Proof. exact (@lem8414508 B P (term5842 A B P t''''''''' clauses c) (term5837 A B P y'''' clauses c)). Qed.
Lemma lem8414510 {A B P : Type'} (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5839 A B P t''''''''' y'''' clauses c) = (term5844 A B P t''''''''' y'''' clauses c).
Proof. exact (TRANS (@lem8414505 A B P t''''''''' y'''' clauses c) (@lem8414509 A B P t''''''''' y'''' clauses c)). Qed.
Lemma lem8414511 {A B P : Type'} (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5838 A B P t''''''''' y'''' clauses c) = (term5844 A B P t''''''''' y'''' clauses c).
Proof. exact (TRANS (@lem8414485 A B P t''''''''' y'''' clauses c) (@lem8414510 A B P t''''''''' y'''' clauses c)). Qed.
Lemma lem8414512 {A B P : Type'} (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5845 A B P t'''''''' x'''' clauses c) = (term5846 A B P t'''''''' x'''' clauses c).
Proof. exact (MK_COMB (@lem8414409 B) (@lem8414460 A B P t'''''''' x'''' clauses c)). Qed.
Lemma lem8414513 {A B P : Type'} (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : ((term5838 A B P t'''''''' x'''' clauses c) = (term5838 A B P t''''''''' y'''' clauses c)) = ((term5844 A B P t'''''''' x'''' clauses c) = (term5844 A B P t''''''''' y'''' clauses c)).
Proof. exact (MK_COMB (@lem8414512 A B P t'''''''' x'''' clauses c) (@lem8414511 A B P t''''''''' y'''' clauses c)). Qed.
Lemma lem8414514 {A B P : Type'} (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5847 A B P t'''''''' x'''' t''''''''' y'''' clauses c) = (term5848 A B P t'''''''' x'''' t''''''''' y'''' clauses c).
Proof. exact (MK_COMB (@lem8414408) (@lem8414513 A B P t'''''''' x'''' t''''''''' y'''' clauses c)). Qed.
Lemma lem8414515 {A : Type'} : (@eq A) = (@eq A).
Proof. exact (eq_refl (@eq A)). Qed.
Lemma lem8414525 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414526 {A B P : Type'} (f : type1083 A B P) (x : type1635 A B P) : (f x) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P) f x).
Proof. exact (@lem8414525 (type1635 A B P) (type571 A B P) f x). Qed.
Lemma lem8414527 {A B P : Type'} (x'''' : type1083 A B P) (clauses : type1635 A B P) : (x'''' clauses) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P) x'''' clauses).
Proof. exact (@lem8414526 A B P x'''' clauses). Qed.
Lemma lem8414528 {A B : Type'} (c : A -> B) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8414529 {A B P : Type'} (x'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (x'''' clauses c) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P) x'''' clauses c).
Proof. exact (MK_COMB (@lem8414527 A B P x'''' clauses) (@lem8414528 A B c)). Qed.
Lemma lem8414531 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414532 {A B P : Type'} (f : type571 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P) f x).
Proof. exact (@lem8414531 (A -> B) P f x). Qed.
Lemma lem8414533 {A B P : Type'} (x'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P) x'''' clauses c) = (term5837 A B P x'''' clauses c).
Proof. exact (@lem8414532 A B P (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P) x'''' clauses) c). Qed.
Lemma lem8414535 {A B P : Type'} (x'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (x'''' clauses c) = (term5837 A B P x'''' clauses c).
Proof. exact (TRANS (@lem8414529 A B P x'''' clauses c) (@lem8414533 A B P x'''' clauses c)). Qed.
Lemma lem8414537 {A B P : Type'} (s'''''''' : type1082 A B P) (clauses : type1635 A B P) (c : A -> B) : (s'''''''' clauses c) = (s'''''''' clauses c).
Proof. exact (eq_refl (s'''''''' clauses c)). Qed.
Lemma lem8414538 {A B P : Type'} (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5849 A B P s'''''''' x'''' clauses c) = (term5850 A B P s'''''''' x'''' clauses c).
Proof. exact (MK_COMB (@lem8414537 A B P s'''''''' clauses c) (@lem8414535 A B P x'''' clauses c)). Qed.
Lemma lem8414540 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414541 {A B P : Type'} (f : type1082 A B P) (x : type1635 A B P) : (f x) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A) f x).
Proof. exact (@lem8414540 (type1635 A B P) (type557 A B P) f x). Qed.
Lemma lem8414542 {A B P : Type'} (s'''''''' : type1082 A B P) (clauses : type1635 A B P) : (s'''''''' clauses) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A) s'''''''' clauses).
Proof. exact (@lem8414541 A B P s'''''''' clauses). Qed.
Lemma lem8414543 {A B : Type'} (c : A -> B) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8414544 {A B P : Type'} (s'''''''' : type1082 A B P) (clauses : type1635 A B P) (c : A -> B) : (s'''''''' clauses c) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A) s'''''''' clauses c).
Proof. exact (MK_COMB (@lem8414542 A B P s'''''''' clauses) (@lem8414543 A B c)). Qed.
Lemma lem8414546 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414547 {A B P : Type'} (f : type557 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> A) f x).
Proof. exact (@lem8414546 (A -> B) (P -> A) f x). Qed.
Lemma lem8414548 {A B P : Type'} (s'''''''' : type1082 A B P) (clauses : type1635 A B P) (c : A -> B) : (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A) s'''''''' clauses c) = (term5851 A B P s'''''''' clauses c).
Proof. exact (@lem8414547 A B P (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A) s'''''''' clauses) c). Qed.
Lemma lem8414549 {A B P : Type'} (s'''''''' : type1082 A B P) (clauses : type1635 A B P) (c : A -> B) : (s'''''''' clauses c) = (term5851 A B P s'''''''' clauses c).
Proof. exact (TRANS (@lem8414544 A B P s'''''''' clauses c) (@lem8414548 A B P s'''''''' clauses c)). Qed.
Lemma lem8414550 {A B P : Type'} (x'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5837 A B P x'''' clauses c) = (term5837 A B P x'''' clauses c).
Proof. exact (eq_refl (term5837 A B P x'''' clauses c)). Qed.
Lemma lem8414551 {A B P : Type'} (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5850 A B P s'''''''' x'''' clauses c) = (term5852 A B P s'''''''' x'''' clauses c).
Proof. exact (MK_COMB (@lem8414549 A B P s'''''''' clauses c) (@lem8414550 A B P x'''' clauses c)). Qed.
Lemma lem8414553 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414554 {A P : Type'} (f : P -> A) (x : P) : (f x) = (@I (P -> A) f x).
Proof. exact (@lem8414553 P A f x). Qed.
Lemma lem8414555 {A B P : Type'} (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5852 A B P s'''''''' x'''' clauses c) = (term5853 A B P s'''''''' x'''' clauses c).
Proof. exact (@lem8414554 A P (term5851 A B P s'''''''' clauses c) (term5837 A B P x'''' clauses c)). Qed.
Lemma lem8414556 {A B P : Type'} (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5850 A B P s'''''''' x'''' clauses c) = (term5853 A B P s'''''''' x'''' clauses c).
Proof. exact (TRANS (@lem8414551 A B P s'''''''' x'''' clauses c) (@lem8414555 A B P s'''''''' x'''' clauses c)). Qed.
Lemma lem8414557 {A B P : Type'} (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5849 A B P s'''''''' x'''' clauses c) = (term5853 A B P s'''''''' x'''' clauses c).
Proof. exact (TRANS (@lem8414538 A B P s'''''''' x'''' clauses c) (@lem8414556 A B P s'''''''' x'''' clauses c)). Qed.
Lemma lem8414567 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414568 {A B P : Type'} (f : type1083 A B P) (x : type1635 A B P) : (f x) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P) f x).
Proof. exact (@lem8414567 (type1635 A B P) (type571 A B P) f x). Qed.
Lemma lem8414569 {A B P : Type'} (y'''' : type1083 A B P) (clauses : type1635 A B P) : (y'''' clauses) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P) y'''' clauses).
Proof. exact (@lem8414568 A B P y'''' clauses). Qed.
Lemma lem8414570 {A B : Type'} (c : A -> B) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8414571 {A B P : Type'} (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (y'''' clauses c) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P) y'''' clauses c).
Proof. exact (MK_COMB (@lem8414569 A B P y'''' clauses) (@lem8414570 A B c)). Qed.
Lemma lem8414573 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414574 {A B P : Type'} (f : type571 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P) f x).
Proof. exact (@lem8414573 (A -> B) P f x). Qed.
Lemma lem8414575 {A B P : Type'} (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P) y'''' clauses c) = (term5837 A B P y'''' clauses c).
Proof. exact (@lem8414574 A B P (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P) y'''' clauses) c). Qed.
Lemma lem8414577 {A B P : Type'} (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (y'''' clauses c) = (term5837 A B P y'''' clauses c).
Proof. exact (TRANS (@lem8414571 A B P y'''' clauses c) (@lem8414575 A B P y'''' clauses c)). Qed.
Lemma lem8414579 {A B P : Type'} (s''''''''' : type1082 A B P) (clauses : type1635 A B P) (c : A -> B) : (s''''''''' clauses c) = (s''''''''' clauses c).
Proof. exact (eq_refl (s''''''''' clauses c)). Qed.
Lemma lem8414580 {A B P : Type'} (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5849 A B P s''''''''' y'''' clauses c) = (term5850 A B P s''''''''' y'''' clauses c).
Proof. exact (MK_COMB (@lem8414579 A B P s''''''''' clauses c) (@lem8414577 A B P y'''' clauses c)). Qed.
Lemma lem8414582 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414583 {A B P : Type'} (f : type1082 A B P) (x : type1635 A B P) : (f x) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A) f x).
Proof. exact (@lem8414582 (type1635 A B P) (type557 A B P) f x). Qed.
Lemma lem8414584 {A B P : Type'} (s''''''''' : type1082 A B P) (clauses : type1635 A B P) : (s''''''''' clauses) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A) s''''''''' clauses).
Proof. exact (@lem8414583 A B P s''''''''' clauses). Qed.
Lemma lem8414585 {A B : Type'} (c : A -> B) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8414586 {A B P : Type'} (s''''''''' : type1082 A B P) (clauses : type1635 A B P) (c : A -> B) : (s''''''''' clauses c) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A) s''''''''' clauses c).
Proof. exact (MK_COMB (@lem8414584 A B P s''''''''' clauses) (@lem8414585 A B c)). Qed.
Lemma lem8414588 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414589 {A B P : Type'} (f : type557 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> A) f x).
Proof. exact (@lem8414588 (A -> B) (P -> A) f x). Qed.
Lemma lem8414590 {A B P : Type'} (s''''''''' : type1082 A B P) (clauses : type1635 A B P) (c : A -> B) : (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A) s''''''''' clauses c) = (term5851 A B P s''''''''' clauses c).
Proof. exact (@lem8414589 A B P (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A) s''''''''' clauses) c). Qed.
Lemma lem8414591 {A B P : Type'} (s''''''''' : type1082 A B P) (clauses : type1635 A B P) (c : A -> B) : (s''''''''' clauses c) = (term5851 A B P s''''''''' clauses c).
Proof. exact (TRANS (@lem8414586 A B P s''''''''' clauses c) (@lem8414590 A B P s''''''''' clauses c)). Qed.
Lemma lem8414592 {A B P : Type'} (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5837 A B P y'''' clauses c) = (term5837 A B P y'''' clauses c).
Proof. exact (eq_refl (term5837 A B P y'''' clauses c)). Qed.
Lemma lem8414593 {A B P : Type'} (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5850 A B P s''''''''' y'''' clauses c) = (term5852 A B P s''''''''' y'''' clauses c).
Proof. exact (MK_COMB (@lem8414591 A B P s''''''''' clauses c) (@lem8414592 A B P y'''' clauses c)). Qed.
Lemma lem8414595 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414596 {A P : Type'} (f : P -> A) (x : P) : (f x) = (@I (P -> A) f x).
Proof. exact (@lem8414595 P A f x). Qed.
Lemma lem8414597 {A B P : Type'} (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5852 A B P s''''''''' y'''' clauses c) = (term5853 A B P s''''''''' y'''' clauses c).
Proof. exact (@lem8414596 A P (term5851 A B P s''''''''' clauses c) (term5837 A B P y'''' clauses c)). Qed.
Lemma lem8414598 {A B P : Type'} (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5850 A B P s''''''''' y'''' clauses c) = (term5853 A B P s''''''''' y'''' clauses c).
Proof. exact (TRANS (@lem8414593 A B P s''''''''' y'''' clauses c) (@lem8414597 A B P s''''''''' y'''' clauses c)). Qed.
Lemma lem8414599 {A B P : Type'} (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5849 A B P s''''''''' y'''' clauses c) = (term5853 A B P s''''''''' y'''' clauses c).
Proof. exact (TRANS (@lem8414580 A B P s''''''''' y'''' clauses c) (@lem8414598 A B P s''''''''' y'''' clauses c)). Qed.
Lemma lem8414600 {A B P : Type'} (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5854 A B P s'''''''' x'''' clauses c) = (term5855 A B P s'''''''' x'''' clauses c).
Proof. exact (MK_COMB (@lem8414515 A) (@lem8414557 A B P s'''''''' x'''' clauses c)). Qed.
Lemma lem8414601 {A B P : Type'} (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : ((term5849 A B P s'''''''' x'''' clauses c) = (term5849 A B P s''''''''' y'''' clauses c)) = ((term5853 A B P s'''''''' x'''' clauses c) = (term5853 A B P s''''''''' y'''' clauses c)).
Proof. exact (MK_COMB (@lem8414600 A B P s'''''''' x'''' clauses c) (@lem8414599 A B P s''''''''' y'''' clauses c)). Qed.
Lemma lem8414602 {A B P : Type'} : (@List.In (prod (P -> A) ((A -> B) -> P -> B))) = (@List.In (prod (P -> A) ((A -> B) -> P -> B))).
Proof. exact (eq_refl (@List.In (prod (P -> A) ((A -> B) -> P -> B)))). Qed.
Lemma lem8414603 {A B P : Type'} : (@pair (P -> A) ((A -> B) -> P -> B)) = (@pair (P -> A) ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@pair (P -> A) ((A -> B) -> P -> B))). Qed.
Lemma lem8414610 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414611 {A B P : Type'} (f : type1082 A B P) (x : type1635 A B P) : (f x) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A) f x).
Proof. exact (@lem8414610 (type1635 A B P) (type557 A B P) f x). Qed.
Lemma lem8414612 {A B P : Type'} (s''''''''' : type1082 A B P) (clauses : type1635 A B P) : (s''''''''' clauses) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A) s''''''''' clauses).
Proof. exact (@lem8414611 A B P s''''''''' clauses). Qed.
Lemma lem8414613 {A B : Type'} (c : A -> B) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8414614 {A B P : Type'} (s''''''''' : type1082 A B P) (clauses : type1635 A B P) (c : A -> B) : (s''''''''' clauses c) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A) s''''''''' clauses c).
Proof. exact (MK_COMB (@lem8414612 A B P s''''''''' clauses) (@lem8414613 A B c)). Qed.
Lemma lem8414616 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414617 {A B P : Type'} (f : type557 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> A) f x).
Proof. exact (@lem8414616 (A -> B) (P -> A) f x). Qed.
Lemma lem8414618 {A B P : Type'} (s''''''''' : type1082 A B P) (clauses : type1635 A B P) (c : A -> B) : (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A) s''''''''' clauses c) = (term5851 A B P s''''''''' clauses c).
Proof. exact (@lem8414617 A B P (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A) s''''''''' clauses) c). Qed.
Lemma lem8414620 {A B P : Type'} (s''''''''' : type1082 A B P) (clauses : type1635 A B P) (c : A -> B) : (s''''''''' clauses c) = (term5851 A B P s''''''''' clauses c).
Proof. exact (TRANS (@lem8414614 A B P s''''''''' clauses c) (@lem8414618 A B P s''''''''' clauses c)). Qed.
Lemma lem8414627 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414628 {A B P : Type'} (f : type1081 A B P) (x : type1635 A B P) : (f x) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B) f x).
Proof. exact (@lem8414627 (type1635 A B P) (type519 A B P) f x). Qed.
Lemma lem8414629 {A B P : Type'} (t''''''''' : type1081 A B P) (clauses : type1635 A B P) : (t''''''''' clauses) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B) t''''''''' clauses).
Proof. exact (@lem8414628 A B P t''''''''' clauses). Qed.
Lemma lem8414630 {A B : Type'} (c : A -> B) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8414631 {A B P : Type'} (t''''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (t''''''''' clauses c) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B) t''''''''' clauses c).
Proof. exact (MK_COMB (@lem8414629 A B P t''''''''' clauses) (@lem8414630 A B c)). Qed.
Lemma lem8414633 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414634 {A B P : Type'} (f : type519 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> (A -> B) -> P -> B) f x).
Proof. exact (@lem8414633 (A -> B) (type558 A B P) f x). Qed.
Lemma lem8414635 {A B P : Type'} (t''''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B) t''''''''' clauses c) = (term5840 A B P t''''''''' clauses c).
Proof. exact (@lem8414634 A B P (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B) t''''''''' clauses) c). Qed.
Lemma lem8414637 {A B P : Type'} (t''''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (t''''''''' clauses c) = (term5840 A B P t''''''''' clauses c).
Proof. exact (TRANS (@lem8414631 A B P t''''''''' clauses c) (@lem8414635 A B P t''''''''' clauses c)). Qed.
Lemma lem8414638 {A B P : Type'} (s''''''''' : type1082 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5856 A B P s''''''''' clauses c) = (term5857 A B P s''''''''' clauses c).
Proof. exact (MK_COMB (@lem8414603 A B P) (@lem8414620 A B P s''''''''' clauses c)). Qed.
Lemma lem8414639 {A B P : Type'} (s''''''''' : type1082 A B P) (t''''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5858 A B P s''''''''' t''''''''' clauses c) = (term5859 A B P s''''''''' t''''''''' clauses c).
Proof. exact (MK_COMB (@lem8414638 A B P s''''''''' clauses c) (@lem8414637 A B P t''''''''' clauses c)). Qed.
Lemma lem8414641 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414642 {A B P : Type'} (f : type883 A B P) (x : P -> A) : (f x) = (@I ((P -> A) -> ((A -> B) -> P -> B) -> prod (P -> A) ((A -> B) -> P -> B)) f x).
Proof. exact (@lem8414641 (P -> A) (type114 A B P) f x). Qed.
Lemma lem8414643 {A B P : Type'} (s''''''''' : type1082 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5857 A B P s''''''''' clauses c) = (term5860 A B P s''''''''' clauses c).
Proof. exact (@lem8414642 A B P (@pair (P -> A) ((A -> B) -> P -> B)) (term5851 A B P s''''''''' clauses c)). Qed.
Lemma lem8414644 {A B P : Type'} (t''''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5840 A B P t''''''''' clauses c) = (term5840 A B P t''''''''' clauses c).
Proof. exact (eq_refl (term5840 A B P t''''''''' clauses c)). Qed.
Lemma lem8414645 {A B P : Type'} (s''''''''' : type1082 A B P) (t''''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5859 A B P s''''''''' t''''''''' clauses c) = (term5861 A B P s''''''''' t''''''''' clauses c).
Proof. exact (MK_COMB (@lem8414643 A B P s''''''''' clauses c) (@lem8414644 A B P t''''''''' clauses c)). Qed.
Lemma lem8414647 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414648 {A B P : Type'} (f : type114 A B P) (x : type558 A B P) : (f x) = (@I (((A -> B) -> P -> B) -> prod (P -> A) ((A -> B) -> P -> B)) f x).
Proof. exact (@lem8414647 (type558 A B P) (type1645 A B P) f x). Qed.
Lemma lem8414649 {A B P : Type'} (s''''''''' : type1082 A B P) (t''''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5861 A B P s''''''''' t''''''''' clauses c) = (term5862 A B P s''''''''' t''''''''' clauses c).
Proof. exact (@lem8414648 A B P (term5860 A B P s''''''''' clauses c) (term5840 A B P t''''''''' clauses c)). Qed.
Lemma lem8414650 {A B P : Type'} (s''''''''' : type1082 A B P) (t''''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5859 A B P s''''''''' t''''''''' clauses c) = (term5862 A B P s''''''''' t''''''''' clauses c).
Proof. exact (TRANS (@lem8414645 A B P s''''''''' t''''''''' clauses c) (@lem8414649 A B P s''''''''' t''''''''' clauses c)). Qed.
Lemma lem8414651 {A B P : Type'} (s''''''''' : type1082 A B P) (t''''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5858 A B P s''''''''' t''''''''' clauses c) = (term5862 A B P s''''''''' t''''''''' clauses c).
Proof. exact (TRANS (@lem8414639 A B P s''''''''' t''''''''' clauses c) (@lem8414650 A B P s''''''''' t''''''''' clauses c)). Qed.
Lemma lem8414652 {A B P : Type'} (clauses : type1635 A B P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8414653 {A B P : Type'} (s''''''''' : type1082 A B P) (t''''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5863 A B P s''''''''' t''''''''' clauses c) = (term5864 A B P s''''''''' t''''''''' clauses c).
Proof. exact (MK_COMB (@lem8414602 A B P) (@lem8414651 A B P s''''''''' t''''''''' clauses c)). Qed.
Lemma lem8414654 {A B P : Type'} (s''''''''' : type1082 A B P) (t''''''''' : type1081 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5865 A B P s''''''''' t''''''''' c clauses) = (term5866 A B P s''''''''' t''''''''' c clauses).
Proof. exact (MK_COMB (@lem8414653 A B P s''''''''' t''''''''' clauses c) (@lem8414652 A B P clauses)). Qed.
Lemma lem8414656 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414657 {A B P : Type'} (f : type1174 A B P) (x : type1645 A B P) : (f x) = (@I ((prod (P -> A) ((A -> B) -> P -> B)) -> (list (prod (P -> A) ((A -> B) -> P -> B))) -> Prop) f x).
Proof. exact (@lem8414656 (type1645 A B P) (type1084 A B P) f x). Qed.
Lemma lem8414658 {A B P : Type'} (s''''''''' : type1082 A B P) (t''''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5864 A B P s''''''''' t''''''''' clauses c) = (term5867 A B P s''''''''' t''''''''' clauses c).
Proof. exact (@lem8414657 A B P (@List.In (prod (P -> A) ((A -> B) -> P -> B))) (term5862 A B P s''''''''' t''''''''' clauses c)). Qed.
Lemma lem8414659 {A B P : Type'} (clauses : type1635 A B P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8414660 {A B P : Type'} (s''''''''' : type1082 A B P) (t''''''''' : type1081 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5866 A B P s''''''''' t''''''''' c clauses) = (term5868 A B P s''''''''' t''''''''' c clauses).
Proof. exact (MK_COMB (@lem8414658 A B P s''''''''' t''''''''' clauses c) (@lem8414659 A B P clauses)). Qed.
Lemma lem8414662 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414663 {A B P : Type'} (f : type1084 A B P) (x : type1635 A B P) : (f x) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> Prop) f x).
Proof. exact (@lem8414662 (type1635 A B P) Prop f x). Qed.
Lemma lem8414664 {A B P : Type'} (s''''''''' : type1082 A B P) (t''''''''' : type1081 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5868 A B P s''''''''' t''''''''' c clauses) = (term5869 A B P s''''''''' t''''''''' c clauses).
Proof. exact (@lem8414663 A B P (term5867 A B P s''''''''' t''''''''' clauses c) clauses). Qed.
Lemma lem8414665 {A B P : Type'} (s''''''''' : type1082 A B P) (t''''''''' : type1081 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5866 A B P s''''''''' t''''''''' c clauses) = (term5869 A B P s''''''''' t''''''''' c clauses).
Proof. exact (TRANS (@lem8414660 A B P s''''''''' t''''''''' c clauses) (@lem8414664 A B P s''''''''' t''''''''' c clauses)). Qed.
Lemma lem8414666 {A B P : Type'} (s''''''''' : type1082 A B P) (t''''''''' : type1081 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5865 A B P s''''''''' t''''''''' c clauses) = (term5869 A B P s''''''''' t''''''''' c clauses).
Proof. exact (TRANS (@lem8414654 A B P s''''''''' t''''''''' c clauses) (@lem8414665 A B P s''''''''' t''''''''' c clauses)). Qed.
Lemma lem8414667 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8414668 {A B P : Type'} (s''''''''' : type1082 A B P) (t''''''''' : type1081 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5870 A B P s''''''''' t''''''''' c clauses) = (term5871 A B P s''''''''' t''''''''' c clauses).
Proof. exact (MK_COMB (@lem8414667) (@lem8414666 A B P s''''''''' t''''''''' c clauses)). Qed.
Lemma lem8414669 {A B P : Type'} (t''''''''' : type1081 A B P) (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5872 A B P t''''''''' s'''''''' x'''' s''''''''' y'''' clauses c) = (term5873 A B P t''''''''' s'''''''' x'''' s''''''''' y'''' clauses c).
Proof. exact (MK_COMB (@lem8414668 A B P s''''''''' t''''''''' c clauses) (@lem8414601 A B P s'''''''' x'''' s''''''''' y'''' clauses c)). Qed.
Lemma lem8414670 {A B P : Type'} : (@List.In (prod (P -> A) ((A -> B) -> P -> B))) = (@List.In (prod (P -> A) ((A -> B) -> P -> B))).
Proof. exact (eq_refl (@List.In (prod (P -> A) ((A -> B) -> P -> B)))). Qed.
Lemma lem8414671 {A B P : Type'} : (@pair (P -> A) ((A -> B) -> P -> B)) = (@pair (P -> A) ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@pair (P -> A) ((A -> B) -> P -> B))). Qed.
Lemma lem8414678 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414679 {A B P : Type'} (f : type1082 A B P) (x : type1635 A B P) : (f x) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A) f x).
Proof. exact (@lem8414678 (type1635 A B P) (type557 A B P) f x). Qed.
Lemma lem8414680 {A B P : Type'} (s'''''''' : type1082 A B P) (clauses : type1635 A B P) : (s'''''''' clauses) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A) s'''''''' clauses).
Proof. exact (@lem8414679 A B P s'''''''' clauses). Qed.
Lemma lem8414681 {A B : Type'} (c : A -> B) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8414682 {A B P : Type'} (s'''''''' : type1082 A B P) (clauses : type1635 A B P) (c : A -> B) : (s'''''''' clauses c) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A) s'''''''' clauses c).
Proof. exact (MK_COMB (@lem8414680 A B P s'''''''' clauses) (@lem8414681 A B c)). Qed.
Lemma lem8414684 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414685 {A B P : Type'} (f : type557 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> P -> A) f x).
Proof. exact (@lem8414684 (A -> B) (P -> A) f x). Qed.
Lemma lem8414686 {A B P : Type'} (s'''''''' : type1082 A B P) (clauses : type1635 A B P) (c : A -> B) : (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A) s'''''''' clauses c) = (term5851 A B P s'''''''' clauses c).
Proof. exact (@lem8414685 A B P (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> P -> A) s'''''''' clauses) c). Qed.
Lemma lem8414688 {A B P : Type'} (s'''''''' : type1082 A B P) (clauses : type1635 A B P) (c : A -> B) : (s'''''''' clauses c) = (term5851 A B P s'''''''' clauses c).
Proof. exact (TRANS (@lem8414682 A B P s'''''''' clauses c) (@lem8414686 A B P s'''''''' clauses c)). Qed.
Lemma lem8414695 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414696 {A B P : Type'} (f : type1081 A B P) (x : type1635 A B P) : (f x) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B) f x).
Proof. exact (@lem8414695 (type1635 A B P) (type519 A B P) f x). Qed.
Lemma lem8414697 {A B P : Type'} (t'''''''' : type1081 A B P) (clauses : type1635 A B P) : (t'''''''' clauses) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B) t'''''''' clauses).
Proof. exact (@lem8414696 A B P t'''''''' clauses). Qed.
Lemma lem8414698 {A B : Type'} (c : A -> B) : c = c.
Proof. exact (eq_refl c). Qed.
Lemma lem8414699 {A B P : Type'} (t'''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (t'''''''' clauses c) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B) t'''''''' clauses c).
Proof. exact (MK_COMB (@lem8414697 A B P t'''''''' clauses) (@lem8414698 A B c)). Qed.
Lemma lem8414701 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414702 {A B P : Type'} (f : type519 A B P) (x : A -> B) : (f x) = (@I ((A -> B) -> (A -> B) -> P -> B) f x).
Proof. exact (@lem8414701 (A -> B) (type558 A B P) f x). Qed.
Lemma lem8414703 {A B P : Type'} (t'''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B) t'''''''' clauses c) = (term5840 A B P t'''''''' clauses c).
Proof. exact (@lem8414702 A B P (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> (A -> B) -> (A -> B) -> P -> B) t'''''''' clauses) c). Qed.
Lemma lem8414705 {A B P : Type'} (t'''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (t'''''''' clauses c) = (term5840 A B P t'''''''' clauses c).
Proof. exact (TRANS (@lem8414699 A B P t'''''''' clauses c) (@lem8414703 A B P t'''''''' clauses c)). Qed.
Lemma lem8414706 {A B P : Type'} (s'''''''' : type1082 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5856 A B P s'''''''' clauses c) = (term5857 A B P s'''''''' clauses c).
Proof. exact (MK_COMB (@lem8414671 A B P) (@lem8414688 A B P s'''''''' clauses c)). Qed.
Lemma lem8414707 {A B P : Type'} (s'''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5858 A B P s'''''''' t'''''''' clauses c) = (term5859 A B P s'''''''' t'''''''' clauses c).
Proof. exact (MK_COMB (@lem8414706 A B P s'''''''' clauses c) (@lem8414705 A B P t'''''''' clauses c)). Qed.
Lemma lem8414709 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414710 {A B P : Type'} (f : type883 A B P) (x : P -> A) : (f x) = (@I ((P -> A) -> ((A -> B) -> P -> B) -> prod (P -> A) ((A -> B) -> P -> B)) f x).
Proof. exact (@lem8414709 (P -> A) (type114 A B P) f x). Qed.
Lemma lem8414711 {A B P : Type'} (s'''''''' : type1082 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5857 A B P s'''''''' clauses c) = (term5860 A B P s'''''''' clauses c).
Proof. exact (@lem8414710 A B P (@pair (P -> A) ((A -> B) -> P -> B)) (term5851 A B P s'''''''' clauses c)). Qed.
Lemma lem8414712 {A B P : Type'} (t'''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5840 A B P t'''''''' clauses c) = (term5840 A B P t'''''''' clauses c).
Proof. exact (eq_refl (term5840 A B P t'''''''' clauses c)). Qed.
Lemma lem8414713 {A B P : Type'} (s'''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5859 A B P s'''''''' t'''''''' clauses c) = (term5861 A B P s'''''''' t'''''''' clauses c).
Proof. exact (MK_COMB (@lem8414711 A B P s'''''''' clauses c) (@lem8414712 A B P t'''''''' clauses c)). Qed.
Lemma lem8414715 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414716 {A B P : Type'} (f : type114 A B P) (x : type558 A B P) : (f x) = (@I (((A -> B) -> P -> B) -> prod (P -> A) ((A -> B) -> P -> B)) f x).
Proof. exact (@lem8414715 (type558 A B P) (type1645 A B P) f x). Qed.
Lemma lem8414717 {A B P : Type'} (s'''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5861 A B P s'''''''' t'''''''' clauses c) = (term5862 A B P s'''''''' t'''''''' clauses c).
Proof. exact (@lem8414716 A B P (term5860 A B P s'''''''' clauses c) (term5840 A B P t'''''''' clauses c)). Qed.
Lemma lem8414718 {A B P : Type'} (s'''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5859 A B P s'''''''' t'''''''' clauses c) = (term5862 A B P s'''''''' t'''''''' clauses c).
Proof. exact (TRANS (@lem8414713 A B P s'''''''' t'''''''' clauses c) (@lem8414717 A B P s'''''''' t'''''''' clauses c)). Qed.
Lemma lem8414719 {A B P : Type'} (s'''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5858 A B P s'''''''' t'''''''' clauses c) = (term5862 A B P s'''''''' t'''''''' clauses c).
Proof. exact (TRANS (@lem8414707 A B P s'''''''' t'''''''' clauses c) (@lem8414718 A B P s'''''''' t'''''''' clauses c)). Qed.
Lemma lem8414720 {A B P : Type'} (clauses : type1635 A B P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8414721 {A B P : Type'} (s'''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5863 A B P s'''''''' t'''''''' clauses c) = (term5864 A B P s'''''''' t'''''''' clauses c).
Proof. exact (MK_COMB (@lem8414670 A B P) (@lem8414719 A B P s'''''''' t'''''''' clauses c)). Qed.
Lemma lem8414722 {A B P : Type'} (s'''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5865 A B P s'''''''' t'''''''' c clauses) = (term5866 A B P s'''''''' t'''''''' c clauses).
Proof. exact (MK_COMB (@lem8414721 A B P s'''''''' t'''''''' clauses c) (@lem8414720 A B P clauses)). Qed.
Lemma lem8414724 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414725 {A B P : Type'} (f : type1174 A B P) (x : type1645 A B P) : (f x) = (@I ((prod (P -> A) ((A -> B) -> P -> B)) -> (list (prod (P -> A) ((A -> B) -> P -> B))) -> Prop) f x).
Proof. exact (@lem8414724 (type1645 A B P) (type1084 A B P) f x). Qed.
Lemma lem8414726 {A B P : Type'} (s'''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5864 A B P s'''''''' t'''''''' clauses c) = (term5867 A B P s'''''''' t'''''''' clauses c).
Proof. exact (@lem8414725 A B P (@List.In (prod (P -> A) ((A -> B) -> P -> B))) (term5862 A B P s'''''''' t'''''''' clauses c)). Qed.
Lemma lem8414727 {A B P : Type'} (clauses : type1635 A B P) : clauses = clauses.
Proof. exact (eq_refl clauses). Qed.
Lemma lem8414728 {A B P : Type'} (s'''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5866 A B P s'''''''' t'''''''' c clauses) = (term5868 A B P s'''''''' t'''''''' c clauses).
Proof. exact (MK_COMB (@lem8414726 A B P s'''''''' t'''''''' clauses c) (@lem8414727 A B P clauses)). Qed.
Lemma lem8414730 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8414731 {A B P : Type'} (f : type1084 A B P) (x : type1635 A B P) : (f x) = (@I ((list (prod (P -> A) ((A -> B) -> P -> B))) -> Prop) f x).
Proof. exact (@lem8414730 (type1635 A B P) Prop f x). Qed.
Lemma lem8414732 {A B P : Type'} (s'''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5868 A B P s'''''''' t'''''''' c clauses) = (term5869 A B P s'''''''' t'''''''' c clauses).
Proof. exact (@lem8414731 A B P (term5867 A B P s'''''''' t'''''''' clauses c) clauses). Qed.
Lemma lem8414733 {A B P : Type'} (s'''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5866 A B P s'''''''' t'''''''' c clauses) = (term5869 A B P s'''''''' t'''''''' c clauses).
Proof. exact (TRANS (@lem8414728 A B P s'''''''' t'''''''' c clauses) (@lem8414732 A B P s'''''''' t'''''''' c clauses)). Qed.
Lemma lem8414734 {A B P : Type'} (s'''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5865 A B P s'''''''' t'''''''' c clauses) = (term5869 A B P s'''''''' t'''''''' c clauses).
Proof. exact (TRANS (@lem8414722 A B P s'''''''' t'''''''' c clauses) (@lem8414733 A B P s'''''''' t'''''''' c clauses)). Qed.
Lemma lem8414735 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8414736 {A B P : Type'} (s'''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5870 A B P s'''''''' t'''''''' c clauses) = (term5871 A B P s'''''''' t'''''''' c clauses).
Proof. exact (MK_COMB (@lem8414735) (@lem8414734 A B P s'''''''' t'''''''' c clauses)). Qed.
Lemma lem8414737 {A B P : Type'} (t'''''''' : type1081 A B P) (t''''''''' : type1081 A B P) (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5874 A B P t'''''''' t''''''''' s'''''''' x'''' s''''''''' y'''' clauses c) = (term5875 A B P t'''''''' t''''''''' s'''''''' x'''' s''''''''' y'''' clauses c).
Proof. exact (MK_COMB (@lem8414736 A B P s'''''''' t'''''''' c clauses) (@lem8414669 A B P t''''''''' s'''''''' x'''' s''''''''' y'''' clauses c)). Qed.
Lemma lem8414738 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8414739 {A B P : Type'} (t'''''''' : type1081 A B P) (t''''''''' : type1081 A B P) (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5876 A B P t'''''''' t''''''''' s'''''''' x'''' s''''''''' y'''' clauses c) = (term5877 A B P t'''''''' t''''''''' s'''''''' x'''' s''''''''' y'''' clauses c).
Proof. exact (MK_COMB (@lem8414738) (@lem8414737 A B P t'''''''' t''''''''' s'''''''' x'''' s''''''''' y'''' clauses c)). Qed.
Lemma lem8414740 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5878 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' clauses c) = (term5879 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' clauses c).
Proof. exact (MK_COMB (@lem8414739 A B P t'''''''' t''''''''' s'''''''' x'''' s''''''''' y'''' clauses c) (@lem8414514 A B P t'''''''' x'''' t''''''''' y'''' clauses c)). Qed.
Lemma lem8414741 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8414742 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (clauses : type1635 A B P) (c : A -> B) : (term5880 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' clauses c) = (term5881 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' clauses c).
Proof. exact (MK_COMB (@lem8414741) (@lem8414740 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' clauses c)). Qed.
Lemma lem8414743 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5882 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 c clauses) = (term5883 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 c clauses).
Proof. exact (MK_COMB (@lem8414742 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' clauses c) (@lem8414407 A B P _115314 c clauses)). Qed.
Lemma lem8414744 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term5884 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 clauses) = (term5885 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8414743 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 c clauses)). Qed.
Lemma lem8414745 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8414746 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term4381 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 clauses) = (term5886 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 clauses).
Proof. exact (MK_COMB (@lem8414745 A B) (@lem8414744 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 clauses)). Qed.
Lemma lem8414747 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) : (term4383 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) = (term5887 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8414746 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 clauses)). Qed.
Lemma lem8414748 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8414749 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) : (term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) = (term5888 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314).
Proof. exact (MK_COMB (@lem8414748 A B P) (@lem8414747 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314)). Qed.
Lemma lem8414750 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5888 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314.
Proof. exact (EQ_MP (@lem8414749 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (@lem8412567 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1)). Qed.
Lemma lem8418238 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) (y : P) : (term5813 A B P clauses s s' t x t' f y) = (term5813 A B P clauses s s' t x t' f y).
Proof. exact (eq_refl (term5813 A B P clauses s s' t x t' f y)). Qed.
Lemma lem8418239 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term5814 A B P clauses s s' t x t' f) = (term5814 A B P clauses s s' t x t' f).
Proof. exact (fun_ext (fun y : P => @lem8418238 A B P clauses s s' t x t' f y)). Qed.
Lemma lem8418240 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8418241 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (x : P) (t' : type558 A B P) (f : A -> B) : (term5815 A B P clauses s s' t x t' f) = (term5815 A B P clauses s s' t x t' f).
Proof. exact (MK_COMB (@lem8418240 P) (@lem8418239 A B P clauses s s' t x t' f)). Qed.
Lemma lem8418242 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term5816 A B P clauses s s' t t' f) = (term5816 A B P clauses s s' t t' f).
Proof. exact (fun_ext (fun x : P => @lem8418241 A B P clauses s s' t x t' f)). Qed.
Lemma lem8418243 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8418244 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) (f : A -> B) : (term5817 A B P clauses s s' t t' f) = (term5817 A B P clauses s s' t t' f).
Proof. exact (MK_COMB (@lem8418243 P) (@lem8418242 A B P clauses s s' t t' f)). Qed.
Lemma lem8418245 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term5818 A B P clauses s s' t t') = (term5818 A B P clauses s s' t t').
Proof. exact (fun_ext (fun f : A -> B => @lem8418244 A B P clauses s s' t t' f)). Qed.
Lemma lem8418246 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8418247 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) (t' : type558 A B P) : (term5819 A B P clauses s s' t t') = (term5819 A B P clauses s s' t t').
Proof. exact (MK_COMB (@lem8418246 A B) (@lem8418245 A B P clauses s s' t t')). Qed.
Lemma lem8418248 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term5820 A B P clauses s s' t) = (term5820 A B P clauses s s' t).
Proof. exact (fun_ext (fun t' : type558 A B P => @lem8418247 A B P clauses s s' t t')). Qed.
Lemma lem8418249 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8418250 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (s' : P -> A) (t : type558 A B P) : (term5821 A B P clauses s s' t) = (term5821 A B P clauses s s' t).
Proof. exact (MK_COMB (@lem8418249 A B P) (@lem8418248 A B P clauses s s' t)). Qed.
Lemma lem8418251 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term5822 A B P clauses s t) = (term5822 A B P clauses s t).
Proof. exact (fun_ext (fun s' : P -> A => @lem8418250 A B P clauses s s' t)). Qed.
Lemma lem8418252 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8418253 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) (t : type558 A B P) : (term5823 A B P clauses s t) = (term5823 A B P clauses s t).
Proof. exact (MK_COMB (@lem8418252 A P) (@lem8418251 A B P clauses s t)). Qed.
Lemma lem8418254 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term5824 A B P clauses s) = (term5824 A B P clauses s).
Proof. exact (fun_ext (fun t : type558 A B P => @lem8418253 A B P clauses s t)). Qed.
Lemma lem8418255 {A B P : Type'} : (@all ((A -> B) -> P -> B)) = (@all ((A -> B) -> P -> B)).
Proof. exact (eq_refl (@all ((A -> B) -> P -> B))). Qed.
Lemma lem8418256 {A B P : Type'} (clauses : type1635 A B P) (s : P -> A) : (term5825 A B P clauses s) = (term5825 A B P clauses s).
Proof. exact (MK_COMB (@lem8418255 A B P) (@lem8418254 A B P clauses s)). Qed.
Lemma lem8418257 {A B P : Type'} (clauses : type1635 A B P) : (term5826 A B P clauses) = (term5826 A B P clauses).
Proof. exact (fun_ext (fun s : P -> A => @lem8418256 A B P clauses s)). Qed.
Lemma lem8418258 {A P : Type'} : (@all (P -> A)) = (@all (P -> A)).
Proof. exact (eq_refl (@all (P -> A))). Qed.
Lemma lem8418260 {A B P : Type'} (clauses : type1635 A B P) : (term5827 A B P clauses) = (term5827 A B P clauses).
Proof. exact (MK_COMB (@lem8418258 A P) (@lem8418257 A B P clauses)). Qed.
Lemma lem8418261 {A B P : Type'} (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term5827 A B P clauses.
Proof. exact (EQ_MP (@lem8418260 A B P clauses) (@lem8412752 A B P clauses h1)). Qed.
Lemma lem8418475 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5883 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 c clauses) = (term5889 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 c clauses).
Proof. exact (@lem19699 (term5875 A B P t'''''''' t''''''''' s'''''''' x'''' s''''''''' y'''' clauses c) (term5848 A B P t'''''''' x'''' t''''''''' y'''' clauses c) (term5835 A B P _115314 c clauses)). Qed.
Lemma lem8418476 {A B P : Type'} (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5890 A B P t'''''''' x'''' t''''''''' y'''' _115314 c clauses) = (term5890 A B P t'''''''' x'''' t''''''''' y'''' _115314 c clauses).
Proof. exact (eq_refl (term5890 A B P t'''''''' x'''' t''''''''' y'''' _115314 c clauses)). Qed.
Lemma lem8418477 {A B P : Type'} (t'''''''' : type1081 A B P) (t''''''''' : type1081 A B P) (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5891 A B P t'''''''' t''''''''' s'''''''' x'''' s''''''''' y'''' _115314 c clauses) = (term5892 A B P t'''''''' t''''''''' s'''''''' x'''' s''''''''' y'''' _115314 c clauses).
Proof. exact (@lem19699 (term5869 A B P s'''''''' t'''''''' c clauses) (term5873 A B P t''''''''' s'''''''' x'''' s''''''''' y'''' clauses c) (term5835 A B P _115314 c clauses)). Qed.
Lemma lem8418484 {A B P : Type'} (t''''''''' : type1081 A B P) (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5893 A B P t''''''''' s'''''''' x'''' s''''''''' y'''' _115314 c clauses) = (term5894 A B P t''''''''' s'''''''' x'''' s''''''''' y'''' _115314 c clauses).
Proof. exact (@lem19699 (term5869 A B P s''''''''' t''''''''' c clauses) ((term5853 A B P s'''''''' x'''' clauses c) = (term5853 A B P s''''''''' y'''' clauses c)) (term5835 A B P _115314 c clauses)). Qed.
Lemma lem8418487 {A B P : Type'} (s'''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5895 A B P s'''''''' t'''''''' _115314 c clauses) = (term5895 A B P s'''''''' t'''''''' _115314 c clauses).
Proof. exact (eq_refl (term5895 A B P s'''''''' t'''''''' _115314 c clauses)). Qed.
Lemma lem8418488 {A B P : Type'} (t'''''''' : type1081 A B P) (t''''''''' : type1081 A B P) (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5892 A B P t'''''''' t''''''''' s'''''''' x'''' s''''''''' y'''' _115314 c clauses) = (term5896 A B P t'''''''' t''''''''' s'''''''' x'''' s''''''''' y'''' _115314 c clauses).
Proof. exact (MK_COMB (@lem8418487 A B P s'''''''' t'''''''' _115314 c clauses) (@lem8418484 A B P t''''''''' s'''''''' x'''' s''''''''' y'''' _115314 c clauses)). Qed.
Lemma lem8418489 {A B P : Type'} (t'''''''' : type1081 A B P) (t''''''''' : type1081 A B P) (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5891 A B P t'''''''' t''''''''' s'''''''' x'''' s''''''''' y'''' _115314 c clauses) = (term5896 A B P t'''''''' t''''''''' s'''''''' x'''' s''''''''' y'''' _115314 c clauses).
Proof. exact (TRANS (@lem8418477 A B P t'''''''' t''''''''' s'''''''' x'''' s''''''''' y'''' _115314 c clauses) (@lem8418488 A B P t'''''''' t''''''''' s'''''''' x'''' s''''''''' y'''' _115314 c clauses)). Qed.
Lemma lem8418490 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8418491 {A B P : Type'} (t'''''''' : type1081 A B P) (t''''''''' : type1081 A B P) (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5897 A B P t'''''''' t''''''''' s'''''''' x'''' s''''''''' y'''' _115314 c clauses) = (term5898 A B P t'''''''' t''''''''' s'''''''' x'''' s''''''''' y'''' _115314 c clauses).
Proof. exact (MK_COMB (@lem8418490) (@lem8418489 A B P t'''''''' t''''''''' s'''''''' x'''' s''''''''' y'''' _115314 c clauses)). Qed.
Lemma lem8418492 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5889 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 c clauses) = (term5899 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 c clauses).
Proof. exact (MK_COMB (@lem8418491 A B P t'''''''' t''''''''' s'''''''' x'''' s''''''''' y'''' _115314 c clauses) (@lem8418476 A B P t'''''''' x'''' t''''''''' y'''' _115314 c clauses)). Qed.
Lemma lem8418494 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (c : A -> B) (clauses : type1635 A B P) : (term5883 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 c clauses) = (term5899 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 c clauses).
Proof. exact (TRANS (@lem8418475 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 c clauses) (@lem8418492 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 c clauses)). Qed.
Lemma lem8418495 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term5885 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 clauses) = (term5900 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 clauses).
Proof. exact (fun_ext (fun c : A -> B => @lem8418494 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 c clauses)). Qed.
Lemma lem8418496 {A B : Type'} : (@all (A -> B)) = (@all (A -> B)).
Proof. exact (eq_refl (@all (A -> B))). Qed.
Lemma lem8418497 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (clauses : type1635 A B P) : (term5886 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 clauses) = (term5901 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 clauses).
Proof. exact (MK_COMB (@lem8418496 A B) (@lem8418495 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 clauses)). Qed.
Lemma lem8418498 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) : (term5887 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) = (term5902 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314).
Proof. exact (fun_ext (fun clauses : type1635 A B P => @lem8418497 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 clauses)). Qed.
Lemma lem8418499 {A B P : Type'} : (@all (list (prod (P -> A) ((A -> B) -> P -> B)))) = (@all (list (prod (P -> A) ((A -> B) -> P -> B)))).
Proof. exact (eq_refl (@all (list (prod (P -> A) ((A -> B) -> P -> B))))). Qed.
Lemma lem8418501 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) : (term5888 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) = (term5903 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314).
Proof. exact (MK_COMB (@lem8418499 A B P) (@lem8418498 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314)). Qed.
Lemma lem8418502 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5903 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314.
Proof. exact (EQ_MP (@lem8418501 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (@lem8414750 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1)). Qed.
Lemma lem8419267 {A B P : Type'} (_115321 : P -> A) (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term5904 A B P clauses _115321.
Proof. exact (@lem8418261 A B P clauses h1 _115321). Qed.
Lemma lem8419268 {A B P : Type'} (clauses : type1635 A B P) (_115321 : P -> A) : (term5904 A B P clauses _115321) = (term5825 A B P clauses _115321).
Proof. exact (eq_refl (term5904 A B P clauses _115321)). Qed.
Lemma lem8419269 {A B P : Type'} (_115321 : P -> A) (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term5825 A B P clauses _115321.
Proof. exact (EQ_MP (@lem8419268 A B P clauses _115321) (@lem8419267 A B P _115321 clauses h1)). Qed.
Lemma lem8419270 {A B P : Type'} (_115321 : P -> A) (_115322 : type558 A B P) (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term5905 A B P clauses _115321 _115322.
Proof. exact (@lem8419269 A B P _115321 clauses h1 _115322). Qed.
Lemma lem8419271 {A B P : Type'} (clauses : type1635 A B P) (_115321 : P -> A) (_115322 : type558 A B P) : (term5905 A B P clauses _115321 _115322) = (term5823 A B P clauses _115321 _115322).
Proof. exact (eq_refl (term5905 A B P clauses _115321 _115322)). Qed.
Lemma lem8419272 {A B P : Type'} (_115321 : P -> A) (_115322 : type558 A B P) (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term5823 A B P clauses _115321 _115322.
Proof. exact (EQ_MP (@lem8419271 A B P clauses _115321 _115322) (@lem8419270 A B P _115321 _115322 clauses h1)). Qed.
Lemma lem8419273 {A B P : Type'} (_115321 : P -> A) (_115322 : type558 A B P) (_115323 : P -> A) (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term5906 A B P clauses _115321 _115322 _115323.
Proof. exact (@lem8419272 A B P _115321 _115322 clauses h1 _115323). Qed.
Lemma lem8419274 {A B P : Type'} (clauses : type1635 A B P) (_115321 : P -> A) (_115323 : P -> A) (_115322 : type558 A B P) : (term5906 A B P clauses _115321 _115322 _115323) = (term5821 A B P clauses _115321 _115323 _115322).
Proof. exact (eq_refl (term5906 A B P clauses _115321 _115322 _115323)). Qed.
Lemma lem8419275 {A B P : Type'} (_115321 : P -> A) (_115323 : P -> A) (_115322 : type558 A B P) (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term5821 A B P clauses _115321 _115323 _115322.
Proof. exact (EQ_MP (@lem8419274 A B P clauses _115321 _115323 _115322) (@lem8419273 A B P _115321 _115322 _115323 clauses h1)). Qed.
Lemma lem8419276 {A B P : Type'} (_115321 : P -> A) (_115323 : P -> A) (_115322 : type558 A B P) (_115324 : type558 A B P) (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term5907 A B P clauses _115321 _115323 _115322 _115324.
Proof. exact (@lem8419275 A B P _115321 _115323 _115322 clauses h1 _115324). Qed.
Lemma lem8419277 {A B P : Type'} (clauses : type1635 A B P) (_115321 : P -> A) (_115323 : P -> A) (_115322 : type558 A B P) (_115324 : type558 A B P) : (term5907 A B P clauses _115321 _115323 _115322 _115324) = (term5819 A B P clauses _115321 _115323 _115322 _115324).
Proof. exact (eq_refl (term5907 A B P clauses _115321 _115323 _115322 _115324)). Qed.
Lemma lem8419278 {A B P : Type'} (_115321 : P -> A) (_115323 : P -> A) (_115322 : type558 A B P) (_115324 : type558 A B P) (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term5819 A B P clauses _115321 _115323 _115322 _115324.
Proof. exact (EQ_MP (@lem8419277 A B P clauses _115321 _115323 _115322 _115324) (@lem8419276 A B P _115321 _115323 _115322 _115324 clauses h1)). Qed.
Lemma lem8419279 {A B P : Type'} (_115321 : P -> A) (_115323 : P -> A) (_115322 : type558 A B P) (_115324 : type558 A B P) (_115325 : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term5908 A B P clauses _115321 _115323 _115322 _115324 _115325.
Proof. exact (@lem8419278 A B P _115321 _115323 _115322 _115324 clauses h1 _115325). Qed.
Lemma lem8419280 {A B P : Type'} (clauses : type1635 A B P) (_115321 : P -> A) (_115323 : P -> A) (_115322 : type558 A B P) (_115324 : type558 A B P) (_115325 : A -> B) : (term5908 A B P clauses _115321 _115323 _115322 _115324 _115325) = (term5817 A B P clauses _115321 _115323 _115322 _115324 _115325).
Proof. exact (eq_refl (term5908 A B P clauses _115321 _115323 _115322 _115324 _115325)). Qed.
Lemma lem8419281 {A B P : Type'} (_115321 : P -> A) (_115323 : P -> A) (_115322 : type558 A B P) (_115324 : type558 A B P) (_115325 : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term5817 A B P clauses _115321 _115323 _115322 _115324 _115325.
Proof. exact (EQ_MP (@lem8419280 A B P clauses _115321 _115323 _115322 _115324 _115325) (@lem8419279 A B P _115321 _115323 _115322 _115324 _115325 clauses h1)). Qed.
Lemma lem8419282 {A B P : Type'} (_115321 : P -> A) (_115323 : P -> A) (_115322 : type558 A B P) (_115324 : type558 A B P) (_115325 : A -> B) (_115326 : P) (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term5909 A B P clauses _115321 _115323 _115322 _115324 _115325 _115326.
Proof. exact (@lem8419281 A B P _115321 _115323 _115322 _115324 _115325 clauses h1 _115326). Qed.
Lemma lem8419283 {A B P : Type'} (clauses : type1635 A B P) (_115321 : P -> A) (_115323 : P -> A) (_115322 : type558 A B P) (_115326 : P) (_115324 : type558 A B P) (_115325 : A -> B) : (term5909 A B P clauses _115321 _115323 _115322 _115324 _115325 _115326) = (term5815 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325).
Proof. exact (eq_refl (term5909 A B P clauses _115321 _115323 _115322 _115324 _115325 _115326)). Qed.
Lemma lem8419284 {A B P : Type'} (_115321 : P -> A) (_115323 : P -> A) (_115322 : type558 A B P) (_115326 : P) (_115324 : type558 A B P) (_115325 : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term5815 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325.
Proof. exact (EQ_MP (@lem8419283 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325) (@lem8419282 A B P _115321 _115323 _115322 _115324 _115325 _115326 clauses h1)). Qed.
Lemma lem8419285 {A B P : Type'} (_115321 : P -> A) (_115323 : P -> A) (_115322 : type558 A B P) (_115326 : P) (_115324 : type558 A B P) (_115325 : A -> B) (_115327 : P) (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term5910 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327.
Proof. exact (@lem8419284 A B P _115321 _115323 _115322 _115326 _115324 _115325 clauses h1 _115327). Qed.
Lemma lem8419286 {A B P : Type'} (clauses : type1635 A B P) (_115321 : P -> A) (_115323 : P -> A) (_115322 : type558 A B P) (_115326 : P) (_115324 : type558 A B P) (_115325 : A -> B) (_115327 : P) : (term5910 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327) = (term5813 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327).
Proof. exact (eq_refl (term5910 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327)). Qed.
Lemma lem8419287 {A B P : Type'} (_115321 : P -> A) (_115323 : P -> A) (_115322 : type558 A B P) (_115326 : P) (_115324 : type558 A B P) (_115325 : A -> B) (_115327 : P) (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term5813 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327.
Proof. exact (EQ_MP (@lem8419286 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327) (@lem8419285 A B P _115321 _115323 _115322 _115326 _115324 _115325 _115327 clauses h1)). Qed.
Lemma lem8419315 {A B P : Type'} (_115337 : type1635 A B P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5911 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 _115337.
Proof. exact (@lem8418502 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1 _115337). Qed.
Lemma lem8419316 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (_115337 : type1635 A B P) : (term5911 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 _115337) = (term5901 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 _115337).
Proof. exact (eq_refl (term5911 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 _115337)). Qed.
Lemma lem8419317 {A B P : Type'} (_115337 : type1635 A B P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5901 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 _115337.
Proof. exact (EQ_MP (@lem8419316 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 _115337) (@lem8419315 A B P _115337 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1)). Qed.
Lemma lem8419318 {A B P : Type'} (_115337 : type1635 A B P) (_115338 : A -> B) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5912 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 _115337 _115338.
Proof. exact (@lem8419317 A B P _115337 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1 _115338). Qed.
Lemma lem8419319 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (_115338 : A -> B) (_115337 : type1635 A B P) : (term5912 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 _115337 _115338) = (term5899 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 _115338 _115337).
Proof. exact (eq_refl (term5912 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 _115337 _115338)). Qed.
Lemma lem8419320 {A B P : Type'} (_115338 : A -> B) (_115337 : type1635 A B P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5899 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 _115338 _115337.
Proof. exact (EQ_MP (@lem8419319 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 _115338 _115337) (@lem8419318 A B P _115337 _115338 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1)). Qed.
Lemma lem8419514 {A B P : Type'} (_115338 : A -> B) (_115337 : type1635 A B P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5896 A B P t'''''''' t''''''''' s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337.
Proof. exact (proj1 (@lem8419320 A B P _115338 _115337 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1)). Qed.
Lemma lem8419515 {A B P : Type'} (_115338 : A -> B) (_115337 : type1635 A B P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5894 A B P t''''''''' s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337.
Proof. exact (proj2 (@lem8419514 A B P _115338 _115337 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1)). Qed.
Lemma lem8419546 {A B P : Type'} (clauses : type1635 A B P) (_115321 : P -> A) (_115323 : P -> A) (_115322 : type558 A B P) (_115326 : P) (_115324 : type558 A B P) (_115325 : A -> B) (_115327 : P) : (term5813 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327) = (term5913 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327).
Proof. exact (@lem8390864 (term5809 A B P _115321 _115322 _115323 _115324 clauses) (term5797 A P _115321 _115326 _115323 _115327) ((term5792 A B P _115322 _115325 _115326) = (term5792 A B P _115324 _115325 _115327))). Qed.
Lemma lem8419557 {A B P : Type'} (clauses : type1635 A B P) (_115321 : P -> A) (_115323 : P -> A) (_115322 : type558 A B P) (_115326 : P) (_115324 : type558 A B P) (_115325 : A -> B) (_115327 : P) : (term5913 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327) = (term5914 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327).
Proof. exact (@lem8390864 (term5806 A B P _115321 _115322 clauses) (term5806 A B P _115323 _115324 clauses) (term5915 A B P _115321 _115323 _115322 _115326 _115324 _115325 _115327)). Qed.
Lemma lem8419559 {A B P : Type'} (clauses : type1635 A B P) (_115321 : P -> A) (_115323 : P -> A) (_115322 : type558 A B P) (_115326 : P) (_115324 : type558 A B P) (_115325 : A -> B) (_115327 : P) : (term5813 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327) = (term5914 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327).
Proof. exact (TRANS (@lem8419546 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327) (@lem8419557 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327)). Qed.
Lemma lem8419560 {A B P : Type'} (_115321 : P -> A) (_115323 : P -> A) (_115322 : type558 A B P) (_115326 : P) (_115324 : type558 A B P) (_115325 : A -> B) (_115327 : P) (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term5914 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327.
Proof. exact (EQ_MP (@lem8419559 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327) (@lem8419287 A B P _115321 _115323 _115322 _115326 _115324 _115325 _115327 clauses h1)). Qed.
Lemma lem8419564 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term449 A B P _115314 f clauses) : term5836 A B P _115314 f clauses.
Proof. exact (EQ_MP (@lem8412834 A B P _115314 f clauses) (@lem8407056 A B P _115314 f clauses h1)). Qed.
Lemma lem8419702 {A B P : Type'} (_115338 : A -> B) (_115337 : type1635 A B P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5890 A B P t'''''''' x'''' t''''''''' y'''' _115314 _115338 _115337.
Proof. exact (proj2 (@lem8419320 A B P _115338 _115337 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1)). Qed.
Lemma lem8419708 {A B P : Type'} (_115338 : A -> B) (_115337 : type1635 A B P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5916 A B P s'''''''' t'''''''' _115314 _115338 _115337.
Proof. exact (proj1 (@lem8419514 A B P _115338 _115337 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1)). Qed.
Lemma lem8419714 {A B P : Type'} (_115338 : A -> B) (_115337 : type1635 A B P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5916 A B P s''''''''' t''''''''' _115314 _115338 _115337.
Proof. exact (proj1 (@lem8419515 A B P _115338 _115337 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1)). Qed.
Lemma lem8419720 {A B P : Type'} (_115338 : A -> B) (_115337 : type1635 A B P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5917 A B P s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337.
Proof. exact (proj2 (@lem8419515 A B P _115338 _115337 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1)). Qed.
Lemma lem8422743 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term5836 A B P _115314 f clauses) : term5836 A B P _115314 f clauses.
Proof. exact (h1). Qed.
Lemma lem8422744 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term5836 A B P _115314 f clauses) : term5918 A B P _115314 f clauses.
Proof. exact (fun h0 : term5835 A B P _115314 f clauses => @lem8422743 A B P _115314 f clauses h1). Qed.
Lemma lem8422746 (p : Prop) : (term5919 p) = (~ p).
Proof. exact (EQ_MP (@lem21028 p) (@lem21107 p)). Qed.
Lemma lem8422747 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) : (term5918 A B P _115314 f clauses) = (term5836 A B P _115314 f clauses).
Proof. exact (@lem8422746 (term5835 A B P _115314 f clauses)). Qed.
Lemma lem8422748 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term5836 A B P _115314 f clauses) : term5836 A B P _115314 f clauses.
Proof. exact (EQ_MP (@lem8422747 A B P _115314 f clauses) (@lem8422744 A B P _115314 f clauses h1)). Qed.
Lemma lem8422750 (b : Prop) (a : Prop) : (a \/ b) = (term5920 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8422753 {A B P : Type'} (_115314 : type1080 A B P) (s'''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (_115338 : A -> B) (_115337 : type1635 A B P) : (term5916 A B P s'''''''' t'''''''' _115314 _115338 _115337) = (term5921 A B P _115314 s'''''''' t'''''''' _115338 _115337).
Proof. exact (@lem8422750 (term5835 A B P _115314 _115338 _115337) (term5869 A B P s'''''''' t'''''''' _115338 _115337)). Qed.
Lemma lem8422756 {A B P : Type'} (_115338 : A -> B) (_115337 : type1635 A B P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5921 A B P _115314 s'''''''' t'''''''' _115338 _115337.
Proof. exact (EQ_MP (@lem8422753 A B P _115314 s'''''''' t'''''''' _115338 _115337) (@lem8419708 A B P _115338 _115337 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1)). Qed.
Lemma lem8422757 {A B P : Type'} (_115338 : A -> B) (_115337 : type1635 A B P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5921 A B P _115314 s'''''''' t'''''''' _115338 _115337.
Proof. exact (@lem8422756 A B P _115338 _115337 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1). Qed.
Lemma lem8422758 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5921 A B P _115314 s'''''''' t'''''''' f clauses.
Proof. exact (@lem8422757 A B P f clauses s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1). Qed.
Lemma lem8422761 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h2 : term5836 A B P _115314 f clauses) : term5869 A B P s'''''''' t'''''''' f clauses.
Proof. exact (@lem8422758 A B P f clauses s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1 (@lem8422748 A B P _115314 f clauses h2)). Qed.
Lemma lem8422762 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h2 : term5836 A B P _115314 f clauses) : term5922 A B P s'''''''' t'''''''' f clauses.
Proof. exact (fun h0 : term5923 A B P s'''''''' t'''''''' f clauses => @lem8422761 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 f clauses h1 h2). Qed.
Lemma lem8422764 (p : Prop) : (term5924 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8422765 {A B P : Type'} (s'''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (f : A -> B) (clauses : type1635 A B P) : (term5922 A B P s'''''''' t'''''''' f clauses) = (term5869 A B P s'''''''' t'''''''' f clauses).
Proof. exact (@lem8422764 (term5869 A B P s'''''''' t'''''''' f clauses)). Qed.
Lemma lem8422766 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h2 : term5836 A B P _115314 f clauses) : term5869 A B P s'''''''' t'''''''' f clauses.
Proof. exact (EQ_MP (@lem8422765 A B P s'''''''' t'''''''' f clauses) (@lem8422762 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 f clauses h1 h2)). Qed.
Lemma lem8422769 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term5836 A B P _115314 f clauses) : term5836 A B P _115314 f clauses.
Proof. exact (h1). Qed.
Lemma lem8422770 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term5836 A B P _115314 f clauses) : term5918 A B P _115314 f clauses.
Proof. exact (fun h0 : term5835 A B P _115314 f clauses => @lem8422769 A B P _115314 f clauses h1). Qed.
Lemma lem8422772 (p : Prop) : (term5919 p) = (~ p).
Proof. exact (EQ_MP (@lem21028 p) (@lem21107 p)). Qed.
Lemma lem8422773 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) : (term5918 A B P _115314 f clauses) = (term5836 A B P _115314 f clauses).
Proof. exact (@lem8422772 (term5835 A B P _115314 f clauses)). Qed.
Lemma lem8422774 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term5836 A B P _115314 f clauses) : term5836 A B P _115314 f clauses.
Proof. exact (EQ_MP (@lem8422773 A B P _115314 f clauses) (@lem8422770 A B P _115314 f clauses h1)). Qed.
Lemma lem8422776 (b : Prop) (a : Prop) : (a \/ b) = (term5920 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8422779 {A B P : Type'} (_115314 : type1080 A B P) (s''''''''' : type1082 A B P) (t''''''''' : type1081 A B P) (_115338 : A -> B) (_115337 : type1635 A B P) : (term5916 A B P s''''''''' t''''''''' _115314 _115338 _115337) = (term5921 A B P _115314 s''''''''' t''''''''' _115338 _115337).
Proof. exact (@lem8422776 (term5835 A B P _115314 _115338 _115337) (term5869 A B P s''''''''' t''''''''' _115338 _115337)). Qed.
Lemma lem8422782 {A B P : Type'} (_115338 : A -> B) (_115337 : type1635 A B P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5921 A B P _115314 s''''''''' t''''''''' _115338 _115337.
Proof. exact (EQ_MP (@lem8422779 A B P _115314 s''''''''' t''''''''' _115338 _115337) (@lem8419714 A B P _115338 _115337 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1)). Qed.
Lemma lem8422783 {A B P : Type'} (_115338 : A -> B) (_115337 : type1635 A B P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5921 A B P _115314 s''''''''' t''''''''' _115338 _115337.
Proof. exact (@lem8422782 A B P _115338 _115337 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1). Qed.
Lemma lem8422784 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5921 A B P _115314 s''''''''' t''''''''' f clauses.
Proof. exact (@lem8422783 A B P f clauses s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1). Qed.
Lemma lem8422787 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h2 : term5836 A B P _115314 f clauses) : term5869 A B P s''''''''' t''''''''' f clauses.
Proof. exact (@lem8422784 A B P f clauses s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1 (@lem8422774 A B P _115314 f clauses h2)). Qed.
Lemma lem8422788 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h2 : term5836 A B P _115314 f clauses) : term5922 A B P s''''''''' t''''''''' f clauses.
Proof. exact (fun h0 : term5923 A B P s''''''''' t''''''''' f clauses => @lem8422787 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 f clauses h1 h2). Qed.
Lemma lem8422790 (p : Prop) : (term5924 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8422791 {A B P : Type'} (s''''''''' : type1082 A B P) (t''''''''' : type1081 A B P) (f : A -> B) (clauses : type1635 A B P) : (term5922 A B P s''''''''' t''''''''' f clauses) = (term5869 A B P s''''''''' t''''''''' f clauses).
Proof. exact (@lem8422790 (term5869 A B P s''''''''' t''''''''' f clauses)). Qed.
Lemma lem8422792 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h2 : term5836 A B P _115314 f clauses) : term5869 A B P s''''''''' t''''''''' f clauses.
Proof. exact (EQ_MP (@lem8422791 A B P s''''''''' t''''''''' f clauses) (@lem8422788 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 f clauses h1 h2)). Qed.
Lemma lem8422795 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term5836 A B P _115314 f clauses) : term5836 A B P _115314 f clauses.
Proof. exact (h1). Qed.
Lemma lem8422796 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term5836 A B P _115314 f clauses) : term5918 A B P _115314 f clauses.
Proof. exact (fun h0 : term5835 A B P _115314 f clauses => @lem8422795 A B P _115314 f clauses h1). Qed.
Lemma lem8422798 (p : Prop) : (term5919 p) = (~ p).
Proof. exact (EQ_MP (@lem21028 p) (@lem21107 p)). Qed.
Lemma lem8422799 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) : (term5918 A B P _115314 f clauses) = (term5836 A B P _115314 f clauses).
Proof. exact (@lem8422798 (term5835 A B P _115314 f clauses)). Qed.
Lemma lem8422800 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term5836 A B P _115314 f clauses) : term5836 A B P _115314 f clauses.
Proof. exact (EQ_MP (@lem8422799 A B P _115314 f clauses) (@lem8422796 A B P _115314 f clauses h1)). Qed.
Lemma lem8422802 (b : Prop) (a : Prop) : (a \/ b) = (term5920 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8422805 {A B P : Type'} (_115314 : type1080 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115337 : type1635 A B P) (_115338 : A -> B) : (term5890 A B P t'''''''' x'''' t''''''''' y'''' _115314 _115338 _115337) = (term5925 A B P _115314 t'''''''' x'''' t''''''''' y'''' _115337 _115338).
Proof. exact (@lem8422802 (term5835 A B P _115314 _115338 _115337) (term5848 A B P t'''''''' x'''' t''''''''' y'''' _115337 _115338)). Qed.
Lemma lem8422808 {A B P : Type'} (_115337 : type1635 A B P) (_115338 : A -> B) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5925 A B P _115314 t'''''''' x'''' t''''''''' y'''' _115337 _115338.
Proof. exact (EQ_MP (@lem8422805 A B P _115314 t'''''''' x'''' t''''''''' y'''' _115337 _115338) (@lem8419702 A B P _115338 _115337 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1)). Qed.
Lemma lem8422809 {A B P : Type'} (_115337 : type1635 A B P) (_115338 : A -> B) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5925 A B P _115314 t'''''''' x'''' t''''''''' y'''' _115337 _115338.
Proof. exact (@lem8422808 A B P _115337 _115338 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1). Qed.
Lemma lem8422810 {A B P : Type'} (clauses : type1635 A B P) (f : A -> B) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5925 A B P _115314 t'''''''' x'''' t''''''''' y'''' clauses f.
Proof. exact (@lem8422809 A B P clauses f s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1). Qed.
Lemma lem8422813 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h2 : term5836 A B P _115314 f clauses) : term5848 A B P t'''''''' x'''' t''''''''' y'''' clauses f.
Proof. exact (@lem8422810 A B P clauses f s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1 (@lem8422800 A B P _115314 f clauses h2)). Qed.
Lemma lem8422814 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h2 : term5836 A B P _115314 f clauses) : term5926 A B P t'''''''' x'''' t''''''''' y'''' clauses f.
Proof. exact (fun h0 : (term5844 A B P t'''''''' x'''' clauses f) = (term5844 A B P t''''''''' y'''' clauses f) => @lem8422813 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 f clauses h1 h2). Qed.
Lemma lem8422816 (p : Prop) : (term5919 p) = (~ p).
Proof. exact (EQ_MP (@lem21028 p) (@lem21107 p)). Qed.
Lemma lem8422817 {A B P : Type'} (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (clauses : type1635 A B P) (f : A -> B) : (term5926 A B P t'''''''' x'''' t''''''''' y'''' clauses f) = (term5848 A B P t'''''''' x'''' t''''''''' y'''' clauses f).
Proof. exact (@lem8422816 ((term5844 A B P t'''''''' x'''' clauses f) = (term5844 A B P t''''''''' y'''' clauses f))). Qed.
Lemma lem8422818 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h2 : term5836 A B P _115314 f clauses) : term5848 A B P t'''''''' x'''' t''''''''' y'''' clauses f.
Proof. exact (EQ_MP (@lem8422817 A B P t'''''''' x'''' t''''''''' y'''' clauses f) (@lem8422814 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 f clauses h1 h2)). Qed.
Lemma lem8422834 (q : Prop) (p : Prop) (r : Prop) : (term103 p q r) = (term103 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8422835 {A B P : Type'} (_115321 : P -> A) (_115323 : P -> A) (clauses : type1635 A B P) (_115322 : type558 A B P) (_115326 : P) (_115324 : type558 A B P) (_115325 : A -> B) (_115327 : P) : (term5927 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327) = (term5928 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327).
Proof. exact (@lem8422834 (term5797 A P _115321 _115326 _115323 _115327) (term5806 A B P _115323 _115324 clauses) ((term5792 A B P _115322 _115325 _115326) = (term5792 A B P _115324 _115325 _115327))). Qed.
Lemma lem8422851 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8422852 {A B P : Type'} (_115322 : type558 A B P) (_115326 : P) (_115325 : A -> B) (_115327 : P) (_115323 : P -> A) (_115324 : type558 A B P) (clauses : type1635 A B P) : (term5929 A B P _115323 clauses _115322 _115326 _115324 _115325 _115327) = (term5930 A B P _115322 _115326 _115325 _115327 _115323 _115324 clauses).
Proof. exact (@lem8422851 ((term5792 A B P _115322 _115325 _115326) = (term5792 A B P _115324 _115325 _115327)) (term5806 A B P _115323 _115324 clauses)). Qed.
Lemma lem8422860 {A P : Type'} (_115321 : P -> A) (_115326 : P) (_115323 : P -> A) (_115327 : P) : (term5931 A P _115321 _115326 _115323 _115327) = (term5931 A P _115321 _115326 _115323 _115327).
Proof. exact (eq_refl (term5931 A P _115321 _115326 _115323 _115327)). Qed.
Lemma lem8422861 {A B P : Type'} (_115321 : P -> A) (_115322 : type558 A B P) (_115326 : P) (_115325 : A -> B) (_115327 : P) (_115323 : P -> A) (_115324 : type558 A B P) (clauses : type1635 A B P) : (term5928 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327) = (term5932 A B P _115321 _115322 _115326 _115325 _115327 _115323 _115324 clauses).
Proof. exact (MK_COMB (@lem8422860 A P _115321 _115326 _115323 _115327) (@lem8422852 A B P _115322 _115326 _115325 _115327 _115323 _115324 clauses)). Qed.
Lemma lem8422865 (q : Prop) (p : Prop) (r : Prop) : (term103 p q r) = (term103 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8422866 {A B P : Type'} (_115322 : type558 A B P) (_115325 : A -> B) (_115321 : P -> A) (_115326 : P) (_115327 : P) (_115323 : P -> A) (_115324 : type558 A B P) (clauses : type1635 A B P) : (term5932 A B P _115321 _115322 _115326 _115325 _115327 _115323 _115324 clauses) = (term5933 A B P _115322 _115325 _115321 _115326 _115327 _115323 _115324 clauses).
Proof. exact (@lem8422865 ((term5792 A B P _115322 _115325 _115326) = (term5792 A B P _115324 _115325 _115327)) (term5797 A P _115321 _115326 _115323 _115327) (term5806 A B P _115323 _115324 clauses)). Qed.
Lemma lem8422886 {A B P : Type'} (_115322 : type558 A B P) (_115325 : A -> B) (_115321 : P -> A) (_115326 : P) (_115327 : P) (_115323 : P -> A) (_115324 : type558 A B P) (clauses : type1635 A B P) : (term5928 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327) = (term5933 A B P _115322 _115325 _115321 _115326 _115327 _115323 _115324 clauses).
Proof. exact (TRANS (@lem8422861 A B P _115321 _115322 _115326 _115325 _115327 _115323 _115324 clauses) (@lem8422866 A B P _115322 _115325 _115321 _115326 _115327 _115323 _115324 clauses)). Qed.
Lemma lem8422887 {A B P : Type'} (_115322 : type558 A B P) (_115325 : A -> B) (_115321 : P -> A) (_115326 : P) (_115327 : P) (_115323 : P -> A) (_115324 : type558 A B P) (clauses : type1635 A B P) : (term5927 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327) = (term5933 A B P _115322 _115325 _115321 _115326 _115327 _115323 _115324 clauses).
Proof. exact (TRANS (@lem8422835 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327) (@lem8422886 A B P _115322 _115325 _115321 _115326 _115327 _115323 _115324 clauses)). Qed.
Lemma lem8422888 {A B P : Type'} (_115321 : P -> A) (_115322 : type558 A B P) (clauses : type1635 A B P) : (term5808 A B P _115321 _115322 clauses) = (term5808 A B P _115321 _115322 clauses).
Proof. exact (eq_refl (term5808 A B P _115321 _115322 clauses)). Qed.
Lemma lem8422889 {A B P : Type'} (_115322 : type558 A B P) (_115325 : A -> B) (_115321 : P -> A) (_115326 : P) (_115327 : P) (_115323 : P -> A) (_115324 : type558 A B P) (clauses : type1635 A B P) : (term5914 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327) = (term5934 A B P _115322 _115325 _115321 _115326 _115327 _115323 _115324 clauses).
Proof. exact (MK_COMB (@lem8422888 A B P _115321 _115322 clauses) (@lem8422887 A B P _115322 _115325 _115321 _115326 _115327 _115323 _115324 clauses)). Qed.
Lemma lem8422893 (q : Prop) (p : Prop) (r : Prop) : (term103 p q r) = (term103 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8422894 {A B P : Type'} (_115325 : A -> B) (_115322 : type558 A B P) (_115321 : P -> A) (_115326 : P) (_115327 : P) (_115323 : P -> A) (_115324 : type558 A B P) (clauses : type1635 A B P) : (term5934 A B P _115322 _115325 _115321 _115326 _115327 _115323 _115324 clauses) = (term5935 A B P _115325 _115322 _115321 _115326 _115327 _115323 _115324 clauses).
Proof. exact (@lem8422893 ((term5792 A B P _115322 _115325 _115326) = (term5792 A B P _115324 _115325 _115327)) (term5806 A B P _115321 _115322 clauses) (term5936 A B P _115321 _115326 _115327 _115323 _115324 clauses)). Qed.
Lemma lem8422910 (q : Prop) (p : Prop) (r : Prop) : (term103 p q r) = (term103 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8422911 {A B P : Type'} (_115326 : P) (_115327 : P) (_115321 : P -> A) (_115322 : type558 A B P) (_115323 : P -> A) (_115324 : type558 A B P) (clauses : type1635 A B P) : (term5937 A B P _115322 _115321 _115326 _115327 _115323 _115324 clauses) = (term5938 A B P _115326 _115327 _115321 _115322 _115323 _115324 clauses).
Proof. exact (@lem8422910 (term5797 A P _115321 _115326 _115323 _115327) (term5806 A B P _115321 _115322 clauses) (term5806 A B P _115323 _115324 clauses)). Qed.
Lemma lem8422929 {A B P : Type'} (_115322 : type558 A B P) (_115326 : P) (_115324 : type558 A B P) (_115325 : A -> B) (_115327 : P) : (term5939 A B P _115322 _115326 _115324 _115325 _115327) = (term5939 A B P _115322 _115326 _115324 _115325 _115327).
Proof. exact (eq_refl (term5939 A B P _115322 _115326 _115324 _115325 _115327)). Qed.
Lemma lem8422930 {A B P : Type'} (_115325 : A -> B) (_115326 : P) (_115327 : P) (_115321 : P -> A) (_115322 : type558 A B P) (_115323 : P -> A) (_115324 : type558 A B P) (clauses : type1635 A B P) : (term5935 A B P _115325 _115322 _115321 _115326 _115327 _115323 _115324 clauses) = (term5940 A B P _115325 _115326 _115327 _115321 _115322 _115323 _115324 clauses).
Proof. exact (MK_COMB (@lem8422929 A B P _115322 _115326 _115324 _115325 _115327) (@lem8422911 A B P _115326 _115327 _115321 _115322 _115323 _115324 clauses)). Qed.
Lemma lem8422941 {A B P : Type'} (_115325 : A -> B) (_115326 : P) (_115327 : P) (_115321 : P -> A) (_115322 : type558 A B P) (_115323 : P -> A) (_115324 : type558 A B P) (clauses : type1635 A B P) : (term5934 A B P _115322 _115325 _115321 _115326 _115327 _115323 _115324 clauses) = (term5940 A B P _115325 _115326 _115327 _115321 _115322 _115323 _115324 clauses).
Proof. exact (TRANS (@lem8422894 A B P _115325 _115322 _115321 _115326 _115327 _115323 _115324 clauses) (@lem8422930 A B P _115325 _115326 _115327 _115321 _115322 _115323 _115324 clauses)). Qed.
Lemma lem8422942 {A B P : Type'} (_115325 : A -> B) (_115326 : P) (_115327 : P) (_115321 : P -> A) (_115322 : type558 A B P) (_115323 : P -> A) (_115324 : type558 A B P) (clauses : type1635 A B P) : (term5914 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327) = (term5940 A B P _115325 _115326 _115327 _115321 _115322 _115323 _115324 clauses).
Proof. exact (TRANS (@lem8422889 A B P _115322 _115325 _115321 _115326 _115327 _115323 _115324 clauses) (@lem8422941 A B P _115325 _115326 _115327 _115321 _115322 _115323 _115324 clauses)). Qed.
Lemma lem8422943 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8422944 {A B P : Type'} (_115325 : A -> B) (_115326 : P) (_115327 : P) (_115321 : P -> A) (_115322 : type558 A B P) (_115323 : P -> A) (_115324 : type558 A B P) (clauses : type1635 A B P) : (term5941 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327) = (term5942 A B P _115325 _115326 _115327 _115321 _115322 _115323 _115324 clauses).
Proof. exact (MK_COMB (@lem8422943) (@lem8422942 A B P _115325 _115326 _115327 _115321 _115322 _115323 _115324 clauses)). Qed.
Lemma lem8422970 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8422971 {A B P : Type'} (_115322 : type558 A B P) (_115326 : P) (_115325 : A -> B) (_115327 : P) (_115323 : P -> A) (_115324 : type558 A B P) (clauses : type1635 A B P) : (term5929 A B P _115323 clauses _115322 _115326 _115324 _115325 _115327) = (term5930 A B P _115322 _115326 _115325 _115327 _115323 _115324 clauses).
Proof. exact (@lem8422970 ((term5792 A B P _115322 _115325 _115326) = (term5792 A B P _115324 _115325 _115327)) (term5806 A B P _115323 _115324 clauses)). Qed.
Lemma lem8422979 {A B P : Type'} (_115321 : P -> A) (_115322 : type558 A B P) (clauses : type1635 A B P) : (term5808 A B P _115321 _115322 clauses) = (term5808 A B P _115321 _115322 clauses).
Proof. exact (eq_refl (term5808 A B P _115321 _115322 clauses)). Qed.
Lemma lem8422980 {A B P : Type'} (_115321 : P -> A) (_115322 : type558 A B P) (_115326 : P) (_115325 : A -> B) (_115327 : P) (_115323 : P -> A) (_115324 : type558 A B P) (clauses : type1635 A B P) : (term5943 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327) = (term5944 A B P _115321 _115322 _115326 _115325 _115327 _115323 _115324 clauses).
Proof. exact (MK_COMB (@lem8422979 A B P _115321 _115322 clauses) (@lem8422971 A B P _115322 _115326 _115325 _115327 _115323 _115324 clauses)). Qed.
Lemma lem8422984 (q : Prop) (p : Prop) (r : Prop) : (term103 p q r) = (term103 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8422985 {A B P : Type'} (_115326 : P) (_115325 : A -> B) (_115327 : P) (_115321 : P -> A) (_115322 : type558 A B P) (_115323 : P -> A) (_115324 : type558 A B P) (clauses : type1635 A B P) : (term5944 A B P _115321 _115322 _115326 _115325 _115327 _115323 _115324 clauses) = (term5945 A B P _115326 _115325 _115327 _115321 _115322 _115323 _115324 clauses).
Proof. exact (@lem8422984 ((term5792 A B P _115322 _115325 _115326) = (term5792 A B P _115324 _115325 _115327)) (term5806 A B P _115321 _115322 clauses) (term5806 A B P _115323 _115324 clauses)). Qed.
Lemma lem8423003 {A B P : Type'} (_115326 : P) (_115325 : A -> B) (_115327 : P) (_115321 : P -> A) (_115322 : type558 A B P) (_115323 : P -> A) (_115324 : type558 A B P) (clauses : type1635 A B P) : (term5943 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327) = (term5945 A B P _115326 _115325 _115327 _115321 _115322 _115323 _115324 clauses).
Proof. exact (TRANS (@lem8422980 A B P _115321 _115322 _115326 _115325 _115327 _115323 _115324 clauses) (@lem8422985 A B P _115326 _115325 _115327 _115321 _115322 _115323 _115324 clauses)). Qed.
Lemma lem8423004 {A P : Type'} (_115321 : P -> A) (_115326 : P) (_115323 : P -> A) (_115327 : P) : (term5931 A P _115321 _115326 _115323 _115327) = (term5931 A P _115321 _115326 _115323 _115327).
Proof. exact (eq_refl (term5931 A P _115321 _115326 _115323 _115327)). Qed.
Lemma lem8423005 {A B P : Type'} (_115326 : P) (_115325 : A -> B) (_115327 : P) (_115321 : P -> A) (_115322 : type558 A B P) (_115323 : P -> A) (_115324 : type558 A B P) (clauses : type1635 A B P) : (term5946 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327) = (term5947 A B P _115326 _115325 _115327 _115321 _115322 _115323 _115324 clauses).
Proof. exact (MK_COMB (@lem8423004 A P _115321 _115326 _115323 _115327) (@lem8423003 A B P _115326 _115325 _115327 _115321 _115322 _115323 _115324 clauses)). Qed.
Lemma lem8423009 (q : Prop) (p : Prop) (r : Prop) : (term103 p q r) = (term103 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8423010 {A B P : Type'} (_115325 : A -> B) (_115326 : P) (_115327 : P) (_115321 : P -> A) (_115322 : type558 A B P) (_115323 : P -> A) (_115324 : type558 A B P) (clauses : type1635 A B P) : (term5947 A B P _115326 _115325 _115327 _115321 _115322 _115323 _115324 clauses) = (term5940 A B P _115325 _115326 _115327 _115321 _115322 _115323 _115324 clauses).
Proof. exact (@lem8423009 ((term5792 A B P _115322 _115325 _115326) = (term5792 A B P _115324 _115325 _115327)) (term5797 A P _115321 _115326 _115323 _115327) (term5809 A B P _115321 _115322 _115323 _115324 clauses)). Qed.
Lemma lem8423040 {A B P : Type'} (_115325 : A -> B) (_115326 : P) (_115327 : P) (_115321 : P -> A) (_115322 : type558 A B P) (_115323 : P -> A) (_115324 : type558 A B P) (clauses : type1635 A B P) : (term5946 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327) = (term5940 A B P _115325 _115326 _115327 _115321 _115322 _115323 _115324 clauses).
Proof. exact (TRANS (@lem8423005 A B P _115326 _115325 _115327 _115321 _115322 _115323 _115324 clauses) (@lem8423010 A B P _115325 _115326 _115327 _115321 _115322 _115323 _115324 clauses)). Qed.
Lemma lem8423041 {A B P : Type'} (_115325 : A -> B) (_115326 : P) (_115327 : P) (_115321 : P -> A) (_115322 : type558 A B P) (_115323 : P -> A) (_115324 : type558 A B P) (clauses : type1635 A B P) : ((term5914 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327) = (term5946 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327)) = ((term5940 A B P _115325 _115326 _115327 _115321 _115322 _115323 _115324 clauses) = (term5940 A B P _115325 _115326 _115327 _115321 _115322 _115323 _115324 clauses)).
Proof. exact (MK_COMB (@lem8422944 A B P _115325 _115326 _115327 _115321 _115322 _115323 _115324 clauses) (@lem8423040 A B P _115325 _115326 _115327 _115321 _115322 _115323 _115324 clauses)). Qed.
Lemma lem8423043 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8423044 (x : Prop) : (x = x) = True.
Proof. exact (@lem8423043 Prop x). Qed.
Lemma lem8423045 {A B P : Type'} (_115325 : A -> B) (_115326 : P) (_115327 : P) (_115321 : P -> A) (_115322 : type558 A B P) (_115323 : P -> A) (_115324 : type558 A B P) (clauses : type1635 A B P) : ((term5940 A B P _115325 _115326 _115327 _115321 _115322 _115323 _115324 clauses) = (term5940 A B P _115325 _115326 _115327 _115321 _115322 _115323 _115324 clauses)) = True.
Proof. exact (@lem8423044 (term5940 A B P _115325 _115326 _115327 _115321 _115322 _115323 _115324 clauses)). Qed.
Lemma lem8423046 {A B P : Type'} (_115321 : P -> A) (_115323 : P -> A) (clauses : type1635 A B P) (_115322 : type558 A B P) (_115326 : P) (_115324 : type558 A B P) (_115325 : A -> B) (_115327 : P) : ((term5914 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327) = (term5946 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327)) = True.
Proof. exact (TRANS (@lem8423041 A B P _115325 _115326 _115327 _115321 _115322 _115323 _115324 clauses) (@lem8423045 A B P _115325 _115326 _115327 _115321 _115322 _115323 _115324 clauses)). Qed.
Lemma lem8423047 {A B P : Type'} (_115321 : P -> A) (_115323 : P -> A) (clauses : type1635 A B P) (_115322 : type558 A B P) (_115326 : P) (_115324 : type558 A B P) (_115325 : A -> B) (_115327 : P) : True = ((term5914 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327) = (term5946 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327)).
Proof. exact (SYM (@lem8423046 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327)). Qed.
Lemma lem8423048 {A B P : Type'} (_115321 : P -> A) (_115323 : P -> A) (clauses : type1635 A B P) (_115322 : type558 A B P) (_115326 : P) (_115324 : type558 A B P) (_115325 : A -> B) (_115327 : P) : (term5914 A B P clauses _115321 _115323 _115322 _115326 _115324 _115325 _115327) = (term5946 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327).
Proof. exact (EQ_MP (@lem8423047 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327) (@lem0)). Qed.
Lemma lem8423049 {A B P : Type'} (_115321 : P -> A) (_115323 : P -> A) (_115322 : type558 A B P) (_115326 : P) (_115324 : type558 A B P) (_115325 : A -> B) (_115327 : P) (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term5946 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327.
Proof. exact (EQ_MP (@lem8423048 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327) (@lem8419560 A B P _115321 _115323 _115322 _115326 _115324 _115325 _115327 clauses h1)). Qed.
Lemma lem8423051 (b : Prop) (a : Prop) : (a \/ b) = (term5920 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8423052 {A B P : Type'} (clauses : type1635 A B P) (_115322 : type558 A B P) (_115324 : type558 A B P) (_115325 : A -> B) (_115321 : P -> A) (_115326 : P) (_115323 : P -> A) (_115327 : P) : (term5946 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327) = (term5948 A B P clauses _115322 _115324 _115325 _115321 _115326 _115323 _115327).
Proof. exact (@lem8423051 (term5943 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327) (term5797 A P _115321 _115326 _115323 _115327)). Qed.
Lemma lem8423054 (a : Prop) (b : Prop) : (term5949 a b) = (term5950 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8423055 {A B P : Type'} (_115321 : P -> A) (_115323 : P -> A) (clauses : type1635 A B P) (_115322 : type558 A B P) (_115326 : P) (_115324 : type558 A B P) (_115325 : A -> B) (_115327 : P) : (term5951 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327) = (term5952 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327).
Proof. exact (@lem8423054 (term5806 A B P _115321 _115322 clauses) (term5929 A B P _115323 clauses _115322 _115326 _115324 _115325 _115327)). Qed.
Lemma lem8423057 (a : Prop) : (term5953 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8423058 {A B P : Type'} (_115321 : P -> A) (_115322 : type558 A B P) (clauses : type1635 A B P) : (term5954 A B P _115321 _115322 clauses) = (term5804 A B P _115321 _115322 clauses).
Proof. exact (@lem8423057 (term5804 A B P _115321 _115322 clauses)). Qed.
Lemma lem8423059 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8423060 {A B P : Type'} (_115321 : P -> A) (_115322 : type558 A B P) (clauses : type1635 A B P) : (term5955 A B P _115321 _115322 clauses) = (term5956 A B P _115321 _115322 clauses).
Proof. exact (MK_COMB (@lem8423059) (@lem8423058 A B P _115321 _115322 clauses)). Qed.
Lemma lem8423062 (a : Prop) (b : Prop) : (term5949 a b) = (term5950 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8423063 {A B P : Type'} (_115323 : P -> A) (clauses : type1635 A B P) (_115322 : type558 A B P) (_115326 : P) (_115324 : type558 A B P) (_115325 : A -> B) (_115327 : P) : (term5957 A B P _115323 clauses _115322 _115326 _115324 _115325 _115327) = (term5958 A B P _115323 clauses _115322 _115326 _115324 _115325 _115327).
Proof. exact (@lem8423062 (term5806 A B P _115323 _115324 clauses) ((term5792 A B P _115322 _115325 _115326) = (term5792 A B P _115324 _115325 _115327))). Qed.
Lemma lem8423065 (a : Prop) : (term5953 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8423066 {A B P : Type'} (_115323 : P -> A) (_115324 : type558 A B P) (clauses : type1635 A B P) : (term5954 A B P _115323 _115324 clauses) = (term5804 A B P _115323 _115324 clauses).
Proof. exact (@lem8423065 (term5804 A B P _115323 _115324 clauses)). Qed.
Lemma lem8423067 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8423068 {A B P : Type'} (_115323 : P -> A) (_115324 : type558 A B P) (clauses : type1635 A B P) : (term5955 A B P _115323 _115324 clauses) = (term5956 A B P _115323 _115324 clauses).
Proof. exact (MK_COMB (@lem8423067) (@lem8423066 A B P _115323 _115324 clauses)). Qed.
Lemma lem8423069 {A B P : Type'} (_115322 : type558 A B P) (_115326 : P) (_115324 : type558 A B P) (_115325 : A -> B) (_115327 : P) : (term5959 A B P _115322 _115326 _115324 _115325 _115327) = (term5959 A B P _115322 _115326 _115324 _115325 _115327).
Proof. exact (eq_refl (term5959 A B P _115322 _115326 _115324 _115325 _115327)). Qed.
Lemma lem8423070 {A B P : Type'} (_115323 : P -> A) (clauses : type1635 A B P) (_115322 : type558 A B P) (_115326 : P) (_115324 : type558 A B P) (_115325 : A -> B) (_115327 : P) : (term5958 A B P _115323 clauses _115322 _115326 _115324 _115325 _115327) = (term5960 A B P _115323 clauses _115322 _115326 _115324 _115325 _115327).
Proof. exact (MK_COMB (@lem8423068 A B P _115323 _115324 clauses) (@lem8423069 A B P _115322 _115326 _115324 _115325 _115327)). Qed.
Lemma lem8423071 {A B P : Type'} (_115323 : P -> A) (clauses : type1635 A B P) (_115322 : type558 A B P) (_115326 : P) (_115324 : type558 A B P) (_115325 : A -> B) (_115327 : P) : (term5957 A B P _115323 clauses _115322 _115326 _115324 _115325 _115327) = (term5960 A B P _115323 clauses _115322 _115326 _115324 _115325 _115327).
Proof. exact (TRANS (@lem8423063 A B P _115323 clauses _115322 _115326 _115324 _115325 _115327) (@lem8423070 A B P _115323 clauses _115322 _115326 _115324 _115325 _115327)). Qed.
Lemma lem8423072 {A B P : Type'} (_115321 : P -> A) (_115323 : P -> A) (clauses : type1635 A B P) (_115322 : type558 A B P) (_115326 : P) (_115324 : type558 A B P) (_115325 : A -> B) (_115327 : P) : (term5952 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327) = (term5961 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327).
Proof. exact (MK_COMB (@lem8423060 A B P _115321 _115322 clauses) (@lem8423071 A B P _115323 clauses _115322 _115326 _115324 _115325 _115327)). Qed.
Lemma lem8423073 {A B P : Type'} (_115321 : P -> A) (_115323 : P -> A) (clauses : type1635 A B P) (_115322 : type558 A B P) (_115326 : P) (_115324 : type558 A B P) (_115325 : A -> B) (_115327 : P) : (term5951 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327) = (term5961 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327).
Proof. exact (TRANS (@lem8423055 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327) (@lem8423072 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327)). Qed.
Lemma lem8423074 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8423075 {A B P : Type'} (_115321 : P -> A) (_115323 : P -> A) (clauses : type1635 A B P) (_115322 : type558 A B P) (_115326 : P) (_115324 : type558 A B P) (_115325 : A -> B) (_115327 : P) : (term5962 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327) = (term5963 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327).
Proof. exact (MK_COMB (@lem8423074) (@lem8423073 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327)). Qed.
Lemma lem8423076 {A P : Type'} (_115321 : P -> A) (_115326 : P) (_115323 : P -> A) (_115327 : P) : (term5797 A P _115321 _115326 _115323 _115327) = (term5797 A P _115321 _115326 _115323 _115327).
Proof. exact (eq_refl (term5797 A P _115321 _115326 _115323 _115327)). Qed.
Lemma lem8423077 {A B P : Type'} (clauses : type1635 A B P) (_115322 : type558 A B P) (_115324 : type558 A B P) (_115325 : A -> B) (_115321 : P -> A) (_115326 : P) (_115323 : P -> A) (_115327 : P) : (term5948 A B P clauses _115322 _115324 _115325 _115321 _115326 _115323 _115327) = (term5964 A B P clauses _115322 _115324 _115325 _115321 _115326 _115323 _115327).
Proof. exact (MK_COMB (@lem8423075 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327) (@lem8423076 A P _115321 _115326 _115323 _115327)). Qed.
Lemma lem8423078 {A B P : Type'} (clauses : type1635 A B P) (_115322 : type558 A B P) (_115324 : type558 A B P) (_115325 : A -> B) (_115321 : P -> A) (_115326 : P) (_115323 : P -> A) (_115327 : P) : (term5946 A B P _115321 _115323 clauses _115322 _115326 _115324 _115325 _115327) = (term5964 A B P clauses _115322 _115324 _115325 _115321 _115326 _115323 _115327).
Proof. exact (TRANS (@lem8423052 A B P clauses _115322 _115324 _115325 _115321 _115326 _115323 _115327) (@lem8423077 A B P clauses _115322 _115324 _115325 _115321 _115326 _115323 _115327)). Qed.
Lemma lem8423080 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h2 : term5836 A B P _115314 f clauses) : term5965 A B P s''''''''' t'''''''' x'''' t''''''''' y'''' clauses f.
Proof. exact (conj (@lem8422792 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 f clauses h1 h2) (@lem8422818 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 f clauses h1 h2)). Qed.
Lemma lem8423081 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h2 : term5836 A B P _115314 f clauses) : term5966 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' clauses f.
Proof. exact (conj (@lem8422766 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 f clauses h1 h2) (@lem8423080 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 f clauses h1 h2)). Qed.
Lemma lem8423083 {A B P : Type'} (_115322 : type558 A B P) (_115324 : type558 A B P) (_115325 : A -> B) (_115321 : P -> A) (_115326 : P) (_115323 : P -> A) (_115327 : P) (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term5964 A B P clauses _115322 _115324 _115325 _115321 _115326 _115323 _115327.
Proof. exact (EQ_MP (@lem8423078 A B P clauses _115322 _115324 _115325 _115321 _115326 _115323 _115327) (@lem8423049 A B P _115321 _115323 _115322 _115326 _115324 _115325 _115327 clauses h1)). Qed.
Lemma lem8423084 {A B P : Type'} (_115322 : type558 A B P) (_115324 : type558 A B P) (_115325 : A -> B) (_115321 : P -> A) (_115326 : P) (_115323 : P -> A) (_115327 : P) (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term5964 A B P clauses _115322 _115324 _115325 _115321 _115326 _115323 _115327.
Proof. exact (@lem8423083 A B P _115322 _115324 _115325 _115321 _115326 _115323 _115327 clauses h1). Qed.
Lemma lem8423085 {A B P : Type'} (t'''''''' : type1081 A B P) (t''''''''' : type1081 A B P) (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term5967 A B P t'''''''' t''''''''' s'''''''' x'''' s''''''''' y'''' clauses f.
Proof. exact (@lem8423084 A B P (term5840 A B P t'''''''' clauses f) (term5840 A B P t''''''''' clauses f) f (term5851 A B P s'''''''' clauses f) (term5837 A B P x'''' clauses f) (term5851 A B P s''''''''' clauses f) (term5837 A B P y'''' clauses f) clauses h1). Qed.
Lemma lem8423088 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h3 : term5836 A B P _115314 f clauses) : term5968 A B P s'''''''' x'''' s''''''''' y'''' clauses f.
Proof. exact (@lem8423085 A B P t'''''''' t''''''''' s'''''''' x'''' s''''''''' y'''' f clauses h1 (@lem8423081 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 f clauses h2 h3)). Qed.
Lemma lem8423089 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h3 : term5836 A B P _115314 f clauses) : term5969 A B P s'''''''' x'''' s''''''''' y'''' clauses f.
Proof. exact (fun h0 : (term5853 A B P s'''''''' x'''' clauses f) = (term5853 A B P s''''''''' y'''' clauses f) => @lem8423088 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 f clauses h1 h2 h3). Qed.
Lemma lem8423091 (p : Prop) : (term5919 p) = (~ p).
Proof. exact (EQ_MP (@lem21028 p) (@lem21107 p)). Qed.
Lemma lem8423092 {A B P : Type'} (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (clauses : type1635 A B P) (f : A -> B) : (term5969 A B P s'''''''' x'''' s''''''''' y'''' clauses f) = (term5968 A B P s'''''''' x'''' s''''''''' y'''' clauses f).
Proof. exact (@lem8423091 ((term5853 A B P s'''''''' x'''' clauses f) = (term5853 A B P s''''''''' y'''' clauses f))). Qed.
Lemma lem8423093 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h3 : term5836 A B P _115314 f clauses) : term5968 A B P s'''''''' x'''' s''''''''' y'''' clauses f.
Proof. exact (EQ_MP (@lem8423092 A B P s'''''''' x'''' s''''''''' y'''' clauses f) (@lem8423089 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 f clauses h1 h2 h3)). Qed.
Lemma lem8423106 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8423107 {A B P : Type'} (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (_115338 : A -> B) (_115337 : type1635 A B P) : (term5970 A B P _115314 s'''''''' x'''' s''''''''' y'''' _115337 _115338) = (term5917 A B P s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337).
Proof. exact (@lem8423106 ((term5853 A B P s'''''''' x'''' _115337 _115338) = (term5853 A B P s''''''''' y'''' _115337 _115338)) (term5835 A B P _115314 _115338 _115337)). Qed.
Lemma lem8423115 {A B P : Type'} (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (_115338 : A -> B) (_115337 : type1635 A B P) : (term5971 A B P s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337) = (term5971 A B P s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337).
Proof. exact (eq_refl (term5971 A B P s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337)). Qed.
Lemma lem8423116 {A B P : Type'} (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (_115338 : A -> B) (_115337 : type1635 A B P) : ((term5917 A B P s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337) = (term5970 A B P _115314 s'''''''' x'''' s''''''''' y'''' _115337 _115338)) = ((term5917 A B P s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337) = (term5917 A B P s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337)).
Proof. exact (MK_COMB (@lem8423115 A B P s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337) (@lem8423107 A B P s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337)). Qed.
Lemma lem8423118 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8423119 (x : Prop) : (x = x) = True.
Proof. exact (@lem8423118 Prop x). Qed.
Lemma lem8423120 {A B P : Type'} (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (_115338 : A -> B) (_115337 : type1635 A B P) : ((term5917 A B P s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337) = (term5917 A B P s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337)) = True.
Proof. exact (@lem8423119 (term5917 A B P s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337)). Qed.
Lemma lem8423121 {A B P : Type'} (_115314 : type1080 A B P) (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (_115337 : type1635 A B P) (_115338 : A -> B) : ((term5917 A B P s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337) = (term5970 A B P _115314 s'''''''' x'''' s''''''''' y'''' _115337 _115338)) = True.
Proof. exact (TRANS (@lem8423116 A B P s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337) (@lem8423120 A B P s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337)). Qed.
Lemma lem8423122 {A B P : Type'} (_115314 : type1080 A B P) (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (_115337 : type1635 A B P) (_115338 : A -> B) : True = ((term5917 A B P s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337) = (term5970 A B P _115314 s'''''''' x'''' s''''''''' y'''' _115337 _115338)).
Proof. exact (SYM (@lem8423121 A B P _115314 s'''''''' x'''' s''''''''' y'''' _115337 _115338)). Qed.
Lemma lem8423123 {A B P : Type'} (_115314 : type1080 A B P) (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (_115337 : type1635 A B P) (_115338 : A -> B) : (term5917 A B P s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337) = (term5970 A B P _115314 s'''''''' x'''' s''''''''' y'''' _115337 _115338).
Proof. exact (EQ_MP (@lem8423122 A B P _115314 s'''''''' x'''' s''''''''' y'''' _115337 _115338) (@lem0)). Qed.
Lemma lem8423124 {A B P : Type'} (_115337 : type1635 A B P) (_115338 : A -> B) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5970 A B P _115314 s'''''''' x'''' s''''''''' y'''' _115337 _115338.
Proof. exact (EQ_MP (@lem8423123 A B P _115314 s'''''''' x'''' s''''''''' y'''' _115337 _115338) (@lem8419720 A B P _115338 _115337 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1)). Qed.
Lemma lem8423126 (b : Prop) (a : Prop) : (a \/ b) = (term5920 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8423129 {A B P : Type'} (s'''''''' : type1082 A B P) (x'''' : type1083 A B P) (s''''''''' : type1082 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (_115338 : A -> B) (_115337 : type1635 A B P) : (term5970 A B P _115314 s'''''''' x'''' s''''''''' y'''' _115337 _115338) = (term5972 A B P s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337).
Proof. exact (@lem8423126 ((term5853 A B P s'''''''' x'''' _115337 _115338) = (term5853 A B P s''''''''' y'''' _115337 _115338)) (term5835 A B P _115314 _115338 _115337)). Qed.
Lemma lem8423132 {A B P : Type'} (_115338 : A -> B) (_115337 : type1635 A B P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5972 A B P s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337.
Proof. exact (EQ_MP (@lem8423129 A B P s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337) (@lem8423124 A B P _115337 _115338 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1)). Qed.
Lemma lem8423133 {A B P : Type'} (_115338 : A -> B) (_115337 : type1635 A B P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5972 A B P s'''''''' x'''' s''''''''' y'''' _115314 _115338 _115337.
Proof. exact (@lem8423132 A B P _115338 _115337 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1). Qed.
Lemma lem8423134 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5972 A B P s'''''''' x'''' s''''''''' y'''' _115314 f clauses.
Proof. exact (@lem8423133 A B P f clauses s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1). Qed.
Lemma lem8423137 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h3 : term5836 A B P _115314 f clauses) : term5835 A B P _115314 f clauses.
Proof. exact (@lem8423134 A B P f clauses s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h2 (@lem8423093 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 f clauses h1 h2 h3)). Qed.
Lemma lem8423138 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term144 A B P clauses) (h2 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5973 A B P _115314 f clauses.
Proof. exact (fun h0 : term5836 A B P _115314 f clauses => @lem8423137 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 f clauses h1 h2 h0). Qed.
Lemma lem8423140 (p : Prop) : (term5924 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8423141 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) : (term5973 A B P _115314 f clauses) = (term5835 A B P _115314 f clauses).
Proof. exact (@lem8423140 (term5835 A B P _115314 f clauses)). Qed.
Lemma lem8423142 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (h1 : term144 A B P clauses) (h2 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) : term5835 A B P _115314 f clauses.
Proof. exact (EQ_MP (@lem8423141 A B P _115314 f clauses) (@lem8423138 A B P f clauses s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1 h2)). Qed.
Lemma lem8423145 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem8423147 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) : (term5836 A B P _115314 f clauses) = (term5974 A B P _115314 f clauses).
Proof. exact (@lem8423145 (term5835 A B P _115314 f clauses)). Qed.
Lemma lem8423150 {A B P : Type'} (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term449 A B P _115314 f clauses) : term5974 A B P _115314 f clauses.
Proof. exact (EQ_MP (@lem8423147 A B P _115314 f clauses) (@lem8419564 A B P _115314 f clauses h1)). Qed.
Lemma lem8423153 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h3 : term449 A B P _115314 f clauses) : False.
Proof. exact (@lem8423150 A B P _115314 f clauses h3 (@lem8423142 A B P f clauses s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 h1 h2)). Qed.
Lemma lem8423154 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h3 : term449 A B P _115314 f clauses) : term5975.
Proof. exact (fun h0 : ~ False => @lem8423153 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 f clauses h1 h2 h3). Qed.
Lemma lem8423156 (p : Prop) : (term5924 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8423157 : term5975 = False.
Proof. exact (@lem8423156 False). Qed.
Lemma lem8423158 {A B P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h3 : term449 A B P _115314 f clauses) : False.
Proof. exact (EQ_MP (@lem8423157) (@lem8423154 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 f clauses h1 h2 h3)). Qed.
Lemma lem8423159 {A B C P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (s'''''''''''''''''''' : type1036 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h3 : term1367 A B C P s'''''''''''''''''''' _115320) (h4 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412592 A B C P s'''''''''''''''''''' _115320 h3) (fun t'''''''''''''''''''' : type1037 A B C P => fun h0 : term1366 A B C P s'''''''''''''''''''' _115320 t'''''''''''''''''''' => @lem8423158 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314 f clauses h1 h2 h4)). Qed.
Lemma lem8423160 {A B C P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h3 : term1031 A B C P _115320) (h4 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8401886 A B C P _115320 h3) (fun s'''''''''''''''''''' : type1036 A B C P => fun h0 : term1368 A B C P _115320 s'''''''''''''''''''' => @lem8423159 A B C P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' s'''''''''''''''''''' _115320 _115314 f clauses h1 h2 h0 h4)). Qed.
Lemma lem8423161 {A B C P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115320 : type1038 A B C P) (s''''''''''''''''''' : type1059 A B C P) (_115319 : type1061 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h3 : term1031 A B C P _115320) (h4 : term1693 A B C P s''''''''''''''''''' _115319) (h5 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412590 A B C P s''''''''''''''''''' _115319 h4) (fun t''''''''''''''''''' : type1060 A B C P => fun h0 : term1692 A B C P s''''''''''''''''''' _115319 t''''''''''''''''''' => @lem8423160 A B C P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115320 _115314 f clauses h1 h2 h3 h5)). Qed.
Lemma lem8423162 {A B C P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h3 : term927 A B C P _115319) (h4 : term1031 A B C P _115320) (h5 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8402725 A B C P _115319 h3) (fun s''''''''''''''''''' : type1059 A B C P => fun h0 : term1694 A B C P _115319 s''''''''''''''''''' => @lem8423161 A B C P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115320 s''''''''''''''''''' _115319 _115314 f clauses h1 h2 h4 h0 h5)). Qed.
Lemma lem8423163 {A B C P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''''''''''''''''' : type1047 A B C P) (_115318 : type1049 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h3 : term927 A B C P _115319) (h4 : term1031 A B C P _115320) (h5 : term2019 A B C P s'''''''''''''''''' _115318) (h6 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412588 A B C P s'''''''''''''''''' _115318 h5) (fun t'''''''''''''''''' : type1048 A B C P => fun h0 : term2018 A B C P s'''''''''''''''''' _115318 t'''''''''''''''''' => @lem8423162 A B C P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115319 _115320 _115314 f clauses h1 h2 h3 h4 h6)). Qed.
Lemma lem8423164 {A B C P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h3 : term826 A B C P _115318) (h4 : term927 A B C P _115319) (h5 : term1031 A B C P _115320) (h6 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8403564 A B C P _115318 h3) (fun s'''''''''''''''''' : type1047 A B C P => fun h0 : term2020 A B C P _115318 s'''''''''''''''''' => @lem8423163 A B C P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115319 _115320 s'''''''''''''''''' _115318 _115314 f clauses h1 h2 h4 h5 h0 h6)). Qed.
Lemma lem8423165 {A B C P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s''''''''''''''''' : type1091 B C P) (_115317 : type1092 B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h3 : term826 A B C P _115318) (h4 : term927 A B C P _115319) (h5 : term1031 A B C P _115320) (h6 : term2345 B C P s''''''''''''''''' _115317) (h7 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412586 B C P s''''''''''''''''' _115317 h6) (fun t''''''''''''''''' : type1090 B C P => fun h0 : term2344 B C P s''''''''''''''''' _115317 t''''''''''''''''' => @lem8423164 A B C P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115318 _115319 _115320 _115314 f clauses h1 h2 h3 h4 h5 h7)). Qed.
Lemma lem8423166 {A B C P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h3 : term599 B C P _115317) (h4 : term826 A B C P _115318) (h5 : term927 A B C P _115319) (h6 : term1031 A B C P _115320) (h7 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8404403 B C P _115317 h3) (fun s''''''''''''''''' : type1091 B C P => fun h0 : term2346 B C P _115317 s''''''''''''''''' => @lem8423165 A B C P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115318 _115319 _115320 s''''''''''''''''' _115317 _115314 f clauses h1 h2 h4 h5 h6 h0 h7)). Qed.
Lemma lem8423167 {A B C P : Type'} (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''''''''''''''' : type1114 A B C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h3 : term599 B C P _115317) (h4 : term826 A B C P _115318) (h5 : term927 A B C P _115319) (h6 : term1031 A B C P _115320) (h7 : term2663 A B C P s'''''''''''''''' _115316) (h8 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412584 A B C P s'''''''''''''''' _115316 h7) (fun t'''''''''''''''' : type1113 A B C P => fun h0 : term2662 A B C P s'''''''''''''''' _115316 t'''''''''''''''' => @lem8423166 A B C P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115317 _115318 _115319 _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h8)). Qed.
Lemma lem8423168 {A B C P : Type'} (_115316 : type1115 A B C P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term687 A B C P _115316) (h3 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h4 : term599 B C P _115317) (h5 : term826 A B C P _115318) (h6 : term927 A B C P _115319) (h7 : term1031 A B C P _115320) (h8 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8405242 A B C P _115316 h2) (fun s'''''''''''''''' : type1114 A B C P => fun h0 : term2664 A B C P _115316 s'''''''''''''''' => @lem8423167 A B C P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115317 _115318 _115319 _115320 s'''''''''''''''' _115316 _115314 f clauses h1 h3 h4 h5 h6 h7 h0 h8)). Qed.
Lemma lem8423169 {A B C P : Type'} (_115316 : type1115 A B C P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s''''''''''''''' : type1091 A C P) (_115315 : type1092 A C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term687 A B C P _115316) (h3 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h4 : term599 B C P _115317) (h5 : term826 A B C P _115318) (h6 : term927 A B C P _115319) (h7 : term1031 A B C P _115320) (h8 : term2345 A C P s''''''''''''''' _115315) (h9 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412582 A C P s''''''''''''''' _115315 h8) (fun t''''''''''''''' : type1090 A C P => fun h0 : term2344 A C P s''''''''''''''' _115315 t''''''''''''''' => @lem8423168 A B C P _115316 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115317 _115318 _115319 _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h9)). Qed.
Lemma lem8423170 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term687 A B C P _115316) (h4 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h5 : term599 B C P _115317) (h6 : term826 A B C P _115318) (h7 : term927 A B C P _115319) (h8 : term1031 A B C P _115320) (h9 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8406081 A C P _115315 h2) (fun s''''''''''''''' : type1091 A C P => fun h0 : term2346 A C P _115315 s''''''''''''''' => @lem8423169 A B C P _115316 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115317 _115318 _115319 _115320 s''''''''''''''' _115315 _115314 f clauses h1 h3 h4 h5 h6 h7 h8 h0 h9)). Qed.
Lemma lem8423171 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''''''''''''' : type1079 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term687 A B C P _115316) (h4 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h5 : term599 B C P _115317) (h6 : term826 A B C P _115318) (h7 : term927 A B C P _115319) (h8 : term1031 A B C P _115320) (h9 : term2983 A B P s'''''''''''''' _115314) (h10 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412580 A B P s'''''''''''''' _115314 h9) (fun t'''''''''''''' : type1078 A B P => fun h0 : term2982 A B P s'''''''''''''' _115314 t'''''''''''''' => @lem8423170 A B C P _115315 _115316 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115317 _115318 _115319 _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h10)). Qed.
Lemma lem8423172 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term687 A B C P _115316) (h4 : term515 A B P _115314) (h5 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h6 : term599 B C P _115317) (h7 : term826 A B C P _115318) (h8 : term927 A B C P _115319) (h9 : term1031 A B C P _115320) (h10 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8406920 A B P _115314 h4) (fun s'''''''''''''' : type1079 A B P => fun h0 : term2984 A B P _115314 s'''''''''''''' => @lem8423171 A B C P _115315 _115316 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115317 _115318 _115319 _115320 s'''''''''''''' _115314 f clauses h1 h2 h3 h5 h6 h7 h8 h9 h0 h10)). Qed.
Lemma lem8423173 {A B C P : Type'} (_115316 : type1115 A B C P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''''''''''' : type1094 A C P) (s''''''''''''' : type1094 A C P) (t'''''''''''' : type1093 A C P) (x'''''' : type1095 A C P) (t''''''''''''' : type1093 A C P) (_115315 : type1092 A C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term687 A B C P _115316) (h4 : term515 A B P _115314) (h5 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h6 : term599 B C P _115317) (h7 : term826 A B C P _115318) (h8 : term927 A B C P _115319) (h9 : term1031 A B C P _115320) (h10 : term3470 A C P s'''''''''''' s''''''''''''' t'''''''''''' x'''''' t''''''''''''' _115315) (h11 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412578 A C P s'''''''''''' s''''''''''''' t'''''''''''' x'''''' t''''''''''''' _115315 h10) (fun y'''''' : type1095 A C P => fun h0 : term3469 A C P s'''''''''''' s''''''''''''' t'''''''''''' x'''''' t''''''''''''' _115315 y'''''' => @lem8423172 A B C P _115315 _115316 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115317 _115318 _115319 _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h11)). Qed.
Lemma lem8423174 {A B C P : Type'} (_115316 : type1115 A B C P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''''''''''' : type1094 A C P) (s''''''''''''' : type1094 A C P) (t'''''''''''' : type1093 A C P) (t''''''''''''' : type1093 A C P) (_115315 : type1092 A C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term687 A B C P _115316) (h4 : term515 A B P _115314) (h5 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h6 : term599 B C P _115317) (h7 : term826 A B C P _115318) (h8 : term927 A B C P _115319) (h9 : term1031 A B C P _115320) (h10 : term3472 A C P s'''''''''''' s''''''''''''' t'''''''''''' t''''''''''''' _115315) (h11 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412577 A C P s'''''''''''' s''''''''''''' t'''''''''''' t''''''''''''' _115315 h10) (fun x'''''' : type1095 A C P => fun h0 : term3471 A C P s'''''''''''' s''''''''''''' t'''''''''''' t''''''''''''' _115315 x'''''' => @lem8423173 A B C P _115316 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115317 _115318 _115319 _115320 s'''''''''''' s''''''''''''' t'''''''''''' x'''''' t''''''''''''' _115315 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h0 h11)). Qed.
Lemma lem8423175 {A B C P : Type'} (_115316 : type1115 A B C P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''''''''''' : type1094 A C P) (s''''''''''''' : type1094 A C P) (t'''''''''''' : type1093 A C P) (_115315 : type1092 A C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term687 A B C P _115316) (h4 : term515 A B P _115314) (h5 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h6 : term599 B C P _115317) (h7 : term826 A B C P _115318) (h8 : term927 A B C P _115319) (h9 : term1031 A B C P _115320) (h10 : term3474 A C P s'''''''''''' s''''''''''''' t'''''''''''' _115315) (h11 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412576 A C P s'''''''''''' s''''''''''''' t'''''''''''' _115315 h10) (fun t''''''''''''' : type1093 A C P => fun h0 : term3473 A C P s'''''''''''' s''''''''''''' t'''''''''''' _115315 t''''''''''''' => @lem8423174 A B C P _115316 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115317 _115318 _115319 _115320 s'''''''''''' s''''''''''''' t'''''''''''' t''''''''''''' _115315 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h0 h11)). Qed.
Lemma lem8423176 {A B C P : Type'} (_115316 : type1115 A B C P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''''''''''' : type1094 A C P) (t'''''''''''' : type1093 A C P) (_115315 : type1092 A C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term687 A B C P _115316) (h4 : term515 A B P _115314) (h5 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h6 : term599 B C P _115317) (h7 : term826 A B C P _115318) (h8 : term927 A B C P _115319) (h9 : term1031 A B C P _115320) (h10 : term3476 A C P s'''''''''''' t'''''''''''' _115315) (h11 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412575 A C P s'''''''''''' t'''''''''''' _115315 h10) (fun s''''''''''''' : type1094 A C P => fun h0 : term3475 A C P s'''''''''''' t'''''''''''' _115315 s''''''''''''' => @lem8423175 A B C P _115316 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115317 _115318 _115319 _115320 s'''''''''''' s''''''''''''' t'''''''''''' _115315 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h0 h11)). Qed.
Lemma lem8423177 {A B C P : Type'} (_115316 : type1115 A B C P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''''''''''' : type1094 A C P) (_115315 : type1092 A C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term687 A B C P _115316) (h4 : term515 A B P _115314) (h5 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h6 : term599 B C P _115317) (h7 : term826 A B C P _115318) (h8 : term927 A B C P _115319) (h9 : term1031 A B C P _115320) (h10 : term3478 A C P s'''''''''''' _115315) (h11 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412574 A C P s'''''''''''' _115315 h10) (fun t'''''''''''' : type1093 A C P => fun h0 : term3477 A C P s'''''''''''' _115315 t'''''''''''' => @lem8423176 A B C P _115316 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115317 _115318 _115319 _115320 s'''''''''''' t'''''''''''' _115315 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h0 h11)). Qed.
Lemma lem8423178 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term515 A B P _115314) (h6 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h7 : term599 B C P _115317) (h8 : term826 A B C P _115318) (h9 : term927 A B C P _115319) (h10 : term1031 A B C P _115320) (h11 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8407839 A C P _115315 h3) (fun s'''''''''''' : type1094 A C P => fun h0 : term3479 A C P _115315 s'''''''''''' => @lem8423177 A B C P _115316 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115317 _115318 _115319 _115320 s'''''''''''' _115315 _115314 f clauses h1 h2 h4 h5 h6 h7 h8 h9 h10 h0 h11)). Qed.
Lemma lem8423179 {A B C P : Type'} (_115315 : type1092 A C P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''''''''' : type1121 A B C P) (s''''''''''' : type1121 A B C P) (t'''''''''' : type1120 A B C P) (x''''' : type1122 A B C P) (t''''''''''' : type1120 A B C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term515 A B P _115314) (h6 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h7 : term599 B C P _115317) (h8 : term826 A B C P _115318) (h9 : term927 A B C P _115319) (h10 : term1031 A B C P _115320) (h11 : term3925 A B C P s'''''''''' s''''''''''' t'''''''''' x''''' t''''''''''' _115316) (h12 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412572 A B C P s'''''''''' s''''''''''' t'''''''''' x''''' t''''''''''' _115316 h11) (fun y''''' : type1122 A B C P => fun h0 : term3924 A B C P s'''''''''' s''''''''''' t'''''''''' x''''' t''''''''''' _115316 y''''' => @lem8423178 A B C P _115315 _115316 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115317 _115318 _115319 _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h12)). Qed.
Lemma lem8423180 {A B C P : Type'} (_115315 : type1092 A C P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''''''''' : type1121 A B C P) (s''''''''''' : type1121 A B C P) (t'''''''''' : type1120 A B C P) (t''''''''''' : type1120 A B C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term515 A B P _115314) (h6 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h7 : term599 B C P _115317) (h8 : term826 A B C P _115318) (h9 : term927 A B C P _115319) (h10 : term1031 A B C P _115320) (h11 : term3927 A B C P s'''''''''' s''''''''''' t'''''''''' t''''''''''' _115316) (h12 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412571 A B C P s'''''''''' s''''''''''' t'''''''''' t''''''''''' _115316 h11) (fun x''''' : type1122 A B C P => fun h0 : term3926 A B C P s'''''''''' s''''''''''' t'''''''''' t''''''''''' _115316 x''''' => @lem8423179 A B C P _115315 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115317 _115318 _115319 _115320 s'''''''''' s''''''''''' t'''''''''' x''''' t''''''''''' _115316 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h0 h12)). Qed.
Lemma lem8423181 {A B C P : Type'} (_115315 : type1092 A C P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''''''''' : type1121 A B C P) (s''''''''''' : type1121 A B C P) (t'''''''''' : type1120 A B C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term515 A B P _115314) (h6 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h7 : term599 B C P _115317) (h8 : term826 A B C P _115318) (h9 : term927 A B C P _115319) (h10 : term1031 A B C P _115320) (h11 : term3929 A B C P s'''''''''' s''''''''''' t'''''''''' _115316) (h12 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412570 A B C P s'''''''''' s''''''''''' t'''''''''' _115316 h11) (fun t''''''''''' : type1120 A B C P => fun h0 : term3928 A B C P s'''''''''' s''''''''''' t'''''''''' _115316 t''''''''''' => @lem8423180 A B C P _115315 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115317 _115318 _115319 _115320 s'''''''''' s''''''''''' t'''''''''' t''''''''''' _115316 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h0 h12)). Qed.
Lemma lem8423182 {A B C P : Type'} (_115315 : type1092 A C P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''''''''' : type1121 A B C P) (t'''''''''' : type1120 A B C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term515 A B P _115314) (h6 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h7 : term599 B C P _115317) (h8 : term826 A B C P _115318) (h9 : term927 A B C P _115319) (h10 : term1031 A B C P _115320) (h11 : term3931 A B C P s'''''''''' t'''''''''' _115316) (h12 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412569 A B C P s'''''''''' t'''''''''' _115316 h11) (fun s''''''''''' : type1121 A B C P => fun h0 : term3930 A B C P s'''''''''' t'''''''''' _115316 s''''''''''' => @lem8423181 A B C P _115315 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115317 _115318 _115319 _115320 s'''''''''' s''''''''''' t'''''''''' _115316 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h0 h12)). Qed.
Lemma lem8423183 {A B C P : Type'} (_115315 : type1092 A C P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''''''''' : type1121 A B C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term515 A B P _115314) (h6 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h7 : term599 B C P _115317) (h8 : term826 A B C P _115318) (h9 : term927 A B C P _115319) (h10 : term1031 A B C P _115320) (h11 : term3933 A B C P s'''''''''' _115316) (h12 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412568 A B C P s'''''''''' _115316 h11) (fun t'''''''''' : type1120 A B C P => fun h0 : term3932 A B C P s'''''''''' _115316 t'''''''''' => @lem8423182 A B C P _115315 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115317 _115318 _115319 _115320 s'''''''''' t'''''''''' _115316 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h0 h12)). Qed.
Lemma lem8423184 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (y'''' : type1083 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term4385 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115314) (h8 : term599 B C P _115317) (h9 : term826 A B C P _115318) (h10 : term927 A B C P _115319) (h11 : term1031 A B C P _115320) (h12 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8408622 A B C P _115316 h5) (fun s'''''''''' : type1121 A B C P => fun h0 : term3934 A B C P _115316 s'''''''''' => @lem8423183 A B C P _115315 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115317 _115318 _115319 _115320 s'''''''''' _115316 _115314 f clauses h1 h2 h3 h4 h6 h7 h8 h9 h10 h11 h0 h12)). Qed.
Lemma lem8423185 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (x'''' : type1083 A B P) (t''''''''' : type1081 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term599 B C P _115317) (h8 : term826 A B C P _115318) (h9 : term927 A B C P _115319) (h10 : term1031 A B C P _115320) (h11 : term4388 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' _115314) (h12 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412566 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' _115314 h11) (fun y'''' : type1083 A B P => fun h0 : term4387 A B P s'''''''' s''''''''' t'''''''' x'''' t''''''''' _115314 y'''' => @lem8423184 A B C P _115315 _115316 s'''''''' s''''''''' t'''''''' x'''' t''''''''' y'''' _115317 _115318 _115319 _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h0 h7 h8 h9 h10 h12)). Qed.
Lemma lem8423186 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (t''''''''' : type1081 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term599 B C P _115317) (h8 : term826 A B C P _115318) (h9 : term927 A B C P _115319) (h10 : term1031 A B C P _115320) (h11 : term4390 A B P s'''''''' s''''''''' t'''''''' t''''''''' _115314) (h12 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412565 A B P s'''''''' s''''''''' t'''''''' t''''''''' _115314 h11) (fun x'''' : type1083 A B P => fun h0 : term4389 A B P s'''''''' s''''''''' t'''''''' t''''''''' _115314 x'''' => @lem8423185 A B C P _115315 _115316 _115317 _115318 _115319 _115320 s'''''''' s''''''''' t'''''''' x'''' t''''''''' _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h0 h12)). Qed.
Lemma lem8423187 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''''''' : type1082 A B P) (s''''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term599 B C P _115317) (h8 : term826 A B C P _115318) (h9 : term927 A B C P _115319) (h10 : term1031 A B C P _115320) (h11 : term4392 A B P s'''''''' s''''''''' t'''''''' _115314) (h12 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412564 A B P s'''''''' s''''''''' t'''''''' _115314 h11) (fun t''''''''' : type1081 A B P => fun h0 : term4391 A B P s'''''''' s''''''''' t'''''''' _115314 t''''''''' => @lem8423186 A B C P _115315 _115316 _115317 _115318 _115319 _115320 s'''''''' s''''''''' t'''''''' t''''''''' _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h0 h12)). Qed.
Lemma lem8423188 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''''''' : type1082 A B P) (t'''''''' : type1081 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term599 B C P _115317) (h8 : term826 A B C P _115318) (h9 : term927 A B C P _115319) (h10 : term1031 A B C P _115320) (h11 : term4394 A B P s'''''''' t'''''''' _115314) (h12 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412563 A B P s'''''''' t'''''''' _115314 h11) (fun s''''''''' : type1082 A B P => fun h0 : term4393 A B P s'''''''' t'''''''' _115314 s''''''''' => @lem8423187 A B C P _115315 _115316 _115317 _115318 _115319 _115320 s'''''''' s''''''''' t'''''''' _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h0 h12)). Qed.
Lemma lem8423189 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''''''' : type1082 A B P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term599 B C P _115317) (h8 : term826 A B C P _115318) (h9 : term927 A B C P _115319) (h10 : term1031 A B C P _115320) (h11 : term4396 A B P s'''''''' _115314) (h12 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412562 A B P s'''''''' _115314 h11) (fun t'''''''' : type1081 A B P => fun h0 : term4395 A B P s'''''''' _115314 t'''''''' => @lem8423188 A B C P _115315 _115316 _115317 _115318 _115319 _115320 s'''''''' t'''''''' _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h0 h12)). Qed.
Lemma lem8423190 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term826 A B C P _115318) (h10 : term927 A B C P _115319) (h11 : term1031 A B C P _115320) (h12 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8409405 A B P _115314 h7) (fun s'''''''' : type1082 A B P => fun h0 : term4397 A B P _115314 s'''''''' => @lem8423189 A B C P _115315 _115316 _115317 _115318 _115319 _115320 s'''''''' _115314 f clauses h1 h2 h3 h4 h5 h6 h8 h9 h10 h11 h0 h12)). Qed.
Lemma lem8423191 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''''' : type1094 B C P) (s''''''' : type1094 B C P) (t'''''' : type1093 B C P) (x''' : type1095 B C P) (t''''''' : type1093 B C P) (_115317 : type1092 B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term826 A B C P _115318) (h10 : term927 A B C P _115319) (h11 : term1031 A B C P _115320) (h12 : term3470 B C P s'''''' s''''''' t'''''' x''' t''''''' _115317) (h13 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412560 B C P s'''''' s''''''' t'''''' x''' t''''''' _115317 h12) (fun y''' : type1095 B C P => fun h0 : term3469 B C P s'''''' s''''''' t'''''' x''' t''''''' _115317 y''' => @lem8423190 A B C P _115315 _115316 _115317 _115318 _115319 _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h13)). Qed.
Lemma lem8423192 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''''' : type1094 B C P) (s''''''' : type1094 B C P) (t'''''' : type1093 B C P) (t''''''' : type1093 B C P) (_115317 : type1092 B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term826 A B C P _115318) (h10 : term927 A B C P _115319) (h11 : term1031 A B C P _115320) (h12 : term3472 B C P s'''''' s''''''' t'''''' t''''''' _115317) (h13 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412559 B C P s'''''' s''''''' t'''''' t''''''' _115317 h12) (fun x''' : type1095 B C P => fun h0 : term3471 B C P s'''''' s''''''' t'''''' t''''''' _115317 x''' => @lem8423191 A B C P _115315 _115316 _115318 _115319 _115320 s'''''' s''''''' t'''''' x''' t''''''' _115317 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h0 h13)). Qed.
Lemma lem8423193 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''''' : type1094 B C P) (s''''''' : type1094 B C P) (t'''''' : type1093 B C P) (_115317 : type1092 B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term826 A B C P _115318) (h10 : term927 A B C P _115319) (h11 : term1031 A B C P _115320) (h12 : term3474 B C P s'''''' s''''''' t'''''' _115317) (h13 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412558 B C P s'''''' s''''''' t'''''' _115317 h12) (fun t''''''' : type1093 B C P => fun h0 : term3473 B C P s'''''' s''''''' t'''''' _115317 t''''''' => @lem8423192 A B C P _115315 _115316 _115318 _115319 _115320 s'''''' s''''''' t'''''' t''''''' _115317 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h0 h13)). Qed.
Lemma lem8423194 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''''' : type1094 B C P) (t'''''' : type1093 B C P) (_115317 : type1092 B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term826 A B C P _115318) (h10 : term927 A B C P _115319) (h11 : term1031 A B C P _115320) (h12 : term3476 B C P s'''''' t'''''' _115317) (h13 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412557 B C P s'''''' t'''''' _115317 h12) (fun s''''''' : type1094 B C P => fun h0 : term3475 B C P s'''''' t'''''' _115317 s''''''' => @lem8423193 A B C P _115315 _115316 _115318 _115319 _115320 s'''''' s''''''' t'''''' _115317 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h0 h13)). Qed.
Lemma lem8423195 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''''' : type1094 B C P) (_115317 : type1092 B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term826 A B C P _115318) (h10 : term927 A B C P _115319) (h11 : term1031 A B C P _115320) (h12 : term3478 B C P s'''''' _115317) (h13 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412556 B C P s'''''' _115317 h12) (fun t'''''' : type1093 B C P => fun h0 : term3477 B C P s'''''' _115317 t'''''' => @lem8423194 A B C P _115315 _115316 _115318 _115319 _115320 s'''''' t'''''' _115317 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h0 h13)). Qed.
Lemma lem8423196 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term927 A B C P _115319) (h12 : term1031 A B C P _115320) (h13 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8410188 B C P _115317 h9) (fun s'''''' : type1094 B C P => fun h0 : term3479 B C P _115317 s'''''' => @lem8423195 A B C P _115315 _115316 _115318 _115319 _115320 s'''''' _115317 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h10 h11 h12 h0 h13)). Qed.
Lemma lem8423197 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''' : type1050 A B C P) (s''''' : type1050 A B C P) (t'''' : type1052 A B C P) (x'' : type1051 A B C P) (t''''' : type1052 A B C P) (_115318 : type1049 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term927 A B C P _115319) (h12 : term1031 A B C P _115320) (h13 : term4855 A B C P s'''' s''''' t'''' x'' t''''' _115318) (h14 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412554 A B C P s'''' s''''' t'''' x'' t''''' _115318 h13) (fun y'' : type1051 A B C P => fun h0 : term4854 A B C P s'''' s''''' t'''' x'' t''''' _115318 y'' => @lem8423196 A B C P _115315 _115316 _115317 _115318 _115319 _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h14)). Qed.
Lemma lem8423198 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''' : type1050 A B C P) (s''''' : type1050 A B C P) (t'''' : type1052 A B C P) (t''''' : type1052 A B C P) (_115318 : type1049 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term927 A B C P _115319) (h12 : term1031 A B C P _115320) (h13 : term4857 A B C P s'''' s''''' t'''' t''''' _115318) (h14 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412553 A B C P s'''' s''''' t'''' t''''' _115318 h13) (fun x'' : type1051 A B C P => fun h0 : term4856 A B C P s'''' s''''' t'''' t''''' _115318 x'' => @lem8423197 A B C P _115315 _115316 _115317 _115319 _115320 s'''' s''''' t'''' x'' t''''' _115318 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h0 h14)). Qed.
Lemma lem8423199 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''' : type1050 A B C P) (s''''' : type1050 A B C P) (t'''' : type1052 A B C P) (_115318 : type1049 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term927 A B C P _115319) (h12 : term1031 A B C P _115320) (h13 : term4859 A B C P s'''' s''''' t'''' _115318) (h14 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412552 A B C P s'''' s''''' t'''' _115318 h13) (fun t''''' : type1052 A B C P => fun h0 : term4858 A B C P s'''' s''''' t'''' _115318 t''''' => @lem8423198 A B C P _115315 _115316 _115317 _115319 _115320 s'''' s''''' t'''' t''''' _115318 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h0 h14)). Qed.
Lemma lem8423200 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''' : type1050 A B C P) (t'''' : type1052 A B C P) (_115318 : type1049 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term927 A B C P _115319) (h12 : term1031 A B C P _115320) (h13 : term4861 A B C P s'''' t'''' _115318) (h14 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412551 A B C P s'''' t'''' _115318 h13) (fun s''''' : type1050 A B C P => fun h0 : term4860 A B C P s'''' t'''' _115318 s''''' => @lem8423199 A B C P _115315 _115316 _115317 _115319 _115320 s'''' s''''' t'''' _115318 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h0 h14)). Qed.
Lemma lem8423201 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (s'''' : type1050 A B C P) (_115318 : type1049 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term927 A B C P _115319) (h12 : term1031 A B C P _115320) (h13 : term4863 A B C P s'''' _115318) (h14 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412550 A B C P s'''' _115318 h13) (fun t'''' : type1052 A B C P => fun h0 : term4862 A B C P s'''' _115318 t'''' => @lem8423200 A B C P _115315 _115316 _115317 _115319 _115320 s'''' t'''' _115318 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h0 h14)). Qed.
Lemma lem8423202 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term747 A B C P _115318) (h12 : term927 A B C P _115319) (h13 : term1031 A B C P _115320) (h14 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8410971 A B C P _115318 h11) (fun s'''' : type1050 A B C P => fun h0 : term4864 A B C P _115318 s'''' => @lem8423201 A B C P _115315 _115316 _115317 _115319 _115320 s'''' _115318 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h12 h13 h0 h14)). Qed.
Lemma lem8423203 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115320 : type1038 A B C P) (s'' : type1062 A B C P) (s''' : type1062 A B C P) (t'' : type1063 A B C P) (x' : type1064 A B C P) (t''' : type1063 A B C P) (_115319 : type1061 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term747 A B C P _115318) (h12 : term927 A B C P _115319) (h13 : term1031 A B C P _115320) (h14 : term5318 A B C P s'' s''' t'' x' t''' _115319) (h15 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412548 A B C P s'' s''' t'' x' t''' _115319 h14) (fun y' : type1064 A B C P => fun h0 : term5317 A B C P s'' s''' t'' x' t''' _115319 y' => @lem8423202 A B C P _115315 _115316 _115317 _115318 _115319 _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h15)). Qed.
Lemma lem8423204 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115320 : type1038 A B C P) (s'' : type1062 A B C P) (s''' : type1062 A B C P) (t'' : type1063 A B C P) (t''' : type1063 A B C P) (_115319 : type1061 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term747 A B C P _115318) (h12 : term927 A B C P _115319) (h13 : term1031 A B C P _115320) (h14 : term5320 A B C P s'' s''' t'' t''' _115319) (h15 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412547 A B C P s'' s''' t'' t''' _115319 h14) (fun x' : type1064 A B C P => fun h0 : term5319 A B C P s'' s''' t'' t''' _115319 x' => @lem8423203 A B C P _115315 _115316 _115317 _115318 _115320 s'' s''' t'' x' t''' _115319 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h0 h15)). Qed.
Lemma lem8423205 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115320 : type1038 A B C P) (s'' : type1062 A B C P) (s''' : type1062 A B C P) (t'' : type1063 A B C P) (_115319 : type1061 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term747 A B C P _115318) (h12 : term927 A B C P _115319) (h13 : term1031 A B C P _115320) (h14 : term5322 A B C P s'' s''' t'' _115319) (h15 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412546 A B C P s'' s''' t'' _115319 h14) (fun t''' : type1063 A B C P => fun h0 : term5321 A B C P s'' s''' t'' _115319 t''' => @lem8423204 A B C P _115315 _115316 _115317 _115318 _115320 s'' s''' t'' t''' _115319 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h0 h15)). Qed.
Lemma lem8423206 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115320 : type1038 A B C P) (s'' : type1062 A B C P) (t'' : type1063 A B C P) (_115319 : type1061 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term747 A B C P _115318) (h12 : term927 A B C P _115319) (h13 : term1031 A B C P _115320) (h14 : term5324 A B C P s'' t'' _115319) (h15 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412545 A B C P s'' t'' _115319 h14) (fun s''' : type1062 A B C P => fun h0 : term5323 A B C P s'' t'' _115319 s''' => @lem8423205 A B C P _115315 _115316 _115317 _115318 _115320 s'' s''' t'' _115319 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h0 h15)). Qed.
Lemma lem8423207 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115320 : type1038 A B C P) (s'' : type1062 A B C P) (_115319 : type1061 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term747 A B C P _115318) (h12 : term927 A B C P _115319) (h13 : term1031 A B C P _115320) (h14 : term5326 A B C P s'' _115319) (h15 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412544 A B C P s'' _115319 h14) (fun t'' : type1063 A B C P => fun h0 : term5325 A B C P s'' _115319 t'' => @lem8423206 A B C P _115315 _115316 _115317 _115318 _115320 s'' t'' _115319 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h0 h15)). Qed.
Lemma lem8423208 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term747 A B C P _115318) (h12 : term927 A B C P _115319) (h13 : term844 A B C P _115319) (h14 : term1031 A B C P _115320) (h15 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8411754 A B C P _115319 h13) (fun s'' : type1062 A B C P => fun h0 : term5327 A B C P _115319 s'' => @lem8423207 A B C P _115315 _115316 _115317 _115318 _115320 s'' _115319 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h14 h0 h15)). Qed.
Lemma lem8423209 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (x : type1039 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term747 A B C P _115318) (h12 : term927 A B C P _115319) (h13 : term844 A B C P _115319) (h14 : term1031 A B C P _115320) (h15 : term5781 A B C P s s' t x t' _115320) (h16 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412542 A B C P s s' t x t' _115320 h15) (fun y : type1039 A B C P => fun h0 : term5780 A B C P s s' t x t' _115320 y => @lem8423208 A B C P _115315 _115316 _115317 _115318 _115319 _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h16)). Qed.
Lemma lem8423210 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (t' : type1040 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term747 A B C P _115318) (h12 : term927 A B C P _115319) (h13 : term844 A B C P _115319) (h14 : term1031 A B C P _115320) (h15 : term5783 A B C P s s' t t' _115320) (h16 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412541 A B C P s s' t t' _115320 h15) (fun x : type1039 A B C P => fun h0 : term5782 A B C P s s' t t' _115320 x => @lem8423209 A B C P _115315 _115316 _115317 _115318 _115319 s s' t x t' _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h0 h16)). Qed.
Lemma lem8423211 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (s : type1035 A B C P) (s' : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term747 A B C P _115318) (h12 : term927 A B C P _115319) (h13 : term844 A B C P _115319) (h14 : term1031 A B C P _115320) (h15 : term5785 A B C P s s' t _115320) (h16 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412540 A B C P s s' t _115320 h15) (fun t' : type1040 A B C P => fun h0 : term5784 A B C P s s' t _115320 t' => @lem8423210 A B C P _115315 _115316 _115317 _115318 _115319 s s' t t' _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h0 h16)). Qed.
Lemma lem8423212 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (s : type1035 A B C P) (t : type1040 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term747 A B C P _115318) (h12 : term927 A B C P _115319) (h13 : term844 A B C P _115319) (h14 : term1031 A B C P _115320) (h15 : term5787 A B C P s t _115320) (h16 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412539 A B C P s t _115320 h15) (fun s' : type1035 A B C P => fun h0 : term5786 A B C P s t _115320 s' => @lem8423211 A B C P _115315 _115316 _115317 _115318 _115319 s s' t _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h0 h16)). Qed.
Lemma lem8423213 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (s : type1035 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term747 A B C P _115318) (h12 : term927 A B C P _115319) (h13 : term844 A B C P _115319) (h14 : term1031 A B C P _115320) (h15 : term5789 A B C P s _115320) (h16 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412538 A B C P s _115320 h15) (fun t : type1040 A B C P => fun h0 : term5788 A B C P s _115320 t => @lem8423212 A B C P _115315 _115316 _115317 _115318 _115319 s t _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h0 h16)). Qed.
Lemma lem8423214 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term747 A B C P _115318) (h12 : term927 A B C P _115319) (h13 : term844 A B C P _115319) (h14 : term1031 A B C P _115320) (h15 : term945 A B C P _115320) (h16 : term449 A B P _115314 f clauses) : False.
Proof. exact (ex_elim (@lem8412537 A B C P _115320 h15) (fun s : type1035 A B C P => fun h0 : term5790 A B C P _115320 s => @lem8423213 A B C P _115315 _115316 _115317 _115318 _115319 s _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h0 h16)). Qed.
Lemma lem8423215 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term747 A B C P _115318) (h12 : term927 A B C P _115319) (h13 : term844 A B C P _115319) (h14 : term1031 A B C P _115320) (h15 : term945 A B C P _115320) (h16 : term449 A B P _115314 f clauses) : (term449 A B P _115314 f clauses) = False.
Proof. exact (prop_ext (fun h17 : term449 A B P _115314 f clauses => @lem8423214 A B C P _115315 _115316 _115317 _115318 _115319 _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16) (fun h17 : False => @lem8407056 A B P _115314 f clauses h16)). Qed.
Lemma lem8423216 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term747 A B C P _115318) (h12 : term927 A B C P _115319) (h13 : term844 A B C P _115319) (h14 : term1031 A B C P _115320) (h15 : term945 A B C P _115320) (h16 : term449 A B P _115314 f clauses) : False.
Proof. exact (EQ_MP (@lem8423215 A B C P _115315 _115316 _115317 _115318 _115319 _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16) (@lem8407056 A B P _115314 f clauses h16)). Qed.
Lemma lem8423217 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term747 A B C P _115318) (h12 : term927 A B C P _115319) (h13 : term844 A B C P _115319) (h14 : term1031 A B C P _115320) (h15 : term449 A B P _115314 f clauses) : term5976 A B C P _115320.
Proof. exact (fun h0 : term945 A B C P _115320 => @lem8423216 A B C P _115315 _115316 _115317 _115318 _115319 _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h0 h15). Qed.
Lemma lem8423218 {A B C P : Type'} (_115320 : type1038 A B C P) : (term5976 A B C P _115320) = (term946 A B C P _115320).
Proof. exact (@lem69 (term945 A B C P _115320)). Qed.
Lemma lem8423219 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term747 A B C P _115318) (h12 : term927 A B C P _115319) (h13 : term844 A B C P _115319) (h14 : term1031 A B C P _115320) (h15 : term449 A B P _115314 f clauses) : term946 A B C P _115320.
Proof. exact (EQ_MP (@lem8423218 A B C P _115320) (@lem8423217 A B C P _115315 _115316 _115317 _115318 _115319 _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15)). Qed.
Lemma lem8423220 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term747 A B C P _115318) (h12 : term927 A B C P _115319) (h13 : term1031 A B C P _115320) (h14 : term449 A B P _115314 f clauses) : term947 A B C P _115319 _115320.
Proof. exact (fun h0 : term844 A B C P _115319 => @lem8423219 A B C P _115315 _115316 _115317 _115318 _115319 _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h0 h13 h14). Qed.
Lemma lem8423221 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term533 B C P _115317) (h10 : term826 A B C P _115318) (h11 : term927 A B C P _115319) (h12 : term1031 A B C P _115320) (h13 : term449 A B P _115314 f clauses) : term948 A B C P _115318 _115319 _115320.
Proof. exact (fun h0 : term747 A B C P _115318 => @lem8423220 A B C P _115315 _115316 _115317 _115318 _115319 _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h0 h11 h12 h13). Qed.
Lemma lem8423222 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term413 A B P _115314) (h8 : term599 B C P _115317) (h9 : term826 A B C P _115318) (h10 : term927 A B C P _115319) (h11 : term1031 A B C P _115320) (h12 : term449 A B P _115314 f clauses) : term949 A B C P _115317 _115318 _115319 _115320.
Proof. exact (fun h0 : term533 B C P _115317 => @lem8423221 A B C P _115315 _115316 _115317 _115318 _115319 _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h0 h9 h10 h11 h12). Qed.
Lemma lem8423223 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term617 A B C P _115316) (h6 : term515 A B P _115314) (h7 : term599 B C P _115317) (h8 : term826 A B C P _115318) (h9 : term927 A B C P _115319) (h10 : term1031 A B C P _115320) (h11 : term449 A B P _115314 f clauses) : term950 A B C P _115314 _115317 _115318 _115319 _115320.
Proof. exact (fun h0 : term413 A B P _115314 => @lem8423222 A B C P _115315 _115316 _115317 _115318 _115319 _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h0 h7 h8 h9 h10 h11). Qed.
Lemma lem8423224 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term533 A C P _115315) (h4 : term687 A B C P _115316) (h5 : term515 A B P _115314) (h6 : term599 B C P _115317) (h7 : term826 A B C P _115318) (h8 : term927 A B C P _115319) (h9 : term1031 A B C P _115320) (h10 : term449 A B P _115314 f clauses) : term951 A B C P _115316 _115314 _115317 _115318 _115319 _115320.
Proof. exact (fun h0 : term617 A B C P _115316 => @lem8423223 A B C P _115315 _115316 _115317 _115318 _115319 _115320 _115314 f clauses h1 h2 h3 h4 h0 h5 h6 h7 h8 h9 h10). Qed.
Lemma lem8423225 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (_115314 : type1080 A B P) (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term687 A B C P _115316) (h4 : term515 A B P _115314) (h5 : term599 B C P _115317) (h6 : term826 A B C P _115318) (h7 : term927 A B C P _115319) (h8 : term1031 A B C P _115320) (h9 : term449 A B P _115314 f clauses) : term952 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320.
Proof. exact (fun h0 : term533 A C P _115315 => @lem8423224 A B C P _115315 _115316 _115317 _115318 _115319 _115320 _115314 f clauses h1 h2 h0 h3 h4 h5 h6 h7 h8 h9). Qed.
Lemma lem8423226 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term687 A B C P _115316) (h4 : term515 A B P _115314) (h5 : term599 B C P _115317) (h6 : term826 A B C P _115318) (h7 : term927 A B C P _115319) (h8 : term1031 A B C P _115320) : term953 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320.
Proof. exact (fun h0 : term449 A B P _115314 f clauses => @lem8423225 A B C P _115315 _115316 _115317 _115318 _115319 _115320 _115314 f clauses h1 h2 h3 h4 h5 h6 h7 h8 h0). Qed.
Lemma lem8423227 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : term144 A B P clauses) (h2 : term599 A C P _115315) (h3 : term687 A B C P _115316) (h4 : term515 A B P _115314) (h5 : term599 B C P _115317) (h6 : term826 A B C P _115318) (h7 : term927 A B C P _115319) (h8 : term1031 A B C P _115320) : term954 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320.
Proof. exact (fun h0 : term162 A B P clauses f => @lem8423226 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320 h1 h2 h3 h4 h5 h6 h7 h8). Qed.
Lemma lem8423228 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : term599 A C P _115315) (h2 : term687 A B C P _115316) (h3 : term515 A B P _115314) (h4 : term599 B C P _115317) (h5 : term826 A B C P _115318) (h6 : term927 A B C P _115319) (h7 : term1031 A B C P _115320) : term955 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320.
Proof. exact (fun h0 : term144 A B P clauses => @lem8423227 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320 h0 h1 h2 h3 h4 h5 h6 h7). Qed.
Lemma lem8423233 {A B C P : Type'} (clauses : type1635 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : term599 A C P _115315) (h2 : term687 A B C P _115316) (h3 : term515 A B P _115314) (h4 : term599 B C P _115317) (h5 : term826 A B C P _115318) (h6 : term927 A B C P _115319) (h7 : term1031 A B C P _115320) : term957 A B C P clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320.
Proof. exact (fun f : A -> B => @lem8423228 A B C P f clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320 h1 h2 h3 h4 h5 h6 h7). Qed.
Lemma lem8423238 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115314 : type1080 A B P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : term599 A C P _115315) (h2 : term687 A B C P _115316) (h3 : term515 A B P _115314) (h4 : term599 B C P _115317) (h5 : term826 A B C P _115318) (h6 : term927 A B C P _115319) (h7 : term1031 A B C P _115320) : term959 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320.
Proof. exact (fun clauses : type1635 A B P => @lem8423233 A B C P clauses _115315 _115316 _115314 _115317 _115318 _115319 _115320 h1 h2 h3 h4 h5 h6 h7). Qed.
Lemma lem8423239 {A B C P : Type'} (_115314 : type1080 A B P) (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : term599 A C P _115315) (h2 : term687 A B C P _115316) (h3 : term599 B C P _115317) (h4 : term826 A B C P _115318) (h5 : term927 A B C P _115319) (h6 : term1031 A B C P _115320) : term960 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320.
Proof. exact (fun h0 : term515 A B P _115314 => @lem8423238 A B C P _115315 _115316 _115314 _115317 _115318 _115319 _115320 h1 h2 h0 h3 h4 h5 h6). Qed.
Lemma lem8423244 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : term599 A C P _115315) (h2 : term687 A B C P _115316) (h3 : term599 B C P _115317) (h4 : term826 A B C P _115318) (h5 : term927 A B C P _115319) (h6 : term1031 A B C P _115320) : term962 A B C P _115315 _115316 _115317 _115318 _115319 _115320.
Proof. exact (fun _115314 : type1080 A B P => @lem8423239 A B C P _115314 _115315 _115316 _115317 _115318 _115319 _115320 h1 h2 h3 h4 h5 h6). Qed.
Lemma lem8423245 {A B C P : Type'} (_115315 : type1092 A C P) (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : term687 A B C P _115316) (h2 : term599 B C P _115317) (h3 : term826 A B C P _115318) (h4 : term927 A B C P _115319) (h5 : term1031 A B C P _115320) : term963 A B C P _115315 _115316 _115317 _115318 _115319 _115320.
Proof. exact (fun h0 : term599 A C P _115315 => @lem8423244 A B C P _115315 _115316 _115317 _115318 _115319 _115320 h0 h1 h2 h3 h4 h5). Qed.
Lemma lem8423250 {A B C P : Type'} (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : term687 A B C P _115316) (h2 : term599 B C P _115317) (h3 : term826 A B C P _115318) (h4 : term927 A B C P _115319) (h5 : term1031 A B C P _115320) : term965 A B C P _115316 _115317 _115318 _115319 _115320.
Proof. exact (fun _115315 : type1092 A C P => @lem8423245 A B C P _115315 _115316 _115317 _115318 _115319 _115320 h1 h2 h3 h4 h5). Qed.
Lemma lem8423251 {A B C P : Type'} (_115316 : type1115 A B C P) (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : term599 B C P _115317) (h2 : term826 A B C P _115318) (h3 : term927 A B C P _115319) (h4 : term1031 A B C P _115320) : term966 A B C P _115316 _115317 _115318 _115319 _115320.
Proof. exact (fun h0 : term687 A B C P _115316 => @lem8423250 A B C P _115316 _115317 _115318 _115319 _115320 h0 h1 h2 h3 h4). Qed.
Lemma lem8423256 {A B C P : Type'} (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : term599 B C P _115317) (h2 : term826 A B C P _115318) (h3 : term927 A B C P _115319) (h4 : term1031 A B C P _115320) : term968 A B C P _115317 _115318 _115319 _115320.
Proof. exact (fun _115316 : type1115 A B C P => @lem8423251 A B C P _115316 _115317 _115318 _115319 _115320 h1 h2 h3 h4). Qed.
Lemma lem8423257 {A B C P : Type'} (_115317 : type1092 B C P) (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : term826 A B C P _115318) (h2 : term927 A B C P _115319) (h3 : term1031 A B C P _115320) : term969 A B C P _115317 _115318 _115319 _115320.
Proof. exact (fun h0 : term599 B C P _115317 => @lem8423256 A B C P _115317 _115318 _115319 _115320 h0 h1 h2 h3). Qed.
Lemma lem8423262 {A B C P : Type'} (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : term826 A B C P _115318) (h2 : term927 A B C P _115319) (h3 : term1031 A B C P _115320) : term971 A B C P _115318 _115319 _115320.
Proof. exact (fun _115317 : type1092 B C P => @lem8423257 A B C P _115317 _115318 _115319 _115320 h1 h2 h3). Qed.
Lemma lem8423263 {A B C P : Type'} (_115318 : type1049 A B C P) (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : term927 A B C P _115319) (h2 : term1031 A B C P _115320) : term972 A B C P _115318 _115319 _115320.
Proof. exact (fun h0 : term826 A B C P _115318 => @lem8423262 A B C P _115318 _115319 _115320 h0 h1 h2). Qed.
Lemma lem8423268 {A B C P : Type'} (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : term927 A B C P _115319) (h2 : term1031 A B C P _115320) : term974 A B C P _115319 _115320.
Proof. exact (fun _115318 : type1049 A B C P => @lem8423263 A B C P _115318 _115319 _115320 h1 h2). Qed.
Lemma lem8423269 {A B C P : Type'} (_115319 : type1061 A B C P) (_115320 : type1038 A B C P) (h1 : term1031 A B C P _115320) : term975 A B C P _115319 _115320.
Proof. exact (fun h0 : term927 A B C P _115319 => @lem8423268 A B C P _115319 _115320 h0 h1). Qed.
Lemma lem8423274 {A B C P : Type'} (_115320 : type1038 A B C P) (h1 : term1031 A B C P _115320) : term977 A B C P _115320.
Proof. exact (fun _115319 : type1061 A B C P => @lem8423269 A B C P _115319 _115320 h1). Qed.
Lemma lem8423275 {A B C P : Type'} (_115320 : type1038 A B C P) : term1033 A B C P _115320.
Proof. exact (fun h0 : term1031 A B C P _115320 => @lem8423274 A B C P _115320 h0). Qed.
Lemma lem8423280 {A B C P : Type'} : term1035 A B C P.
Proof. exact (fun _115320 : type1038 A B C P => @lem8423275 A B C P _115320). Qed.
Lemma lem8423281 {A B C P : Type'} : term256 A B C P.
Proof. exact (EQ_MP (@lem8401030 A B C P) (@lem8423280 A B C P)). Qed.
Lemma lem8423282 {A B C P : Type'} (clauses : type1635 A B P) : term5977 A B C P clauses.
Proof. exact (@lem8423281 A B C P clauses). Qed.
Lemma lem8423283 {A B C P : Type'} (clauses : type1635 A B P) : (term5977 A B C P clauses) = (term252 A B C P clauses).
Proof. exact (eq_refl (term5977 A B C P clauses)). Qed.
Lemma lem8423284 {A B C P : Type'} (clauses : type1635 A B P) : term252 A B C P clauses.
Proof. exact (EQ_MP (@lem8423283 A B C P clauses) (@lem8423282 A B C P clauses)). Qed.
Lemma lem8423285 {A B C P : Type'} (clauses : type1635 A B P) (f : A -> B) : term5978 A B C P clauses f.
Proof. exact (@lem8423284 A B C P clauses f). Qed.
Lemma lem8423286 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) : (term5978 A B C P clauses f) = (term220 A B C P f clauses).
Proof. exact (eq_refl (term5978 A B C P clauses f)). Qed.
Lemma lem8423287 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) : term220 A B C P f clauses.
Proof. exact (EQ_MP (@lem8423286 A B C P f clauses) (@lem8423285 A B C P clauses f)). Qed.
Lemma lem8423289 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) : term220 A B C P f clauses.
Proof. exact (@lem8391181 A B C P f clauses (@lem8423287 A B C P f clauses)). Qed.
Lemma lem8423290 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term246 A B C P f clauses.
Proof. exact (@lem8423289 A B C P f clauses (@lem8391027 A B P clauses h1)). Qed.
Lemma lem8423291 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term162 A B P clauses f) (h2 : term144 A B P clauses) : term244 A B C P f clauses.
Proof. exact (@lem8423290 A B C P f clauses h2 (@lem8391062 A B P clauses f h1)). Qed.
Lemma lem8423292 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term162 A B P clauses f) (h2 : term144 A B P clauses) (h3 : term213 A B P f clauses) : term241 A B C P.
Proof. exact (@lem8423291 A B C P f clauses h1 h2 (@lem8391150 A B P f clauses h3)). Qed.
Lemma lem8423293 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term162 A B P clauses f) (h2 : term144 A B P clauses) (h3 : term213 A B P f clauses) : term239 A B C P.
Proof. exact (@lem8423292 A B C P f clauses h1 h2 h3 (@lem8391155 A C P)). Qed.
Lemma lem8423294 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term162 A B P clauses f) (h2 : term144 A B P clauses) (h3 : term213 A B P f clauses) : term236 A B C P.
Proof. exact (@lem8423293 A B C P f clauses h1 h2 h3 (@lem8391153 A B C P)). Qed.
Lemma lem8423295 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term162 A B P clauses f) (h2 : term144 A B P clauses) (h3 : term213 A B P f clauses) : term233 A B C P.
Proof. exact (@lem8423294 A B C P f clauses h1 h2 h3 (@lem8391151 A B P)). Qed.
Lemma lem8423296 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term162 A B P clauses f) (h2 : term144 A B P clauses) (h3 : term213 A B P f clauses) : term230 A B C P.
Proof. exact (@lem8423295 A B C P f clauses h1 h2 h3 (@lem8391154 B C P)). Qed.
Lemma lem8423297 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term162 A B P clauses f) (h2 : term144 A B P clauses) (h3 : term213 A B P f clauses) : term227 A B C P.
Proof. exact (@lem8423296 A B C P f clauses h1 h2 h3 (@lem8391160 A B C P)). Qed.
Lemma lem8423298 {A B C P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term162 A B P clauses f) (h2 : term144 A B P clauses) (h3 : term213 A B P f clauses) : term224 A B C P.
Proof. exact (@lem8423297 A B C P f clauses h1 h2 h3 (@lem8391162 A B C P)). Qed.
Lemma lem8423299 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term162 A B P clauses f) (h2 : term144 A B P clauses) (h3 : term213 A B P f clauses) : False.
Proof. exact (@lem8423298 A B Prop P f clauses h1 h2 h3 (@lem8391163 A B Prop P)). Qed.
Lemma lem8423300 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term162 A B P clauses f) (h2 : term144 A B P clauses) (h3 : term213 A B P f clauses) : (term213 A B P f clauses) = False.
Proof. exact (prop_ext (fun h4 : term213 A B P f clauses => @lem8423299 A B P f clauses h1 h2 h3) (fun h4 : False => @lem8391150 A B P f clauses h3)). Qed.
Lemma lem8423301 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term162 A B P clauses f) (h2 : term144 A B P clauses) (h3 : term213 A B P f clauses) : False.
Proof. exact (EQ_MP (@lem8423300 A B P f clauses h1 h2 h3) (@lem8391150 A B P f clauses h3)). Qed.
Lemma lem8423302 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term162 A B P clauses f) (h2 : term144 A B P clauses) : term212 A B P f clauses.
Proof. exact (fun h0 : term213 A B P f clauses => @lem8423301 A B P f clauses h1 h2 h0). Qed.
Lemma lem8423303 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term162 A B P clauses f) (h2 : term144 A B P clauses) : term210 A B P f clauses.
Proof. exact (EQ_MP (@lem8391149 A B P f clauses) (@lem8423302 A B P f clauses h1 h2)). Qed.
Lemma lem8423304 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term162 A B P clauses f) (h2 : term144 A B P clauses) : term166 A B P f clauses.
Proof. exact (EQ_MP (@lem8391145 A B P clauses f h1) (@lem8423303 A B P f clauses h1 h2)). Qed.
Lemma lem8423305 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term162 A B P clauses f) (h2 : term144 A B P clauses) : (term162 A B P clauses f) = (term166 A B P f clauses).
Proof. exact (prop_ext (fun h3 : term162 A B P clauses f => @lem8423304 A B P f clauses h1 h2) (fun h3 : term166 A B P f clauses => @lem8391062 A B P clauses f h1)). Qed.
Lemma lem8423306 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term162 A B P clauses f) (h2 : term144 A B P clauses) : term166 A B P f clauses.
Proof. exact (EQ_MP (@lem8423305 A B P f clauses h1 h2) (@lem8391062 A B P clauses f h1)). Qed.
Lemma lem8423307 {A B P : Type'} (f : A -> B) (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term168 A B P f clauses.
Proof. exact (fun h0 : term162 A B P clauses f => @lem8423306 A B P f clauses h0 h1). Qed.
Lemma lem8423312 {A B P : Type'} (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term172 A B P clauses.
Proof. exact (fun f : A -> B => @lem8423307 A B P f clauses h1). Qed.
Lemma lem8423313 {A B P : Type'} (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term182 A B P clauses.
Proof. exact (@lem8391061 A B P clauses (@lem8423312 A B P clauses h1)). Qed.
Lemma lem8423314 {A B P : Type'} (lt2 : type1402 A) (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term154 A B P lt2 clauses) : term150 A B P clauses.
Proof. exact (@lem8423313 A B P clauses h1 (@lem8391034 A B P lt2 clauses h2)). Qed.
Lemma lem8423315 {A B P : Type'} (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term153 A B P clauses) : term150 A B P clauses.
Proof. exact (ex_elim (@lem8391029 A B P clauses h2) (fun lt2 : type1402 A => fun h0 : term5979 A B P clauses lt2 => @lem8423314 A B P lt2 clauses h1 h0)). Qed.
Lemma lem8423316 {A B P : Type'} (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term5980 A B P clauses.
Proof. exact (fun h0 : term153 A B P clauses => @lem8423315 A B P clauses h1 h0). Qed.
Lemma lem8423317 {A B P : Type'} (clauses : type1635 A B P) (h1 : term147 A B P clauses) : term144 A B P clauses.
Proof. exact (proj2 (@lem8391026 A B P clauses h1)). Qed.
Lemma lem8423318 {A B P : Type'} (clauses : type1635 A B P) (h1 : term147 A B P clauses) : term153 A B P clauses.
Proof. exact (proj1 (@lem8391026 A B P clauses h1)). Qed.
Lemma lem8423319 {A B P : Type'} (clauses : type1635 A B P) (h1 : term144 A B P clauses) : (term144 A B P clauses) = (term5980 A B P clauses).
Proof. exact (prop_ext (fun h2 : term144 A B P clauses => @lem8423316 A B P clauses h1) (fun h2 : term5980 A B P clauses => @lem8391027 A B P clauses h1)). Qed.
Lemma lem8423320 {A B P : Type'} (clauses : type1635 A B P) (h1 : term144 A B P clauses) : term5980 A B P clauses.
Proof. exact (EQ_MP (@lem8423319 A B P clauses h1) (@lem8391027 A B P clauses h1)). Qed.
Lemma lem8423321 {A B P : Type'} (clauses : type1635 A B P) (h1 : term144 A B P clauses) (h2 : term153 A B P clauses) : term150 A B P clauses.
Proof. exact (@lem8423320 A B P clauses h1 (@lem8391028 A B P clauses h2)). Qed.
Lemma lem8423322 {A B P : Type'} (clauses : type1635 A B P) (h1 : term153 A B P clauses) (h2 : term147 A B P clauses) : (term144 A B P clauses) = (term150 A B P clauses).
Proof. exact (prop_ext (fun h3 : term144 A B P clauses => @lem8423321 A B P clauses h3 h1) (fun h3 : term150 A B P clauses => @lem8423317 A B P clauses h2)). Qed.
Lemma lem8423323 {A B P : Type'} (clauses : type1635 A B P) (h1 : term153 A B P clauses) (h2 : term147 A B P clauses) : term150 A B P clauses.
Proof. exact (EQ_MP (@lem8423322 A B P clauses h1 h2) (@lem8423317 A B P clauses h2)). Qed.
Lemma lem8423324 {A B P : Type'} (clauses : type1635 A B P) (h1 : term147 A B P clauses) : (term153 A B P clauses) = (term150 A B P clauses).
Proof. exact (prop_ext (fun h2 : term153 A B P clauses => @lem8423323 A B P clauses h2 h1) (fun h2 : term150 A B P clauses => @lem8423318 A B P clauses h1)). Qed.
Lemma lem8423325 {A B P : Type'} (clauses : type1635 A B P) (h1 : term147 A B P clauses) : term150 A B P clauses.
Proof. exact (EQ_MP (@lem8423324 A B P clauses h1) (@lem8423318 A B P clauses h1)). Qed.
Lemma lem8423326 {A B P : Type'} (clauses : type1635 A B P) : term152 A B P clauses.
Proof. exact (fun h0 : term147 A B P clauses => @lem8423325 A B P clauses h0). Qed.
Lemma lem8423327 {A B P : Type'} (clauses : type1635 A B P) : term151 A B P clauses.
Proof. exact (EQ_MP (@lem8391025 A B P clauses) (@lem8423326 A B P clauses)). Qed.
Lemma lem8423332 {A B P : Type'} : term5981 A B P.
Proof. exact (fun clauses : type1635 A B P => @lem8423327 A B P clauses). Qed.
