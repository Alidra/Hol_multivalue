require open hol-light.theory_hol;
require open hol-light.hol_types;
symbol T_def : Prf (= T (= (λ p : El bool, p) (λ p : El bool, p)));
symbol ∧_def : Prf (= ∧ (λ p : El bool, (λ q : El bool, (= (λ f : El (fun bool (fun bool bool)), (f p q)) (λ f : El (fun bool (fun bool bool)), (f T T))))));
symbol ⇒_def : Prf (= ⇒ (λ p : El bool, (λ q : El bool, (= (∧ p q) p))));
symbol ∀_def [A] : Prf (= (@∀ A) (λ P : El (fun A bool), (= P (λ x : El A, T))));
symbol ∃_def [A] : Prf (= (@∃ A) (λ P : El (fun A bool), (∀ (λ q : El bool, (⇒ (∀ (λ x : El A, (⇒ (P x) q))) q)))));
symbol ∨_def : Prf (= ∨ (λ p : El bool, (λ q : El bool, (∀ (λ r : El bool, (⇒ (⇒ p r) (⇒ (⇒ q r) r)))))));
symbol F_def : Prf (= F (∀ (λ p : El bool, p)));
symbol ¬_def : Prf (= ¬ (λ p : El bool, (⇒ p F)));
symbol ∃!_def [A] : Prf (= (@∃! A) (λ P : El (fun A bool), (∧ (∃ P) (∀ (λ x : El A, (∀ (λ y : El A, (⇒ (∧ (P x) (P y)) (= x y)))))))));
symbol _FALSITY_ : El bool ≔ F;
opaque symbol _FALSITY__def : Prf (= _FALSITY_ F) ≔ REFL _FALSITY_;
symbol ε [A] : El (fun (fun A bool) A);
symbol COND [A] : El (fun bool (fun A (fun A A))) ≔ (λ t : El bool, (λ t1 : El A, (λ t2 : El A, ((@ε A) (λ x : El A, (∧ (⇒ (= t T) (= x t1)) (⇒ (= t F) (= x t2))))))));
opaque symbol COND_def [A] : Prf (= (@COND A) (λ t : El bool, (λ t1 : El A, (λ t2 : El A, ((@ε A) (λ x : El A, (∧ (⇒ (= t T) (= x t1)) (⇒ (= t F) (= x t2))))))))) ≔ REFL (@COND  A);
symbol o [A B C] : El (fun (fun B C) (fun (fun A B) (fun A C))) ≔ (λ f : El (fun B C), (λ g : El (fun A B), (λ x : El A, (f (g x)))));
opaque symbol o_def [A B C] : Prf (= (@o A B C) (λ f : El (fun B C), (λ g : El (fun A B), (λ x : El A, (f (g x)))))) ≔ REFL (@o  A B C);
symbol I [A] : El (fun A A) ≔ (λ x : El A, x);
opaque symbol I_def [A] : Prf (= (@I A) (λ x : El A, x)) ≔ REFL (@I  A);
symbol one_ABS : El (fun bool 1);
symbol one_REP : El (fun 1 bool);
symbol one : El 1 ≔ ((@ε 1) (λ x : El 1, T));
opaque symbol one_def : Prf (= one ((@ε 1) (λ x : El 1, T))) ≔ REFL one;
symbol hashek : El bool ≔ T;
opaque symbol hashek_def : Prf (= hashek T) ≔ REFL hashek;
symbol LET [A B] : El (fun (fun A B) (fun A B)) ≔ (λ f : El (fun A B), (λ x : El A, (f x)));
opaque symbol LET_def [A B] : Prf (= (@LET A B) (λ f : El (fun A B), (λ x : El A, (f x)))) ≔ REFL (@LET  A B);
symbol LET_END [A] : El (fun A A) ≔ (λ t : El A, t);
opaque symbol LET_END_def [A] : Prf (= (@LET_END A) (λ t : El A, t)) ≔ REFL (@LET_END  A);
symbol GABS [A] : El (fun (fun A bool) A) ≔ (λ P : El (fun A bool), ((@ε A) P));
opaque symbol GABS_def [A] : Prf (= (@GABS A) (λ P : El (fun A bool), ((@ε A) P))) ≔ REFL (@GABS  A);
symbol GEQ [A] : El (fun A (fun A bool)) ≔ (λ a : El A, (λ b : El A, (= a b)));
opaque symbol GEQ_def [A] : Prf (= (@GEQ A) (λ a : El A, (λ b : El A, (= a b)))) ≔ REFL (@GEQ  A);
symbol _SEQPATTERN [_4611 _4614] : El (fun (fun _4614 (fun _4611 bool)) (fun (fun _4614 (fun _4611 bool)) (fun _4614 (fun _4611 bool)))) ≔ (λ r : El (fun _4614 (fun _4611 bool)), (λ s : El (fun _4614 (fun _4611 bool)), (λ x : El _4614, ((@COND (fun _4611 bool)) (∃ (λ y : El _4611, (r x y))) (r x) (s x)))));
opaque symbol _SEQPATTERN_def [_4611 _4614] : Prf (= (@_SEQPATTERN _4611 _4614) (λ r : El (fun _4614 (fun _4611 bool)), (λ s : El (fun _4614 (fun _4611 bool)), (λ x : El _4614, ((@COND (fun _4611 bool)) (∃ (λ y : El _4611, (r x y))) (r x) (s x)))))) ≔ REFL (@_SEQPATTERN  _4611 _4614);
symbol _UNGUARDED_PATTERN : El (fun bool (fun bool bool)) ≔ (λ p : El bool, (λ r : El bool, (∧ p r)));
opaque symbol _UNGUARDED_PATTERN_def : Prf (= _UNGUARDED_PATTERN (λ p : El bool, (λ r : El bool, (∧ p r)))) ≔ REFL _UNGUARDED_PATTERN;
symbol _GUARDED_PATTERN : El (fun bool (fun bool (fun bool bool))) ≔ (λ p : El bool, (λ g : El bool, (λ r : El bool, (∧ p (∧ g r)))));
opaque symbol _GUARDED_PATTERN_def : Prf (= _GUARDED_PATTERN (λ p : El bool, (λ g : El bool, (λ r : El bool, (∧ p (∧ g r)))))) ≔ REFL _GUARDED_PATTERN;
symbol _MATCH [_4656 _4660] : El (fun _4656 (fun (fun _4656 (fun _4660 bool)) _4660)) ≔ (λ e : El _4656, (λ r : El (fun _4656 (fun _4660 bool)), ((@COND _4660) ((@∃! _4660) (r e)) ((@ε _4660) (r e)) ((@ε _4660) (λ z : El _4660, F)))));
opaque symbol _MATCH_def [_4656 _4660] : Prf (= (@_MATCH _4656 _4660) (λ e : El _4656, (λ r : El (fun _4656 (fun _4660 bool)), ((@COND _4660) ((@∃! _4660) (r e)) ((@ε _4660) (r e)) ((@ε _4660) (λ z : El _4660, F)))))) ≔ REFL (@_MATCH  _4656 _4660);
symbol _FUNCTION [_4678 _4682] : El (fun (fun _4678 (fun _4682 bool)) (fun _4678 _4682)) ≔ (λ r : El (fun _4678 (fun _4682 bool)), (λ x : El _4678, ((@COND _4682) ((@∃! _4682) (r x)) ((@ε _4682) (r x)) ((@ε _4682) (λ z : El _4682, F)))));
opaque symbol _FUNCTION_def [_4678 _4682] : Prf (= (@_FUNCTION _4678 _4682) (λ r : El (fun _4678 (fun _4682 bool)), (λ x : El _4678, ((@COND _4682) ((@∃! _4682) (r x)) ((@ε _4682) (r x)) ((@ε _4682) (λ z : El _4682, F)))))) ≔ REFL (@_FUNCTION  _4678 _4682);
symbol mk_pair [A B] : El (fun A (fun B (fun A (fun B bool)))) ≔ (λ x : El A, (λ y : El B, (λ a : El A, (λ b : El B, (∧ (= a x) (= b y))))));
opaque symbol mk_pair_def [A B] : Prf (= (@mk_pair A B) (λ x : El A, (λ y : El B, (λ a : El A, (λ b : El B, (∧ (= a x) (= b y))))))) ≔ REFL (@mk_pair  A B);
symbol ABS_prod [A B] : El (fun (fun A (fun B bool)) (prod A B));
symbol REP_prod [A B] : El (fun (prod A B) (fun A (fun B bool)));
symbol ̦‚ [A B] : El (fun A (fun B (prod A B))) ≔ (λ x : El A, (λ y : El B, ((@ABS_prod A B) ((@mk_pair A B) x y))));
opaque symbol ̦‚_def [A B] : Prf (= (@̦‚ A B) (λ x : El A, (λ y : El B, ((@ABS_prod A B) ((@mk_pair A B) x y))))) ≔ REFL (@̦‚  A B);
symbol FST [A B] : El (fun (prod A B) A) ≔ (λ p : El (prod A B), ((@ε A) (λ x : El A, (∃ (λ y : El B, (= p ((@̦‚ A B) x y)))))));
opaque symbol FST_def [A B] : Prf (= (@FST A B) (λ p : El (prod A B), ((@ε A) (λ x : El A, (∃ (λ y : El B, (= p ((@̦‚ A B) x y)))))))) ≔ REFL (@FST  A B);
symbol SND [A B] : El (fun (prod A B) B) ≔ (λ p : El (prod A B), ((@ε B) (λ y : El B, (∃ (λ x : El A, (= p ((@̦‚ A B) x y)))))));
opaque symbol SND_def [A B] : Prf (= (@SND A B) (λ p : El (prod A B), ((@ε B) (λ y : El B, (∃ (λ x : El A, (= p ((@̦‚ A B) x y)))))))) ≔ REFL (@SND  A B);
symbol CURRY [A B C] : El (fun (fun (prod A B) C) (fun A (fun B C))) ≔ (λ _1283 : El (fun (prod A B) C), (λ _1284 : El A, (λ _1285 : El B, (_1283 ((@̦‚ A B) _1284 _1285)))));
opaque symbol CURRY_def [A B C] : Prf (= (@CURRY A B C) (λ _1283 : El (fun (prod A B) C), (λ _1284 : El A, (λ _1285 : El B, (_1283 ((@̦‚ A B) _1284 _1285)))))) ≔ REFL (@CURRY  A B C);
symbol UNCURRY [A B C] : El (fun (fun A (fun B C)) (fun (prod A B) C)) ≔ (λ _1304 : El (fun A (fun B C)), (λ _1305 : El (prod A B), (_1304 ((@FST A B) _1305) ((@SND A B) _1305))));
opaque symbol UNCURRY_def [A B C] : Prf (= (@UNCURRY A B C) (λ _1304 : El (fun A (fun B C)), (λ _1305 : El (prod A B), (_1304 ((@FST A B) _1305) ((@SND A B) _1305))))) ≔ REFL (@UNCURRY  A B C);
symbol PASSOC [A B C D] : El (fun (fun (prod (prod A B) C) D) (fun (prod A (prod B C)) D)) ≔ (λ _1321 : El (fun (prod (prod A B) C) D), (λ _1322 : El (prod A (prod B C)), (_1321 ((@̦‚ (prod A B) C) ((@̦‚ A B) ((@FST A (prod B C)) _1322) ((@FST B C) ((@SND A (prod B C)) _1322))) ((@SND B C) ((@SND A (prod B C)) _1322))))));
opaque symbol PASSOC_def [A B C D] : Prf (= (@PASSOC A B C D) (λ _1321 : El (fun (prod (prod A B) C) D), (λ _1322 : El (prod A (prod B C)), (_1321 ((@̦‚ (prod A B) C) ((@̦‚ A B) ((@FST A (prod B C)) _1322) ((@FST B C) ((@SND A (prod B C)) _1322))) ((@SND B C) ((@SND A (prod B C)) _1322))))))) ≔ REFL (@PASSOC  A B C D);
symbol ONE_ONE [A B] : El (fun (fun A B) bool) ≔ (λ _2064 : El (fun A B), (∀ (λ x1 : El A, (∀ (λ x2 : El A, (⇒ (= (_2064 x1) (_2064 x2)) (= x1 x2)))))));
opaque symbol ONE_ONE_def [A B] : Prf (= (@ONE_ONE A B) (λ _2064 : El (fun A B), (∀ (λ x1 : El A, (∀ (λ x2 : El A, (⇒ (= (_2064 x1) (_2064 x2)) (= x1 x2)))))))) ≔ REFL (@ONE_ONE  A B);
symbol ONTO [A B] : El (fun (fun A B) bool) ≔ (λ _2069 : El (fun A B), (∀ (λ y : El B, (∃ (λ x : El A, (= y (_2069 x)))))));
opaque symbol ONTO_def [A B] : Prf (= (@ONTO A B) (λ _2069 : El (fun A B), (∀ (λ y : El B, (∃ (λ x : El A, (= y (_2069 x)))))))) ≔ REFL (@ONTO  A B);
symbol IND_SUC : El (fun ind ind) ≔ ((@ε (fun ind ind)) (λ f : El (fun ind ind), (∃ (λ z : El ind, (∧ (∀ (λ x1 : El ind, (∀ (λ x2 : El ind, (= (= (f x1) (f x2)) (= x1 x2)))))) (∀ (λ x : El ind, (¬ (= (f x) z)))))))));
opaque symbol IND_SUC_def : Prf (= IND_SUC ((@ε (fun ind ind)) (λ f : El (fun ind ind), (∃ (λ z : El ind, (∧ (∀ (λ x1 : El ind, (∀ (λ x2 : El ind, (= (= (f x1) (f x2)) (= x1 x2)))))) (∀ (λ x : El ind, (¬ (= (f x) z)))))))))) ≔ REFL IND_SUC;
symbol IND_0 : El ind ≔ ((@ε ind) (λ z : El ind, (∧ (∀ (λ x1 : El ind, (∀ (λ x2 : El ind, (= (= (IND_SUC x1) (IND_SUC x2)) (= x1 x2)))))) (∀ (λ x : El ind, (¬ (= (IND_SUC x) z)))))));
opaque symbol IND_0_def : Prf (= IND_0 ((@ε ind) (λ z : El ind, (∧ (∀ (λ x1 : El ind, (∀ (λ x2 : El ind, (= (= (IND_SUC x1) (IND_SUC x2)) (= x1 x2)))))) (∀ (λ x : El ind, (¬ (= (IND_SUC x) z)))))))) ≔ REFL IND_0;
symbol NUM_REP : El (fun ind bool) ≔ (λ a : El ind, (∀ (λ NUM_REP' : El (fun ind bool), (⇒ (∀ (λ a' : El ind, (⇒ (∨ (= a' IND_0) (∃ (λ i : El ind, (∧ (= a' (IND_SUC i)) (NUM_REP' i))))) (NUM_REP' a')))) (NUM_REP' a)))));
opaque symbol NUM_REP_def : Prf (= NUM_REP (λ a : El ind, (∀ (λ NUM_REP' : El (fun ind bool), (⇒ (∀ (λ a' : El ind, (⇒ (∨ (= a' IND_0) (∃ (λ i : El ind, (∧ (= a' (IND_SUC i)) (NUM_REP' i))))) (NUM_REP' a')))) (NUM_REP' a)))))) ≔ REFL NUM_REP;
symbol mk_num : El (fun ind num);
symbol dest_num : El (fun num ind);
symbol _0 : El num ≔ (mk_num IND_0);
opaque symbol _0_def : Prf (= _0 (mk_num IND_0)) ≔ REFL _0;
symbol SUC : El (fun num num) ≔ (λ _2104 : El num, (mk_num (IND_SUC (dest_num _2104))));
opaque symbol SUC_def : Prf (= SUC (λ _2104 : El num, (mk_num (IND_SUC (dest_num _2104))))) ≔ REFL SUC;
symbol NUMERAL : El (fun num num) ≔ (λ _2128 : El num, _2128);
opaque symbol NUMERAL_def : Prf (= NUMERAL (λ _2128 : El num, _2128)) ≔ REFL NUMERAL;
symbol BIT0 : El (fun num num) ≔ ((@ε (fun num num)) (λ fn : El (fun num num), (∧ (= (fn (NUMERAL _0)) (NUMERAL _0)) (∀ (λ n : El num, (= (fn (SUC n)) (SUC (SUC (fn n)))))))));
opaque symbol BIT0_def : Prf (= BIT0 ((@ε (fun num num)) (λ fn : El (fun num num), (∧ (= (fn (NUMERAL _0)) (NUMERAL _0)) (∀ (λ n : El num, (= (fn (SUC n)) (SUC (SUC (fn n)))))))))) ≔ REFL BIT0;
symbol BIT1 : El (fun num num) ≔ (λ _2143 : El num, (SUC (BIT0 _2143)));
opaque symbol BIT1_def : Prf (= BIT1 (λ _2143 : El num, (SUC (BIT0 _2143)))) ≔ REFL BIT1;
symbol PRE : El (fun num num) ≔ ((@ε (fun (prod num (prod num num)) (fun num num))) (λ PRE' : El (fun (prod num (prod num num)) (fun num num)), (∀ (λ _2151 : El (prod num (prod num num)), (∧ (= (PRE' _2151 (NUMERAL _0)) (NUMERAL _0)) (∀ (λ n : El num, (= (PRE' _2151 (SUC n)) n))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))))));
opaque symbol PRE_def : Prf (= PRE ((@ε (fun (prod num (prod num num)) (fun num num))) (λ PRE' : El (fun (prod num (prod num num)) (fun num num)), (∀ (λ _2151 : El (prod num (prod num num)), (∧ (= (PRE' _2151 (NUMERAL _0)) (NUMERAL _0)) (∀ (λ n : El num, (= (PRE' _2151 (SUC n)) n))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))))))) ≔ REFL PRE;
symbol + : El (fun num (fun num num)) ≔ ((@ε (fun num (fun num (fun num num)))) (λ +' : El (fun num (fun num (fun num num))), (∀ (λ _2155 : El num, (∧ (∀ (λ n : El num, (= (+' _2155 (NUMERAL _0) n) n))) (∀ (λ m : El num, (∀ (λ n : El num, (= (+' _2155 (SUC m) n) (SUC (+' _2155 m n))))))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0))))))));
opaque symbol +_def : Prf (= + ((@ε (fun num (fun num (fun num num)))) (λ +' : El (fun num (fun num (fun num num))), (∀ (λ _2155 : El num, (∧ (∀ (λ n : El num, (= (+' _2155 (NUMERAL _0) n) n))) (∀ (λ m : El num, (∀ (λ n : El num, (= (+' _2155 (SUC m) n) (SUC (+' _2155 m n))))))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0))))))))) ≔ REFL +;
symbol * : El (fun num (fun num num)) ≔ ((@ε (fun num (fun num (fun num num)))) (λ *' : El (fun num (fun num (fun num num))), (∀ (λ _2186 : El num, (∧ (∀ (λ n : El num, (= (*' _2186 (NUMERAL _0) n) (NUMERAL _0)))) (∀ (λ m : El num, (∀ (λ n : El num, (= (*' _2186 (SUC m) n) (+ (*' _2186 m n) n)))))))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0))))))));
opaque symbol *_def : Prf (= * ((@ε (fun num (fun num (fun num num)))) (λ *' : El (fun num (fun num (fun num num))), (∀ (λ _2186 : El num, (∧ (∀ (λ n : El num, (= (*' _2186 (NUMERAL _0) n) (NUMERAL _0)))) (∀ (λ m : El num, (∀ (λ n : El num, (= (*' _2186 (SUC m) n) (+ (*' _2186 m n) n)))))))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0))))))))) ≔ REFL *;
symbol EXP : El (fun num (fun num num)) ≔ ((@ε (fun (prod num (prod num num)) (fun num (fun num num)))) (λ EXP' : El (fun (prod num (prod num num)) (fun num (fun num num))), (∀ (λ _2224 : El (prod num (prod num num)), (∧ (∀ (λ m : El num, (= (EXP' _2224 m (NUMERAL _0)) (NUMERAL (BIT1 _0))))) (∀ (λ m : El num, (∀ (λ n : El num, (= (EXP' _2224 m (SUC n)) (* m (EXP' _2224 m n))))))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))))));
opaque symbol EXP_def : Prf (= EXP ((@ε (fun (prod num (prod num num)) (fun num (fun num num)))) (λ EXP' : El (fun (prod num (prod num num)) (fun num (fun num num))), (∀ (λ _2224 : El (prod num (prod num num)), (∧ (∀ (λ m : El num, (= (EXP' _2224 m (NUMERAL _0)) (NUMERAL (BIT1 _0))))) (∀ (λ m : El num, (∀ (λ n : El num, (= (EXP' _2224 m (SUC n)) (* m (EXP' _2224 m n))))))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))))))) ≔ REFL EXP;
symbol <= : El (fun num (fun num bool)) ≔ ((@ε (fun (prod num num) (fun num (fun num bool)))) (λ <=' : El (fun (prod num num) (fun num (fun num bool))), (∀ (λ _2241 : El (prod num num), (∧ (∀ (λ m : El num, (= (<=' _2241 m (NUMERAL _0)) (= m (NUMERAL _0))))) (∀ (λ m : El num, (∀ (λ n : El num, (= (<=' _2241 m (SUC n)) (∨ (= m (SUC n)) (<=' _2241 m n))))))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 (BIT1 _0))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 (BIT1 _0)))))))));
opaque symbol <=_def : Prf (= <= ((@ε (fun (prod num num) (fun num (fun num bool)))) (λ <=' : El (fun (prod num num) (fun num (fun num bool))), (∀ (λ _2241 : El (prod num num), (∧ (∀ (λ m : El num, (= (<=' _2241 m (NUMERAL _0)) (= m (NUMERAL _0))))) (∀ (λ m : El num, (∀ (λ n : El num, (= (<=' _2241 m (SUC n)) (∨ (= m (SUC n)) (<=' _2241 m n))))))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 (BIT1 _0))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 (BIT1 _0)))))))))) ≔ REFL <=;
symbol < : El (fun num (fun num bool)) ≔ ((@ε (fun num (fun num (fun num bool)))) (λ <' : El (fun num (fun num (fun num bool))), (∀ (λ _2248 : El num, (∧ (∀ (λ m : El num, (= (<' _2248 m (NUMERAL _0)) F))) (∀ (λ m : El num, (∀ (λ n : El num, (= (<' _2248 m (SUC n)) (∨ (= m n) (<' _2248 m n))))))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 (BIT1 _0))))))));
opaque symbol <_def : Prf (= < ((@ε (fun num (fun num (fun num bool)))) (λ <' : El (fun num (fun num (fun num bool))), (∀ (λ _2248 : El num, (∧ (∀ (λ m : El num, (= (<' _2248 m (NUMERAL _0)) F))) (∀ (λ m : El num, (∀ (λ n : El num, (= (<' _2248 m (SUC n)) (∨ (= m n) (<' _2248 m n))))))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 (BIT1 _0))))))))) ≔ REFL <;
symbol >= : El (fun num (fun num bool)) ≔ (λ _2249 : El num, (λ _2250 : El num, (<= _2250 _2249)));
opaque symbol >=_def : Prf (= >= (λ _2249 : El num, (λ _2250 : El num, (<= _2250 _2249)))) ≔ REFL >=;
symbol > : El (fun num (fun num bool)) ≔ (λ _2261 : El num, (λ _2262 : El num, (< _2262 _2261)));
opaque symbol >_def : Prf (= > (λ _2261 : El num, (λ _2262 : El num, (< _2262 _2261)))) ≔ REFL >;
symbol MAX : El (fun num (fun num num)) ≔ (λ _2273 : El num, (λ _2274 : El num, ((@COND num) (<= _2273 _2274) _2274 _2273)));
opaque symbol MAX_def : Prf (= MAX (λ _2273 : El num, (λ _2274 : El num, ((@COND num) (<= _2273 _2274) _2274 _2273)))) ≔ REFL MAX;
symbol MIN : El (fun num (fun num num)) ≔ (λ _2285 : El num, (λ _2286 : El num, ((@COND num) (<= _2285 _2286) _2285 _2286)));
opaque symbol MIN_def : Prf (= MIN (λ _2285 : El num, (λ _2286 : El num, ((@COND num) (<= _2285 _2286) _2285 _2286)))) ≔ REFL MIN;
symbol EVEN : El (fun num bool) ≔ ((@ε (fun (prod num (prod num (prod num num))) (fun num bool))) (λ EVEN' : El (fun (prod num (prod num (prod num num))) (fun num bool)), (∀ (λ _2603 : El (prod num (prod num (prod num num))), (∧ (= (EVEN' _2603 (NUMERAL _0)) T) (∀ (λ n : El num, (= (EVEN' _2603 (SUC n)) (¬ (EVEN' _2603 n))))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0))))))))))));
opaque symbol EVEN_def : Prf (= EVEN ((@ε (fun (prod num (prod num (prod num num))) (fun num bool))) (λ EVEN' : El (fun (prod num (prod num (prod num num))) (fun num bool)), (∀ (λ _2603 : El (prod num (prod num (prod num num))), (∧ (= (EVEN' _2603 (NUMERAL _0)) T) (∀ (λ n : El num, (= (EVEN' _2603 (SUC n)) (¬ (EVEN' _2603 n))))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0))))))))))))) ≔ REFL EVEN;
symbol ODD : El (fun num bool) ≔ ((@ε (fun (prod num (prod num num)) (fun num bool))) (λ ODD' : El (fun (prod num (prod num num)) (fun num bool)), (∀ (λ _2607 : El (prod num (prod num num)), (∧ (= (ODD' _2607 (NUMERAL _0)) F) (∀ (λ n : El num, (= (ODD' _2607 (SUC n)) (¬ (ODD' _2607 n))))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))))));
opaque symbol ODD_def : Prf (= ODD ((@ε (fun (prod num (prod num num)) (fun num bool))) (λ ODD' : El (fun (prod num (prod num num)) (fun num bool)), (∀ (λ _2607 : El (prod num (prod num num)), (∧ (= (ODD' _2607 (NUMERAL _0)) F) (∀ (λ n : El num, (= (ODD' _2607 (SUC n)) (¬ (ODD' _2607 n))))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))))))) ≔ REFL ODD;
symbol - : El (fun num (fun num num)) ≔ ((@ε (fun num (fun num (fun num num)))) (λ -' : El (fun num (fun num (fun num num))), (∀ (λ _2766 : El num, (∧ (∀ (λ m : El num, (= (-' _2766 m (NUMERAL _0)) m))) (∀ (λ m : El num, (∀ (λ n : El num, (= (-' _2766 m (SUC n)) (PRE (-' _2766 m n))))))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 _0))))))));
opaque symbol -_def : Prf (= - ((@ε (fun num (fun num (fun num num)))) (λ -' : El (fun num (fun num (fun num num))), (∀ (λ _2766 : El num, (∧ (∀ (λ m : El num, (= (-' _2766 m (NUMERAL _0)) m))) (∀ (λ m : El num, (∀ (λ n : El num, (= (-' _2766 m (SUC n)) (PRE (-' _2766 m n))))))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 _0))))))))) ≔ REFL -;
symbol FACT : El (fun num num) ≔ ((@ε (fun (prod num (prod num (prod num num))) (fun num num))) (λ FACT' : El (fun (prod num (prod num (prod num num))) (fun num num)), (∀ (λ _2944 : El (prod num (prod num (prod num num))), (∧ (= (FACT' _2944 (NUMERAL _0)) (NUMERAL (BIT1 _0))) (∀ (λ n : El num, (= (FACT' _2944 (SUC n)) (* (SUC n) (FACT' _2944 n))))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0))))))))))));
opaque symbol FACT_def : Prf (= FACT ((@ε (fun (prod num (prod num (prod num num))) (fun num num))) (λ FACT' : El (fun (prod num (prod num (prod num num))) (fun num num)), (∀ (λ _2944 : El (prod num (prod num (prod num num))), (∧ (= (FACT' _2944 (NUMERAL _0)) (NUMERAL (BIT1 _0))) (∀ (λ n : El num, (= (FACT' _2944 (SUC n)) (* (SUC n) (FACT' _2944 n))))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0))))))))))))) ≔ REFL FACT;
symbol DIV : El (fun num (fun num num)) ≔ ((@ε (fun (prod num (prod num num)) (fun num (fun num num)))) (λ q : El (fun (prod num (prod num num)) (fun num (fun num num))), (∀ (λ _3086 : El (prod num (prod num num)), (∃ (λ r : El (fun num (fun num num)), (∀ (λ m : El num, (∀ (λ n : El num, ((@COND bool) (= n (NUMERAL _0)) (∧ (= (q _3086 m n) (NUMERAL _0)) (= (r m n) m)) (∧ (= m (+ (* (q _3086 m n) n) (r m n))) (< (r m n) n)))))))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))))));
opaque symbol DIV_def : Prf (= DIV ((@ε (fun (prod num (prod num num)) (fun num (fun num num)))) (λ q : El (fun (prod num (prod num num)) (fun num (fun num num))), (∀ (λ _3086 : El (prod num (prod num num)), (∃ (λ r : El (fun num (fun num num)), (∀ (λ m : El num, (∀ (λ n : El num, ((@COND bool) (= n (NUMERAL _0)) (∧ (= (q _3086 m n) (NUMERAL _0)) (= (r m n) m)) (∧ (= m (+ (* (q _3086 m n) n) (r m n))) (< (r m n) n)))))))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))))))) ≔ REFL DIV;
symbol MOD : El (fun num (fun num num)) ≔ ((@ε (fun (prod num (prod num num)) (fun num (fun num num)))) (λ r : El (fun (prod num (prod num num)) (fun num (fun num num))), (∀ (λ _3087 : El (prod num (prod num num)), (∀ (λ m : El num, (∀ (λ n : El num, ((@COND bool) (= n (NUMERAL _0)) (∧ (= (DIV m n) (NUMERAL _0)) (= (r _3087 m n) m)) (∧ (= m (+ (* (DIV m n) n) (r _3087 m n))) (< (r _3087 m n) n)))))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))))));
opaque symbol MOD_def : Prf (= MOD ((@ε (fun (prod num (prod num num)) (fun num (fun num num)))) (λ r : El (fun (prod num (prod num num)) (fun num (fun num num))), (∀ (λ _3087 : El (prod num (prod num num)), (∀ (λ m : El num, (∀ (λ n : El num, ((@COND bool) (= n (NUMERAL _0)) (∧ (= (DIV m n) (NUMERAL _0)) (= (r _3087 m n) m)) (∧ (= m (+ (* (DIV m n) n) (r _3087 m n))) (< (r _3087 m n) n)))))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))))))) ≔ REFL MOD;
symbol minimal : El (fun (fun num bool) num) ≔ (λ _6373 : El (fun num bool), ((@ε num) (λ n : El num, (∧ (_6373 n) (∀ (λ m : El num, (⇒ (< m n) (¬ (_6373 m)))))))));
opaque symbol minimal_def : Prf (= minimal (λ _6373 : El (fun num bool), ((@ε num) (λ n : El num, (∧ (_6373 n) (∀ (λ m : El num, (⇒ (< m n) (¬ (_6373 m)))))))))) ≔ REFL minimal;
symbol WF [A] : El (fun (fun A (fun A bool)) bool) ≔ (λ _6760 : El (fun A (fun A bool)), (∀ (λ P : El (fun A bool), (⇒ (∃ (λ x : El A, (P x))) (∃ (λ x : El A, (∧ (P x) (∀ (λ y : El A, (⇒ (_6760 y x) (¬ (P y))))))))))));
opaque symbol WF_def [A] : Prf (= (@WF A) (λ _6760 : El (fun A (fun A bool)), (∀ (λ P : El (fun A bool), (⇒ (∃ (λ x : El A, (P x))) (∃ (λ x : El A, (∧ (P x) (∀ (λ y : El A, (⇒ (_6760 y x) (¬ (P y))))))))))))) ≔ REFL (@WF  A);
symbol MEASURE [_16406] : El (fun (fun _16406 num) (fun _16406 (fun _16406 bool))) ≔ (λ _7931 : El (fun _16406 num), (λ x : El _16406, (λ y : El _16406, (< (_7931 x) (_7931 y)))));
opaque symbol MEASURE_def [_16406] : Prf (= (@MEASURE _16406) (λ _7931 : El (fun _16406 num), (λ x : El _16406, (λ y : El _16406, (< (_7931 x) (_7931 y)))))) ≔ REFL (@MEASURE  _16406);
symbol NUMPAIR : El (fun num (fun num num)) ≔ (λ _17324 : El num, (λ _17325 : El num, (* (EXP (NUMERAL (BIT0 (BIT1 _0))) _17324) (+ (* (NUMERAL (BIT0 (BIT1 _0))) _17325) (NUMERAL (BIT1 _0))))));
opaque symbol NUMPAIR_def : Prf (= NUMPAIR (λ _17324 : El num, (λ _17325 : El num, (* (EXP (NUMERAL (BIT0 (BIT1 _0))) _17324) (+ (* (NUMERAL (BIT0 (BIT1 _0))) _17325) (NUMERAL (BIT1 _0))))))) ≔ REFL NUMPAIR;
symbol NUMFST : El (fun num num) ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun num num))) (λ X : El (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun num num)), (∀ (λ _17340 : El (prod num (prod num (prod num (prod num (prod num num))))), (∃ (λ Y : El (fun num num), (∀ (λ x : El num, (∀ (λ y : El num, (∧ (= (X _17340 (NUMPAIR x y)) x) (= (Y (NUMPAIR x y)) y))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0))))))))))))));
opaque symbol NUMFST_def : Prf (= NUMFST ((@ε (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun num num))) (λ X : El (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun num num)), (∀ (λ _17340 : El (prod num (prod num (prod num (prod num (prod num num))))), (∃ (λ Y : El (fun num num), (∀ (λ x : El num, (∀ (λ y : El num, (∧ (= (X _17340 (NUMPAIR x y)) x) (= (Y (NUMPAIR x y)) y))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0))))))))))))))) ≔ REFL NUMFST;
symbol NUMSND : El (fun num num) ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun num num))) (λ Y : El (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun num num)), (∀ (λ _17341 : El (prod num (prod num (prod num (prod num (prod num num))))), (∀ (λ x : El num, (∀ (λ y : El num, (∧ (= (NUMFST (NUMPAIR x y)) x) (= (Y _17341 (NUMPAIR x y)) y))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0))))))))))))));
opaque symbol NUMSND_def : Prf (= NUMSND ((@ε (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun num num))) (λ Y : El (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun num num)), (∀ (λ _17341 : El (prod num (prod num (prod num (prod num (prod num num))))), (∀ (λ x : El num, (∀ (λ y : El num, (∧ (= (NUMFST (NUMPAIR x y)) x) (= (Y _17341 (NUMPAIR x y)) y))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0))))))))))))))) ≔ REFL NUMSND;
symbol NUMSUM : El (fun bool (fun num num)) ≔ (λ _17342 : El bool, (λ _17343 : El num, ((@COND num) _17342 (SUC (* (NUMERAL (BIT0 (BIT1 _0))) _17343)) (* (NUMERAL (BIT0 (BIT1 _0))) _17343))));
opaque symbol NUMSUM_def : Prf (= NUMSUM (λ _17342 : El bool, (λ _17343 : El num, ((@COND num) _17342 (SUC (* (NUMERAL (BIT0 (BIT1 _0))) _17343)) (* (NUMERAL (BIT0 (BIT1 _0))) _17343))))) ≔ REFL NUMSUM;
symbol NUMLEFT : El (fun num bool) ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun num bool))) (λ X : El (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun num bool)), (∀ (λ _17372 : El (prod num (prod num (prod num (prod num (prod num (prod num num)))))), (∃ (λ Y : El (fun num num), (∀ (λ x : El bool, (∀ (λ y : El num, (∧ (= (X _17372 (NUMSUM x y)) x) (= (Y (NUMSUM x y)) y))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))))))))));
opaque symbol NUMLEFT_def : Prf (= NUMLEFT ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun num bool))) (λ X : El (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun num bool)), (∀ (λ _17372 : El (prod num (prod num (prod num (prod num (prod num (prod num num)))))), (∃ (λ Y : El (fun num num), (∀ (λ x : El bool, (∀ (λ y : El num, (∧ (= (X _17372 (NUMSUM x y)) x) (= (Y (NUMSUM x y)) y))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))))))))))) ≔ REFL NUMLEFT;
symbol NUMRIGHT : El (fun num num) ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun num num))) (λ Y : El (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun num num)), (∀ (λ _17373 : El (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))), (∀ (λ x : El bool, (∀ (λ y : El num, (∧ (= (NUMLEFT (NUMSUM x y)) x) (= (Y _17373 (NUMSUM x y)) y))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0))))))))))))))));
opaque symbol NUMRIGHT_def : Prf (= NUMRIGHT ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun num num))) (λ Y : El (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun num num)), (∀ (λ _17373 : El (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))), (∀ (λ x : El bool, (∀ (λ y : El num, (∧ (= (NUMLEFT (NUMSUM x y)) x) (= (Y _17373 (NUMSUM x y)) y))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0))))))))))))))))) ≔ REFL NUMRIGHT;
symbol INJN [A] : El (fun num (fun num (fun A bool))) ≔ (λ _17374 : El num, (λ n : El num, (λ a : El A, (= n _17374))));
opaque symbol INJN_def [A] : Prf (= (@INJN A) (λ _17374 : El num, (λ n : El num, (λ a : El A, (= n _17374))))) ≔ REFL (@INJN  A);
symbol INJA [A] : El (fun A (fun num (fun A bool))) ≔ (λ _17379 : El A, (λ n : El num, (λ b : El A, (= b _17379))));
opaque symbol INJA_def [A] : Prf (= (@INJA A) (λ _17379 : El A, (λ n : El num, (λ b : El A, (= b _17379))))) ≔ REFL (@INJA  A);
symbol INJF [A] : El (fun (fun num (fun num (fun A bool))) (fun num (fun A bool))) ≔ (λ _17386 : El (fun num (fun num (fun A bool))), (λ n : El num, (_17386 (NUMFST n) (NUMSND n))));
opaque symbol INJF_def [A] : Prf (= (@INJF A) (λ _17386 : El (fun num (fun num (fun A bool))), (λ n : El num, (_17386 (NUMFST n) (NUMSND n))))) ≔ REFL (@INJF  A);
symbol INJP [A] : El (fun (fun num (fun A bool)) (fun (fun num (fun A bool)) (fun num (fun A bool)))) ≔ (λ _17391 : El (fun num (fun A bool)), (λ _17392 : El (fun num (fun A bool)), (λ n : El num, (λ a : El A, ((@COND bool) (NUMLEFT n) (_17391 (NUMRIGHT n) a) (_17392 (NUMRIGHT n) a))))));
opaque symbol INJP_def [A] : Prf (= (@INJP A) (λ _17391 : El (fun num (fun A bool)), (λ _17392 : El (fun num (fun A bool)), (λ n : El num, (λ a : El A, ((@COND bool) (NUMLEFT n) (_17391 (NUMRIGHT n) a) (_17392 (NUMRIGHT n) a))))))) ≔ REFL (@INJP  A);
symbol ZCONSTR [A] : El (fun num (fun A (fun (fun num (fun num (fun A bool))) (fun num (fun A bool))))) ≔ (λ _17403 : El num, (λ _17404 : El A, (λ _17405 : El (fun num (fun num (fun A bool))), ((@INJP A) ((@INJN A) (SUC _17403)) ((@INJP A) ((@INJA A) _17404) ((@INJF A) _17405))))));
opaque symbol ZCONSTR_def [A] : Prf (= (@ZCONSTR A) (λ _17403 : El num, (λ _17404 : El A, (λ _17405 : El (fun num (fun num (fun A bool))), ((@INJP A) ((@INJN A) (SUC _17403)) ((@INJP A) ((@INJA A) _17404) ((@INJF A) _17405))))))) ≔ REFL (@ZCONSTR  A);
symbol ZBOT [A] : El (fun num (fun A bool)) ≔ ((@INJP A) ((@INJN A) (NUMERAL _0)) ((@ε (fun num (fun A bool))) (λ z : El (fun num (fun A bool)), T)));
opaque symbol ZBOT_def [A] : Prf (= (@ZBOT A) ((@INJP A) ((@INJN A) (NUMERAL _0)) ((@ε (fun num (fun A bool))) (λ z : El (fun num (fun A bool)), T)))) ≔ REFL (@ZBOT  A);
symbol ZRECSPACE [A] : El (fun (fun num (fun A bool)) bool) ≔ (λ a : El (fun num (fun A bool)), (∀ (λ ZRECSPACE' : El (fun (fun num (fun A bool)) bool), (⇒ (∀ (λ a' : El (fun num (fun A bool)), (⇒ (∨ (= a' (@ZBOT A)) (∃ (λ c : El num, (∃ (λ i : El A, (∃ (λ r : El (fun num (fun num (fun A bool))), (∧ (= a' ((@ZCONSTR A) c i r)) (∀ (λ n : El num, (ZRECSPACE' (r n)))))))))))) (ZRECSPACE' a')))) (ZRECSPACE' a)))));
opaque symbol ZRECSPACE_def [A] : Prf (= (@ZRECSPACE A) (λ a : El (fun num (fun A bool)), (∀ (λ ZRECSPACE' : El (fun (fun num (fun A bool)) bool), (⇒ (∀ (λ a' : El (fun num (fun A bool)), (⇒ (∨ (= a' (@ZBOT A)) (∃ (λ c : El num, (∃ (λ i : El A, (∃ (λ r : El (fun num (fun num (fun A bool))), (∧ (= a' ((@ZCONSTR A) c i r)) (∀ (λ n : El num, (ZRECSPACE' (r n)))))))))))) (ZRECSPACE' a')))) (ZRECSPACE' a)))))) ≔ REFL (@ZRECSPACE  A);
symbol _mk_rec [A] : El (fun (fun num (fun A bool)) (recspace A));
symbol _dest_rec [A] : El (fun (recspace A) (fun num (fun A bool)));
symbol BOTTOM [A] : El (recspace A) ≔ ((@_mk_rec A) (@ZBOT A));
opaque symbol BOTTOM_def [A] : Prf (= (@BOTTOM A) ((@_mk_rec A) (@ZBOT A))) ≔ REFL (@BOTTOM  A);
symbol CONSTR [A] : El (fun num (fun A (fun (fun num (recspace A)) (recspace A)))) ≔ (λ _17428 : El num, (λ _17429 : El A, (λ _17430 : El (fun num (recspace A)), ((@_mk_rec A) ((@ZCONSTR A) _17428 _17429 (λ n : El num, ((@_dest_rec A) (_17430 n))))))));
opaque symbol CONSTR_def [A] : Prf (= (@CONSTR A) (λ _17428 : El num, (λ _17429 : El A, (λ _17430 : El (fun num (recspace A)), ((@_mk_rec A) ((@ZCONSTR A) _17428 _17429 (λ n : El num, ((@_dest_rec A) (_17430 n))))))))) ≔ REFL (@CONSTR  A);
symbol FCONS [A] : El (fun A (fun (fun num A) (fun num A))) ≔ ((@ε (fun (prod num (prod num (prod num (prod num num)))) (fun A (fun (fun num A) (fun num A))))) (λ FCONS' : El (fun (prod num (prod num (prod num (prod num num)))) (fun A (fun (fun num A) (fun num A)))), (∀ (λ _17460 : El (prod num (prod num (prod num (prod num num)))), (∧ (∀ (λ a : El A, (∀ (λ f : El (fun num A), (= (FCONS' _17460 a f (NUMERAL _0)) a))))) (∀ (λ a : El A, (∀ (λ f : El (fun num A), (∀ (λ n : El num, (= (FCONS' _17460 a f (SUC n)) (f n)))))))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))))))));
opaque symbol FCONS_def [A] : Prf (= (@FCONS A) ((@ε (fun (prod num (prod num (prod num (prod num num)))) (fun A (fun (fun num A) (fun num A))))) (λ FCONS' : El (fun (prod num (prod num (prod num (prod num num)))) (fun A (fun (fun num A) (fun num A)))), (∀ (λ _17460 : El (prod num (prod num (prod num (prod num num)))), (∧ (∀ (λ a : El A, (∀ (λ f : El (fun num A), (= (FCONS' _17460 a f (NUMERAL _0)) a))))) (∀ (λ a : El A, (∀ (λ f : El (fun num A), (∀ (λ n : El num, (= (FCONS' _17460 a f (SUC n)) (f n)))))))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))))))))) ≔ REFL (@FCONS  A);
symbol FNIL [A] : El (fun num A) ≔ (λ _17461 : El num, ((@ε A) (λ x : El A, T)));
opaque symbol FNIL_def [A] : Prf (= (@FNIL A) (λ _17461 : El num, ((@ε A) (λ x : El A, T)))) ≔ REFL (@FNIL  A);
symbol _mk_sum [A B] : El (fun (recspace (prod A B)) (Sum A B));
symbol _dest_sum [A B] : El (fun (Sum A B) (recspace (prod A B)));
symbol INL [A B] : El (fun A (Sum A B)) ≔ (λ a : El A, ((@_mk_sum A B) ((λ a' : El A, ((@CONSTR (prod A B)) (NUMERAL _0) ((@̦‚ A B) a' ((@ε B) (λ v : El B, T))) (λ n : El num, (@BOTTOM (prod A B))))) a)));
opaque symbol INL_def [A B] : Prf (= (@INL A B) (λ a : El A, ((@_mk_sum A B) ((λ a' : El A, ((@CONSTR (prod A B)) (NUMERAL _0) ((@̦‚ A B) a' ((@ε B) (λ v : El B, T))) (λ n : El num, (@BOTTOM (prod A B))))) a)))) ≔ REFL (@INL  A B);
symbol INR [A B] : El (fun B (Sum A B)) ≔ (λ a : El B, ((@_mk_sum A B) ((λ a' : El B, ((@CONSTR (prod A B)) (SUC (NUMERAL _0)) ((@̦‚ A B) ((@ε A) (λ v : El A, T)) a') (λ n : El num, (@BOTTOM (prod A B))))) a)));
opaque symbol INR_def [A B] : Prf (= (@INR A B) (λ a : El B, ((@_mk_sum A B) ((λ a' : El B, ((@CONSTR (prod A B)) (SUC (NUMERAL _0)) ((@̦‚ A B) ((@ε A) (λ v : El A, T)) a') (λ n : El num, (@BOTTOM (prod A B))))) a)))) ≔ REFL (@INR  A B);
symbol OUTL [A B] : El (fun (Sum A B) A) ≔ ((@ε (fun (prod num (prod num (prod num num))) (fun (Sum A B) A))) (λ OUTL' : El (fun (prod num (prod num (prod num num))) (fun (Sum A B) A)), (∀ (λ _17486 : El (prod num (prod num (prod num num))), (∀ (λ x : El A, (= (OUTL' _17486 ((@INL A B) x)) x)))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0))))))))))));
opaque symbol OUTL_def [A B] : Prf (= (@OUTL A B) ((@ε (fun (prod num (prod num (prod num num))) (fun (Sum A B) A))) (λ OUTL' : El (fun (prod num (prod num (prod num num))) (fun (Sum A B) A)), (∀ (λ _17486 : El (prod num (prod num (prod num num))), (∀ (λ x : El A, (= (OUTL' _17486 ((@INL A B) x)) x)))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0))))))))))))) ≔ REFL (@OUTL  A B);
symbol OUTR [A B] : El (fun (Sum A B) B) ≔ ((@ε (fun (prod num (prod num (prod num num))) (fun (Sum A B) B))) (λ OUTR' : El (fun (prod num (prod num (prod num num))) (fun (Sum A B) B)), (∀ (λ _17488 : El (prod num (prod num (prod num num))), (∀ (λ y : El B, (= (OUTR' _17488 ((@INR A B) y)) y)))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0))))))))))));
opaque symbol OUTR_def [A B] : Prf (= (@OUTR A B) ((@ε (fun (prod num (prod num (prod num num))) (fun (Sum A B) B))) (λ OUTR' : El (fun (prod num (prod num (prod num num))) (fun (Sum A B) B)), (∀ (λ _17488 : El (prod num (prod num (prod num num))), (∀ (λ y : El B, (= (OUTR' _17488 ((@INR A B) y)) y)))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0))))))))))))) ≔ REFL (@OUTR  A B);
symbol _mk_option [A] : El (fun (recspace A) (option A));
symbol _dest_option [A] : El (fun (option A) (recspace A));
symbol NONE [A] : El (option A) ≔ ((@_mk_option A) ((@CONSTR A) (NUMERAL _0) ((@ε A) (λ v : El A, T)) (λ n : El num, (@BOTTOM A))));
opaque symbol NONE_def [A] : Prf (= (@NONE A) ((@_mk_option A) ((@CONSTR A) (NUMERAL _0) ((@ε A) (λ v : El A, T)) (λ n : El num, (@BOTTOM A))))) ≔ REFL (@NONE  A);
symbol SOME [A] : El (fun A (option A)) ≔ (λ a : El A, ((@_mk_option A) ((λ a' : El A, ((@CONSTR A) (SUC (NUMERAL _0)) a' (λ n : El num, (@BOTTOM A)))) a)));
opaque symbol SOME_def [A] : Prf (= (@SOME A) (λ a : El A, ((@_mk_option A) ((λ a' : El A, ((@CONSTR A) (SUC (NUMERAL _0)) a' (λ n : El num, (@BOTTOM A)))) a)))) ≔ REFL (@SOME  A);
symbol _mk_list [A] : El (fun (recspace A) (list A));
symbol _dest_list [A] : El (fun (list A) (recspace A));
symbol NIL [A] : El (list A) ≔ ((@_mk_list A) ((@CONSTR A) (NUMERAL _0) ((@ε A) (λ v : El A, T)) (λ n : El num, (@BOTTOM A))));
opaque symbol NIL_def [A] : Prf (= (@NIL A) ((@_mk_list A) ((@CONSTR A) (NUMERAL _0) ((@ε A) (λ v : El A, T)) (λ n : El num, (@BOTTOM A))))) ≔ REFL (@NIL  A);
symbol CONS [A] : El (fun A (fun (list A) (list A))) ≔ (λ a0 : El A, (λ a1 : El (list A), ((@_mk_list A) ((λ a0' : El A, (λ a1' : El (recspace A), ((@CONSTR A) (SUC (NUMERAL _0)) a0' ((@FCONS (recspace A)) a1' (λ n : El num, (@BOTTOM A)))))) a0 ((@_dest_list A) a1)))));
opaque symbol CONS_def [A] : Prf (= (@CONS A) (λ a0 : El A, (λ a1 : El (list A), ((@_mk_list A) ((λ a0' : El A, (λ a1' : El (recspace A), ((@CONSTR A) (SUC (NUMERAL _0)) a0' ((@FCONS (recspace A)) a1' (λ n : El num, (@BOTTOM A)))))) a0 ((@_dest_list A) a1)))))) ≔ REFL (@CONS  A);
symbol ISO [A B] : El (fun (fun A B) (fun (fun B A) bool)) ≔ (λ _17569 : El (fun A B), (λ _17570 : El (fun B A), (∧ (∀ (λ x : El B, (= (_17569 (_17570 x)) x))) (∀ (λ y : El A, (= (_17570 (_17569 y)) y))))));
opaque symbol ISO_def [A B] : Prf (= (@ISO A B) (λ _17569 : El (fun A B), (λ _17570 : El (fun B A), (∧ (∀ (λ x : El B, (= (_17569 (_17570 x)) x))) (∀ (λ y : El A, (= (_17570 (_17569 y)) y))))))) ≔ REFL (@ISO  A B);
symbol HD [A] : El (fun (list A) A) ≔ ((@ε (fun (prod num num) (fun (list A) A))) (λ HD' : El (fun (prod num num) (fun (list A) A)), (∀ (λ _17927 : El (prod num num), (∀ (λ t : El (list A), (∀ (λ h : El A, (= (HD' _17927 ((@CONS A) h t)) h)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0))))))))));
opaque symbol HD_def [A] : Prf (= (@HD A) ((@ε (fun (prod num num) (fun (list A) A))) (λ HD' : El (fun (prod num num) (fun (list A) A)), (∀ (λ _17927 : El (prod num num), (∀ (λ t : El (list A), (∀ (λ h : El A, (= (HD' _17927 ((@CONS A) h t)) h)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0))))))))))) ≔ REFL (@HD  A);
symbol TL [A] : El (fun (list A) (list A)) ≔ ((@ε (fun (prod num num) (fun (list A) (list A)))) (λ TL' : El (fun (prod num num) (fun (list A) (list A))), (∀ (λ _17931 : El (prod num num), (∀ (λ h : El A, (∀ (λ t : El (list A), (= (TL' _17931 ((@CONS A) h t)) t)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0))))))))));
opaque symbol TL_def [A] : Prf (= (@TL A) ((@ε (fun (prod num num) (fun (list A) (list A)))) (λ TL' : El (fun (prod num num) (fun (list A) (list A))), (∀ (λ _17931 : El (prod num num), (∀ (λ h : El A, (∀ (λ t : El (list A), (= (TL' _17931 ((@CONS A) h t)) t)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0))))))))))) ≔ REFL (@TL  A);
symbol APPEND [A] : El (fun (list A) (fun (list A) (list A))) ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun (list A) (fun (list A) (list A))))) (λ APPEND' : El (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun (list A) (fun (list A) (list A)))), (∀ (λ _17935 : El (prod num (prod num (prod num (prod num (prod num num))))), (∧ (∀ (λ l : El (list A), (= (APPEND' _17935 (@NIL A) l) l))) (∀ (λ h : El A, (∀ (λ t : El (list A), (∀ (λ l : El (list A), (= (APPEND' _17935 ((@CONS A) h t) l) ((@CONS A) h (APPEND' _17935 t l))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0))))))))))))));
opaque symbol APPEND_def [A] : Prf (= (@APPEND A) ((@ε (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun (list A) (fun (list A) (list A))))) (λ APPEND' : El (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun (list A) (fun (list A) (list A)))), (∀ (λ _17935 : El (prod num (prod num (prod num (prod num (prod num num))))), (∧ (∀ (λ l : El (list A), (= (APPEND' _17935 (@NIL A) l) l))) (∀ (λ h : El A, (∀ (λ t : El (list A), (∀ (λ l : El (list A), (= (APPEND' _17935 ((@CONS A) h t) l) ((@CONS A) h (APPEND' _17935 t l))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0))))))))))))))) ≔ REFL (@APPEND  A);
symbol REVERSE [A] : El (fun (list A) (list A)) ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (list A) (list A)))) (λ REVERSE' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (list A) (list A))), (∀ (λ _17939 : El (prod num (prod num (prod num (prod num (prod num (prod num num)))))), (∧ (= (REVERSE' _17939 (@NIL A)) (@NIL A)) (∀ (λ l : El (list A), (∀ (λ x : El A, (= (REVERSE' _17939 ((@CONS A) x l)) ((@APPEND A) (REVERSE' _17939 l) ((@CONS A) x (@NIL A)))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))))))))));
opaque symbol REVERSE_def [A] : Prf (= (@REVERSE A) ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (list A) (list A)))) (λ REVERSE' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (list A) (list A))), (∀ (λ _17939 : El (prod num (prod num (prod num (prod num (prod num (prod num num)))))), (∧ (= (REVERSE' _17939 (@NIL A)) (@NIL A)) (∀ (λ l : El (list A), (∀ (λ x : El A, (= (REVERSE' _17939 ((@CONS A) x l)) ((@APPEND A) (REVERSE' _17939 l) ((@CONS A) x (@NIL A)))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))))))))))) ≔ REFL (@REVERSE  A);
symbol LENGTH [A] : El (fun (list A) num) ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun (list A) num))) (λ LENGTH' : El (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun (list A) num)), (∀ (λ _17943 : El (prod num (prod num (prod num (prod num (prod num num))))), (∧ (= (LENGTH' _17943 (@NIL A)) (NUMERAL _0)) (∀ (λ h : El A, (∀ (λ t : El (list A), (= (LENGTH' _17943 ((@CONS A) h t)) (SUC (LENGTH' _17943 t))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0))))))))))))));
opaque symbol LENGTH_def [A] : Prf (= (@LENGTH A) ((@ε (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun (list A) num))) (λ LENGTH' : El (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun (list A) num)), (∀ (λ _17943 : El (prod num (prod num (prod num (prod num (prod num num))))), (∧ (= (LENGTH' _17943 (@NIL A)) (NUMERAL _0)) (∀ (λ h : El A, (∀ (λ t : El (list A), (= (LENGTH' _17943 ((@CONS A) h t)) (SUC (LENGTH' _17943 t))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0))))))))))))))) ≔ REFL (@LENGTH  A);
symbol MAP [A B] : El (fun (fun A B) (fun (list A) (list B))) ≔ ((@ε (fun (prod num (prod num num)) (fun (fun A B) (fun (list A) (list B))))) (λ MAP' : El (fun (prod num (prod num num)) (fun (fun A B) (fun (list A) (list B)))), (∀ (λ _17950 : El (prod num (prod num num)), (∧ (∀ (λ f : El (fun A B), (= (MAP' _17950 f (@NIL A)) (@NIL B)))) (∀ (λ f : El (fun A B), (∀ (λ h : El A, (∀ (λ t : El (list A), (= (MAP' _17950 f ((@CONS A) h t)) ((@CONS B) (f h) (MAP' _17950 f t))))))))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))))));
opaque symbol MAP_def [A B] : Prf (= (@MAP A B) ((@ε (fun (prod num (prod num num)) (fun (fun A B) (fun (list A) (list B))))) (λ MAP' : El (fun (prod num (prod num num)) (fun (fun A B) (fun (list A) (list B)))), (∀ (λ _17950 : El (prod num (prod num num)), (∧ (∀ (λ f : El (fun A B), (= (MAP' _17950 f (@NIL A)) (@NIL B)))) (∀ (λ f : El (fun A B), (∀ (λ h : El A, (∀ (λ t : El (list A), (= (MAP' _17950 f ((@CONS A) h t)) ((@CONS B) (f h) (MAP' _17950 f t))))))))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))))))) ≔ REFL (@MAP  A B);
symbol LAST [A] : El (fun (list A) A) ≔ ((@ε (fun (prod num (prod num (prod num num))) (fun (list A) A))) (λ LAST' : El (fun (prod num (prod num (prod num num))) (fun (list A) A)), (∀ (λ _17954 : El (prod num (prod num (prod num num))), (∀ (λ h : El A, (∀ (λ t : El (list A), (= (LAST' _17954 ((@CONS A) h t)) ((@COND A) (= t (@NIL A)) h (LAST' _17954 t)))))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0))))))))))));
opaque symbol LAST_def [A] : Prf (= (@LAST A) ((@ε (fun (prod num (prod num (prod num num))) (fun (list A) A))) (λ LAST' : El (fun (prod num (prod num (prod num num))) (fun (list A) A)), (∀ (λ _17954 : El (prod num (prod num (prod num num))), (∀ (λ h : El A, (∀ (λ t : El (list A), (= (LAST' _17954 ((@CONS A) h t)) ((@COND A) (= t (@NIL A)) h (LAST' _17954 t)))))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0))))))))))))) ≔ REFL (@LAST  A);
symbol BUTLAST [_25251] : El (fun (list _25251) (list _25251)) ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (list _25251) (list _25251)))) (λ BUTLAST' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (list _25251) (list _25251))), (∀ (λ _17958 : El (prod num (prod num (prod num (prod num (prod num (prod num num)))))), (∧ (= (BUTLAST' _17958 (@NIL _25251)) (@NIL _25251)) (∀ (λ h : El _25251, (∀ (λ t : El (list _25251), (= (BUTLAST' _17958 ((@CONS _25251) h t)) ((@COND (list _25251)) (= t (@NIL _25251)) (@NIL _25251) ((@CONS _25251) h (BUTLAST' _17958 t)))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))))))))));
opaque symbol BUTLAST_def [_25251] : Prf (= (@BUTLAST _25251) ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (list _25251) (list _25251)))) (λ BUTLAST' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (list _25251) (list _25251))), (∀ (λ _17958 : El (prod num (prod num (prod num (prod num (prod num (prod num num)))))), (∧ (= (BUTLAST' _17958 (@NIL _25251)) (@NIL _25251)) (∀ (λ h : El _25251, (∀ (λ t : El (list _25251), (= (BUTLAST' _17958 ((@CONS _25251) h t)) ((@COND (list _25251)) (= t (@NIL _25251)) (@NIL _25251) ((@CONS _25251) h (BUTLAST' _17958 t)))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))))))))))) ≔ REFL (@BUTLAST  _25251);
symbol REPLICATE [_25272] : El (fun num (fun _25272 (list _25272))) ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))) (fun num (fun _25272 (list _25272))))) (λ REPLICATE' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))) (fun num (fun _25272 (list _25272)))), (∀ (λ _17962 : El (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))), (∧ (∀ (λ x : El _25272, (= (REPLICATE' _17962 (NUMERAL _0) x) (@NIL _25272)))) (∀ (λ n : El num, (∀ (λ x : El _25272, (= (REPLICATE' _17962 (SUC n) x) ((@CONS _25272) x (REPLICATE' _17962 n x))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))))))))))));
opaque symbol REPLICATE_def [_25272] : Prf (= (@REPLICATE _25272) ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))) (fun num (fun _25272 (list _25272))))) (λ REPLICATE' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))) (fun num (fun _25272 (list _25272)))), (∀ (λ _17962 : El (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))), (∧ (∀ (λ x : El _25272, (= (REPLICATE' _17962 (NUMERAL _0) x) (@NIL _25272)))) (∀ (λ n : El num, (∀ (λ x : El _25272, (= (REPLICATE' _17962 (SUC n) x) ((@CONS _25272) x (REPLICATE' _17962 n x))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))))))))))))) ≔ REFL (@REPLICATE  _25272);
symbol NULL [_25287] : El (fun (list _25287) bool) ≔ ((@ε (fun (prod num (prod num (prod num num))) (fun (list _25287) bool))) (λ NULL' : El (fun (prod num (prod num (prod num num))) (fun (list _25287) bool)), (∀ (λ _17966 : El (prod num (prod num (prod num num))), (∧ (= (NULL' _17966 (@NIL _25287)) T) (∀ (λ h : El _25287, (∀ (λ t : El (list _25287), (= (NULL' _17966 ((@CONS _25287) h t)) F))))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0))))))))))));
opaque symbol NULL_def [_25287] : Prf (= (@NULL _25287) ((@ε (fun (prod num (prod num (prod num num))) (fun (list _25287) bool))) (λ NULL' : El (fun (prod num (prod num (prod num num))) (fun (list _25287) bool)), (∀ (λ _17966 : El (prod num (prod num (prod num num))), (∧ (= (NULL' _17966 (@NIL _25287)) T) (∀ (λ h : El _25287, (∀ (λ t : El (list _25287), (= (NULL' _17966 ((@CONS _25287) h t)) F))))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0))))))))))))) ≔ REFL (@NULL  _25287);
symbol ALL [_25307] : El (fun (fun _25307 bool) (fun (list _25307) bool)) ≔ ((@ε (fun (prod num (prod num num)) (fun (fun _25307 bool) (fun (list _25307) bool)))) (λ ALL' : El (fun (prod num (prod num num)) (fun (fun _25307 bool) (fun (list _25307) bool))), (∀ (λ _17973 : El (prod num (prod num num)), (∧ (∀ (λ P : El (fun _25307 bool), (= (ALL' _17973 P (@NIL _25307)) T))) (∀ (λ h : El _25307, (∀ (λ P : El (fun _25307 bool), (∀ (λ t : El (list _25307), (= (ALL' _17973 P ((@CONS _25307) h t)) (∧ (P h) (ALL' _17973 P t))))))))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))))));
opaque symbol ALL_def [_25307] : Prf (= (@ALL _25307) ((@ε (fun (prod num (prod num num)) (fun (fun _25307 bool) (fun (list _25307) bool)))) (λ ALL' : El (fun (prod num (prod num num)) (fun (fun _25307 bool) (fun (list _25307) bool))), (∀ (λ _17973 : El (prod num (prod num num)), (∧ (∀ (λ P : El (fun _25307 bool), (= (ALL' _17973 P (@NIL _25307)) T))) (∀ (λ h : El _25307, (∀ (λ P : El (fun _25307 bool), (∀ (λ t : El (list _25307), (= (ALL' _17973 P ((@CONS _25307) h t)) (∧ (P h) (ALL' _17973 P t))))))))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))))))) ≔ REFL (@ALL  _25307);
symbol EX [_25328] : El (fun (fun _25328 bool) (fun (list _25328) bool)) ≔ ((@ε (fun (prod num num) (fun (fun _25328 bool) (fun (list _25328) bool)))) (λ EX' : El (fun (prod num num) (fun (fun _25328 bool) (fun (list _25328) bool))), (∀ (λ _17980 : El (prod num num), (∧ (∀ (λ P : El (fun _25328 bool), (= (EX' _17980 P (@NIL _25328)) F))) (∀ (λ h : El _25328, (∀ (λ P : El (fun _25328 bool), (∀ (λ t : El (list _25328), (= (EX' _17980 P ((@CONS _25328) h t)) (∨ (P h) (EX' _17980 P t))))))))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 _0))))))))));
opaque symbol EX_def [_25328] : Prf (= (@EX _25328) ((@ε (fun (prod num num) (fun (fun _25328 bool) (fun (list _25328) bool)))) (λ EX' : El (fun (prod num num) (fun (fun _25328 bool) (fun (list _25328) bool))), (∀ (λ _17980 : El (prod num num), (∧ (∀ (λ P : El (fun _25328 bool), (= (EX' _17980 P (@NIL _25328)) F))) (∀ (λ h : El _25328, (∀ (λ P : El (fun _25328 bool), (∀ (λ t : El (list _25328), (= (EX' _17980 P ((@CONS _25328) h t)) (∨ (P h) (EX' _17980 P t))))))))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 _0))))))))))) ≔ REFL (@EX  _25328);
symbol ITLIST [_25350 _25351] : El (fun (fun _25351 (fun _25350 _25350)) (fun (list _25351) (fun _25350 _25350))) ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun (fun _25351 (fun _25350 _25350)) (fun (list _25351) (fun _25350 _25350))))) (λ ITLIST' : El (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun (fun _25351 (fun _25350 _25350)) (fun (list _25351) (fun _25350 _25350)))), (∀ (λ _17988 : El (prod num (prod num (prod num (prod num (prod num num))))), (∧ (∀ (λ f : El (fun _25351 (fun _25350 _25350)), (∀ (λ b : El _25350, (= (ITLIST' _17988 f (@NIL _25351) b) b))))) (∀ (λ h : El _25351, (∀ (λ f : El (fun _25351 (fun _25350 _25350)), (∀ (λ t : El (list _25351), (∀ (λ b : El _25350, (= (ITLIST' _17988 f ((@CONS _25351) h t) b) (f h (ITLIST' _17988 f t b))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0))))))))))))));
opaque symbol ITLIST_def [_25350 _25351] : Prf (= (@ITLIST _25350 _25351) ((@ε (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun (fun _25351 (fun _25350 _25350)) (fun (list _25351) (fun _25350 _25350))))) (λ ITLIST' : El (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun (fun _25351 (fun _25350 _25350)) (fun (list _25351) (fun _25350 _25350)))), (∀ (λ _17988 : El (prod num (prod num (prod num (prod num (prod num num))))), (∧ (∀ (λ f : El (fun _25351 (fun _25350 _25350)), (∀ (λ b : El _25350, (= (ITLIST' _17988 f (@NIL _25351) b) b))))) (∀ (λ h : El _25351, (∀ (λ f : El (fun _25351 (fun _25350 _25350)), (∀ (λ t : El (list _25351), (∀ (λ b : El _25350, (= (ITLIST' _17988 f ((@CONS _25351) h t) b) (f h (ITLIST' _17988 f t b))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0))))))))))))))) ≔ REFL (@ITLIST  _25350 _25351);
symbol MEM [_25376] : El (fun _25376 (fun (list _25376) bool)) ≔ ((@ε (fun (prod num (prod num num)) (fun _25376 (fun (list _25376) bool)))) (λ MEM' : El (fun (prod num (prod num num)) (fun _25376 (fun (list _25376) bool))), (∀ (λ _17995 : El (prod num (prod num num)), (∧ (∀ (λ x : El _25376, (= (MEM' _17995 x (@NIL _25376)) F))) (∀ (λ h : El _25376, (∀ (λ x : El _25376, (∀ (λ t : El (list _25376), (= (MEM' _17995 x ((@CONS _25376) h t)) (∨ (= x h) (MEM' _17995 x t))))))))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))))));
opaque symbol MEM_def [_25376] : Prf (= (@MEM _25376) ((@ε (fun (prod num (prod num num)) (fun _25376 (fun (list _25376) bool)))) (λ MEM' : El (fun (prod num (prod num num)) (fun _25376 (fun (list _25376) bool))), (∀ (λ _17995 : El (prod num (prod num num)), (∧ (∀ (λ x : El _25376, (= (MEM' _17995 x (@NIL _25376)) F))) (∀ (λ h : El _25376, (∀ (λ x : El _25376, (∀ (λ t : El (list _25376), (= (MEM' _17995 x ((@CONS _25376) h t)) (∨ (= x h) (MEM' _17995 x t))))))))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))))))) ≔ REFL (@MEM  _25376);
symbol ALL2 [_25409 _25416] : El (fun (fun _25409 (fun _25416 bool)) (fun (list _25409) (fun (list _25416) bool))) ≔ ((@ε (fun (prod num (prod num (prod num num))) (fun (fun _25409 (fun _25416 bool)) (fun (list _25409) (fun (list _25416) bool))))) (λ ALL2' : El (fun (prod num (prod num (prod num num))) (fun (fun _25409 (fun _25416 bool)) (fun (list _25409) (fun (list _25416) bool)))), (∀ (λ _18003 : El (prod num (prod num (prod num num))), (∧ (∀ (λ P : El (fun _25409 (fun _25416 bool)), (∀ (λ l2 : El (list _25416), (= (ALL2' _18003 P (@NIL _25409) l2) (= l2 (@NIL _25416))))))) (∀ (λ h1' : El _25409, (∀ (λ P : El (fun _25409 (fun _25416 bool)), (∀ (λ t1 : El (list _25409), (∀ (λ l2 : El (list _25416), (= (ALL2' _18003 P ((@CONS _25409) h1' t1) l2) ((@COND bool) (= l2 (@NIL _25416)) F (∧ (P h1' ((@HD _25416) l2)) (ALL2' _18003 P t1 ((@TL _25416) l2))))))))))))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))))));
opaque symbol ALL2_def [_25409 _25416] : Prf (= (@ALL2 _25409 _25416) ((@ε (fun (prod num (prod num (prod num num))) (fun (fun _25409 (fun _25416 bool)) (fun (list _25409) (fun (list _25416) bool))))) (λ ALL2' : El (fun (prod num (prod num (prod num num))) (fun (fun _25409 (fun _25416 bool)) (fun (list _25409) (fun (list _25416) bool)))), (∀ (λ _18003 : El (prod num (prod num (prod num num))), (∧ (∀ (λ P : El (fun _25409 (fun _25416 bool)), (∀ (λ l2 : El (list _25416), (= (ALL2' _18003 P (@NIL _25409) l2) (= l2 (@NIL _25416))))))) (∀ (λ h1' : El _25409, (∀ (λ P : El (fun _25409 (fun _25416 bool)), (∀ (λ t1 : El (list _25409), (∀ (λ l2 : El (list _25416), (= (ALL2' _18003 P ((@CONS _25409) h1' t1) l2) ((@COND bool) (= l2 (@NIL _25416)) F (∧ (P h1' ((@HD _25416) l2)) (ALL2' _18003 P t1 ((@TL _25416) l2))))))))))))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))))))) ≔ REFL (@ALL2  _25409 _25416);
symbol MAP2 [_25498 _25501 _25508] : El (fun (fun _25501 (fun _25508 _25498)) (fun (list _25501) (fun (list _25508) (list _25498)))) ≔ ((@ε (fun (prod num (prod num (prod num num))) (fun (fun _25501 (fun _25508 _25498)) (fun (list _25501) (fun (list _25508) (list _25498)))))) (λ MAP2' : El (fun (prod num (prod num (prod num num))) (fun (fun _25501 (fun _25508 _25498)) (fun (list _25501) (fun (list _25508) (list _25498))))), (∀ (λ _18011 : El (prod num (prod num (prod num num))), (∧ (∀ (λ f : El (fun _25501 (fun _25508 _25498)), (∀ (λ l : El (list _25508), (= (MAP2' _18011 f (@NIL _25501) l) (@NIL _25498)))))) (∀ (λ h1' : El _25501, (∀ (λ f : El (fun _25501 (fun _25508 _25498)), (∀ (λ t1 : El (list _25501), (∀ (λ l : El (list _25508), (= (MAP2' _18011 f ((@CONS _25501) h1' t1) l) ((@CONS _25498) (f h1' ((@HD _25508) l)) (MAP2' _18011 f t1 ((@TL _25508) l)))))))))))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))))));
opaque symbol MAP2_def [_25498 _25501 _25508] : Prf (= (@MAP2 _25498 _25501 _25508) ((@ε (fun (prod num (prod num (prod num num))) (fun (fun _25501 (fun _25508 _25498)) (fun (list _25501) (fun (list _25508) (list _25498)))))) (λ MAP2' : El (fun (prod num (prod num (prod num num))) (fun (fun _25501 (fun _25508 _25498)) (fun (list _25501) (fun (list _25508) (list _25498))))), (∀ (λ _18011 : El (prod num (prod num (prod num num))), (∧ (∀ (λ f : El (fun _25501 (fun _25508 _25498)), (∀ (λ l : El (list _25508), (= (MAP2' _18011 f (@NIL _25501) l) (@NIL _25498)))))) (∀ (λ h1' : El _25501, (∀ (λ f : El (fun _25501 (fun _25508 _25498)), (∀ (λ t1 : El (list _25501), (∀ (λ l : El (list _25508), (= (MAP2' _18011 f ((@CONS _25501) h1' t1) l) ((@CONS _25498) (f h1' ((@HD _25508) l)) (MAP2' _18011 f t1 ((@TL _25508) l)))))))))))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))))))) ≔ REFL (@MAP2  _25498 _25501 _25508);
symbol EL [_25569] : El (fun num (fun (list _25569) _25569)) ≔ ((@ε (fun (prod num num) (fun num (fun (list _25569) _25569)))) (λ EL' : El (fun (prod num num) (fun num (fun (list _25569) _25569))), (∀ (λ _18015 : El (prod num num), (∧ (∀ (λ l : El (list _25569), (= (EL' _18015 (NUMERAL _0) l) ((@HD _25569) l)))) (∀ (λ n : El num, (∀ (λ l : El (list _25569), (= (EL' _18015 (SUC n) l) (EL' _18015 n ((@TL _25569) l))))))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0))))))))));
opaque symbol EL_def [_25569] : Prf (= (@EL _25569) ((@ε (fun (prod num num) (fun num (fun (list _25569) _25569)))) (λ EL' : El (fun (prod num num) (fun num (fun (list _25569) _25569))), (∀ (λ _18015 : El (prod num num), (∧ (∀ (λ l : El (list _25569), (= (EL' _18015 (NUMERAL _0) l) ((@HD _25569) l)))) (∀ (λ n : El num, (∀ (λ l : El (list _25569), (= (EL' _18015 (SUC n) l) (EL' _18015 n ((@TL _25569) l))))))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0))))))))))) ≔ REFL (@EL  _25569);
symbol FILTER [_25594] : El (fun (fun _25594 bool) (fun (list _25594) (list _25594))) ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun (fun _25594 bool) (fun (list _25594) (list _25594))))) (λ FILTER' : El (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun (fun _25594 bool) (fun (list _25594) (list _25594)))), (∀ (λ _18022 : El (prod num (prod num (prod num (prod num (prod num num))))), (∧ (∀ (λ P : El (fun _25594 bool), (= (FILTER' _18022 P (@NIL _25594)) (@NIL _25594)))) (∀ (λ h : El _25594, (∀ (λ P : El (fun _25594 bool), (∀ (λ t : El (list _25594), (= (FILTER' _18022 P ((@CONS _25594) h t)) ((@COND (list _25594)) (P h) ((@CONS _25594) h (FILTER' _18022 P t)) (FILTER' _18022 P t))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0))))))))))))));
opaque symbol FILTER_def [_25594] : Prf (= (@FILTER _25594) ((@ε (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun (fun _25594 bool) (fun (list _25594) (list _25594))))) (λ FILTER' : El (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun (fun _25594 bool) (fun (list _25594) (list _25594)))), (∀ (λ _18022 : El (prod num (prod num (prod num (prod num (prod num num))))), (∧ (∀ (λ P : El (fun _25594 bool), (= (FILTER' _18022 P (@NIL _25594)) (@NIL _25594)))) (∀ (λ h : El _25594, (∀ (λ P : El (fun _25594 bool), (∀ (λ t : El (list _25594), (= (FILTER' _18022 P ((@CONS _25594) h t)) ((@COND (list _25594)) (P h) ((@CONS _25594) h (FILTER' _18022 P t)) (FILTER' _18022 P t))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0))))))))))))))) ≔ REFL (@FILTER  _25594);
symbol ASSOC [_25617 _25623] : El (fun _25623 (fun (list (prod _25623 _25617)) _25617)) ≔ ((@ε (fun (prod num (prod num (prod num (prod num num)))) (fun _25623 (fun (list (prod _25623 _25617)) _25617)))) (λ ASSOC' : El (fun (prod num (prod num (prod num (prod num num)))) (fun _25623 (fun (list (prod _25623 _25617)) _25617))), (∀ (λ _18029 : El (prod num (prod num (prod num (prod num num)))), (∀ (λ h : El (prod _25623 _25617), (∀ (λ a : El _25623, (∀ (λ t : El (list (prod _25623 _25617)), (= (ASSOC' _18029 a ((@CONS (prod _25623 _25617)) h t)) ((@COND _25617) (= ((@FST _25623 _25617) h) a) ((@SND _25623 _25617) h) (ASSOC' _18029 a t)))))))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))))))));
opaque symbol ASSOC_def [_25617 _25623] : Prf (= (@ASSOC _25617 _25623) ((@ε (fun (prod num (prod num (prod num (prod num num)))) (fun _25623 (fun (list (prod _25623 _25617)) _25617)))) (λ ASSOC' : El (fun (prod num (prod num (prod num (prod num num)))) (fun _25623 (fun (list (prod _25623 _25617)) _25617))), (∀ (λ _18029 : El (prod num (prod num (prod num (prod num num)))), (∀ (λ h : El (prod _25623 _25617), (∀ (λ a : El _25623, (∀ (λ t : El (list (prod _25623 _25617)), (= (ASSOC' _18029 a ((@CONS (prod _25623 _25617)) h t)) ((@COND _25617) (= ((@FST _25623 _25617) h) a) ((@SND _25623 _25617) h) (ASSOC' _18029 a t)))))))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))))))))) ≔ REFL (@ASSOC  _25617 _25623);
symbol ITLIST2 [_25645 _25647 _25655] : El (fun (fun _25647 (fun _25655 (fun _25645 _25645))) (fun (list _25647) (fun (list _25655) (fun _25645 _25645)))) ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (fun _25647 (fun _25655 (fun _25645 _25645))) (fun (list _25647) (fun (list _25655) (fun _25645 _25645)))))) (λ ITLIST2' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (fun _25647 (fun _25655 (fun _25645 _25645))) (fun (list _25647) (fun (list _25655) (fun _25645 _25645))))), (∀ (λ _18038 : El (prod num (prod num (prod num (prod num (prod num (prod num num)))))), (∧ (∀ (λ f : El (fun _25647 (fun _25655 (fun _25645 _25645))), (∀ (λ l2 : El (list _25655), (∀ (λ b : El _25645, (= (ITLIST2' _18038 f (@NIL _25647) l2 b) b))))))) (∀ (λ h1' : El _25647, (∀ (λ f : El (fun _25647 (fun _25655 (fun _25645 _25645))), (∀ (λ t1 : El (list _25647), (∀ (λ l2 : El (list _25655), (∀ (λ b : El _25645, (= (ITLIST2' _18038 f ((@CONS _25647) h1' t1) l2 b) (f h1' ((@HD _25655) l2) (ITLIST2' _18038 f t1 ((@TL _25655) l2) b))))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0))))))))))))));
opaque symbol ITLIST2_def [_25645 _25647 _25655] : Prf (= (@ITLIST2 _25645 _25647 _25655) ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (fun _25647 (fun _25655 (fun _25645 _25645))) (fun (list _25647) (fun (list _25655) (fun _25645 _25645)))))) (λ ITLIST2' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (fun _25647 (fun _25655 (fun _25645 _25645))) (fun (list _25647) (fun (list _25655) (fun _25645 _25645))))), (∀ (λ _18038 : El (prod num (prod num (prod num (prod num (prod num (prod num num)))))), (∧ (∀ (λ f : El (fun _25647 (fun _25655 (fun _25645 _25645))), (∀ (λ l2 : El (list _25655), (∀ (λ b : El _25645, (= (ITLIST2' _18038 f (@NIL _25647) l2 b) b))))))) (∀ (λ h1' : El _25647, (∀ (λ f : El (fun _25647 (fun _25655 (fun _25645 _25645))), (∀ (λ t1 : El (list _25647), (∀ (λ l2 : El (list _25655), (∀ (λ b : El _25645, (= (ITLIST2' _18038 f ((@CONS _25647) h1' t1) l2 b) (f h1' ((@HD _25655) l2) (ITLIST2' _18038 f t1 ((@TL _25655) l2) b))))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0))))))))))))))) ≔ REFL (@ITLIST2  _25645 _25647 _25655);
symbol ZIP [_25719 _25727] : El (fun (list _25719) (fun (list _25727) (list (prod _25719 _25727)))) ≔ ((@ε (fun (prod num (prod num num)) (fun (list _25719) (fun (list _25727) (list (prod _25719 _25727)))))) (λ ZIP' : El (fun (prod num (prod num num)) (fun (list _25719) (fun (list _25727) (list (prod _25719 _25727))))), (∀ (λ _18042 : El (prod num (prod num num)), (∧ (∀ (λ l2 : El (list _25727), (= (ZIP' _18042 (@NIL _25719) l2) (@NIL (prod _25719 _25727))))) (∀ (λ h1' : El _25719, (∀ (λ t1 : El (list _25719), (∀ (λ l2 : El (list _25727), (= (ZIP' _18042 ((@CONS _25719) h1' t1) l2) ((@CONS (prod _25719 _25727)) ((@̦‚ _25719 _25727) h1' ((@HD _25727) l2)) (ZIP' _18042 t1 ((@TL _25727) l2)))))))))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))))));
opaque symbol ZIP_def [_25719 _25727] : Prf (= (@ZIP _25719 _25727) ((@ε (fun (prod num (prod num num)) (fun (list _25719) (fun (list _25727) (list (prod _25719 _25727)))))) (λ ZIP' : El (fun (prod num (prod num num)) (fun (list _25719) (fun (list _25727) (list (prod _25719 _25727))))), (∀ (λ _18042 : El (prod num (prod num num)), (∧ (∀ (λ l2 : El (list _25727), (= (ZIP' _18042 (@NIL _25719) l2) (@NIL (prod _25719 _25727))))) (∀ (λ h1' : El _25719, (∀ (λ t1 : El (list _25719), (∀ (λ l2 : El (list _25727), (= (ZIP' _18042 ((@CONS _25719) h1' t1) l2) ((@CONS (prod _25719 _25727)) ((@̦‚ _25719 _25727) h1' ((@HD _25727) l2)) (ZIP' _18042 t1 ((@TL _25727) l2)))))))))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))))))) ≔ REFL (@ZIP  _25719 _25727);
symbol ALLPAIRS [_25786 _25787] : El (fun (fun _25787 (fun _25786 bool)) (fun (list _25787) (fun (list _25786) bool))) ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun (fun _25787 (fun _25786 bool)) (fun (list _25787) (fun (list _25786) bool))))) (λ ALLPAIRS' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun (fun _25787 (fun _25786 bool)) (fun (list _25787) (fun (list _25786) bool)))), (∀ (λ _18050 : El (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))), (∧ (∀ (λ f : El (fun _25787 (fun _25786 bool)), (∀ (λ l : El (list _25786), (= (ALLPAIRS' _18050 f (@NIL _25787) l) T))))) (∀ (λ h : El _25787, (∀ (λ f : El (fun _25787 (fun _25786 bool)), (∀ (λ t : El (list _25787), (∀ (λ l : El (list _25786), (= (ALLPAIRS' _18050 f ((@CONS _25787) h t) l) (∧ ((@ALL _25786) (f h) l) (ALLPAIRS' _18050 f t l))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0))))))))))))))));
opaque symbol ALLPAIRS_def [_25786 _25787] : Prf (= (@ALLPAIRS _25786 _25787) ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun (fun _25787 (fun _25786 bool)) (fun (list _25787) (fun (list _25786) bool))))) (λ ALLPAIRS' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun (fun _25787 (fun _25786 bool)) (fun (list _25787) (fun (list _25786) bool)))), (∀ (λ _18050 : El (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))), (∧ (∀ (λ f : El (fun _25787 (fun _25786 bool)), (∀ (λ l : El (list _25786), (= (ALLPAIRS' _18050 f (@NIL _25787) l) T))))) (∀ (λ h : El _25787, (∀ (λ f : El (fun _25787 (fun _25786 bool)), (∀ (λ t : El (list _25787), (∀ (λ l : El (list _25786), (= (ALLPAIRS' _18050 f ((@CONS _25787) h t) l) (∧ ((@ALL _25786) (f h) l) (ALLPAIRS' _18050 f t l))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0))))))))))))))))) ≔ REFL (@ALLPAIRS  _25786 _25787);
symbol PAIRWISE [A] : El (fun (fun A (fun A bool)) (fun (list A) bool)) ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun (fun A (fun A bool)) (fun (list A) bool)))) (λ PAIRWISE' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun (fun A (fun A bool)) (fun (list A) bool))), (∀ (λ _18057 : El (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))), (∧ (∀ (λ r : El (fun A (fun A bool)), (= (PAIRWISE' _18057 r (@NIL A)) T))) (∀ (λ h : El A, (∀ (λ r : El (fun A (fun A bool)), (∀ (λ t : El (list A), (= (PAIRWISE' _18057 r ((@CONS A) h t)) (∧ ((@ALL A) (r h) t) (PAIRWISE' _18057 r t))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0))))))))))))))));
opaque symbol PAIRWISE_def [A] : Prf (= (@PAIRWISE A) ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun (fun A (fun A bool)) (fun (list A) bool)))) (λ PAIRWISE' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun (fun A (fun A bool)) (fun (list A) bool))), (∀ (λ _18057 : El (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))), (∧ (∀ (λ r : El (fun A (fun A bool)), (= (PAIRWISE' _18057 r (@NIL A)) T))) (∀ (λ h : El A, (∀ (λ r : El (fun A (fun A bool)), (∀ (λ t : El (list A), (= (PAIRWISE' _18057 r ((@CONS A) h t)) (∧ ((@ALL A) (r h) t) (PAIRWISE' _18057 r t))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0))))))))))))))))) ≔ REFL (@PAIRWISE  A);
symbol list_of_seq [A] : El (fun (fun num A) (fun num (list A))) ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))))) (fun (fun num A) (fun num (list A))))) (λ list_of_seq' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))))) (fun (fun num A) (fun num (list A)))), (∀ (λ _18064 : El (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))))), (∧ (∀ (λ s : El (fun num A), (= (list_of_seq' _18064 s (NUMERAL _0)) (@NIL A)))) (∀ (λ s : El (fun num A), (∀ (λ n : El num, (= (list_of_seq' _18064 s (SUC n)) ((@APPEND A) (list_of_seq' _18064 s n) ((@CONS A) (s n) (@NIL A)))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))))))))))))));
opaque symbol list_of_seq_def [A] : Prf (= (@list_of_seq A) ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))))) (fun (fun num A) (fun num (list A))))) (λ list_of_seq' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))))) (fun (fun num A) (fun num (list A)))), (∀ (λ _18064 : El (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))))), (∧ (∀ (λ s : El (fun num A), (= (list_of_seq' _18064 s (NUMERAL _0)) (@NIL A)))) (∀ (λ s : El (fun num A), (∀ (λ n : El num, (= (list_of_seq' _18064 s (SUC n)) ((@APPEND A) (list_of_seq' _18064 s n) ((@CONS A) (s n) (@NIL A)))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))))))))))))))) ≔ REFL (@list_of_seq  A);
symbol _mk_char : El (fun (recspace (prod bool (prod bool (prod bool (prod bool (prod bool (prod bool (prod bool bool)))))))) char);
symbol _dest_char : El (fun char (recspace (prod bool (prod bool (prod bool (prod bool (prod bool (prod bool (prod bool bool)))))))));
symbol _22730 : El (fun bool (fun bool (fun bool (fun bool (fun bool (fun bool (fun bool (fun bool char)))))))) ≔ (λ a0 : El bool, (λ a1 : El bool, (λ a2 : El bool, (λ a3 : El bool, (λ a4 : El bool, (λ a5 : El bool, (λ a6 : El bool, (λ a7 : El bool, (_mk_char ((λ a0' : El bool, (λ a1' : El bool, (λ a2' : El bool, (λ a3' : El bool, (λ a4' : El bool, (λ a5' : El bool, (λ a6' : El bool, (λ a7' : El bool, ((@CONSTR (prod bool (prod bool (prod bool (prod bool (prod bool (prod bool (prod bool bool)))))))) (NUMERAL _0) ((@̦‚ bool (prod bool (prod bool (prod bool (prod bool (prod bool (prod bool bool))))))) a0' ((@̦‚ bool (prod bool (prod bool (prod bool (prod bool (prod bool bool)))))) a1' ((@̦‚ bool (prod bool (prod bool (prod bool (prod bool bool))))) a2' ((@̦‚ bool (prod bool (prod bool (prod bool bool)))) a3' ((@̦‚ bool (prod bool (prod bool bool))) a4' ((@̦‚ bool (prod bool bool)) a5' ((@̦‚ bool bool) a6' a7'))))))) (λ n : El num, (@BOTTOM (prod bool (prod bool (prod bool (prod bool (prod bool (prod bool (prod bool bool)))))))))))))))))) a0 a1 a2 a3 a4 a5 a6 a7))))))))));
opaque symbol _22730_def : Prf (= _22730 (λ a0 : El bool, (λ a1 : El bool, (λ a2 : El bool, (λ a3 : El bool, (λ a4 : El bool, (λ a5 : El bool, (λ a6 : El bool, (λ a7 : El bool, (_mk_char ((λ a0' : El bool, (λ a1' : El bool, (λ a2' : El bool, (λ a3' : El bool, (λ a4' : El bool, (λ a5' : El bool, (λ a6' : El bool, (λ a7' : El bool, ((@CONSTR (prod bool (prod bool (prod bool (prod bool (prod bool (prod bool (prod bool bool)))))))) (NUMERAL _0) ((@̦‚ bool (prod bool (prod bool (prod bool (prod bool (prod bool (prod bool bool))))))) a0' ((@̦‚ bool (prod bool (prod bool (prod bool (prod bool (prod bool bool)))))) a1' ((@̦‚ bool (prod bool (prod bool (prod bool (prod bool bool))))) a2' ((@̦‚ bool (prod bool (prod bool (prod bool bool)))) a3' ((@̦‚ bool (prod bool (prod bool bool))) a4' ((@̦‚ bool (prod bool bool)) a5' ((@̦‚ bool bool) a6' a7'))))))) (λ n : El num, (@BOTTOM (prod bool (prod bool (prod bool (prod bool (prod bool (prod bool (prod bool bool)))))))))))))))))) a0 a1 a2 a3 a4 a5 a6 a7))))))))))) ≔ REFL _22730;
symbol ASCII : El (fun bool (fun bool (fun bool (fun bool (fun bool (fun bool (fun bool (fun bool char)))))))) ≔ _22730;
opaque symbol ASCII_def : Prf (= ASCII _22730) ≔ REFL ASCII;
symbol dist : El (fun (prod num num) num) ≔ (λ _22820 : El (prod num num), (+ (- ((@FST num num) _22820) ((@SND num num) _22820)) (- ((@SND num num) _22820) ((@FST num num) _22820))));
opaque symbol dist_def : Prf (= dist (λ _22820 : El (prod num num), (+ (- ((@FST num num) _22820) ((@SND num num) _22820)) (- ((@SND num num) _22820) ((@FST num num) _22820))))) ≔ REFL dist;
symbol is_nadd : El (fun (fun num num) bool) ≔ (λ _23130 : El (fun num num), (∃ (λ B : El num, (∀ (λ m : El num, (∀ (λ n : El num, (<= (dist ((@̦‚ num num) (* m (_23130 n)) (* n (_23130 m)))) (* B (+ m n))))))))));
opaque symbol is_nadd_def : Prf (= is_nadd (λ _23130 : El (fun num num), (∃ (λ B : El num, (∀ (λ m : El num, (∀ (λ n : El num, (<= (dist ((@̦‚ num num) (* m (_23130 n)) (* n (_23130 m)))) (* B (+ m n))))))))))) ≔ REFL is_nadd;
symbol mk_nadd : El (fun (fun num num) nadd);
symbol dest_nadd : El (fun nadd (fun num num));
symbol nadd_eq : El (fun nadd (fun nadd bool)) ≔ (λ _23149 : El nadd, (λ _23150 : El nadd, (∃ (λ B : El num, (∀ (λ n : El num, (<= (dist ((@̦‚ num num) (dest_nadd _23149 n) (dest_nadd _23150 n))) B)))))));
opaque symbol nadd_eq_def : Prf (= nadd_eq (λ _23149 : El nadd, (λ _23150 : El nadd, (∃ (λ B : El num, (∀ (λ n : El num, (<= (dist ((@̦‚ num num) (dest_nadd _23149 n) (dest_nadd _23150 n))) B)))))))) ≔ REFL nadd_eq;
symbol nadd_of_num : El (fun num nadd) ≔ (λ _23161 : El num, (mk_nadd (λ n : El num, (* _23161 n))));
opaque symbol nadd_of_num_def : Prf (= nadd_of_num (λ _23161 : El num, (mk_nadd (λ n : El num, (* _23161 n))))) ≔ REFL nadd_of_num;
symbol nadd_le : El (fun nadd (fun nadd bool)) ≔ (λ _23168 : El nadd, (λ _23169 : El nadd, (∃ (λ B : El num, (∀ (λ n : El num, (<= (dest_nadd _23168 n) (+ (dest_nadd _23169 n) B))))))));
opaque symbol nadd_le_def : Prf (= nadd_le (λ _23168 : El nadd, (λ _23169 : El nadd, (∃ (λ B : El num, (∀ (λ n : El num, (<= (dest_nadd _23168 n) (+ (dest_nadd _23169 n) B))))))))) ≔ REFL nadd_le;
symbol nadd_add : El (fun nadd (fun nadd nadd)) ≔ (λ _23184 : El nadd, (λ _23185 : El nadd, (mk_nadd (λ n : El num, (+ (dest_nadd _23184 n) (dest_nadd _23185 n))))));
opaque symbol nadd_add_def : Prf (= nadd_add (λ _23184 : El nadd, (λ _23185 : El nadd, (mk_nadd (λ n : El num, (+ (dest_nadd _23184 n) (dest_nadd _23185 n))))))) ≔ REFL nadd_add;
symbol nadd_mul : El (fun nadd (fun nadd nadd)) ≔ (λ _23198 : El nadd, (λ _23199 : El nadd, (mk_nadd (λ n : El num, (dest_nadd _23198 (dest_nadd _23199 n))))));
opaque symbol nadd_mul_def : Prf (= nadd_mul (λ _23198 : El nadd, (λ _23199 : El nadd, (mk_nadd (λ n : El num, (dest_nadd _23198 (dest_nadd _23199 n))))))) ≔ REFL nadd_mul;
symbol nadd_rinv : El (fun nadd (fun num num)) ≔ (λ _23335 : El nadd, (λ n : El num, (DIV (* n n) (dest_nadd _23335 n))));
opaque symbol nadd_rinv_def : Prf (= nadd_rinv (λ _23335 : El nadd, (λ n : El num, (DIV (* n n) (dest_nadd _23335 n))))) ≔ REFL nadd_rinv;
symbol nadd_inv : El (fun nadd nadd) ≔ (λ _23349 : El nadd, ((@COND nadd) (nadd_eq _23349 (nadd_of_num (NUMERAL _0))) (nadd_of_num (NUMERAL _0)) (mk_nadd (nadd_rinv _23349))));
opaque symbol nadd_inv_def : Prf (= nadd_inv (λ _23349 : El nadd, ((@COND nadd) (nadd_eq _23349 (nadd_of_num (NUMERAL _0))) (nadd_of_num (NUMERAL _0)) (mk_nadd (nadd_rinv _23349))))) ≔ REFL nadd_inv;
symbol mk_hreal : El (fun (fun nadd bool) hreal);
symbol dest_hreal : El (fun hreal (fun nadd bool));
symbol hreal_of_num : El (fun num hreal) ≔ (λ m : El num, (mk_hreal (λ u : El nadd, (nadd_eq (nadd_of_num m) u))));
opaque symbol hreal_of_num_def : Prf (= hreal_of_num (λ m : El num, (mk_hreal (λ u : El nadd, (nadd_eq (nadd_of_num m) u))))) ≔ REFL hreal_of_num;
symbol hreal_add : El (fun hreal (fun hreal hreal)) ≔ (λ x : El hreal, (λ y : El hreal, (mk_hreal (λ u : El nadd, (∃ (λ x' : El nadd, (∃ (λ y' : El nadd, (∧ (nadd_eq (nadd_add x' y') u) (∧ (dest_hreal x x') (dest_hreal y y')))))))))));
opaque symbol hreal_add_def : Prf (= hreal_add (λ x : El hreal, (λ y : El hreal, (mk_hreal (λ u : El nadd, (∃ (λ x' : El nadd, (∃ (λ y' : El nadd, (∧ (nadd_eq (nadd_add x' y') u) (∧ (dest_hreal x x') (dest_hreal y y')))))))))))) ≔ REFL hreal_add;
symbol hreal_mul : El (fun hreal (fun hreal hreal)) ≔ (λ x : El hreal, (λ y : El hreal, (mk_hreal (λ u : El nadd, (∃ (λ x' : El nadd, (∃ (λ y' : El nadd, (∧ (nadd_eq (nadd_mul x' y') u) (∧ (dest_hreal x x') (dest_hreal y y')))))))))));
opaque symbol hreal_mul_def : Prf (= hreal_mul (λ x : El hreal, (λ y : El hreal, (mk_hreal (λ u : El nadd, (∃ (λ x' : El nadd, (∃ (λ y' : El nadd, (∧ (nadd_eq (nadd_mul x' y') u) (∧ (dest_hreal x x') (dest_hreal y y')))))))))))) ≔ REFL hreal_mul;
symbol hreal_le : El (fun hreal (fun hreal bool)) ≔ (λ x : El hreal, (λ y : El hreal, ((@ε bool) (λ u : El bool, (∃ (λ x' : El nadd, (∃ (λ y' : El nadd, (∧ (= (nadd_le x' y') u) (∧ (dest_hreal x x') (dest_hreal y y')))))))))));
opaque symbol hreal_le_def : Prf (= hreal_le (λ x : El hreal, (λ y : El hreal, ((@ε bool) (λ u : El bool, (∃ (λ x' : El nadd, (∃ (λ y' : El nadd, (∧ (= (nadd_le x' y') u) (∧ (dest_hreal x x') (dest_hreal y y')))))))))))) ≔ REFL hreal_le;
symbol hreal_inv : El (fun hreal hreal) ≔ (λ x : El hreal, (mk_hreal (λ u : El nadd, (∃ (λ x' : El nadd, (∧ (nadd_eq (nadd_inv x') u) (dest_hreal x x')))))));
opaque symbol hreal_inv_def : Prf (= hreal_inv (λ x : El hreal, (mk_hreal (λ u : El nadd, (∃ (λ x' : El nadd, (∧ (nadd_eq (nadd_inv x') u) (dest_hreal x x')))))))) ≔ REFL hreal_inv;
symbol treal_of_num : El (fun num (prod hreal hreal)) ≔ (λ _23594 : El num, ((@̦‚ hreal hreal) (hreal_of_num _23594) (hreal_of_num (NUMERAL _0))));
opaque symbol treal_of_num_def : Prf (= treal_of_num (λ _23594 : El num, ((@̦‚ hreal hreal) (hreal_of_num _23594) (hreal_of_num (NUMERAL _0))))) ≔ REFL treal_of_num;
symbol treal_neg : El (fun (prod hreal hreal) (prod hreal hreal)) ≔ (λ _23599 : El (prod hreal hreal), ((@̦‚ hreal hreal) ((@SND hreal hreal) _23599) ((@FST hreal hreal) _23599)));
opaque symbol treal_neg_def : Prf (= treal_neg (λ _23599 : El (prod hreal hreal), ((@̦‚ hreal hreal) ((@SND hreal hreal) _23599) ((@FST hreal hreal) _23599)))) ≔ REFL treal_neg;
symbol treal_add : El (fun (prod hreal hreal) (fun (prod hreal hreal) (prod hreal hreal))) ≔ (λ _23608 : El (prod hreal hreal), (λ _23609 : El (prod hreal hreal), ((@̦‚ hreal hreal) (hreal_add ((@FST hreal hreal) _23608) ((@FST hreal hreal) _23609)) (hreal_add ((@SND hreal hreal) _23608) ((@SND hreal hreal) _23609)))));
opaque symbol treal_add_def : Prf (= treal_add (λ _23608 : El (prod hreal hreal), (λ _23609 : El (prod hreal hreal), ((@̦‚ hreal hreal) (hreal_add ((@FST hreal hreal) _23608) ((@FST hreal hreal) _23609)) (hreal_add ((@SND hreal hreal) _23608) ((@SND hreal hreal) _23609)))))) ≔ REFL treal_add;
symbol treal_mul : El (fun (prod hreal hreal) (fun (prod hreal hreal) (prod hreal hreal))) ≔ (λ _23630 : El (prod hreal hreal), (λ _23631 : El (prod hreal hreal), ((@̦‚ hreal hreal) (hreal_add (hreal_mul ((@FST hreal hreal) _23630) ((@FST hreal hreal) _23631)) (hreal_mul ((@SND hreal hreal) _23630) ((@SND hreal hreal) _23631))) (hreal_add (hreal_mul ((@FST hreal hreal) _23630) ((@SND hreal hreal) _23631)) (hreal_mul ((@SND hreal hreal) _23630) ((@FST hreal hreal) _23631))))));
opaque symbol treal_mul_def : Prf (= treal_mul (λ _23630 : El (prod hreal hreal), (λ _23631 : El (prod hreal hreal), ((@̦‚ hreal hreal) (hreal_add (hreal_mul ((@FST hreal hreal) _23630) ((@FST hreal hreal) _23631)) (hreal_mul ((@SND hreal hreal) _23630) ((@SND hreal hreal) _23631))) (hreal_add (hreal_mul ((@FST hreal hreal) _23630) ((@SND hreal hreal) _23631)) (hreal_mul ((@SND hreal hreal) _23630) ((@FST hreal hreal) _23631))))))) ≔ REFL treal_mul;
symbol treal_le : El (fun (prod hreal hreal) (fun (prod hreal hreal) bool)) ≔ (λ _23652 : El (prod hreal hreal), (λ _23653 : El (prod hreal hreal), (hreal_le (hreal_add ((@FST hreal hreal) _23652) ((@SND hreal hreal) _23653)) (hreal_add ((@FST hreal hreal) _23653) ((@SND hreal hreal) _23652)))));
opaque symbol treal_le_def : Prf (= treal_le (λ _23652 : El (prod hreal hreal), (λ _23653 : El (prod hreal hreal), (hreal_le (hreal_add ((@FST hreal hreal) _23652) ((@SND hreal hreal) _23653)) (hreal_add ((@FST hreal hreal) _23653) ((@SND hreal hreal) _23652)))))) ≔ REFL treal_le;
symbol treal_inv : El (fun (prod hreal hreal) (prod hreal hreal)) ≔ (λ _23674 : El (prod hreal hreal), ((@COND (prod hreal hreal)) (= ((@FST hreal hreal) _23674) ((@SND hreal hreal) _23674)) ((@̦‚ hreal hreal) (hreal_of_num (NUMERAL _0)) (hreal_of_num (NUMERAL _0))) ((@COND (prod hreal hreal)) (hreal_le ((@SND hreal hreal) _23674) ((@FST hreal hreal) _23674)) ((@̦‚ hreal hreal) (hreal_inv ((@ε hreal) (λ d : El hreal, (= ((@FST hreal hreal) _23674) (hreal_add ((@SND hreal hreal) _23674) d))))) (hreal_of_num (NUMERAL _0))) ((@̦‚ hreal hreal) (hreal_of_num (NUMERAL _0)) (hreal_inv ((@ε hreal) (λ d : El hreal, (= ((@SND hreal hreal) _23674) (hreal_add ((@FST hreal hreal) _23674) d)))))))));
opaque symbol treal_inv_def : Prf (= treal_inv (λ _23674 : El (prod hreal hreal), ((@COND (prod hreal hreal)) (= ((@FST hreal hreal) _23674) ((@SND hreal hreal) _23674)) ((@̦‚ hreal hreal) (hreal_of_num (NUMERAL _0)) (hreal_of_num (NUMERAL _0))) ((@COND (prod hreal hreal)) (hreal_le ((@SND hreal hreal) _23674) ((@FST hreal hreal) _23674)) ((@̦‚ hreal hreal) (hreal_inv ((@ε hreal) (λ d : El hreal, (= ((@FST hreal hreal) _23674) (hreal_add ((@SND hreal hreal) _23674) d))))) (hreal_of_num (NUMERAL _0))) ((@̦‚ hreal hreal) (hreal_of_num (NUMERAL _0)) (hreal_inv ((@ε hreal) (λ d : El hreal, (= ((@SND hreal hreal) _23674) (hreal_add ((@FST hreal hreal) _23674) d)))))))))) ≔ REFL treal_inv;
symbol treal_eq : El (fun (prod hreal hreal) (fun (prod hreal hreal) bool)) ≔ (λ _23683 : El (prod hreal hreal), (λ _23684 : El (prod hreal hreal), (= (hreal_add ((@FST hreal hreal) _23683) ((@SND hreal hreal) _23684)) (hreal_add ((@FST hreal hreal) _23684) ((@SND hreal hreal) _23683)))));
opaque symbol treal_eq_def : Prf (= treal_eq (λ _23683 : El (prod hreal hreal), (λ _23684 : El (prod hreal hreal), (= (hreal_add ((@FST hreal hreal) _23683) ((@SND hreal hreal) _23684)) (hreal_add ((@FST hreal hreal) _23684) ((@SND hreal hreal) _23683)))))) ≔ REFL treal_eq;
symbol mk_real : El (fun (fun (prod hreal hreal) bool) real);
symbol dest_real : El (fun real (fun (prod hreal hreal) bool));
symbol real_of_num : El (fun num real) ≔ (λ m : El num, (mk_real (λ u : El (prod hreal hreal), (treal_eq (treal_of_num m) u))));
opaque symbol real_of_num_def : Prf (= real_of_num (λ m : El num, (mk_real (λ u : El (prod hreal hreal), (treal_eq (treal_of_num m) u))))) ≔ REFL real_of_num;
symbol real_neg : El (fun real real) ≔ (λ x1 : El real, (mk_real (λ u : El (prod hreal hreal), (∃ (λ x1' : El (prod hreal hreal), (∧ (treal_eq (treal_neg x1') u) (dest_real x1 x1')))))));
opaque symbol real_neg_def : Prf (= real_neg (λ x1 : El real, (mk_real (λ u : El (prod hreal hreal), (∃ (λ x1' : El (prod hreal hreal), (∧ (treal_eq (treal_neg x1') u) (dest_real x1 x1')))))))) ≔ REFL real_neg;
symbol real_add : El (fun real (fun real real)) ≔ (λ x1 : El real, (λ y1 : El real, (mk_real (λ u : El (prod hreal hreal), (∃ (λ x1' : El (prod hreal hreal), (∃ (λ y1' : El (prod hreal hreal), (∧ (treal_eq (treal_add x1' y1') u) (∧ (dest_real x1 x1') (dest_real y1 y1')))))))))));
opaque symbol real_add_def : Prf (= real_add (λ x1 : El real, (λ y1 : El real, (mk_real (λ u : El (prod hreal hreal), (∃ (λ x1' : El (prod hreal hreal), (∃ (λ y1' : El (prod hreal hreal), (∧ (treal_eq (treal_add x1' y1') u) (∧ (dest_real x1 x1') (dest_real y1 y1')))))))))))) ≔ REFL real_add;
symbol real_mul : El (fun real (fun real real)) ≔ (λ x1 : El real, (λ y1 : El real, (mk_real (λ u : El (prod hreal hreal), (∃ (λ x1' : El (prod hreal hreal), (∃ (λ y1' : El (prod hreal hreal), (∧ (treal_eq (treal_mul x1' y1') u) (∧ (dest_real x1 x1') (dest_real y1 y1')))))))))));
opaque symbol real_mul_def : Prf (= real_mul (λ x1 : El real, (λ y1 : El real, (mk_real (λ u : El (prod hreal hreal), (∃ (λ x1' : El (prod hreal hreal), (∃ (λ y1' : El (prod hreal hreal), (∧ (treal_eq (treal_mul x1' y1') u) (∧ (dest_real x1 x1') (dest_real y1 y1')))))))))))) ≔ REFL real_mul;
symbol real_le : El (fun real (fun real bool)) ≔ (λ x1 : El real, (λ y1 : El real, ((@ε bool) (λ u : El bool, (∃ (λ x1' : El (prod hreal hreal), (∃ (λ y1' : El (prod hreal hreal), (∧ (= (treal_le x1' y1') u) (∧ (dest_real x1 x1') (dest_real y1 y1')))))))))));
opaque symbol real_le_def : Prf (= real_le (λ x1 : El real, (λ y1 : El real, ((@ε bool) (λ u : El bool, (∃ (λ x1' : El (prod hreal hreal), (∃ (λ y1' : El (prod hreal hreal), (∧ (= (treal_le x1' y1') u) (∧ (dest_real x1 x1') (dest_real y1 y1')))))))))))) ≔ REFL real_le;
symbol real_inv : El (fun real real) ≔ (λ x : El real, (mk_real (λ u : El (prod hreal hreal), (∃ (λ x' : El (prod hreal hreal), (∧ (treal_eq (treal_inv x') u) (dest_real x x')))))));
opaque symbol real_inv_def : Prf (= real_inv (λ x : El real, (mk_real (λ u : El (prod hreal hreal), (∃ (λ x' : El (prod hreal hreal), (∧ (treal_eq (treal_inv x') u) (dest_real x x')))))))) ≔ REFL real_inv;
symbol real_sub : El (fun real (fun real real)) ≔ (λ _23899 : El real, (λ _23900 : El real, (real_add _23899 (real_neg _23900))));
opaque symbol real_sub_def : Prf (= real_sub (λ _23899 : El real, (λ _23900 : El real, (real_add _23899 (real_neg _23900))))) ≔ REFL real_sub;
symbol real_lt : El (fun real (fun real bool)) ≔ (λ _23911 : El real, (λ _23912 : El real, (¬ (real_le _23912 _23911))));
opaque symbol real_lt_def : Prf (= real_lt (λ _23911 : El real, (λ _23912 : El real, (¬ (real_le _23912 _23911))))) ≔ REFL real_lt;
symbol real_ge : El (fun real (fun real bool)) ≔ (λ _23923 : El real, (λ _23924 : El real, (real_le _23924 _23923)));
opaque symbol real_ge_def : Prf (= real_ge (λ _23923 : El real, (λ _23924 : El real, (real_le _23924 _23923)))) ≔ REFL real_ge;
symbol real_gt : El (fun real (fun real bool)) ≔ (λ _23935 : El real, (λ _23936 : El real, (real_lt _23936 _23935)));
opaque symbol real_gt_def : Prf (= real_gt (λ _23935 : El real, (λ _23936 : El real, (real_lt _23936 _23935)))) ≔ REFL real_gt;
symbol real_abs : El (fun real real) ≔ (λ _23947 : El real, ((@COND real) (real_le (real_of_num (NUMERAL _0)) _23947) _23947 (real_neg _23947)));
opaque symbol real_abs_def : Prf (= real_abs (λ _23947 : El real, ((@COND real) (real_le (real_of_num (NUMERAL _0)) _23947) _23947 (real_neg _23947)))) ≔ REFL real_abs;
symbol real_pow : El (fun real (fun num real)) ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun real (fun num real)))) (λ real_pow' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun real (fun num real))), (∀ (λ _23958 : El (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))), (∧ (∀ (λ x : El real, (= (real_pow' _23958 x (NUMERAL _0)) (real_of_num (NUMERAL (BIT1 _0)))))) (∀ (λ x : El real, (∀ (λ n : El num, (= (real_pow' _23958 x (SUC n)) (real_mul x (real_pow' _23958 x n))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0))))))))))))))));
opaque symbol real_pow_def : Prf (= real_pow ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun real (fun num real)))) (λ real_pow' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun real (fun num real))), (∀ (λ _23958 : El (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))), (∧ (∀ (λ x : El real, (= (real_pow' _23958 x (NUMERAL _0)) (real_of_num (NUMERAL (BIT1 _0)))))) (∀ (λ x : El real, (∀ (λ n : El num, (= (real_pow' _23958 x (SUC n)) (real_mul x (real_pow' _23958 x n))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0))))))))))))))))) ≔ REFL real_pow;
symbol real_div : El (fun real (fun real real)) ≔ (λ _23959 : El real, (λ _23960 : El real, (real_mul _23959 (real_inv _23960))));
opaque symbol real_div_def : Prf (= real_div (λ _23959 : El real, (λ _23960 : El real, (real_mul _23959 (real_inv _23960))))) ≔ REFL real_div;
symbol real_max : El (fun real (fun real real)) ≔ (λ _23971 : El real, (λ _23972 : El real, ((@COND real) (real_le _23971 _23972) _23972 _23971)));
opaque symbol real_max_def : Prf (= real_max (λ _23971 : El real, (λ _23972 : El real, ((@COND real) (real_le _23971 _23972) _23972 _23971)))) ≔ REFL real_max;
symbol real_min : El (fun real (fun real real)) ≔ (λ _23983 : El real, (λ _23984 : El real, ((@COND real) (real_le _23983 _23984) _23983 _23984)));
opaque symbol real_min_def : Prf (= real_min (λ _23983 : El real, (λ _23984 : El real, ((@COND real) (real_le _23983 _23984) _23983 _23984)))) ≔ REFL real_min;
symbol real_sgn : El (fun real real) ≔ (λ _26471 : El real, ((@COND real) (real_lt (real_of_num (NUMERAL _0)) _26471) (real_of_num (NUMERAL (BIT1 _0))) ((@COND real) (real_lt _26471 (real_of_num (NUMERAL _0))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0)))));
opaque symbol real_sgn_def : Prf (= real_sgn (λ _26471 : El real, ((@COND real) (real_lt (real_of_num (NUMERAL _0)) _26471) (real_of_num (NUMERAL (BIT1 _0))) ((@COND real) (real_lt _26471 (real_of_num (NUMERAL _0))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0)))))) ≔ REFL real_sgn;
symbol sqrt : El (fun real real) ≔ (λ _27022 : El real, ((@ε real) (λ y : El real, (∧ (= (real_sgn y) (real_sgn _27022)) (= (real_pow y (NUMERAL (BIT0 (BIT1 _0)))) (real_abs _27022))))));
opaque symbol sqrt_def : Prf (= sqrt (λ _27022 : El real, ((@ε real) (λ y : El real, (∧ (= (real_sgn y) (real_sgn _27022)) (= (real_pow y (NUMERAL (BIT0 (BIT1 _0)))) (real_abs _27022))))))) ≔ REFL sqrt;
symbol DECIMAL : El (fun num (fun num real)) ≔ (λ _27701 : El num, (λ _27702 : El num, (real_div (real_of_num _27701) (real_of_num _27702))));
opaque symbol DECIMAL_def : Prf (= DECIMAL (λ _27701 : El num, (λ _27702 : El num, (real_div (real_of_num _27701) (real_of_num _27702))))) ≔ REFL DECIMAL;
symbol integer : El (fun real bool) ≔ (λ _28588 : El real, (∃ (λ n : El num, (= (real_abs _28588) (real_of_num n)))));
opaque symbol integer_def : Prf (= integer (λ _28588 : El real, (∃ (λ n : El num, (= (real_abs _28588) (real_of_num n)))))) ≔ REFL integer;
symbol int_of_real : El (fun real int);
symbol real_of_int : El (fun int real);
symbol int_le : El (fun int (fun int bool)) ≔ (λ _28614 : El int, (λ _28615 : El int, (real_le (real_of_int _28614) (real_of_int _28615))));
opaque symbol int_le_def : Prf (= int_le (λ _28614 : El int, (λ _28615 : El int, (real_le (real_of_int _28614) (real_of_int _28615))))) ≔ REFL int_le;
symbol int_lt : El (fun int (fun int bool)) ≔ (λ _28626 : El int, (λ _28627 : El int, (real_lt (real_of_int _28626) (real_of_int _28627))));
opaque symbol int_lt_def : Prf (= int_lt (λ _28626 : El int, (λ _28627 : El int, (real_lt (real_of_int _28626) (real_of_int _28627))))) ≔ REFL int_lt;
symbol int_ge : El (fun int (fun int bool)) ≔ (λ _28638 : El int, (λ _28639 : El int, (real_ge (real_of_int _28638) (real_of_int _28639))));
opaque symbol int_ge_def : Prf (= int_ge (λ _28638 : El int, (λ _28639 : El int, (real_ge (real_of_int _28638) (real_of_int _28639))))) ≔ REFL int_ge;
symbol int_gt : El (fun int (fun int bool)) ≔ (λ _28650 : El int, (λ _28651 : El int, (real_gt (real_of_int _28650) (real_of_int _28651))));
opaque symbol int_gt_def : Prf (= int_gt (λ _28650 : El int, (λ _28651 : El int, (real_gt (real_of_int _28650) (real_of_int _28651))))) ≔ REFL int_gt;
symbol int_of_num : El (fun num int) ≔ (λ _28662 : El num, (int_of_real (real_of_num _28662)));
opaque symbol int_of_num_def : Prf (= int_of_num (λ _28662 : El num, (int_of_real (real_of_num _28662)))) ≔ REFL int_of_num;
symbol int_neg : El (fun int int) ≔ (λ _28667 : El int, (int_of_real (real_neg (real_of_int _28667))));
opaque symbol int_neg_def : Prf (= int_neg (λ _28667 : El int, (int_of_real (real_neg (real_of_int _28667))))) ≔ REFL int_neg;
symbol int_add : El (fun int (fun int int)) ≔ (λ _28676 : El int, (λ _28677 : El int, (int_of_real (real_add (real_of_int _28676) (real_of_int _28677)))));
opaque symbol int_add_def : Prf (= int_add (λ _28676 : El int, (λ _28677 : El int, (int_of_real (real_add (real_of_int _28676) (real_of_int _28677)))))) ≔ REFL int_add;
symbol int_sub : El (fun int (fun int int)) ≔ (λ _28708 : El int, (λ _28709 : El int, (int_of_real (real_sub (real_of_int _28708) (real_of_int _28709)))));
opaque symbol int_sub_def : Prf (= int_sub (λ _28708 : El int, (λ _28709 : El int, (int_of_real (real_sub (real_of_int _28708) (real_of_int _28709)))))) ≔ REFL int_sub;
symbol int_mul : El (fun int (fun int int)) ≔ (λ _28720 : El int, (λ _28721 : El int, (int_of_real (real_mul (real_of_int _28720) (real_of_int _28721)))));
opaque symbol int_mul_def : Prf (= int_mul (λ _28720 : El int, (λ _28721 : El int, (int_of_real (real_mul (real_of_int _28720) (real_of_int _28721)))))) ≔ REFL int_mul;
symbol int_abs : El (fun int int) ≔ (λ _28740 : El int, (int_of_real (real_abs (real_of_int _28740))));
opaque symbol int_abs_def : Prf (= int_abs (λ _28740 : El int, (int_of_real (real_abs (real_of_int _28740))))) ≔ REFL int_abs;
symbol int_sgn : El (fun int int) ≔ (λ _28751 : El int, (int_of_real (real_sgn (real_of_int _28751))));
opaque symbol int_sgn_def : Prf (= int_sgn (λ _28751 : El int, (int_of_real (real_sgn (real_of_int _28751))))) ≔ REFL int_sgn;
symbol int_max : El (fun int (fun int int)) ≔ (λ _28811 : El int, (λ _28812 : El int, (int_of_real (real_max (real_of_int _28811) (real_of_int _28812)))));
opaque symbol int_max_def : Prf (= int_max (λ _28811 : El int, (λ _28812 : El int, (int_of_real (real_max (real_of_int _28811) (real_of_int _28812)))))) ≔ REFL int_max;
symbol int_min : El (fun int (fun int int)) ≔ (λ _28829 : El int, (λ _28830 : El int, (int_of_real (real_min (real_of_int _28829) (real_of_int _28830)))));
opaque symbol int_min_def : Prf (= int_min (λ _28829 : El int, (λ _28830 : El int, (int_of_real (real_min (real_of_int _28829) (real_of_int _28830)))))) ≔ REFL int_min;
symbol int_pow : El (fun int (fun num int)) ≔ (λ _28847 : El int, (λ _28848 : El num, (int_of_real (real_pow (real_of_int _28847) _28848))));
opaque symbol int_pow_def : Prf (= int_pow (λ _28847 : El int, (λ _28848 : El num, (int_of_real (real_pow (real_of_int _28847) _28848))))) ≔ REFL int_pow;
symbol div : El (fun int (fun int int)) ≔ ((@ε (fun (prod num (prod num num)) (fun int (fun int int)))) (λ q : El (fun (prod num (prod num num)) (fun int (fun int int))), (∀ (λ _29199 : El (prod num (prod num num)), (∃ (λ r : El (fun int (fun int int)), (∀ (λ m : El int, (∀ (λ n : El int, ((@COND bool) (= n (int_of_num (NUMERAL _0))) (∧ (= (q _29199 m n) (int_of_num (NUMERAL _0))) (= (r m n) m)) (∧ (int_le (int_of_num (NUMERAL _0)) (r m n)) (∧ (int_lt (r m n) (int_abs n)) (= m (int_add (int_mul (q _29199 m n) n) (r m n))))))))))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))))));
opaque symbol div_def : Prf (= div ((@ε (fun (prod num (prod num num)) (fun int (fun int int)))) (λ q : El (fun (prod num (prod num num)) (fun int (fun int int))), (∀ (λ _29199 : El (prod num (prod num num)), (∃ (λ r : El (fun int (fun int int)), (∀ (λ m : El int, (∀ (λ n : El int, ((@COND bool) (= n (int_of_num (NUMERAL _0))) (∧ (= (q _29199 m n) (int_of_num (NUMERAL _0))) (= (r m n) m)) (∧ (int_le (int_of_num (NUMERAL _0)) (r m n)) (∧ (int_lt (r m n) (int_abs n)) (= m (int_add (int_mul (q _29199 m n) n) (r m n))))))))))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))))))) ≔ REFL div;
symbol rem : El (fun int (fun int int)) ≔ ((@ε (fun (prod num (prod num num)) (fun int (fun int int)))) (λ r : El (fun (prod num (prod num num)) (fun int (fun int int))), (∀ (λ _29200 : El (prod num (prod num num)), (∀ (λ m : El int, (∀ (λ n : El int, ((@COND bool) (= n (int_of_num (NUMERAL _0))) (∧ (= (div m n) (int_of_num (NUMERAL _0))) (= (r _29200 m n) m)) (∧ (int_le (int_of_num (NUMERAL _0)) (r _29200 m n)) (∧ (int_lt (r _29200 m n) (int_abs n)) (= m (int_add (int_mul (div m n) n) (r _29200 m n))))))))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))))));
opaque symbol rem_def : Prf (= rem ((@ε (fun (prod num (prod num num)) (fun int (fun int int)))) (λ r : El (fun (prod num (prod num num)) (fun int (fun int int))), (∀ (λ _29200 : El (prod num (prod num num)), (∀ (λ m : El int, (∀ (λ n : El int, ((@COND bool) (= n (int_of_num (NUMERAL _0))) (∧ (= (div m n) (int_of_num (NUMERAL _0))) (= (r _29200 m n) m)) (∧ (int_le (int_of_num (NUMERAL _0)) (r _29200 m n)) (∧ (int_lt (r _29200 m n) (int_abs n)) (= m (int_add (int_mul (div m n) n) (r _29200 m n))))))))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))))))) ≔ REFL rem;
symbol == [A] : El (fun A (fun A (fun (fun A (fun A bool)) bool))) ≔ (λ _29475 : El A, (λ _29476 : El A, (λ _29477 : El (fun A (fun A bool)), (_29477 _29475 _29476))));
opaque symbol ==_def [A] : Prf (= (@== A) (λ _29475 : El A, (λ _29476 : El A, (λ _29477 : El (fun A (fun A bool)), (_29477 _29475 _29476))))) ≔ REFL (@==  A);
symbol real_mod : El (fun real (fun real (fun real bool))) ≔ (λ _29496 : El real, (λ _29497 : El real, (λ _29498 : El real, (∃ (λ q : El real, (∧ (integer q) (= (real_sub _29497 _29498) (real_mul q _29496))))))));
opaque symbol real_mod_def : Prf (= real_mod (λ _29496 : El real, (λ _29497 : El real, (λ _29498 : El real, (∃ (λ q : El real, (∧ (integer q) (= (real_sub _29497 _29498) (real_mul q _29496))))))))) ≔ REFL real_mod;
symbol int_divides : El (fun int (fun int bool)) ≔ (λ _29517 : El int, (λ _29518 : El int, (∃ (λ x : El int, (= _29518 (int_mul _29517 x))))));
opaque symbol int_divides_def : Prf (= int_divides (λ _29517 : El int, (λ _29518 : El int, (∃ (λ x : El int, (= _29518 (int_mul _29517 x))))))) ≔ REFL int_divides;
symbol int_mod : El (fun int (fun int (fun int bool))) ≔ (λ _29537 : El int, (λ _29538 : El int, (λ _29539 : El int, (int_divides _29537 (int_sub _29538 _29539)))));
opaque symbol int_mod_def : Prf (= int_mod (λ _29537 : El int, (λ _29538 : El int, (λ _29539 : El int, (int_divides _29537 (int_sub _29538 _29539)))))) ≔ REFL int_mod;
symbol int_coprime : El (fun (prod int int) bool) ≔ (λ _29564 : El (prod int int), (∃ (λ x : El int, (∃ (λ y : El int, (= (int_add (int_mul ((@FST int int) _29564) x) (int_mul ((@SND int int) _29564) y)) (int_of_num (NUMERAL (BIT1 _0)))))))));
opaque symbol int_coprime_def : Prf (= int_coprime (λ _29564 : El (prod int int), (∃ (λ x : El int, (∃ (λ y : El int, (= (int_add (int_mul ((@FST int int) _29564) x) (int_mul ((@SND int int) _29564) y)) (int_of_num (NUMERAL (BIT1 _0)))))))))) ≔ REFL int_coprime;
symbol int_gcd : El (fun (prod int int) int) ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (prod int int) int))) (λ d : El (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (prod int int) int)), (∀ (λ _30833 : El (prod num (prod num (prod num (prod num (prod num (prod num num)))))), (∀ (λ a : El int, (∀ (λ b : El int, (∧ (int_le (int_of_num (NUMERAL _0)) (d _30833 ((@̦‚ int int) a b))) (∧ (int_divides (d _30833 ((@̦‚ int int) a b)) a) (∧ (int_divides (d _30833 ((@̦‚ int int) a b)) b) (∃ (λ x : El int, (∃ (λ y : El int, (= (d _30833 ((@̦‚ int int) a b)) (int_add (int_mul a x) (int_mul b y))))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))))))))));
opaque symbol int_gcd_def : Prf (= int_gcd ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (prod int int) int))) (λ d : El (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (prod int int) int)), (∀ (λ _30833 : El (prod num (prod num (prod num (prod num (prod num (prod num num)))))), (∀ (λ a : El int, (∀ (λ b : El int, (∧ (int_le (int_of_num (NUMERAL _0)) (d _30833 ((@̦‚ int int) a b))) (∧ (int_divides (d _30833 ((@̦‚ int int) a b)) a) (∧ (int_divides (d _30833 ((@̦‚ int int) a b)) b) (∃ (λ x : El int, (∃ (λ y : El int, (= (d _30833 ((@̦‚ int int) a b)) (int_add (int_mul a x) (int_mul b y))))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))))))))))) ≔ REFL int_gcd;
symbol int_lcm : El (fun (prod int int) int) ≔ (λ _30834 : El (prod int int), ((@COND int) (= (int_mul ((@FST int int) _30834) ((@SND int int) _30834)) (int_of_num (NUMERAL _0))) (int_of_num (NUMERAL _0)) (div (int_abs (int_mul ((@FST int int) _30834) ((@SND int int) _30834))) (int_gcd ((@̦‚ int int) ((@FST int int) _30834) ((@SND int int) _30834))))));
opaque symbol int_lcm_def : Prf (= int_lcm (λ _30834 : El (prod int int), ((@COND int) (= (int_mul ((@FST int int) _30834) ((@SND int int) _30834)) (int_of_num (NUMERAL _0))) (int_of_num (NUMERAL _0)) (div (int_abs (int_mul ((@FST int int) _30834) ((@SND int int) _30834))) (int_gcd ((@̦‚ int int) ((@FST int int) _30834) ((@SND int int) _30834))))))) ≔ REFL int_lcm;
symbol num_of_int : El (fun int num) ≔ (λ _31107 : El int, ((@ε num) (λ n : El num, (= (int_of_num n) _31107))));
opaque symbol num_of_int_def : Prf (= num_of_int (λ _31107 : El int, ((@ε num) (λ n : El num, (= (int_of_num n) _31107))))) ≔ REFL num_of_int;
symbol num_divides : El (fun num (fun num bool)) ≔ (λ _31139 : El num, (λ _31140 : El num, (int_divides (int_of_num _31139) (int_of_num _31140))));
opaque symbol num_divides_def : Prf (= num_divides (λ _31139 : El num, (λ _31140 : El num, (int_divides (int_of_num _31139) (int_of_num _31140))))) ≔ REFL num_divides;
symbol num_mod : El (fun num (fun num (fun num bool))) ≔ (λ _31151 : El num, (λ _31152 : El num, (λ _31153 : El num, (int_mod (int_of_num _31151) (int_of_num _31152) (int_of_num _31153)))));
opaque symbol num_mod_def : Prf (= num_mod (λ _31151 : El num, (λ _31152 : El num, (λ _31153 : El num, (int_mod (int_of_num _31151) (int_of_num _31152) (int_of_num _31153)))))) ≔ REFL num_mod;
symbol num_coprime : El (fun (prod num num) bool) ≔ (λ _31172 : El (prod num num), (int_coprime ((@̦‚ int int) (int_of_num ((@FST num num) _31172)) (int_of_num ((@SND num num) _31172)))));
opaque symbol num_coprime_def : Prf (= num_coprime (λ _31172 : El (prod num num), (int_coprime ((@̦‚ int int) (int_of_num ((@FST num num) _31172)) (int_of_num ((@SND num num) _31172)))))) ≔ REFL num_coprime;
symbol num_gcd : El (fun (prod num num) num) ≔ (λ _31181 : El (prod num num), (num_of_int (int_gcd ((@̦‚ int int) (int_of_num ((@FST num num) _31181)) (int_of_num ((@SND num num) _31181))))));
opaque symbol num_gcd_def : Prf (= num_gcd (λ _31181 : El (prod num num), (num_of_int (int_gcd ((@̦‚ int int) (int_of_num ((@FST num num) _31181)) (int_of_num ((@SND num num) _31181))))))) ≔ REFL num_gcd;
symbol num_lcm : El (fun (prod num num) num) ≔ (λ _31190 : El (prod num num), (num_of_int (int_lcm ((@̦‚ int int) (int_of_num ((@FST num num) _31190)) (int_of_num ((@SND num num) _31190))))));
opaque symbol num_lcm_def : Prf (= num_lcm (λ _31190 : El (prod num num), (num_of_int (int_lcm ((@̦‚ int int) (int_of_num ((@FST num num) _31190)) (int_of_num ((@SND num num) _31190))))))) ≔ REFL num_lcm;
symbol prime : El (fun num bool) ≔ (λ _32468 : El num, (∧ (¬ (= _32468 (NUMERAL (BIT1 _0)))) (∀ (λ x : El num, (⇒ (num_divides x _32468) (∨ (= x (NUMERAL (BIT1 _0))) (= x _32468)))))));
opaque symbol prime_def : Prf (= prime (λ _32468 : El num, (∧ (¬ (= _32468 (NUMERAL (BIT1 _0)))) (∀ (λ x : El num, (⇒ (num_divides x _32468) (∨ (= x (NUMERAL (BIT1 _0))) (= x _32468)))))))) ≔ REFL prime;
symbol real_zpow : El (fun real (fun int real)) ≔ (λ _32626 : El real, (λ _32627 : El int, ((@COND real) (int_le (int_of_num (NUMERAL _0)) _32627) (real_pow _32626 (num_of_int _32627)) (real_inv (real_pow _32626 (num_of_int (int_neg _32627)))))));
opaque symbol real_zpow_def : Prf (= real_zpow (λ _32626 : El real, (λ _32627 : El int, ((@COND real) (int_le (int_of_num (NUMERAL _0)) _32627) (real_pow _32626 (num_of_int _32627)) (real_inv (real_pow _32626 (num_of_int (int_neg _32627)))))))) ≔ REFL real_zpow;
symbol IN [A] : El (fun A (fun (fun A bool) bool)) ≔ (λ _32683 : El A, (λ _32684 : El (fun A bool), (_32684 _32683)));
opaque symbol IN_def [A] : Prf (= (@IN A) (λ _32683 : El A, (λ _32684 : El (fun A bool), (_32684 _32683)))) ≔ REFL (@IN  A);
symbol GSPEC [A] : El (fun (fun A bool) (fun A bool)) ≔ (λ _32695 : El (fun A bool), _32695);
opaque symbol GSPEC_def [A] : Prf (= (@GSPEC A) (λ _32695 : El (fun A bool), _32695)) ≔ REFL (@GSPEC  A);
symbol SETSPEC [_83031] : El (fun _83031 (fun bool (fun _83031 bool))) ≔ (λ _32700 : El _83031, (λ _32701 : El bool, (λ _32702 : El _83031, (∧ _32701 (= _32700 _32702)))));
opaque symbol SETSPEC_def [_83031] : Prf (= (@SETSPEC _83031) (λ _32700 : El _83031, (λ _32701 : El bool, (λ _32702 : El _83031, (∧ _32701 (= _32700 _32702)))))) ≔ REFL (@SETSPEC  _83031);
symbol EMPTY [A] : El (fun A bool) ≔ (λ x : El A, F);
opaque symbol EMPTY_def [A] : Prf (= (@EMPTY A) (λ x : El A, F)) ≔ REFL (@EMPTY  A);
symbol INSERT [A] : El (fun A (fun (fun A bool) (fun A bool))) ≔ (λ _32739 : El A, (λ _32740 : El (fun A bool), (λ y : El A, (∨ ((@IN A) y _32740) (= y _32739)))));
opaque symbol INSERT_def [A] : Prf (= (@INSERT A) (λ _32739 : El A, (λ _32740 : El (fun A bool), (λ y : El A, (∨ ((@IN A) y _32740) (= y _32739)))))) ≔ REFL (@INSERT  A);
symbol UNIV [A] : El (fun A bool) ≔ (λ x : El A, T);
opaque symbol UNIV_def [A] : Prf (= (@UNIV A) (λ x : El A, T)) ≔ REFL (@UNIV  A);
symbol UNION [A] : El (fun (fun A bool) (fun (fun A bool) (fun A bool))) ≔ (λ _32751 : El (fun A bool), (λ _32752 : El (fun A bool), ((@GSPEC A) (λ GEN_PVAR_0 : El A, (∃ (λ x : El A, ((@SETSPEC A) GEN_PVAR_0 (∨ ((@IN A) x _32751) ((@IN A) x _32752)) x)))))));
opaque symbol UNION_def [A] : Prf (= (@UNION A) (λ _32751 : El (fun A bool), (λ _32752 : El (fun A bool), ((@GSPEC A) (λ GEN_PVAR_0 : El A, (∃ (λ x : El A, ((@SETSPEC A) GEN_PVAR_0 (∨ ((@IN A) x _32751) ((@IN A) x _32752)) x)))))))) ≔ REFL (@UNION  A);
symbol UNIONS [A] : El (fun (fun (fun A bool) bool) (fun A bool)) ≔ (λ _32763 : El (fun (fun A bool) bool), ((@GSPEC A) (λ GEN_PVAR_1 : El A, (∃ (λ x : El A, ((@SETSPEC A) GEN_PVAR_1 (∃ (λ u : El (fun A bool), (∧ ((@IN (fun A bool)) u _32763) ((@IN A) x u)))) x))))));
opaque symbol UNIONS_def [A] : Prf (= (@UNIONS A) (λ _32763 : El (fun (fun A bool) bool), ((@GSPEC A) (λ GEN_PVAR_1 : El A, (∃ (λ x : El A, ((@SETSPEC A) GEN_PVAR_1 (∃ (λ u : El (fun A bool), (∧ ((@IN (fun A bool)) u _32763) ((@IN A) x u)))) x))))))) ≔ REFL (@UNIONS  A);
symbol INTER [A] : El (fun (fun A bool) (fun (fun A bool) (fun A bool))) ≔ (λ _32768 : El (fun A bool), (λ _32769 : El (fun A bool), ((@GSPEC A) (λ GEN_PVAR_2 : El A, (∃ (λ x : El A, ((@SETSPEC A) GEN_PVAR_2 (∧ ((@IN A) x _32768) ((@IN A) x _32769)) x)))))));
opaque symbol INTER_def [A] : Prf (= (@INTER A) (λ _32768 : El (fun A bool), (λ _32769 : El (fun A bool), ((@GSPEC A) (λ GEN_PVAR_2 : El A, (∃ (λ x : El A, ((@SETSPEC A) GEN_PVAR_2 (∧ ((@IN A) x _32768) ((@IN A) x _32769)) x)))))))) ≔ REFL (@INTER  A);
symbol INTERS [A] : El (fun (fun (fun A bool) bool) (fun A bool)) ≔ (λ _32780 : El (fun (fun A bool) bool), ((@GSPEC A) (λ GEN_PVAR_3 : El A, (∃ (λ x : El A, ((@SETSPEC A) GEN_PVAR_3 (∀ (λ u : El (fun A bool), (⇒ ((@IN (fun A bool)) u _32780) ((@IN A) x u)))) x))))));
opaque symbol INTERS_def [A] : Prf (= (@INTERS A) (λ _32780 : El (fun (fun A bool) bool), ((@GSPEC A) (λ GEN_PVAR_3 : El A, (∃ (λ x : El A, ((@SETSPEC A) GEN_PVAR_3 (∀ (λ u : El (fun A bool), (⇒ ((@IN (fun A bool)) u _32780) ((@IN A) x u)))) x))))))) ≔ REFL (@INTERS  A);
symbol DIFF [A] : El (fun (fun A bool) (fun (fun A bool) (fun A bool))) ≔ (λ _32785 : El (fun A bool), (λ _32786 : El (fun A bool), ((@GSPEC A) (λ GEN_PVAR_4 : El A, (∃ (λ x : El A, ((@SETSPEC A) GEN_PVAR_4 (∧ ((@IN A) x _32785) (¬ ((@IN A) x _32786))) x)))))));
opaque symbol DIFF_def [A] : Prf (= (@DIFF A) (λ _32785 : El (fun A bool), (λ _32786 : El (fun A bool), ((@GSPEC A) (λ GEN_PVAR_4 : El A, (∃ (λ x : El A, ((@SETSPEC A) GEN_PVAR_4 (∧ ((@IN A) x _32785) (¬ ((@IN A) x _32786))) x)))))))) ≔ REFL (@DIFF  A);
symbol DELETE [A] : El (fun (fun A bool) (fun A (fun A bool))) ≔ (λ _32797 : El (fun A bool), (λ _32798 : El A, ((@GSPEC A) (λ GEN_PVAR_6 : El A, (∃ (λ y : El A, ((@SETSPEC A) GEN_PVAR_6 (∧ ((@IN A) y _32797) (¬ (= y _32798))) y)))))));
opaque symbol DELETE_def [A] : Prf (= (@DELETE A) (λ _32797 : El (fun A bool), (λ _32798 : El A, ((@GSPEC A) (λ GEN_PVAR_6 : El A, (∃ (λ y : El A, ((@SETSPEC A) GEN_PVAR_6 (∧ ((@IN A) y _32797) (¬ (= y _32798))) y)))))))) ≔ REFL (@DELETE  A);
symbol SUBSET [A] : El (fun (fun A bool) (fun (fun A bool) bool)) ≔ (λ _32809 : El (fun A bool), (λ _32810 : El (fun A bool), (∀ (λ x : El A, (⇒ ((@IN A) x _32809) ((@IN A) x _32810))))));
opaque symbol SUBSET_def [A] : Prf (= (@SUBSET A) (λ _32809 : El (fun A bool), (λ _32810 : El (fun A bool), (∀ (λ x : El A, (⇒ ((@IN A) x _32809) ((@IN A) x _32810))))))) ≔ REFL (@SUBSET  A);
symbol PSUBSET [A] : El (fun (fun A bool) (fun (fun A bool) bool)) ≔ (λ _32821 : El (fun A bool), (λ _32822 : El (fun A bool), (∧ ((@SUBSET A) _32821 _32822) (¬ (= _32821 _32822)))));
opaque symbol PSUBSET_def [A] : Prf (= (@PSUBSET A) (λ _32821 : El (fun A bool), (λ _32822 : El (fun A bool), (∧ ((@SUBSET A) _32821 _32822) (¬ (= _32821 _32822)))))) ≔ REFL (@PSUBSET  A);
symbol DISJOINT [A] : El (fun (fun A bool) (fun (fun A bool) bool)) ≔ (λ _32833 : El (fun A bool), (λ _32834 : El (fun A bool), (= ((@INTER A) _32833 _32834) (@EMPTY A))));
opaque symbol DISJOINT_def [A] : Prf (= (@DISJOINT A) (λ _32833 : El (fun A bool), (λ _32834 : El (fun A bool), (= ((@INTER A) _32833 _32834) (@EMPTY A))))) ≔ REFL (@DISJOINT  A);
symbol SING [A] : El (fun (fun A bool) bool) ≔ (λ _32845 : El (fun A bool), (∃ (λ x : El A, (= _32845 ((@INSERT A) x (@EMPTY A))))));
opaque symbol SING_def [A] : Prf (= (@SING A) (λ _32845 : El (fun A bool), (∃ (λ x : El A, (= _32845 ((@INSERT A) x (@EMPTY A))))))) ≔ REFL (@SING  A);
symbol FINITE [A] : El (fun (fun A bool) bool) ≔ (λ a : El (fun A bool), (∀ (λ FINITE' : El (fun (fun A bool) bool), (⇒ (∀ (λ a' : El (fun A bool), (⇒ (∨ (= a' (@EMPTY A)) (∃ (λ x : El A, (∃ (λ s : El (fun A bool), (∧ (= a' ((@INSERT A) x s)) (FINITE' s))))))) (FINITE' a')))) (FINITE' a)))));
opaque symbol FINITE_def [A] : Prf (= (@FINITE A) (λ a : El (fun A bool), (∀ (λ FINITE' : El (fun (fun A bool) bool), (⇒ (∀ (λ a' : El (fun A bool), (⇒ (∨ (= a' (@EMPTY A)) (∃ (λ x : El A, (∃ (λ s : El (fun A bool), (∧ (= a' ((@INSERT A) x s)) (FINITE' s))))))) (FINITE' a')))) (FINITE' a)))))) ≔ REFL (@FINITE  A);
symbol INFINITE [A] : El (fun (fun A bool) bool) ≔ (λ _32854 : El (fun A bool), (¬ ((@FINITE A) _32854)));
opaque symbol INFINITE_def [A] : Prf (= (@INFINITE A) (λ _32854 : El (fun A bool), (¬ ((@FINITE A) _32854)))) ≔ REFL (@INFINITE  A);
symbol IMAGE [A B] : El (fun (fun A B) (fun (fun A bool) (fun B bool))) ≔ (λ _32859 : El (fun A B), (λ _32860 : El (fun A bool), ((@GSPEC B) (λ GEN_PVAR_7 : El B, (∃ (λ y : El B, ((@SETSPEC B) GEN_PVAR_7 (∃ (λ x : El A, (∧ ((@IN A) x _32860) (= y (_32859 x))))) y)))))));
opaque symbol IMAGE_def [A B] : Prf (= (@IMAGE A B) (λ _32859 : El (fun A B), (λ _32860 : El (fun A bool), ((@GSPEC B) (λ GEN_PVAR_7 : El B, (∃ (λ y : El B, ((@SETSPEC B) GEN_PVAR_7 (∃ (λ x : El A, (∧ ((@IN A) x _32860) (= y (_32859 x))))) y)))))))) ≔ REFL (@IMAGE  A B);
symbol INJ [A B] : El (fun (fun A B) (fun (fun A bool) (fun (fun B bool) bool))) ≔ (λ _32871 : El (fun A B), (λ _32872 : El (fun A bool), (λ _32873 : El (fun B bool), (∧ (∀ (λ x : El A, (⇒ ((@IN A) x _32872) ((@IN B) (_32871 x) _32873)))) (∀ (λ x : El A, (∀ (λ y : El A, (⇒ (∧ ((@IN A) x _32872) (∧ ((@IN A) y _32872) (= (_32871 x) (_32871 y)))) (= x y))))))))));
opaque symbol INJ_def [A B] : Prf (= (@INJ A B) (λ _32871 : El (fun A B), (λ _32872 : El (fun A bool), (λ _32873 : El (fun B bool), (∧ (∀ (λ x : El A, (⇒ ((@IN A) x _32872) ((@IN B) (_32871 x) _32873)))) (∀ (λ x : El A, (∀ (λ y : El A, (⇒ (∧ ((@IN A) x _32872) (∧ ((@IN A) y _32872) (= (_32871 x) (_32871 y)))) (= x y))))))))))) ≔ REFL (@INJ  A B);
symbol SURJ [A B] : El (fun (fun A B) (fun (fun A bool) (fun (fun B bool) bool))) ≔ (λ _32892 : El (fun A B), (λ _32893 : El (fun A bool), (λ _32894 : El (fun B bool), (∧ (∀ (λ x : El A, (⇒ ((@IN A) x _32893) ((@IN B) (_32892 x) _32894)))) (∀ (λ x : El B, (⇒ ((@IN B) x _32894) (∃ (λ y : El A, (∧ ((@IN A) y _32893) (= (_32892 y) x)))))))))));
opaque symbol SURJ_def [A B] : Prf (= (@SURJ A B) (λ _32892 : El (fun A B), (λ _32893 : El (fun A bool), (λ _32894 : El (fun B bool), (∧ (∀ (λ x : El A, (⇒ ((@IN A) x _32893) ((@IN B) (_32892 x) _32894)))) (∀ (λ x : El B, (⇒ ((@IN B) x _32894) (∃ (λ y : El A, (∧ ((@IN A) y _32893) (= (_32892 y) x)))))))))))) ≔ REFL (@SURJ  A B);
symbol BIJ [A B] : El (fun (fun A B) (fun (fun A bool) (fun (fun B bool) bool))) ≔ (λ _32913 : El (fun A B), (λ _32914 : El (fun A bool), (λ _32915 : El (fun B bool), (∧ ((@INJ A B) _32913 _32914 _32915) ((@SURJ A B) _32913 _32914 _32915)))));
opaque symbol BIJ_def [A B] : Prf (= (@BIJ A B) (λ _32913 : El (fun A B), (λ _32914 : El (fun A bool), (λ _32915 : El (fun B bool), (∧ ((@INJ A B) _32913 _32914 _32915) ((@SURJ A B) _32913 _32914 _32915)))))) ≔ REFL (@BIJ  A B);
symbol CHOICE [A] : El (fun (fun A bool) A) ≔ (λ _32934 : El (fun A bool), ((@ε A) (λ x : El A, ((@IN A) x _32934))));
opaque symbol CHOICE_def [A] : Prf (= (@CHOICE A) (λ _32934 : El (fun A bool), ((@ε A) (λ x : El A, ((@IN A) x _32934))))) ≔ REFL (@CHOICE  A);
symbol REST [A] : El (fun (fun A bool) (fun A bool)) ≔ (λ _32939 : El (fun A bool), ((@DELETE A) _32939 ((@CHOICE A) _32939)));
opaque symbol REST_def [A] : Prf (= (@REST A) (λ _32939 : El (fun A bool), ((@DELETE A) _32939 ((@CHOICE A) _32939)))) ≔ REFL (@REST  A);
symbol FINREC [A B] : El (fun (fun A (fun B B)) (fun B (fun (fun A bool) (fun B (fun num bool))))) ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun (fun A (fun B B)) (fun B (fun (fun A bool) (fun B (fun num bool))))))) (λ FINREC' : El (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun (fun A (fun B B)) (fun B (fun (fun A bool) (fun B (fun num bool)))))), (∀ (λ _43486 : El (prod num (prod num (prod num (prod num (prod num num))))), (∧ (∀ (λ f : El (fun A (fun B B)), (∀ (λ s : El (fun A bool), (∀ (λ a : El B, (∀ (λ b : El B, (= (FINREC' _43486 f b s a (NUMERAL _0)) (∧ (= s (@EMPTY A)) (= a b))))))))))) (∀ (λ b : El B, (∀ (λ s : El (fun A bool), (∀ (λ n : El num, (∀ (λ a : El B, (∀ (λ f : El (fun A (fun B B)), (= (FINREC' _43486 f b s a (SUC n)) (∃ (λ x : El A, (∃ (λ c : El B, (∧ ((@IN A) x s) (∧ (FINREC' _43486 f b ((@DELETE A) s x) c n) (= a (f x c))))))))))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0))))))))))))));
opaque symbol FINREC_def [A B] : Prf (= (@FINREC A B) ((@ε (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun (fun A (fun B B)) (fun B (fun (fun A bool) (fun B (fun num bool))))))) (λ FINREC' : El (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun (fun A (fun B B)) (fun B (fun (fun A bool) (fun B (fun num bool)))))), (∀ (λ _43486 : El (prod num (prod num (prod num (prod num (prod num num))))), (∧ (∀ (λ f : El (fun A (fun B B)), (∀ (λ s : El (fun A bool), (∀ (λ a : El B, (∀ (λ b : El B, (= (FINREC' _43486 f b s a (NUMERAL _0)) (∧ (= s (@EMPTY A)) (= a b))))))))))) (∀ (λ b : El B, (∀ (λ s : El (fun A bool), (∀ (λ n : El num, (∀ (λ a : El B, (∀ (λ f : El (fun A (fun B B)), (= (FINREC' _43486 f b s a (SUC n)) (∃ (λ x : El A, (∃ (λ c : El B, (∧ ((@IN A) x s) (∧ (FINREC' _43486 f b ((@DELETE A) s x) c n) (= a (f x c))))))))))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0))))))))))))))) ≔ REFL (@FINREC  A B);
symbol ITSET [_99240 _99241] : El (fun (fun _99241 (fun _99240 _99240)) (fun (fun _99241 bool) (fun _99240 _99240))) ≔ (λ _44336 : El (fun _99241 (fun _99240 _99240)), (λ _44337 : El (fun _99241 bool), (λ _44338 : El _99240, ((@ε (fun (fun _99241 bool) _99240)) (λ g : El (fun (fun _99241 bool) _99240), (∧ (= (g (@EMPTY _99241)) _44338) (∀ (λ x : El _99241, (∀ (λ s : El (fun _99241 bool), (⇒ ((@FINITE _99241) s) (= (g ((@INSERT _99241) x s)) ((@COND _99240) ((@IN _99241) x s) (g s) (_44336 x (g s))))))))))) _44337))));
opaque symbol ITSET_def [_99240 _99241] : Prf (= (@ITSET _99240 _99241) (λ _44336 : El (fun _99241 (fun _99240 _99240)), (λ _44337 : El (fun _99241 bool), (λ _44338 : El _99240, ((@ε (fun (fun _99241 bool) _99240)) (λ g : El (fun (fun _99241 bool) _99240), (∧ (= (g (@EMPTY _99241)) _44338) (∀ (λ x : El _99241, (∀ (λ s : El (fun _99241 bool), (⇒ ((@FINITE _99241) s) (= (g ((@INSERT _99241) x s)) ((@COND _99240) ((@IN _99241) x s) (g s) (_44336 x (g s))))))))))) _44337))))) ≔ REFL (@ITSET  _99240 _99241);
symbol CARD [_99571] : El (fun (fun _99571 bool) num) ≔ (λ _44539 : El (fun _99571 bool), ((@ITSET num _99571) (λ x : El _99571, (λ n : El num, (SUC n))) _44539 (NUMERAL _0)));
opaque symbol CARD_def [_99571] : Prf (= (@CARD _99571) (λ _44539 : El (fun _99571 bool), ((@ITSET num _99571) (λ x : El _99571, (λ n : El num, (SUC n))) _44539 (NUMERAL _0)))) ≔ REFL (@CARD  _99571);
symbol HAS_SIZE [_100044] : El (fun (fun _100044 bool) (fun num bool)) ≔ (λ _44754 : El (fun _100044 bool), (λ _44755 : El num, (∧ ((@FINITE _100044) _44754) (= ((@CARD _100044) _44754) _44755))));
opaque symbol HAS_SIZE_def [_100044] : Prf (= (@HAS_SIZE _100044) (λ _44754 : El (fun _100044 bool), (λ _44755 : El num, (∧ ((@FINITE _100044) _44754) (= ((@CARD _100044) _44754) _44755))))) ≔ REFL (@HAS_SIZE  _100044);
symbol CROSS [_103681 _103682] : El (fun (fun _103682 bool) (fun (fun _103681 bool) (fun (prod _103682 _103681) bool))) ≔ (λ _49274 : El (fun _103682 bool), (λ _49275 : El (fun _103681 bool), ((@GSPEC (prod _103682 _103681)) (λ GEN_PVAR_130 : El (prod _103682 _103681), (∃ (λ x : El _103682, (∃ (λ y : El _103681, ((@SETSPEC (prod _103682 _103681)) GEN_PVAR_130 (∧ ((@IN _103682) x _49274) ((@IN _103681) y _49275)) ((@̦‚ _103682 _103681) x y))))))))));
opaque symbol CROSS_def [_103681 _103682] : Prf (= (@CROSS _103681 _103682) (λ _49274 : El (fun _103682 bool), (λ _49275 : El (fun _103681 bool), ((@GSPEC (prod _103682 _103681)) (λ GEN_PVAR_130 : El (prod _103682 _103681), (∃ (λ x : El _103682, (∃ (λ y : El _103681, ((@SETSPEC (prod _103682 _103681)) GEN_PVAR_130 (∧ ((@IN _103682) x _49274) ((@IN _103681) y _49275)) ((@̦‚ _103682 _103681) x y))))))))))) ≔ REFL (@CROSS  _103681 _103682);
symbol ARB [A] : El A ≔ ((@ε A) (λ x : El A, F));
opaque symbol ARB_def [A] : Prf (= (@ARB A) ((@ε A) (λ x : El A, F))) ≔ REFL (@ARB  A);
symbol EXTENSIONAL [A B] : El (fun (fun A bool) (fun (fun A B) bool)) ≔ (λ _50046 : El (fun A bool), ((@GSPEC (fun A B)) (λ GEN_PVAR_139 : El (fun A B), (∃ (λ f : El (fun A B), ((@SETSPEC (fun A B)) GEN_PVAR_139 (∀ (λ x : El A, (⇒ (¬ ((@IN A) x _50046)) (= (f x) (@ARB B))))) f))))));
opaque symbol EXTENSIONAL_def [A B] : Prf (= (@EXTENSIONAL A B) (λ _50046 : El (fun A bool), ((@GSPEC (fun A B)) (λ GEN_PVAR_139 : El (fun A B), (∃ (λ f : El (fun A B), ((@SETSPEC (fun A B)) GEN_PVAR_139 (∀ (λ x : El A, (⇒ (¬ ((@IN A) x _50046)) (= (f x) (@ARB B))))) f))))))) ≔ REFL (@EXTENSIONAL  A B);
symbol RESTRICTION [A B] : El (fun (fun A bool) (fun (fun A B) (fun A B))) ≔ (λ _50098 : El (fun A bool), (λ _50099 : El (fun A B), (λ _50100 : El A, ((@COND B) ((@IN A) _50100 _50098) (_50099 _50100) (@ARB B)))));
opaque symbol RESTRICTION_def [A B] : Prf (= (@RESTRICTION A B) (λ _50098 : El (fun A bool), (λ _50099 : El (fun A B), (λ _50100 : El A, ((@COND B) ((@IN A) _50100 _50098) (_50099 _50100) (@ARB B)))))) ≔ REFL (@RESTRICTION  A B);
symbol cartesian_product [A K] : El (fun (fun K bool) (fun (fun K (fun A bool)) (fun (fun K A) bool))) ≔ (λ _50293 : El (fun K bool), (λ _50294 : El (fun K (fun A bool)), ((@GSPEC (fun K A)) (λ GEN_PVAR_140 : El (fun K A), (∃ (λ f : El (fun K A), ((@SETSPEC (fun K A)) GEN_PVAR_140 (∧ ((@EXTENSIONAL K A) _50293 f) (∀ (λ i : El K, (⇒ ((@IN K) i _50293) ((@IN A) (f i) (_50294 i)))))) f)))))));
opaque symbol cartesian_product_def [A K] : Prf (= (@cartesian_product A K) (λ _50293 : El (fun K bool), (λ _50294 : El (fun K (fun A bool)), ((@GSPEC (fun K A)) (λ GEN_PVAR_140 : El (fun K A), (∃ (λ f : El (fun K A), ((@SETSPEC (fun K A)) GEN_PVAR_140 (∧ ((@EXTENSIONAL K A) _50293 f) (∀ (λ i : El K, (⇒ ((@IN K) i _50293) ((@IN A) (f i) (_50294 i)))))) f)))))))) ≔ REFL (@cartesian_product  A K);
symbol product_map [A B K] : El (fun (fun K bool) (fun (fun K (fun A B)) (fun (fun K A) (fun K B)))) ≔ (λ _51526 : El (fun K bool), (λ _51527 : El (fun K (fun A B)), (λ x : El (fun K A), ((@RESTRICTION K B) _51526 (λ i : El K, (_51527 i (x i)))))));
opaque symbol product_map_def [A B K] : Prf (= (@product_map A B K) (λ _51526 : El (fun K bool), (λ _51527 : El (fun K (fun A B)), (λ x : El (fun K A), ((@RESTRICTION K B) _51526 (λ i : El K, (_51527 i (x i)))))))) ≔ REFL (@product_map  A B K);
symbol disjoint_union [A K] : El (fun (fun K bool) (fun (fun K (fun A bool)) (fun (prod K A) bool))) ≔ (λ _51662 : El (fun K bool), (λ _51663 : El (fun K (fun A bool)), ((@GSPEC (prod K A)) (λ GEN_PVAR_143 : El (prod K A), (∃ (λ i : El K, (∃ (λ x : El A, ((@SETSPEC (prod K A)) GEN_PVAR_143 (∧ ((@IN K) i _51662) ((@IN A) x (_51663 i))) ((@̦‚ K A) i x))))))))));
opaque symbol disjoint_union_def [A K] : Prf (= (@disjoint_union A K) (λ _51662 : El (fun K bool), (λ _51663 : El (fun K (fun A bool)), ((@GSPEC (prod K A)) (λ GEN_PVAR_143 : El (prod K A), (∃ (λ i : El K, (∃ (λ x : El A, ((@SETSPEC (prod K A)) GEN_PVAR_143 (∧ ((@IN K) i _51662) ((@IN A) x (_51663 i))) ((@̦‚ K A) i x))))))))))) ≔ REFL (@disjoint_union  A K);
symbol set_of_list [A] : El (fun (list A) (fun A bool)) ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))))) (fun (list A) (fun A bool)))) (λ set_of_list' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))))) (fun (list A) (fun A bool))), (∀ (λ _59117 : El (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))))), (∧ (= (set_of_list' _59117 (@NIL A)) (@EMPTY A)) (∀ (λ h : El A, (∀ (λ t : El (list A), (= (set_of_list' _59117 ((@CONS A) h t)) ((@INSERT A) h (set_of_list' _59117 t))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))))))))))))));
opaque symbol set_of_list_def [A] : Prf (= (@set_of_list A) ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))))) (fun (list A) (fun A bool)))) (λ set_of_list' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))))) (fun (list A) (fun A bool))), (∀ (λ _59117 : El (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))))), (∧ (= (set_of_list' _59117 (@NIL A)) (@EMPTY A)) (∀ (λ h : El A, (∀ (λ t : El (list A), (= (set_of_list' _59117 ((@CONS A) h t)) ((@INSERT A) h (set_of_list' _59117 t))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))))))))))))))) ≔ REFL (@set_of_list  A);
symbol list_of_set [_110256] : El (fun (fun _110256 bool) (list _110256)) ≔ (λ _59118 : El (fun _110256 bool), ((@ε (list _110256)) (λ l : El (list _110256), (∧ (= ((@set_of_list _110256) l) _59118) (= ((@LENGTH _110256) l) ((@CARD _110256) _59118))))));
opaque symbol list_of_set_def [_110256] : Prf (= (@list_of_set _110256) (λ _59118 : El (fun _110256 bool), ((@ε (list _110256)) (λ l : El (list _110256), (∧ (= ((@set_of_list _110256) l) _59118) (= ((@LENGTH _110256) l) ((@CARD _110256) _59118))))))) ≔ REFL (@list_of_set  _110256);
symbol pairwise [_110510] : El (fun (fun _110510 (fun _110510 bool)) (fun (fun _110510 bool) bool)) ≔ (λ _59319 : El (fun _110510 (fun _110510 bool)), (λ _59320 : El (fun _110510 bool), (∀ (λ x : El _110510, (∀ (λ y : El _110510, (⇒ (∧ ((@IN _110510) x _59320) (∧ ((@IN _110510) y _59320) (¬ (= x y)))) (_59319 x y))))))));
opaque symbol pairwise_def [_110510] : Prf (= (@pairwise _110510) (λ _59319 : El (fun _110510 (fun _110510 bool)), (λ _59320 : El (fun _110510 bool), (∀ (λ x : El _110510, (∀ (λ y : El _110510, (⇒ (∧ ((@IN _110510) x _59320) (∧ ((@IN _110510) y _59320) (¬ (= x y)))) (_59319 x y))))))))) ≔ REFL (@pairwise  _110510);
symbol UNION_OF [A] : El (fun (fun (fun (fun A bool) bool) bool) (fun (fun (fun A bool) bool) (fun (fun A bool) bool))) ≔ (λ _60032 : El (fun (fun (fun A bool) bool) bool), (λ _60033 : El (fun (fun A bool) bool), (λ s : El (fun A bool), (∃ (λ u : El (fun (fun A bool) bool), (∧ (_60032 u) (∧ (∀ (λ c : El (fun A bool), (⇒ ((@IN (fun A bool)) c u) (_60033 c)))) (= ((@UNIONS A) u) s))))))));
opaque symbol UNION_OF_def [A] : Prf (= (@UNION_OF A) (λ _60032 : El (fun (fun (fun A bool) bool) bool), (λ _60033 : El (fun (fun A bool) bool), (λ s : El (fun A bool), (∃ (λ u : El (fun (fun A bool) bool), (∧ (_60032 u) (∧ (∀ (λ c : El (fun A bool), (⇒ ((@IN (fun A bool)) c u) (_60033 c)))) (= ((@UNIONS A) u) s))))))))) ≔ REFL (@UNION_OF  A);
symbol INTERSECTION_OF [A] : El (fun (fun (fun (fun A bool) bool) bool) (fun (fun (fun A bool) bool) (fun (fun A bool) bool))) ≔ (λ _60044 : El (fun (fun (fun A bool) bool) bool), (λ _60045 : El (fun (fun A bool) bool), (λ s : El (fun A bool), (∃ (λ u : El (fun (fun A bool) bool), (∧ (_60044 u) (∧ (∀ (λ c : El (fun A bool), (⇒ ((@IN (fun A bool)) c u) (_60045 c)))) (= ((@INTERS A) u) s))))))));
opaque symbol INTERSECTION_OF_def [A] : Prf (= (@INTERSECTION_OF A) (λ _60044 : El (fun (fun (fun A bool) bool) bool), (λ _60045 : El (fun (fun A bool) bool), (λ s : El (fun A bool), (∃ (λ u : El (fun (fun A bool) bool), (∧ (_60044 u) (∧ (∀ (λ c : El (fun A bool), (⇒ ((@IN (fun A bool)) c u) (_60045 c)))) (= ((@INTERS A) u) s))))))))) ≔ REFL (@INTERSECTION_OF  A);
symbol ARBITRARY [A] : El (fun (fun (fun A bool) bool) bool) ≔ (λ _60180 : El (fun (fun A bool) bool), T);
opaque symbol ARBITRARY_def [A] : Prf (= (@ARBITRARY A) (λ _60180 : El (fun (fun A bool) bool), T)) ≔ REFL (@ARBITRARY  A);
symbol <=_c [_114929 _114934] : El (fun (fun _114934 bool) (fun (fun _114929 bool) bool)) ≔ (λ _66841 : El (fun _114934 bool), (λ _66842 : El (fun _114929 bool), (∃ (λ f : El (fun _114934 _114929), (∧ (∀ (λ x : El _114934, (⇒ ((@IN _114934) x _66841) ((@IN _114929) (f x) _66842)))) (∀ (λ x : El _114934, (∀ (λ y : El _114934, (⇒ (∧ ((@IN _114934) x _66841) (∧ ((@IN _114934) y _66841) (= (f x) (f y)))) (= x y)))))))))));
opaque symbol <=_c_def [_114929 _114934] : Prf (= (@<=_c _114929 _114934) (λ _66841 : El (fun _114934 bool), (λ _66842 : El (fun _114929 bool), (∃ (λ f : El (fun _114934 _114929), (∧ (∀ (λ x : El _114934, (⇒ ((@IN _114934) x _66841) ((@IN _114929) (f x) _66842)))) (∀ (λ x : El _114934, (∀ (λ y : El _114934, (⇒ (∧ ((@IN _114934) x _66841) (∧ ((@IN _114934) y _66841) (= (f x) (f y)))) (= x y)))))))))))) ≔ REFL (@<=_c  _114929 _114934);
symbol <_c [_114946 _114947] : El (fun (fun _114946 bool) (fun (fun _114947 bool) bool)) ≔ (λ _66853 : El (fun _114946 bool), (λ _66854 : El (fun _114947 bool), (∧ ((@<=_c _114947 _114946) _66853 _66854) (¬ ((@<=_c _114946 _114947) _66854 _66853)))));
opaque symbol <_c_def [_114946 _114947] : Prf (= (@<_c _114946 _114947) (λ _66853 : El (fun _114946 bool), (λ _66854 : El (fun _114947 bool), (∧ ((@<=_c _114947 _114946) _66853 _66854) (¬ ((@<=_c _114946 _114947) _66854 _66853)))))) ≔ REFL (@<_c  _114946 _114947);
symbol =_c [_114995 _114998] : El (fun (fun _114998 bool) (fun (fun _114995 bool) bool)) ≔ (λ _66865 : El (fun _114998 bool), (λ _66866 : El (fun _114995 bool), (∃ (λ f : El (fun _114998 _114995), (∧ (∀ (λ x : El _114998, (⇒ ((@IN _114998) x _66865) ((@IN _114995) (f x) _66866)))) (∀ (λ y : El _114995, (⇒ ((@IN _114995) y _66866) ((@∃! _114998) (λ x : El _114998, (∧ ((@IN _114998) x _66865) (= (f x) y))))))))))));
opaque symbol =_c_def [_114995 _114998] : Prf (= (@=_c _114995 _114998) (λ _66865 : El (fun _114998 bool), (λ _66866 : El (fun _114995 bool), (∃ (λ f : El (fun _114998 _114995), (∧ (∀ (λ x : El _114998, (⇒ ((@IN _114998) x _66865) ((@IN _114995) (f x) _66866)))) (∀ (λ y : El _114995, (⇒ ((@IN _114995) y _66866) ((@∃! _114998) (λ x : El _114998, (∧ ((@IN _114998) x _66865) (= (f x) y))))))))))))) ≔ REFL (@=_c  _114995 _114998);
symbol >=_c [_115006 _115007] : El (fun (fun _115007 bool) (fun (fun _115006 bool) bool)) ≔ (λ _66877 : El (fun _115007 bool), (λ _66878 : El (fun _115006 bool), ((@<=_c _115007 _115006) _66878 _66877)));
opaque symbol >=_c_def [_115006 _115007] : Prf (= (@>=_c _115006 _115007) (λ _66877 : El (fun _115007 bool), (λ _66878 : El (fun _115006 bool), ((@<=_c _115007 _115006) _66878 _66877)))) ≔ REFL (@>=_c  _115006 _115007);
symbol >_c [_115015 _115016] : El (fun (fun _115016 bool) (fun (fun _115015 bool) bool)) ≔ (λ _66889 : El (fun _115016 bool), (λ _66890 : El (fun _115015 bool), ((@<_c _115015 _115016) _66890 _66889)));
opaque symbol >_c_def [_115015 _115016] : Prf (= (@>_c _115015 _115016) (λ _66889 : El (fun _115016 bool), (λ _66890 : El (fun _115015 bool), ((@<_c _115015 _115016) _66890 _66889)))) ≔ REFL (@>_c  _115015 _115016);
symbol COUNTABLE [_115106] : El (fun (fun _115106 bool) bool) ≔ (λ _67040 : El (fun _115106 bool), ((@>=_c _115106 num) (@UNIV num) _67040));
opaque symbol COUNTABLE_def [_115106] : Prf (= (@COUNTABLE _115106) (λ _67040 : El (fun _115106 bool), ((@>=_c _115106 num) (@UNIV num) _67040))) ≔ REFL (@COUNTABLE  _115106);
symbol sup : El (fun (fun real bool) real) ≔ (λ _67045 : El (fun real bool), ((@ε real) (λ a : El real, (∧ (∀ (λ x : El real, (⇒ ((@IN real) x _67045) (real_le x a)))) (∀ (λ b : El real, (⇒ (∀ (λ x : El real, (⇒ ((@IN real) x _67045) (real_le x b)))) (real_le a b))))))));
opaque symbol sup_def : Prf (= sup (λ _67045 : El (fun real bool), ((@ε real) (λ a : El real, (∧ (∀ (λ x : El real, (⇒ ((@IN real) x _67045) (real_le x a)))) (∀ (λ b : El real, (⇒ (∀ (λ x : El real, (⇒ ((@IN real) x _67045) (real_le x b)))) (real_le a b))))))))) ≔ REFL sup;
symbol inf : El (fun (fun real bool) real) ≔ (λ _67904 : El (fun real bool), ((@ε real) (λ a : El real, (∧ (∀ (λ x : El real, (⇒ ((@IN real) x _67904) (real_le a x)))) (∀ (λ b : El real, (⇒ (∀ (λ x : El real, (⇒ ((@IN real) x _67904) (real_le b x)))) (real_le b a))))))));
opaque symbol inf_def : Prf (= inf (λ _67904 : El (fun real bool), ((@ε real) (λ a : El real, (∧ (∀ (λ x : El real, (⇒ ((@IN real) x _67904) (real_le a x)))) (∀ (λ b : El real, (⇒ (∀ (λ x : El real, (⇒ ((@IN real) x _67904) (real_le b x)))) (real_le b a))))))))) ≔ REFL inf;
symbol has_inf : El (fun (fun real bool) (fun real bool)) ≔ (λ _69254 : El (fun real bool), (λ _69255 : El real, (∀ (λ c : El real, (= (∀ (λ x : El real, (⇒ ((@IN real) x _69254) (real_le c x)))) (real_le c _69255))))));
opaque symbol has_inf_def : Prf (= has_inf (λ _69254 : El (fun real bool), (λ _69255 : El real, (∀ (λ c : El real, (= (∀ (λ x : El real, (⇒ ((@IN real) x _69254) (real_le c x)))) (real_le c _69255))))))) ≔ REFL has_inf;
symbol has_sup : El (fun (fun real bool) (fun real bool)) ≔ (λ _69266 : El (fun real bool), (λ _69267 : El real, (∀ (λ c : El real, (= (∀ (λ x : El real, (⇒ ((@IN real) x _69266) (real_le x c)))) (real_le _69267 c))))));
opaque symbol has_sup_def : Prf (= has_sup (λ _69266 : El (fun real bool), (λ _69267 : El real, (∀ (λ c : El real, (= (∀ (λ x : El real, (⇒ ((@IN real) x _69266) (real_le x c)))) (real_le _69267 c))))))) ≔ REFL has_sup;
symbol … : El (fun num (fun num (fun num bool))) ≔ (λ _69692 : El num, (λ _69693 : El num, ((@GSPEC num) (λ GEN_PVAR_229 : El num, (∃ (λ x : El num, ((@SETSPEC num) GEN_PVAR_229 (∧ (<= _69692 x) (<= x _69693)) x)))))));
opaque symbol …_def : Prf (= … (λ _69692 : El num, (λ _69693 : El num, ((@GSPEC num) (λ GEN_PVAR_229 : El num, (∃ (λ x : El num, ((@SETSPEC num) GEN_PVAR_229 (∧ (<= _69692 x) (<= x _69693)) x)))))))) ≔ REFL …;
symbol neutral [_119565] : El (fun (fun _119565 (fun _119565 _119565)) _119565) ≔ (λ _71604 : El (fun _119565 (fun _119565 _119565)), ((@ε _119565) (λ x : El _119565, (∀ (λ y : El _119565, (∧ (= (_71604 x y) y) (= (_71604 y x) y)))))));
opaque symbol neutral_def [_119565] : Prf (= (@neutral _119565) (λ _71604 : El (fun _119565 (fun _119565 _119565)), ((@ε _119565) (λ x : El _119565, (∀ (λ y : El _119565, (∧ (= (_71604 x y) y) (= (_71604 y x) y)))))))) ≔ REFL (@neutral  _119565);
symbol monoidal [A] : El (fun (fun A (fun A A)) bool) ≔ (λ _71609 : El (fun A (fun A A)), (∧ (∀ (λ x : El A, (∀ (λ y : El A, (= (_71609 x y) (_71609 y x)))))) (∧ (∀ (λ x : El A, (∀ (λ y : El A, (∀ (λ z : El A, (= (_71609 x (_71609 y z)) (_71609 (_71609 x y) z)))))))) (∀ (λ x : El A, (= (_71609 ((@neutral A) _71609) x) x))))));
opaque symbol monoidal_def [A] : Prf (= (@monoidal A) (λ _71609 : El (fun A (fun A A)), (∧ (∀ (λ x : El A, (∀ (λ y : El A, (= (_71609 x y) (_71609 y x)))))) (∧ (∀ (λ x : El A, (∀ (λ y : El A, (∀ (λ z : El A, (= (_71609 x (_71609 y z)) (_71609 (_71609 x y) z)))))))) (∀ (λ x : El A, (= (_71609 ((@neutral A) _71609) x) x))))))) ≔ REFL (@monoidal  A);
symbol support [A B] : El (fun (fun B (fun B B)) (fun (fun A B) (fun (fun A bool) (fun A bool)))) ≔ (λ _71694 : El (fun B (fun B B)), (λ _71695 : El (fun A B), (λ _71696 : El (fun A bool), ((@GSPEC A) (λ GEN_PVAR_237 : El A, (∃ (λ x : El A, ((@SETSPEC A) GEN_PVAR_237 (∧ ((@IN A) x _71696) (¬ (= (_71695 x) ((@neutral B) _71694)))) x))))))));
opaque symbol support_def [A B] : Prf (= (@support A B) (λ _71694 : El (fun B (fun B B)), (λ _71695 : El (fun A B), (λ _71696 : El (fun A bool), ((@GSPEC A) (λ GEN_PVAR_237 : El A, (∃ (λ x : El A, ((@SETSPEC A) GEN_PVAR_237 (∧ ((@IN A) x _71696) (¬ (= (_71695 x) ((@neutral B) _71694)))) x))))))))) ≔ REFL (@support  A B);
symbol iterate [_119779 A] : El (fun (fun _119779 (fun _119779 _119779)) (fun (fun A bool) (fun (fun A _119779) _119779))) ≔ (λ _71715 : El (fun _119779 (fun _119779 _119779)), (λ _71716 : El (fun A bool), (λ _71717 : El (fun A _119779), ((@COND _119779) ((@FINITE A) ((@support A _119779) _71715 _71717 _71716)) ((@ITSET _119779 A) (λ x : El A, (λ a : El _119779, (_71715 (_71717 x) a))) ((@support A _119779) _71715 _71717 _71716) ((@neutral _119779) _71715)) ((@neutral _119779) _71715)))));
opaque symbol iterate_def [_119779 A] : Prf (= (@iterate _119779 A) (λ _71715 : El (fun _119779 (fun _119779 _119779)), (λ _71716 : El (fun A bool), (λ _71717 : El (fun A _119779), ((@COND _119779) ((@FINITE A) ((@support A _119779) _71715 _71717 _71716)) ((@ITSET _119779 A) (λ x : El A, (λ a : El _119779, (_71715 (_71717 x) a))) ((@support A _119779) _71715 _71717 _71716) ((@neutral _119779) _71715)) ((@neutral _119779) _71715)))))) ≔ REFL (@iterate  _119779 A);
symbol iterato [A K] : El (fun (fun A bool) (fun A (fun (fun A (fun A A)) (fun (fun K (fun K bool)) (fun (fun K bool) (fun (fun K A) A)))))) ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (fun A bool) (fun A (fun (fun A (fun A A)) (fun (fun K (fun K bool)) (fun (fun K bool) (fun (fun K A) A)))))))) (λ itty : El (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (fun A bool) (fun A (fun (fun A (fun A A)) (fun (fun K (fun K bool)) (fun (fun K bool) (fun (fun K A) A))))))), (∀ (λ _80078 : El (prod num (prod num (prod num (prod num (prod num (prod num num)))))), (∀ (λ dom : El (fun A bool), (∀ (λ neut : El A, (∀ (λ op : El (fun A (fun A A)), (∀ (λ <<= : El (fun K (fun K bool)), (∀ (λ k : El (fun K bool), (∀ (λ f : El (fun K A), (= (itty _80078 dom neut op <<= k f) ((@COND A) (∧ ((@FINITE K) ((@GSPEC K) (λ GEN_PVAR_263 : El K, (∃ (λ i : El K, ((@SETSPEC K) GEN_PVAR_263 (∧ ((@IN K) i k) ((@IN A) (f i) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A))))) i)))))) (¬ (= ((@GSPEC K) (λ GEN_PVAR_264 : El K, (∃ (λ i : El K, ((@SETSPEC K) GEN_PVAR_264 (∧ ((@IN K) i k) ((@IN A) (f i) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A))))) i))))) (@EMPTY K)))) ((@LET K A) (λ i : El K, ((@LET_END A) (op (f i) (itty _80078 dom neut op <<= ((@GSPEC K) (λ GEN_PVAR_265 : El K, (∃ (λ j : El K, ((@SETSPEC K) GEN_PVAR_265 (∧ ((@IN K) j ((@DELETE K) k i)) ((@IN A) (f j) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A))))) j))))) f)))) ((@COND K) (∃ (λ i : El K, (∧ ((@IN K) i k) (∧ ((@IN A) (f i) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A)))) (∀ (λ j : El K, (⇒ (∧ (<<= j i) (∧ ((@IN K) j k) ((@IN A) (f j) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A)))))) (= j i)))))))) ((@ε K) (λ i : El K, (∧ ((@IN K) i k) (∧ ((@IN A) (f i) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A)))) (∀ (λ j : El K, (⇒ (∧ (<<= j i) (∧ ((@IN K) j k) ((@IN A) (f j) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A)))))) (= j i)))))))) ((@ε K) (λ i : El K, (∧ ((@IN K) i k) ((@IN A) (f i) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A))))))))) neut))))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))))))))));
opaque symbol iterato_def [A K] : Prf (= (@iterato A K) ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (fun A bool) (fun A (fun (fun A (fun A A)) (fun (fun K (fun K bool)) (fun (fun K bool) (fun (fun K A) A)))))))) (λ itty : El (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (fun A bool) (fun A (fun (fun A (fun A A)) (fun (fun K (fun K bool)) (fun (fun K bool) (fun (fun K A) A))))))), (∀ (λ _80078 : El (prod num (prod num (prod num (prod num (prod num (prod num num)))))), (∀ (λ dom : El (fun A bool), (∀ (λ neut : El A, (∀ (λ op : El (fun A (fun A A)), (∀ (λ <<= : El (fun K (fun K bool)), (∀ (λ k : El (fun K bool), (∀ (λ f : El (fun K A), (= (itty _80078 dom neut op <<= k f) ((@COND A) (∧ ((@FINITE K) ((@GSPEC K) (λ GEN_PVAR_263 : El K, (∃ (λ i : El K, ((@SETSPEC K) GEN_PVAR_263 (∧ ((@IN K) i k) ((@IN A) (f i) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A))))) i)))))) (¬ (= ((@GSPEC K) (λ GEN_PVAR_264 : El K, (∃ (λ i : El K, ((@SETSPEC K) GEN_PVAR_264 (∧ ((@IN K) i k) ((@IN A) (f i) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A))))) i))))) (@EMPTY K)))) ((@LET K A) (λ i : El K, ((@LET_END A) (op (f i) (itty _80078 dom neut op <<= ((@GSPEC K) (λ GEN_PVAR_265 : El K, (∃ (λ j : El K, ((@SETSPEC K) GEN_PVAR_265 (∧ ((@IN K) j ((@DELETE K) k i)) ((@IN A) (f j) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A))))) j))))) f)))) ((@COND K) (∃ (λ i : El K, (∧ ((@IN K) i k) (∧ ((@IN A) (f i) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A)))) (∀ (λ j : El K, (⇒ (∧ (<<= j i) (∧ ((@IN K) j k) ((@IN A) (f j) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A)))))) (= j i)))))))) ((@ε K) (λ i : El K, (∧ ((@IN K) i k) (∧ ((@IN A) (f i) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A)))) (∀ (λ j : El K, (⇒ (∧ (<<= j i) (∧ ((@IN K) j k) ((@IN A) (f j) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A)))))) (= j i)))))))) ((@ε K) (λ i : El K, (∧ ((@IN K) i k) ((@IN A) (f i) ((@DIFF A) dom ((@INSERT A) neut (@EMPTY A))))))))) neut))))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))))))))))) ≔ REFL (@iterato  A K);
symbol nproduct [_126105] : El (fun (fun _126105 bool) (fun (fun _126105 num) num)) ≔ ((@iterate num _126105) *);
opaque symbol nproduct_def [_126105] : Prf (= (@nproduct _126105) ((@iterate num _126105) *)) ≔ REFL (@nproduct  _126105);
symbol iproduct [_126180] : El (fun (fun _126180 bool) (fun (fun _126180 int) int)) ≔ ((@iterate int _126180) int_mul);
opaque symbol iproduct_def [_126180] : Prf (= (@iproduct _126180) ((@iterate int _126180) int_mul)) ≔ REFL (@iproduct  _126180);
symbol product [_126259] : El (fun (fun _126259 bool) (fun (fun _126259 real) real)) ≔ ((@iterate real _126259) real_mul);
opaque symbol product_def [_126259] : Prf (= (@product _126259) ((@iterate real _126259) real_mul)) ≔ REFL (@product  _126259);
symbol isum [_126338] : El (fun (fun _126338 bool) (fun (fun _126338 int) int)) ≔ ((@iterate int _126338) int_add);
opaque symbol isum_def [_126338] : Prf (= (@isum _126338) ((@iterate int _126338) int_add)) ≔ REFL (@isum  _126338);
symbol nsum [_126417] : El (fun (fun _126417 bool) (fun (fun _126417 num) num)) ≔ ((@iterate num _126417) +);
opaque symbol nsum_def [_126417] : Prf (= (@nsum _126417) ((@iterate num _126417) +)) ≔ REFL (@nsum  _126417);
symbol sum [_131408] : El (fun (fun _131408 bool) (fun (fun _131408 real) real)) ≔ ((@iterate real _131408) real_add);
opaque symbol sum_def [_131408] : Prf (= (@sum _131408) ((@iterate real _131408) real_add)) ≔ REFL (@sum  _131408);
symbol polynomial_function : El (fun (fun real real) bool) ≔ (λ _97553 : El (fun real real), (∃ (λ m : El num, (∃ (λ c : El (fun num real), (∀ (λ x : El real, (= (_97553 x) ((@sum num) (… (NUMERAL _0) m) (λ i : El num, (real_mul (c i) (real_pow x i))))))))))));
opaque symbol polynomial_function_def : Prf (= polynomial_function (λ _97553 : El (fun real real), (∃ (λ m : El num, (∃ (λ c : El (fun num real), (∀ (λ x : El real, (= (_97553 x) ((@sum num) (… (NUMERAL _0) m) (λ i : El num, (real_mul (c i) (real_pow x i))))))))))))) ≔ REFL polynomial_function;
symbol dimindex [A] : El (fun (fun A bool) num) ≔ (λ _97595 : El (fun A bool), ((@COND num) ((@FINITE A) (@UNIV A)) ((@CARD A) (@UNIV A)) (NUMERAL (BIT1 _0))));
opaque symbol dimindex_def [A] : Prf (= (@dimindex A) (λ _97595 : El (fun A bool), ((@COND num) ((@FINITE A) (@UNIV A)) ((@CARD A) (@UNIV A)) (NUMERAL (BIT1 _0))))) ≔ REFL (@dimindex  A);
symbol finite_index [A] : El (fun num (finite_image A));
symbol dest_finite_image [A] : El (fun (finite_image A) num);
symbol mk_cart [A B] : El (fun (fun (finite_image B) A) (cart A B));
symbol dest_cart [A B] : El (fun (cart A B) (fun (finite_image B) A));
symbol ﹩ [_139760 _139770] : El (fun (cart _139760 _139770) (fun num _139760)) ≔ (λ _98029 : El (cart _139760 _139770), (λ _98030 : El num, ((@dest_cart _139760 _139770) _98029 ((@finite_index _139770) _98030))));
opaque symbol ﹩_def [_139760 _139770] : Prf (= (@﹩ _139760 _139770) (λ _98029 : El (cart _139760 _139770), (λ _98030 : El num, ((@dest_cart _139760 _139770) _98029 ((@finite_index _139770) _98030))))) ≔ REFL (@﹩  _139760 _139770);
symbol lambda [A B] : El (fun (fun num A) (cart A B)) ≔ (λ _98065 : El (fun num A), ((@ε (cart A B)) (λ f : El (cart A B), (∀ (λ i : El num, (⇒ (∧ (<= (NUMERAL (BIT1 _0)) i) (<= i ((@dimindex B) (@UNIV B)))) (= ((@﹩ A B) f i) (_98065 i))))))));
opaque symbol lambda_def [A B] : Prf (= (@lambda A B) (λ _98065 : El (fun num A), ((@ε (cart A B)) (λ f : El (cart A B), (∀ (λ i : El num, (⇒ (∧ (<= (NUMERAL (BIT1 _0)) i) (<= i ((@dimindex B) (@UNIV B)))) (= ((@﹩ A B) f i) (_98065 i))))))))) ≔ REFL (@lambda  A B);
symbol mk_finite_sum [A B] : El (fun num (finite_sum A B));
symbol dest_finite_sum [A B] : El (fun (finite_sum A B) num);
symbol pastecart [A M N] : El (fun (cart A M) (fun (cart A N) (cart A (finite_sum M N)))) ≔ (λ _98356 : El (cart A M), (λ _98357 : El (cart A N), ((@lambda A (finite_sum M N)) (λ i : El num, ((@COND A) (<= i ((@dimindex M) (@UNIV M))) ((@﹩ A M) _98356 i) ((@﹩ A N) _98357 (- i ((@dimindex M) (@UNIV M)))))))));
opaque symbol pastecart_def [A M N] : Prf (= (@pastecart A M N) (λ _98356 : El (cart A M), (λ _98357 : El (cart A N), ((@lambda A (finite_sum M N)) (λ i : El num, ((@COND A) (<= i ((@dimindex M) (@UNIV M))) ((@﹩ A M) _98356 i) ((@﹩ A N) _98357 (- i ((@dimindex M) (@UNIV M)))))))))) ≔ REFL (@pastecart  A M N);
symbol fstcart [A M N] : El (fun (cart A (finite_sum M N)) (cart A M)) ≔ (λ _98368 : El (cart A (finite_sum M N)), ((@lambda A M) (λ i : El num, ((@﹩ A (finite_sum M N)) _98368 i))));
opaque symbol fstcart_def [A M N] : Prf (= (@fstcart A M N) (λ _98368 : El (cart A (finite_sum M N)), ((@lambda A M) (λ i : El num, ((@﹩ A (finite_sum M N)) _98368 i))))) ≔ REFL (@fstcart  A M N);
symbol sndcart [A M N] : El (fun (cart A (finite_sum M N)) (cart A N)) ≔ (λ _98373 : El (cart A (finite_sum M N)), ((@lambda A N) (λ i : El num, ((@﹩ A (finite_sum M N)) _98373 (+ i ((@dimindex M) (@UNIV M)))))));
opaque symbol sndcart_def [A M N] : Prf (= (@sndcart A M N) (λ _98373 : El (cart A (finite_sum M N)), ((@lambda A N) (λ i : El num, ((@﹩ A (finite_sum M N)) _98373 (+ i ((@dimindex M) (@UNIV M)))))))) ≔ REFL (@sndcart  A M N);
symbol mk_finite_diff [A B] : El (fun num (finite_diff A B));
symbol dest_finite_diff [A B] : El (fun (finite_diff A B) num);
symbol mk_finite_prod [A B] : El (fun num (finite_prod A B));
symbol dest_finite_prod [A B] : El (fun (finite_prod A B) num);
symbol _mk_tybit0 [A] : El (fun (recspace (finite_sum A A)) (tybit0 A));
symbol _dest_tybit0 [A] : El (fun (tybit0 A) (recspace (finite_sum A A)));
symbol _103783 [A] : El (fun (finite_sum A A) (tybit0 A)) ≔ (λ a : El (finite_sum A A), ((@_mk_tybit0 A) ((λ a' : El (finite_sum A A), ((@CONSTR (finite_sum A A)) (NUMERAL _0) a' (λ n : El num, (@BOTTOM (finite_sum A A))))) a)));
opaque symbol _103783_def [A] : Prf (= (@_103783 A) (λ a : El (finite_sum A A), ((@_mk_tybit0 A) ((λ a' : El (finite_sum A A), ((@CONSTR (finite_sum A A)) (NUMERAL _0) a' (λ n : El num, (@BOTTOM (finite_sum A A))))) a)))) ≔ REFL (@_103783  A);
symbol mktybit0 [A] : El (fun (finite_sum A A) (tybit0 A)) ≔ (@_103783 A);
opaque symbol mktybit0_def [A] : Prf (= (@mktybit0 A) (@_103783 A)) ≔ REFL (@mktybit0  A);
symbol _mk_tybit1 [A] : El (fun (recspace (finite_sum (finite_sum A A) 1)) (tybit1 A));
symbol _dest_tybit1 [A] : El (fun (tybit1 A) (recspace (finite_sum (finite_sum A A) 1)));
symbol _103802 [A] : El (fun (finite_sum (finite_sum A A) 1) (tybit1 A)) ≔ (λ a : El (finite_sum (finite_sum A A) 1), ((@_mk_tybit1 A) ((λ a' : El (finite_sum (finite_sum A A) 1), ((@CONSTR (finite_sum (finite_sum A A) 1)) (NUMERAL _0) a' (λ n : El num, (@BOTTOM (finite_sum (finite_sum A A) 1))))) a)));
opaque symbol _103802_def [A] : Prf (= (@_103802 A) (λ a : El (finite_sum (finite_sum A A) 1), ((@_mk_tybit1 A) ((λ a' : El (finite_sum (finite_sum A A) 1), ((@CONSTR (finite_sum (finite_sum A A) 1)) (NUMERAL _0) a' (λ n : El num, (@BOTTOM (finite_sum (finite_sum A A) 1))))) a)))) ≔ REFL (@_103802  A);
symbol mktybit1 [A] : El (fun (finite_sum (finite_sum A A) 1) (tybit1 A)) ≔ (@_103802 A);
opaque symbol mktybit1_def [A] : Prf (= (@mktybit1 A) (@_103802 A)) ≔ REFL (@mktybit1  A);
symbol vector [A N] : El (fun (list A) (cart A N)) ≔ (λ _105592 : El (list A), ((@lambda A N) (λ i : El num, ((@EL A) (- i (NUMERAL (BIT1 _0))) _105592))));
opaque symbol vector_def [A N] : Prf (= (@vector A N) (λ _105592 : El (list A), ((@lambda A N) (λ i : El num, ((@EL A) (- i (NUMERAL (BIT1 _0))) _105592))))) ≔ REFL (@vector  A N);
symbol PCROSS [A M N] : El (fun (fun (cart A M) bool) (fun (fun (cart A N) bool) (fun (cart A (finite_sum M N)) bool))) ≔ (λ _105619 : El (fun (cart A M) bool), (λ _105620 : El (fun (cart A N) bool), ((@GSPEC (cart A (finite_sum M N))) (λ GEN_PVAR_361 : El (cart A (finite_sum M N)), (∃ (λ x : El (cart A M), (∃ (λ y : El (cart A N), ((@SETSPEC (cart A (finite_sum M N))) GEN_PVAR_361 (∧ ((@IN (cart A M)) x _105619) ((@IN (cart A N)) y _105620)) ((@pastecart A M N) x y))))))))));
opaque symbol PCROSS_def [A M N] : Prf (= (@PCROSS A M N) (λ _105619 : El (fun (cart A M) bool), (λ _105620 : El (fun (cart A N) bool), ((@GSPEC (cart A (finite_sum M N))) (λ GEN_PVAR_361 : El (cart A (finite_sum M N)), (∃ (λ x : El (cart A M), (∃ (λ y : El (cart A N), ((@SETSPEC (cart A (finite_sum M N))) GEN_PVAR_361 (∧ ((@IN (cart A M)) x _105619) ((@IN (cart A N)) y _105620)) ((@pastecart A M N) x y))))))))))) ≔ REFL (@PCROSS  A M N);
symbol CASEWISE [_143118 _143154 _143158 _143159] : El (fun (list (prod (fun _143154 _143158) (fun _143159 (fun _143154 _143118)))) (fun _143159 (fun _143158 _143118))) ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun (list (prod (fun _143154 _143158) (fun _143159 (fun _143154 _143118)))) (fun _143159 (fun _143158 _143118))))) (λ CASEWISE' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun (list (prod (fun _143154 _143158) (fun _143159 (fun _143154 _143118)))) (fun _143159 (fun _143158 _143118)))), (∀ (λ _106222 : El (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))), (∧ (∀ (λ f : El _143159, (∀ (λ x : El _143158, (= (CASEWISE' _106222 (@NIL (prod (fun _143154 _143158) (fun _143159 (fun _143154 _143118)))) f x) ((@ε _143118) (λ y : El _143118, T))))))) (∀ (λ h : El (prod (fun _143154 _143158) (fun _143159 (fun _143154 _143118))), (∀ (λ t : El (list (prod (fun _143154 _143158) (fun _143159 (fun _143154 _143118)))), (∀ (λ f : El _143159, (∀ (λ x : El _143158, (= (CASEWISE' _106222 ((@CONS (prod (fun _143154 _143158) (fun _143159 (fun _143154 _143118)))) h t) f x) ((@COND _143118) (∃ (λ y : El _143154, (= ((@FST (fun _143154 _143158) (fun _143159 (fun _143154 _143118))) h y) x))) ((@SND (fun _143154 _143158) (fun _143159 (fun _143154 _143118))) h f ((@ε _143154) (λ y : El _143154, (= ((@FST (fun _143154 _143158) (fun _143159 (fun _143154 _143118))) h y) x)))) (CASEWISE' _106222 t f x))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0))))))))))))))));
opaque symbol CASEWISE_def [_143118 _143154 _143158 _143159] : Prf (= (@CASEWISE _143118 _143154 _143158 _143159) ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun (list (prod (fun _143154 _143158) (fun _143159 (fun _143154 _143118)))) (fun _143159 (fun _143158 _143118))))) (λ CASEWISE' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun (list (prod (fun _143154 _143158) (fun _143159 (fun _143154 _143118)))) (fun _143159 (fun _143158 _143118)))), (∀ (λ _106222 : El (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))), (∧ (∀ (λ f : El _143159, (∀ (λ x : El _143158, (= (CASEWISE' _106222 (@NIL (prod (fun _143154 _143158) (fun _143159 (fun _143154 _143118)))) f x) ((@ε _143118) (λ y : El _143118, T))))))) (∀ (λ h : El (prod (fun _143154 _143158) (fun _143159 (fun _143154 _143118))), (∀ (λ t : El (list (prod (fun _143154 _143158) (fun _143159 (fun _143154 _143118)))), (∀ (λ f : El _143159, (∀ (λ x : El _143158, (= (CASEWISE' _106222 ((@CONS (prod (fun _143154 _143158) (fun _143159 (fun _143154 _143118)))) h t) f x) ((@COND _143118) (∃ (λ y : El _143154, (= ((@FST (fun _143154 _143158) (fun _143159 (fun _143154 _143118))) h y) x))) ((@SND (fun _143154 _143158) (fun _143159 (fun _143154 _143118))) h f ((@ε _143154) (λ y : El _143154, (= ((@FST (fun _143154 _143158) (fun _143159 (fun _143154 _143118))) h y) x)))) (CASEWISE' _106222 t f x))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0))))))))))))))))) ≔ REFL (@CASEWISE  _143118 _143154 _143158 _143159);
symbol admissible [_143449 _143452 _143456 _143457 _143462] : El (fun (fun _143456 (fun _143449 bool)) (fun (fun (fun _143456 _143452) (fun _143462 bool)) (fun (fun _143462 _143449) (fun (fun (fun _143456 _143452) (fun _143462 _143457)) bool)))) ≔ (λ _107289 : El (fun _143456 (fun _143449 bool)), (λ _107290 : El (fun (fun _143456 _143452) (fun _143462 bool)), (λ _107291 : El (fun _143462 _143449), (λ _107292 : El (fun (fun _143456 _143452) (fun _143462 _143457)), (∀ (λ f : El (fun _143456 _143452), (∀ (λ g : El (fun _143456 _143452), (∀ (λ a : El _143462, (⇒ (∧ (_107290 f a) (∧ (_107290 g a) (∀ (λ z : El _143456, (⇒ (_107289 z (_107291 a)) (= (f z) (g z))))))) (= (_107292 f a) (_107292 g a)))))))))))));
opaque symbol admissible_def [_143449 _143452 _143456 _143457 _143462] : Prf (= (@admissible _143449 _143452 _143456 _143457 _143462) (λ _107289 : El (fun _143456 (fun _143449 bool)), (λ _107290 : El (fun (fun _143456 _143452) (fun _143462 bool)), (λ _107291 : El (fun _143462 _143449), (λ _107292 : El (fun (fun _143456 _143452) (fun _143462 _143457)), (∀ (λ f : El (fun _143456 _143452), (∀ (λ g : El (fun _143456 _143452), (∀ (λ a : El _143462, (⇒ (∧ (_107290 f a) (∧ (_107290 g a) (∀ (λ z : El _143456, (⇒ (_107289 z (_107291 a)) (= (f z) (g z))))))) (= (_107292 f a) (_107292 g a)))))))))))))) ≔ REFL (@admissible  _143449 _143452 _143456 _143457 _143462);
symbol tailadmissible [A B P] : El (fun (fun A (fun A bool)) (fun (fun (fun A B) (fun P bool)) (fun (fun P A) (fun (fun (fun A B) (fun P B)) bool)))) ≔ (λ _107321 : El (fun A (fun A bool)), (λ _107322 : El (fun (fun A B) (fun P bool)), (λ _107323 : El (fun P A), (λ _107324 : El (fun (fun A B) (fun P B)), (∃ (λ P' : El (fun (fun A B) (fun P bool)), (∃ (λ G : El (fun (fun A B) (fun P A)), (∃ (λ H : El (fun (fun A B) (fun P B)), (∧ (∀ (λ f : El (fun A B), (∀ (λ a : El P, (∀ (λ y : El A, (⇒ (∧ (P' f a) (_107321 y (G f a))) (_107321 y (_107323 a))))))))) (∧ (∀ (λ f : El (fun A B), (∀ (λ g : El (fun A B), (∀ (λ a : El P, (⇒ (∀ (λ z : El A, (⇒ (_107321 z (_107323 a)) (= (f z) (g z))))) (∧ (= (P' f a) (P' g a)) (∧ (= (G f a) (G g a)) (= (H f a) (H g a))))))))))) (∀ (λ f : El (fun A B), (∀ (λ a : El P, (⇒ (_107322 f a) (= (_107324 f a) ((@COND B) (P' f a) (f (G f a)) (H f a))))))))))))))))))));
opaque symbol tailadmissible_def [A B P] : Prf (= (@tailadmissible A B P) (λ _107321 : El (fun A (fun A bool)), (λ _107322 : El (fun (fun A B) (fun P bool)), (λ _107323 : El (fun P A), (λ _107324 : El (fun (fun A B) (fun P B)), (∃ (λ P' : El (fun (fun A B) (fun P bool)), (∃ (λ G : El (fun (fun A B) (fun P A)), (∃ (λ H : El (fun (fun A B) (fun P B)), (∧ (∀ (λ f : El (fun A B), (∀ (λ a : El P, (∀ (λ y : El A, (⇒ (∧ (P' f a) (_107321 y (G f a))) (_107321 y (_107323 a))))))))) (∧ (∀ (λ f : El (fun A B), (∀ (λ g : El (fun A B), (∀ (λ a : El P, (⇒ (∀ (λ z : El A, (⇒ (_107321 z (_107323 a)) (= (f z) (g z))))) (∧ (= (P' f a) (P' g a)) (∧ (= (G f a) (G g a)) (= (H f a) (H g a))))))))))) (∀ (λ f : El (fun A B), (∀ (λ a : El P, (⇒ (_107322 f a) (= (_107324 f a) ((@COND B) (P' f a) (f (G f a)) (H f a))))))))))))))))))))) ≔ REFL (@tailadmissible  A B P);
symbol superadmissible [_143606 _143608 _143614] : El (fun (fun _143606 (fun _143606 bool)) (fun (fun (fun _143606 _143608) (fun _143614 bool)) (fun (fun _143614 _143606) (fun (fun (fun _143606 _143608) (fun _143614 _143608)) bool)))) ≔ (λ _107353 : El (fun _143606 (fun _143606 bool)), (λ _107354 : El (fun (fun _143606 _143608) (fun _143614 bool)), (λ _107355 : El (fun _143614 _143606), (λ _107356 : El (fun (fun _143606 _143608) (fun _143614 _143608)), (⇒ ((@admissible _143606 _143608 _143606 bool _143614) _107353 (λ f : El (fun _143606 _143608), (λ a : El _143614, T)) _107355 _107354) ((@tailadmissible _143606 _143608 _143614) _107353 _107354 _107355 _107356))))));
opaque symbol superadmissible_def [_143606 _143608 _143614] : Prf (= (@superadmissible _143606 _143608 _143614) (λ _107353 : El (fun _143606 (fun _143606 bool)), (λ _107354 : El (fun (fun _143606 _143608) (fun _143614 bool)), (λ _107355 : El (fun _143614 _143606), (λ _107356 : El (fun (fun _143606 _143608) (fun _143614 _143608)), (⇒ ((@admissible _143606 _143608 _143606 bool _143614) _107353 (λ f : El (fun _143606 _143608), (λ a : El _143614, T)) _107355 _107354) ((@tailadmissible _143606 _143608 _143614) _107353 _107354 _107355 _107356))))))) ≔ REFL (@superadmissible  _143606 _143608 _143614);
